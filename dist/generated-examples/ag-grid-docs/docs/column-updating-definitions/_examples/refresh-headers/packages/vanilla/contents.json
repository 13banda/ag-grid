{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["customHeader.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 1rem;\n}\n","customHeader.js":"\nclass CustomHeader  {\n    \n    \n    \n    \n    \n    \n\n    init(params) {\n        this.params = params;\n        console.log('CustomHeader.init() -> ' + this.params.column.getId());\n        this.eGui = document.createElement('div');\n        this.eGui.innerHTML = '' +\n            '<div style=\"display: flex;\">' +\n            '<span ref=\"eMenu\" class=\"ag-icon ag-icon-menu\" style=\"margin-right: 4px;\"></span>' +\n            '<div style=\"flex-grow: 1;\">' +\n            '<span ref=\"eText\" style=\"\"></span>' +\n            '</div>' +\n            '</div>';\n\n        this.eMenu = this.eGui.querySelector('[ref=\"eMenu\"]');\n        this.eText = this.eGui.querySelector('[ref=\"eText\"]');\n\n        this.menuPresent = this.params.enableMenu;\n\n        if (this.menuPresent) {\n            this.onMenuClickListener = this.onMenuClick.bind(this);\n            this.eMenu.addEventListener('click', this.onMenuClickListener);\n        } else {\n            this.eMenu.parentNode.removeChild(this.eMenu);\n        }\n\n        this.updateHeaderNameText();\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        this.params = params;\n\n        var res = this.params.enableMenu === this.menuPresent;\n\n        console.log('CustomHeader.refresh() -> ' + this.params.column.getId() + ' returning ' + res);\n\n        this.updateHeaderNameText();\n\n        return res;\n    }\n\n    updateHeaderNameText() {\n        this.eText.textContent = this.params.displayName;\n    }\n\n    onMenuClick() {\n        this.params.showColumnMenu(this.eMenu);\n    }\n\n    destroy() {\n        console.log('CustomHeader.destroy() -> ' + this.params.column.getId());\n        if (this.onMenuClickListener) {\n            this.eMenu.removeEventListener('click', this.onMenuClickListener);\n        }\n    }\n}","main.js":"let gridApi;\n\nconst gridOptions = {\n    columnDefs: [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ],\n    rowData: null,\n    defaultColDef: {\n        headerComponent: CustomHeader,\n    },\n}\n\nfunction onBtUpperNames() {\n    const columnDefs = [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ]\n    columnDefs.forEach((c) => {\n        c.headerName = c.field.toUpperCase()\n    })\n    gridApi.setGridOption('columnDefs', columnDefs)\n}\n\nfunction onBtLowerNames() {\n    const columnDefs = [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ]\n    columnDefs.forEach((c) => {\n        c.headerName = c.field\n    })\n    gridApi.setGridOption('columnDefs', columnDefs)\n}\n\nfunction onBtFilterOn() {\n    const columnDefs = [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ]\n    columnDefs.forEach((c) => {\n        c.filter = true\n    })\n    gridApi.setGridOption('columnDefs', columnDefs)\n}\n\nfunction onBtFilterOff() {\n    const columnDefs = [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ]\n    columnDefs.forEach((c) => {\n        c.filter = false\n    })\n    gridApi.setGridOption('columnDefs', columnDefs)\n}\n\nfunction onBtResizeOn() {\n    const columnDefs = [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ]\n    columnDefs.forEach((c) => {\n        c.resizable = true\n    })\n    gridApi.setGridOption('columnDefs', columnDefs)\n}\n\nfunction onBtResizeOff() {\n    const columnDefs = [\n        { field: 'athlete' },\n        { field: 'age' },\n        { field: 'country' },\n        { field: 'year' },\n        { field: 'date' },\n        { field: 'sport' },\n        { field: 'gold' },\n        { field: 'silver' },\n        { field: 'bronze' },\n        { field: 'total' },\n    ]\n    columnDefs.forEach((c) => {\n        c.resizable = false\n    })\n    gridApi.setGridOption('columnDefs', columnDefs)\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n    const gridDiv = document.querySelector('#myGrid')\n    gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n    fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n        .then(response => response.json())\n        .then(function (data) {\n            gridApi.setGridOption('rowData', data)\n        })\n})","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtUpperNames()\">Upper Header Names</button>\n        <button onclick=\"onBtLowerNames()\">Lower Lower Names</button>\n        &nbsp;&nbsp;&nbsp;\n        <button onclick=\"onBtFilterOn()\">Filter On</button>\n        <button onclick=\"onBtFilterOff()\">Filter Off</button>\n        &nbsp;&nbsp;&nbsp;\n        <button onclick=\"onBtResizeOn()\">Resize On</button>\n        <button onclick=\"onBtResizeOff()\">Resize Off</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz test-grid\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}