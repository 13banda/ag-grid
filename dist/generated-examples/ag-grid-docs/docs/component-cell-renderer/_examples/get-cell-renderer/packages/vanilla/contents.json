{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["medalCellRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}","medalCellRenderer.js":" function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nclass MedalCellRenderer  {\n    \n    \n\n    // init method gets the details of the cell to be renderer\n    init(params) {\n        this.params = params;\n        this.eGui = document.createElement('span');\n        this.eGui.textContent = new Array(params.value).fill('#').join('');\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    medalUserFunction() {\n        console.log(`user function called for medal column: row = ${this.params.node.rowIndex}, column = ${_optionalChain([this, 'access', _ => _.params, 'access', _2 => _2.column, 'optionalAccess', _3 => _3.getId, 'call', _4 => _4()])}`);\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n\n","main.js":"const columnDefs = [\n  { field: 'athlete', width: 150 },\n  { field: 'country', width: 150 },\n  { field: 'year', width: 100 },\n  { field: 'gold', width: 100, cellRenderer: MedalCellRenderer },\n  { field: 'silver', width: 100, cellRenderer: MedalCellRenderer },\n  { field: 'bronze', width: 100, cellRenderer: MedalCellRenderer },\n  { field: 'total', editable: false, valueGetter: (params) => params.data.gold + params.data.silver + params.data.bronze, width: 100 },\n]\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n}\n\nfunction onCallGold() {\n  console.log('=========> calling all gold')\n  // pass in list of columns, here it's gold only\n  const params = { columns: ['gold'] }\n  const instances = gridApi.getCellRendererInstances(params) \n  instances.forEach(instance => {\n    instance.medalUserFunction()\n  })\n}\n\nfunction onFirstRowGold() {\n  console.log('=========> calling gold row one')\n  // pass in one column and one row to identify one cell\n  const firstRowNode = gridApi.getDisplayedRowAtIndex(0)\n  const params = { columns: ['gold'], rowNodes: [firstRowNode] }\n\n  const instances = gridApi.getCellRendererInstances(params) \n  instances.forEach(instance => {\n    instance.medalUserFunction()\n  })\n}\n\nfunction onCallAllCells() {\n  console.log('=========> calling everything')\n  // no params, goes through all rows and columns where cell renderer exists\n  const instances = gridApi.getCellRendererInstances() \n  instances.forEach(instance => {\n    instance.medalUserFunction()\n  })\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gridDiv = document.querySelector('#myGrid')\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n  fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n    .then(response => response.json())\n    .then(data => {\n      gridApi.setGridOption('rowData', data)\n    })\n})","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onCallGold()\">Gold</button>\n        <button onclick=\"onFirstRowGold()\">First Row Gold</button>\n        <button onclick=\"onCallAllCells()\">All Cells</button>\n    </div>\n    \n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}