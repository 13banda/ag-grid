{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["companyLogoRenderer.js","companyRenderer.js","customButtonComponent.js","missionResultRenderer.js","priceRenderer.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.logo {\n    display: block;\n    width: 25px;\n    height: auto;\n    max-height: 50%;\n    margin-right: 12px;\n    filter: brightness(1.1);\n}\n\n.imgSpan {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    align-items: center;\n}\n\n.missionSpan {\n    display: flex;\n    justify-content: center;\n    height: 100%;\n    align-items: center;\n}\n\n.missionIcon {\n    width: auto;\n    height: auto;\n}\n\n.priceIcon {\n    display: block;\n    width: 15px;\n    height: auto;\n    max-height: 50%;\n    margin-right: 2px;\n}\n","companyLogoRenderer.js":"\nclass CompanyLogoRenderer  {\n  \n\n  // Optional: Params for rendering. The same params that are passed to the cellRenderer function.\n  init(params) {\n    let companyLogo = document.createElement(\"img\")\n    companyLogo.src = `https://www.ag-grid.com/example-assets/space-company-logos/${params.value.toLowerCase()}.png`\n    companyLogo.setAttribute(\"class\", \"logo\")\n\n    this.eGui = document.createElement(\"span\")\n    this.eGui.setAttribute(\"class\", \"imgSpan\")\n    this.eGui.appendChild(companyLogo)\n  }\n\n  // Required: Return the DOM element of the component, this is what the grid puts into the cell\n  getGui() {\n    return this.eGui\n  }\n\n  // Required: Get the cell to refresh.\n  refresh(params) {\n    return false\n  }\n}\n","companyRenderer.js":"\nfunction CompanyRenderer(params) {\n    const link = `<a href=\"https://en.wikipedia.org/wiki/${params.value}\" target=\"_blank\">${params.value}</a>`\n    return link\n  }","customButtonComponent.js":"class CustomButtonComponent {\n    \n    \n    \n  \n    init() {\n      this.eGui = document.createElement(\"div\")\n      let eButton = document.createElement(\"button\")\n      eButton.className = \"btn-simple\"\n      eButton.innerText = \"Launch!\"\n      this.eventListener = () => alert(\"Mission Launched\")\n      eButton.addEventListener(\"click\", this.eventListener)\n      this.eGui.appendChild(eButton)\n    }\n  \n    getGui() {\n      return this.eGui\n    }\n  \n    refresh() {\n      return true\n    }\n  \n    destroy() {\n      if (this.eButton) {\n        this.eButton.removeEventListener(\"click\", this.eventListener)\n      }\n    }\n  }","missionResultRenderer.js":"\nclass MissionResultRenderer  {\n  \n\n  // Optional: Params for rendering. The same params that are passed to the cellRenderer function.\n  init(params) {\n    let icon = document.createElement(\"img\")\n    icon.src = `https://www.ag-grid.com/example-assets/icons/${\n      params.value ? \"tick-in-circle\" : \"cross-in-circle\"\n    }.png`\n    icon.setAttribute(\"class\", \"missionIcon\")\n\n    this.eGui = document.createElement(\"span\")\n    this.eGui.setAttribute(\"class\", \"missionSpan\")\n    this.eGui.appendChild(icon)\n  }\n\n  // Required: Return the DOM element of the component, this is what the grid puts into the cell\n  getGui() {\n    return this.eGui\n  }\n\n  // Required: Get the cell to refresh.\n  refresh(params) {\n    return false\n  }\n}\n","priceRenderer.js":"\nfunction PriceRenderer(params) {\n    let priceMultiplier = 1\n    if (params.value > 5000000) {\n      priceMultiplier = 2\n    }\n    if (params.value > 10000000) {\n      priceMultiplier = 3\n    }\n    if (params.value > 25000000) {\n      priceMultiplier = 4\n    }\n    if (params.value > 20000000) {\n      priceMultiplier = 5\n    }\n  \n    const priceSpan = document.createElement(\"span\")\n    priceSpan.setAttribute(\n      \"class\",\n      \"imgSpan\"\n    )\n    for (let i = 0; i < priceMultiplier; i++) {\n      const priceElement = document.createElement(\"img\")\n      priceElement.src = `https://www.ag-grid.com/example-assets/pound-coin-color-icon.png`\n      priceElement.setAttribute(\n        \"class\",\n        \"priceIcon\"\n      )\n      priceSpan.appendChild(priceElement)\n    }\n    return priceSpan\n  }","main.js":"// Grid API: Access to Grid API methods\nlet gridApi\n\n\n\n\n\n\n\n\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n  },\n  // Data to be displayed\n  rowData: [] ,\n  // Columns to be displayed (Should match rowData properties)\n  columnDefs: [\n    {\n      field: \"company\",\n      cellRenderer: CompanyRenderer,\n    },\n    {\n      headerName: \"Logo\",\n      field: \"company\",\n      cellRenderer: CompanyLogoRenderer,\n    },\n    {\n      headerName: \"Mission Cost\",\n      field: \"price\",\n      cellRenderer: PriceRenderer,\n    },\n    {\n      field: \"successful\",\n      headerName: \"Success\",\n      cellRenderer: MissionResultRenderer,\n    },\n    {\n      field: \"actions\",\n      headerName: \"Actions\",\n      cellRenderer: CustomButtonComponent,\n    },\n  ] ,\n}\n\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gridDiv = document.querySelector('#myGrid')\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n  fetch('https://www.ag-grid.com/example-assets/small-space-mission-data.json')\n    .then(response => response.json())\n    .then(data => {\n      gridApi.setGridOption('rowData', data)\n    })\n})\n","index.html":"<div id=\"myGrid\" style=\"height: 100%;\" class=\"ag-theme-quartz\"></div>"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}