{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":"\n.details > label {\n    margin-bottom: 10px;\n}\n.details > label:first-of-type {\n    margin-top: 10px;\n}\n.details > label:last-of-type {\n    margin-bottom: 0;\n}\n.option {\n    display: block;\n    margin: 5px 10px 5px 0;\n}\n.grid-wrapper {\n    display: flex;\n    flex: 1 1 0px;\n}\n.grid-wrapper > div {\n    width: 100%;\n    height: 100%;\n}\n.container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n.columns {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}","main.js":"const getParams = () => ({\n  processCellCallback(params) {\n    const value = params.value\n    return value === undefined ? '' : `_${value}_`\n  },\n  processRowGroupCallback(params) {\n    const { node } = params;\n\n    if (!node.footer) { return `row group: ${node.key}`; }\n    const isRootLevel = node.level === -1;\n\n    if (isRootLevel) { return 'Grand Total'; }\n    return `Sub Total (${ node.key })`;\n  },\n});\n\nlet gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    { field: \"athlete\", minWidth: 200 },\n    { field: \"country\", minWidth: 200, rowGroup: true, hide: true },\n    { field: \"sport\", minWidth: 150 },\n    { field: \"gold\", aggFunc: 'sum' }\n  ],\n\n  defaultColDef: {\n    filter: true,\n    minWidth: 150,\n    flex: 1,\n  },\n\n  groupIncludeFooter: true,\n  groupIncludeTotalFooter: true,\n\n  popupParent: document.body,\n  defaultExcelExportParams: getParams()\n}\n\nfunction onBtExport() {\n  gridApi.exportDataAsExcel(getParams())\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gridDiv = document.querySelector(\"#myGrid\")\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n  fetch(\"https://www.ag-grid.com/example-assets/small-olympic-winners.json\")\n    .then(response => response.json())\n    .then(data =>\n      gridApi.setGridOption('rowData', \n        data.filter((rec) => rec.country != null)\n      )\n    )\n})","index.html":"<div class=\"container\">\n    <div>\n        <button onclick=\"onBtExport()\" style=\"margin: 5px 0px; font-weight: bold;\">Export to Excel</button>\n    </div>\n    <div class=\"grid-wrapper\">\n        <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n    </div>\n</div>","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}