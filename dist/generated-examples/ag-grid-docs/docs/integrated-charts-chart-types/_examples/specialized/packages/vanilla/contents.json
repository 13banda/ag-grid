{"isEnterprise":true,"isIntegratedCharts":true,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["data.js","main.js"],"styleFiles":["style.css"],"files":{"style.css":".wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.button-container {\n    flex-wrap: wrap;\n}\n\n#myGrid {\n    flex: 1;\n}\n\n#myChart {\n    flex: 2;\n    min-height: 530px;\n}","data.js":"async function getData(chartType, delay = 100) {\n    return new Promise(resolve => setTimeout(() => resolve(generateData(chartType)), delay));\n}\n\nfunction generateData(chartType) {\n    switch (chartType) {\n        case 'heatmap': return generateHeatmapData();\n        case 'waterfall': return generateWaterfallData();\n    }\n}\n\nfunction generateHeatmapData() {\n    // Source: http://www.sheffieldweather.co.uk/Averages/MONTHLYAIRAVERAGE.htm\n    return [\n        { year: '2010', jan: 1.2, feb: 1.9, mar: 5.9, apr: 9.1, may: 10.9, jun: 15.2, jul: 16.2, aug: 14.9, sep: 13.4, oct: 9.5, nov: 4.9, dec: 0.4, },\n        { year: '2011', jan: 3.9, feb: 6, mar: 6.6, apr: 12, may: 12, jun: 14.2, jul: 15.8, aug: 15.8, sep: 14.9, oct: 12.2, nov: 8.9, dec: 5.4, },\n        { year: '2012', jan: 5.1, feb: 4.5, mar: 8.6, apr: 6.7, may: 11.6, jun: 13.4, jul: 15.5, aug: 16.2, sep: 12.7, oct: 8.8, nov: 6.1, dec: 4.2, },\n        { year: '2013', jan: 3.4, feb: 2.7, mar: 1.7, apr: 7.4, may: 10.6, jun: 14.1, jul: 18.4, aug: 16.8, sep: 13.3, oct: 11.7, nov: 6.2, dec: 6.3, },\n        { year: '2014', jan: 5, feb: 5.6, mar: 7.4, apr: 10.1, may: 12.2, jun: 15.3, jul: 17.9, aug: 14.9, sep: 14.4, oct: 11.4, nov: 7.8, dec: 5.2, },\n        { year: '2015', jan: 4.1, feb: 3.8, mar: 5.9, apr: 9.1, may: 10.6, jun: 13.9, jul: 15.7, aug: 15.8, sep: 12.2, oct: 10.2, nov: 8.7, dec: 8.6, },\n        { year: '2016', jan: 4.8, feb: 4.2, mar: 5.5, apr: 7, may: 11.8, jun: 14.6, jul: 16.6, aug: 16.6, sep: 15.4, oct: 10.2, nov: 5.4, dec: 6.3, },\n        { year: '2017', jan: 3.9, feb: 5.2, mar: 8, apr: 8.6, may: 12.8, jun: 15.7, jul: 16.4, aug: 15.2, sep: 13, oct: 11.9, nov: 6.5, dec: 4.7, },\n        { year: '2018', jan: 4.4, feb: 2.3, mar: 3.7, apr: 8.8, may: 13.8, jun: 16.4, jul: 19.5, aug: 17, sep: 13.4, oct: 10.3, nov: 7.4, dec: 6.4, },\n        { year: '2019', jan: 4.4, feb: 6.9, mar: 7.5, apr: 8.9, may: 11.5, jun: 14.1, jul: 17.8, aug: 17.1, sep: 13.7, oct: 9.2, nov: 5.4, dec: 5.4, },\n        { year: '2020', jan: 6.4, feb: 5.6, mar: 6.3, apr: 10.3, may: 12.8, jun: 15, jul: 15.6, aug: 17.2, sep: 13.7, oct: 9.8, nov: 8.1, dec: 4.6, },\n        { year: '2021', jan: 2.8, feb: 4.3, mar: 7.2, apr: 6.5, may: 10, jun: 16.1, jul: 18.4, aug: 16.1, sep: 16.2, oct: 11.6, nov: 7.7, dec: 5.4, },\n        { year: '2022', jan: 5.2, feb: 6.1, mar: 7.4, apr: 9.2, may: 13.3, jun: 15.5, jul: 18.5, aug: 18.4, sep: 14.5, oct: 12.1, nov: 8.4, dec: 3.6, },\n    ];\n}\n\nfunction generateWaterfallData() {\n    return [\n        { financials: 'Income\\nTax', amount: 185 },\n        { financials: 'VAT', amount: 145 },\n        { financials: 'NI', amount: 134 },\n        { financials: 'Corp\\nTax', amount: 55 },\n        { financials: 'Council\\nTax', amount: 34 },\n        { financials: 'Social\\nProtection', amount: -252 },\n        { financials: 'Health', amount: -155 },\n        { financials: 'Education', amount: -112 },\n        { financials: 'Defence', amount: -65 },\n        { financials: 'Debt\\nInterest', amount: -63 },\n        { financials: 'Housing', amount: -31 },\n    ];\n}","main.js":"let gridApi;\nlet chartRef;\n\nconst heatmapColIds = [\n  'year',\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec',\n];\nconst heatmapColDefs = [\n  { field: 'year', width: 150, chartDataType: 'category' },\n  { field: 'jan' },\n  { field: 'feb' },\n  { field: 'mar' },\n  { field: 'apr' },\n  { field: 'may' },\n  { field: 'jun' },\n  { field: 'jul' },\n  { field: 'aug' },\n  { field: 'sep' },\n  { field: 'oct' },\n  { field: 'nov' },\n  { field: 'dec' },\n];\n\nconst waterfallColIds = ['financials', 'amount'];\nconst waterfallColDefs = [\n  { field: 'financials', width: 150, chartDataType: 'category' },\n  { field: 'amount', chartDataType: 'series' },\n];\n\nconst gridOptions = {\n  columnDefs: heatmapColDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n  },\n  popupParent: document.body,\n  enableRangeSelection: true,\n  enableCharts: true,\n  chartToolPanelsDef: {\n    defaultToolPanel: 'settings'\n  },\n  onGridReady : (params) => {\n    getData('heatmap').then(rowData => params.api.setGridOption('rowData', rowData));\n  },\n  onFirstDataRendered,\n};\n\nfunction onFirstDataRendered(params) {\n  chartRef = params.api.createRangeChart({\n    chartContainer: document.querySelector('#myChart') ,\n    chartType: 'heatmap',\n    cellRange: {\n      columns: heatmapColIds,\n    },\n  });\n}\n\nfunction updateChart(chartType) {\n  getData(chartType).then((rowData) => {\n    gridApi.updateGridOptions({\n      columnDefs: chartType === 'heatmap' ? heatmapColDefs : waterfallColDefs,\n      rowData,\n    });\n    gridApi.updateChart({\n      type: 'rangeChartUpdate',\n      chartId: chartRef.chartId,\n      chartType,\n      cellRange: {\n        columns: chartType === 'heatmap' ? heatmapColIds : waterfallColIds,\n      },\n    });\n  });\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n  const gridDiv = document.querySelector('#myGrid')\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); /** DARK INTEGRATED START **/\n    const isInitialModeDark = () => {\n            const attr = document.documentElement.getAttribute('data-default-theme');\n            return attr ? attr.endsWith('-dark') : false;\n        };\n      \n        const updateChartThemes = (isDark) => {           \n            const themes = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];            \n            const currentThemes = gridApi.getGridOption('chartThemes');                    \n            const customTheme = currentThemes && currentThemes.some(theme => theme.startsWith('my-custom-theme'));\n            \n            let modifiedThemes = customTheme\n                ? (isDark ? ['my-custom-theme-dark', 'my-custom-theme-light'] : ['my-custom-theme-light', 'my-custom-theme-dark'])\n                : Array.from(new Set(themes.map((theme) => theme + (isDark ? '-dark' : ''))));                      \n\n            // updating the 'chartThemes' grid option will cause the chart to reactively update!\n            gridApi.setGridOption('chartThemes', modifiedThemes);\n        };\n\n        // update chart themes when example first loads\n        updateChartThemes(isInitialModeDark());\n\n        const handleColorSchemeChange = (event) => {\n            const { darkMode } = event.detail;\n            updateChartThemes(darkMode);\n        }\n\n        // listen for user-triggered dark mode changes (not removing listener is fine here!)\n        document.addEventListener('color-scheme-change', handleColorSchemeChange);\n    /** DARK INTEGRATED END **/\n})","index.html":"<div class=\"wrapper\">\n    <div class=\"button-container\">\n        <button onclick=\"updateChart('heatmap')\">Heatmap</button>\n        <button onclick=\"updateChart('waterfall')\">Waterfall</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n    <div id=\"myChart\" class=\"ag-theme-quartz\"></div>\n</div>"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}