{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"index.jsx","mainFileName":"index.jsx","styleFiles":[],"files":{"fakeServer.js":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nexport function FakeServer(allData) {\n    var processedData = processData(allData);\n    alasql.options.cache = false;\n\n    return {\n        getData: function(request) {\n            const hasFilter = request.filterModel && Object.keys(request.filterModel).length;\n            var results = executeQuery(request, hasFilter);\n\n            if (hasFilter) {\n                results = recursiveFilter(request, results);\n            }\n\n            return {\n                success: true,\n                rows: results,\n                lastRow: getLastRowIndex(request)\n            };\n        },\n        getDates: function() {\n            var sql = 'SELECT DISTINCT startDate FROM ? ORDER BY startDate ASC';\n\n            return alasql(sql, [processedData]).map(row => row.startDate);\n        },\n        getEmployees: function() {\n            // get children only\n            var sql = 'SELECT DISTINCT dataPath FROM ? WHERE underlings = FALSE ORDER BY dataPath ASC';\n\n            return alasql(sql, [processedData]).map(row => row.dataPath ? row.dataPath.split(',') : null);\n        }\n    };\n\n    function executeQuery(request, ignoreLimit) {\n        var sql = buildSql(request, ignoreLimit);\n\n        console.log('[FakeServer] - about to execute query:', sql);\n\n        return alasql(sql, [processedData]);\n    }\n\n    function buildSql(request, ignoreLimit) {\n        return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request, ignoreLimit);\n    }\n\n    function whereSql(request) {\n        var whereParts = [];\n\n        var filterModel = request.filterModel;\n\n        if (filterModel && Object.keys(filterModel).length) {\n            Object.keys(filterModel).forEach(function(key) {\n                var item = filterModel[key];\n                if (key === 'ag-Grid-AutoColumn') {\n                    key = 'dataPath'\n                }\n\n                switch (item.filterType) {\n                    case 'text':\n                        whereParts.push(createFilterSql(textFilterMapper, key, item));\n                        break;\n                    case 'number':\n                        whereParts.push(createFilterSql(numberFilterMapper, key, item));\n                        break;\n                    case 'set':\n                        whereParts.push(createSetFilterSql(key, item.values));\n                        break;\n                    default:\n                        console.log('unknown filter type: ' + item.filterType);\n                        break;\n                }\n            });\n        } else {\n            whereParts.push(\"(parentPath = '\" + request.groupKeys.join(',') + \"')\");\n        }\n\n        if (whereParts.length > 0) {\n            return ' WHERE ' + whereParts.join(' AND ');\n        }\n\n        return '';\n    }\n\n    function createSetFilterSql(key, values) {\n        return key + ' IN (\\'' + values.join(\"', '\") + '\\')'\n    }\n\n    function createFilterSql(mapper, key, item) {\n        if (item.operator) {\n            const conditions = item.conditions.map(condition => mapper(key, condition));\n\n            return '(' + conditions.join(' ' + item.operator + ' ') + ')';\n        }\n\n        return mapper(key, item);\n    }\n\n    function textFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + \" = '\" + item.filter + \"'\";\n            case 'notEqual':\n                return key + \" != '\" + item.filter + \"'\";\n            case 'contains':\n                return key + \" LIKE '%\" + item.filter + \"%'\";\n            case 'notContains':\n                return key + \" NOT LIKE '%\" + item.filter + \"%'\";\n            case 'startsWith':\n                return key + \" LIKE '\" + item.filter + \"%'\";\n            case 'endsWith':\n                return key + \" LIKE '%\" + item.filter + \"'\";\n            case 'blank':\n                return key + \" IS NULL or \" + key + \" = ''\";\n            case 'notBlank':\n                return key + \" IS NOT NULL and \" + key + \" != ''\";\n            default:\n                console.log('unknown text filter type: ' + item.type);\n        }\n    }\n\n    function numberFilterMapper(key, item) {\n        switch (item.type) {\n            case 'equals':\n                return key + ' = ' + item.filter;\n            case 'notEqual':\n                return key + ' != ' + item.filter;\n            case 'greaterThan':\n                return key + ' > ' + item.filter;\n            case 'greaterThanOrEqual':\n                return key + ' >= ' + item.filter;\n            case 'lessThan':\n                return key + ' < ' + item.filter;\n            case 'lessThanOrEqual':\n                return key + ' <= ' + item.filter;\n            case 'inRange':\n                return '(' + key + ' >= ' + item.filter + ' and ' + key + ' <= ' + item.filterTo + ')';\n            case 'blank':\n                return key + \" IS NULL\";\n            case 'notBlank':\n                return key + \" IS NOT NULL\";\n            default:\n                console.log('unknown number filter type: ' + item.type);\n        }\n    }\n\n    function orderBySql(request) {\n        var sortModel = request.sortModel;\n\n        if (sortModel.length === 0) return '';\n\n        var sorts = sortModel.map(function(s) {\n            return s.colId + ' ' + s.sort.toUpperCase();\n        });\n\n        return ' ORDER BY ' + sorts.join(', ');\n    }\n\n    function limitSql(request, ignoreLimit) {\n        if (ignoreLimit || request.endRow == undefined || request.startRow == undefined) { return ''; }\n        var blockSize = request.endRow - request.startRow;\n\n        return ' LIMIT ' + blockSize + ' OFFSET ' + request.startRow;\n    }\n\n    function getLastRowIndex(request) {\n        const hasFilter = request.filterModel && Object.keys(request.filterModel).length;\n        var results = executeQuery(request, hasFilter);\n\n        if (hasFilter) {\n            results = recursiveFilter(request, results);\n        }\n        return results.length;\n    }\n\n    function processData(data) {\n        const flattenedData = [];\n        const flattenRowRecursive = (row, parentPath) => {\n            let startDate = null;\n            if (row.startDate) {\n                const dateParts = row.startDate.split('/');\n                startDate = new Date(parseInt(dateParts[2]), dateParts[1] - 1, dateParts[0]).toISOString();\n            }\n            const dataPath = [...parentPath, row.employeeName];\n            flattenedData.push({...row, dataPath: dataPath.join(','), parentPath: parentPath.join(','), startDate, underlings: !!row.underlings});\n            if (row.underlings) {\n                row.underlings.forEach((underling) => flattenRowRecursive(underling, dataPath));\n            }\n        };\n        data.forEach(row => flattenRowRecursive(row, []));\n        return flattenedData;\n    }\n\n    function recursiveFilter(request, results) {\n        // tree data filter returns rows where the row itself matches, parent matches, or a child matches.\n        // matches for row itself\n        const allResults = [...results];\n        // parents of matching rows\n        recursiveFilterParentMatches(allResults, results);\n        // children of matching rows\n        recursiveFilterChildMatches(allResults, results);\n\n        const requestPath = request.groupKeys.join(',');\n        const sql = \"SELECT DISTINCT processedData.* FROM ? processedData INNER JOIN ? allResults ON processedData.dataPath = allResults.dataPath WHERE parentPath = '\" + requestPath + \"'\" + orderBySql(request) + limitSql(request);\n        return alasql(sql, [processedData, allResults]);\n    }\n\n    function recursiveFilterParentMatches(allResults, childResults) {\n        if (!childResults.length) {\n            return;\n        }\n        const sql = 'SELECT DISTINCT processedData.* FROM ? processedData INNER JOIN ? parentResults ON processedData.dataPath = parentResults.parentPath';\n        const newMatches = alasql(sql, [processedData, childResults]).filter(newResult => !allResults.some(existingResult => newResult.dataPath === existingResult.dataPath));\n        allResults.push(...newMatches);\n        recursiveFilterParentMatches(allResults, newMatches);\n    }\n\n    function recursiveFilterChildMatches(allResults, parentResults) {\n        if (!parentResults.length) {\n            return;\n        }\n        const sql = 'SELECT DISTINCT processedData.* FROM ? processedData INNER JOIN ? parentResults ON processedData.parentPath = parentResults.dataPath';\n        const newMatches = alasql(sql, [processedData, parentResults]).filter(newResult => !allResults.some(existingResult => newResult.dataPath === existingResult.dataPath));\n        allResults.push(...newMatches);\n        recursiveFilterChildMatches(allResults, newMatches);\n    }\n}\n","index.jsx":"\n'use strict';\n\nimport React, { useCallback, useMemo, useRef, useState, StrictMode} from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-charts-enterprise';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport { FakeServer } from './fakeServer.js';\n\n\n\nconst valueGetter = (params) => {\n    // server is returning a string, so need to convert to `Date`.\n    // could instead do this inside `IServerSideDatasource.getRows`\n    return params.data.startDate ? new Date(params.data.startDate) : null;\n}\n\nconst cellValueFormatter = (params) => {\n    return params.value ? params.value.toLocaleDateString() : null;\n}\n\nconst floatingFilterValueFormatter = (params) => {\n    return params.value ? params.value.toLocaleDateString() : '(Blanks)';\n}\n\nconst dateKeyCreator = (params) => {\n    // this is what is being sent in the Filter Model to the server, so want the matching format\n    return params.value ? params.value.toISOString() : null;\n}\n\nconst treeDataKeyCreator = (params) => {\n    // tree data group filter value is a string[], so convert to a unique string\n    return params.value ? params.value.join(',') : null;\n}\n\nvar fakeServer;\n\nconst getServerSideDatasource = (server) => {\n    return {\n        getRows: (params) => {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            // simulating real server call with a 500ms delay\n            setTimeout(() => {\n                // get data for request from our fake server\n                var response = server.getData(params.request);\n                if (response.success) {\n                    // supply rows for requested block to grid\n                    params.success({ rowData: response.rows, rowCount: response.lastRow });\n                }\n                else {\n                    params.fail();\n                }\n            }, 500);\n        },\n    };\n}\n\nconst getDatesAsync = (params) => {\n    if (!fakeServer) {\n        // wait for init\n        setTimeout(() => getDatesAsync(params), 500);\n        return;\n    }\n    var dates = fakeServer.getDates();\n    if (dates) {\n        // values need to match the cell value (what the `valueGetter` returns)\n        dates = dates.map((isoDateString) => isoDateString ? new Date(isoDateString) : isoDateString);\n    }\n    // simulating real server call with a 500ms delay\n    setTimeout(() => {\n        params.success(dates);\n    }, 500);\n}\n\nconst getEmployeesAsync = (params) => {\n    if (!fakeServer) {\n        // wait for init\n        setTimeout(() => getEmployeesAsync(params), 500);\n        return;\n    }\n    var employees = fakeServer.getEmployees();\n    // simulating real server call with a 500ms delay\n    setTimeout(() => {\n        params.success(employees);\n    }, 500);\n}\n\n\n\nconst GridExample = () => {\n    \n    const containerStyle = useMemo(() => ({ width: '100%', height: '100%' }), []);\n    const gridStyle = useMemo(() => ({height: '100%', width: '100%'}), []);\n    \n    const [columnDefs, setColumnDefs] = useState([\n    { field: 'employeeId', hide: true },\n    { field: 'employeeName', hide: true },\n    { field: 'employmentType' },\n    {\n        field: 'startDate',\n        valueGetter: valueGetter,\n        valueFormatter: cellValueFormatter,\n        filter: 'agSetColumnFilter',\n        filterParams: {\n            treeList: true,\n            excelMode: 'windows',\n            keyCreator: dateKeyCreator,\n            valueFormatter: floatingFilterValueFormatter,\n            values: getDatesAsync\n        },\n    },\n]);\n    const defaultColDef = useMemo(() => { return {\n    width: 240,\n    filter: 'agTextColumnFilter',\n    floatingFilter: true,\n    flex: 1,\n    sortable: false,\n} }, []);\n    const autoGroupColumnDef = useMemo(() => { return {\n    field: 'employeeName',\n    filter: 'agSetColumnFilter',\n    filterParams: {\n        treeList: true,\n        excelMode: 'windows',\n        keyCreator: treeDataKeyCreator,\n        values: getEmployeesAsync\n    },\n} }, []);\n    const isServerSideGroupOpenByDefault = useCallback((params) => {\n    // open first level by default\n    return params.rowNode.level === 0;\n}, []);\n    const isServerSideGroup = useCallback((dataItem) => {\n    // indicate if node is a group\n    return dataItem.underlings;\n}, []);\n    const getServerSideGroupKey = useCallback((dataItem) => {\n    // specify which group key to use\n    return dataItem.employeeName;\n}, []);\n\n\n            const onGridReady = useCallback((params) => {\n                \n\n                fetch('https://www.ag-grid.com/example-assets/tree-data.json')\n                .then(resp => resp.json())\n                .then(data => {\n    // setup the fake server with entire dataset\n    fakeServer = new FakeServer(data);\n    // create datasource with a reference to the fake server\n    var datasource = getServerSideDatasource(fakeServer);\n    // register the datasource with the grid\n    params.api.setGridOption('serverSideDatasource', datasource);\n});\n            }, []);\n\n\n\n    return  (\n            <div style={containerStyle}>\n                \n        <div style={gridStyle} className={/** DARK MODE START **/document.documentElement.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/}>\n            <AgGridReact\n                \n                \ncolumnDefs={columnDefs}\ndefaultColDef={defaultColDef}\nautoGroupColumnDef={autoGroupColumnDef}\nrowModelType={'serverSide'}\ntreeData={true}\nisServerSideGroupOpenByDefault={isServerSideGroupOpenByDefault}\nisServerSideGroup={isServerSideGroup}\ngetServerSideGroupKey={getServerSideGroupKey}\nonGridReady={onGridReady}\n            />\n        </div>\n            </div>\n        );\n\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<StrictMode><GridExample /></StrictMode>);\n","index.html":"<div id=\"myGrid\" style=\"height: 100%;\" class=\"ag-theme-quartz\"></div>"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function(link, callback) {\n        setTimeout(function() {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href)\n                    return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function(link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    }\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link')\n        return filter(links, function(link) { return link.href === url; });\n    }\n\n    var noop = function() {};\n\n    var loadCSS = function(url, existingLinks) {\n        const stylesUrl = url.includes(\"styles.css\") || url.includes(\"style.css\");\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(() => {\n                new Promise(function(resolve, reject) {\n                    var timeout = setTimeout(function() {\n                        reject('Unable to load CSS');\n                    }, waitSeconds * 1000);\n                    var _callback = function(error) {\n                        clearTimeout(timeout);\n                        link.onload = link.onerror = noop;\n                        setTimeout(function() {\n                            if (error) {\n                                reject(error);\n                                outerReject(error)\n                            } else {\n                                resolve('');\n                                outerResolve('');\n                            }\n                        }, 7);\n                    };\n                    var link = document.createElement('link');\n                    link.type = 'text/css';\n                    link.rel = 'stylesheet';\n                    link.href = url;\n                    link.setAttribute('data-systemjs-css', '');\n                    if (!isWebkit) {\n                        link.onload = function() {\n                            _callback();\n                        }\n                    } else {\n                        webkitLoadCheck(link, _callback);\n                    }\n                    link.onerror = function(event) {\n                        _callback(event.error || new Error('Error loading CSS file.'));\n                    };\n                    if (existingLinks.length)\n                        head.insertBefore(link, existingLinks[0]);\n                    else\n                        head.appendChild(link);\n                })\n                    // Remove the old link regardless of loading outcome\n                    .then(function(result) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        return result;\n                    }, function(err) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        throw err;\n                    })\n            }, stylesUrl ? 5 : 0)\n        })\n    };\n\n    exports.fetch = function(load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links))\n            return '';\n        return loadCSS(load.address, links);\n    };\n}\nelse {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise)\n            return builderPromise;\n\n        return builderPromise = System['import']('./css-plugin-base.js', module.id)\n            .then(function(CSSPluginBase) {\n                return new CSSPluginBase(function compile(source, address) {\n                    return {\n                        css: source,\n                        map: null,\n                        moduleSource: null,\n                        moduleFormat: null\n                    };\n                });\n            });\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function(load, fetch) {\n        if (!this.builder)\n            return '';\n        return fetch(load);\n    };\n    exports.translate = function(load, opts) {\n        if (!this.builder)\n            return '';\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function(load, opts) {\n        if (!this.builder)\n            return;\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function(loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function(loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = []\n    forEach(arrayLike, function(item) {\n        if (func(item))\n            arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i])\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n\n    System.config({\n        transpiler: 'plugin-babel',\n        defaultExtension: 'js',\n        paths: {\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths\n        },\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // babel transpiler\n            'plugin-babel': 'npm:systemjs-plugin-babel@0.0.25/plugin-babel.js',\n            'systemjs-babel-build': 'npm:systemjs-plugin-babel@0.0.25/systemjs-babel-browser.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n            redux: 'npm:redux@4.2.1',\n            'react-redux': 'npm:react-redux@8.0.5',\n            'prop-types': 'npm:prop-types@15.8.1',\n\n            app: appLocation + 'app',\n\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.development.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.development.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js'\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            }\n        },\n        meta: {\n            '*.jsx': {\n                babelOptions: {\n                    react: true\n                }\n            },\n            '*.css': { loader: 'css' }\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'plugin-babel',\n        defaultExtension: 'js',\n        paths:\n            {\n                // paths serve as alias\n                \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n                ...systemJsPaths\n            },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + \"css.js\",\n            // 'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // babel transpiler\n            'plugin-babel': 'npm:systemjs-plugin-babel@0.0.25/plugin-babel.js',\n            'systemjs-babel-build': 'npm:systemjs-plugin-babel@0.0.25/systemjs-babel-browser.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n            redux: 'npm:redux@4.2.1',\n            'react-redux': 'npm:react-redux@8.0.5',\n            'prop-types': 'npm:prop-types@15.8.1',\n\n            app: appLocation + 'app',\n            // systemJsMap comes from index.html\n            ...systemJsMap\n        },\n        packages: {\n            react: {\n                main: './umd/react.production.min.js'\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js'\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js'\n            },\n            redux: {\n                main: './dist/redux.min.js',\n                defaultExtension: 'js'\n            },\n            'react-redux': {\n                main: './dist/react-redux.min.js',\n                defaultExtension: 'js'\n            },\n            'prop-types': {\n                main: './prop-types.min.js',\n                defaultExtension: 'js',\n            },\n\n            app: {\n                defaultExtension: 'jsx'\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            '*.jsx': {\n                babelOptions: {\n                    react: true\n                }\n            },\n            '*.css': {loader: 'css'}\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"^31.2.0","ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}},"extras":["alasql"]}