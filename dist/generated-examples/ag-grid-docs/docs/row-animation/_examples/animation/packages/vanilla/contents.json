{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n\n.example-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    padding: 8px;\n    margin-bottom: 10px;\n    border-radius: 8px;\n    background-color: #0f0f0f;\n}\n\n.code-highlight-blue {color: #a3b9a3}\n.code-highlight-yellow {color: #e8bf6a}\n.code-highlight-green {color: #a5c261}\n.code-highlight-purple {color: #977582}\n.transition-width { -webkit-transition: width 3s; -moz-transition: width 3s; -o-transition: width 3s; -ms-transition: width 3s; transition: width 3s; }","main.js":"var countDownDirection = true\n\nconst columnDefs = [\n  { field: 'athlete', minWidth: 150 },\n  { field: 'country', minWidth: 150 },\n  { field: 'year', minWidth: 120 },\n  { field: 'gold', aggFunc: 'sum' },\n  { field: 'silver', aggFunc: 'sum' },\n  { field: 'bronze', aggFunc: 'sum' },\n]\n\nlet gridApi;\n\nconst gridOptions = {\n  defaultColDef: {\n    flex: 1,\n    filter: true,\n  },\n  columnDefs: columnDefs,\n  suppressAggFuncInHeader: true, // so we don't see sum() in gold, silver and bronze headers\n  autoGroupColumnDef: {\n    // to get 'athlete' showing in the leaf level in this column\n    cellRenderer: 'agGroupCellRenderer',\n    headerName: 'Athlete',\n    minWidth: 200,\n    field: 'athlete',\n  },\n}\n\n// the code below executes an action every 2,000 milliseconds.\n// it's an interval, and each time it runs, it takes the next action\n// from the 'actions' list below\nfunction startInterval(api) {\n  var actionIndex = 0\n\n  resetCountdown()\n  executeAfterXSeconds()\n\n  function executeAfterXSeconds() {\n    setTimeout(() => {\n      var action = getActions()[actionIndex]\n      action(api)\n      actionIndex++\n      if (actionIndex >= getActions().length) {\n        actionIndex = 0\n      }\n      resetCountdown()\n      executeAfterXSeconds()\n    }, 3000)\n  }\n\n  setTitleFormatted(null)\n}\n\nfunction resetCountdown() {\n  (document.querySelector('#animationCountdown') ).style.width = countDownDirection\n    ? '100%'\n    : '0%'\n  countDownDirection = !countDownDirection\n}\n\nfunction setTitleFormatted(apiName, methodName, paramsName) {\n  var html\n  if (apiName === null) {\n    html = '<span class=\"code-highlight-yellow\">command:> </span>'\n  } else {\n    html =\n      '<span class=\"code-highlight-yellow\">command:> </span> ' +\n      '<span class=\"code-highlight-blue\">' +\n      apiName +\n      '</span>' +\n      '<span class=\"code-highlight-blue\">.</span>' +\n      '<span class=\"code-highlight-yellow\">' +\n      methodName +\n      '</span>' +\n      '<span class=\"code-highlight-blue\"></span>' +\n      '<span class=\"code-highlight-blue\">(</span>' +\n      '<span class=\"code-highlight-green\">' +\n      paramsName +\n      '</span>' +\n      '<span class=\"code-highlight-blue\">)</span>'\n  }\n  document.querySelector('#animationAction').innerHTML = html\n}\n\nfunction getActions() {\n  return [\n    function (api) {\n      api.applyColumnState({\n        state: [{ colId: 'country', sort: 'asc' }],\n        defaultState: { sort: null },\n      })\n      setTitleFormatted('api', 'applyColumnState', \"country: 'asc'\")\n    },\n    function (api) {\n      api.applyColumnState({\n        state: [\n          { colId: 'year', sort: 'asc' },\n          { colId: 'country', sort: 'asc' },\n        ],\n        defaultState: { sort: null },\n      })\n      setTitleFormatted('api', 'applyColumnState', \"year: 'asc', country 'asc'\")\n    },\n    function (api) {\n      api.applyColumnState({\n        state: [\n          { colId: 'year', sort: 'asc' },\n          { colId: 'country', sort: 'desc' },\n        ],\n        defaultState: { sort: null },\n      })\n      setTitleFormatted(\n        'api',\n        'applyColumnState',\n        \"year: 'asc', country: 'desc'\"\n      )\n    },\n    function (api) {\n      api.applyColumnState({\n        defaultState: { sort: null },\n      })\n      setTitleFormatted('api', 'applyColumnState', 'clear sort')\n    },\n  ];\n}\n\n// from actual demo page (/animation/)\ndocument.addEventListener('DOMContentLoaded', function () {\n  var gridDiv =\n    document.querySelector('#myGrid') ||\n    document.querySelector('#animationGrid')\n\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n  fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n    .then(response => response.json())\n    .then(function (data) {\n      gridApi.setGridOption('rowData', data.slice(0, 50))\n      startInterval(gridApi)\n    })\n})","index.html":"<div class=\"example-wrapper\">\n    <div class=\"example-header\">\n        <div style=\"display: inline-block; height: 10px; margin-top: 5px; margin-right: 10px; width: 100px; border: 1px solid grey;\">\n            <div id=\"animationCountdown\" class=\"transition-width\" style=\"background-color: grey; height: 100%; width: 0%;\"></div>\n        </div>\n        <span id=\"animationAction\"></span>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}