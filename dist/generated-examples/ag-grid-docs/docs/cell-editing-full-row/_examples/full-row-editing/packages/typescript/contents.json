{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","numericCellEditor.ts":"import { ICellEditorComp, ICellEditorParams } from \"ag-grid-community\";\n\nfunction isCharNumeric(charStr: string) {\n    return !!/^\\d+$/.test(charStr)\n}\n\nfunction isNumericKey(event: any) {\n    var charStr = event.key;\n    return isCharNumeric(charStr)\n}\n// Implementing ICellEditorComp\nexport class NumericCellEditor implements ICellEditorComp {\n    focusAfterAttached!: boolean;\n    eInput!: HTMLInputElement;\n    cancelBeforeStart!: boolean;\n\n    // gets called once before the renderer is used\n    init(params: ICellEditorParams) {\n        // we only want to highlight this cell if it started the edit, it is possible\n        // another cell in this row started the edit\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        // create the cell\n        this.eInput = document.createElement('input')\n        this.eInput.classList.add('ag-input-field-input');\n        this.eInput.style.width = '100%';\n\n        this.eInput.value = (isCharNumeric(params.eventKey))\n            ? params.eventKey\n            : params.value\n\n        this.eInput.addEventListener('keydown', (event) => {\n            if (!event.key || event.key.length !== 1 || isNumericKey(event)) { return; }\n            this.eInput.focus()\n\n            if (event.preventDefault) event.preventDefault()\n        })\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        // only focus after attached if this cell started the edit\n        if (this.focusAfterAttached) {\n            this.eInput.focus()\n            this.eInput.select()\n        }\n    }\n\n    // returns the new value after editing\n    isCancelBeforeStart() {\n        return this.cancelBeforeStart\n    }\n\n    // example - will reject the number if it contains the value 007\n    // - not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n        return false;\n    }\n\n    // returns the new value after editing\n    getValue() {\n        return this.eInput.value\n    }\n\n    // when we tab onto this editor, we want to focus the contents\n    focusIn() {\n        var eInput = this.getGui()\n        eInput.focus()\n        eInput.select()\n        console.log('NumericCellEditor.focusIn()')\n    }\n\n    // when we tab out of the editor, this gets called\n    focusOut() {\n        // but we don't care, we just want to print it for demo purposes\n        console.log('NumericCellEditor.focusOut()')\n    }\n}","main.ts":"import 'ag-grid-community/styles/ag-grid.css';\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { CellValueChangedEvent, ColDef, ColGroupDef, GridApi, GridOptions, RowValueChangedEvent, createGrid } from 'ag-grid-community';\nimport { NumericCellEditor } from './numericCellEditor';\nimport 'ag-grid-charts-enterprise';\n\n\n\n\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: [\n    {\n      field: 'make',\n      cellEditor: 'agSelectCellEditor',\n      cellEditorParams: {\n        values: ['Porsche', 'Toyota', 'Ford', 'AAA', 'BBB', 'CCC'],\n      },\n    },\n    { field: 'model' },\n    { field: 'field4', headerName: 'Read Only', editable: false },\n    { field: 'price', cellEditor: NumericCellEditor },\n    {\n      headerName: 'Suppress Navigable',\n      field: 'field5',\n      suppressNavigable: true,\n      minWidth: 200,\n    },\n    { headerName: 'Read Only', field: 'field6', editable: false },\n  ],\n  defaultColDef: {\n    flex: 1,\n    editable: true,\n    cellDataType: false,\n  },\n  editType: 'fullRow',\n  rowData: getRowData(),\n\n  onCellValueChanged: onCellValueChanged,\n  onRowValueChanged: onRowValueChanged,\n}\n\nfunction onCellValueChanged(event: CellValueChangedEvent) {\n  console.log(\n    'onCellValueChanged: ' + event.colDef.field + ' = ' + event.newValue\n  )\n}\n\nfunction onRowValueChanged(event: RowValueChangedEvent) {\n  var data = event.data\n  console.log(\n    'onRowValueChanged: (' +\n    data.make +\n    ', ' +\n    data.model +\n    ', ' +\n    data.price +\n    ', ' +\n    data.field5 +\n    ')'\n  )\n}\n\nfunction getRowData() {\n  var rowData = []\n  for (var i = 0; i < 10; i++) {\n    rowData.push({\n      make: 'Toyota',\n      model: 'Celica',\n      price: 35000 + i * 1000,\n      field4: 'Sample XX',\n      field5: 'Sample 22',\n      field6: 'Sample 23',\n    })\n    rowData.push({\n      make: 'Ford',\n      model: 'Mondeo',\n      price: 32000 + i * 1000,\n      field4: 'Sample YY',\n      field5: 'Sample 24',\n      field6: 'Sample 25',\n    })\n    rowData.push({\n      make: 'Porsche',\n      model: 'Boxster',\n      price: 72000 + i * 1000,\n      field4: 'Sample ZZ',\n      field5: 'Sample 26',\n      field6: 'Sample 27',\n    })\n  }\n  return rowData\n}\n\nfunction onBtStopEditing() {\n  gridApi!.stopEditing()\n}\n\nfunction onBtStartEditing() {\n  gridApi!.setFocusedCell(1, 'make')\n  gridApi!.startEditingCell({\n    rowIndex: 1,\n    colKey: 'make',\n  })\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\n  var eGridDiv = document.querySelector<HTMLElement>('#myGrid')!\n  gridApi = createGrid(eGridDiv, gridOptions); \n\nif (typeof window !== 'undefined') {\n// Attach external event handlers to window so they can be called from index.html\n (<any>window).onBtStopEditing = onBtStopEditing;\n (<any>window).onBtStartEditing = onBtStartEditing;\n} ","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button style=\"font-size: 12px\" onclick=\"onBtStartEditing()\">Start Editing Line 2</button>\n        <button style=\"font-size: 12px\" onclick=\"onBtStopEditing()\">Stop Editing</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function(link, callback) {\n        setTimeout(function() {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href)\n                    return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function(link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    }\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link')\n        return filter(links, function(link) { return link.href === url; });\n    }\n\n    var noop = function() {};\n\n    var loadCSS = function(url, existingLinks) {\n        const stylesUrl = url.includes(\"styles.css\") || url.includes(\"style.css\");\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(() => {\n                new Promise(function(resolve, reject) {\n                    var timeout = setTimeout(function() {\n                        reject('Unable to load CSS');\n                    }, waitSeconds * 1000);\n                    var _callback = function(error) {\n                        clearTimeout(timeout);\n                        link.onload = link.onerror = noop;\n                        setTimeout(function() {\n                            if (error) {\n                                reject(error);\n                                outerReject(error)\n                            } else {\n                                resolve('');\n                                outerResolve('');\n                            }\n                        }, 7);\n                    };\n                    var link = document.createElement('link');\n                    link.type = 'text/css';\n                    link.rel = 'stylesheet';\n                    link.href = url;\n                    link.setAttribute('data-systemjs-css', '');\n                    if (!isWebkit) {\n                        link.onload = function() {\n                            _callback();\n                        }\n                    } else {\n                        webkitLoadCheck(link, _callback);\n                    }\n                    link.onerror = function(event) {\n                        _callback(event.error || new Error('Error loading CSS file.'));\n                    };\n                    if (existingLinks.length)\n                        head.insertBefore(link, existingLinks[0]);\n                    else\n                        head.appendChild(link);\n                })\n                    // Remove the old link regardless of loading outcome\n                    .then(function(result) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        return result;\n                    }, function(err) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        throw err;\n                    })\n            }, stylesUrl ? 5 : 0)\n        })\n    };\n\n    exports.fetch = function(load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links))\n            return '';\n        return loadCSS(load.address, links);\n    };\n}\nelse {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise)\n            return builderPromise;\n\n        return builderPromise = System['import']('./css-plugin-base.js', module.id)\n            .then(function(CSSPluginBase) {\n                return new CSSPluginBase(function compile(source, address) {\n                    return {\n                        css: source,\n                        map: null,\n                        moduleSource: null,\n                        moduleFormat: null\n                    };\n                });\n            });\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function(load, fetch) {\n        if (!this.builder)\n            return '';\n        return fetch(load);\n    };\n    exports.translate = function(load, opts) {\n        if (!this.builder)\n            return '';\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function(load, opts) {\n        if (!this.builder)\n            return;\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function(loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function(loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = []\n    forEach(arrayLike, function(item) {\n        if (func(item))\n            arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i])\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: 'es2020',\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths: {\n            // paths serve as alias\n            \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n            ...sjsPaths\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js'\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            }\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: \"es2015\",\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths:\n            {\n                // paths serve as alias\n                \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n                ...systemJsPaths\n            },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + \"css.js\",\n            // 'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}