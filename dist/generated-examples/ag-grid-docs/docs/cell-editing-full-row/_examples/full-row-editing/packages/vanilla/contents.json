{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["numericCellEditor.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".example-wrapper {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n#myGrid {\n    flex: 1 1 0px;\n    width: 100%;\n}\n","numericCellEditor.js":"\nfunction isCharNumeric(charStr) {\n    return !!/^\\d+$/.test(charStr)\n}\n\nfunction isNumericKey(event) {\n    var charStr = event.key;\n    return isCharNumeric(charStr)\n}\n// Implementing ICellEditorComp\nclass NumericCellEditor  {\n    \n    \n    \n\n    // gets called once before the renderer is used\n    init(params) {\n        // we only want to highlight this cell if it started the edit, it is possible\n        // another cell in this row started the edit\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        // create the cell\n        this.eInput = document.createElement('input')\n        this.eInput.classList.add('ag-input-field-input');\n        this.eInput.style.width = '100%';\n\n        this.eInput.value = (isCharNumeric(params.eventKey))\n            ? params.eventKey\n            : params.value\n\n        this.eInput.addEventListener('keydown', (event) => {\n            if (!event.key || event.key.length !== 1 || isNumericKey(event)) { return; }\n            this.eInput.focus()\n\n            if (event.preventDefault) event.preventDefault()\n        })\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        // only focus after attached if this cell started the edit\n        if (this.focusAfterAttached) {\n            this.eInput.focus()\n            this.eInput.select()\n        }\n    }\n\n    // returns the new value after editing\n    isCancelBeforeStart() {\n        return this.cancelBeforeStart\n    }\n\n    // example - will reject the number if it contains the value 007\n    // - not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n        return false;\n    }\n\n    // returns the new value after editing\n    getValue() {\n        return this.eInput.value\n    }\n\n    // when we tab onto this editor, we want to focus the contents\n    focusIn() {\n        var eInput = this.getGui()\n        eInput.focus()\n        eInput.select()\n        console.log('NumericCellEditor.focusIn()')\n    }\n\n    // when we tab out of the editor, this gets called\n    focusOut() {\n        // but we don't care, we just want to print it for demo purposes\n        console.log('NumericCellEditor.focusOut()')\n    }\n}","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      field: 'make',\n      cellEditor: 'agSelectCellEditor',\n      cellEditorParams: {\n        values: ['Porsche', 'Toyota', 'Ford', 'AAA', 'BBB', 'CCC'],\n      },\n    },\n    { field: 'model' },\n    { field: 'field4', headerName: 'Read Only', editable: false },\n    { field: 'price', cellEditor: NumericCellEditor },\n    {\n      headerName: 'Suppress Navigable',\n      field: 'field5',\n      suppressNavigable: true,\n      minWidth: 200,\n    },\n    { headerName: 'Read Only', field: 'field6', editable: false },\n  ],\n  defaultColDef: {\n    flex: 1,\n    editable: true,\n    cellDataType: false,\n  },\n  editType: 'fullRow',\n  rowData: getRowData(),\n\n  onCellValueChanged: onCellValueChanged,\n  onRowValueChanged: onRowValueChanged,\n}\n\nfunction onCellValueChanged(event) {\n  console.log(\n    'onCellValueChanged: ' + event.colDef.field + ' = ' + event.newValue\n  )\n}\n\nfunction onRowValueChanged(event) {\n  var data = event.data\n  console.log(\n    'onRowValueChanged: (' +\n    data.make +\n    ', ' +\n    data.model +\n    ', ' +\n    data.price +\n    ', ' +\n    data.field5 +\n    ')'\n  )\n}\n\nfunction getRowData() {\n  var rowData = []\n  for (var i = 0; i < 10; i++) {\n    rowData.push({\n      make: 'Toyota',\n      model: 'Celica',\n      price: 35000 + i * 1000,\n      field4: 'Sample XX',\n      field5: 'Sample 22',\n      field6: 'Sample 23',\n    })\n    rowData.push({\n      make: 'Ford',\n      model: 'Mondeo',\n      price: 32000 + i * 1000,\n      field4: 'Sample YY',\n      field5: 'Sample 24',\n      field6: 'Sample 25',\n    })\n    rowData.push({\n      make: 'Porsche',\n      model: 'Boxster',\n      price: 72000 + i * 1000,\n      field4: 'Sample ZZ',\n      field5: 'Sample 26',\n      field6: 'Sample 27',\n    })\n  }\n  return rowData\n}\n\nfunction onBtStopEditing() {\n  gridApi.stopEditing()\n}\n\nfunction onBtStartEditing() {\n  gridApi.setFocusedCell(1, 'make')\n  gridApi.startEditingCell({\n    rowIndex: 1,\n    colKey: 'make',\n  })\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\ndocument.addEventListener('DOMContentLoaded', function () {\n  var eGridDiv = document.querySelector('#myGrid')\n  gridApi = agGrid.createGrid(eGridDiv, gridOptions); \n})","index.html":"<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button style=\"font-size: 12px\" onclick=\"onBtStartEditing()\">Start Editing Line 2</button>\n        <button style=\"font-size: 12px\" onclick=\"onBtStopEditing()\">Stop Editing</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}