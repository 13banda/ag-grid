{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    font-size: 13px;\n    margin-bottom: 5px;\n    display: flex;\n}\n\n.configuration-option {\n    flex-grow: 1;\n    border: 1px solid black;\n    border-radius: 5px;\n    padding: 2px;\n    text-align: center;\n    margin-left: 5px;\n}\n\n.configuration-option div {\n    flex-grow: 1;\n    margin-bottom: 3px;\n}\n","main.ts":"import '@ag-grid-community/styles/ag-grid.css';\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\nimport { ColDef, ColGroupDef, GridApi, GridOptions, IDateFilterParams, ModuleRegistry, createGrid } from '@ag-grid-community/core';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\n\n\nModuleRegistry.registerModules([ClientSideRowModelModule]);\n\nvar filterParams: IDateFilterParams = {\n  comparator: (filterLocalDateAtMidnight: Date, cellValue: string) => {\n    var dateAsString = cellValue\n    if (dateAsString == null) return -1\n    var dateParts = dateAsString.split('/')\n    var cellDate = new Date(\n      Number(dateParts[2]),\n      Number(dateParts[1]) - 1,\n      Number(dateParts[0])\n    )\n\n    if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n      return 0\n    }\n\n    if (cellDate < filterLocalDateAtMidnight) {\n      return -1\n    }\n\n    if (cellDate > filterLocalDateAtMidnight) {\n      return 1\n    }\n    return 0;\n  },\n  includeBlanksInEquals: false,\n  includeBlanksInLessThan: false,\n  includeBlanksInGreaterThan: false,\n  includeBlanksInRange: false,\n};\n\nconst columnDefs: ColDef[] = [\n  { field: 'athlete' },\n  {\n    field: 'date',\n    filter: 'agDateColumnFilter',\n    filterParams: filterParams,\n  },\n  {\n    headerName: 'Description',\n    valueGetter: '\"Date is \" + data.date',\n    minWidth: 340,\n  },\n]\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: columnDefs,\n  defaultColDef: {\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n}\n\nfunction changeNull(toChange: string, value: boolean) {\n  switch (toChange) {\n    case 'equals':\n      columnDefs[1].filterParams.includeBlanksInEquals = value\n      break\n    case 'lessThan':\n      columnDefs[1].filterParams.includeBlanksInLessThan = value\n      break\n    case 'greaterThan':\n      columnDefs[1].filterParams.includeBlanksInGreaterThan = value\n      break\n    case 'inRange':\n      columnDefs[1].filterParams.includeBlanksInRange = value\n      break\n  }\n\n  var filterModel = gridApi!.getFilterModel()\n\n  gridApi!.setGridOption('columnDefs', columnDefs)\n  gridApi!.destroyFilter('date')\n  gridApi!.setFilterModel(filterModel)\n}\n\n// setup the grid after the page has finished loading\n  var gridDiv = document.querySelector<HTMLElement>('#myGrid')!\n  gridApi = createGrid(gridDiv, gridOptions);\n\n  gridApi!.setGridOption('rowData', [\n    {\n      athlete: 'Alberto Gutierrez',\n      date: null,\n    },\n    {\n      athlete: 'Niall Crosby',\n      date: undefined,\n    },\n    {\n      athlete: 'Sean Landsman',\n      date: '25/10/2016',\n    },\n    {\n      athlete: 'Robert Clarke',\n      date: '25/10/2016',\n    },\n  ]) \n\nif (typeof window !== 'undefined') {\n// Attach external event handlers to window so they can be called from index.html\n (<any>window).changeNull = changeNull;\n} ","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <div>Include NULL<br />in date:</div>\n        <div class=\"configuration-option\">\n            <div><strong>equals</strong></div>\n            <div>\n                <label>\n                    <input type=\"radio\" name=\"equals\" value=\"false\" checked=\"checked\"\n                        onclick=\"changeNull('equals', false)\"> false\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"equals\" value=\"true\" onclick=\"changeNull('equals', true)\"> true\n                </label>\n            </div>\n        </div>\n\n        <div class=\"configuration-option\">\n            <div><strong>lessThan</strong></div>\n            <div>\n                <label>\n                    <input type=\"radio\" name=\"lessThan\" value=\"false\" checked=\"checked\"\n                        onclick=\"changeNull('lessThan', false)\"> false\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"lessThan\" value=\"true\" onclick=\"changeNull('lessThan', true)\"> true\n                </label>\n            </div>\n        </div>\n\n        <div class=\"configuration-option\">\n            <div><strong>greaterThan</strong></div>\n            <div>\n                <label>\n                    <input type=\"radio\" name=\"greaterThan\" value=\"false\" checked=\"checked\"\n                        onclick=\"changeNull('greaterThan', false)\"> false\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"greaterThan\" value=\"true\" onclick=\"changeNull('greaterThan', true)\"> true\n                </label>\n            </div>\n        </div>\n\n        <div class=\"configuration-option\">\n            <div><strong>inRange</strong></div>\n            <div>\n                <label>\n                    <input type=\"radio\" name=\"inRange\" value=\"false\" checked=\"checked\"\n                        onclick=\"changeNull('inRange', false)\"> false\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"inRange\" value=\"true\" onclick=\"changeNull('inRange', true)\"> true\n                </label>\n            </div>\n        </div>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz\" style=\"height: 88%;\"></div>\n</div>"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function(link, callback) {\n        setTimeout(function() {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href)\n                    return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function(link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    }\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link')\n        return filter(links, function(link) { return link.href === url; });\n    }\n\n    var noop = function() {};\n\n    var loadCSS = function(url, existingLinks) {\n        const stylesUrl = url.includes(\"styles.css\") || url.includes(\"style.css\");\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(() => {\n                new Promise(function(resolve, reject) {\n                    var timeout = setTimeout(function() {\n                        reject('Unable to load CSS');\n                    }, waitSeconds * 1000);\n                    var _callback = function(error) {\n                        clearTimeout(timeout);\n                        link.onload = link.onerror = noop;\n                        setTimeout(function() {\n                            if (error) {\n                                reject(error);\n                                outerReject(error)\n                            } else {\n                                resolve('');\n                                outerResolve('');\n                            }\n                        }, 7);\n                    };\n                    var link = document.createElement('link');\n                    link.type = 'text/css';\n                    link.rel = 'stylesheet';\n                    link.href = url;\n                    link.setAttribute('data-systemjs-css', '');\n                    if (!isWebkit) {\n                        link.onload = function() {\n                            _callback();\n                        }\n                    } else {\n                        webkitLoadCheck(link, _callback);\n                    }\n                    link.onerror = function(event) {\n                        _callback(event.error || new Error('Error loading CSS file.'));\n                    };\n                    if (existingLinks.length)\n                        head.insertBefore(link, existingLinks[0]);\n                    else\n                        head.appendChild(link);\n                })\n                    // Remove the old link regardless of loading outcome\n                    .then(function(result) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        return result;\n                    }, function(err) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        throw err;\n                    })\n            }, stylesUrl ? 5 : 0)\n        })\n    };\n\n    exports.fetch = function(load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links))\n            return '';\n        return loadCSS(load.address, links);\n    };\n}\nelse {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise)\n            return builderPromise;\n\n        return builderPromise = System['import']('./css-plugin-base.js', module.id)\n            .then(function(CSSPluginBase) {\n                return new CSSPluginBase(function compile(source, address) {\n                    return {\n                        css: source,\n                        map: null,\n                        moduleSource: null,\n                        moduleFormat: null\n                    };\n                });\n            });\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function(load, fetch) {\n        if (!this.builder)\n            return '';\n        return fetch(load);\n    };\n    exports.translate = function(load, opts) {\n        if (!this.builder)\n            return '';\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function(load, opts) {\n        if (!this.builder)\n            return;\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function(loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function(loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = []\n    forEach(arrayLike, function(item) {\n        if (func(item))\n            arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i])\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: 'es2020',\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths: {\n            // paths serve as alias\n            \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n            ...sjsPaths\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js'\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            }\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: \"es2015\",\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths:\n            {\n                // paths serve as alias\n                \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n                ...systemJsPaths\n            },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + \"css.js\",\n            // 'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n"},"packageJson":{"name":"ag-grid-modules","dependencies":{"@ag-grid-community/core":"^31.2.0","@ag-grid-community/styles":"^31.2.0","@ag-grid-community/client-side-row-model":"^31.2.0","@ag-grid-community/infinite-row-model":"^31.2.0","@ag-grid-community/csv-export":"^31.2.0","@ag-grid-enterprise/core":"^31.2.0","@ag-grid-enterprise/charts-enterprise":"^31.2.0","@ag-grid-enterprise/sparklines":"^31.2.0","@ag-grid-enterprise/clipboard":"^31.2.0","@ag-grid-enterprise/column-tool-panel":"^31.2.0","@ag-grid-enterprise/excel-export":"^31.2.0","@ag-grid-enterprise/filter-tool-panel":"^31.2.0","@ag-grid-enterprise/master-detail":"^31.2.0","@ag-grid-enterprise/menu":"^31.2.0","@ag-grid-enterprise/range-selection":"^31.2.0","@ag-grid-enterprise/rich-select":"^31.2.0","@ag-grid-enterprise/row-grouping":"^31.2.0","@ag-grid-enterprise/server-side-row-model":"^31.2.0","@ag-grid-enterprise/set-filter":"^31.2.0","@ag-grid-enterprise/multi-filter":"^31.2.0","@ag-grid-enterprise/advanced-filter":"^31.2.0","@ag-grid-enterprise/side-bar":"^31.2.0","@ag-grid-enterprise/status-bar":"^31.2.0","@ag-grid-enterprise/viewport-row-model":"^31.2.0"}},"supportedFrameworks":["typescript"]}