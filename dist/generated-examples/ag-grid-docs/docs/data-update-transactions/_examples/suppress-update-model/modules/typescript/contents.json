{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".test-grid {\n    height: 1px;\n    min-height: 1px;\n    flex-grow: 1;\n}\n\n.test-container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.test-header {\n    margin-bottom: 1rem;\n}\n\n.test-header button:not(:first-child) {\n    margin-left: 5px;\n}\n","data.ts":"var LINUX_DISTROS = [\n    'Manjaro',\n    'MX Linux',\n    'Mint',\n    'elementary',\n    'Ubuntu',\n    'Debian',\n    'Fedora',\n    'Solus',\n    'openSUSE',\n    'Zorin',\n    'ReactOS',\n    'CentOS',\n    'Arch',\n    'KDE neon',\n    'deepin',\n    'antiX',\n    'Antergos',\n    'Kali',\n    'Parrot',\n    'Lite',\n    'ArcoLinux',\n    'FreeBSD',\n    'Ubuntu Kylin',\n    'Lubuntu',\n    'SparkyLinux',\n    'Peppermint',\n    'SmartOS',\n    'PCLinuxOS',\n    'Mageia',\n    'Endless',\n]\n\nvar CITIES = [\n    'Tokyo',\n    'Jakarta',\n    'Delhi',\n    'Manila',\n    'Seoul',\n    'Shanghai',\n    'Mumbai',\n    'New York',\n    'Beijing',\n    'Sao Paulo',\n    'Mexico City',\n    'Guangzhou',\n    'Dhaka',\n    'Osaka-Kobe-Kyoto',\n    'Moscow',\n    'Cairo',\n    'Bangkok',\n    'Los Angeles',\n    'Buenos Aires',\n]\n\nvar LAPTOPS = [\n    'Hewlett Packard',\n    'Lenovo',\n    'Dell',\n    'Asus',\n    'Apple',\n    'Acer',\n    'Microsoft',\n    'Razer',\n]\n\n\nlet idCounter = 0;\n\n\nfunction letter(i: number) {\n    return 'abcdefghijklmnopqrstuvwxyz'.substring(i, i + 1)\n}\n\nfunction randomLetter() {\n    return letter(Math.floor(Math.random() * 26 + 1))\n}\n\nexport function getData() {\n    const myRowData = [];\n    for (let i = 0; i < 10000; i++) {\n        const name =\n            'Mr ' +\n            randomLetter().toUpperCase() +\n            ' ' +\n            randomLetter().toUpperCase() +\n            randomLetter() +\n            randomLetter() +\n            randomLetter() +\n            randomLetter();\n        const city = CITIES[i % CITIES.length];\n        const distro =\n            LINUX_DISTROS[i % LINUX_DISTROS.length] +\n            ' v' +\n            Math.floor(Math.random() * 100 + 1) / 10;\n        const university = LAPTOPS[i % LAPTOPS.length];\n        const value = Math.floor(Math.random() * 100) + 10; // between 10 and 110\n\n        myRowData.push(\n            createDataItem(name, distro, university, city, value)\n        )\n    }\n    return myRowData;\n}\n\nexport function createDataItem(name: string, distro: string, laptop: string, city: string, value: number, idToUse: number | undefined = undefined): any {\n\n    const id = idToUse != null ? idToUse : idCounter++;\n    return {\n        id: id,\n        name: name,\n        city: city,\n        distro: distro,\n        laptop: laptop,\n        value: value,\n    }\n}","main.ts":"import '@ag-grid-community/styles/ag-grid.css';\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\nimport { ColDef, ColGroupDef, GetRowIdFunc, GetRowIdParams, GridApi, GridOptions, IAggFuncParams, IDoesFilterPassParams, IFilterComp, IFilterParams, IFilterType, IsGroupOpenByDefaultParams, ModuleRegistry, createGrid } from '@ag-grid-community/core';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport { createDataItem, getData } from './data';\n\n\nModuleRegistry.registerModules([ClientSideRowModelModule, RowGroupingModule]);\n\n\nlet aggCallCount = 0;\nlet compareCallCount = 0;\nlet filterCallCount = 0;\nfunction myAggFunc(params: IAggFuncParams) {\n    aggCallCount++\n\n    let total = 0;\n    for (let i = 0; i < params.values.length; i++) {\n        total += params.values[i]\n    }\n    return total\n}\n\nfunction myComparator(a: any, b: any) {\n    compareCallCount++\n    return a < b ? -1 : 1\n}\n\nfunction getMyFilter(): IFilterType {\n\n    class MyFilter implements IFilterComp {\n        filterParams!: IFilterParams;\n        filterValue!: number | null;\n        eGui: any;\n        eInput: any;\n\n        init(params: IFilterParams) {\n            this.filterParams = params;\n            this.filterValue = null\n\n            this.eGui = document.createElement('div')\n            this.eGui.innerHTML = '<div>Greater Than: <input type=\"text\"/></div>'\n            this.eInput = this.eGui.querySelector('input')\n            this.eInput.addEventListener('input', () => {\n                this.getValueFromInput()\n                params.filterChangedCallback()\n            })\n        }\n\n        getGui() {\n            return this.eGui\n        }\n\n        getValueFromInput() {\n            const value = parseInt(this.eInput.value);\n            this.filterValue = isNaN(value) ? null : value\n        }\n\n        setModel(model: any) {\n            this.eInput.value = model == null ? null : model.value;\n            this.getValueFromInput()\n        }\n\n        getModel() {\n            if (!this.isFilterActive()) {\n                return null;\n            }\n\n            return { value: this.eInput.value }\n        }\n\n        isFilterActive() {\n            return this.filterValue !== null\n        }\n\n        doesFilterPass(params: IDoesFilterPassParams) {\n            filterCallCount++\n\n            const { node } = params;\n            const value = this.filterParams.getValue(node);\n            return value > (this.filterValue || 0)\n        }\n    }\n\n    return MyFilter;\n}\n\n\nconst myFilter = getMyFilter();\n\nlet gridApi: GridApi;\nconst columnDefs: ColDef[] = [\n    { field: 'city', rowGroup: true, hide: true },\n    { field: 'laptop', rowGroup: true, hide: true },\n    { field: 'distro', sort: 'asc', comparator: myComparator },\n    {\n        field: 'value',\n        enableCellChangeFlash: true,\n        aggFunc: myAggFunc,\n        filter: myFilter,\n    },\n]\n\nfunction getRowId(params: GetRowIdParams) {\n    return params.data.id\n}\n\nfunction onBtDuplicate() {\n\n    // get the first child of the\n    const selectedRows = gridApi.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!')\n        return\n    }\n\n    const newItems: any[] = [];\n    selectedRows.forEach((selectedRow) => {\n        const newItem = createDataItem(\n            selectedRow.name,\n            selectedRow.distro,\n            selectedRow.laptop,\n            selectedRow.city,\n            selectedRow.value\n        );\n        newItems.push(newItem)\n    })\n\n    timeOperation('Duplicate', () => {\n        gridApi.applyTransaction({ add: newItems })\n    })\n}\n\nfunction onBtUpdate() {\n    // get the first child of the\n    const selectedRows = gridApi.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!')\n        return\n    }\n\n    const updatedItems: any[] = [];\n    selectedRows.forEach((oldItem) => {\n        const newValue = Math.floor(Math.random() * 100) + 10;\n        const newItem = createDataItem(\n            oldItem.name,\n            oldItem.distro,\n            oldItem.laptop,\n            oldItem.city,\n            newValue,\n            oldItem.id\n        );\n        updatedItems.push(newItem)\n    })\n\n    timeOperation('Update', () => {\n        gridApi.applyTransaction({ update: updatedItems })\n    })\n}\n\nfunction onBtDelete() {\n    // get the first child of the\n    const selectedRows = gridApi.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0) {\n        console.log('No rows selected!')\n        return\n    }\n\n    timeOperation('Delete', () => {\n        gridApi.applyTransaction({ remove: selectedRows })\n    })\n}\n\nfunction onBtClearSelection() {\n    gridApi!.deselectAll()\n}\n\nfunction onBtUpdateModel() {\n    timeOperation('Update Model', () => {\n        gridApi.refreshClientSideRowModel('filter')\n    })\n}\n\nconst gridOptions: GridOptions = {\n    columnDefs: columnDefs,\n    defaultColDef: {\n        flex: 1,\n        filter: true,\n    },\n    suppressModelUpdateAfterUpdateTransaction: true,\n    getRowId: getRowId,\n    rowSelection: 'multiple',\n    groupSelectsChildren: true,\n    suppressRowClickSelection: true,\n    autoGroupColumnDef: {\n        field: 'name',\n        cellRendererParams: { checkbox: true },\n    },\n    onGridReady: (params) => {\n        params.api.setFilterModel({\n            value: { value: '50' },\n        })\n\n        timeOperation('Initialisation', () => {\n            params.api.setGridOption('rowData', getData())\n        })\n    },\n    isGroupOpenByDefault: isGroupOpenByDefault\n}\n\nfunction isGroupOpenByDefault(params: IsGroupOpenByDefaultParams<IOlympicData, any>) {\n    return ['Delhi', 'Seoul'].includes(params.key);\n}\n\n// wait for the document to be loaded, otherwise\n// AG Grid will not find the div in the document.\n    const eGridDiv = document.querySelector<HTMLElement>('#myGrid')!;\n    gridApi = createGrid(eGridDiv, gridOptions)\n\nfunction timeOperation(name: string, operation: any) {\n    aggCallCount = 0\n    compareCallCount = 0\n    filterCallCount = 0\n    const start = new Date().getTime();\n    operation()\n    const end = new Date().getTime();\n    console.log(\n        name +\n        ' finished in ' +\n        (end - start) +\n        'ms, aggCallCount = ' +\n        aggCallCount +\n        ', compareCallCount = ' +\n        compareCallCount +\n        ', filterCallCount = ' +\n        filterCallCount\n    )\n}\n\n \n\nif (typeof window !== 'undefined') {\n// Attach external event handlers to window so they can be called from index.html\n (<any>window).onBtDuplicate = onBtDuplicate;\n (<any>window).onBtUpdate = onBtUpdate;\n (<any>window).onBtDelete = onBtDelete;\n (<any>window).onBtClearSelection = onBtClearSelection;\n (<any>window).onBtUpdateModel = onBtUpdateModel;\n} ","index.html":"<div class=\"test-container\">\n    <div class=\"test-header\">\n        <button onclick=\"onBtUpdate()\">Update</button>\n        <button onclick=\"onBtDuplicate()\">Duplicate</button>\n        <button onclick=\"onBtDelete()\">Delete</button>\n        <button onclick=\"onBtClearSelection()\">Clear Selection</button>\n        <button onclick=\"onBtUpdateModel()\">Update Model</button>\n    </div>\n    <div id=\"myGrid\" class=\"ag-theme-quartz test-grid\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function(link, callback) {\n        setTimeout(function() {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href)\n                    return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function(link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    }\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link')\n        return filter(links, function(link) { return link.href === url; });\n    }\n\n    var noop = function() {};\n\n    var loadCSS = function(url, existingLinks) {\n        const stylesUrl = url.includes(\"styles.css\") || url.includes(\"style.css\");\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(() => {\n                new Promise(function(resolve, reject) {\n                    var timeout = setTimeout(function() {\n                        reject('Unable to load CSS');\n                    }, waitSeconds * 1000);\n                    var _callback = function(error) {\n                        clearTimeout(timeout);\n                        link.onload = link.onerror = noop;\n                        setTimeout(function() {\n                            if (error) {\n                                reject(error);\n                                outerReject(error)\n                            } else {\n                                resolve('');\n                                outerResolve('');\n                            }\n                        }, 7);\n                    };\n                    var link = document.createElement('link');\n                    link.type = 'text/css';\n                    link.rel = 'stylesheet';\n                    link.href = url;\n                    link.setAttribute('data-systemjs-css', '');\n                    if (!isWebkit) {\n                        link.onload = function() {\n                            _callback();\n                        }\n                    } else {\n                        webkitLoadCheck(link, _callback);\n                    }\n                    link.onerror = function(event) {\n                        _callback(event.error || new Error('Error loading CSS file.'));\n                    };\n                    if (existingLinks.length)\n                        head.insertBefore(link, existingLinks[0]);\n                    else\n                        head.appendChild(link);\n                })\n                    // Remove the old link regardless of loading outcome\n                    .then(function(result) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        return result;\n                    }, function(err) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        throw err;\n                    })\n            }, stylesUrl ? 5 : 0)\n        })\n    };\n\n    exports.fetch = function(load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links))\n            return '';\n        return loadCSS(load.address, links);\n    };\n}\nelse {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise)\n            return builderPromise;\n\n        return builderPromise = System['import']('./css-plugin-base.js', module.id)\n            .then(function(CSSPluginBase) {\n                return new CSSPluginBase(function compile(source, address) {\n                    return {\n                        css: source,\n                        map: null,\n                        moduleSource: null,\n                        moduleFormat: null\n                    };\n                });\n            });\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function(load, fetch) {\n        if (!this.builder)\n            return '';\n        return fetch(load);\n    };\n    exports.translate = function(load, opts) {\n        if (!this.builder)\n            return '';\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function(load, opts) {\n        if (!this.builder)\n            return;\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function(loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function(loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = []\n    forEach(arrayLike, function(item) {\n        if (func(item))\n            arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i])\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: 'es2020',\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths: {\n            // paths serve as alias\n            \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n            ...sjsPaths\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js'\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            }\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: \"es2015\",\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths:\n            {\n                // paths serve as alias\n                \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n                ...systemJsPaths\n            },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + \"css.js\",\n            // 'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n"},"packageJson":{"name":"ag-grid-modules","dependencies":{"@ag-grid-community/core":"^31.2.0","@ag-grid-community/styles":"^31.2.0","@ag-grid-community/client-side-row-model":"^31.2.0","@ag-grid-community/infinite-row-model":"^31.2.0","@ag-grid-community/csv-export":"^31.2.0","@ag-grid-enterprise/core":"^31.2.0","@ag-grid-enterprise/charts-enterprise":"^31.2.0","@ag-grid-enterprise/sparklines":"^31.2.0","@ag-grid-enterprise/clipboard":"^31.2.0","@ag-grid-enterprise/column-tool-panel":"^31.2.0","@ag-grid-enterprise/excel-export":"^31.2.0","@ag-grid-enterprise/filter-tool-panel":"^31.2.0","@ag-grid-enterprise/master-detail":"^31.2.0","@ag-grid-enterprise/menu":"^31.2.0","@ag-grid-enterprise/range-selection":"^31.2.0","@ag-grid-enterprise/rich-select":"^31.2.0","@ag-grid-enterprise/row-grouping":"^31.2.0","@ag-grid-enterprise/server-side-row-model":"^31.2.0","@ag-grid-enterprise/set-filter":"^31.2.0","@ag-grid-enterprise/multi-filter":"^31.2.0","@ag-grid-enterprise/advanced-filter":"^31.2.0","@ag-grid-enterprise/side-bar":"^31.2.0","@ag-grid-enterprise/status-bar":"^31.2.0","@ag-grid-enterprise/viewport-row-model":"^31.2.0"}}}