{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"index.tsx","mainFileName":"index.tsx","scriptFiles":[],"styleFiles":[],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.doubling-input,\n.numeric-input {\n    font-size: calc(var(--ag-font-size) + 1px);\n    padding-left: calc(var(--ag-cell-horizontal-padding) - 1px);\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n}\n\n/* Completely fill the space for number arrow buttons */\n.doubling-input::-webkit-outer-spin-button, \n.doubling-input::-webkit-inner-spin-button {\n    width: 25px;\n    position: absolute;\n    top: 0px;\n    right: 1px;\n    height: 100%;\n}\n","doublingEditor.tsx":"import React, { forwardRef, memo, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { ICellEditorParams } from \"ag-grid-community\";\n\n// this simple editor doubles any value entered into the input\nexport default memo(forwardRef((props: ICellEditorParams, ref) => {\n    const [value, setValue] = useState(parseInt(props.value));\n    const refInput = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        // focus on the input\n        refInput.current?.focus()\n    }, []);\n\n    /* Component Editor Lifecycle methods */\n    useImperativeHandle(ref, () => {\n        return {\n            // the final value to send to the grid, on completion of editing\n            getValue() {\n                // this simple editor doubles any value entered into the input\n                return value * 2;\n            },\n\n            // Gets called once before editing starts, to give editor a chance to\n            // cancel the editing before it even starts.\n            isCancelBeforeStart() {\n                return false;\n            },\n\n            // Gets called once when editing is finished (eg if Enter is pressed).\n            // If you return true, then the result of the edit will be ignored.\n            isCancelAfterEnd() {\n                // our editor will reject any value greater than 1000\n                return value > 1000;\n            }\n        };\n    });\n\n    return (\n        <input type=\"number\"\n            ref={refInput}\n            value={value}\n            onChange={(event: any) => setValue(parseInt(event.target.value))}\n            className=\"doubling-input\"\n        />\n    );\n}));\n","index.tsx":"'use strict';\n\nimport React, { useMemo, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { AgGridReact } from 'ag-grid-react';\nimport { ColDef,  } from 'ag-grid-community';\nimport DoublingEditor from './doublingEditor';\nimport MoodEditor from './moodEditor';\nimport MoodRenderer from './moodRenderer';\nimport NumericEditor from './numericEditor';\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport './styles.css';\n\n\n\nconst GridExample = () => {\n    const [rowData] = useState([\n        { name: \"Bob\", mood: \"Happy\", number: 10 },\n        { name: \"Harry\", mood: \"Sad\", number: 3 },\n        { name: \"Sally\", mood: \"Happy\", number: 20 },\n        { name: \"Mary\", mood: \"Sad\", number: 5 },\n        { name: \"John\", mood: \"Happy\", number: 15 },\n        { name: \"Jack\", mood: \"Happy\", number: 25 },\n        { name: \"Sue\", mood: \"Sad\", number: 43 },\n        { name: \"Sean\", mood: \"Sad\", number: 1335 },\n        { name: \"Niall\", mood: \"Happy\", number: 2 },\n        { name: \"Alberto\", mood: \"Happy\", number: 123 },\n        { name: \"Fred\", mood: \"Sad\", number: 532 },\n        { name: \"Jenny\", mood: \"Happy\", number: 34 },\n        { name: \"Larry\", mood: \"Happy\", number: 13 },\n    ]);\n\n    const columnDefs = useMemo<ColDef[]>(() => [\n        {\n            headerName: 'Doubling',\n            field: 'number',\n            cellEditor: DoublingEditor,\n            editable: true,\n            width: 300,\n        },\n        {\n            field: 'mood',\n            cellRenderer: MoodRenderer,\n            cellEditor: MoodEditor,\n            cellEditorPopup: true,\n            editable: true,\n            width: 300,\n        },\n        {\n            headerName: 'Numeric',\n            field: 'number',\n            cellEditor: NumericEditor,\n            editable: true,\n            width: 280,\n        },\n    ], [])\n\n    const defaultColDef = useMemo(() => ({\n        editable: true,\n        flex: 1,\n        minWidth: 100,\n        filter: true,\n    }), []);\n\n    return (\n        <div style={{ width: '100%', height: '100%' }}>\n            <div\n                style={{\n                    height: '100%',\n                    width: '100%'\n                }}\n                className={/** DARK MODE START **/document.documentElement?.dataset.defaultTheme || 'ag-theme-quartz'/** DARK MODE END **/}>\n                <AgGridReact\n                    columnDefs={columnDefs}\n                    rowData={rowData}\n                    defaultColDef={defaultColDef} />\n            </div>\n        </div>\n    );\n};\n\nconst root = createRoot(document.getElementById('root')!);\nroot.render(<GridExample />);","moodEditor.tsx":"import React, { forwardRef, memo, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { ICellEditorParams } from \"ag-grid-community\";\n\nexport default memo(forwardRef((props: ICellEditorParams, ref) => {\n    const isHappy = (value: string) => value === 'Happy';\n\n    const [ready, setReady] = useState(false);\n    const [happy, setHappy] = useState<boolean>(isHappy(props.value));\n    const [done, setDone] = useState(false);\n    const refContainer = useRef(null);\n\n    const checkAndToggleMoodIfLeftRight = (event: any) => {\n        if (ready) {\n            if (['ArrowLeft', 'ArrowRight'].indexOf(event.key) > -1) { // left and right\n                const isLeft = event.key === 'ArrowLeft';\n                setHappy(isLeft);\n                event.stopPropagation();\n            }\n        }\n    };\n\n    useEffect(() => {\n        if(done) props.stopEditing();\n    }, [done]);\n\n    useEffect(() => {\n        (refContainer.current as any).focus();\n        setReady(true);\n    }, [])\n\n    useEffect(() => {\n        window.addEventListener('keydown', checkAndToggleMoodIfLeftRight);\n\n        return () => {\n            window.removeEventListener('keydown', checkAndToggleMoodIfLeftRight);\n        };\n    }, [checkAndToggleMoodIfLeftRight, ready]);\n\n\n    useImperativeHandle(ref, () => {\n        return {\n            getValue() {\n                return happy ? 'Happy' : 'Sad';\n            }\n        };\n    });\n\n    const mood = {\n        borderRadius: 15,\n        border: '1px solid grey',\n        backgroundColor: '#e6e6e6',\n        padding: 15,\n        textAlign: 'center' as const,\n        display: 'inline-block'\n    };\n\n    const unselected = {\n        paddingLeft: 10,\n        paddingRight: 10,\n        border: '1px solid transparent',\n        padding: 4\n    };\n\n    const selected = {\n        paddingLeft: 10,\n        paddingRight: 10,\n        border: '1px solid lightgreen',\n        padding: 4\n    };\n\n    const happyStyle = happy ? selected : unselected;\n    const sadStyle = !happy ? selected : unselected;\n\n    return (\n        <div ref={refContainer}\n            style={mood}\n            tabIndex={1} // important - without this the key presses wont be caught\n        >\n            <img src=\"https://www.ag-grid.com/example-assets/smileys/happy.png\" onClick={() => {\n                setHappy(true);\n                setDone(true);\n            }} style={happyStyle} />\n            <img src=\"https://www.ag-grid.com/example-assets/smileys/sad.png\" onClick={() => {\n                setHappy(false);\n                setDone(true);\n            }} style={sadStyle} />\n        </div>\n    );\n}));\n","moodRenderer.tsx":"import React, { memo, useMemo } from \"react\";\nimport { ICellRendererParams } from \"ag-grid-community\";\n\nexport default memo((props: ICellRendererParams) => {\n    const imageForMood = (mood: string) => 'https://www.ag-grid.com/example-assets/smileys/' + (mood === 'Happy' ? 'happy.png' : 'sad.png');\n\n    const mood = useMemo(() => imageForMood(props.value), [props.value]);\n\n    return (\n        <img width=\"20px\" src={mood} />\n    );\n});\n","numericEditor.tsx":"import React, { forwardRef, memo, useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport { ICellEditorParams } from \"ag-grid-community\";\n\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = 'Backspace';\nconst KEY_F2 = 'F2';\nconst KEY_ENTER = 'Enter';\nconst KEY_TAB = 'Tab';\n\nexport default memo(forwardRef((props: ICellEditorParams, ref) => {\n    const createInitialState = () => {\n        let startValue;\n        let highlightAllOnFocus = true;\n        const eventKey = props.eventKey;\n\n        if (eventKey === KEY_BACKSPACE) {\n            // if backspace or delete pressed, we clear the cell\n            startValue = '';\n        } else if (eventKey && eventKey.length === 1) {\n            // if a letter was pressed, we start with the letter\n            startValue = eventKey;\n            highlightAllOnFocus = false;\n        } else {\n            // otherwise we start with the current value\n            startValue = props.value;\n            if (eventKey === KEY_F2) {\n                highlightAllOnFocus = false;\n            }\n        }\n\n        return {\n            value: startValue,\n            highlightAllOnFocus\n        };\n    };\n\n    const initialState = createInitialState();\n    const [value, setValue] = useState(initialState.value);\n    const [highlightAllOnFocus, setHighlightAllOnFocus] = useState(initialState.highlightAllOnFocus);\n    const refInput = useRef<HTMLInputElement>(null);\n\n    // focus on the input\n    useEffect(() => {\n        // get ref from React component\n        const eInput = refInput.current!;\n        eInput.focus();\n        if (highlightAllOnFocus) {\n            eInput.select();\n\n            setHighlightAllOnFocus(false);\n        } else {\n            // when we started editing, we want the caret at the end, not the start.\n            // this comes into play in two scenarios: \n            //   a) when user hits F2 \n            //   b) when user hits a printable character\n            const length = eInput.value ? eInput.value.length : 0;\n            if (length > 0) {\n                eInput.setSelectionRange(length, length);\n            }\n        }\n    }, []);\n\n    /* Utility Methods */\n    const cancelBeforeStart = props.eventKey && props.eventKey.length === 1 && ('1234567890'.indexOf(props.eventKey) < 0);\n\n    const isLeftOrRight = (event: any) => {\n        return ['ArrowLeft', 'ArrowLeft'].indexOf(event.key) > -1;\n    };\n\n    const isCharNumeric = (charStr: string) => {\n        return !!/^\\d+$/.test(charStr);\n    };\n\n    const isNumericKey = (event: any) => {\n        const charStr = event.key;\n        return isCharNumeric(charStr);\n    };\n\n    const isBackspace = (event: any) => {\n        return event.key === KEY_BACKSPACE;\n    };\n\n    const finishedEditingPressed = (event: any) => {\n        const key = event.key;\n        return key === KEY_ENTER || key === KEY_TAB;\n    };\n\n    const onKeyDown = (event: any) => {\n        if (isLeftOrRight(event) || isBackspace(event)) {\n            event.stopPropagation();\n            return;\n        }\n\n        if (!finishedEditingPressed(event) && !isNumericKey(event)) {\n            if (event.preventDefault) event.preventDefault();\n        }\n\n        if (finishedEditingPressed(event)) {\n            props.stopEditing();\n        }\n    };\n\n    /* Component Editor Lifecycle methods */\n    useImperativeHandle(ref, () => {\n        return {\n            // the final value to send to the grid, on completion of editing\n            getValue() {\n                return value === '' || value == null ? null : parseInt(value);\n            },\n\n            // Gets called once before editing starts, to give editor a chance to\n            // cancel the editing before it even starts.\n            isCancelBeforeStart() {\n                return cancelBeforeStart;\n            },\n\n            // Gets called once when editing is finished (eg if Enter is pressed).\n            // If you return true, then the result of the edit will be ignored.\n            isCancelAfterEnd() {\n                // will reject the number if it greater than 1,000,000\n                // not very practical, but demonstrates the method.\n                const finalValue = this.getValue();\n                return finalValue != null && finalValue > 1000000;\n            }\n        };\n    });\n\n    return (\n        <input ref={refInput}\n            value={value}\n            onChange={(event: any) => setValue(event.target.value)}\n            onKeyDown={(event: any) => onKeyDown(event)}\n            className=\"numeric-input\"\n        />\n    );\n}));\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function(link, callback) {\n        setTimeout(function() {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href)\n                    return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function(link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    }\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link')\n        return filter(links, function(link) { return link.href === url; });\n    }\n\n    var noop = function() {};\n\n    var loadCSS = function(url, existingLinks) {\n        const stylesUrl = url.includes(\"styles.css\") || url.includes(\"style.css\");\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(() => {\n                new Promise(function(resolve, reject) {\n                    var timeout = setTimeout(function() {\n                        reject('Unable to load CSS');\n                    }, waitSeconds * 1000);\n                    var _callback = function(error) {\n                        clearTimeout(timeout);\n                        link.onload = link.onerror = noop;\n                        setTimeout(function() {\n                            if (error) {\n                                reject(error);\n                                outerReject(error)\n                            } else {\n                                resolve('');\n                                outerResolve('');\n                            }\n                        }, 7);\n                    };\n                    var link = document.createElement('link');\n                    link.type = 'text/css';\n                    link.rel = 'stylesheet';\n                    link.href = url;\n                    link.setAttribute('data-systemjs-css', '');\n                    if (!isWebkit) {\n                        link.onload = function() {\n                            _callback();\n                        }\n                    } else {\n                        webkitLoadCheck(link, _callback);\n                    }\n                    link.onerror = function(event) {\n                        _callback(event.error || new Error('Error loading CSS file.'));\n                    };\n                    if (existingLinks.length)\n                        head.insertBefore(link, existingLinks[0]);\n                    else\n                        head.appendChild(link);\n                })\n                    // Remove the old link regardless of loading outcome\n                    .then(function(result) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        return result;\n                    }, function(err) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        throw err;\n                    })\n            }, stylesUrl ? 5 : 0)\n        })\n    };\n\n    exports.fetch = function(load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links))\n            return '';\n        return loadCSS(load.address, links);\n    };\n}\nelse {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise)\n            return builderPromise;\n\n        return builderPromise = System['import']('./css-plugin-base.js', module.id)\n            .then(function(CSSPluginBase) {\n                return new CSSPluginBase(function compile(source, address) {\n                    return {\n                        css: source,\n                        map: null,\n                        moduleSource: null,\n                        moduleFormat: null\n                    };\n                });\n            });\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function(load, fetch) {\n        if (!this.builder)\n            return '';\n        return fetch(load);\n    };\n    exports.translate = function(load, opts) {\n        if (!this.builder)\n            return '';\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function(load, opts) {\n        if (!this.builder)\n            return;\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function(loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function(loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = []\n    forEach(arrayLike, function(item) {\n        if (func(item))\n            arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i])\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            module: 'system',\n            moduleResolution: 'node',\n            target: 'es2020',\n            noImplicitAny: false,\n            sourceMap: false,\n            jsx: 'react',\n            lib: ['es2020', 'dom'],\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...sjsPaths,\n        },\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n            redux: 'npm:redux@4.2.1',\n            'react-redux': 'npm:react-redux@8.0.5',\n            'prop-types': 'npm:prop-types@15.8.1',\n\n            ts: 'npm:plugin-typescript@8.0.0/lib/plugin.js',\n            typescript: 'npm:typescript@4.3.5/lib/typescript.min.js',\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap,\n        },\n\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.development.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.development.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js'\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            }\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': {loader: 'css'},\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', (e) => {\n    console.error('ERROR', e.message, e.filename);\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        transpiler: 'ts',\n        typescriptOptions: {\n            module: 'system',\n            moduleResolution: 'node',\n            target: 'es2015',\n            noImplicitAny: false,\n            sourceMap: true,\n            jsx: 'react',\n            lib: ['es2015', 'dom'],\n        },\n        paths: {\n            // paths serve as alias\n            'npm:': 'https://cdn.jsdelivr.net/npm/',\n            ...systemJsPaths\n        },\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + \"css.js\",\n            // 'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            // react\n            react: 'npm:react@18.2.0',\n            'react-dom': 'npm:react-dom@18.2.0',\n            'react-dom/client': 'npm:react-dom@18.2.0',\n            redux: 'npm:redux@4.2.1',\n            'react-redux': 'npm:react-redux@8.0.5',\n            'prop-types': 'npm:prop-types@15.8.1',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            app: appLocation,\n            // systemJsMap comes from index.html\n            ...systemJsMap\n        },\n        packages: {\n            css: {},\n            react: {\n                main: './umd/react.production.min.js',\n            },\n            'react-dom': {\n                main: './umd/react-dom.production.min.js',\n            },\n            'react-dom/server': {\n                main: '../umd/react-dom-server.browser.production.min.js',\n            },\n            app: {\n                main: './index.tsx',\n                defaultExtension: 'tsx',\n            },\n            '@ag-grid-community/react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-react': {\n                main: './dist/package/index.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        },\n        meta: {\n            typescript: {\n                exports: 'ts',\n            },\n            '*.css': {loader: 'css'},\n        },\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"react":"18","react-dom":"18","@types/react":"18","@types/react-dom":"18","ag-grid-react":"^31.2.0","ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}