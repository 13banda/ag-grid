{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["doublingEditor.js","moodEditor.js","moodRenderer.js","numericEditor.js","main.js"],"styleFiles":["styles.css"],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.doubling-input,\n.numeric-input {\n    font-size: calc(var(--ag-font-size) + 1px);\n    padding-left: calc(var(--ag-cell-horizontal-padding) - 1px);\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n}\n\n/* Completely fill the space for number arrow buttons */\n.doubling-input::-webkit-outer-spin-button, \n.doubling-input::-webkit-inner-spin-button {\n    width: 25px;\n    position: absolute;\n    top: 0px;\n    right: 1px;\n    height: 100%;\n}\n","doublingEditor.js":"\nclass DoublingEditor  {\n    \n    \n\n    init(params) {\n        this.value = params.value;\n\n        this.input = document.createElement('input');\n        this.input.classList.add('doubling-input');\n        this.input.id = 'input';\n        this.input.type = 'number';\n        this.input.value = this.value;\n\n        this.input.addEventListener('input', (event) => {\n            this.value = event.target.value;\n        });\n    }\n\n    /* Component Editor Lifecycle methods */\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.input;\n    }\n\n    // the final value to send to the grid, on completion of editing\n    getValue() {\n        // this simple editor doubles any value entered into the input\n        return this.value * 2;\n    }\n\n    // Gets called once before editing starts, to give editor a chance to\n    // cancel the editing before it even starts.\n    isCancelBeforeStart() {\n        return false;\n    }\n\n    // Gets called once when editing is finished (eg if Enter is pressed).\n    // If you return true, then the result of the edit will be ignored.\n    isCancelAfterEnd() {\n        // our editor will reject any value greater than 1000\n        return this.value > 1000;\n    }\n\n    // after this component has been created and inserted into the grid\n    afterGuiAttached() {\n        this.input.focus();\n    }\n}\n\n","moodEditor.js":"\nclass MoodEditor  {\n    \n    \n    \n    \n    \n    \n\n    constructor() {\n        this.defaultImgStyle = 'padding-left:10px; padding-right:10px;  border: 1px solid transparent; padding: 4px;';\n        this.selectedImgStyle = 'padding-left:10px; padding-right:10px; border: 1px solid lightgreen; padding: 4px;';\n    }\n\n    onKeyDown(event) {\n        const key = event.key;\n        if (key === 'ArrowLeft' ||  // left\n            key === 'ArrowRight') {  // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n\n    toggleMood() {\n        this.selectMood(this.mood === 'Happy' ? 'Sad' : 'Happy');\n    }\n\n    init(params) {\n        this.container = document.createElement('div');\n        this.container.style = \"border-radius: 15px; border: 1px solid grey;background-color: #e6e6e6;padding: 15px; text-align:center;display:inline-block;outline:none\";\n        this.container.tabIndex = \"0\";                // to allow the div to capture events\n\n        this.happyImg = document.createElement('img');\n        this.happyImg.src = 'https://www.ag-grid.com/example-assets/smileys/happy.png';\n        this.happyImg.style = this.defaultImgStyle;\n\n        this.sadImg = document.createElement('img');\n        this.sadImg.src = 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n        this.sadImg.style = this.defaultImgStyle;\n\n        this.container.appendChild(this.happyImg);\n        this.container.appendChild(this.sadImg);\n\n        this.happyImg.addEventListener('click', () => {\n            this.selectMood('Happy');\n            params.stopEditing();\n        });\n        this.sadImg.addEventListener('click', () => {\n            this.selectMood('Sad');\n            params.stopEditing();\n        });\n        this.container.addEventListener('keydown', (event) => {\n            this.onKeyDown(event);\n        });\n\n        this.selectMood(params.value);\n    }\n\n    selectMood(mood) {\n        this.mood = mood;\n        this.happyImg.style = (mood === 'Happy') ? this.selectedImgStyle : this.defaultImgStyle;\n        this.sadImg.style = (mood === 'Sad') ? this.selectedImgStyle : this.defaultImgStyle;\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.container;\n    }\n\n    afterGuiAttached() {\n        this.container.focus();\n    }\n\n    getValue() {\n        return this.mood;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n    }\n\n    isPopup() {\n        return true;\n    }\n}\n\n","moodRenderer.js":"\nclass MoodRenderer  {\n    \n    init(params) {\n        this.eGui = document.createElement('span');\n        if (params.value !== \"\" || params.value !== undefined) {\n            const imgForMood = params.value === 'Happy' ? 'https://www.ag-grid.com/example-assets/smileys/happy.png' :\n                'https://www.ag-grid.com/example-assets/smileys/sad.png';\n            this.eGui.innerHTML = `<img width=\"20px\" src=\"${imgForMood}\" />`;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params) {\n        return false;\n    }\n}\n","numericEditor.js":"\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = 'Backspace';\n\nclass NumericEditor  {\n    \n    \n\n    // gets called once before the renderer is used\n    init(params) {\n        // create the cell\n        this.eInput = document.createElement('input');\n        this.eInput.classList.add('numeric-input');\n\n        if (params.eventKey === KEY_BACKSPACE) {\n            this.eInput.value = '';\n        } else if (this.isCharNumeric(params.eventKey)) {\n            this.eInput.value = params.eventKey;\n        } else {\n            if (params.value !== undefined && params.value !== null) {\n                this.eInput.value = params.value;\n            }\n        }\n\n        this.eInput.addEventListener('keydown', event => {\n            if (!event.key || event.key.length !== 1) { return; }\n            if (!this.isNumericKey(event)) {\n                this.eInput.focus();\n                if (event.preventDefault) event.preventDefault();\n            } else if (this.isNavigationKey(event) || this.isBackspace(event)) {\n                event.stopPropagation();\n            }\n        });\n\n        // only start edit if key pressed is a number, not a letter\n        const isNotANumber = params.eventKey && params.eventKey.length === 1 && ('1234567890'.indexOf(params.eventKey) < 0);\n        this.cancelBeforeStart = !!isNotANumber;\n    }\n\n    isBackspace(event) {\n        return event.key === KEY_BACKSPACE;\n    }\n\n    isNavigationKey(event) {\n        return event.key === 'ArrowLeft'\n            || event.key === 'ArrowRight';\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput;\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        this.eInput.focus();\n    }\n\n    // returns the new value after editing\n    isCancelBeforeStart() {\n        return this.cancelBeforeStart;\n    }\n\n    // example - will reject the number if it greater than 1,000,000\n    // - not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n        const value = this.getValue();\n        return value != null && value > 1000000;\n    }\n\n    // returns the new value after editing\n    getValue() {\n        const value = this.eInput.value;\n        return value === '' || value == null ? null : parseInt(value);\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n        // but this example is simple, no cleanup, we could  even leave this method out as it's optional\n    }\n\n    // if true, then this editor will appear in a popup\n    isPopup() {\n        // and we could leave this method out also, false is the default\n        return false;\n    }\n\n    isCharNumeric(charStr) {\n        return charStr && !!/^\\d+$/.test(charStr);\n    }\n\n    isNumericKey(event) {\n        const charStr = event.key;\n        return this.isCharNumeric(charStr);\n    }\n}\n","main.js":"let gridApi;\n\nconst gridOptions = {\n  columnDefs: [\n    {\n      headerName: 'Doubling',\n      field: 'number',\n      cellEditor: DoublingEditor,\n      editable: true,\n      width: 300,\n    },\n    {\n      field: 'mood',\n      cellRenderer: MoodRenderer,\n      cellEditor: MoodEditor,\n      cellEditorPopup: true,\n      editable: true,\n      width: 300,\n    },\n    {\n      headerName: 'Numeric',\n      field: 'number',\n      cellEditor: NumericEditor,\n      editable: true,\n      width: 280,\n    },\n  ],\n  rowData: [\n    { name: 'Bob', mood: 'Happy', number: 10 },\n    { name: 'Harry', mood: 'Sad', number: 3 },\n    { name: 'Sally', mood: 'Happy', number: 20 },\n    { name: 'Mary', mood: 'Sad', number: 5 },\n    { name: 'John', mood: 'Happy', number: 15 },\n    { name: 'Jack', mood: 'Happy', number: 25 },\n    { name: 'Sue', mood: 'Sad', number: 43 },\n    { name: 'Sean', mood: 'Sad', number: 1335 },\n    { name: 'Niall', mood: 'Happy', number: 2 },\n    { name: 'Alberto', mood: 'Happy', number: 123 },\n    { name: 'Fred', mood: 'Sad', number: 532 },\n    { name: 'Jenny', mood: 'Happy', number: 34 },\n    { name: 'Larry', mood: 'Happy', number: 13 },\n  ],\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n  const gridDiv = document.querySelector('#myGrid')\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); \n})","index.html":"<div style=\"height: 100%; box-sizing: border-box;\">\n    <div id=\"myGrid\" style=\"height: 100%;\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}