{"isEnterprise":false,"isIntegratedCharts":false,"entryFileName":"main.ts","mainFileName":"main.ts","styleFiles":["styles.css"],"files":{"styles.css":".mood {\n    border-radius: 15px;\n    border: 1px solid grey;\n    background-color: #e6e6e6;\n    padding: 15px;\n    text-align: center;\n    display: inline-block;\n    outline: none\n}\n\n.default {\n    border: 1px solid transparent !important;\n    padding: 4px;\n}\n\n.selected {\n    border: 1px solid lightgreen !important;\n    padding: 4px;\n}\n\n.doubling-input,\n.numeric-input {\n    font-size: calc(var(--ag-font-size) + 1px);\n    padding-left: calc(var(--ag-cell-horizontal-padding) - 1px);\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n}\n\n/* Completely fill the space for number arrow buttons */\n.doubling-input::-webkit-outer-spin-button, \n.doubling-input::-webkit-inner-spin-button {\n    width: 25px;\n    position: absolute;\n    top: 0px;\n    right: 1px;\n    height: 100%;\n}\n","doublingEditor.ts":"import { ICellEditorComp, ICellEditorParams } from \"ag-grid-community\";\n\nexport class DoublingEditor implements ICellEditorComp {\n    value: any;\n    input!: HTMLInputElement;\n\n    init(params: ICellEditorParams) {\n        this.value = params.value;\n\n        this.input = document.createElement('input');\n        this.input.classList.add('doubling-input');\n        this.input.id = 'input';\n        this.input.type = 'number';\n        this.input.value = this.value;\n\n        this.input.addEventListener('input', (event: any) => {\n            this.value = event.target.value;\n        });\n    }\n\n    /* Component Editor Lifecycle methods */\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.input;\n    }\n\n    // the final value to send to the grid, on completion of editing\n    getValue() {\n        // this simple editor doubles any value entered into the input\n        return this.value * 2;\n    }\n\n    // Gets called once before editing starts, to give editor a chance to\n    // cancel the editing before it even starts.\n    isCancelBeforeStart() {\n        return false;\n    }\n\n    // Gets called once when editing is finished (eg if Enter is pressed).\n    // If you return true, then the result of the edit will be ignored.\n    isCancelAfterEnd() {\n        // our editor will reject any value greater than 1000\n        return this.value > 1000;\n    }\n\n    // after this component has been created and inserted into the grid\n    afterGuiAttached() {\n        this.input.focus();\n    }\n}\n\n","moodEditor.ts":"import { ICellEditorComp, ICellEditorParams } from \"ag-grid-community\";\n\nexport class MoodEditor implements ICellEditorComp {\n    defaultImgStyle: string;\n    selectedImgStyle: string;\n    mood!: string;\n    container: any;\n    happyImg: any;\n    sadImg: any;\n\n    constructor() {\n        this.defaultImgStyle = 'padding-left:10px; padding-right:10px;  border: 1px solid transparent; padding: 4px;';\n        this.selectedImgStyle = 'padding-left:10px; padding-right:10px; border: 1px solid lightgreen; padding: 4px;';\n    }\n\n    onKeyDown(event: any) {\n        const key = event.key;\n        if (key === 'ArrowLeft' ||  // left\n            key === 'ArrowRight') {  // right\n            this.toggleMood();\n            event.stopPropagation();\n        }\n    }\n\n    toggleMood() {\n        this.selectMood(this.mood === 'Happy' ? 'Sad' : 'Happy');\n    }\n\n    init(params: ICellEditorParams) {\n        this.container = document.createElement('div');\n        this.container.style = \"border-radius: 15px; border: 1px solid grey;background-color: #e6e6e6;padding: 15px; text-align:center;display:inline-block;outline:none\";\n        this.container.tabIndex = \"0\";                // to allow the div to capture events\n\n        this.happyImg = document.createElement('img');\n        this.happyImg.src = 'https://www.ag-grid.com/example-assets/smileys/happy.png';\n        this.happyImg.style = this.defaultImgStyle;\n\n        this.sadImg = document.createElement('img');\n        this.sadImg.src = 'https://www.ag-grid.com/example-assets/smileys/sad.png';\n        this.sadImg.style = this.defaultImgStyle;\n\n        this.container.appendChild(this.happyImg);\n        this.container.appendChild(this.sadImg);\n\n        this.happyImg.addEventListener('click', () => {\n            this.selectMood('Happy');\n            params.stopEditing();\n        });\n        this.sadImg.addEventListener('click', () => {\n            this.selectMood('Sad');\n            params.stopEditing();\n        });\n        this.container.addEventListener('keydown', (event: any) => {\n            this.onKeyDown(event);\n        });\n\n        this.selectMood(params.value);\n    }\n\n    selectMood(mood: string) {\n        this.mood = mood;\n        this.happyImg.style = (mood === 'Happy') ? this.selectedImgStyle : this.defaultImgStyle;\n        this.sadImg.style = (mood === 'Sad') ? this.selectedImgStyle : this.defaultImgStyle;\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.container;\n    }\n\n    afterGuiAttached() {\n        this.container.focus();\n    }\n\n    getValue() {\n        return this.mood;\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n    }\n\n    isPopup() {\n        return true;\n    }\n}\n\n","moodRenderer.ts":"import { ICellRendererComp, ICellRendererParams } from \"ag-grid-community\";\n\nexport class MoodRenderer implements ICellRendererComp {\n    eGui!: HTMLSpanElement;\n    init(params: ICellRendererParams) {\n        this.eGui = document.createElement('span');\n        if (params.value !== \"\" || params.value !== undefined) {\n            const imgForMood = params.value === 'Happy' ? 'https://www.ag-grid.com/example-assets/smileys/happy.png' :\n                'https://www.ag-grid.com/example-assets/smileys/sad.png';\n            this.eGui.innerHTML = `<img width=\"20px\" src=\"${imgForMood}\" />`;\n        }\n    }\n\n    getGui() {\n        return this.eGui;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        return false;\n    }\n}\n","numericEditor.ts":"import { ICellEditorComp, ICellEditorParams } from \"ag-grid-community\";\n\n// backspace starts the editor on Windows\nconst KEY_BACKSPACE = 'Backspace';\n\nexport class NumericEditor implements ICellEditorComp {\n    eInput!: HTMLInputElement;\n    cancelBeforeStart!: boolean;\n\n    // gets called once before the renderer is used\n    init(params: ICellEditorParams) {\n        // create the cell\n        this.eInput = document.createElement('input');\n        this.eInput.classList.add('numeric-input');\n\n        if (params.eventKey === KEY_BACKSPACE) {\n            this.eInput.value = '';\n        } else if (this.isCharNumeric(params.eventKey)) {\n            this.eInput.value = params.eventKey!;\n        } else {\n            if (params.value !== undefined && params.value !== null) {\n                this.eInput.value = params.value;\n            }\n        }\n\n        this.eInput.addEventListener('keydown', event => {\n            if (!event.key || event.key.length !== 1) { return; }\n            if (!this.isNumericKey(event)) {\n                this.eInput.focus();\n                if (event.preventDefault) event.preventDefault();\n            } else if (this.isNavigationKey(event) || this.isBackspace(event)) {\n                event.stopPropagation();\n            }\n        });\n\n        // only start edit if key pressed is a number, not a letter\n        const isNotANumber = params.eventKey && params.eventKey.length === 1 && ('1234567890'.indexOf(params.eventKey) < 0);\n        this.cancelBeforeStart = !!isNotANumber;\n    }\n\n    isBackspace(event: any) {\n        return event.key === KEY_BACKSPACE;\n    }\n\n    isNavigationKey(event: any) {\n        return event.key === 'ArrowLeft'\n            || event.key === 'ArrowRight';\n    }\n\n    // gets called once when grid ready to insert the element\n    getGui() {\n        return this.eInput;\n    }\n\n    // focus and select can be done after the gui is attached\n    afterGuiAttached() {\n        this.eInput.focus();\n    }\n\n    // returns the new value after editing\n    isCancelBeforeStart() {\n        return this.cancelBeforeStart;\n    }\n\n    // example - will reject the number if it greater than 1,000,000\n    // - not very practical, but demonstrates the method.\n    isCancelAfterEnd() {\n        const value = this.getValue();\n        return value != null && value > 1000000;\n    }\n\n    // returns the new value after editing\n    getValue() {\n        const value = this.eInput.value;\n        return value === '' || value == null ? null : parseInt(value);\n    }\n\n    // any cleanup we need to be done here\n    destroy() {\n        // but this example is simple, no cleanup, we could  even leave this method out as it's optional\n    }\n\n    // if true, then this editor will appear in a popup\n    isPopup() {\n        // and we could leave this method out also, false is the default\n        return false;\n    }\n\n    isCharNumeric(charStr: string | null) {\n        return charStr && !!/^\\d+$/.test(charStr);\n    }\n\n    isNumericKey(event: any) {\n        const charStr = event.key;\n        return this.isCharNumeric(charStr);\n    }\n}\n","main.ts":"import 'ag-grid-community/styles/ag-grid.css';\nimport \"ag-grid-community/styles/ag-theme-quartz.css\";\nimport { ColDef, ColGroupDef, GridApi, GridOptions, createGrid } from 'ag-grid-community';\nimport { DoublingEditor } from './doublingEditor';\nimport { MoodRenderer } from './moodRenderer';\nimport { MoodEditor } from './moodEditor';\nimport { NumericEditor } from './numericEditor';\n\n\n\n\nlet gridApi: GridApi;\n\nconst gridOptions: GridOptions = {\n  columnDefs: [\n    {\n      headerName: 'Doubling',\n      field: 'number',\n      cellEditor: DoublingEditor,\n      editable: true,\n      width: 300,\n    },\n    {\n      field: 'mood',\n      cellRenderer: MoodRenderer,\n      cellEditor: MoodEditor,\n      cellEditorPopup: true,\n      editable: true,\n      width: 300,\n    },\n    {\n      headerName: 'Numeric',\n      field: 'number',\n      cellEditor: NumericEditor,\n      editable: true,\n      width: 280,\n    },\n  ],\n  rowData: [\n    { name: 'Bob', mood: 'Happy', number: 10 },\n    { name: 'Harry', mood: 'Sad', number: 3 },\n    { name: 'Sally', mood: 'Happy', number: 20 },\n    { name: 'Mary', mood: 'Sad', number: 5 },\n    { name: 'John', mood: 'Happy', number: 15 },\n    { name: 'Jack', mood: 'Happy', number: 25 },\n    { name: 'Sue', mood: 'Sad', number: 43 },\n    { name: 'Sean', mood: 'Sad', number: 1335 },\n    { name: 'Niall', mood: 'Happy', number: 2 },\n    { name: 'Alberto', mood: 'Happy', number: 123 },\n    { name: 'Fred', mood: 'Sad', number: 532 },\n    { name: 'Jenny', mood: 'Happy', number: 34 },\n    { name: 'Larry', mood: 'Happy', number: 13 },\n  ],\n  defaultColDef: {\n    editable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n  },\n}\n\n// setup the grid after the page has finished loading\n  const gridDiv = document.querySelector<HTMLElement>('#myGrid')!\n  gridApi = createGrid(gridDiv, gridOptions);  ","index.html":"<div style=\"height: 100%; box-sizing: border-box;\">\n    <div id=\"myGrid\" style=\"height: 100%;\" class=\"ag-theme-quartz\"></div>\n</div>\n"},"boilerPlateFiles":{"css.js":"if (typeof window !== 'undefined') {\n    var waitSeconds = 100;\n\n    var head = document.getElementsByTagName('head')[0];\n\n    var isWebkit = !!window.navigator.userAgent.match(/AppleWebKit\\/([^ ;]*)/);\n    var webkitLoadCheck = function(link, callback) {\n        setTimeout(function() {\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var sheet = document.styleSheets[i];\n                if (sheet.href == link.href)\n                    return callback();\n            }\n            webkitLoadCheck(link, callback);\n        }, 10);\n    };\n\n    var cssIsReloadable = function cssIsReloadable(links) {\n        // Css loaded on the page initially should be skipped by the first\n        // systemjs load, and marked for reload\n        var reloadable = true;\n        forEach(links, function(link) {\n            if (!link.hasAttribute('data-systemjs-css')) {\n                reloadable = false;\n                link.setAttribute('data-systemjs-css', '');\n            }\n        });\n        return reloadable;\n    }\n\n    var findExistingCSS = function findExistingCSS(url) {\n        // Search for existing link to reload\n        var links = head.getElementsByTagName('link')\n        return filter(links, function(link) { return link.href === url; });\n    }\n\n    var noop = function() {};\n\n    var loadCSS = function(url, existingLinks) {\n        const stylesUrl = url.includes(\"styles.css\") || url.includes(\"style.css\");\n        return new Promise((outerResolve, outerReject) => {\n            setTimeout(() => {\n                new Promise(function(resolve, reject) {\n                    var timeout = setTimeout(function() {\n                        reject('Unable to load CSS');\n                    }, waitSeconds * 1000);\n                    var _callback = function(error) {\n                        clearTimeout(timeout);\n                        link.onload = link.onerror = noop;\n                        setTimeout(function() {\n                            if (error) {\n                                reject(error);\n                                outerReject(error)\n                            } else {\n                                resolve('');\n                                outerResolve('');\n                            }\n                        }, 7);\n                    };\n                    var link = document.createElement('link');\n                    link.type = 'text/css';\n                    link.rel = 'stylesheet';\n                    link.href = url;\n                    link.setAttribute('data-systemjs-css', '');\n                    if (!isWebkit) {\n                        link.onload = function() {\n                            _callback();\n                        }\n                    } else {\n                        webkitLoadCheck(link, _callback);\n                    }\n                    link.onerror = function(event) {\n                        _callback(event.error || new Error('Error loading CSS file.'));\n                    };\n                    if (existingLinks.length)\n                        head.insertBefore(link, existingLinks[0]);\n                    else\n                        head.appendChild(link);\n                })\n                    // Remove the old link regardless of loading outcome\n                    .then(function(result) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        return result;\n                    }, function(err) {\n                        forEach(existingLinks, function(link) {link.parentElement.removeChild(link);})\n                        throw err;\n                    })\n            }, stylesUrl ? 5 : 0)\n        })\n    };\n\n    exports.fetch = function(load) {\n        // dont reload styles loaded in the head\n        var links = findExistingCSS(load.address);\n        if (!cssIsReloadable(links))\n            return '';\n        return loadCSS(load.address, links);\n    };\n}\nelse {\n    var builderPromise;\n    function getBuilder(loader) {\n        if (builderPromise)\n            return builderPromise;\n\n        return builderPromise = System['import']('./css-plugin-base.js', module.id)\n            .then(function(CSSPluginBase) {\n                return new CSSPluginBase(function compile(source, address) {\n                    return {\n                        css: source,\n                        map: null,\n                        moduleSource: null,\n                        moduleFormat: null\n                    };\n                });\n            });\n    }\n\n    exports.cssPlugin = true;\n    exports.fetch = function(load, fetch) {\n        if (!this.builder)\n            return '';\n        return fetch(load);\n    };\n    exports.translate = function(load, opts) {\n        if (!this.builder)\n            return '';\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.translate.call(loader, load, opts);\n        });\n    };\n    exports.instantiate = function(load, opts) {\n        if (!this.builder)\n            return;\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.instantiate.call(loader, load, opts);\n        });\n    };\n    exports.bundle = function(loads, compileOpts, outputOpts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.bundle.call(loader, loads, compileOpts, outputOpts);\n        });\n    };\n    exports.listAssets = function(loads, opts) {\n        var loader = this;\n        return getBuilder(loader).then(function(builder) {\n            return builder.listAssets.call(loader, loads, opts);\n        });\n    };\n}\n\n// Because IE8?\nfunction filter(arrayLike, func) {\n    var arr = []\n    forEach(arrayLike, function(item) {\n        if (func(item))\n            arr.push(item);\n    });\n    return arr;\n}\n\n// Because IE8?\nfunction forEach(arrayLike, func) {\n    for (var i = 0; i < arrayLike.length; i++) {\n        func(arrayLike[i])\n    }\n}\n","systemjs.config.dev.js":"(function (global) {\n    var sjsPaths = {};\n    if (typeof systemJsPaths !== 'undefined') {\n        sjsPaths = systemJsPaths;\n    }\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: 'es2020',\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths: {\n            // paths serve as alias\n            \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n            ...sjsPaths\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // css: boilerplatePath + \"css.js\",\n            'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js'\n            },\n            '@ag-grid-enterprise/clipboard': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-enterprise-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            }\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n","systemjs.config.js":"(function (global) {\n    System.config({\n        // DEMO ONLY! REAL CODE SHOULD NOT TRANSPILE IN THE BROWSER\n        transpiler: \"ts\",\n        typescriptOptions: {\n            // Copy of compiler options in standard tsconfig.json\n            target: \"es2015\",\n            module: \"system\", //gets rid of console warning\n            moduleResolution: \"node\",\n            sourceMap: false,\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true,\n            lib: [\"es2015\", \"dom\"],\n            noImplicitAny: true,\n            suppressImplicitAnyIndexErrors: true\n        },\n        meta: {\n            typescript: {\n                exports: \"ts\"\n            },\n            '*.css': {loader: 'css'}\n        },\n        paths:\n            {\n                // paths serve as alias\n                \"npm:\": \"https://cdn.jsdelivr.net/npm/\",\n                ...systemJsPaths\n            },\n        // map tells the System loader where to look for things\n        map: {\n            css: (boilerplatePath.length === 0 ? `./` : `${boilerplatePath}/`) + \"css.js\",\n            // 'css': 'npm:systemjs-plugin-css@0.1.37/css.js',\n\n            ts: \"npm:plugin-typescript@8.0.0/lib/plugin.js\",\n            tslib: \"npm:tslib@2.3.1/tslib.js\",\n            typescript: \"npm:typescript@4.3.5/lib/typescript.min.js\",\n\n            // appLocation comes from index.html\n            app: appLocation,\n            ...systemJsMap\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            css: {},\n            app: {\n                main: \"./main.ts\",\n                defaultExtension: \"ts\",\n            },\n            '@ag-grid-community/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/client-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/csv-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-community/infinite-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/advanced-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/charts-enterprise': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/clipboard': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/column-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/core': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/excel-export': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/filter-tool-panel': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/master-detail': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/menu': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/multi-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/range-selection': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/rich-select': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/row-grouping': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/server-side-row-model': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/set-filter': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/side-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/sparklines': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/status-bar': {\n                format: 'cjs',\n            },\n            '@ag-grid-enterprise/viewport-row-model': {\n                format: 'cjs',\n            },\n            'ag-grid-community': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-grid-charts-enterprise': {\n                main: './dist/package/main.cjs.js',\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-community': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n            'ag-charts-enterprise': {\n                defaultExtension: 'js',\n                format: 'cjs',\n            },\n        }\n    });\n})(this);\n\nwindow.addEventListener('error', e => {\n    console.error('ERROR', e.message, e.filename)\n});\n"},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}