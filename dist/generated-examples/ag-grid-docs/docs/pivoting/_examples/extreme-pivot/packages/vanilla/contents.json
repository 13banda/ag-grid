{"isEnterprise":true,"isIntegratedCharts":false,"entryFileName":"main.js","mainFileName":"main.js","scriptFiles":["main.js"],"styleFiles":[],"files":{"main.js":"let gridApi;\n\nconst gridOptions = {\n columnDefs: [\n    { field: 'country', rowGroup: true, enableRowGroup: true },\n    { field: 'athlete', enablePivot: true },\n    { field: 'year', enablePivot: true },\n    { field: 'sport', enablePivot: true },\n    { field: 'gold', aggFunc: 'sum' },\n    { field: 'silver', aggFunc: 'sum' },\n    { field: 'bronze', aggFunc: 'sum' },\n  ],\n  defaultColDef: {\n    maxWidth: 140,\n  },\n  pivotMode: true,\n  sideBar: true,\n  pivotMaxGeneratedColumns: 1000,\n  onPivotMaxColumnsExceeded: () => {\n    console.error('The limit of 1000 generated columns has been exceeded. Either remove pivot or aggregations from some columns or increase the limit.');\n  }\n}\n\n// setup the grid after the page has finished loading\ndocument.addEventListener('DOMContentLoaded', function () {\n  var gridDiv = document.querySelector('#myGrid')\n  gridApi = agGrid.createGrid(gridDiv, gridOptions); \n\n  fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n    .then(response => response.json())\n    .then((data) => gridApi.setGridOption('rowData', data))\n})\n","index.html":"<div id=\"myGrid\" style=\"height: 100%;\" class=\"ag-theme-quartz\"></div>","interfaces.ts":"\nexport interface IOlympicData {\n    athlete: string,\n    age: number,\n    country: string,\n    year: number,\n    date: string,\n    sport: string,\n    gold: number,\n    silver: number,\n    bronze: number,\n    total: number\n}"},"boilerPlateFiles":{},"packageJson":{"name":"ag-grid-packages","dependencies":{"ag-grid-community":"^31.2.0","ag-grid-charts-enterprise":"^31.2.0"}}}