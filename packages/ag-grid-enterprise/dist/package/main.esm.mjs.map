{
  "version": 3,
  "sources": ["../../src/main.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilterModule.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterCtrl.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterHeaderComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderItemComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/addDropdownComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderDragFeature.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderItemNavigationFeature.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderUtils.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/conditionPillWrapperComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/iAdvancedFilterBuilder.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/inputPillComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/joinPillWrapperComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/selectPillComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderItemAddComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterExpressionService.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterLocaleText.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/filterExpressionUtils.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/colFilterExpressionParser.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/filterExpressionOperators.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterService.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/joinFilterExpressionParser.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/filterExpressionParser.ts", "../../../../enterprise-modules/advanced-filter/src/version.ts", "../../../../enterprise-modules/core/src/agGridEnterpriseModule.ts", "../../../../enterprise-modules/core/src/license/gridLicenseManager.ts", "../../../../enterprise-modules/core/src/license/shared/md5.ts", "../../../../enterprise-modules/core/src/license/shared/licenseManager.ts", "../../../../enterprise-modules/core/src/license/watermark.ts", "../../../../enterprise-modules/core/src/version.ts", "../../../../enterprise-modules/charts/src/gridChartsModule.ts", "../../../../enterprise-modules/charts/src/charts/chartService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/gridChartComp.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartMenu.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/tabbedChartMenu.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/chartDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartController.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/model/chartDataModel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/datasource/chartDatasource.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartColumnService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/model/comboChartModel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/seriesTypeMapper.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/chartTheme.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/axisTypeMapper.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/object.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/UpdateParamsValidator.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/categoriesDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/dragDataPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agPillSelect.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/seriesDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/seriesChartTypePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/switchCategorySeriesDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/formatPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/legend/legendPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/fontPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/cartesianAxisPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/axisTicksPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/gridLine/gridLinePanel.ts", "../../../../enterprise-modules/charts/src/widgets/agAngleSelect.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartMenuParamsFactory.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/polarAxisPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/chartPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/paddingPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/backgroundPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/titlePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/seriesPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/shadowPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/markersPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agColorPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agColorPicker.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/calloutPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/capsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/connectorLinePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/whiskersPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/seriesItemsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/tileSpacingPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/legend/gradientLegendPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartPanelFeature.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/chartSettingsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniChartsContainer.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChartWithAxes.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChart.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChartHelpers.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/column/miniColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/column/miniStackedColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/column/miniNormalizedColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/bar/miniBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/bar/miniStackedBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/bar/miniNormalizedBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/pie/miniDonut.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/pie/miniPie.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/line/miniLine.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/scatter/miniScatter.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/scatter/miniBubble.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/area/miniArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/area/miniStackedArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/area/miniNormalizedArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/histogram/miniHistogram.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChartWithPolarAxes.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarLine.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniNightingale.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/statistical/miniBoxPlot.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniTreemap.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniSunburst.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/specialized/miniHeatmap.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/specialized/miniWaterfall.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/combo/miniColumnLineCombo.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/combo/miniAreaColumnCombo.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/combo/miniCustomCombo.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartToolbar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartTitle/titleEdit.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/barChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/chartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/integration.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/cartesianChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/color.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/areaChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/lineChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/polar/polarChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/pie/pieChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/scatterChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/statistical/statisticalChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/statistical/rangeChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/histogramChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/statistical/boxPlotChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartUtils.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/hierarchical/treemapChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/hierarchical/sunburstChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/specialized/heatmapChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/array.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/waterfallChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartOptionsService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/combo/comboChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartMenuService.ts", "../../../../enterprise-modules/charts/src/version.ts", "../../../../enterprise-modules/charts/src/charts/chartModelMigration.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartTranslationService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartCrossFilterService.ts", "../../../../enterprise-modules/charts/src/utils/validGridChartsVersion.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartMenuList.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/advancedSettingsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/animationPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/crosshairPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/navigatorPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/zoomPanel.ts", "../../../../enterprise-modules/charts/src/agGridCoreExtension.ts", "../../../../enterprise-modules/charts/src/main.ts", "../../../../enterprise-modules/range-selection/src/rangeSelectionModule.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/rangeService.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/abstractSelectionHandle.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/utils.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/rangeHandle.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts", "../../../../enterprise-modules/range-selection/src/version.ts", "../../../../enterprise-modules/clipboard/src/clipboardModule.ts", "../../../../enterprise-modules/clipboard/src/clipboard/clipboardService.ts", "../../../../enterprise-modules/clipboard/src/version.ts", "../../../../enterprise-modules/column-tool-panel/src/columnsToolPanelModule.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/primaryColsHeaderPanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/primaryColsListPanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/primaryColsListPanelItemDragFeature.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/toolPanelColumnGroupComp.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/columnModelItem.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/toolPanelContextMenu.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/toolPanelColumnComp.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/columnToolPanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/pivotModePanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/primaryColsPanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/modelItemUtils.ts", "../../../../enterprise-modules/column-tool-panel/src/version.ts", "../../../../enterprise-modules/row-grouping/src/rowGroupingModule.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/aggregationStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/groupStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/batchRemover.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/pivotColDefService.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/pivotStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/aggFuncService.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/gridHeaderDropZones.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/rowGroupDropZonePanel.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/baseDropZonePanel.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/dropZoneColumnComp.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/pivotDropZonePanel.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/filterAggregatesStage.ts", "../../../../enterprise-modules/row-grouping/src/version.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/groupFilter/groupFilter.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/groupFilter/groupFloatingFilter.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/valueDropZonePanel.ts", "../../../../enterprise-modules/side-bar/src/sideBarModule.ts", "../../../../enterprise-modules/side-bar/src/sideBar/horizontalResizeComp.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarComp.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarButtonsComp.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarButtonComp.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarDefParser.ts", "../../../../enterprise-modules/side-bar/src/sideBar/toolPanelWrapper.ts", "../../../../enterprise-modules/side-bar/src/sideBar/common/toolPanelColDefService.ts", "../../../../enterprise-modules/side-bar/src/version.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarService.ts", "../../../../enterprise-modules/excel-export/src/excelExportModule.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelCreator.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelXlsxFactory.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/core.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/contentType.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/contentTypes.ts", "../../../../enterprise-modules/excel-export/src/excelExport/assets/excelUtils.ts", "../../../../enterprise-modules/excel-export/src/excelExport/assets/excelConstants.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/drawing.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/table.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/colorScheme.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/fontScheme.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/formatScheme.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/themeElements.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/sharedStrings.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/numberFormat.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/numberFormats.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/font.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/fonts.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/fill.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/fills.ts", "../../../../enterprise-modules/excel-export/src/excelExport/assets/excelLegacyConvert.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/border.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/borders.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/alignment.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/protection.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/xf.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellStyleXfs.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellXfs.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellStyle.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellStyles.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/stylesheet.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/sheet.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/sheets.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/workbook.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/worksheet.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/column.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/cell.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/row.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/mergeCell.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/relationship.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/relationships.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelSerializingSession.ts", "../../../../enterprise-modules/excel-export/src/version.ts", "../../../../enterprise-modules/filter-tool-panel/src/filtersToolPanelModule.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/filtersToolPanelHeaderPanel.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/filtersToolPanelListPanel.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/toolPanelFilterComp.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/toolPanelFilterGroupComp.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/filtersToolPanel.ts", "../../../../enterprise-modules/filter-tool-panel/src/version.ts", "../../../../enterprise-modules/master-detail/src/masterDetailModule.ts", "../../../../enterprise-modules/master-detail/src/masterDetail/detailCellRenderer.ts", "../../../../enterprise-modules/master-detail/src/masterDetail/detailCellRendererCtrl.ts", "../../../../enterprise-modules/master-detail/src/version.ts", "../../../../enterprise-modules/menu/src/menuModule.ts", "../../../../enterprise-modules/menu/src/menu/enterpriseMenu.ts", "../../../../enterprise-modules/menu/src/menu/contextMenu.ts", "../../../../enterprise-modules/menu/src/menu/menuItemMapper.ts", "../../../../enterprise-modules/menu/src/version.ts", "../../../../enterprise-modules/menu/src/menu/chartMenuItemMapper.ts", "../../../../enterprise-modules/menu/src/menu/columnChooserFactory.ts", "../../../../enterprise-modules/menu/src/menu/columnMenuFactory.ts", "../../../../enterprise-modules/menu/src/menu/menuUtils.ts", "../../../../enterprise-modules/multi-filter/src/multiFilterModule.ts", "../../../../enterprise-modules/multi-filter/src/multiFilter/multiFilter.ts", "../../../../enterprise-modules/multi-filter/src/multiFilter/multiFloatingFilter.ts", "../../../../enterprise-modules/multi-filter/src/version.ts", "../../../../enterprise-modules/rich-select/src/richSelectModule.ts", "../../../../enterprise-modules/rich-select/src/richSelect/richSelectCellEditor.ts", "../../../../enterprise-modules/rich-select/src/version.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModelModule.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/serverSideRowModel.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/fullStore.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/lazyStore.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/lazyCache.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/multiIndexMap.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/lazyBlockLoadingService.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/storeUtils.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/blocks/blockUtils.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/nodeManager.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/transactionManager.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/expandListener.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/sortListener.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/filterListener.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/storeFactory.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/listenerUtils.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/serverSideSelectionService.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/selection/strategies/defaultStrategy.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/selection/strategies/groupSelectsChildrenStrategy.ts", "../../../../enterprise-modules/server-side-row-model/src/version.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/serverSideExpansionService.ts", "../../../../enterprise-modules/set-filter/src/setFilterModule.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFilter.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setValueModel.ts", "../../../../enterprise-modules/set-filter/src/clientSideValueExtractor.ts", "../../../../enterprise-modules/set-filter/src/setFilter/iSetDisplayValueModel.ts", "../../../../enterprise-modules/set-filter/src/setFilter/flatSetDisplayValueModel.ts", "../../../../enterprise-modules/set-filter/src/setFilter/treeSetDisplayValueModel.ts", "../../../../enterprise-modules/set-filter/src/setFilter/filteringKeys.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFilterListItem.ts", "../../../../enterprise-modules/set-filter/src/setFilter/localeText.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFilterModelFormatter.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFloatingFilter.ts", "../../../../enterprise-modules/set-filter/src/version.ts", "../../../../enterprise-modules/sparklines/src/sparklinesModule.ts", "../../../../enterprise-modules/sparklines/src/sparklineCellRenderer.ts", "../../../../enterprise-modules/sparklines/src/sparkline/area/areaSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/sparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/tooltip/defaultTooltipCss.ts", "../../../../enterprise-modules/sparklines/src/sparkline/tooltip/sparklineTooltip.ts", "../../../../enterprise-modules/sparklines/src/sparkline/marker/markerFactory.ts", "../../../../enterprise-modules/sparklines/src/util/lineDash.ts", "../../../../enterprise-modules/sparklines/src/sparkline/line/lineSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/bar-column/barSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/bar-column/barColumnSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/label/label.ts", "../../../../enterprise-modules/sparklines/src/sparkline/bar-column/columnSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/agSparkline.ts", "../../../../enterprise-modules/sparklines/src/tooltip/sparklineTooltipSingleton.ts", "../../../../enterprise-modules/sparklines/src/version.ts", "../../../../enterprise-modules/status-bar/src/statusBarModule.ts", "../../../../enterprise-modules/status-bar/src/statusBar/statusBarService.ts", "../../../../enterprise-modules/status-bar/src/statusBar/statusBar.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/nameValueComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/totalAndFilteredRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/filteredRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/totalRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/selectedRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/aggregationComp.ts", "../../../../enterprise-modules/status-bar/src/version.ts", "../../../../enterprise-modules/viewport-row-model/src/viewportRowModelModule.ts", "../../../../enterprise-modules/viewport-row-model/src/version.ts", "../../../../enterprise-modules/viewport-row-model/src/viewportRowModel/viewportRowModel.ts"],
  "sourcesContent": ["/*\n* Used for umd bundles without styles, as well as cjs/esm packaging\n*/\nimport {ModuleRegistry} from '@ag-grid-community/core';\nimport {ClientSideRowModelModule} from '@ag-grid-community/client-side-row-model'\nimport {InfiniteRowModelModule} from '@ag-grid-community/infinite-row-model'\nimport {CsvExportModule} from '@ag-grid-community/csv-export'\nimport {AdvancedFilterModule} from \"@ag-grid-enterprise/advanced-filter\";\nimport {GridChartsModule} from \"@ag-grid-enterprise/charts\";\nimport {ClipboardModule} from \"@ag-grid-enterprise/clipboard\";\nimport {ColumnsToolPanelModule} from \"@ag-grid-enterprise/column-tool-panel\";\nimport {ExcelExportModule} from \"@ag-grid-enterprise/excel-export\";\nimport {FiltersToolPanelModule} from \"@ag-grid-enterprise/filter-tool-panel\";\nimport {MasterDetailModule} from \"@ag-grid-enterprise/master-detail\";\nimport {MenuModule} from \"@ag-grid-enterprise/menu\";\nimport {MultiFilterModule} from \"@ag-grid-enterprise/multi-filter\";\nimport {RangeSelectionModule} from \"@ag-grid-enterprise/range-selection\";\nimport {RichSelectModule} from \"@ag-grid-enterprise/rich-select\";\nimport {RowGroupingModule} from \"@ag-grid-enterprise/row-grouping\";\nimport {ServerSideRowModelModule} from \"@ag-grid-enterprise/server-side-row-model\";\nimport {SetFilterModule} from \"@ag-grid-enterprise/set-filter\";\nimport {SideBarModule} from \"@ag-grid-enterprise/side-bar\";\nimport {SparklinesModule} from \"@ag-grid-enterprise/sparklines\";\nimport {StatusBarModule} from \"@ag-grid-enterprise/status-bar\";\nimport {ViewportRowModelModule} from \"@ag-grid-enterprise/viewport-row-model\";\n\nModuleRegistry.__registerModules([ClientSideRowModelModule,\n    InfiniteRowModelModule,\n    CsvExportModule,\n    AdvancedFilterModule,\n    GridChartsModule,\n    ClipboardModule,\n    ColumnsToolPanelModule,\n    ExcelExportModule,\n    FiltersToolPanelModule,\n    MasterDetailModule,\n    MenuModule,\n    MultiFilterModule,\n    RangeSelectionModule,\n    RichSelectModule,\n    RowGroupingModule,\n    ServerSideRowModelModule,\n    SetFilterModule,\n    SideBarModule,\n    SparklinesModule,\n    StatusBarModule,\n    ViewportRowModelModule\n], false, undefined);\n\n// do not export from \"ag-grid-community\" - this is handled below\n/** AUTO_GENERATED_START **/\nexport {ALWAYS_SYNC_GLOBAL_EVENTS} from \"@ag-grid-community/core\";\nexport {AbstractHeaderCellCtrl} from \"@ag-grid-community/core\";\nexport {AgAbstractField} from \"@ag-grid-community/core\";\nexport {AgAbstractLabel} from \"@ag-grid-community/core\";\nexport {AgAutocomplete} from \"@ag-grid-community/core\";\nexport {AgCheckbox} from \"@ag-grid-community/core\";\nexport {AgDialog} from \"@ag-grid-community/core\";\nexport {AgGroupComponent} from \"@ag-grid-community/core\";\nexport {AgInputDateField} from \"@ag-grid-community/core\";\nexport {AgInputNumberField} from \"@ag-grid-community/core\";\nexport {AgInputRange} from \"@ag-grid-community/core\";\nexport {AgInputTextArea} from \"@ag-grid-community/core\";\nexport {AgInputTextField} from \"@ag-grid-community/core\";\nexport {AgMenuItemComponent} from \"@ag-grid-community/core\";\nexport {AgMenuItemRenderer} from \"@ag-grid-community/core\";\nexport {AgMenuList} from \"@ag-grid-community/core\";\nexport {AgMenuPanel} from \"@ag-grid-community/core\";\nexport {AgPanel} from \"@ag-grid-community/core\";\nexport {AgPickerField} from \"@ag-grid-community/core\";\nexport {AgPromise} from \"@ag-grid-community/core\";\nexport {AgPromiseStatus} from \"@ag-grid-community/core\";\nexport {AgRadioButton} from \"@ag-grid-community/core\";\nexport {AgRichSelect} from \"@ag-grid-community/core\";\nexport {AgSelect} from \"@ag-grid-community/core\";\nexport {AgSlider} from \"@ag-grid-community/core\";\nexport {AgStackComponentsRegistry} from \"@ag-grid-community/core\";\nexport {AgToggleButton} from \"@ag-grid-community/core\";\nexport {AlignedGridsService} from \"@ag-grid-community/core\";\nexport {AnimateShowChangeCellRenderer} from \"@ag-grid-community/core\";\nexport {AnimateSlideCellRenderer} from \"@ag-grid-community/core\";\nexport {AnimationFrameService} from \"@ag-grid-community/core\";\nexport {AutoScrollService} from \"@ag-grid-community/core\";\nexport {AutoWidthCalculator} from \"@ag-grid-community/core\";\nexport {Autowired} from \"@ag-grid-community/core\";\nexport {BarColumnLabelPlacement} from \"@ag-grid-community/core\";\nexport {BaseComponentWrapper} from \"@ag-grid-community/core\";\nexport {Bean} from \"@ag-grid-community/core\";\nexport {BeanStub} from \"@ag-grid-community/core\";\nexport {Beans} from \"@ag-grid-community/core\";\nexport {BodyDropPivotTarget} from \"@ag-grid-community/core\";\nexport {BodyDropTarget} from \"@ag-grid-community/core\";\nexport {CellComp} from \"@ag-grid-community/core\";\nexport {CellCtrl} from \"@ag-grid-community/core\";\nexport {CellNavigationService} from \"@ag-grid-community/core\";\nexport {CellPositionUtils} from \"@ag-grid-community/core\";\nexport {CellRangeType} from \"@ag-grid-community/core\";\nexport {ChangedPath} from \"@ag-grid-community/core\";\nexport {CheckboxCellEditor} from \"@ag-grid-community/core\";\nexport {CheckboxCellRenderer} from \"@ag-grid-community/core\";\nexport {CheckboxSelectionComponent} from \"@ag-grid-community/core\";\nexport {ClientSideRowModelSteps} from \"@ag-grid-community/core\";\nexport {ColDefUtil} from \"@ag-grid-community/core\";\nexport {Column} from \"@ag-grid-community/core\";\nexport {ColumnApi} from \"@ag-grid-community/core\";\nexport {ColumnFactory} from \"@ag-grid-community/core\";\nexport {ColumnGroup} from \"@ag-grid-community/core\";\nexport {ColumnKeyCreator} from \"@ag-grid-community/core\";\nexport {ColumnModel} from \"@ag-grid-community/core\";\nexport {ColumnUtils} from \"@ag-grid-community/core\";\nexport {Component} from \"@ag-grid-community/core\";\nexport {ComponentUtil} from \"@ag-grid-community/core\";\nexport {Context} from \"@ag-grid-community/core\";\nexport {CssClassApplier} from \"@ag-grid-community/core\";\nexport {CssClassManager} from \"@ag-grid-community/core\";\nexport {CtrlsService} from \"@ag-grid-community/core\";\nexport {DataTypeService} from \"@ag-grid-community/core\";\nexport {DateCellEditor} from \"@ag-grid-community/core\";\nexport {DateFilter} from \"@ag-grid-community/core\";\nexport {DateStringCellEditor} from \"@ag-grid-community/core\";\nexport {DisplayedGroupCreator} from \"@ag-grid-community/core\";\nexport {DragAndDropService} from \"@ag-grid-community/core\";\nexport {DragService} from \"@ag-grid-community/core\";\nexport {DragSourceType} from \"@ag-grid-community/core\";\nexport {Environment} from \"@ag-grid-community/core\";\nexport {EventService} from \"@ag-grid-community/core\";\nexport {Events} from \"@ag-grid-community/core\";\nexport {ExcelFactoryMode} from \"@ag-grid-community/core\";\nexport {ExpansionService} from \"@ag-grid-community/core\";\nexport {ExpressionService} from \"@ag-grid-community/core\";\nexport {FilterManager} from \"@ag-grid-community/core\";\nexport {FloatingFilterMapper} from \"@ag-grid-community/core\";\nexport {FocusService} from \"@ag-grid-community/core\";\nexport {GROUP_AUTO_COLUMN_ID} from \"@ag-grid-community/core\";\nexport {Grid} from \"@ag-grid-community/core\";\nexport {GridApi} from \"@ag-grid-community/core\";\nexport {GridBodyComp} from \"@ag-grid-community/core\";\nexport {GridBodyCtrl} from \"@ag-grid-community/core\";\nexport {GridComp} from \"@ag-grid-community/core\";\nexport {GridCoreCreator} from \"@ag-grid-community/core\";\nexport {GridCtrl} from \"@ag-grid-community/core\";\nexport {GridHeaderComp} from \"@ag-grid-community/core\";\nexport {GridHeaderCtrl} from \"@ag-grid-community/core\";\nexport {GridOptionsService} from \"@ag-grid-community/core\";\nexport {GroupCellRenderer} from \"@ag-grid-community/core\";\nexport {GroupCellRendererCtrl} from \"@ag-grid-community/core\";\nexport {GroupInstanceIdCreator} from \"@ag-grid-community/core\";\nexport {HeaderCellCtrl} from \"@ag-grid-community/core\";\nexport {HeaderFilterCellComp} from \"@ag-grid-community/core\";\nexport {HeaderFilterCellCtrl} from \"@ag-grid-community/core\";\nexport {HeaderGroupCellCtrl} from \"@ag-grid-community/core\";\nexport {HeaderNavigationDirection} from \"@ag-grid-community/core\";\nexport {HeaderNavigationService} from \"@ag-grid-community/core\";\nexport {HeaderPositionUtils} from \"@ag-grid-community/core\";\nexport {HeaderRowComp} from \"@ag-grid-community/core\";\nexport {HeaderRowContainerComp} from \"@ag-grid-community/core\";\nexport {HeaderRowContainerCtrl} from \"@ag-grid-community/core\";\nexport {HeaderRowCtrl} from \"@ag-grid-community/core\";\nexport {HeaderRowType} from \"@ag-grid-community/core\";\nexport {HorizontalDirection} from \"@ag-grid-community/core\";\nexport {HorizontalResizeService} from \"@ag-grid-community/core\";\nexport {KeyCode} from \"@ag-grid-community/core\";\nexport {LargeTextCellEditor} from \"@ag-grid-community/core\";\nexport {LayoutCssClasses} from \"@ag-grid-community/core\";\nexport {LocaleService} from \"@ag-grid-community/core\";\nexport {Logger} from \"@ag-grid-community/core\";\nexport {LoggerFactory} from \"@ag-grid-community/core\";\nexport {ManagedFocusFeature} from \"@ag-grid-community/core\";\nexport {MenuService} from \"@ag-grid-community/core\";\nexport {ModuleNames} from \"@ag-grid-community/core\";\nexport {ModuleRegistry} from \"@ag-grid-community/core\";\nexport {MouseEventService} from \"@ag-grid-community/core\";\nexport {MoveColumnFeature} from \"@ag-grid-community/core\";\nexport {NavigationService} from \"@ag-grid-community/core\";\nexport {NumberCellEditor} from \"@ag-grid-community/core\";\nexport {NumberFilter} from \"@ag-grid-community/core\";\nexport {NumberSequence} from \"@ag-grid-community/core\";\nexport {Optional} from \"@ag-grid-community/core\";\nexport {PaginationProxy} from \"@ag-grid-community/core\";\nexport {PillDragComp} from \"@ag-grid-community/core\";\nexport {PillDropZonePanel} from \"@ag-grid-community/core\";\nexport {PinnedRowModel} from \"@ag-grid-community/core\";\nexport {PopupComponent} from \"@ag-grid-community/core\";\nexport {PopupEditorWrapper} from \"@ag-grid-community/core\";\nexport {PopupService} from \"@ag-grid-community/core\";\nexport {PositionableFeature} from \"@ag-grid-community/core\";\nexport {PostConstruct} from \"@ag-grid-community/core\";\nexport {PreConstruct} from \"@ag-grid-community/core\";\nexport {PreDestroy} from \"@ag-grid-community/core\";\nexport {PropertyKeys} from \"@ag-grid-community/core\";\nexport {ProvidedColumnGroup} from \"@ag-grid-community/core\";\nexport {ProvidedFilter} from \"@ag-grid-community/core\";\nexport {Qualifier} from \"@ag-grid-community/core\";\nexport {QuerySelector} from \"@ag-grid-community/core\";\nexport {RefSelector} from \"@ag-grid-community/core\";\nexport {ResizeObserverService} from \"@ag-grid-community/core\";\nexport {RowAnimationCssClasses} from \"@ag-grid-community/core\";\nexport {RowContainerComp} from \"@ag-grid-community/core\";\nexport {RowContainerCtrl} from \"@ag-grid-community/core\";\nexport {RowContainerName} from \"@ag-grid-community/core\";\nexport {RowContainerType} from \"@ag-grid-community/core\";\nexport {RowCtrl} from \"@ag-grid-community/core\";\nexport {RowHighlightPosition} from \"@ag-grid-community/core\";\nexport {RowNode} from \"@ag-grid-community/core\";\nexport {RowNodeBlock} from \"@ag-grid-community/core\";\nexport {RowNodeBlockLoader} from \"@ag-grid-community/core\";\nexport {RowNodeSorter} from \"@ag-grid-community/core\";\nexport {RowPositionUtils} from \"@ag-grid-community/core\";\nexport {RowRenderer} from \"@ag-grid-community/core\";\nexport {ScalarFilter} from \"@ag-grid-community/core\";\nexport {ScrollVisibleService} from \"@ag-grid-community/core\";\nexport {SelectCellEditor} from \"@ag-grid-community/core\";\nexport {SelectableService} from \"@ag-grid-community/core\";\nexport {SelectionHandleType} from \"@ag-grid-community/core\";\nexport {ServerSideTransactionResultStatus} from \"@ag-grid-community/core\";\nexport {SetLeftFeature} from \"@ag-grid-community/core\";\nexport {SimpleFilter} from \"@ag-grid-community/core\";\nexport {SortController} from \"@ag-grid-community/core\";\nexport {SortIndicatorComp} from \"@ag-grid-community/core\";\nexport {StandardMenuFactory} from \"@ag-grid-community/core\";\nexport {StylingService} from \"@ag-grid-community/core\";\nexport {TabGuardClassNames} from \"@ag-grid-community/core\";\nexport {TabGuardComp} from \"@ag-grid-community/core\";\nexport {TabGuardCtrl} from \"@ag-grid-community/core\";\nexport {TabbedLayout} from \"@ag-grid-community/core\";\nexport {TemplateService} from \"@ag-grid-community/core\";\nexport {TextCellEditor} from \"@ag-grid-community/core\";\nexport {TextFilter} from \"@ag-grid-community/core\";\nexport {TextFloatingFilter} from \"@ag-grid-community/core\";\nexport {Timer} from \"@ag-grid-community/core\";\nexport {TooltipFeature} from \"@ag-grid-community/core\";\nexport {TooltipStateManager} from \"@ag-grid-community/core\";\nexport {TouchListener} from \"@ag-grid-community/core\";\nexport {UserComponentFactory} from \"@ag-grid-community/core\";\nexport {UserComponentRegistry} from \"@ag-grid-community/core\";\nexport {ValueCache} from \"@ag-grid-community/core\";\nexport {ValueFormatterService} from \"@ag-grid-community/core\";\nexport {ValueParserService} from \"@ag-grid-community/core\";\nexport {ValueService} from \"@ag-grid-community/core\";\nexport {VanillaFrameworkOverrides} from \"@ag-grid-community/core\";\nexport {VerticalDirection} from \"@ag-grid-community/core\";\nexport {VirtualList} from \"@ag-grid-community/core\";\nexport {VirtualListDragFeature} from \"@ag-grid-community/core\";\nexport {_} from \"@ag-grid-community/core\";\nexport {createGrid} from \"@ag-grid-community/core\";\nexport {getRowContainerTypeForName} from \"@ag-grid-community/core\";\n/** AUTO_GENERATED_END **/\n\nexport * from \"@ag-grid-enterprise/core\";\nexport * from \"@ag-grid-enterprise/advanced-filter\";\nexport * from \"@ag-grid-enterprise/charts\";\nexport * from \"@ag-grid-enterprise/clipboard\";\nexport * from \"@ag-grid-enterprise/column-tool-panel\";\nexport * from \"@ag-grid-enterprise/excel-export\";\nexport * from \"@ag-grid-enterprise/filter-tool-panel\";\nexport * from \"@ag-grid-enterprise/master-detail\";\nexport * from \"@ag-grid-enterprise/menu\";\nexport * from \"@ag-grid-enterprise/multi-filter\";\nexport * from \"@ag-grid-enterprise/range-selection\";\nexport * from \"@ag-grid-enterprise/rich-select\";\nexport * from \"@ag-grid-enterprise/row-grouping\";\nexport * from \"@ag-grid-enterprise/server-side-row-model\";\nexport * from \"@ag-grid-enterprise/set-filter\";\nexport * from \"@ag-grid-enterprise/side-bar\";\nexport * from \"@ag-grid-enterprise/sparklines\";\nexport * from \"@ag-grid-enterprise/status-bar\";\nexport * from \"@ag-grid-enterprise/viewport-row-model\";\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { AdvancedFilterComp } from \"./advancedFilter/advancedFilterComp\";\nimport { AdvancedFilterExpressionService } from \"./advancedFilter/advancedFilterExpressionService\";\nimport { AdvancedFilterService } from \"./advancedFilter/advancedFilterService\";\nimport { VERSION } from \"./version\";\n\nexport const AdvancedFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.AdvancedFilterModule,\n    beans: [AdvancedFilterService, AdvancedFilterExpressionService],\n    agStackComponents: [\n        { componentName: 'agAdvancedFilter', componentClass: AdvancedFilterComp }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    AgAutocomplete,\n    AutocompleteEntry,\n    AutocompleteListParams,\n    AutocompleteOptionSelectedEvent,\n    AutocompleteValidChangedEvent,\n    AutocompleteValueChangedEvent,\n    AutocompleteValueConfirmedEvent,\n    Autowired,\n    Component,\n    FilterManager,\n    ITooltipParams,\n    PostConstruct,\n    RefSelector,\n    WithoutGridCommon,\n    _\n} from '@ag-grid-community/core';\nimport { AdvancedFilterCtrl } from './advancedFilterCtrl';\nimport { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport { AdvancedFilterService } from './advancedFilterService';\nimport { FilterExpressionParser } from './filterExpressionParser';\nimport { AutocompleteUpdate } from './filterExpressionUtils';\n\nexport class AdvancedFilterComp extends Component {\n    @RefSelector('eAutocomplete') private eAutocomplete: AgAutocomplete;\n    @RefSelector('eApplyFilterButton') private eApplyFilterButton: HTMLElement;\n    @RefSelector('eBuilderFilterButton') private eBuilderFilterButton: HTMLElement;\n    @RefSelector('eBuilderFilterButtonIcon') private eBuilderFilterButtonIcon: HTMLElement;\n    @RefSelector('eBuilderFilterButtonLabel') private eBuilderFilterButtonLabel: HTMLElement;\n    @Autowired('advancedFilterService') private advancedFilterService: AdvancedFilterService;\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    private expressionParser: FilterExpressionParser | null = null;\n    private isApplyDisabled = true;\n    private builderOpen = false;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter\" role=\"presentation\" tabindex=\"-1\">\n                <ag-autocomplete ref=\"eAutocomplete\"></ag-autocomplete>\n                <button class=\"ag-button ag-standard-button ag-advanced-filter-apply-button\" ref=\"eApplyFilterButton\"></button>\n                <button class=\"ag-advanced-filter-builder-button\" ref=\"eBuilderFilterButton\">\n                    <span ref=\"eBuilderFilterButtonIcon\" aria-hidden=\"true\"></span>\n                    <span class=\"ag-advanced-filter-builder-button-label\" ref=\"eBuilderFilterButtonLabel\"></span>\n                </button>\n            </div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.eAutocomplete\n            .setListGenerator((_value, position) => this.generateAutocompleteListParams(position))\n            .setValidator(() => this.validateValue())\n            .setForceLastSelection((lastSelection, searchString) => this.forceLastSelection(lastSelection, searchString))\n            .setInputAriaLabel(this.advancedFilterExpressionService.translate('ariaAdvancedFilterInput'))\n            .setListAriaLabel(this.advancedFilterExpressionService.translate('ariaLabelAdvancedFilterAutocomplete'));\n\n        this.refresh();\n\n        this.addManagedListener(this.eAutocomplete, AgAutocomplete.EVENT_VALUE_CHANGED,\n            ({ value }: AutocompleteValueChangedEvent) => this.onValueChanged(value));\n        this.addManagedListener(this.eAutocomplete, AgAutocomplete.EVENT_VALUE_CONFIRMED,\n            ({ isValid }: AutocompleteValueConfirmedEvent) => this.onValueConfirmed(isValid));\n        this.addManagedListener(this.eAutocomplete, AgAutocomplete.EVENT_OPTION_SELECTED,\n            ({ position, updateEntry, autocompleteType }: AutocompleteOptionSelectedEvent) => this.onOptionSelected(position, updateEntry, autocompleteType));\n        this.addManagedListener(this.eAutocomplete, AgAutocomplete.EVENT_VALID_CHANGED,\n            ({ isValid, validationMessage }: AutocompleteValidChangedEvent) => this.onValidChanged(isValid, validationMessage));\n\n        this.setupApplyButton();\n        this.setupBuilderButton();\n    }\n\n    public refresh(): void {\n        const expression = this.advancedFilterService.getExpressionDisplayValue();\n        this.eAutocomplete.setValue({ value: expression ?? '', position: expression?.length, updateListOnlyIfOpen: true });\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eAutocomplete.setInputDisabled(disabled);\n        _.setDisabled(this.eApplyFilterButton, disabled || this.isApplyDisabled);\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'advancedFilter';\n        return res;\n    }\n\n    private setupApplyButton(): void {\n        this.eApplyFilterButton.innerText = this.advancedFilterExpressionService.translate('advancedFilterApply');\n        this.activateTabIndex([this.eApplyFilterButton]);\n        this.addManagedListener(this.eApplyFilterButton, 'click', () => this.onValueConfirmed(this.eAutocomplete.isValid()));\n        _.setDisabled(this.eApplyFilterButton, this.isApplyDisabled);\n    }\n\n    private setupBuilderButton(): void {\n        this.eBuilderFilterButtonIcon.appendChild(_.createIconNoSpan('advancedFilterBuilder', this.gridOptionsService)!);\n        this.eBuilderFilterButtonLabel.innerText = this.advancedFilterExpressionService.translate('advancedFilterBuilder');\n        this.activateTabIndex([this.eBuilderFilterButton]);\n        this.addManagedListener(this.eBuilderFilterButton, 'click', () => this.openBuilder());\n        this.addManagedListener(this.advancedFilterService.getCtrl(), AdvancedFilterCtrl.EVENT_BUILDER_CLOSED, () => this.closeBuilder());\n    }\n\n    private onValueChanged(value: string | null): void {\n        value = _.makeNull(value);\n        this.advancedFilterService.setExpressionDisplayValue(value);\n        this.expressionParser = this.advancedFilterService.createExpressionParser(value);\n        const updatedExpression = this.expressionParser?.parseExpression();\n        if (updatedExpression && updatedExpression !== value) {\n            this.eAutocomplete.setValue({ value: updatedExpression, silent: true, restoreFocus: true });\n        }\n    }\n\n    private onValueConfirmed(isValid: boolean): void {\n        if (!isValid || this.isApplyDisabled) { return; }\n        _.setDisabled(this.eApplyFilterButton, true);\n        this.advancedFilterService.applyExpression();\n        this.filterManager.onFilterChanged({ source: 'advancedFilter' });\n    }\n\n    private onOptionSelected(position: number, updateEntry: AutocompleteEntry, type?: string): void {\n        const { updatedValue, updatedPosition, hideAutocomplete } = this.updateExpression(position, updateEntry, type);\n        this.eAutocomplete.setValue({\n            value: updatedValue,\n            position: updatedPosition,\n            updateListOnlyIfOpen: hideAutocomplete, \n            restoreFocus: true\n        });\n    }\n\n    private validateValue(): string | null {\n        return this.expressionParser?.isValid() ? null : (this.expressionParser?.getValidationMessage() ?? null);\n    }\n\n    private onValidChanged(isValid: boolean, validationMessage: string | null): void {\n        this.isApplyDisabled = !isValid || this.advancedFilterService.isCurrentExpressionApplied();\n        _.setDisabled(this.eApplyFilterButton, this.isApplyDisabled);\n        this.setTooltip({ \n            newTooltipText: validationMessage,\n            showDelayOverride: 1000\n        });\n    }\n\n    private generateAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.expressionParser\n            ? this.expressionParser.getAutocompleteListParams(position)\n            : this.advancedFilterExpressionService.getDefaultAutocompleteListParams('');\n    }\n\n    private updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        type?: string\n    ): AutocompleteUpdate {\n        this.advancedFilterExpressionService.updateAutocompleteCache(updateEntry, type);\n        return this.expressionParser?.updateExpression(position, updateEntry, type) ?? this.advancedFilterService.getDefaultExpression(updateEntry);\n    }\n\n    private forceLastSelection({ key, displayValue }: AutocompleteEntry, searchString: string): boolean {\n        return !!searchString.toLocaleLowerCase().match(`^${(displayValue ?? key).toLocaleLowerCase()}\\\\s*$`);\n    }\n\n    private openBuilder(): void {\n        if (this.builderOpen) { return; }\n        this.builderOpen = true;\n        _.setDisabled(this.eBuilderFilterButton, true);\n        this.advancedFilterService.getCtrl().toggleFilterBuilder('ui');\n    }\n\n    private closeBuilder(): void {\n        if (!this.builderOpen) { return; }\n        this.builderOpen = false;\n        _.setDisabled(this.eBuilderFilterButton, false);\n        this.eBuilderFilterButton.focus();\n    }\n}\n", "import {\n    AdvancedFilterBuilderVisibleChangedEvent,\n    AdvancedFilterEnabledChangedEvent,\n    AgDialog,\n    Autowired,\n    BeanStub,\n    CtrlsService,\n    Events,\n    FocusService,\n    IAdvancedFilterCtrl,\n    PopupService,\n    PostConstruct,\n    WithoutGridCommon,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterHeaderComp } from \"./advancedFilterHeaderComp\";\nimport { AdvancedFilterComp } from \"./advancedFilterComp\";\nimport { AdvancedFilterBuilderComp } from \"./builder/advancedFilterBuilderComp\";\nimport { AdvancedFilterExpressionService } from \"./advancedFilterExpressionService\";\n\nexport class AdvancedFilterCtrl extends BeanStub implements IAdvancedFilterCtrl {\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public static readonly EVENT_BUILDER_CLOSED = 'advancedFilterBuilderClosed';\n\n    private eHeaderComp: AdvancedFilterHeaderComp | undefined;\n    private eFilterComp: AdvancedFilterComp | undefined;\n    private hasAdvancedFilterParent: boolean;\n    private eBuilderComp: AdvancedFilterBuilderComp | undefined;\n    private eBuilderDialog: AgDialog | undefined;\n    private builderDestroySource?: 'api' | 'ui';\n\n    constructor(private enabled: boolean) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.hasAdvancedFilterParent = !!this.gridOptionsService.get('advancedFilterParent');\n\n        this.ctrlsService.whenReady(() => this.setAdvancedFilterComp());\n\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,\n            ({ enabled }: AdvancedFilterEnabledChangedEvent) => this.onEnabledChanged(enabled));\n\n        this.addManagedPropertyListener('advancedFilterParent', () => this.updateComps());\n\n        this.addDestroyFunc(() => {\n            this.destroyAdvancedFilterComp();\n            this.destroyBean(this.eBuilderComp);\n            if (this.eBuilderDialog && this.eBuilderDialog.isAlive()) {\n                this.destroyBean(this.eBuilderDialog);\n            }\n        });\n    }\n\n    public setupHeaderComp(eCompToInsertBefore: HTMLElement): void {\n        this.eHeaderComp = this.createManagedBean(new AdvancedFilterHeaderComp(this.enabled && !this.hasAdvancedFilterParent));\n        eCompToInsertBefore.insertAdjacentElement('beforebegin', this.eHeaderComp.getGui());\n    }\n\n    public focusHeaderComp(): boolean {\n        if (this.eHeaderComp) {\n            this.eHeaderComp.getFocusableElement().focus();\n            return true;\n        }\n        return false;\n    }\n\n    public refreshComp(): void {\n        this.eFilterComp?.refresh();\n        this.eHeaderComp?.refresh();\n    }\n\n    public refreshBuilderComp(): void {\n        this.eBuilderComp?.refresh();\n    }\n\n    public getHeaderHeight(): number {\n        return this.eHeaderComp?.getHeight() ?? 0;\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eFilterComp?.setInputDisabled(disabled);\n        this.eHeaderComp?.setInputDisabled(disabled);\n    }\n\n    public toggleFilterBuilder(source: 'api' | 'ui', force?: boolean): void {\n        if ((force && this.eBuilderDialog) || (force === false && !this.eBuilderDialog)) {\n            // state requested is already active\n            return;\n        }\n        if (this.eBuilderDialog) {\n            this.builderDestroySource = source;\n            this.destroyBean(this.eBuilderDialog);\n            return;\n        }\n\n        this.setInputDisabled(true);\n\n        const { width, height, minWidth } = this.getBuilderDialogSize();\n\n        this.eBuilderComp = this.createBean(new AdvancedFilterBuilderComp());\n        this.eBuilderDialog = this.createBean(new AgDialog({\n            title: this.advancedFilterExpressionService.translate('advancedFilterBuilderTitle'),\n            component: this.eBuilderComp,\n            width,\n            height,\n            resizable: true,\n            movable: true,\n            maximizable: true,\n            centered: true,\n            closable: true,\n            minWidth,\n            afterGuiAttached: () => this.eBuilderComp?.afterGuiAttached()\n        }));\n\n        this.dispatchFilterBuilderVisibleChangedEvent(source, true);\n\n        this.eBuilderDialog.addEventListener(AgDialog.EVENT_DESTROYED, () => {\n            this.destroyBean(this.eBuilderComp);\n            this.eBuilderComp = undefined;\n            this.eBuilderDialog = undefined;\n            this.setInputDisabled(false);\n            this.dispatchEvent({\n                type: AdvancedFilterCtrl.EVENT_BUILDER_CLOSED\n            });\n            this.dispatchFilterBuilderVisibleChangedEvent(this.builderDestroySource ?? 'ui', false);\n            this.builderDestroySource = undefined;\n        });\n    }\n\n    private dispatchFilterBuilderVisibleChangedEvent(source: 'api' | 'ui', visible: boolean): void {\n        const event: WithoutGridCommon<AdvancedFilterBuilderVisibleChangedEvent> = {\n            type: Events.EVENT_ADVANCED_FILTER_BUILDER_VISIBLE_CHANGED,\n            source,\n            visible\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getBuilderDialogSize(): { width: number, height: number, minWidth: number } {\n        const minWidth = this.gridOptionsService.get('advancedFilterBuilderParams')?.minWidth ?? 500;\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = Math.round(_.getAbsoluteWidth(popupParent)) - 2; // assume 1 pixel border\n        const maxHeight = Math.round(_.getAbsoluteHeight(popupParent) * 0.75) - 2;\n\n        const width = Math.min(Math.max(600, minWidth), maxWidth);\n        const height = Math.min(600, maxHeight);\n\n        return { width, height, minWidth };\n    }\n\n    private onEnabledChanged(enabled: boolean): void {\n        this.enabled = enabled;\n        this.updateComps();\n    }\n\n    private updateComps(): void {\n        this.setAdvancedFilterComp();\n        this.setHeaderCompEnabled();\n        this.eventService.dispatchEvent({\n            type: Events.EVENT_HEADER_HEIGHT_CHANGED\n        });\n    }\n\n    private setAdvancedFilterComp(): void {\n        this.destroyAdvancedFilterComp();\n        if (!this.enabled) { return; }\n\n        const advancedFilterParent = this.gridOptionsService.get('advancedFilterParent');\n        this.hasAdvancedFilterParent = !!advancedFilterParent;\n        if (advancedFilterParent) {\n            // unmanaged as can be recreated\n            const eAdvancedFilterComp = this.createBean(new AdvancedFilterComp());\n            const eAdvancedFilterCompGui = eAdvancedFilterComp.getGui();\n            \n            const { allThemes } = this.environment.getTheme();\n            \n            if (allThemes.length) {\n                eAdvancedFilterCompGui.classList.add(...allThemes);\n            }\n            \n            eAdvancedFilterCompGui.classList.add(this.gridOptionsService.get('enableRtl') ? 'ag-rtl' : 'ag-ltr');\n\n            advancedFilterParent.appendChild(eAdvancedFilterCompGui);\n\n            this.eFilterComp = eAdvancedFilterComp;\n        }\n    }\n\n    private setHeaderCompEnabled(): void {\n        this.eHeaderComp?.setEnabled(this.enabled && !this.hasAdvancedFilterParent);\n    }\n\n    private destroyAdvancedFilterComp(): void {\n        if (this.eFilterComp) {\n            _.removeFromParent(this.eFilterComp.getGui());\n            this.destroyBean(this.eFilterComp);\n        }\n    }\n}\n", "import {\n    Autowired,\n    ColumnModel,\n    Component,\n    Events,\n    FocusService,\n    HeaderNavigationService,\n    KeyCode,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterComp } from \"./advancedFilterComp\";\n\nexport class AdvancedFilterHeaderComp extends Component {\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n\n    private eAdvancedFilter: AdvancedFilterComp | undefined;\n    private height: number;\n\n    constructor(private enabled: boolean) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-header\" role=\"row\">\n            </div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.setupAdvancedFilter(this.enabled);\n\n        this.addDestroyFunc(() => this.destroyBean(this.eAdvancedFilter));\n\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, () => this.onGridColumnsChanged());\n\n        this.addGuiEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event));\n\n        this.addGuiEventListener('focusout', (event: FocusEvent) => {\n            if (!this.getFocusableElement().contains(event.relatedTarget as HTMLElement)) {\n                this.focusService.clearAdvancedFilterColumn();\n            }\n        });\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eAdvancedFilter?.getGui() ?? this.getGui();\n    }\n\n    public setEnabled(enabled: boolean): void {\n        if (enabled === this.enabled) { return; }\n        this.setupAdvancedFilter(enabled);\n    }\n\n    public refresh(): void {\n        this.eAdvancedFilter?.refresh();\n    }\n\n    public getHeight(): number {\n        return this.height;\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eAdvancedFilter?.setInputDisabled(disabled);\n    }\n\n    private setupAdvancedFilter(enabled: boolean): void {\n        const eGui = this.getGui();\n        if (enabled) {\n            // unmanaged as can be recreated\n            this.eAdvancedFilter = this.createBean(new AdvancedFilterComp());\n            const eAdvancedFilterGui = this.eAdvancedFilter.getGui();\n            this.eAdvancedFilter.addCssClass('ag-advanced-filter-header-cell');\n            \n            this.height = this.columnModel.getFloatingFiltersHeight();\n            const height = `${this.height}px`;\n            eGui.style.height = height;\n            eGui.style.minHeight = height;\n\n            this.setAriaRowIndex();\n            _.setAriaRole(eAdvancedFilterGui, 'gridcell');\n            _.setAriaColIndex(eAdvancedFilterGui, 1);\n            this.setAriaColumnCount(eAdvancedFilterGui);\n\n            eGui.appendChild(eAdvancedFilterGui);\n        } else {\n            _.clearElement(eGui);\n            this.destroyBean(this.eAdvancedFilter);\n            this.height = 0;\n        }\n        _.setDisplayed(eGui, enabled);\n        this.enabled = enabled;\n    }\n    \n    private setAriaColumnCount(eAdvancedFilterGui: HTMLElement): void {\n        _.setAriaColSpan(eAdvancedFilterGui, this.columnModel.getAllGridColumns().length);\n    }\n\n    private setAriaRowIndex(): void {\n        _.setAriaRowIndex(this.getGui(), this.headerNavigationService.getHeaderRowCount());\n    }\n\n    private onGridColumnsChanged(): void {\n        if (!this.eAdvancedFilter) { return; }\n        this.setAriaColumnCount(this.eAdvancedFilter.getGui());\n        this.setAriaRowIndex();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        switch (event.key) {\n            case KeyCode.ENTER: {\n                if (this.hasFocus()) {\n                    if (this.focusService.focusInto(this.getFocusableElement())) {\n                        event.preventDefault();\n                    }\n                }\n                break;\n            }\n            case KeyCode.ESCAPE:\n                if (!this.hasFocus()) {\n                    this.getFocusableElement().focus();\n                }\n                break;\n            case KeyCode.UP:\n                this.navigateUpDown(true, event);\n                break;\n            case KeyCode.DOWN:\n                this.navigateUpDown(false, event);\n                break;\n            case KeyCode.TAB:\n                if (this.hasFocus()) {\n                    this.navigateLeftRight(event);\n                } else {\n                    const nextFocusableEl = this.focusService.findNextFocusableElement(this.getFocusableElement(), null, event.shiftKey);\n                    if (nextFocusableEl) {\n                        event.preventDefault();\n                        nextFocusableEl.focus();\n                    } else {\n                        this.navigateLeftRight(event);\n                    }\n                }\n                break;\n        }\n    }\n\n    private navigateUpDown(backwards: boolean, event: KeyboardEvent): void {\n        if (this.hasFocus()) {\n            if (this.focusService.focusNextFromAdvancedFilter(backwards)) {\n                event.preventDefault();\n            };\n        }\n    }\n\n    private navigateLeftRight(event: KeyboardEvent): void {\n        if (event.shiftKey\n            ? this.focusService.focusLastHeader()\n            : this.focusService.focusNextFromAdvancedFilter(false, true)) {\n            event.preventDefault();\n        }\n    }\n\n    private hasFocus(): boolean {\n        const eDocument = this.gridOptionsService.getDocument();\n        return eDocument.activeElement === this.getFocusableElement();\n    }\n}\n", "import {\n    AdvancedFilterModel,\n    Autowired,\n    Beans,\n    ColumnAdvancedFilterModel,\n    Component,\n    FilterManager,\n    JoinAdvancedFilterModel,\n    PostConstruct,\n    RefSelector,\n    TooltipFeature,\n    VirtualList,\n    VirtualListDragItem,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterBuilderItemComp } from \"./advancedFilterBuilderItemComp\";\nimport { AdvancedFilterExpressionService } from \"../advancedFilterExpressionService\";\nimport { AdvancedFilterService } from \"../advancedFilterService\";\nimport { AdvancedFilterBuilderDragFeature } from \"./advancedFilterBuilderDragFeature\";\nimport { AdvancedFilterBuilderItemAddComp } from \"./advancedFilterBuilderItemAddComp\";\nimport {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    AdvancedFilterBuilderMoveEvent,\n    AdvancedFilterBuilderRemoveEvent\n} from \"./iAdvancedFilterBuilder\";\n\nexport class AdvancedFilterBuilderComp extends Component {\n    @RefSelector('eList') private eList: HTMLElement;\n    @RefSelector('eApplyFilterButton') private eApplyFilterButton: HTMLElement;\n    @RefSelector('eCancelFilterButton') private eCancelFilterButton: HTMLElement;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('advancedFilterService') private advancedFilterService: AdvancedFilterService;\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    @Autowired('beans') private beans: Beans;\n\n    private virtualList: VirtualList<AdvancedFilterBuilderItemComp | AdvancedFilterBuilderItemAddComp>;\n    private filterModel: AdvancedFilterModel;\n    private stringifiedModel: string;\n    private items: AdvancedFilterBuilderItem[];\n    private dragFeature: AdvancedFilterBuilderDragFeature;\n    private showMove: boolean;\n    private validationTooltipFeature: TooltipFeature;\n    private validationMessage: string | null = null;\n\n    constructor() {\n        super(/* html */ `\n            <div role=\"presentation\" class=\"ag-advanced-filter-builder\" tabindex=\"-1\">\n                <div role=\"presentation\" class=\"ag-advanced-filter-builder-list\" ref=\"eList\"></div>\n                <div role=\"presentation\" class=\"ag-advanced-filter-builder-button-panel\">\n                    <button class=\"ag-button ag-standard-button ag-advanced-filter-builder-apply-button\" ref=\"eApplyFilterButton\"></button>\n                    <button class=\"ag-button ag-standard-button ag-advanced-filter-builder-cancel-button\" ref=\"eCancelFilterButton\"></button>\n                </div>\n            </div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const { showMoveButtons } = this.gridOptionsService.get('advancedFilterBuilderParams') ?? {};\n        this.showMove = !!showMoveButtons;\n        this.addManagedPropertyListener('advancedFilterBuilderParams', ({currentValue}) => {\n            this.showMove = !!currentValue?.showMoveButtons;\n            this.refreshList(false);\n        })\n\n        this.filterModel = this.setupFilterModel();\n        this.setupVirtualList();\n\n        this.dragFeature = this.createManagedBean(new AdvancedFilterBuilderDragFeature(this, this.virtualList));\n\n        this.setupButtons();\n    }\n\n    public refresh(): void {\n        let indexToFocus = this.virtualList.getLastFocusedRow();\n        this.setupFilterModel();\n        this.validateItems();\n        this.refreshList(false);\n        if (indexToFocus != null) {\n            // last focused row is cleared on focus out, so if defined, we need to put the focus back\n            if (!this.virtualList.getComponentAt(indexToFocus)) {\n                indexToFocus = 0;\n            }\n            this.virtualList.focusRow(indexToFocus);\n        }\n    }\n\n    public getNumItems(): number {\n        return this.items.length;\n    }\n\n    public moveItem(item: AdvancedFilterBuilderItem | null, destination: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null): void {\n        if (!destination || !item) { return; }\n        this.moveItemToIndex(item, destination.rowIndex, destination.position);\n    }\n\n    public afterGuiAttached(): void {\n        this.virtualList.focusRow(0);\n    }\n\n    private setupVirtualList(): void {\n        this.virtualList = this.createManagedBean(new VirtualList({\n            cssIdentifier: 'advanced-filter-builder',\n            ariaRole: 'tree',\n            listName: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderList')\n        }));\n        this.virtualList.setComponentCreator(this.createItemComponent.bind(this));\n        this.virtualList.setComponentUpdater(this.updateItemComponent.bind(this));\n        this.virtualList.setRowHeight(40);\n        this.eList.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setModel({\n            getRowCount: () => this.items.length,\n            getRow: (index: number) => this.items[index],\n            areRowsEqual: (oldRow: AdvancedFilterBuilderItem, newRow: AdvancedFilterBuilderItem) => oldRow === newRow\n        });\n        this.buildList();\n        this.virtualList.refresh();\n    }\n\n    private setupButtons(): void {\n        this.eApplyFilterButton.innerText = this.advancedFilterExpressionService.translate('advancedFilterBuilderApply');\n        this.activateTabIndex([this.eApplyFilterButton]);\n        this.addManagedListener(this.eApplyFilterButton, 'click', () => {\n            this.advancedFilterService.setModel(this.filterModel);\n            this.filterManager.onFilterChanged({ source: 'advancedFilter' });\n            this.close();\n        });\n\n        this.validationTooltipFeature = this.createManagedBean(new TooltipFeature({\n            getGui: () => this.eApplyFilterButton,\n            getLocation: () => 'advancedFilter',\n            getTooltipValue: () => this.validationMessage,\n            getTooltipShowDelayOverride: () => 1000\n        }));\n        this.validate();\n\n        this.addManagedListener(\n            this.eApplyFilterButton,\n            'mouseenter',\n            () => this.addOrRemoveCssClass('ag-advanced-filter-builder-validation', true)\n        );\n        this.addManagedListener(\n            this.eApplyFilterButton,\n            'mouseleave',\n            () => this.addOrRemoveCssClass('ag-advanced-filter-builder-validation', false)\n        );\n\n        this.eCancelFilterButton.innerText = this.advancedFilterExpressionService.translate('advancedFilterBuilderCancel');\n        this.activateTabIndex([this.eCancelFilterButton]);\n        this.addManagedListener(this.eCancelFilterButton, 'click', () => this.close());\n    }\n\n    private removeItemFromParent(item: AdvancedFilterBuilderItem): number {\n        const sourceParentIndex = item.parent!.conditions.indexOf(item.filterModel!);\n        item.parent!.conditions.splice(sourceParentIndex, 1);\n        return sourceParentIndex;\n    }\n\n    private moveItemToIndex(item: AdvancedFilterBuilderItem, destinationRowIndex: number, destinationPosition: 'top' | 'bottom'): void {\n        const destinationItem = this.items[destinationRowIndex];\n        const destinationIsParent = destinationItem.filterModel?.filterType === 'join' && destinationPosition === 'bottom';\n        const destinationParent = destinationIsParent ? (destinationItem.filterModel as JoinAdvancedFilterModel) : destinationItem.parent;\n\n        // trying to move before the root\n        if (!destinationParent) { return; }\n\n        // can't move into itself\n        if (this.isChildOrSelf(destinationParent, item.filterModel!) || destinationItem === item) {\n            return;\n        }\n\n        this.removeItemFromParent(item);\n\n        let destinationParentIndex;\n        if (destinationIsParent) {\n            destinationParentIndex = 0;\n        } else {\n            destinationParentIndex = destinationParent.conditions.indexOf(destinationItem.filterModel!);\n            if (destinationParentIndex === -1) {\n                destinationParentIndex = destinationParent.conditions.length\n            } else if (destinationPosition === 'bottom') {\n                destinationParentIndex += 1;\n            }\n        }\n        destinationParent.conditions.splice(destinationParentIndex, 0, item.filterModel!);\n        this.refreshList(false);\n    }\n\n    private isChildOrSelf(modelToCheck: AdvancedFilterModel, potentialParentModel: AdvancedFilterModel): boolean {\n        return modelToCheck === potentialParentModel || (\n            potentialParentModel.filterType === 'join' &&\n            potentialParentModel.conditions.some(condition => this.isChildOrSelf(modelToCheck, condition))\n        );\n    }\n\n    private setupFilterModel(): AdvancedFilterModel {\n        const filterModel = this.formatFilterModel(this.advancedFilterService.getModel());\n        this.stringifiedModel = JSON.stringify(filterModel);\n        return filterModel\n    }\n\n    private formatFilterModel(filterModel: AdvancedFilterModel | null): AdvancedFilterModel {\n        filterModel = filterModel ?? {\n            filterType: 'join',\n            type: 'AND',\n            conditions: []\n        }\n        if (filterModel.filterType !== 'join') {\n            filterModel = {\n                filterType: 'join',\n                type: 'AND',\n                conditions: [filterModel]\n            };\n        }\n        return filterModel;\n    }\n\n    private buildList(): void {\n        const parseFilterModel = (filterModel: AdvancedFilterModel, items: AdvancedFilterBuilderItem[], level: number, parent?: JoinAdvancedFilterModel) => {\n            items.push({ filterModel, level, parent, valid: true, showMove: this.showMove });\n            if (filterModel.filterType === 'join') {\n                filterModel.conditions.forEach(childFilterModel => parseFilterModel(childFilterModel, items, level + 1, filterModel));\n                if (level === 0) {\n                    items.push({ filterModel: null, level: level + 1, parent: filterModel, valid: true })\n                }\n            }\n        }\n        this.items = [];\n        parseFilterModel(this.filterModel, this.items, 0);\n    }\n\n    private refreshList(softRefresh: boolean): void {\n        if (!softRefresh) {\n            const invalidModels: AdvancedFilterModel[] = [];\n            this.items.forEach(item => {\n                if (!item.valid) {\n                    invalidModels.push(item.filterModel!);\n                }\n            });\n            this.buildList();\n            if (invalidModels.length) {\n                this.items.forEach(item => {\n                    if (item.filterModel && invalidModels.includes(item.filterModel)) {\n                        item.valid = false;\n                    }\n                });\n            }\n        }\n        this.virtualList.refresh(softRefresh);\n        this.validate();\n    }\n\n    private updateItemComponent(item: AdvancedFilterBuilderItem, comp: AdvancedFilterBuilderItemComp): void {\n        const index = this.items.indexOf(item);\n        const populateTreeLines = (filterModel: AdvancedFilterModel | null, treeLines: boolean[]) => {\n            const parentItem = this.items.find(itemToCheck => itemToCheck.filterModel === filterModel);\n            const parentFilterModel = parentItem?.parent;\n            if (parentFilterModel) {\n                const { conditions } = (parentFilterModel as JoinAdvancedFilterModel);\n                // check parent\n                populateTreeLines(parentFilterModel, treeLines);\n                treeLines.push(conditions[conditions.length - 1] === filterModel);\n            }\n        };\n        const treeLines: boolean[] = [];\n        const { filterModel } = item;\n        if (filterModel) {\n            populateTreeLines(filterModel, treeLines);\n            // the add item button is always last child\n            treeLines[0] = false;\n        }\n        const showStartTreeLine = filterModel?.filterType === 'join' && !!filterModel.conditions.length;\n        comp.setState({\n            disableMoveUp: index === 1,\n            disableMoveDown: !this.canMoveDown(item, index),\n            treeLines,\n            showStartTreeLine\n        });\n    }\n\n    private createItemComponent(item: AdvancedFilterBuilderItem, focusWrapper: HTMLElement): Component {\n        const itemComp = this.createBean(item.filterModel\n            ? new AdvancedFilterBuilderItemComp(item, this.dragFeature, focusWrapper)\n            : new AdvancedFilterBuilderItemAddComp(item, focusWrapper));\n\n        itemComp.addManagedListener(\n            itemComp,\n            AdvancedFilterBuilderEvents.EVENT_REMOVED,\n            ({ item }: AdvancedFilterBuilderRemoveEvent) => this.removeItem(item)\n        );\n        itemComp.addManagedListener(\n            itemComp,\n            AdvancedFilterBuilderEvents.EVENT_VALUE_CHANGED,\n            () => this.validate()\n        );\n        itemComp.addManagedListener(\n            itemComp,\n            AdvancedFilterBuilderEvents.EVENT_ADDED,\n            ({ item, isJoin }: AdvancedFilterBuilderAddEvent) => this.addItem(item, isJoin)\n        );\n        itemComp.addManagedListener(\n            itemComp,\n            AdvancedFilterBuilderEvents.EVENT_MOVED,\n            ({ item, backwards }: AdvancedFilterBuilderMoveEvent) => this.moveItemUpDown(item, backwards)\n        );\n\n        if (itemComp instanceof AdvancedFilterBuilderItemComp) {\n            this.updateItemComponent(item, itemComp);\n        }\n\n        return itemComp;\n    }\n\n    private addItem(item: AdvancedFilterBuilderItem, isJoin: boolean): void {\n        const { parent: itemParent, level, filterModel: itemFilterModel } = item;\n        const itemIsJoin = itemFilterModel?.filterType === 'join';\n        const filterModel = isJoin ? {\n            filterType: 'join',\n            type: 'AND',\n            conditions: []\n        } as JoinAdvancedFilterModel : {} as ColumnAdvancedFilterModel;\n        const parent = (itemIsJoin ? itemFilterModel as JoinAdvancedFilterModel : itemParent)!;\n        let insertIndex = itemIsJoin ? 0 : parent.conditions.indexOf(itemFilterModel!);\n        if (insertIndex >= 0) {\n            if (!itemIsJoin) {\n                insertIndex += 1;\n            }\n            parent.conditions.splice(insertIndex, 0, filterModel);\n        } else {\n            parent.conditions.push(filterModel);\n        }\n        let index = this.items.indexOf(item);\n        const softRefresh = index >= 0;\n        if (softRefresh) {\n            if (item.filterModel) {\n                index++;\n            }\n            const newItems: AdvancedFilterBuilderItem[] = [{\n                filterModel,\n                level: itemIsJoin ? level + 1 : level,\n                parent,\n                valid: isJoin,\n                showMove: this.showMove\n            }];\n            this.items.splice(index, 0, ...newItems);\n        }\n        this.refreshList(softRefresh);\n        if (softRefresh) {\n            this.virtualList.getComponentAt(index)?.afterAdd();\n        }\n    }\n\n    private removeItem(item: AdvancedFilterBuilderItem): void {\n        const parent = item.parent!;\n        const { filterModel } = item;\n        const parentIndex = parent.conditions.indexOf(filterModel!);\n        parent.conditions.splice(parentIndex, 1);\n\n        const isJoin = item.filterModel?.filterType === 'join';\n        const index = this.items.indexOf(item);\n        // if it's a join, we don't know how many children there are, so always rebuild\n        const softRefresh = !isJoin && index >= 0;\n        if (softRefresh) {\n            this.items.splice(index, 1);\n        }\n        this.refreshList(softRefresh);\n        if (index >= 0) {\n            this.virtualList.focusRow(index);\n        }\n    }\n\n    private moveItemUpDown(item: AdvancedFilterBuilderItem, backwards: boolean): void {\n        const itemIndex = this.items.indexOf(item);\n        const destinationIndex = backwards ? itemIndex - 1 : itemIndex + 1;\n        if (destinationIndex === 0 || (!backwards && !this.canMoveDown(item, itemIndex))) {\n            return;\n        }\n        const destinationItem = this.items[destinationIndex];\n        const indexInParent = this.removeItemFromParent(item);\n        const { level, filterModel, parent } = item;\n        const { level: destinationLevel, filterModel: destinationFilterModel, parent: destinationParent } = destinationItem;\n        if (backwards) {\n            if (destinationLevel === level && destinationFilterModel!.filterType === 'join') {\n                // destination is empty join. move to last child\n                (destinationFilterModel as JoinAdvancedFilterModel).conditions.push(filterModel!);\n            } else if (destinationLevel <= level) {\n                // same parent or first child. move above destination in destination parent\n                const destinationIndex = destinationParent!.conditions.indexOf(destinationFilterModel!);\n                destinationParent!.conditions.splice(destinationIndex, 0, filterModel!);\n            } else {\n                // need to move up a level. move to end of previous item's children\n                const newParentItem = parent!.conditions[indexInParent - 1] as JoinAdvancedFilterModel;\n                newParentItem.conditions.push(filterModel!);\n            }\n        } else {\n            if (destinationLevel === level) {\n                if (destinationFilterModel!.filterType === 'join') {\n                    // destination is join. move to first child\n                    (destinationFilterModel as JoinAdvancedFilterModel).conditions.splice(0, 0, filterModel!);\n                } else {\n                    // switch positions\n                    const destinationIndex = destinationParent!.conditions.indexOf(destinationFilterModel!);\n                    destinationParent!.conditions.splice(destinationIndex + 1, 0, filterModel!);\n                }\n            } else {\n                if (indexInParent < parent!.conditions.length) {\n                    // keep in parent, but swap with next child\n                    parent!.conditions.splice(indexInParent + 1, 0, filterModel!);\n                } else {\n                    // need to move down a level. move after parent in its parent\n                    const parentItem = this.items.find(itemToCheck => itemToCheck.filterModel === parent);\n                    const destinationIndex = parentItem!.parent!.conditions.indexOf(parentItem!.filterModel!) + 1;\n                    parentItem!.parent!.conditions.splice(destinationIndex, 0, filterModel!);\n                }\n            }\n        }\n        this.refreshList(false);\n        const newIndex = this.items.findIndex(({ filterModel: filterModelToCheck }) => filterModelToCheck === filterModel);\n        if (newIndex >= 0) {\n            const comp = this.virtualList.getComponentAt(newIndex);\n            if (comp instanceof AdvancedFilterBuilderItemComp) {\n                comp.focusMoveButton(backwards);\n            }\n        }\n    }\n\n    private canMoveDown(item: AdvancedFilterBuilderItem, index: number): boolean {\n        return !((item.level === 1 && index === this.items.length - 2) ||\n            (item.level === 1 && item.parent!.conditions[item.parent!.conditions.length - 1] === item.filterModel!));\n    }\n\n    private close(): void {\n        this.advancedFilterService.getCtrl().toggleFilterBuilder('ui');\n    }\n\n    private validate(): void {\n        let disableApply = !this.items.every(({ valid }) => valid);\n        if (!disableApply) {\n            disableApply = JSON.stringify(this.filterModel) === this.stringifiedModel;\n            if (disableApply) {\n                this.validationMessage = this.advancedFilterExpressionService.translate('advancedFilterBuilderValidationAlreadyApplied');\n            } else {\n                this.validationMessage = null;\n            }\n        } else {\n            this.validationMessage = this.advancedFilterExpressionService.translate('advancedFilterBuilderValidationIncomplete');\n        }\n        _.setDisabled(this.eApplyFilterButton, disableApply);\n        this.validationTooltipFeature.refreshToolTip();\n    }\n\n    private validateItems(): void {\n        const clearOperator = (filterModel: ColumnAdvancedFilterModel) => {\n            filterModel.type = undefined as any;\n        }\n        const clearOperand = (filterModel: ColumnAdvancedFilterModel) => {\n            delete (filterModel as any).filter;\n        }\n        this.items.forEach(item => {\n            if (!item.valid || !item.filterModel || item.filterModel.filterType === 'join') {\n                return;\n            }\n            const { filterModel } = item;\n            const { colId } = filterModel;\n            const hasColumn = this.advancedFilterExpressionService.getColumnAutocompleteEntries().find(({ key }) => key === colId);\n            const columnDetails = this.advancedFilterExpressionService.getColumnDetails(filterModel.colId);\n            if (!hasColumn || !columnDetails.column) {\n                item.valid = false;\n                filterModel.colId = undefined as any;\n                clearOperator(filterModel);\n                clearOperand(filterModel);\n                return;\n            }\n            const operatorForType = this.advancedFilterExpressionService.getDataTypeExpressionOperator(columnDetails.baseCellDataType)!;\n            const operator = operatorForType.operators[filterModel.type];\n            if (!operator) {\n                item.valid = false;\n                clearOperator(filterModel);\n                clearOperand(filterModel);\n                return;\n            }\n            if (operator.numOperands > 0 && !_.exists((filterModel as any).filter)) {\n                item.valid = false;\n                return;\n            }\n        });\n    }\n}\n", "import {\n    AutocompleteEntry,\n    Autowired,\n    BaseCellDataType,\n    Beans,\n    DragAndDropService,\n    DragSource,\n    DragSourceType,\n    Events,\n    FieldPickerValueSelectedEvent,\n    FieldValueEvent,\n    KeyCode,\n    PostConstruct,\n    RefSelector,\n    TabGuardComp,\n    TooltipFeature,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterExpressionService } from \"../advancedFilterExpressionService\";\nimport { AddDropdownComp } from \"./addDropdownComp\";\nimport { AdvancedFilterBuilderDragFeature, AdvancedFilterBuilderDragStartedEvent } from \"./advancedFilterBuilderDragFeature\";\nimport { AdvancedFilterBuilderItemNavigationFeature } from \"./advancedFilterBuilderItemNavigationFeature\";\nimport { getAdvancedFilterBuilderAddButtonParams } from \"./advancedFilterBuilderUtils\";\nimport { ConditionPillWrapperComp } from \"./conditionPillWrapperComp\";\nimport {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    AdvancedFilterBuilderMoveEvent,\n    AdvancedFilterBuilderRemoveEvent,\n    CreatePillParams\n} from \"./iAdvancedFilterBuilder\";\nimport { InputPillComp } from \"./inputPillComp\";\nimport { JoinPillWrapperComp } from \"./joinPillWrapperComp\";\nimport { SelectPillComp } from \"./selectPillComp\";\n\nexport class AdvancedFilterBuilderItemComp extends TabGuardComp {\n    @RefSelector('eTreeLines') private eTreeLines: HTMLElement;\n    @RefSelector('eDragHandle') private eDragHandle: HTMLElement;\n    @RefSelector('eItem') private eItem: HTMLElement;\n    @RefSelector('eButtons') private eButtons: HTMLElement;\n    @RefSelector('eValidation') private eValidation: HTMLElement;\n    @RefSelector('eMoveUpButton') private eMoveUpButton: HTMLElement;\n    @RefSelector('eMoveDownButton') private eMoveDownButton: HTMLElement;\n    @RefSelector('eAddButton') private eAddButton: HTMLElement;\n    @RefSelector('eRemoveButton') private eRemoveButton: HTMLElement;\n    @Autowired('beans') private readonly beans: Beans;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    private ePillWrapper: JoinPillWrapperComp | ConditionPillWrapperComp;\n    private validationTooltipFeature: TooltipFeature;\n    private moveUpDisabled: boolean = false;\n    private moveDownDisabled: boolean = false;\n    private moveUpTooltipFeature: TooltipFeature;\n    private moveDownTooltipFeature: TooltipFeature;\n\n    constructor(\n        private readonly item: AdvancedFilterBuilderItem,\n        private readonly dragFeature: AdvancedFilterBuilderDragFeature,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-wrapper\" role=\"presentation\">\n                <div ref=\"eItem\" class=\"ag-advanced-filter-builder-item\" role=\"presentation\">\n                    <div ref=\"eTreeLines\" class=\"ag-advanced-filter-builder-item-tree-lines\" aria-hidden=\"true\"></div>\n                    <span ref=\"eDragHandle\" class=\"ag-drag-handle\" aria-hidden=\"true\"></span>\n                    <span ref=\"eValidation\" class=\"ag-advanced-filter-builder-item-button ag-advanced-filter-builder-invalid\" aria-hidden=\"true\"></span>\n                </div>\n                <div ref=\"eButtons\" class=\"ag-advanced-filter-builder-item-buttons\">\n                    <span ref=\"eMoveUpButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                    <span ref=\"eMoveDownButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                    <div ref=\"eAddButton\" role=\"presentation\"></div>\n                    <span ref=\"eRemoveButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                </div>\n            </div>\n        `);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const { filterModel, level, showMove } = this.item;\n\n        const isJoin = filterModel!.filterType === 'join';\n        this.ePillWrapper = this.createManagedBean(isJoin ? new JoinPillWrapperComp() : new ConditionPillWrapperComp());\n        this.ePillWrapper.init({ item: this.item, createPill: (params: CreatePillParams) => this.createPill(params) });\n        this.eDragHandle.insertAdjacentElement('afterend', this.ePillWrapper.getGui());\n        \n        if (level === 0) {\n            const eTreeLine = document.createElement('div');\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-vertical-bottom');\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-root');\n            this.eTreeLines.appendChild(eTreeLine);\n\n            _.setDisplayed(this.eDragHandle, false);\n            _.setDisplayed(this.eButtons, false);\n            _.setAriaExpanded(this.focusWrapper, true);\n        } else {\n            this.setupTreeLines(level);\n\n            this.eDragHandle.appendChild(_.createIconNoSpan('advancedFilterBuilderDrag', this.gridOptionsService)!);\n            this.setupValidation();\n            this.setupMoveButtons(showMove);\n            this.setupAddButton();\n            this.setupRemoveButton();\n\n            this.setupDragging();\n            this.updateAriaExpanded();\n        }\n\n        _.setAriaLevel(this.focusWrapper, level + 1);\n\n        this.initialiseTabGuard({});\n\n        this.createManagedBean(new AdvancedFilterBuilderItemNavigationFeature(\n            this.getGui(),\n            this.focusWrapper,\n            this.ePillWrapper\n        ));\n\n        this.updateAriaLabel();\n\n        this.addManagedListener(this.ePillWrapper, AdvancedFilterBuilderEvents.EVENT_VALUE_CHANGED, () => this.dispatchEvent({\n            type: AdvancedFilterBuilderEvents.EVENT_VALUE_CHANGED\n        }));\n        this.addManagedListener(this.ePillWrapper, AdvancedFilterBuilderEvents.EVENT_VALID_CHANGED, () => this.updateValidity());\n    }\n\n    public setState(params: {\n        disableMoveUp?: boolean;\n        disableMoveDown?: boolean;\n        treeLines: boolean[];\n        showStartTreeLine: boolean;\n    }): void {\n        const { level } = this.item;\n        if (level === 0) { return; }\n        const { showMove } = this.item;\n        const { disableMoveUp, disableMoveDown, treeLines, showStartTreeLine } = params;\n        this.updateTreeLines(treeLines, showStartTreeLine);\n        this.updateAriaExpanded();\n        if (showMove) {\n            this.moveUpDisabled = !!disableMoveUp;\n            this.moveDownDisabled = !!disableMoveDown;\n            this.eMoveUpButton.classList.toggle('ag-advanced-filter-builder-item-button-disabled', disableMoveUp);\n            this.eMoveDownButton.classList.toggle('ag-advanced-filter-builder-item-button-disabled', disableMoveDown);\n            _.setAriaDisabled(this.eMoveUpButton, !!disableMoveUp);\n            _.setAriaDisabled(this.eMoveDownButton, !!disableMoveDown);\n            this.moveUpTooltipFeature.refreshToolTip();\n            this.moveDownTooltipFeature.refreshToolTip();\n        }\n    }\n\n    public focusMoveButton(backwards: boolean): void {\n        (backwards ? this.eMoveUpButton : this.eMoveDownButton).focus();\n    }\n\n    public afterAdd(): void {\n        this.ePillWrapper.getFocusableElement().focus();\n    }\n\n    private setupTreeLines(level: number): void {\n        for (let i = 0; i < level; i++) {\n            const eTreeLine = document.createElement('div');\n            this.eTreeLines.appendChild(eTreeLine);\n        }\n    }\n\n    private updateTreeLines(treeLines: boolean[], showStartTreeLine: boolean): void {\n        const lastTreeLineIndex = treeLines.length - 1;\n        const { children } = this.eTreeLines;\n        for (let i = 0; i < lastTreeLineIndex; i++) {\n            const eTreeLine = children.item(i);\n            if (eTreeLine) {\n                eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical', !treeLines[i]);\n            }\n        }\n        const eTreeLine = children.item(lastTreeLineIndex);\n        if (eTreeLine) {\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-horizontal');\n            const isLastChild = treeLines[lastTreeLineIndex];\n            eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical-top', isLastChild);\n            eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical', !isLastChild);\n        }\n        this.eDragHandle.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical-bottom', showStartTreeLine);\n    }\n\n    private setupValidation(): void {\n        this.eValidation.appendChild(_.createIconNoSpan('advancedFilterBuilderInvalid', this.gridOptionsService)!);\n        this.validationTooltipFeature = this.createManagedBean(new TooltipFeature({\n            getGui: () => this.eValidation,\n            getLocation: () => 'advancedFilter',\n            getTooltipValue: () => this.ePillWrapper.getValidationMessage(),\n            getTooltipShowDelayOverride: () => 1000\n        }));\n        this.updateValidity();\n    }\n\n    private setupAddButton(): void {\n        const addButtonParams = getAdvancedFilterBuilderAddButtonParams(\n            key => this.advancedFilterExpressionService.translate(key),\n            this.gridOptionsService.get('advancedFilterBuilderParams')?.addSelectWidth\n        );\n        const eAddButton = this.createManagedBean(new AddDropdownComp(addButtonParams));\n        this.addManagedListener(\n            eAddButton,\n            Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n            ({ value }: FieldPickerValueSelectedEvent) => this.dispatchEvent<AdvancedFilterBuilderAddEvent>({\n                type: AdvancedFilterBuilderEvents.EVENT_ADDED,\n                item: this.item,\n                isJoin: value.key === 'join'\n            })\n        );\n        this.eAddButton.appendChild(eAddButton.getGui());\n\n        this.createManagedBean(new TooltipFeature({\n            getGui: () => this.eAddButton,\n            getLocation: () => 'advancedFilter',\n            getTooltipValue: () => this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip')\n        }));\n    }\n\n    private setupRemoveButton(): void {\n        this.eRemoveButton.appendChild(_.createIconNoSpan('advancedFilterBuilderRemove', this.gridOptionsService)!);\n        this.addManagedListener(this.eRemoveButton, 'click', () => this.removeItem());\n        this.addManagedListener(this.eRemoveButton, 'keydown', (event: KeyboardEvent) => {\n            switch (event.key) {\n                case KeyCode.ENTER:\n                    event.preventDefault();\n                    _.stopPropagationForAgGrid(event);\n                    this.removeItem();\n                    break;\n            }\n        });\n\n        this.createManagedBean(new TooltipFeature({\n            getGui: () => this.eRemoveButton,\n            getLocation: () => 'advancedFilter',\n            getTooltipValue: () => this.advancedFilterExpressionService.translate('advancedFilterBuilderRemoveButtonTooltip')\n        }));\n        _.setAriaLabel(this.eRemoveButton, this.advancedFilterExpressionService.translate('advancedFilterBuilderRemoveButtonTooltip'));\n\n        this.activateTabIndex([this.eRemoveButton]);\n    }\n\n    private setupMoveButtons(showMove?: boolean): void {\n        if (showMove) {\n            this.eMoveUpButton.appendChild(_.createIconNoSpan('advancedFilterBuilderMoveUp', this.gridOptionsService)!);\n            this.addManagedListener(this.eMoveUpButton, 'click', () => this.moveItem(true));\n            this.addManagedListener(this.eMoveUpButton, 'keydown', (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _.stopPropagationForAgGrid(event);\n                        this.moveItem(true);\n                        break;\n                }\n            });\n\n            this.moveUpTooltipFeature = this.createManagedBean(new TooltipFeature({\n                getGui: () => this.eMoveUpButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () => this.moveUpDisabled\n                    ? null\n                    : this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveUpButtonTooltip')\n            }));\n            _.setAriaLabel(this.eMoveUpButton, this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveUpButtonTooltip'));\n\n            this.eMoveDownButton.appendChild(_.createIconNoSpan('advancedFilterBuilderMoveDown', this.gridOptionsService)!);\n            this.addManagedListener(this.eMoveDownButton, 'click', () => this.moveItem(false));\n            this.addManagedListener(this.eMoveDownButton, 'keydown', (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _.stopPropagationForAgGrid(event);\n                        this.moveItem(false);\n                        break;\n                }\n            });\n\n            this.moveDownTooltipFeature = this.createManagedBean(new TooltipFeature({\n                getGui: () => this.eMoveDownButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () => this.moveDownDisabled\n                    ? null\n                    : this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveDownButtonTooltip')\n            }));\n            _.setAriaLabel(this.eMoveDownButton, this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveDownButtonTooltip'));\n\n            this.activateTabIndex([this.eMoveUpButton, this.eMoveDownButton]);\n        } else {\n            _.setDisplayed(this.eMoveUpButton, false);\n            _.setDisplayed(this.eMoveDownButton, false);\n        }\n    }\n\n    private updateValidity(): void {\n        _.setVisible(this.eValidation, !this.item.valid);\n        this.validationTooltipFeature.refreshToolTip();\n        this.updateAriaLabel();\n    }\n\n    private createPill(params: CreatePillParams): SelectPillComp | InputPillComp {\n        const { key, displayValue, cssClass, update, ariaLabel } = params;\n        const onUpdated = (key: string) => {\n            if (key == null) { return; }\n            update(key);\n            this.dispatchEvent({\n                type: AdvancedFilterBuilderEvents.EVENT_VALUE_CHANGED\n            });\n        };\n        if (params.isSelect) {\n            const { getEditorParams, pickerAriaLabelKey, pickerAriaLabelValue } = params;\n            const advancedFilterBuilderParams = this.gridOptionsService.get('advancedFilterBuilderParams');\n            const minPickerWidth = `${advancedFilterBuilderParams?.pillSelectMinWidth ?? 140}px`;\n            const maxPickerWidth = `${advancedFilterBuilderParams?.pillSelectMaxWidth ?? 200}px`;\n            const comp = this.createBean(new SelectPillComp({\n                pickerAriaLabelKey,\n                pickerAriaLabelValue,\n                pickerType: 'ag-list',\n                value: {\n                    key,\n                    displayValue\n                },\n                valueFormatter: (value: AutocompleteEntry) =>\n                    value == null ? null : value.displayValue ?? value.key,\n                variableWidth: true,\n                minPickerWidth,\n                maxPickerWidth,\n                getEditorParams,\n                wrapperClassName: cssClass,\n                ariaLabel\n            }));\n            this.addManagedListener(\n                comp,\n                Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n                ({ value }: FieldPickerValueSelectedEvent) => onUpdated(value?.key)\n            );\n            return comp;\n        } else {\n            const comp = this.createBean(new InputPillComp({\n                value: displayValue,\n                cssClass,\n                type: this.getInputType(params.baseCellDataType),\n                ariaLabel\n            }));\n            this.addManagedListener(\n                comp,\n                Events.EVENT_FIELD_VALUE_CHANGED,\n                ({ value }: FieldValueEvent) => onUpdated(value)\n            );\n            return comp;\n        }\n    }\n\n    private getInputType(baseCellDataType: BaseCellDataType): 'text' | 'number' | 'date' {\n        switch (baseCellDataType) {\n            case 'text':\n            case 'object':\n            case 'boolean':\n                return 'text';\n            case 'number':\n                return 'number';\n            case 'date':\n            case 'dateString':\n                return 'date';\n        }\n    }\n\n    private setupDragging(): void {\n        const dragSource: DragSource = {\n            type: DragSourceType.AdvancedFilterBuilder,\n            eElement: this.eDragHandle,\n            dragItemName: () => this.ePillWrapper.getDragName(),\n            getDefaultIconName: () => DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => ({}),\n            onDragStarted: () => this.dragFeature.dispatchEvent<AdvancedFilterBuilderDragStartedEvent>({\n                type: AdvancedFilterBuilderDragFeature.EVENT_DRAG_STARTED,\n                item: this.item\n            }),\n            onDragStopped: () => this.dragFeature.dispatchEvent({\n                type: AdvancedFilterBuilderDragFeature.EVENT_DRAG_ENDED\n            })\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private updateAriaLabel(): void {\n        const wrapperLabel = this.ePillWrapper.getAriaLabel();\n        const level = `${this.item.level + 1}`;\n        const validationMessage = this.ePillWrapper.getValidationMessage();\n        let ariaLabel;\n        if (validationMessage) {\n            ariaLabel = this.advancedFilterExpressionService.translate(\n                'ariaAdvancedFilterBuilderItemValidation',\n                [wrapperLabel, level, validationMessage]\n            );\n        } else {\n            ariaLabel = this.advancedFilterExpressionService.translate(\n                'ariaAdvancedFilterBuilderItem',\n                [wrapperLabel, level]\n            );\n        }\n        _.setAriaLabel(this.focusWrapper, ariaLabel);\n    }\n\n    private updateAriaExpanded(): void {\n        _.removeAriaExpanded(this.focusWrapper);\n        const { filterModel } = this.item;\n        if (filterModel?.filterType === 'join' && filterModel.conditions.length) {\n            _.setAriaExpanded(this.focusWrapper, true);\n        }\n    }\n\n    private removeItem(): void {\n        this.dispatchEvent<AdvancedFilterBuilderRemoveEvent>({\n            type: AdvancedFilterBuilderEvents.EVENT_REMOVED,\n            item: this.item\n        });\n    }\n\n    private moveItem(backwards: boolean): void {\n        this.dispatchEvent<AdvancedFilterBuilderMoveEvent>({\n            type: AdvancedFilterBuilderEvents.EVENT_MOVED,\n            item: this.item,\n            backwards\n        });\n    }\n}\n", "import { AgRichSelect, AutocompleteEntry, RichSelectParams, _ } from \"@ag-grid-community/core\";\n\nexport interface AddDropdownCompParams extends RichSelectParams<AutocompleteEntry> {\n    wrapperClassName?: string;\n    ariaLabel: string;\n}\n\nexport class AddDropdownComp extends AgRichSelect {\n    constructor(private readonly params: AddDropdownCompParams) {\n        super({\n            ...params,\n            template: /* html */`\n                <div class=\"ag-picker-field\" role=\"presentation\">\n                    <div ref=\"eLabel\"></div>\n                    <div ref=\"eWrapper\" class=\"ag-wrapper ag-picker-collapsed\">\n                        <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                        <ag-input-text-field ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                        <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                    </div>\n                </div>`,\n        });\n    }\n\n    public showPicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.showPicker());\n    }\n\n    public hidePicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.hidePicker());\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        const { wrapperClassName, ariaLabel } = this.params;\n\n        _.setDisplayed(this.eDisplayField, false);\n        if (wrapperClassName) {\n            this.eWrapper.classList.add(wrapperClassName);\n        }\n        _.setAriaLabelledBy(this.eWrapper, '');\n        _.setAriaLabel(this.eWrapper, ariaLabel);\n    }\n\n    protected onEnterKeyDown(event: KeyboardEvent): void {\n        _.stopPropagationForAgGrid(event);\n        if (this.isPickerDisplayed) {\n            super.onEnterKeyDown(event);\n        } else {\n            event.preventDefault();\n            this.showPicker();\n        }\n    }\n}\n", "import {\n    AgEvent,\n    BeanStub,\n    DragSourceType,\n    PostConstruct,\n    VirtualList,\n    VirtualListDragFeature,\n    VirtualListDragItem\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterBuilderComp } from \"./advancedFilterBuilderComp\";\nimport { AdvancedFilterBuilderItemComp } from \"./advancedFilterBuilderItemComp\";\nimport { AdvancedFilterBuilderItem } from \"./iAdvancedFilterBuilder\";\n\nexport interface AdvancedFilterBuilderDragStartedEvent extends AgEvent {\n    item: AdvancedFilterBuilderItem;\n}\n\nexport class AdvancedFilterBuilderDragFeature extends BeanStub {\n    public static readonly EVENT_DRAG_STARTED = 'advancedFilterBuilderDragStarted';\n    public static readonly EVENT_DRAG_ENDED = 'advancedFilterBuilderDragEnded';\n\n    constructor(\n        private readonly comp: AdvancedFilterBuilderComp,\n        private readonly virtualList: VirtualList\n    ) { super(); }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createManagedBean(new VirtualListDragFeature<\n            AdvancedFilterBuilderComp,\n            AdvancedFilterBuilderItemComp,\n            AdvancedFilterBuilderItem,\n            AdvancedFilterBuilderDragStartedEvent\n        >(\n            this.comp,\n            this.virtualList,\n            {\n                dragSourceType: DragSourceType.AdvancedFilterBuilder,\n                listItemDragStartEvent: AdvancedFilterBuilderDragFeature.EVENT_DRAG_STARTED,\n                listItemDragEndEvent: AdvancedFilterBuilderDragFeature.EVENT_DRAG_ENDED,\n                eventSource: this,\n                getCurrentDragValue: (listItemDragStartEvent: AdvancedFilterBuilderDragStartedEvent) => this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: () => false,\n                getNumRows: (comp: AdvancedFilterBuilderComp) => comp.getNumItems(),\n                moveItem: (\n                    currentDragValue: AdvancedFilterBuilderItem | null,\n                    lastHoveredListItem: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem)\n            }\n        ));\n    }\n\n    private getCurrentDragValue(listItemDragStartEvent: AdvancedFilterBuilderDragStartedEvent): AdvancedFilterBuilderItem {\n        return listItemDragStartEvent.item;\n    }\n\n    private moveItem(\n        currentDragValue: AdvancedFilterBuilderItem | null,\n        lastHoveredListItem: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n    ): void {\n        this.comp.moveItem(currentDragValue, lastHoveredListItem);\n    }\n}\n", "import { BeanStub, Component, KeyCode, PostConstruct, _ } from \"@ag-grid-community/core\";\n\nexport class AdvancedFilterBuilderItemNavigationFeature extends BeanStub {\n    constructor(\n        private readonly eGui: HTMLElement,\n        private readonly focusWrapper: HTMLElement,\n        private readonly eFocusableComp: Component\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eGui, 'keydown', (event: KeyboardEvent) => {\n            switch (event.key) {\n                case KeyCode.TAB:\n                    if (!event.defaultPrevented) {\n                        // tab guard handled the navigation. stop from reaching virtual list\n                        _.stopPropagationForAgGrid(event);\n                    }\n                    break;\n                case KeyCode.UP:\n                case KeyCode.DOWN:\n                    // if this hasn't been handled by an editor, prevent virtual list navigation\n                    _.stopPropagationForAgGrid(event);\n                    break;\n                case KeyCode.ESCAPE:\n                    if (_.isStopPropagationForAgGrid(event)) { return; }\n                    const eDocument = this.gridOptionsService.getDocument();\n                    if (this.eGui.contains(eDocument.activeElement)) {\n                        event.preventDefault();\n                        _.stopPropagationForAgGrid(event);\n                        this.focusWrapper.focus();\n                    }\n                    break;\n            }\n        });\n        this.addManagedListener(this.focusWrapper, 'keydown', (event: KeyboardEvent) => {\n            switch (event.key) {\n                case KeyCode.ENTER:\n                    if (_.isStopPropagationForAgGrid(event)) { return; }\n                    const eDocument = this.gridOptionsService.getDocument();\n                    if (eDocument.activeElement === this.focusWrapper) {\n                        event.preventDefault();\n                        _.stopPropagationForAgGrid(event);\n                        this.eFocusableComp.getFocusableElement().focus();\n                    }\n                    break;\n            }\n        });\n        this.addManagedListener(this.focusWrapper, 'focusin', () => {\n            this.focusWrapper.classList.add('ag-advanced-filter-builder-virtual-list-item-highlight');\n        });\n        this.addManagedListener(this.focusWrapper, 'focusout', (event: FocusEvent) => {\n            if (!this.focusWrapper.contains(event.relatedTarget as HTMLElement)) {\n                this.focusWrapper.classList.remove('ag-advanced-filter-builder-virtual-list-item-highlight');\n            }\n        });\n    }\n}\n", "import { AutocompleteEntry } from \"@ag-grid-community/core\";\nimport { ADVANCED_FILTER_LOCALE_TEXT } from '../advancedFilterLocaleText';\nimport { AddDropdownCompParams } from \"./addDropdownComp\";\n\nexport function getAdvancedFilterBuilderAddButtonParams(translate: (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT) => string, maxPickerWidth?: number): AddDropdownCompParams {\n    return {\n        pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderAddField',\n        pickerAriaLabelValue: 'Advanced Filter Builder Add Field',\n        pickerType: 'ag-list',\n        valueList: [{\n            key: 'condition',\n            displayValue: translate('advancedFilterBuilderAddCondition')\n        }, {\n            key: 'join',\n            displayValue: translate('advancedFilterBuilderAddJoin')\n        }],\n        valueFormatter: (value: AutocompleteEntry) => value == null ? null : value.displayValue ?? value.key,\n        pickerIcon: 'advancedFilterBuilderAdd',\n        maxPickerWidth: `${maxPickerWidth ?? 120}px`,\n        wrapperClassName: 'ag-advanced-filter-builder-item-button',\n        ariaLabel: translate('advancedFilterBuilderAddButtonTooltip')\n    };\n}\n", "import {\n    AutocompleteEntry,\n    Autowired,\n    BaseCellDataType,\n    Column,\n    ColumnAdvancedFilterModel,\n    Component,\n    ValueParserService,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterExpressionService } from \"../advancedFilterExpressionService\";\nimport { AdvancedFilterBuilderEvents, AdvancedFilterBuilderItem, CreatePillParams } from \"./iAdvancedFilterBuilder\";\nimport { InputPillComp } from \"./inputPillComp\";\nimport { SelectPillComp } from \"./selectPillComp\";\n\nexport class ConditionPillWrapperComp extends Component {\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n\n    private item: AdvancedFilterBuilderItem;\n    private createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    private filterModel: ColumnAdvancedFilterModel;\n    private baseCellDataType: BaseCellDataType;\n    private column: Column | undefined;\n    private numOperands: number;\n    private eColumnPill: SelectPillComp | InputPillComp;\n    private eOperatorPill: SelectPillComp | InputPillComp | undefined;\n    private eOperandPill: SelectPillComp | InputPillComp | undefined;\n    private validationMessage: string | null = null;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-advanced-filter-builder-item-condition\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: {\n        item: AdvancedFilterBuilderItem,\n        createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp\n    }): void {\n        const { item, createPill } = params;\n        this.item = item;\n        this.createPill = createPill;\n        this.filterModel = item.filterModel as ColumnAdvancedFilterModel;\n        this.setupColumnCondition(this.filterModel);\n        this.validate();\n\n        this.addDestroyFunc(() => this.destroyBeans([this.eColumnPill, this.eOperatorPill, this.eOperandPill]));\n    }\n\n    public getDragName(): string {\n        return this.filterModel.colId\n            ? this.advancedFilterExpressionService.parseColumnFilterModel(this.filterModel)\n            : this.getDefaultColumnDisplayValue();\n    }\n\n    public getAriaLabel(): string{\n        return `${this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderFilterItem')} ${this.getDragName()}`;\n    }\n\n    public getValidationMessage(): string | null {\n        return this.validationMessage;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eColumnPill.getFocusableElement();\n    }\n\n    private setupColumnCondition(filterModel: ColumnAdvancedFilterModel): void {\n        const columnDetails = this.advancedFilterExpressionService.getColumnDetails(filterModel.colId);\n        this.baseCellDataType = columnDetails.baseCellDataType;\n        this.column = columnDetails.column;\n        this.numOperands = this.getNumOperands(this.getOperatorKey());\n\n        this.eColumnPill = this.createPill({\n            key: this.getColumnKey(),\n            displayValue: this.getColumnDisplayValue() ?? this.getDefaultColumnDisplayValue(),\n            cssClass: 'ag-advanced-filter-builder-column-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.advancedFilterExpressionService.getColumnAutocompleteEntries() }),\n            update: (key) => this.setColumnKey(key),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderColumnSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Column Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderColumn')\n        });\n        this.getGui().appendChild(this.eColumnPill.getGui());\n\n        if (_.exists(this.getColumnKey())) {\n            this.createOperatorPill();\n            if (this.hasOperand()) {\n                this.createOperandPill();\n            }\n        }\n    }\n\n    private createOperatorPill(): void {\n        this.eOperatorPill = this.createPill({\n            key: this.getOperatorKey(),\n            displayValue: this.getOperatorDisplayValue() ?? this.getDefaultOptionSelectValue(),\n            cssClass: 'ag-advanced-filter-builder-option-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.getOperatorAutocompleteEntries() }),\n            update: (key) => this.setOperatorKey(key),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderOptionSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Option Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderOption')\n        });\n        this.eColumnPill.getGui().insertAdjacentElement('afterend', this.eOperatorPill.getGui());\n    }\n\n    private createOperandPill(): void {\n        const key = this.getOperandDisplayValue() ?? '';\n        this.eOperandPill = this.createPill({\n            key,\n            displayValue: key,\n            baseCellDataType: this.baseCellDataType,\n            cssClass: 'ag-advanced-filter-builder-value-pill',\n            isSelect: false,\n            update: (key) => this.setOperand(key),\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderValue')\n        });\n        this.getGui().appendChild(this.eOperandPill.getGui());\n    }\n\n    private getColumnKey(): string {\n        return this.filterModel.colId;\n    }\n\n    private getColumnDisplayValue(): string | undefined {\n        return this.advancedFilterExpressionService.getColumnDisplayValue(this.filterModel);\n    }\n\n    private getOperatorKey(): string {\n        return this.filterModel.type;\n    }\n\n    private getOperatorDisplayValue(): string | undefined {\n        return this.advancedFilterExpressionService.getOperatorDisplayValue(this.filterModel);\n    }\n\n    private getOperandDisplayValue(): string {\n        return this.advancedFilterExpressionService.getOperandDisplayValue(this.filterModel, true);\n    }\n\n    private hasOperand(): boolean {\n        return this.numOperands > 0;\n    }\n\n    private getOperatorAutocompleteEntries(): AutocompleteEntry[] {\n        return this.column\n            ? this.advancedFilterExpressionService.getOperatorAutocompleteEntries(\n                this.column,\n                this.baseCellDataType\n            )\n            : [];\n    }\n\n    private setColumnKey(colId: string): void {\n        if (!this.eOperatorPill) {\n            this.createOperatorPill();\n        }\n\n        const newColumnDetails = this.advancedFilterExpressionService.getColumnDetails(colId);\n        this.column = newColumnDetails.column;\n        const newBaseCellDataType = newColumnDetails.baseCellDataType;\n        if (this.baseCellDataType !== newBaseCellDataType) {\n            this.baseCellDataType = newBaseCellDataType;\n\n            this.setOperatorKey(undefined as any);\n            if (this.eOperatorPill) {\n                _.removeFromParent(this.eOperatorPill.getGui());\n                this.destroyBean(this.eOperatorPill);\n                this.createOperatorPill();\n            }\n            this.validate();\n        }\n        this.filterModel.colId = colId;\n        this.filterModel.filterType = this.baseCellDataType;\n    }\n\n    private setOperatorKey(operator: string): void {\n        const newNumOperands = this.getNumOperands(operator);\n        if (newNumOperands !== this.numOperands) {\n            this.numOperands = newNumOperands;\n            if (newNumOperands === 0) {\n                this.destroyOperandPill();\n            } else {\n                this.createOperandPill();\n                if (this.baseCellDataType !== 'number') {\n                    this.setOperand('');\n                }\n            }\n\n        }\n        this.filterModel.type = operator as any;\n        this.validate();\n    }\n\n    private setOperand(operand: string): void {\n        let parsedOperand: string | number = operand;\n        if (this.column) {\n            parsedOperand = this.advancedFilterExpressionService.getOperandModelValue(operand, this.baseCellDataType, this.column) ?? '';\n        }\n        (this.filterModel as any).filter = parsedOperand;\n        this.validate();\n    }\n\n    private getNumOperands(operator: string): number {\n        return this.advancedFilterExpressionService.getExpressionOperator(this.baseCellDataType, operator)?.numOperands ?? 0;\n    }\n\n    private destroyOperandPill(): void {\n        delete (this.filterModel as any).filter;\n        this.getGui().removeChild(this.eOperandPill!.getGui());\n        this.destroyBean(this.eOperandPill);\n        this.eOperandPill = undefined;\n    }\n\n    private validate(): void {\n        let validationMessage = null;\n        if (!_.exists(this.getColumnKey())) {\n            validationMessage = this.advancedFilterExpressionService.translate('advancedFilterBuilderValidationSelectColumn');\n        } else if (!_.exists(this.getOperatorKey())) {\n            validationMessage = this.advancedFilterExpressionService.translate('advancedFilterBuilderValidationSelectOption');\n        } else if (this.numOperands > 0 && !_.exists(this.getOperandDisplayValue())) {\n            validationMessage = this.advancedFilterExpressionService.translate('advancedFilterBuilderValidationEnterValue');\n        }\n\n        this.item.valid = !validationMessage;\n        if (validationMessage !== this.validationMessage) {\n            this.validationMessage = validationMessage;\n            this.dispatchEvent({\n                type: AdvancedFilterBuilderEvents.EVENT_VALID_CHANGED\n            });\n        }\n    }\n\n    private getDefaultColumnDisplayValue(): string {\n        return this.advancedFilterExpressionService.translate('advancedFilterBuilderSelectColumn');\n    }\n\n    private getDefaultOptionSelectValue(): string {\n        return this.advancedFilterExpressionService.translate('advancedFilterBuilderSelectOption');\n    }\n}\n", "import { AdvancedFilterModel, AgEvent, BaseCellDataType, JoinAdvancedFilterModel } from \"@ag-grid-community/core\";\n\ninterface AdvancedFilterBuilderItemEvent extends AgEvent {\n    item: AdvancedFilterBuilderItem;\n}\n\nexport interface AdvancedFilterBuilderAddEvent extends AdvancedFilterBuilderItemEvent {\n    isJoin: boolean;\n}\n\nexport interface AdvancedFilterBuilderMoveEvent extends AdvancedFilterBuilderItemEvent {\n    backwards: boolean;\n}\n\nexport interface AdvancedFilterBuilderRemoveEvent extends AdvancedFilterBuilderItemEvent { }\n\nexport interface AdvancedFilterBuilderItem {\n    filterModel: AdvancedFilterModel | null;\n    level: number;\n    parent?: JoinAdvancedFilterModel;\n    valid: boolean;\n    showMove?: boolean;\n}\n\nexport type CreatePillParams = CreateInputPillParams | CreateSelectPillParams;\n\ninterface CreateInputPillParams extends BaseCreatePillParams {\n    isSelect: false;\n    baseCellDataType: BaseCellDataType,\n}\n\ninterface CreateSelectPillParams extends BaseCreatePillParams {\n    isSelect: true;\n    getEditorParams: () => { values?: any[] },\n    pickerAriaLabelKey: string,\n    pickerAriaLabelValue: string\n}\n\ninterface BaseCreatePillParams {\n    key: string,\n    displayValue: string,\n    cssClass: string,\n    update: (key: string) => void,\n    ariaLabel: string\n}\n\nexport class AdvancedFilterBuilderEvents {\n    public static readonly EVENT_ADDED = 'advancedFilterBuilderAdded';\n    public static readonly EVENT_MOVED = 'advancedFilterBuilderMoved';\n    public static readonly EVENT_REMOVED = 'advancedFilterBuilderRemoved';\n    public static readonly EVENT_VALUE_CHANGED = 'advancedFilterBuilderValueChanged';\n    public static readonly EVENT_VALID_CHANGED = 'advancedFilterBuilderValidChanged';\n}\n", "import {\n    AgInputDateField,\n    AgInputNumberField,\n    AgInputTextField,\n    Autowired,\n    Component,\n    Events,\n    FieldValueEvent,\n    KeyCode,\n    PostConstruct,\n    RefSelector,\n    WithoutGridCommon,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterExpressionService } from \"../advancedFilterExpressionService\";\n\nexport class InputPillComp extends Component {\n    @RefSelector('ePill') private ePill: HTMLElement;\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    private eEditor: AgInputTextField | undefined;\n    private value: string;\n\n    constructor(private readonly params: { value: string, cssClass: string, type: 'text' | 'number' | 'date', ariaLabel: string }) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-pill-wrapper\" role=\"presentation\">\n                <div ref=\"ePill\" class=\"ag-advanced-filter-builder-pill\" role=\"button\">\n                    <span ref=\"eLabel\" class=\"ag-advanced-filter-builder-pill-display\"></span>\n                </div>\n            </div>\n        `);\n        this.value = params.value;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const{ cssClass, ariaLabel } = this.params;\n\n        this.ePill.classList.add(cssClass);\n        this.activateTabIndex([this.ePill]);\n\n        this.eLabel.id = `${this.getCompId()}`;\n        _.setAriaDescribedBy(this.ePill, this.eLabel.id);\n        _.setAriaLabel(this.ePill, ariaLabel);\n\n        this.renderValue();\n\n        this.addManagedListener(this.ePill, 'click', (event: MouseEvent) => {\n            event.preventDefault();\n            this.showEditor();\n        });\n        this.addManagedListener(this.ePill, 'keydown', (event: KeyboardEvent) => {\n            switch (event.key) {\n                case KeyCode.ENTER:\n                    event.preventDefault();\n                    _.stopPropagationForAgGrid(event);\n                    this.showEditor();\n                    break;\n            }\n        });\n        this.addDestroyFunc(() => this.destroyBean(this.eEditor));\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.ePill;\n    }\n\n    private showEditor(): void {\n        if (this.eEditor) { return; }\n        _.setDisplayed(this.ePill, false);\n        this.eEditor = this.createEditorComp(this.params.type);\n        this.eEditor.setValue(this.value);\n        const eEditorGui = this.eEditor.getGui();\n        this.eEditor.addManagedListener(eEditorGui, 'keydown', (event: KeyboardEvent) => {\n            switch (event.key) {\n                case KeyCode.ENTER:\n                    event.preventDefault();\n                    _.stopPropagationForAgGrid(event);\n                    this.updateValue(true);\n                    break;\n                case KeyCode.ESCAPE:\n                    event.preventDefault();\n                    _.stopPropagationForAgGrid(event);\n                    this.hideEditor(true);\n                    break;\n            }\n        });\n        this.eEditor.addManagedListener(eEditorGui, 'focusout', () => {\n            this.updateValue(false);\n        });\n        this.getGui().appendChild(eEditorGui);\n        this.eEditor.getFocusableElement().focus();\n    }\n\n    private createEditorComp(type: 'text' | 'number' | 'date'): AgInputTextField | AgInputNumberField | AgInputDateField {\n        let comp;\n        switch (type) {\n            case 'text':\n                comp = new AgInputTextField();\n                break;\n            case 'number':\n                comp = new AgInputNumberField();\n                break;\n            case 'date':\n                comp = new AgInputDateField();\n                break;\n        }\n        return this.createBean(comp);\n    }\n\n    private hideEditor(keepFocus: boolean): void {\n        const { eEditor } = this;\n        if (!eEditor) { return; }\n        this.eEditor = undefined;\n        this.getGui().removeChild(eEditor.getGui());\n        this.destroyBean(eEditor);\n        _.setDisplayed(this.ePill, true);\n        if (keepFocus) {\n            this.ePill.focus();\n        }\n    }\n\n    private renderValue(): void {\n        let value: string;\n        this.eLabel.classList.remove(\n            'ag-advanced-filter-builder-value-empty',\n            'ag-advanced-filter-builder-value-number',\n            'ag-advanced-filter-builder-value-text'\n        );\n        if (!_.exists(this.value)) {\n            value = this.advancedFilterExpressionService.translate('advancedFilterBuilderEnterValue');\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-empty');\n        } else if (this.params.type === 'number') {\n            value = this.value;\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-number');\n        } else {\n            value = `\"${this.value}\"`;\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-text');\n        }\n        this.eLabel.innerText = value;\n    }\n\n    private updateValue(keepFocus: boolean): void {\n        if (!this.eEditor) { return; }\n        const value = this.eEditor!.getValue() ?? '';\n        this.dispatchEvent<WithoutGridCommon<FieldValueEvent>>({\n            type: Events.EVENT_FIELD_VALUE_CHANGED,\n            value\n        })\n        this.value = value;\n        this.renderValue();\n        this.hideEditor(keepFocus);\n    }\n}\n", "import { Autowired, Component, JoinAdvancedFilterModel, _ } from \"@ag-grid-community/core\";\nimport { AdvancedFilterExpressionService } from \"../advancedFilterExpressionService\";\nimport { AdvancedFilterBuilderItem, CreatePillParams } from \"./iAdvancedFilterBuilder\";\nimport { InputPillComp } from \"./inputPillComp\";\nimport { SelectPillComp } from \"./selectPillComp\";\n\nexport class JoinPillWrapperComp extends Component {\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    private filterModel: JoinAdvancedFilterModel;\n    private ePill: SelectPillComp | InputPillComp;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-advanced-filter-builder-item-condition\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: {\n        item: AdvancedFilterBuilderItem,\n        createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp\n    }): void {\n        const { item, createPill } = params;\n        const filterModel = item.filterModel as JoinAdvancedFilterModel;\n        this.filterModel = filterModel;\n\n        this.ePill = createPill({\n            key: filterModel.type,\n            displayValue: this.advancedFilterExpressionService.parseJoinOperator(filterModel),\n            cssClass: 'ag-advanced-filter-builder-join-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.advancedFilterExpressionService.getJoinOperatorAutocompleteEntries() }),\n            update: (key) => filterModel.type = key as any,\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderJoinSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Join Operator Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderJoinOperator')\n        });\n        this.getGui().appendChild(this.ePill.getGui());\n        this.addDestroyFunc(() => this.destroyBean(this.ePill));\n    }\n\n    public getDragName(): string {\n        return this.advancedFilterExpressionService.parseJoinOperator(this.filterModel);\n    }\n\n    public getAriaLabel(): string {\n        return `${this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderGroupItem')} ${this.getDragName()}`;\n    }\n\n    public getValidationMessage(): string | null {\n        return null;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.ePill.getFocusableElement();\n    }\n}\n", "import { AgRichSelect, AutocompleteEntry, RichSelectParams, VirtualList, _ } from \"@ag-grid-community/core\";\n\nexport interface SelectPillParams extends RichSelectParams<AutocompleteEntry> {\n    getEditorParams: () => { values?: any[] },\n    wrapperClassName: string,\n    ariaLabel: string;\n}\n\nexport class SelectPillComp extends AgRichSelect<AutocompleteEntry> {\n    constructor(private readonly params: SelectPillParams) {\n        super({\n            ...params,\n            template: /* html */`\n                <div class=\"ag-picker-field ag-advanced-filter-builder-pill-wrapper\" role=\"presentation\">\n                    <div ref=\"eLabel\"></div>\n                    <div ref=\"eWrapper\" class=\"ag-wrapper ag-advanced-filter-builder-pill ag-picker-collapsed\">\n                        <div ref=\"eDisplayField\" class=\"ag-picker-field-display ag-advanced-filter-builder-pill-display\"></div>\n                        <ag-input-text-field ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                        <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                    </div>\n                </div>`,\n        });\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eWrapper;\n    }\n\n    public showPicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.showPicker());\n    }\n\n    public hidePicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.hidePicker());\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        const { wrapperClassName, ariaLabel } = this.params;\n\n        this.eWrapper.classList.add(wrapperClassName);\n        _.setAriaLabelledBy(this.eWrapper, '');\n        _.setAriaLabel(this.eWrapper, ariaLabel);\n    }\n\n    protected createPickerComponent(): VirtualList {\n        if (!this.values) {\n            const { values } = this.params.getEditorParams();\n            this.values = values!;\n            const key = this.value.key;\n            const value = values!.find(value => value.key === key) ?? {\n                key,\n                displayValue: this.value.displayValue\n            };\n            this.value = value;\n        }\n        return super.createPickerComponent();\n    }\n\n    protected onEnterKeyDown(event: KeyboardEvent): void {\n        _.stopPropagationForAgGrid(event);\n        if (this.isPickerDisplayed) {\n            super.onEnterKeyDown(event);\n        } else {\n            event.preventDefault();\n            this.showPicker();\n        }\n    }\n}\n", "import {\n    Autowired,\n    Beans,\n    Component,\n    Events,\n    FieldPickerValueSelectedEvent,\n    PostConstruct,\n    RefSelector,\n    TooltipFeature,\n    _\n} from \"@ag-grid-community/core\";\nimport { AdvancedFilterExpressionService } from \"../advancedFilterExpressionService\";\nimport { AddDropdownComp } from \"./addDropdownComp\";\nimport { AdvancedFilterBuilderItemNavigationFeature } from \"./advancedFilterBuilderItemNavigationFeature\";\nimport { getAdvancedFilterBuilderAddButtonParams } from \"./advancedFilterBuilderUtils\";\nimport { AdvancedFilterBuilderAddEvent, AdvancedFilterBuilderEvents, AdvancedFilterBuilderItem } from \"./iAdvancedFilterBuilder\";\n\nexport class AdvancedFilterBuilderItemAddComp extends Component {\n    @Autowired('beans') private readonly beans: Beans;\n    @Autowired('advancedFilterExpressionService') private readonly advancedFilterExpressionService: AdvancedFilterExpressionService;\n    @RefSelector('eItem') private readonly eItem: HTMLElement;\n\n    constructor(private readonly item: AdvancedFilterBuilderItem, private readonly focusWrapper: HTMLElement) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-wrapper\" role=\"presentation\">\n                <div ref=\"eItem\" class=\"ag-advanced-filter-builder-item\" role=\"presentation\">\n                    <div class=\"ag-advanced-filter-builder-item-tree-lines\" aria-hidden=\"true\">\n                        <div class=\"ag-advanced-filter-builder-item-tree-line-vertical-top ag-advanced-filter-builder-item-tree-line-horizontal\"></div>\n                    </div>\n                </div>\n            </div>\n        `);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        _.setAriaLevel(this.focusWrapper, 2);\n\n        const addButtonParams = getAdvancedFilterBuilderAddButtonParams(\n            key => this.advancedFilterExpressionService.translate(key),\n            this.gridOptionsService.get('advancedFilterBuilderParams')?.addSelectWidth\n        );\n        const eAddButton = this.createManagedBean(new AddDropdownComp(addButtonParams));\n        this.addManagedListener(eAddButton, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, ({ value }: FieldPickerValueSelectedEvent) => {\n            this.dispatchEvent<AdvancedFilterBuilderAddEvent>({\n                type: AdvancedFilterBuilderEvents.EVENT_ADDED,\n                item: this.item,\n                isJoin: value.key === 'join'\n            });\n        });\n        this.eItem.appendChild(eAddButton.getGui());\n\n        this.createManagedBean(new TooltipFeature({\n            getGui: () => eAddButton.getGui(),\n            getLocation: () => 'advancedFilter',\n            getTooltipValue: () => this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip')\n        }));\n\n        this.createManagedBean(new AdvancedFilterBuilderItemNavigationFeature(\n            this.getGui(),\n            this.focusWrapper,\n            eAddButton\n        ));\n\n        _.setAriaLabel(\n            this.focusWrapper,\n            this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItem', [\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n                `${this.item.level + 1}`\n            ])\n        );\n    }\n\n    public afterAdd(): void {\n        // do nothing\n    }\n}\n", "import {\n    AutocompleteEntry,\n    AutocompleteListParams,\n    Autowired,\n    BaseCellDataType,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnAdvancedFilterModel,\n    ColumnModel,\n    DataTypeService,\n    JoinAdvancedFilterModel,\n    PostConstruct,\n    ValueFormatterService,\n    ValueParserService,\n    _,\n} from '@ag-grid-community/core';\nimport { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport { ColFilterExpressionParser } from './colFilterExpressionParser';\nimport {\n    BooleanFilterExpressionOperators,\n    DataTypeFilterExpressionOperators,\n    FilterExpressionEvaluatorParams,\n    FilterExpressionOperator,\n    FilterExpressionOperators,\n    ScalarFilterExpressionOperators,\n    TextFilterExpressionOperators,\n} from './filterExpressionOperators';\n\n@Bean('advancedFilterExpressionService')\nexport class AdvancedFilterExpressionService extends BeanStub {\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dataTypeService') private dataTypeService: DataTypeService;\n\n    private columnNameToIdMap: { [columnNameUpperCase: string]: { colId: string, columnName: string } } = {};\n    private columnAutocompleteEntries: AutocompleteEntry[] | null = null;\n    private expressionOperators: FilterExpressionOperators;\n    private expressionJoinOperators: { AND: string, OR: string };\n    private expressionEvaluatorParams: { [colId: string]: FilterExpressionEvaluatorParams<any> } = {};\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.expressionJoinOperators = this.generateExpressionJoinOperators();\n        this.expressionOperators = this.generateExpressionOperators();\n    }\n\n    public parseJoinOperator(model: JoinAdvancedFilterModel): string {\n        const { type } = model;\n        return this.expressionJoinOperators[type] ?? type;\n    }\n\n    public getColumnDisplayValue(model: ColumnAdvancedFilterModel): string | undefined {\n        const { colId } = model;\n        const columnEntries = this.getColumnAutocompleteEntries();\n        const columnEntry = columnEntries.find(({ key }) => key === colId);\n        let columnName;\n        if (columnEntry) {\n            columnName = columnEntry.displayValue!;\n            this.columnNameToIdMap[columnName.toLocaleUpperCase()] = { colId, columnName };\n        } else {\n            columnName = colId;\n        }\n        return columnName;\n    }\n\n    public getOperatorDisplayValue(model: ColumnAdvancedFilterModel): string | undefined {\n        return this.getExpressionOperator(model.filterType, model.type)?.displayValue ?? model.type;\n    }\n\n    public getOperandModelValue(operand: string, baseCellDataType: BaseCellDataType, column: Column): string | number | null {\n        switch (baseCellDataType) {\n            case 'number':\n                return _.exists(operand) ? Number(operand) : null;\n            case 'date':\n                return _.serialiseDate(this.valueParserService.parseValue(column, null, operand, undefined), false);\n            case 'dateString':\n                // displayed string format may be different from data string format, so parse before converting to date\n                const parsedDateString = this.valueParserService.parseValue(column, null, operand, undefined);\n                return _.serialiseDate(this.dataTypeService.getDateParserFunction(column)(parsedDateString) ?? null, false);\n        }\n        return operand;\n    }\n\n    public getOperandDisplayValue(model: ColumnAdvancedFilterModel, skipFormatting?: boolean): string {\n        const { colId, filter } = model as any;\n        const column = this.columnModel.getPrimaryColumn(colId);\n        let operand = '';\n        if (filter != null) {\n            let operand1: string | null | undefined;\n            switch (model.filterType) {\n                case 'number':\n                    operand1 = _.toStringOrNull(filter) ?? '';\n                    break;\n                case 'date':\n                    const dateValue = _.parseDateTimeFromString(filter);\n                    operand1 = column ? this.valueFormatterService.formatValue(column, null, dateValue) : null;\n                    break;\n                case 'dateString':\n                    // need to convert from ISO date string to Date to data string format to formatted string format\n                    const dateStringDateValue = _.parseDateTimeFromString(filter);\n                    const dateStringStringValue = column\n                        ? this.dataTypeService.getDateFormatterFunction(column)(dateStringDateValue ?? undefined)\n                        : null;\n                    operand1 = column ? this.valueFormatterService.formatValue(column, null, dateStringStringValue) : null;\n                    break;\n            }\n            if (model.filterType !== 'number') {\n                operand1 = operand1 ?? _.toStringOrNull(filter) ?? '';\n                if (!skipFormatting) {\n                    operand1 = `\"${operand1}\"`;\n                }\n            }\n            operand = skipFormatting ? operand1! : ` ${operand1}`;\n        }\n        return operand;\n    }\n\n    public parseColumnFilterModel(model: ColumnAdvancedFilterModel): string {\n        const columnName = this.getColumnDisplayValue(model) ?? '';\n        const operator = this.getOperatorDisplayValue(model) ?? '';\n        const operands = this.getOperandDisplayValue(model);\n        return `[${columnName}] ${operator}${operands}`;\n    }\n\n    public updateAutocompleteCache(updateEntry: AutocompleteEntry, type?: string): void {\n        if (type === 'column') {\n            const { key: colId, displayValue } = updateEntry;\n            this.columnNameToIdMap[updateEntry.displayValue!.toLocaleUpperCase()] = { colId, columnName: displayValue! };\n        }\n    }\n\n    public translate(key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]): string {\n        let defaultValue = ADVANCED_FILTER_LOCALE_TEXT[key];\n        if (typeof defaultValue === 'function') {\n            defaultValue = defaultValue(variableValues!);\n        }\n        return this.localeService.getLocaleTextFunc()(key, defaultValue, variableValues);\n    }\n\n    public generateAutocompleteListParams(entries: AutocompleteEntry[], type: string, searchString: string): AutocompleteListParams {\n        return {\n            enabled: true,\n            type,\n            searchString,\n            entries\n        }\n    }\n\n    public getColumnAutocompleteEntries(): AutocompleteEntry[] {\n        if (this.columnAutocompleteEntries) {\n            return this.columnAutocompleteEntries;\n        }\n        const columns = this.columnModel.getAllPrimaryColumns() ?? [];\n        const entries: AutocompleteEntry[] = [];\n        const includeHiddenColumns = this.gridOptionsService.get('includeHiddenColumnsInAdvancedFilter');\n        columns.forEach(column => {\n            if (column.getColDef().filter && (includeHiddenColumns || column.isVisible() || column.isRowGroupActive())) {\n                entries.push({\n                    key: column.getColId(),\n                    displayValue: this.columnModel.getDisplayNameForColumn(column, 'advancedFilter')!\n                });\n            }\n        });\n        entries.sort((a, b) => {\n            const aValue = a.displayValue ?? '';\n            const bValue = b.displayValue ?? '';\n            if (aValue < bValue) {\n                return -1\n            } else if (bValue > aValue) {\n                return 1;\n            }\n            return 0;\n        })\n        return entries;\n    }\n\n    public getOperatorAutocompleteEntries(column: Column, baseCellDataType: BaseCellDataType): AutocompleteEntry[] {\n        const activeOperators = this.getActiveOperators(column);\n        return this.getDataTypeExpressionOperator(baseCellDataType)!.getEntries(activeOperators);\n    }\n\n    public getJoinOperatorAutocompleteEntries(): AutocompleteEntry[] {\n        return Object.entries(this.expressionJoinOperators).map(([key, displayValue]) => ({key, displayValue}));\n    }\n\n    public getDefaultAutocompleteListParams(searchString: string): AutocompleteListParams {\n        return this.generateAutocompleteListParams(this.getColumnAutocompleteEntries(), 'column', searchString);\n    }\n\n    public getDataTypeExpressionOperator(baseCellDataType?: BaseCellDataType): DataTypeFilterExpressionOperators<any> | undefined {\n        return this.expressionOperators[baseCellDataType!];\n    }\n\n    public getExpressionOperator(baseCellDataType?: BaseCellDataType, operator?: string): FilterExpressionOperator<any> | undefined {\n        return this.getDataTypeExpressionOperator(baseCellDataType)?.operators?.[operator!];\n    }\n\n    public getExpressionJoinOperators(): { AND: string, OR: string } {\n        return this.expressionJoinOperators;\n    }\n\n    public getColId(columnName: string): { colId: string, columnName: string } | null {\n        const upperCaseColumnName = columnName.toLocaleUpperCase();\n        const cachedColId = this.columnNameToIdMap[upperCaseColumnName];\n        if (cachedColId) { return cachedColId; }\n\n        const columnAutocompleteEntries = this.getColumnAutocompleteEntries();\n        const colEntry = columnAutocompleteEntries.find(({ displayValue }) => displayValue!.toLocaleUpperCase() === upperCaseColumnName);\n        if (colEntry) {\n            const { key: colId, displayValue } = colEntry;\n            const colValue = { colId, columnName: displayValue! };\n            // cache for faster lookup\n            this.columnNameToIdMap[upperCaseColumnName] = colValue;\n            return colValue;\n        }\n        return null;\n    }\n\n    public getExpressionEvaluatorParams<ConvertedTValue, TValue = ConvertedTValue>(colId: string): FilterExpressionEvaluatorParams<ConvertedTValue, TValue> {\n        let params = this.expressionEvaluatorParams[colId];\n        if (params) { return params; }\n\n        const column = this.columnModel.getPrimaryColumn(colId);\n        if (!column) { return { valueConverter: (v: any) => v }; }\n\n        const baseCellDataType = this.dataTypeService.getBaseDataType(column);\n        switch (baseCellDataType) {\n            case 'dateString':\n                params = {\n                    valueConverter: this.dataTypeService.getDateParserFunction(column)\n                };\n                break;\n            case 'object':\n                // If there's a filter value getter, assume the value is already a string. Otherwise we need to format it.\n                if (column.getColDef().filterValueGetter) {\n                    params = { valueConverter: (v: any) => v };\n                } else {\n                    params = {\n                        valueConverter: (value, node) => this.valueFormatterService.formatValue(column, node, value)\n                            ?? (typeof value.toString === 'function' ? value.toString() : '')\n                    };\n                }\n                break;\n            case 'text': \n            case undefined: \n                params = { valueConverter: (v: any) => _.toStringOrNull(v) };\n                break;\n            default:\n                params = { valueConverter: (v: any) => v };\n                break;\n        }\n        const { filterParams } = column.getColDef();\n        if (filterParams) {\n            [\n                'caseSensitive', 'includeBlanksInEquals', 'includeBlanksInLessThan', 'includeBlanksInGreaterThan'\n            ].forEach((param: keyof FilterExpressionEvaluatorParams<ConvertedTValue, TValue>) => {\n                const paramValue = filterParams[param];\n                if (paramValue) {\n                    params[param] = paramValue\n                }\n            });\n        }\n        this.expressionEvaluatorParams[colId] = params;\n\n        return params;\n    }\n\n    public getColumnDetails(colId: string): { column?: Column, baseCellDataType: BaseCellDataType } {\n        const column = this.columnModel.getPrimaryColumn(colId) ?? undefined;\n        const baseCellDataType = (column ? this.dataTypeService.getBaseDataType(column) : undefined) ?? 'text';\n        return { column, baseCellDataType };\n    }\n\n    public generateExpressionOperators(): FilterExpressionOperators {\n        const translate = (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]) => this.translate(key, variableValues);\n        return {\n            text: new TextFilterExpressionOperators({ translate }),\n            boolean: new BooleanFilterExpressionOperators({ translate }),\n            object: new TextFilterExpressionOperators<any>({ translate }),\n            number: new ScalarFilterExpressionOperators<number>({ translate, equals: (v, o) => v === o }),\n            date: new ScalarFilterExpressionOperators<Date>({ translate, equals: (v: Date, o: Date) => v.getTime() === o.getTime() }),\n            dateString: new ScalarFilterExpressionOperators<Date, string>({ translate, equals: (v: Date, o: Date) => v.getTime() === o.getTime() })\n        }\n    }\n\n    public getColumnValue({ displayValue }: AutocompleteEntry): string {\n        return `${ColFilterExpressionParser.COL_START_CHAR}${displayValue}${ColFilterExpressionParser.COL_END_CHAR}`;\n    }\n\n    private generateExpressionJoinOperators(): { AND: string, OR: string } {\n        return {\n            AND: this.translate('advancedFilterAnd'),\n            OR: this.translate('advancedFilterOr')\n        };\n    }\n\n    private getActiveOperators(column: Column): string[] | undefined {\n        const filterOptions = column.getColDef().filterParams?.filterOptions;\n        if (!filterOptions) { return undefined; }\n        const isValid = filterOptions.every((filterOption: any) => typeof filterOption === 'string');\n        return isValid ? filterOptions : undefined;\n    }\n\n    public resetColumnCaches(): void {\n        this.columnAutocompleteEntries = null;\n        this.columnNameToIdMap = {};\n        this.expressionEvaluatorParams = {};\n    }\n}\n", "export const ADVANCED_FILTER_LOCALE_TEXT = {\n    ariaAdvancedFilterBuilderItem: (variableValues: string[]) => `${variableValues[0]}. Level ${variableValues[1]}. Press ENTER to edit.`,\n    ariaAdvancedFilterBuilderItemValidation: (variableValues: string[]) => `${variableValues[0]}. Level ${variableValues[1]}. ${variableValues[2]} Press ENTER to edit.`,\n    ariaAdvancedFilterBuilderList: 'Advanced Filter Builder List',\n    ariaAdvancedFilterBuilderFilterItem: 'Filter Condition',\n    ariaAdvancedFilterBuilderGroupItem: 'Filter Group',\n    ariaAdvancedFilterBuilderColumn: 'Column',\n    ariaAdvancedFilterBuilderOption: 'Option',\n    ariaAdvancedFilterBuilderValue: 'Value',\n    ariaAdvancedFilterBuilderJoinOperator: 'Join Operator',\n    \n    ariaAdvancedFilterInput: 'Advanced Filter Input',\n    ariaLabelAdvancedFilterAutocomplete: 'Advanced Filter Autocomplete',\n    advancedFilterContains: 'contains',\n    advancedFilterNotContains: 'does not contain',\n    advancedFilterTextEquals: 'equals',\n    advancedFilterTextNotEqual: 'does not equal',\n    advancedFilterStartsWith: 'begins with',\n    advancedFilterEndsWith: 'ends with',\n    advancedFilterBlank: 'is blank',\n    advancedFilterNotBlank: 'is not blank',\n    advancedFilterEquals: '=',\n    advancedFilterNotEqual: '!=',\n    advancedFilterGreaterThan: '>',\n    advancedFilterGreaterThanOrEqual: '>=',\n    advancedFilterLessThan: '<',\n    advancedFilterLessThanOrEqual: '<=',\n    advancedFilterTrue: 'is true',\n    advancedFilterFalse: 'is false',\n    advancedFilterAnd: 'AND',\n    advancedFilterOr: 'OR',\n    advancedFilterApply: 'Apply',\n    advancedFilterBuilder: 'Builder',\n    advancedFilterValidationMissingColumn: 'Column is missing',\n    advancedFilterValidationMissingOption: 'Option is missing',\n    advancedFilterValidationMissingValue: 'Value is missing',\n    advancedFilterValidationInvalidColumn: 'Column not found',\n    advancedFilterValidationInvalidOption: 'Option not found',\n    advancedFilterValidationMissingQuote: 'Value is missing an end quote',\n    advancedFilterValidationNotANumber: 'Value is not a number',\n    advancedFilterValidationInvalidDate: 'Value is not a valid date',\n    advancedFilterValidationMissingCondition: 'Condition is missing',\n    advancedFilterValidationJoinOperatorMismatch: 'Join operators within a condition must be the same',\n    advancedFilterValidationInvalidJoinOperator: 'Join operator not found',\n    advancedFilterValidationMissingEndBracket: 'Missing end bracket',\n    advancedFilterValidationExtraEndBracket: 'Too many end brackets',\n    advancedFilterValidationMessage: (variableValues: string[]) => `Expression has an error. ${variableValues[0]} - ${variableValues[1]}.`,\n    advancedFilterValidationMessageAtEnd: (variableValues: string[]) => `Expression has an error. ${variableValues[0]} at end of expression.`,\n    advancedFilterBuilderTitle: 'Advanced Filter',\n    advancedFilterBuilderApply: 'Apply',\n    advancedFilterBuilderCancel: 'Cancel',\n    advancedFilterBuilderAddButtonTooltip: 'Add Filter or Group',\n    advancedFilterBuilderRemoveButtonTooltip: 'Remove',\n    advancedFilterBuilderMoveUpButtonTooltip: 'Move Up',\n    advancedFilterBuilderMoveDownButtonTooltip: 'Move Down',\n    advancedFilterBuilderAddJoin: 'Add Group',\n    advancedFilterBuilderAddCondition: 'Add Filter',\n    advancedFilterBuilderSelectColumn: 'Select a column',\n    advancedFilterBuilderSelectOption: 'Select an option',\n    advancedFilterBuilderEnterValue: 'Enter a value...',\n    advancedFilterBuilderValidationAlreadyApplied: 'Current filter already applied.',\n    advancedFilterBuilderValidationIncomplete: 'Not all conditions are complete.',\n    advancedFilterBuilderValidationSelectColumn: 'Must select a column.',\n    advancedFilterBuilderValidationSelectOption: 'Must select an option.',\n    advancedFilterBuilderValidationEnterValue: 'Must enter a value.',\n};", "import { ColumnModel, DataTypeService, ValueParserService } from '@ag-grid-community/core';\nimport { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport { FilterExpressionEvaluatorParams, FilterExpressionOperator } from \"./filterExpressionOperators\";\n\nexport interface FilterExpressionParserParams {\n    expression: string;\n    columnModel: ColumnModel;\n    dataTypeService: DataTypeService;\n    valueParserService: ValueParserService;\n    advancedFilterExpressionService: AdvancedFilterExpressionService;\n}\n\nexport interface FilterExpression {\n    functionBody: string;\n    params: FilterExpressionFunctionParams;\n}\n\nexport interface AutocompleteUpdate {\n    updatedValue: string;\n    updatedPosition: number;\n    hideAutocomplete?: boolean;\n}\n\nexport interface FilterExpressionValidationError {\n    message: string;\n    startPosition: number;\n    endPosition: number;\n}\n\nexport interface FilterExpressionFunctionParams {\n    operands: any[];\n    operators: FilterExpressionOperator<any>[];\n    evaluatorParams: FilterExpressionEvaluatorParams<any, any>[];\n}\n\nexport function getSearchString(value: string, position: number, endPosition: number): string {\n    if (!value) { return ''; }\n    const numChars = endPosition - position;\n    return numChars ? value.slice(0, value.length - numChars) : value;\n}\n\nexport function updateExpression(\n    expression: string,\n    startPosition: number,\n    endPosition: number,\n    updatedValuePart: string,\n    appendSpace?: boolean,\n    appendQuote?: boolean,\n    empty?: boolean\n): AutocompleteUpdate {\n    const secondPartStartPosition = endPosition + (!expression.length || empty ? 0 : 1);\n    let positionOffset = 0;\n    if (appendSpace) {\n        if (expression[secondPartStartPosition] === ' ') {\n            // already a space, just move the position\n            positionOffset = 1;\n        } else {\n            updatedValuePart += ' ';\n            if (appendQuote) {\n                updatedValuePart += `\"`;\n            }\n        }\n    }\n    const updatedValue = expression.slice(0, startPosition) + updatedValuePart + expression.slice(secondPartStartPosition);\n    return { updatedValue, updatedPosition: startPosition + updatedValuePart.length + positionOffset };\n}\n\nexport function findStartPosition(expression: string, position: number, endPosition: number) {\n    let startPosition = position;\n    while (startPosition < endPosition) {\n        const char = expression[startPosition];\n        if (char !== ' ') {\n            break;\n        }\n        startPosition++;\n    }\n    return startPosition;\n}\n\nexport function findEndPosition(expression: string, position: number, includeCloseBracket?: boolean, isStartPositionUnknown?: boolean): { endPosition: number, isEmpty: boolean } {\n    let endPosition = position;\n    let isEmpty = false;\n    while (endPosition < expression.length) {\n        const char = expression[endPosition];\n        if (char === '(') {\n            if (isStartPositionUnknown && expression[endPosition - 1] === ' ') {\n                isEmpty = true;\n            } else {\n                endPosition = endPosition - 1;\n            }\n            break;\n        } else if (char === ' ' || (includeCloseBracket && char === ')')) {\n            endPosition = endPosition - 1;\n            break;\n        }\n        endPosition++;\n    }\n    return { endPosition, isEmpty };\n}\n\nexport function checkAndUpdateExpression(\n    params: FilterExpressionParserParams,\n    userValue: string,\n    displayValue: string,\n    endPosition: number\n): void {\n    if (displayValue !== userValue) {\n        params.expression = updateExpression(\n            params.expression,\n            endPosition - userValue.length + 1,\n            endPosition,\n            displayValue\n        ).updatedValue;\n    }\n}\n\nexport function escapeQuotes(value: string): string {\n    return value.replace(/(['\"])/, '\\\\$1');\n}\n", "\nimport { AdvancedFilterModel, AutocompleteEntry, AutocompleteListParams, BaseCellDataType, Column, _ } from \"@ag-grid-community/core\";\nimport { ADVANCED_FILTER_LOCALE_TEXT } from \"./advancedFilterLocaleText\";\nimport {\n    AutocompleteUpdate,\n    checkAndUpdateExpression,\n    FilterExpressionParserParams,\n    getSearchString,\n    updateExpression,\n    escapeQuotes,\n    findEndPosition,\n    findStartPosition,\n    FilterExpressionValidationError,\n    FilterExpressionFunctionParams\n} from \"./filterExpressionUtils\";\n\ninterface Parser {\n    type: string;\n    parse(char: string, position: number): boolean | undefined;\n    complete(position: number): void;\n    getValidationError(): FilterExpressionValidationError | null;\n}\n\nclass ColumnParser implements Parser {\n    public readonly type = 'column';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    public baseCellDataType: BaseCellDataType;\n    public column: Column | null | undefined;\n    public hasStartChar = false;\n    public hasEndChar = false;\n    private colName: string = '';\n    private colId: string;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ColFilterExpressionParser.COL_START_CHAR && !this.colName) {\n            this.hasStartChar = true;\n        } else if (char === ColFilterExpressionParser.COL_END_CHAR && this.hasStartChar) {\n            const isMatch = this.parseColumn(false, position);\n            if (isMatch) {\n                this.hasEndChar = true;\n                return false;\n            } else {\n                this.colName += char;\n            }\n        } else {\n            this.colName += char;\n        }\n        return undefined;\n    }\n    \n    public getDisplayValue(): string {\n        return (this.hasStartChar ? ColFilterExpressionParser.COL_START_CHAR : '') +\n            this.colName +\n            (this.hasEndChar ? ColFilterExpressionParser.COL_END_CHAR : '');\n    }\n\n    public getColId(): string {\n        return this.colId;\n    }\n\n    public complete(position: number): void {\n        this.parseColumn(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.valid ? null : {\n            message: this.params.advancedFilterExpressionService.translate('advancedFilterValidationInvalidColumn'),\n            startPosition: this.startPosition,\n            endPosition: this.endPosition ?? this.params.expression.length - 1\n        };\n    }\n\n    private parseColumn(fromComplete: boolean, endPosition: number): boolean {\n        this.endPosition = endPosition;\n        const colValue = this.params.advancedFilterExpressionService.getColId(this.colName);\n        if (colValue && this.hasStartChar) {\n            this.colId = colValue.colId;\n            checkAndUpdateExpression(this.params, this.colName, colValue.columnName, endPosition - 1);\n            this.colName = colValue.columnName;\n            this.column = this.params.columnModel.getPrimaryColumn(this.colId);\n            if (this.column) {\n                this.baseCellDataType = this.params.dataTypeService.getBaseDataType(this.column) ?? 'text';\n                return true;\n            }\n        }\n        if (fromComplete) {\n            this.valid = false;\n        }\n        this.baseCellDataType = 'text';\n        return false;\n    }\n}\n\nclass OperatorParser implements Parser {\n    public readonly type = 'operator';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    public expectedNumOperands: number = 0;\n    private operator: string = '';\n    private parsedOperator: string;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number,\n        private readonly baseCellDataType: BaseCellDataType\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ' ' || char === ')') {\n            const isMatch = this.parseOperator(false, position - 1);\n            if (isMatch) {\n                return true;\n            } else {\n                this.operator += char;\n            }\n        } else {\n            this.operator += char;\n        }\n        return undefined;\n    }\n\n    public complete(position: number): void {\n        this.parseOperator(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.valid ? null : {\n            message: this.params.advancedFilterExpressionService.translate('advancedFilterValidationInvalidOption'),\n            startPosition: this.startPosition,\n            endPosition: this.endPosition ?? this.params.expression.length - 1\n        };\n    }\n\n    public getDisplayValue(): string {\n        return this.operator;\n    }\n\n    public getOperatorKey(): string {\n        return this.parsedOperator;\n    }\n\n    private parseOperator(fromComplete: boolean, endPosition: number): boolean {\n        const operatorForType = this.params.advancedFilterExpressionService.getDataTypeExpressionOperator(this.baseCellDataType)!;\n        const parsedOperator = operatorForType.findOperator(this.operator);\n        this.endPosition = endPosition;\n        if (parsedOperator) {\n            this.parsedOperator = parsedOperator;\n            const operator = operatorForType.operators[parsedOperator];\n            this.expectedNumOperands = operator.numOperands;\n            const operatorDisplayValue = operator.displayValue;\n            checkAndUpdateExpression(this.params, this.operator, operatorDisplayValue, endPosition);\n            this.operator = operatorDisplayValue;\n            return true;\n        }\n        const isPartialMatch = parsedOperator === null;\n        if (fromComplete || !isPartialMatch) {\n            this.valid = false;\n        }\n        return false;\n    }\n}\n\nclass OperandParser implements Parser {\n    public readonly type = 'operand';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    private quotes: `'` | `\"` | undefined;\n    private operand = '';\n    private modelValue: number | string;\n    private validationMessage: string | null = null;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number,\n        private readonly baseCellDataType: BaseCellDataType,\n        private readonly column: Column | null | undefined,\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ' ') {\n            if (this.quotes) {\n                this.operand += char;\n            } else {\n                this.parseOperand(false, position);\n                return true;\n            }\n        } else if (char === ')') {\n            if (this.baseCellDataType === 'number' || !this.quotes) {\n                this.parseOperand(false, position - 1);\n                return true;\n            } else {\n                this.operand += char;\n            }\n        } else if (!this.operand && !this.quotes && (char === `'` || char === `\"`)) {\n            this.quotes = char;\n        } else if (this.quotes && char === this.quotes) {\n            this.parseOperand(false, position);\n            return false;\n        } else {\n            this.operand += char;\n        }\n        return undefined;\n    }\n\n    public complete(position: number): void {\n        this.parseOperand(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.validationMessage ? {\n            message: this.validationMessage,\n            startPosition: this.startPosition,\n            endPosition: this.endPosition ?? this.params.expression.length - 1\n        } : null;\n    }\n\n    public getRawValue(): string {\n        return this.operand;\n    }\n\n    public getModelValue(): string | number {\n        return this.modelValue;\n    }\n\n    private parseOperand(fromComplete: boolean, position: number): void {\n        const { advancedFilterExpressionService } = this.params;\n        this.endPosition = position;\n        this.modelValue = this.operand;\n        if (fromComplete && this.quotes) {\n            // missing end quote\n            this.valid = false;\n            this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationMissingQuote');\n        } else if (this.modelValue === '') {\n            this.valid = false;\n            this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationMissingValue');\n        } else {\n            const modelValue = advancedFilterExpressionService.getOperandModelValue(this.operand, this.baseCellDataType, this.column!);\n            if (modelValue != null) {\n                this.modelValue = modelValue;\n            }\n            switch (this.baseCellDataType) {\n                case 'number':\n                    if (this.quotes || isNaN(this.modelValue as number)) {\n                        this.valid = false;\n                        this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationNotANumber');\n                    }\n                    break;\n                case 'date':\n                case 'dateString':\n                    if (modelValue == null) {\n                        this.valid = false;\n                        this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationInvalidDate');\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nexport class ColFilterExpressionParser {\n    public static readonly COL_START_CHAR = '[';\n    public static readonly COL_END_CHAR = ']';\n\n    private endPosition: number | undefined;\n    private isAwaiting = true;\n    private parser: Parser | undefined;\n    private columnParser: ColumnParser | undefined;\n    private operatorParser: OperatorParser | undefined;\n    private operandParser: OperandParser | undefined;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parseExpression(): number {\n        let i = this.startPosition;\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === ' ' && this.isAwaiting) {\n                // ignore duplicate spaces\n            } else {\n                this.isAwaiting = false;\n                if (!this.parser) {\n                    let parser: Parser;\n                    if (!this.columnParser) {\n                        this.columnParser = new ColumnParser(this.params, i);\n                        parser = this.columnParser;\n                    } else if (!this.operatorParser) {\n                        this.operatorParser = new OperatorParser(this.params, i, this.columnParser!.baseCellDataType);\n                        parser = this.operatorParser;\n                    } else {\n                        this.operandParser = new OperandParser(this.params, i, this.columnParser!.baseCellDataType, this.columnParser!.column);\n                        parser = this.operandParser;\n                    }\n                    this.parser = parser;\n                }\n                const hasCompletedOnPrevChar = this.parser.parse(char, i);\n                if (hasCompletedOnPrevChar != null) {\n                    if (this.isComplete()) {\n                        return this.returnEndPosition(hasCompletedOnPrevChar ? i - 1 : i, true);\n                    }\n                    this.parser = undefined;\n                    this.isAwaiting = true;\n                }\n            }\n            i++;\n        }\n        this.parser?.complete?.(i - 1);\n        return this.returnEndPosition(i);\n    }\n\n    public isValid(): boolean {\n        return this.isComplete() && this.columnParser!.valid && this.operatorParser!.valid && (!this.operandParser || this.operandParser!.valid);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        const validationError = this.columnParser?.getValidationError() ?? this.operatorParser?.getValidationError() ?? this.operandParser?.getValidationError();\n        if (validationError) { return validationError; }\n        const endPosition = this.params.expression.length;\n        let translateKey: keyof typeof ADVANCED_FILTER_LOCALE_TEXT | undefined;\n        if (!this.columnParser) {\n            translateKey = 'advancedFilterValidationMissingColumn';\n        } else if (!this.operatorParser) {\n            translateKey =  'advancedFilterValidationMissingOption';\n        } else if (this.operatorParser.expectedNumOperands && !this.operandParser) {\n            translateKey = 'advancedFilterValidationMissingValue';\n        }\n        if (translateKey) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(translateKey),\n                startPosition: endPosition,\n                endPosition\n            };\n        }\n        return null;\n    }\n\n    public getFunction(params: FilterExpressionFunctionParams): string {\n        const colId = this.columnParser!.getColId();\n        const escapedColId = escapeQuotes(colId);\n        const operator = this.operatorParser?.getOperatorKey();\n        const { operators, evaluatorParams, operands } = params;\n        const operatorForColumn = this.params.advancedFilterExpressionService.getExpressionOperator(this.columnParser!.baseCellDataType, operator);\n        const operatorIndex = this.addToListAndGetIndex(operators, operatorForColumn);\n        const evaluatorParamsForColumn = this.params.advancedFilterExpressionService.getExpressionEvaluatorParams(colId);\n        const evaluatorParamsIndex = this.addToListAndGetIndex(evaluatorParams, evaluatorParamsForColumn);\n        let operand: string;\n        if (this.operatorParser?.expectedNumOperands === 0) {\n            operand = '';\n        } else {\n            const operandIndex = this.addToListAndGetIndex(operands, this.getOperandValue());\n            operand = `, params.operands[${operandIndex}]`;\n        }\n        return `params.operators[${operatorIndex}].evaluator(expressionProxy.getValue('${escapedColId}', node), node, params.evaluatorParams[${evaluatorParamsIndex}]${operand})`;\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams | undefined {\n        if (this.isColumnPosition(position)) { return this.getColumnAutocompleteListParams(position); }\n        if (this.isOperatorPosition(position)) { return this.getOperatorAutocompleteListParams(position); }\n        if (this.isBeyondEndPosition(position)) { return undefined; }\n        return { enabled: false };\n    }\n\n    public updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate | null {\n        const { expression } = this.params;\n        if (this.isColumnPosition(position)) {\n            return updateExpression(\n                this.params.expression,\n                this.startPosition,\n                this.columnParser?.getColId() ? this.columnParser!.endPosition! : findEndPosition(expression, position).endPosition,\n                this.params.advancedFilterExpressionService.getColumnValue(updateEntry),\n                true\n            );\n        } else if (this.isOperatorPosition(position)) {\n            const baseCellDataType = this.getBaseCellDataTypeFromOperatorAutocompleteType(type);\n            const hasOperand = this.hasOperand(baseCellDataType, updateEntry.key);\n            const doesOperandNeedQuotes = hasOperand && this.doesOperandNeedQuotes(baseCellDataType);\n            let update: AutocompleteUpdate;\n            if (this.operatorParser?.startPosition != null && position < this.operatorParser.startPosition) {\n                // in between multiple spaces, just insert direct\n                update = updateExpression(\n                    expression,\n                    position,\n                    position,\n                    updateEntry.displayValue ?? updateEntry.key,\n                    hasOperand,\n                    doesOperandNeedQuotes\n                );\n            } else {\n                let endPosition: number;\n                let empty = false;\n                if (this.operatorParser?.getOperatorKey()) {\n                    endPosition = this.operatorParser!.endPosition!;\n                } else {\n                    const { endPosition: calculatedEndPosition, isEmpty } = findEndPosition(expression, position, true, true);\n                    endPosition = calculatedEndPosition;\n                    empty = isEmpty;\n                }\n                update = updateExpression(\n                    expression,\n                    findStartPosition(expression, this.columnParser!.endPosition! + 1, endPosition),\n                    endPosition,\n                    updateEntry.displayValue ?? updateEntry.key,\n                    hasOperand,\n                    doesOperandNeedQuotes,\n                    empty\n                );\n            }\n            return { ...update, hideAutocomplete: !hasOperand };\n        }\n        return null;\n    }\n\n    public getModel(): AdvancedFilterModel {\n        const colId = this.columnParser!.getColId();\n        const model = {\n            filterType: this.columnParser!.baseCellDataType,\n            colId,\n            type: this.operatorParser!.getOperatorKey(),\n        };\n        if (this.operatorParser!.expectedNumOperands) {\n            (model as any).filter = this.operandParser!.getModelValue();\n        }\n        return model as AdvancedFilterModel;\n    }\n\n    private getOperandValue(): any {\n        let operand: any = this.operandParser!.getRawValue();\n        const { baseCellDataType, column } = this.columnParser!;\n        switch (baseCellDataType) {\n            case 'number':\n                operand = Number(operand);\n                break;\n            case 'date':\n            case 'dateString':\n                operand = this.params.valueParserService.parseValue(column!, null, operand, undefined);\n                break;\n        }\n        if (baseCellDataType === 'dateString') {\n            return this.params.dataTypeService.getDateParserFunction(column)(operand as string);\n        }\n        return operand;\n    }\n\n    private isComplete(): boolean {\n        return !!(this.operatorParser && (!this.operatorParser.expectedNumOperands || (this.operatorParser.expectedNumOperands && this.operandParser)));\n    }\n\n    private isColumnPosition(position: number): boolean {\n        return !this.columnParser || this.columnParser.endPosition == null || position <= this.columnParser.endPosition + 1;\n    }\n\n    private isOperatorPosition(position: number): boolean {\n        return !this.operatorParser || this.operatorParser.endPosition == null || position <= this.operatorParser.endPosition + 1;\n    }\n\n    private isBeyondEndPosition(position: number): boolean {\n        return this.isComplete() && this.endPosition != null && position > this.endPosition + 1 && this.endPosition + 1 < this.params.expression.length;\n    }\n\n    private returnEndPosition(returnPosition: number, treatAsEnd?: boolean): number {\n        this.endPosition = treatAsEnd ? returnPosition : returnPosition - 1;\n        return returnPosition;\n    }\n\n    private getColumnAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getColumnAutocompleteEntries(),\n            'column',\n            this.getColumnSearchString(position)\n        );\n    }\n\n    private getColumnSearchString(position: number): string {\n        const columnName = this.columnParser?.getDisplayValue() ?? '';\n        const searchString = getSearchString(\n            columnName,\n            position,\n            this.columnParser?.endPosition == null\n                ? this.params.expression.length\n                : (this.columnParser.endPosition + 1)\n        );\n        const containsStartChar = this.columnParser?.hasStartChar && searchString.length > 0;\n        const containsEndChar = this.columnParser?.hasEndChar && searchString.length === columnName.length + 2;\n        if (containsStartChar) {\n            return searchString.slice(1, containsEndChar ? -1 : undefined);\n        }\n        return searchString;\n    }\n\n    private getOperatorAutocompleteListParams(position: number): AutocompleteListParams {\n        const column = this.columnParser?.column;\n        if (!column) {\n            return { enabled: false };\n        }\n\n        const baseCellDataType = this.columnParser!.baseCellDataType;\n        const searchString = this.operatorParser?.startPosition != null && position < this.operatorParser.startPosition ? '' : getSearchString(\n            this.operatorParser?.getDisplayValue() ?? '',\n            position,\n            this.operatorParser?.endPosition == null ? this.params.expression.length : (this.operatorParser.endPosition + 1)\n        );\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getOperatorAutocompleteEntries(column, baseCellDataType),\n            `operator-${baseCellDataType}`,\n            searchString\n        );\n    }\n\n    private getBaseCellDataTypeFromOperatorAutocompleteType(type?: string): BaseCellDataType | undefined {\n        return type?.replace('operator-', '') as BaseCellDataType;\n    }\n\n    private hasOperand(baseCellDataType?: BaseCellDataType, operator?: string): boolean {\n        return !baseCellDataType ||\n            !operator ||\n            (this.params.advancedFilterExpressionService.getExpressionOperator(baseCellDataType, operator)?.numOperands ?? 0) > 0;\n    }\n\n    private doesOperandNeedQuotes(baseCellDataType?: BaseCellDataType): boolean {\n        return baseCellDataType !== 'number';\n    }\n\n    private addToListAndGetIndex<T>(list: T[], value: T): number {\n        const index = list.length;\n        list.push(value);\n        return index;\n    }\n}\n", "import { AutocompleteEntry, IRowNode } from \"@ag-grid-community/core\";\nimport { ADVANCED_FILTER_LOCALE_TEXT } from \"./advancedFilterLocaleText\";\n\nexport interface FilterExpressionEvaluatorParams<ConvertedTValue, TValue = ConvertedTValue> {\n    caseSensitive?: boolean;\n    includeBlanksInEquals?: boolean;\n    includeBlanksInLessThan?: boolean;\n    includeBlanksInGreaterThan?: boolean;\n    valueConverter: (value: TValue, node: IRowNode) => ConvertedTValue;\n}\n\nexport type FilterExpressionEvaluator<ConvertedTValue, TValue = ConvertedTValue> = (\n    value: TValue | null | undefined,\n    node: IRowNode,\n    params: FilterExpressionEvaluatorParams<ConvertedTValue, TValue>,\n    operand1?: ConvertedTValue,\n    operand2?: ConvertedTValue\n) => boolean;\n\nexport interface FilterExpressionOperator<ConvertedTValue, TValue = ConvertedTValue> {\n    displayValue: string;\n    evaluator: FilterExpressionEvaluator<ConvertedTValue, TValue>;\n    numOperands: number;\n}\n\nexport interface DataTypeFilterExpressionOperators<ConvertedTValue, TValue = ConvertedTValue> {\n    operators: {\n        [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue>;\n    };\n    getEntries(activeOperators?: string[]): AutocompleteEntry[];\n    findOperator(displayValue: string): string | null | undefined;\n};\n\nexport interface FilterExpressionOperators {\n    text: DataTypeFilterExpressionOperators<string>;\n    number: DataTypeFilterExpressionOperators<number>;\n    boolean: DataTypeFilterExpressionOperators<boolean>;\n    date: DataTypeFilterExpressionOperators<Date>;\n    dateString: DataTypeFilterExpressionOperators<Date, string>;\n    object: DataTypeFilterExpressionOperators<string, any>;\n};\n\n// null = partial match, undefined = no match\nexport function findMatch<T>(searchValue: string, values: { [key: string]: T }, getDisplayValue: (value: T) => string): string | null | undefined {\n    let partialMatch = false;\n    const searchValueLowerCase = searchValue.toLocaleLowerCase();\n    const partialSearchValue = searchValueLowerCase + ' ';\n    const parsedValue = Object.entries(values).find(([_key, value]) => {\n        const displayValueLowerCase = getDisplayValue(value).toLocaleLowerCase();\n        if (displayValueLowerCase.startsWith(partialSearchValue)) {\n            partialMatch = true;\n        }\n        return displayValueLowerCase === searchValueLowerCase;\n    });\n    if (parsedValue) {\n        return parsedValue[0];\n    } else if (partialMatch) {\n        return null;\n    } else {\n        return undefined;\n    }\n}\n\nfunction getEntries<ConvertedTValue, TValue = ConvertedTValue>(operators: { [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue> }, activeOperatorKeys?: string[]): AutocompleteEntry[] {\n    const keys = activeOperatorKeys ?? Object.keys(operators);\n        return keys.map(key => ({\n            key,\n            displayValue: operators[key].displayValue\n        }));\n}\n\nexport interface FilterExpressionOperatorsParams {\n    translate: (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]) => string;\n}\n\nexport class TextFilterExpressionOperators<TValue = string> implements DataTypeFilterExpressionOperators<string, TValue> {\n    public operators: { [operator: string]: FilterExpressionOperator<string, TValue> };\n\n    constructor(private params: FilterExpressionOperatorsParams) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n       return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({displayValue}) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate } = this.params;\n        this.operators = {\n            contains: {\n                displayValue: translate('advancedFilterContains'),\n                evaluator: (value, node, params, operand1) => this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.includes(o)),\n                numOperands: 1\n            },\n            notContains: {\n                displayValue: translate('advancedFilterNotContains'),\n                evaluator: (value, node, params, operand1) => this.evaluateExpression(value, node, params, operand1!, true, (v, o) => !v.includes(o)),\n                numOperands: 1\n            },\n            equals: {\n                displayValue: translate('advancedFilterTextEquals'),\n                evaluator: (value, node, params, operand1) => this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v === o),\n                numOperands: 1\n            },\n            notEqual: {\n                displayValue: translate('advancedFilterTextNotEqual'),\n                evaluator: (value, node, params, operand1) => this.evaluateExpression(value, node, params, operand1!, true, (v, o) => v != o),\n                numOperands: 1\n            },\n            startsWith: {\n                displayValue: translate('advancedFilterStartsWith'),\n                evaluator: (value, node, params, operand1) => this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.startsWith(o)),\n                numOperands: 1\n            },\n            endsWith: {\n                displayValue: translate('advancedFilterEndsWith'),\n                evaluator: (value, node, params, operand1) => this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.endsWith(o)),\n                numOperands: 1\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null || (typeof value === 'string' && value.trim().length === 0),\n                numOperands: 0\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null && (typeof value !== 'string' || value.trim().length > 0),\n                numOperands: 0\n            },\n        };\n    }\n\n    private evaluateExpression(\n        value: TValue | null | undefined,\n        node: IRowNode,\n        params: FilterExpressionEvaluatorParams<string, TValue>,\n        operand: string,\n        nullsMatch: boolean,\n        expression: (value: string, operand: string) => boolean\n    ): boolean {\n        if (value == null) { return nullsMatch; }\n        return params.caseSensitive\n            ? expression(params.valueConverter(value, node), operand)\n            : expression(params.valueConverter(value, node).toLocaleLowerCase(), operand.toLocaleLowerCase());\n    }\n}\n\nexport interface ScalarFilterExpressionOperatorsParams<ConvertedTValue> extends FilterExpressionOperatorsParams {\n    equals: (value: ConvertedTValue, operand: ConvertedTValue) => boolean;\n}\n\nexport class ScalarFilterExpressionOperators<ConvertedTValue extends number | Date, TValue = ConvertedTValue> implements DataTypeFilterExpressionOperators<ConvertedTValue, TValue> {\n    public operators: { [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue> };\n\n    constructor(private params: ScalarFilterExpressionOperatorsParams<ConvertedTValue>) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({displayValue}) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate, equals } = this.params;\n        this.operators = {\n            equals: {\n                displayValue: translate('advancedFilterEquals'),\n                evaluator: (value, node, params, operand1) => this.evaluateSingleOperandExpression(value, node, params, operand1!, !!params.includeBlanksInEquals, equals!),\n                numOperands: 1\n            },\n            notEqual: {\n                displayValue: translate('advancedFilterNotEqual'),\n                evaluator: (value, node, params, operand1) => this.evaluateSingleOperandExpression(value, node, params, operand1!, !!params.includeBlanksInEquals, (v, o) => !equals!(v, o)),\n                numOperands: 1\n            },\n            greaterThan: {\n                displayValue: translate('advancedFilterGreaterThan'),\n                evaluator: (value, node, params, operand1) => this.evaluateSingleOperandExpression(value, node, params, operand1!, !!params.includeBlanksInGreaterThan, (v, o) => v > o),\n                numOperands: 1\n            },\n            greaterThanOrEqual: {\n                displayValue: translate('advancedFilterGreaterThanOrEqual'),\n                evaluator: (value, node, params, operand1) => this.evaluateSingleOperandExpression(value, node, params, operand1!, !!params.includeBlanksInGreaterThan, (v, o) => v >= o),\n                numOperands: 1\n            },\n            lessThan: {\n                displayValue: translate('advancedFilterLessThan'),\n                evaluator: (value, node, params, operand1) => this.evaluateSingleOperandExpression(value, node, params, operand1!, !!params.includeBlanksInLessThan, (v, o) => v < o),\n                numOperands: 1\n            },\n            lessThanOrEqual: {\n                displayValue: translate('advancedFilterLessThanOrEqual'),\n                evaluator: (value, node, params, operand1) => this.evaluateSingleOperandExpression(value, node, params, operand1!, !!params.includeBlanksInLessThan, (v, o) => v <= o),\n                numOperands: 1\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null,\n                numOperands: 0\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null,\n                numOperands: 0\n            }\n        };\n    }\n\n    private evaluateSingleOperandExpression(\n        value: TValue | null | undefined,\n        node: IRowNode,\n        params: FilterExpressionEvaluatorParams<ConvertedTValue, TValue>,\n        operand: ConvertedTValue,\n        nullsMatch: boolean,\n        expression: (value: ConvertedTValue, operand: ConvertedTValue) => boolean\n    ): boolean {\n        if (value == null) { return nullsMatch; }\n        return expression(params.valueConverter(value, node), operand);\n    }\n}\n\nexport class BooleanFilterExpressionOperators implements DataTypeFilterExpressionOperators<boolean> {\n    public operators: { [operator: string]: FilterExpressionOperator<boolean> };\n\n    constructor(private params: FilterExpressionOperatorsParams) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({displayValue}) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate } = this.params;\n        this.operators = {\n            true: {\n                displayValue: translate('advancedFilterTrue'),\n                evaluator: (value) => !!value,\n                numOperands: 0\n            },\n            false: {\n                displayValue: translate('advancedFilterFalse'),\n                evaluator: (value) => value === false,\n                numOperands: 0\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null,\n                numOperands: 0\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null,\n                numOperands: 0\n            }\n        };\n    }\n}\n", "import {\n    AdvancedFilterEnabledChangedEvent,\n    AdvancedFilterModel,\n    AutocompleteEntry,\n    Autowired,\n    Bean,\n    BeanStub,\n    ColumnModel,\n    DataTypeService,\n    Events,\n    IAdvancedFilterService,\n    IRowModel,\n    IRowNode,\n    NewColumnsLoadedEvent,\n    PostConstruct,\n    ValueParserService,\n    ValueService,\n    WithoutGridCommon,\n    _\n} from \"@ag-grid-community/core\";\nimport { FilterExpressionParser } from \"./filterExpressionParser\";\nimport { AdvancedFilterCtrl } from \"./advancedFilterCtrl\";\nimport { AdvancedFilterExpressionService } from \"./advancedFilterExpressionService\";\nimport { FilterExpressionFunctionParams } from \"./filterExpressionUtils\";\n\ninterface ExpressionProxy {\n    getValue(colId: string, node: IRowNode): any;\n}\n\n@Bean('advancedFilterService')\nexport class AdvancedFilterService extends BeanStub implements IAdvancedFilterService {\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dataTypeService') private dataTypeService: DataTypeService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('advancedFilterExpressionService') private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    private enabled: boolean;\n    private ctrl: AdvancedFilterCtrl;\n\n    private expressionProxy: ExpressionProxy;\n    private appliedExpression: string | null = null;\n    /** The value displayed in the input, which may be invalid */\n    private expression: string | null = null;\n    private expressionFunction: Function | null;\n    private expressionParams: FilterExpressionFunctionParams | null;\n    private isValid: boolean = true;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.setEnabled(this.gridOptionsService.get('enableAdvancedFilter'), true);\n\n        this.ctrl = this.createManagedBean(new AdvancedFilterCtrl(this.enabled));\n\n        this.expressionProxy = {\n            getValue: (colId, node) => {\n                const column = this.columnModel.getPrimaryColumn(colId);\n                return column ? this.valueService.getValue(column, node, true) : undefined;\n            },\n        }\n\n        this.addManagedPropertyListener('enableAdvancedFilter', (event) => this.setEnabled(!!event.currentValue))\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED,\n            (event: NewColumnsLoadedEvent) => this.onNewColumnsLoaded(event));\n        this.addManagedPropertyListener('includeHiddenColumnsInAdvancedFilter', () => this.updateValidity());\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    public isFilterPresent(): boolean {\n        return !!this.expressionFunction;\n    }\n\n    public doesFilterPass(node: IRowNode): boolean {\n        return this.expressionFunction!(this.expressionProxy, node, this.expressionParams);\n    }\n\n    public getModel(): AdvancedFilterModel | null {\n        const expressionParser = this.createExpressionParser(this.appliedExpression);\n        expressionParser?.parseExpression();\n        return expressionParser?.getModel() ?? null;\n    }\n\n    public setModel(model: AdvancedFilterModel | null): void {\n        const parseModel = (model: AdvancedFilterModel, isFirstParent?: boolean): string | null => {\n            if (model.filterType === 'join') {\n                const operator = this.advancedFilterExpressionService.parseJoinOperator(model);\n                const expression = model.conditions.map(condition => parseModel(condition))\n                    .filter(condition => _.exists(condition))\n                    .join(` ${operator} `);\n                return isFirstParent || model.conditions.length <= 1 ? expression : `(${expression})`;\n            } else {\n                return this.advancedFilterExpressionService.parseColumnFilterModel(model);\n            }\n        };\n\n        const expression = model ? parseModel(model, true) : null;\n\n        this.setExpressionDisplayValue(expression);\n        this.applyExpression();\n        this.ctrl.refreshComp();\n        this.ctrl.refreshBuilderComp();\n    }\n\n    public getExpressionDisplayValue(): string | null {\n        return this.expression;\n    }\n\n    public setExpressionDisplayValue(expression: string | null): void {\n        this.expression = expression;\n    }\n\n    public isCurrentExpressionApplied(): boolean {\n        return this.appliedExpression === this.expression;\n    }\n\n    public createExpressionParser(expression: string | null): FilterExpressionParser | null {\n        if (!expression) { return null; }\n\n        return new FilterExpressionParser({\n            expression,\n            columnModel: this.columnModel,\n            dataTypeService: this.dataTypeService,\n            valueParserService: this.valueParserService,\n            advancedFilterExpressionService: this.advancedFilterExpressionService,\n        });\n    }\n\n    public getDefaultExpression(updateEntry: AutocompleteEntry): {\n        updatedValue: string, updatedPosition: number\n    } {\n        const updatedValue = this.advancedFilterExpressionService.getColumnValue(updateEntry) + ' ';\n        return {\n            updatedValue,\n            updatedPosition: updatedValue.length\n        };\n    }\n\n    public isHeaderActive(): boolean {\n        return !this.gridOptionsService.get('advancedFilterParent');\n    }\n\n    public getCtrl(): AdvancedFilterCtrl {\n        return this.ctrl;\n    }\n\n    private setEnabled(enabled: boolean, silent?: boolean): void {\n        const previousValue = this.enabled;\n        const rowModelType = this.rowModel.getType();\n        const isValidRowModel = rowModelType === 'clientSide' || rowModelType === 'serverSide';\n        if (enabled && !rowModelType) {\n            _.warnOnce('Advanced Filter is only supported with the Client-Side Row Model or Server-Side Row Model.');\n        }\n        this.enabled = enabled && isValidRowModel;\n        if (!silent && this.enabled !== previousValue) {\n            const event: WithoutGridCommon<AdvancedFilterEnabledChangedEvent> = {\n                type: Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,\n                enabled: this.enabled\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public applyExpression(): void {\n        const expressionParser = this.createExpressionParser(this.expression);\n        expressionParser?.parseExpression();\n        this.applyExpressionFromParser(expressionParser)\n    }\n\n    private applyExpressionFromParser(expressionParser: FilterExpressionParser | null): void {\n        this.isValid = !expressionParser || expressionParser.isValid();\n        if (!expressionParser || !this.isValid) {\n            this.expressionFunction = null;\n            this.expressionParams = null;\n            this.appliedExpression = null;\n            return;\n        }\n\n        const { functionBody, params } = expressionParser.getFunction();\n\n        this.expressionFunction = new Function('expressionProxy', 'node', 'params', functionBody);\n        this.expressionParams = params;\n        this.appliedExpression = this.expression;\n    }\n\n    public updateValidity(): boolean {\n        this.advancedFilterExpressionService.resetColumnCaches();\n        const expressionParser = this.createExpressionParser(this.expression);\n        expressionParser?.parseExpression();\n        const isValid = !expressionParser || expressionParser.isValid();\n\n        const updatedValidity = isValid !== this.isValid;\n\n        this.applyExpressionFromParser(expressionParser);\n        this.ctrl.refreshComp();\n        this.ctrl.refreshBuilderComp();\n        return updatedValidity;\n    }\n\n    private onNewColumnsLoaded(event: NewColumnsLoadedEvent): void {\n        if (event.source !== 'gridInitializing' || !this.dataTypeService.isPendingInference()) { return; }\n\n        this.ctrl.setInputDisabled(true);\n        const destroyFunc = this.addManagedListener(this.eventService, Events.EVENT_DATA_TYPES_INFERRED, () => {\n            destroyFunc?.();\n            this.ctrl.setInputDisabled(false);\n        });\n}\n}\n", "import { AdvancedFilterModel, AutocompleteEntry, AutocompleteListParams } from \"@ag-grid-community/core\";\nimport { ADVANCED_FILTER_LOCALE_TEXT } from \"./advancedFilterLocaleText\";\nimport { ColFilterExpressionParser } from \"./colFilterExpressionParser\";\nimport { findMatch } from \"./filterExpressionOperators\";\nimport {\n    AutocompleteUpdate,\n    checkAndUpdateExpression,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n    FilterExpressionValidationError,\n    findEndPosition,\n    getSearchString,\n    updateExpression\n} from \"./filterExpressionUtils\";\n\nclass OperatorParser {\n    private operators: string[] = [];\n    private parsedOperator: 'AND' | 'OR';\n    private operatorStartPositions: number[] = [];\n    private operatorEndPositions: (number | undefined)[] = [];\n    private activeOperator: number = 0;\n    private validationError: FilterExpressionValidationError | null = null;\n\n    constructor(\n        private params: FilterExpressionParserParams\n    ) {}\n\n    public parseExpression(i: number): number {\n        this.operators.push('');\n        this.operatorStartPositions.push(i);\n        this.operatorEndPositions.push(undefined);\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === ' ') {\n                const isComplete = this.parseOperator(i - 1);\n                if (isComplete) {\n                    this.activeOperator++;\n                    return i - 1;\n                } else {\n                    this.operators[this.activeOperator] += char;\n                }\n            } else {\n                this.operators[this.activeOperator] += char;\n            }\n            i++;\n        }\n        this.parseOperator(i - 1);\n\n        return i;\n    }\n\n    public isValid(): boolean {\n        return !this.validationError && (!this.operators.length || !!this.parsedOperator);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.validationError;\n    }\n\n    public getFunction(): string {\n        return this.parsedOperator === 'OR' ? '||' : '&&';\n    }\n\n    public getModel(): 'AND' | 'OR' {\n        return this.parsedOperator === 'OR' ? 'OR' : 'AND';\n    }\n\n    public getAutocompleteListParams(position: number, operatorIndex?: number): AutocompleteListParams {\n        let searchString: string;\n        if (operatorIndex == null) {\n            searchString = '';\n        } else {\n            const operator = this.operators[operatorIndex];\n            const operatorEndPosition = this.operatorEndPositions[operatorIndex];\n            searchString = getSearchString(\n                operator,\n                position,\n                operatorEndPosition == null ? this.params.expression.length : (operatorEndPosition + 1)\n            );\n        }\n        let entries = this.params.advancedFilterExpressionService.getJoinOperatorAutocompleteEntries();\n        if (operatorIndex || (operatorIndex == null && this.activeOperator)) {\n            // if operator already chosen, don't allow other operators\n            entries = entries.filter(({ key }) => key === this.parsedOperator);\n        }\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(entries, 'join', searchString);\n    }\n\n    public updateExpression(position: number, updateEntry: AutocompleteEntry, operatorIndex: number): AutocompleteUpdate {\n        let { expression } = this.params;\n        const updatedValuePart = updateEntry.displayValue ?? updateEntry.key;\n        if (operatorIndex === 0) {\n            // need to update all others\n            for (let i = this.operatorEndPositions.length - 1; i > 0; i--) {\n                const operatorEndPosition = this.operatorEndPositions[i];\n                if (operatorEndPosition == null) { continue; }\n                expression = updateExpression(\n                    expression,\n                    this.operatorStartPositions[i],\n                    operatorEndPosition,\n                    updatedValuePart\n                ).updatedValue;\n            }\n        }\n        // if we don't have a start position, haven't typed anything yet, so use current position\n        const startPosition = this.operatorStartPositions.length > operatorIndex ? this.operatorStartPositions[operatorIndex] : position;\n        const endPosition = (this.operatorEndPositions.length > operatorIndex ? this.operatorEndPositions[operatorIndex] : undefined)\n            ?? findEndPosition(expression, position, true).endPosition;\n        return updateExpression(\n            expression,\n            startPosition,\n            endPosition,\n            updatedValuePart,\n            true\n        );\n    }\n\n    public getNumOperators(): number {\n        return this.operators.length;\n    }\n\n    public getLastOperatorEndPosition(): number | undefined {\n        return this.operatorEndPositions[this.operatorEndPositions.length - 1];\n    }\n\n    private parseOperator(endPosition: number): boolean {\n        const operator = this.operators.length > this.activeOperator ? this.operators[this.activeOperator] : '';\n        const joinOperators = this.params.advancedFilterExpressionService.getExpressionJoinOperators();\n        const parsedValue = findMatch(operator, joinOperators, v => v) as 'AND' | 'OR';\n        if (parsedValue) {\n            // exact match\n            this.operatorEndPositions[this.activeOperator] = endPosition;\n            const displayValue = joinOperators[parsedValue];\n            if (this.activeOperator) {\n                if (parsedValue !== this.parsedOperator) {\n                    if (!this.validationError) {\n                        this.validationError = {\n                            message: this.params.advancedFilterExpressionService.translate('advancedFilterValidationJoinOperatorMismatch'),\n                            startPosition: endPosition - operator.length + 1,\n                            endPosition\n                        };\n                    }\n                    return false;\n                }\n            } else {\n                this.parsedOperator = parsedValue;\n            }\n            if (operator !== displayValue) {\n                checkAndUpdateExpression(this.params, operator, displayValue, endPosition);\n                this.operators[this.activeOperator] = displayValue;\n            }\n            return true;\n        } else if (parsedValue === null) {\n            // partial match\n            return false;\n        } else {\n            // no match\n            if (!this.validationError) {\n                this.validationError = {\n                    message: this.params.advancedFilterExpressionService.translate('advancedFilterValidationInvalidJoinOperator'),\n                    startPosition: endPosition - operator.length + 1,\n                    endPosition\n                };\n            }\n            return true;\n        }\n    }\n}\n\nexport class JoinFilterExpressionParser {\n    private expectingExpression: boolean = true;\n    private expectingOperator: boolean = false;\n    private expressionParsers: (JoinFilterExpressionParser | ColFilterExpressionParser)[] = [];\n    private operatorParser: OperatorParser = new OperatorParser(this.params);\n    private endPosition: number;\n    private missingEndBracket: boolean = false;\n    private extraEndBracket: boolean = false;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parseExpression(): number {\n        let i = this.startPosition;\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === '(' && !this.expectingOperator) {\n                const nestedParser = new JoinFilterExpressionParser(this.params, i + 1);\n                i = nestedParser.parseExpression();\n                this.expressionParsers.push(nestedParser);\n                this.expectingExpression = false;\n                this.expectingOperator = true;\n            } else if (char === ')') {\n                this.endPosition = i - 1;\n                if (this.startPosition === 0) {\n                    this.extraEndBracket = true;\n                }\n                return i;\n            } else if (char === ' ') {\n                // ignore extra whitespace\n            } else if (this.expectingExpression) {\n                const nestedParser = new ColFilterExpressionParser(this.params, i);\n                i = nestedParser.parseExpression();\n                this.expressionParsers.push(nestedParser);\n                this.expectingExpression = false;\n                this.expectingOperator = true;\n            } else if (this.expectingOperator) {\n                i = this.operatorParser.parseExpression(i);\n                this.expectingOperator = false;\n                this.expectingExpression = true;\n            }\n            i++;\n        }\n        if (this.startPosition > 0) {\n            this.missingEndBracket = true\n        }\n\n        return i;\n    }\n\n    public isValid(): boolean {\n        return !this.missingEndBracket &&\n            !this.extraEndBracket &&\n            this.expressionParsers.length === this.operatorParser.getNumOperators() + 1 &&\n            this.operatorParser.isValid() &&\n            this.expressionParsers.every(expressionParser => expressionParser.isValid());\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        const operatorError = this.operatorParser.getValidationError();\n        for (let i = 0; i < this.expressionParsers.length; i ++) {\n            const expressionError = this.expressionParsers[i].getValidationError();\n            if (expressionError) {\n                return operatorError && operatorError.startPosition < expressionError.startPosition\n                    ? operatorError\n                    : expressionError;\n            }\n        };\n        if (operatorError) { return operatorError; }\n        if (this.extraEndBracket) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate('advancedFilterValidationExtraEndBracket'),\n                startPosition: this.endPosition + 1,\n                endPosition: this.endPosition + 1\n            }\n        }\n        let translateKey: keyof typeof ADVANCED_FILTER_LOCALE_TEXT | undefined;\n        if (this.expressionParsers.length === this.operatorParser.getNumOperators()) {\n            translateKey = 'advancedFilterValidationMissingCondition';\n        } else if (this.missingEndBracket) {\n            translateKey = 'advancedFilterValidationMissingEndBracket';\n        }\n        if (translateKey) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(translateKey),\n                startPosition: this.params.expression.length,\n                endPosition: this.params.expression.length\n            }\n        }\n        return null;\n    }\n\n    public getFunction(params: FilterExpressionFunctionParams): string {\n        const hasMultipleExpressions = this.expressionParsers.length > 1;\n        const expression = this.expressionParsers.map(\n            expressionParser => expressionParser.getFunction(params)).join(` ${this.operatorParser.getFunction()} `\n        );\n        return hasMultipleExpressions ? `(${expression})` : expression;\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams | undefined {\n        if (this.endPosition != null && position > this.endPosition + 1) {\n            return undefined\n        }\n        if (!this.expressionParsers.length) {\n            return this.getColumnAutocompleteListParams();\n        }\n\n        const expressionParserIndex = this.getExpressionParserIndex(position);\n\n        if (expressionParserIndex == null) {\n            if (this.params.expression[position] === '(') {\n                return { enabled: false };\n            }\n            // positioned before the expression, so new expression\n            return this.getColumnAutocompleteListParams();\n        }\n\n        const expressionParser = this.expressionParsers[expressionParserIndex];\n\n        const autocompleteType = expressionParser.getAutocompleteListParams(position);\n\n        if (!autocompleteType) {\n            // beyond the end of the expression\n            if (expressionParserIndex! < this.expressionParsers.length - 1) {\n                // in the middle of two expressions\n                return this.operatorParser.getAutocompleteListParams(position, expressionParserIndex);\n            }\n            if (this.expressionParsers.length === this.operatorParser.getNumOperators()) {\n                const operatorEndPosition = this.operatorParser.getLastOperatorEndPosition();\n                return operatorEndPosition == null || position <= operatorEndPosition + 1\n                    ? this.operatorParser.getAutocompleteListParams(position, this.operatorParser.getNumOperators() - 1)\n                    : this.getColumnAutocompleteListParams();\n            }\n            if (this.params.expression[position - 1] === ')') {\n                return { enabled: false };\n            }\n            return this.operatorParser.getAutocompleteListParams(position);\n        }\n\n        return autocompleteType;\n    }\n\n    public updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate | null {\n        const expression = this.params.expression;\n\n        const expressionParserIndex = this.getExpressionParserIndex(position);\n\n        if (expressionParserIndex == null) {\n            // positioned before the expression\n            const updatedValuePart = type === 'column'\n                ? this.params.advancedFilterExpressionService.getColumnValue(updateEntry)\n                : updateEntry.displayValue ?? updateEntry.key;\n            return updateExpression(expression, this.startPosition, this.startPosition, updatedValuePart, true);\n        }\n\n        const expressionParser = this.expressionParsers[expressionParserIndex];\n\n        const updatedExpression = expressionParser.updateExpression(position, updateEntry, type);\n\n        if (updatedExpression == null) {\n            if (type === 'column') {\n                // beyond the end of the expression, just do simple update\n                return updateExpression(\n                    expression,\n                    position,\n                    expression.length - 1,\n                    this.params.advancedFilterExpressionService.getColumnValue(updateEntry),\n                    true\n                );\n            } else if (this.endPosition != null && position > this.endPosition + 1) {\n                return null;\n            } else {\n                return this.operatorParser.updateExpression(position, updateEntry, expressionParserIndex);\n            }\n        }\n        return updatedExpression;\n    }\n\n    public getModel(): AdvancedFilterModel {\n        if (this.expressionParsers.length > 1) {\n            return {\n                filterType: 'join',\n                type: this.operatorParser.getModel(),\n                conditions: this.expressionParsers.map(parser => parser.getModel())\n            };\n        } else {\n            return this.expressionParsers[0].getModel();\n        }\n    }\n\n    private getColumnAutocompleteListParams(): AutocompleteListParams {\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getColumnAutocompleteEntries(),\n            'column',\n            ''\n        );\n    }\n\n    private getExpressionParserIndex(position: number): number | undefined {\n        let expressionParserIndex: number | undefined;\n\n        for (let i = 0; i < this.expressionParsers.length; i++) {\n            const expressionParserToCheck = this.expressionParsers[i];\n            if (expressionParserToCheck.startPosition > position) {\n                break;\n            }\n            expressionParserIndex = i;\n        }\n\n        return expressionParserIndex;\n    }\n}\n", "import { AdvancedFilterModel, AutocompleteEntry, AutocompleteListParams } from \"@ag-grid-community/core\";\nimport { JoinFilterExpressionParser } from \"./joinFilterExpressionParser\";\nimport { AutocompleteUpdate, FilterExpression, FilterExpressionFunctionParams, FilterExpressionParserParams } from \"./filterExpressionUtils\";\n\nexport class FilterExpressionParser {\n    private joinExpressionParser: JoinFilterExpressionParser;\n    private valid: boolean = false;\n\n    constructor(private params: FilterExpressionParserParams) {}\n\n    public parseExpression(): string {\n        this.joinExpressionParser = new JoinFilterExpressionParser(this.params, 0);\n        const i = this.joinExpressionParser.parseExpression();\n        this.valid = i >= this.params.expression.length - 1 && this.joinExpressionParser.isValid();\n        return this.params.expression;\n    }\n\n    public isValid(): boolean {\n        return this.valid;\n    }\n\n    public getValidationMessage(): string | null {\n        const error = this.joinExpressionParser.getValidationError();\n        if (!error) { return null; }\n        const { message, startPosition, endPosition } = error;\n        return startPosition < this.params.expression.length\n            ? this.params.advancedFilterExpressionService.translate('advancedFilterValidationMessage', [\n                message, this.params.expression.slice(startPosition, endPosition + 1).trim()\n            ])\n            : this.params.advancedFilterExpressionService.translate('advancedFilterValidationMessageAtEnd', [message]);\n    }\n\n    public getFunction(): FilterExpression {\n        const params: FilterExpressionFunctionParams = {\n            operands: [],\n            operators: [],\n            evaluatorParams: []\n        };\n        const functionBody = `return ${this.joinExpressionParser.getFunction(params)};`;\n        return {\n            functionBody,\n            params\n        };\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.joinExpressionParser.getAutocompleteListParams(position) ?? { enabled: false };\n    }\n\n    public updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate {\n        return this.joinExpressionParser.updateExpression(position, updateEntry, type)!;\n    }\n\n    public getModel(): AdvancedFilterModel | null {\n        return this.isValid() ? this.joinExpressionParser.getModel() : null;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { GridLicenseManager as LicenseManager } from \"./license/gridLicenseManager\";\nimport { WatermarkComp } from \"./license/watermark\";\n\nexport { WatermarkComp } from \"./license/watermark\";\nimport { VERSION } from \"./version\";\n\nexport const EnterpriseCoreModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.EnterpriseCoreModule,\n    beans: [LicenseManager],\n    agStackComponents: [\n        { componentName: 'AgWatermark', componentClass: WatermarkComp }\n    ]\n};\n", "import { _, Autowired, Bean, BeanStub, PreConstruct } from '@ag-grid-community/core';\nimport {ILicenseManager, LicenseManager} from \"./shared/licenseManager\";\n\n@Bean('licenseManager')\nexport class GridLicenseManager extends BeanStub {\n    private licenseManager: LicenseManager;\n\n    @PreConstruct\n    public validateLicense(): void {\n        this.licenseManager = new LicenseManager(this.gridOptionsService.getDocument())\n        this.licenseManager.validateLicense();\n    }\n\n    static getLicenseDetails(licenseKey: string) {\n        return new LicenseManager(null as any).getLicenseDetails(licenseKey);\n    }\n\n    public isDisplayWatermark(): boolean {\n        return this.licenseManager.isDisplayWatermark();\n    }\n\n    public getWatermarkMessage() : string {\n        return this.licenseManager.getWatermarkMessage();\n    }\n\n    static setLicenseKey(licenseKey: string): void {\n        LicenseManager.setLicenseKey(licenseKey);\n    }\n\n    static setChartsLicenseManager(chartsLicenseManager: ILicenseManager) {\n        LicenseManager.setChartsLicenseManager(chartsLicenseManager);\n    }\n}\n", "\nexport class MD5 {\n    private ieCompatibility = false;\n\n    public init(): void {\n        this.ieCompatibility = (this.md5('hello') != '5d41402abc4b2a76b9719d911017c592');\n    }\n\n    private md5cycle(x: any, k: any) {\n        let a: any = x[0], b: any = x[1], c: any = x[2], d: any = x[3];\n\n        a = this.ff(a, b, c, d, k[0], 7, -680876936);\n        d = this.ff(d, a, b, c, k[1], 12, -389564586);\n        c = this.ff(c, d, a, b, k[2], 17, 606105819);\n        b = this.ff(b, c, d, a, k[3], 22, -1044525330);\n        a = this.ff(a, b, c, d, k[4], 7, -176418897);\n        d = this.ff(d, a, b, c, k[5], 12, 1200080426);\n        c = this.ff(c, d, a, b, k[6], 17, -1473231341);\n        b = this.ff(b, c, d, a, k[7], 22, -45705983);\n        a = this.ff(a, b, c, d, k[8], 7, 1770035416);\n        d = this.ff(d, a, b, c, k[9], 12, -1958414417);\n        c = this.ff(c, d, a, b, k[10], 17, -42063);\n        b = this.ff(b, c, d, a, k[11], 22, -1990404162);\n        a = this.ff(a, b, c, d, k[12], 7, 1804603682);\n        d = this.ff(d, a, b, c, k[13], 12, -40341101);\n        c = this.ff(c, d, a, b, k[14], 17, -1502002290);\n        b = this.ff(b, c, d, a, k[15], 22, 1236535329);\n\n        a = this.gg(a, b, c, d, k[1], 5, -165796510);\n        d = this.gg(d, a, b, c, k[6], 9, -1069501632);\n        c = this.gg(c, d, a, b, k[11], 14, 643717713);\n        b = this.gg(b, c, d, a, k[0], 20, -373897302);\n        a = this.gg(a, b, c, d, k[5], 5, -701558691);\n        d = this.gg(d, a, b, c, k[10], 9, 38016083);\n        c = this.gg(c, d, a, b, k[15], 14, -660478335);\n        b = this.gg(b, c, d, a, k[4], 20, -405537848);\n        a = this.gg(a, b, c, d, k[9], 5, 568446438);\n        d = this.gg(d, a, b, c, k[14], 9, -1019803690);\n        c = this.gg(c, d, a, b, k[3], 14, -187363961);\n        b = this.gg(b, c, d, a, k[8], 20, 1163531501);\n        a = this.gg(a, b, c, d, k[13], 5, -1444681467);\n        d = this.gg(d, a, b, c, k[2], 9, -51403784);\n        c = this.gg(c, d, a, b, k[7], 14, 1735328473);\n        b = this.gg(b, c, d, a, k[12], 20, -1926607734);\n\n        a = this.hh(a, b, c, d, k[5], 4, -378558);\n        d = this.hh(d, a, b, c, k[8], 11, -2022574463);\n        c = this.hh(c, d, a, b, k[11], 16, 1839030562);\n        b = this.hh(b, c, d, a, k[14], 23, -35309556);\n        a = this.hh(a, b, c, d, k[1], 4, -1530992060);\n        d = this.hh(d, a, b, c, k[4], 11, 1272893353);\n        c = this.hh(c, d, a, b, k[7], 16, -155497632);\n        b = this.hh(b, c, d, a, k[10], 23, -1094730640);\n        a = this.hh(a, b, c, d, k[13], 4, 681279174);\n        d = this.hh(d, a, b, c, k[0], 11, -358537222);\n        c = this.hh(c, d, a, b, k[3], 16, -722521979);\n        b = this.hh(b, c, d, a, k[6], 23, 76029189);\n        a = this.hh(a, b, c, d, k[9], 4, -640364487);\n        d = this.hh(d, a, b, c, k[12], 11, -421815835);\n        c = this.hh(c, d, a, b, k[15], 16, 530742520);\n        b = this.hh(b, c, d, a, k[2], 23, -995338651);\n\n        a = this.ii(a, b, c, d, k[0], 6, -198630844);\n        d = this.ii(d, a, b, c, k[7], 10, 1126891415);\n        c = this.ii(c, d, a, b, k[14], 15, -1416354905);\n        b = this.ii(b, c, d, a, k[5], 21, -57434055);\n        a = this.ii(a, b, c, d, k[12], 6, 1700485571);\n        d = this.ii(d, a, b, c, k[3], 10, -1894986606);\n        c = this.ii(c, d, a, b, k[10], 15, -1051523);\n        b = this.ii(b, c, d, a, k[1], 21, -2054922799);\n        a = this.ii(a, b, c, d, k[8], 6, 1873313359);\n        d = this.ii(d, a, b, c, k[15], 10, -30611744);\n        c = this.ii(c, d, a, b, k[6], 15, -1560198380);\n        b = this.ii(b, c, d, a, k[13], 21, 1309151649);\n        a = this.ii(a, b, c, d, k[4], 6, -145523070);\n        d = this.ii(d, a, b, c, k[11], 10, -1120210379);\n        c = this.ii(c, d, a, b, k[2], 15, 718787259);\n        b = this.ii(b, c, d, a, k[9], 21, -343485551);\n\n        x[0] = this.add32(a, x[0]);\n        x[1] = this.add32(b, x[1]);\n        x[2] = this.add32(c, x[2]);\n        x[3] = this.add32(d, x[3]);\n    }\n\n    private cmn(q: any, a: any, b: any, x: any, s: any, t: any) {\n        a = this.add32(this.add32(a, q), this.add32(x, t));\n        return this.add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    private ff(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    }\n\n    private gg(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    }\n\n    private hh(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n\n    private ii(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn(c ^ (b | (~d)), a, b, x, s, t);\n    }\n\n    private md51(s: any) {\n        const n: any = s.length;\n        const state: any = [1732584193, -271733879, -1732584194, 271733878];\n        let i: any;\n        for (i = 64; i <= s.length; i += 64) {\n            this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        const tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < s.length; i++) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            this.md5cycle(state, tail);\n            for (i = 0; i < 16; i++) { tail[i] = 0; }\n        }\n        tail[14] = n * 8;\n        this.md5cycle(state, tail);\n        return state;\n    }\n\n    /* there needs to be support for Unicode here, * unless we pretend that we can redefine the MD-5\n     * algorithm for multi-byte characters (perhaps by adding every four 16-bit characters and\n     * shortening the sum to 32 bits). Otherwise I suthis.ggest performing MD-5 as if every character\n     * was two bytes--e.g., 0040 0025 = @%--but then how will an ordinary MD-5 sum be matched?\n     * There is no way to standardize text to something like UTF-8 before transformation; speed cost is\n     * utterly prohibitive. The JavaScript standard itself needs to look at this: it should start\n     * providing access to strings as preformed UTF-8 8-bit unsigned value arrays.\n     */\n    private md5blk(s: any) { /* I figured global was faster.   */\n        const md5blks: any = [];\n\n        /* Andy King said do it this way. */\n        for (let i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i)\n                + (s.charCodeAt(i + 1) << 8)\n                + (s.charCodeAt(i + 2) << 16)\n                + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    private rhex(n: any) {\n        const hex_chr: any = '0123456789abcdef'.split('');\n        let s: string = '', j: any = 0;\n        for (; j < 4; j++) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F]\n                + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    private hex(x: any) {\n        for (let i: any = 0; i < x.length; i++) {\n            x[i] = this.rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    public md5(s: any) {\n        return this.hex(this.md51(s));\n    }\n\n    private add32(a: any, b: any) {\n        return this.ieCompatibility ? this.add32Compat(a, b) : this.add32Std(a, b);\n    }\n\n    /* this function is much faster, so if possible we use it. Some IEs are the only ones I know of that\n     need the idiotic second function, generated by an if clause.  */\n    private add32Std(a: any, b: any) {\n        return (a + b) & 0xFFFFFFFF;\n    }\n\n    private add32Compat(x: any, y: any) {\n        const lsw = (x & 0xFFFF) + (y & 0xFFFF),\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    }\n}\n", "import {MD5} from './md5';\n\n// move to general utils\nfunction missingOrEmpty<T>(value?: T[] | string | null): boolean {\n    return value == null || value.length === 0;\n}\n\nconst LICENSE_TYPES = {\n    '01': 'GRID',\n    '02': 'CHARTS',\n    '0102': 'BOTH'\n}\n\nexport interface ILicenseManager {\n    setLicenseKey: (key?: string, gridContext?: boolean) => void;\n}\n\nexport class LicenseManager {\n    private static RELEASE_INFORMATION: string = 'MTcxMDY5MjgwODc5NQ==';\n    private static licenseKey: string;\n    private static chartsLicenseManager?: ILicenseManager;\n    private watermarkMessage: string | undefined = undefined;\n\n    private md5: MD5;\n    private document: Document;\n    \n    private totalMessageLength = 124;\n\n    constructor(document: Document) {\n        this.document = document;\n\n        this.md5 = new MD5();\n        this.md5.init();\n    }\n\n    public validateLicense(): void {\n        const licenseDetails = this.getLicenseDetails(LicenseManager.licenseKey);\n        const currentLicenseName = `AG Grid ${licenseDetails.currentLicenseType === 'BOTH' ? 'and AG Charts ' : ''}Enterprise`;\n        const suppliedLicenseName = licenseDetails.suppliedLicenseType === undefined ? '' : `AG ${licenseDetails.suppliedLicenseType === 'BOTH' ? 'Grid and AG Charts' : licenseDetails.suppliedLicenseType === 'GRID' ? 'Grid' : 'Charts'} Enterprise`;\n\n        if (licenseDetails.missing) {\n            if (!this.isWebsiteUrl() || this.isForceWatermark()) {\n                this.outputMissingLicenseKey(currentLicenseName);\n            }\n        } else if (licenseDetails.expired) {\n            const gridReleaseDate = LicenseManager.getGridReleaseDate();\n            const formattedReleaseDate = LicenseManager.formatDate(gridReleaseDate);\n            this.outputExpiredKey(licenseDetails.expiry, formattedReleaseDate, currentLicenseName, suppliedLicenseName);\n        } else if (!licenseDetails.valid) {\n            this.outputInvalidLicenseKey(!!licenseDetails.incorrectLicenseType, currentLicenseName, suppliedLicenseName);\n        } else if (licenseDetails.isTrial && licenseDetails.trialExpired) {\n            this.outputExpiredTrialKey(licenseDetails.expiry, currentLicenseName, suppliedLicenseName);\n        }\n    }\n\n    private static extractExpiry(license: string) {\n        const restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);\n        return new Date(parseInt(LicenseManager.decode(restrictionHashed), 10));\n    }\n\n    private static extractLicenseComponents(licenseKey: string) {\n        // when users copy the license key from a PDF extra zero width characters are sometimes copied too\n        // carriage returns and line feeds are problematic too\n        // all of which causes license key validation to fail - strip these out\n        let cleanedLicenseKey = licenseKey.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n        cleanedLicenseKey = cleanedLicenseKey.replace(/\\r?\\n|\\r/g, '');\n\n        // the hash that follows the key is 32 chars long\n        if (licenseKey.length <= 32) {\n            return {md5: null, license: licenseKey, version: null, isTrial: null};\n        }\n\n        const hashStart = cleanedLicenseKey.length - 32;\n        const md5 = cleanedLicenseKey.substring(hashStart);\n        const license = cleanedLicenseKey.substring(0, hashStart);\n        const [version, isTrial, type] = LicenseManager.extractBracketedInformation(cleanedLicenseKey);\n        return {md5, license, version, isTrial, type};\n    }\n\n    public getLicenseDetails(licenseKey: string) {\n        const currentLicenseType = LicenseManager.chartsLicenseManager ? 'BOTH' : 'GRID';\n        if (missingOrEmpty(licenseKey)) {\n            return {\n                licenseKey,\n                valid: false,\n                missing: true,\n                currentLicenseType\n            }\n        }\n\n        const gridReleaseDate = LicenseManager.getGridReleaseDate();\n        const {md5, license, version, isTrial, type} = LicenseManager.extractLicenseComponents(licenseKey);\n        let valid = (md5 === this.md5.md5(license)) && licenseKey.indexOf(\"For_Trialing_ag-Grid_Only\") === -1;\n        let trialExpired: undefined | boolean = undefined;\n        let expired: undefined | boolean = undefined;\n        let expiry: Date | null = null;\n        let incorrectLicenseType = false;\n        let suppliedLicenseType: undefined | string = undefined;\n\n        function handleTrial() {\n            const now = new Date();\n            trialExpired = (expiry! < now);\n            expired = undefined;\n        }\n\n        if (valid) {\n            expiry = LicenseManager.extractExpiry(license);\n            valid = !isNaN(expiry.getTime());\n\n            if (valid) {\n                expired = (gridReleaseDate > expiry);\n\n                switch (version) {\n                    case \"legacy\":\n                    case \"2\": {\n                        if (isTrial) {\n                            handleTrial();\n                        }\n                        break;\n                    }\n                    case \"3\": {\n                        if (missingOrEmpty(type)) {\n                            valid = false;\n                        } else {\n                            suppliedLicenseType = type;\n                            if((type !== LICENSE_TYPES['01'] && type !== LICENSE_TYPES['0102']) ||\n                                (currentLicenseType === 'BOTH' && suppliedLicenseType !== 'BOTH')) {\n                                valid = false;\n                                incorrectLicenseType = true\n                            } else if (isTrial) {\n                                handleTrial();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!valid) {\n            return {\n                licenseKey,\n                valid,\n                incorrectLicenseType,\n                currentLicenseType,\n                suppliedLicenseType\n            }\n        }\n\n        return {\n            licenseKey,\n            valid,\n            expiry: LicenseManager.formatDate(expiry),\n            expired,\n            version,\n            isTrial,\n            trialExpired,\n            incorrectLicenseType,\n            currentLicenseType,\n            suppliedLicenseType\n        };\n    }\n\n    public isDisplayWatermark(): boolean {\n        return this.isForceWatermark() || (!this.isLocalhost() && !this.isWebsiteUrl() && !missingOrEmpty(this.watermarkMessage));\n    }\n\n    public getWatermarkMessage(): string {\n        return this.watermarkMessage || '';\n    }\n\n    private getHostname(): string {\n        const win = (this.document.defaultView || window);\n        const loc = win.location;\n        const {hostname = ''} = loc;\n\n        return hostname;\n    }\n\n    private isForceWatermark(): boolean {\n        const win = (this.document.defaultView || window);\n        const loc = win.location;\n        const {pathname} = loc;\n\n        return pathname ? pathname.indexOf('forceWatermark') !== -1 : false;\n    }\n\n    private isWebsiteUrl(): boolean {\n        const hostname = this.getHostname();\n        return hostname.match(/^((?:[\\w-]+\\.)?ag-grid\\.com)$/) !== null;\n    }\n\n    private isLocalhost(): boolean {\n        const hostname = this.getHostname();\n        return hostname.match(/^(?:127\\.0\\.0\\.1|localhost)$/) !== null;\n    }\n\n    private static formatDate(date: any): string {\n        const monthNames: string[] = [\n            'January', 'February', 'March',\n            'April', 'May', 'June', 'July',\n            'August', 'September', 'October',\n            'November', 'December'\n        ];\n\n        const day = date.getDate();\n        const monthIndex = date.getMonth();\n        const year = date.getFullYear();\n\n        return day + ' ' + monthNames[monthIndex] + ' ' + year;\n    }\n\n    private static getGridReleaseDate() {\n        return new Date(parseInt(LicenseManager.decode(LicenseManager.RELEASE_INFORMATION), 10));\n    }\n\n    private static decode(input: string): string {\n        const keystr: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        let t = '';\n        let n: any, r: any, i: any;\n        let s: any, o: any, u: any, a: any;\n        let f: number = 0;\n        const e: string = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        while (f < e.length) {\n            s = keystr.indexOf(e.charAt(f++));\n            o = keystr.indexOf(e.charAt(f++));\n            u = keystr.indexOf(e.charAt(f++));\n            a = keystr.indexOf(e.charAt(f++));\n            n = s << 2 | o >> 4;\n            r = (o & 15) << 4 | u >> 2;\n            i = (u & 3) << 6 | a;\n            t = t + String.fromCharCode(n);\n            if (u != 64) {\n                t = t + String.fromCharCode(r);\n            }\n            if (a != 64) {\n                t = t + String.fromCharCode(i);\n            }\n        }\n        t = LicenseManager.utf8_decode(t);\n        return t;\n    }\n\n    private static utf8_decode(input: string): string {\n        input = input.replace(/rn/g, 'n');\n        let t = '';\n        for (let n = 0; n < input.length; n++) {\n            const r = input.charCodeAt(n);\n            if (r < 128) {\n                t += String.fromCharCode(r);\n            } else if (r > 127 && r < 2048) {\n                t += String.fromCharCode(r >> 6 | 192);\n                t += String.fromCharCode(r & 63 | 128);\n            } else {\n                t += String.fromCharCode(r >> 12 | 224);\n                t += String.fromCharCode(r >> 6 & 63 | 128);\n                t += String.fromCharCode(r & 63 | 128);\n            }\n        }\n        return t;\n    }\n\n    static setChartsLicenseManager(dependantLicenseManager: ILicenseManager): void {\n        this.chartsLicenseManager = dependantLicenseManager;\n    }\n\n    static setLicenseKey(licenseKey: string): void {\n        this.licenseKey = licenseKey;\n\n        if(this.chartsLicenseManager) {\n            this.chartsLicenseManager.setLicenseKey(licenseKey, true);\n        }\n    }\n\n    private static extractBracketedInformation(licenseKey: string): [string | null, boolean | null, string?] {\n        // legacy no trial key\n        if (!licenseKey.includes(\"[\")) {\n            return [\"legacy\", false, undefined];\n        }\n\n        const matches = licenseKey.match(/\\[(.*?)\\]/g)!.map(match => match.replace(\"[\", \"\").replace(\"]\", \"\"));\n        if (!matches || matches.length === 0) {\n            return [\"legacy\", false, undefined];\n        }\n\n        const isTrial = matches.filter(match => match === 'TRIAL').length === 1;\n        const rawVersion = matches.filter(match => match.indexOf(\"v\") === 0)[0];\n        const version = rawVersion ? rawVersion.replace('v', '') : 'legacy';\n        const type = (LICENSE_TYPES as any)[matches.filter(match => (LICENSE_TYPES as any)[match])[0]];\n\n        return [version, isTrial, type];\n    }\n\n    private centerPadAndOutput(input: string) {\n        const paddingRequired = this.totalMessageLength - input.length;\n        console.error(input.padStart(paddingRequired / 2 + input.length, '*').padEnd(this.totalMessageLength, '*'));\n    }\n\n    private padAndOutput(input: string, padding  = '*', terminateWithPadding = '') {\n        console.error(input.padEnd(this.totalMessageLength - terminateWithPadding.length, padding) + terminateWithPadding);\n    }\n\n    private outputInvalidLicenseKey(incorrectLicenseType: boolean, currentLicenseName: string, suppliedLicenseName: string) {\n        if (incorrectLicenseType) {\n            // TC4, TC5,TC10\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput(` ${currentLicenseName} License `);\n            this.centerPadAndOutput(' Incompatible License Key ');\n            this.padAndOutput(`* Your license key is for ${suppliedLicenseName} only and does not cover you for ${currentLicenseName}.`, ' ', '*');\n            this.padAndOutput('* Please contact info@ag-grid.com to obtain a combined license key.', ' ', '*');\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput('');\n        } else {\n            // TC3, TC9\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput(` ${currentLicenseName} License `);\n            this.centerPadAndOutput(' Invalid License Key ');\n            this.padAndOutput(`* Your license key is not valid - please contact info@ag-grid.com to obtain a valid license.`, ' ', '*');\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput('');\n        }\n\n        this.watermarkMessage = \"Invalid License\";\n    }\n\n    private outputExpiredTrialKey(formattedExpiryDate: string, currentLicenseName: string, suppliedLicenseName: string) {\n        // TC14\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput(` ${currentLicenseName} License `);\n        this.centerPadAndOutput(' Trial Period Expired. ');\n        this.padAndOutput(`* Your trial only license for ${suppliedLicenseName} expired on ${formattedExpiryDate}.`, ' ', '*');\n        this.padAndOutput('* Please email info@ag-grid.com to purchase a license.', ' ', '*');\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput('');\n\n        this.watermarkMessage = \"Trial Period Expired\";\n    }\n\n    private outputMissingLicenseKey(currentLicenseName: string) {\n        // TC6, TC12\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput(` ${currentLicenseName} License `);\n        this.centerPadAndOutput(' License Key Not Found ');\n        this.padAndOutput(`* All ${currentLicenseName} features are unlocked for trial.`, ' ', '*');\n        this.padAndOutput('* If you want to hide the watermark please email info@ag-grid.com for a trial license key.', ' ', '*');\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput('');\n\n        this.watermarkMessage = \"For Trial Use Only\";\n    }\n\n    private outputExpiredKey(formattedExpiryDate: string, formattedReleaseDate: string, currentLicenseName: string, suppliedLicenseName: string) {\n        // TC2\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput(` ${currentLicenseName} License `);\n        this.centerPadAndOutput(' Incompatible Software Version ');\n        this.padAndOutput(`* Your license key works with versions of ${suppliedLicenseName} released before ${formattedExpiryDate}.`, ' ', '*');\n        this.padAndOutput(`* The version you are trying to use was released on ${formattedReleaseDate}.`, ' ', '*');\n        this.padAndOutput('* Please contact info@ag-grid.com to renew your license key.', ' ', '*');\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput('');\n\n        this.watermarkMessage = \"License Expired\";\n    }\n}\n", "import { Autowired, Component, PostConstruct, RefSelector } from '@ag-grid-community/core';\nimport { GridLicenseManager as LicenseManager } from './gridLicenseManager';\n\nexport class WatermarkComp extends Component {\n\n    @Autowired('licenseManager') licenseManager: LicenseManager;\n    @RefSelector('eLicenseTextRef') private eLicenseTextRef: HTMLElement;\n\n    constructor() {\n        super(/* html*/\n            `<div class=\"ag-watermark\">\n                <div ref=\"eLicenseTextRef\" class=\"ag-watermark-text\"></div>\n            </div>`\n        );\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const show = this.shouldDisplayWatermark();\n        this.setDisplayed(show);\n\n        if (show) {\n            this.eLicenseTextRef.innerText = this.licenseManager.getWatermarkMessage();\n\n            window.setTimeout(() => this.addCssClass('ag-opacity-zero'), 0);\n            window.setTimeout(() => this.setDisplayed(false), 5000);\n        }\n    }\n\n    private shouldDisplayWatermark(): boolean {\n        return this.licenseManager.isDisplayWatermark();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { RangeSelectionModule } from \"@ag-grid-enterprise/range-selection\";\nimport { ChartService } from \"./charts/chartService\";\nimport { ChartTranslationService } from \"./charts/chartComp/services/chartTranslationService\";\nimport { ChartCrossFilterService } from \"./charts/chartComp/services/chartCrossFilterService\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { VERSION as GRID_VERSION } from \"./version\";\nimport { validGridChartsVersion } from \"./utils/validGridChartsVersion\";\nimport { ChartMenuListFactory } from \"./charts/chartComp/menu/chartMenuList\";\nimport { ChartMenuService } from \"./charts/chartComp/services/chartMenuService\";\nimport { AgPillSelect } from \"./widgets/agPillSelect\";\nimport { AdvancedSettingsMenuFactory } from \"./charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory\";\n\nexport const GridChartsModule: Module = {\n    version: GRID_VERSION,\n    validate: () => {\n        return validGridChartsVersion({\n            gridVersion: GRID_VERSION,\n            chartsVersion: ChartService.CHARTS_VERSION\n        });\n    },\n    moduleName: ModuleNames.GridChartsModule,\n    beans: [\n        ChartService, ChartTranslationService, ChartCrossFilterService, ChartMenuListFactory, ChartMenuService, AdvancedSettingsMenuFactory\n    ],\n    agStackComponents: [\n        { componentName: 'AgColorPicker', componentClass: AgColorPicker },\n        { componentName: 'AgAngleSelect', componentClass: AgAngleSelect },\n        { componentName: 'AgPillSelect', componentClass: AgPillSelect },\n    ],\n    dependantModules: [\n        RangeSelectionModule,\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    CellRange,\n    CellRangeParams,\n    ChartDownloadParams,\n    ChartModel,\n    ChartRef,\n    ChartType,\n    ColumnModel,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    GetChartImageDataUrlParams,\n    IAggFunc,\n    IChartService,\n    IRangeService,\n    ModuleRegistry,\n    OpenChartToolPanelParams,\n    Optional,\n    PreDestroy,\n    SeriesChartType,\n    UpdateChartParams\n} from \"@ag-grid-community/core\";\nimport { AgChartThemeOverrides, AgChartThemePalette, VERSION as CHARTS_VERSION, _ModuleSupport} from \"ag-charts-community\";\nimport { GridChartComp, GridChartParams } from \"./chartComp/gridChartComp\";\nimport { getCanonicalChartType, isEnterpriseChartType } from './chartComp/utils/seriesTypeMapper';\nimport { upgradeChartModel } from \"./chartModelMigration\";\nimport { VERSION as GRID_VERSION } from \"../version\";\n\nexport interface CrossFilteringContext {\n    lastSelectedChartId: string;\n}\n\n@Bean('chartService')\nexport class ChartService extends BeanStub implements IChartService {\n\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public static CHARTS_VERSION = CHARTS_VERSION;\n\n    // we destroy all charts bound to this grid when grid is destroyed. activeCharts contains all charts, including\n    // those in developer provided containers.\n    private activeCharts = new Set<ChartRef>();\n    private activeChartComps = new Set<GridChartComp>();\n\n    // this shared (singleton) context is used by cross filtering in line and area charts\n    private crossFilteringContext: CrossFilteringContext = {\n        lastSelectedChartId: '',\n    };\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    public updateChart(params: UpdateChartParams): void {\n        const chartType = params.chartType;\n        if (chartType && isEnterpriseChartType(chartType) && !this.isEnterprise()) {\n            ModuleRegistry.__warnEnterpriseChartDisabled(chartType);\n            return;\n        }\n\n        if (this.activeChartComps.size === 0) {\n            console.warn(`AG Grid - No active charts to update.`);\n            return;\n        }\n\n        const chartComp = [...this.activeChartComps].find(chartComp => chartComp.getChartId() === params.chartId);\n        if (!chartComp) {\n            console.warn(`AG Grid - Unable to update chart. No active chart found with ID: ${params.chartId}.`);\n            return;\n        }\n\n        chartComp.update(params);\n    }\n\n    public getChartModels(): ChartModel[] {\n        const models: ChartModel[] = [];\n\n        const versionedModel = (c: ChartModel) => {\n            return {...c, version: GRID_VERSION };\n        };\n        this.activeChartComps.forEach(c => models.push(versionedModel(c.getChartModel())));\n\n        return models;\n    }\n\n    public getChartRef(chartId: string): ChartRef | undefined {\n        let chartRef;\n        this.activeCharts.forEach(cr => {\n            if (cr.chartId === chartId) {\n                chartRef = cr;\n            }\n        });\n        return chartRef;\n    }\n\n    public getChartComp(chartId: string): GridChartComp | undefined {\n        let chartComp;\n        this.activeChartComps.forEach(comp => {\n            if (comp.getChartId() === chartId) {\n                chartComp = comp;\n            }\n        });\n        return chartComp;\n    }\n\n    public getChartImageDataURL(params: GetChartImageDataUrlParams): string | undefined {\n        let url: any;\n        this.activeChartComps.forEach(c => {\n            if (c.getChartId() === params.chartId) {\n                url = c.getChartImageDataURL(params.fileFormat);\n            }\n        });\n        return url;\n    }\n\n    public downloadChart(params: ChartDownloadParams) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === params.chartId);\n        chartComp?.downloadChart(params.dimensions, params.fileName, params.fileFormat);\n    }\n\n    public openChartToolPanel(params: OpenChartToolPanelParams) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === params.chartId);\n        chartComp?.openChartToolPanel(params.panel);\n    }\n\n    public closeChartToolPanel(chartId: string) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === chartId);\n        chartComp?.closeChartToolPanel();\n    }\n\n    public createChartFromCurrentRange(chartType: ChartType = 'groupedColumn'): ChartRef | undefined {\n        const selectedRange: CellRange = this.getSelectedRange();\n        return this.createChart(selectedRange, chartType);\n    }\n\n    public restoreChart(model: ChartModel, chartContainer?: HTMLElement): ChartRef | undefined {\n        if (!model) {\n            console.warn(\"AG Grid - unable to restore chart as no chart model is provided\");\n            return;\n        }\n\n        if (model.version !== GRID_VERSION) {\n            model = upgradeChartModel(model);\n        }\n\n        const params = {\n            cellRange: model.cellRange,\n            chartType: model.chartType,\n            chartThemeName: model.chartThemeName,\n            chartContainer: chartContainer,\n            suppressChartRanges: model.suppressChartRanges,\n            switchCategorySeries: model.switchCategorySeries,\n            aggFunc: model.aggFunc,\n            unlinkChart: model.unlinkChart,\n            seriesChartTypes: model.seriesChartTypes\n        };\n\n        const getCellRange = (cellRangeParams: CellRangeParams) => {\n            return this.rangeService\n                ? this.rangeService.createCellRangeFromCellRangeParams(cellRangeParams)\n                : undefined;\n        }\n\n        if (model.modelType === 'pivot') {\n            // if required enter pivot mode\n            this.gridOptionsService.updateGridOptions({ options: { pivotMode: true}, source: 'pivotChart' as any });\n\n            // pivot chart range contains all visible column without a row range to include all rows\n            const columns = this.columnModel.getAllDisplayedColumns().map(col => col.getColId());\n            const chartAllRangeParams: CellRangeParams = { \n                rowStartIndex: null,\n                rowStartPinned: undefined,\n                rowEndIndex: null,\n                rowEndPinned: undefined,\n                columns \n            };\n\n            const cellRange = getCellRange(chartAllRangeParams);\n            if (!cellRange) {\n                console.warn(\"AG Grid - unable to create chart as there are no columns in the grid.\");\n                return;\n            }\n\n            return this.createChart(\n                cellRange,\n                params.chartType,\n                params.chartThemeName,\n                true,\n                true,\n                params.chartContainer,\n                false,\n                undefined,\n                undefined,\n                params.unlinkChart,\n                false,\n                model.chartOptions);\n        }\n\n        const cellRange = getCellRange(params.cellRange);\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n\n        return this.createChart(\n            cellRange!,\n            params.chartType,\n            params.chartThemeName,\n            false,\n            params.suppressChartRanges,\n            params.chartContainer,\n            params.switchCategorySeries,\n            params.aggFunc,\n            undefined,\n            params.unlinkChart,\n            false,\n            model.chartOptions,\n            model.chartPalette,\n            params.seriesChartTypes);\n    }\n\n    public createRangeChart(params: CreateRangeChartParams): ChartRef | undefined {\n        const cellRange = this.rangeService?.createCellRangeFromCellRangeParams(params.cellRange as CellRangeParams);\n\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n\n        return this.createChart(\n            cellRange,\n            params.chartType,\n            params.chartThemeName,\n            false,\n            params.suppressChartRanges,\n            params.chartContainer,\n            params.switchCategorySeries,\n            params.aggFunc,\n            params.chartThemeOverrides,\n            params.unlinkChart,\n            undefined,\n            undefined,\n            undefined,\n            params.seriesChartTypes);\n    }\n\n    public createPivotChart(params: CreatePivotChartParams): ChartRef | undefined {\n        // if required enter pivot mode\n        this.gridOptionsService.updateGridOptions({ options: { pivotMode: true}, source: 'pivotChart' as any });\n\n        // pivot chart range contains all visible column without a row range to include all rows\n        const chartAllRangeParams: CellRangeParams = {\n            rowStartIndex: null,\n            rowStartPinned: undefined,\n            rowEndIndex: null,\n            rowEndPinned: undefined,\n            columns: this.columnModel.getAllDisplayedColumns().map(col => col.getColId())\n        };\n\n        const cellRange = this.rangeService\n            ? this.rangeService.createCellRangeFromCellRangeParams(chartAllRangeParams)\n            : undefined;\n\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as there are no columns in the grid.\");\n            return;\n        }\n\n        return this.createChart(\n            cellRange,\n            params.chartType,\n            params.chartThemeName,\n            true,\n            true,\n            params.chartContainer,\n            false,\n            undefined,\n            params.chartThemeOverrides,\n            params.unlinkChart);\n    }\n\n    public createCrossFilterChart(params: CreateCrossFilterChartParams): ChartRef | undefined {\n        const cellRange = this.rangeService?.createCellRangeFromCellRangeParams(params.cellRange as CellRangeParams);\n\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n\n        const crossFiltering = true;\n\n        const suppressChartRangesSupplied = typeof params.suppressChartRanges !== 'undefined' && params.suppressChartRanges !== null;\n        const suppressChartRanges = suppressChartRangesSupplied ? params.suppressChartRanges : true;\n\n        return this.createChart(\n            cellRange,\n            params.chartType,\n            params.chartThemeName,\n            false,\n            suppressChartRanges,\n            params.chartContainer,\n            false,\n            params.aggFunc,\n            params.chartThemeOverrides,\n            params.unlinkChart,\n            crossFiltering);\n    }\n\n    private createChart(\n        cellRange: CellRange,\n        chartType: ChartType,\n        chartThemeName?: string,\n        pivotChart = false,\n        suppressChartRanges = false,\n        container?: HTMLElement,\n        switchCategorySeries = false,\n        aggFunc?: string | IAggFunc,\n        chartThemeOverrides?: AgChartThemeOverrides,\n        unlinkChart = false,\n        crossFiltering  = false,\n        chartOptionsToRestore?: AgChartThemeOverrides,\n        chartPaletteToRestore?: AgChartThemePalette,\n        seriesChartTypes?: SeriesChartType[]): ChartRef | undefined {\n        \n        if (isEnterpriseChartType(chartType) && !this.isEnterprise()) {\n            ModuleRegistry.__warnEnterpriseChartDisabled(chartType);\n            return undefined;\n        }\n\n        const createChartContainerFunc = this.gridOptionsService.getCallback('createChartContainer');\n\n        const params: GridChartParams = {\n            chartId: this.generateId(),\n            pivotChart,\n            cellRange,\n            chartType: getCanonicalChartType(chartType),\n            chartThemeName,\n            insideDialog: !(container || createChartContainerFunc),\n            suppressChartRanges,\n            switchCategorySeries,\n            aggFunc,\n            chartThemeOverrides,\n            unlinkChart,\n            crossFiltering,\n            crossFilteringContext: this.crossFilteringContext,\n            chartOptionsToRestore,\n            chartPaletteToRestore,\n            seriesChartTypes,\n            crossFilteringResetCallback: () => this.activeChartComps.forEach(c => c.crossFilteringReset()),\n        };\n\n        const chartComp = new GridChartComp(params);\n        this.context.createBean(chartComp);\n\n        const chartRef = this.createChartRef(chartComp);\n\n        if (container) {\n            // if container exists, means developer initiated chart create via API, so place in provided container\n            container.appendChild(chartComp.getGui());\n\n            // if the chart container was placed outside an element that\n            // has the grid's theme, we manually add the current theme to\n            // make sure all styles for the chartMenu are rendered correctly\n            const theme = this.environment.getTheme();\n\n            if (theme.el && !theme.el.contains(container)) {\n                container.classList.add(theme.theme!);\n            }\n        } else if (createChartContainerFunc) {\n            // otherwise, user created chart via grid UI, check if developer provides containers (e.g. if the application\n            // is using its own dialogs rather than the grid provided dialogs)\n            createChartContainerFunc(chartRef);\n        } else {\n            // add listener to remove from active charts list when charts are destroyed, e.g. closing chart dialog\n            chartComp.addEventListener(\n                GridChartComp.EVENT_DESTROYED,\n                () => {\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                });\n        }\n\n        return chartRef;\n    }\n\n    private createChartRef(chartComp: GridChartComp): ChartRef {\n        const chartRef: ChartRef = {\n            destroyChart: () => {\n                if (this.activeCharts.has(chartRef)) {\n                    this.context.destroyBean(chartComp);\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                }\n            },\n            chartElement: chartComp.getGui(),\n            chart: chartComp.getUnderlyingChart(),\n            chartId: chartComp.getChartModel().chartId\n        };\n\n        this.activeCharts.add(chartRef);\n        this.activeChartComps.add(chartComp);\n\n        return chartRef;\n    }\n\n    private getSelectedRange(): CellRange {\n        const ranges = this.rangeService.getCellRanges();\n        return ranges.length > 0 ? ranges[0] : {} as CellRange;\n    }\n\n    private generateId(): string {\n        return `id-${Math.random().toString(36).substring(2, 18)}`;\n    }\n\n    @PreDestroy\n    private destroyAllActiveCharts(): void {\n        this.activeCharts.forEach(chart => chart.destroyChart());\n    }\n}\n", "import {\n    _,\n    AgDialog,\n    Autowired,\n    CellRange,\n    ChartCreated,\n    ChartDestroyed,\n    ChartModel,\n    ChartToolPanelName,\n    ChartType,\n    Component,\n    Events,\n    IAggFunc,\n    PopupService,\n    PostConstruct,\n    RefSelector,\n    SeriesChartType,\n    UpdateChartParams,\n    WithoutGridCommon,\n    FocusService,\n} from \"@ag-grid-community/core\";\n\nimport { AgChartInstance, AgChartThemeOverrides, AgChartThemePalette } from \"ag-charts-community\";\nimport { ChartMenu } from \"./menu/chartMenu\";\nimport { TitleEdit } from \"./chartTitle/titleEdit\";\nimport { ChartController, DEFAULT_THEMES } from \"./chartController\";\nimport { ChartDataModel, ChartModelParams } from \"./model/chartDataModel\";\nimport { BarChartProxy } from \"./chartProxies/cartesian/barChartProxy\";\nimport { AreaChartProxy } from \"./chartProxies/cartesian/areaChartProxy\";\nimport { ChartProxy, ChartProxyParams } from \"./chartProxies/chartProxy\";\nimport { LineChartProxy } from \"./chartProxies/cartesian/lineChartProxy\";\nimport { PolarChartProxy } from \"./chartProxies/polar/polarChartProxy\";\nimport { PieChartProxy } from \"./chartProxies/pie/pieChartProxy\";\nimport { ScatterChartProxy } from \"./chartProxies/cartesian/scatterChartProxy\";\nimport { RangeChartProxy } from \"./chartProxies/statistical/rangeChartProxy\";\nimport { HistogramChartProxy } from \"./chartProxies/cartesian/histogramChartProxy\";\nimport { BoxPlotChartProxy } from \"./chartProxies/statistical/boxPlotChartProxy\";\nimport { TreemapChartProxy } from \"./chartProxies/hierarchical/treemapChartProxy\";\nimport { SunburstChartProxy } from \"./chartProxies/hierarchical/sunburstChartProxy\";\nimport { HeatmapChartProxy } from './chartProxies/specialized/heatmapChartProxy';\nimport { WaterfallChartProxy } from './chartProxies/cartesian/waterfallChartProxy';\nimport { ChartTranslationKey, ChartTranslationService } from \"./services/chartTranslationService\";\nimport { ChartCrossFilterService } from \"./services/chartCrossFilterService\";\nimport { CrossFilteringContext } from \"../chartService\";\nimport { ChartOptionsService } from \"./services/chartOptionsService\";\nimport { ComboChartProxy } from \"./chartProxies/combo/comboChartProxy\";\nimport { getCanonicalChartType, isHierarchical } from \"./utils/seriesTypeMapper\";\nimport { ChartMenuParamsFactory } from './menu/chartMenuParamsFactory';\nimport { ChartMenuContext } from \"./menu/chartMenuContext\";\nimport { deepMerge } from './utils/object';\nimport { ChartMenuService, CHART_TOOL_PANEL_MENU_OPTIONS } from \"./services/chartMenuService\";\n\nexport interface GridChartParams {\n    chartId: string;\n    pivotChart: boolean;\n    cellRange: CellRange;\n    chartType: ChartType;\n    chartThemeName?: string;\n    insideDialog: boolean;\n    suppressChartRanges: boolean;\n    switchCategorySeries: boolean,\n    aggFunc?: string | IAggFunc;\n    chartThemeOverrides?: AgChartThemeOverrides;\n    unlinkChart?: boolean;\n    crossFiltering: boolean;\n    crossFilteringContext: CrossFilteringContext;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes?: SeriesChartType[];\n    crossFilteringResetCallback?: () => void;\n}\n\nexport class GridChartComp extends Component {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-chart\" tabindex=\"-1\">\n            <div ref=\"eChartContainer\" tabindex=\"-1\" class=\"ag-chart-components-wrapper\">\n                <div ref=\"eChart\" class=\"ag-chart-canvas-wrapper\"></div>\n                <div ref=\"eEmpty\" class=\"ag-chart-empty-text ag-unselectable\"></div>\n            </div>\n            <div ref=\"eTitleEditContainer\"></div>\n            <div ref=\"eMenuContainer\" class=\"ag-chart-docked-container\" style=\"min-width: 0px;\"></div>\n        </div>`;\n\n    @RefSelector('eChart') private readonly eChart: HTMLElement;\n    @RefSelector('eChartContainer') private readonly eChartContainer: HTMLElement;\n    @RefSelector('eMenuContainer') private readonly eMenuContainer: HTMLElement;\n    @RefSelector('eEmpty') private readonly eEmpty: HTMLElement;\n    @RefSelector('eTitleEditContainer') private readonly eTitleEditContainer: HTMLDivElement;\n\n    @Autowired('chartCrossFilterService') private readonly crossFilterService: ChartCrossFilterService;\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('popupService') private readonly popupService: PopupService;\n\n    private chartMenu: ChartMenu;\n    private titleEdit: TitleEdit;\n    private chartDialog: AgDialog;\n\n    private chartController: ChartController;\n    private chartOptionsService: ChartOptionsService;\n    private chartMenuContext: ChartMenuContext;\n\n    private chartProxy: ChartProxy;\n    private chartType: ChartType;\n    private chartEmpty: boolean;\n\n    private readonly params: GridChartParams;\n\n    // function to clean up the 'color-scheme-change' event listener\n    private onDestroyColorSchemeChangeListener: () => void;\n\n    constructor(params: GridChartParams) {\n        super(GridChartComp.TEMPLATE);\n        this.params = params;\n    }\n\n    @PostConstruct\n    public init(): void {\n        const modelParams: ChartModelParams = {\n            chartId: this.params.chartId,\n            pivotChart: this.params.pivotChart,\n            chartType: getCanonicalChartType(this.params.chartType),\n            chartThemeName: this.getThemeName(),\n            switchCategorySeries: this.params.switchCategorySeries,\n            aggFunc: this.params.aggFunc,\n            cellRange: this.params.cellRange,\n            suppressChartRanges: this.params.suppressChartRanges,\n            unlinkChart: this.params.unlinkChart,\n            crossFiltering: this.params.crossFiltering,\n            seriesChartTypes: this.params.seriesChartTypes,\n        };\n\n        const isRtl = this.gridOptionsService.get('enableRtl');\n\n        this.addCssClass(isRtl ? 'ag-rtl' : 'ag-ltr');\n\n        // only the chart controller interacts with the chart model\n        const model = this.createBean(new ChartDataModel(modelParams));\n        this.chartController = this.createManagedBean(new ChartController(model));\n        this.chartOptionsService = this.createManagedBean(new ChartOptionsService(this.chartController));\n\n        this.validateCustomThemes();\n\n        // create chart before dialog to ensure dialog is correct size\n        this.createChart();\n\n        if (this.params.insideDialog) {\n            this.addDialog();\n        }\n\n        this.addMenu();\n        this.addTitleEditComp();\n\n        this.addManagedListener(this.getGui(), 'focusin', this.setActiveChartCellRange.bind(this));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_MODEL_UPDATE, this.update.bind(this));\n\n        this.addManagedPropertyListeners(['chartThemeOverrides', 'chartThemes'], this.reactivePropertyUpdate.bind(this));\n\n        this.update();\n        this.raiseChartCreatedEvent();\n    }\n\n    private createChart(): void {\n        // if chart already exists, destroy it and remove it from DOM\n        let chartInstance: AgChartInstance | undefined = undefined;\n        if (this.chartProxy) {\n            chartInstance = this.chartProxy.destroy({ keepChartInstance: true });\n        }\n\n        const crossFilterCallback = (event: any, reset: boolean) => {\n            const ctx = this.params.crossFilteringContext;\n            ctx.lastSelectedChartId = reset ? '' : this.chartController.getChartId();\n            if (reset) {\n                this.params.crossFilteringResetCallback!();\n            }\n            this.crossFilterService.filter(event, reset);\n        };\n\n        const chartType = this.chartController.getChartType();\n        const chartProxyParams: ChartProxyParams = {\n            chartType,\n            chartInstance,\n            getChartThemeName: this.getChartThemeName.bind(this),\n            getChartThemes: this.getChartThemes.bind(this),\n            customChartThemes: this.gridOptionsService.get('customChartThemes'),\n            getGridOptionsChartThemeOverrides: () => this.getGridOptionsChartThemeOverrides(),\n            getExtraPaddingDirections: () => this.chartMenu?.getExtraPaddingDirections() ?? [],\n            apiChartThemeOverrides: this.params.chartThemeOverrides,\n            crossFiltering: this.params.crossFiltering,\n            crossFilterCallback,\n            parentElement: this.eChart,\n            grouping: this.chartController.isGrouping(),\n            chartThemeToRestore: this.params.chartThemeName,\n            chartOptionsToRestore: this.params.chartOptionsToRestore,\n            chartPaletteToRestore: this.params.chartPaletteToRestore,\n            seriesChartTypes: this.chartController.getSeriesChartTypes(),\n            translate: (toTranslate: ChartTranslationKey) => this.chartTranslationService.translate(toTranslate),\n        };\n\n        // ensure 'restoring' options are not reused when switching chart types\n        this.params.chartOptionsToRestore = undefined;\n\n        // set local state used to detect when chart changes\n        this.chartType = chartType;\n\n        this.chartProxy = GridChartComp.createChartProxy(chartProxyParams);\n        if (!this.chartProxy) {\n            console.warn('AG Grid: invalid chart type supplied: ', chartProxyParams.chartType);\n            return;\n        }\n\n        const canvas = this.eChart.querySelector('canvas');\n        if (canvas) {\n            canvas.classList.add('ag-charts-canvas');\n        }\n\n        this.chartController.setChartProxy(this.chartProxy);\n        this.createMenuContext();\n        this.titleEdit && this.titleEdit.refreshTitle(this.chartMenuContext);\n    }\n\n    private createMenuContext(): void {\n        if (this.chartMenuContext) { return; }\n        const chartMenuParamsFactory = this.createManagedBean(new ChartMenuParamsFactory(this.chartOptionsService.getChartThemeOverridesProxy()));\n        const chartAxisMenuParamsFactory = this.createManagedBean(new ChartMenuParamsFactory(this.chartOptionsService.getAxisThemeOverridesProxy()));\n        this.chartMenuContext = {\n            chartController: this.chartController,\n            chartOptionsService: this.chartOptionsService,\n            chartMenuParamsFactory,\n            chartAxisMenuParamsFactory\n        }\n    }\n\n    private getChartThemeName(): string {\n        return this.chartController.getChartThemeName();\n    }\n\n    private getChartThemes(): string[] {\n        return this.chartController.getThemeNames();\n    }\n\n    private getGridOptionsChartThemeOverrides(): AgChartThemeOverrides | undefined {\n        return this.gridOptionsService.get('chartThemeOverrides');\n    }\n\n    private static createChartProxy(chartProxyParams: ChartProxyParams): ChartProxy {\n        switch (chartProxyParams.chartType) {\n            case 'column':\n            case 'bar':\n            case 'groupedColumn':\n            case 'stackedColumn':\n            case 'normalizedColumn':\n            case 'groupedBar':\n            case 'stackedBar':\n            case 'normalizedBar':\n                return new BarChartProxy(chartProxyParams);\n            case 'pie':\n            case 'donut':\n            case 'doughnut':\n                return new PieChartProxy(chartProxyParams);\n            case 'area':\n            case 'stackedArea':\n            case 'normalizedArea':\n                return new AreaChartProxy(chartProxyParams);\n            case 'line':\n                return new LineChartProxy(chartProxyParams);\n            case 'scatter':\n            case 'bubble':\n                return new ScatterChartProxy(chartProxyParams);\n            case 'histogram':\n                return new HistogramChartProxy(chartProxyParams);\n            case 'radarLine':\n            case 'radarArea':\n            case 'nightingale':\n            case 'radialColumn':\n            case 'radialBar':\n                return new PolarChartProxy(chartProxyParams);\n            case 'rangeBar':\n                return new RangeChartProxy(chartProxyParams);\n            case 'rangeArea':\n                return new RangeChartProxy(chartProxyParams);\n            case 'boxPlot':\n                return new BoxPlotChartProxy(chartProxyParams);\n            case 'treemap':\n                return new TreemapChartProxy(chartProxyParams);\n            case 'sunburst':\n                return new SunburstChartProxy(chartProxyParams);\n            case 'heatmap':\n                return new HeatmapChartProxy(chartProxyParams);\n            case 'waterfall':\n                return new WaterfallChartProxy(chartProxyParams);\n            case 'columnLineCombo':\n            case 'areaColumnCombo':\n            case 'customCombo':\n                return new ComboChartProxy(chartProxyParams);\n            default:\n                throw `AG Grid: Unable to create chart as an invalid chartType = '${chartProxyParams.chartType}' was supplied.`;\n        }\n    }\n\n    private addDialog(): void {\n        const title = this.chartTranslationService.translate(this.params.pivotChart ? 'pivotChartTitle' : 'rangeChartTitle');\n\n        const { width, height } = this.getBestDialogSize();\n\n        this.chartDialog = new AgDialog({\n            resizable: true,\n            movable: true,\n            maximizable: true,\n            title,\n            width,\n            height,\n            component: this,\n            centered: true,\n            closable: true\n        });\n\n        this.getContext().createBean(this.chartDialog);\n\n        this.chartDialog.addEventListener(AgDialog.EVENT_DESTROYED, () => {\n            this.destroy();\n            this.chartMenuService.hideAdvancedSettings();\n        });\n    }\n\n    private getBestDialogSize(): { width: number, height: number; } {\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = _.getAbsoluteWidth(popupParent) * 0.75;\n        const maxHeight = _.getAbsoluteHeight(popupParent) * 0.75;\n        const ratio = 0.553;\n\n        const chart = this.chartProxy.getChart();\n        let width = this.params.insideDialog ? 850 : chart.width;\n        let height = this.params.insideDialog ? 470 : chart.height;\n\n        if (width > maxWidth || height > maxHeight) {\n            width = Math.min(width, maxWidth);\n            height = Math.round(width * ratio);\n\n            if (height > maxHeight) {\n                height = maxHeight;\n                width = Math.min(width, Math.round(height / ratio));\n            }\n        }\n\n        return { width, height };\n    }\n\n    private addMenu(): void {\n        if (!this.params.crossFiltering) {\n            this.chartMenu = this.createBean(new ChartMenu(\n                this.eChartContainer,\n                this.eMenuContainer,\n                this.chartMenuContext\n            ));\n            this.eChartContainer.appendChild(this.chartMenu.getGui());\n        }\n    }\n\n    private addTitleEditComp(): void {\n        this.titleEdit = this.createBean(new TitleEdit(this.chartMenu));\n        this.eTitleEditContainer.appendChild(this.titleEdit.getGui());\n        if (this.chartProxy) {\n            this.titleEdit.refreshTitle(this.chartMenuContext);\n        }\n    }\n\n    public update(params?: UpdateChartParams): void {\n        // update chart model for api.updateChart()\n        if (params?.chartId) {\n            const validUpdate = this.chartController.update(params);\n            if (!validUpdate) {\n                return; // warning already logged!\n            }\n        }\n\n        const updatedChartType = this.chartTypeChanged(params);\n        // If the chart type has changed, grab the theme overrides from the exisiting chart before destroying it,\n        // so that we can retain any compatible theme overrides across different chart types.\n        const persistedThemeOverrides = updatedChartType || this.chartEmpty\n            ? (((updatedChartType) => {\n                const currentChartType = this.chartType;\n                const targetChartType = updatedChartType;\n                const existingChartInstance = this.chartProxy.getChart();\n                const existingChartOptions = existingChartInstance?.getOptions()\n                const existingAxes = existingChartInstance?.axes;\n                return this.chartOptionsService.getPersistedChartThemeOverrides(\n                    existingChartOptions,\n                    existingAxes,\n                    currentChartType,\n                    targetChartType ?? currentChartType,\n                );\n            }))(updatedChartType)\n            : undefined;\n\n        // recreate chart if chart type has changed\n        if (updatedChartType) this.createChart();\n        \n        // combine any provided theme overrides with any retained theme overrides from changing chart type\n        const updatedThemeOverrides = persistedThemeOverrides && params?.chartThemeOverrides\n            ? deepMerge(persistedThemeOverrides, params.chartThemeOverrides)\n            : persistedThemeOverrides || params?.chartThemeOverrides;\n\n        // update chart options if chart type hasn't changed or if overrides are supplied\n        this.updateChart(updatedThemeOverrides);\n\n        if (params?.chartId) {\n            this.chartProxy.getChart().waitForUpdate().then(() => {\n                this.chartController.raiseChartApiUpdateEvent();\n            });\n        }\n    }\n\n    private updateChart(updatedOverrides?: AgChartThemeOverrides): void {\n        const { chartProxy } = this;\n\n        const selectedCols = this.chartController.getSelectedValueColState();\n        const fields = selectedCols.map(c => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.chartController.getChartData();\n        const chartEmpty = this.handleEmptyChart(data, fields);\n\n        this.chartEmpty = chartEmpty;\n        if (chartEmpty) {\n            // We don't have enough data to reinstantiate the chart with the new chart type,\n            // but we still want to persist any theme overrides for when the data is present\n            if (updatedOverrides) this.chartController.updateThemeOverrides(updatedOverrides);\n            return;\n        }\n\n        let chartUpdateParams = this.chartController.getChartUpdateParams(updatedOverrides);\n        chartProxy.update(chartUpdateParams);\n\n        this.chartProxy.getChart().waitForUpdate().then(() => {\n            this.chartController.raiseChartUpdatedEvent();\n        });\n\n        this.titleEdit.refreshTitle(this.chartMenuContext);\n    }\n\n    private chartTypeChanged(updateParams?: UpdateChartParams): ChartType | null {\n        const [currentType, updatedChartType] = [this.chartController.getChartType(), updateParams?.chartType];\n        const targetChartType = updatedChartType ? getCanonicalChartType(updatedChartType) : undefined;\n        // If the grid chart component is out of sync with the existing chart instance type, return the correct chart type\n        if (this.chartType !== currentType) return targetChartType ?? currentType;\n        // If the target chart type is different to the current chart type, return the new chart type\n        if (targetChartType && (currentType !== targetChartType)) return targetChartType;\n        // Otherwise nothing has changed\n        return null;\n    }\n\n    public getChartModel(): ChartModel {\n        return this.chartController.getChartModel();\n    }\n\n    public getChartImageDataURL(fileFormat?: string): string {\n        return this.chartProxy.getChartImageDataURL(fileFormat);\n    }\n\n    private handleEmptyChart(data: any[], fields: any[]): boolean {\n        const pivotModeDisabled = this.chartController.isPivotChart() && !this.chartController.isPivotMode();\n        \n        // Determine the minimum number of fields based on the chart type\n        const chartType = this.chartController.getChartType();\n        let minFieldsRequired = 1;\n        if (this.chartController.isActiveXYChart()) {\n            minFieldsRequired = chartType === 'bubble' ? 3 : 2;\n        } else if (isHierarchical(chartType)) {\n            minFieldsRequired = 0;\n        }\n\n        const isEmptyChart = fields.length < minFieldsRequired || data.length === 0;\n\n        if (this.eChart) {\n            const isEmpty = pivotModeDisabled || isEmptyChart;\n            _.setDisplayed(this.eChart, !isEmpty);\n            _.setDisplayed(this.eEmpty, isEmpty);\n        }\n\n        if (pivotModeDisabled) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('pivotChartRequiresPivotMode');\n            return true;\n        }\n\n        if (isEmptyChart) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('noDataToChart');\n            return true;\n        }\n\n        return false;\n    }\n\n    public downloadChart(dimensions?: { width: number, height: number }, fileName?: string, fileFormat?: string): void {\n        this.chartProxy.downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public openChartToolPanel(panel?: ChartToolPanelName) {\n        const menuPanel = panel ? CHART_TOOL_PANEL_MENU_OPTIONS[panel] : panel;\n        this.chartMenu.showMenu({ panel: menuPanel });\n    }\n\n    public closeChartToolPanel() {\n        this.chartMenu.hideMenu();\n    }\n\n    public getChartId(): string {\n        return this.chartController.getChartId();\n    }\n\n    public getUnderlyingChart() {\n        return this.chartProxy.getChartRef();\n    }\n\n    public crossFilteringReset(): void {\n        this.chartProxy.crossFilteringReset();\n    }\n\n    private setActiveChartCellRange(focusEvent: FocusEvent): void {\n        if (this.getGui().contains(focusEvent.relatedTarget as HTMLElement)) {\n            return;\n        }\n\n        this.chartController.setChartRange(true);\n        this.focusService.clearFocusedCell();\n    }\n\n    private getThemeName(): string {\n        const availableChartThemes = this.gridOptionsService.get('chartThemes') || DEFAULT_THEMES;\n\n        if (availableChartThemes.length === 0) {\n            throw new Error('Cannot create chart: no chart themes available.');\n        }\n\n        const { chartThemeName } = this.params;\n        return _.includes(availableChartThemes, chartThemeName) ? chartThemeName! : availableChartThemes[0];\n    }\n\n    private getAllKeysInObjects(objects: any[]): string[] {\n        const allValues: any = {};\n    \n        objects.filter(obj => obj != null).forEach(obj => {\n            Object.keys(obj).forEach(key => allValues[key] = null);\n        });\n    \n        return Object.keys(allValues);\n    }\n\n    private validateCustomThemes() {\n        const suppliedThemes = this.getChartThemes();\n        const customChartThemes = this.gridOptionsService.get('customChartThemes');\n        if (customChartThemes) {\n            this.getAllKeysInObjects([customChartThemes]).forEach(customThemeName => {\n                if (!_.includes(suppliedThemes, customThemeName)) {\n                    console.warn(\"AG Grid: a custom chart theme with the name '\" + customThemeName + \"' has been \" +\n                        \"supplied but not added to the 'chartThemes' list\");\n                }\n            });\n        }\n    }\n\n    private reactivePropertyUpdate(): void {\n        // switch to the first theme if the current theme is unavailable\n        this.chartController.setChartThemeName(this.getThemeName(), true);\n\n        const chartId = this.getChartId();\n        const modelType = this.chartController.isCrossFilterChart()\n            ? 'crossFilter'\n            : this.getChartModel().modelType;\n\n        // standalone requires that `undefined` / `null` values are supplied as `{}`\n        const chartThemeOverrides = this.gridOptionsService.get('chartThemeOverrides') || {};\n\n        this.update({\n            type: `${modelType}ChartUpdate`,\n            chartId,\n            chartThemeOverrides\n        });\n    }\n\n    private raiseChartCreatedEvent(): void {\n        const event: WithoutGridCommon<ChartCreated> = {\n            type: Events.EVENT_CHART_CREATED,\n            chartId: this.chartController.getChartId()\n        };\n\n        this.chartProxy.getChart().waitForUpdate().then(() => {\n            this.eventService.dispatchEvent(event);\n        });\n    }\n\n    private raiseChartDestroyedEvent(): void {\n        const event: WithoutGridCommon<ChartDestroyed> = {\n            type: Events.EVENT_CHART_DESTROYED,\n            chartId: this.chartController.getChartId(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        if (this.chartProxy) {\n            this.chartProxy.destroy();\n        }\n\n        this.destroyBean(this.chartMenu);\n        this.destroyBean(this.titleEdit);\n\n        // don't want to invoke destroy() on the Dialog (prevents destroy loop)\n        if (this.chartDialog && this.chartDialog.isAlive()) {\n            this.destroyBean(this.chartDialog);\n        }\n\n        this.onDestroyColorSchemeChangeListener?.();\n\n        // if the user is providing containers for the charts, we need to clean up, otherwise the old chart\n        // data will still be visible although the chart is no longer bound to the grid\n        const eGui = this.getGui();\n        _.clearElement(eGui);\n        // remove from parent, so if user provided container, we detach from the provided dom element\n        _.removeFromParent(eGui);\n\n        this.raiseChartDestroyedEvent();\n    }\n}\n", "import {\n    _,\n    AgPanel,\n    AgPromise,\n    Autowired,\n    ChartCreated,\n    ChartMenuOptions,\n    ChartToolPanelMenuOptions,\n    Component,\n    Events,\n    PostConstruct\n} from \"@ag-grid-community/core\";\n\nimport { TabbedChartMenu } from \"./tabbedChartMenu\";\nimport { ChartController } from \"../chartController\";\nimport { ExtraPaddingDirection } from \"../chartProxies/chartProxy\";\nimport { ChartMenuListFactory } from \"./chartMenuList\";\nimport { ChartToolbar } from \"./chartToolbar\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\nimport { ChartMenuContext } from \"./chartMenuContext\";\n\ntype ChartToolbarButtons = {\n    [key in ChartMenuOptions]: {\n        iconName: string, callback: (eventSource: HTMLElement) => void\n    }\n};\n\nexport class ChartMenu extends Component {\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n    @Autowired('chartMenuListFactory') private chartMenuListFactory: ChartMenuListFactory;\n\n    private readonly chartController: ChartController;\n\n    private buttons: ChartToolbarButtons = {\n        chartSettings: { iconName: 'menu', callback: () => this.showMenu({ panel: this.defaultPanel }) },\n        chartData: { iconName: 'menu', callback: () => this.showMenu({ panel: \"chartData\" }) },\n        chartFormat: { iconName: 'menu', callback: () => this.showMenu({ panel: \"chartFormat\" }) },\n        chartLink: { iconName: 'linked', callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext) },\n        chartUnlink: { iconName: 'unlinked', callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext) },\n        chartDownload: { iconName: 'save', callback: () => this.chartMenuService.downloadChart(this.chartMenuContext) },\n        chartMenu: { iconName: 'menuAlt', callback: (eventSource: HTMLElement) => this.showMenuList(eventSource) }\n    };\n\n    private panels: ChartToolPanelMenuOptions[] = [];\n    private defaultPanel: ChartToolPanelMenuOptions;\n\n    private static TEMPLATE = /* html */ `<div></div>`;\n\n    private eHideButton: HTMLButtonElement;\n    private eHideButtonIcon: HTMLSpanElement;\n    private chartToolbar: ChartToolbar;\n    private tabbedMenu: TabbedChartMenu;\n    private menuPanel?: AgPanel;\n    private menuVisible = false;\n    private chartToolbarOptions: ChartMenuOptions[];\n    private legacyFormat: boolean;\n\n    constructor(\n        private readonly eChartContainer: HTMLElement,\n        private readonly eMenuPanelContainer: HTMLElement,\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(ChartMenu.TEMPLATE);\n        this.chartController = chartMenuContext.chartController;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.legacyFormat = this.chartMenuService.isLegacyFormat();\n\n        this.chartToolbar = this.createManagedBean(new ChartToolbar());\n        this.getGui().appendChild(this.chartToolbar.getGui());\n        if (this.legacyFormat) {\n            this.createLegacyToggleButton();\n        }\n        \n        this.refreshToolbarAndPanels();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHART_CREATED, (e: ChartCreated) => {\n            if (e.chartId === this.chartController.getChartId()) {\n                const showDefaultToolPanel = Boolean(this.gridOptionsService.get('chartToolPanelsDef')?.defaultToolPanel);\n                if (showDefaultToolPanel) {\n                    this.showMenu({ panel: this.defaultPanel, animate: false, suppressFocus: true });\n                }\n            }\n        });\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_LINKED_CHANGED, this.refreshToolbarAndPanels.bind(this));\n\n        this.refreshMenuClasses();\n\n        if (this.legacyFormat && !this.gridOptionsService.get('suppressChartToolPanelsButton') && this.panels.length > 0) {\n            this.getGui().classList.add('ag-chart-tool-panel-button-enable');\n            if (this.eHideButton) {\n                this.addManagedListener(this.eHideButton, 'click', this.toggleMenu.bind(this));\n            }\n        }\n        if (!this.legacyFormat) {\n            this.getGui().classList.add('ag-chart-menu-wrapper');\n        }\n\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, this.refreshToolbarAndPanels.bind(this));\n    }\n\n    public isVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public getExtraPaddingDirections(): ExtraPaddingDirection[]  {\n        const topItems: ChartMenuOptions[] = ['chartMenu', 'chartLink', 'chartUnlink', 'chartDownload'];\n        const rightItems: ChartMenuOptions[] = ['chartSettings', 'chartData', 'chartFormat'];\n\n        const result: ExtraPaddingDirection[] = [];\n        if (topItems.some(v => this.chartToolbarOptions.includes(v))) {\n            result.push('top');\n        }\n\n        if (rightItems.some(v => this.chartToolbarOptions.includes(v))) {\n            result.push(this.gridOptionsService.get('enableRtl') ? 'left' : 'right');\n        }\n\n        return result;\n    }\n\n    private createLegacyToggleButton(): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        this.eHideButton = eDocument.createElement('button');\n        this.eHideButton.classList.add('ag-button', 'ag-chart-menu-close');\n        this.eHideButtonIcon = eDocument.createElement('span');\n        this.eHideButtonIcon.classList.add('ag-icon', 'ag-icon-contracted');\n        this.eHideButton.appendChild(this.eHideButtonIcon);\n        this.getGui().appendChild(this.eHideButton);\n    }\n\n    private refreshToolbarAndPanels(): void {\n        this.initToolbarOptionsAndPanels();\n        this.updateToolbar();\n    }\n\n    private initToolbarOptionsAndPanels(): void {\n        const {\n            panels,\n            defaultPanel,\n            chartToolbarOptions\n        } = this.chartMenuService.getToolbarOptionsAndPanels(this.chartController);\n        this.panels = panels;\n        this.defaultPanel = defaultPanel;\n        this.chartToolbarOptions = chartToolbarOptions;\n    }\n\n    private updateToolbar(): void {\n        const buttons = this.chartToolbarOptions.map(buttonName => {\n            const { iconName, callback } = this.buttons[buttonName];\n            return {\n                buttonName,\n                iconName,\n                callback\n            };\n        });\n        this.chartToolbar.updateParams({ buttons });\n    }\n\n    private createMenuPanel(defaultTab: number): AgPromise<AgPanel> {\n        const width = this.environment.chartMenuPanelWidth();\n\n        const menuPanel = this.menuPanel = this.createBean(new AgPanel({\n            minWidth: width,\n            width,\n            height: '100%',\n            closable: true,\n            hideTitleBar: true,\n            cssIdentifier: 'chart-menu'\n        }));\n\n        menuPanel.setParentComponent(this);\n        this.eMenuPanelContainer.appendChild(menuPanel.getGui());\n\n        this.tabbedMenu = this.createBean(new TabbedChartMenu(\n            this.panels,\n            this.chartMenuContext\n        ));\n\n        this.addManagedListener(this.tabbedMenu, TabbedChartMenu.EVENT_CLOSED, () => {\n            this.hideMenu(false);\n        });\n\n        this.addManagedListener(\n            menuPanel,\n            Component.EVENT_DESTROYED,\n            () => this.destroyBean(this.tabbedMenu)\n        );\n\n        return new AgPromise((res: (arg0: any) => void) => {\n            window.setTimeout(() => {\n                menuPanel.setBodyComponent(this.tabbedMenu);\n                this.tabbedMenu.showTab(defaultTab);\n                res(menuPanel);\n                if (this.legacyFormat) {\n                    this.addManagedListener(\n                        this.eChartContainer,\n                        'click',\n                        (event: MouseEvent) => {\n                            if (this.getGui().contains(event.target as HTMLElement)) {\n                                return;\n                            }\n\n                            if (this.menuVisible) {\n                                this.hideMenu();\n                            }\n                        }\n                    );\n                }\n            }, 100);\n        });\n    }\n\n    private showContainer(eventSource?: HTMLElement, suppressFocus?: boolean) {\n        if (!this.menuPanel) { return; }\n\n        this.menuVisible = true;\n        this.showParent(this.menuPanel.getWidth()!);\n        this.refreshMenuClasses();\n        this.tabbedMenu.showMenu(eventSource, suppressFocus);\n    }\n\n    private toggleMenu() {\n        this.menuVisible ? this.hideMenu(this.legacyFormat) : this.showMenu({ animate: this.legacyFormat });\n    }\n\n    public showMenu(params: {\n        /**\n         * Menu panel to show. If empty, shows the existing menu, or creates the default menu if menu panel has not been created\n         */\n        panel?: ChartToolPanelMenuOptions,\n        /**\n         * Whether to animate the menu opening\n         */\n        animate?: boolean,\n        eventSource?: HTMLElement,\n        suppressFocus?: boolean\n    }): void {\n        const { panel, animate = true, eventSource, suppressFocus } = params;\n        if (!animate) {\n            this.eMenuPanelContainer.classList.add('ag-no-transition');\n        }\n\n        if (this.menuPanel && !panel) {\n            this.showContainer(eventSource, suppressFocus);\n        } else {\n            const menuPanel = panel || this.defaultPanel;\n            let tab = this.panels.indexOf(menuPanel);\n            if (tab < 0) {\n                console.warn(`AG Grid: '${panel}' is not a valid Chart Tool Panel name`);\n                tab = this.panels.indexOf(this.defaultPanel)\n            }\n    \n            if (this.menuPanel) {\n                this.tabbedMenu.showTab(tab);\n                this.showContainer(eventSource, suppressFocus);\n            } else {\n                this.createMenuPanel(tab).then(() => this.showContainer(eventSource, suppressFocus));\n            }\n        }\n\n\n        if (!animate) {\n            // Wait for menu to render\n            setTimeout(() => {\n                if (!this.isAlive()) { return; }\n                this.eMenuPanelContainer.classList.remove('ag-no-transition');\n            }, 500);\n        }\n    }\n\n    public hideMenu(animate: boolean = true): void {\n        if (!animate) {\n            this.eMenuPanelContainer.classList.add('ag-no-transition');\n        }\n        this.hideParent();\n\n        window.setTimeout(() => {\n            this.menuVisible = false;\n            this.refreshMenuClasses();\n            if (!animate) {\n                this.eMenuPanelContainer.classList.remove('ag-no-transition');\n            }\n        }, 500);\n    }\n\n    private refreshMenuClasses() {\n        this.eChartContainer.classList.toggle('ag-chart-menu-visible', this.menuVisible);\n        this.eChartContainer.classList.toggle('ag-chart-menu-hidden', !this.menuVisible);\n\n        if (this.legacyFormat && !this.gridOptionsService.get('suppressChartToolPanelsButton')) {\n            this.eHideButtonIcon.classList.toggle('ag-icon-contracted', this.menuVisible);\n            this.eHideButtonIcon.classList.toggle('ag-icon-expanded', !this.menuVisible);\n        }\n    }\n\n    private showParent(width: number): void {\n        this.eMenuPanelContainer.style.minWidth = `${width}px`;\n    }\n\n    private hideParent(): void {\n        this.eMenuPanelContainer.style.minWidth = '0';\n    }\n\n    private showMenuList(eventSource: HTMLElement): void {\n        this.chartMenuListFactory.showMenuList({\n            eventSource,\n            showMenu: () => this.showMenu({ animate: false, eventSource }),\n            chartMenuContext: this.chartMenuContext\n        });\n    }\n\n    protected destroy() {\n        super.destroy();\n\n        if (this.menuPanel && this.menuPanel.isAlive()) {\n            this.destroyBean(this.menuPanel);\n        }\n\n        if (this.tabbedMenu && this.tabbedMenu.isAlive()) {\n            this.destroyBean(this.tabbedMenu);\n        }\n    }\n}\n", "import {\n    AgPromise,\n    Autowired,\n    ChartMenuOptions,\n    Component,\n    PostConstruct,\n    TabbedItem,\n    TabbedLayout\n} from \"@ag-grid-community/core\";\nimport { ChartDataPanel } from \"./data/chartDataPanel\";\nimport { FormatPanel } from \"./format/formatPanel\";\nimport { ChartSettingsPanel } from \"./settings/chartSettingsPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../services/chartTranslationService\";\nimport { ChartMenuContext } from \"./chartMenuContext\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\n\nexport class TabbedChartMenu extends Component {\n    public static EVENT_CLOSED = 'closed';\n    public static TAB_DATA = 'data';\n    public static TAB_FORMAT = 'format';\n\n    private tabbedLayout: TabbedLayout;\n    private tabs: TabbedItem[] = [];\n    private eventSource?: HTMLElement;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n\n    constructor(\n        private readonly panels: ChartMenuOptions[],\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.panels.forEach(panel => {\n            const panelType = panel.replace('chart', '').toLowerCase() as 'settings' | 'data' | 'format';\n            const panelComp = this.createPanel(panelType);\n            const tabItem = this.createTab(panel, panelType, panelComp);\n\n            this.tabs.push(tabItem);\n            this.addDestroyFunc(() => this.destroyBean(panelComp));\n        });\n\n        this.tabbedLayout = new TabbedLayout({\n            items: this.tabs,\n            cssClass: 'ag-chart-tabbed-menu',\n            keepScrollPosition: true,\n            suppressFocusBodyOnOpen: true,\n            suppressTrapFocus: true,\n            enableCloseButton: !this.chartMenuService.isLegacyFormat(),\n            closeButtonAriaLabel: this.chartTranslationService.translate('ariaChartMenuClose'),\n            onCloseClicked: () => {\n                this.eventSource?.focus({ preventScroll: true });\n                this.dispatchEvent({ type: TabbedChartMenu.EVENT_CLOSED });\n            }\n        });\n        this.getContext().createBean(this.tabbedLayout);\n    }\n\n    private createTab(\n        name: ChartMenuOptions,\n        title: ChartTranslationKey,\n        panelComp: Component,\n    ): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-chart-tab', `ag-chart-${title}`);\n\n        this.getContext().createBean(panelComp);\n\n        eWrapperDiv.appendChild(panelComp.getGui());\n\n        const titleEl = document.createElement('div');\n        const translatedTitle = this.chartTranslationService.translate(title);\n        titleEl.innerText = translatedTitle;\n\n        return {\n            title: titleEl,\n            titleLabel: translatedTitle,\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            getScrollableContainer: () => {\n                const scrollableContainer = eWrapperDiv.querySelector('.ag-scrollable-container');\n                return (scrollableContainer || eWrapperDiv) as HTMLElement;\n            },\n            name\n        };\n    }\n\n    public showTab(tab: number) {\n        const tabItem = this.tabs[tab];\n        this.tabbedLayout.showItem(tabItem);\n    }\n\n    public getGui(): HTMLElement {\n        return this.tabbedLayout && this.tabbedLayout.getGui();\n    }\n\n    public showMenu(eventSource?: HTMLElement, suppressFocus?: boolean): void {\n        this.eventSource = eventSource;\n        if (!suppressFocus) {\n            this.tabbedLayout?.focusHeader(true);\n        }\n    }\n\n    protected destroy(): void {\n        if (this.parentComponent && this.parentComponent.isAlive()) {\n            this.destroyBean(this.parentComponent);\n        }\n        super.destroy();\n    }\n\n    private createPanel(panelType: string): Component {\n        const { chartController, chartOptionsService } = this.chartMenuContext;\n        switch (panelType) {\n            case TabbedChartMenu.TAB_DATA:\n                return new ChartDataPanel(chartController, chartOptionsService);\n            case TabbedChartMenu.TAB_FORMAT:\n                return new FormatPanel(this.chartMenuContext);\n            default:\n                return new ChartSettingsPanel(chartController);\n        }\n    }\n}\n", "import {\n    _,\n    AutoScrollService,\n    Autowired,\n    ChartDataPanel as ChartDataPanelType,\n    ChartType,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ColState } from \"../../model/chartDataModel\";\nimport { ChartOptionsService } from \"../../services/chartOptionsService\";\nimport { ChartTranslationService } from '../../services/chartTranslationService';\nimport { CategoriesDataPanel } from \"./categoriesDataPanel\";\nimport { SeriesDataPanel } from \"./seriesDataPanel\";\nimport { SeriesChartTypePanel } from \"./seriesChartTypePanel\";\nimport { SwitchCategorySeriesDataPanel } from './switchCategorySeriesDataPanel';\nimport { getMaxNumCategories, getMaxNumSeries, supportsInvertedCategorySeries } from '../../utils/seriesTypeMapper';\nimport { ChartMenuService } from '../../services/chartMenuService';\n\nconst DefaultDataPanelDef: ChartDataPanelType = {\n    groups: [\n        { type: 'categories', isOpen: true },\n        { type: 'series', isOpen: true },\n        { type: 'seriesChartType', isOpen: true }\n    ]\n};\n\nexport class ChartDataPanel extends Component {\n    public static TEMPLATE = /* html */ `<div class=\"ag-chart-data-wrapper ag-scrollable-container\"></div>`;\n    \n    @Autowired('chartTranslationService') protected readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n\n    private autoScrollService: AutoScrollService;\n    private chartType?: ChartType;\n    private isSwitchCategorySeriesToggled = false;\n    private categoriesDataPanel?: CategoriesDataPanel;\n    private seriesDataPanel?: SeriesDataPanel;\n    private seriesChartTypePanel?: SeriesChartTypePanel;\n    private switchCategorySeriesPanel?: SwitchCategorySeriesDataPanel;\n\n    constructor(\n        private readonly chartController: ChartController,\n        private readonly chartOptionsService: ChartOptionsService,\n    ) {\n        super(ChartDataPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    public init() {\n        this.switchCategorySeriesPanel = this.addComponent(this.createManagedBean(new SwitchCategorySeriesDataPanel(\n            () => this.chartController.isCategorySeriesSwitched(),\n            (value: boolean) => this.chartController.switchCategorySeries(value)\n        )));\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n\n        this.createAutoScrollService();\n        this.updatePanels();\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_MODEL_UPDATE, this.updatePanels.bind(this));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, this.updatePanels.bind(this));\n    }\n\n    protected destroy(): void {\n        this.clearPanelComponents();\n        super.destroy();\n    }\n\n    private updatePanels() {\n        const currentChartType = this.chartType;\n        const isSwitchCategorySeriesToggledCurrent = this.isSwitchCategorySeriesToggled;\n        const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n\n        this.chartType = this.chartController.getChartType();\n        const hasChangedChartType = this.chartType !== currentChartType;\n\n        // Determine the state of the category/series toggle\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n        const hasChangedSwitchCategorySeries = (\n            this.isSwitchCategorySeriesToggled !== isSwitchCategorySeriesToggledCurrent\n        );\n\n        // Attempt to re-use existing panels where possible in order to maintain keyboard focus\n        if (this.canRefresh(currentChartType, this.chartType) && !hasChangedSwitchCategorySeries) {\n            this.categoriesDataPanel?.refresh(dimensionCols);\n            this.seriesDataPanel?.refresh(valueCols);\n            this.seriesChartTypePanel?.refresh(valueCols);\n        } else {\n            this.recreatePanels(dimensionCols, valueCols);\n        }\n\n        // Ensure the category/series toggle UI control is up-to-date\n        if (hasChangedChartType) {\n            this.switchCategorySeriesPanel?.setDisplayed(\n                supportsInvertedCategorySeries(this.chartType) && !this.chartMenuService.isLegacyFormat()\n            );\n        }\n        if (hasChangedSwitchCategorySeries) {\n            this.switchCategorySeriesPanel?.refresh();\n        }\n    }\n\n    private canRefresh(oldChartType: ChartType | undefined, newChartType: ChartType): boolean {\n        if (oldChartType === undefined) return false;\n        if (oldChartType === newChartType) {\n            return true;\n        }\n        const isCombo = (chartType: ChartType) => ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(chartType);\n        if (isCombo(oldChartType) && isCombo(newChartType)) {\n            return true;\n        }\n        return false;\n    }\n\n    private recreatePanels(dimensionCols: ColState[], valueCols: ColState[]): void {\n        this.clearPanelComponents();\n\n        const { chartType } = this;\n        if (!chartType) return;\n\n        const isCategorySeriesSwitched = this.chartController.isCategorySeriesSwitched();\n\n        const panels = this.getDataPanelDef().groups?.map(({ type, isOpen }): Component | null => {\n            if (type === (isCategorySeriesSwitched ? 'series' : 'categories')) {\n                return this.categoriesDataPanel = this.createBean(new CategoriesDataPanel(\n                    this.chartController,\n                    this.autoScrollService,\n                    this.getCategoryGroupTitle(isCategorySeriesSwitched),\n                    this.getCategoryGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                    dimensionCols,\n                    isOpen\n                ));\n            } else if (type === (isCategorySeriesSwitched ? 'categories' : 'series')) {\n                return this.seriesDataPanel = this.createBean(new SeriesDataPanel(\n                    this.chartController,\n                    this.autoScrollService,\n                    this.chartOptionsService,\n                    this.getSeriesGroupTitle(isCategorySeriesSwitched),\n                    this.getSeriesGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                    this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched),\n                    valueCols,\n                    isOpen\n                ));\n            } else if (type === 'seriesChartType') {\n                if (this.chartController.isComboChart()) {\n                    return this.seriesChartTypePanel = this.createBean(new SeriesChartTypePanel(\n                        this.chartController,\n                        valueCols,\n                        isOpen\n                    ));\n                }\n                return null;\n            } else {\n                _.warnOnce(`Invalid charts data panel group name supplied: '${type}'`);\n                return null;\n            }\n        }).filter((value): value is NonNullable<typeof value> => value != null);\n\n        if (panels) this.addPanelComponents(panels);\n    }\n\n    private addPanelComponents<T extends Component[]>(panels: T): T {\n        const fragment = document.createDocumentFragment();\n        for (const panel of panels) {\n            this.registerComponent(panel);\n            fragment.appendChild(panel.getGui());\n        }\n        const afterPanelElement = this.switchCategorySeriesPanel?.getGui();\n        this.getGui().insertBefore(fragment, afterPanelElement ?? null);\n        return panels;\n    }\n\n    private clearPanelComponents() {\n        const eGui = this.getGui();\n\n        if (this.categoriesDataPanel) eGui.removeChild(this.categoriesDataPanel.getGui());\n        if (this.seriesDataPanel) eGui.removeChild(this.seriesDataPanel.getGui());\n        if (this.seriesChartTypePanel) eGui.removeChild(this.seriesChartTypePanel.getGui());\n\n        this.categoriesDataPanel = this.destroyBean(this.categoriesDataPanel);\n        this.seriesDataPanel = this.destroyBean(this.seriesDataPanel);\n        this.seriesChartTypePanel = this.destroyBean(this.seriesChartTypePanel);\n    }\n\n    private createAutoScrollService(): void {\n        const eGui = this.getGui();\n        this.autoScrollService = new AutoScrollService({\n            scrollContainer: eGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => eGui.scrollTop,\n            setVerticalPosition: (position) => eGui.scrollTop = position\n        });\n    }\n\n    private addComponent<T extends Component>(component: T): T {\n        this.registerComponent(component);\n        this.getGui().appendChild(component.getGui());\n        return component;\n    }\n\n    private registerComponent<T extends Component>(component: T): void {\n        component.addCssClass('ag-chart-data-section');\n    }\n\n    private getDataPanelDef() {\n        return this.gridOptionsService.get('chartToolPanelsDef')?.dataPanel ?? DefaultDataPanelDef;\n    }\n\n    private getCategoryGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('seriesLabels');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'labels' : 'categories');\n    }\n\n    private getCategoryGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        if (isCategorySeriesSwitched) return false;\n        return getMaxNumCategories(chartType) !== 1;\n    }\n\n    private getSeriesGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('categoryValues');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'xyValues' : 'series');\n    }\n\n    private getSeriesGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        return this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched) !== 1;\n    }\n\n    private getSeriesGroupMaxSelection(chartType: ChartType, isCategorySeriesSwitched: boolean): number | undefined {\n        if (isCategorySeriesSwitched) return undefined;\n        return getMaxNumSeries(chartType);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    BeanStub,\n    CellRange,\n    CellRangeParams,\n    ChartModel,\n    ChartModelType,\n    ChartOptionsChanged,\n    ChartRangeSelectionChanged,\n    ChartType,\n    Events,\n    IRangeService,\n    PostConstruct,\n    SeriesChartType,\n    WithoutGridCommon,\n    AgChartThemeOverrides,\n    UpdateCrossFilterChartParams,\n    UpdateChartParams,\n    UpdateRangeChartParams,\n    IAggFunc\n} from \"@ag-grid-community/core\";\nimport { ChartDataModel, ChartModelParams, ColState } from \"./model/chartDataModel\";\nimport { ChartProxy, FieldDefinition, UpdateParams } from \"./chartProxies/chartProxy\";\nimport { _Theme, AgChartThemePalette, _ModuleSupport } from \"ag-charts-community\";\nimport {\n    ChartSeriesType,\n    getMaxNumCategories,\n    getMaxNumSeries,\n    getSeriesType,\n    supportsInvertedCategorySeries,\n} from './utils/seriesTypeMapper';\nimport { isStockTheme } from \"./chartProxies/chartTheme\";\nimport { UpdateParamsValidator } from \"./utils/UpdateParamsValidator\";\n\nexport const DEFAULT_THEMES = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];\n\nexport class ChartController extends BeanStub {\n\n    public static EVENT_CHART_UPDATED = 'chartUpdated';\n    public static EVENT_CHART_API_UPDATE = 'chartApiUpdate';\n    public static EVENT_CHART_MODEL_UPDATE = 'chartModelUpdate';\n    public static EVENT_CHART_TYPE_CHANGED = 'chartTypeChanged';\n    public static EVENT_CHART_SERIES_CHART_TYPE_CHANGED = 'chartSeriesChartTypeChanged';\n    public static EVENT_CHART_LINKED_CHANGED = 'chartLinkedChanged';\n\n    @Autowired('rangeService') private readonly rangeService: IRangeService;\n\n    private chartProxy: ChartProxy;\n\n    public constructor(private readonly model: ChartDataModel) {\n        super();\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.setChartRange();\n\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, event => {\n            if (event.id && event.id === this.model.chartId) {\n                this.updateForRangeChange();\n            }\n        });\n\n        if (this.model.unlinked) {\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.updateForGridChange.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n    }\n\n    public update(params: UpdateChartParams): boolean {\n        if (!this.validUpdateType(params)) return false;\n        const validationResult = UpdateParamsValidator.validateChartParams(params);\n        if (!validationResult) return false;\n        const validParams = validationResult === true ? params : validationResult;\n        this.applyValidatedChartParams(validParams);\n        return true;\n    }\n\n    private applyValidatedChartParams(params: UpdateChartParams): void {\n        const { chartId, chartType, chartThemeName, unlinkChart } = params;\n\n        // create a common base for the chart model parameters (this covers pivot chart updates)\n        const common = {\n            chartId: chartId,\n            pivotChart: this.model.pivotChart,\n            chartType: chartType ?? this.model.chartType,\n            chartThemeName: chartThemeName ?? this.model.chartThemeName,\n            unlinkChart: unlinkChart ?? this.model.unlinked,\n            cellRange: this.model.suppliedCellRange,\n            switchCategorySeries: this.model.switchCategorySeries,\n            aggFunc: this.model.aggFunc,\n            seriesChartTypes: undefined,\n            suppressChartRanges: false,\n            crossFiltering: false,\n        }\n\n        let chartModelParams: ChartModelParams = { ...common };\n\n        // modify the chart model properties based on the type of update\n        switch (params.type) {\n            case 'rangeChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = params.switchCategorySeries ?? this.model.switchCategorySeries;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.seriesChartTypes = params.seriesChartTypes;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                break;\n            case 'crossFilterChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = false;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.crossFiltering = true;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                break;\n            case 'pivotChartUpdate':\n                chartModelParams.switchCategorySeries = false;\n                break;\n        }\n\n        this.model.updateModel(chartModelParams);\n\n        // if the chart should be unlinked or chart ranges suppressed, remove all cell ranges; otherwise, set the chart range\n        const removeChartCellRanges = chartModelParams.unlinkChart || chartModelParams.suppressChartRanges;\n        removeChartCellRanges ? this.rangeService?.setCellRanges([]) : this.setChartRange();\n    }\n\n    public updateForGridChange(params?: { maintainColState?: boolean, setColsFromRange?: boolean }): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        const { maintainColState, setColsFromRange } = params ?? {};\n\n        this.model.updateCellRanges({ maintainColState, setColsFromRange });\n        this.model.updateData();\n        this.setChartRange();\n    }\n\n    public updateForDataChange(): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public updateForRangeChange(): void {\n        this.updateForGridChange({ setColsFromRange: true });\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateForPanelChange(updatedColState: ColState, resetOrder?: boolean): void {\n        this.model.updateCellRanges({ updatedColState, resetOrder });\n        this.model.updateData();\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateThemeOverrides(updatedOverrides: AgChartThemeOverrides): void {\n        this.chartProxy.updateThemeOverrides(updatedOverrides);\n    }\n\n    public getChartUpdateParams(updatedOverrides?: AgChartThemeOverrides): UpdateParams {\n        const selectedCols = this.getSelectedValueColState();\n        const fields = selectedCols.map(c => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.getChartData();\n        const selectedDimensions = this.getSelectedDimensions();\n\n        const params: UpdateParams = {\n            data,\n            grouping: this.isGrouping(),\n            categories: selectedDimensions.map((selectedDimension) => ({\n                id: selectedDimension.colId,\n                name: selectedDimension.displayName!,\n                chartDataType: this.model.getChartDataType(selectedDimension.colId)\n            })),\n            fields,\n            chartId: this.getChartId(),\n            getCrossFilteringContext: () => ({ lastSelectedChartId: 'xxx' }), //this.params.crossFilteringContext, //TODO\n            seriesChartTypes: this.getSeriesChartTypes(),\n            updatedOverrides: updatedOverrides\n        };\n\n        return (this.isCategorySeriesSwitched() ? this.invertCategorySeriesParams(params) : params);\n    }\n\n    private invertCategorySeriesParams(\n        params: UpdateParams,\n    ): UpdateParams {\n        const [category] = params.categories;\n        // Create a single synthetic output category that will contain the series name values\n        const categories = [{ id: ChartDataModel.DEFAULT_CATEGORY, name: '' }];\n        // Create an output series corresponding to each row in the input data\n        const fields = params.data.map((value, index): FieldDefinition => {\n            const categoryKey = `${category.id}:${index}`;\n            const categoryValue = value[category.id];\n            const seriesLabel = categoryValue == null ? '' : String(categoryValue);\n            return { colId: categoryKey, displayName: seriesLabel };\n        });\n        // Create an output data row corresponding to each selected series column\n        const data = params.fields.map((field) => {\n            // Create a new output row labeled with the series column name\n            const row: Record<PropertyKey, any> = {\n                [ChartDataModel.DEFAULT_CATEGORY]: field.displayName,\n            };\n            // Append fields corresponding to each row in the input data\n            for (const [index, value] of params.data.entries()) {\n                const categoryKey = `${category.id}:${index}`;\n                const seriesLabelValue = value[field.colId];\n                row[categoryKey] = seriesLabelValue;\n            }\n            return row;\n        });\n        return {\n            ...params,\n            categories,\n            fields,\n            data,\n        };\n    }\n\n    public getChartModel(): ChartModel {\n        const modelType: ChartModelType = this.model.pivotChart ? 'pivot' : 'range';\n\n        const seriesChartTypes = this.isComboChart() ? this.model.comboChartModel.seriesChartTypes : undefined;\n\n        return {\n            modelType,\n            chartId: this.model.chartId,\n            chartType: this.model.chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n            chartPalette: this.chartProxy.getChartPalette(),\n            cellRange: this.getCellRangeParams(),\n            switchCategorySeries: this.model.switchCategorySeries,\n            suppressChartRanges: this.model.suppressChartRanges,\n            aggFunc: this.model.aggFunc,\n            unlinkChart: this.model.unlinked,\n            seriesChartTypes\n        };\n    }\n\n    public getChartId(): string {\n        return this.model.chartId;\n    }\n\n    public getChartData(): any[] {\n        return this.model.chartData;\n    }\n\n    public getChartType(): ChartType {\n        return this.model.chartType;\n    }\n\n    public setChartType(chartType: ChartType): void {\n        this.updateMultiSeriesAndCategory(this.model.chartType, chartType);\n\n        this.model.chartType = chartType;\n\n        this.model.comboChartModel.updateSeriesChartTypes();\n\n        // Reset the inverted category/series toggle whenever the chart type changes\n        this.model.switchCategorySeries = false;\n\n        this.raiseChartModelUpdateEvent();\n        this.raiseChartOptionsChangedEvent();\n    }\n\n    public isCategorySeriesSwitched(): boolean {\n        return this.model.switchCategorySeries;\n    }\n\n    public switchCategorySeries(inverted: boolean): void {\n        if (!supportsInvertedCategorySeries(this.getChartType())) return;\n        this.model.switchCategorySeries = inverted;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public getAggFunc(): string | IAggFunc | undefined {\n        return this.model.aggFunc;\n    }\n\n    public setAggFunc(value: string | IAggFunc | undefined, silent?: boolean): void {\n        if (this.model.aggFunc === value) return;\n        this.model.aggFunc = value;\n        if (silent) return;\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    private updateMultiSeriesAndCategory(previousChartType: ChartType, chartType: ChartType): void {\n        // If we are changing from a multi-category/series chart type to a single-category/series chart type,\n        // ensure that only the allowed number of selected category/series column remain selected\n        const updateForMax = (columns: ColState[], maxNum: number) => {\n            let numSelected = 0;\n            for (const colState of columns) {\n                if (!colState.selected) continue;\n                if (numSelected >= maxNum) {\n                    colState.selected = false;\n                } else {\n                    numSelected++;\n                }\n            }\n            if (numSelected === 0) {\n                columns[0].selected = true;\n            }\n        }\n\n        const maxNumDimensions = getMaxNumCategories(chartType);\n        const maxNumSeries = getMaxNumSeries(chartType);\n        const updateDimensionColState = maxNumDimensions != null && (getMaxNumCategories(previousChartType) ?? 100) > (maxNumDimensions ?? 100);\n        const updateValueColState = maxNumSeries != null && (getMaxNumSeries(previousChartType) ?? 100) > (maxNumSeries ?? 100);\n        if (updateDimensionColState) {\n            updateForMax(this.model.dimensionColState, maxNumDimensions);\n        }\n        if (updateValueColState) {\n            updateForMax(this.model.valueColState, maxNumSeries);\n        }\n        if (updateDimensionColState || updateValueColState) {\n            this.model.resetCellRanges(updateDimensionColState, updateValueColState);\n            this.setChartRange(true);\n        }\n    }\n\n    public setChartThemeName(chartThemeName: string, silent?: boolean): void {\n        this.model.chartThemeName = chartThemeName;\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getChartThemeName(): string {\n        return this.model.chartThemeName;\n    }\n\n    public isPivotChart(): boolean {\n        return this.model.pivotChart;\n    }\n\n    public isPivotMode(): boolean {\n        return this.model.isPivotMode();\n    }\n\n    public isGrouping(): boolean {\n        return this.model.isGrouping();\n    }\n\n    public isCrossFilterChart(): boolean {\n        return this.model.crossFiltering;\n    }\n\n    public getThemeNames(): string[] {\n        return this.gridOptionsService.get('chartThemes') || DEFAULT_THEMES;\n    }\n\n    public getThemes(): _Theme.ChartTheme[] {\n        const themeNames = this.getThemeNames();\n\n        return themeNames.map((themeName) => {\n            const stockTheme = isStockTheme(themeName);\n            const theme = stockTheme ? themeName : this.chartProxy.lookupCustomChartTheme(themeName);\n            return _Theme.getChartTheme(theme);\n        });\n    }\n\n    public getPalettes(): AgChartThemePalette[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.palette;\n        });\n    }\n\n    public getThemeTemplateParameters(): {\n        extensions: Map<any, any>;\n        properties: Map<any, any>;\n    }[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.getTemplateParameters();\n        });\n    }\n\n    public getValueColState(): ColState[] {\n        return this.model.valueColState.map(this.displayNameMapper.bind(this));\n    }\n\n    public getSelectedValueColState(): { colId: string; displayName: string | null; }[] {\n        return this.getValueColState().filter(cs => cs.selected);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.model.getSelectedDimensions();\n    }\n\n    private displayNameMapper(col: ColState): ColState {\n        const columnNames = this.model.columnNames[col.colId];\n        col.displayName = columnNames ? columnNames.join(' - ') : this.model.getColDisplayName(col.column!);\n        return col;\n    }\n\n    public getColStateForMenu(): { dimensionCols: ColState[]; valueCols: ColState[]; } {\n        return { dimensionCols: this.model.dimensionColState, valueCols: this.getValueColState() };\n    }\n\n    public setChartRange(silent = false): void {\n        if (this.rangeService && !this.model.suppressChartRanges && !this.model.unlinked) {\n            this.rangeService.setCellRanges(this.getCellRanges());\n        }\n\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n        }\n    }\n\n    public detachChartRange(): void {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.unlinked = !this.model.unlinked;\n\n        if (this.model.unlinked) {\n            // remove range from grid\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        } else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n        this.dispatchEvent({ type: ChartController.EVENT_CHART_LINKED_CHANGED });\n    }\n\n    public setChartProxy(chartProxy: ChartProxy): void {\n        this.chartProxy = chartProxy;\n    }\n\n    public getChartProxy(): ChartProxy {\n        return this.chartProxy;\n    }\n\n    public isActiveXYChart(): boolean {\n        return _.includes(['scatter', 'bubble'], this.getChartType());\n    }\n\n    public isChartLinked(): boolean {\n        return !this.model.unlinked;\n    }\n\n    public customComboExists(): boolean {\n        const savedCustomSeriesChartTypes = this.model.comboChartModel.savedCustomSeriesChartTypes;\n        return savedCustomSeriesChartTypes && savedCustomSeriesChartTypes.length > 0;\n    }\n\n    public getSeriesChartTypes(): SeriesChartType[] {\n        return this.model.comboChartModel.seriesChartTypes;\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return this.model.isComboChart(chartType);\n    }\n\n    public updateSeriesChartType(colId: string, chartType?: ChartType, secondaryAxis?: boolean): void {\n        const seriesChartType = this.model.comboChartModel.seriesChartTypes.find(s => s.colId === colId);\n        if (seriesChartType) {\n\n            // once a combo chart has been modified it is now a 'customCombo' chart\n            const updateChartType = this.model.chartType !== 'customCombo';\n            if (updateChartType) {\n                this.model.chartType = 'customCombo';\n            }\n\n            const prevSeriesChartType = seriesChartType.chartType;\n            if (chartType != null) {\n                seriesChartType.chartType = chartType;\n            }\n\n            if (secondaryAxis != null) {\n                seriesChartType.secondaryAxis = secondaryAxis;\n            }\n\n            // replace existing custom series types with this latest version\n            this.model.comboChartModel.savedCustomSeriesChartTypes = this.model.comboChartModel.seriesChartTypes;\n\n            // series chart types can be modified, i.e. column chart types should be moved to primary axis\n            this.model.comboChartModel.updateSeriesChartTypes();\n\n            this.updateForDataChange();\n\n            if (updateChartType) {\n                // update the settings panel by raising an EVENT_CHART_TYPE_CHANGED event\n                this.dispatchEvent({\n                    type: ChartController.EVENT_CHART_TYPE_CHANGED\n                });\n            }\n\n            if (prevSeriesChartType !== chartType) {\n                // update the format panel by raising an EVENT_CHART_SERIES_CHART_TYPE_CHANGED event\n                this.dispatchEvent({\n                    type: ChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED\n                });\n            }\n\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getActiveSeriesChartTypes(): SeriesChartType[] {\n        const selectedColIds = this.getSelectedValueColState().map(c => c.colId);\n        return this.getSeriesChartTypes().filter(s => selectedColIds.includes(s.colId));\n    }\n\n    public getChartSeriesTypes(chartType?: ChartType): ChartSeriesType[] {\n        const targetChartType = chartType ?? this.getChartType();\n        const supportedComboSeriesTypes: ChartSeriesType[] = ['line', 'bar', 'area'];\n        return this.isComboChart(targetChartType) ? supportedComboSeriesTypes : [getSeriesType(targetChartType)];\n    }\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    private getCellRanges(): CellRange[] {\n        return [this.model.dimensionCellRange!, this.model.valueCellRange!].filter(r => r);\n    }\n\n    private createCellRange(params: UpdateRangeChartParams | UpdateCrossFilterChartParams) {\n        return params.cellRange && this.rangeService?.createCellRangeFromCellRangeParams(params.cellRange as CellRangeParams);\n    }\n\n    private validUpdateType(params: UpdateChartParams): boolean {\n        if (!params.type) {\n            console.warn(`AG Grid - Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`);\n            return false;\n        }\n\n        const chartTypeMap: Record<string, () => boolean> = {\n            'Range Chart': () => !this.isPivotChart() && !this.isCrossFilterChart(),\n            'Pivot Chart': () => this.isPivotChart(),\n            'Cross Filter Chart': () => this.isCrossFilterChart()\n        };\n\n        const currentChartType = Object.keys(chartTypeMap).find(type => chartTypeMap[type]()) ?? 'Range Chart';\n\n        const valid = params.type ===\n            `${currentChartType[0].toLowerCase()}${currentChartType.slice(1).replace(/ /g, '')}Update`;\n\n        if (!valid) {\n            console.warn(`AG Grid - Unable to update chart as a '${params.type}' update type is not permitted on a ${currentChartType}.`);\n        }\n        return valid;\n    }\n\n    private getCellRangeParams(): CellRangeParams {\n        const cellRanges = this.getCellRanges();\n        const firstCellRange = cellRanges[0];\n        const startRow = (firstCellRange && firstCellRange.startRow) || null;\n        const endRow = (firstCellRange && firstCellRange.endRow) || null;\n\n        return {\n            rowStartIndex: startRow && startRow.rowIndex,\n            rowStartPinned: startRow && startRow.rowPinned,\n            rowEndIndex: endRow && endRow.rowIndex,\n            rowEndPinned: endRow && endRow.rowPinned,\n            columns: cellRanges.reduce((columns, value) => columns.concat(value.columns.map(c => c.getId())), [] as string[])\n        };\n    }\n\n    private raiseChartModelUpdateEvent(): void {\n        const event = {\n            type: ChartController.EVENT_CHART_MODEL_UPDATE\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    public raiseChartUpdatedEvent(): void {\n        const event = {\n            type: ChartController.EVENT_CHART_UPDATED\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    public raiseChartApiUpdateEvent(): void {\n        const event = {\n            type: ChartController.EVENT_CHART_API_UPDATE\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const { chartId, chartType } = this.getChartModel();\n        const event: WithoutGridCommon<ChartOptionsChanged> = {\n            type: Events.EVENT_CHART_OPTIONS_CHANGED,\n            chartId,\n            chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides()\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private raiseChartRangeSelectionChangedEvent(): void {\n        const event: WithoutGridCommon<ChartRangeSelectionChanged> = {\n            type: Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n            id: this.model.chartId,\n            chartId: this.model.chartId,\n            cellRange: this.getCellRangeParams()\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        if (this.rangeService) {\n            this.rangeService.setCellRanges([]);\n        }\n    }\n}\n\n", "import {\n    _,\n    Autowired,\n    BeanStub,\n    CellRange,\n    CellRangeType,\n    ChartType,\n    Column,\n    IAggFunc,\n    IRangeService,\n    PostConstruct,\n    SeriesChartType,\n} from \"@ag-grid-community/core\";\nimport { ChartDatasource, ChartDatasourceParams } from \"../datasource/chartDatasource\";\nimport { ChartTranslationService } from '../services/chartTranslationService';\nimport { ChartColumnService } from \"../services/chartColumnService\";\nimport { ComboChartModel } from \"./comboChartModel\";\nimport { getMaxNumSeries, isHierarchical } from \"../utils/seriesTypeMapper\";\n\nexport interface ColState {\n    column?: Column;\n    colId: string;\n    displayName: string | null;\n    selected?: boolean;\n    order: number;\n}\n\nexport interface ChartModelParams {\n    chartId: string;\n    pivotChart: boolean;\n    chartType: ChartType;\n    chartThemeName: string;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    cellRange: CellRange;\n    suppressChartRanges: boolean;\n    unlinkChart?: boolean;\n    crossFiltering?: boolean;\n    seriesChartTypes?: SeriesChartType[];\n}\n\nexport class ChartDataModel extends BeanStub {\n\n    public static DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n\n    @Autowired('rangeService') private readonly rangeService: IRangeService;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    public readonly params: ChartModelParams;\n\n    // this is used to associate chart ranges with charts\n    public readonly chartId: string;\n\n    public suppressChartRanges: boolean;\n    public switchCategorySeries: boolean;\n    public aggFunc?: string | IAggFunc;\n    public pivotChart: boolean;\n\n    public chartType: ChartType;\n    public chartThemeName: string;\n    public unlinked = false;\n    public chartData: any[] = [];\n    public valueColState: ColState[] = [];\n    public dimensionColState: ColState[] = [];\n    public columnNames: { [p: string]: string[]; } = {};\n\n    public valueCellRange?: CellRange;\n    public dimensionCellRange?: CellRange;\n\n    public comboChartModel: ComboChartModel;\n    private chartColumnService: ChartColumnService;\n    private datasource: ChartDatasource;\n\n    public referenceCellRange: CellRange;\n    public suppliedCellRange: CellRange;\n\n    public crossFiltering = false;\n\n    private grouping = false;\n\n    public constructor(params: ChartModelParams) {\n        super();\n\n        this.params = params;\n        this.chartId = params.chartId;\n        this.chartType = params.chartType;\n        this.pivotChart = params.pivotChart;\n        this.chartThemeName = params.chartThemeName;\n        this.switchCategorySeries = !!params.switchCategorySeries;\n        this.aggFunc = params.aggFunc;\n        this.referenceCellRange = params.cellRange;\n        this.suppliedCellRange = params.cellRange;\n        this.suppressChartRanges = params.suppressChartRanges;\n        this.unlinked = !!params.unlinkChart;\n        this.crossFiltering = !!params.crossFiltering;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.datasource = this.createManagedBean(new ChartDatasource());\n        this.chartColumnService = this.createManagedBean(new ChartColumnService());\n        this.comboChartModel = this.createManagedBean(new ComboChartModel(this));\n        this.updateCellRanges({ setColsFromRange: true });\n        this.updateData();\n    }\n\n    public updateModel(params: ChartModelParams): void {\n        const {\n            cellRange,\n            chartType,\n            pivotChart,\n            chartThemeName,\n            switchCategorySeries,\n            aggFunc,\n            suppressChartRanges,\n            unlinkChart,\n            crossFiltering,\n            seriesChartTypes\n        } = params;\n\n        if (cellRange !== this.suppliedCellRange) {\n            this.dimensionCellRange = undefined;\n            this.valueCellRange = undefined;\n        }\n\n        this.chartType = chartType;\n        this.pivotChart = pivotChart;\n        this.chartThemeName = chartThemeName;\n        this.switchCategorySeries = !!switchCategorySeries;\n        this.aggFunc = aggFunc;\n        this.referenceCellRange = cellRange;\n        this.suppliedCellRange = cellRange;\n        this.suppressChartRanges = suppressChartRanges;\n        this.unlinked = !!unlinkChart;\n        this.crossFiltering = !!crossFiltering;\n\n        this.updateSelectedDimensions(cellRange?.columns);\n        this.updateCellRanges({ setColsFromRange: true });\n\n        const shouldUpdateComboModel = this.isComboChart() || seriesChartTypes;\n        if (shouldUpdateComboModel) {\n            this.comboChartModel.update(seriesChartTypes);\n        }\n\n        if (!this.unlinked) {\n            this.updateData();\n        }\n    }\n\n    public updateCellRanges(params?: { updatedColState?: ColState, resetOrder?: boolean, maintainColState?: boolean, setColsFromRange?: boolean }): void {\n        const { updatedColState, resetOrder, maintainColState, setColsFromRange } = params ?? {};\n        if (this.valueCellRange) {\n            this.referenceCellRange = this.valueCellRange;\n        }\n\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n\n        if (updatedColState) {\n            this.updateColumnState(updatedColState, resetOrder);\n        }\n\n        this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n        this.setValueCellRange(valueCols, allColsFromRanges, setColsFromRange);\n\n        if (!updatedColState && !maintainColState) {\n            this.resetColumnState();\n            // dimension / category cell range could be out of sync after resetting column state when row grouping\n            this.syncDimensionCellRange();\n        }\n\n        this.comboChartModel.updateSeriesChartTypes();\n    }\n\n    public updateData(): void {\n        const { startRow, endRow } = this.getRowIndexes();\n\n        if (this.pivotChart) {\n            this.resetColumnState();\n        }\n\n        this.grouping = this.isGrouping();\n\n        const params: ChartDatasourceParams = {\n            aggFunc: this.aggFunc,\n            dimensionCols: this.getSelectedDimensions(),\n            grouping: this.grouping,\n            pivoting: this.isPivotActive(),\n            crossFiltering: this.crossFiltering,\n            valueCols: this.getSelectedValueCols(),\n            startRow,\n            endRow,\n            isScatter: _.includes(['scatter', 'bubble'], this.chartType)\n        };\n\n        const { chartData, columnNames } = this.datasource.getData(params);\n\n        this.chartData = chartData;\n        this.columnNames = columnNames;\n    }\n\n    public isGrouping(): boolean {\n        const usingTreeData = this.gridOptionsService.get('treeData');\n        const groupedCols = usingTreeData ? null : this.chartColumnService.getRowGroupColumns();\n        const isGroupActive = usingTreeData || (groupedCols && groupedCols.length > 0);\n\n        // charts only group when the selected category is a group column\n        const colIds = this.getSelectedDimensions().map(({ colId }) => colId);\n        const displayedGroupCols = this.chartColumnService.getGroupDisplayColumns();\n        const groupDimensionSelected = displayedGroupCols.map(col => col.getColId()).some(id => colIds.includes(id));\n        return !!isGroupActive && groupDimensionSelected;\n    }\n\n    public getSelectedValueCols(): Column[] {\n        return this.valueColState.filter(cs => cs.selected).map(cs => cs.column!);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.dimensionColState.filter(cs => cs.selected);\n    }\n\n    public getColDisplayName(col: Column): string | null {\n        return this.chartColumnService.getColDisplayName(col);\n    }\n\n    public isPivotMode(): boolean {\n        return this.chartColumnService.isPivotMode();\n    }\n\n    public getChartDataType(colId: string): string | undefined {\n        const column = this.chartColumnService.getColumn(colId);\n        return column ? column.getColDef().chartDataType : undefined;\n    }\n\n    private isPivotActive(): boolean {\n        return this.chartColumnService.isPivotActive();\n    }\n\n    private createCellRange(type: CellRangeType, ...columns: Column[]): CellRange {\n        return {\n            id: this.chartId, // set range ID to match chart ID so we can identify changes to the ranges for this chart\n            startRow: this.referenceCellRange.startRow,\n            endRow: this.referenceCellRange.endRow,\n            columns,\n            startColumn: type === CellRangeType.DIMENSION ? columns[0] : this.referenceCellRange.startColumn,\n            type\n        };\n    }\n\n    private getAllColumnsFromRanges(): Set<Column> {\n        if (this.pivotChart) {\n            return _.convertToSet(this.chartColumnService.getAllDisplayedColumns());\n        }\n\n        const columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n\n        if (this.dimensionCellRange) {\n            columns.push(...this.dimensionCellRange.columns);\n        }\n\n        if (this.valueCellRange) {\n            columns.push(...this.valueCellRange.columns);\n        }\n\n        return _.convertToSet(columns);\n    }\n\n    private getRowIndexes(): { startRow: number; endRow: number; } {\n        let startRow = 0, endRow = 0;\n        const { rangeService, valueCellRange, dimensionCellRange } = this;\n\n        // Not all chart types require a value series (e.g. hierarchical charts),\n        // so fall back to using the dimension cell range for inferring row indices\n        const cellRange = valueCellRange || dimensionCellRange;\n\n        if (rangeService && cellRange) {\n            startRow = rangeService.getRangeStartRow(cellRange).rowIndex;\n\n            // when the last row the cell range is a pinned 'bottom' row, the `endRow` index is set to -1 which results\n            // in the ChartDatasource processing all non pinned rows from the `startRow` index.\n            const endRowPosition = rangeService.getRangeEndRow(cellRange);\n            endRow = endRowPosition.rowPinned === 'bottom' ? -1 : endRowPosition.rowIndex;\n        }\n\n        return { startRow, endRow };\n    }\n\n    private resetColumnState(): void {\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allCols = this.getAllColumnsFromRanges();\n        const isInitialising = this.valueColState.length < 1;\n\n        this.dimensionColState = [];\n        this.valueColState = [];\n\n        const supportsMultipleDimensions = isHierarchical(this.chartType);\n        let hasSelectedDimension = false;\n        let order = 1;\n\n        const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n\n        dimensionCols.forEach(column => {\n            const isAutoGroupCol = column.getColId() === 'ag-Grid-AutoColumn';\n\n            let selected = false;\n            if (this.crossFiltering && this.aggFunc) {\n                if (aggFuncDimension.getColId() === column.getColId()) {\n                    selected = true;\n                }\n            } else {\n                selected = isAutoGroupCol ? true : (!hasSelectedDimension || supportsMultipleDimensions) && allCols.has(column);\n            }\n\n            this.dimensionColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected,\n                order: order++\n            });\n\n            if (selected) {\n                hasSelectedDimension = true;\n            }\n        });\n\n        const defaultCategory = {\n            colId: ChartDataModel.DEFAULT_CATEGORY,\n            displayName: this.chartTranslationService.translate('defaultCategory'),\n            selected: !hasSelectedDimension, // if no dimensions in range select the default\n            order: 0\n        };\n\n        this.dimensionColState.unshift(defaultCategory);\n\n        const valueColumnsFromReferenceRange = this.referenceCellRange.columns.filter(c => valueCols.has(c));\n\n        valueCols.forEach(column => {\n            // first time the value cell range is set, preserve the column order from the supplied range\n            if (isInitialising && _.includes(this.referenceCellRange.columns, column)) {\n                column = valueColumnsFromReferenceRange.shift()!;\n            }\n\n            this.valueColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected: allCols.has(column),\n                order: order++\n            });\n        });\n    }\n\n    private updateColumnState(updatedCol: ColState, resetOrder?: boolean): void {\n        const idsMatch = (cs: ColState) => cs.colId === updatedCol.colId;\n        const { dimensionColState, valueColState } = this;\n\n        // Determine whether the specified column is a dimension or value column\n        const matchedDimensionColState = dimensionColState.find(idsMatch);\n        const matchedValueColState = valueColState.find(idsMatch);\n\n        if (matchedDimensionColState) {\n            // For non-hierarchical chart types, only one dimension can be selected\n            const supportsMultipleDimensions = isHierarchical(this.chartType);\n            if (!supportsMultipleDimensions) {\n                // Determine which column should end up selected, if any\n                const selectedColumnState = updatedCol.selected\n                    ? matchedDimensionColState\n                    : dimensionColState\n                        .filter((cs) => cs !== matchedDimensionColState)\n                        .find(({ selected }) => selected);\n                // Update the selection state of all dimension columns\n                dimensionColState.forEach(cs => cs.selected = (cs === selectedColumnState));\n            } else {\n                // Update the selection state of the specified dimension column\n                matchedDimensionColState.selected = updatedCol.selected;\n            }\n        } else if (matchedValueColState) {\n            // Update the selection state of the specified value column\n            matchedValueColState.selected = updatedCol.selected;\n        }\n\n        const allColumns = [...dimensionColState, ...valueColState];\n        const orderedColIds: string[] = [];\n\n        if (!resetOrder) {\n            // calculate new order\n            allColumns.forEach((col: ColState, i: number) => {\n                if (i === updatedCol.order) {\n                    orderedColIds.push(updatedCol.colId);\n                }\n\n                if (col.colId !== updatedCol.colId) {\n                    orderedColIds.push(col.colId);\n                }\n            });\n\n            // update col state with new order\n            allColumns.forEach(col => {\n                const order = orderedColIds.indexOf(col.colId);\n                col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n            });\n        }\n\n        this.reorderColState();\n    }\n\n    private reorderColState(): void {\n        const ascColStateOrder = (a: ColState, b: ColState) => a.order - b.order;\n        this.dimensionColState.sort(ascColStateOrder);\n        this.valueColState.sort(ascColStateOrder);\n    }\n\n    private setDimensionCellRange(dimensionCols: Set<Column>, colsInRange: Set<Column>, updatedColState?: ColState): void {\n        this.dimensionCellRange = undefined;\n        const supportsMultipleDimensions = isHierarchical(this.chartType);\n\n        if (!updatedColState && !this.dimensionColState.length) {\n            const selectedCols = new Array<Column>();\n            // use first dimension column in range by default, or all dimension columns for hierarchical charts\n            dimensionCols.forEach(col => {\n                if ((selectedCols.length > 0 && !supportsMultipleDimensions) || !colsInRange.has(col)) { return; }\n                selectedCols.push(col);\n            });\n            if (selectedCols.length > 0) {\n                this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n            }\n            return;\n        }\n\n        let selectedDimensionColStates = updatedColState ? [updatedColState] : [];\n        if (this.crossFiltering && this.aggFunc) {\n            const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n            selectedDimensionColStates = this.dimensionColState.filter(cs => cs.colId === aggFuncDimension.getColId());\n        } else if (\n            supportsMultipleDimensions ||\n            selectedDimensionColStates.length === 0 ||\n            selectedDimensionColStates.some(({ column }) => !column || !dimensionCols.has(column))\n        ) {\n            selectedDimensionColStates = this.dimensionColState.filter(cs => cs.selected);\n        }\n\n        const isDefaultCategory = selectedDimensionColStates.length === 1\n            ? selectedDimensionColStates[0].colId === ChartDataModel.DEFAULT_CATEGORY\n            : false;\n        const selectedColumns = selectedDimensionColStates.map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedColumns.length > 0 && !isDefaultCategory) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedColumns);\n        }\n    }\n\n    private setValueCellRange(valueCols: Set<Column>, colsInRange: Set<Column>, setColsFromRange?: boolean): void {\n        this.valueCellRange = undefined;\n\n        const selectedValueCols: Column[] = [];\n\n        const maxSelection = getMaxNumSeries(this.chartType);\n        let numSelected = 0;\n\n        valueCols.forEach(col => {\n            if (setColsFromRange) {\n                if ((maxSelection == null || numSelected < maxSelection) && colsInRange.has(col)) {\n                    selectedValueCols.push(col);\n                    numSelected++;\n                }\n            } else {\n                if (this.valueColState.some(colState => colState.selected && colState.colId === col.getColId())) {\n                    selectedValueCols.push(col);\n                }\n            }\n        });\n\n        if (selectedValueCols.length > 0) {\n            let orderedColIds: string[] = [];\n\n            if (this.valueColState.length > 0) {\n                orderedColIds = this.valueColState.map(c => c.colId);\n            } else {\n                colsInRange.forEach(c => orderedColIds.push(c.getColId()));\n            }\n\n            selectedValueCols.sort((a, b) => orderedColIds.indexOf(a.getColId()) - orderedColIds.indexOf(b.getColId()));\n\n            this.valueCellRange = this.createCellRange(CellRangeType.VALUE, ...selectedValueCols);\n        }\n    }\n\n    public resetCellRanges(dimension: boolean, value: boolean): void {\n        if (!dimension && !value) { return; }\n        const { dimensionCols, valueCols} = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n        if (dimension) {\n            this.setDimensionCellRange(dimensionCols, allColsFromRanges);\n        }\n        if (value) {\n            this.setValueCellRange(valueCols, allColsFromRanges);\n        }\n    }\n\n    private updateSelectedDimensions(columns: Column[]): void {\n        const colIdSet = new Set(columns.map((column) => column.getColId()));\n\n        // For non-hierarchical chart types, only one dimension can be selected\n        const supportsMultipleDimensions = isHierarchical(this.chartType);\n        if (!supportsMultipleDimensions) {\n            // Determine which column should end up selected, if any\n            // if no dimension found in supplied columns use the default category (always index = 0)\n            const foundColState = this.dimensionColState.find((colState) => colIdSet.has(colState.colId)) || this.dimensionColState[0];\n            const selectedColumnId = foundColState.colId;\n            // Update the selection state of all dimension columns\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: colState.colId === selectedColumnId,\n            }));\n        } else {\n            // Update the selection state of all dimension columns, selecting only the provided columns from the chart model\n            const foundColStates = this.dimensionColState.filter((colState) => colIdSet.has(colState.colId));\n            const selectedColumnIds = new Set(foundColStates.map((colState) => colState.colId));\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: selectedColumnIds.has(colState.colId),\n            }));\n        }\n    }\n\n    private syncDimensionCellRange() {\n        const selectedDimensions = this.getSelectedDimensions();\n        if (selectedDimensions.length === 0) return;\n        const selectedCols = selectedDimensions.map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedCols.length > 0) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n        }\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(chartType ?? this.chartType);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    BeanStub,\n    CellRange,\n    Column,\n    ColumnGroup,\n    ColumnModel,\n    IAggFunc,\n    IAggregationStage,\n    IClientSideRowModel,\n    IRowModel,\n    ModuleNames,\n    ModuleRegistry,\n    Optional,\n    RowNode,\n    RowNodeSorter,\n    SortController,\n    ValueService,\n} from \"@ag-grid-community/core\";\nimport { ChartDataModel, ColState } from \"../model/chartDataModel\";\n\nexport interface ChartDatasourceParams {\n    dimensionCols: ColState[];\n    grouping: boolean;\n    pivoting: boolean;\n    crossFiltering: boolean;\n    valueCols: Column[];\n    startRow: number;\n    endRow: number;\n    isScatter: boolean;\n    aggFunc?: string | IAggFunc;\n    referenceCellRange?: CellRange;\n}\n\ninterface IData {\n    chartData: any[];\n    columnNames: { [key: string]: string[]; };\n}\n\nexport class ChartDatasource extends BeanStub {\n    @Autowired('rowModel') private readonly gridRowModel: IRowModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('rowNodeSorter') private readonly rowNodeSorter: RowNodeSorter;\n    @Autowired('sortController') private sortController: SortController;\n    @Optional('aggregationStage') private readonly aggregationStage: IAggregationStage;\n\n    public getData(params: ChartDatasourceParams): IData {\n        if (params.crossFiltering) {\n            if (params.grouping) {\n                console.warn(\"AG Grid: crossing filtering with row grouping is not supported.\");\n                return {chartData: [], columnNames: {}};\n            }\n\n            if (!this.gridOptionsService.isRowModelType('clientSide')) {\n                console.warn(\"AG Grid: crossing filtering is only supported in the client side row model.\");\n                return {chartData: [], columnNames: {}};\n            }\n        }\n\n        const isServerSide = this.gridOptionsService.isRowModelType('serverSide');\n        if (isServerSide && params.pivoting) {\n            this.updatePivotKeysForSSRM();\n        }\n\n        const result = this.extractRowsFromGridRowModel(params);\n        result.chartData = this.aggregateRowsByDimension(params, result.chartData);\n        return result;\n    }\n\n    private extractRowsFromGridRowModel(params: ChartDatasourceParams): IData {\n        let extractedRowData: any[] = [];\n        const columnNames: { [key: string]: string[]; } = {};\n\n        // maps used to keep track of expanded groups that need to be removed\n        const groupNodeIndexes: { [key: string]: number; } = {};\n        const groupsToRemove: { [key: string]: number; } = {};\n\n        // only used when cross filtering\n        let filteredNodes: { [key: string]: RowNode; } = {};\n        let allRowNodes: RowNode[] = [];\n\n        let numRows;\n        if (params.crossFiltering) {\n            filteredNodes = this.getFilteredRowNodes();\n            allRowNodes = this.getAllRowNodes();\n            numRows = allRowNodes.length;\n        } else {\n            // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n            // the last displayed row, not where the range ends.\n            const modelLastRow = this.gridRowModel.getRowCount() - 1;\n            const rangeLastRow = params.endRow >= 0 ? Math.min(params.endRow, modelLastRow) : modelLastRow;\n            numRows = rangeLastRow - params.startRow + 1;\n        }\n\n        for (let i = 0; i < numRows; i++) {\n            const data: any = {};\n\n            const rowNode = params.crossFiltering ? allRowNodes[i] : this.gridRowModel.getRow(i + params.startRow)!;\n\n            // first get data for dimensions columns\n            params.dimensionCols.forEach(col => {\n                const colId = col.colId;\n                const column = this.columnModel.getGridColumn(colId);\n\n                if (column) {\n                    const valueObject = this.valueService.getValue(column, rowNode);\n\n                    // when grouping we also need to build up multi category labels for charts\n                    if (params.grouping) {\n                        const valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';\n\n                        // traverse parents to extract group label path\n                        const labels = ChartDatasource.getGroupLabels(rowNode, valueString);\n\n                        data[colId] = {\n                            labels, toString: function() {\n                                return this.labels.filter((l: string) => !!l).reverse().join(' - ');\n                            }\n                        };\n\n                        // keep track of group node indexes, so they can be padded when other groups are expanded\n                        if (rowNode.group) {\n                            groupNodeIndexes[labels.toString()] = i;\n                        }\n\n                        // if node (group or leaf) has parents then it is expanded and should be removed\n                        const groupKey = labels.slice(1, labels.length).toString();\n\n                        if (groupKey) {\n                            groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n                        }\n                    } else {\n                        // leaf nodes can be directly added to dimension columns\n                        data[colId] = valueObject;\n                    }\n                } else {\n                    // introduce a default category when no dimensions exist with a value based off row index (+1)\n                    data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n                }\n            });\n\n            // then get data for value columns\n            params.valueCols.forEach(col => {\n                let columnNamesArr: string[] = [];\n\n                // pivot keys should be added first\n                const pivotKeys = col.getColDef().pivotKeys;\n                if (pivotKeys) {\n                    columnNamesArr = pivotKeys.slice();\n                }\n\n                // then add column header name to results\n                const headerName = col.getColDef().headerName;\n                if (headerName) {\n                    columnNamesArr.push(headerName);\n                }\n\n                // add array of column names to results\n                if (columnNamesArr.length > 0) {\n                    columnNames[col.getId()] = columnNamesArr;\n                }\n\n                const colId = col.getColId();\n                if (params.crossFiltering) {\n                    const filteredOutColId = colId + '-filtered-out';\n\n                    // add data value to value column\n                    const value = this.valueService.getValue(col, rowNode);\n                    const actualValue = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n\n                    if (filteredNodes[rowNode.id as string]) {\n                        data[colId] = actualValue;\n                        data[filteredOutColId] = params.aggFunc || params.isScatter ? undefined : 0;\n                    } else {\n                        data[colId] = params.aggFunc || params.isScatter ? undefined : 0;\n                        data[filteredOutColId] = actualValue;\n                    }\n\n                } else {\n                    // add data value to value column\n                    let value = this.valueService.getValue(col, rowNode);\n\n                    // aggregated value\n                    if (value && value.hasOwnProperty('toString')) {\n                        value = parseFloat(value.toString());\n                    }\n\n                    data[colId] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n                }\n            });\n\n            // row data from footer nodes should not be included in charts\n            if (rowNode.footer) {\n                // 'stamping' data as footer to avoid impacting previously calculated `groupIndexesToRemove` and will\n                // be removed from the results along with any expanded group nodes\n                data.footer = true;\n            }\n\n            // add data to results\n            extractedRowData.push(data);\n        }\n\n        if (params.grouping) {\n            const groupIndexesToRemove = _.values(groupsToRemove);\n            const filterFunc = (data: any, index: number) => !data.footer && !_.includes(groupIndexesToRemove, index);\n            extractedRowData = extractedRowData.filter(filterFunc);\n        }\n\n        return { chartData: extractedRowData, columnNames };\n    }\n\n    private aggregateRowsByDimension(params: ChartDatasourceParams, dataFromGrid: any[]): any[] {\n        const dimensionCols = params.dimensionCols;\n\n        if (!params.aggFunc || dimensionCols.length === 0) { return dataFromGrid; }\n\n        const lastCol = _.last(dimensionCols);\n        const lastColId = lastCol && lastCol.colId;\n        const map: any = {};\n        const dataAggregated: any[] = [];\n\n        dataFromGrid.forEach(data => {\n            let currentMap = map;\n\n            dimensionCols.forEach(col => {\n                const colId = col.colId;\n                const key = data[colId];\n\n                if (colId === lastColId) {\n                    let groupItem = currentMap[key];\n\n                    if (!groupItem) {\n                        groupItem = { __children: [] };\n\n                        dimensionCols.forEach(dimCol => {\n                            const dimColId = dimCol.colId;\n                            groupItem[dimColId] = data[dimColId];\n                        });\n\n                        currentMap[key] = groupItem;\n                        dataAggregated.push(groupItem);\n                    }\n\n                    groupItem.__children.push(data);\n                } else {\n                    // map of maps\n                    if (!currentMap[key]) {\n                        currentMap[key] = {};\n                    }\n\n                    currentMap = currentMap[key];\n                }\n            });\n        });\n\n        if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation', this.context.getGridId())) {\n            dataAggregated.forEach(groupItem => params.valueCols.forEach(col => {\n\n                if (params.crossFiltering) {\n                    params.valueCols.forEach(valueCol => {\n                        const colId = valueCol.getColId();\n\n                        // filtered data\n                        const dataToAgg = groupItem.__children\n                            .filter((child: any) => typeof child[colId] !== 'undefined')\n                            .map((child: any) => child[colId]);\n\n                        let aggResult: any = this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc!);\n                        groupItem[valueCol.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n\n                        // filtered out data\n                        const filteredOutColId = `${colId}-filtered-out`;\n                        const dataToAggFiltered = groupItem.__children\n                            .filter((child: any) => typeof child[filteredOutColId] !== 'undefined')\n                            .map((child: any) => child[filteredOutColId]);\n\n                        let aggResultFiltered: any = this.aggregationStage.aggregateValues(dataToAggFiltered, params.aggFunc!);\n                        groupItem[filteredOutColId] = aggResultFiltered && typeof aggResultFiltered.value !== 'undefined' ? aggResultFiltered.value : aggResultFiltered;\n                    });\n                } else {\n                    const dataToAgg = groupItem.__children.map((child: any) => child[col.getId()]);\n                    let aggResult: any = 0;\n\n                    if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation', this.context.getGridId())) {\n                        aggResult = this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc!);\n                    }\n\n                    groupItem[col.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n                }\n            }));\n        }\n\n        return dataAggregated;\n    }\n\n    private updatePivotKeysForSSRM() {\n        const secondaryColumns = this.columnModel.getSecondaryColumns();\n\n        if (!secondaryColumns) { return; }\n\n        // we don't know what the application will use for the pivot key separator (i.e. '_' or '|' ) as the\n        // secondary columns are provided to grid by the application via api.setSecondaryColumns()\n        const pivotKeySeparator = this.extractPivotKeySeparator(secondaryColumns);\n\n        // `pivotKeys` is not used by the SSRM for pivoting, so it is safe to reuse this colDef property. This way\n        // the same logic can be used for CSRM and SSRM to extract legend names in extractRowsFromGridRowModel()\n        secondaryColumns.forEach(col => {\n            if (pivotKeySeparator === '') {\n                col.getColDef().pivotKeys = [];\n            } else {\n                const keys = col.getColId().split(pivotKeySeparator);\n                col.getColDef().pivotKeys = keys.slice(0, keys.length - 1);\n            }\n        });\n    }\n\n    private extractPivotKeySeparator(secondaryColumns: Column[]) {\n        if (secondaryColumns.length === 0) { return ''; }\n\n        const extractSeparator = (columnGroup: ColumnGroup, childId: string): string => {\n            const groupId = columnGroup.getGroupId();\n            if (!columnGroup.getParent()) {\n                // removing groupId ('2000') from childId ('2000|Swimming') yields '|Swimming' so first char is separator\n                return childId.split(groupId)[1][0];\n            }\n            return extractSeparator(columnGroup.getParent(), groupId);\n        };\n\n        const firstSecondaryCol = secondaryColumns[0];\n        if (firstSecondaryCol.getParent() == null) {\n            return '';\n        }\n        return extractSeparator(firstSecondaryCol.getParent(), firstSecondaryCol.getColId());\n    }\n\n    private static getGroupLabels(rowNode: RowNode | null, initialLabel: string): string[] {\n        const labels = [initialLabel];\n        while (rowNode && rowNode.level !== 0) {\n            rowNode = rowNode.parent;\n            if (rowNode) {\n                labels.push(rowNode.key!);\n            }\n        }\n        return labels;\n    }\n\n    private getFilteredRowNodes() {\n        const filteredNodes: { [key: string]: RowNode; } = {};\n        (this.gridRowModel as IClientSideRowModel).forEachNodeAfterFilterAndSort((rowNode: RowNode) => {\n            filteredNodes[rowNode.id as string] = rowNode;\n        });\n        return filteredNodes;\n    }\n\n    private getAllRowNodes() {\n        let allRowNodes: RowNode[] = [];\n        this.gridRowModel.forEachNode((rowNode: RowNode) => {\n            allRowNodes.push(rowNode);\n        });\n        return this.sortRowNodes(allRowNodes);\n    }\n\n    private sortRowNodes(rowNodes: RowNode[]): RowNode[] {\n        const sortOptions = this.sortController.getSortOptions();\n        const noSort = !sortOptions || sortOptions.length == 0;\n        if (noSort) return rowNodes;\n        return this.rowNodeSorter.doFullSort(rowNodes, sortOptions);\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    RowNode,\n    RowRenderer,\n    ValueService\n} from \"@ag-grid-community/core\";\n\n@Bean(\"chartColumnService\")\nexport class ChartColumnService extends BeanStub {\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n    @Autowired('rowRenderer') private readonly rowRenderer: RowRenderer;\n\n    public getColumn(colId: string): Column | null {\n        return this.columnModel.getPrimaryColumn(colId);\n    }\n\n    public getAllDisplayedColumns(): Column[] {\n        return this.columnModel.getAllDisplayedColumns();\n    }\n\n    public getColDisplayName(col: Column): string | null {\n        return this.columnModel.getDisplayNameForColumn(col, 'chart');\n    }\n\n    public getRowGroupColumns(): Column[] {\n        return this.columnModel.getRowGroupColumns();\n    }\n\n    public getGroupDisplayColumns(): Column[] {\n        return this.columnModel.getGroupDisplayColumns();\n    }\n\n    public isPivotMode(): boolean {\n        return this.columnModel.isPivotMode();\n    }\n\n    public isPivotActive(): boolean {\n        return this.columnModel.isPivotActive();\n    }\n\n    public getChartColumns(): { dimensionCols: Set<Column>; valueCols: Set<Column>; } {\n        const displayedCols = this.columnModel.getAllDisplayedColumns();\n\n        const dimensionCols = new Set<Column>();\n        const valueCols = new Set<Column>();\n\n        displayedCols.forEach(col => {\n            const colDef = col.getColDef();\n            const chartDataType = colDef.chartDataType;\n\n            if (chartDataType) {\n                // chart data type was specified explicitly\n                switch (chartDataType) {\n                    case 'category':\n                    case 'time':\n                        dimensionCols.add(col);\n                        return;\n                    case 'series':\n                        valueCols.add(col);\n                        return;\n                    case 'excluded':\n                        return;\n                    default:\n                        console.warn(`AG Grid: unexpected chartDataType value '${chartDataType}' supplied, instead use 'category', 'series' or 'excluded'`);\n                        break;\n                }\n            }\n\n            if (colDef.colId === 'ag-Grid-AutoColumn') {\n                dimensionCols.add(col);\n                return;\n            }\n\n            if (!col.isPrimary()) {\n                valueCols.add(col);\n                return;\n            }\n\n            // if 'chartDataType' is not provided then infer type based data contained in first row\n            (this.isNumberCol(col) ? valueCols : dimensionCols).add(col);\n        });\n\n        return { dimensionCols, valueCols };\n    }\n\n    private isNumberCol(col: Column): boolean {\n        if (col.getColId() === 'ag-Grid-AutoColumn') {\n            return false;\n        }\n\n        const row = this.rowRenderer.getRowNode({ rowIndex: 0, rowPinned: null });\n\n        if (!row) { return false; }\n\n        let cellValue = this.valueService.getValue(col, row);\n\n        if (cellValue == null) {\n            cellValue = this.extractLeafData(row, col);\n        }\n\n        if (cellValue != null && typeof cellValue.toNumber === 'function') {\n            cellValue = cellValue.toNumber();\n        }\n\n        return typeof cellValue === 'number';\n    }\n\n    private extractLeafData(row: RowNode, col: Column): any {\n        if (!row.allLeafChildren) { return null; }\n\n        for (let i = 0; i < row.allLeafChildren.length; i++) {\n            const childRow = row.allLeafChildren[i];\n            const value = this.valueService.getValue(col, childRow);\n\n            if (value != null) {\n                return value;\n            }\n        }\n\n        return null;\n    }\n}\n", "import { BeanStub, ChartType, PostConstruct, SeriesChartType, } from \"@ag-grid-community/core\";\nimport { ChartDataModel, ColState } from \"./chartDataModel\";\n\nexport class ComboChartModel extends BeanStub {\n    public static SUPPORTED_COMBO_CHART_TYPES = ['line', 'groupedColumn', 'stackedColumn', 'area', 'stackedArea'];\n\n    public seriesChartTypes: SeriesChartType[];\n    public savedCustomSeriesChartTypes: SeriesChartType[];\n\n    // this control flag is used to only log warning for the initial user config\n    private suppressComboChartWarnings = false;\n    private chartDataModel: ChartDataModel;\n\n    public constructor(chartDataModel: ChartDataModel) {\n        super();\n        this.chartDataModel = chartDataModel;\n        this.seriesChartTypes = chartDataModel.params.seriesChartTypes ?? [];\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.initComboCharts();\n    }\n\n    public update(seriesChartTypes?: SeriesChartType[]): void {\n        this.seriesChartTypes = seriesChartTypes ?? this.seriesChartTypes;\n        this.initComboCharts();\n        this.updateSeriesChartTypes();\n    }\n\n    private initComboCharts() {\n        const seriesChartTypesExist = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        const customCombo = this.chartDataModel.chartType === 'customCombo' || seriesChartTypesExist;\n        if (customCombo) {\n            // it is not necessary to supply a chart type for combo charts when `seriesChartTypes` is supplied\n            this.chartDataModel.chartType = 'customCombo';\n\n            // cache supplied `seriesChartTypes` to allow switching between different chart types in the settings panel\n            this.savedCustomSeriesChartTypes = this.seriesChartTypes || [];\n        }\n    }\n\n    public updateSeriesChartTypes(): void {\n        if (!this.chartDataModel.isComboChart()) {\n            return;\n        }\n\n        // ensure primary only chart types are not placed on secondary axis\n        this.seriesChartTypes = this.seriesChartTypes.map(seriesChartType => {\n            const primaryOnly = ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(seriesChartType.chartType);\n            seriesChartType.secondaryAxis = primaryOnly ? false : seriesChartType.secondaryAxis;\n            return seriesChartType;\n        });\n\n        // note that when seriesChartTypes are supplied the chart type is also changed to 'customCombo'\n        if (this.chartDataModel.chartType === 'customCombo') {\n            this.updateSeriesChartTypesForCustomCombo();\n            return;\n        }\n\n        this.updateChartSeriesTypesForBuiltInCombos();\n    }\n\n    private updateSeriesChartTypesForCustomCombo() {\n        const seriesChartTypesSupplied = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        if (!seriesChartTypesSupplied && !this.suppressComboChartWarnings) {\n            console.warn(`AG Grid: 'seriesChartTypes' are required when the 'customCombo' chart type is specified.`);\n        }\n\n        // ensure correct chartTypes are supplied\n        this.seriesChartTypes = this.seriesChartTypes.map(s => {\n            if (!ComboChartModel.SUPPORTED_COMBO_CHART_TYPES.includes(s.chartType)) {\n                console.warn(`AG Grid: invalid chartType '${s.chartType}' supplied in 'seriesChartTypes', converting to 'line' instead.`);\n                s.chartType = 'line';\n            }\n            return s;\n        });\n\n        const getSeriesChartType = (valueCol: ColState): SeriesChartType => {\n            if (!this.savedCustomSeriesChartTypes || this.savedCustomSeriesChartTypes.length === 0) {\n                this.savedCustomSeriesChartTypes = this.seriesChartTypes;\n            }\n\n            const providedSeriesChartType = this.savedCustomSeriesChartTypes.find(s => s.colId === valueCol.colId);\n            if (!providedSeriesChartType) {\n                if (valueCol.selected && !this.suppressComboChartWarnings) {\n                    console.warn(`AG Grid: no 'seriesChartType' found for colId = '${valueCol.colId}', defaulting to 'line'.`);\n                }\n                return {\n                    colId: valueCol.colId,\n                    chartType: 'line',\n                    secondaryAxis: false\n                };\n            }\n\n            return providedSeriesChartType;\n        }\n\n        const updatedSeriesChartTypes = this.chartDataModel.valueColState.map(getSeriesChartType);\n\n        this.seriesChartTypes = updatedSeriesChartTypes;\n\n        // also cache custom `seriesChartTypes` to allow for switching between different chart types\n        this.savedCustomSeriesChartTypes = updatedSeriesChartTypes;\n\n        // turn off warnings as first combo chart attempt has completed\n        this.suppressComboChartWarnings = true;\n    }\n\n    private updateChartSeriesTypesForBuiltInCombos() {\n        const { chartType, valueColState } = this.chartDataModel;\n\n        let primaryChartType: ChartType = chartType === 'columnLineCombo' ? 'groupedColumn' : 'stackedArea';\n        let secondaryChartType: ChartType = chartType === 'columnLineCombo' ? 'line' : 'groupedColumn';\n\n        const selectedCols = valueColState.filter(cs => cs.selected);\n        const lineIndex = Math.ceil(selectedCols.length / 2);\n        this.seriesChartTypes = selectedCols.map((valueCol: ColState, i: number) => {\n            const seriesType = (i >= lineIndex) ? secondaryChartType : primaryChartType;\n            return { colId: valueCol.colId, chartType: seriesType, secondaryAxis: false };\n        });\n    }\n}\n", "import { ChartType } from \"@ag-grid-community/core\";\n\n// these values correspond to top level object names in `AgChartThemeOverrides`\nexport type ChartSeriesType =\n    'cartesian' |\n    'column' |\n    'bar' |\n    'line' |\n    'area' |\n    'scatter' |\n    'histogram' |\n    'polar' |\n    'pie' |\n    'donut' |\n    'hierarchy' |\n    'bubble' |\n    'radial-column' |\n    'radial-bar' |\n    'radar-line' |\n    'radar-area' |\n    'nightingale' |\n    'range-bar' |\n    'range-area' |\n    'box-plot' |\n    'treemap' |\n    'sunburst' |\n    'heatmap' |\n    'waterfall' |\n    'common';\n\nexport const VALID_SERIES_TYPES: ChartSeriesType[] = [\n    'area',\n    'bar',\n    'column',\n    'histogram',\n    'line',\n    'pie',\n    'donut',\n    'scatter',\n    'bubble',\n    'radial-column',\n    'radial-bar',\n    'radar-line',\n    'radar-area',\n    'nightingale',\n    'range-bar',\n    'range-area',\n    'box-plot',\n    'treemap',\n    'sunburst',\n    'heatmap',\n    'waterfall',\n];\n\nexport function isEnterpriseChartType(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'rangeBar':\n        case 'rangeArea':\n        case 'waterfall':\n        case 'boxPlot':\n        case 'radarLine':\n        case 'radarArea':\n        case 'nightingale':\n        case 'radialColumn':\n        case 'radialBar':\n        case 'sunburst':\n        case 'treemap':\n        case 'heatmap':\n            return true;\n        default:\n            return false;\n    }\n}\n\nconst horizontalChartTypes = new Set(['bar', 'groupedBar', 'stackedBar', 'normalizedBar']);\nexport function isHorizontal(chartType: ChartType): boolean {\n    return horizontalChartTypes.has(chartType);\n}\n\nconst stackedChartTypes = new Set(['stackedColumn', 'normalizedColumn', 'stackedBar', 'normalizedBar']);\nexport function isStacked(chartType: ChartType): boolean {\n    return stackedChartTypes.has(chartType);\n}\n\nexport function isCartesian(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'area':\n        case 'areaColumnCombo':\n        case 'bar':\n        case 'boxPlot':\n        case 'bubble':\n        case 'column':\n        case 'columnLineCombo':\n        case 'customCombo':\n        case 'groupedBar':\n        case 'groupedColumn':\n        case 'heatmap':\n        case 'histogram':\n        case 'line':\n        case 'normalizedArea':\n        case 'normalizedBar':\n        case 'normalizedColumn':\n        case 'rangeArea':\n        case 'rangeBar':\n        case 'scatter':\n        case 'stackedArea':\n        case 'stackedBar':\n        case 'stackedColumn':\n        case 'waterfall':\n            return true;\n        case 'donut':\n        case 'doughnut':\n        case 'nightingale':\n        case 'pie':\n        case 'radarArea':\n        case 'radarLine':\n        case 'radialColumn':\n        case 'radialBar':\n        case 'sunburst':\n        case 'treemap':\n        default:\n            return false;\n    }\n}\n\nexport function isPolar(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'donut':\n        case 'doughnut':\n        case 'pie':\n        case 'radialColumn':\n        case 'radialBar':\n        case 'radarLine':\n        case 'radarArea':\n        case 'nightingale':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function isRadial(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'radialColumn':\n        case 'radialBar':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function isHierarchical(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'treemap':\n        case 'sunburst':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function hasGradientLegend(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'treemap':\n        case 'sunburst':\n        case 'heatmap':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function getCanonicalChartType(chartType: ChartType): Exclude<ChartType, 'doughnut'> {\n    switch (chartType) {\n        case 'doughnut':\n            return 'donut';\n        default:\n            return chartType;\n    }\n}\n\nexport function getSeriesType(chartType: ChartType): ChartSeriesType {\n    switch (chartType) {\n        case 'bar':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return 'bar';\n        case 'column':\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n            return 'bar';\n        case 'line':\n            return 'line';\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n            return 'area';\n        case 'bubble':\n            return 'bubble';\n        case 'scatter':\n            return 'scatter';\n        case 'histogram':\n            return 'histogram';\n        case 'radialColumn':\n            return 'radial-column';\n        case 'radialBar':\n            return 'radial-bar';\n        case 'radarLine':\n            return 'radar-line';\n        case 'radarArea':\n            return 'radar-area';\n        case 'nightingale':\n            return 'nightingale';\n        case 'rangeBar':\n            return 'range-bar';\n        case 'rangeArea':\n            return 'range-area';\n        case 'boxPlot':\n            return 'box-plot';\n        case 'treemap':\n            return 'treemap';\n        case 'sunburst':\n            return 'sunburst';\n        case 'pie':\n            return 'pie';\n        case 'donut':\n        case 'doughnut':\n            return 'donut';\n        case 'heatmap':\n            return 'heatmap';\n        case 'waterfall':\n            return 'waterfall';\n        default:\n            return 'cartesian';\n    }\n}\n\nexport type PieChartSeriesType = Extract<ChartSeriesType, 'pie' | 'donut'>;\n\nexport function isPieChartSeries(seriesType: ChartSeriesType): seriesType is PieChartSeriesType {\n    switch (seriesType) {\n        case 'pie':\n        case 'donut':\n            return true;\n        default:\n            return false;\n    }\n}\n\nfunction canOnlyHaveSingleSeries(chartType: ChartType): boolean {\n    return chartType === 'pie' || chartType === 'waterfall' || chartType === 'histogram';\n}\n\nexport function getMaxNumCategories(chartType: ChartType): number | undefined {\n    return isHierarchical(chartType) ? undefined : 1;\n}\n\nexport function getMaxNumSeries(chartType: ChartType): number | undefined {\n    if (isHierarchical(chartType)) {\n        return 2;\n    } else if (canOnlyHaveSingleSeries(chartType)) {\n        return 1;\n    } else {\n        return undefined;\n    }\n}\n\nexport function supportsInvertedCategorySeries(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'column':\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'bar':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n        case 'line':\n        case 'donut':\n        case 'doughnut':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'radarLine':\n        case 'radarArea':\n        case 'nightingale':\n        case 'radialColumn':\n        case 'radialBar':\n            return true;\n        case 'pie':\n        case 'scatter':\n        case 'bubble':\n        case 'sunburst':\n        case 'rangeBar':\n        case 'rangeArea':\n        case 'boxPlot':\n        case 'histogram':\n        case 'treemap':\n        case 'heatmap':\n        case 'waterfall':\n        case 'columnLineCombo':\n        case 'areaColumnCombo':\n        case 'customCombo':\n            return false;\n    }\n}", "import { _ } from '@ag-grid-community/core';\nimport {\n    _Theme,\n    AgChartLegendClickEvent,\n    AgChartTheme,\n    AgChartThemeName,\n    AgChartThemeOverrides,\n    AgChartThemePalette,\n} from 'ag-charts-community';\nimport { ALL_AXIS_TYPES } from '../utils/axisTypeMapper';\nimport { ChartSeriesType, getSeriesType, isPieChartSeries } from '../utils/seriesTypeMapper';\nimport { ChartProxy, ChartProxyParams } from './chartProxy';\nimport { get } from '../utils/object';\n\nexport function createAgChartTheme(\n    chartProxyParams: ChartProxyParams,\n    proxy: ChartProxy,\n    isEnterprise: boolean,\n): AgChartTheme {\n    const { chartOptionsToRestore, chartPaletteToRestore, chartThemeToRestore } = chartProxyParams;\n    const themeName = getSelectedTheme(chartProxyParams);\n    const stockTheme = isStockTheme(themeName);\n\n    const rootTheme = stockTheme\n        ? { baseTheme: themeName as AgChartThemeName }\n        : lookupCustomChartTheme(chartProxyParams, themeName) ?? {};\n\n    const gridOptionsThemeOverrides = chartProxyParams.getGridOptionsChartThemeOverrides();\n    const apiThemeOverrides = chartProxyParams.apiChartThemeOverrides;\n\n    const standaloneChartType = getSeriesType(chartProxyParams.chartType);\n    const crossFilterThemeOverridePoint = isPieChartSeries(standaloneChartType) ? standaloneChartType : 'cartesian';\n    const crossFilteringOverrides = chartProxyParams.crossFiltering\n        ? createCrossFilterThemeOverrides(proxy, chartProxyParams, crossFilterThemeOverridePoint)\n        : undefined;\n    const formattingPanelOverrides: AgChartThemeOverrides = {\n        ...(chartOptionsToRestore ?? {}),\n    };\n\n    const isTitleEnabled = () => {\n        const isTitleEnabled = (obj: any) => {\n            if (!obj) { return false; }\n            return Object.keys(obj).some(key => get(obj[key], 'title.enabled', false));\n        }\n        return isTitleEnabled(gridOptionsThemeOverrides) || isTitleEnabled(apiThemeOverrides);\n    }\n\n    // Overrides in ascending precedence ordering.\n    const overrides: (AgChartThemeOverrides | undefined)[] = [\n        stockTheme ? inbuiltStockThemeOverrides(chartProxyParams, isEnterprise, isTitleEnabled()) : undefined,\n        crossFilteringOverrides,\n        gridOptionsThemeOverrides,\n        apiThemeOverrides,\n        formattingPanelOverrides,\n    ];\n\n    // Recursively nest theme overrides so they are applied with correct precedence in\n    // Standalone Charts - this is an undocumented feature.\n    // Outermost theme overrides will be the formatting panel configured values, so they are\n    // differentiated from grid-config and inbuilt overrides.\n    const theme = overrides\n        .filter((v): v is AgChartThemeOverrides => !!v)\n        .reduce(\n            (r, n): AgChartTheme => ({\n                baseTheme: r as any,\n                overrides: n,\n            }),\n            rootTheme\n        );\n\n    // Avoid explicitly setting the `theme.palette` property unless we're using the restored theme\n    // AND the palette is actually different.\n    if (chartPaletteToRestore && themeName === chartThemeToRestore) {\n        const rootThemePalette = _Theme.getChartTheme(rootTheme).palette;\n        if (!isIdenticalPalette(chartPaletteToRestore, rootThemePalette)) {\n            theme.palette = chartPaletteToRestore;\n        }\n    }\n\n    return theme;\n}\n\nexport function applyThemeOverrides(\n    baseTheme: AgChartTheme,\n    overrides: Array<AgChartThemeOverrides | null | undefined>\n): AgChartTheme {\n    return overrides.reduce(\n        (baseTheme, overrides) => {\n            if (!overrides) return baseTheme;\n            return {\n                baseTheme: baseTheme as any,\n                overrides,\n            };\n        },\n        baseTheme,\n    );\n}\n\nfunction isIdenticalPalette(paletteA: AgChartThemePalette, paletteB: AgChartThemePalette) {\n    const arrayCompare = (arrA: any[], arrB: any[]) => {\n        if (arrA.length !== arrB.length) return false;\n\n        return arrA.every((v: any, i) => v === arrB[i]);\n    };\n\n    return arrayCompare(paletteA.fills, paletteB.fills) &&\n        arrayCompare(paletteA.strokes, paletteB.strokes);\n}\n\nexport function isStockTheme(themeName: string): boolean {\n    return _.includes(Object.keys(_Theme.themes), themeName);\n}\n\nfunction createCrossFilterThemeOverrides(\n    proxy: ChartProxy,\n    chartProxyParams: ChartProxyParams,\n    overrideType: Extract<ChartSeriesType, 'cartesian' | 'pie' | 'donut'>,\n): AgChartThemeOverrides {\n    const legend = {\n        listeners: {\n            legendItemClick: (e: AgChartLegendClickEvent) => {\n                const chart = proxy.getChart();\n                chart.series.forEach((s) => {\n                    s.toggleSeriesItem(e.itemId, e.enabled);\n                    s.toggleSeriesItem(`${e.itemId}-filtered-out`, e.enabled);\n                });\n            },\n        },\n    };\n\n    const series: AgChartThemeOverrides = {};\n    return {\n        [overrideType]: {\n            tooltip: {\n                delay: 500,\n            },\n            legend,\n            listeners: {\n                click: (e: any) => chartProxyParams.crossFilterCallback(e, true),\n            },\n            series,\n        },\n    };\n}\n\nconst STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES = ALL_AXIS_TYPES.reduce(\n    (r, n) => ({ ...r, [n]: { title: { _enabledFromTheme: true } } }),\n    {}\n);\n\nfunction inbuiltStockThemeOverrides(params: ChartProxyParams, isEnterprise: boolean, titleEnabled: boolean) {\n    const extraPadding = params.getExtraPaddingDirections();\n    return {\n        common: {\n            ...(isEnterprise ? { animation: { duration: 500 } } : undefined),\n            axes: STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES,\n            padding: {\n                // don't add extra padding when a title is present!\n                top: !titleEnabled && extraPadding.includes('top') ? 40 : 20,\n                right: extraPadding.includes('right') ? 30 : 20,\n                bottom: extraPadding.includes('bottom') ? 40 : 20,\n                left: extraPadding.includes('left') ? 30 : 20,\n            },\n        },\n        pie: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n        donut: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n    };\n}\n\nfunction getSelectedTheme(chartProxyParams: ChartProxyParams): string {\n    let chartThemeName = chartProxyParams.getChartThemeName();\n    const availableThemes = chartProxyParams.getChartThemes();\n\n    if (!_.includes(availableThemes, chartThemeName)) {\n        chartThemeName = availableThemes[0];\n    }\n\n    return chartThemeName;\n}\n\nexport function lookupCustomChartTheme(chartProxyParams: ChartProxyParams, name: string): AgChartTheme {\n    const { customChartThemes } = chartProxyParams;\n    const customChartTheme = customChartThemes && customChartThemes[name];\n\n    if (!customChartTheme) {\n        console.warn(\n            `AG Grid: no stock theme exists with the name '${name}' and no ` +\n                \"custom chart theme with that name was supplied to 'customChartThemes'\"\n        );\n    }\n\n    return customChartTheme as AgChartTheme;\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { AgCartesianAxisType } from 'ag-charts-community';\n\nexport const ALL_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'grouped-category', 'log', 'time'];\n\nexport function getLegacyAxisType(chartType: ChartType): [AgCartesianAxisType, AgCartesianAxisType] | undefined {\n    switch (chartType) {\n        case 'bar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return ['number', 'category'];\n        case 'groupedBar':\n            return ['number', 'grouped-category'];\n        case 'column':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'line':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'histogram':\n            return ['category', 'number'];\n        case 'groupedColumn':\n            return ['grouped-category', 'number'];\n        case 'scatter':\n        case 'bubble':\n            return ['number', 'number'];\n        default:\n            return undefined;\n    }\n}\n", "// deepMerge\nfunction emptyTarget(value: any) {\n    return Array.isArray(value) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value: any, options: any) {\n    return (options.clone !== false && options.isMergeableObject(value))\n        ? deepMerge(emptyTarget(value), value, options)\n        : value;\n}\n\nfunction defaultArrayMerge(target: any, source: any, options: any) {\n    return target.concat(source).map(function(element: any) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\n\nfunction getMergeFunction(key: string, options: any) {\n    if (!options.customMerge) {\n        return deepMerge;\n    }\n    const customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target: any): any[] {\n    // @ts-ignore\n    return Object.getOwnPropertySymbols \n    // @ts-ignore\n        ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n            return target.propertyIsEnumerable(symbol);\n        }) \n        : [];\n}\n\nfunction getKeys(target: any): any[] {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object: any, property: string) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target: any, key: string) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n        && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n            && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target: Record<string, any> = {}, source: Record<string, any> = {}, options: any) {\n    const destination: any = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\n\nfunction defaultIsMergeableObject(value: any): boolean {\n    return isNonNullObject(value) && !isSpecial(value);\n}\n\nfunction isNonNullObject(value: any): boolean {\n    return !!value && typeof value === 'object';\n}\n\nfunction isSpecial(value: any): boolean {\n    const stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\n\nexport function deepMerge<T>(target: T, source: T, options?: any): T;\nexport function deepMerge(target: any, source: any, options?: any): any;\nexport function deepMerge(target: any, source: any, options?: any): any {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n    const sourceIsArray = Array.isArray(source);\n    const targetIsArray = Array.isArray(target);\n    const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\n// END - deep merge\n\n\nexport function get(source: any, expression: string, defaultValue: any): any {\n    if (source == null) { return defaultValue; }\n\n    const keys = expression.split('.');\n    let objectToRead = source;\n\n    while (keys.length > 1) {\n        objectToRead = objectToRead[keys.shift()!];\n\n        if (objectToRead == null) {\n            return defaultValue;\n        }\n    }\n\n    const value = objectToRead[keys[0]];\n\n    return value != null ? value : defaultValue;\n}\n\nexport function set(target: any, expression: string, value: any) {\n    if (target == null) { return; }\n\n    const keys = expression.split('.');\n    \n    let objectToUpdate = target;\n    // Create empty objects\n    keys.forEach((key, i) => {\n        if (!objectToUpdate[key]) {\n            objectToUpdate[key] = {};\n        }\n\n        if (i < keys.length - 1) {\n            objectToUpdate = objectToUpdate[key];\n        }\n    });\n\n    objectToUpdate[keys[keys.length - 1]] = value;\n}", "import {\n    AgChartThemeOverrides,\n    ChartParamsCellRange,\n    ChartType,\n    IAggFunc,\n    UpdateChartParams,\n    UpdateCrossFilterChartParams,\n    UpdatePivotChartParams,\n    UpdateRangeChartParams,\n    SeriesChartType,\n    Column\n} from \"@ag-grid-community/core\";\nimport { getCanonicalChartType } from './seriesTypeMapper';\n\nconst validateIfDefined = <I, O = never>(validationFn: (value: NonNullable<I>) => boolean | O) => {\n    return (value: I | null | undefined): boolean | O => {\n        if (value == undefined) return true;\n        return validationFn(value as NonNullable<I>);\n    };\n};\n\nconst isString = (value: any): boolean => typeof value === 'string';\nconst isBoolean = (value: any): boolean => typeof value === 'boolean';\nconst isValidSeriesChartType = (value: any): boolean => typeof value === 'object';\nconst createWarnMessage = (property: string, expectedType: string): ((value: any) => string) =>\n    (value: any) => `AG Grid - unable to update chart as invalid params supplied:  \\`${property}: ${value}\\`, expected ${expectedType}.`;\n\ninterface ValidationFunction<T, K extends keyof T = keyof T, V = T[K]> {\n    property: K;\n    validationFn: (value: T[K]) => boolean | V;\n    warnMessage: (value: T[K]) => string;\n}\n\nexport class UpdateParamsValidator {\n    private static validChartTypes: ChartType[] = [\n        'column',\n        'groupedColumn',\n        'stackedColumn',\n        'normalizedColumn',\n        'bar',\n        'groupedBar',\n        'stackedBar',\n        'normalizedBar',\n        'line',\n        'scatter',\n        'bubble',\n        'pie',\n        'donut',\n        'area',\n        'stackedArea',\n        'normalizedArea',\n        'histogram',\n        'radialColumn',\n        'radialBar',\n        'radarLine',\n        'radarArea',\n        'nightingale',\n        'rangeBar',\n        'rangeArea',\n        'boxPlot',\n        'treemap',\n        'sunburst',\n        'heatmap',\n        'waterfall',\n        'columnLineCombo',\n        'areaColumnCombo',\n        'customCombo'\n    ];\n\n    private static legacyChartTypes: ChartType[] = [\n        'doughnut',\n    ];\n\n    private static isValidChartType(value: string): value is ChartType {\n        return UpdateParamsValidator.validChartTypes.includes(value as ChartType);\n    }\n\n    private static isLegacyChartType(value: string): value is ChartType {\n        return UpdateParamsValidator.legacyChartTypes.includes(value as ChartType);\n    }\n\n    private static validateChartType = validateIfDefined<UpdateChartParams['chartType'], Exclude<ChartType, 'doughnut'>>((chartType) => {\n        if (this.isValidChartType(chartType)) return true;\n        if (this.isLegacyChartType(chartType)) {\n            const renamedChartType = getCanonicalChartType(chartType)\n            console.warn(`AG Grid - The chart type '${chartType}' has been deprecated. Please use '${renamedChartType}' instead.`);\n            return renamedChartType;\n        };\n        return false;\n    });\n\n    private static validateAgChartThemeOverrides = validateIfDefined<AgChartThemeOverrides>((themeOverrides) => {\n        // ensure supplied AgChartThemeOverrides is an object - can be improved if necessary?\n        return typeof themeOverrides === 'object';\n    });\n\n    private static validateChartParamsCellRange = validateIfDefined<ChartParamsCellRange>((cellRange) => {\n        // ensure supplied ChartParamsCellRange is an object - can be improved if necessary?\n        return typeof cellRange === 'object';\n    });\n\n    private static validateAggFunc = validateIfDefined<string | IAggFunc>((aggFunc) => {\n        // ensure supplied aggFunc is a `string` or `function` - can be improved if necessary?\n        return typeof aggFunc === 'string' || typeof aggFunc === 'function';\n    });\n\n    private static commonValidations: ValidationFunction<any>[] = [\n        { property: 'chartId', validationFn: isString, warnMessage: createWarnMessage('chartId', 'string') },\n        {\n            property: 'chartType',\n            validationFn: UpdateParamsValidator.validateChartType,\n            warnMessage: createWarnMessage('chartType', UpdateParamsValidator.validChartTypes.join(', '))\n        },\n        {\n            property: 'chartThemeName',\n            validationFn: isString,\n            warnMessage: createWarnMessage('chartThemeName', 'string')\n        },\n        {\n            property: 'chartThemeOverrides',\n            validationFn: UpdateParamsValidator.validateAgChartThemeOverrides,\n            warnMessage: createWarnMessage('chartThemeOverrides', 'AgChartThemeOverrides')\n        },\n        { property: 'unlinkChart', validationFn: isBoolean, warnMessage: createWarnMessage('unlinkChart', 'boolean') },\n    ];\n\n    private static cellRangeValidations: ValidationFunction<any>[] = [\n        {\n            property: 'cellRange',\n            validationFn: UpdateParamsValidator.validateChartParamsCellRange,\n            warnMessage: createWarnMessage('cellRange', 'ChartParamsCellRange')\n        },\n        {\n            property: 'suppressChartRanges',\n            validationFn: isBoolean,\n            warnMessage: createWarnMessage('suppressChartRanges', 'boolean')\n        },\n        {\n            property: 'aggFunc',\n            validationFn: UpdateParamsValidator.validateAggFunc,\n            warnMessage: createWarnMessage('aggFunc', 'string or IAggFunc')\n        },\n    ];\n\n    public static validateChartParams(params: UpdateChartParams): boolean | UpdateChartParams {\n        let paramsToValidate = params as UpdateChartParams;\n        switch (paramsToValidate.type) {\n            case 'rangeChartUpdate':\n                return UpdateParamsValidator.validateUpdateRangeChartParams(params as UpdateRangeChartParams);\n            case 'pivotChartUpdate':\n                return UpdateParamsValidator.validateUpdatePivotChartParams(params as UpdatePivotChartParams);\n            case 'crossFilterChartUpdate':\n                return UpdateParamsValidator.validateUpdateCrossFilterChartParams(params as UpdateCrossFilterChartParams);\n            default:\n                console.warn(`AG Grid - Invalid value supplied for 'type': ${params.type}. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`);\n                return false;\n        }\n    }\n\n    private static validateUpdateRangeChartParams(params: UpdateRangeChartParams): boolean | UpdateRangeChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...UpdateParamsValidator.commonValidations,\n            ...UpdateParamsValidator.cellRangeValidations,\n            {\n                property: 'seriesChartTypes',\n                validationFn: (value: any) => value === undefined || (Array.isArray(value) && value.every(isValidSeriesChartType)),\n                warnMessage: createWarnMessage('seriesChartTypes', 'Array of SeriesChartType'),\n            },\n        ];\n\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart', 'cellRange', 'suppressChartRanges', 'aggFunc', 'seriesChartTypes'], 'UpdateRangeChartParams');\n    }\n\n    private static validateUpdatePivotChartParams(params: UpdatePivotChartParams): boolean | UpdatePivotChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...UpdateParamsValidator.commonValidations,\n        ];\n\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart'], 'UpdatePivotChartParams');\n    }\n\n    private static validateUpdateCrossFilterChartParams(params: UpdateCrossFilterChartParams): boolean | UpdateCrossFilterChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...UpdateParamsValidator.commonValidations,\n            ...UpdateParamsValidator.cellRangeValidations,\n        ];\n\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart', 'cellRange', 'suppressChartRanges', 'aggFunc'], 'UpdateCrossFilterChartParams');\n    }\n\n    private static validateProperties<T extends object>(params: T, validations: ValidationFunction<T>[], validPropertyNames: (keyof T)[], paramsType: string): boolean | T {\n        let validatedProperties: T | undefined = undefined;\n        for (const validation of validations) {\n            const { property, validationFn, warnMessage } = validation;\n            if (property in params) {\n                const value = params[property];\n                const validationResult = validationFn(value);\n                if (validationResult === true) continue;\n                if (validationResult === false) {\n                    console.warn(warnMessage(value));\n                    return false;\n                }\n                // If the validation function returned a 'fix' value, we need to return an updated property set.\n                // First we clone the input set if there has not been a 'fix' encountered in a previous iteration:\n                validatedProperties = validatedProperties || { ...params };\n                /// Then we update the cloned object with the 'fixed' value\n                validatedProperties[property] = validationResult;\n            }\n        }\n\n        // Check for unexpected properties\n        for (const property in params) {\n            if (!validPropertyNames.includes(property as keyof T)) {\n                console.warn(`AG Grid - Unexpected property supplied. ${paramsType} does not contain: \\`${property}\\`.`);\n                return false;\n            }\n        }\n\n        // If one or more 'fixed' values were encountered, return the updated property set\n        if (validatedProperties) return validatedProperties;\n\n        return true;\n    }\n\n}", "import {\n    AgCheckbox,\n    AgCheckboxParams,\n    AgGroupComponent,\n    AgRadioButton,\n    AgSelect,\n    AgToggleButton,\n    AutoScrollService,\n    Autowired,\n    DragAndDropService,\n    DropTarget,\n    IAggFunc,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ChartDataModel, ColState } from \"../../model/chartDataModel\";\nimport { ChartMenuService } from \"../../services/chartMenuService\";\nimport { DragDataPanel } from \"./dragDataPanel\";\n\ntype AggFuncPreset = 'count' | 'sum' | 'min' | 'max' | 'avg' | 'first' | 'last';\n\nconst DEFAULT_AGG_FUNC: AggFuncPreset = 'sum'\n\nexport class CategoriesDataPanel extends DragDataPanel {\n    private static TEMPLATE = /* html */`<div id=\"categoriesGroup\"></div>`;\n\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n\n    private aggFuncToggle?: AgToggleButton;\n    private aggFuncSelect?: AgSelect;\n\n    constructor(\n        chartController: ChartController,\n        autoScrollService: AutoScrollService,\n        private readonly title: string,\n        allowMultipleSelection: boolean,\n        private dimensionCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        const maxSelection = undefined;\n        super(chartController, autoScrollService, allowMultipleSelection, maxSelection, CategoriesDataPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.groupComp = this.createBean(new AgGroupComponent({\n            title: this.title,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen\n        }));\n        if (this.chartMenuService.isLegacyFormat()) {\n            this.createLegacyCategoriesGroup(this.dimensionCols);\n            this.clearAggFuncControls();\n        } else {\n            this.createCategoriesGroup(this.dimensionCols);\n            this.createAggFuncControls(this.dimensionCols);\n        }\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(dimensionCols: ColState[]): void {\n        if (this.chartMenuService.isLegacyFormat()) {\n            if (!this.refreshColumnComps(dimensionCols)) {\n                this.recreate(dimensionCols);\n            }\n        } else {\n            this.valuePillSelect?.setValues(dimensionCols, dimensionCols.filter(col => col.selected));\n            this.refreshValueSelect(dimensionCols);\n            this.refreshAggFuncControls(dimensionCols, this.chartController.getAggFunc());\n        }\n    }\n\n    private recreate(dimensionCols: ColState[]): void {\n        this.isOpen = this.groupComp.isExpanded();\n        _.clearElement(this.getGui());\n        this.destroyBean(this.groupComp);\n        this.dimensionCols = dimensionCols;\n        this.init();\n    }\n\n    private createCategoriesGroup(columns: ColState[]): void {\n        this.createGroup(columns, (col) => _.escapeString(col?.displayName)!, 'categoryAdd', 'categorySelect');\n    }\n\n    private createLegacyCategoriesGroup(columns: ColState[]): void {\n        const inputName = `chartDimension${this.groupComp.getCompId()}`;\n\n        // Display either radio buttons or checkboxes\n        // depending on whether the current chart type supports multiple category columns\n        const supportsMultipleCategoryColumns = this.allowMultipleSelection;\n\n        columns.forEach(col => {\n            const params: AgCheckboxParams = {\n                label: _.escapeString(col.displayName)!,\n                value: col.selected,\n                inputName\n            };\n            const comp: AgCheckbox | AgRadioButton = this.groupComp!.createManagedBean(\n                supportsMultipleCategoryColumns\n                    ? (() => {\n                        const checkboxComp = new AgCheckbox(params);\n                        checkboxComp.addCssClass('ag-data-select-checkbox');\n                        return checkboxComp;\n                    })()\n                    : new AgRadioButton(params)\n            );\n\n            this.addChangeListener(comp, col);\n            this.groupComp!.addItem(comp);\n            this.columnComps.set(col.colId, comp);\n\n            if (supportsMultipleCategoryColumns) this.addDragHandle(comp, col);\n        });\n\n        if (supportsMultipleCategoryColumns) {\n            const categoriesGroupGui = this.groupComp.getGui();\n            \n            const dropTarget: DropTarget = {\n                getIconName: () => DragAndDropService.ICON_MOVE,\n                getContainer: () => categoriesGroupGui,\n                onDragging: (params) => this.onDragging(params),\n                onDragLeave: () => this.onDragLeave(),\n                isInterestedIn: this.isInterestedIn.bind(this),\n                targetContainsSource: true\n            };\n\n            this.dragAndDropService.addDropTarget(dropTarget);\n            this.addDestroyFunc(() => this.dragAndDropService.removeDropTarget(dropTarget));\n        }\n    }\n\n    private createAggFuncControls(dimensionCols: ColState[]): void {\n        const aggFunc = this.chartController.getAggFunc();\n        this.groupComp.addItem(this.aggFuncToggle = this.createBean(new AgToggleButton({\n            label: this.chartTranslationService.translate('aggregate'),\n            labelAlignment: 'left',\n            labelWidth: 'flex',\n            inputWidth: 'flex',\n            value: aggFunc != undefined,\n            onValueChange: (value) => {\n                const aggFunc = value ? DEFAULT_AGG_FUNC : undefined;\n                this.chartController.setAggFunc(aggFunc);\n                this.aggFuncSelect?.setValue(aggFunc, true);\n                this.aggFuncSelect?.setDisplayed(aggFunc != undefined);\n            },\n        })));\n        this.groupComp.addItem(this.aggFuncSelect = this.createBean(new AgSelect<AggFuncPreset>({\n            options: [\n                { value: 'sum', text: this.chartTranslationService.translate('sum') },\n                { value: 'first', text: this.chartTranslationService.translate('first') },\n                { value: 'last', text: this.chartTranslationService.translate('last') },\n                { value: 'min', text: this.chartTranslationService.translate('min') },\n                { value: 'max', text: this.chartTranslationService.translate('max') },\n                { value: 'count', text: this.chartTranslationService.translate('count') },\n                { value: 'avg', text: this.chartTranslationService.translate('avg') },\n            ],\n            value: typeof aggFunc === 'string' ? aggFunc : undefined,\n            onValueChange: (value) => {\n                this.chartController.setAggFunc(value);\n            },\n        })));\n        this.refreshAggFuncControls(dimensionCols, aggFunc);\n    }\n\n    private refreshAggFuncControls(dimensionCols: ColState[], aggFunc: string | IAggFunc | undefined): void {\n        const selectedDimensions = dimensionCols.filter(col => col.selected);\n        const supportsAggregation = selectedDimensions.some(col => col.colId !== ChartDataModel.DEFAULT_CATEGORY);\n        this.aggFuncToggle?.setValue(aggFunc != undefined);\n        this.aggFuncSelect?.setValue(typeof aggFunc === 'string' ? aggFunc : undefined, true);\n        this.aggFuncToggle?.setDisplayed(supportsAggregation);\n        this.aggFuncSelect?.setDisplayed(supportsAggregation && (aggFunc != undefined));\n    }\n\n    private clearAggFuncControls(): void {\n        this.aggFuncToggle = this.aggFuncToggle && this.destroyBean(this.aggFuncToggle);\n        this.aggFuncSelect = this.aggFuncSelect && this.destroyBean(this.aggFuncSelect);\n    }\n\n    protected destroy(): void {\n        this.clearAggFuncControls();\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import {\n    AgCheckbox,\n    AgGroupComponent,\n    AgRadioButton,\n    AgSelect,\n    AgSelectParams,\n    AutoScrollService,\n    Autowired,\n    Column,\n    Component,\n    DragAndDropService,\n    DraggingEvent,\n    DragSource,\n    DragSourceType,\n    Events,\n    ListOption,\n    _\n} from \"@ag-grid-community/core\";\nimport { AgPillSelect, AgPillSelectChangeParams } from \"../../../../widgets/agPillSelect\";\nimport { ChartController } from \"../../chartController\";\nimport { ChartDataModel, ColState } from \"../../model/chartDataModel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../services/chartTranslationService\";\n\nexport abstract class DragDataPanel extends Component {\n    @Autowired('dragAndDropService') protected dragAndDropService: DragAndDropService;\n    @Autowired('chartTranslationService') protected readonly chartTranslationService: ChartTranslationService;\n\n    private lastHoveredItem?: { comp: AgCheckbox, position: 'top' | 'bottom' };\n    private lastDraggedColumn?: Column;\n    protected columnComps: Map<string, AgRadioButton | AgCheckbox> = new Map<string, AgRadioButton | AgCheckbox>();\n    protected groupComp: AgGroupComponent;\n    protected valuePillSelect?: AgPillSelect<ColState>;\n    protected valueSelect?: AgSelect<ColState>;\n\n    constructor(\n        protected readonly chartController: ChartController,\n        private readonly autoScrollService: AutoScrollService,\n        protected readonly allowMultipleSelection: boolean,\n        private readonly maxSelection: number | undefined,\n        template?: string\n    ) {\n        super(template);\n    }\n\n    public refreshColumnComps(cols: ColState[]): boolean {\n        if (!_.areEqual(_.keys(this.columnComps), cols.map(({ colId }) => colId))) {\n            return false;\n        }\n\n        cols.forEach(col => {\n            this.columnComps.get(col.colId)!.setValue(col.selected, true);\n        });\n\n        return true;\n    }\n\n    protected createGroup(\n        columns: ColState[],\n        valueFormatter: (colState: ColState) => string,\n        selectLabelKey: ChartTranslationKey,\n        dragSourceId: string\n    ): void {\n        if (this.allowMultipleSelection) {\n            const selectedValueList = columns.filter(col => col.selected);\n            this.valuePillSelect = this.groupComp.createManagedBean(new AgPillSelect<ColState>({\n                valueList: columns,\n                selectedValueList,\n                valueFormatter,\n                selectPlaceholder: this.chartTranslationService.translate(selectLabelKey),\n                dragSourceId,\n                onValuesChange: params => this.onValueChange(params),\n                maxSelection: this.maxSelection,\n            }));\n            this.groupComp.addItem(this.valuePillSelect);\n        } else {\n            const params: AgSelectParams<ColState> = this.createValueSelectParams(columns);\n            params.onValueChange = (newValue: ColState) => {\n                columns.forEach(col => {\n                    col.selected = false;\n                });\n                newValue.selected = true;\n                // Clear the category aggregation function if the default ordinal category is selected\n                if (newValue.colId === ChartDataModel.DEFAULT_CATEGORY) {\n                    this.chartController.setAggFunc(undefined, true);\n                }\n                this.chartController.updateForPanelChange(newValue);\n            };\n            this.valueSelect = this.groupComp.createManagedBean(new AgSelect<ColState>(params));\n            this.groupComp.addItem(this.valueSelect);\n        }\n    }\n\n    protected refreshValueSelect(columns: ColState[]): void {\n        if (!this.valueSelect) { return; }\n        const { options, value } = this.createValueSelectParams(columns);\n        this.valueSelect.clearOptions().addOptions(options).setValue(value, true);\n    }\n\n    private createValueSelectParams(columns: ColState[]): {\n        options: ListOption<ColState>[],\n        value: ColState\n    } {\n        let selectedValue: ColState;\n        const options = columns.map(value => {\n            const text = _.escapeString(value.displayName)!;\n            if (value.selected) {\n                selectedValue = value;\n            }\n            return {\n                value,\n                text\n            }\n        });\n        return {\n            options,\n            value: selectedValue!,\n        };\n    }\n\n    protected onDragging(draggingEvent: DraggingEvent): void {\n        const itemHovered = this.checkHoveredItem(draggingEvent);\n\n        if (!itemHovered) { return; }\n\n        this.lastDraggedColumn = draggingEvent.dragItem.columns![0];\n\n        const { comp, position } = itemHovered;\n        const { comp: lastHoveredComp, position: lastHoveredPosition } = this.lastHoveredItem || {};\n\n        if (comp === lastHoveredComp && position === lastHoveredPosition) { return; }\n\n        this.autoScrollService.check(draggingEvent.event);\n        this.clearHoveredItems();\n        this.lastHoveredItem = { comp, position };\n\n        const eGui = comp.getGui();\n\n        eGui.classList.add('ag-list-item-hovered', `ag-item-highlight-${position}`);\n    }\n\n    protected checkHoveredItem(draggingEvent: DraggingEvent): { comp: AgCheckbox, position: 'top' | 'bottom' } | null {\n        if (_.missing(draggingEvent.vDirection)) { return null; }\n\n        const mouseEvent = draggingEvent.event;\n\n        for (const comp of this.columnComps.values()) {\n            const eGui = comp.getGui();\n\n            if (!eGui.querySelector('.ag-chart-data-column-drag-handle')) { continue; }\n\n            const rect = eGui.getBoundingClientRect();\n            const isOverComp = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;\n\n            if (isOverComp) {\n                const height = eGui.clientHeight;\n                const position = mouseEvent.clientY > rect.top + (height / 2) ? 'bottom': 'top';\n                return { comp, position };\n            }\n        }\n\n        return null;\n    }\n\n    protected onDragLeave(): void {\n        this.clearHoveredItems();\n    }\n\n    protected onDragStop(): void {\n        if (this.lastHoveredItem) {\n            const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n            const draggedColumnState = [...dimensionCols, ...valueCols]\n                .find(state => state.column === this.lastDraggedColumn);\n            if (draggedColumnState) {\n                let targetIndex = Array.from(this.columnComps.values()).indexOf(this.lastHoveredItem.comp);\n                if (this.lastHoveredItem.position === 'bottom') { targetIndex++; }\n\n                draggedColumnState.order = targetIndex;\n                this.chartController.updateForPanelChange(draggedColumnState);\n            }\n        }\n        this.clearHoveredItems();\n        this.lastDraggedColumn = undefined;\n        this.autoScrollService.ensureCleared();\n    }\n\n    protected clearHoveredItems(): void {\n        this.columnComps.forEach(columnComp => {\n            columnComp.getGui().classList.remove(\n                'ag-list-item-hovered',\n                'ag-item-highlight-top', \n                'ag-item-highlight-bottom'\n            );\n        });\n        this.lastHoveredItem = undefined;\n    }\n\n    protected addDragHandle(comp: AgCheckbox, col: ColState): void {\n        const eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService)!;\n\n        eDragHandle.classList.add('ag-drag-handle', 'ag-chart-data-column-drag-handle');\n\n        comp.getGui().insertAdjacentElement('beforeend', eDragHandle);\n\n        const dragSource: DragSource = {\n            type: DragSourceType.ChartPanel,\n            eElement: eDragHandle,\n            dragItemName: col.displayName,\n            getDragItem: () => ({ columns: [col.column!] }),\n            onDragStopped: () => this.onDragStop()\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    protected addChangeListener(component: AgRadioButton | AgCheckbox, columnState: ColState) {\n        this.addManagedListener(component, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            columnState.selected = component.getValue();\n            this.chartController.updateForPanelChange(columnState);\n        });\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.ChartPanel;\n    }\n\n    protected onValueChange({ added, updated, removed, selected }: AgPillSelectChangeParams<ColState>) {\n        let colState: ColState | undefined;\n        let resetOrder: boolean | undefined\n        const updateOrder = () => {\n            selected.forEach((col, index) => {\n                col.order = index;\n            });\n            resetOrder = true;\n        }\n        if (added.length) {\n            colState = added[0];\n            colState.selected = true;\n            updateOrder();\n        } else if (removed.length) {\n            colState = removed[0];\n            colState.selected = false;\n        } else if (updated.length) {\n            updateOrder();\n            colState = updated[0];\n        }\n        if (colState) {\n            this.chartController.updateForPanelChange(colState, resetOrder);\n        }\n    }\n\n    protected destroy(): void {\n        this.valuePillSelect = undefined;\n        this.valueSelect = undefined;\n        super.destroy();\n    }\n}\n", "import {\n    AgSelect,\n    Component,\n    DragAndDropService,\n    DraggingEvent,\n    DragItem,\n    DragSourceType,\n    DropTarget,\n    ListOption,\n    PillDragComp,\n    PillDropZonePanel,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\n\nexport interface AgPillSelectParams<TValue = string | null> {\n    valueList?: TValue[];\n    selectedValueList?: TValue[];\n    valueFormatter?: (value: TValue) => string;\n    ariaLabel?: string;\n    selectPlaceholder?: string;\n    onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n    dragSourceId?: string;\n    maxSelection?: number;\n}\n\nexport interface AgPillSelectChangeParams<TValue> {\n    added: TValue[],\n    removed: TValue[],\n    updated: TValue[],\n    selected: TValue[]\n}\n\nexport class AgPillSelect<TValue = string | null> extends Component {\n    private static TEMPLATE = /* html */`<div class=\"ag-pill-select\" role=\"presentation\"></div>`;\n\n    private dropZonePanel: PillSelectDropZonePanel<TValue>;\n    private eSelect?: AgSelect<TValue>;\n\n    private readonly config: AgPillSelectParams<TValue>;\n    private valueList: TValue[];\n    private selectedValues: TValue[];\n    private valueFormatter: (value: TValue) => string;\n    private onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n\n    constructor(config?: AgPillSelectParams<TValue>) {\n        super(AgPillSelect.TEMPLATE);\n        this.config = config ?? {};\n\n        const { selectedValueList, valueFormatter, valueList } = this.config;\n        this.selectedValues = selectedValueList ?? [];\n        this.valueList = valueList ?? [];\n        this.valueFormatter = valueFormatter ?? (value => _.escapeString(value as any)!);\n    }\n\n    @PostConstruct\n    private init(): void {\n        const { ariaLabel, onValuesChange, dragSourceId } = this.config;\n        this.dropZonePanel = this.createManagedBean(new PillSelectDropZonePanel(\n            {\n                getValues: () => this.selectedValues,\n                setValues: values => this.updateValues(values),\n                isDraggable: () => this.selectedValues.length > 1\n            },\n            value => this.valueFormatter(value),\n            ariaLabel!,\n            dragSourceId\n        ));\n        const eGui = this.getGui();\n        eGui.appendChild(this.dropZonePanel.getGui());\n        this.initSelect();\n        if (onValuesChange != null) {\n            this.onValuesChange = onValuesChange;\n        }\n    }\n\n    public setValues(valueList: TValue[], selectedValues: TValue[]): this {\n        const { added, removed, updated} = this.getChanges(this.valueList, valueList)\n        let refreshSelect = false;\n        if (added.length || removed.length || updated.length) {\n            refreshSelect = true;\n        }\n        this.valueList = valueList;\n        this.updateValues(selectedValues, refreshSelect, true);\n        return this;\n    }\n\n    public setValueFormatter(valueFormatter: (value: TValue) => string): this {\n        this.valueFormatter = valueFormatter;\n        return this;\n    }\n\n    private initSelect(): boolean {\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            return false;\n        }\n        const { selectPlaceholder: placeholder } = this.config;\n        this.eSelect = this.createBean(new AgSelect({\n            options,\n            placeholder,\n            onValueChange: value => this.addValue(value),\n            pickerIcon: 'chartsMenuAdd'\n        }));\n        this.getGui().appendChild(this.eSelect.getGui());\n        return true;\n    }\n\n    private createSelectOptions(): ListOption<TValue>[] {\n        let options: ListOption<TValue>[] = [];\n        const { maxSelection } = this.config;\n        if (maxSelection && this.selectedValues.length >= maxSelection) {\n            return options;\n        }\n        this.valueList.forEach(value => {\n            if (!this.selectedValues.includes(value)) {\n                options.push({ value, text: this.valueFormatter(value) });\n            }\n        });\n        return options;\n    }\n\n    private addValue(value: TValue): void {\n        this.dropZonePanel.addItem(value);\n    }\n\n    private updateValues(values: TValue[], forceRefreshSelect?: boolean, silent?: boolean): void {\n        const previousSelectedValues = this.selectedValues;\n        this.selectedValues = values;\n        const changes = this.getChanges(previousSelectedValues, values);\n        const refreshSelect = forceRefreshSelect || changes.added.length || changes.removed.length;\n        const activeElement = this.gridOptionsService.getDocument().activeElement;\n        const selectHasFocus = this.eSelect?.getGui().contains(activeElement);\n        const dropZoneHasFocus = this.dropZonePanel?.getGui().contains(activeElement);\n        if (!silent) {\n            this.onValuesChange?.(changes);\n        }\n        const emptyRefreshedSelect = refreshSelect ? !this.refreshSelect() : false;\n        this.dropZonePanel.refreshGui();\n        if (refreshSelect && selectHasFocus) {\n            if (emptyRefreshedSelect) {\n                this.dropZonePanel.focusList(true);\n            } else {\n                this.eSelect?.getFocusableElement().focus();\n            }\n        }\n        if (dropZoneHasFocus && !values.length) {\n            this.eSelect?.getFocusableElement().focus();\n        }\n    }\n\n    private getChanges(previousSelectedValues: TValue[], newSelectedValues: TValue[]): AgPillSelectChangeParams<TValue> {\n        const added = newSelectedValues.filter(value => !previousSelectedValues.includes(value));\n        const removed = previousSelectedValues.filter(value => !newSelectedValues.includes(value));\n        const updated = newSelectedValues.filter((value, index) => previousSelectedValues[index] !== value);\n        return { added, removed, updated, selected: newSelectedValues };\n    }\n\n    private refreshSelect(): boolean {\n        if (!this.eSelect) {\n            return this.initSelect();\n        }\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            _.removeFromParent(this.eSelect.getGui());\n            this.eSelect = this.destroyBean(this.eSelect);\n            return false;\n        }\n        this.eSelect.clearOptions().addOptions(options).setValue(undefined, true);\n        return true;\n    }\n\n    protected destroy(): void {\n        this.destroyBean(this.eSelect);\n        super.destroy();\n    }\n}\n\nclass PillSelectDragComp<TValue> extends PillDragComp<TValue> {\n    constructor(\n        private readonly value: TValue,\n        dragSourceDropTarget: DropTarget,\n        ghost: boolean,\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly draggable: boolean,\n        private readonly sourceId?: string\n    ) {\n        super(dragSourceDropTarget, ghost, false);\n    }\n\n    public getItem(): TValue {\n        return this.value;\n    }\n\n    protected getDisplayName(): string {\n        return this.valueFormatter(this.value);\n    }\n\n    protected getAriaDisplayName(): string {\n        return this.getDisplayName();\n    }\n\n    protected getTooltip(): string | null | undefined {\n        return undefined;\n    }\n\n    protected createGetDragItem(): () => DragItem<TValue> {\n        return () => ({\n            value: this.value\n        });\n    }\n\n    protected getDragSourceType(): DragSourceType {\n        return DragSourceType.ChartPanel;\n    }\n\n    protected getDragSourceId(): string | undefined {\n        return this.sourceId;\n    }\n\n    protected isDraggable(): boolean {\n        return this.draggable;\n    }\n}\n\nclass PillSelectDropZonePanel<TValue> extends PillDropZonePanel<PillSelectDragComp<TValue>, TValue> {\n    constructor(\n        private readonly model: {\n            getValues: () => TValue[],\n            setValues: (values: TValue[]) => void\n            isDraggable: () => boolean\n        },\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly ariaLabel: string,\n        private readonly sourceId?: string\n    ) {\n        super(false);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        super.init();\n    }\n\n    protected isItemDroppable(item: TValue, draggingEvent: DraggingEvent): boolean {\n        return this.isSourceEventFromTarget(draggingEvent) || (this.sourceId != null && this.sourceId === draggingEvent.dragSource.sourceId);\n    }\n\n    protected updateItems(items: TValue[]): void {\n        this.model.setValues(items);\n    }\n\n    protected getExistingItems(): TValue[] {\n        return this.model.getValues();\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? DragAndDropService.ICON_MOVE : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n\n    protected getAriaLabel(): string {\n        return this.ariaLabel;\n    }\n\n    protected createPillComponent(item: TValue, dropTarget: DropTarget, ghost: boolean): PillSelectDragComp<TValue> {\n        return new PillSelectDragComp(item, dropTarget, ghost, this.valueFormatter, this.model.isDraggable(), this.sourceId);\n    }\n\n    protected getItems(dragItem: DragItem): TValue[] {\n        return [dragItem.value];\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.ChartPanel;\n    }\n}\n", "import {\n    AgCheckbox,\n    AgGroupComponent,\n    AgToggleButton,\n    AutoScrollService,\n    Autowired,\n    DragAndDropService,\n    DropTarget,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ColState } from \"../../model/chartDataModel\";\nimport { ChartOptionsService } from \"../../services/chartOptionsService\";\nimport { DragDataPanel } from \"./dragDataPanel\";\nimport { ChartMenuService } from \"../../services/chartMenuService\";\n\nexport class SeriesDataPanel extends DragDataPanel {\n    private static TEMPLATE = /* html */`<div id=\"seriesGroup\"></div>`;\n\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n\n    constructor(\n        chartController: ChartController,\n        autoScrollService: AutoScrollService,\n        private readonly chartOptionsService: ChartOptionsService,\n        private readonly title: string,\n        allowMultipleSelect: boolean,\n        maxSelection: number | undefined,\n        private valueCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(chartController, autoScrollService, allowMultipleSelect, maxSelection, SeriesDataPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.groupComp = this.createBean(new AgGroupComponent({\n            title: this.title,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen\n        }));\n        if (this.chartController.isActiveXYChart()) {\n            const pairedModeToggle = this.groupComp.createManagedBean(new AgToggleButton({\n                label: this.chartTranslationService.translate('paired'),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                value: this.chartOptionsService.getPairedMode(),\n                onValueChange: newValue => {\n                    this.chartOptionsService.setPairedMode(!!newValue);\n                    this.chartController.updateForGridChange({ maintainColState: true });\n                }\n            }));\n            this.groupComp.addItem(pairedModeToggle);\n        }\n        if (this.chartMenuService.isLegacyFormat()) {\n            this.createLegacySeriesGroup(this.valueCols);\n        } else {\n            this.createSeriesGroup(this.valueCols);\n        }\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(valueCols: ColState[]): void {\n        if (this.chartMenuService.isLegacyFormat()) {\n            const canRefresh = this.refreshColumnComps(valueCols);\n            if (canRefresh) {\n                if (this.chartController.isActiveXYChart()) {\n                    const getSeriesLabel = this.generateGetSeriesLabel(valueCols);\n        \n                    valueCols.forEach(col => {\n                        this.columnComps.get(col.colId)!.setLabel(getSeriesLabel(col));\n                    });\n                }\n            } else {\n                this.recreate(valueCols);\n            }\n        } else {\n            this.valuePillSelect?.setValueFormatter(this.generateGetSeriesLabel(valueCols));\n            this.valuePillSelect?.setValues(valueCols, valueCols.filter(col => col.selected));\n            this.refreshValueSelect(valueCols);\n        }\n    }\n\n    private recreate(valueCols: ColState[]): void {\n        this.isOpen = this.groupComp.isExpanded();\n        _.clearElement(this.getGui());\n        this.destroyBean(this.groupComp);\n        this.valueCols = valueCols;\n        this.init();\n    }\n\n    private createSeriesGroup(columns: ColState[]): void {\n        this.createGroup(columns, this.generateGetSeriesLabel(columns), 'seriesAdd', 'seriesSelect');\n    }\n\n    private createLegacySeriesGroup(columns: ColState[]): void {\n        const getSeriesLabel = this.generateGetSeriesLabel(columns);\n\n        columns.forEach(col => {\n            const label = getSeriesLabel(col);\n            const comp = this.groupComp.createManagedBean(new AgCheckbox({\n                label,\n                value: col.selected\n            }));\n            comp.addCssClass('ag-data-select-checkbox');\n\n            this.addChangeListener(comp, col);\n            this.groupComp.addItem(comp);\n            this.columnComps.set(col.colId, comp);\n\n            this.addDragHandle(comp, col);\n        });\n\n        const seriesGroupGui = this.groupComp.getGui();\n\n        const dropTarget: DropTarget = {\n            getIconName: () => DragAndDropService.ICON_MOVE,\n            getContainer: () => seriesGroupGui,\n            onDragging: (params) => this.onDragging(params),\n            onDragLeave: () => this.onDragLeave(),\n            isInterestedIn: this.isInterestedIn.bind(this),\n            targetContainsSource: true\n        };\n\n        this.dragAndDropService.addDropTarget(dropTarget);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDropTarget(dropTarget));\n    }\n\n    private generateGetSeriesLabel(valueCols: ColState[]): (col: ColState) => string {\n        if (!this.chartController.isActiveXYChart()) {\n            return col => _.escapeString(col.displayName)!;\n        }\n\n        const selectedCols = valueCols.filter(col => col.selected);\n\n        const isBubble = this.chartController.getChartType() === 'bubble';\n        const isInPairedMode = this.chartOptionsService.getPairedMode();\n\n        const indexToAxisLabel = new Map<number, string>();\n        indexToAxisLabel.set(0, 'X');\n        indexToAxisLabel.set(1, 'Y');\n        indexToAxisLabel.set(2, 'size');\n\n        return (col: ColState): string => {\n            const escapedLabel = _.escapeString(col.displayName)!;\n\n            if (!col.selected) {\n                return escapedLabel;\n            }\n\n            const index = selectedCols.indexOf(col);\n\n            if (index === -1) { return escapedLabel; }\n\n            let axisLabel;\n\n            if (isInPairedMode) {\n                axisLabel = indexToAxisLabel.get(index % (isBubble ? 3 : 2));\n            } else {\n                if (index === 0) {\n                    axisLabel = 'X';\n                } else {\n                    axisLabel = isBubble && index % 2 === 0 ? 'size' : 'Y';\n                }\n            }\n\n            return `${escapedLabel} (${axisLabel})`;\n        };\n    }\n\n    protected destroy(): void {\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import {\n    AgCheckbox,\n    AgGroupComponent,\n    AgSelect,\n    Autowired,\n    ChartType,\n    Component,\n    PostConstruct,\n    SeriesChartType,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ColState } from \"../../model/chartDataModel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../services/chartTranslationService\";\n\nexport class SeriesChartTypePanel extends Component {\n    private static TEMPLATE = /* html */`<div id=\"seriesChartTypeGroup\"></div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private seriesChartTypeGroupComp: AgGroupComponent;\n    private selectedColIds: string[] = [];\n    private chartTypeComps: Map<string, AgSelect> = new Map();\n    private secondaryAxisComps: Map<string, AgCheckbox> = new Map();\n\n    constructor(\n        private readonly chartController: ChartController,\n        private columns: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(SeriesChartTypePanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.createSeriesChartTypeGroup(this.columns);\n    }\n\n    public refresh(columns: ColState[]): void {\n        if (!_.areEqual(this.getValidColIds(columns), this.selectedColIds)) {\n            this.recreate(columns);\n        } else {\n            this.refreshComps();\n        }\n    }\n\n    private recreate(columns: ColState[]): void {\n        this.isOpen = this.seriesChartTypeGroupComp.isExpanded();\n        _.clearElement(this.getGui());\n        this.destroyBean(this.seriesChartTypeGroupComp);\n        this.columns = columns;\n        this.selectedColIds = [];\n        this.clearComps();\n        this.init();\n    }\n\n    private getValidColIds(columns: ColState[]): string[] {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        return columns.filter(col => col.selected && !!seriesChartTypes.filter(s => s.colId === col.colId)[0])\n            .map(({ colId }) => colId);\n    }\n\n    private createSeriesChartTypeGroup(columns: ColState[]): void {\n        this.seriesChartTypeGroupComp = this.createBean(new AgGroupComponent({\n            title: this.chartTranslationService.translate('seriesChartType'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen\n        }));\n\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        columns.forEach(col => {\n            if (!col.selected) { return; }\n\n            const seriesChartType: SeriesChartType = seriesChartTypes.filter(s => s.colId === col.colId)[0];\n            if (!seriesChartType) { return; }\n\n            this.selectedColIds.push(col.colId);\n\n            const seriesItemGroup = this.seriesChartTypeGroupComp.createManagedBean(new AgGroupComponent({\n                title: col.displayName!,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: true,\n                cssIdentifier: 'charts-format-sub-level'\n            }));\n\n            const isSecondaryAxisDisabled = (chartType: ChartType) => ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n\n            const secondaryAxisComp = this.seriesChartTypeGroupComp\n                .createManagedBean(new AgCheckbox({\n                    label: this.chartTranslationService.translate('secondaryAxis'),\n                    labelWidth: \"flex\",\n                    disabled: isSecondaryAxisDisabled(seriesChartType.chartType),\n                    value: !!seriesChartType.secondaryAxis,\n                    onValueChange: (enabled: boolean) => this.chartController.updateSeriesChartType(col.colId, undefined, enabled)\n                }));\n\n            seriesItemGroup.addItem(secondaryAxisComp);\n\n            const translate = (key: ChartTranslationKey) => {\n                return this.chartTranslationService.translate(key);\n            }\n\n            const availableChartTypes = [\n                { value: 'line', text: translate('line') },\n                { value: 'area', text: translate('area') },\n                { value: 'stackedArea', text: translate('stackedArea') },\n                { value: 'groupedColumn', text: translate('groupedColumn') },\n                { value: 'stackedColumn', text: translate('stackedColumn') },\n            ];\n\n            const chartTypeComp = seriesItemGroup.createManagedBean(new AgSelect({\n                labelAlignment: 'left',\n                labelWidth: \"flex\",\n                options: availableChartTypes,\n                value: seriesChartType.chartType,\n                onValueChange: (chartType: ChartType) => this.chartController.updateSeriesChartType(col.colId, chartType)\n            }));\n\n            seriesItemGroup.addItem(chartTypeComp);\n\n            this.seriesChartTypeGroupComp.addItem(seriesItemGroup);\n            this.chartTypeComps.set(col.colId, chartTypeComp);\n            this.secondaryAxisComps.set(col.colId, secondaryAxisComp);\n        });\n\n        this.getGui().appendChild(this.seriesChartTypeGroupComp.getGui());\n    }\n\n    private refreshComps(): void {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n        this.selectedColIds.forEach(colId => {\n            const seriesChartType = seriesChartTypes.find(chartType => chartType.colId === colId);\n            if (!seriesChartType) { return; }\n            const chartTypeComp = this.chartTypeComps.get(colId);\n            const secondaryAxisComp = this.secondaryAxisComps.get(colId);\n\n            chartTypeComp?.setValue(seriesChartType.chartType);\n            secondaryAxisComp?.setValue(!!seriesChartType.secondaryAxis);\n            secondaryAxisComp?.setDisabled(this.isSecondaryAxisDisabled(seriesChartType.chartType));\n        });\n    }\n\n    private clearComps(): void {\n        this.chartTypeComps.clear();\n        this.secondaryAxisComps.clear();\n    }\n\n    private isSecondaryAxisDisabled(chartType: ChartType): boolean {\n        return ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n    }\n\n    protected destroy(): void {\n        this.clearComps();\n        this.seriesChartTypeGroupComp = this.destroyBean(this.seriesChartTypeGroupComp)!;\n        super.destroy();\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgToggleButton,\n    Autowired,\n    Component,\n    PostConstruct,\n} from '@ag-grid-community/core';\nimport { ChartTranslationService } from '../../services/chartTranslationService';\n\nexport class SwitchCategorySeriesDataPanel extends Component {\n    private static TEMPLATE = /* html */ `<div>\n        <ag-group-component ref=\"switchCategorySeriesGroup\"></ag-group-component>\n    </div>`;\n\n    @Autowired('chartTranslationService') protected readonly chartTranslationService: ChartTranslationService;\n\n    private switchCategorySeriesToggleButton?: AgToggleButton;\n\n    constructor(\n        private readonly getValue: () => boolean,\n        private readonly setValue: (value: boolean) => void,\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        this.switchCategorySeriesToggleButton = this.createManagedBean(new AgToggleButton({\n            label: this.chartTranslationService.translate('switchCategorySeries'),\n            labelAlignment: 'left',\n            labelWidth: \"flex\",\n            inputWidth: 'flex',\n            value: this.getValue(),\n            onValueChange: (value) => {\n                this.setValue(value);\n            },\n        }));\n\n        const switchCategorySeriesGroupParams: AgGroupComponentParams = {\n            title: undefined,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: true,\n            cssIdentifier: 'charts-data',\n            expanded: true,\n            items: [this.switchCategorySeriesToggleButton],\n        };\n\n        this.setTemplate(SwitchCategorySeriesDataPanel.TEMPLATE, {\n            switchCategorySeriesGroup: switchCategorySeriesGroupParams,\n        });\n    }\n\n    public refresh(): void {\n        this.switchCategorySeriesToggleButton?.setValue(this.getValue(), true);\n    }\n}\n", "import {\n    _,\n    ChartFormatPanel,\n    ChartFormatPanelGroup,\n    ChartPanelGroupDef,\n    Component,\n    PostConstruct,\n    ChartType\n} from \"@ag-grid-community/core\";\nimport { LegendPanel } from \"./legend/legendPanel\";\nimport { CartesianAxisPanel } from \"./axis/cartesianAxisPanel\";\nimport { PolarAxisPanel } from \"./axis/polarAxisPanel\";\nimport { ChartPanel } from \"./chart/chartPanel\";\nimport { SeriesPanel } from \"./series/seriesPanel\";\nimport { ChartSeriesType, hasGradientLegend, isCartesian, isPolar } from \"../../utils/seriesTypeMapper\";\nimport { GradientLegendPanel } from './legend/gradientLegendPanel';\nimport { ChartPanelFeature } from \"../chartPanelFeature\";\nimport { ChartMenuContext } from \"../chartMenuContext\";\n\nexport interface FormatPanelOptions extends ChartMenuContext {\n    isExpandedOnInit?: boolean,\n    seriesType?: ChartSeriesType,\n}\n\nconst DefaultFormatPanelDef: ChartFormatPanel = {\n    groups: [\n        { type: 'chart' },\n        { type: 'legend' },\n        { type: 'series' },\n        { type: 'axis' },\n    ]\n};\n\nexport class FormatPanel extends Component {\n    public static TEMPLATE = /* html */ `<div class=\"ag-chart-format-wrapper\"></div>`;\n\n    private chartPanelFeature: ChartPanelFeature;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(FormatPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.chartPanelFeature = this.createManagedBean(new ChartPanelFeature(\n            this.chartMenuContext.chartController,\n            this.getGui(),\n            'ag-chart-format-section',\n            (chartType, seriesType) => this.createPanels(chartType, seriesType)\n        ));\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(chartType: ChartType, seriesType: ChartSeriesType) {\n        this.getFormatPanelDef().groups?.forEach((groupDef: ChartPanelGroupDef<ChartFormatPanelGroup>) => {\n            const group = groupDef.type;\n\n            // ensure the group should be displayed for the current series type\n            if (!this.isGroupPanelShownInSeries(group, seriesType)) {\n                return;\n            }\n\n            const opts: FormatPanelOptions = {\n                ...this.chartMenuContext,\n                isExpandedOnInit: groupDef.isOpen,\n                seriesType\n            };\n\n            switch (group) {\n                case 'chart':\n                    this.chartPanelFeature.addComponent(new ChartPanel(opts));\n                    break;\n                case 'legend':\n                    // Some chart types require non-standard legend options, so choose the appropriate panel\n                    const panel = hasGradientLegend(chartType) ? new GradientLegendPanel(opts) : new LegendPanel(opts);\n                    this.chartPanelFeature.addComponent(panel);\n                    break;\n                case 'axis':\n                    // Polar charts have different axis options from cartesian charts, so choose the appropriate panels\n                    if (isPolar(chartType)) {\n                        this.chartPanelFeature.addComponent(new PolarAxisPanel(opts));\n                    } else if (isCartesian(chartType)) {\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    }\n                    break;\n                case 'horizontalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                    break;\n                case 'verticalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    break;\n                case 'series':\n                    this.chartPanelFeature.addComponent(new SeriesPanel(opts));\n                    break;\n                case 'navigator':\n                    _.warnOnce(`'navigator' is now displayed in the charts advanced settings instead of the format panel, and this setting will be ignored.`);\n                default:\n                    _.warnOnce(`Invalid charts format panel group name supplied: '${groupDef.type}'`);\n            }\n        });\n    }\n\n    private getFormatPanelDef() {\n        const userProvidedFormatPanelDef = this.gridOptionsService.get('chartToolPanelsDef')?.formatPanel;\n        return userProvidedFormatPanelDef ? userProvidedFormatPanelDef : DefaultFormatPanelDef;\n    }\n\n    private isGroupPanelShownInSeries = (group: ChartFormatPanelGroup, seriesType: ChartSeriesType): boolean => {\n        // Determine whether the given panel group is shown depending on the active series type\n\n        // These panel groups are always shown regardless of series type\n        const commonGroupPanels = ['chart', 'legend', 'series'];\n        if (commonGroupPanels.includes(group)) {\n            return true;\n        }\n\n        // These panel groups depend on the selected series type\n        const extendedGroupPanels: { [T in ChartSeriesType]?: Array<ChartFormatPanelGroup> } = {\n            'bar': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'column': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'line': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'area': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'scatter': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'bubble': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'histogram': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'cartesian': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'radial-column': ['axis'],\n            'radial-bar': ['axis'],\n            'radar-line': ['axis'],\n            'radar-area': ['axis'],\n            'nightingale': ['axis'],\n            'range-bar': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'range-area': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'treemap': [],\n            'sunburst': [],\n            'heatmap': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'waterfall': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'box-plot': ['axis', 'horizontalAxis', 'verticalAxis'],\n        };\n        return extendedGroupPanels[seriesType]?.includes(group) ?? false;\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    AgSliderParams\n} from \"@ag-grid-community/core\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class LegendPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"legendGroup\">\n                <ag-select ref=\"legendPositionSelect\"></ag-select>\n                <ag-slider ref=\"legendPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"markerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"markerStrokeSlider\"></ag-slider>\n                <ag-slider ref=\"markerPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingXSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingYSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({ chartMenuParamsFactory: chartMenuUtils, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.chartMenuUtils = chartMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const legendGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'legend.enabled',\n            {\n                cssIdentifier: 'charts-format-top-level',\n                direction: 'vertical',\n                title: this.chartTranslationService.translate(\"legend\"),\n                suppressEnabledCheckbox: false,\n                suppressToggleExpandOnEnableChange: true,\n                expanded: this.isExpandedOnInit,\n                items: [this.createLabelPanel()]\n            }\n        );\n        this.setTemplate(LegendPanel.TEMPLATE, {\n            legendGroup: legendGroupParams,\n            legendPositionSelect: this.chartMenuUtils.getDefaultLegendParams('legend.position'),\n            legendPaddingSlider: this.getSliderParams('spacing', 'spacing', 200),\n            markerSizeSlider: this.getSliderParams(\"item.marker.size\", \"markerSize\", 40),\n            markerStrokeSlider: this.getSliderParams(\"item.marker.strokeWidth\", \"markerStroke\", 10),\n            markerPaddingSlider: this.getSliderParams(\"item.marker.padding\", \"itemSpacing\", 20),\n            itemPaddingXSlider: this.getSliderParams(\"item.paddingX\", \"layoutHorizontalSpacing\", 50),\n            itemPaddingYSlider: this.getSliderParams(\"item.paddingY\", \"layoutVerticalSpacing\", 50),\n        });\n    }\n\n    private getSliderParams(expression: string, labelKey: ChartTranslationKey, defaultMaxValue: number): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(`legend.${expression}`, labelKey, defaultMaxValue);\n    }\n\n    private createLabelPanel(): FontPanel {\n        const params: FontPanelParams = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `legend.item.label.${key}`\n        };\n\n        return this.createManagedBean(new FontPanel(params));\n    }\n}\n", "import {\n    _,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelectParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    RefSelector\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../chartMenuParamsFactory\";\nimport { ChartOptionsProxy } from '../../services/chartOptionsService';\n\ninterface Font {\n    fontFamily?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    fontSize?: number;\n    color?: string;\n}\n\nexport interface FontPanelParams {\n    name?: string;\n    enabled: boolean;\n    suppressEnabledCheckbox?: boolean;\n    onEnableChange?: (enabled: boolean) => void;\n    chartMenuUtils: ChartMenuParamsFactory,\n    keyMapper: (key: string) => string\n}\n\nexport class FontPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div class=\"ag-font-panel\">\n            <ag-group-component ref=\"fontGroup\">\n                <ag-select ref=\"familySelect\"></ag-select>\n                <ag-select ref=\"weightStyleSelect\"></ag-select>\n                <div class=\"ag-charts-font-size-color\">\n                    <ag-select ref=\"sizeSelect\"></ag-select>\n                    <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n                </div>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('fontGroup') private fontGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly params: FontPanelParams;\n    private readonly chartOptions: ChartOptionsProxy;\n    private activeComps: Component[] = [];\n\n    constructor(params: FontPanelParams) {\n        super();\n        this.params = params;\n        this.chartOptions = params.chartMenuUtils.getChartOptions();\n    }\n\n    @PostConstruct\n    private init() {\n        const fontGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.params.name || this.chartTranslationService.translate('font'),\n            enabled: this.params.enabled,\n            suppressEnabledCheckbox: !!this.params.suppressEnabledCheckbox,\n            onEnableChange: enabled => {\n                if (this.params.onEnableChange) {\n                    this.params.onEnableChange(enabled);\n                }\n            }\n        };\n        this.setTemplate(FontPanel.TEMPLATE, {\n            fontGroup: fontGroupParams,\n            familySelect: this.getFamilySelectParams(),\n            weightStyleSelect: this.getWeightStyleSelectParams(),\n            sizeSelect: this.getSizeSelectParams(),\n            colorPicker: this.params.chartMenuUtils.getDefaultColorPickerParams(this.params.keyMapper('color'))\n        });\n    }\n\n    public addCompToPanel(comp: Component) {\n        this.fontGroup.addItem(comp);\n        this.activeComps.push(comp);\n    }\n\n    public setEnabled(enabled: boolean): void {\n        this.fontGroup.setEnabled(enabled);\n    }\n\n    private getFamilySelectParams(): AgSelectParams {\n        const families = [\n            'Arial, sans-serif',\n            'Aria Black, sans-serif',\n            'Book Antiqua,  serif',\n            'Charcoal, sans-serif',\n            'Comic Sans MS, cursive',\n            'Courier, monospace',\n            'Courier New, monospace',\n            'Gadget, sans-serif',\n            'Geneva, sans-serif',\n            'Helvetica, sans-serif',\n            'Impact, sans-serif',\n            'Lucida Console, monospace',\n            'Lucida Grande, sans-serif',\n            'Lucida Sans Unicode,  sans-serif',\n            'Monaco, monospace',\n            'Palatino Linotype, serif',\n            'Palatino, serif',\n            'Times New Roman, serif',\n            'Times, serif',\n            'Verdana, sans-serif'\n        ];\n\n        const family = this.getInitialFontValue('fontFamily');\n        let initialValue = families[0];\n\n        if (family) {\n            // check for known values using lowercase\n            const lowerCaseValues = families.map(f => f.toLowerCase());\n            const valueIndex = lowerCaseValues.indexOf(family.toLowerCase());\n\n            if (valueIndex >= 0) {\n                initialValue = families[valueIndex];\n            } else {\n                // add user provided value to list\n                const capitalisedFontValue = _.capitalise(family);\n\n                families.push(capitalisedFontValue);\n\n                initialValue = capitalisedFontValue;\n            }\n        }\n\n        const options = families.sort().map(value => ({ value, text: value }));\n\n        return {\n            options,\n            inputWidth: 'flex',\n            value: `${initialValue}`,\n            onValueChange: newValue => this.setFont({ fontFamily: newValue! })\n        };\n    }\n\n    private getSizeSelectParams(): AgSelectParams {\n        const sizes = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\n        const size = this.getInitialFontValue('fontSize');\n\n        if (!_.includes(sizes, size)) {\n            sizes.push(size!);\n        }\n\n        const options = sizes.sort((a, b) => a - b).map(value => ({ value: `${value}`, text: `${value}` }));\n\n        return {\n            options,\n            inputWidth: 'flex',\n            value: `${size}`,\n            onValueChange: newValue => this.setFont({ fontSize: parseInt(newValue!, 10) }),\n            label: this.chartTranslationService.translate('size')\n        };\n    }\n\n    private getWeightStyleSelectParams(): AgSelectParams {\n        const weight = this.getInitialFontValue('fontWeight') ?? 'normal';\n        const style = this.getInitialFontValue('fontStyle') ?? 'normal';\n\n        const weightStyles: { name: 'normal' | 'bold' | 'italic' | 'boldItalic' | 'predefined', weight: string, style: string }[] = [\n            { name: 'normal', weight: 'normal', style: 'normal' },\n            { name: 'bold', weight: 'bold', style: 'normal' },\n            { name: 'italic', weight: 'normal', style: 'italic' },\n            { name: 'boldItalic', weight: 'bold', style: 'italic' }\n        ];\n\n        let selectedOption = weightStyles.find(x => x.weight === weight && x.style === style);\n\n        if (!selectedOption) {\n            selectedOption = { name: 'predefined', weight, style };\n            weightStyles.unshift(selectedOption);\n        }\n\n        const options = weightStyles.map(ws => ({\n            value: ws.name,\n            text: this.chartTranslationService.translate(ws.name),\n        }));\n\n        return {\n            options,\n            inputWidth: 'flex',\n            value: selectedOption.name,\n            onValueChange: newValue => {\n                const selectedWeightStyle = weightStyles.find(x => x.name === newValue);\n\n                this.setFont({ fontWeight: selectedWeightStyle!.weight, fontStyle: selectedWeightStyle!.style });\n            }\n        };\n    }\n\n    public addItemToPanel(item: Component) {\n        this.fontGroup.addItem(item);\n        this.activeComps.push(item);\n    }\n\n    private destroyActiveComps(): void {\n        this.activeComps.forEach(comp => {\n            _.removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActiveComps();\n        super.destroy();\n    }\n\n    private setFont(font: Font): void {\n        const { keyMapper } = this.params;\n        Object.entries(font).forEach(([fontKey, value]: [keyof Font, any]) => {\n            if (value) {\n                this.chartOptions.setValue(keyMapper(fontKey), value);\n            }\n        });\n    }\n\n    private getInitialFontValue<K extends keyof Font>(fontKey: K): Font[K] {\n        const { keyMapper } = this.params;\n        return this.chartOptions.getValue(keyMapper(fontKey));\n    }\n}\n", "import {\n    _,\n    AgCheckbox,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelect,\n    AgSelectParams,\n    AgSlider,\n    AgSliderParams,\n    Autowired,\n    Component,\n    Events,\n    PostConstruct,\n    RefSelector,\n} from \"@ag-grid-community/core\";\nimport type { AgCartesianAxisOptions } from 'ag-charts-community';\nimport { ChartController } from \"../../../chartController\";\nimport { AxisTicksPanel } from \"./axisTicksPanel\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { GridLinePanel } from '../gridLine/gridLinePanel';\nimport { AgAngleSelect } from \"../../../../../widgets/agAngleSelect\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport { isCartesian } from '../../../utils/seriesTypeMapper';\nimport { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\n\nconst DEFAULT_TIME_AXIS_FORMAT = '%d %B %Y';\n\nexport class CartesianAxisPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"axisGroup\">\n                <ag-select ref=\"axisTypeSelect\"></ag-select>\n                <ag-select ref=\"axisTimeFormatSelect\"></ag-select>\n                <ag-select ref=\"axisPositionSelect\"></ag-select>\n                <ag-color-picker ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('axisGroup') private axisGroup: AgGroupComponent;\n    @RefSelector('axisTypeSelect') private axisTypeSelect: AgSelect;\n    @RefSelector('axisPositionSelect') private axisPositionSelect: AgSelect;\n    @RefSelector('axisTimeFormatSelect') private axisTimeFormatSelect: AgSelect;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly axisType: 'xAxis' | 'yAxis';\n    private readonly chartController: ChartController;\n    private readonly chartAxisOptionsProxy: ChartOptionsProxy;\n    private readonly chartAxisThemeOverridesProxy: ChartOptionsProxy;\n    private readonly chartAxisAppliedThemeOverridesProxy: ChartOptionsProxy;\n    private readonly isExpandedOnInit: boolean;\n\n    private activePanels: Component[] = [];\n    private axisLabelUpdateFuncs: Function[] = [];\n\n    private prevRotation: number | undefined;\n\n    constructor(axisType: 'xAxis' | 'yAxis', { chartController, chartOptionsService, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.axisType = axisType;\n        this.chartController = chartController;\n        this.chartAxisOptionsProxy = chartOptionsService.getCartesianAxisOptionsProxy(axisType);\n        this.chartAxisThemeOverridesProxy = chartOptionsService.getCartesianAxisThemeOverridesProxy(axisType);\n        this.chartAxisAppliedThemeOverridesProxy = chartOptionsService.getCartesianAxisAppliedThemeOverridesProxy(axisType);\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const labelKey: ChartTranslationKey = this.axisType;\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate(labelKey),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true\n        };\n\n        const chartAxisOptions = this.createManagedBean(new ChartMenuParamsFactory(this.chartAxisOptionsProxy));\n        const chartAxisThemeOverrides = this.createManagedBean(new ChartMenuParamsFactory(this.chartAxisThemeOverridesProxy));\n\n        const axisTypeSelectParams = this.getAxisTypeSelectParams(chartAxisOptions, this.chartAxisAppliedThemeOverridesProxy);\n        const axisPositionSelectParams = this.getAxisPositionSelectParams(chartAxisOptions);\n        const axisTimeFormatSelectParams = this.getAxisTimeFormatSelectParams(chartAxisOptions);\n        const axisColorInputParams = this.getAxisColorInputParams(chartAxisThemeOverrides);\n        const axisLineWidthSliderParams = this.getAxisLineWidthSliderParams(chartAxisThemeOverrides);\n\n        this.setTemplate(CartesianAxisPanel.TEMPLATE, {\n            axisGroup: axisGroupParams,\n            axisTypeSelect: axisTypeSelectParams ?? undefined,\n            axisPositionSelect: axisPositionSelectParams ?? undefined,\n            axisTimeFormatSelect: axisTimeFormatSelectParams ?? undefined,\n            axisColorInput: axisColorInputParams,\n            axisLineWidthSlider: axisLineWidthSliderParams\n        });\n\n        if (!axisTypeSelectParams) this.removeTemplateComponent(this.axisTypeSelect);\n        if (!axisPositionSelectParams) this.removeTemplateComponent(this.axisPositionSelect);\n        if (!axisTimeFormatSelectParams) {\n            this.removeTemplateComponent(this.axisTimeFormatSelect);\n        } else {\n            // Conditionally hide the time format input based on the currently selected axis type\n            const updateTimeFormatVisibility = () => {\n                const isTimeAxis = this.chartAxisOptionsProxy.getValue('type') === 'time';\n                _.setDisplayed(this.axisTimeFormatSelect.getGui(), isTimeAxis)\n            };\n            updateTimeFormatVisibility();\n            // Update the visibility whenever the axis type changes\n            this.addManagedListener(this.eventService, Events.EVENT_CHART_OPTIONS_CHANGED, (e) => {\n                updateTimeFormatVisibility();\n            });\n        }\n\n        this.initGridLines(chartAxisThemeOverrides);\n        this.initAxisTicks(chartAxisThemeOverrides);\n        this.initAxisLabels(chartAxisThemeOverrides);\n\n        const updateAxisLabelRotations = () => this.axisLabelUpdateFuncs.forEach(func => func());\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, updateAxisLabelRotations);\n    }\n\n    private getAxisTypeSelectParams(chartAxisOptions: ChartMenuParamsFactory, chartAxisAppliedThemeOverrides: ChartOptionsProxy): AgSelectParams | null {\n        const chartOptions = chartAxisOptions.getChartOptions();\n        const axisTypeSelectOptions = ((chartType, axisType) => {\n            if (!isCartesian(chartType)) return null;\n            switch (chartType) {\n                // Some chart types do not support configuring the axis type\n                case 'heatmap':\n                    return null;\n                default:\n                    switch (axisType) {\n                        // Horizontal axis type can be changed between a limited subset of axis types\n                        case 'xAxis': return [\n                            { value: 'category', text: this.translate('category') },\n                            { value: 'number', text: this.translate('number') },\n                            { value: 'time', text: this.translate('time') },\n                        ];\n                        // Vertical axis type cannot currently be changed\n                        case 'yAxis': return null;\n                    }\n            }\n        })(this.chartController.getChartType(), this.axisType);\n        if (!axisTypeSelectOptions) return null;\n        const params = chartAxisOptions.getDefaultSelectParams(\n            'type',\n            'axisType',\n            axisTypeSelectOptions,\n        );\n        params.onValueChange = (value: AgCartesianAxisOptions['type']): void => {\n            const previousAxisType = chartOptions.getValue<AgCartesianAxisOptions['type']>('type');\n            if (value === previousAxisType) return;\n            // If the axis type is changed, we need to carry over all the accumulated theme overrides\n            // that have been applied to the existing axis type so far\n            const previousAxisThemeOverrides = chartAxisAppliedThemeOverrides.getValue<AgCartesianAxisOptions>('*');\n            // Optionally update the axis label format when switching between time and non-time axes\n            const previousAxisIsTimeAxis = isTimeAxisType(previousAxisType);\n            const updatedAxisIsTimeAxis = isTimeAxisType(value);\n            const updatedLabelFormat = (previousAxisIsTimeAxis !== updatedAxisIsTimeAxis\n                ? (updatedAxisIsTimeAxis ? DEFAULT_TIME_AXIS_FORMAT : undefined)\n                : null\n            );\n            // Update the axis type (and label format if necessary)\n            if (updatedLabelFormat === null) {\n                chartOptions.setValue<AgCartesianAxisOptions['type']>('type', value);\n            } else {\n                const existingLabel = chartOptions.getValue<AgCartesianAxisOptions['label']>('label') ?? {};\n                chartOptions.setValues<AgCartesianAxisOptions['type'] | AgCartesianAxisOptions['label']>([\n                    { expression: 'type', value },\n                    { expression: 'label', value: { ...existingLabel, format: updatedLabelFormat } }\n                ]);\n                this.axisTimeFormatSelect.setValue(updatedLabelFormat, true);\n            }\n            // Reapply the previous theme overrides to the new axis type\n            chartAxisAppliedThemeOverrides.setValue<AgCartesianAxisOptions>('*', previousAxisThemeOverrides);\n        };\n        return params;\n    }\n\n    private getAxisPositionSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        const axisPositionSelectOptions = ((chartType, axisType) => {\n            if (!isCartesian(chartType)) return null;\n            switch (chartType) {\n                // Some chart types do not support configuring the axis position\n                case 'heatmap':\n                    return null;\n                default:\n                    switch (axisType) {\n                        // Horizontal axis position can be changed between top and bottom\n                        case 'xAxis': return [\n                            { value: 'top', text: this.translate('top') },\n                            { value: 'bottom', text: this.translate('bottom') },\n                        ];\n                        // Vertical axis position can be changed between left and right\n                        case 'yAxis': return [\n                            { value: 'left', text: this.translate('left') },\n                            { value: 'right', text: this.translate('right') },\n                        ];\n                    }\n            }\n        })(this.chartController.getChartType(), this.axisType);\n        if (!axisPositionSelectOptions) return null;\n        return chartAxisOptions.getDefaultSelectParams(\n            'position',\n            'position',\n            axisPositionSelectOptions,\n        );\n    }\n\n    private getAxisTimeFormatSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        const axisTimeFormatSelectOptions = ((chartType, axisType) => {\n            if (!isCartesian(chartType)) return null;\n            switch (axisType) {\n                case 'xAxis': return [\n                    { value: '%d/%m/%Y', text: this.translate('timeFormatSlashesDDMMYYYY') },\n                    { value: '%m/%d/%Y', text: this.translate('timeFormatSlashesMMDDYYYY') },\n                    { value: '%d/%m/%y', text: this.translate('timeFormatSlashesDDMMYY') },\n                    { value: '%m/%d/%y', text: this.translate('timeFormatSlashesMMDDYY') },\n                    { value: '%d.%e.%y', text: this.translate('timeFormatDotsDDMYY') },\n                    { value: '%e.%d.%y', text: this.translate('timeFormatDotsMDDYY') },\n                    { value: '%Y-%m-%d', text: this.translate('timeFormatDashesYYYYMMDD') },\n                    { value: '%d %B %Y', text: this.translate('timeFormatSpacesDDMMMMYYYY') },\n                    { value: '%H:%M:%S', text: this.translate('timeFormatHHMMSS') },\n                    { value: '%I:%M:%S %p', text: this.translate('timeFormatHHMMSSAmPm') },\n                ];\n                case 'yAxis': return null;\n            }\n        })(this.chartController.getChartType(), this.axisType);\n        if (!axisTimeFormatSelectOptions) return null;\n        return chartAxisOptions.getDefaultSelectParams(\n            'label.format',\n            'timeFormat',\n            axisTimeFormatSelectOptions,\n        );\n    }\n\n    private getAxisColorInputParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgColorPickerParams {\n        return chartAxisThemeOverrides.getDefaultColorPickerParams('line.color');\n    }\n\n    private getAxisLineWidthSliderParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgSliderParams {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n        // Note that there is no separate checkbox for enabling/disabling the axis line. Whenever the line width is\n        // changed, the value for `line.enabled` is inferred based on the whether the `line.width` value is non-zero.\n        const getAxisLineWidth = (): number | null => {\n            const isAxisLineEnabled = chartOptions.getValue<boolean>('line.enabled');\n            if (!isAxisLineEnabled) return null;\n            return chartOptions.getValue<number>('line.width');\n        };\n        const setAxisLineWidth = (value: number | null): void => {\n            chartOptions.setValues<number | boolean>([\n                { expression: 'line.enabled', value: value != null },\n                { expression: 'line.width', value: value ?? 0},\n            ]);\n        };\n        const axisLineWidthSliderParams = chartAxisThemeOverrides.getDefaultSliderParamsWithoutValueParams(\n            getAxisLineWidth() ?? 0,\n            \"thickness\",\n            10\n        );\n        axisLineWidthSliderParams.onValueChange = (newValue) => {\n            setAxisLineWidth(newValue === 0 ? null : newValue);\n        };\n        return axisLineWidthSliderParams;\n    }\n\n    private initGridLines(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartType = this.chartController.getChartType();\n        switch (chartType) {\n            // Some chart types do not support configuring grid lines\n            case 'heatmap':\n                return;\n            default: \n                const gridLineComp = this.createBean(new GridLinePanel(chartAxisThemeOverrides));\n                this.axisGroup.addItem(gridLineComp);\n                this.activePanels.push(gridLineComp);\n        }\n    }\n\n    private initAxisTicks(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        if (!this.hasConfigurableAxisTicks()) return;\n        const axisTicksComp = this.createBean(new AxisTicksPanel(chartAxisThemeOverrides));\n        this.axisGroup.addItem(axisTicksComp);\n        this.activePanels.push(axisTicksComp);\n    }\n\n    private hasConfigurableAxisTicks(): boolean {\n        // Axis ticks are disabled for some chart types\n        const chartType = this.chartController.getChartType();\n        switch (chartType) {\n            case 'radarLine':\n            case 'radarArea':\n            case 'rangeBar':\n            case 'boxPlot':\n            case 'waterfall':\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    private initAxisLabels(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const params: FontPanelParams = {\n            name: this.translate(\"labels\"),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: chartAxisThemeOverrides,\n            keyMapper: key => `label.${key}`\n        };\n\n        const labelPanelComp = this.createBean(new FontPanel(params));\n        this.axisGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n\n        this.addAdditionalLabelComps(labelPanelComp, chartAxisThemeOverrides);\n    }\n\n    private addAdditionalLabelComps(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        this.addLabelPadding(labelPanelComp, chartAxisThemeOverrides);\n\n        const rotationComp = this.createRotationWidget('labelRotation', chartAxisThemeOverrides);\n        const autoRotateCb = this.initLabelRotation(rotationComp, chartAxisThemeOverrides);\n\n        labelPanelComp.addCompToPanel(autoRotateCb);\n        labelPanelComp.addCompToPanel(rotationComp);\n    }\n\n    private initLabelRotation(rotationComp: AgAngleSelect, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const getLabelAutoRotateValue = (): boolean => {\n            return chartOptions.getValue<boolean>('label.autoRotate');\n        };\n\n        const updateAutoRotate = (autoRotate: boolean) => {\n            // Remember the existing rotation before we clear it from the options\n            if (autoRotate) this.prevRotation = getLabelRotationValue();\n\n            // For the autoRotate option to take effect, we need to additionally clear the rotation option value\n            chartOptions.setValues<boolean | number | undefined>([\n                { expression: \"label.autoRotate\", value: autoRotate },\n                // Clear the rotation option when activating auto-rotate, reinstate the previous value when deactivating\n                { expression: \"label.rotation\", value: autoRotate ? undefined : this.prevRotation }\n            ]);\n\n            rotationComp.setDisabled(autoRotate);\n        };\n\n        const rotation = getLabelRotationValue();\n        const autoRotate = typeof rotation === 'number' ? false : getLabelAutoRotateValue();\n\n        const autoRotateCheckbox = this.createBean(new AgCheckbox({\n            label: this.translate('autoRotate'),\n            value: autoRotate,\n            onValueChange: updateAutoRotate\n        }));\n\n        // init rotation comp state\n        rotationComp.setDisabled(autoRotate);\n\n        return autoRotateCheckbox;\n    }\n\n    private createRotationWidget(labelKey: ChartTranslationKey, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const setLabelRotationValue = (value: number | undefined): void => {\n            return chartOptions.setValue<number | undefined>('label.rotation', value);\n        };\n\n        const degreesSymbol = String.fromCharCode(176);\n\n        const label = `${this.chartTranslationService.translate(labelKey)} ${degreesSymbol}`;\n        const angleSelect = new AgAngleSelect({\n            label,\n            labelWidth: \"flex\",\n            value: getLabelRotationValue() ?? 0,\n            onValueChange: setLabelRotationValue,\n        });\n\n        // the axis label rotation needs to be updated when the default category changes in the data panel\n        this.axisLabelUpdateFuncs.push(() => {\n            angleSelect.setValue(getLabelRotationValue() ?? 0);\n        });\n\n        return this.createBean(angleSelect);\n    }\n\n    private addLabelPadding(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const labelPaddingSlider = this.createBean(new AgSlider(chartAxisThemeOverrides.getDefaultSliderParams(\n            \"label.padding\",\n            \"padding\",\n            30\n        )));\n\n        labelPanelComp.addCompToPanel(labelPaddingSlider);\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private removeTemplateComponent(component: Component): void {\n        _.removeFromParent(component.getGui());\n        this.destroyBean(component);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n\nfunction isTimeAxisType(axisType: AgCartesianAxisOptions['type']): boolean {\n    switch (axisType) {\n        case 'time':\n            return true;\n        case 'number':\n        case 'log':\n        case 'category':\n        case 'grouped-category':\n        default:\n            return false;\n    }\n}", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class AxisTicksPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"axisTicksGroup\">\n                <ag-color-picker ref=\"axisTicksColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"axisTicksWidthSlider\"></ag-slider>\n                <ag-slider ref=\"axisTicksSizeSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const axisTicksGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'tick.enabled',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"ticks\"),\n                suppressEnabledCheckbox: false\n            }\n        );\n        const axisTicksColorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams(\"tick.color\");\n        const axisTicksWidthSliderParams = this.chartMenuUtils.getDefaultSliderParams(\"tick.width\", \"width\", 10);\n        const axisTicksSizeSliderParams = this.chartMenuUtils.getDefaultSliderParams(\"tick.size\", \"length\", 30);\n        this.setTemplate(AxisTicksPanel.TEMPLATE, {\n            axisTicksGroup: axisTicksGroupParams,\n            axisTicksColorPicker: axisTicksColorPickerParams,\n            axisTicksWidthSlider: axisTicksWidthSliderParams,\n            axisTicksSizeSlider: axisTicksSizeSliderParams\n        });\n    }\n}\n", "import { AgGroupComponentParams, AgSliderParams, Autowired, Component, PostConstruct } from '@ag-grid-community/core';\nimport { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { AgAxisGridLineOptions } from 'ag-charts-community';\nimport { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\n\nexport class GridLinePanel extends Component {\n    public static TEMPLATE = /* html */ `<div>\n            <ag-group-component ref=\"gridLineGroup\">\n                <ag-color-picker ref=\"gridLineColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"gridLineWidthSlider\"></ag-slider>\n                <ag-slider ref=\"gridLineLineDashSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartOptions: ChartOptionsProxy;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    @PostConstruct\n    private init() {\n        const gridLineGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>('gridLine.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('gridLines'),\n            suppressEnabledCheckbox: false,\n        });\n        const gridLineColorPickerParams = this.getGridLineColorPickerParams('color');\n        const gridLineWidthSliderParams = this.getGridLineWidthSliderParams('thickness');\n        const gridLineLineDashSliderParams = this.getGridLineDashSliderParams('lineDash');\n        this.setTemplate(GridLinePanel.TEMPLATE, {\n            gridLineGroup: gridLineGroupParams,\n            gridLineColorPicker: gridLineColorPickerParams,\n            gridLineWidthSlider: gridLineWidthSliderParams,\n            gridLineLineDashSlider: gridLineLineDashSliderParams,\n        });\n    }\n\n    private getGridLineColorPickerParams(labelKey: ChartTranslationKey): AgColorPickerParams {\n        return this.chartMenuUtils.getDefaultColorPickerParams(\n            'gridLine.style',\n            labelKey,\n            {\n                formatInputValue: (value: AgAxisGridLineOptions['style']) => {\n                    return value?.[0]?.stroke;\n                },\n                parseInputValue: (value: string) => {\n                    const styles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style') ?? [];\n                    if (styles.length === 0) return [{ stroke: value, lineDash: [] }];\n                    return [{ ...styles[0], stroke: value }];\n                },\n            }\n        );\n    }\n\n    private getGridLineWidthSliderParams(labelKey: ChartTranslationKey) {\n        return this.chartMenuUtils.getDefaultSliderParams('gridLine.width', labelKey, 10);\n    }\n\n    private getGridLineDashSliderParams(labelKey: ChartTranslationKey): AgSliderParams {\n        const initialStyles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style');\n        const initialValue = initialStyles?.[0]?.lineDash?.[0];\n        const params = this.chartMenuUtils.getDefaultSliderParamsWithoutValueParams(\n            initialValue ?? 0,\n            labelKey,\n            30,\n        );\n        params.onValueChange = (value: number): void => {\n            const stroke = this.chartOptions.getValue('gridLine.style.0.stroke');\n            this.chartOptions.setValue<AgAxisGridLineOptions['style']>(\n                'gridLine.style',\n                [{ lineDash: [value], stroke }],\n            );\n        };\n        return params;\n    }\n}\n", "import { AgInputNumberField, Autowired, DragService, Events, AgAbstractLabel, DragListenerParams, AgLabelParams, RefSelector, _ } from \"@ag-grid-community/core\";\n\nexport interface AgAngleSelectParams extends AgLabelParams {\n    value?: number;\n    onValueChange?: (value: number) => void;\n};\n\nexport class AgAngleSelect extends AgAbstractLabel<AgAngleSelectParams> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-angle-select\">\n            <div ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div ref=\"eAngleSelectField\" class=\"ag-angle-select-field\">\n                    <div ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>`;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eParentCircle') private readonly eParentCircle: HTMLElement;\n    @RefSelector('eChildCircle') private readonly eChildCircle: HTMLElement;\n    @RefSelector('eAngleValue') private readonly eAngleValue: AgInputNumberField;\n\n    @Autowired('dragService') protected readonly dragService: DragService;\n\n    private parentCircleRect: ClientRect | DOMRect;\n    private degrees: number;\n    private radius: number = 0;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private dragListener: DragListenerParams;\n\n    constructor(config?: AgAngleSelectParams) {\n        super(config, AgAngleSelect.TEMPLATE);\n    }\n\n    postConstruct() {\n        super.postConstruct();\n\n        const { value, onValueChange } = this.config;\n\n        if (value != null) {\n            this.setValue(value, undefined, true);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n\n        this.dragListener = {\n            eElement: this.eParentCircle,\n            dragStartPixels: 0,\n            onDragStart: (e: MouseEvent | Touch) => {\n                this.parentCircleRect = this.eParentCircle.getBoundingClientRect();\n            },\n            onDragging: (e: MouseEvent | Touch) => this.calculateAngleDrag(e),\n            onDragStop: () => { }\n        };\n\n        this.dragService.addDragSource(this.dragListener);\n\n        this.eAngleValue\n            .setLabel('')\n            .setLabelWidth(5)\n            .setInputWidth(45)\n            .setMin(0)\n            .setMax(360)\n            .setValue(`${this.degrees}`)\n            .onValueChange((value: string) => {\n                if (value == null || value === '') {\n                    value = '0';\n                }\n                value = this.eAngleValue.normalizeValue(value);\n                let floatValue = parseFloat(value);\n                if (floatValue > 180) {\n                    floatValue = floatValue - 360;\n                }\n                this.setValue(floatValue);\n            });\n\n        this.updateNumberInput();\n\n        if (_.exists(this.getValue())) {\n            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());\n        }\n\n        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            const eDocument = this.gridOptionsService.getDocument();\n            if (this.eAngleValue.getInputElement().contains(eDocument.activeElement)) {\n                return;\n            }\n            this.updateNumberInput();\n        });\n    }\n\n    private updateNumberInput(): void {\n        const normalizedValue = this.normalizeNegativeValue(this.getValue());\n        this.eAngleValue.setValue(normalizedValue.toString());\n    }\n\n    private positionChildCircle(radians: number) {\n        const rect = this.parentCircleRect || { width: 24, height: 24 };\n        const eChildCircle = this.eChildCircle;\n\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        eChildCircle.style.left = `${centerX + Math.cos(radians) * 8}px`;\n        eChildCircle.style.top = `${centerY + Math.sin(radians) * 8}px`;\n    }\n\n    private calculatePolar() {\n        const x = this.offsetX;\n        const y = this.offsetY;\n\n        const radians = Math.atan2(y, x);\n        this.degrees = this.toDegrees(radians);\n        this.radius = Math.sqrt((x * x) + (y * y));\n\n        this.positionChildCircle(radians);\n    }\n\n    private calculateCartesian() {\n        const radians = this.toRadians(this.getValue());\n        const radius = this.getRadius();\n\n        this\n            .setOffsetX(Math.cos(radians) * radius)\n            .setOffsetY(Math.sin(radians) * radius);\n    }\n\n    private setOffsetX(offset: number): this {\n        if (this.offsetX !== offset) {\n            this.offsetX = offset;\n            this.calculatePolar();\n        }\n\n        return this;\n    }\n\n    private setOffsetY(offset: number): this {\n        if (this.offsetY !== offset) {\n            this.offsetY = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n\n    private calculateAngleDrag(e: MouseEvent | Touch) {\n        const rect = this.parentCircleRect;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        const dx = x - centerX;\n        const dy = y - centerY;\n\n        const radians = Math.atan2(dy, dx);\n\n        this.setValue(radians, true);\n    }\n\n    private toDegrees(radians: number): number {\n        return radians / Math.PI * 180;\n    }\n\n    private toRadians(degrees: number): number {\n        return degrees / 180 * Math.PI;\n    }\n\n    private normalizeNegativeValue(degrees: number): number {\n        return degrees < 0 ? 360 + degrees : degrees;\n    }\n\n    private normalizeAngle180(radians: number): number {\n        radians %= Math.PI * 2;\n\n        if (radians < -Math.PI) {\n            radians += Math.PI * 2;\n        } else if (radians >= Math.PI) {\n            radians -= Math.PI * 2;\n        }\n\n        return radians;\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public setRadius(r: number): this {\n        if (this.radius === r) { return this; }\n        this.radius = r;\n        this.calculateCartesian();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void): this {\n        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            callbackFn(this.degrees);\n        });\n        return this;\n    }\n\n    public getValue(radians?: boolean): number {\n        return radians ? this.toRadians(this.degrees) : this.degrees;\n    }\n\n    public setValue(degrees: number, radians?: boolean, silent?: boolean): this {\n        let radiansValue: number;\n        if (!radians) {\n            radiansValue = this.normalizeAngle180(this.toRadians(degrees));\n        } else {\n            radiansValue = degrees;\n        }\n\n        degrees = this.toDegrees(radiansValue);\n\n        if (this.degrees !== degrees) {\n            this.degrees = Math.floor(degrees);\n            this.calculateCartesian();\n            this.positionChildCircle(radiansValue);\n            if (!silent) {\n                this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n            }\n        }\n\n        return this;\n    }\n\n    public setWidth(width: number): this {\n        _.setFixedWidth(this.getGui(), width);\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        super.setDisabled(disabled);\n\n        this.eAngleValue.setDisabled(disabled);\n\n        return this;\n    }\n\n    protected destroy(): void {\n        this.dragService.removeDragSource(this.dragListener);\n        super.destroy();\n    }\n}\n", "import { AgFieldParams, AgCheckboxParams, AgInputNumberFieldParams, AgSelectParams, AgSliderParams, Autowired, BeanStub, ListOption } from \"@ag-grid-community/core\";\nimport { AgColorPickerParams } from \"../../../widgets/agColorPicker\";\nimport { ChartOptionsProxy } from \"../services/chartOptionsService\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../services/chartTranslationService\";\nimport { FontPanelParams } from \"./format/fontPanel\";\n\nexport class ChartMenuParamsFactory extends BeanStub {\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(\n        private readonly chartOptionsProxy: ChartOptionsProxy,\n    ) {\n        super();\n    }\n\n    public getDefaultColorPickerParams(\n        expression: string,\n        labelKey?: ChartTranslationKey,\n        options?: {\n            parseInputValue: (value: any) => any;\n            formatInputValue: (value: any) => any;\n        },\n    ): AgColorPickerParams {\n        return this.addValueParams(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey ?? 'color'),\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n            },\n            options,\n        );\n    }\n\n    public getDefaultNumberInputParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            precision?: number,\n            step?: number,\n            min?: number,\n            max?: number,\n        }\n    ): AgInputNumberFieldParams {\n        return this.addValueParams<AgInputNumberFieldParams>(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey),\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                precision: options?.precision,\n                step: options?.step,\n                min: options?.min,\n                max: options?.max,\n            },\n            {\n                parseInputValue: value => {\n                    const numberValue = Number(value);\n                    return isNaN(numberValue) ? undefined : numberValue;\n                },\n                formatInputValue: value => {\n                    return value == null ? '' : `${value}`;\n                },\n            }\n        );\n    }\n\n    public getDefaultSliderParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number,\n        isArray?: boolean\n    ): AgSliderParams {\n        let value = this.chartOptionsProxy.getValue<number>(expression) ?? 0;\n        if (isArray && Array.isArray(value)) {\n            value = value[0];\n        }\n        const params = this.getDefaultSliderParamsWithoutValueParams(value, labelKey, defaultMaxValue);\n        params.onValueChange = value => this.chartOptionsProxy.setValue(expression, isArray ? [value] : value);\n        return params;\n    }\n\n    public getDefaultSliderParamsWithoutValueParams(\n        value: number,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number\n    ): AgSliderParams {\n        return {\n            label: this.chartTranslationService.translate(labelKey),\n            minValue: 0,\n            maxValue: Math.max(value, defaultMaxValue),\n            textFieldWidth: 45,\n            value: `${value}`\n        };\n    }\n\n    public getDefaultCheckboxParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            readOnly?: boolean,\n            passive?: boolean,\n        },\n    ): AgCheckboxParams {\n        const value = this.chartOptionsProxy.getValue<boolean>(expression);\n        const params: AgCheckboxParams = {\n            label: this.chartTranslationService.translate(labelKey),\n            value,\n            readOnly: options?.readOnly,\n            passive: options?.passive,\n        };\n        params.onValueChange = (value) => {\n            this.chartOptionsProxy.setValue(expression, typeof value === 'boolean' ? value : undefined);\n        };\n        return params;\n    }\n\n    public getDefaultSelectParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        dropdownOptions: Array<ListOption>,\n        options?: {\n            pickerType?: string;\n            pickerAriaLabelKey?: string;\n            pickerAriaLabelValue?: string;\n        },\n    ): AgSelectParams {\n        const value = this.chartOptionsProxy.getValue(expression);\n        const params: AgSelectParams = {\n            label: this.chartTranslationService.translate(labelKey),\n            value,\n            options: dropdownOptions,\n            pickerType: options?.pickerType,\n            pickerAriaLabelKey: options?.pickerAriaLabelKey,\n            pickerAriaLabelValue: options?.pickerAriaLabelValue,\n        };\n        params.onValueChange = (value) => {\n            this.chartOptionsProxy.setValue(expression, value);\n        };\n        return params;\n    }\n\n\n    public getDefaultLegendParams(expression: string): AgSelectParams {\n        return this.addValueParams(\n            expression,\n            {\n                label: this.chartTranslationService.translate('position'),\n                labelWidth: \"flex\",\n                inputWidth: 'flex',\n                options: ['top', 'right', 'bottom', 'left'].map((position: ChartTranslationKey) => ({\n                    value: position,\n                    text: this.chartTranslationService.translate(position)\n                })),\n            }\n        );\n    }\n\n    public getDefaultFontPanelParams(\n        expression: string,\n        labelKey: ChartTranslationKey\n    ): FontPanelParams {\n        const keyMapper = (key: string) => `${expression}.${key}`;\n        return this.addEnableParams<FontPanelParams>(\n            keyMapper('enabled'),\n            {\n                name: this.chartTranslationService.translate(labelKey),\n                suppressEnabledCheckbox: false,\n                chartMenuUtils: this,\n                keyMapper\n            } as any\n        );\n    }\n\n    public addValueParams<P extends AgFieldParams>(expression: string, params: P, options?: {\n        parseInputValue: (value: any) => any;\n        formatInputValue: (value: any) => any;\n    }): P {\n        const optionsValue = this.chartOptionsProxy.getValue(expression);\n        params.value = options?.formatInputValue ? options.formatInputValue(optionsValue) : optionsValue;\n        params.onValueChange = value => {\n            const optionsValue = options?.parseInputValue ? options.parseInputValue(value) : value;\n            this.chartOptionsProxy.setValue(expression, optionsValue);\n        };\n        return params;\n    }\n\n    public addEnableParams<P extends {\n        enabled?: boolean;\n        onEnableChange?: (value: boolean) => void;\n    }>(expression: string, params: P): P {\n        params.enabled =  this.chartOptionsProxy.getValue(expression) ?? false;\n        params.onEnableChange = value => this.chartOptionsProxy.setValue(expression, value);\n        return params;\n    }\n\n    public getChartOptions(): ChartOptionsProxy {\n        return this.chartOptionsProxy;\n    }\n}", "import {\n    _,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelect,\n    AgSelectParams,\n    AgSlider,\n    Autowired,\n    Component,\n    ListOption,\n    PostConstruct,\n    RefSelector,\n} from '@ag-grid-community/core';\nimport {ChartController} from '../../../chartController';\nimport {FontPanel, FontPanelParams} from '../fontPanel';\nimport {ChartTranslationKey, ChartTranslationService} from '../../../services/chartTranslationService';\nimport {FormatPanelOptions} from '../formatPanel';\nimport {isRadial} from '../../../utils/seriesTypeMapper';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class PolarAxisPanel extends Component {\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"axisGroup\">\n                <ag-color-picker ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('axisGroup') private axisGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartController: ChartController;\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({ chartController, chartAxisMenuParamsFactory: chartAxisMenuUtils, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.chartController = chartController;\n        this.chartMenuUtils = chartAxisMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate('polarAxis'),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true\n        };\n        const axisColorInputParams = this.chartMenuUtils.getDefaultColorPickerParams('line.color');\n        const axisLineWidthSliderParams = this.chartMenuUtils.getDefaultSliderParams('line.width', 'thickness', 10);\n        this.setTemplate(PolarAxisPanel.TEMPLATE, {\n            axisGroup: axisGroupParams,\n            axisColorInput: axisColorInputParams,\n            axisLineWidthSlider: axisLineWidthSliderParams\n        });\n\n        this.initAxis();\n        this.initAxisLabels();\n        this.initRadiusAxis();\n    }\n\n    private initAxis() {\n        const chartType = this.chartController.getChartType();\n        const hasConfigurableAxisShape = ['radarLine', 'radarArea'].includes(chartType);\n        if (hasConfigurableAxisShape) {\n            const options: Array<ListOption> = [\n                { value: 'circle', text: this.translate('circle') },\n                { value: 'polygon', text: this.translate('polygon') },\n            ];\n\n            this.axisGroup.addItem(this.createSelect({\n                labelKey: 'shape',\n                options: options,\n                property: 'shape'\n            }));\n        }\n\n        if (chartType !== 'pie') {\n            this.axisGroup.addItem(this.createSlider({\n                labelKey: 'innerRadius',\n                defaultMaxValue: 1,\n                property: 'innerRadiusRatio'\n            }));\n        }\n    }\n\n    private initAxisLabels() {\n        const params: FontPanelParams = {\n            name: this.translate('labels'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `label.${key}`\n        };\n\n        const labelPanelComp = this.createManagedBean(new FontPanel(params));\n        const labelOrientationComp = this.createOrientationWidget();\n        labelPanelComp.addItemToPanel(labelOrientationComp);\n\n        this.axisGroup.addItem(labelPanelComp);\n    }\n\n    private createOrientationWidget(): AgSelect {\n        const options: Array<ListOption> = [\n            { value: 'fixed', text: this.translate('fixed') },\n            { value: 'parallel', text: this.translate('parallel') },\n            { value: 'perpendicular', text: this.translate('perpendicular') },\n        ];\n\n        return this.createSelect({\n            labelKey: 'orientation',\n            options,\n            property: 'label.orientation'\n        });\n    }\n\n    private initRadiusAxis() {\n        const chartType = this.chartController.getChartType();\n        if (!isRadial(chartType)) return;\n\n        const items = [\n            this.createSlider({\n                labelKey: 'groupPadding',\n                defaultMaxValue: 1,\n                property: 'paddingInner'\n            }),\n            this.createSlider({\n                labelKey: 'seriesPadding',\n                defaultMaxValue: 1,\n                property: 'groupPaddingInner'\n            })\n        ];\n\n        const paddingPanelComp = this.createManagedBean(new AgGroupComponent({\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            title: this.translate('padding'),\n            items\n        })).hideEnabledCheckbox(true).hideOpenCloseIcons(true);\n\n        this.axisGroup.addItem(paddingPanelComp);\n    }\n\n    private createSlider(config: {\n        labelKey: ChartTranslationKey;\n        defaultMaxValue: number;\n        step?: number;\n        property: string;\n    }): AgSlider {\n        const { labelKey, defaultMaxValue, step = 0.05, property } = config;\n        const params = this.chartMenuUtils.getDefaultSliderParams(property, labelKey, defaultMaxValue);\n        params.step = step;\n        return this.createManagedBean(new AgSlider(params));\n    }\n\n    private createSelect(config: {\n        labelKey: ChartTranslationKey;\n        options: Array<ListOption>;\n        property: string\n    }): AgSelect {\n        const { labelKey: label, options, property } = config;\n        return this.createManagedBean(new AgSelect(this.chartMenuUtils.addValueParams<AgSelectParams>(\n            property,\n            {\n                label: this.chartTranslationService.translate(label),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                options,\n            }\n        )));\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { PaddingPanel } from \"./paddingPanel\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { BackgroundPanel } from \"./backgroundPanel\";\nimport TitlePanel from \"./titlePanel\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { ChartController } from \"../../../chartController\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class ChartPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"chartGroup\"></ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly chartController: ChartController;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({\n        chartController,\n        chartMenuParamsFactory: chartMenuUtils,\n        isExpandedOnInit = false\n    }: FormatPanelOptions) {\n        super();\n\n        this.chartController = chartController;\n        this.chartMenuUtils = chartMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const chartGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('chart'),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true,\n            items: [\n                this.createManagedBean(new TitlePanel(this.chartMenuUtils, this.chartController)),\n                this.createManagedBean(new PaddingPanel(this.chartMenuUtils, this.chartController)),\n                this.createManagedBean(new BackgroundPanel(this.chartMenuUtils))\n            ]\n        };\n        this.setTemplate(ChartPanel.TEMPLATE, { chartGroup: chartGroupParams });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSlider,\n    Autowired,\n    Component,\n    Events,\n    PostConstruct,\n    RefSelector,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { AgChartPaddingOptions } from \"ag-charts-community\";\nimport { ChartController } from \"../../../chartController\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class PaddingPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"chartPaddingGroup\">\n                <ag-slider ref=\"paddingTopSlider\"></ag-slider>\n                <ag-slider ref=\"paddingRightSlider\"></ag-slider>\n                <ag-slider ref=\"paddingBottomSlider\"></ag-slider>\n                <ag-slider ref=\"paddingLeftSlider\"></ag-slider>\n            </ag-group-component>\n        <div>`;\n\n    @RefSelector('paddingTopSlider') private paddingTopSlider: AgSlider;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory, private readonly chartController: ChartController) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const chartPaddingGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate(\"padding\"),\n            suppressEnabledCheckbox: true\n        };\n        const getSliderParams = (property: keyof AgChartPaddingOptions) => \n            this.chartMenuUtils.getDefaultSliderParams('padding.' + property, property, 200);\n\n        this.setTemplate(PaddingPanel.TEMPLATE, {\n            chartPaddingGroup: chartPaddingGroupParams,\n            paddingTopSlider: getSliderParams('top'),\n            paddingRightSlider: getSliderParams('right'),\n            paddingBottomSlider: getSliderParams('bottom'),\n            paddingLeftSlider: getSliderParams('left')\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHART_OPTIONS_CHANGED, (e) => {\n            this.updateTopPadding(e.chartOptions);\n        });\n    }\n\n    private updateTopPadding(chartOptions: any) {\n        // keep 'top' padding in sync with chart as toggling chart title on / off change the 'top' padding\n        const topPadding = [...this.chartController.getChartSeriesTypes(), 'common']\n            .map((seriesType) => chartOptions[seriesType]?.padding?.top)\n            .find((value) => value != null);\n        if (topPadding != null) {\n            this.paddingTopSlider.setValue(topPadding);\n        }\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class BackgroundPanel extends Component {\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"chartBackgroundGroup\">\n                <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n            </ag-group-component>\n        <div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const chartBackgroundGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'background.visible',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('background'),\n                suppressEnabledCheckbox: false\n            }\n        );\n        const colorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams('background.fill');\n        this.setTemplate(BackgroundPanel.TEMPLATE, {\n            chartBackgroundGroup: chartBackgroundGroupParams,\n            colorPicker: colorPickerParams\n        });\n    }\n}\n", "import {\n    _,\n    AgSlider,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartMenuService } from \"../../../services/chartMenuService\";\nimport { ChartController } from \"../../../chartController\";\n\nexport default class TitlePanel extends Component {\n\n    public static TEMPLATE = /* html */ `<div></div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n\n    private readonly chartOptions: ChartOptionsProxy;\n\n    private activePanels: Component[] = [];\n    private titlePlaceholder: string;\n\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private readonly chartController: ChartController\n    ) {\n        super(TitlePanel.TEMPLATE);\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    @PostConstruct\n    private init() {\n        this.initFontPanel();\n        this.titlePlaceholder = this.chartTranslationService.translate('titlePlaceholder');\n    }\n\n    private hasTitle(): boolean {\n        const title: any = this.chartOptions.getValue('title');\n        return title && title.enabled && title.text && title.text.length > 0;\n    }\n\n    private initFontPanel(): void {\n        const hasTitle = this.hasTitle();\n\n        const fontPanelParams: FontPanelParams = {\n            name: this.chartTranslationService.translate('title'),\n            enabled: hasTitle,\n            suppressEnabledCheckbox: false,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `title.${key}`,\n            onEnableChange: (enabled) => {\n                if (this.chartMenuService.doesChartToolbarExist(this.chartController)) {\n                    // extra padding is only included when the toolbar is present\n                    const topPadding: number = this.chartOptions.getValue('padding.top');\n                    this.chartOptions.setValue('padding.top', enabled ? topPadding - 20 : topPadding + 20);\n                }\n\n                this.chartOptions.setValue('title.enabled', enabled);\n                const currentTitleText = this.chartOptions.getValue('title.text');\n                const replaceableTitleText = currentTitleText === 'Title' || currentTitleText?.trim().length === 0;\n                if (enabled && replaceableTitleText) {\n                    this.chartOptions.setValue('title.text', this.titlePlaceholder);\n                }\n            }\n        };\n\n        const fontPanelComp = this.createBean(new FontPanel(fontPanelParams));\n\n        // add the title spacing slider to font panel\n        fontPanelComp.addItemToPanel(this.createSpacingSlicer());\n\n        this.getGui().appendChild(fontPanelComp.getGui());\n        this.activePanels.push(fontPanelComp);\n\n        // edits to the title can disable it, so keep the checkbox in sync:\n        this.addManagedListener(this.eventService, 'chartTitleEdit', () => {\n            fontPanelComp.setEnabled(this.hasTitle());\n        });\n    }\n\n    private createSpacingSlicer() {\n        const params = this.chartMenuUtils.getDefaultSliderParams('title.spacing', 'spacing', 100);\n        // Default title spacing is 10, but this isn't reflected in the options - this should really be fixed there.\n        params.value = '10';\n        return this.createBean(new AgSlider(params));\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelect,\n    AgSlider,\n    AgToggleButton,\n    Autowired,\n    Component,\n    ListOption,\n    PostConstruct,\n    RefSelector,\n    AgSelectParams,\n    AgToggleButtonParams\n} from \"@ag-grid-community/core\";\nimport type { AgRangeBarSeriesLabelPlacement } from 'ag-charts-community';\nimport { ShadowPanel } from \"./shadowPanel\";\nimport { FontPanel } from \"../fontPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { MarkersPanel } from \"./markersPanel\";\nimport { ChartController } from \"../../../chartController\";\nimport { ChartSeriesType, getSeriesType, isPieChartSeries } from \"../../../utils/seriesTypeMapper\";\nimport { AgColorPicker } from '../../../../../widgets/agColorPicker';\nimport { CalloutPanel } from \"./calloutPanel\";\nimport { CapsPanel } from \"./capsPanel\";\nimport { ConnectorLinePanel } from \"./connectorLinePanel\";\nimport { WhiskersPanel } from \"./whiskersPanel\";\nimport { SeriesItemsPanel } from \"./seriesItemsPanel\";\nimport { TileSpacingPanel } from \"./tileSpacingPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartOptionsProxy, ChartOptionsService } from '../../../services/chartOptionsService';\n\nexport class SeriesPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"seriesGroup\">\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('seriesGroup') private seriesGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartController: ChartController;\n    private readonly chartOptionsService: ChartOptionsService;\n    private readonly isExpandedOnInit: boolean;\n    \n    private chartMenuUtils: ChartMenuParamsFactory;\n    private chartOptions: ChartOptionsProxy;\n    private seriesSelectOptions: Map<ChartSeriesType, ListOption>;\n\n    private activePanels: Component[] = [];\n    private seriesType: ChartSeriesType;\n\n    private widgetFuncs: {[name: string]: () => void}= {\n        'lineWidth': () => this.initStrokeWidth('lineWidth'),\n        'strokeWidth': () => this.initStrokeWidth('strokeWidth'),\n        'lineColor': () => this.initLineColor(),\n        'lineDash': () => this.initLineDash(),\n        'lineOpacity': () => this.initLineOpacity(),\n        'fillOpacity': () => this.initFillOpacity(),\n        'markers': () => this.initMarkers(),\n        'labels': () => this.initLabels(),\n        'shadow': () => this.initShadow(),\n        'tooltips': () => this.initTooltips(),\n        'bins': () => this.initBins(),\n        'whiskers': () => this.initWhiskers(),\n        'caps': () => this.initCaps(),\n        'connectorLine': () => this.initConnectorLine(),\n        'seriesItems': () => this.initSeriesItemsPanel(),\n        'tileSpacing': () => this.initTileSpacingPanel(),\n    };\n\n    private seriesWidgetMappings: { [K in ChartSeriesType]?: string[] } = {\n        'column': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'pie': ['tooltips', 'strokeWidth', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'donut': ['tooltips', 'strokeWidth', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'line': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'markers', 'labels'],\n        'scatter': ['tooltips', 'markers', 'labels'],\n        'bubble': ['tooltips', 'markers', 'labels'],\n        'area': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels', 'shadow'],\n        'histogram': ['tooltips', 'bins', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'radial-column': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'radial-bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'radar-line': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'markers', 'labels'],\n        'radar-area': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels'],\n        'nightingale': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'box-plot': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'whiskers', 'caps'],\n        'range-bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'range-area': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels', 'shadow'],\n        'treemap': ['tooltips', 'tileSpacing'],\n        'sunburst': ['tooltips'],\n        'heatmap': ['tooltips', 'labels', 'lineColor', 'lineWidth', 'lineOpacity'],\n        'waterfall': ['tooltips', 'connectorLine', 'seriesItems'],\n    }\n\n    constructor({\n        chartController,\n        chartOptionsService,\n        seriesType,\n        isExpandedOnInit = false\n    }: FormatPanelOptions) {\n\n        super();\n\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.seriesType = seriesType || this.getChartSeriesType();\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const seriesGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate(\"series\"),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true\n        };\n        this.setTemplate(SeriesPanel.TEMPLATE, {seriesGroup: seriesGroupParams});\n\n        this.chartMenuUtils = this.createManagedBean(new ChartMenuParamsFactory(\n            this.chartOptionsService.getSeriesOptionsProxy(() => this.seriesType)\n        ));\n        this.chartOptions = this.chartMenuUtils.getChartOptions();\n        \n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED, this.refreshWidgets.bind(this));\n\n        this.refreshWidgets();\n    }\n\n    private refreshWidgets(): void {\n        this.destroyActivePanels();\n\n        const chart = this.chartController.getChartProxy().getChart();\n        chart.waitForUpdate().then(() => {\n            const componentWasRemoved = !this.isAlive();\n            if (componentWasRemoved) {\n                // It's possible that the component was unmounted during the async delay in updating the chart.\n                // If this is the case we want to bail out to avoid operating on stale UI components.\n                return;\n            }\n            if (this.chartController.isComboChart()) {\n                this.updateSeriesType();\n                this.initSeriesSelect();\n            }\n\n            (this.seriesWidgetMappings[this.seriesType] ?? []).forEach((w) => this.widgetFuncs[w]());\n        })\n        .catch(e => console.error(`AG Grid - chart rendering failed`, e));\n\n    }\n\n    private initSeriesSelect() {\n        const seriesSelect = this.seriesGroup.createManagedBean(new AgSelect({\n            label: this.translate('seriesType'),\n            labelAlignment: \"left\",\n            labelWidth: 'flex',\n            inputWidth: 'flex',\n            options: this.getSeriesSelectOptions(),\n            value: `${this.seriesType}`,\n            onValueChange: (newValue: ChartSeriesType) => {\n                this.seriesType = newValue;\n                this.refreshWidgets();\n            }\n        }));\n\n        this.seriesGroup.addItem(seriesSelect);\n\n        this.activePanels.push(seriesSelect);\n    }\n\n    private initTooltips(): void {\n        const seriesTooltipsToggle = this.createBean(new AgToggleButton(this.chartMenuUtils.addValueParams<AgToggleButtonParams>(\n            'tooltip.enabled',\n            {\n                label: this.translate(\"tooltips\"),\n                labelAlignment: \"left\",\n                labelWidth: \"flex\",\n                inputWidth: 'flex',\n            }\n        )));\n\n        this.addWidget(seriesTooltipsToggle);\n    }\n\n    private initLineColor(): void {\n        const seriesLineColorPicker = this.createBean(new AgColorPicker(this.chartMenuUtils.getDefaultColorPickerParams(\n            'stroke',\n            'strokeColor',\n        )));\n\n        this.addWidget(seriesLineColorPicker);\n    }\n\n    private initStrokeWidth(labelKey: 'strokeWidth' | 'lineWidth'): void {\n        const seriesStrokeWidthSlider = this.createBean(new AgSlider(this.chartMenuUtils.getDefaultSliderParams(\n            'strokeWidth',\n            labelKey,\n            10\n        )));\n\n        this.addWidget(seriesStrokeWidthSlider);\n    }\n\n    private initLineDash(): void {\n        const seriesLineDashSlider = this.createBean(new AgSlider(this.chartMenuUtils.getDefaultSliderParams(\n            'lineDash',\n            'lineDash',\n            30,\n            true\n        )));\n\n        this.addWidget(seriesLineDashSlider);\n    }\n\n    private initLineOpacity(): void {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            'strokeOpacity',\n            \"strokeOpacity\",\n            1\n        );\n        params.step = 0.05;\n        const seriesLineOpacitySlider = this.createBean(new AgSlider(params));\n\n        this.addWidget(seriesLineOpacitySlider);\n    }\n\n    private initFillOpacity(): void {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            'fillOpacity',\n            \"fillOpacity\",\n            1\n        );\n        params.step = 0.05;\n        const seriesFillOpacitySlider = this.createBean(new AgSlider(params));\n\n        this.addWidget(seriesFillOpacitySlider);\n    }\n\n    private initLabels() {\n        const isPieChart = isPieChartSeries(this.seriesType);\n        const seriesOptionLabelProperty = isPieChart ? 'calloutLabel' : 'label';\n        const labelKey = isPieChart ? 'calloutLabels' : 'labels';\n        const labelParams = this.chartMenuUtils.getDefaultFontPanelParams(seriesOptionLabelProperty, labelKey);\n        const labelPanelComp = this.createBean(new FontPanel(labelParams));\n\n        if (isPieChart) {\n            const calloutPanelComp = this.createBean(new CalloutPanel(this.chartMenuUtils));\n            labelPanelComp.addCompToPanel(calloutPanelComp);\n            this.activePanels.push(calloutPanelComp);\n        }\n\n        this.addWidget(labelPanelComp);\n\n        if (isPieChart) {\n            const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams('sectorLabel', 'sectorLabels');\n            const sectorPanelComp = this.createBean(new FontPanel(sectorParams));\n            const positionRatioComp = this.getSectorLabelPositionRatio();\n            sectorPanelComp.addCompToPanel(positionRatioComp);\n\n            this.addWidget(sectorPanelComp);\n        }\n\n        if (this.seriesType === 'range-bar') {\n            // Add label placement dropdown\n            const options: Array<ListOption<AgRangeBarSeriesLabelPlacement>> = [\n                { value: 'inside', text: this.translate('inside') },\n                { value: 'outside', text: this.translate('outside') },\n            ];\n            const placementSelect = labelPanelComp.createManagedBean(new AgSelect(this.chartMenuUtils.addValueParams<AgSelectParams>(\n                'label.placement',\n                {\n                    label: this.translate('labelPlacement'),\n                    labelAlignment: 'left',\n                    labelWidth: 'flex',\n                    inputWidth: 'flex',\n                    options,\n                }\n            )));\n\n            labelPanelComp.addCompToPanel(placementSelect);\n            this.activePanels.push(placementSelect);\n\n            // Add padding slider\n            const paddingSlider = labelPanelComp.createManagedBean(new AgSlider(this.chartMenuUtils.getDefaultSliderParams(\n                'label.padding',\n                'padding',\n                200\n            )));\n\n            labelPanelComp.addCompToPanel(paddingSlider);\n            this.activePanels.push(paddingSlider);\n        }\n    }\n\n    private getSectorLabelPositionRatio(): AgSlider {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            'sectorLabel.positionRatio',\n            \"positionRatio\",\n            1\n        );\n        params.step = 0.05;\n        return this.createBean(new AgSlider(params));\n    }\n\n    private initShadow() {\n        const shadowPanelComp = this.createBean(new ShadowPanel(this.chartMenuUtils));\n        this.addWidget(shadowPanelComp);\n    }\n\n    private initMarkers() {\n        const markersPanelComp = this.createBean(new MarkersPanel(this.chartOptionsService, this.chartMenuUtils));\n        this.addWidget(markersPanelComp);\n    }\n\n    private initBins() {\n        const params = this.chartMenuUtils.getDefaultSliderParams('binCount', 'histogramBinCount', 20);\n        // this needs fixing\n        const value = (this.chartOptions.getValue<any>(\"bins\") ?? this.chartOptions.getValue<any>(\"calculatedBins\", true)).length;\n        params.value = `${value}`;\n        params.maxValue = Math.max(value, 20);\n        const seriesBinCountSlider = this.createBean(new AgSlider(params));\n\n        this.addWidget(seriesBinCountSlider);\n    }\n\n    private initWhiskers() {\n        const whiskersPanelComp = this.createBean(new WhiskersPanel(this.chartMenuUtils));\n        this.addWidget(whiskersPanelComp);\n    }\n\n    private initCaps() {\n        const capsPanelComp = this.createBean(new CapsPanel(this.chartMenuUtils));\n        this.addWidget(capsPanelComp);\n    }\n\n    private initConnectorLine() {\n        const connectorLinePanelComp = this.createBean(new ConnectorLinePanel(this.chartMenuUtils));\n        this.addWidget(connectorLinePanelComp);\n    }\n\n    private initSeriesItemsPanel() {\n        const seriesItemsPanelComp = this.createBean(new SeriesItemsPanel(this.chartMenuUtils));\n        this.addWidget(seriesItemsPanelComp);\n    }\n\n    private initTileSpacingPanel() {\n        const tileSpacingPanelComp = this.createBean(new TileSpacingPanel(this.chartMenuUtils));\n        this.addWidget(tileSpacingPanelComp);\n    }\n\n    private addWidget(widget: Component): void {\n        this.seriesGroup.addItem(widget);\n        this.activePanels.push(widget);\n    }\n\n    private getChartSeriesType(): ChartSeriesType {\n        if (this.chartController.getSeriesChartTypes().length === 0) {\n            return 'column';\n        }\n        const ct = this.chartController.getSeriesChartTypes()[0].chartType;\n\n        if (ct === 'columnLineCombo') {\n            return 'column';\n        }\n\n        if (ct === 'areaColumnCombo') {\n            return 'area';\n        }\n        return getSeriesType(ct);\n    }\n\n    private getSeriesSelectOptions(): ListOption[] {\n        if (!this.seriesSelectOptions) {\n            // lazy init options as they are only required for combo charts\n            this.seriesSelectOptions = new Map<ChartSeriesType, ListOption>([\n                ['area', {value: 'area', text: this.translate('area')}],\n                ['bar', {value: 'bar', text: this.translate('bar')}],\n                ['column', {value: 'column', text: this.translate('column')}],\n                ['line', {value: 'line', text: this.translate('line')}],\n                ['scatter', {value: 'scatter', text: this.translate('scatter')}],\n                ['histogram', {value: 'histogram', text: this.translate('histogram')}],\n                ['radial-column', {value: 'radial-column', text: this.translate('radialColumn')}],\n                ['radial-bar', {value: 'radial-bar', text: this.translate('radialBar')}],\n                ['radar-line', {value: 'radar-line', text: this.translate('radarLine')}],\n                ['radar-area', {value: 'radar-area', text: this.translate('radarArea')}],\n                ['nightingale', {value: 'nightingale', text: this.translate('nightingale')}],\n                ['range-bar', {value: 'range-bar', text: this.translate('rangeBar')}],\n                ['range-area', {value: 'range-area', text: this.translate('rangeArea')}],\n                ['treemap', {value: 'treemap', text: this.translate('treemap')}],\n                ['sunburst', {value: 'sunburst', text: this.translate('sunburst')}],\n                ['waterfall', {value: 'waterfall', text: this.translate('waterfall')}],\n                ['box-plot', {value: 'box-plot', text: this.translate('boxPlot')}],\n                ['pie', {value: 'pie', text: this.translate('pie')}],\n                ['donut', {value: 'donut', text: this.translate('donut')}],\n            ]);\n        }\n\n        const seriesSelectOptions = new Set<ListOption>();\n        this.chartController.getActiveSeriesChartTypes().forEach(s => {\n            const chartType = getSeriesType(s.chartType);\n            seriesSelectOptions.add(this.seriesSelectOptions.get(chartType) as ListOption);\n        });\n        return Array.from(seriesSelectOptions);\n    }\n\n    private updateSeriesType() {\n        const activeChartTypes = this.chartController.getActiveSeriesChartTypes().map(s => getSeriesType(s.chartType));\n        const invalidSeriesType = !activeChartTypes.includes(this.seriesType);\n        if (invalidSeriesType && activeChartTypes.length > 0) {\n            this.seriesType = activeChartTypes[0]; // default to first active series type\n        }\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class ShadowPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"shadowGroup\">\n                <ag-color-picker ref=\"shadowColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"shadowBlurSlider\"></ag-slider>\n                <ag-slider ref=\"shadowXOffsetSlider\"></ag-slider>\n                <ag-slider ref=\"shadowYOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory,\n                private propertyKey: string = \"shadow\") {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        // Determine the path within the series options object to get/set the individual shadow options\n        const propertyNamespace = this.propertyKey;\n        const shadowGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            `${propertyNamespace}.enabled`,\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"shadow\"),\n                suppressEnabledCheckbox: false,\n            }\n        );\n        const shadowColorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams(`${propertyNamespace}.color`);\n        this.setTemplate(ShadowPanel.TEMPLATE, {\n            shadowGroup: shadowGroupParams,\n            shadowColorPicker: shadowColorPickerParams,\n            shadowBlurSlider: this.getSliderParams(\"blur\", 0, 20),\n            shadowXOffsetSlider: this.getSliderParams(\"xOffset\", -10, 10),\n            shadowYOffsetSlider: this.getSliderParams(\"yOffset\", -10, 10)\n        });\n    }\n\n    private getSliderParams(property: ChartTranslationKey, minValue: number, defaultMaxValue: number): AgSliderParams {\n        const expression = `${this.propertyKey}.${property}`\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            expression,\n            property,\n            defaultMaxValue\n        );\n        params.minValue = minValue;\n        return params;\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    AgSlider,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    RefSelector,\n    AgSelectParams\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartOptionsService } from '../../../services/chartOptionsService';\n\nexport class MarkersPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"seriesMarkersGroup\">\n                <ag-select ref=\"seriesMarkerShapeSelect\"></ag-select>\n                <ag-slider ref=\"seriesMarkerMinSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerStrokeWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('seriesMarkerMinSizeSlider') private seriesMarkerMinSizeSlider: AgSlider;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(\n        private readonly chartOptionsService: ChartOptionsService,\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        // scatter charts should always show markers\n        const chartType = this.chartOptionsService.getChartType();\n        const shouldHideEnabledCheckbox = _.includes(['scatter', 'bubble'], chartType);\n        const seriesMarkersGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'marker.enabled',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                title: this.chartTranslationService.translate(\"markers\"),\n                suppressEnabledCheckbox: shouldHideEnabledCheckbox,\n                suppressOpenCloseIcons: true\n            }\n        );\n\n        const isBubble = chartType === 'bubble';\n        let seriesMarkerMinSizeSliderParams: AgSliderParams;\n        let seriesMarkerSizeSliderParams: AgSliderParams;\n        if (isBubble) {\n            seriesMarkerMinSizeSliderParams = this.getSliderParams(\"marker.maxSize\", \"maxSize\", 60);\n            seriesMarkerSizeSliderParams = this.getSliderParams(\"marker.size\", \"minSize\", 60);\n        } else {\n            seriesMarkerMinSizeSliderParams = {};\n            seriesMarkerSizeSliderParams = this.getSliderParams(\"marker.size\", \"size\", 60);\n        }\n        \n        this.setTemplate(MarkersPanel.TEMPLATE, {\n            seriesMarkersGroup: seriesMarkersGroupParams,\n            seriesMarkerShapeSelect: this.getMarkerShapeSelectParams(),\n            seriesMarkerMinSizeSlider: seriesMarkerMinSizeSliderParams,\n            seriesMarkerSizeSlider: seriesMarkerSizeSliderParams,\n            seriesMarkerStrokeWidthSlider: this.getSliderParams(\"marker.strokeWidth\", \"strokeWidth\", 10)\n        });\n        if (!isBubble) {\n            this.seriesMarkerMinSizeSlider.setDisplayed(false);\n        }\n    }\n\n    private getMarkerShapeSelectParams(): AgSelectParams {\n        const options = [\n            {\n                value: 'square',\n                text: 'Square'\n            },\n            {\n                value: 'circle',\n                text: 'Circle'\n            },\n            {\n                value: 'cross',\n                text: 'Cross'\n            },\n            {\n                value: 'diamond',\n                text: 'Diamond'\n            },\n            {\n                value: 'plus',\n                text: 'Plus'\n            },\n            {\n                value: 'triangle',\n                text: 'Triangle'\n            },\n            {\n                value: 'heart',\n                text: 'Heart'\n            }\n        ];\n        return this.chartMenuUtils.addValueParams(\n            'marker.shape',\n            {\n                options,\n                label: this.chartTranslationService.translate('shape')\n            }\n        );\n    }\n\n    private getSliderParams(expression: string, labelKey: ChartTranslationKey, defaultMaxValue: number): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(\n            expression,\n            labelKey,\n            defaultMaxValue\n        );\n    }\n}\n", "import { Component, PostConstruct, RefSelector, ManagedFocusFeature, _ } from \"@ag-grid-community/core\";\nimport { AgColorPicker } from \"./agColorPicker\";\nimport { _Util } from 'ag-charts-community';\nimport { KeyCode } from \"@ag-grid-community/core\";\n\nexport class AgColorPanel extends Component {\n    private H = 1; // in the [0, 1] range\n    private S = 1; // in the [0, 1] range\n    private B = 1; // in the [0, 1] range\n    private A = 1; // in the [0, 1] range\n\n    private spectrumValRect?: ClientRect | DOMRect;\n    private isSpectrumDragging = false;\n\n    private spectrumHueRect?: ClientRect | DOMRect;\n    private isSpectrumHueDragging = false;\n\n    private spectrumAlphaRect?: ClientRect | DOMRect;\n    private isSpectrumAlphaDragging = false;\n\n    private picker: Component;\n\n    private colorChanged = false;\n    private static maxRecentColors = 8;\n    private static recentColors: string[] = [];\n    private tabIndex: string;\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-color-panel\" tabindex=\"-1\">\n            <div ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>`;\n\n    @RefSelector('spectrumColor') private readonly spectrumColor: HTMLElement;\n    @RefSelector('spectrumVal') private readonly spectrumVal: HTMLElement;\n    @RefSelector('spectrumDragger') private readonly spectrumDragger: HTMLElement;\n    @RefSelector('spectrumHue') private readonly spectrumHue: HTMLElement;\n    @RefSelector('spectrumHueSlider') private readonly spectrumHueSlider: HTMLElement;\n    @RefSelector('spectrumAlpha') private readonly spectrumAlpha: HTMLElement;\n    @RefSelector('spectrumAlphaSlider') private readonly spectrumAlphaSlider: HTMLElement;\n    @RefSelector('recentColors') private readonly recentColors: HTMLElement;\n\n    constructor(config: { picker: Component }) {\n        super(AgColorPanel.TEMPLATE);\n        this.picker = config.picker;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initTabIndex();\n        this.initRecentColors();\n\n        this.addGuiEventListener('focus', () => this.spectrumColor.focus());\n        this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER && !e.defaultPrevented) {\n                this.destroy();\n            }\n        });\n\n        this.addManagedListener(this.spectrumColor, 'keydown', e => this.moveDragger(e));\n        this.addManagedListener(this.spectrumAlphaSlider, 'keydown', e => this.moveAlphaSlider(e));\n        this.addManagedListener(this.spectrumHueSlider, 'keydown', e => this.moveHueSlider(e));\n\n        this.addManagedListener(this.spectrumVal, 'mousedown', this.onSpectrumDraggerDown.bind(this));\n        this.addManagedListener(this.spectrumHue, 'mousedown', this.onSpectrumHueDown.bind(this));\n        this.addManagedListener(this.spectrumAlpha, 'mousedown', this.onSpectrumAlphaDown.bind(this));\n\n        this.addGuiEventListener('mousemove', (e: MouseEvent) => {\n            this.onSpectrumDraggerMove(e);\n            this.onSpectrumHueMove(e);\n            this.onSpectrumAlphaMove(e);\n        });\n\n        // Listening to `mouseup` on the document on purpose. The user might release the mouse button\n        // outside the UI control. When the mouse returns back to the control's area, the dragging\n        // of the thumb is not expected and seen as a bug.\n        this.addManagedListener(document, 'mouseup', this.onMouseUp.bind(this));\n\n        this.addManagedListener(this.recentColors, 'click', this.onRecentColorClick.bind(this));\n        this.addManagedListener(this.recentColors, 'keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                e.preventDefault();\n                this.onRecentColorClick(e);\n            }\n        })\n    }\n\n    private initTabIndex(): void {\n        const tabIndex = this.tabIndex = (this.gridOptionsService.get('tabIndex')).toString();\n\n        this.spectrumColor.setAttribute('tabindex', tabIndex);\n        this.spectrumHueSlider.setAttribute('tabindex', tabIndex);\n        this.spectrumAlphaSlider.setAttribute('tabindex', tabIndex);\n    }\n\n    private refreshSpectrumRect() {\n        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();\n    }\n\n    private refreshHueRect() {\n        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();\n    }\n\n    private refreshAlphaRect() {\n        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();\n    }\n\n    private onSpectrumDraggerDown(e: MouseEvent) {\n        this.refreshSpectrumRect();\n        this.isSpectrumDragging = true;\n\n        this.moveDragger(e);\n    }\n\n    private onSpectrumDraggerMove(e: MouseEvent) {\n        if (this.isSpectrumDragging) {\n            this.moveDragger(e);\n        }\n    }\n\n    private onSpectrumHueDown(e: MouseEvent) {\n        this.refreshHueRect();\n        this.isSpectrumHueDragging = true;\n\n        this.moveHueSlider(e);\n    }\n\n    private onSpectrumHueMove(e: MouseEvent) {\n        if (this.isSpectrumHueDragging) {\n            this.moveHueSlider(e);\n        }\n    }\n\n    private onSpectrumAlphaDown(e: MouseEvent) {\n        this.refreshAlphaRect();\n        this.isSpectrumAlphaDragging = true;\n\n        this.moveAlphaSlider(e);\n    }\n\n    private onSpectrumAlphaMove(e: MouseEvent) {\n        if (this.isSpectrumAlphaDragging) {\n            this.moveAlphaSlider(e);\n        }\n    }\n\n    private onMouseUp() {\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n    }\n\n    private moveDragger(e: MouseEvent | KeyboardEvent) {\n        const valRect = this.spectrumValRect;\n        if (!valRect) { return; }\n\n        let x: number;\n        let y: number;\n\n        if (e instanceof MouseEvent) {\n            x = e.clientX - valRect.left;\n            y = e.clientY - valRect.top;\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            const isUp = e.key === KeyCode.UP;\n            const isDown = e.key === KeyCode.DOWN;\n            const isVertical = isUp || isDown;\n            const isHorizontal = isLeft || isRight;\n\n            if (!isVertical && !isHorizontal) { return; }\n            e.preventDefault();\n\n            const { x: currentX, y: currentY } = this.getSpectrumValue();\n            x = currentX + (isHorizontal ? (isLeft ? -5 : 5) : 0);\n            y = currentY + (isVertical ? (isUp ? -5 : 5) : 0);\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, valRect.width);\n        y = Math.max(y, 0);\n        y = Math.min(y, valRect.height);\n\n        this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);\n    }\n\n    private moveHueSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumHueRect;\n\n        if (!rect) { return; }\n\n        const x = this.moveSlider(this.spectrumHueSlider, e);\n\n        if (x == null) { return; }\n\n        this.H = 1 - x / rect.width;\n        this.update();\n    }\n\n    private moveAlphaSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumAlphaRect;\n\n        if (!rect) { return; }\n\n        const x = this.moveSlider(this.spectrumAlphaSlider, e);\n\n        if (x == null) { return; }\n\n        this.A = x / rect.width;\n        this.update();\n    }\n\n    private moveSlider(slider: HTMLElement, e: MouseEvent | KeyboardEvent): number | null {\n        const sliderRect = slider.getBoundingClientRect();\n        const parentRect = slider.parentElement?.getBoundingClientRect();\n\n        if (!slider || !parentRect) { return null; }\n\n\n        let x: number;\n        if (e instanceof MouseEvent) {\n            x = e.clientX - parentRect.left;\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            if (!isLeft && !isRight) { return null; }\n            e.preventDefault();\n            const diff = isLeft ? -5 : 5;\n            x = (parseFloat(slider.style.left) - sliderRect.width / 2) + diff;\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, parentRect.width);\n\n        slider.style.left = (x + sliderRect.width / 2) + 'px';\n\n        return x;\n    }\n\n    private update() {\n        const color = _Util.Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const spectrumColor = _Util.Color.fromHSB(this.H * 360, 1, 1);\n        const rgbaColor = color.toRgbaString();\n\n        // the recent color list needs to know color has actually changed\n        const colorPicker = this.picker as AgColorPicker;\n\n        const existingColor = _Util.Color.fromString(colorPicker.getValue());\n        if (existingColor.toRgbaString() !== rgbaColor) {\n            this.colorChanged = true;\n        }\n\n        colorPicker.setValue(rgbaColor);\n\n        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();\n        this.spectrumDragger.style.backgroundColor = rgbaColor;\n    }\n\n    /**\n     * @param saturation In the [0, 1] interval.\n     * @param brightness In the [0, 1] interval.\n     */\n    public setSpectrumValue(saturation: number, brightness: number) {\n        const valRect = this.spectrumValRect || this.refreshSpectrumRect();\n\n        if (valRect == null) { return; }\n\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        saturation = Math.max(0, saturation);\n        saturation = Math.min(1, saturation);\n        brightness = Math.max(0, brightness);\n        brightness = Math.min(1, brightness);\n\n        this.S = saturation;\n        this.B = brightness;\n\n        dragger.style.left = (saturation * valRect.width - draggerRect.width / 2) + 'px';\n        dragger.style.top = ((1 - brightness) * valRect.height - draggerRect.height / 2) + 'px';\n\n        this.update();\n    }\n\n    private getSpectrumValue(): { x: number, y: number } {\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        const x = parseFloat(dragger.style.left) + draggerRect.width / 2;\n        const y = parseFloat(dragger.style.top) + draggerRect.height / 2; \n\n        return { x, y };\n    }\n\n    private initRecentColors() {\n        const recentColors = AgColorPanel.recentColors;\n        const innerHtml = recentColors.map((color: string, index: number) => {\n            return (/* html */`<div class=\"ag-recent-color\" id=${index} style=\"background-color: ${color}; width: 15px; height: 15px;\" recent-color=\"${color}\" tabIndex=\"${this.tabIndex}\"></div>`);\n        });\n\n        this.recentColors.innerHTML = innerHtml.join('');\n    }\n\n    public setValue(val: string) {\n        const color: _Util.Color = _Util.Color.fromString(val);\n        const [h, s, b] = color.toHSB();\n\n        this.H = (isNaN(h) ? 0 : h) / 360;\n        this.A = color.a;\n\n        const spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();\n        const spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();\n\n        this.spectrumHueSlider.style.left = `${((this.H - 1) * -spectrumHueRect.width)}px`;\n        this.spectrumAlphaSlider.style.left = `${(this.A * spectrumAlphaRect.width)}px`;\n\n        this.setSpectrumValue(s, b);\n    }\n\n    private onRecentColorClick(e: MouseEvent | KeyboardEvent) {\n        const target = e.target as HTMLElement;\n\n        if (!_.exists(target.id)) {\n            return;\n        }\n\n        const id = parseInt(target.id, 10);\n\n        this.setValue(AgColorPanel.recentColors[id]);\n        this.destroy();\n    }\n\n    private addRecentColor() {\n        const color = _Util.Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n\n        let recentColors = AgColorPanel.recentColors;\n\n        if (!this.colorChanged || recentColors[0] === rgbaColor) {\n            return;\n        }\n\n        // remove duplicate color\n        recentColors = recentColors.filter(currentColor => currentColor != rgbaColor);\n\n        // add color to head\n        recentColors = [rgbaColor].concat(recentColors);\n\n        // ensure we don't exceed max number of recent colors\n        if (recentColors.length > AgColorPanel.maxRecentColors) {\n            recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);\n        }\n\n        AgColorPanel.recentColors = recentColors;\n    }\n\n    protected destroy(): void {\n        this.addRecentColor();\n        super.destroy();\n    }\n}\n", "import { AgColorPanel } from \"./agColorPanel\";\nimport { _, AgPickerFieldParams, AgPickerField, AgDialog } from \"@ag-grid-community/core\";\n\nexport interface AgColorPickerParams extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\n    pickerType?: string;\n    pickerAriaLabelKey?: string;\n    pickerAriaLabelValue?: string;\n}\n\nexport class AgColorPicker extends AgPickerField<string, AgColorPickerParams & AgPickerFieldParams, AgDialog> {\n\n    private isDestroyingPicker: boolean;\n\n    constructor(config?: AgColorPickerParams) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelColorPicker',\n            pickerAriaLabelValue: 'Color Picker',\n            pickerType: 'ag-list',\n            className: 'ag-color-picker',\n            pickerIcon: 'colorPicker',\n            ...config,\n        });\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        if (this.value) {\n            this.setValue(this.value);\n        }\n    }\n\n    protected createPickerComponent() {\n        const eGuiRect = this.getGui().getBoundingClientRect();\n\n        const colorDialog = this.createBean(new AgDialog({\n            closable: false,\n            modal: true,\n            hideTitleBar: true,\n            minWidth: 190,\n            width: 190,\n            height: 250,\n            x: eGuiRect.right - 190,\n            y: eGuiRect.top - 250\n        }));\n\n        return colorDialog;\n    }\n\n    protected renderAndPositionPicker(): (() => void) {\n        const pickerComponent = this.pickerComponent!;\n        const colorPanel = this.createBean(new AgColorPanel({ picker: this }));\n\n        pickerComponent.addCssClass('ag-color-dialog');\n\n        colorPanel.addDestroyFunc(() => {\n            if (pickerComponent.isAlive()) {\n                this.destroyBean(pickerComponent);\n            }\n        });\n\n        pickerComponent.setParentComponent(this);\n        pickerComponent.setBodyComponent(colorPanel);\n        colorPanel.setValue(this.getValue());\n        colorPanel.getGui().focus();\n\n        pickerComponent.addDestroyFunc(() => {\n            // here we check if the picker was already being\n            // destroyed to avoid a stack overflow\n            if (!this.isDestroyingPicker) {\n                this.beforeHidePicker();\n                this.isDestroyingPicker = true;\n\n                if (colorPanel.isAlive()) {\n                    this.destroyBean(colorPanel);\n                }\n\n                if (this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            } else {\n                this.isDestroyingPicker = false;\n            }\n        });\n\n        return () => this.pickerComponent?.close();\n    }\n\n    public setValue(color: string): this {\n        if (this.value === color) { return this; }\n\n        this.eDisplayField.style.backgroundColor = color;\n\n        return super.setValue(color);\n    }\n\n    public getValue(): string {\n        return this.value;\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class CalloutPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"calloutGroup\">\n                <ag-slider ref=\"calloutLengthSlider\"></ag-slider>\n                <ag-slider ref=\"calloutStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"labelOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const calloutGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"callout\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true\n        };\n        this.setTemplate(CalloutPanel.TEMPLATE, {\n            calloutGroup: calloutGroupParams,\n            calloutLengthSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLine.length', 'length', 40),\n            calloutStrokeWidthSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLine.strokeWidth', 'strokeWidth', 10),\n            labelOffsetSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLabel.offset', 'offset', 30)\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class CapsPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"capsGroup\">\n                <ag-slider ref=\"capLengthRatioSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const capsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"cap\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        const capLengthRatioSliderParams = this.chartMenuUtils.getDefaultSliderParams(\"cap.lengthRatio\", \"capLengthRatio\", 1);\n        capLengthRatioSliderParams.step = 0.05;\n\n        this.setTemplate(CapsPanel.TEMPLATE, {\n            capsGroup: capsGroupParams,\n            capLengthRatioSlider: capLengthRatioSliderParams\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class ConnectorLinePanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"lineGroup\">\n                <ag-color-picker ref=\"lineColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"lineStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"lineOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"lineDashSlider\"></ag-slider>                \n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const lineGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"connectorLine\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(ConnectorLinePanel.TEMPLATE, {\n            lineGroup: lineGroupParams,\n            lineColorPicker: this.chartMenuUtils.getDefaultColorPickerParams(\"line.stroke\"),\n            lineStrokeWidthSlider: this.getSliderParams(\"strokeWidth\", 10, \"line.strokeWidth\"),\n            lineDashSlider: this.getSliderParams(\"lineDash\", 30, \"line.lineDash\", 1, true),\n            lineOpacitySlider: this.getSliderParams(\"strokeOpacity\", 1, \"line.strokeOpacity\", 0.05)\n        });\n    }\n\n    private getSliderParams(labelKey: ChartTranslationKey, maxValue: number, seriesOptionKey: string, step: number = 1, isArray: boolean = false): AgSliderParams {\n        const params = this.chartMenuUtils.getDefaultSliderParams(seriesOptionKey, labelKey, maxValue, isArray);\n        params.step = step;\n        return params;\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class WhiskersPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"whiskersGroup\">\n                <ag-color-picker ref=\"whiskerColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"whiskerThicknessSlider\"></ag-slider>\n                <ag-slider ref=\"whiskerOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"whiskerLineDashSlider\"></ag-slider>\n                <ag-slider ref=\"whiskerLineDashOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const whiskersGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"whisker\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(WhiskersPanel.TEMPLATE, {\n            whiskersGroup: whiskersGroupParams,\n            whiskerColorPicker: this.chartMenuUtils.getDefaultColorPickerParams('whisker.stroke'),\n            whiskerThicknessSlider: this.chartMenuUtils.getDefaultSliderParams('whisker.strokeWidth', 'strokeWidth', 10),\n            whiskerOpacitySlider: this.chartMenuUtils.getDefaultSliderParams('whisker.strokeOpacity', 'strokeOpacity', 1),\n            whiskerLineDashSlider: this.chartMenuUtils.getDefaultSliderParams('whisker.lineDash', \"lineDash\", 30, true),\n            whiskerLineDashOffsetSlider: this.chartMenuUtils.getDefaultSliderParams('whisker.lineDashOffset', 'lineDashOffset', 30)\n        });\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    AgSlider,\n    AgGroupComponent,\n    Autowired,\n    Component,\n    ListOption,\n    PostConstruct,\n    RefSelector,\n    AgSelectParams\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FontPanel } from \"../fontPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\ntype SeriesItemType = 'positive' | 'negative';\n\nexport class SeriesItemsPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"seriesItemsGroup\">\n                <ag-select ref=\"seriesItemSelect\"></ag-select>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('seriesItemsGroup') private seriesItemsGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private activePanels: Component[] = [];\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const seriesItemsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('seriesItems'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(SeriesItemsPanel.TEMPLATE, {\n            seriesItemsGroup: seriesItemsGroupParams,\n            seriesItemSelect: this.getSeriesItemsParams()\n        });\n\n        this.initSeriesControls();\n    }\n\n    private getSeriesItemsParams(): AgSelectParams {\n        const options: ListOption<SeriesItemType>[] = [\n            {value: 'positive', text: this.chartTranslationService.translate('seriesItemPositive')},\n            {value: 'negative', text: this.chartTranslationService.translate('seriesItemNegative')},\n        ];\n\n        const seriesItemChangedCallback = (newValue: SeriesItemType) => {\n            this.destroyActivePanels();\n            this.initSeriesControls(newValue as SeriesItemType);\n        }\n\n        return {\n            label: this.chartTranslationService.translate('seriesItemType'),\n            labelAlignment: \"left\",\n            labelWidth: 'flex',\n            inputWidth: 'flex',\n            options,\n            value: 'positive',\n            onValueChange: seriesItemChangedCallback\n        };\n    }\n\n    private initSeriesControls(itemType: SeriesItemType = 'positive') {\n        this.initSlider(\"strokeWidth\", 10, `item.${itemType}.strokeWidth`);\n        this.initSlider(\"lineDash\", 30, `item.${itemType}.lineDash`, 1, true);\n        this.initSlider(\"strokeOpacity\", 1, `item.${itemType}.strokeOpacity`, 0.05, false);\n        this.initSlider(\"fillOpacity\", 1, `item.${itemType}.fillOpacity`, 0.05, false);\n        this.initItemLabels(itemType);\n    }\n\n    private initSlider(labelKey: ChartTranslationKey, maxValue: number, seriesOptionKey: string, step: number = 1, isArray: boolean = false) {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            seriesOptionKey,\n            labelKey,\n            maxValue,\n            isArray\n        );\n        params.step = step;\n\n        const itemSlider = this.seriesItemsGroup.createManagedBean(new AgSlider(params));\n\n        this.seriesItemsGroup.addItem(itemSlider);\n        this.activePanels.push(itemSlider);\n    }\n\n    private initItemLabels(itemType: \"positive\" | \"negative\") {\n        const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams(`item.${itemType}.label`, 'seriesItemLabels');\n\n        const labelPanelComp = this.createBean(new FontPanel(sectorParams));\n        this.seriesItemsGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class TileSpacingPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"groupSpacing\">\n                <ag-slider ref=\"groupPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"groupSpacingSlider\"></ag-slider>\n            </ag-group-component>\n            <ag-group-component ref=\"tileSpacing\">\n                <ag-slider ref=\"tilePaddingSlider\"></ag-slider>\n                <ag-slider ref=\"tileSpacingSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(TileSpacingPanel.TEMPLATE, {\n            groupSpacing: { ...groupParams, title: this.chartTranslationService.translate(\"group\") },\n            tileSpacing: { ...groupParams, title: this.chartTranslationService.translate(\"tile\") },\n            groupPaddingSlider: this.getSliderParams('padding', 'group.padding'),\n            groupSpacingSlider: this.getSliderParams('spacing', 'group.gap'),\n            tilePaddingSlider: this.getSliderParams('padding', 'tile.padding'),\n            tileSpacingSlider: this.getSliderParams('spacing', 'tile.gap')\n        });\n    }\n\n    private getSliderParams(labelKey: ChartTranslationKey, key: string): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(key, labelKey, 10);\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    AgCheckboxParams\n} from \"@ag-grid-community/core\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class GradientLegendPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"legendGroup\">\n                <ag-select ref=\"legendPositionSelect\"></ag-select>\n                <ag-checkbox ref=\"gradientReverseCheckbox\"></ag-checkbox>\n                <ag-slider ref=\"gradientThicknessSlider\"></ag-slider>\n                <ag-slider ref=\"gradientPreferredLengthSlider\"></ag-slider>\n                <ag-slider ref=\"legendSpacingSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({ chartMenuParamsFactory: chartMenuUtils, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.chartMenuUtils = chartMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const legendGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'gradientLegend.enabled',\n            {\n                cssIdentifier: 'charts-format-top-level',\n                direction: 'vertical',\n                title: this.chartTranslationService.translate(\"legend\"),\n                suppressEnabledCheckbox: false,\n                suppressToggleExpandOnEnableChange: true,\n                expanded: this.isExpandedOnInit,\n                items: [this.createLabelPanel()]\n            }\n        );\n        this.setTemplate(GradientLegendPanel.TEMPLATE, {\n            legendGroup: legendGroupParams,\n            legendPositionSelect: this.chartMenuUtils.getDefaultLegendParams(\"gradientLegend.position\"),\n            gradientReverseCheckbox: this.getGradientReverseCheckboxParams(),\n            gradientThicknessSlider: this.chartMenuUtils.getDefaultSliderParams(\"gradientLegend.gradient.thickness\", \"thickness\", 40),\n            gradientPreferredLengthSlider: this.chartMenuUtils.getDefaultSliderParams(\"gradientLegend.gradient.preferredLength\", \"preferredLength\", 300),\n            legendSpacingSlider: this.chartMenuUtils.getDefaultSliderParams(\"gradientLegend.spacing\", \"spacing\", 200)\n        });\n    }\n\n    private getGradientReverseCheckboxParams(): AgCheckboxParams {\n        return this.chartMenuUtils.addValueParams(\n            'gradientLegend.reverseOrder',\n            {\n                label: this.chartTranslationService.translate(\"reverseDirection\"),\n                labelWidth: \"flex\",\n            }\n        );\n    }\n\n    private createLabelPanel(): FontPanel {\n        const params: FontPanelParams = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `gradientLegend.scale.label.${key}`\n        };\n\n        return this.createManagedBean(new FontPanel(params));\n    }\n}\n", "import {\n    BeanStub,\n    ChartType,\n    Component,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../chartController\";\nimport { ChartSeriesType, getSeriesType } from \"../utils/seriesTypeMapper\";\n\nexport class ChartPanelFeature extends BeanStub {\n    private chartType: ChartType;\n    private isGrouping: boolean;\n    private panels: Component[] = [];\n\n    constructor(\n        private readonly chartController: ChartController,\n        private readonly eGui: HTMLElement,\n        private readonly cssClass: string,\n        private readonly createPanels: (chartType: ChartType, seriesType: ChartSeriesType) => void\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, () => this.refreshPanels(true));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, () => this.refreshPanels(false));\n    }\n\n    public addComponent(component: Component): void {\n        this.createBean(component);\n        this.panels.push(component);\n        component.addCssClass(this.cssClass);\n        this.eGui.appendChild(component.getGui());\n    }\n\n    public refreshPanels(reuse?: boolean) {\n        const chartType = this.chartController.getChartType();\n        const isGrouping = this.chartController.isGrouping();\n        const seriesType = getSeriesType(chartType);\n\n        if (reuse && chartType === this.chartType && isGrouping === this.isGrouping) {\n            // existing panels can be re-used\n            return;\n        }\n\n        this.destroyPanels();\n\n        this.createPanels(chartType, seriesType);\n\n        this.chartType = chartType;\n        this.isGrouping = isGrouping;\n    }\n\n    private destroyPanels(): void {\n        this.panels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n        this.panels = [];\n    }\n\n    protected destroy(): void {\n        this.destroyPanels();\n        super.destroy();\n    }\n}", "import { _, Component, PostConstruct, RefSelector } from \"@ag-grid-community/core\";\nimport { MiniChartsContainer } from \"./miniChartsContainer\";\nimport { AgChartThemePalette } from \"ag-charts-community\";\nimport { ChartController } from \"../../chartController\";\nimport { isStockTheme } from \"../../chartProxies/chartTheme\";\n\ntype AnimationDirection = 'left' | 'right';\n\nexport class ChartSettingsPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div class=\"ag-chart-settings-wrapper\">\n            <div ref=\"eMiniChartsContainer\" class=\"ag-chart-settings-mini-charts-container ag-scrollable-container\"></div>\n            <div ref=\"eNavBar\" class=\"ag-chart-settings-nav-bar\">\n                <div ref=\"ePrevBtn\" class=\"ag-chart-settings-prev\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-prev-button\"></button>\n                </div>\n                <div ref=\"eCardSelector\" class=\"ag-chart-settings-card-selector\"></div>\n                <div ref=\"eNextBtn\" class=\"ag-chart-settings-next\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-next-button\"></button>\n                </div>\n            </div>\n        </div>`;\n\n    @RefSelector('eMiniChartsContainer') private readonly eMiniChartsContainer: HTMLElement;\n    @RefSelector('eNavBar') private readonly eNavBar: HTMLElement;\n    @RefSelector('eCardSelector') private readonly eCardSelector: HTMLElement;\n    @RefSelector('ePrevBtn') private readonly ePrevBtn: HTMLElement;\n    @RefSelector('eNextBtn') private readonly eNextBtn: HTMLElement;\n\n    private miniChartsContainers: MiniChartsContainer[] = [];\n    private cardItems: HTMLElement[] = [];\n\n    private activePaletteIndex = 0;\n    private palettes: AgChartThemePalette[] = [];\n    private themes: string[] = [];\n\n    private isAnimating: boolean;\n\n    constructor(\n        private readonly chartController: ChartController,\n    ) {\n        super(ChartSettingsPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.resetPalettes();\n\n        this.ePrevBtn.insertAdjacentElement('afterbegin', _.createIconNoSpan('previous', this.gridOptionsService)!);\n        this.eNextBtn.insertAdjacentElement('afterbegin', _.createIconNoSpan('next', this.gridOptionsService)!);\n\n        this.addManagedListener(this.ePrevBtn, 'click', () => this.setActivePalette(this.getPrev(), 'left'));\n        this.addManagedListener(this.eNextBtn, 'click', () => this.setActivePalette(this.getNext(), 'right'));\n\n        // change the selected chart when a combo chart is modified via the data panel, i.e. the custom combo should be selected\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_TYPE_CHANGED, () => this.resetPalettes(true));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, () => this.resetPalettes(true));\n        this.scrollSelectedIntoView();\n    }\n\n    private scrollSelectedIntoView(): void {\n        // the panel is not immediately visible due to the slide animation, so we add a\n        // setTimeout to wait until the panel animation is over and is able to scroll\n        setTimeout(() => {\n            const isMiniChartsContainerVisible = (miniChartsContainers: MiniChartsContainer) => {\n                return !miniChartsContainers.getGui().classList.contains('ag-hidden');\n            }\n            const currentMiniChartContainer = this.miniChartsContainers.find(isMiniChartsContainerVisible);\n            const currentChart = currentMiniChartContainer!.getGui().querySelector('.ag-selected') as HTMLElement;\n\n            if (currentChart) {\n                const parent = currentChart.offsetParent as HTMLElement;\n                if (parent) {\n                    this.eMiniChartsContainer.scrollTo(0, parent.offsetTop);\n                }\n            }\n        }, 250);\n    }\n\n    private resetPalettes(forceReset?: boolean): void {\n        const palettes = this.chartController.getPalettes();\n        const themeTemplateParameters = this.chartController.getThemeTemplateParameters();\n        const chartGroups = this.gridOptionsService.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n\n        if ((_.shallowCompare(palettes, this.palettes) && !forceReset) || this.isAnimating) {\n            return;\n        }\n\n        this.palettes = palettes;\n        this.themes = this.chartController.getThemeNames();\n        this.activePaletteIndex = this.themes.findIndex(name => name === this.chartController.getChartThemeName());\n        this.cardItems = [];\n\n        _.clearElement(this.eCardSelector);\n\n        this.destroyMiniCharts();\n\n        const { themes } = this;\n\n        this.palettes.forEach((palette, index) => {\n            const isActivePalette = this.activePaletteIndex === index;\n            const { fills, strokes } = palette;\n            const themeName = themes[index];\n            const isCustomTheme = !isStockTheme(themeName);\n            const miniChartsContainer = this.createBean(\n                new MiniChartsContainer(\n                    this.chartController,\n                    fills,\n                    strokes,\n                    themeTemplateParameters[index],\n                    isCustomTheme,\n                    chartGroups\n                )\n            );\n\n            this.miniChartsContainers.push(miniChartsContainer);\n            this.eMiniChartsContainer.appendChild(miniChartsContainer.getGui());\n            this.addCardLink(index);\n\n            if (isActivePalette) {\n                miniChartsContainer.updateSelectedMiniChart();\n            } else {\n                miniChartsContainer.setDisplayed(false);\n            }\n        });\n\n        _.setDisplayed(this.eNavBar, this.palettes.length > 1);\n        _.radioCssClass(this.cardItems[this.activePaletteIndex], 'ag-selected', 'ag-not-selected');\n    }\n\n    private addCardLink(index: number): void {\n        const link = document.createElement('div');\n        link.classList.add('ag-chart-settings-card-item');\n\n        this.addManagedListener(link, 'click', () => {\n            this.setActivePalette(index, index < this.activePaletteIndex ? 'left' : 'right');\n        });\n\n        this.eCardSelector.appendChild(link);\n        this.cardItems.push(link);\n    }\n\n    private getPrev(): number {\n        let prev = this.activePaletteIndex - 1;\n\n        if (prev < 0) {\n            prev = this.palettes.length - 1;\n        }\n\n        return prev;\n    }\n\n    private getNext(): number {\n        let next = this.activePaletteIndex + 1;\n\n        if (next >= this.palettes.length) {\n            next = 0;\n        }\n\n        return next;\n    }\n\n    private setActivePalette(index: number, animationDirection: AnimationDirection) {\n        if (this.isAnimating || this.activePaletteIndex === index) { return; }\n\n        _.radioCssClass(this.cardItems[index], 'ag-selected', 'ag-not-selected');\n\n        const currentPalette = this.miniChartsContainers[this.activePaletteIndex];\n        const currentGui = currentPalette.getGui();\n        const futurePalette = this.miniChartsContainers[index];\n        const nextGui = futurePalette.getGui();\n\n        currentPalette.updateSelectedMiniChart();\n        futurePalette.updateSelectedMiniChart();\n\n        const multiplier = animationDirection === 'left' ? -1 : 1;\n        const final = nextGui.style.left = `${(_.getAbsoluteWidth(this.getGui()) * multiplier)}px`;\n\n        this.activePaletteIndex = index;\n\n        this.isAnimating = true;\n\n        const animatingClass = 'ag-animating';\n\n        futurePalette.setDisplayed(true);\n        currentPalette.addCssClass(animatingClass);\n        futurePalette.addCssClass(animatingClass);\n\n        this.chartController.setChartThemeName(this.themes[index]);\n\n        window.setTimeout(() => {\n            currentGui.style.left = `${-parseFloat(final)}px`;\n            nextGui.style.left = '0px';\n        }, 0);\n\n        window.setTimeout(() => {\n            this.isAnimating = false;\n\n            currentPalette.removeCssClass(animatingClass);\n            futurePalette.removeCssClass(animatingClass);\n            currentPalette.setDisplayed(false);\n        }, 300);\n    }\n\n    private destroyMiniCharts(): void {\n        _.clearElement(this.eMiniChartsContainer);\n\n        this.miniChartsContainers = this.destroyBeans(this.miniChartsContainers);\n    }\n\n    protected destroy(): void {\n        this.destroyMiniCharts();\n        super.destroy();\n    }\n}\n", "\nimport {\n    _,\n    AgGroupComponent,\n    Autowired,\n    ChartGroupsDef,\n    ChartType,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ChartTranslationService } from \"../../services/chartTranslationService\";\nimport {\n    MiniArea,\n    MiniAreaColumnCombo,\n    MiniBar,\n    MiniBoxPlot,\n    MiniBubble,\n    MiniColumn,\n    MiniColumnLineCombo,\n    MiniCustomCombo,\n    MiniDonut,\n    MiniHeatmap,\n    MiniHistogram,\n    MiniLine,\n    MiniNightingale,\n    MiniNormalizedArea,\n    MiniNormalizedBar,\n    MiniNormalizedColumn,\n    MiniPie,\n    MiniRadarArea,\n    MiniRadarLine,\n    MiniRadialBar,\n    MiniRadialColumn,\n    MiniRangeBar,\n    MiniRangeArea,\n    MiniWaterfall,\n    MiniScatter,\n    MiniStackedArea,\n    MiniStackedBar,\n    MiniStackedColumn,\n    MiniSunburst,\n    MiniTreemap,\n} from \"./miniCharts/index\"; // please leave this as is - we want it to be explicit for build reasons\nimport { MiniChart } from './miniCharts/miniChart';\n\n// import {enterprise} from \"../../../../main\";\n\nexport type ThemeTemplateParameters = {\n    extensions: Map<any, any>;\n    properties: Map<any, any>;\n};\n\ntype MiniChartMenuMapping = {\n    [K in keyof ChartGroupsDef]-?: MiniChartMenuGroup<K>;\n};\n\ntype MiniChartMenuGroup<K extends keyof ChartGroupsDef> = {\n    [T in NonNullable<ChartGroupsDef[K]>[number]]: MiniChartMenuItem;\n}\n\ninterface MiniChartMenuItem {\n    range: boolean;\n    pivot: boolean;\n    enterprise: boolean;\n    icon: MiniChartConstructor;\n}\n\ntype MiniChartConstructor = {\n    chartType: ChartType;\n    new (...args: any[]): MiniChart;\n};\n\nconst miniChartMapping: MiniChartMenuMapping = {\n    columnGroup: {\n        column: { range: true, pivot: true, enterprise: false, icon: MiniColumn },\n        stackedColumn: { range: true, pivot: true, enterprise: false, icon: MiniStackedColumn },\n        normalizedColumn: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedColumn },\n    },\n    barGroup: {\n        bar: { range: true, pivot: true, enterprise: false, icon: MiniBar },\n        stackedBar: { range: true, pivot: true, enterprise: false, icon: MiniStackedBar },\n        normalizedBar: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedBar },\n    },\n    pieGroup: {\n        pie: { range: true, pivot: true, enterprise: false, icon: MiniPie },\n        donut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n        doughnut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n    },\n    lineGroup: { line: { range: true, pivot: true, enterprise: false, icon: MiniLine } },\n    scatterGroup: {\n        scatter: { range: true, pivot: true, enterprise: false, icon: MiniScatter },\n        bubble: { range: true, pivot: true, enterprise: false, icon: MiniBubble },\n    },\n    areaGroup: {\n        area: { range: true, pivot: true, enterprise: false, icon: MiniArea },\n        stackedArea: { range: true, pivot: true, enterprise: false, icon: MiniStackedArea },\n        normalizedArea: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedArea },\n    },\n    polarGroup: {\n        radarLine: { range: true, pivot: false, enterprise: true, icon: MiniRadarLine },\n        radarArea: { range: true, pivot: false, enterprise: true, icon: MiniRadarArea },\n        nightingale: { range: true, pivot: false, enterprise: true, icon: MiniNightingale },\n        radialColumn: { range: true, pivot: false, enterprise: true, icon: MiniRadialColumn },\n        radialBar: { range: true, pivot: false, enterprise: true, icon: MiniRadialBar },\n    },\n    statisticalGroup: {\n        boxPlot: { range: true, pivot: false, enterprise: true, icon: MiniBoxPlot },\n        histogram: { range: true, pivot: false, enterprise: false, icon: MiniHistogram },\n        rangeBar: { range: true, pivot: false, enterprise: true, icon: MiniRangeBar },\n        rangeArea: { range: true, pivot: false, enterprise: true, icon: MiniRangeArea },\n    },\n    hierarchicalGroup: {\n        treemap: { range: true, pivot: true, enterprise: true, icon: MiniTreemap },\n        sunburst: { range: true, pivot: true, enterprise: true, icon: MiniSunburst },\n    },\n    specializedGroup: {\n        heatmap: { range: true, pivot: false, enterprise: true, icon: MiniHeatmap },\n        waterfall: { range: true, pivot: false, enterprise: true, icon: MiniWaterfall },\n    },\n    combinationGroup: {\n        columnLineCombo: { range: true, pivot: true, enterprise: false, icon: MiniColumnLineCombo },\n        areaColumnCombo: { range: true, pivot: true, enterprise: false, icon: MiniAreaColumnCombo },\n        customCombo: { range: true, pivot: true, enterprise: false, icon: MiniCustomCombo },\n    },\n};\n\nconst DEFAULT_CHART_GROUPS: ChartGroupsDef = {\n    columnGroup: [\n        'column',\n        'stackedColumn',\n        'normalizedColumn',\n    ],\n    barGroup: [\n        'bar',\n        'stackedBar',\n        'normalizedBar'\n    ],\n    pieGroup: [\n        'pie',\n        'donut',\n    ],\n    lineGroup: [\n        'line',\n    ],\n    scatterGroup: [\n        'scatter',\n        'bubble',\n    ],\n    areaGroup: [\n        'area',\n        'stackedArea',\n        'normalizedArea',\n    ],\n    polarGroup: [\n        'radarLine',\n        'radarArea',\n        'nightingale',\n        'radialColumn',\n        'radialBar',\n    ],\n    statisticalGroup: [\n        'boxPlot',\n        'histogram',\n        'rangeBar',\n        'rangeArea',\n    ],\n    hierarchicalGroup: [\n        'treemap',\n        'sunburst',\n    ],\n    specializedGroup: [\n        'heatmap',\n        'waterfall',\n    ],\n    combinationGroup: [\n        'columnLineCombo',\n        'areaColumnCombo',\n        'customCombo',\n    ]\n};\n\nexport class MiniChartsContainer extends Component {\n    static TEMPLATE = /* html */ `<div class=\"ag-chart-settings-mini-wrapper\"></div>`;\n\n    private readonly fills: string[];\n    private readonly strokes: string[];\n    private readonly themeTemplateParameters: ThemeTemplateParameters;\n    private readonly isCustomTheme: boolean;\n    private wrappers: { [key: string]: HTMLElement } = {};\n    private chartController: ChartController;\n\n    private chartGroups: ChartGroupsDef;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n\n    constructor(chartController: ChartController, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean, chartGroups: ChartGroupsDef = DEFAULT_CHART_GROUPS) {\n        super(MiniChartsContainer.TEMPLATE);\n\n        this.chartController = chartController;\n        this.fills = fills;\n        this.strokes = strokes;\n        this.themeTemplateParameters = themeTemplateParameters;\n        this.isCustomTheme = isCustomTheme;\n        this.chartGroups = {...chartGroups};\n    }\n\n    @PostConstruct\n    private init() {\n        const eGui = this.getGui();\n        const isEnterprise = this.chartController.isEnterprise();\n        const isPivotChart = this.chartController.isPivotChart();\n        const isRangeChart = !isPivotChart;\n\n        // Determine the set of chart types that are specified by the chartGroupsDef config, filtering out any entries\n        // that are invalid for the current chart configuration (pivot/range) and license type\n        const displayedMenuGroups = Object.keys(this.chartGroups).map((group: keyof ChartGroupsDef) => {\n            const menuGroup = group in miniChartMapping\n                ? miniChartMapping[group as keyof typeof miniChartMapping]\n                : undefined;\n            if (!menuGroup) {\n                // User has specified an invalid chart group in the chartGroupsDef config\n                _.warnOnce(`invalid chartGroupsDef config '${group}'`);\n                return null;\n            }\n\n            // Determine the valid chart types within this group, based on the chartGroupsDef config\n            const chartGroupValues = this.chartGroups[group as keyof ChartGroupsDef] ?? [];\n            const menuItems = chartGroupValues.map((chartType) => {\n                const menuItem = chartType in menuGroup\n                        ? (menuGroup as Record<typeof chartType, MiniChartMenuItem>)[chartType]\n                        : undefined;\n\n                if (!menuItem) {\n                     // User has specified an invalid chart type in the chartGroupsDef config\n                    _.warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                    return null;\n                }\n\n                if (!isEnterprise && menuItem.enterprise) {\n                    return null; // skip enterprise charts if community\n                }\n                // Only show the chart if it is valid for the current chart configuration (pivot/range)\n                if (isRangeChart && menuItem.range) return menuItem;\n                if (isPivotChart && menuItem.pivot) return menuItem;\n                return null;\n            })\n            .filter((menuItem): menuItem is NonNullable<typeof menuItem> => menuItem != null);\n\n            if (menuItems.length === 0) return null; // don't render empty chart groups\n\n            return {\n                label: this.chartTranslationService.translate(group),\n                items: menuItems\n            };\n        })\n        .filter((menuGroup): menuGroup is NonNullable<typeof menuGroup> => menuGroup != null);\n\n        // Render the filtered menu items\n        for (const { label, items } of displayedMenuGroups) {\n            const groupComponent = this.createBean(\n                new AgGroupComponent({\n                    title: label,\n                    suppressEnabledCheckbox: true,\n                    enabled: true,\n                    suppressOpenCloseIcons: true,\n                    cssIdentifier: 'charts-settings',\n                    direction: 'horizontal',\n                })\n            );\n\n            for (const menuItem of items) {\n                const MiniClass = menuItem.icon;\n                const miniWrapper = document.createElement('div');\n                miniWrapper.classList.add('ag-chart-mini-thumbnail');\n\n                const miniClassChartType: ChartType = MiniClass.chartType;\n                this.addManagedListener(miniWrapper, 'click', () => {\n                    this.chartController.setChartType(miniClassChartType);\n                    this.updateSelectedMiniChart();\n                });\n\n                this.wrappers[miniClassChartType] = miniWrapper;\n\n                this.createBean(new MiniClass(miniWrapper, this.fills, this.strokes, this.themeTemplateParameters, this.isCustomTheme));\n                groupComponent.addItem(miniWrapper);\n            }\n\n            eGui.appendChild(groupComponent.getGui());\n        }            \n\n        // hide MiniCustomCombo if no custom combo exists\n        if (!this.chartController.customComboExists() && this.chartGroups.combinationGroup) {\n            this.chartGroups.combinationGroup = this.chartGroups.combinationGroup.filter(chartType => chartType !== 'customCombo');\n        }\n\n        this.updateSelectedMiniChart();\n    }\n\n    public updateSelectedMiniChart(): void {\n        const selectedChartType = this.chartController.getChartType();\n        for (const miniChartType in this.wrappers) {\n            const miniChart = this.wrappers[miniChartType];\n            const selected = miniChartType === selectedChartType;\n            miniChart.classList.toggle('ag-selected', selected);\n        }\n    }\n}\n", "import { PostConstruct } from \"@ag-grid-community/core\";\nimport { MiniChart } from \"./miniChart\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartTranslationKey } from \"../../../services/chartTranslationService\";\n\nexport abstract class MiniChartWithAxes extends MiniChart {\n\n    private readonly stroke = 'gray';\n    private readonly axisOvershoot = 3;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    @PostConstruct\n    private addAxes() {\n        const size = this.size;\n        const padding = this.padding;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + this.axisOvershoot;\n        leftAxis.stroke = this.stroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - this.axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = this.stroke;\n\n        const root = this.root;\n\n        root.append(leftAxis);\n        root.append(bottomAxis);\n    }\n}\n", "import { Autowired, Component, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { _Scene } from \"ag-charts-community\";\n\nconst CANVAS_CLASS = 'ag-chart-mini-thumbnail-canvas';\nconst ERROR_MESSAGE = 'AG Grid - chart update failed';\n\nexport abstract class MiniChart extends Component {\n\n    @Autowired('chartTranslationService')\n    protected chartTranslationService: ChartTranslationService;\n\n    protected readonly size: number = 58;\n    protected readonly padding: number = 5;\n    protected readonly root: _Scene.Group = new _Scene.Group();\n    protected readonly scene: _Scene.Scene;\n\n    constructor(container: HTMLElement, protected tooltipName: ChartTranslationKey) {\n        super();\n\n        const scene = new _Scene.Scene({\n            width: this.size,\n            height: this.size\n        });\n\n        scene.canvas.element.classList.add(CANVAS_CLASS);\n        scene.setRoot(this.root);\n        scene.setContainer(container);\n\n        this.scene = scene;\n    }\n\n    @PostConstruct\n    protected init(): void {\n        this.scene.canvas.element.title = this.chartTranslationService.translate(this.tooltipName);\n\n        // Necessary to force scene graph render as we are not using the standalone factory.\n        this.scene.render()\n            .catch((e: Error) => {\n                console.error(`${ERROR_MESSAGE}`, e);\n            });\n    }\n\n    abstract updateColors(fills: string[], strokes: string[]): void;\n}\n", "import { _Scene } from 'ag-charts-community';\n\nexport interface CreateColumnRectsParams {\n    stacked: boolean;\n    root: _Scene.Group;\n    data: any;\n    size: number;\n    padding: number;\n    xScaleDomain: number[];\n    yScaleDomain: number[];\n    xScalePadding: number;\n}\n\nexport function createColumnRects(params: CreateColumnRectsParams) {\n    const { stacked, size, padding, xScalePadding, xScaleDomain, yScaleDomain } = params;\n\n    const xScale = new _Scene.BandScale<number>();\n    xScale.domain = xScaleDomain;\n    xScale.range = [padding, size - padding];\n    xScale.paddingInner = xScalePadding;\n    xScale.paddingOuter = xScalePadding;\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = yScaleDomain;\n    yScale.range = [size - padding, padding];\n\n    const createBars = (series: number[], xScale: _Scene.BandScale<number>, yScale: _Scene.LinearScale) => {\n        return series.map((datum: number, i: number) => {\n            const top = yScale.convert(datum);\n            const rect = new _Scene.Rect();\n            rect.x = xScale.convert(i);\n            rect.y = top;\n            rect.width = xScale.bandwidth;\n            rect.height = yScale.convert(0) - top;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n    };\n\n    if (stacked) {\n        return params.data.map((d: number[]) => createBars(d, xScale, yScale));\n    }\n\n    return createBars(params.data, xScale, yScale);\n}\n\nexport function createLinePaths(root: _Scene.Group, data: number[][], size: number, padding: number): _Scene.Path[] {\n    const xScale = new _Scene.LinearScale();\n    xScale.domain = [0, 4];\n    xScale.range = [padding, size - padding];\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = [0, 10];\n    yScale.range = [size - padding, padding];\n\n    const lines: _Scene.Path[] = data.map((series) => {\n        const line = new _Scene.Path();\n        line.strokeWidth = 3;\n        line.lineCap = 'round';\n        line.fill = undefined;\n        series.forEach((datum: number, i: number) => {\n            line.path[i > 0 ? 'lineTo' : 'moveTo'](xScale.convert(i), yScale.convert(datum));\n        });\n\n        return line;\n    });\n\n    const linesGroup = new _Scene.Group();\n    linesGroup.setClipRectInGroupCoordinateSpace(\n        new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n    );\n    linesGroup.append(lines);\n    root.append(linesGroup);\n\n    return lines;\n}\n\nexport function createPolarPaths(\n    root: _Scene.Group,\n    data: number[][],\n    size: number,\n    radius: number,\n    innerRadius: number,\n    markerSize: number = 0\n): { paths: _Scene.Path[]; markers: _Scene.Circle[] } {\n    const angleScale = new _Scene.LinearScale();\n    angleScale.domain = [0, 7];\n    angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);\n\n    const radiusScale = new _Scene.LinearScale();\n    radiusScale.domain = [0, 10];\n    radiusScale.range = [radius, innerRadius];\n\n    const markers: _Scene.Circle[] = [];\n\n    const paths: _Scene.Path[] = data.map((series) => {\n        const path = new _Scene.Path();\n        path.strokeWidth = 1;\n        path.strokeOpacity = 0.5;\n        path.lineCap = 'round';\n        path.fill = undefined;\n        path.fillOpacity = 0.8;\n        series.forEach((datum: number, i: number) => {\n            const angle = angleScale.convert(i);\n            const r = radius + innerRadius - radiusScale.convert(datum);\n\n            const x = r * Math.cos(angle);\n            const y = r * Math.sin(angle);\n\n            path.path[i > 0 ? 'lineTo' : 'moveTo'](x, y);\n\n            if (markerSize > 0) {\n                const marker = new _Scene.Circle();\n                marker.x = x;\n                marker.y = y;\n                marker.size = markerSize;\n                markers.push(marker);\n            }\n        });\n\n        path.path.closePath();\n        return path;\n    });\n\n    const group = new _Scene.Group();\n\n    const center = size / 2;\n    group.translationX = center;\n    group.translationY = center;\n\n    group.append([...paths, ...markers]);\n    root.append(group);\n\n    return { paths, markers };\n}\n\nexport function accumulateData(data: number[][]): { processedData: number[][]; min: number; max: number } {\n    let [min, max] = [Infinity, -Infinity];\n    const processedData = data.reduce((acc, curr, currIndex) => {\n        const previous = currIndex > 0 ? acc[currIndex - 1] : undefined;\n        acc[currIndex] ??= [];\n        const current = acc[currIndex];\n        curr.forEach((datum, datumIndex) => {\n            if (previous) {\n                datum += previous[datumIndex];\n            }\n\n            current[datumIndex] = datum;\n\n            if (current[datumIndex] < min) {\n                min = current[datumIndex];\n            }\n\n            if (current[datumIndex] > max) {\n                max = current[datumIndex];\n            }\n        });\n        return acc;\n    }, [] as number[][]);\n\n    return { processedData, min, max };\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams } from \"../miniChartHelpers\";\n\nexport class MiniColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedColumn';\n\n    private readonly columns: _Scene.Rect[];\n\n    private columnData = [2, 3, 4];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"groupedColumnTooltip\");\n\n        const { root, columnData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.3\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((column: _Scene.Rect, i) => {\n            column.fill = fills[i];\n            column.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams } from \"../miniChartHelpers\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nexport class MiniStackedColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedColumn';\n\n    private readonly stackedColumns: _Scene.Rect[][];\n\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4]\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedColumn.data,\n        yScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = \"stackedColumnTooltip\") {\n        super(container, tooltipName);\n\n        const { root, size, padding } = this;\n\n        this.stackedColumns = createColumnRects({\n            stacked: true,\n            root,\n            data,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain,\n            xScalePadding: 0.3,\n        } as CreateColumnRectsParams);\n\n        root.append(([]as _Scene.Rect[]).concat.apply([], this.stackedColumns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.stackedColumns.forEach((series: _Scene.Rect[], i: number) =>\n            series.forEach(column => {\n                column.fill = fills[i];\n                column.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { MiniStackedColumn } from \"./miniStackedColumn\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniNormalizedColumn extends MiniStackedColumn {\n\n    static chartType: ChartType = 'normalizedColumn';\n    static data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, MiniNormalizedColumn.data, [0, 10], \"normalizedColumnTooltip\");\n    }\n}\n", "import { _Scene } from \"ag-charts-community\";\nimport { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedBar';\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"groupedBarTooltip\");\n\n        const padding = this.padding;\n        const size = this.size;\n        const data = [2, 3, 4];\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 4];\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map((datum, i) => {\n            const rect = new _Scene.Rect();\n            rect.x = padding;\n            rect.y = yScale.convert(i);\n            rect.width = bottom - xScale.convert(datum);\n            rect.height = height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nexport class MiniStackedBar extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'stackedBar';\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4]\n    ];\n\n    private readonly bars: _Scene.Rect[][];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedBar.data,\n        xScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = \"stackedBarTooltip\") {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = xScaleDomain;\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map(series =>\n            series.map((datum, i) => {\n                const rect = new _Scene.Rect();\n                rect.x = padding;\n                rect.y = yScale.convert(i);\n                rect.width = bottom - xScale.convert(datum);\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            })\n        );\n\n        this.updateColors(fills, strokes);\n        this.root.append(([] as _Scene.Rect[]).concat.apply([], this.bars));\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((series, i) =>\n            series.forEach(bar => {\n                bar.fill = fills[i];\n                bar.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedBar } from './miniStackedBar';\nimport { ChartType } from '@ag-grid-community/core';\n\nexport class MiniNormalizedBar extends MiniStackedBar {\n    static chartType: ChartType = 'normalizedBar';\n    static data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, MiniNormalizedBar.data, [0, 10], 'normalizedBarTooltip');\n    }\n}\n", "import { MiniChart } from \"../miniChart\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nconst toRadians = _Scene.toRadians;\nexport class MiniDonut extends MiniChart {\n\n    static chartType: ChartType = 'donut';\n    private readonly sectors: _Scene.Sector[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], _themeTemplateParameters: ThemeTemplateParameters, _isCustomTheme: boolean, centerRadiusScaler = 0.6, tooltipName: ChartTranslationKey = \"donutTooltip\") {\n        super(container, tooltipName);\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const center = radius + this.padding;\n        const angles = [\n            [toRadians(-90), toRadians(30)],\n            [toRadians(30), toRadians(120)],\n            [toRadians(120), toRadians(180)],\n            [toRadians(180), toRadians(210)],\n            [toRadians(210), toRadians(240)],\n            [toRadians(240), toRadians(270)]\n        ];\n\n        this.sectors = angles.map(([startAngle, endAngle]) => {\n            const sector = new _Scene.Sector();\n            sector.centerX = center;\n            sector.centerY = center;\n            sector.innerRadius = radius * centerRadiusScaler;\n            sector.outerRadius = radius;\n            sector.startAngle = startAngle;\n            sector.endAngle = endAngle;\n            sector.stroke = undefined;\n            sector.strokeWidth = 0;\n            sector.inset = 0.75;\n            return sector;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.sectors);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.sectors.forEach((sector, i) => {\n            sector.fill = fills[i % fills.length];\n            sector.stroke = strokes[i % strokes.length];\n        });\n    }\n}\n", "import { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { MiniDonut } from \"./miniDonut\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniPie extends MiniDonut {\n\n    static chartType: ChartType = 'pie';\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, 0, \"pieTooltip\");\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createLinePaths } from \"../miniChartHelpers\";\n\nexport class MiniLine extends MiniChartWithAxes {\n    static chartType: ChartType = 'line';\n\n    private readonly lines: _Scene.Path[];\n\n    private data = [\n        [9, 7, 8, 5, 6],\n        [5, 6, 3, 4, 1],\n        [1, 3, 4, 8, 7]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"lineTooltip\");\n\n        this.lines = createLinePaths(this.root, this.data, this.size, this.padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniScatter extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'scatter';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"scatterTooltip\");\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y] pairs\n        const data = [\n            [[0.3, 3], [1.1, 0.9], [2, 0.4], [3.4, 2.4]],\n            [[0, 0.3], [1, 2], [2.4, 1.4], [3, 0]]\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [-0.5, 4];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [-0.5, 3.5];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach(series => {\n            series.forEach(([x, y]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = 2.5;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2));\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniBubble extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'bubble';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"bubbleTooltip\");\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y, radius] triples\n        const data = [\n            [[0.1, 0.3, 5], [0.5, 0.4, 7], [0.2, 0.8, 7]], [[0.8, 0.7, 5], [0.7, 0.3, 9]]\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 1];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 1];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach(series => {\n            series.forEach(([x, y, radius]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = radius;\n                arc.fillOpacity = 0.7;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2));\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\n\nexport interface ICoordinate {\n    x: number;\n    y: number;\n}\n\nexport class MiniArea extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'area';\n    private readonly areas: _Scene.Path[];\n\n    static readonly data = [\n        [1, 3, 5],\n        [2, 6, 4],\n        [5, 3, 1]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], _themeTemplateParameters: ThemeTemplateParameters, _isCustomTheme: boolean, data: number[][] = MiniArea.data) {\n        super(container, \"groupedAreaTooltip\");\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 6];\n        yScale.range = [size - padding + 0.5, padding];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n        const bottomY = yScale.convert(0);\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y\n                };\n\n                points[last - i] = {\n                    x,\n                    y: bottomY\n                };\n            });\n        });\n\n        this.areas = pathData.reverse().map(points => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 1;\n            area.strokeOpacity = 0.75;\n            area.fillOpacity = 0.7;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? \"lineTo\" : \"moveTo\"](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { ICoordinate } from \"./miniArea\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nexport class MiniStackedArea extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'stackedArea';\n    static readonly data = [\n        [2, 3, 2],\n        [3, 6, 5],\n        [6, 2, 2]\n    ];\n\n    private readonly areas: _Scene.Path[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], _themeTemplateParameters: ThemeTemplateParameters, _isCustomTheme: boolean, data: number[][] = MiniStackedArea.data, tooltipName: ChartTranslationKey = \"stackedAreaTooltip\") {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 16];\n        yScale.range = [size - padding + 0.5, padding + 0.5];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n            let total = 0;\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(total + yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y\n                };\n\n                points[last - i] = {\n                    x,\n                    y: yScale.convert(total) // bottom y\n                };\n\n                total += yDatum;\n            });\n        });\n\n        this.areas = pathData.map(points => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? \"lineTo\" : \"moveTo\"](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { MiniStackedArea } from \"./miniStackedArea\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniNormalizedArea extends MiniStackedArea {\n\n    static chartType: ChartType = 'normalizedArea';\n    static readonly data = MiniStackedArea.data.map(stack => {\n        const sum = stack.reduce((p, c) => p + c, 0);\n        return stack.map(v => v / sum * 16);\n    });\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean, data: number[][] = MiniNormalizedArea.data) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, data, \"normalizedAreaTooltip\");\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniHistogram extends MiniChartWithAxes {\n    static chartType: ChartType = 'histogram';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"histogramTooltip\");\n\n        const padding = this.padding;\n        const size = this.size;\n\n        // approx normal curve\n        const data = [2, 5, 11, 13, 10, 6, 1];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, data.length];\n        xScale.range = [padding, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, data.reduce((a, b) => Math.max(a, b), 0)];\n        yScale.range = [size - padding, padding];\n\n        const bottom = yScale.convert(0);\n\n        this.bars = data.map((datum, i) => {\n            const top = yScale.convert(datum);\n            const left = xScale.convert(i);\n            const right = xScale.convert(i + 1);\n\n            const rect = new _Scene.Rect();\n            rect.x = left;\n            rect.y = top;\n            rect.width = right - left;\n            rect.height = bottom - top;\n            rect.strokeWidth = 1;\n            rect.strokeOpacity = 0.75;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors([fill]: string[], [stroke]: string[]) {\n        this.bars.forEach(bar => {\n            bar.fill = fill;\n            bar.stroke = stroke;\n        });\n    }\n}\n", "import { _ModuleSupport, _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { accumulateData } from '../miniChartHelpers';\n\nexport class MiniRadialColumn extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialColumn';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10, 2, 6, 5],\n        [4, 4, 3, 6, 4, 4],\n        [5, 4, 2, 9, 8, 9],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialColumnTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const { padding, size, data } = this;\n        const radius = (size - padding * 2) / 2;\n        const innerRadiusRatio = 0.4;\n        const axisInnerRadius = radius * innerRadiusRatio;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = data[0].map((_, index) => index);\n        angleScale.range = [0, 2 * Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n\n        const { processedData, max } = accumulateData(data);\n\n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [axisInnerRadius, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, seriesIndex) => {\n            const firstSeries = seriesIndex === 0;\n            const previousSeries = firstSeries ? undefined : processedData[seriesIndex - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesColumns = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const columnWidth = _Scene.getRadialColumnWidth(startAngle, endAngle, radius, 0.5, 0.5);\n\n                const column = new _Scene.RadialColumnShape();\n\n                column.scalingCenterX = center;\n                column.scalingCenterY = center;\n                column.columnWidth = columnWidth;\n                column.innerRadius = innerRadius;\n                column.outerRadius = outerRadius;\n                column.startAngle = startAngle;\n                column.endAngle = endAngle;\n                column.isBeveled = true;\n                column.axisInnerRadius = axisInnerRadius;\n                column.axisOuterRadius = radius;\n\n                column.stroke = undefined;\n                column.strokeWidth = 0;\n\n                return column;\n            });\n\n            seriesGroup.append(seriesColumns);\n\n            seriesGroup.translationX = center;\n            seriesGroup.translationY = center;\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { PostConstruct } from '@ag-grid-community/core';\nimport { MiniChart } from './miniChart';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartTranslationKey } from '../../../services/chartTranslationService';\n\nexport abstract class MiniChartWithPolarAxes extends MiniChart {\n    private readonly stroke = 'gray';\n    private gridLines: _Scene.Path[];\n    protected showRadiusAxisLine: boolean = true;\n    protected showAngleAxisLines: boolean = true;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    @PostConstruct\n    private addAxes() {\n        const size = this.size;\n        const padding = this.padding;\n        const combinedPadding = padding * 2;\n\n        const axisLineRadius = (size - combinedPadding) / 2;\n        const gridRadii = this.showAngleAxisLines ? [\n            axisLineRadius,\n            axisLineRadius * 0.8,\n            axisLineRadius * 0.6,\n            axisLineRadius * 0.4,\n        ] : [];\n\n        const radiusAxisLine = new _Scene.Line();\n        radiusAxisLine.x1 = size / 2;\n        radiusAxisLine.y1 = padding;\n        radiusAxisLine.x2 = size / 2;\n        radiusAxisLine.y2 = size - padding - axisLineRadius - gridRadii[gridRadii.length - 1];\n        radiusAxisLine.stroke = this.stroke;\n        radiusAxisLine.strokeOpacity = 0.5;\n        radiusAxisLine.fill = undefined;\n\n        radiusAxisLine.visible = this.showRadiusAxisLine;\n\n        const x = padding + axisLineRadius;\n        this.gridLines = gridRadii.map((radius, index) => {\n            const gridLine = new _Scene.Path();\n            gridLine.path.arc(x, x, radius, 0, 2 * Math.PI);\n            gridLine.strokeWidth = 1;\n            gridLine.stroke = this.stroke;\n            gridLine.strokeOpacity = index === 0 ? 0.5 : 0.2;\n            gridLine.fill = undefined;\n\n            return gridLine;\n        });\n\n        const root = this.root;\n\n        root.append(radiusAxisLine);\n        if (this.gridLines.length > 0) root.append(this.gridLines);\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { accumulateData } from '../miniChartHelpers';\n\nexport class MiniRadialBar extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialBar';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10],\n        [4, 4, 3],\n        [5, 4, 2],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialBarTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding) / 2;\n        const innerRadiusRatio = 0.4;\n        const innerRadius = radius * innerRadiusRatio;\n        const totalRadius = radius + innerRadius;\n\n        const radiusScale = new _Scene.BandScale();\n        radiusScale.domain = this.data[0].map((_, index) => index);\n        radiusScale.range = [radius, innerRadius];\n        radiusScale.paddingInner = 0.5;\n        radiusScale.paddingOuter = 0;\n        const bandwidth = radiusScale.bandwidth;\n\n        const { processedData, max } = accumulateData(this.data);\n\n        const angleScale = new _Scene.LinearScale();\n        angleScale.domain = [0, Math.ceil(max * 1.5)];\n        const start = (3 / 2) * Math.PI;\n        const end = start + 2 * Math.PI;\n        angleScale.range = [start, end];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i] ?? 0;\n\n                const innerRadius = totalRadius - radiusScale.convert(i);\n                const outerRadius = innerRadius + bandwidth;\n                const startAngle = angleScale.convert(previousDatum);\n                const endAngle = angleScale.convert(datum);\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { createPolarPaths } from '../miniChartHelpers';\n\nexport class MiniRadarLine extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarLine';\n    private readonly lines: _Scene.Path[];\n    private readonly markers: _Scene.Circle[];\n    private readonly markerSize: number = 4;\n\n    private data = [\n        [8, 7, 8, 7, 8, 8, 7, 8],\n        [6, 8, 5, 10, 6, 7, 4, 6],\n        [0, 3, 3, 5, 4, 4, 2, 0]\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n    ) {\n        super(container, 'radarLineTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = 0;\n\n        const { paths, markers } = createPolarPaths(this.root, this.data, this.size, radius, innerRadius, this.markerSize);\n\n        this.lines = paths;\n        this.markers = markers;\n    \n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            const n = this.data[i].length;\n            line.stroke = fills[i];\n            const startIdx = i * n;\n            const endIdx = startIdx + n;\n            const markers = this.markers.slice(startIdx, endIdx);\n            markers.forEach((marker) => {\n                marker.stroke = strokes[i];\n                marker.fill = fills[i];\n            });\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { createPolarPaths } from '../miniChartHelpers';\n\nexport class MiniRadarArea extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarArea';\n    private readonly areas: _Scene.Path[];\n\n    private data = [\n        [8, 10, 5, 7, 4, 1, 5, 8],\n        [1, 1, 2, 7, 7, 8, 10, 1],\n        [4, 5, 9, 9, 4, 2, 3, 4]\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n    ) {\n        super(container, 'radarAreaTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = radius - this.size * 0.3;\n\n        this.areas = createPolarPaths(this.root, this.data, this.size, radius, innerRadius).paths;\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { accumulateData } from '../miniChartHelpers';\n\nexport class MiniNightingale extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'nightingale';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 10, 9, 8, 7, 8],\n        [4, 6, 5, 4, 5, 5],\n        [3, 5, 4, 3, 4, 7],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'nightingaleTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = this.data[0].map((_, index) => index);\n        angleScale.range = [-Math.PI, Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n        \n        const { processedData, max } = accumulateData(this.data);\n        \n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [0, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeBar';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeBarTooltip');\n        const data = [3, 3.5, 3];\n\n        this.bars = this.createRangeBar(this.root, data, this.size, this.padding, 'vertical');\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n\n    createRangeBar(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): _Scene.Rect[] {\n        const barAlongX = direction === 'horizontal';\n        const scalePadding = 2 * padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.3;\n        xScale.paddingOuter = 0.3;\n\n        const lowRatio = 0.7;\n        const highRatio = 1.3;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * lowRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * highRatio,\n        ];\n        yScale.range = [scalePadding, size - scalePadding];\n\n        const width = xScale.bandwidth;\n\n        const bars = data.map((datum, i) => {\n            const [low, high] = [datum * lowRatio, datum * highRatio];\n\n            const x = xScale.convert(i);\n            const y = yScale.convert(low);\n            const height = yScale.convert(high) - y;\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        root.append(bars);\n\n        return bars;\n    }\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeArea';\n\n    private readonly lines: _Scene.Path[][];\n    private readonly areas: _Scene.Path[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeAreaTooltip');\n\n        // Create a set of repeating zigzag-shaped data series to use as the chart data\n        const period = 4;\n        const dataSeriesMidpoints = [\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 3, high: 5, period } }),\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 2.25, high: 4.25, period } }),\n            zigzag({ offset: 0.75 * period, length: period, pattern: { low: 2.5, high: 4.5, period } }),\n        ];\n        const dataSeriesWidth = 1.75;\n        const data = dataSeriesMidpoints.map((series) =>\n            series.map(([x, y]) => ({\n                x,\n                low: y - 0.5 * dataSeriesWidth,\n                high: y + 0.5 * dataSeriesWidth,\n            }))\n        );\n\n        const { lines, areas } = this.createRangeArea(this.root, data, this.size, this.padding);\n        this.lines = lines;\n        this.areas = areas;\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        // Swap the secondary and tertiary colors to match the designs\n        fills = swapArrayItems(fills, 1, 2);\n        strokes = swapArrayItems(strokes, 1, 2);\n\n        this.lines.forEach(([highLine, lowLine], i) => {\n            highLine.fill = undefined;\n            highLine.stroke = strokes[i];\n            lowLine.fill = undefined;\n            lowLine.stroke = strokes[i];\n        });\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n        });\n    }\n\n    createRangeArea(\n        root: _Scene.Group,\n        data: Array<Array<{ x: number; low: number; high: number }>>,\n        size: number,\n        padding: number\n    ): { lines: _Scene.Path[][]; areas: _Scene.Path[] } {\n        const xMin = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.min(acc, x), acc), Infinity);\n        const xMax = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.max(acc, x), acc), -Infinity);\n        const yMin = data.reduce((acc, series) => series.reduce((acc, { low }) => Math.min(acc, low), acc), Infinity);\n        const yMax = data.reduce((acc, series) => series.reduce((acc, { high }) => Math.max(acc, high), acc), -Infinity);\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [xMin, xMax];\n        xScale.range = [padding, size - padding];\n\n        const scalePadding = 2 * padding;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [yMin, yMax];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const lines: _Scene.Path[][] = [];\n        const areas: _Scene.Path[] = [];\n\n        const lowPoints = data.map((series) => {\n            const highLine = new _Scene.Path();\n            const lowLine = new _Scene.Path();\n            const area = new _Scene.Path();\n\n            lines.push([highLine, lowLine]);\n            areas.push(area);\n\n            highLine.strokeWidth = 0;\n            lowLine.strokeWidth = 0;\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            highLine.path.clear();\n            lowLine.path.clear();\n            area.path.clear();\n\n            return series.map((datum, datumIndex) => {\n                const { x, low, high } = datum;\n\n                const scaledX = xScale.convert(x);\n                const yLow = yScale.convert(low);\n                const yHigh = yScale.convert(high);\n\n                const command = datumIndex > 0 ? 'lineTo' : 'moveTo';\n\n                highLine.path[command](scaledX, yHigh);\n                lowLine.path[command](scaledX, yLow);\n                area.path[command](scaledX, yHigh);\n\n                return [scaledX, yLow];\n            });\n        });\n\n        lowPoints.forEach((seriesLowPoints, seriesIndex) => {\n            const n = seriesLowPoints.length - 1;\n            const area = areas[seriesIndex];\n            for (let datumIndex = n; datumIndex >= 0; datumIndex--) {\n                const [x, y] = seriesLowPoints[datumIndex];\n                area.path['lineTo'](x, y);\n            }\n        });\n\n        root.append(areas.concat(...lines));\n\n        return { lines, areas };\n    }\n}\n\ninterface ZigzagPatternOptions {\n    low: number;\n    high: number;\n    period: number;\n}\n\nfunction zigzag(options: {\n    offset: number;\n    length: number;\n    pattern: ZigzagPatternOptions;\n}): Array<[number, number]> {\n    const { offset, length, pattern } = options;\n\n    // Generate [x, y] points for all inflection points of the zigzag pattern that fall within the range\n    const points = getZigzagInflectionPoints(offset, length, pattern);\n\n    // Ensure the first and last points are clamped to the start and end of the range\n    const xMin = 0;\n    const xMax = length;\n    if (points.length === 0 || points[0][0] !== xMin) points.unshift(getZigzagPoint(xMin, offset, pattern));\n    if (points[points.length - 1][0] !== xMax) points.push(getZigzagPoint(xMax, offset, pattern));\n\n    return points;\n\n    function getZigzagInflectionPoints(\n        offset: number,\n        length: number,\n        pattern: ZigzagPatternOptions\n    ): [number, number][] {\n        const { period } = pattern;\n        const scaledOffset = offset / period;\n        const patternInflectionPoints = [0, 0.5];\n        const inflectionPoints = patternInflectionPoints\n            .map((x) => x - scaledOffset)\n            // Clamp offset points to the unit range [0, 1)\n            .map(getRemainderAbs)\n            .sort((a, b) => a - b);\n        const repeatedPoints = Array.from(\n            { length: Math.floor(inflectionPoints.length * (period / length)) },\n            (_, i) => inflectionPoints[i % inflectionPoints.length] + Math.floor(i / inflectionPoints.length)\n        );\n        return repeatedPoints.map((x) => x * period).map((x) => getZigzagPoint(x, offset, pattern));\n    }\n\n    function getZigzagPoint(x: number, offset: number, pattern: ZigzagPatternOptions): [number, number] {\n        return [x, getZigzagValue(offset + x, pattern)];\n    }\n\n    function getZigzagValue(x: number, pattern: ZigzagPatternOptions): number {\n        const { low, high, period } = pattern;\n        const scaledX = getRemainderAbs(x / period);\n        const y = scaledX > 0.5 ? 1 - 2 * (scaledX - 0.5) : 2 * scaledX;\n        return low + (high - low) * y;\n    }\n}\n\n\nfunction getRemainderAbs(value: number): number {\n    const remainder = value % 1;\n    return remainder < 0 ? remainder + 1 : remainder;\n}\n\nfunction swapArrayItems<T>(items: T[], leftIndex: number, rightIndex: number): T[] {\n    const results = [...items];\n    const temp = results[leftIndex];\n    results[leftIndex] = results[rightIndex];\n    results[rightIndex] = temp;\n    return results;\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniBoxPlot extends MiniChartWithAxes {\n    static chartType: ChartType = 'boxPlot';\n\n    private readonly boxPlotGroups: _Scene.Group[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'boxPlotTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n\n        const data = [11, 11.5, 10.5];\n\n        const maxRatio = 1.2;\n        const q3Ratio = 1.1;\n        const q1Ratio = 0.9;\n        const minRatio = 0.8;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * minRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * maxRatio,\n        ];\n        yScale.range = [size - 1.5 * padding, padding];\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.4;\n        xScale.paddingOuter = 0.2;\n\n        const bandwidth = Math.round(xScale.bandwidth);\n        const halfBandWidth = Math.round(xScale.bandwidth / 2);\n\n        this.boxPlotGroups = data.map((datum, i) => {\n            let [minValue, q1Value, q3Value, maxValue] = [\n                datum * minRatio,\n                datum * q1Ratio,\n                datum * q3Ratio,\n                datum * maxRatio,\n            ];\n\n            const top = Math.round(yScale.convert(q3Value));\n            const left = Math.round(xScale.convert(i));\n            const right = Math.round(left + bandwidth);\n            const bottom = Math.round(yScale.convert(q1Value));\n            const min = Math.round(yScale.convert(minValue));\n            const mid = Math.round(yScale.convert(datum));\n            const max = Math.round(yScale.convert(maxValue));\n            const whiskerX = left + halfBandWidth;\n\n            const boxPlotGroup = new _Scene.Group();\n\n            const box = new _Scene.Rect();\n            const median = new _Scene.Line();\n            const topWhisker = new _Scene.Line();\n            const bottomWhisker = new _Scene.Line();\n            const topCap = new _Scene.Line();\n            const bottomCap = new _Scene.Line();\n\n            box.x = left;\n            box.y = top;\n            box.width = bandwidth;\n            box.height = bottom - top;\n            box.strokeWidth = 1;\n            box.strokeOpacity = 0.75;\n            box.crisp = true;\n\n            this.setLineProperties(median, left, right, mid, mid);\n            this.setLineProperties(topWhisker, whiskerX, whiskerX, max, top);\n            this.setLineProperties(bottomWhisker, whiskerX, whiskerX, min, bottom);\n            this.setLineProperties(topCap, left, right, max, max);\n            this.setLineProperties(bottomCap, left, right, min, min);\n\n            boxPlotGroup.append([box, median, topWhisker, bottomWhisker, topCap, bottomCap]);\n            return boxPlotGroup;\n        });\n\n        this.updateColors(fills, strokes, themeTemplateParameters, isCustomTheme);\n        this.root.append(this.boxPlotGroups);\n    }\n\n    updateColors(\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters?: ThemeTemplateParameters,\n        isCustomTheme?: boolean\n    ) {\n        const themeBackgroundColor = themeTemplateParameters?.properties.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(themeBackgroundColor) ? themeBackgroundColor[0] : themeBackgroundColor) ?? 'white';\n\n        this.boxPlotGroups.forEach((group, i) => {\n            group.children?.forEach((node: _Scene.Rect | _Scene.Line) => {\n                const fill = fills[i % fills.length];\n                node.fill = isCustomTheme ? fill : _Util.Color.interpolate(fill, backgroundFill)(0.7);\n                node.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n\n    setLineProperties(line: _Scene.Line, x1: number, x2: number, y1: number, y2: number) {\n        line.x1 = x1;\n        line.x2 = x2;\n        line.y1 = y1;\n        line.y2 = y2;\n        line.strokeOpacity = 0.75;\n    }\n}\n", "import { _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { MiniChart } from '../miniChart';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniTreemap extends MiniChart {\n    static chartType: ChartType = 'treemap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'treemapTooltip');\n\n        const { size, padding } = this;\n\n        const data: number[][] = [\n            [1, 1],\n            [3, 2, 1],\n        ];\n        \n        const treeSize = data.length;\n        const treePadding = treeSize % 2 === 0 ? 0.3 : 0.2;\n        const range = [padding, size - padding];\n\n        const columns = data.length;\n        const columnParts = (columns * (columns + 1)) / 2;\n        const columnPadding = treePadding / (columns - 1);\n\n        const availableRange = range[1] - range[0];\n        const availableWidth = availableRange - treePadding;\n\n        let previousX = range[0];\n        this.rects = data.reduce((rects, d, columnIndex) => {\n            rects ??= [];\n\n            const widthRatio = (columns - columnIndex) / columnParts;\n            const width = availableWidth * widthRatio;\n\n            const rows = d.length;\n            const rowParts = d.reduce((parts, ratio) => (parts += ratio), 0);\n            const rowPadding = treePadding / (rows - 1 || 1);\n            const availableHeight = rows > 1 ? availableRange - treePadding : availableRange;\n\n            let previousY = range[0];\n            const xRects = d.map((ratio) => {\n                const rect = new _Scene.Rect();\n\n                const height = (availableHeight * ratio) / rowParts;\n\n                rect.x = previousX;\n                rect.y = previousY;\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0.75;\n                rect.crisp = true;\n\n                previousY += height + rowPadding;\n                return rect;\n            });\n\n            previousX += width + columnPadding;\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { properties } = themeTemplate ?? {};\n        const defaultBackgroundColor = properties?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        this.rects.forEach((rect, i) => {\n            rect.fill = fills[i % strokes.length];\n            rect.stroke = isCustomTheme ? strokes[i % strokes.length] : backgroundFill;\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\n\nexport class MiniSunburst extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'sunburst';\n    private readonly series: _Scene.Group[];\n\n    // Hierarchical data using multidimensional array\n    private data = [\n        [[], []],\n        [[], []],\n        [[], []],\n    ];\n\n    // Rotate the chart by the given angle (-90 degrees)\n    private angleOffset = -Math.PI / 2;\n\n    private innerRadiusRatio = 0;\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'sunburstTooltip');\n\n        this.showRadiusAxisLine = false;\n        this.showAngleAxisLines = false;\n        \n        const { data, size, padding, angleOffset, innerRadiusRatio } = this;\n\n        const radius = (size - padding * 2) / 2;\n\n        const angleRange = [angleOffset + 0, angleOffset + 2 * Math.PI];\n        const angleExtent = Math.abs(angleRange[1] - angleRange[0]);\n\n        const radiusRange = [radius * innerRadiusRatio, radius];\n        const radiusExtent = Math.abs(radiusRange[1] - radiusRange[0]);\n        \n        let maxDepth = 0;\n        const findMaxDepth = (data: any[], parentDepth: number) => {\n            data.forEach((child) => {\n                const depth = parentDepth + 1;\n                maxDepth = Math.max(maxDepth, depth);\n                findMaxDepth(child, depth);\n            });\n        };\n\n        findMaxDepth(data, 0);\n\n        const radiusRatio = radiusExtent / maxDepth;\n        const center = this.size / 2;\n        const startAngle = angleRange[0];\n        \n        this.series = [];\n\n        const createSectors = (\n            data: any[],\n            depth: number,\n            startAngle: number,\n            availableAngle: number,\n            group?: _Scene.Group\n        ) => {\n            const isArray = Array.isArray(data);\n\n            if (!isArray) {\n                return;\n            }\n\n            const childDepth = depth + 1;\n\n            let previousAngle = startAngle;\n\n            data.forEach((child, childIndex, children) => {\n                let childGroup = group;\n                if (!childGroup) {\n                    childGroup = new _Scene.Group();\n                    this.series.push(childGroup);\n                }\n\n                const innerRadius = radiusRange[0] + depth * radiusRatio;\n                const outerRadius = radiusRange[0] + childDepth * radiusRatio;\n\n                const angleRatio = 1 / children.length;\n                const start = previousAngle;\n                const end = start + availableAngle * angleRatio;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = start;\n                sector.endAngle = end;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                sector.inset = 0.75;\n\n                previousAngle = end;\n\n                childGroup.append(sector);\n\n                createSectors(child, childDepth, start, Math.abs(end - start), childGroup);\n            });\n        };\n\n        createSectors(data, 0, startAngle, angleExtent);\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { MiniChart } from '../miniChart';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniHeatmap extends MiniChart {\n    static chartType: ChartType = 'heatmap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'heatmapTooltip');\n\n        const { size, padding } = this;\n\n        const heatmapSize = 3;\n\n        const data = Array.from({ length: heatmapSize }, (_, __) =>\n            Array.from({ length: heatmapSize }, (_, yIndex) => yIndex)\n        );\n        const domain = data.map((_, index) => index);\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = domain;\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.01;\n        xScale.paddingOuter = 0.1;\n\n        const yScale = new _Scene.BandScale();\n        yScale.domain = domain;\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.01;\n        yScale.paddingOuter = 0.1;\n\n        const width = xScale.bandwidth ?? 0;\n        const height = yScale.bandwidth ?? 0;\n\n        this.rects = data.reduce((rects, d: [], index) => {\n            rects ??= [];\n            const xRects = d.map((_, yIndex) => {\n                const rect = new _Scene.Rect();\n                rect.x = xScale.convert(index);\n                rect.y = yScale.convert(yIndex);\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            });\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { properties } = themeTemplate ?? {};\n        const defaultColorRange = properties?.get(_Theme.DEFAULT_DIVERGING_SERIES_COLOUR_RANGE);\n        const defaultBackgroundColor = properties?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        const colorRange = isCustomTheme ? [fills[0], fills[1]] : defaultColorRange;\n        const stroke = isCustomTheme ? strokes[0] : backgroundFill;\n\n        this.rects.forEach((rect, i) => {\n            rect.fill = _Util.Color.interpolate(colorRange[0], colorRange[1])(i * 0.2);\n            rect.stroke = stroke;\n        });\n    }\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme } from 'ag-charts-community';\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniWaterfall extends MiniChartWithAxes {\n    static chartType: ChartType = 'waterfall';\n\n    private readonly bars: _Scene.Rect[];\n\n    private data = [4, 3, -3, 6, -3];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplate: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, 'waterfallTooltip');\n\n        this.bars = this.createWaterfall(this.root, this.data, this.size, this.padding, 'vertical').bars;\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { data } = this;\n        const { properties } = themeTemplate ?? {};\n        const palettePositive = {\n            fill: fills[0],\n            stroke: strokes[0],\n        };\n        const paletteNegative = {\n            fill: fills[1],\n            stroke: strokes[1],\n        }\n        const positive = isCustomTheme ? palettePositive : properties?.get(_Theme.DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS) ?? palettePositive;\n        const negative = isCustomTheme ? paletteNegative : properties?.get(_Theme.DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS) ?? paletteNegative;\n        this.bars.forEach((bar, i) => {\n            const isPositive = data[i] >= 0;\n            bar.fill = isPositive ? positive.fill : negative.fill;\n            bar.stroke = isPositive ? positive.stroke : negative.stroke;\n        });\n    }\n\n    createWaterfall(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): { bars: _Scene.Rect[] } {\n        const scalePadding = 2 * padding;\n\n        const { processedData, min, max } = accumulateData(data.map((d) => [d]));\n        const flatData = processedData.reduce((flat, d) => flat.concat(d), []);\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [Math.min(min, 0), max];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.2;\n        xScale.paddingOuter = 0.3;\n\n        const width = xScale.bandwidth;\n\n        const connectorLine = new _Scene.Path();\n        connectorLine.stroke = '#575757';\n        connectorLine.strokeWidth = 0;\n        const pixelAlignmentOffset = (Math.floor(connectorLine.strokeWidth) % 2) / 2;\n\n        const connectorPath = connectorLine.path;\n        connectorPath.clear();\n\n        const barAlongX = direction === 'horizontal';\n\n        const bars = flatData.map((datum, i) => {\n            const previousDatum = i > 0 ? flatData[i - 1] : 0;\n            const rawValue = data[i];\n            const isPositive = rawValue > 0;\n\n            const currY = Math.round(yScale.convert(datum));\n            const trailY = Math.round(yScale.convert(previousDatum));\n            const y = (isPositive ? currY : trailY) - pixelAlignmentOffset;\n            const bottomY = (isPositive ? trailY : currY) + pixelAlignmentOffset;\n            const height = Math.abs(bottomY - y);\n\n            const x = xScale.convert(i);\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            const moveTo = currY + pixelAlignmentOffset;\n            const lineTo = trailY + pixelAlignmentOffset;\n\n            if (i > 0) {\n                const lineToX = barAlongX ? lineTo : rect.x;\n                const lineToY = barAlongX ? rect.y : lineTo;\n                connectorPath.lineTo(lineToX, lineToY);\n            }\n            const moveToX = barAlongX ? moveTo : rect.x;\n            const moveToY = barAlongX ? rect.y : moveTo;\n            connectorPath.moveTo(moveToX, moveToY);\n\n            return rect;\n        });\n\n        root.append([connectorLine, ...bars]);\n\n        return { bars };\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams, createLinePaths } from \"../miniChartHelpers\";\n\nexport class MiniColumnLineCombo extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'columnLineCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [\n        [5, 4, 6, 5, 4]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"columnLineComboTooltip\");\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i+2];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams } from \"../miniChartHelpers\";\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\nexport class MiniAreaColumnCombo extends MiniChartWithAxes {\n    static chartType: ChartType = 'areaColumnCombo';\n\n    private columns: _Scene.Rect[];\n    private areas: _Scene.Path[];\n\n    private columnData = [3, 4.5];\n\n    private areaData = [\n        [5, 4, 6, 5, 4],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"areaColumnComboTooltip\");\n\n        const { root, columnData, areaData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 6],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        // scale for area series\n        const xScale = new _Scene.BandScale<number>();\n        xScale.range = [padding, size - padding];\n        xScale.domain = [0, 1, 2, 3, 4];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.range = [size - padding, padding];\n        yScale.domain = [0, 6];\n\n        const pathData: Coordinate[][] = [];\n        const yZero = yScale.convert(0);\n        const firstX = xScale.convert(0);\n\n        areaData.forEach((series, i) => {\n            const points = pathData[i] || (pathData[i] = []);\n            series.forEach((data, j) => {\n                const yDatum = data;\n                const xDatum = j;\n\n                const x = xScale.convert(xDatum);\n                const y = yScale.convert(yDatum);\n\n                points[j] = { x, y };\n            });\n\n            const lastX = xScale.convert(series.length - 1);\n\n            pathData[i].push({\n                x: lastX,\n                y: yZero\n            }, {\n                x: firstX,\n                y: yZero\n            });\n        });\n\n        this.areas = pathData.map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            const path = area.path;\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n\n            return area;\n        });\n\n        root.append(this.areas);\n        root.append(([]as _Scene.Rect[]).concat.apply([], this.columns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i+1];\n            bar.stroke = strokes[i+1];\n        });\n    }\n}\n", "import { _Scene } from \"ag-charts-community\";\nimport { ChartType } from '@ag-grid-community/core';\nimport { createColumnRects, CreateColumnRectsParams, createLinePaths } from '../miniChartHelpers';\nimport { MiniChart } from '../miniChart';\n\nexport class MiniCustomCombo extends MiniChart {\n    static chartType: ChartType = 'customCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'customComboTooltip');\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        const axisStroke = 'grey';\n        const axisOvershoot = 3;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + axisOvershoot;\n        leftAxis.stroke = axisStroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = axisStroke;\n\n        const penIcon = new _Scene.Path();\n        this.buildPenIconPath(penIcon);\n        penIcon.fill = 'whitesmoke';\n        penIcon.stroke = 'darkslategrey';\n        penIcon.strokeWidth = 1;\n\n        root.append([bottomAxis, leftAxis, penIcon]);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n\n    buildPenIconPath(penIcon: _Scene.Path) {\n        const { path } = penIcon;\n        path.moveTo(25.76, 43.46);\n        path.lineTo(31.27, 48.53);\n        path.moveTo(49.86, 22);\n        path.lineTo(49.86, 22);\n        path.cubicCurveTo(49.01994659053345, 21.317514933510974, 47.89593834348529, 21.09645997825817, 46.86, 21.41);\n        path.lineTo(46.86, 21.41);\n        path.cubicCurveTo(45.55460035985361, 21.77260167850787, 44.38777081121966, 22.517979360321792, 43.51, 23.55);\n        path.lineTo(25.51, 43.8);\n        path.lineTo(25.43, 43.89);\n        path.lineTo(23.01, 51.89);\n        path.lineTo(22.83, 52.46);\n        path.lineTo(31.02, 48.86);\n        path.lineTo(49.02, 28.52);\n        path.lineTo(49.02, 28.52);\n        path.cubicCurveTo(49.940716461596224, 27.521914221246085, 50.54302631059587, 26.2720342455763, 50.75, 24.93);\n        path.lineTo(50.75, 24.93);\n        path.cubicCurveTo(50.95363374988308, 23.866379846512814, 50.62080640232334, 22.77066734274871, 49.86, 22.0);\n        path.closePath();\n        path.moveTo(41.76, 25.5);\n        path.lineTo(47.34, 30.5);\n        path.moveTo(40.74, 26.65);\n        path.lineTo(46.25, 31.71);\n    }\n}\n", "import {\n    Autowired,\n    ChartMenuOptions,\n    Component,\n    RefSelector,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../services/chartTranslationService\";\n\ninterface ChartToolbarButton {\n    buttonName: ChartMenuOptions;\n    iconName: string;\n    callback: (eventSource: HTMLElement) => void;\n}\n\nexport class ChartToolbar extends Component {\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n    @RefSelector(\"eMenu\") private eMenu: HTMLButtonElement;\n\n    private buttonListenersDestroyFuncs: ((() => null) | undefined)[] = [];\n\n    constructor() {\n        super(/* html */`<div class=\"ag-chart-menu\" ref=\"eMenu\"></div>`);\n    }\n\n    public updateParams(params: {\n        buttons: ChartToolbarButton[]\n    }): void {\n        const { buttons } = params;\n        this.createButtons(buttons);\n    }\n\n    private createButtons(buttons: ChartToolbarButton[]): void {\n        this.buttonListenersDestroyFuncs.forEach(func => func?.());\n        this.buttonListenersDestroyFuncs = [];\n\n        const menuEl = this.eMenu;\n        _.clearElement(menuEl);\n\n        buttons.forEach(buttonConfig => {\n            const { buttonName, iconName, callback } = buttonConfig;\n            const buttonEl = this.createButton(iconName);\n\n            const tooltipTitle = this.chartTranslationService.translate(buttonName + 'ToolbarTooltip' as ChartTranslationKey);\n            if (tooltipTitle && buttonEl instanceof HTMLElement) {\n                buttonEl.title = tooltipTitle;\n            }\n\n            this.buttonListenersDestroyFuncs.push(\n                this.addManagedListener(buttonEl, 'click', (event: MouseEvent) => callback(event.target as HTMLElement))\n            );\n\n            menuEl.appendChild(buttonEl);\n        });\n    }\n\n    private createButton(iconName: string): Element {\n        let buttonEl = _.createIconNoSpan(\n            iconName,\n            this.gridOptionsService,\n            undefined,\n            true\n        )!;\n        buttonEl.classList.add('ag-chart-menu-icon');\n\n        if (!this.chartMenuService.isLegacyFormat()) {\n            buttonEl = this.wrapButton(buttonEl);\n        }\n\n        return buttonEl;\n    }\n\n    private wrapButton(buttonEl: Element): HTMLElement {\n        const wrapperEl = this.gridOptionsService.getDocument().createElement('button');\n        wrapperEl.appendChild(buttonEl);\n        wrapperEl.classList.add('ag-chart-menu-toolbar-button');\n        return wrapperEl;\n    }\n\n    protected destroy(): void {\n        this.buttonListenersDestroyFuncs = [];\n        super.destroy();\n    }\n}", "import { Autowired, Component, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartMenu } from \"../menu/chartMenu\";\nimport { ChartTranslationService } from \"../services/chartTranslationService\";\nimport { ChartController } from \"../chartController\";\nimport { ChartOptionsProxy, ChartOptionsService } from '../services/chartOptionsService';\nimport { ChartMenuContext } from \"../menu/chartMenuContext\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\n\ninterface BBox { x: number; y: number; width: number; height: number }\n\nexport class TitleEdit extends Component {\n    private static TEMPLATE = /* html */\n        `<textarea\n             class=\"ag-chart-title-edit\"\n             style=\"padding:0; border:none; border-radius: 0; min-height: 0; text-align: center; resize: none;\" />\n        `;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n\n    private destroyableChartListeners: (() => void)[] = [];\n    private chartController: ChartController;\n    private chartOptionsService: ChartOptionsService;\n    private chartMenuUtils: ChartOptionsProxy;\n    private editing: boolean = false;\n\n    constructor(private readonly chartMenu: ChartMenu) {\n        super(TitleEdit.TEMPLATE);\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.addManagedListener(this.getGui(), 'keydown', (e: KeyboardEvent) => {\n            if (this.editing && e.key === 'Enter' && !e.shiftKey) {\n                this.handleEndEditing();\n                e.preventDefault();\n            }\n        });\n        this.addManagedListener(this.getGui(), 'input', () => {\n            if (this.editing) {\n                this.updateHeight();\n            }\n        });\n        this.addManagedListener(this.getGui(), 'blur', () => this.endEditing());\n    }\n\n    /* should be called when the containing component changes to a new chart proxy */\n    public refreshTitle(\n        chartMenuContext: ChartMenuContext\n    ) {\n        this.chartController = chartMenuContext.chartController;\n        this.chartOptionsService = chartMenuContext.chartOptionsService;\n        this.chartMenuUtils = chartMenuContext.chartMenuParamsFactory.getChartOptions();\n\n        for (const destroyFn of this.destroyableChartListeners) {\n            destroyFn();\n        }\n        this.destroyableChartListeners = [];\n        \n        const chartProxy = this.chartController.getChartProxy();\n        const chart = chartProxy.getChart();\n        const canvas = chart.scene.canvas.element;\n\n        const destroyDbleClickListener = this.addManagedListener(canvas, 'dblclick', event => {\n            const { title } = chart;\n\n            if (title && title.node.containsPoint(event.offsetX, event.offsetY)) {\n                const bbox = title.node.computeBBox()!;\n                const xy = title.node.inverseTransformPoint(bbox.x, bbox.y);\n\n                this.startEditing({ ...bbox, ...xy }, canvas.width);\n            }\n        });\n\n        let wasInTitle = false;\n        const destroyMouseMoveListener = this.addManagedListener(canvas, 'mousemove', event => {\n            const { title } = chart;\n\n            const inTitle = !!(title && title.enabled && title.node.containsPoint(event.offsetX, event.offsetY));\n            if (wasInTitle !== inTitle) {\n                canvas.style.cursor = inTitle ? 'pointer' : '';\n            }\n\n            wasInTitle = inTitle;\n        });\n\n        this.destroyableChartListeners = [\n            destroyDbleClickListener!,\n            destroyMouseMoveListener!\n        ];\n    }\n\n    private startEditing(titleBBox: BBox, canvasWidth: number): void {\n        if (this.chartMenuService.isLegacyFormat() && this.chartMenu && this.chartMenu.isVisible()) {\n            // currently, we ignore requests to edit the chart title while the chart menu is showing\n            // because the click to edit the chart will also close the chart menu, making the position\n            // of the title change.\n            return;\n        }\n\n        if (this.editing) {\n            return;\n        }\n        this.editing = true;\n\n        const minimumTargetInputWidth: number = 300;\n        const inputWidth = Math.max(Math.min(titleBBox.width + 20, canvasWidth), minimumTargetInputWidth);\n\n        const element = this.getGui() as HTMLTextAreaElement;\n\n        element.classList.add('currently-editing');\n        const inputStyle = element.style;\n\n        // match style of input to title that we're editing\n        inputStyle.fontFamily = this.chartMenuUtils.getValue('title.fontFamily');\n        inputStyle.fontWeight = this.chartMenuUtils.getValue('title.fontWeight');\n        inputStyle.fontStyle = this.chartMenuUtils.getValue('title.fontStyle');\n        inputStyle.fontSize = this.chartMenuUtils.getValue('title.fontSize') + 'px';\n        inputStyle.color = this.chartMenuUtils.getValue('title.color');\n\n        // populate the input with the title, unless the title is the placeholder:\n        const oldTitle = this.chartMenuUtils.getValue('title.text');\n        const isTitlePlaceholder = oldTitle === this.chartTranslationService.translate('titlePlaceholder');\n        element.value = isTitlePlaceholder ? '' : oldTitle;\n\n        const oldTitleLines = oldTitle.split(/\\r?\\n/g).length;\n\n        inputStyle.left = Math.round(titleBBox.x + titleBBox.width / 2 - inputWidth / 2 - 1) + 'px';\n        inputStyle.top = Math.round(titleBBox.y + titleBBox.height / 2 - (oldTitleLines * this.getLineHeight()) / 2 - 2) + 'px';\n        inputStyle.width = Math.round(inputWidth) + 'px';\n        inputStyle.lineHeight = this.getLineHeight() + 'px';\n        this.updateHeight();\n\n        element.focus();\n    }\n\n    private updateHeight() {\n        const element = this.getGui() as HTMLTextAreaElement;\n\n        // The element should cover the title and provide enough space for the new one.\n        const oldTitleLines = this.chartMenuUtils.getValue('title.text').split(/\\r?\\n/g).length;\n        const currentTitleLines = element.value.split(/\\r?\\n/g).length;\n\n        element.style.height = (Math.round(Math.max(oldTitleLines, currentTitleLines) * this.getLineHeight()) + 4) + 'px';\n    }\n\n    private getLineHeight() : number {\n        const fixedLineHeight = this.chartMenuUtils.getValue('title.lineHeight');\n        if (fixedLineHeight) {\n            return parseInt(fixedLineHeight);\n        }\n        return Math.round(parseInt(this.chartMenuUtils.getValue('title.fontSize')) * 1.2);\n    }\n\n    private handleEndEditing() {\n        // special handling to avoid flicker caused by delay when swapping old and new titles\n\n        // 1 - store current title color\n        const titleColor = this.chartMenuUtils.getValue('title.color');\n\n        // 2 - hide title by making it transparent\n        const transparentColor = 'rgba(0, 0, 0, 0)';\n        this.chartMenuUtils.setValue('title.color', transparentColor);\n\n        // 3 - trigger 'end editing' - this will update the chart with the new title\n        this.chartOptionsService.awaitChartOptionUpdate(() => this.endEditing());\n\n        // 4 - restore title color to its original value\n        this.chartOptionsService.awaitChartOptionUpdate(() => {\n            this.chartMenuUtils.setValue('title.color', titleColor)\n        });\n    }\n\n    private endEditing() {\n        if (!this.editing) {\n            return;\n        }\n        this.editing = false;\n\n        const value = (this.getGui() as HTMLTextAreaElement).value;\n        if (value && value.trim() !== '') {\n            this.chartMenuUtils.setValue('title.text', value);\n            this.chartMenuUtils.setValue('title.enabled', true);\n        } else {\n            this.chartMenuUtils.setValue('title.text', '');\n            this.chartMenuUtils.setValue('title.enabled', false);\n        }\n        this.getGui().classList.remove('currently-editing');\n\n        // await chart updates so `chartTitleEdit` event consumers can read the new state correctly\n        this.chartOptionsService.awaitChartOptionUpdate(() => {\n            this.eventService.dispatchEvent({type: 'chartTitleEdit'});\n        });\n    }\n}\n", "import { _ } from \"@ag-grid-community/core\";\nimport { AgBarSeriesOptions, AgCartesianAxisOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\nimport { deepMerge } from \"../../utils/object\";\nimport { hexToRGBA } from \"../../utils/color\";\nimport { isHorizontal, isStacked } from \"../../utils/seriesTypeMapper\";\n\nexport class BarChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: isHorizontal(this.chartType) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isHorizontal(this.chartType) ? 'bottom' : 'left',\n            },\n        ];\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params: any) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams): AgBarSeriesOptions[] {\n        const [category] = params.categories;\n        const series: AgBarSeriesOptions[] = params.fields.map(f => (\n            {\n                type: this.standaloneChartType,\n                direction: isHorizontal(this.chartType) ? 'horizontal' : 'vertical',\n                stacked: this.crossFiltering || isStacked(this.chartType),\n                normalizedTo: this.isNormalised() ? 100 : undefined,\n                xKey: category.id,\n                xName: category.name,\n                yKey: f.colId,\n                yName: f.displayName\n            } as AgBarSeriesOptions\n        ));\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private extractCrossFilterSeries(series: AgBarSeriesOptions[]): AgBarSeriesOptions[] {\n        const palette = this.getChartPalette();\n\n        const updatePrimarySeries = (seriesOptions: AgBarSeriesOptions, index: number) => {\n            return {\n                ...seriesOptions,\n                highlightStyle: { item: { fill: undefined } },\n                fill: palette?.fills[index],\n                stroke: palette?.strokes[index],\n                listeners: {\n                    nodeClick: this.crossFilterCallback\n                }\n            }\n        }\n\n        const updateFilteredOutSeries = (seriesOptions: AgBarSeriesOptions): AgBarSeriesOptions => {\n            const yKey = seriesOptions.yKey + '-filtered-out';\n            return {\n                ...deepMerge({}, seriesOptions),\n                yKey,\n                fill: hexToRGBA(seriesOptions.fill!, '0.3'),\n                stroke: hexToRGBA(seriesOptions.stroke!, '0.3'),\n                showInLegend: false,\n            }\n        }\n\n        const allSeries: AgBarSeriesOptions[] = [];\n        for (let i = 0; i < series.length; i++) {\n            // update primary series\n            const primarySeries = updatePrimarySeries(series[i], i);\n            allSeries.push(primarySeries);\n\n            // add 'filtered-out' series\n            allSeries.push(updateFilteredOutSeries(primarySeries));\n        }\n        return allSeries;\n    }\n\n    private isNormalised() {\n        const normalisedCharts = ['normalizedColumn', 'normalizedBar'];\n        return !this.crossFiltering && _.includes(normalisedCharts, this.chartType);\n    }\n}\n", "import { _, AgChartTheme as GridAgChartTheme, ChartType, SeriesChartType } from \"@ag-grid-community/core\";\nimport {\n    _Theme,\n    _ModuleSupport,\n    AgCharts,\n    AgChartInstance,\n    AgChartOptions,\n    AgChartTheme,\n    AgChartThemeOverrides,\n    AgChartThemePalette\n} from \"ag-charts-community\";\n\nimport { CrossFilteringContext } from \"../../chartService\";\nimport { ChartSeriesType, getSeriesType } from \"../utils/seriesTypeMapper\";\nimport { deproxy } from \"../utils/integration\";\nimport { applyThemeOverrides, createAgChartTheme, lookupCustomChartTheme } from './chartTheme';\nimport { get } from \"../utils/object\";\n\nexport interface ChartProxyParams {\n    chartInstance?: AgChartInstance;\n    chartType: ChartType;\n    customChartThemes?: { [name: string]: AgChartTheme | GridAgChartTheme };\n    parentElement: HTMLElement;\n    grouping: boolean;\n    getChartThemeName: () => string;\n    getChartThemes: () => string[];\n    getGridOptionsChartThemeOverrides: () => AgChartThemeOverrides | undefined;\n    getExtraPaddingDirections: () => ExtraPaddingDirection[];\n    apiChartThemeOverrides?: AgChartThemeOverrides;\n    crossFiltering: boolean;\n    crossFilterCallback: (event: any, reset?: boolean) => void;\n    chartThemeToRestore?: string;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes: SeriesChartType[];\n    translate: (toTranslate: string, defaultText?: string) => string;\n}\n\nexport type ExtraPaddingDirection = 'top' | 'right' | 'bottom' | 'left';\n\nexport interface FieldDefinition {\n    colId: string;\n    displayName: string | null;\n}\n\nexport interface UpdateParams {\n    data: any[];\n    grouping: boolean;\n    categories: {\n        id: string;\n        name: string;\n        chartDataType?: string\n    }[];\n    fields: FieldDefinition[];\n    chartId?: string;\n    getCrossFilteringContext: () => CrossFilteringContext,\n    seriesChartTypes: SeriesChartType[];\n    updatedOverrides?: AgChartThemeOverrides;\n}\n\nexport abstract class ChartProxy {\n    private readonly isEnterpriseCharts: boolean;\n    protected readonly chartType: ChartType;\n    protected readonly standaloneChartType: ChartSeriesType;\n\n    protected readonly chart: AgChartInstance;\n    protected readonly crossFiltering: boolean;\n    protected readonly crossFilterCallback: (event: any, reset?: boolean) => void;\n\n    protected clearThemeOverrides = false;\n    \n    protected constructor(protected readonly chartProxyParams: ChartProxyParams) {\n        this.isEnterpriseCharts = _ModuleSupport.enterpriseModule.isEnterprise;\n        this.chart = chartProxyParams.chartInstance!;\n        this.chartType = chartProxyParams.chartType;\n        this.crossFiltering = chartProxyParams.crossFiltering;\n        this.crossFilterCallback = chartProxyParams.crossFilterCallback;\n        this.standaloneChartType = getSeriesType(this.chartType);\n\n        if (this.chart == null) {\n            this.chart = AgCharts.create(this.getCommonChartOptions());\n        } else {\n            // On chart change, reset formatting panel changes.\n            this.clearThemeOverrides = true;\n        }\n    }\n\n    public abstract crossFilteringReset(): void;\n\n    public abstract update(params: UpdateParams): void;\n\n    public updateThemeOverrides(themeOverrides: AgChartThemeOverrides): void {\n        AgCharts.updateDelta(this.getChartRef(), { theme: { overrides: themeOverrides }});\n    }\n\n    public getChart() {\n        return deproxy(this.chart);\n    }\n\n    public getChartRef() {\n        return this.chart;\n    }\n\n    public downloadChart(dimensions?: { width: number; height: number }, fileName?: string, fileFormat?: string) {\n        const { chart } = this;\n        const rawChart = deproxy(chart);\n        const imageFileName = fileName || (rawChart.title ? rawChart.title.text : 'chart');\n        const { width, height } = dimensions || {};\n\n        AgCharts.download(chart, { width, height, fileName: imageFileName, fileFormat });\n    }\n\n    public getChartImageDataURL(type?: string) {\n        return this.getChart().scene.getDataURL(type);\n    }\n\n    private getChartOptions(): AgChartOptions {\n        return this.chart.getOptions();\n    }\n\n    public getChartThemeOverrides(): AgChartThemeOverrides { \n        const chartOptionsTheme = this.getChartOptions().theme as AgChartTheme;\n        return chartOptionsTheme.overrides ?? {};\n    }\n\n    public getChartPalette(): AgChartThemePalette | undefined {\n        return _Theme.getChartTheme(this.getChartOptions().theme).palette;\n    }\n\n    public setPaired(paired: boolean) {\n        // Special handling to make scatter charts operate in paired mode by default, where \n        // columns alternate between being X and Y (and size for bubble). In standard mode,\n        // the first column is used for X and every other column is treated as Y\n        // (or alternates between Y and size for bubble)\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        AgCharts.updateDelta(this.chart, { theme: { overrides: { [seriesType]: { paired }}}});\n    }\n\n    public isPaired(): boolean {\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        return get(this.getChartThemeOverrides(), `${seriesType}.paired`, true);\n    }\n\n    public lookupCustomChartTheme(themeName: string) {\n        return lookupCustomChartTheme(this.chartProxyParams, themeName);\n    }\n\n    protected transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        if (categoryAxis) {\n            // replace the values for the selected category with a complex object to allow for duplicated categories\n            return data.map((d, index) => {\n                const value = d[categoryKey];\n                const valueString = value && value.toString ? value.toString() : '';\n                const datum = { ...d };\n\n                datum[categoryKey] = { id: index, value, toString: () => valueString };\n\n                return datum;\n            });\n        }\n\n        return data;\n    }\n\n    protected getCommonChartOptions(updatedOverrides?: AgChartThemeOverrides) {\n        // Only apply active overrides if chart is initialised.\n        const existingOptions: any = this.clearThemeOverrides ? {} : this.chart?.getOptions() ?? {};\n        const formattingPanelOverrides = this.chart != null ? this.getActiveFormattingPanelOverrides() : undefined;\n        this.clearThemeOverrides = false;\n\n        // Create a base theme and apply the various layers of overrides.\n        const baseTheme = createAgChartTheme(this.chartProxyParams, this, this.isEnterpriseCharts);\n        const chartThemeDefaults = this.getChartThemeDefaults();\n        const theme = applyThemeOverrides(baseTheme, [\n            chartThemeDefaults,\n            updatedOverrides ?? formattingPanelOverrides,\n        ]);\n\n        return {\n            ...existingOptions,\n            theme,\n            container: this.chartProxyParams.parentElement,\n            mode: 'integrated',\n        }\n    }\n\n    /**\n     * Retrieve default theme overrides for the current chart type\n     */\n    protected getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        // Override this method to provide chart type specific theme overrides\n        return undefined;\n    }\n\n    private getActiveFormattingPanelOverrides(): AgChartThemeOverrides {\n        if (this.clearThemeOverrides) {\n            return {};\n        }\n\n        const inUseTheme = this.chart?.getOptions().theme as AgChartTheme;\n        return inUseTheme?.overrides ?? {};\n    }\n\n    public destroy({ keepChartInstance = false } = {}): AgChartInstance | undefined {\n        if (keepChartInstance) {\n            // Reset Charts animation state, so that future updates to this re-used chart instance\n            // behave as-if the chart is brand new. When switching chartTypes, this means we hide\n            // the fact we are reusing the chart instance; the user sees a new chart which behaves\n            // as-if it is a completely new and distinct chart instance.\n            this.chart.resetAnimations();\n            return this.chart;\n        }\n\n        this.destroyChart();\n    }\n\n    protected destroyChart(): void {\n        if (this.chart) {\n            this.chart.destroy();\n            (this.chart as any) = undefined;\n        }\n    }\n}\n", "import { _Scene, AgCartesianAxisType, AgChartInstance, AgPolarAxisOptions } from \"ag-charts-community\";\n\nexport function deproxy(chartOrProxy: AgChartInstance): AgChartActual {\n    if ((chartOrProxy as any).chart != null) {\n        return (chartOrProxy as any).chart;\n    }\n    return chartOrProxy as AgChartActual;\n}\n\n// Extensions to the public ag-charts-community API that Integrated Charts currently depends on for\n// correct operation. Over time we aim to eliminate these and only use the public API.\n//\n// AVOID ADDING MORE DEPENDENCIES ON THESE PRIVATE APIS.\n\nexport interface AgChartActual extends AgChartInstance {\n    title?: _Scene.Caption;\n    width: number;\n    height: number;\n    series: {\n        type: string;\n        toggleSeriesItem(itemId: string, enabled: boolean): void;\n        properties: {\n            [key: string]: any;\n            toJson(): any;\n        };\n    }[];\n    axes?: {\n        type: AgCartesianAxisType | AgPolarAxisOptions['type'];\n        direction: 'x' | 'y';\n    }[];\n    scene: {\n        canvas: {\n            element: HTMLCanvasElement;\n        };\n        getDataURL(type?: string): string;\n    };\n    addEventListener(type: 'click', cb: (even: any) => void): void;\n    waitForUpdate(): Promise<void>;\n}\n\nexport type AgChartAxis = NonNullable<AgChartActual['axes']>[number];\nexport type AgChartAxisType = AgChartAxis['type'];", "import { ChartProxy, ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport {\n    AgAreaSeriesOptions,\n    AgBaseSeriesOptions,\n    AgCartesianAxisOptions,\n    AgCartesianChartOptions,\n    AgCharts,\n    AgLineSeriesOptions,\n} from \"ag-charts-community\";\n\nexport abstract class CartesianChartProxy extends ChartProxy {\n    protected crossFilteringAllPoints = new Set<string>();\n    protected crossFilteringSelectedPoints: string[] = [];\n\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected abstract getAxes(params: UpdateParams): AgCartesianAxisOptions[];\n    protected abstract getSeries(params: UpdateParams): AgBaseSeriesOptions<any>[];\n\n    public update(params: UpdateParams): void {\n        const axes = this.getAxes(params);\n\n        const options: AgCartesianChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    protected getData(params: UpdateParams, axes: AgCartesianAxisOptions[]): any[] {\n        const supportsCrossFiltering = ['area', 'line'].includes(this.standaloneChartType);\n        const xAxisIsCategory = axes.some(axes => axes?.type === 'category');\n        return this.crossFiltering && supportsCrossFiltering ?\n            this.getCrossFilterData(params) :\n            this.getDataTransformedData(params, xAxisIsCategory);\n    }\n\n    private getDataTransformedData(params: UpdateParams, isCategoryAxis: boolean) {\n        const [category] = params.categories;\n        return this.transformData(params.data, category.id, isCategoryAxis);\n    }\n\n    protected getXAxisType(params: UpdateParams) {\n        if (params.grouping) {\n            return 'grouped-category';\n        } else if (CartesianChartProxy.isTimeAxis(params)) {\n            return 'time';\n        }\n        return 'category';\n    }\n\n    private static isTimeAxis(params: UpdateParams): boolean {\n        const [category] = params.categories;\n        if (category && category.chartDataType) {\n            return category.chartDataType === 'time';\n        }\n        const testDatum = params.data[0];\n        return (testDatum && testDatum[category.id]) instanceof Date;\n    }\n\n    public crossFilteringReset(): void {\n        this.crossFilteringSelectedPoints = [];\n        this.crossFilteringAllPoints.clear();\n    }\n\n    protected crossFilteringPointSelected(point: string): boolean {\n        return this.crossFilteringSelectedPoints.length == 0 || this.crossFilteringSelectedPoints.includes(point);\n    }\n\n    protected crossFilteringDeselectedPoints(): boolean {\n        return this.crossFilteringSelectedPoints.length > 0 &&\n            this.crossFilteringAllPoints.size !== this.crossFilteringSelectedPoints.length;\n    }\n\n    protected extractLineAreaCrossFilterSeries(series: (AgLineSeriesOptions | AgAreaSeriesOptions)[], params: UpdateParams) {\n        const [category] = params.categories;\n\n        const getYKey = (yKey: string) => {\n            if (this.standaloneChartType === 'area') {\n                const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n                return (lastSelectedChartId === params.chartId) ? yKey + '-total' : yKey;\n            }\n            return yKey + '-total';\n        }\n\n        return series.map(s => {\n            s.yKey = getYKey(s.yKey!);\n            s.listeners = {\n                nodeClick: (e: any) => {\n                    const value = e.datum![s.xKey!];\n                    const multiSelection = e.event.metaKey || e.event.ctrlKey;\n                    this.crossFilteringAddSelectedPoint(multiSelection, value);\n                    this.crossFilterCallback(e);\n                }\n            };\n            s.marker = {\n                formatter: (p: any) => {\n                    const value = p.datum[category.id];\n                    return {\n                        fill: p.highlighted ? 'yellow' : p.fill,\n                        size: p.highlighted ? 14 : this.crossFilteringPointSelected(value) ? 8 : 0,\n                    };\n                }\n            };\n            if (this.standaloneChartType === 'area') {\n                (s as AgAreaSeriesOptions).fillOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n            if (this.standaloneChartType === 'line') {\n                (s as AgLineSeriesOptions).strokeOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n\n            return s;\n        });\n    }\n\n    private getCrossFilterData(params: UpdateParams): any[] {\n        this.crossFilteringAllPoints.clear();\n        const [category] = params.categories;\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n        const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n\n        return params.data.map(d => {\n            const value = d[category.id];\n            this.crossFilteringAllPoints.add(value);\n\n            const pointSelected = this.crossFilteringPointSelected(value);\n            if (this.standaloneChartType === 'area' && lastSelectedChartId === params.chartId) {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n            if (this.standaloneChartType === 'line') {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n\n            return d;\n        });\n    }\n\n    private crossFilteringAddSelectedPoint(multiSelection: boolean, value: string): void {\n        multiSelection ? this.crossFilteringSelectedPoints.push(value) : this.crossFilteringSelectedPoints = [value];\n    }\n}\n", "import { _Util } from \"ag-charts-community\";\n\nexport function hexToRGBA(hex: string, alpha: string) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return alpha ? `rgba(${r}, ${g}, ${b}, ${alpha})` : `rgba(${r}, ${g}, ${b})`;\n}\n\nexport function changeOpacity(fills: string[], alpha: number) {\n    return fills.map(fill => {\n        const c = _Util.Color.fromString(fill);\n        return new _Util.Color(c.r, c.g, c.b, alpha).toHexString();\n    });\n}\n", "import { AgAreaSeriesOptions, AgCartesianAxisOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\n\nexport class AreaChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params: any) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgAreaSeriesOptions[] = params.fields.map(f => (\n            {\n                type: this.standaloneChartType,\n                xKey: category.id,\n                xName: category.name,\n                yKey: f.colId,\n                yName: f.displayName,\n                normalizedTo: this.chartType === 'normalizedArea' ? 100 : undefined,\n                stacked: ['normalizedArea', 'stackedArea'].includes(this.chartType)\n            } as AgAreaSeriesOptions\n        ));\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n\n    private isNormalised() {\n        return !this.crossFiltering && this.chartType === 'normalizedArea';\n    }\n}\n", "import { AgCartesianAxisOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\n\nexport class LineChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom'\n            },\n            {\n                type: 'number',\n                position: 'left'\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgLineSeriesOptions[] = params.fields.map(f => (\n            {\n                type: this.standaloneChartType,\n                xKey: category.id,\n                xName: category.name,\n                yKey: f.colId,\n                yName: f.displayName\n            } as AgLineSeriesOptions\n        ));\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n}\n", "import {ChartProxy, ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {\n    AgCharts,\n    AgNightingaleSeriesOptions,\n    AgPolarAxisOptions,\n    AgPolarChartOptions,\n    AgRadarAreaSeriesOptions,\n    AgRadarLineSeriesOptions,\n    AgRadialBarSeriesOptions,\n    AgRadialColumnSeriesOptions\n} from 'ag-charts-community';\n\ntype AgPolarSeriesOptions =\n    AgRadarLineSeriesOptions |\n    AgRadarAreaSeriesOptions |\n    AgNightingaleSeriesOptions |\n    AgRadialBarSeriesOptions |\n    AgRadialColumnSeriesOptions;\n\nexport class PolarChartProxy extends ChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(_: UpdateParams): AgPolarAxisOptions[] {\n        const radialBar = this.standaloneChartType === 'radial-bar';\n        return [\n            {type: radialBar ? 'angle-number' : 'angle-category'},\n            {type: radialBar ? 'radius-category' : 'radius-number'},\n        ];\n    }\n\n    public getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const {fields} = params;\n        const [category] = params.categories;\n        const radialBar = this.standaloneChartType === 'radial-bar';\n\n        return fields.map(f => ({\n            type: this.standaloneChartType as AgRadarAreaSeriesOptions['type'],\n            angleKey: radialBar ? f.colId : category.id,\n            angleName: radialBar ? (f.displayName ?? undefined) : category.name,\n            radiusKey: radialBar ? category.id : f.colId,\n            radiusName: radialBar ? category.name : (f.displayName ?? undefined),\n        }));\n    }\n\n    public update(params: UpdateParams): void {\n        const axes = this.getAxes(params);\n\n        const options: AgPolarChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    private getData(params: UpdateParams, axes: AgPolarAxisOptions[]): any[] {\n        const isCategoryAxis = axes.some((axis) => axis.type === 'angle-category' || axis.type === 'radius-category');\n        return this.getDataTransformedData(params, isCategoryAxis);\n    }\n\n    private getDataTransformedData(params: UpdateParams, isCategoryAxis: boolean) {\n        const [category] = params.categories;\n        return this.transformData(params.data, category.id, isCategoryAxis);\n    }\n\n    public crossFilteringReset(): void {\n        // cross filtering is not currently supported in polar charts\n    }\n}\n", "import { ChartProxy, ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { AgCharts, AgDonutSeriesOptions, AgPieSeriesOptions, AgPolarChartOptions, AgPolarSeriesOptions, } from 'ag-charts-community';\n\nimport { changeOpacity } from '../../utils/color';\nimport { deepMerge } from '../../utils/object';\n\ninterface DonutOffset {\n    offsetAmount: number;\n    currentOffset: number;\n}\n\nexport class PieChartProxy extends ChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public update(params: UpdateParams): void {\n        const { data } = params;\n        const [category] = params.categories;\n\n        const options: AgPolarChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            data: this.crossFiltering ? this.getCrossFilterData(params) : this.transformData(data, category.id),\n            series: this.getSeries(params),\n        }\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    private getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const [category] = params.categories;\n        const numFields = params.fields.length;\n\n        const offset = {\n            currentOffset: 0,\n            offsetAmount: numFields > 1 ? 20 : 40\n        };\n\n        const series: (AgPieSeriesOptions | AgDonutSeriesOptions)[] = this.getFields(params).map((f: FieldDefinition) => {\n            // options shared by 'pie' and 'donut' charts\n            const options = {\n                type: this.standaloneChartType as AgPieSeriesOptions['type'],\n                angleKey: f.colId,\n                angleName: f.displayName!,\n                sectorLabelKey: f.colId,\n                calloutLabelName: category.name,\n                calloutLabelKey: category.id,\n            }\n\n            if (this.chartType === 'donut' || this.chartType === 'doughnut') {\n                const { outerRadiusOffset, innerRadiusOffset } = PieChartProxy.calculateOffsets(offset);\n                const title = f.displayName ? {\n                    title: { text: f.displayName, showInLegend: numFields > 1 },\n                } : undefined;\n\n                // augment shared options with 'donut' specific options\n                return {\n                    ...options,\n                    type: 'donut',\n                    outerRadiusOffset,\n                    innerRadiusOffset,\n                    ...title,\n                    calloutLine: {\n                        colors: this.getChartPalette()?.strokes,\n                    }\n                }\n            }\n\n            return options;\n        });\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private getCrossFilterData(params: UpdateParams) {\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n\n        return params.data.map(d => {\n            const total = d[colId] + d[filteredOutColId];\n            d[`${colId}-total`] = total;\n            d[filteredOutColId] = 1; // normalise to 1\n            d[colId] = d[colId] / total; // fraction of 1\n            return d;\n        });\n    }\n\n    private extractCrossFilterSeries(series: (AgPieSeriesOptions | AgDonutSeriesOptions)[]) {\n        const palette = this.getChartPalette();\n\n        const primaryOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions) => {\n            return {\n                ...seriesOptions,\n                legendItemKey: seriesOptions.calloutLabelKey,\n                calloutLabel: { enabled: false }, // hide labels on primary series\n                highlightStyle: { item: { fill: undefined } },\n                radiusKey: seriesOptions.angleKey,\n                angleKey: seriesOptions.angleKey + '-total',\n                radiusMin: 0,\n                radiusMax: 1,\n                listeners: {\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        }\n\n        const filteredOutOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions, angleKey: string) => {\n            return {\n                ...deepMerge({}, primaryOpts),\n                radiusKey: angleKey + '-filtered-out',\n                fills: changeOpacity(seriesOptions.fills ?? palette!.fills, 0.3),\n                strokes: changeOpacity(seriesOptions.strokes ?? palette!.strokes, 0.3),\n                showInLegend: false,\n            };\n        }\n\n        // currently, only single 'donut' cross-filter series are supported\n        const primarySeries = series[0];\n\n        // update primary series\n        const angleKey = primarySeries.angleKey!;\n        const primaryOpts = primaryOptions(primarySeries);\n\n        return [\n            filteredOutOptions(primarySeries, angleKey),\n            primaryOpts,\n        ];\n    }\n\n    private static calculateOffsets(offset: DonutOffset) {\n        const outerRadiusOffset = offset.currentOffset;\n        offset.currentOffset -= offset.offsetAmount;\n\n        const innerRadiusOffset = offset.currentOffset;\n        offset.currentOffset -= offset.offsetAmount;\n\n        return { outerRadiusOffset, innerRadiusOffset };\n    }\n\n    private getFields(params: UpdateParams): FieldDefinition[] {\n        // pie charts only support a single series, donut charts support multiple series\n        return this.chartType === 'pie' ? params.fields.slice(0, 1) : params.fields;\n    }\n\n    public crossFilteringReset() {\n        // not required in pie charts\n    }\n}\n", "import { AgBubbleSeriesOptions, AgCartesianAxisOptions, AgScatterSeriesOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, FieldDefinition, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\nimport { ChartDataModel } from \"../../model/chartDataModel\";\n\ninterface SeriesDefinition {\n    xField: FieldDefinition;\n    yField: FieldDefinition;\n    sizeField?: FieldDefinition;\n}\n\nexport class ScatterChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const [category] = params.categories;\n        const paired = this.isPaired();\n        const seriesDefinitions = this.getSeriesDefinitions(params.fields, paired);\n        const labelFieldDefinition = category.id === ChartDataModel.DEFAULT_CATEGORY ? undefined : category;\n\n        const series = seriesDefinitions.map(seriesDefinition => {\n            if (seriesDefinition?.sizeField) {\n                const opts: AgBubbleSeriesOptions = {\n                    type: 'bubble',\n                    xKey: seriesDefinition!.xField.colId,\n                    xName: seriesDefinition!.xField.displayName ?? undefined,\n                    yKey: seriesDefinition!.yField.colId,\n                    yName: seriesDefinition!.yField.displayName ?? undefined,\n                    title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                    sizeKey: seriesDefinition!.sizeField.colId,\n                    sizeName: seriesDefinition!.sizeField.displayName ?? '',\n                    labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                    labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n                };\n                return opts;\n            }\n\n            const opts: AgScatterSeriesOptions = {\n                type: 'scatter',\n                xKey: seriesDefinition!.xField.colId,\n                xName: seriesDefinition!.xField.displayName ?? undefined,\n                yKey: seriesDefinition!.yField.colId,\n                yName: seriesDefinition!.yField.displayName ?? undefined,\n                title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n            };\n            return opts;\n        });\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series, params) : series;\n    }\n\n    private extractCrossFilterSeries(\n        series: (AgScatterSeriesOptions | AgBubbleSeriesOptions)[],\n        params: UpdateParams,\n    ): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const { data } = params;\n        const palette = this.getChartPalette();\n\n        const filteredOutKey = (key: string) => `${key}-filtered-out`;\n\n        const calcMarkerDomain = (data: any, sizeKey?: string) => {\n            const markerDomain: [number, number] = [Infinity, -Infinity];\n            if (sizeKey != null) {\n                for (const datum of data) {\n                    const value = datum[sizeKey] ?? datum[filteredOutKey(sizeKey)];\n                    if (value < markerDomain[0]) {\n                        markerDomain[0] = value;\n                    }\n                    if (value > markerDomain[1]) {\n                        markerDomain[1] = value;\n                    }\n                }\n            }\n            if (markerDomain[0] <= markerDomain[1]) {\n                return markerDomain;\n            }\n            return undefined;\n        };\n\n        const updatePrimarySeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(series: T, idx: number): T => {\n            const fill = palette?.fills[idx];\n            const stroke = palette?.strokes[idx];\n            \n            let markerDomain: [number, number] | undefined = undefined;\n            if (series.type === 'bubble') {\n                const { sizeKey } = series;\n                markerDomain = calcMarkerDomain(data, sizeKey);\n            }\n            const marker = {\n                ...series.marker,\n                fill,\n                stroke,\n                domain: markerDomain,\n            };\n\n            return {\n                ...series,\n                marker,\n                highlightStyle: { item: { fill: 'yellow' } },\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: this.crossFilterCallback\n                },\n            };\n        }\n\n        const updateFilteredOutSeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(series: T): T => {\n            let { yKey, xKey } = series;\n\n            let alteredSizeKey = {};\n            if (series.type === 'bubble') {\n                alteredSizeKey = { sizeKey: filteredOutKey(series.sizeKey!) };\n            }\n\n            return {\n                ...series,\n                ...alteredSizeKey,\n                yKey: filteredOutKey(yKey!),\n                xKey: filteredOutKey(xKey!),\n                marker: {\n                    ...series.marker,\n                    fillOpacity: 0.3,\n                    strokeOpacity: 0.3,\n                },\n                showInLegend: false,\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: (e: any) => {\n                        const value = e.datum[filteredOutKey(xKey!)];\n\n                        // Need to remove the `-filtered-out` suffixes from the event so that\n                        // upstream processing maps the event correctly onto grid column ids.\n                        const filterableEvent = {\n                            ...e,\n                            xKey,\n                            datum: { ...e.datum, [xKey!]: value },\n                        };\n                        this.crossFilterCallback(filterableEvent);\n                    }\n                },\n            };\n        };\n\n        const updatedSeries = series.map(updatePrimarySeries);\n        return [\n            ...updatedSeries,\n            ...updatedSeries.map(updateFilteredOutSeries),\n        ];\n    }\n\n    private getSeriesDefinitions(fields: FieldDefinition[], paired: boolean): (SeriesDefinition | null)[] {\n        if (fields.length < 2) { return []; }\n\n        const isBubbleChart = this.chartType === 'bubble';\n\n        if (paired) {\n            if (isBubbleChart) {\n                return fields.map((currentXField, i) => i % 3 === 0 ? ({\n                    xField: currentXField,\n                    yField: fields[i + 1],\n                    sizeField: fields[i + 2],\n                }) : null).filter(x => x && x.yField && x.sizeField);\n            }\n            return fields.map((currentXField, i) => i % 2 === 0 ? ({\n                xField: currentXField,\n                yField: fields[i + 1],\n            }) : null).filter(x => x && x.yField);\n        }\n\n        const xField = fields[0];\n\n        if (isBubbleChart) {\n            return fields\n                .map((yField, i) => i % 2 === 1 ? ({\n                    xField,\n                    yField,\n                    sizeField: fields[i + 1],\n                }) : null)\n                .filter(x => x && x.sizeField);\n        }\n\n        return fields.filter((value, i) => i > 0).map(yField => ({ xField, yField }));\n    }\n}\n", "import {ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {CartesianChartProxy} from \"../cartesian/cartesianChartProxy\";\nimport {AgCartesianAxisOptions} from 'ag-charts-community';\nimport {isHorizontal} from \"../../utils/seriesTypeMapper\";\nimport {ChartDataModel} from \"../../model/chartDataModel\";\n\nexport abstract class StatisticalChartProxy extends CartesianChartProxy {\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: isHorizontal(this.chartType) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isHorizontal(this.chartType) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected computeSeriesStatistics(params: UpdateParams, computeStatsFn: (values: number[]) => any): any[] {\n        const {data, fields} = params;\n        const [category] = params.categories;\n        const categoryKey = category.id || ChartDataModel.DEFAULT_CATEGORY;\n        const groupedData = this.groupDataByCategory(categoryKey, data);\n\n        return Array.from(groupedData).map(([categoryValue, categoryData]) => {\n            const categoryResult = { [category.id]: categoryValue };\n\n            fields.forEach((field, seriesIndex) => {\n                // `null` & `NaN` values are omitted from calculations\n                const seriesValues = categoryData\n                    .map(datum => datum[field.colId])\n                    .filter(value => typeof value === 'number' && !isNaN(value));\n\n                Object.entries(computeStatsFn(seriesValues)).forEach(([statKey, value]) => {\n                    const propertyKey = `${statKey}:${seriesIndex}`;\n                    // when no data exists, stat properties are added to results with `null` values!\n                    categoryResult[propertyKey] = seriesValues.length > 0 ? value : null;\n                });\n            });\n\n            return categoryResult;\n        });\n    }\n\n    protected groupDataByCategory(categoryKey: string, data: any[]): Map<any, any[]> {\n        const getCategory = (datum: any) => {\n            if (categoryKey === ChartDataModel.DEFAULT_CATEGORY) {\n                return 1;\n            }\n            const categoryValue = datum[categoryKey];\n            if (categoryValue === null || categoryValue === undefined) {\n                return ''; // use a blank category for `null` or `undefined` values\n            }\n            return categoryValue instanceof Date ? categoryValue.getTime() : categoryValue;\n        }\n\n        return data.reduce((acc, datum) => {\n            let category = getCategory(datum);\n            const existingCategoryData = acc.get(category);\n            if (existingCategoryData) {\n                existingCategoryData.push(datum);\n            } else {\n                acc.set(category, [datum]);\n            }\n            return acc;\n        }, new Map<string | null, any[]>());\n    }\n\n}\n", "import {ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {AgRangeAreaSeriesOptions} from 'ag-charts-community';\nimport {StatisticalChartProxy} from \"./statisticalChartProxy\";\n\nexport class RangeChartProxy extends StatisticalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgRangeAreaSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map(\n            (field, seriesIndex) => ({\n                type: this.standaloneChartType as AgRangeAreaSeriesOptions['type'],\n                // xKey/xName refer to category buckets\n                xKey: category.id,\n                xName: category.name,\n                // yName is used to label the series\n                yName: field.displayName ?? undefined,\n                // custom field labels shown in the tooltip\n                yLowName: 'Min',\n                yHighName: 'Max',\n                // generated 'synthetic fields' from getData()\n                yLowKey: `min:${seriesIndex}`,\n                yHighKey: `max:${seriesIndex}`,\n            })\n        );\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            return {\n                min: Math.min(...seriesValues),\n                max: Math.max(...seriesValues),\n            };\n        });\n    }\n}", "import { AgCartesianAxisOptions, AgHistogramSeriesOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\n\nexport class HistogramChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams): AgHistogramSeriesOptions[] {\n        const firstField = params.fields[0]; // multiple series are not supported!\n        return [\n            {\n                type: this.standaloneChartType,\n                xKey: firstField.colId,\n                xName: firstField.displayName,\n                yName: this.chartProxyParams.translate(\"histogramFrequency\"),\n                areaPlot: false, // only constant width is supported via integrated charts\n            } as AgHistogramSeriesOptions\n        ];\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n}\n", "import {isHorizontal} from '../../utils/seriesTypeMapper';\nimport {ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {AgBoxPlotSeriesOptions} from 'ag-charts-community';\nimport {StatisticalChartProxy} from \"./statisticalChartProxy\";\n\nexport class BoxPlotChartProxy extends StatisticalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgBoxPlotSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map(\n            (field, seriesIndex) => ({\n                type: this.standaloneChartType as AgBoxPlotSeriesOptions['type'],\n                direction: isHorizontal(this.chartType) ? 'horizontal' : 'vertical',\n                // xKey/xName refer to category buckets\n                xKey: category.id,\n                xName: category.name,\n                // yName is used to label the series\n                yName: field.displayName ?? undefined,\n                // custom field labels shown in the tooltip\n                minName: 'Min',\n                q1Name: 'Q1',\n                medianName: 'Median',\n                q3Name: 'Q3',\n                maxName: 'Max',\n                // generated 'synthetic fields' from getData()\n                minKey: `min:${seriesIndex}`,\n                q1Key: `q1:${seriesIndex}`,\n                medianKey: `median:${seriesIndex}`,\n                q3Key: `q3:${seriesIndex}`,\n                maxKey: `max:${seriesIndex}`,\n            })\n        );\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            const sortedValues = seriesValues.sort((a, b) => a - b);\n            return {\n                min: sortedValues[0],\n                q1: this.quantile(sortedValues, 0.25),\n                median: this.quantile(sortedValues, 0.5),\n                q3: this.quantile(sortedValues, 0.75),\n                max: sortedValues[sortedValues.length - 1],\n            };\n        });\n    }\n\n    private quantile(sortedValues: number[], q: number): number {\n        const position = (sortedValues.length - 1) * q;\n        const indexBelow = Math.floor(position);\n        const aboveValue = position - indexBelow;\n        if (sortedValues[indexBelow + 1] !== undefined) {\n            return sortedValues[indexBelow] + aboveValue * (sortedValues[indexBelow + 1] - sortedValues[indexBelow]);\n        }\n        return sortedValues[indexBelow];\n    }\n}", "import { AgCharts, AgHierarchyChartOptions, AgHierarchySeriesOptions } from 'ag-charts-community';\nimport { ChartProxy, ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CATEGORY_LABEL_KEY, createAutoGroupHierarchy, createCategoryHierarchy } from './hierarchicalChartUtils';\nimport { GROUP_AUTO_COLUMN_ID } from '@ag-grid-community/core';\n\nexport abstract class HierarchicalChartProxy extends ChartProxy {\n    protected constructor(protected readonly chartProxyParams: ChartProxyParams) {\n        super(chartProxyParams);\n    }\n    \n    public override update(params: UpdateParams): void {\n        const options: AgHierarchyChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            series: this.getSeries(params, CATEGORY_LABEL_KEY),\n            data: this.getData(params),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    protected abstract getSeries(params: UpdateParams, labelKey: string): AgHierarchySeriesOptions[];\n\n    protected getData(params: UpdateParams): any[] {\n        const { categories, data, grouping: isGrouped } = params;\n        if (isGrouped) {\n            return createAutoGroupHierarchy(data, getRowAutoGroupLabels);\n        } else {\n            const categoryKeys = categories.map(({ id }) => id);\n            return createCategoryHierarchy(data, categoryKeys);\n        }\n    }\n}\n\nfunction getRowAutoGroupLabels(item: object): string[] | null {\n    return (item as { [GROUP_AUTO_COLUMN_ID]?: { labels: string[] } })[GROUP_AUTO_COLUMN_ID]?.labels ?? null;\n}\n\n", "export type CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\nexport const CATEGORY_LABEL_KEY: CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\n\nexport interface CategoryGroup<T extends object> {\n    [CATEGORY_LABEL_KEY]: string | null;\n    children: Array<CategoryGroup<T> | CategoryItem<T>>;\n}\n\nexport type CategoryItem<T extends object> = {\n    [CATEGORY_LABEL_KEY]: string | null;\n} & T;\n\nexport function createCategoryHierarchy<T extends object>(\n    data: T[],\n    categoryKeys: Array<keyof T>\n): Array<CategoryGroup<T> | CategoryItem<T>> {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemCategoryLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return categoryKeys.length;\n    }\n\n    function getItemCategoryLabel(item: T, categoryIndex: number): string | null {\n        const categoryKey = categoryKeys[categoryIndex];\n        const categoryValue = item[categoryKey];\n        return getCategoryLabel(categoryValue);\n    }\n\n    function getCategoryLabel(value: unknown): string | null {\n        if (value == null) return null;\n        return String(value);\n    }\n}\n\nexport function createAutoGroupHierarchy<T extends object>(\n    data: T[],\n    getItemLabels: (item: T) => string[] | null\n): Array<CategoryGroup<T> | CategoryItem<T>> {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemGroupLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return getItemLabels(item)?.length ?? 0;\n    }\n\n    function getItemGroupLabel(item: T, groupIndex: number): string | null {\n        const labels = getItemLabels(item);\n        if (!labels) return null;\n        // Autogroup label values are ordered from the leaf outwards\n        const labelIndex = labels.length - 1 - groupIndex;\n        return labels[labelIndex];\n    }\n}\n\n/* Utility functions for building and formatting nested category hierarchies */\n\n/** Convert an abstract nested hierarchy structure into an ag-charts-compatible 'category-grouped' data structure */\nfunction formatCategoryHierarchy<T extends object>(\n    hierarchy: Tree<string | null, T>\n): Array<CategoryGroup<T> | CategoryItem<T>> {\n    const { depth, leaves, children } = hierarchy;\n    // If there are no remaining levels of nesting, return a flat list of leaves with no category labels\n    if (depth === 0) return leaves.map((item) => ({ [CATEGORY_LABEL_KEY]: null, ...item }));\n    const results = new Array<CategoryGroup<T> | CategoryItem<T>>();\n    // Push all branches and leaves into the result set, grouping results by the input tree hierarchy path\n    for (const [key, childHierarchy] of children.entries()) {\n        if (childHierarchy.depth === 0) {\n            // If this the deepest parent level, return a flat list of child leaves with their respective category keys\n            results.push(...childHierarchy.leaves.map((item) => ({ [CATEGORY_LABEL_KEY]: key, ...item })));\n        } else {\n            // Otherwise nest the grouped data recursively (ignoring any leaves defined at the current parent level)\n            results.push({ [CATEGORY_LABEL_KEY]: key, children: formatCategoryHierarchy(childHierarchy) });\n        }\n    }\n    return results;\n}\n\n/** Data structure that represents an arbitrarily deeply nested tree of keyed values */\ntype Tree<K, V> = {\n    /** Number of child levels nested within this path of the tree (leaves do not count towards the depth) */\n    depth: number;\n    /** Items defined at this path within the tree */\n    leaves: V[];\n    /** Child levels contained within this path of the tree, grouped by child key */\n    children: Map<K, Tree<K, V>>;\n};\n\n/** Build an arbitrarily deeply nested hierarchy from a flat list of input items */\nfunction buildNestedHierarchy<K, V extends object>(\n    data: V[],\n    getItemDepth: (item: V) => number,\n    getItemGroupKey: (item: V, depthIndex: number) => K,\n): Tree<K, V> {\n    const hierarchy: Tree<K, V> = { depth: 0, leaves: [], children: new Map() };\n    return data.reduce((hierarchy, item) => {\n        const itemDepth = getItemDepth(item);\n        const currentDepth = 0;\n        return createNestedItemHierarchy(item, itemDepth, getItemGroupKey, currentDepth, hierarchy);\n    }, hierarchy);\n\n    function createNestedItemHierarchy(\n        item: V,\n        itemDepth: number,\n        getItemGroupKey: (item: V, depthIndex: number) => K,\n        currentDepth: number,\n        hierarchy: Tree<K, V>\n    ): Tree<K, V> {\n        if (currentDepth === itemDepth) {\n            hierarchy.leaves.push(item);\n            return hierarchy;\n        } else {\n            const key = getItemGroupKey(item, currentDepth);\n            const existingChildHierarchy = hierarchy.children.get(key);\n            const childHierarchy = createNestedItemHierarchy(\n                item,\n                itemDepth,\n                getItemGroupKey,\n                currentDepth + 1,\n                existingChildHierarchy || { depth: 0, leaves: [], children: new Map() }\n            );\n            hierarchy.children.set(key, childHierarchy);\n            hierarchy.depth = Math.max(1 + childHierarchy.depth, hierarchy.depth);\n            return hierarchy;\n        }\n    }\n}\n", "import { AgChartThemeOverrides, AgTreemapSeriesOptions } from 'ag-charts-community';\nimport { HierarchicalChartProxy } from './hierarchicalChartProxy';\nimport { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\n\nexport class TreemapChartProxy extends HierarchicalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams, labelKey: string): AgTreemapSeriesOptions[] {\n        const { fields } = params;\n        // Treemap charts support up to two input series, corresponding to size and color respectively\n        const [sizeField, colorField] = fields as [FieldDefinition | undefined, FieldDefinition | undefined];\n        // Combine the size and color series into a single composite series\n        return [\n            {\n                type: this.standaloneChartType as AgTreemapSeriesOptions['type'],\n                // The label key is generated internally by the hierarchy processing and is not user-configurable\n                labelKey,\n                // Size and color fields are inferred from the range data\n                sizeKey: sizeField?.colId,\n                sizeName: sizeField?.displayName ?? undefined,\n                colorKey: colorField?.colId,\n                colorName: colorField?.displayName ?? undefined,\n            },\n        ];\n    }\n    \n    protected override getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        return {\n            treemap: {\n                gradientLegend: {\n                    gradient: {\n                        preferredLength: 200,\n                    },\n                },\n            },\n        };\n    }\n\n    protected override transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        // Ignore the base implementation as it assumes only a single category axis\n        // (this method is never actually invoked)\n        return data;\n    }\n\n    public override crossFilteringReset(): void {\n        // cross filtering is not currently supported in treemap charts\n    }\n}\n", "import { AgChartThemeOverrides, AgSunburstSeriesOptions } from 'ag-charts-community';\nimport { HierarchicalChartProxy } from './hierarchicalChartProxy';\nimport { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\n\nexport class SunburstChartProxy extends HierarchicalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams, labelKey: string): AgSunburstSeriesOptions[] {\n        const { fields } = params;\n        // Sunburst charts support up to two input series, corresponding to size and color respectively\n        const [sizeField, colorField] = fields as [FieldDefinition | undefined, FieldDefinition | undefined];\n        // Combine the size and color series into a single composite series\n        return [\n            {\n                type: this.standaloneChartType as AgSunburstSeriesOptions['type'],\n                // The label key is generated internally by the hierarchy processing and is not user-configurable\n                labelKey,\n                // Size and color fields are inferred from the range data\n                sizeKey: sizeField?.colId,\n                sizeName: sizeField?.displayName ?? undefined,\n                colorKey: colorField?.colId,\n                colorName: colorField?.displayName ?? undefined,\n            },\n        ];\n    }\n\n    protected override getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        return {\n            sunburst: {\n                gradientLegend: {\n                    gradient: {\n                        preferredLength: 200,\n                    },\n                },\n            },\n        };\n    }\n\n    protected override transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        // Ignore the base implementation as it assumes only a single category axis\n        // (this method is never actually invoked)\n        return data;\n    }\n\n    public override crossFilteringReset(): void {\n        // cross filtering is not currently supported in sunburst charts\n    }\n}\n", "import {\n    AgCharts,\n    AgCartesianChartOptions,\n    AgHeatmapSeriesOptions,\n    AgChartThemeOverrides,\n    AgHeatmapSeriesTooltipRendererParams,\n    AgTooltipRendererResult,\n} from 'ag-charts-community';\nimport { ChartProxy, ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { flatMap } from '../../utils/array';\n\nexport const HEATMAP_CATEGORY_KEY = 'AG-GRID-DEFAULT-HEATMAP-CATEGORY-KEY';\nexport const HEATMAP_SERIES_KEY = 'AG-GRID-DEFAULT-HEATMAP-SERIES-KEY';\nexport const HEATMAP_VALUE_KEY = 'AG-GRID-DEFAULT-HEATMAP-VALUE-KEY';\n\nexport class HeatmapChartProxy extends ChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public override update(params: UpdateParams): void {\n        const xSeriesKey = HEATMAP_SERIES_KEY;\n        const xValueKey = HEATMAP_VALUE_KEY;\n        const yKey = HEATMAP_CATEGORY_KEY;\n        const options: AgCartesianChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            series: this.getSeries(params, xSeriesKey, xValueKey, yKey),\n            data: this.getData(params, xSeriesKey, xValueKey, yKey),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    protected getSeries(params: UpdateParams, xSeriesKey: string, xValueKey: string, yKey: string): AgHeatmapSeriesOptions[] {\n        const [category] = params.categories;\n        return [\n            {\n                type: this.standaloneChartType as AgHeatmapSeriesOptions['type'],\n                // The axis keys reference synthetic fields based on the category values and series column names\n                yKey,\n                xKey: xSeriesKey,\n                // The color key references a synthetic field based on the series column value for a specific cell\n                colorKey: xValueKey,\n                yName: category.name,\n                // We don't know how to label the 'x' series, as it is a synthetic series created from the set of all input columns\n                // In future releases we may want to consider inferring the series label from column groupings etc\n                xName: undefined,\n                colorName: undefined,\n            },\n        ];\n    }\n\n    protected getData(params: UpdateParams, xSeriesKey: string, xValueKey: string, yKey: string): any[] {\n        const [category] = params.categories;\n        // Heatmap chart expects a flat array of data, with each row representing a single cell in the heatmap\n        // This means we need to explode the list of input rows into their individual cells\n        return flatMap(params.data, (datum, index) => {\n            // We need to create a unique y value object for each row to prevent unintended category grouping\n            // when there are multiple rows with the same category value\n            const value = datum[category.id];\n            const valueString = value == null ? '' : String(value);\n            const yValue = { id: index, value, toString: () => valueString };\n            // Return a flat list of output data items corresponding to each cell,\n            // appending the synthetic series and category fields to the cell data\n            return params.fields.map(({ colId, displayName }) => ({\n                ...datum,\n                [xSeriesKey]: displayName,\n                [xValueKey]: datum[colId],\n                [yKey]: yValue,\n            }));\n        }\n        );\n    }\n\n    protected override getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        return {\n            heatmap: {\n                gradientLegend: {\n                    gradient: {\n                        preferredLength: 200,\n                    },\n                },\n                series: {\n                    tooltip: {\n                        renderer: renderHeatmapTooltip,\n                    },\n                },\n            },\n        };\n    }\n\n    protected override transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        // Ignore the base implementation as it assumes only a single category axis\n        // (this method is never actually invoked)\n        return data;\n    }\n\n    public override crossFilteringReset(): void {\n        // cross filtering is not currently supported in heatmap charts\n    }\n}\n\nfunction renderHeatmapTooltip(params: AgHeatmapSeriesTooltipRendererParams): string | AgTooltipRendererResult {\n    const { xKey, yKey, colorKey, yName, datum } = params;\n    const table: Array<{ label: string; value: string | undefined }> = [\n        { label: yName, value: datum[yKey] },\n        { label: datum[xKey], value: colorKey && datum[colorKey] },\n    ];\n    const html = table\n        .map(({ label, value }) => `<b>${sanitizeHtml(String(label))}:</b> ${sanitizeHtml(String(value))}`)\n        .join('<br>');\n    return {\n        title: '',\n        content: html,\n    };\n}\n\nfunction sanitizeHtml(input: string): string {\n    const ESCAPED_CHARS = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n    };\n    const characterClass = `[${Object.keys(ESCAPED_CHARS).join('')}]`;\n    const pattern = new RegExp(characterClass, 'g');\n    return input.replace(pattern, (char: keyof typeof ESCAPED_CHARS) => ESCAPED_CHARS[char]);\n}\n", "export function partition<T, K>(items: T[], selector: (item: T) => K): Map<K, T[]> {\n    return items.reduce(\n        (groupedItems, item) => {\n            const key = selector(item);\n            const existingItems = groupedItems.get(key);\n            return groupedItems.set(key, existingItems ? [...existingItems, item] : [item]);\n        },\n        new Map<K, T[]>(),\n    )\n}\n\nexport function flatMap<T, V>(items: T[], iteratee: (item: T, index: number, array: T[]) => V[]): V[] {\n    return items.reduce((acc, item, index, array) => acc.concat(iteratee(item, index, array)), new Array<V>());\n}", "import {AgCartesianAxisOptions, AgWaterfallSeriesOptions} from \"ag-charts-community\";\nimport {ChartProxyParams, UpdateParams} from \"../chartProxy\";\nimport {CartesianChartProxy} from \"./cartesianChartProxy\";\nimport {isHorizontal} from \"../../utils/seriesTypeMapper\";\n\nexport class WaterfallChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: isHorizontal(this.chartType) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isHorizontal(this.chartType) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): AgWaterfallSeriesOptions[] {\n        const [category] = params.categories;\n        const [firstField] = params.fields;\n        const firstSeries: AgWaterfallSeriesOptions = {\n            type: this.standaloneChartType as 'waterfall',\n            direction: isHorizontal(this.chartType) ? 'horizontal' : 'vertical',\n            xKey: category.id,\n            xName: category.name,\n            yKey: firstField.colId,\n            yName: firstField.displayName ?? undefined\n        };\n\n        return [firstSeries]; // waterfall only supports a single series!\n    }\n}\n", "import { _, AgChartThemeOverrides, BeanStub, ChartOptionsChanged, ChartType, Events, WithoutGridCommon } from \"@ag-grid-community/core\";\nimport { AgCartesianAxisType, AgCharts, AgChartOptions, AgPolarAxisType, AgBaseThemeableChartOptions, AgCartesianChartOptions, AgCartesianAxesTheme, AgPolarAxesTheme } from \"ag-charts-community\";\n\nimport { ChartController } from \"../chartController\";\nimport { AgChartActual, AgChartAxisType } from \"../utils/integration\";\nimport { get, set } from \"../utils/object\";\nimport { ChartSeriesType, isCartesian, VALID_SERIES_TYPES } from \"../utils/seriesTypeMapper\";\n\nexport interface ChartOptionsProxy {\n    getValue<T = string>(expression: string, calculated?: boolean): T;\n    setValue<T = string>(expression: string, value: T): void;\n    setValues<T = string>(properties: { expression: string, value: T }[]): void;\n}\n\ntype ChartAxis = NonNullable<AgChartActual['axes']>[number];\ntype SupportedSeries = AgChartActual['series'][number];\ntype AgPolarAxisThemeOverrides = NonNullable<AgPolarAxesTheme[keyof AgPolarAxesTheme]>;\ntype AgCartesianAxisThemeOverrides = NonNullable<AgCartesianAxesTheme[keyof AgCartesianAxesTheme]>;\ntype AgChartAxisThemeOverrides = AgCartesianAxisThemeOverrides | AgPolarAxisThemeOverrides;\n\ntype AgChartOptionsWithThemeOverrides = AgChartOptions & {\n    theme: NonNullable<Extract<AgChartOptions['theme'], object>> & {\n        overrides: NonNullable<Extract<AgChartOptions['theme'], object>['overrides']>\n    }\n};\n\nconst CARTESIAN_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'time', 'grouped-category'];\nconst POLAR_AXIS_TYPES: AgPolarAxisType[] = ['angle-category', 'angle-number', 'radius-category', 'radius-number'];\n\nconst VALID_AXIS_TYPES: (AgCartesianAxisType | AgPolarAxisType)[] = [...CARTESIAN_AXIS_TYPES, ...POLAR_AXIS_TYPES];\n\nexport class ChartOptionsService extends BeanStub {\n    private readonly chartController: ChartController;\n\n    constructor(chartController: ChartController) {\n        super();\n        this.chartController = chartController;\n    }\n\n    public getChartThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getChartOption(expression),\n            setValue: (expression, value) => this.setChartThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setChartThemeOverrides(properties),\n        };\n    }\n\n    public getAxisThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getAxisProperty(expression),\n            setValue: (expression, value) => this.setAxisThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setAxisThemeOverrides(properties),\n        };\n    }\n\n    public getCartesianAxisOptionsProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisOptions(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisOptions(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisThemeOverridesProxy(axisType: 'xAxis' | 'yAxis' ): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisThemeOverrides(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisAppliedThemeOverridesProxy(axisType: 'xAxis' | 'yAxis' ): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisThemeOverride(\n                axisType,\n                // Allow the caller to specify a wildcard expression to retrieve the whole set of overrides\n                expression === '*' ? null : expression,\n            )!,\n            setValue: (expression, value) => this.setCartesianAxisThemeOverrides(\n                axisType,\n                // Allow the caller to specify a wildcard expression to set the whole set of overrides\n                [{ expression: expression === '*' ? null : expression, value }],\n            ),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getSeriesOptionsProxy(getSelectedSeries: () => ChartSeriesType): ChartOptionsProxy {\n        return {\n            getValue: (expression, calculated) => this.getSeriesOption(getSelectedSeries(), expression, calculated),\n            setValue: (expression, value) => this.setSeriesOptions(getSelectedSeries(), [{ expression, value }]),\n            setValues: (properties) => this.setSeriesOptions(getSelectedSeries(), properties),\n        };\n    }\n\n    /**\n     * Determine the set of theme overrides that should be retained when transitioning from one chart type to another.\n     */\n    public getPersistedChartThemeOverrides(\n        existingChartOptions: AgChartOptions,\n        existingAxes: ChartAxis[] | undefined,\n        existingChartType: ChartType,\n        targetChartType: ChartType,\n    ): AgChartThemeOverrides {\n        // Determine the set of theme override keys that should be retained when transitioning from one chart type to another\n        const retainedThemeOverrideKeys = this.getRetainedChartThemeOverrideKeys(existingChartType, targetChartType);\n        const retainedChartAxisThemeOverrideKeys = this.getRetainedChartAxisThemeOverrideKeys(null, existingChartType, targetChartType);\n\n        // combine the options into a single merged object\n        const targetChartOptions = this.createChartOptions();\n\n        // copy the retained theme overrides from the existing chart options to the target chart options\n        for (const expression of retainedThemeOverrideKeys) {\n            // Locate the value in the existing chart series theme overrides\n            const value = this.retrieveChartOptionsThemeOverride(existingChartOptions, existingChartType, expression);\n            if (value !== undefined) {\n                // Update the value in the target chart series theme overrides\n                this.assignChartOptionsThemeOverride(targetChartOptions, targetChartType, expression, value);\n            }\n        }\n\n        // axis theme overrides are copied to all potential target axis types\n        // (this is necessary because certain chart types auto-instantiate different axis types given the same data)\n        if (existingAxes) {\n            for (const { expression, targetAxisTypes } of retainedChartAxisThemeOverrideKeys) {\n                // Locate the value in the existing chart series theme overrides\n                for (const existingAxisType of existingAxes.map((axis) => axis.type)) {\n                    const value = this.retrieveChartOptionsThemeOverride(\n                        existingChartOptions,\n                        existingChartType,\n                        ['axes', existingAxisType, expression].join('.'),\n                    );\n                    if (value !== undefined) {\n                        // Copy the value to all potential target chart axis theme overrides\n                        // (axis theme overrides are currently only persisted across cartesian chart types)\n                        for (const targetAxisType of targetAxisTypes) {\n                            this.assignChartOptionsThemeOverride(\n                                targetChartOptions,\n                                targetChartType,\n                                ['axes', targetAxisType, expression].join('.'),\n                                value,\n                            );\n                        }\n                    }\n                    \n                }\n            }\n        }\n\n        return targetChartOptions.theme.overrides;\n    }\n\n    private getRetainedChartThemeOverrideKeys(\n        existingChartType: ChartType,\n        targetChartType: ChartType,\n    ): (keyof AgBaseThemeableChartOptions | string)[] {\n        // these theme overrides are persisted across all chart types\n        const UNIVERSAL_PERSISTED_THEME_OVERRIDES: (keyof AgBaseThemeableChartOptions)[] = ['animation'];\n\n        // these theme overrides are persisted across all cartesian chart types\n        const PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES: (keyof AgCartesianChartOptions)[] = ['zoom', 'navigator'];\n\n        // other chart options will be retained depending on the specifics of the chart type from/to transition\n        const chartSpecificThemeOverrideKeys = ((previousChartType, updatedChartType) => {\n            const expressions = new Array<string>();\n            if (isCartesian(previousChartType) && isCartesian(updatedChartType)) {\n                expressions.push(...PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES);\n            }\n            return expressions;\n        })(existingChartType, targetChartType);\n        \n        return [\n            ...UNIVERSAL_PERSISTED_THEME_OVERRIDES,\n            ...chartSpecificThemeOverrideKeys,\n        ];\n    }\n\n    private getRetainedChartAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null,\n        existingChartType: ChartType,\n        targetChartType: ChartType,\n    ): {\n        expression: keyof AgChartAxisThemeOverrides | string,\n        targetAxisTypes: AgChartAxisType[],\n    }[] {\n        // different axis types have different theme overrides\n        if (isCartesian(existingChartType) && isCartesian(targetChartType)) {\n            const retainedKeys = this.getRetainedCartesianAxisThemeOverrideKeys(axisType);\n            return retainedKeys.map((expression) => ({ expression, targetAxisTypes: CARTESIAN_AXIS_TYPES }));\n        }\n        return [];\n    }\n\n    private getRetainedCartesianAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null,\n    ): (keyof AgCartesianAxisThemeOverrides | string)[] {\n        const axisPositionPrefixes =\n            axisType === 'xAxis'\n                ? ['', '.top', '.bottom']\n                : axisType === 'yAxis'\n                  ? ['', '.left', '.right']\n                  : ['', '.left', '.right', '.top', '.bottom'];\n\n        // these axis theme overrides are persisted across all cartesian chart axis types\n        const PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES: (keyof AgCartesianAxisThemeOverrides)[] = ['crosshair'];\n\n        const expressions = new Array<keyof AgBaseThemeableChartOptions | string>();\n        for (const expression of PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES) {\n            for (const axisPositionPrefix of axisPositionPrefixes) {\n                expressions.push(`${axisPositionPrefix}${expression}`);\n            }\n        }\n        return expressions;\n    }\n\n    private getChartOption<T = string>(expression: string): T {\n        return get(this.getChart(), expression, undefined) as T;\n    }\n\n    private setChartThemeOverrides<T = string>(properties: {expression: string, value: T}[]): void {\n        const chartType = this.getChartType();\n        // combine the options into a single merged object\n        const chartOptions: AgChartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsThemeOverride(chartOptions, chartType, expression, value);\n        }\n        this.applyChartOptions(chartOptions);\n    }\n\n    private applyChartOptions(chartOptions: AgChartOptions, options?: { silent?: boolean }): void {\n        if (Object.keys(chartOptions).length === 0) return;\n        this.updateChart(chartOptions);\n        const shouldRaiseEvent = !options?.silent;\n        if (shouldRaiseEvent) this.raiseChartOptionsChangedEvent();\n    }\n\n    public awaitChartOptionUpdate(func: () => void) {\n        const chart = this.chartController.getChartProxy().getChart();\n        chart.waitForUpdate().then(() => func())\n            .catch((e) => console.error(`AG Grid - chart update failed`, e));\n    }\n\n    private getAxisProperty<T = string>(expression: string): T {\n        // Assume the property exists on the first axis\n        return get(this.getChart().axes?.[0], expression, undefined);\n    }\n\n    private setAxisThemeOverrides<T = string>(properties: { expression: string, value: T }[]): void {\n        const chart = this.getChart();\n        const chartType = this.getChartType();\n\n        // combine the options into a single merged object\n        let chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            // Only apply the property to axes that declare the property on their prototype chain\n            const relevantAxes = chart.axes?.filter((axis) => {\n                const parts = expression.split('.');\n                let current: any = axis;\n                for (const part of parts) {\n                    if (!(part in current)) {\n                        return false;\n                    }\n                    current = current[part];\n                }\n                return true;\n            });\n            if (!relevantAxes) continue;\n\n            for (const axis of relevantAxes)  {\n                if (!this.isValidAxisType(axis)) continue;\n                this.assignChartAxisThemeOverride(chartOptions, chartType, axis.type, null, expression, value);\n            }\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private getCartesianAxisProperty<T = string | undefined>(axisType: 'xAxis' | 'yAxis', expression: string): T {\n        const axes = this.getChartAxes();\n        const axis = this.getCartesianAxis(axes, axisType);\n        return get(axis, expression, undefined);\n    }\n\n    private getCartesianAxisThemeOverride<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        expression: string | null,\n    ): T | undefined {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return undefined;\n        const chartType = this.getChartType();\n        const chartOptions = this.getChart().getOptions();\n\n        return this.retrieveChartAxisThemeOverride(\n            chartOptions,\n            chartType,\n            chartAxis.type,\n            axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n            expression,\n        );\n    }\n\n    private setCartesianAxisThemeOverrides<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string | null, value: T }>,\n    ): void {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return;\n        const chartType = this.getChartType();\n\n        // combine the axis options into a single merged object\n        let chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartAxisThemeOverride(\n                chartOptions,\n                chartType,\n                chartAxis.type,\n                axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n                expression,\n                value,\n            );\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private setCartesianAxisOptions<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string, value: T }>,\n    ): void {\n        // get a snapshot of all existing axis options from the chart instance\n        const existingChartOptions = this.getChart().getOptions();\n        const axisOptions = ('axes' in existingChartOptions ? existingChartOptions.axes : undefined);\n        if (!existingChartOptions || !axisOptions) return;\n\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis) return;\n\n        // combine the axis options into a single merged object\n        let chartOptions = this.createChartOptions();\n        (chartOptions as Extract<AgChartOptions, { axes?: any }>).axes = axisOptions;\n        \n        // if the axis type is changing, we need to persist any relevant theme overrides assigned to the existing axis\n        const axisTypeUpdate = properties.find(({ expression }) => expression === 'type');\n        if (axisTypeUpdate) {\n            const updatedAxisType = axisTypeUpdate.value as AgChartAxisType;\n            // the names of the retained axis overrides need to be mapped from the old axis type to the new axis type\n            const retainedAxisThemeOverrideKeys = this.getRetainedCartesianAxisThemeOverrideKeys(axisType);\n            // copy any retained theme overrides onto the combined chart options object under the new axis type\n            for (const expression of retainedAxisThemeOverrideKeys) {\n                const chartType = this.getChartType();\n                const value = this.retrieveChartOptionsThemeOverride(\n                    existingChartOptions,\n                    chartType,\n                    ['axes', chartAxis.type, expression].join('.'),\n                );\n                if (value !== undefined) {\n                    this.assignChartOptionsThemeOverride(\n                        chartOptions,\n                        chartType,\n                        ['axes', updatedAxisType, expression].join('.'),\n                        value,\n                    );\n                }\n            }\n        }\n\n        // assign the provided axis options onto the combined chart options object\n        const axisIndex = axes.indexOf(chartAxis);\n        for (const { expression, value } of properties) {\n            this.assignChartOption(chartOptions, `axes.${axisIndex}.${expression}`, value);\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private getCartesianAxis(axes: ChartAxis[], axisType: 'xAxis' | 'yAxis'): ChartAxis | undefined {\n        if (axes.length < 2) { return undefined; }\n        switch (axisType) {\n            case 'xAxis': return (axes[0].direction === 'x') ? axes[0] : axes[1];\n            case 'yAxis': return (axes[1].direction === 'y') ? axes[1] : axes[0];\n        }\n    }\n\n    private getSeriesOption<T = string>(seriesType: ChartSeriesType, expression: string, calculated?: boolean): T {\n        // N.B. 'calculated' here refers to the fact that the property exists on the internal series object itself,\n        // rather than the properties object. This is due to us needing to reach inside the chart itself to retrieve\n        // the value, and will likely be cleaned up in a future release\n        const series = this.getChart().series.find((s: any) => ChartOptionsService.isMatchingSeries(seriesType, s));\n        return get(calculated ? series : series?.properties.toJson(), expression, undefined) as T;\n    }\n\n    private setSeriesOptions<T = string>(seriesType: ChartSeriesType, properties: { expression: string, value: T }[]): void {\n        // combine the series options into a single merged object\n        let chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsSeriesThemeOverride(\n                chartOptions,\n                seriesType,\n                `series.${expression}`,\n                value\n            );\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    public getPairedMode(): boolean {\n        return this.chartController.getChartProxy().isPaired();\n    }\n\n    public setPairedMode(paired: boolean): void {\n        this.chartController.getChartProxy().setPaired(paired);\n    }\n\n    private getChartAxes(): Array<ChartAxis> {\n        const chart = this.getChart();\n        return chart.axes ?? [];\n    }\n\n    private retrieveChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null,\n    ): T | undefined {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                const value = this.retrieveChartOptionsThemeOverride<T>(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...expression ? [expression] : []].join('.'),\n                );\n                if (value === undefined) continue;\n                return value;\n            }\n        } else {\n            return this.retrieveChartOptionsThemeOverride<T>(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...expression ? [expression] : []].join('.'),\n            );\n        }\n    }\n\n    private assignChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null,\n        value: T,\n    ): void {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                this.assignChartOptionsThemeOverride(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...expression ? [expression] : []].join('.'),\n                    value\n                );\n            }\n        } else {\n            this.assignChartOptionsThemeOverride(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...expression ? [expression] : []].join('.'),\n                value\n            );\n        }\n    }\n\n    private isValidAxisType(chartAxis: ChartAxis): boolean {\n        return VALID_AXIS_TYPES.includes(chartAxis.type);\n    }\n\n    public getChartType(): ChartType {\n        return this.chartController.getChartType();\n    }\n\n    private getChart() {\n        return this.chartController.getChartProxy().getChart();\n    }\n\n    private updateChart(chartOptions: AgChartOptions) {\n        const chartRef = this.chartController.getChartProxy().getChartRef();\n        chartRef.skipAnimations();\n        AgCharts.updateDelta(chartRef, chartOptions);\n    }\n\n    private createChartOptions(): AgChartOptionsWithThemeOverrides {\n        const chartOptions = {\n            theme: {\n                overrides: {}\n            }\n        };\n        return chartOptions;\n    }\n\n    private retrieveChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        chartType: ChartType,\n        expression: string | null,\n    ): T | undefined {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // Retrieve the first matching value\n        for (const seriesType of chartSeriesTypes) {\n            const value = this.retrieveChartOptionsSeriesThemeOverride<T>(chartOptions, seriesType, expression);\n            if (value === undefined) continue;\n            return value;\n        }\n\n        return undefined;\n    }\n\n    private assignChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        chartType: ChartType,\n        expression: string | null,\n        value: T,\n    ): void {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // assign the relevant theme overrides for each series type\n        for (const seriesType of chartSeriesTypes) {\n            this.assignChartOptionsSeriesThemeOverride(chartOptions, seriesType, expression, value);\n        }\n    }\n\n    private retrieveChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        seriesType: ChartSeriesType,\n        expression: string | null,\n    ): T | undefined {\n        return this.retrieveChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...expression ? [expression] : []].join('.'),\n        );\n    }\n\n    private assignChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        seriesType: ChartSeriesType,\n        expression: string | null,\n        value: T,\n    ): void {\n        this.assignChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...expression ? [expression] : []].join('.'),\n            value,\n        );\n    }\n\n    private getChartThemeOverridesSeriesTypeKeys(chartType: ChartType): ChartSeriesType[] {\n        // In the chart options API, theme overrides are categorized according to series type.\n        // Depending on the chart type, theme overrides may need to be applied to multiple series types.\n        const chartSeriesTypes = this.chartController.getChartSeriesTypes(chartType);\n        if (this.chartController.isComboChart()) {\n            chartSeriesTypes.push('common');\n        }\n        return chartSeriesTypes;\n    }\n\n    private retrieveChartOption<T>(\n        chartOptions: AgChartOptions, \n        expression: string,\n    ): T | undefined {\n        return get(chartOptions, expression, undefined);\n    }\n\n    private assignChartOption<T>(\n        chartOptions: AgChartOptions, \n        expression: string,\n        value: T,\n    ): void {\n        set(chartOptions, expression, value);\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const chartModel = this.chartController.getChartModel();\n\n        const event: WithoutGridCommon<ChartOptionsChanged> = {\n            type: Events.EVENT_CHART_OPTIONS_CHANGED,\n            chartId: chartModel.chartId,\n            chartType: chartModel.chartType,\n            chartThemeName: this.chartController.getChartThemeName(),\n            chartOptions: chartModel.chartOptions\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private static isMatchingSeries(seriesType: ChartSeriesType, series: SupportedSeries): boolean {\n        return VALID_SERIES_TYPES.includes(seriesType) && series.type === seriesType;\n    }\n\n    protected destroy(): void {\n        super.destroy();\n    }\n}\n", "import {AgCartesianAxisOptions} from \"ag-charts-community\";\nimport {ChartType, SeriesChartType} from \"@ag-grid-community/core\";\nimport {ChartProxyParams, FieldDefinition, UpdateParams} from \"../chartProxy\";\nimport {CartesianChartProxy} from \"../cartesian/cartesianChartProxy\";\nimport {getSeriesType} from \"../../utils/seriesTypeMapper\";\n\nexport class ComboChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const fields = params ? params.fields : [];\n        const fieldsMap = new Map(fields.map(f => [f.colId, f]));\n\n        const { primaryYKeys, secondaryYKeys } = this.getYKeys(fields, params.seriesChartTypes);\n\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n        ];\n\n        if (primaryYKeys.length > 0) {\n            axes.push({\n                type: 'number',\n                keys: primaryYKeys,\n                position: 'left',\n            });\n        }\n\n        if (secondaryYKeys.length > 0) {\n            secondaryYKeys.forEach((secondaryYKey: string) => {\n                const field = fieldsMap.get(secondaryYKey);\n                const secondaryAxisIsVisible = field && field.colId === secondaryYKey;\n                if (!secondaryAxisIsVisible) {\n                    return;\n                }\n\n                const secondaryAxisOptions: AgCartesianAxisOptions = {\n                    type: 'number',\n                    keys: [secondaryYKey],\n                    position: 'right',\n                }\n\n                axes.push(secondaryAxisOptions);\n            });\n        }\n\n        return axes;\n    }\n\n    public getSeries(params: UpdateParams): any {\n        const { fields, seriesChartTypes } = params;\n        const [category] = params.categories;\n\n        return fields.map(field => {\n            const seriesChartType = seriesChartTypes.find(s => s.colId === field.colId);\n            if (seriesChartType) {\n                const chartType: ChartType = seriesChartType.chartType;\n                const grouped = ['groupedColumn', 'groupedBar'].includes(chartType);\n                const groupedOpts = grouped ? { grouped: true } : {};\n                return {\n                    type: getSeriesType(chartType),\n                    xKey: category.id,\n                    yKey: field.colId,\n                    yName: field.displayName,\n                    stacked: ['stackedArea', 'stackedColumn'].includes(chartType),\n                    ...groupedOpts,\n                }\n            }\n        });\n    }\n\n    private getYKeys(fields: FieldDefinition[], seriesChartTypes: SeriesChartType[]) {\n        const primaryYKeys: string[] = [];\n        const secondaryYKeys: string[] = [];\n\n        fields.forEach(field => {\n            const colId = field.colId;\n            const seriesChartType = seriesChartTypes.find(s => s.colId === colId);\n            if (seriesChartType) {\n                seriesChartType.secondaryAxis ? secondaryYKeys.push(colId) : primaryYKeys.push(colId);\n            }\n        });\n\n        return { primaryYKeys, secondaryYKeys };\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    ChartMenuOptions,\n    ChartToolPanelMenuOptions,\n    ChartToolPanelName,\n    GetChartToolbarItemsParams,\n    WithoutGridCommon,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartService } from \"../../chartService\";\nimport { ChartMenuContext } from \"../menu/chartMenuContext\";\nimport { AdvancedSettingsMenuFactory } from \"../menu/advancedSettings/advancedSettingsMenuFactory\";\nimport { ChartController } from \"../chartController\";\n\nconst CHART_TOOL_PANEL_ALLOW_LIST: ChartToolPanelMenuOptions[] = [\n    'chartSettings', \n    'chartData', \n    'chartFormat'\n];\nconst CHART_TOOLBAR_ALLOW_LIST: ChartMenuOptions[] = [\n    'chartUnlink',\n    'chartLink',\n    'chartDownload'\n];\n\nexport const CHART_TOOL_PANEL_MENU_OPTIONS: { [key in ChartToolPanelName]: ChartToolPanelMenuOptions } = {\n    settings: \"chartSettings\",\n    data: \"chartData\",\n    format: \"chartFormat\"\n}\n\n@Bean('chartMenuService')\nexport class ChartMenuService extends BeanStub {\n    @Autowired('chartService') private readonly chartService: ChartService;\n    @Autowired('advancedSettingsMenuFactory') private readonly advancedSettingsMenuFactory: AdvancedSettingsMenuFactory;\n\n    public isLegacyFormat(): boolean {\n        return !this.chartService.isEnterprise();\n    }\n\n    public downloadChart(chartMenuContext: ChartMenuContext, dimensions?: { width: number, height: number }, fileName?: string, fileFormat?: string): void {\n        chartMenuContext.chartController.getChartProxy().downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public toggleLinked(chartMenuContext: ChartMenuContext): void {\n        chartMenuContext.chartController.detachChartRange();\n    }\n\n    public openAdvancedSettings(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.advancedSettingsMenuFactory.showMenu(chartMenuContext, eventSource);\n    }\n\n    public hideAdvancedSettings(): void {\n        this.advancedSettingsMenuFactory.hideMenu();\n    }\n\n    public getToolbarOptionsAndPanels(chartController: ChartController): {\n        panels: ChartToolPanelMenuOptions[],\n        defaultPanel: ChartToolPanelMenuOptions,\n        chartToolbarOptions: ChartMenuOptions[]\n    } {\n        const legacyFormat = this.isLegacyFormat();\n        const useChartToolPanelCustomisation = Boolean(this.gridOptionsService.get('chartToolPanelsDef')) || !legacyFormat;\n\n        let panels: ChartToolPanelMenuOptions[];\n        let defaultPanel: ChartToolPanelMenuOptions;\n        let chartToolbarOptions: ChartMenuOptions[];\n\n        if (useChartToolPanelCustomisation) {\n            const defaultChartToolbarOptions: ChartMenuOptions[] = legacyFormat ? [\n                chartController.isChartLinked() ? 'chartLink' : 'chartUnlink',\n                'chartDownload'\n            ] : [\n                'chartMenu'\n            ];\n    \n            const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n            const params: WithoutGridCommon<GetChartToolbarItemsParams> = {\n                defaultItems: defaultChartToolbarOptions\n            };\n            chartToolbarOptions = toolbarItemsFunc\n                ? toolbarItemsFunc(params).filter(option => {\n                    if (!(legacyFormat ? CHART_TOOLBAR_ALLOW_LIST : [...CHART_TOOLBAR_ALLOW_LIST, 'chartMenu']).includes(option)) {\n                        let msg;\n                        if (CHART_TOOL_PANEL_ALLOW_LIST.includes(option as any)) {\n                            msg = `'${option}' is a Chart Tool Panel option and will be ignored since 'chartToolPanelsDef' is used. Please use 'chartToolPanelsDef.panels' grid option instead`\n                        } else if (option === 'chartMenu') {\n                            msg = `'chartMenu' is only allowed as a Chart Toolbar Option when using AG Charts Enterprise`;\n                        } else {\n                            msg = `'${option}' is not a valid Chart Toolbar Option`;\n                        }\n                        _.warnOnce(msg);\n                        return false;\n                    }\n\n                    return true;\n                })\n                : defaultChartToolbarOptions;\n\n            const panelsOverride = this.gridOptionsService.get('chartToolPanelsDef')?.panels\n                ?.map(panel => {\n                    const menuOption = CHART_TOOL_PANEL_MENU_OPTIONS[panel]\n                    if (!menuOption) {\n                        _.warnOnce(`Invalid panel in chartToolPanelsDef.panels: '${panel}'`);\n                    }\n                    return menuOption;\n                })\n                .filter(panel => Boolean(panel));\n            panels = panelsOverride\n                ? panelsOverride\n                : Object.values(CHART_TOOL_PANEL_MENU_OPTIONS);\n\n            // pivot charts use the column tool panel instead of the data panel\n            if (chartController.isPivotChart()) {\n                panels = panels.filter(panel => panel !== 'chartData');\n            }\n\n            const defaultToolPanel = this.gridOptionsService.get('chartToolPanelsDef')?.defaultToolPanel;\n            defaultPanel = (defaultToolPanel && CHART_TOOL_PANEL_MENU_OPTIONS[defaultToolPanel]) || panels[0];\n\n            if (legacyFormat) {\n                chartToolbarOptions = panels.length > 0\n                    // Only one panel is required to display menu icon in toolbar\n                    ? [panels[0], ...chartToolbarOptions]\n                    : chartToolbarOptions;\n            }\n        } else { // To be deprecated in future. Toolbar options will be different to chart tool panels.\n            let tabOptions: ChartMenuOptions[] = [\n                'chartSettings',\n                'chartData',\n                'chartFormat',\n                chartController.isChartLinked() ? 'chartLink' : 'chartUnlink',\n                'chartDownload'\n            ];\n    \n            const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n    \n            if (toolbarItemsFunc) {\n                const isLegacyToolbar = this.gridOptionsService.get('suppressChartToolPanelsButton');\n                const params: WithoutGridCommon<GetChartToolbarItemsParams> = {\n                    defaultItems: isLegacyToolbar ? tabOptions : CHART_TOOLBAR_ALLOW_LIST\n                };\n    \n                tabOptions = toolbarItemsFunc(params).filter(option => {\n                    if (!CHART_TOOL_PANEL_ALLOW_LIST.includes(option as any) && !CHART_TOOLBAR_ALLOW_LIST.includes(option)) {\n                        _.warnOnce(`'${option}' is not a valid Chart Toolbar Option`);\n                        return false;\n                    } \n                    // If not legacy, remove chart tool panel options here,\n                    // and add them all in one go below\n                    else if (!isLegacyToolbar && CHART_TOOL_PANEL_ALLOW_LIST.includes(option as any)) {\n                        const msg = `'${option}' is a Chart Tool Panel option and will be ignored. Please use 'chartToolPanelsDef.panels' grid option instead`;\n                        _.warnOnce(msg);\n                        return false;\n                    }\n    \n                    return true;\n                });\n\n                if (!isLegacyToolbar) {\n                    // Add all the chart tool panels, as `chartToolPanelsDef.panels`\n                    // should be used for configuration\n                    tabOptions = tabOptions.concat(CHART_TOOL_PANEL_ALLOW_LIST);\n                }\n            }\n    \n            // pivot charts use the column tool panel instead of the data panel\n            if (chartController.isPivotChart()) {\n                tabOptions = tabOptions.filter(option => option !== 'chartData');\n            }\n    \n            const ignoreOptions: ChartMenuOptions[] = ['chartUnlink', 'chartLink', 'chartDownload'];\n            panels = tabOptions.filter(option => ignoreOptions.indexOf(option) === -1) as ChartToolPanelMenuOptions[];\n            defaultPanel = panels[0];\n    \n            chartToolbarOptions = tabOptions.filter(value =>\n                ignoreOptions.indexOf(value) !== -1 ||\n                (panels.length && value === panels[0])\n            );\n        }\n\n        return {\n            panels,\n            defaultPanel,\n            chartToolbarOptions\n        };\n    }\n\n    public doesChartToolbarExist(chartController: ChartController) {\n        const { chartToolbarOptions } = this.getToolbarOptionsAndPanels(chartController);\n        return [ 'chartMenu', ...CHART_TOOLBAR_ALLOW_LIST ].some(option => chartToolbarOptions.includes(option as any));\n    }\n\n    public doChartToolPanelsExist(chartController: ChartController) {\n        const { panels } = this.getToolbarOptionsAndPanels(chartController);\n        return panels.length > 0;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { ChartModel } from '@ag-grid-community/core';\nimport { AgChartThemeName } from 'ag-charts-community';\n\n// @ts-ignore\nimport { getCanonicalChartType, getSeriesType, isPieChartSeries } from './chartComp/utils/seriesTypeMapper';\n// @ts-ignore\nimport { ALL_AXIS_TYPES, getLegacyAxisType } from './chartComp/utils/axisTypeMapper';\n// @ts-ignore\nimport { VERSION } from '../version';\n\nconst DEBUG = false;\n\nexport function upgradeChartModel(model: ChartModel): ChartModel {\n    const originalVersion = model.version;\n    if (model.version == null) {\n        // Try to guess the version so we can apply the right subset of migrations.\n        model.version = heuristicVersionDetection(model);\n    }\n\n    model = migrateIfBefore('23.0.0', model, migrateV23);\n    model = migrateIfBefore('24.0.0', model, migrateV24);\n    model = migrateIfBefore('25.1.0', model, migrateV25_1);\n    model = migrateIfBefore('26.0.0', model, migrateV26);\n    model = migrateIfBefore('26.1.0', model, migrateV26_1);\n    // Switch from iChartOptions to iAgChartOptions....\n    model = migrateIfBefore('26.2.0', model, migrateV26_2);\n    model = migrateIfBefore('28.0.0', model, migrateV28);\n    model = migrateIfBefore('28.2.0', model, migrateV28_2);\n    model = migrateIfBefore('29.0.0', model, migrateV29);\n    model = migrateIfBefore('29.1.0', model, migrateV29_1);\n    model = migrateIfBefore('29.2.0', model, migrateV29_2);\n    model = migrateIfBefore('30.0.0', model, migrateV30);\n    model = migrateIfBefore('31.0.0', model, migrateV31);\n    model = cleanup(model);\n\n    // Bump version to latest.\n    model = migrateIfBefore(VERSION, model, (m) => m);\n\n    if (DEBUG && originalVersion !== model.version) {\n        console.log('AG Grid: ChartModel migration complete', { model });\n    }\n\n    return model;\n}\n\nfunction migrateV23(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/76c6744ff2b732d298d1ade73c122188854b5bac\n    model = jsonRename('chartOptions.legend.item.marker.type', 'shape', model);\n    model = jsonRename('chartOptions.seriesDefaults.marker.type', 'shape', model);\n\n    // https://github.com/ag-grid/ag-grid/commit/7bdf2cfd666acda758a818733a9f9cb35ac1d7a7\n    model = jsonRename('chartOptions.legend.padding', 'spacing', model);\n\n    return model;\n}\n\nfunction migrateV24(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chartOptions.seriesDefaults.marker.minSize', model);\n\n    const {\n        chartType,\n        chartPalette, // Migrate.\n        chartOptions: { xAxis, yAxis, ...chartOptions },\n        ...chartModel\n    } = model as any;\n    const axesTypes = getLegacyAxisType(chartType);\n    const axes = axesTypes?.map((type, i) => ({\n        type,\n        ...(i === 0 ? xAxis : yAxis),\n    }));\n\n    // Precise legacy palette fills/strokes can be found here for future reference:\n    // https://github.com/ag-grid/ag-grid/blob/b22.1.0/grid-enterprise-modules/charts/src/charts/chart/palettes.ts\n    const LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        borneo: 'ag-default',\n        material: 'ag-material',\n        bright: 'ag-vivid',\n    };\n\n    return {\n        chartType,\n        chartThemeName: LEGACY_PALETTES[chartPalette] ?? 'ag-default',\n        chartOptions: {\n            ...chartOptions,\n            axes,\n            xAxis,\n            yAxis,\n        },\n        ...chartModel,\n    } as ChartModel;\n}\n\nfunction migrateV25_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/61943f9fecbfb5ac1b9a1fd93788f9fdd8687181\n    model = jsonRename('chartOptions.seriesDefaults.label.minRequiredAngle', 'minAngle', model);\n    return model;\n}\n\nfunction migrateV26(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ dimOpacity, ...opts }: any) => ({\n        ...opts,\n        ...(dimOpacity != null ? { series: { dimOpacity } } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chart', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipClass', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipTracking', model);\n\n    // Cleanup label.rotation === 0, which was treated as 'use the default' on reload prior to 26.\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 0, model);\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 335, model);\n    return model;\n}\n\nfunction migrateV26_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ item, series, ...opts }: any) => ({\n        item: { ...opts, ...item },\n        ...(series ? { series } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n    model = jsonMutate('chartOptions.series[].highlightStyle', model, highlightOptUpdate);\n    return model;\n}\n\nfunction migrateV26_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/8b2e223cb1a687cb6c1d70b9f75f52fa29d00341\n    model = jsonMove('chartOptions.seriesDefaults.fill.opacity', 'chartOptions.seriesDefaults.fillOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.opacity', 'chartOptions.seriesDefaults.strokeOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.width', 'chartOptions.seriesDefaults.strokeWidth', model);\n    model = jsonDelete('chartOptions.seriesDefaults.fill', model);\n    model = jsonDelete('chartOptions.seriesDefaults.stroke', model);\n    model = jsonDelete('chartOptions.seriesDefaults.callout.colors', model);\n    model = jsonDelete('chartOptions.xAxis', model);\n    model = jsonDelete('chartOptions.yAxis', model);\n    const {\n        chartType: providedChartType,\n        chartOptions: { axes, series, seriesDefaults, ...otherChartOptions },\n        ...otherModelProps\n    } = model as any;\n\n    // At 26.2.0 combination charts weren't supported, so we can safely assume a single series type.\n    // We can't rely on the `series.type` field as it was incorrect (in v25.0.0 line chart has an\n    // `area` series).\n    // Note that in v31.1.0, the canonical name for the 'doughnut' chart type changed to 'donut'.\n    const chartType = getCanonicalChartType(providedChartType);\n    const seriesType = getSeriesType(chartType);\n    const seriesTypes = [seriesType];\n\n    const chartTypeMixin: any = {};\n    if (!isPieChartSeries(seriesType)) {\n        const minimalAxis = { top: {}, bottom: {}, left: {}, right: {} };\n        const updatedAxes = axes\n            .map(({ type, ...axisProps }: any) => ({\n                [type]: { ...minimalAxis, ...axisProps },\n            }))\n            .reduce(merge, {});\n        ALL_AXIS_TYPES.filter((v) => updatedAxes[v] == null).forEach((v) => {\n            updatedAxes[v] = { ...minimalAxis };\n        });\n        chartTypeMixin.axes = updatedAxes;\n    }\n\n    const updatedChartOptions = seriesTypes\n        .map((t: string) => ({\n            [t]: {\n                ...chartTypeMixin,\n                series: seriesDefaults,\n                ...otherChartOptions,\n            },\n        }))\n        .reduce(merge, {});\n\n    model = {\n        ...otherModelProps,\n        chartType,\n        chartOptions: updatedChartOptions,\n    };\n\n    return model;\n}\n\nfunction migrateV28(model: ChartModel) {\n    model = jsonDelete('chartOptions.*.title.padding', model);\n    model = jsonDelete('chartOptions.*.subtitle.padding', model);\n    model = jsonDelete('chartOptions.*.axes.*.title.padding', model);\n    model = jsonBackfill('chartOptions.*.axes.*.title.enabled', false, model);\n\n    return model;\n}\n\nfunction migrateV28_2(model: ChartModel) {\n    model = jsonRename('chartOptions.pie.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.pie.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n\n    model = jsonRename('chartOptions.donut.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.donut.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.donut.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.donut.series.labelName', 'sectorLabelName', model);\n\n    // series.yKeys => yKey ?\n    // series.yNames => yName ?\n\n    return model;\n}\n\nfunction migrateV29(model: ChartModel) {\n    model = jsonMoveIfMissing('chartOptions.scatter.series.fill', 'chartOptions.scatter.series.marker.fill', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.fillOpacity',\n        'chartOptions.scatter.series.marker.fillOpacity',\n        model\n    );\n    model = jsonMoveIfMissing('chartOptions.scatter.series.stroke', 'chartOptions.scatter.series.marker.stroke', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeOpacity',\n        'chartOptions.scatter.series.marker.strokeOpacity',\n        model\n    );\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeWidth',\n        'chartOptions.scatter.series.marker.strokeWidth',\n        model\n    );\n    model = jsonMove('chartOptions.scatter.series.paired', 'chartOptions.scatter.paired', model);\n\n    return model;\n}\n\nfunction migrateV29_1(model: ChartModel) {\n    model = jsonDelete('chartOptions.axes[].tick.count', model);\n\n    return model;\n}\n\nfunction migrateV29_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/ce11956492e42e845932edb4e05d7b0b21db5c61\n    const tooltipOptUpdate = ({ tracking, ...opts }: any) => {\n        const output = { ...opts };\n        if (tracking === false) {\n            output.position ??= { type: 'pointer' };\n            output.range ??= 'nearest';\n        } else if (tracking === true) {\n            output.position ??= { type: 'node' };\n            output.range ??= 'nearest';\n        }\n        return output;\n    };\n    model = jsonMutate('chartOptions.*.tooltip', model, tooltipOptUpdate);\n\n    return model;\n}\n\nfunction migrateV30(model: ChartModel) {\n    // Repeated from migrateV28_2() as they were applied retrospectively for the v30 release.\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n    // Late-applied migrations for deprecations in the 29.x.y range.\n    model = migrateV29_1(model);\n    model = migrateV29_2(model);\n\n    // Actual v30 changes.\n    model = jsonDelete('chartOptions.*.series.flipXY', model);\n    model = jsonAdd('chartOptions.common.legend.enabled', true, model);\n    model = jsonBackfill('chartOptions.common.legend.position', 'right', model);\n\n    return model;\n}\n\nfunction migrateV31(model: ChartModel) {\n    const V30_LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        'ag-pastel': 'ag-sheets',\n        'ag-solar': 'ag-polychroma'\n    };\n\n    const updatedModel = jsonRename('chartOptions.column', 'bar', model);\n\n    const chartThemeName = V30_LEGACY_PALETTES[updatedModel.chartThemeName] || updatedModel.chartThemeName;\n\n    return {\n        ...updatedModel,\n        chartThemeName\n    };\n}\n\nfunction cleanup(model: ChartModel) {\n    // Remove fixed width/height - this has never been supported via UI configuration.\n    model = jsonDelete('chartOptions.*.width', model);\n    model = jsonDelete('chartOptions.*.height', model);\n    model = jsonBackfill('chartOptions.*.axes.category.label.autoRotate', true, model);\n\n    return model;\n}\n\nexport function heuristicVersionDetection(model: ChartModel) {\n    const modelAny = model as any;\n\n    if (model.version != null) {\n        return model.version;\n    }\n\n    const hasKey = (obj: any, ...keys: string[]) => {\n        return Object.keys(obj || {}).some((k) => keys.includes(k));\n    };\n\n    const chartOptions = modelAny.chartOptions;\n    const seriesOptions = hasKey(chartOptions, 'seriesDefaults')\n        ? chartOptions?.seriesDefaults\n        : chartOptions?.[Object.keys(chartOptions)[0]];\n    const hints = {\n        '27.0.0': hasKey(modelAny, 'seriesChartTypes'),\n        '26.2.0': !hasKey(chartOptions, 'seriesDefaults'),\n        '26.1.0': hasKey(seriesOptions?.highlightStyle, 'item'),\n        '26.0.0': hasKey(seriesOptions?.highlightStyle, 'series'),\n        // '26.0.0': modelAny.chart === undefined,\n        '25.1.0': hasKey(seriesOptions?.label, 'minAngle'),\n        '25.0.0':\n            hasKey(modelAny, 'modelType', 'aggFunc', 'unlinkChart', 'suppressChartRanges') ||\n            hasKey(seriesOptions, 'lineDash', 'lineDashOffset'),\n        '24.0.0': hasKey(modelAny, 'chartThemeName', 'chart') || hasKey(chartOptions, 'series'),\n        '23.2.0': hasKey(chartOptions, 'navigator'),\n        '23.0.0': hasKey(chartOptions?.legend?.item?.marker, 'shape'),\n        '22.1.0': hasKey(modelAny, 'chartPalette', 'chartType'),\n    };\n\n    // Default to 27.1.0, the last version before we added `version`.\n    const defaultVersion = '27.1.0';\n    const matchingHints = Object.entries(hints).filter(([_, match]) => match);\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersionCandidates: matchingHints });\n    const [heuristicVersion = defaultVersion] = matchingHints[0];\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersion });\n    return heuristicVersion;\n}\n\nfunction migrateIfBefore(maxVersion: string, model: ChartModel, migration: (m: ChartModel) => ChartModel): ChartModel {\n    if (versionNumber(maxVersion) > versionNumber(model.version!)) {\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratingTo: maxVersion });\n\n        const result = migration(model);\n        result.version = maxVersion;\n\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratedTo: maxVersion, result });\n        return result;\n    }\n\n    return model;\n}\n\ntype VersionParts = { major: number; minor: number; patch: number };\nfunction versionParts(version: string): VersionParts {\n    const split = typeof version === 'string' ? version.split('.').map((v) => Number(v)) : [];\n    if (split.length !== 3 || split.some((v) => isNaN(v))) {\n        throw new Error('AG Grid - Illegal version string: ' + version);\n    }\n\n    return {\n        major: split[0],\n        minor: split[1],\n        patch: split[2],\n    };\n}\n\nfunction versionNumber(version: string): number {\n    const { major, minor, patch } = versionParts(version);\n\n    // Return a number of the form MMmmPP.\n    return major * 10_000 + minor * 100 + patch;\n}\n\nfunction jsonDeleteDefault(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        if (parent[prop] === defaultValue) {\n            delete parent[prop];\n        }\n    });\n}\n\nfunction jsonBackfill(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, false, json, (parent, prop) => {\n        if (parent[prop] == null) {\n            parent[prop] = defaultValue;\n        }\n    });\n}\n\nfunction jsonAdd(path: string | string[], value: any, json: any): any {\n    if (typeof path === 'string') {\n        path = path.split('.');\n    }\n\n    const nextPath = path[0];\n    if (path.length > 1) {\n        json[nextPath] = jsonAdd(path.slice(1), value, json[nextPath] ?? {});\n    }\n\n    const hasProperty = Object.keys(json).includes(nextPath);\n    if (!hasProperty) {\n        json[nextPath] = value;\n    }\n\n    return json;\n}\n\nfunction jsonMove(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        parent[prop] = valueToMove;\n    });\n}\n\nfunction jsonMoveIfMissing(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        if (parent[prop] === undefined) {\n            parent[prop] = valueToMove;\n        }\n    });\n}\n\nfunction jsonRename(path: string | string[], renameTo: string, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        parent[renameTo] = parent[prop];\n        delete parent[prop];\n    });\n}\n\nfunction jsonDelete(path: string | string[], json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => delete parent[prop]);\n}\n\nfunction jsonMutateProperty(\n    path: string | string[],\n    skipMissing: boolean,\n    json: any,\n    mutator: (parent: any, targetProp: string) => any\n): void {\n    const pathElements = path instanceof Array ? path : path.split('.');\n    const parentPathElements = pathElements.slice(0, pathElements.length - 1);\n    const targetName = pathElements[pathElements.length - 1];\n\n    return jsonMutate(parentPathElements, json, (parent) => {\n        const hasProperty = Object.keys(parent).includes(targetName);\n        if (skipMissing && !hasProperty) {\n            return parent;\n        }\n\n        const result = { ...parent };\n        mutator(result, targetName);\n        return result;\n    });\n}\n\nfunction jsonMutate(path: string | string[], json: any, mutator: (v: any) => any): any {\n    const pathElements = path instanceof Array ? path : path.split('.');\n\n    // Clone to avoid mutating original input.\n    json = { ...json };\n\n    if (pathElements.length === 0) {\n        return mutator(json);\n    } else if (pathElements[0].startsWith('{')) {\n        const pathOptions = pathElements[0].substring(1, pathElements[0].lastIndexOf('}')).split(',');\n        for (const pathOption of pathOptions) {\n            if (json[pathOption] != null) {\n                json[pathOption] = jsonMutate(pathElements.slice(1), json[pathOption], mutator);\n            }\n        }\n    } else if (pathElements[0].endsWith('[]')) {\n        const arrayName = pathElements[0].substring(0, path[0].indexOf('['));\n        if (json[arrayName] instanceof Array) {\n            json[arrayName] = json[arrayName].map((v: any) => jsonMutate(pathElements.slice(1), v, mutator));\n        }\n    } else if (pathElements[0] === '*') {\n        for (const jsonProp in json) {\n            json[jsonProp] = jsonMutate(pathElements.slice(1), json[jsonProp], mutator);\n        }\n    } else if (json[pathElements[0]] != null) {\n        json[pathElements[0]] = jsonMutate(pathElements.slice(1), json[pathElements[0]], mutator);\n    }\n\n    return json;\n}\n\nconst merge = (r: {}, n: {}) => ({ ...r, ...n });\n", "import { Bean, BeanStub } from \"@ag-grid-community/core\";\n\nexport type ChartTranslationKey = keyof typeof ChartTranslationService.DEFAULT_TRANSLATIONS;\n\n@Bean(\"chartTranslationService\")\nexport class ChartTranslationService extends BeanStub {\n    public static readonly DEFAULT_TRANSLATIONS = {\n        pivotChartTitle: 'Pivot Chart',\n        rangeChartTitle: 'Range Chart',\n        settings: 'Chart',\n        data: 'Data',\n        format: 'Format',\n        categories: 'Categories',\n        defaultCategory: '(None)',\n        series: 'Series',\n        switchCategorySeries: 'Switch Category / Series',\n        categoryValues: 'Category Values',\n        seriesLabels: 'Series Labels',\n        aggregate: 'Aggregate',\n        xyValues: 'X Y Values',\n        paired: 'Paired Mode',\n        axis: 'Axis',\n        xAxis: 'Horizontal Axis',\n        yAxis: 'Vertical Axis',\n        polarAxis: 'Polar Axis',\n        radiusAxis: 'Radius Axis',\n        navigator: 'Navigator',\n        zoom: 'Zoom',\n        animation: 'Animation',\n        crosshair: 'Crosshair',\n        color: 'Color',\n        thickness: 'Thickness',\n        preferredLength: 'Preferred Length',\n        xType: 'X Type',\n        axisType: 'Axis Type',\n        automatic: 'Automatic',\n        category: 'Category',\n        number: 'Number',\n        time: 'Time',\n        timeFormat: 'Time Format',\n        autoRotate: 'Auto Rotate',\n        labelRotation: 'Rotation',\n        circle: 'Circle',\n        orientation: 'Orientation',\n        polygon: 'Polygon',\n        fixed: 'Fixed',\n        parallel: 'Parallel',\n        perpendicular: 'Perpendicular',\n        radiusAxisPosition: 'Position',\n        ticks: 'Ticks',\n        gridLines: 'Grid Lines',\n        width: 'Width',\n        height: 'Height',\n        length: 'Length',\n        padding: 'Padding',\n        spacing: 'Spacing',\n        chart: 'Chart',\n        title: 'Title',\n        titlePlaceholder: 'Chart title - double click to edit',\n        background: 'Background',\n        font: 'Font',\n        top: 'Top',\n        right: 'Right',\n        bottom: 'Bottom',\n        left: 'Left',\n        labels: 'Labels',\n        calloutLabels: 'Callout Labels',\n        sectorLabels: 'Sector Labels',\n        positionRatio: 'Position Ratio',\n        size: 'Size',\n        shape: 'Shape',\n        minSize: 'Minimum Size',\n        maxSize: 'Maximum Size',\n        legend: 'Legend',\n        position: 'Position',\n        markerSize: 'Marker Size',\n        markerStroke: 'Marker Stroke',\n        markerPadding: 'Marker Padding',\n        itemSpacing: 'Item Spacing',\n        itemPaddingX: 'Item Padding X',\n        itemPaddingY: 'Item Padding Y',\n        layoutHorizontalSpacing: 'Horizontal Spacing',\n        layoutVerticalSpacing: 'Vertical Spacing',\n        strokeWidth: 'Stroke Width',\n        offset: 'Offset',\n        offsets: 'Offsets',\n        tooltips: 'Tooltips',\n        callout: 'Callout',\n        markers: 'Markers',\n        shadow: 'Shadow',\n        blur: 'Blur',\n        xOffset: 'X Offset',\n        yOffset: 'Y Offset',\n        lineWidth: 'Line Width',\n        lineDash: 'Line Dash',\n        lineDashOffset: 'Dash Offset',\n        scrollingZoom: 'Scrolling',\n        scrollingStep: 'Scrolling Step',\n        selectingZoom: 'Selecting',\n        durationMillis: 'Duration (ms)',\n        crosshairLabel: 'Label',\n        crosshairSnap: 'Snap to Node',\n        normal: 'Normal',\n        bold: 'Bold',\n        italic: 'Italic',\n        boldItalic: 'Bold Italic',\n        predefined: 'Predefined',\n        fillOpacity: 'Fill Opacity',\n        strokeColor: 'Line Color',\n        strokeOpacity: 'Line Opacity',\n        miniChart: 'Mini-Chart',\n        histogramBinCount: 'Bin count',\n        connectorLine: 'Connector Line',\n        seriesItems: 'Series Items',\n        seriesItemType: 'Item Type',\n        seriesItemPositive: 'Positive',\n        seriesItemNegative: 'Negative',\n        seriesItemLabels: 'Item Labels',\n        columnGroup: 'Column',\n        barGroup: 'Bar',\n        pieGroup: 'Pie',\n        lineGroup: 'Line',\n        scatterGroup: 'X Y (Scatter)',\n        areaGroup: 'Area',\n        polarGroup: 'Polar',\n        statisticalGroup: 'Statistical',\n        hierarchicalGroup: 'Hierarchical',\n        specializedGroup: 'Specialized',\n        combinationGroup: 'Combination',\n        groupedColumnTooltip: 'Grouped',\n        stackedColumnTooltip: 'Stacked',\n        normalizedColumnTooltip: '100% Stacked',\n        groupedBarTooltip: 'Grouped',\n        stackedBarTooltip: 'Stacked',\n        normalizedBarTooltip: '100% Stacked',\n        pieTooltip: 'Pie',\n        donutTooltip: 'Donut',\n        lineTooltip: 'Line',\n        groupedAreaTooltip: 'Area',\n        stackedAreaTooltip: 'Stacked',\n        normalizedAreaTooltip: '100% Stacked',\n        scatterTooltip: 'Scatter',\n        bubbleTooltip: 'Bubble',\n        histogramTooltip: 'Histogram',\n        radialColumnTooltip: 'Radial Column',\n        radialBarTooltip: 'Radial Bar',\n        radarLineTooltip: 'Radar Line',\n        radarAreaTooltip: 'Radar Area',\n        nightingaleTooltip: 'Nightingale',\n        rangeBarTooltip: 'Range Bar',\n        rangeAreaTooltip: 'Range Area',\n        boxPlotTooltip: 'Box Plot',\n        treemapTooltip: 'Treemap',\n        sunburstTooltip: 'Sunburst',\n        heatmapTooltip: 'Heatmap',\n        waterfallTooltip: 'Waterfall',\n        columnLineComboTooltip: 'Column & Line',\n        areaColumnComboTooltip: 'Area & Column',\n        customComboTooltip: 'Custom Combination',\n        innerRadius: 'Inner Radius',\n        startAngle: 'Start Angle',\n        endAngle: 'End Angle',\n        reverseDirection: 'Reverse Direction',\n        groupPadding: 'Group Padding',\n        seriesPadding: 'Series Padding',\n        group: 'Group',\n        tile: 'Tile',\n        whisker: 'Whisker',\n        cap: 'Cap',\n        capLengthRatio: 'Length Ratio',\n        labelPlacement: 'Placement',\n        inside: 'Inside',\n        outside: 'Outside',\n        noDataToChart: 'No data available to be charted.',\n        pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',\n        chartSettingsToolbarTooltip: 'Menu',\n        chartLinkToolbarTooltip: 'Linked to Grid',\n        chartUnlinkToolbarTooltip: 'Unlinked from Grid',\n        chartDownloadToolbarTooltip: 'Download Chart',\n        chartMenuToolbarTooltip: 'Menu',\n        chartEdit: 'Edit Chart',\n        chartAdvancedSettings: 'Advanced Settings',\n        chartLink: 'Link to Grid',\n        chartUnlink: 'Unlink from Grid',\n        chartDownload: 'Download Chart',\n        histogramFrequency: \"Frequency\",\n        seriesChartType: 'Series Chart Type',\n        seriesType: 'Series Type',\n        secondaryAxis: 'Secondary Axis',\n        seriesAdd: 'Add a series',\n        categoryAdd: 'Add a category',\n        area: 'Area',\n        bar: 'Bar',\n        column: 'Column',\n        line: 'Line',\n        scatter: 'Scatter',\n        histogram: 'Histogram',\n        radialColumn: 'Radial Column',\n        radialBar: 'Radial Bar',\n        radarLine: 'Radar Line',\n        radarArea: 'Radar Area',\n        nightingale: 'Nightingale',\n        rangeBar: 'Range Bar',\n        rangeArea: 'Range Area',\n        treemap: 'Treemap',\n        sunburst: 'Sunburst',\n        waterfall: 'Waterfall',\n        boxPlot: 'Box Plot',\n        pie: 'Pie',\n        donut: 'Donut',\n        stackedArea: 'StackedArea',\n        groupedColumn: 'Grouped Column',\n        stackedColumn: 'Stacked Column',\n        advancedSettings: 'Advanced Settings',\n        ariaChartMenuClose: 'Close Chart Edit Menu',\n        timeFormatSlashesDDMMYYYY: 'DD/MM/YYYY',\n        timeFormatSlashesMMDDYYYY: 'MM/DD/YYYY',\n        timeFormatSlashesDDMMYY: 'DD/MM/YY',\n        timeFormatSlashesMMDDYY: 'MM/DD/YY',\n        timeFormatDotsDDMYY: 'DD.M.YY',\n        timeFormatDotsMDDYY: 'M.DD.YY',\n        timeFormatDashesYYYYMMDD: 'YYYY-MM-DD',\n        timeFormatSpacesDDMMMMYYYY: 'DD MMMM YYYY',\n        timeFormatHHMMSS: 'HH:MM:SS',\n        timeFormatHHMMSSAmPm: 'HH:MM:SS AM/PM',\n        sum: 'Sum',\n        first: 'First',\n        last: 'Last',\n        min: 'Min',\n        max: 'Max',\n        count: 'Count',\n        avg: 'Average',\n    };\n\n    public translate(toTranslate: ChartTranslationKey): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const defaultTranslation = ChartTranslationService.DEFAULT_TRANSLATIONS[toTranslate];\n        return translate(toTranslate, defaultTranslation);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    GridApi,\n    RowNode,\n    ValueService\n} from \"@ag-grid-community/core\";\n\n@Bean(\"chartCrossFilterService\")\nexport class ChartCrossFilterService extends BeanStub {\n\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n\n    public filter(event: any, reset: boolean = false): void {\n        const filterModel = this.gridApi.getFilterModel();\n\n        // filters should be reset when user clicks on canvas background\n        if (reset) {\n            this.resetFilters(filterModel);\n            return;\n        }\n\n        let colId = ChartCrossFilterService.extractFilterColId(event);\n        if (this.isValidColumnFilter(colId)) {\n            // update filters based on current chart selections\n            this.updateFilters(filterModel, event, colId);\n        } else {\n            console.warn(\"AG Grid: cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' \" +\n                \"to be defined on the column with id: '\" + colId + \"'\");\n        }\n    }\n\n    private resetFilters(filterModel: any) {\n        const filtersExist = Object.keys(filterModel).length > 0;\n        if (filtersExist) {\n            // only reset filters / charts when necessary to prevent undesirable flickering effect\n            this.gridApi.setFilterModel(null);\n            this.gridApi.onFilterChanged();\n        }\n    }\n\n    private updateFilters(filterModel: any, event: any, colId: string) {\n        let dataKey = ChartCrossFilterService.extractFilterColId(event);\n        let rawValue = event.datum[dataKey];\n        if (rawValue === undefined) {\n            return;\n        }\n\n        let selectedValue = rawValue.toString();\n\n        if (event.event.metaKey || event.event.ctrlKey) {\n            const existingGridValues = this.getCurrentGridValuesForCategory(colId);\n            const valueAlreadyExists = _.includes(existingGridValues, selectedValue);\n\n            let updatedValues;\n            if (valueAlreadyExists) {\n                updatedValues = existingGridValues.filter((v: any) => v !== selectedValue);\n            } else {\n                updatedValues = existingGridValues;\n                updatedValues.push(selectedValue);\n            }\n\n            filterModel[colId] = this.getUpdatedFilterModel(colId, updatedValues);\n        } else {\n            const updatedValues = [selectedValue];\n            filterModel = {[colId]: this.getUpdatedFilterModel(colId, updatedValues)};\n        }\n\n        this.gridApi.setFilterModel(filterModel);\n    }\n\n    private getUpdatedFilterModel(colId: any, updatedValues: any[]) {\n        let columnFilterType = this.getColumnFilterType(colId);\n        if (columnFilterType === 'agMultiColumnFilter') {\n            return {filterType: 'multi', filterModels: [null, {filterType: 'set', values: updatedValues}]};\n        }\n        return {filterType: 'set', values: updatedValues};\n    }\n\n    private getCurrentGridValuesForCategory(colId: string) {\n        let filteredValues: any[] = [];\n        const column = this.getColumnById(colId);\n        this.gridApi.forEachNodeAfterFilter((rowNode: RowNode) => {\n            if (column && !rowNode.group) {\n                const value = this.valueService.getValue(column, rowNode) + '';\n                if (!filteredValues.includes(value)) {\n                    filteredValues.push(value);\n                }\n            }\n        });\n        return filteredValues;\n    }\n\n    private static extractFilterColId(event: any): string {\n        return event.xKey || event.calloutLabelKey;\n    }\n\n    private isValidColumnFilter(colId: any) {\n        if (colId.indexOf('-filtered-out')) {\n            colId = colId.replace('-filtered-out', '');\n        }\n\n        let filterType = this.getColumnFilterType(colId);\n        if (typeof filterType === 'boolean') {\n            return filterType;\n        }\n\n        return _.includes(['agSetColumnFilter', 'agMultiColumnFilter'], filterType);\n    }\n\n    private getColumnFilterType(colId: any) {\n        let gridColumn = this.getColumnById(colId);\n        if (gridColumn) {\n            const colDef = gridColumn.getColDef();\n            return colDef.filter;\n        }\n    }\n\n    private getColumnById(colId: string) {\n        return this.columnModel.getGridColumn(colId) as Column;\n    }\n}\n", "import { ModuleValidationResult } from \"@ag-grid-community/core\";\n\nconst VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION = 28;\nconst VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION = 6;\n\nfunction isValidVersion(version: string) {\n  return version && version.match(/\\d+\\.\\d+\\.\\d+/);\n}\n\nfunction isValidMajorVersion({ gridMajorVersion, chartsMajorVersion }: {\n  gridMajorVersion: string,\n  chartsMajorVersion: string\n}): boolean {\n  const gridMajor = parseInt(gridMajorVersion, 10);\n  const chartsMajor = parseInt(chartsMajorVersion, 10);\n\n  const gridMajorDifference = gridMajor - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION;\n  const chartsMajorDifference = chartsMajor - VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n  const isFirstOrAfterVersion = gridMajorDifference >= 0;\n\n  return gridMajorDifference === chartsMajorDifference && isFirstOrAfterVersion;\n}\n\nexport function gridChartVersion(gridVersion: string): {\n  gridMajorMinor: string,\n  chartsMajorMinor: string\n} | undefined {\n  if (!gridVersion || !isValidVersion(gridVersion)) {\n    return undefined;\n  }\n\n  const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n  const gridMajorMinor = `${gridMajor}.${gridMinor}.x`;\n\n  const gridMajorNumber = parseInt(gridMajor, 10);\n  const chartsMajor = (gridMajorNumber - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION) + VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n\n  if (chartsMajor < 0) {\n    return undefined;\n  }\n\n  const chartsMinor = gridMinor;\n  const chartsMajorMinor = `${chartsMajor}.${chartsMinor}.x`;\n\n  return {\n    gridMajorMinor,\n    chartsMajorMinor\n  }\n}\n\nexport function validGridChartsVersionErrorMessage({ type, gridVersion, chartsVersion }: {\n  type: 'incompatible' | 'invalidCharts' | 'invalidGrid' | 'invalid',\n  gridVersion?: string,\n  chartsVersion?: string\n}): string {\n  const invalidMessage = 'AG Grid: AG Grid version is incompatible. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.'\n\n  if (!gridVersion) {\n    return invalidMessage;\n  }\n\n  const version = gridChartVersion(gridVersion);\n  if (!version) {\n    return invalidMessage;\n  }\n\n  const { gridMajorMinor, chartsMajorMinor } = version;\n\n  if (type === 'incompatible') {\n    return `AG Grid version ${gridVersion} and AG Charts version ${chartsVersion} is not supported. AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`\n  } else if (type === 'invalidCharts') {\n    return `AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`\n  }\n\n  return invalidMessage;\n}\n\nexport function validGridChartsVersion({ gridVersion, chartsVersion }: {\n  gridVersion: string,\n  chartsVersion: string\n}): ModuleValidationResult {\n  if (!isValidVersion(chartsVersion)) {\n    return {\n      isValid: false,\n      message: validGridChartsVersionErrorMessage({ type: 'invalidCharts', gridVersion, chartsVersion })\n    }\n  }\n  if (!isValidVersion(gridVersion)) {\n    return {\n      isValid: false,\n      message: validGridChartsVersionErrorMessage({ type: 'invalidGrid', gridVersion, chartsVersion })\n    }\n  }\n\n  const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n  const [chartsMajor, chartsMinor] = chartsVersion.split('.') || [];\n  const isValidMajor = isValidMajorVersion({\n    gridMajorVersion: gridMajor,\n    chartsMajorVersion: chartsMajor\n  })\n\n  if (isValidMajor && gridMinor === chartsMinor) {\n    return {\n      isValid: true\n    }\n  } else if (!isValidMajor || gridMinor !== chartsMinor) {\n    return {\n      isValid: false,\n      message: validGridChartsVersionErrorMessage({ type: 'incompatible', gridVersion, chartsVersion })\n    }  \n  }\n\n  return {\n    isValid: false,\n    message: validGridChartsVersionErrorMessage({ type: 'invalid', gridVersion, chartsVersion })\n  }\n}", "import {\n    AgMenuItemComponent,\n    AgMenuList,\n    Autowired,\n    Bean,\n    BeanStub,\n    Component,\n    FocusService,\n    IAfterGuiAttachedParams,\n    MenuItemDef,\n    PopupService,\n    PostConstruct,\n    RefSelector,\n    _\n} from '@ag-grid-community/core';\nimport { ChartController } from '../chartController';\nimport { ChartMenuService } from '../services/chartMenuService';\nimport { ChartTranslationService } from '../services/chartTranslationService';\nimport { ChartMenuContext } from './chartMenuContext';\n\n@Bean('chartMenuListFactory')\nexport class ChartMenuListFactory extends BeanStub {\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private activeChartMenuList?: ChartMenuList;\n\n    public showMenuList(params: {\n        eventSource: HTMLElement,\n        showMenu: () => void,\n        chartMenuContext: ChartMenuContext\n    }): void {\n        const { eventSource, showMenu, chartMenuContext } = params;\n        const areChartToolPanelsEnabled = this.chartMenuService.doChartToolPanelsExist(chartMenuContext.chartController);\n        const menuItems = this.mapWithStockItems(\n            this.getMenuItems(chartMenuContext.chartController, areChartToolPanelsEnabled),\n            chartMenuContext,\n            showMenu,\n            eventSource,\n            areChartToolPanelsEnabled)\n        ;\n        if (!menuItems.length) {\n            return;\n        }\n        const chartMenuList = this.createBean(new ChartMenuList(menuItems));\n        this.activeChartMenuList = chartMenuList;\n\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const eGui = chartMenuList.getGui()\n\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                this.destroyBean(chartMenuList);\n                this.activeChartMenuList = undefined;\n                const document = this.gridOptionsService.getDocument();\n                if (document.activeElement === document.body) {\n                    eventSource.focus({ preventScroll: true });\n                }\n            },\n            afterGuiAttached: params => chartMenuList.afterGuiAttached(params),\n            positionCallback: () => {\n                {\n                    this.popupService.positionPopupByComponent({\n                        type: 'chartMenu',\n                        eventSource,\n                        ePopup: eGui,\n                        alignSide,\n                        nudgeX: 4 * multiplier,\n                        nudgeY: 4,\n                        position: 'under',\n                        keepWithinBounds: true,\n                    });\n                }\n            },\n            ariaLabel: 'Chart Menu'\n        });\n    }\n\n    private getMenuItems(chartController: ChartController, areChartToolPanelsEnabled: boolean): (MenuItemDef | string)[] {\n        const defaultItems = [\n            ...(areChartToolPanelsEnabled ? ['chartEdit'] : []),\n            ...(chartController.isEnterprise() ? ['chartAdvancedSettings'] : []),\n            chartController.isChartLinked() ? 'chartUnlink' : 'chartLink',\n            'chartDownload'\n        ];\n        const chartMenuItems = this.gridOptionsService.get('chartMenuItems');\n        if (!chartMenuItems) {\n            return defaultItems;\n        } else if (Array.isArray(chartMenuItems)) {\n            return chartMenuItems;\n        } else {\n            return chartMenuItems(this.gridOptionsService.addGridCommonParams({\n                defaultItems\n            }));\n        }\n    }\n\n    private mapWithStockItems(originalList: (MenuItemDef | string)[], chartMenuContext: ChartMenuContext, showMenu: () => void, eventSource: HTMLElement, areChartToolPanelsEnabled: boolean): MenuItemDef[] {\n        if (!originalList) {\n            return [];\n        }\n        const resultList: MenuItemDef[] = [];\n\n        originalList.forEach(menuItemOrString => {\n            let result: MenuItemDef | null;\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, chartMenuContext, showMenu, eventSource, areChartToolPanelsEnabled);\n            } else {\n                result = { ...menuItemOrString };\n            }\n            if (!result) { return; }\n\n            const { subMenu } = result;\n            if (Array.isArray(subMenu)) {\n                result.subMenu = this.mapWithStockItems(subMenu, chartMenuContext, showMenu, eventSource, areChartToolPanelsEnabled);\n            }\n\n            resultList.push(result);\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(key: string, chartMenuContext: ChartMenuContext, showMenu: () => void, eventSource: HTMLElement, areChartToolPanelsEnabled: boolean): MenuItemDef | null {\n        switch (key) {\n            case 'chartEdit':\n                return areChartToolPanelsEnabled ? this.createMenuItem(this.chartTranslationService.translate('chartEdit'), 'chartsMenuEdit', showMenu) : null;\n            case 'chartAdvancedSettings':\n                return this.createMenuItem(\n                    this.chartTranslationService.translate('chartAdvancedSettings'),\n                    'chartsMenuAdvancedSettings',\n                    () => this.chartMenuService.openAdvancedSettings(chartMenuContext, eventSource)\n                );\n            case 'chartUnlink':\n                return chartMenuContext.chartController.isChartLinked() ? this.createMenuItem(\n                    this.chartTranslationService.translate('chartUnlink'),\n                    'unlinked',\n                    () => this.chartMenuService.toggleLinked(chartMenuContext)\n                ) : null;\n            case 'chartLink':\n                return !chartMenuContext.chartController.isChartLinked() ? this.createMenuItem(\n                    this.chartTranslationService.translate('chartLink'),\n                    'linked',\n                    () => this.chartMenuService.toggleLinked(chartMenuContext)\n                ) : null;\n            case 'chartDownload':\n                return this.createMenuItem(\n                    this.chartTranslationService.translate('chartDownload'),\n                    'save',\n                    () => this.chartMenuService.downloadChart(chartMenuContext)\n                );\n        }\n        return null;\n    }\n\n    private createMenuItem(name: string, iconName: string, action: () => void): MenuItemDef {\n        return {\n            name,\n            icon: _.createIconNoSpan(iconName, this.gridOptionsService, null),\n            action\n        }\n    }\n\n    protected destroy(): void {\n        this.destroyBean(this.activeChartMenuList);\n        super.destroy();\n    }\n}\n\nclass ChartMenuList extends Component {\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    @RefSelector('eChartsMenu') private readonly eChartsMenu: HTMLElement;\n\n    private hidePopupFunc: () => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(private readonly menuItems: (MenuItemDef | string)[]) {\n        super(/* html */`\n            <div ref=\"eChartsMenu\" role=\"presentation\" class=\"ag-menu ag-chart-menu-popup\"></div>\n        `);\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.mainMenuList = this.createManagedBean(new AgMenuList(0));\n        this.mainMenuList.addMenuItems(this.menuItems);\n        this.mainMenuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, this.onHidePopup.bind(this));\n        this.eChartsMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(): void {\n        this.hidePopupFunc?.();\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}", "import {\n    AgDialog,\n    Autowired,\n    Bean,\n    BeanStub,\n    FocusService,\n    PostConstruct,\n    TabGuardComp\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../services/chartTranslationService\";\nimport { ChartMenuContext } from \"../chartMenuContext\";\nimport { AdvancedSettingsPanel } from \"./advancedSettingsPanel\";\n\n@Bean('advancedSettingsMenuFactory')\nexport class AdvancedSettingsMenuFactory extends BeanStub {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private activeMenu?: AdvancedSettingsMenu;\n    private activeDialog?: AgDialog;\n\n    public showMenu(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.hideMenu();\n\n        const menu = this.createBean(new AdvancedSettingsMenu(chartMenuContext));\n     \n        this.activeDialog = this.createBean(new AgDialog({\n            title: this.chartTranslationService.translate('advancedSettings'),\n            component: menu,\n            width: 300,\n            height: 400,\n            resizable: true,\n            movable: true,\n            centered: true,\n            closable: true,\n            afterGuiAttached: () => {\n                this.focusService.findFocusableElements(menu.getGui())[0]?.focus();\n            },\n            closedCallback: () => {\n                this.activeMenu = this.destroyBean(this.activeMenu);\n                this.activeDialog = undefined;\n                eventSource?.focus({ preventScroll: true });\n            }\n        }));\n\n        this.activeMenu = menu;\n    }\n\n    public hideMenu(): void {\n        if (this.activeDialog) {\n            this.destroyBean(this.activeDialog);\n        }\n    }\n\n    protected destroy(): void {\n        this.activeMenu = this.destroyBean(this.activeMenu);\n        this.activeDialog = this.destroyBean(this.activeDialog);\n        super.destroy();\n    }\n}\n\nclass AdvancedSettingsMenu extends TabGuardComp {\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private static TEMPLATE = /* html */`<div class=\"ag-chart-advanced-settings\"></div>`;\n\n    private advancedSettingsPanel: AdvancedSettingsPanel;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(AdvancedSettingsMenu.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.advancedSettingsPanel = this.createManagedBean(new AdvancedSettingsPanel(this.chartMenuContext));\n        this.getGui().appendChild(this.advancedSettingsPanel.getGui());\n        this.initialiseTabGuard({\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            focusTrapActive: true\n        });\n\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) { return; }\n\n        e.preventDefault();\n\n        const backwards = e.shiftKey;\n        const panelGui = this.advancedSettingsPanel.getGui();\n        const nextEl = this.focusService.findNextFocusableElement(panelGui, false, backwards);\n\n        if (nextEl) {\n            nextEl.focus();\n        } else {\n            const focusableElements = this.focusService.findFocusableElements(panelGui);\n            if (focusableElements.length) {\n                focusableElements[backwards ? focusableElements.length - 1 : 0].focus();\n            }\n        }\n    }\n}\n", "import {\n    ChartType,\n    Component,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartSeriesType } from \"../../utils/seriesTypeMapper\";\nimport { ChartMenuContext } from \"../chartMenuContext\";\nimport { ChartPanelFeature } from \"../chartPanelFeature\";\nimport { AnimationPanel } from \"./interactivity/animationPanel\";\nimport { CrosshairPanel } from \"./interactivity/crosshairPanel\";\nimport { NavigatorPanel } from \"./interactivity/navigatorPanel\";\nimport { ZoomPanel } from \"./interactivity/zoomPanel\";\n\ntype ChartInteractivityGroup = 'navigator' | 'zoom' | 'animation' | 'crosshair';\n\nconst INTERACTIVITY_GROUPS: ChartInteractivityGroup[] = ['navigator', 'zoom', 'animation', 'crosshair'];\n\nconst DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS: ChartInteractivityGroup[] = ['navigator', 'zoom', 'crosshair'];\n\nconst SUPPORTED_GROUP_PANELS: { [T in ChartSeriesType]?: ChartInteractivityGroup[] } = {\n    'cartesian': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'column': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'bar': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'line': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'area': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'scatter': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'histogram': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'bubble': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'range-bar': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'range-area': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'box-plot': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'waterfall': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n};\n\nexport class AdvancedSettingsPanel extends Component {\n    private static TEMPLATE = /* html */`<div class=\"ag-chart-advanced-settings-wrapper\"></div>`;\n\n    private chartPanelFeature: ChartPanelFeature;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(AdvancedSettingsPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.chartPanelFeature = this.createManagedBean(new ChartPanelFeature(\n            this.chartMenuContext.chartController,\n            this.getGui(),\n            'ag-chart-advanced-settings-section',\n            (chartType, seriesType) => this.createPanels(chartType, seriesType)\n        ));\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(chartType: ChartType, seriesType: ChartSeriesType): void {\n        INTERACTIVITY_GROUPS.forEach(group => {\n            if (!this.isGroupPanelShownForSeries(group, seriesType)) {\n                return;\n            }\n\n            const comp = this.createPanel(group);\n            if (comp) {\n                this.chartPanelFeature.addComponent(comp);\n            }\n        });\n    }\n\n    private isGroupPanelShownForSeries(group: ChartInteractivityGroup, seriesType: ChartSeriesType): boolean {\n        if (group === 'animation') {\n            return true;\n        }\n\n        return SUPPORTED_GROUP_PANELS[seriesType]?.includes(group) ?? false;\n    }\n\n    private createPanel(group: string): Component | null {\n        const { chartMenuParamsFactory, chartAxisMenuParamsFactory } = this.chartMenuContext;\n        switch (group) {\n            case 'navigator':\n                return new NavigatorPanel(chartMenuParamsFactory);\n            case 'zoom':\n                return new ZoomPanel(chartMenuParamsFactory);\n            case 'animation':\n                return new AnimationPanel(chartMenuParamsFactory);\n            case 'crosshair':\n                return new CrosshairPanel(chartAxisMenuParamsFactory);\n        }\n        _.warnOnce(`Invalid charts advanced settings group name supplied: '${group}'`);\n        return null;\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class AnimationPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"animationGroup\">\n                <ag-input-number-field ref=\"animationHeightInput\"></ag-input>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const animationGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'animation.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"animation\"),\n                suppressEnabledCheckbox: true,\n                useToggle: true\n            }\n        );\n        const animationHeightInputParams = this.chartMenuParamsFactory.getDefaultNumberInputParams(\"animation.duration\", \"durationMillis\", {\n            min: 0,\n        });\n        this.setTemplate(AnimationPanel.TEMPLATE, {\n            animationGroup: animationGroupParams,\n            animationHeightInput: animationHeightInputParams\n        });\n    }\n}\n\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class CrosshairPanel extends Component {\n    public static TEMPLATE = /* html */ `<div>\n            <ag-group-component ref=\"crosshairGroup\">\n                <ag-checkbox ref=\"crosshairLabelCheckbox\"></ag-checkbox>\n                <ag-checkbox ref=\"crosshairSnapCheckbox\"></ag-checkbox>\n                <ag-color-picker ref=\"crosshairStrokeColorPicker\"></ag-color-picker>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const crosshairGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>('crosshair.enabled', {\n            cssIdentifier: 'charts-advanced-settings-top-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('crosshair'),\n            suppressEnabledCheckbox: true,\n            useToggle: true\n        });\n        const crosshairLabelCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.label.enabled',\n            'crosshairLabel'\n        );\n        const crosshairSnapCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.snap',\n            'crosshairSnap'\n        );\n        const crosshairStrokeColorPickerParams = this.chartMenuParamsFactory.getDefaultColorPickerParams(\n            'crosshair.stroke',\n            'color'\n        );\n        this.setTemplate(CrosshairPanel.TEMPLATE, {\n            crosshairGroup: crosshairGroupParams,\n            crosshairLabelCheckbox: crosshairLabelCheckboxParams,\n            crosshairSnapCheckbox: crosshairSnapCheckboxParams,\n            crosshairStrokeColorPicker: crosshairStrokeColorPickerParams\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class NavigatorPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"navigatorGroup\">\n                <ag-slider ref=\"navigatorHeightSlider\"></ag-slider>\n                <ag-checkbox ref=\"navigatorMiniChartCheckbox\"></ag-checkbox>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const navigatorGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'navigator.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"navigator\"),\n                suppressEnabledCheckbox: true,\n                useToggle: true\n            }\n        );\n        const navigatorHeightSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\"navigator.height\", \"height\", 60);\n        navigatorHeightSliderParams.minValue = 10;\n        const navigatorMiniChartCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\"navigator.miniChart.enabled\", \"miniChart\");\n\n        this.setTemplate(NavigatorPanel.TEMPLATE, {\n            navigatorGroup: navigatorGroupParams,\n            navigatorHeightSlider: navigatorHeightSliderParams,\n            navigatorMiniChartCheckbox: navigatorMiniChartCheckboxParams\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSlider,\n    Autowired,\n    Component,\n    PostConstruct,\n    RefSelector,\n} from '@ag-grid-community/core';\nimport { ChartTranslationService } from '../../../services/chartTranslationService';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ZoomPanel extends Component {\n    public static TEMPLATE = /* html */ `<div>\n            <ag-group-component ref=\"zoomGroup\">\n                <ag-checkbox ref=\"zoomSelectingCheckbox\"></ag-checkbox>\n                <ag-checkbox ref=\"zoomScrollingCheckbox\"></ag-checkbox>\n                <ag-slider ref=\"zoomScrollingStepInput\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    @RefSelector('zoomScrollingStepInput') private readonly zoomScrollingStepInput: AgSlider;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const zoomGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>('zoom.enabled', {\n            cssIdentifier: 'charts-advanced-settings-top-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('zoom'),\n            suppressEnabledCheckbox: true,\n            useToggle: true\n        });\n        const zoomScrollingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableScrolling',\n            'scrollingZoom'\n        );\n        const zoomScrollingStepSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\n            'zoom.scrollingStep',\n            'scrollingStep',\n            1,\n        );\n        zoomScrollingStepSliderParams.step = 0.01;\n        zoomScrollingStepSliderParams.minValue = zoomScrollingStepSliderParams.step;\n        const zoomSelectingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableSelecting',\n            'selectingZoom'\n        );\n\n        // Enable/disable the scrolling step input according to whether the scrolling checkbox is checked\n        zoomScrollingCheckboxParams.onValueChange = ((onValueChange) => (value: boolean) => {\n            if (!onValueChange) return;\n            onValueChange(value);\n            this.zoomScrollingStepInput.setDisabled(!value);\n        })(zoomScrollingCheckboxParams.onValueChange);\n\n        this.setTemplate(ZoomPanel.TEMPLATE, {\n            zoomGroup: zoomGroupParams,\n            zoomScrollingCheckbox: zoomScrollingCheckboxParams,\n            zoomScrollingStepInput: zoomScrollingStepSliderParams,\n            zoomSelectingCheckbox: zoomSelectingCheckboxParams,\n        });\n\n        // Set the initial state of the scrolling step input according to whether the scrolling checkbox is checked\n        this.zoomScrollingStepInput.setDisabled(!zoomScrollingCheckboxParams.value);\n    }\n}\n", "import * as agCharts from 'ag-charts-community';\n\n/*\n* grid-packages/ag-grid-enterprise is dependant on this file - if changes are made here (esp to it's path)\n* then be sure to check if grid-packages/ag-grid-enterprise/gulpfile.js#copyAndConcatMainTypings needs to be updated too\n*/\ndeclare module '@ag-grid-community/core' {\n    export interface AgChartThemeOverrides extends agCharts.AgChartThemeOverrides {}\n    export interface AgChartThemePalette extends agCharts.AgChartThemePalette {}\n    export interface AgChartThemeDefinition extends agCharts.AgChartTheme {}\n}\n\n/**\n * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7\n */\n export const __FORCE_MODULE_DETECTION_AG_GRID_CORE_EXT = 0;\n", "export { GridChartsModule } from \"./gridChartsModule\";\nexport * from './agGridCoreExtension';\nimport { time, AgChart } from \"ag-charts-community\";\n\nexport * from \"ag-charts-community\";\n\nexport const agCharts = {\n    time,\n    AgChart\n}\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { RangeService } from \"./rangeSelection/rangeService\";\nimport { FillHandle } from \"./rangeSelection/fillHandle\";\nimport { RangeHandle } from \"./rangeSelection/rangeHandle\";\nimport { SelectionHandleFactory } from \"./rangeSelection/selectionHandleFactory\";\nimport { VERSION } from \"./version\";\n\nexport const RangeSelectionModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RangeSelectionModule,\n    beans: [RangeService, SelectionHandleFactory],\n    agStackComponents: [\n        { componentName: 'AgFillHandle', componentClass: FillHandle },\n        { componentName: 'AgRangeHandle', componentClass: RangeHandle }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Bean,\n    CellNavigationService,\n    CellPosition,\n    CellPositionUtils,\n    Column,\n    ColumnModel,\n    Events,\n    IRangeService,\n    IRowModel,\n    CellRangeParams,\n    PostConstruct,\n    CellRange,\n    RangeSelectionChangedEvent,\n    RowPosition,\n    RowPositionUtils,\n    PinnedRowModel,\n    BeanStub,\n    CtrlsService,\n    AutoScrollService,\n    RowPinnedType,\n    WithoutGridCommon,\n    DragService,\n    CellCtrl,\n    _,\n    ClearCellRangeParams,\n    RangeDeleteStartEvent,\n    RangeDeleteEndEvent\n} from \"@ag-grid-community/core\";\n\n@Bean('rangeService')\nexport class RangeService extends BeanStub implements IRangeService {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('cellNavigationService') private cellNavigationService: CellNavigationService;\n    @Autowired(\"pinnedRowModel\") private pinnedRowModel: PinnedRowModel;\n    @Autowired('rowPositionUtils') public rowPositionUtils: RowPositionUtils;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private cellRanges: CellRange[] = [];\n    private lastMouseEvent: MouseEvent | null;\n    private bodyScrollListener = this.onBodyScroll.bind(this);\n\n    private lastCellHovered: CellPosition | undefined;\n    private cellHasChanged: boolean;\n\n    // when a range is created, we mark the 'start cell' for further processing as follows:\n    // 1) if dragging, then the new range is extended from the start position\n    // 2) if user hits 'shift' click on a cell, the previous range is extended from the start position\n    private newestRangeStartCell?: CellPosition;\n\n    private dragging = false;\n    private draggingRange?: CellRange;\n\n    private intersectionRange = false; // When dragging ends, the current range will be used to intersect all other ranges\n\n    public autoScrollService: AutoScrollService;\n\n    @PostConstruct\n    private init(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.onColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.removeAllCellRanges());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.removeAllCellRanges());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.removeAllCellRanges());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.refreshLastRangeStart.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.refreshLastRangeStart.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.refreshLastRangeStart.bind(this));\n\n        this.ctrlsService.whenReady(() => {\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCtrl.getBodyViewportElement()!,\n                scrollAxis: 'xy',\n                getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n                getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n                setHorizontalPosition: (position) => gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n                shouldSkipVerticalScroll: () => !this.gridOptionsService.isDomLayout('normal'),\n                shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing()\n            });\n        });\n    }\n\n    // Called for both columns loaded & column visibility events\n    public onColumnsChanged(): void {\n        // first move start column in last cell range (i.e. series chart range)\n        this.refreshLastRangeStart();\n\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n\n        // check that the columns in each range still exist and are visible\n        this.cellRanges.forEach(cellRange => {\n            const beforeCols = cellRange.columns;\n\n            // remove hidden or removed cols from cell range\n            cellRange.columns = cellRange.columns.filter(\n                col => col.isVisible() && allColumns.indexOf(col) !== -1\n            );\n\n            const colsInRangeChanged = !_.areEqual(beforeCols, cellRange.columns);\n\n            if (colsInRangeChanged) {\n                // notify users and other parts of grid (i.e. status panel) that range has changed\n                this.dispatchChangedEvent(false, true, cellRange.id);\n            }\n        });\n        // Remove empty cell ranges\n        const countBefore = this.cellRanges.length;\n        this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n        if (countBefore > this.cellRanges.length) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n\n    public refreshLastRangeStart(): void {\n        const lastRange = _.last(this.cellRanges);\n\n        if (!lastRange) { return; }\n\n        this.refreshRangeStart(lastRange);\n    }\n\n    public isContiguousRange(cellRange: CellRange): boolean {\n        const rangeColumns = cellRange.columns;\n\n        if (!rangeColumns.length) {\n            return false;\n        }\n\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const allPositions = rangeColumns.map(c => allColumns.indexOf(c)).sort((a, b) => a - b);\n\n        return _.last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n    }\n\n    public getRangeStartRow(cellRange: CellRange): RowPosition {\n        if (cellRange.startRow && cellRange.endRow) {\n            return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ?\n                cellRange.startRow : cellRange.endRow;\n        }\n\n        const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? 'top' : null;\n\n        return { rowIndex: 0, rowPinned };\n    }\n\n    public getRangeEndRow(cellRange: CellRange): RowPosition {\n        if (cellRange.startRow && cellRange.endRow) {\n            return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ?\n                cellRange.endRow : cellRange.startRow;\n        }\n\n        const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedBottom = pinnedBottomRowCount > 0;\n\n        if (pinnedBottom) {\n            return {\n                rowIndex: pinnedBottomRowCount - 1,\n                rowPinned: 'bottom'\n            };\n        }\n\n        return {\n            rowIndex: this.rowModel.getRowCount() - 1,\n            rowPinned: null\n        };\n    }\n\n    public setRangeToCell(cell: CellPosition, appendRange = false): void {\n        if (!this.gridOptionsService.get('enableRangeSelection')) { return; }\n\n        const columns = this.calculateColumnsBetween(cell.column, cell.column);\n\n        if (!columns) { return; }\n\n        const suppressMultiRangeSelections = this.gridOptionsService.get('suppressMultiRangeSelection');\n\n        // if not appending, then clear previous range selections\n        if (suppressMultiRangeSelections || !appendRange || _.missing(this.cellRanges)) {\n            this.removeAllCellRanges(true);\n        }\n\n        const rowForCell: RowPosition = {\n            rowIndex: cell.rowIndex,\n            rowPinned: cell.rowPinned\n        };\n\n        const cellRange = {\n            startRow: rowForCell,\n            endRow: rowForCell,\n            columns,\n            startColumn: cell.column\n        };\n\n        this.cellRanges.push(cellRange);\n\n        this.setNewestRangeStartCell(cell);\n        this.onDragStop();\n        this.dispatchChangedEvent(true, true);\n    }\n\n    public extendLatestRangeToCell(cellPosition: CellPosition): void {\n        if (this.isEmpty() || !this.newestRangeStartCell) { return; }\n\n        const cellRange = _.last(this.cellRanges);\n\n        this.updateRangeEnd(cellRange, cellPosition);\n    }\n\n    public updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent = false): void {\n        const endColumn = cellPosition.column;\n        const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);\n\n        if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n            return;\n        }\n\n        cellRange.columns = colsToAdd;\n        cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n\n        if (!silent) {\n            this.dispatchChangedEvent(true, true, cellRange.id);\n        }\n    }\n\n    private refreshRangeStart(cellRange: CellRange) {\n        const { startColumn, columns } = cellRange;\n\n        const moveColInCellRange = (colToMove: Column, moveToFront: boolean) => {\n            const otherCols = cellRange.columns.filter(col => col !== colToMove);\n\n            if (colToMove) {\n                cellRange.startColumn = colToMove;\n                cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n            } else {\n                cellRange.columns = otherCols;\n            }\n        };\n\n        const { left, right } = this.getRangeEdgeColumns(cellRange);\n        const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n\n        if (shouldMoveLeftCol) {\n            moveColInCellRange(left, true);\n            return;\n        }\n\n        const shouldMoveRightCol = startColumn === _.last(columns) && startColumn === right;\n\n        if (shouldMoveRightCol) {\n            moveColInCellRange(right, false);\n            return;\n        }\n    }\n\n    public getRangeEdgeColumns(cellRange: CellRange): { left: Column, right: Column; } {\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const allIndices = cellRange.columns\n            .map(c => allColumns.indexOf(c))\n            .filter(i => i > -1)\n            .sort((a, b) => a - b);\n\n        return {\n            left: allColumns[allIndices[0]],\n            right: allColumns[_.last(allIndices)!]\n        };\n    }\n\n    // returns true if successful, false if not successful\n    public extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined {\n        if (this.isEmpty() || !this.newestRangeStartCell) { return; }\n\n        const key = event.key;\n        const ctrlKey = event.ctrlKey || event.metaKey;\n\n        const lastRange = _.last(this.cellRanges)!;\n        const startCell = this.newestRangeStartCell;\n        const firstCol = lastRange.columns[0];\n        const lastCol = _.last(lastRange.columns)!;\n\n        // find the cell that is at the furthest away corner from the starting cell\n        const endCellIndex = lastRange.endRow!.rowIndex;\n        const endCellFloating = lastRange.endRow!.rowPinned;\n        const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n\n        const endCell: CellPosition = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n        const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n\n        // if user is at end of grid, so no cell to extend to, we return false\n        if (!newEndCell) { return; }\n\n        this.setCellRange({\n            rowStartIndex: startCell.rowIndex,\n            rowStartPinned: startCell.rowPinned,\n            rowEndIndex: newEndCell.rowIndex,\n            rowEndPinned: newEndCell.rowPinned,\n            columnStart: startCell.column,\n            columnEnd: newEndCell.column\n        });\n\n        return newEndCell;\n    }\n\n    public setCellRange(params: CellRangeParams): void {\n        if (!this.gridOptionsService.get('enableRangeSelection')) {\n            return;\n        }\n\n        this.removeAllCellRanges(true);\n        this.addCellRange(params);\n    }\n\n    public setCellRanges(cellRanges: CellRange[]): void {\n        if (_.shallowCompare(this.cellRanges, cellRanges)) { return; }\n\n        this.removeAllCellRanges(true);\n\n        cellRanges.forEach(newRange => {\n            if (newRange.columns && newRange.startRow) {\n                this.setNewestRangeStartCell({\n                    rowIndex: newRange.startRow.rowIndex,\n                    rowPinned: newRange.startRow.rowPinned,\n                    column: newRange.columns[0]\n                });\n            }\n\n            this.cellRanges.push(newRange);\n        });\n\n        this.dispatchChangedEvent(false, true);\n    }\n\n    private setNewestRangeStartCell(position: CellPosition) {\n        this.newestRangeStartCell = position;\n    }\n\n    public clearCellRangeCellValues(params: ClearCellRangeParams): void {\n        let { cellRanges } = params;\n        const {\n            cellEventSource = 'rangeService',\n            dispatchWrapperEvents,\n            wrapperEventSource = 'deleteKey'\n        } = params;\n\n        if (dispatchWrapperEvents) {\n            const startEvent: WithoutGridCommon<RangeDeleteStartEvent> = {\n                type: Events.EVENT_RANGE_DELETE_START,\n                source: wrapperEventSource\n            };\n            this.eventService.dispatchEvent(startEvent);\n        }\n\n        if (!cellRanges) { cellRanges = this.cellRanges; }\n\n        cellRanges.forEach(cellRange => {\n            this.forEachRowInRange(cellRange, rowPosition => {\n                const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n                if (!rowNode) { return; }\n                for (let i = 0; i < cellRange.columns.length; i++) {\n                    const column = this.columnModel.getGridColumn(cellRange.columns[i]);\n                    if (!column || !column.isCellEditable(rowNode)) { continue; }\n                    rowNode.setDataValue(column, null, cellEventSource);\n                }\n            });\n        });\n\n        if (dispatchWrapperEvents) {\n            const endEvent: WithoutGridCommon<RangeDeleteEndEvent> = {\n                type: Events.EVENT_RANGE_DELETE_END,\n                source: wrapperEventSource\n            };\n            this.eventService.dispatchEvent(endEvent);\n        }\n    }\n\n    public createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined {\n        let columns: Column[] | undefined;\n        let startsOnTheRight: boolean = false;\n\n        if (params.columns) {\n            columns = params.columns.map(c => this.columnModel.getColumnWithValidation(c)!).filter(c => c);\n        } else {\n            const columnStart = this.columnModel.getColumnWithValidation(params.columnStart);\n            const columnEnd = this.columnModel.getColumnWithValidation(params.columnEnd);\n\n            if (!columnStart || !columnEnd) {\n                return;\n            }\n\n            columns = this.calculateColumnsBetween(columnStart, columnEnd);\n\n            if (columns && columns.length) {\n                startsOnTheRight = columns[0] !== columnStart;\n            }\n        }\n\n        if (!columns) {\n            return;\n        }\n\n        const startRow = params.rowStartIndex != null ? {\n            rowIndex: params.rowStartIndex,\n            rowPinned: params.rowStartPinned || null\n        } : undefined;\n\n        const endRow = params.rowEndIndex != null ? {\n            rowIndex: params.rowEndIndex,\n            rowPinned: params.rowEndPinned || null\n        } : undefined;\n\n        return {\n            startRow,\n            endRow,\n            columns,\n            startColumn: startsOnTheRight ? _.last(columns) : columns[0]\n        };\n    }\n\n    public addCellRange(params: CellRangeParams): void {\n        if (!this.gridOptionsService.get('enableRangeSelection')) {\n            return;\n        }\n\n        const newRange = this.createCellRangeFromCellRangeParams(params);\n\n        if (newRange) {\n            if (newRange.startRow) {\n                this.setNewestRangeStartCell({\n                    rowIndex: newRange.startRow.rowIndex,\n                    rowPinned: newRange.startRow.rowPinned,\n                    column: newRange.startColumn\n                });\n            }\n            \n            this.cellRanges.push(newRange);\n            this.dispatchChangedEvent(false, true, newRange.id);\n        }\n    }\n\n    public getCellRanges(): CellRange[] {\n        return this.cellRanges;\n    }\n\n    public isEmpty(): boolean {\n        return this.cellRanges.length === 0;\n    }\n\n    public isMoreThanOneCell(): boolean {\n        const len = this.cellRanges.length;\n        \n        if (len === 0) {\n            return false;\n        }\n        if (len > 1) {\n            return true; // Assumes a cell range must contain at least one cell\n        }\n\n        // only one range, return true if range has more than one\n        const range = this.cellRanges[0];\n        const startRow = this.getRangeStartRow(range);\n        const endRow = this.getRangeEndRow(range);\n\n        return startRow.rowPinned !== endRow.rowPinned ||\n            startRow.rowIndex !== endRow.rowIndex ||\n            range.columns.length !== 1;\n    }\n\n    public areAllRangesAbleToMerge(): boolean {\n        const rowToColumnMap: Map<string, string[]> = new Map();\n        const len = this.cellRanges.length;\n\n        if (len <= 1) return true;\n\n        this.cellRanges.forEach(range => {\n            this.forEachRowInRange(range, row => {\n                const rowName = `${row.rowPinned || 'normal'}_${row.rowIndex}`;\n                const columns = rowToColumnMap.get(rowName);\n                const currentRangeColIds = range.columns.map(col => col.getId());\n                if (columns) {\n                    const filteredColumns = currentRangeColIds.filter(col => columns.indexOf(col) === -1);\n                    columns.push(...filteredColumns)\n                } else {\n                    rowToColumnMap.set(rowName, currentRangeColIds);\n                }\n            });\n        });\n\n        let columnsString: string | undefined;\n\n        for (const val of rowToColumnMap.values()) {\n            const currentValString = val.sort().join();\n            if (columnsString === undefined) {\n                columnsString = currentValString;\n                continue;\n            }\n            if (columnsString !== currentValString) { return false; }\n        }\n\n        return true;\n    }\n\n    private forEachRowInRange(cellRange: CellRange, callback: (row: RowPosition) => void) {\n        const topRow = this.getRangeStartRow(cellRange);\n        const bottomRow = this.getRangeEndRow(cellRange);\n        let currentRow: RowPosition | null = topRow;\n        \n        while (currentRow) {\n            callback(currentRow);\n\n            if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) { break; }\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    }\n\n    public removeAllCellRanges(silent?: boolean): void {\n        if (this.isEmpty()) { return; }\n\n        this.onDragStop();\n        this.cellRanges.length = 0;\n\n        if (!silent) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n\n    // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n    // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n    // the selection my mimicking a new mouse event\n    private onBodyScroll(): void {\n        if (this.dragging && this.lastMouseEvent) {\n            this.onDragging(this.lastMouseEvent);\n        }\n    }\n\n    public isCellInAnyRange(cell: CellPosition): boolean {\n        return this.getCellRangeCount(cell) > 0;\n    }\n\n    public isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean {\n        const columnInRange = range.columns !== null && _.includes(range.columns, cell.column);\n        const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n\n        return columnInRange && rowInRange;\n    }\n\n    private isLastCellOfRange(cellRange: CellRange, cell: CellPosition): boolean {\n        const { startRow, endRow } = cellRange;\n        const lastRow = this.rowPositionUtils.before(startRow!, endRow!) ? endRow : startRow;\n        const isLastRow = cell.rowIndex === lastRow!.rowIndex && cell.rowPinned === lastRow!.rowPinned;\n        const rangeFirstIndexColumn = cellRange.columns[0];\n        const rangeLastIndexColumn = _.last(cellRange.columns);\n        const lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n        const isLastColumn = cell.column === lastRangeColumn;\n\n        return isLastColumn && isLastRow;\n    }\n\n    public isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean {\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const allPositions = cellRange.columns.map(c => allColumns.indexOf(c)).sort((a, b) => a - b);\n        const { startRow, endRow } = cellRange;\n        const lastRow = this.rowPositionUtils.before(startRow!, endRow!) ? endRow : startRow;\n\n        const isRightColumn = allColumns.indexOf(cell.column) === _.last(allPositions);\n        const isLastRow = cell.rowIndex === lastRow!.rowIndex && _.makeNull(cell.rowPinned) === _.makeNull(lastRow!.rowPinned);\n\n        return isRightColumn && isLastRow;\n    }\n\n    // returns the number of ranges this cell is in\n    public getCellRangeCount(cell: CellPosition): number {\n        if (this.isEmpty()) {\n            return 0;\n        }\n\n        return this.cellRanges.filter(cellRange => this.isCellInSpecificRange(cell, cellRange)).length;\n    }\n\n    private isRowInRange(rowIndex: number, floating: RowPinnedType, cellRange: CellRange): boolean {\n        const firstRow = this.getRangeStartRow(cellRange);\n        const lastRow = this.getRangeEndRow(cellRange);\n        const thisRow: RowPosition = { rowIndex, rowPinned: floating || null };\n\n        // compare rowPinned with == instead of === because it can be `null` or `undefined`\n        const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n        const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n\n        if (equalsFirstRow || equalsLastRow) {\n            return true;\n        }\n\n        const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n        const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n\n        return afterFirstRow && beforeLastRow;\n    }\n\n    public getDraggingRange(): CellRange | undefined {\n        return this.draggingRange;\n    }\n\n    public onDragStart(mouseEvent: MouseEvent): void {\n        if (!this.gridOptionsService.get('enableRangeSelection')) { return; }\n\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n\n        // ctrlKey for windows, metaKey for Apple\n        const isMultiKey = ctrlKey || metaKey;\n        const allowMulti = !this.gridOptionsService.get('suppressMultiRangeSelection');\n        const isMultiSelect = allowMulti ? isMultiKey : false;\n        const extendRange = shiftKey && _.existsAndNotEmpty(this.cellRanges);\n\n        if (!isMultiSelect && (!extendRange || _.exists(_.last(this.cellRanges)!.type))) {\n            this.removeAllCellRanges(true);\n        }\n\n        // The browser changes the Event target of cached events when working with the ShadowDOM\n        // so we need to retrieve the initial DragStartTarget.\n        const startTarget = this.dragService.getStartTarget();\n\n        if (startTarget) {\n            this.updateValuesOnMove(startTarget);\n        }\n\n        if (!this.lastCellHovered) { return; }\n\n        this.dragging = true;\n        this.lastMouseEvent = mouseEvent;\n        this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n\n        if (!extendRange) {\n            this.setNewestRangeStartCell(this.lastCellHovered);\n        }\n\n        // if we didn't clear the ranges, then dragging means the user clicked, and when the\n        // user clicks it means a range of one cell was created. we need to extend this range\n        // rather than creating another range. otherwise we end up with two distinct ranges\n        // from a drag operation (one from click, and one from drag).\n        if (this.cellRanges.length > 0) {\n            this.draggingRange = _.last(this.cellRanges);\n        } else {\n            const mouseRowPosition: RowPosition = {\n                rowIndex: this.lastCellHovered.rowIndex,\n                rowPinned: this.lastCellHovered.rowPinned\n            };\n\n            this.draggingRange = {\n                startRow: mouseRowPosition,\n                endRow: mouseRowPosition,\n                columns: [this.lastCellHovered.column],\n                startColumn: this.newestRangeStartCell!.column\n            };\n\n            this.cellRanges.push(this.draggingRange);\n        }\n\n        this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n\n        this.dispatchChangedEvent(true, false, this.draggingRange.id);\n    }\n\n    public intersectLastRange(fromMouseClick?: boolean) {\n        // when ranges are created due to a mouse click without drag (happens in cellMouseListener)\n        // this method will be called with `fromMouseClick=true`.\n        if (fromMouseClick && this.dragging) { return; }\n        if (this.gridOptionsService.get('suppressMultiRangeSelection')) { return; }\n        if (this.isEmpty()) { return; }\n        \n        const lastRange = _.last(this.cellRanges);\n        \n        const intersectionStartRow = this.getRangeStartRow(lastRange);\n        const intersectionEndRow = this.getRangeEndRow(lastRange);\n\n        const newRanges: CellRange[] = []\n\n        this.cellRanges.slice(0, -1).forEach((range) => {\n            const startRow = this.getRangeStartRow(range);\n            const endRow = this.getRangeEndRow(range);\n            const cols = range.columns\n            const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n            if (intersectCols.length === cols.length) {\n                // No overlapping columns, retain previous range\n                newRanges.push(range);\n                return;\n            }\n            if (this.rowPositionUtils.before(intersectionEndRow, startRow) || this.rowPositionUtils.before(endRow, intersectionStartRow)) {\n                // No overlapping rows, retain previous range\n                newRanges.push(range);\n                return;\n            }\n            const rangeCountBefore =  newRanges.length;\n            // Top\n            if (this.rowPositionUtils.before(startRow, intersectionStartRow)) {\n                const top: CellRange = {\n                    columns: [...cols],\n                    startColumn: lastRange.startColumn,\n                    startRow: { ...startRow },\n                    endRow: this.cellNavigationService.getRowAbove(intersectionStartRow)!,\n                };\n                newRanges.push(top);\n            }\n            // Left & Right (not contiguous with columns)\n            if (intersectCols.length > 0) {\n                const middle: CellRange = {\n                    columns: intersectCols,\n                    startColumn: _.includes(intersectCols, lastRange.startColumn) ? lastRange.startColumn : intersectCols[0],\n                    startRow: this.rowPositionUtils.rowMax([{ ...intersectionStartRow }, { ...startRow }]),\n                    endRow: this.rowPositionUtils.rowMin([{ ...intersectionEndRow }, { ...endRow }]),\n                };\n                newRanges.push(middle);\n            }\n            // Bottom\n            if (this.rowPositionUtils.before(intersectionEndRow, endRow)) {\n                newRanges.push({\n                    columns: [...cols],\n                    startColumn: lastRange.startColumn,\n                    startRow: this.cellNavigationService.getRowBelow(intersectionEndRow)!,\n                    endRow: { ...endRow },\n                });\n            }\n            if ((newRanges.length - rangeCountBefore) === 1) {\n                // Only one range result from the intersection.\n                // Copy the source range's id, since essentially we just reduced it's size\n                newRanges[newRanges.length -1].id = range.id;\n            }\n        });\n        this.cellRanges = newRanges;\n\n        // when this is called because of a clickEvent and the ranges were changed\n        // we need to force a dragEnd event to update the UI.\n        if (fromMouseClick) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n    \n    private updateValuesOnMove(eventTarget: EventTarget | null) {\n        const cellCtrl = _.getCtrlForEventTarget<CellCtrl>(this.gridOptionsService, eventTarget, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const cell = cellCtrl?.getCellPosition();\n\n        this.cellHasChanged = false;\n\n        if (!cell || (this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered))) { return; }\n\n        if (this.lastCellHovered) {\n            this.cellHasChanged = true;\n        }\n\n        this.lastCellHovered = cell;\n    }\n\n    public onDragging(mouseEvent: MouseEvent | null): void {\n        if (!this.dragging || !mouseEvent) { return; }\n\n        this.updateValuesOnMove(mouseEvent.target);\n\n        this.lastMouseEvent = mouseEvent;\n\n        const cellPosition = this.lastCellHovered!;\n        const isMouseAndStartInPinned = (position: string) =>\n            cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell!.rowPinned === position;\n\n        const skipVerticalScroll = isMouseAndStartInPinned('top') || isMouseAndStartInPinned('bottom');\n\n        this.autoScrollService.check(mouseEvent, skipVerticalScroll!);\n\n        if (!this.cellHasChanged) { return; }\n\n        const columns = this.calculateColumnsBetween(this.newestRangeStartCell!.column, cellPosition.column);\n\n        if (!columns) { return; }\n\n        this.draggingRange!.endRow = {\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned\n        };\n\n        this.draggingRange!.columns = columns;\n\n        this.dispatchChangedEvent(false, false, this.draggingRange!.id);\n    }\n\n    public onDragStop(): void {\n        if (!this.dragging) { return; }\n\n        const { id } = this.draggingRange!;\n\n        this.autoScrollService.ensureCleared();\n\n        this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n        this.lastMouseEvent = null;\n        this.dragging = false;\n        this.draggingRange = undefined;\n        this.lastCellHovered = undefined;\n\n        if (this.intersectionRange) {\n            this.intersectionRange = false;\n            this.intersectLastRange();\n        }\n\n        this.dispatchChangedEvent(false, true, id);\n    }\n\n    private dispatchChangedEvent(started: boolean, finished: boolean, id?: string): void {\n        const event: WithoutGridCommon<RangeSelectionChangedEvent> = {\n            type: Events.EVENT_RANGE_SELECTION_CHANGED,\n            started,\n            finished,\n            id,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private calculateColumnsBetween(columnFrom: Column, columnTo: Column): Column[] | undefined {\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const isSameColumn = columnFrom === columnTo;\n        const fromIndex = allColumns.indexOf(columnFrom);\n\n        if (fromIndex < 0) {\n            console.warn(`AG Grid: column ${columnFrom.getId()} is not visible`);\n            return;\n        }\n\n        const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);\n\n        if (toIndex < 0) {\n            console.warn(`AG Grid: column ${columnTo.getId()} is not visible`);\n            return;\n        }\n\n        if (isSameColumn) {\n            return [columnFrom];\n        }\n\n        const firstIndex = Math.min(fromIndex, toIndex);\n        const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n        const columns: Column[] = [];\n\n        for (let i = firstIndex; i <= lastIndex; i++) {\n            columns.push(allColumns[i]);\n        }\n\n        return columns;\n    }\n}\n", "import {\n    Autowired,\n    CellPosition,\n    CellRange,\n    Column,\n    RowNode,\n    RowPosition,\n    ValueService,\n    Events,\n    FillEndEvent,\n    FillStartEvent,\n    SelectionHandleType,\n    _, CellCtrl,\n    FillOperationParams,\n    WithoutGridCommon,\n    ValueParserService,\n    ValueFormatterService\n} from '@ag-grid-community/core';\nimport { AbstractSelectionHandle } from \"./abstractSelectionHandle\";\nimport { findLineByLeastSquares } from './utils';\n\ninterface FillValues {\n    position: CellPosition;\n    value: any;\n}\n\ninterface ValueContext {\n    value: any;\n    column: Column;\n    rowNode: RowNode;\n}\n\ntype Direction = 'x' | 'y';\n\nexport class FillHandle extends AbstractSelectionHandle {\n\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n\n    static TEMPLATE = /* html */ `<div class=\"ag-fill-handle\"></div>`;\n\n    private initialPosition: CellPosition | undefined;\n    private initialXY: { x: number, y: number } | null;\n    private lastCellMarked: CellPosition | undefined;\n    private markedCells: CellCtrl[] = [];\n    private cellValues: FillValues[][] = [];\n\n    private dragAxis: Direction;\n    private isUp: boolean = false;\n    private isLeft: boolean = false;\n    private isReduce: boolean = false;\n\n    protected type = SelectionHandleType.FILL;\n\n    constructor() {\n        super(FillHandle.TEMPLATE);\n    }\n\n    protected updateValuesOnMove(e: MouseEvent) {\n        super.updateValuesOnMove(e);\n\n        if (!this.initialXY) {\n            this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n        }\n\n        const { x, y } = this.initialXY;\n        const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n        const diffX = Math.abs(x - newX);\n        const diffY = Math.abs(y - newY);\n        const allowedDirection = this.getFillHandleDirection();\n        let direction: Direction;\n\n        if (allowedDirection === 'xy') {\n            direction = diffX > diffY ? 'x' : 'y';\n        } else {\n            direction = allowedDirection;\n        }\n\n        if (direction !== this.dragAxis) {\n            this.dragAxis = direction;\n            this.changedCalculatedValues = true;\n        }\n    }\n\n    protected onDrag(e: MouseEvent) {\n        if (!this.initialPosition) {\n            const cellCtrl = this.getCellCtrl();\n            if (!cellCtrl) { return; }\n\n            this.initialPosition = cellCtrl.getCellPosition();\n        }\n\n        const lastCellHovered = this.getLastCellHovered();\n\n        if (lastCellHovered) {\n            this.markPathFrom(this.initialPosition, lastCellHovered);\n        }\n    }\n\n    protected onDragEnd(e: MouseEvent) {\n        this.initialXY = null;\n        if (!this.markedCells.length) { return; }\n\n        const isX = this.dragAxis === 'x';\n        const initialRange = this.getCellRange();\n        const colLen = initialRange.columns.length;\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n\n        let finalRange: CellRange | undefined;\n\n        if (!this.isUp && !this.isLeft) {\n            finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n                rowStartIndex: rangeStartRow.rowIndex,\n                rowStartPinned: rangeStartRow.rowPinned,\n                columnStart: initialRange.columns[0],\n                rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked!.rowIndex,\n                rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked!.rowPinned,\n                columnEnd: isX ? this.lastCellMarked!.column : initialRange.columns[colLen - 1]\n            });\n        } else {\n            const startRow = isX ? rangeStartRow : this.lastCellMarked;\n\n            finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n                rowStartIndex: startRow!.rowIndex,\n                rowStartPinned: startRow!.rowPinned,\n                columnStart: isX ? this.lastCellMarked!.column : initialRange.columns[0],\n                rowEndIndex: rangeEndRow.rowIndex,\n                rowEndPinned: rangeEndRow.rowPinned,\n                columnEnd: initialRange.columns[colLen - 1]\n            });\n        }\n\n        if (finalRange) {\n            // raising fill events for undo / redo\n            this.raiseFillStartEvent();\n\n            this.handleValueChanged(initialRange, finalRange, e);\n            this.rangeService.setCellRanges([finalRange]);\n\n            this.raiseFillEndEvent(initialRange, finalRange);\n        }\n    }\n\n    private getFillHandleDirection(): 'x' | 'y' | 'xy' {\n        const direction = this.gridOptionsService.get('fillHandleDirection');\n\n        if (!direction) { return 'xy'; }\n\n        if (direction !== 'x' && direction !== 'y' && direction !== 'xy') {\n            _.warnOnce(`valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`);\n            return 'xy';\n        }\n\n        return direction;\n    }\n\n    private raiseFillStartEvent() {\n        const fillStartEvent: WithoutGridCommon<FillStartEvent> = {\n            type: Events.EVENT_FILL_START\n        };\n        this.eventService.dispatchEvent(fillStartEvent);\n    }\n\n    private raiseFillEndEvent(initialRange: CellRange, finalRange: CellRange) {\n        const fillEndEvent: WithoutGridCommon<FillEndEvent> = {\n            type: Events.EVENT_FILL_END,\n            initialRange: initialRange,\n            finalRange: finalRange\n        };\n        this.eventService.dispatchEvent(fillEndEvent);\n    }\n\n    private handleValueChanged(initialRange: CellRange, finalRange: CellRange, e: MouseEvent) {\n        const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n        const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n        const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n        const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n        const isVertical = this.dragAxis === 'y';\n\n        // if the range is being reduced in size, all we need to do is\n        // clear the cells that are no longer part of the range\n        if (this.isReduce && !this.gridOptionsService.get('suppressClearOnFillReduction')) {\n            const columns = isVertical\n                ? initialRange.columns\n                : initialRange.columns.filter(col => finalRange.columns.indexOf(col) < 0);\n\n            const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n\n            if (startRow) {\n                this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n            }\n            return;\n        }\n\n        const values: ValueContext[] = [];\n        const initialValues: any[] = [];\n        const initialNonAggregatedValues: any[] = [];\n        const initialFormattedValues: any[] = [];\n\n        let withinInitialRange = true;\n        let idx = 0;\n\n        const resetValues = () => {\n            values.length = 0;\n            initialValues.length = 0;\n            initialNonAggregatedValues.length = 0;\n            initialFormattedValues.length = 0;\n            idx = 0;\n        };\n\n        const iterateAcrossCells = (column?: Column, columns?: Column[]) => {\n            let currentRow: RowPosition | undefined | null = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n            let finished = false;\n\n            if (isVertical) {\n                withinInitialRange = true;\n                resetValues();\n            }\n\n            while (!finished && currentRow) {\n                const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n                if (!rowNode) { break; }\n\n                if (isVertical && column) {\n                    fillValues(values, column, rowNode, () => {\n                        return !this.rowPositionUtils.sameRow(currentRow!, this.isUp ? initialRangeStartRow : initialRangeEndRow);\n                    });\n                } else if (columns) {\n                    withinInitialRange = true;\n                    resetValues();\n                    columns.forEach(col => fillValues(\n                        values, col, rowNode, () => col !== (this.isLeft ? initialRange.columns[0] : _.last(initialRange.columns))));\n                }\n\n                finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n\n                currentRow = this.isUp\n                    ? this.cellNavigationService.getRowAbove(currentRow)\n                    : this.cellNavigationService.getRowBelow(currentRow);\n            }\n        };\n\n        const fillValues = (currentValues: ValueContext[], col: Column, rowNode: RowNode, updateInitialSet: () => boolean) => {\n            let currentValue: any;\n            let skipValue: boolean = false;\n\n            if (withinInitialRange) {\n                currentValue = this.valueService.getValue(col, rowNode);\n                initialValues.push(currentValue);\n                initialNonAggregatedValues.push(this.valueService.getValue(col, rowNode, undefined, true));\n                initialFormattedValues.push(this.valueFormatterService.formatValue(col, rowNode, currentValue));\n                withinInitialRange = updateInitialSet();\n            } else {\n                const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues({\n                    event: e, \n                    values: currentValues,\n                    initialValues,\n                    initialNonAggregatedValues,\n                    initialFormattedValues,\n                    col,\n                    rowNode,\n                    idx: idx++\n                });\n\n                currentValue = value;\n                if (col.isCellEditable(rowNode)) {\n                    const cellValue = this.valueService.getValue(col, rowNode);\n\n                    if (!fromUserFunction) {\n                        if (sourceCol && sourceCol.getColDef()?.useValueFormatterForExport !== false) {\n                            currentValue = this.valueFormatterService.formatValue(sourceCol, sourceRowNode!, currentValue) ?? currentValue;\n                        }\n                        if (col.getColDef().useValueParserForImport !== false) {\n                            currentValue = this.valueParserService.parseValue(\n                                col,\n                                rowNode,\n                                // if no sourceCol, then currentValue is a number\n                                sourceCol ? currentValue : _.toStringOrNull(currentValue),\n                                cellValue\n                            );\n                        }\n                    }\n                    if (!fromUserFunction || cellValue !== currentValue) {\n                        rowNode.setDataValue(col, currentValue, 'rangeService');\n                    } else {\n                        skipValue = true;\n                    }\n                }\n            }\n\n            if (!skipValue) {\n                currentValues.push({\n                    value: currentValue,\n                    column: col,\n                    rowNode\n                });\n            }\n        };\n\n        if (isVertical) {\n            initialRange.columns.forEach(col => {\n                iterateAcrossCells(col);\n            });\n        } else {\n            const columns = this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns;\n            iterateAcrossCells(undefined, columns);\n        }\n    }\n\n    private clearCellsInRange(startRow: RowPosition, endRow: RowPosition, columns: Column[]) {\n        const cellRange: CellRange = {\n            startRow,\n            endRow,\n            columns,\n            startColumn: columns[0]\n        };\n        this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n    }\n\n    private processValues(params: {\n        event: MouseEvent,\n        values: ValueContext[],\n        initialValues: any[],\n        initialNonAggregatedValues: any[];\n        initialFormattedValues: any[],\n        col: Column,\n        rowNode: RowNode,\n        idx: number\n    }): { value: any, fromUserFunction: boolean, sourceCol?: Column, sourceRowNode?: RowNode } {\n        const { event, values, initialValues, initialNonAggregatedValues, initialFormattedValues, col, rowNode, idx } = params;\n\n        const userFillOperation = this.gridOptionsService.getCallback('fillOperation');\n        const isVertical = this.dragAxis === 'y';\n        let direction: 'up' | 'down' | 'left' | 'right';\n\n        if (isVertical) {\n            direction = this.isUp ? 'up' : 'down';\n        } else {\n            direction = this.isLeft ? 'left' : 'right';\n        }\n\n        if (userFillOperation) {\n            const params: WithoutGridCommon<FillOperationParams> = {\n                event,\n                values: values.map(({ value }) => value),\n                initialValues,\n                initialNonAggregatedValues,\n                initialFormattedValues,\n                currentIndex: idx,\n                currentCellValue: this.valueService.getValue(col, rowNode),\n                direction,\n                column: col,\n                rowNode: rowNode\n            };\n            const userResult = userFillOperation(params)\n            if (userResult !== false) {\n                return { value: userResult, fromUserFunction: true };\n            }\n        }\n\n        const allNumbers = !values.some(({ value }) => {\n            const asFloat = parseFloat(value);\n            return isNaN(asFloat) || asFloat.toString() !== value.toString();\n        });\n\n        // values should be copied in order if the alt key is pressed\n        // or if the values contain strings and numbers\n        // However, if we only have one initial value selected, and that\n        // value is a number and we are also pressing alt, then we should\n        // increment or decrement the value by 1 based on direction.\n        if (event.altKey || !allNumbers) {\n            if (allNumbers && initialValues.length === 1) {\n                const multiplier = (this.isUp || this.isLeft) ? -1 : 1;\n                return { value: parseFloat(_.last(values).value) + 1 * multiplier, fromUserFunction: false };\n            }\n            const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n            return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n        }\n\n        return { value: _.last(findLineByLeastSquares(values.map(({ value }) => Number(value)))), fromUserFunction: false };\n\n    }\n\n    protected clearValues() {\n        this.clearMarkedPath();\n        this.clearCellValues();\n\n        this.lastCellMarked = undefined;\n\n        super.clearValues();\n    }\n\n    private clearMarkedPath() {\n        this.markedCells.forEach(cell => {\n            if (!cell.isAlive()) { return; }\n            const comp = cell.getComp();\n            comp.addOrRemoveCssClass('ag-selection-fill-top', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-right', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-bottom', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-left', false);\n        });\n\n        this.markedCells.length = 0;\n\n        this.isUp = false;\n        this.isLeft = false;\n        this.isReduce = false;\n    }\n\n    private clearCellValues() {\n        this.cellValues.length = 0;\n    }\n\n    private markPathFrom(initialPosition: CellPosition, currentPosition: CellPosition) {\n        this.clearMarkedPath();\n        this.clearCellValues();\n\n        if (this.dragAxis === 'y') {\n            if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) { return; }\n\n            const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n            const rangeStartRow = this.getRangeStartRow();\n            const rangeEndRow = this.getRangeEndRow();\n\n            if (isBefore && (\n                (\n                    currentPosition.rowPinned == rangeStartRow.rowPinned &&\n                    currentPosition.rowIndex >= rangeStartRow.rowIndex\n                ) ||\n                (\n                    rangeStartRow.rowPinned != rangeEndRow.rowPinned &&\n                    currentPosition.rowPinned == rangeEndRow.rowPinned &&\n                    currentPosition.rowIndex <= rangeEndRow.rowIndex\n                )\n            )) {\n                this.reduceVertical(initialPosition, currentPosition);\n                this.isReduce = true;\n            } else {\n                this.extendVertical(initialPosition, currentPosition, isBefore);\n                this.isReduce = false;\n            }\n        } else {\n            const initialColumn = initialPosition.column;\n            const currentColumn = currentPosition.column;\n\n            if (initialColumn === currentColumn) { return; }\n            const displayedColumns = this.columnModel.getAllDisplayedColumns();\n            const initialIndex = displayedColumns.indexOf(initialColumn);\n            const currentIndex = displayedColumns.indexOf(currentColumn);\n\n            if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n                this.reduceHorizontal(initialPosition, currentPosition);\n                this.isReduce = true;\n            } else {\n                this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n                this.isReduce = false;\n            }\n        }\n        this.lastCellMarked = currentPosition;\n    }\n\n    private extendVertical(initialPosition: CellPosition, endPosition: CellPosition, isMovingUp?: boolean) {\n        const { navigationService, rangeService } = this;\n        let row: RowPosition | null = initialPosition;\n\n        do {\n            const cellRange = this.getCellRange();\n            const colLen = cellRange.columns.length;\n\n            for (let i = 0; i < colLen; i++) {\n                const column = cellRange.columns[i];\n                const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n                const cellPos = { ...rowPos, column };\n                const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n                const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n\n                if (isMovingUp) { this.isUp = true; }\n\n                if (!isInitialRow) {\n                    const cell = navigationService.getCellByPosition(cellPos);\n\n                    if (cell) {\n                        this.markedCells.push(cell);\n                        const cellCtrl = cell.getComp();\n\n                        if (!cellInRange) {\n                            cellCtrl.addOrRemoveCssClass('ag-selection-fill-left', i === 0);\n                            cellCtrl.addOrRemoveCssClass('ag-selection-fill-right', i === colLen - 1);\n                        }\n\n                        cellCtrl.addOrRemoveCssClass(\n                            isMovingUp ? 'ag-selection-fill-top' : 'ag-selection-fill-bottom',\n                            this.rowPositionUtils.sameRow(row, endPosition)\n                        );\n                    }\n                }\n            }\n\n            if (this.rowPositionUtils.sameRow(row, endPosition)) { break; }\n        } while (\n            // tslint:disable-next-line\n            row = isMovingUp\n                ? this.cellNavigationService.getRowAbove(row)\n                : this.cellNavigationService.getRowBelow(row)\n        );\n    }\n\n    private reduceVertical(initialPosition: CellPosition, endPosition: CellPosition) {\n        let row: RowPosition | null = initialPosition;\n\n        do {\n            const cellRange = this.getCellRange();\n            const colLen = cellRange.columns.length;\n            const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n\n            for (let i = 0; i < colLen; i++) {\n                const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n                const celPos = { ...rowPos, column: cellRange.columns[i] };\n                const cell = this.navigationService.getCellByPosition(celPos);\n\n                if (cell) {\n                    this.markedCells.push(cell);\n\n                    const cellComp = cell.getComp();\n\n                    cellComp.addOrRemoveCssClass(\n                        'ag-selection-fill-bottom',\n                        this.rowPositionUtils.sameRow(row, endPosition)\n                    );\n                }\n            }\n            if (isLastRow) { break; }\n            // tslint:disable-next-line\n        } while (row = this.cellNavigationService.getRowAbove(row));\n    }\n\n    private extendHorizontal(initialPosition: CellPosition, endPosition: CellPosition, isMovingLeft?: boolean) {\n        const allCols = this.columnModel.getAllDisplayedColumns();\n        const startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n        const endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);\n        const offset = isMovingLeft ? 0 : 1;\n\n        const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n\n        colsToMark.forEach(column => {\n            let row: RowPosition = rangeStartRow;\n            let isLastRow = false;\n\n            do {\n                isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n                const cell = this.navigationService.getCellByPosition({\n                    rowIndex: row.rowIndex,\n                    rowPinned: row.rowPinned,\n                    column: column\n                });\n\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-top', this.rowPositionUtils.sameRow(row, rangeStartRow));\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-bottom', this.rowPositionUtils.sameRow(row, rangeEndRow));\n                    if (isMovingLeft) {\n                        this.isLeft = true;\n                        cellComp.addOrRemoveCssClass('ag-selection-fill-left', column === colsToMark[0]);\n                    } else {\n                        cellComp.addOrRemoveCssClass('ag-selection-fill-right', column === _.last(colsToMark));\n                    }\n                }\n\n                row = this.cellNavigationService.getRowBelow(row)!;\n            } while (!isLastRow);\n        });\n    }\n\n    private reduceHorizontal(initialPosition: CellPosition, endPosition: CellPosition) {\n        const allCols = this.columnModel.getAllDisplayedColumns();\n        const startCol = allCols.indexOf(endPosition.column);\n        const endCol = allCols.indexOf(initialPosition.column);\n\n        const colsToMark = allCols.slice(startCol, endCol);\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n\n        colsToMark.forEach(column => {\n            let row: RowPosition = rangeStartRow;\n            let isLastRow: boolean = false;\n\n            do {\n                isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n                const cell = this.navigationService.getCellByPosition({\n                    rowIndex: row.rowIndex,\n                    rowPinned: row.rowPinned,\n                    column: column\n                });\n\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-right', column === colsToMark[0]);\n                }\n\n                row = this.cellNavigationService.getRowBelow(row)!;\n            }\n            while (!isLastRow);\n        });\n    }\n\n    public refresh(cellCtrl: CellCtrl) {\n        const cellRange = this.rangeService.getCellRanges()[0];\n        const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n\n        if (isColumnRange) {\n            this.destroy();\n            return;\n        }\n\n        super.refresh(cellCtrl);\n    }\n}\n", "import {\n    Autowired,\n    CellCtrl,\n    RowRenderer,\n    DragService,\n    Component,\n    MouseEventService,\n    ColumnModel,\n    CellNavigationService,\n    CellRange,\n    RowPosition,\n    CellPosition,\n    PostConstruct,\n    ISelectionHandle,\n    RowPositionUtils,\n    _,\n    SelectionHandleType,\n    NavigationService,\n    CtrlsService,\n    CellPositionUtils\n} from \"@ag-grid-community/core\";\nimport { RangeService } from \"./rangeService\";\n\nexport abstract class AbstractSelectionHandle extends Component implements ISelectionHandle {\n\n    @Autowired(\"rowRenderer\") protected rowRenderer: RowRenderer;\n    @Autowired(\"dragService\") protected dragService: DragService;\n    @Autowired(\"rangeService\") protected rangeService: RangeService;\n    @Autowired(\"mouseEventService\") protected mouseEventService: MouseEventService;\n    @Autowired(\"columnModel\") protected columnModel: ColumnModel;\n    @Autowired(\"cellNavigationService\") protected cellNavigationService: CellNavigationService;\n    @Autowired(\"navigationService\") protected navigationService: NavigationService;\n    @Autowired('rowPositionUtils') protected rowPositionUtils: RowPositionUtils;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('ctrlsService') protected ctrlsService: CtrlsService;\n\n    private cellCtrl: CellCtrl;\n    private cellRange: CellRange;\n\n    private rangeStartRow: RowPosition;\n    private rangeEndRow: RowPosition;\n\n    private cellHoverListener: (() => void) | undefined;\n    private lastCellHovered: CellPosition | null | undefined;\n    protected changedCalculatedValues: boolean = false;\n    private dragging: boolean = false;\n\n    protected abstract type: SelectionHandleType;\n    protected shouldDestroyOnEndDragging: boolean = false;\n\n    @PostConstruct\n    private init() {\n        this.dragService.addDragSource({\n            dragStartPixels: 0,\n            eElement: this.getGui(),\n            onDragStart: this.onDragStart.bind(this),\n            onDragging: (e: MouseEvent | Touch) => {\n                this.dragging = true;\n                this.rangeService.autoScrollService.check(e as MouseEvent);\n\n                if (this.changedCalculatedValues) {\n                    this.onDrag(e);\n                    this.changedCalculatedValues = false;\n                }\n            },\n            onDragStop: (e: MouseEvent | Touch) => {\n                this.dragging = false;\n                this.onDragEnd(e);\n                this.clearValues();\n                this.rangeService.autoScrollService.ensureCleared();\n\n                // TODO: this causes a bug where if there are multiple grids in the same page, all of them will\n                // be affected by a drag on any. Move it to the root element.\n                document.body.classList.remove(this.getDraggingCssClass());\n\n                if (this.shouldDestroyOnEndDragging) {\n                    this.destroy();\n                }\n            }\n        });\n\n        this.addManagedListener(\n            this.getGui(),\n            'mousedown',\n            this.preventRangeExtension.bind(this)\n        );\n    }\n\n    protected abstract onDrag(e: MouseEvent | Touch): void;\n    protected abstract onDragEnd(e: MouseEvent | Touch): void;\n\n    protected isDragging(): boolean {\n        return this.dragging;\n    }\n\n    protected getCellCtrl(): CellCtrl | undefined {\n        return this.cellCtrl;\n    }\n\n    protected setCellCtrl(cellComp: CellCtrl) {\n        this.cellCtrl = cellComp;\n    }\n\n    protected getCellRange(): CellRange {\n        return this.cellRange;\n    }\n\n    protected setCellRange(range: CellRange) {\n        this.cellRange = range;\n    }\n\n    protected getRangeStartRow(): RowPosition {\n        return this.rangeStartRow;\n    }\n\n    protected setRangeStartRow(row: RowPosition) {\n        this.rangeStartRow = row;\n    }\n\n    protected getRangeEndRow(): RowPosition {\n        return this.rangeEndRow;\n    }\n\n    protected setRangeEndRow(row: RowPosition) {\n        this.rangeEndRow = row;\n    }\n\n    protected getLastCellHovered(): CellPosition | null | undefined {\n        return this.lastCellHovered;\n    }\n\n    private preventRangeExtension(e: MouseEvent) {\n        e.stopPropagation();\n    }\n\n    protected onDragStart(e: MouseEvent) {\n        this.cellHoverListener = this.addManagedListener(\n            this.ctrlsService.getGridCtrl().getGui(),\n            'mousemove',\n            this.updateValuesOnMove.bind(this)\n        );\n\n        document.body.classList.add(this.getDraggingCssClass());\n    }\n\n    private getDraggingCssClass(): string {\n        return `ag-dragging-${this.type === SelectionHandleType.FILL ? 'fill' : 'range'}-handle`;\n    }\n\n    protected updateValuesOnMove(e: MouseEvent) {\n        const cell = this.mouseEventService.getCellPositionForEvent(e);\n\n        if (!cell || (this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered))) { return; }\n\n        this.lastCellHovered = cell;\n        this.changedCalculatedValues = true;\n    }\n\n    public getType(): SelectionHandleType {\n        return this.type;\n    }\n\n    public refresh(cellCtrl: CellCtrl) {\n        const oldCellComp = this.getCellCtrl();\n        const eGui = this.getGui();\n\n        const cellRange = _.last(this.rangeService.getCellRanges());\n\n        const start = cellRange.startRow;\n        const end = cellRange.endRow;\n\n        if (start && end) {\n            const isBefore = this.rowPositionUtils.before(end, start);\n\n            if (isBefore) {\n                this.setRangeStartRow(end);\n                this.setRangeEndRow(start);\n            } else {\n                this.setRangeStartRow(start);\n                this.setRangeEndRow(end);\n            }\n        }\n\n        if (oldCellComp !== cellCtrl || !_.isVisible(eGui)) {\n            this.setCellCtrl(cellCtrl);\n            const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n            if (eParentOfValue) {\n                eParentOfValue.appendChild(eGui);\n            }\n        }\n\n        this.setCellRange(cellRange);\n    }\n\n    protected clearValues() {\n        this.lastCellHovered = undefined;\n        this.removeListeners();\n    }\n\n    private removeListeners() {\n        if (this.cellHoverListener) {\n            this.cellHoverListener();\n            this.cellHoverListener = undefined;\n        }\n    }\n\n    protected destroy() {\n        if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n            _.setDisplayed(this.getGui(), false);\n            this.shouldDestroyOnEndDragging = true;\n            return;\n        }\n\n        this.shouldDestroyOnEndDragging = false;\n\n        super.destroy();\n        this.removeListeners();\n\n        const eGui = this.getGui();\n\n        if (eGui.parentElement) {\n            eGui.parentElement.removeChild(eGui);\n        }\n    }\n}\n", "export function findLineByLeastSquares(values: number[]) {\n    const len = values.length;\n    let maxDecimals = 0;\n\n    if (len <= 1) { return values; }\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        const splitExponent = value.toString().split('e-');\n\n        if (splitExponent.length > 1) {\n            maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n            continue;\n        }\n\n        if (Math.floor(value) === value) { continue; }\n\n        maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n    }\n\n    let sum_x = 0;\n    let sum_y = 0;\n    let sum_xy = 0;\n    let sum_xx = 0;\n\n    let y = 0;\n\n    for (let x = 0; x < len; x++) {\n        y = values[x];\n        sum_x += x;\n        sum_y += y;\n        sum_xx += x * x;\n        sum_xy += x * y;\n    }\n\n    const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n    const b = (sum_y / len) - (m * sum_x) / len;\n\n    const result: number[] = [];\n\n    for (let x = 0; x <= len; x++) {\n        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n    }\n\n    return result;\n}", "import {\n    CellRange,\n    CellPosition,\n    CellRangeType,\n    SelectionHandleType,\n    _\n} from \"@ag-grid-community/core\";\n\nimport { AbstractSelectionHandle } from \"./abstractSelectionHandle\";\n\nexport class RangeHandle extends AbstractSelectionHandle {\n\n    static TEMPLATE = /* html */ `<div class=\"ag-range-handle\"></div>`;\n\n    protected type = SelectionHandleType.RANGE;\n    private endPosition: CellPosition;\n    private rangeFixed: boolean = false;\n\n    constructor() {\n        super(RangeHandle.TEMPLATE);\n    }\n\n    protected onDrag(e: MouseEvent) {\n        const lastCellHovered = this.getLastCellHovered();\n\n        if (!lastCellHovered) { return; }\n\n        const cellRanges = this.rangeService.getCellRanges();\n        const lastRange = _.last(cellRanges);\n\n        if (!this.rangeFixed) {\n            this.fixRangeStartEnd(lastRange);\n            this.rangeFixed = true;\n        }\n\n        this.endPosition = {\n            rowIndex: lastCellHovered.rowIndex,\n            rowPinned: lastCellHovered.rowPinned,\n            column: lastCellHovered.column\n        };\n\n        // check if the cell ranges are for a chart\n        if (cellRanges.length === 2 && cellRanges[0].type === CellRangeType.DIMENSION && lastRange.type === CellRangeType.VALUE) {\n            const rowChanged = !this.rowPositionUtils.sameRow(this.endPosition, this.rangeService.getRangeEndRow(lastRange));\n\n            if (rowChanged) {\n                // ensure the dimension range is kept in sync with the value range (which has the handle)\n                this.rangeService.updateRangeEnd(\n                    cellRanges[0],\n                    {\n                        ...this.endPosition,\n                        column: cellRanges[0].columns[0]\n                    },\n                    true,\n                );\n            }\n        }\n\n        this.rangeService.extendLatestRangeToCell(this.endPosition);\n    }\n\n    protected onDragEnd(e: MouseEvent) {\n        const cellRange = _.last(this.rangeService.getCellRanges())!;\n\n        this.fixRangeStartEnd(cellRange);\n        this.rangeFixed = false;\n    }\n\n    private fixRangeStartEnd(cellRange: CellRange): void {\n        const startRow = this.rangeService.getRangeStartRow(cellRange);\n        const endRow = this.rangeService.getRangeEndRow(cellRange);\n        const column = cellRange.columns[0];\n\n        cellRange.startRow = startRow;\n        cellRange.endRow = endRow;\n        cellRange.startColumn = column;\n    }\n}\n", "import { Bean, BeanStub, ISelectionHandle, ISelectionHandleFactory, SelectionHandleType } from \"@ag-grid-community/core\";\nimport { RangeHandle } from \"./rangeHandle\";\nimport { FillHandle } from \"./fillHandle\";\n\n@Bean('selectionHandleFactory')\nexport class SelectionHandleFactory extends BeanStub implements ISelectionHandleFactory {\n    public createSelectionHandle(type: SelectionHandleType): ISelectionHandle {\n        return this.createBean(type === SelectionHandleType.RANGE ? new RangeHandle() : new FillHandle());\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\";\nimport { ClipboardService } from \"./clipboard/clipboardService\";\nimport { VERSION } from \"./version\";\n\nexport const ClipboardModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ClipboardModule,\n    beans: [ClipboardService],\n    dependantModules: [\n        EnterpriseCoreModule,\n        CsvExportModule\n    ]\n};\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    CellNavigationService,\n    CellPosition,\n    CellPositionUtils,\n    CellRange,\n    ChangedPath,\n    IClientSideRowModel,\n    IClipboardCopyParams,\n    IClipboardCopyRowsParams,\n    Column,\n    ColumnModel,\n    CsvExportParams,\n    CutEndEvent,\n    CutStartEvent,\n    Events,\n    FlashCellsEvent,\n    FocusService,\n    GridCtrl,\n    IClipboardService,\n    IRowModel,\n    Logger,\n    LoggerFactory,\n    PasteEndEvent,\n    PasteStartEvent,\n    PostConstruct,\n    ProcessCellForExportParams,\n    RowNode,\n    RowPosition,\n    RowPositionUtils,\n    RowRenderer,\n    RowValueChangedEvent,\n    ISelectionService,\n    ValueService,\n    ICsvCreator,\n    IRangeService,\n    Optional,\n    CtrlsService,\n    WithoutGridCommon,\n    ProcessRowGroupForExportParams,\n    ValueFormatterService,\n    ValueParserService\n} from \"@ag-grid-community/core\";\n\ninterface RowCallback {\n    (gridRow: RowPosition, rowNode: RowNode | undefined, columns: Column[], rangeIndex: number, isLastRow?: boolean): void;\n}\n\ninterface ColumnCallback {\n    (columns: Column[]): void;\n}\n\ntype CellsToFlashType = { [key: string]: boolean }\ntype DataForCellRangesType = { data: string, cellsToFlash: CellsToFlashType }\n\n// Matches value in changeDetectionService\nconst SOURCE_PASTE = 'paste';\nconst EXPORT_TYPE_DRAG_COPY = 'dragCopy';\nconst EXPORT_TYPE_CLIPBOARD = 'clipboard';\n\nenum CellClearType { CellRange, SelectedRows, FocusedCell };\n\nconst apiError = (method: string) => `AG Grid: Unable to use the Clipboard API (navigator.clipboard.${method}()). ` +\n'The reason why it could not be used has been logged in the previous line. ' +\n'For this reason the grid has defaulted to using a workaround which doesn\\'t perform as well. ' +\n'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' +\n'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.';\n\n@Bean('clipboardService')\nexport class ClipboardService extends BeanStub implements IClipboardService {\n\n    @Autowired('csvCreator') private csvCreator: ICsvCreator;\n    @Autowired('loggerFactory') private loggerFactory: LoggerFactory;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('cellNavigationService') private cellNavigationService: CellNavigationService;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') public rowPositionUtils: RowPositionUtils;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private logger: Logger;\n    private gridCtrl: GridCtrl;\n    private lastPasteOperationTime: number = 0;\n\n    private navigatorApiFailed = false;\n\n    @PostConstruct\n    private init(): void {\n        this.logger = this.loggerFactory.create('ClipboardService');\n\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n        });\n\n    }\n\n    public pasteFromClipboard(): void {\n        this.logger.log('pasteFromClipboard');\n\n        // Method 1 - native clipboard API, available in modern chrome browsers\n        const allowNavigator = !this.gridOptionsService.get('suppressClipboardApi');\n        // Some browsers (Firefox) do not allow Web Applications to read from\n        // the clipboard so verify if not only the ClipboardAPI is available,\n        // but also if the `readText` method is public.\n        if (allowNavigator && !this.navigatorApiFailed && navigator.clipboard && navigator.clipboard.readText) {\n            navigator.clipboard.readText()\n                .then(this.processClipboardData.bind(this))\n                .catch((e) => {\n                    _.doOnce(() => {\n                        console.warn(e);\n                        console.warn(apiError('readText'));\n                    }, 'clipboardApiError');\n                    this.navigatorApiFailed = true;\n                    this.pasteFromClipboardLegacy();\n                });\n        } else {\n            this.pasteFromClipboardLegacy();\n        }\n    }\n\n    private pasteFromClipboardLegacy(): void {\n        // Method 2 - if modern API fails, the old school hack\n        let defaultPrevented = false;\n        const handlePasteEvent = (e: ClipboardEvent) => {\n            const currentPastOperationTime = (new Date()).getTime();\n            if (currentPastOperationTime - this.lastPasteOperationTime < 50) {\n                defaultPrevented = true;\n                e.preventDefault();\n            }\n            this.lastPasteOperationTime = currentPastOperationTime;\n        }\n\n        this.executeOnTempElement(\n            (textArea: HTMLTextAreaElement) => {\n                textArea.addEventListener('paste', handlePasteEvent);\n                textArea.focus({ preventScroll: true });\n\n            },\n            (element: HTMLTextAreaElement) => {\n                const data = element.value;\n                if (!defaultPrevented) {\n                    this.processClipboardData(data);\n                } else {\n                    this.refocusLastFocusedCell();\n                }\n                element.removeEventListener('paste', handlePasteEvent);\n            }\n        );\n    }\n\n    private refocusLastFocusedCell(): void {\n        const focusedCell = this.focusService.getFocusedCell();\n\n        if (focusedCell) {\n            this.focusService.setFocusedCell({\n                rowIndex: focusedCell.rowIndex,\n                column: focusedCell.column, \n                rowPinned: focusedCell.rowPinned, \n                forceBrowserFocus: true\n            });\n        }\n    }\n\n    private getClipboardDelimiter() {\n        const delimiter = this.gridOptionsService.get('clipboardDelimiter');\n        return _.exists(delimiter) ? delimiter : '\\t';\n    }\n\n    private processClipboardData(data: string): void {\n        if (data == null) { return; }\n\n        let parsedData: string[][] | null = ClipboardService.stringToArray(data, this.getClipboardDelimiter());\n\n        const userFunc = this.gridOptionsService.getCallback('processDataFromClipboard');\n\n        if (userFunc) {\n            parsedData = userFunc({ data: parsedData });\n        }\n\n        if (parsedData == null) { return; }\n\n        if (this.gridOptionsService.get('suppressLastEmptyLineOnPaste')) {\n            this.removeLastLineIfBlank(parsedData!);\n        }\n\n        const pasteOperation = (\n            cellsToFlash: any,\n            updatedRowNodes: RowNode[],\n            focusedCell: CellPosition,\n            changedPath: ChangedPath | undefined) => {\n\n            const rangeActive = this.rangeService && this.rangeService.isMoreThanOneCell();\n            const pasteIntoRange = rangeActive && !this.hasOnlyOneValueToPaste(parsedData!);\n\n            if (pasteIntoRange) {\n                this.pasteIntoActiveRange(parsedData!, cellsToFlash, updatedRowNodes, changedPath);\n            } else {\n                this.pasteStartingFromFocusedCell(parsedData!, cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n            }\n        };\n\n        this.doPasteOperation(pasteOperation);\n    }\n\n    // This will parse a delimited string into an array of arrays.\n    static stringToArray(strData: string, delimiter = ','): string[][] {\n        const data: any[][] = [];\n        const isNewline = (char: string) => char === '\\r' || char === '\\n';\n\n        let insideQuotedField = false;\n\n        if (strData === '') { return [['']]; }\n\n        // iterate over each character, keep track of current row and column (of the returned array)\n        for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n            const previousChar = strData[position - 1];\n            const currentChar = strData[position];\n            const nextChar = strData[position + 1];\n            const ensureDataExists = () => {\n                if (!data[row]) {\n                    // create row if it doesn't exist\n                    data[row] = [];\n                }\n\n                if (!data[row][column]) {\n                    // create column if it doesn't exist\n                    data[row][column] = '';\n                }\n            };\n\n            ensureDataExists();\n\n            if (currentChar === '\"') {\n                if (insideQuotedField) {\n                    if (nextChar === '\"') {\n                        // unescape double quote\n                        data[row][column] += '\"';\n                        position++;\n                    } else {\n                        // exit quoted field\n                        insideQuotedField = false;\n                    }\n\n                    // continue;\n                } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                    // enter quoted field\n                    insideQuotedField = true;\n                    // continue;\n                }\n            }\n\n            if (!insideQuotedField && currentChar !== '\"') {\n                if (currentChar === delimiter) {\n                    // move to next column\n                    column++;\n                    ensureDataExists();\n\n                    continue;\n                } else if (isNewline(currentChar)) {\n                    // move to next row\n                    column = 0;\n                    row++;\n                    ensureDataExists();\n\n                    if (currentChar === '\\r' && nextChar === '\\n') {\n                        // skip over second newline character if it exists\n                        position++;\n                    }\n\n                    continue;\n                }\n            }\n\n            // add current character to current column\n            data[row][column] += currentChar;\n        }\n\n        return data;\n    }\n\n\n    // common code to paste operations, e.g. paste to cell, paste to range, and copy range down\n    private doPasteOperation(pasteOperationFunc: (\n        cellsToFlash: any,\n        updatedRowNodes: RowNode[],\n        focusedCell: CellPosition | null,\n        changedPath: ChangedPath | undefined) => void\n    ): void {\n        const source = 'clipboard';\n\n        this.eventService.dispatchEvent({\n            type: Events.EVENT_PASTE_START,\n            source\n        } as WithoutGridCommon<PasteStartEvent>);\n\n        let changedPath: ChangedPath | undefined;\n\n        if (this.clientSideRowModel) {\n            const onlyChangedColumns = this.gridOptionsService.get('aggregateOnlyChangedColumns');\n            changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n        }\n\n        const cellsToFlash = {} as any;\n        const updatedRowNodes: RowNode[] = [];\n        const focusedCell = this.focusService.getFocusedCell();\n\n        pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n\n        const nodesToRefresh: RowNode[] = [...updatedRowNodes];\n        if (changedPath) {\n            this.clientSideRowModel.doAggregate(changedPath);\n\n            // add all nodes impacted by aggregation, as they need refreshed also.\n            changedPath.forEachChangedNodeDepthFirst(rowNode => {\n                nodesToRefresh.push(rowNode);\n            });\n        }\n\n        // clipboardService has to do changeDetection itself, to prevent repeat logic in favour of batching.\n        // changeDetectionService is disabled for this action.\n        this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\n\n        this.dispatchFlashCells(cellsToFlash);\n        this.fireRowChanged(updatedRowNodes);\n\n        // if using the clipboard hack with a temp element, then the focus has been lost,\n        // so need to put it back. otherwise paste operation loosed focus on cell and keyboard\n        // navigation stops.\n        this.refocusLastFocusedCell();\n        const event: WithoutGridCommon<PasteEndEvent> = {\n            type: Events.EVENT_PASTE_END,\n            source\n        }\n        this.eventService.dispatchEvent(event);\n    }\n\n    private pasteIntoActiveRange(\n        clipboardData: string[][],\n        cellsToFlash: any,\n        updatedRowNodes: RowNode[],\n        changedPath: ChangedPath | undefined\n    ) {\n        // true if clipboard data can be evenly pasted into range, otherwise false\n        const abortRepeatingPasteIntoRows = this.getRangeSize() % clipboardData.length != 0;\n\n        let indexOffset = 0;\n        let dataRowIndex = 0;\n\n        const rowCallback: RowCallback = (currentRow: RowPosition, rowNode: RowNode, columns: Column[], index: number) => {\n            const atEndOfClipboardData = index - indexOffset >= clipboardData.length;\n\n            if (atEndOfClipboardData) {\n                if (abortRepeatingPasteIntoRows) { return; }\n\n                // increment offset and reset data index to repeat paste of data\n                indexOffset += dataRowIndex;\n                dataRowIndex = 0;\n            }\n\n            const currentRowData = clipboardData[index - indexOffset];\n\n            // otherwise we are not the first row, so copy\n            updatedRowNodes.push(rowNode);\n\n            const processCellFromClipboardFunc = this.gridOptionsService.getCallback('processCellFromClipboard');\n\n            columns.forEach((column, idx) => {\n                if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) { return; }\n\n                // repeat data for columns we don't have data for - happens when to range is bigger than copied data range\n                if (idx >= currentRowData.length) {\n                    idx = idx % currentRowData.length;\n                }\n\n                const newValue = this.processCell(\n                    rowNode, column, currentRowData[idx], EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc, true);\n\n                rowNode.setDataValue(column, newValue, SOURCE_PASTE);\n\n                if (changedPath) {\n                    changedPath.addParentNode(rowNode.parent, [column]);\n                }\n\n                const { rowIndex, rowPinned } = currentRow;\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            });\n\n            dataRowIndex++;\n        };\n\n        this.iterateActiveRanges(false, rowCallback);\n    }\n\n    private pasteStartingFromFocusedCell(\n        parsedData: string[][],\n        cellsToFlash: any,\n        updatedRowNodes: RowNode[],\n        focusedCell: CellPosition,\n        changedPath: ChangedPath | undefined\n    ) {\n        if (!focusedCell) { return; }\n\n        const currentRow: RowPosition = { rowIndex: focusedCell.rowIndex, rowPinned: focusedCell.rowPinned };\n        const columnsToPasteInto = this.columnModel.getDisplayedColumnsStartingAt(focusedCell.column);\n\n        if (this.isPasteSingleValueIntoRange(parsedData)) {\n            this.pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath);\n        } else {\n            this.pasteMultipleValues(\n                parsedData,\n                currentRow,\n                updatedRowNodes,\n                columnsToPasteInto,\n                cellsToFlash,\n                EXPORT_TYPE_CLIPBOARD,\n                changedPath);\n        }\n    }\n\n    // if range is active, and only one cell, then we paste this cell into all cells in the active range.\n    private isPasteSingleValueIntoRange(parsedData: string[][]): boolean {\n        return this.hasOnlyOneValueToPaste(parsedData)\n            && this.rangeService != null\n            && !this.rangeService.isEmpty();\n    }\n\n    private pasteSingleValueIntoRange(parsedData: string[][], updatedRowNodes: RowNode[], cellsToFlash: any, changedPath: ChangedPath | undefined) {\n        const value = parsedData[0][0];\n\n        const rowCallback: RowCallback = (currentRow: RowPosition, rowNode: RowNode, columns: Column[]) => {\n            updatedRowNodes.push(rowNode);\n            columns.forEach(column =>\n                this.updateCellValue(rowNode, column, value, cellsToFlash, EXPORT_TYPE_CLIPBOARD, changedPath));\n        };\n\n        this.iterateActiveRanges(false, rowCallback);\n    }\n\n    private hasOnlyOneValueToPaste(parsedData: string[][]) {\n        return parsedData.length === 1 && parsedData[0].length === 1;\n    }\n\n    public copyRangeDown(): void {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n\n        const firstRowValues: any[] = [];\n\n        const pasteOperation = (\n            cellsToFlash: any,\n            updatedRowNodes: RowNode[],\n            focusedCell: CellPosition,\n            changedPath: ChangedPath | undefined\n        ) => {\n            const processCellForClipboardFunc = this.gridOptionsService.getCallback('processCellForClipboard');\n            const processCellFromClipboardFunc = this.gridOptionsService.getCallback('processCellFromClipboard');\n\n            const rowCallback: RowCallback = (currentRow: RowPosition, rowNode: RowNode, columns: Column[]) => {\n                // take reference of first row, this is the one we will be using to copy from\n                if (!firstRowValues.length) {\n                    // two reasons for looping through columns\n                    columns.forEach(column => {\n                        // get the initial values to copy down\n                        const value = this.processCell(\n                            rowNode,\n                            column,\n                            this.valueService.getValue(column, rowNode),\n                            EXPORT_TYPE_DRAG_COPY,\n                            processCellForClipboardFunc, false, true);\n\n                        firstRowValues.push(value);\n                    });\n                } else {\n                    // otherwise we are not the first row, so copy\n                    updatedRowNodes.push(rowNode);\n                    columns.forEach((column, index) => {\n                        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) { return; }\n\n                        const firstRowValue = this.processCell(\n                            rowNode, column, firstRowValues[index], EXPORT_TYPE_DRAG_COPY, processCellFromClipboardFunc, true);\n\n                        rowNode.setDataValue(column, firstRowValue, SOURCE_PASTE);\n\n                        if (changedPath) {\n                            changedPath.addParentNode(rowNode.parent, [column]);\n                        }\n\n                        const { rowIndex, rowPinned } = currentRow;\n                        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                        cellsToFlash[cellId] = true;\n                    });\n                }\n            };\n\n            this.iterateActiveRanges(true, rowCallback);\n        };\n\n        this.doPasteOperation(pasteOperation);\n    }\n\n    private removeLastLineIfBlank(parsedData: string[][]): void {\n        // remove last row if empty, excel puts empty last row in\n        const lastLine = _.last(parsedData);\n        const lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === '';\n\n        if (lastLineIsBlank) {\n            // do not remove the last empty line when that is the only line pasted\n            if (parsedData.length === 1) { return; }\n            _.removeFromArray(parsedData, lastLine);\n        }\n    }\n\n    private fireRowChanged(rowNodes: RowNode[]): void {\n        if (this.gridOptionsService.get('editType') !== 'fullRow') { return; }\n\n        rowNodes.forEach(rowNode => {\n            const event: WithoutGridCommon<RowValueChangedEvent> = {\n                type: Events.EVENT_ROW_VALUE_CHANGED,\n                node: rowNode,\n                data: rowNode.data,\n                rowIndex: rowNode.rowIndex!,\n                rowPinned: rowNode.rowPinned\n            };\n\n            this.eventService.dispatchEvent(event);\n        });\n    }\n\n    private pasteMultipleValues(\n        clipboardGridData: string[][],\n        currentRow: RowPosition | null,\n        updatedRowNodes: RowNode[],\n        columnsToPasteInto: Column[],\n        cellsToFlash: any,\n        type: string,\n        changedPath: ChangedPath | undefined): void {\n\n        let rowPointer = currentRow;\n\n        // if doing CSRM and NOT tree data, then it means groups are aggregates, which are read only,\n        // so we should skip them when doing paste operations.\n        const skipGroupRows = this.clientSideRowModel != null && !this.gridOptionsService.get('enableGroupEdit') && !this.gridOptionsService.get('treeData');\n\n        const getNextGoodRowNode = () => {\n            while (true) {\n                if (!rowPointer) { return null; }\n                const res = this.rowPositionUtils.getRowNode(rowPointer);\n                // move to next row down for next set of values\n                rowPointer = this.cellNavigationService.getRowBelow({ rowPinned: rowPointer.rowPinned, rowIndex: rowPointer.rowIndex });\n\n                // if no more rows, return null\n                if (res == null) { return null; }\n\n                // skip details rows and footer rows, never paste into them as they don't hold data\n                const skipRow = res.detail || res.footer || (skipGroupRows && res.group);\n\n                // skipping row means we go into the next iteration of the while loop\n                if (!skipRow) { return res; }\n            }\n        };\n\n        clipboardGridData.forEach(clipboardRowData => {\n            const rowNode = getNextGoodRowNode();\n\n            // if we have come to end of rows in grid, then skip\n            if (!rowNode) { return; }\n\n            clipboardRowData.forEach((value, index) =>\n                this.updateCellValue(rowNode, columnsToPasteInto[index], value, cellsToFlash, type, changedPath));\n\n            updatedRowNodes.push(rowNode);\n        });\n    }\n\n    private updateCellValue(\n        rowNode: RowNode | null,\n        column: Column,\n        value: string,\n        cellsToFlash: any,\n        type: string,\n        changedPath: ChangedPath | undefined) {\n        if (\n            !rowNode ||\n            !column ||\n            !column.isCellEditable(rowNode) ||\n            column.isSuppressPaste(rowNode)\n        ) { return; }\n\n\n        // if the cell is a group and the col is an aggregation, skip the cell.\n        if (rowNode.group && column.isValueActive()) { return; }\n\n        const processedValue = this.processCell(rowNode, column, value, type, this.gridOptionsService.getCallback('processCellFromClipboard'), true);\n        rowNode.setDataValue(column, processedValue, SOURCE_PASTE);\n        \n        const { rowIndex, rowPinned } = rowNode;\n        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex: rowIndex!, column, rowPinned });\n        cellsToFlash[cellId] = true;\n\n        if (changedPath) {\n            changedPath.addParentNode(rowNode.parent, [column]);\n        }\n    }\n\n    public copyToClipboard(params: IClipboardCopyParams = {}): void {\n        this.copyOrCutToClipboard(params);\n    }\n\n    public cutToClipboard(params: IClipboardCopyParams = {}, source: 'api' | 'ui' | 'contextMenu' = 'api'): void {\n        if (this.gridOptionsService.get('suppressCutToClipboard')) { return; }\n\n        const startEvent: WithoutGridCommon<CutStartEvent> = {\n            type: Events.EVENT_CUT_START,\n            source\n        };\n        this.eventService.dispatchEvent(startEvent);\n\n        this.copyOrCutToClipboard(params, true);\n\n        const endEvent: WithoutGridCommon<CutEndEvent> = {\n            type: Events.EVENT_CUT_END,\n            source\n        };\n        this.eventService.dispatchEvent(endEvent);\n\n    }\n\n    private copyOrCutToClipboard(params: IClipboardCopyParams, cut?: boolean): void {\n        let { includeHeaders, includeGroupHeaders } = params;\n        this.logger.log(`copyToClipboard: includeHeaders = ${includeHeaders}`);\n\n        // don't override 'includeHeaders' if it has been explicitly set to 'false'\n        if (includeHeaders == null) {\n            includeHeaders = this.gridOptionsService.get('copyHeadersToClipboard');\n        }\n\n        if (includeGroupHeaders == null) {\n            includeGroupHeaders = this.gridOptionsService.get('copyGroupHeadersToClipboard');\n        }\n\n        const copyParams = { includeHeaders, includeGroupHeaders };\n        const shouldCopyRows = !this.gridOptionsService.get('suppressCopyRowsToClipboard');\n\n\n        let cellClearType: CellClearType | null = null;\n        // Copy priority is Range > Row > Focus\n        if (this.rangeService && !this.rangeService.isEmpty() && !this.shouldSkipSingleCellRange()) {\n            this.copySelectedRangeToClipboard(copyParams);\n            cellClearType = CellClearType.CellRange;\n        } else if (shouldCopyRows && !this.selectionService.isEmpty()) {\n            this.copySelectedRowsToClipboard(copyParams);\n            cellClearType = CellClearType.SelectedRows;\n        } else if (this.focusService.isAnyCellFocused()) {\n            this.copyFocusedCellToClipboard(copyParams);\n            cellClearType = CellClearType.FocusedCell;\n        }\n\n        if (cut && cellClearType !== null) {\n            this.clearCellsAfterCopy(cellClearType);\n        }\n    }\n\n    private clearCellsAfterCopy(type: CellClearType) {\n        this.eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });\n        if (type === CellClearType.CellRange) {\n            this.rangeService.clearCellRangeCellValues({ cellEventSource: 'clipboardService' });\n        } else if (type === CellClearType.SelectedRows) {\n            this.clearSelectedRows();\n        } else {\n            const focusedCell = this.focusService.getFocusedCell();\n            if (focusedCell == null) { return; }\n\n            const rowNode = this.rowPositionUtils.getRowNode(focusedCell);\n            if (rowNode) {\n                this.clearCellValue(rowNode, focusedCell.column);\n            }\n        }\n        this.eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });\n    }\n\n    private clearSelectedRows(): void {\n        const selected = this.selectionService.getSelectedNodes();\n        const columns = this.columnModel.getAllDisplayedColumns();\n\n        for (const row of selected) {\n            for (const col of columns) {\n                this.clearCellValue(row, col);\n            }\n        }\n    }\n\n    private clearCellValue(rowNode: RowNode, column: Column): void {\n        if (!column.isCellEditable(rowNode)) { return; }\n        rowNode.setDataValue(column, null, 'clipboardService');\n    }\n\n    private shouldSkipSingleCellRange(): boolean {\n        return this.gridOptionsService.get('suppressCopySingleCellRanges') && !this.rangeService.isMoreThanOneCell();\n    }\n\n    private iterateActiveRanges(onlyFirst: boolean, rowCallback: RowCallback, columnCallback?: ColumnCallback): void {\n        if (!this.rangeService || this.rangeService.isEmpty()) { return; }\n\n        const cellRanges = this.rangeService.getCellRanges();\n\n        if (onlyFirst) {\n            this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);\n        } else {\n            cellRanges.forEach((range, idx) => this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1));\n        }\n    }\n\n    private iterateActiveRange(range: CellRange, rowCallback: RowCallback, columnCallback?: ColumnCallback, isLastRange?: boolean): void {\n        if (!this.rangeService) { return; }\n\n        let currentRow: RowPosition | null = this.rangeService.getRangeStartRow(range);\n        const lastRow = this.rangeService.getRangeEndRow(range);\n\n        if (columnCallback && range.columns) {\n            columnCallback(range.columns);\n        }\n\n        let rangeIndex = 0;\n        let isLastRow = false;\n\n        // the currentRow could be missing if the user sets the active range manually, and sets a range\n        // that is outside of the grid (eg. sets range rows 0 to 100, but grid has only 20 rows).\n        while (!isLastRow && currentRow != null) {\n            const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);\n\n            rowCallback(currentRow, rowNode, range.columns, rangeIndex++, isLastRow && isLastRange);\n\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    }\n\n    public copySelectedRangeToClipboard(params: IClipboardCopyParams = {}): void {\n        if (!this.rangeService || this.rangeService.isEmpty()) { return; }\n\n        const allRangesMerge = this.rangeService.areAllRangesAbleToMerge();\n        const { data, cellsToFlash } = allRangesMerge ? this.buildDataFromMergedRanges(params) : this.buildDataFromRanges(params);\n\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells(cellsToFlash);\n    }\n\n    private buildDataFromMergedRanges(params: IClipboardCopyParams): DataForCellRangesType {\n        const columnsSet: Set<Column> = new Set();\n        const ranges = this.rangeService.getCellRanges();\n        const rowPositionsMap: Map<string, boolean> = new Map();\n        const allRowPositions: RowPosition[] = [];\n        const allCellsToFlash: CellsToFlashType = {};\n\n        ranges.forEach(range => {\n            range.columns.forEach(col => columnsSet.add(col));\n            const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(range);\n            rowPositions.forEach(rowPosition => {\n                const rowPositionAsString = `${rowPosition.rowIndex}-${rowPosition.rowPinned || 'null'}`;\n                if (!rowPositionsMap.get(rowPositionAsString)) {\n                    rowPositionsMap.set(rowPositionAsString, true);\n                    allRowPositions.push(rowPosition);\n                }\n            })\n            Object.assign(allCellsToFlash, cellsToFlash);\n        });\n\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const exportedColumns = Array.from(columnsSet);\n\n        exportedColumns.sort((a, b) => {\n            const posA = allColumns.indexOf(a);\n            const posB = allColumns.indexOf(b);\n\n            return posA - posB;\n        });\n\n        const data = this.buildExportParams({\n            columns: exportedColumns,\n            rowPositions: allRowPositions,\n            includeHeaders: params.includeHeaders,\n            includeGroupHeaders: params.includeGroupHeaders,\n        });\n\n        return { data, cellsToFlash: allCellsToFlash };\n    }\n\n    private buildDataFromRanges(params: IClipboardCopyParams): DataForCellRangesType {\n        const ranges = this.rangeService.getCellRanges();\n        const data: string[] = [];\n        const allCellsToFlash: CellsToFlashType = {};\n\n        ranges.forEach(range => {\n            const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(range);\n            Object.assign(allCellsToFlash, cellsToFlash);\n            data.push(this.buildExportParams({\n                columns: range.columns,\n                rowPositions: rowPositions,\n                includeHeaders: params.includeHeaders,\n                includeGroupHeaders: params.includeGroupHeaders,\n            }));\n        });\n\n        return { data: data.join('\\n'), cellsToFlash: allCellsToFlash };\n    }\n\n    private getRangeRowPositionsAndCellsToFlash(range: CellRange): { rowPositions: RowPosition[], cellsToFlash: CellsToFlashType } {\n        const rowPositions: RowPosition[] = [];\n        const cellsToFlash: CellsToFlashType = {};\n        const startRow = this.rangeService.getRangeStartRow(range);\n        const lastRow = this.rangeService.getRangeEndRow(range);\n\n        let node: RowPosition | null = startRow;\n\n        while (node) {\n            rowPositions.push(node);\n            range.columns.forEach(column => {\n                const { rowIndex, rowPinned } = node!;\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            });\n            if (this.rowPositionUtils.sameRow(node, lastRow)) { break; }\n            node = this.cellNavigationService.getRowBelow(node);\n        }\n\n        return { rowPositions, cellsToFlash }\n    }\n\n    private getCellsToFlashFromRowNodes(rowNodes: RowNode[]): CellsToFlashType {\n        const allDisplayedColumns = this.columnModel.getAllDisplayedColumns();\n        const cellsToFlash: CellsToFlashType = {};\n        for (let i = 0; i < rowNodes.length; i++) {\n            const { rowIndex, rowPinned } = rowNodes[i];\n            if (rowIndex == null) { continue; }\n            for (let j = 0; j < allDisplayedColumns.length; j++) {\n                const column = allDisplayedColumns[j];\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned })\n                cellsToFlash[cellId] = true;\n            }\n        }\n\n        return cellsToFlash;\n    }\n\n    private copyFocusedCellToClipboard(params: IClipboardCopyParams = {}): void {\n        const focusedCell = this.focusService.getFocusedCell();\n\n        if (focusedCell == null) { return; }\n\n        const cellId = this.cellPositionUtils.createId(focusedCell);\n        const currentRow: RowPosition = { rowPinned: focusedCell.rowPinned, rowIndex: focusedCell.rowIndex };\n        const column = focusedCell.column;\n\n        const data = this.buildExportParams({\n            columns: [column],\n            rowPositions: [currentRow],\n            includeHeaders: params.includeHeaders,\n            includeGroupHeaders: params.includeGroupHeaders\n        });\n\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells({ [cellId]: true });\n    }\n\n    public copySelectedRowsToClipboard(params: IClipboardCopyRowsParams = {}): void {\n        const { columnKeys, includeHeaders, includeGroupHeaders } = params;\n\n        const data = this.buildExportParams({\n            columns: columnKeys,\n            includeHeaders,\n            includeGroupHeaders\n        });\n\n        this.copyDataToClipboard(data);\n        const rowNodes = this.selectionService.getSelectedNodes() || [];\n        this.dispatchFlashCells(this.getCellsToFlashFromRowNodes(rowNodes));\n    }\n\n    private buildExportParams(params: {\n        columns?: (string | Column)[],\n        rowPositions?: RowPosition[]\n        includeHeaders?: boolean,\n        includeGroupHeaders?: boolean\n    }): string {\n        const { columns, rowPositions, includeHeaders = false, includeGroupHeaders = false } = params;\n\n        const exportParams: CsvExportParams = {\n            columnKeys: columns,\n            rowPositions,\n            skipColumnHeaders: !includeHeaders,\n            skipColumnGroupHeaders: !includeGroupHeaders,\n            suppressQuotes: true,\n            columnSeparator: this.getClipboardDelimiter(),\n            onlySelected: !rowPositions,\n            processCellCallback: this.gridOptionsService.getCallback('processCellForClipboard'),\n            processRowGroupCallback: (params) => this.processRowGroupCallback(params),\n            processHeaderCallback: this.gridOptionsService.getCallback('processHeaderForClipboard'),\n            processGroupHeaderCallback: this.gridOptionsService.getCallback('processGroupHeaderForClipboard')\n            \n        };\n\n        return this.csvCreator.getDataAsCsv(exportParams, true);\n    }\n\n    private processRowGroupCallback(params: ProcessRowGroupForExportParams) {\n        const { node, column } = params;\n\n        const isTreeData = this.gridOptionsService.get('treeData');\n        const isSuppressGroupMaintainValueType = this.gridOptionsService.get('suppressGroupMaintainValueType');\n\n        // if not tree data and not suppressGroupMaintainValueType then we get the value from the group data\n        const getValueFromNode = () => {\n            if (isTreeData || isSuppressGroupMaintainValueType || !column) {\n                return node.key;\n            }\n            const value = node.groupData?.[column.getId()];\n            if (!value || !node.rowGroupColumn || node.rowGroupColumn.getColDef().useValueFormatterForExport === false) { return value; }\n            return this.valueFormatterService.formatValue(node.rowGroupColumn, node, value) ?? value;\n        }\n        let value = getValueFromNode();\n\n        if (params.node.footer) {\n            let suffix = '';\n            if (value && value.length) {\n                suffix = ` ${value}`;\n            }\n            value = `Total${suffix}`;\n        }\n        const processCellForClipboard = this.gridOptionsService.getCallback('processCellForClipboard');\n\n        if (processCellForClipboard) {\n            let column = node.rowGroupColumn as Column;\n\n            if (!column && node.footer && node.level === -1) {\n                column = this.columnModel.getRowGroupColumns()[0];\n            }\n            return processCellForClipboard({\n                value,\n                node,\n                column,\n                type: 'clipboard',\n                formatValue: (valueToFormat: any) => this.valueFormatterService.formatValue(column, node, valueToFormat) ?? valueToFormat,\n                parseValue: (valueToParse: string) => this.valueParserService.parseValue(column, node, valueToParse, this.valueService.getValue(column, node))\n            });\n        }\n        return value;\n    }\n\n    private dispatchFlashCells(cellsToFlash: {}): void {\n        window.setTimeout(() => {\n            const event: WithoutGridCommon<FlashCellsEvent> = {\n                type: Events.EVENT_FLASH_CELLS,\n                cells: cellsToFlash\n            };\n\n            this.eventService.dispatchEvent(event);\n        }, 0);\n    }\n\n    private processCell<T>(\n        rowNode: RowNode | undefined,\n        column: Column,\n        value: T,\n        type: string,\n        func?: ((params: WithoutGridCommon<ProcessCellForExportParams>) => T),\n        canParse?: boolean,\n        canFormat?: boolean): T {\n        if (func) {\n            const params: WithoutGridCommon<ProcessCellForExportParams> = {\n                column,\n                node: rowNode,\n                value,\n                type,\n                formatValue: (valueToFormat: any) => this.valueFormatterService.formatValue(column, rowNode ?? null, valueToFormat) ?? valueToFormat,\n                parseValue: (valueToParse: string) => this.valueParserService.parseValue(column, rowNode ?? null, valueToParse, this.valueService.getValue(column, rowNode))\n\n            };\n\n            return func(params);\n        }\n        if (canParse && column.getColDef().useValueParserForImport !== false) {\n            return this.valueParserService.parseValue(column, rowNode ?? null, value, this.valueService.getValue(column, rowNode));\n        } else if (canFormat && column.getColDef().useValueFormatterForExport !== false) {\n            return this.valueFormatterService.formatValue(column, rowNode ?? null, value) ?? value as any;\n        }\n\n        return value;\n    }\n\n    private copyDataToClipboard(data: string): void {\n        const userProvidedFunc = this.gridOptionsService.getCallback('sendToClipboard');\n\n        // method 1 - user provided func\n        if (userProvidedFunc) {\n            userProvidedFunc({ data });\n            return;\n        }\n\n        // method 2 - native clipboard API, available in modern chrome browsers\n        const allowNavigator = !this.gridOptionsService.get('suppressClipboardApi');\n        if (allowNavigator && navigator.clipboard) {\n            navigator.clipboard.writeText(data).catch((e) => {\n                _.doOnce(() => {\n                    console.warn(e);\n                    console.warn(apiError('writeText'));\n                }, 'clipboardApiError');\n                this.copyDataToClipboardLegacy(data);\n            });\n            return;\n        }\n\n        this.copyDataToClipboardLegacy(data);\n    }\n\n    private copyDataToClipboardLegacy(data: string): void {\n        // method 3 - if all else fails, the old school hack\n        this.executeOnTempElement(element => {\n            const eDocument = this.gridOptionsService.getDocument();\n            const focusedElementBefore = eDocument.activeElement as HTMLElement;\n\n            element.value = data || ' '; // has to be non-empty value or execCommand will not do anything\n            element.select();\n            element.focus({ preventScroll: true });\n\n            const result = eDocument.execCommand('copy');\n\n            if (!result) {\n                console.warn('AG Grid: Browser did not allow document.execCommand(\\'copy\\'). Ensure ' +\n                    'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise ' +\n                    'the browser will prevent it for security reasons.');\n            }\n\n            if (focusedElementBefore != null && focusedElementBefore.focus != null) {\n                focusedElementBefore.focus({ preventScroll: true });\n            }\n        });\n    }\n\n    private executeOnTempElement(\n        callbackNow: (element: HTMLTextAreaElement) => void,\n        callbackAfter?: (element: HTMLTextAreaElement) => void\n    ): void {\n        const eDoc = this.gridOptionsService.getDocument();\n        const eTempInput = eDoc.createElement('textarea');\n        eTempInput.style.width = '1px';\n        eTempInput.style.height = '1px';\n\n        // removing items from the DOM causes the document element to scroll to the\n        // position where the element was positioned. Here we set scrollTop / scrollLeft\n        // to prevent the document element from scrolling when we remove it from the DOM.\n        eTempInput.style.top = eDoc.documentElement.scrollTop + 'px';\n        eTempInput.style.left = eDoc.documentElement.scrollLeft + 'px';\n\n        eTempInput.style.position = 'absolute';\n        eTempInput.style.opacity = '0';\n\n        const guiRoot = this.gridCtrl.getGui();\n\n        guiRoot.appendChild(eTempInput);\n\n        try {\n            callbackNow(eTempInput);\n        } catch (err) {\n            console.warn('AG Grid: Browser does not support document.execCommand(\\'copy\\') for clipboard operations');\n        }\n\n        //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...\n        if (callbackAfter) {\n            window.setTimeout(() => {\n                callbackAfter(eTempInput);\n                guiRoot.removeChild(eTempInput);\n            }, 100);\n        } else {\n            guiRoot.removeChild(eTempInput);\n        }\n    }\n\n    private getRangeSize(): number {\n        const ranges = this.rangeService.getCellRanges();\n        let startRangeIndex = 0;\n        let endRangeIndex = 0;\n\n        if (ranges.length > 0) {\n            startRangeIndex = this.rangeService.getRangeStartRow(ranges[0]).rowIndex;\n            endRangeIndex = this.rangeService.getRangeEndRow(ranges[0]).rowIndex;\n        }\n\n        return startRangeIndex - endRangeIndex + 1;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { PrimaryColsHeaderPanel } from \"./columnToolPanel/primaryColsHeaderPanel\";\nimport { PrimaryColsListPanel } from \"./columnToolPanel/primaryColsListPanel\";\nimport { ColumnToolPanel } from \"./columnToolPanel/columnToolPanel\";\nimport { PrimaryColsPanel } from \"./columnToolPanel/primaryColsPanel\";\n\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\";\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\";\nimport { ModelItemUtils } from \"./columnToolPanel/modelItemUtils\";\nimport { VERSION } from \"./version\";\n\nexport const ColumnsToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ColumnsToolPanelModule,\n    beans: [ModelItemUtils],\n    agStackComponents: [\n        { componentName: 'AgPrimaryColsHeader', componentClass: PrimaryColsHeaderPanel },\n        { componentName: 'AgPrimaryColsList', componentClass: PrimaryColsListPanel },\n        { componentName: 'AgPrimaryCols', componentClass: PrimaryColsPanel }\n    ],\n    userComponents: [\n        { componentName: 'agColumnsToolPanel', componentClass: ColumnToolPanel },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule,\n        RowGroupingModule,\n        SideBarModule\n    ]\n};\n", "import {\n    _,\n    Autowired,\n    ColumnModel,\n    Events,\n    RefSelector,\n    ToolPanelColumnCompParams,\n    AgCheckbox,\n    AgInputTextField,\n    KeyCode,\n    PostConstruct,\n    Component\n} from \"@ag-grid-community/core\";\n\nexport enum ExpandState { EXPANDED, COLLAPSED, INDETERMINATE }\n\nexport class PrimaryColsHeaderPanel extends Component {\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    @RefSelector('eExpand') private readonly eExpand: Element;\n    @RefSelector('eSelect') private readonly eSelect: AgCheckbox;\n    @RefSelector('eFilterTextField') private eFilterTextField: AgInputTextField;\n\n    private static DEBOUNCE_DELAY = 300;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private expandState: ExpandState;\n    private selectState?: boolean;\n\n    private onFilterTextChangedDebounced: () => void;\n\n    private params: ToolPanelColumnCompParams;\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select-header\" role=\"presentation\">\n            <div ref=\"eExpand\" class=\"ag-column-select-header-icon\"></div>\n            <ag-checkbox ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>`;\n\n    constructor() {\n        super(PrimaryColsHeaderPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.createExpandIcons();\n\n        this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eExpand, 'keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.SPACE) {\n                e.preventDefault();\n                this.onExpandClicked();\n            }\n        });\n\n        this.addManagedListener(this.eSelect.getInputElement(), 'click', this.onSelectClicked.bind(this));\n        this.addManagedPropertyListener('functionsReadOnly', () => this.onFunctionsReadOnlyPropChanged());\n\n        this.eFilterTextField\n            .setAutoComplete(false)\n            .onValueChange(() => this.onFilterTextChanged());\n\n        this.addManagedListener(\n            this.eFilterTextField.getInputElement(),\n            'keydown',\n            this.onMiniFilterKeyDown.bind(this)\n        );\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n\n        this.activateTabIndex([this.eExpand]);\n    }\n\n    private onFunctionsReadOnlyPropChanged(): void {\n        const readOnly = this.gridOptionsService.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        this.params = params;\n\n        const readOnly = this.gridOptionsService.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild((\n            this.eExpandChecked = _.createIconNoSpan('columnSelectOpen', this.gridOptionsService)!\n        ));\n\n        this.eExpand.appendChild((\n            this.eExpandUnchecked = _.createIconNoSpan('columnSelectClosed', this.gridOptionsService)!\n        ));\n\n        this.eExpand.appendChild((\n            this.eExpandIndeterminate = _.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsService)!\n        ));\n\n        this.setExpandState(ExpandState.EXPANDED);\n    }\n\n    // we only show expand / collapse if we are showing columns\n    private showOrHideOptions(): void {\n        const showFilter = !this.params.suppressColumnFilter;\n        const showSelect = !this.params.suppressColumnSelectAll;\n        const showExpand = !this.params.suppressColumnExpandAll;\n        const groupsPresent = this.columnModel.isPrimaryColumnGroupsPresent();\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        _.setDisplayed(this.eFilterTextField.getGui(), showFilter);\n        _.setDisplayed(this.eSelect.getGui(), showSelect);\n        _.setDisplayed(this.eExpand, showExpand && groupsPresent);\n    }\n\n    private onFilterTextChanged(): void {\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = _.debounce(() => {\n                const filterText = this.eFilterTextField.getValue();\n                this.dispatchEvent({ type: \"filterChanged\", filterText: filterText });\n            }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n\n        this.onFilterTextChangedDebounced();\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ENTER) {\n            // we need to add a delay that corresponds to the filter text debounce delay to ensure\n            // the text filtering has happened, otherwise all columns will be deselected\n            setTimeout(() => this.onSelectClicked(), PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n    }\n\n    private onSelectClicked(): void {\n        this.dispatchEvent({ type: this.selectState ? 'unselectAll' : 'selectAll' });\n    }\n\n    private onExpandClicked(): void {\n        this.dispatchEvent({ type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll' });\n    }\n\n    public setExpandState(state: ExpandState): void {\n        this.expandState = state;\n\n        _.setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);\n        _.setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);\n        _.setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);\n    }\n\n    public setSelectionState(state?: boolean): void {\n        this.selectState = state;\n        this.eSelect.setValue(this.selectState);\n    }\n}\n", "import {\n    _,\n    AbstractColDef,\n    Autowired,\n    ColGroupDef,\n    Column,\n    ColumnModel,\n    ColumnEventType,\n    Component,\n    Events,\n    ProvidedColumnGroup,\n    IProvidedColumn,\n    ToolPanelColumnCompParams,\n    VirtualList,\n    VirtualListModel,\n    PreDestroy,\n    ColumnToolPanelState\n} from \"@ag-grid-community/core\";\nimport { PrimaryColsListPanelItemDragFeature } from './primaryColsListPanelItemDragFeature';\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp\";\nimport { ToolPanelColDefService } from \"@ag-grid-enterprise/side-bar\";\nimport { ExpandState } from \"./primaryColsHeaderPanel\";\nimport { ColumnModelItem } from \"./columnModelItem\";\nimport { ModelItemUtils } from \"./modelItemUtils\";\n\nclass UIColumnModel implements VirtualListModel {\n\n    private readonly items: ColumnModelItem[];\n\n    constructor(items: ColumnModelItem[]) {\n        this.items = items;\n    }\n\n    public getRowCount(): number {\n        return this.items.length;\n    }\n\n    public getRow(index: number): ColumnModelItem {\n        return this.items[index];\n    }\n}\n\nconst PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';\n\nexport class PrimaryColsListPanel extends Component {\n\n    public static TEMPLATE = /* html */ `<div class=\"${PRIMARY_COLS_LIST_PANEL_CLASS}\" role=\"presentation\"></div>`;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('toolPanelColDefService') private colDefService: ToolPanelColDefService;\n    @Autowired('modelItemUtils') private modelItemUtils: ModelItemUtils;\n\n    private allowDragging: boolean;\n    private filterText: string | null;\n    private expandGroupsByDefault: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n\n    private groupsExist: boolean;\n\n    private virtualList: VirtualList;\n\n    private allColsTree: ColumnModelItem[];\n    private displayedColsList: ColumnModelItem[];\n    private destroyColumnItemFuncs: (() => void)[] = [];\n    private hasLoadedInitialState: boolean = false;\n    private isInitialState: boolean = false;\n\n    constructor() {\n        super(PrimaryColsListPanel.TEMPLATE);\n    }\n\n    @PreDestroy\n    private destroyColumnTree(): void {\n        this.allColsTree = [];\n        this.destroyColumnItemFuncs.forEach(f => f());\n        this.destroyColumnItemFuncs = [];\n    }\n\n    public init(\n        params: ToolPanelColumnCompParams,\n        allowDragging: boolean,\n        eventType: ColumnEventType\n    ): void {\n        this.params = params;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnsChanged.bind(this));\n\n        const eventsImpactingCheckedState: string[] = [\n            Events.EVENT_COLUMN_PIVOT_CHANGED,\n            Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            Events.EVENT_COLUMN_VISIBLE,\n            Events.EVENT_NEW_COLUMNS_LOADED\n        ];\n\n        eventsImpactingCheckedState.forEach(event => {\n            // update header select all checkbox with current selection state\n            this.addManagedListener(this.eventService, event, this.fireSelectionChangedEvent.bind(this));\n        });\n\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n\n        this.virtualList = this.createManagedBean(new VirtualList({\n            cssIdentifier: 'column-select',\n            ariaRole: 'tree',\n        }));\n\n        this.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setComponentCreator(\n            (item: ColumnModelItem, listItemElement: HTMLElement) => {\n                _.setAriaLevel(listItemElement, (item.getDept() + 1));\n                return this.createComponentFromItem(item, listItemElement);\n            }\n        );\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n\n        if (this.params.suppressColumnMove) { return; }\n        \n        this.createManagedBean(\n            new PrimaryColsListPanelItemDragFeature(this, this.virtualList)\n        );\n    }\n\n    private createComponentFromItem(item: ColumnModelItem, listItemElement: HTMLElement): Component {\n        if (item.isGroup()) {\n            const renderedGroup = new ToolPanelColumnGroupComp(item, this.allowDragging, this.eventType, listItemElement);\n            this.getContext().createBean(renderedGroup);\n\n            return renderedGroup;\n        }\n\n        const columnComp = new ToolPanelColumnComp(item, this.allowDragging, this.groupsExist, listItemElement);\n        this.getContext().createBean(columnComp);\n\n        return columnComp;\n    }\n\n    public onColumnsChanged(): void {\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        const expandedStates = this.getExpandedStates();\n\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n\n        if (shouldSyncColumnLayoutWithGrid) {\n            this.buildTreeFromWhatGridIsDisplaying();\n        } else {\n            this.buildTreeFromProvidedColumnDefs();\n        }\n\n        this.setExpandedStates(expandedStates);\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n\n        this.isInitialState = false;\n    }\n\n    public getDisplayedColsList(): ColumnModelItem[] {\n        return this.displayedColsList;\n    }\n\n    private getExpandedStates(): {[key:string]:boolean} {\n        const res: {[id:string]:boolean} = {};\n        \n        if (this.isInitialState) {\n            const { expandedGroupIds } = this.params.initialState as ColumnToolPanelState;\n            expandedGroupIds.forEach(id => {\n                res[id] = true;\n            });\n            return res;\n        }\n\n        if (!this.allColsTree) { return {}; }\n\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                res[colGroup.getId()] = item.isExpanded();\n            }\n        });\n\n        return res;\n    }\n\n    private setExpandedStates(states: {[key:string]:boolean}): void {\n        if (!this.allColsTree) { return; }\n\n        const { isInitialState } = this;\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                const expanded = states[colGroup.getId()];\n                const groupExistedLastTime = expanded != null;\n                if (groupExistedLastTime || isInitialState) {\n                    item.setExpanded(!!expanded);\n                }\n            }\n        });\n    }\n\n    private buildTreeFromWhatGridIsDisplaying(): void {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    }\n\n    public setColumnLayout(colDefs: AbstractColDef[]): void {\n        const columnTree = this.colDefService.createColumnTree(colDefs);\n        this.buildListModel(columnTree);\n\n        // using col defs to check if groups exist as it could be a custom layout\n        this.groupsExist = colDefs.some(colDef => {\n            return colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n        });\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        // add column / group comps to tool panel\n        this.buildListModel(this.columnModel.getPrimaryColumnTree());\n        this.groupsExist = this.columnModel.isPrimaryColumnGroupsPresent();\n    }\n\n    private buildListModel(columnTree: IProvidedColumn[]): void {\n        const columnExpandedListener = this.onColumnExpanded.bind(this);\n        const addListeners = (item: ColumnModelItem) => {\n            item.addEventListener(ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            const removeFunc = item.removeEventListener.bind(item, ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            this.destroyColumnItemFuncs.push(removeFunc);\n        };\n\n        const recursivelyBuild = (tree: IProvidedColumn[], dept: number, parentList: ColumnModelItem[]): void => {\n            tree.forEach(child => {\n                if (child instanceof ProvidedColumnGroup) {\n                    createGroupItem(child, dept, parentList);\n                } else {\n                    createColumnItem(child as Column, dept, parentList);\n                }\n            });\n        };\n\n        const createGroupItem = (columnGroup: ProvidedColumnGroup, dept: number, parentList: ColumnModelItem[]): void => {\n            const columnGroupDef = columnGroup.getColGroupDef();\n            const skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;\n            if (skipThisGroup) { return; }\n\n            if (columnGroup.isPadding()) {\n                recursivelyBuild(columnGroup.getChildren(), dept, parentList);\n                return;\n            }\n\n            const displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'columnToolPanel');\n            const item: ColumnModelItem = new ColumnModelItem(displayName, columnGroup, dept, true, this.expandGroupsByDefault);\n\n            parentList.push(item);\n            addListeners(item);\n\n            recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());\n        };\n\n        const createColumnItem = (column: Column, dept: number, parentList: ColumnModelItem[]): void => {\n            const skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;\n\n            if (skipThisColumn) { return; }\n\n            const displayName = this.columnModel.getDisplayNameForColumn(column, 'columnToolPanel');\n\n            parentList.push(new ColumnModelItem(displayName, column, dept));\n        };\n\n        this.destroyColumnTree();\n        recursivelyBuild(columnTree, 0, this.allColsTree);\n    }\n\n    private onColumnExpanded(): void {\n        this.flattenAndFilterModel();\n    }\n\n    private flattenAndFilterModel(): void {\n        this.displayedColsList = [];\n\n        const recursiveFunc = (item: ColumnModelItem) => {\n            if (!item.isPassesFilter()) { return; }\n            this.displayedColsList.push(item);\n            if (item.isGroup() && item.isExpanded()) {\n                item.getChildren().forEach(recursiveFunc);\n            }\n        };\n\n        this.allColsTree.forEach(recursiveFunc);\n        this.virtualList.setModel(new UIColumnModel(this.displayedColsList));\n\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.virtualList.refresh();\n\n        if (focusedRow != null) {\n            this.focusRowIfAlive(focusedRow);\n        }\n\n        this.notifyListeners();\n\n        this.refreshAriaLabel();\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnListName = translate('ariaColumnPanelList', 'Column List');\n        const localeColumns = translate('columns', 'Columns');\n        const items = this.displayedColsList.length;\n\n        _.setAriaLabel(this.virtualList.getAriaElement(), `${columnListName} ${items} ${localeColumns}`);\n    }\n\n    private focusRowIfAlive(rowIndex: number): void {\n        window.setTimeout(() => {\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private forEachItem(callback: (item: ColumnModelItem) => void): void {\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach(item => {\n                callback(item);\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n            });\n        };\n\n        if (!this.allColsTree) { return; }\n\n        recursiveFunc(this.allColsTree);\n    }\n\n    public doSetExpandedAll(value: boolean): void {\n        this.forEachItem(item => {\n            if (item.isGroup()) {\n                item.setExpanded(value);\n            }\n        });\n    }\n\n    public setGroupsExpanded(expand: boolean, groupIds?: string[]): void {\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n\n        const expandedGroupIds: string[] = [];\n\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n\n            const groupId = item.getColumnGroup().getId();\n            if (groupIds.indexOf(groupId) >= 0) {\n                item.setExpanded(expand);\n                expandedGroupIds.push(groupId);\n            }\n        });\n\n        const unrecognisedGroupIds = groupIds.filter(groupId => !_.includes(expandedGroupIds, groupId));\n        if (unrecognisedGroupIds.length > 0) {\n            console.warn('AG Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    }\n\n    private getExpandState(): ExpandState {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n            if (item.isExpanded()) {\n                expandedCount++;\n            } else {\n                notExpandedCount++;\n            }\n        });\n\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return ExpandState.INDETERMINATE;\n        }\n\n        if (notExpandedCount > 0) {\n            return ExpandState.COLLAPSED;\n        }\n\n        return ExpandState.EXPANDED;\n    }\n\n    public doSetSelectedAll(selectAllChecked: boolean): void {\n        this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);\n    }\n\n    private getSelectionState(): boolean | undefined {\n\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.forEachItem(item => {\n            if (item.isGroup()) { return; }\n            if (!item.isPassesFilter()) { return; }\n\n            const column = item.getColumn();\n            const colDef = column.getColDef();\n\n            let checked: boolean;\n\n            if (pivotMode) {\n                const noPivotModeOptionsAllowed = !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();\n            } else {\n                if (colDef.lockVisible) { return; }\n\n                checked = column.isVisible();\n            }\n\n            checked ? checkedCount++ : uncheckedCount++;\n\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) { return undefined; }\n\n        return !(checkedCount === 0 || uncheckedCount > 0);\n    }\n\n    public setFilterText(filterText: string) {\n        this.filterText = _.exists(filterText) ? filterText.toLowerCase() : null;\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private markFilteredColumns(): void {\n\n        const passesFilter = (item: ColumnModelItem) => {\n            if (!_.exists(this.filterText)) { return true; }\n\n            const displayName = item.getDisplayName();\n\n            return displayName == null || displayName.toLowerCase().indexOf(this.filterText) !== -1;\n        };\n\n        const recursivelyCheckFilter = (item: ColumnModelItem, parentPasses: boolean): boolean => {\n            let atLeastOneChildPassed = false;\n            if (item.isGroup()) {\n                const groupPasses = passesFilter(item);\n                item.getChildren().forEach(child => {\n                    const childPasses = recursivelyCheckFilter(child, groupPasses || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n\n            const filterPasses = (parentPasses || atLeastOneChildPassed) ? true : passesFilter(item);\n            item.setPassesFilter(filterPasses);\n            return filterPasses;\n        };\n\n        this.allColsTree.forEach(item => recursivelyCheckFilter(item, false));\n    }\n\n    private notifyListeners(): void {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    }\n\n    private fireGroupExpandedEvent(): void {\n        const expandState = this.getExpandState();\n        this.dispatchEvent({ type: 'groupExpanded', state: expandState });\n    }\n\n    private fireSelectionChangedEvent(): void {\n        if (!this.allColsTree) { return; }\n        const selectionState = this.getSelectionState();\n        this.dispatchEvent({ type: 'selectionChanged', state: selectionState });\n    }\n\n    public getExpandedGroups(): string[] {\n        const expandedGroupIds: string[] = [];\n\n        if (!this.allColsTree) { return expandedGroupIds; }\n\n        this.forEachItem(item => {\n            if (item.isGroup() && item.isExpanded()) {\n                expandedGroupIds.push(item.getColumnGroup().getId());\n            }\n        });\n\n        return expandedGroupIds;\n    }\n}\n", "import {\n    Autowired,\n    BeanStub,\n    Column,\n    ColumnModel,\n    ColumnPanelItemDragStartEvent,\n    DragSourceType,\n    Events,\n    GridOptionsService,\n    ProvidedColumnGroup,\n    PostConstruct,\n    VirtualList,\n    VirtualListDragFeature,\n    _,\n    VirtualListDragItem\n} from \"@ag-grid-community/core\";\n\nimport { PrimaryColsListPanel } from \"./primaryColsListPanel\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp\";\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp\";\nexport class PrimaryColsListPanelItemDragFeature extends BeanStub {\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridOptionsService') protected readonly gridOptionsService: GridOptionsService;\n\n    constructor(\n        private readonly comp: PrimaryColsListPanel,\n        private readonly virtualList: VirtualList,\n    ) { super(); }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createManagedBean(new VirtualListDragFeature<\n            PrimaryColsListPanel,\n            ToolPanelColumnGroupComp | ToolPanelColumnComp,\n            Column | ProvidedColumnGroup,\n            ColumnPanelItemDragStartEvent\n        >(\n            this.comp,\n            this.virtualList,\n            {\n                dragSourceType: DragSourceType.ToolPanel,\n                listItemDragStartEvent: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                listItemDragEndEvent: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n                eventSource: this.eventService,\n                getCurrentDragValue: (listItemDragStartEvent: ColumnPanelItemDragStartEvent) => this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: (currentDragValue: Column | ProvidedColumnGroup | null) => this.isMoveBlocked(currentDragValue),\n                getNumRows: (comp: PrimaryColsListPanel) => comp.getDisplayedColsList().length,\n                moveItem: (\n                    currentDragValue: Column | ProvidedColumnGroup | null,\n                    lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem)\n            }\n        ));\n    }\n\n    private getCurrentDragValue(listItemDragStartEvent: ColumnPanelItemDragStartEvent): Column | ProvidedColumnGroup {\n        return listItemDragStartEvent.column;\n    }\n\n    private isMoveBlocked(currentDragValue: Column | ProvidedColumnGroup | null): boolean {\n        const preventMoving = this.gridOptionsService.get('suppressMovableColumns');\n        if (preventMoving) {\n            return true;\n        }\n\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const hasNotMovable = currentColumns.find(col => {\n            const colDef = col.getColDef();\n            return !!colDef.suppressMovable || !!colDef.lockPosition;\n        });\n\n        return !!hasNotMovable;\n    }\n\n    private moveItem(\n        currentDragValue: Column | ProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): void {\n        const targetIndex: number | null = this.getTargetIndex(currentDragValue, lastHoveredListItem);\n\n        const columnsToMove: Column[] = this.getCurrentColumns(currentDragValue);\n\n        if (targetIndex != null) {\n            this.columnModel.moveColumns(columnsToMove, targetIndex, 'toolPanelUi');\n        }\n    }\n\n    private getMoveDiff(currentDragValue: Column | ProvidedColumnGroup | null, end: number): number {\n        const allColumns = this.columnModel.getAllGridColumns();\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const currentColumn = currentColumns[0];\n        const span = currentColumns.length;\n\n        const currentIndex = allColumns.indexOf(currentColumn);\n\n        if (currentIndex < end) {\n            return span;\n        }\n\n        return 0;\n    }\n\n    private getCurrentColumns(currentDragValue: Column | ProvidedColumnGroup | null): Column[] {\n        if (currentDragValue instanceof ProvidedColumnGroup) {\n            return currentDragValue.getLeafColumns();\n        }\n        return [currentDragValue!];\n    }\n\n    private getTargetIndex(\n        currentDragValue: Column | ProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): number | null {\n        if (!lastHoveredListItem) { return null; }\n        const columnItemComponent = lastHoveredListItem.component;\n        let isBefore = lastHoveredListItem.position === 'top';\n\n        let targetColumn: Column;\n\n        if (columnItemComponent instanceof ToolPanelColumnGroupComp) {\n            const columns = columnItemComponent.getColumns();\n            targetColumn = columns[0];\n            isBefore = true;\n        } else {\n            targetColumn = columnItemComponent.getColumn();\n        }\n\n        // if the target col is in the cols to be moved, no index to move.\n        const movingCols = this.getCurrentColumns(currentDragValue);\n        if (movingCols.indexOf(targetColumn) !== -1) {\n            return null;\n        }\n\n        const targetColumnIndex = this.columnModel.getAllGridColumns().indexOf(targetColumn);\n        const adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;\n        const diff = this.getMoveDiff(currentDragValue, adjustedTarget);\n\n        return adjustedTarget - diff;\n    }\n}", "import {\n    _,\n    AgCheckbox,\n    Autowired,\n    Column,\n    ColumnModel,\n    ColumnEventType,\n    ColumnPanelItemDragStartEvent,\n    ColumnPanelItemDragEndEvent,\n    Component,\n    CssClassApplier,\n    DragAndDropService,\n    DragSource,\n    DragSourceType,\n    Events,\n    ITooltipParams,\n    KeyCode,\n    ProvidedColumnGroup,\n    PostConstruct,\n    RefSelector,\n    TouchListener,\n    WithoutGridCommon,\n    IAggFunc,\n    DragItem\n} from \"@ag-grid-community/core\";\nimport { ColumnModelItem } from \"./columnModelItem\";\nimport { ModelItemUtils } from \"./modelItemUtils\";\nimport { ToolPanelContextMenu } from \"./toolPanelContextMenu\";\n\nexport class ToolPanelColumnGroupComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('modelItemUtils') private modelItemUtils: ModelItemUtils;\n\n    @RefSelector('cbSelect') private cbSelect: AgCheckbox;\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n\n    @RefSelector('eGroupOpenedIcon') private eGroupOpenedIcon: Element;\n    @RefSelector('eGroupClosedIcon') private eGroupClosedIcon: Element;\n    @RefSelector('eColumnGroupIcons') private eColumnGroupIcons: Element;\n\n    private eDragHandle: Element;\n\n    private readonly columnGroup: ProvidedColumnGroup;\n    private readonly columnDept: number;\n\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        private readonly modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly eventType: ColumnEventType,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.modelItem = modelItem;\n        this.columnGroup = modelItem.getColumnGroup();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n        this.allowDragging = allowDragging;\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE);\n\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-group-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n        this.setupExpandContract();\n\n        this.addCssClass('ag-column-select-indent-' + this.columnDept);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.addManagedListener(this.cbSelect, Events.EVENT_FIELD_VALUE_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.modelItem, ColumnModelItem.EVENT_EXPANDED_CHANGED, this.onExpandChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        this.refreshAriaExpanded();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n\n        const classes = CssClassApplier.getToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.gridOptionsService, null, this.columnGroup);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumns(): Column[] {\n        return this.columnGroup.getLeafColumns();\n    }\n\n    private setupTooltip(): void {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n\n        if (!colGroupDef) { return; }\n\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n\n        const refresh = () => {\n            const newTooltipText = colGroupDef.headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumnGroup';\n        return res;\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.modelItem.setExpanded(false);\n                break;\n            case KeyCode.RIGHT:\n                e.preventDefault();\n                this.modelItem.setExpanded(true);\n                break;\n            case KeyCode.SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n                break;\n        }\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { columnGroup, gridOptionsService } = this;\n\n        if (gridOptionsService.get('functionsReadOnly')) { return; }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(columnGroup, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        })\n    }\n\n    private addVisibilityListenersToAllChildren(): void {\n        this.columnGroup.getLeafColumns().forEach(column => {\n            this.addManagedListener(column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        });\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.columnGroup\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                     // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: this.columnGroup.getLeafColumns(),\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: this.eventType\n                    })\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const columns = this.columnGroup.getLeafColumns();\n        const visibleState: { [key: string]: boolean; } = {};\n        const pivotState: { [key: string]: {\n            pivot?: boolean;\n            rowGroup?: boolean;\n            aggFunc?: string | IAggFunc | null; }\n        } = {};\n        columns.forEach(col => {\n            const colId = col.getId();\n            visibleState[colId] = col.isVisible();\n            pivotState[colId] = this.modelItemUtils.createPivotState(col);\n        });\n\n        return {\n            columns,\n            visibleState,\n            pivotState\n        };\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(_.createIcon('columnSelectClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(_.createIcon('columnSelectOpen', this.gridOptionsService, null));\n\n        this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n\n        const touchListener = new TouchListener(this.eColumnGroupIcons, true);\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n\n    private onLabelClicked(): void {\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private getVisibleLeafColumns(): Column[] {\n        const childColumns: Column[] = [];\n\n        const extractCols = (children: ColumnModelItem[]) => {\n            children.forEach(child => {\n                if (!child.isPassesFilter()) { return; }\n                if (child.isGroup()) {\n                    extractCols(child.getChildren());\n                } else {\n                    childColumns.push(child.getColumn());\n                }\n            });\n        };\n\n        extractCols(this.modelItem.getChildren());\n\n        return childColumns;\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        this.refreshAriaLabel();\n\n        if (this.processingColumnStateChange) { return; }\n\n        this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumnGroup', 'Column Group');\n        const checkboxValue = this.cbSelect.getValue();\n        const state = checkboxValue === undefined ?\n            translate('ariaIndeterminate', 'indeterminate') : \n            (checkboxValue ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden'));\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    public onColumnStateChanged(): void {\n        const selectedValue = this.workOutSelectedValue();\n        const readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setValue(selectedValue);\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.addOrRemoveCssClass('ag-column-select-column-group-readonly', readOnlyValue);\n        this.processingColumnStateChange = false;\n    }\n\n    private workOutSelectedValue(): boolean | undefined {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        const visibleLeafColumns = this.getVisibleLeafColumns();\n\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        visibleLeafColumns.forEach(column => {\n            if (!pivotMode && column.getColDef().lockVisible) { return; }\n\n            if (this.isColumnChecked(column, pivotMode)) {\n                checkedCount++;\n            } else {\n                uncheckedCount++;\n            }\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n\n        return checkedCount > 0;\n    }\n\n    private workOutReadOnlyValue(): boolean {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        let colsThatCanAction = 0;\n\n        this.columnGroup.getLeafColumns().forEach(col => {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            } else {\n                if (!col.getColDef().lockVisible) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n\n        return colsThatCanAction === 0;\n    }\n\n    private isColumnChecked(column: Column, pivotMode: boolean): boolean {\n        if (pivotMode) {\n            const pivoted = column.isPivotActive();\n            const grouped = column.isRowGroupActive();\n            const aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n\n        return column.isVisible();\n    }\n\n    private onExpandOrContractClicked(): void {\n        const oldState = this.modelItem.isExpanded();\n        this.modelItem.setExpanded(!oldState);\n    }\n\n    private onExpandChanged() {\n        this.setOpenClosedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private setOpenClosedIcons(): void {\n        const folderOpen = this.modelItem.isExpanded();\n        _.setDisplayed(this.eGroupClosedIcon, !folderOpen);\n        _.setDisplayed(this.eGroupOpenedIcon, folderOpen);\n    }\n\n    private refreshAriaExpanded(): void {\n        _.setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        const cbValue = this.cbSelect.getValue();\n        const readOnly = this.cbSelect.isReadOnly();\n\n        if (!readOnly && ((value && !cbValue) || (!value && cbValue))) {\n            this.cbSelect.toggle();\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public setSelected(selected: boolean) {\n        this.cbSelect.setValue(selected, true);\n    }\n}\n", "import {\n    AgEventListener,\n    Column,\n    EventService,\n    IEventEmitter,\n    ProvidedColumnGroup\n} from \"@ag-grid-community/core\";\n\nexport class ColumnModelItem implements IEventEmitter {\n\n    private eventService: EventService = new EventService();\n\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n\n    private readonly group: boolean;\n    private readonly displayName: string | null;\n    private readonly columnGroup: ProvidedColumnGroup;\n    private readonly column: Column;\n    private readonly dept: number;\n    private readonly children: ColumnModelItem[];\n\n    private expanded: boolean | undefined;\n    private passesFilter: boolean;\n\n    constructor(\n        displayName: string | null,\n        columnOrGroup: Column | ProvidedColumnGroup,\n        dept: number,\n        group = false,\n        expanded?: boolean\n    ) {\n        this.displayName = displayName;\n        this.dept = dept;\n        this.group = group;\n\n        if (group) {\n            this.columnGroup = columnOrGroup as ProvidedColumnGroup;\n            this.expanded = expanded;\n            this.children = [];\n        } else {\n            this.column = columnOrGroup as Column;\n        }\n    }\n\n    public isGroup(): boolean { return this.group; }\n    public getDisplayName(): string | null { return this.displayName; }\n    public getColumnGroup(): ProvidedColumnGroup { return this.columnGroup; }\n    public getColumn(): Column { return this.column; }\n    public getDept(): number { return this.dept; }\n    public isExpanded(): boolean { return !!this.expanded; }\n    public getChildren(): ColumnModelItem[] { return this.children; }\n    public isPassesFilter(): boolean { return this.passesFilter; }\n\n    public setExpanded(expanded: boolean): void {\n        if (expanded === this.expanded) { return; }\n        this.expanded = expanded;\n        this.eventService.dispatchEvent({type: ColumnModelItem.EVENT_EXPANDED_CHANGED});\n    }\n\n    public setPassesFilter(passesFilter: boolean): void {\n        this.passesFilter = passesFilter;\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener): void {\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n}\n", "import {\n    AgMenuItemComponent,\n    AgMenuList,\n    Autowired,\n    Column,\n    ColumnModel,\n    Component,\n    FocusService,\n    MenuItemDef,\n    PopupService,\n    PostConstruct,\n    ProvidedColumnGroup, \n    _\n} from \"@ag-grid-community/core\";\n\ntype MenuItemName = 'rowGroup' | 'value' | 'pivot';\n\ntype MenuItemProperty = {\n    allowedFunction: (col: Column) => boolean;\n    activeFunction: (col: Column) => boolean;\n    activateLabel: (name: string) => string;\n    deactivateLabel: (name: string) => string;\n    activateFunction: () => void;\n    deActivateFunction: () => void;\n    addIcon: string;\n    removeIcon: string;\n};\n\nexport class ToolPanelContextMenu extends Component {\n\n    private columns: Column[];\n    private allowGrouping: boolean;\n    private allowValues: boolean;\n    private allowPivoting: boolean;\n    private menuItemMap: Map<MenuItemName, MenuItemProperty>;\n    private displayName: string | null = null;\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    constructor(\n        private readonly column: Column | ProvidedColumnGroup,\n        private readonly mouseEvent: MouseEvent,\n        private readonly parentEl: HTMLElement\n    ) {\n        super(/* html */ `<div class=\"ag-menu\"></div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.initializeProperties(this.column);\n        this.buildMenuItemMap();\n\n        if (this.column instanceof Column) {\n            this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        } else {\n            this.displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, this.column, 'columnToolPanel');\n        }\n\n        if (this.isActive()) {\n            this.mouseEvent.preventDefault();\n            const menuItemsMapped: MenuItemDef[] = this.getMappedMenuItems();\n            if (menuItemsMapped.length === 0) { return; }\n            \n            this.displayContextMenu(menuItemsMapped);\n        }\n    }\n\n    private initializeProperties(column: Column | ProvidedColumnGroup): void {\n        if (column instanceof ProvidedColumnGroup) {\n            this.columns = column.getLeafColumns();\n        } else {\n            this.columns = [column];\n        }\n\n        this.allowGrouping = this.columns.some(col => col.isPrimary() && col.isAllowRowGroup());\n        this.allowValues = this.columns.some(col => col.isPrimary() && col.isAllowValue());\n        this.allowPivoting = this.columnModel.isPivotMode() && this.columns.some(col => col.isPrimary() && col.isAllowPivot());\n    }\n\n    private buildMenuItemMap(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        this.menuItemMap = new Map<MenuItemName, MenuItemProperty>();\n        this.menuItemMap.set('rowGroup', {\n            allowedFunction: (col: Column) => col.isPrimary() && col.isAllowRowGroup() && !this.columnModel.isColumnGroupingLocked(col),\n            activeFunction: (col: Column) => col.isRowGroupActive(),\n            activateLabel: () => `${localeTextFunc('groupBy', 'Group by')} ${this.displayName}`,\n            deactivateLabel: () => `${localeTextFunc('ungroupBy', 'Un-Group by')} ${this.displayName}`,\n            activateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.addColumnsToList(groupedColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.removeColumnsFromList(groupedColumns), \"toolPanelUi\");\n            },\n            addIcon: 'menuAddRowGroup',\n            removeIcon: 'menuRemoveRowGroup'\n        });\n\n        this.menuItemMap.set('value', {\n            allowedFunction: (col: Column) => col.isPrimary() && col.isAllowValue(),\n            activeFunction: (col: Column) => col.isValueActive(),\n            activateLabel: () => localeTextFunc('addToValues', `Add ${this.displayName} to values`, [this.displayName!]),\n            deactivateLabel: () => localeTextFunc('removeFromValues', `Remove ${this.displayName} from values`, [this.displayName!]),\n            activateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.addColumnsToList(valueColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.removeColumnsFromList(valueColumns), \"toolPanelUi\");\n            },\n            addIcon: 'valuePanel',\n            removeIcon: 'valuePanel'\n        });\n\n        this.menuItemMap.set('pivot', {\n            allowedFunction: (col: Column) => this.columnModel.isPivotMode() && col.isPrimary() && col.isAllowPivot(),\n            activeFunction: (col: Column) => col.isPivotActive(),\n            activateLabel: () => localeTextFunc('addToLabels', `Add ${this.displayName} to labels`, [this.displayName!]),\n            deactivateLabel: () => localeTextFunc('removeFromLabels', `Remove ${this.displayName} from labels`, [this.displayName!]),\n            activateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.addColumnsToList(pivotColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.removeColumnsFromList(pivotColumns), \"toolPanelUi\");\n            },\n            addIcon: 'pivotPanel',\n            removeIcon: 'pivotPanel'\n        });\n    }\n\n    private addColumnsToList(columnList: Column[]): Column[] {\n        return [...columnList].concat(this.columns.filter(col => columnList.indexOf(col) === -1));\n    }\n\n    private removeColumnsFromList(columnList: Column[]): Column[] {\n        return columnList.filter(col => this.columns.indexOf(col) === -1);\n    }\n\n    private displayContextMenu(menuItemsMapped: MenuItemDef[]): void {\n        const eGui = this.getGui();\n        const menuList = this.createBean(new AgMenuList());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let hideFunc = () => {};\n\n        eGui.appendChild(menuList.getGui());\n        menuList.addMenuItems(menuItemsMapped);\n        menuList.addManagedListener(menuList, AgMenuItemComponent.EVENT_CLOSE_MENU, () => {\n            this.parentEl.focus();\n            hideFunc();\n        });\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            afterGuiAttached: () => this.focusService.focusInto(menuList.getGui()),\n            ariaLabel: localeTextFunc('ariaLabelContextMenu', 'Context Menu'),\n            closedCallback: (e: KeyboardEvent) => {\n                if (e instanceof KeyboardEvent) {\n                    this.parentEl.focus();\n                }\n                this.destroyBean(menuList);\n            }\n        });\n\n        if (addPopupRes) {\n            hideFunc = addPopupRes.hideFunc;\n        }\n\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'columnContextMenu',\n            mouseEvent: this.mouseEvent,\n            ePopup: eGui\n        });\n    }\n\n    private isActive(): boolean {\n        return this.allowGrouping || this.allowValues || this.allowPivoting;\n    }\n\n    private getMappedMenuItems(): MenuItemDef[] {\n        const ret: MenuItemDef[] = [];\n        for (const val of this.menuItemMap.values()) {\n            const isInactive = this.columns.some(col => val.allowedFunction(col) && !val.activeFunction(col));\n            const isActive = this.columns.some(col => val.allowedFunction(col) && val.activeFunction(col));\n\n            if (isInactive) {\n                ret.push({\n                    name: val.activateLabel(this.displayName!),\n                    icon: _.createIconNoSpan(val.addIcon, this.gridOptionsService, null),\n                    action: () => val.activateFunction()\n                });\n            }\n\n            if (isActive) {\n                ret.push({\n                    name: val.deactivateLabel(this.displayName!),\n                    icon: _.createIconNoSpan(val.removeIcon, this.gridOptionsService, null),\n                    action: () => val.deActivateFunction()\n                });\n            }\n        }\n\n        return ret;\n    }\n\n\n}", "import {\n    _,\n    AgCheckbox,\n    Autowired,\n    Column,\n    ColumnModel,\n    ColumnPanelItemDragStartEvent,\n    ColumnPanelItemDragEndEvent,\n    Component,\n    CssClassApplier,\n    DragAndDropService,\n    DragSource,\n    DragSourceType,\n    Events,\n    ITooltipParams,\n    KeyCode,\n    PostConstruct,\n    RefSelector,\n    WithoutGridCommon,\n    DragItem\n} from \"@ag-grid-community/core\";\nimport { ColumnModelItem } from \"./columnModelItem\";\nimport { ModelItemUtils } from \"./modelItemUtils\";\nimport { ToolPanelContextMenu } from \"./toolPanelContextMenu\";\n\nexport class ToolPanelColumnComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private readonly dragAndDropService: DragAndDropService;\n    @Autowired('modelItemUtils') private readonly modelItemUtils: ModelItemUtils;\n\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @RefSelector('cbSelect') private cbSelect: AgCheckbox;\n\n    private column: Column;\n    private columnDept: number;\n    private eDragHandle: Element;\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly groupsExist: boolean,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.column = modelItem.getColumn();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n    }\n\n    @PostConstruct\n    public init(): void {\n\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        const displayNameSanitised: any = _.escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        const indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(`ag-column-select-indent-${indent}`);\n\n        this.setupDragging();\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n\n        this.addManagedPropertyListener('functionsReadOnly', this.onColumnStateChanged.bind(this));\n\n        this.addManagedListener(this.cbSelect, Events.EVENT_FIELD_VALUE_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n\n        this.setupTooltip();\n\n        const classes = CssClassApplier.getToolPanelClassesFromColDef(this.column.getColDef(), this.gridOptionsService, this.column, null);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumn(): Column {\n        return this.column;\n    }\n\n    private setupTooltip(): void {\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumn', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { column, gridOptionsService } = this;\n\n        if (gridOptionsService.get('functionsReadOnly')) { return; }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(column, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        })\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    }\n\n    private onLabelClicked(): void {\n        if (this.gridOptionsService.get('functionsReadOnly')) {\n            return;\n        }\n\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) { return; }\n\n        this.refreshAriaLabel();\n\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumn', 'Column');\n        const state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.column\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: [this.column],\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: 'toolPanelUi'\n                    })\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const colId = this.column.getColId();\n        const visibleState = { [colId]: this.column.isVisible() };\n        const pivotState = { [colId]: this.modelItemUtils.createPivotState(this.column) }\n        return {\n            columns: [this.column],\n            visibleState,\n            pivotState\n        };\n    }\n\n    private onColumnStateChanged(): void {\n        this.processingColumnStateChange = true;\n        const isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            const anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        } else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n\n        let canBeToggled = true;\n        let canBeDragged = true;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            const functionsReadOnly = this.gridOptionsService.get('functionsReadOnly');\n            //  b) column is not allow any functions on it\n            const noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            canBeToggled = !functionsReadOnly && !noFunctionsAllowed;\n            canBeDragged = canBeToggled;\n        } else {\n            const { enableRowGroup, enableValue, lockPosition, suppressMovable, lockVisible } =\n                this.column.getColDef();\n            const forceDraggable = !!enableRowGroup || !!enableValue;\n            const disableDraggable = !!lockPosition || !!suppressMovable;\n            canBeToggled = !lockVisible;\n            canBeDragged = forceDraggable || !disableDraggable;\n        }\n\n        this.cbSelect.setReadOnly(!canBeToggled);\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !canBeDragged);\n        this.addOrRemoveCssClass('ag-column-select-column-readonly', !canBeDragged && !canBeToggled);\n\n        const checkboxPassive = isPivotMode && this.gridOptionsService.get('functionsPassive');\n        this.cbSelect.setPassive(checkboxPassive);\n\n        this.processingColumnStateChange = false;\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public isExpandable(): boolean {\n        return false;\n    }\n\n    public setExpanded(value: boolean): void {\n        console.warn('AG Grid: can not expand a column item that does not represent a column group header');\n    }\n}\n", "import {\n    _,\n    ColDef,\n    ColGroupDef,\n    Component,\n    Events,\n    IColumnToolPanel,\n    IToolPanelComp,\n    ToolPanelColumnCompParams,\n    ModuleNames,\n    ModuleRegistry,\n    ColumnToolPanelState\n} from \"@ag-grid-community/core\";\nimport { PivotModePanel } from \"./pivotModePanel\";\nimport { PivotDropZonePanel, RowGroupDropZonePanel, ValuesDropZonePanel } from \"@ag-grid-enterprise/row-grouping\";\nimport { PrimaryColsPanel } from \"./primaryColsPanel\";\n\nexport class ColumnToolPanel extends Component implements IColumnToolPanel, IToolPanelComp {\n\n    private static TEMPLATE = `<div class=\"ag-column-panel\"></div>`;\n\n    private initialised = false;\n    private params: ToolPanelColumnCompParams;\n\n    private childDestroyFuncs: (() => void)[] = [];\n\n    private pivotModePanel: PivotModePanel;\n    private primaryColsPanel: PrimaryColsPanel;\n    private rowGroupDropZonePanel: RowGroupDropZonePanel;\n    private valuesDropZonePanel: ValuesDropZonePanel;\n    private pivotDropZonePanel: PivotDropZonePanel;\n\n    constructor() {\n        super(ColumnToolPanel.TEMPLATE);\n    }\n\n    // lazy initialise the panel\n    public setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        const defaultParams: Partial<ToolPanelColumnCompParams> = this.gridOptionsService.addGridCommonParams({\n            suppressColumnMove: false,\n            suppressColumnSelectAll: false,\n            suppressColumnFilter: false,\n            suppressColumnExpandAll: false,\n            contractColumnSelection: false,\n            suppressPivotMode: false,\n            suppressRowGroups: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        this.params = {\n            ...defaultParams,\n            ...params,\n        };\n\n        if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {\n            // DO NOT CHANGE TO createManagedBean\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n            this.appendChild(this.pivotModePanel);\n        }\n\n        // DO NOT CHANGE TO createManagedBean\n        this.primaryColsPanel = this.createBean(new PrimaryColsPanel());\n        this.childDestroyFuncs.push(() => this.destroyBean(this.primaryColsPanel));\n\n        this.primaryColsPanel.init(true, this.params, \"toolPanelUi\");\n        this.primaryColsPanel.addCssClass('ag-column-panel-column-select');\n        this.appendChild(this.primaryColsPanel);\n\n        if (this.isRowGroupingModuleLoaded()) {\n            if (!this.params.suppressRowGroups) {\n                // DO NOT CHANGE TO createManagedBean\n                this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.rowGroupDropZonePanel));\n                this.appendChild(this.rowGroupDropZonePanel);\n            }\n\n            if (!this.params.suppressValues) {\n                // DO NOT CHANGE TO createManagedBean\n                this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.valuesDropZonePanel));\n                this.appendChild(this.valuesDropZonePanel);\n            }\n\n            if (!this.params.suppressPivots) {\n                // DO NOT CHANGE TO createManagedBean\n                this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.pivotDropZonePanel));\n                this.appendChild(this.pivotDropZonePanel);\n            }\n\n            this.setLastVisible();\n            const pivotModeListener = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => {\n                this.resetChildrenHeight();\n                this.setLastVisible();\n            });\n            this.childDestroyFuncs.push(() => pivotModeListener!());\n        }\n\n        this.initialised = true;\n    }\n\n    public setPivotModeSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.pivotModePanel) {\n            this.pivotModePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n\n            // ensure pivot mode panel is positioned at the top of the columns tool panel\n            this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n        }\n        this.setLastVisible();\n    }\n\n    public setRowGroupsSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.rowGroupDropZonePanel) {\n            this.rowGroupDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));\n            this.appendChild(this.rowGroupDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setValuesSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.valuesDropZonePanel) {\n            this.valuesDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));\n            this.appendChild(this.valuesDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setPivotSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.pivotDropZonePanel) {\n            this.pivotDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));\n            this.appendChild(this.pivotDropZonePanel);\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        this.setLastVisible();\n    }\n\n    private setResizers(): void {\n        [\n            this.primaryColsPanel,\n            this.rowGroupDropZonePanel,\n            this.valuesDropZonePanel,\n            this.pivotDropZonePanel\n        ].forEach(panel => {\n            if (!panel) { return; }\n            const eGui = panel.getGui();\n            panel.toggleResizable(!eGui.classList.contains('ag-last-column-drop') && !eGui.classList.contains('ag-hidden'));\n        });\n    }\n\n    private setLastVisible(): void {\n        const eGui = this.getGui();\n\n        const columnDrops: HTMLElement[] = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));\n\n        columnDrops.forEach(columnDrop => columnDrop.classList.remove('ag-last-column-drop'));\n\n        const columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');\n        const lastVisible = _.last(columnDropEls) as HTMLElement;\n\n        if (lastVisible) {\n            lastVisible.classList.add('ag-last-column-drop');\n        }\n\n        this.setResizers();\n    }\n\n    private resetChildrenHeight(): void {\n        const eGui = this.getGui();\n        const children = eGui.children;\n\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i] as HTMLElement;\n            child.style.removeProperty('height');\n            child.style.removeProperty('flex');\n        }\n    }\n\n    private isRowGroupingModuleLoaded(): boolean {\n        return ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Row Grouping', this.context.getGridId());\n    }\n\n    public expandColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.expandGroups(groupIds);\n    }\n\n    public collapseColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.collapseGroups(groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsPanel.setColumnLayout(colDefs);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsPanel.syncLayoutWithGrid();\n    }\n\n    public destroyChildren(): void {\n        this.childDestroyFuncs.forEach(func => func());\n        this.childDestroyFuncs.length = 0;\n        _.clearElement(this.getGui());\n    }\n\n    public refresh(params: ToolPanelColumnCompParams): boolean {\n        this.destroyChildren();\n        this.init(params);\n        return true;\n    }\n\n    public getState(): ColumnToolPanelState {\n        return {\n            expandedGroupIds: this.primaryColsPanel.getExpandedGroups()\n        };\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so this must be public.\n    public destroy(): void {\n        this.destroyChildren();\n        super.destroy();\n    }\n}\n", "import {\n    AgCheckbox,\n    Autowired,\n    ColumnModel,\n    Component,\n    Events,\n    GridApi,\n    PreConstruct,\n    RefSelector\n} from \"@ag-grid-community/core\";\n\nexport class PivotModePanel extends Component {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridApi') private api: GridApi;\n\n    @RefSelector('cbPivotMode') private cbPivotMode: AgCheckbox;\n\n    private createTemplate(): string {\n        return /* html */ `<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>`;\n    }\n\n    @PreConstruct\n    public init(): void {\n        this.setTemplate(this.createTemplate());\n\n        this.cbPivotMode.setValue(this.columnModel.isPivotMode());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n\n        this.addManagedListener(this.cbPivotMode, Events.EVENT_FIELD_VALUE_CHANGED, this.onBtPivotMode.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n    }\n\n    private onBtPivotMode(): void {\n        const newValue = !!this.cbPivotMode.getValue();\n        if (newValue !== this.columnModel.isPivotMode()) {\n            this.gridOptionsService.updateGridOptions({ options: { pivotMode: newValue}, source: 'toolPanelUi' as any });\n            const { api } = this;\n            if (api) {\n                api.refreshHeader();\n            }\n        }\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        this.cbPivotMode.setValue(pivotModeActive);\n    }\n}\n", "import {\n    ColDef,\n    ColGroupDef,\n    Component,\n    ToolPanelColumnCompParams,\n    RefSelector,\n    IPrimaryColsPanel,\n    ColumnEventType,\n    PositionableFeature\n} from \"@ag-grid-community/core\";\nimport { PrimaryColsListPanel } from \"./primaryColsListPanel\";\nimport { PrimaryColsHeaderPanel } from \"./primaryColsHeaderPanel\";\n\nexport class PrimaryColsPanel extends Component implements IPrimaryColsPanel {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select\">\n            <ag-primary-cols-header ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>`;\n\n    @RefSelector('primaryColsHeaderPanel') private readonly primaryColsHeaderPanel: PrimaryColsHeaderPanel;\n    @RefSelector('primaryColsListPanel') private readonly primaryColsListPanel: PrimaryColsListPanel;\n\n    private allowDragging: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n    private positionableFeature: PositionableFeature;\n\n    constructor() {\n        super(PrimaryColsPanel.TEMPLATE);\n    }\n\n    // we allow dragging in the toolPanel, but not when this component appears in the column menu\n    public init(\n        allowDragging: boolean,\n        params: ToolPanelColumnCompParams,\n        eventType: ColumnEventType\n    ): void {\n        this.allowDragging = allowDragging;\n        this.params = params;\n        this.eventType = eventType;\n\n        this.primaryColsHeaderPanel.init(this.params);\n\n        const hideFilter = this.params.suppressColumnFilter;\n        const hideSelect = this.params.suppressColumnSelectAll;\n        const hideExpand = this.params.suppressColumnExpandAll;\n\n        if (hideExpand && hideFilter && hideSelect) {\n            this.primaryColsHeaderPanel.setDisplayed(false);\n        }\n\n        this.addManagedListener(this.primaryColsListPanel, 'groupExpanded', this.onGroupExpanded.bind(this));\n        this.addManagedListener(this.primaryColsListPanel, 'selectionChanged', this.onSelectionChange.bind(this));\n\n        this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);\n\n        this.addManagedListener(this.primaryColsHeaderPanel, 'expandAll', this.onExpandAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'selectAll', this.onSelectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'unselectAll', this.onUnselectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'filterChanged', this.onFilterChanged.bind(this));\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n    }\n\n    public toggleResizable(resizable: boolean) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n    }\n\n    public onExpandAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(true);\n    }\n\n    public onCollapseAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(false);\n    }\n\n    public expandGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(true, groupIds);\n    }\n\n    public collapseGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(false, groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsListPanel.setColumnLayout(colDefs);\n    }\n\n    private onFilterChanged(event: any): void {\n        this.primaryColsListPanel.setFilterText(event.filterText);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsListPanel.onColumnsChanged();\n    }\n\n    private onSelectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(true);\n    }\n\n    private onUnselectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(false);\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.primaryColsHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    private onSelectionChange(event: any): void {\n        this.primaryColsHeaderPanel.setSelectionState(event.state);\n    }\n\n    public getExpandedGroups(): string[] {\n        return this.primaryColsListPanel.getExpandedGroups();\n    }\n}\n", "import { ColumnModelItem } from \"./columnModelItem\";\nimport {\n    ColumnModel,\n    Events,\n    ColumnPivotChangeRequestEvent,\n    GridOptionsService,\n    ColumnEventType,\n    Bean,\n    IAggFuncService,\n    Autowired,\n    Column,\n    EventService,\n    ColumnState,\n    _,\n    WithoutGridCommon,\n    IAggFunc\n} from \"@ag-grid-community/core\";\n\n@Bean('modelItemUtils')\nexport class ModelItemUtils {\n\n    @Autowired('aggFuncService') aggFuncService: IAggFuncService;\n    @Autowired('columnModel') columnModel: ColumnModel;\n    @Autowired('gridOptionsService') private gridOptionsService: GridOptionsService;\n    @Autowired('eventService') private eventService: EventService;\n\n    public selectAllChildren(colTree: ColumnModelItem[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        const cols = this.extractAllLeafColumns(colTree);\n        this.setAllColumns(cols, selectAllChecked, eventType);\n    }\n\n    public setColumn(col: Column, selectAllChecked: boolean, eventType: ColumnEventType): void {\n        this.setAllColumns([col], selectAllChecked, eventType);\n    }\n\n    public setAllColumns(cols: Column[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        if (this.columnModel.isPivotMode()) {\n            this.setAllPivot(cols, selectAllChecked, eventType);\n        } else {\n            this.setAllVisible(cols, selectAllChecked, eventType);\n        }\n    }\n\n    private extractAllLeafColumns(allItems: ColumnModelItem[]): Column[] {\n\n        const res: Column[] = [];\n\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach(item => {\n                if (!item.isPassesFilter()) { return; }\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                } else {\n                    res.push(item.getColumn());\n                }\n            });\n        };\n\n        recursiveFunc(allItems);\n\n        return res;\n    }\n\n    private setAllVisible(columns: Column[], visible: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        columns.forEach(col => {\n            if (col.getColDef().lockVisible) { return; }\n            if (col.isVisible() != visible) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    hide: !visible\n                });\n            }\n        });\n\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({state: colStateItems}, eventType);\n        }\n    }\n\n    private setAllPivot(columns: Column[], value: boolean, eventType: ColumnEventType): void {\n        if (this.gridOptionsService.get('functionsPassive')) {\n            this.setAllPivotPassive(columns, value);\n        } else {\n            this.setAllPivotActive(columns, value, eventType);\n        }\n    }\n\n    private setAllPivotPassive(columns: Column[], value: boolean): void {\n\n        const copyOfPivotColumns = this.columnModel.getPivotColumns().slice();\n        const copyOfValueColumns = this.columnModel.getValueColumns().slice();\n        const copyOfRowGroupColumns = this.columnModel.getRowGroupColumns().slice();\n\n        let pivotChanged = false;\n        let valueChanged = false;\n        let rowGroupChanged = false;\n\n        const turnOnAction = (col: Column) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) { return; }\n\n            if (col.isAllowValue()) {\n                copyOfValueColumns.push(col);\n                valueChanged = true;\n            } else if (col.isAllowRowGroup()) {\n                copyOfRowGroupColumns.push(col);\n                pivotChanged = true;\n            } else if (col.isAllowPivot()) {\n                copyOfPivotColumns.push(col);\n                rowGroupChanged = true;\n            }\n        };\n\n        const turnOffAction = (col: Column) => {\n            if (!col.isAnyFunctionActive()) { return; }\n\n            if (copyOfPivotColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfPivotColumns, col);\n                pivotChanged = true;\n            }\n            if (copyOfValueColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfValueColumns, col);\n                valueChanged = true;\n            }\n            if (copyOfRowGroupColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfRowGroupColumns, col);\n                rowGroupChanged = true;\n            }\n        };\n\n        const action = value ? turnOnAction : turnOffAction;\n\n        columns.forEach(action);\n\n        if (pivotChanged) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: copyOfPivotColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        if (rowGroupChanged) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        if (valueChanged) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private setAllPivotActive(columns: Column[], value: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        const turnOnAction = (col: Column) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) { return; }\n\n            if (col.isAllowValue()) {\n                const aggFunc = typeof col.getAggFunc() === 'string'\n                    ? col.getAggFunc()\n                    : this.aggFuncService.getDefaultAggFunc(col);\n                colStateItems.push({\n                    colId: col.getId(),\n                    aggFunc: aggFunc\n                });\n            } else if (col.isAllowRowGroup()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    rowGroup: true\n                });\n            } else if (col.isAllowPivot()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: true\n                });\n            }\n        };\n\n        const turnOffAction = (col: Column) => {\n            const isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();\n            if (isActive) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: false,\n                    rowGroup: false,\n                    aggFunc: null\n                });\n            }\n        };\n\n        const action = value ? turnOnAction : turnOffAction;\n\n        columns.forEach(action);\n\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({state: colStateItems}, eventType);\n        }\n    }\n\n    public updateColumns(params: {\n        columns: Column[];\n        visibleState?: { [key: string]: boolean };\n        pivotState?: { [key: string]: {\n            pivot?: boolean;\n            rowGroup?: boolean;\n            aggFunc?: string | IAggFunc | null;\n        } };\n        eventType: ColumnEventType;\n    }): void {\n        const { columns, visibleState, pivotState, eventType } = params;\n        const state: ColumnState[] = columns.map(column => {\n            const colId = column.getColId();\n            if (this.columnModel.isPivotMode()) {\n                const pivotStateForColumn = pivotState?.[colId];\n                return {\n                    colId,\n                    pivot: pivotStateForColumn?.pivot,\n                    rowGroup: pivotStateForColumn?.rowGroup,\n                    aggFunc: pivotStateForColumn?.aggFunc,\n                };\n            } else {\n                return {\n                    colId,\n                    hide: !visibleState?.[colId]\n                }\n            }\n        });\n        this.columnModel.applyColumnState({ state }, eventType);\n    }\n\n    public createPivotState(column: Column): {\n        pivot?: boolean;\n        rowGroup?: boolean;\n        aggFunc?: string | IAggFunc | null;\n    } {\n        return {\n            pivot: column.isPivotActive(),\n            rowGroup: column.isRowGroupActive(),\n            aggFunc: column.isValueActive() ? column.getAggFunc() : undefined\n        }\n    }\n}", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { AggregationStage } from \"./rowGrouping/aggregationStage\";\nimport { GroupStage } from \"./rowGrouping/groupStage\";\nimport { PivotColDefService } from \"./rowGrouping/pivotColDefService\";\nimport { PivotStage } from \"./rowGrouping/pivotStage\";\nimport { AggFuncService } from \"./rowGrouping/aggFuncService\";\nimport { GridHeaderDropZones } from \"./rowGrouping/columnDropZones/gridHeaderDropZones\";\nimport { FilterAggregatesStage } from \"./rowGrouping/filterAggregatesStage\";\nimport { VERSION } from \"./version\";\nimport { GroupFilter } from \"./rowGrouping/groupFilter/groupFilter\";\nimport { GroupFloatingFilterComp } from \"./rowGrouping/groupFilter/groupFloatingFilter\";\n\nexport const RowGroupingModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RowGroupingModule,\n    beans: [AggregationStage, FilterAggregatesStage, GroupStage, PivotColDefService, PivotStage, AggFuncService],\n    agStackComponents: [\n        { componentName: 'AgGridHeaderDropZones', componentClass: GridHeaderDropZones }\n    ],\n    userComponents: [\n        { componentName: 'agGroupColumnFilter', componentClass: GroupFilter },\n        { componentName: 'agGroupColumnFloatingFilter', componentClass: GroupFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Bean,\n    BeanStub,\n    IRowNodeStage,\n    Autowired,\n    ColumnModel,\n    ValueService,\n    RowNode,\n    Column,\n    StageExecuteParams,\n    IAggFunc,\n    ChangedPath,\n    IAggFuncParams,\n    _,\n    GetGroupRowAggParams,\n    WithoutGridCommon,\n    GridOptions,\n} from \"@ag-grid-community/core\";\nimport { AggFuncService } from \"./aggFuncService\";\n\ninterface AggregationDetails {\n    alwaysAggregateAtRootLevel: boolean;\n    groupIncludeTotalFooter: boolean;\n    changedPath: ChangedPath;\n    valueColumns: Column[];\n    pivotColumns: Column[];\n    filteredOnly: boolean;\n    userAggFunc: ((params: WithoutGridCommon<GetGroupRowAggParams<any, any>>) => any) | undefined;\n}\n\n@Bean('aggregationStage')\nexport class AggregationStage extends BeanStub implements IRowNodeStage {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('aggFuncService') private aggFuncService: AggFuncService;\n\n    // it's possible to recompute the aggregate without doing the other parts\n    // + api.refreshClientSideRowModel('aggregate')\n    public execute(params: StageExecuteParams): any {\n        // if changed path is active, it means we came from a) change detection or b) transaction update.\n        // for both of these, if no value columns are present, it means there is nothing to aggregate now\n        // and there is no cleanup to be done (as value columns don't change between transactions or change\n        // detections). if no value columns and no changed path, means we have to go through all nodes in\n        // case we need to clean up agg data from before.\n        const noValueColumns = _.missingOrEmpty(this.columnModel.getValueColumns());\n        const noUserAgg = !this.gridOptionsService.getCallback('getGroupRowAgg');\n        const changedPathActive = params.changedPath && params.changedPath.isActive();\n        if (noValueColumns && noUserAgg && changedPathActive) { return; }\n\n        const aggDetails = this.createAggDetails(params);\n\n        this.recursivelyCreateAggData(aggDetails);\n    }\n\n    private createAggDetails(params: StageExecuteParams): AggregationDetails {\n\n        const pivotActive = this.columnModel.isPivotActive();\n\n        const measureColumns = this.columnModel.getValueColumns();\n        const pivotColumns = pivotActive ? this.columnModel.getPivotColumns() : [];\n\n        const aggDetails: AggregationDetails = {\n            alwaysAggregateAtRootLevel: this.gridOptionsService.get('alwaysAggregateAtRootLevel'),\n            groupIncludeTotalFooter: this.gridOptionsService.get('groupIncludeTotalFooter'),\n            changedPath: params.changedPath!,\n            valueColumns: measureColumns,\n            pivotColumns: pivotColumns,\n            filteredOnly:  !this.isSuppressAggFilteredOnly(),\n            userAggFunc: this.gridOptionsService.getCallback('getGroupRowAgg') as any,\n        };\n\n        return aggDetails;\n    }\n\n    private isSuppressAggFilteredOnly() {\n        const isGroupAggFiltering = this.gridOptionsService.getGroupAggFiltering() !== undefined;\n        return isGroupAggFiltering || this.gridOptionsService.get('suppressAggFilteredOnly');\n    }\n\n    private recursivelyCreateAggData(aggDetails: AggregationDetails) {\n\n        const callback = (rowNode: RowNode) => {\n\n            const hasNoChildren = !rowNode.hasChildren();\n            if (hasNoChildren) {\n                // this check is needed for TreeData, in case the node is no longer a child,\n                // but it was a child previously.\n                if (rowNode.aggData) {\n                    rowNode.setAggData(null);\n                }\n                // never agg data for leaf nodes\n                return;\n            }\n\n            //Optionally enable the aggregation at the root Node\n            const isRootNode = rowNode.level === -1;\n            // if total footer is displayed, the value is in use\n            if (isRootNode && !aggDetails.groupIncludeTotalFooter) {\n                const notPivoting = !this.columnModel.isPivotMode();\n                if (!aggDetails.alwaysAggregateAtRootLevel && notPivoting) {\n                    rowNode.setAggData(null);\n                    return;\n                }\n            }\n\n            this.aggregateRowNode(rowNode, aggDetails);\n        };\n\n        aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);\n    }\n\n    private aggregateRowNode(rowNode: RowNode, aggDetails: AggregationDetails): void {\n\n        const measureColumnsMissing = aggDetails.valueColumns.length === 0;\n        const pivotColumnsMissing = aggDetails.pivotColumns.length === 0;\n\n        let aggResult: any;\n        if (aggDetails.userAggFunc) {\n            aggResult = aggDetails.userAggFunc({ nodes: rowNode.childrenAfterFilter! });\n        } else if (measureColumnsMissing) {\n            aggResult = null;\n        } else if (pivotColumnsMissing) {\n            aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);\n        } else {\n            aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);\n        }\n\n        rowNode.setAggData(aggResult);\n\n        // if we are grouping, then it's possible there is a sibling footer\n        // to the group, so update the data here also if there is one\n        if (rowNode.sibling) {\n            rowNode.sibling.setAggData(aggResult);\n        }\n    }\n\n    private aggregateRowNodeUsingValuesAndPivot(rowNode: RowNode): any {\n        const result: any = {};\n\n        const secondaryColumns = this.columnModel.getSecondaryColumns() ?? [];\n        let canSkipTotalColumns = true;\n        for (let i = 0; i < secondaryColumns.length; i++) {\n            const secondaryCol = secondaryColumns[i];\n            const colDef = secondaryCol.getColDef();\n\n            if (colDef.pivotTotalColumnIds != null) {\n                canSkipTotalColumns = false;\n                continue;\n            }\n\n            const keys: string[] = colDef.pivotKeys ?? [];\n            let values: any[];\n\n            if (rowNode.leafGroup) {\n                // lowest level group, get the values from the mapped set\n                values = this.getValuesFromMappedSet(rowNode.childrenMapped, keys, colDef.pivotValueColumn!);\n            } else {\n                // value columns and pivot columns, non-leaf group\n                values = this.getValuesPivotNonLeaf(rowNode, colDef.colId!);\n            }\n\n            // bit of a memory drain storing null/undefined, but seems to speed up performance.\n            result[colDef.colId!] = this.aggregateValues(values, colDef.pivotValueColumn!.getAggFunc()!, colDef.pivotValueColumn!, rowNode, secondaryCol);\n        }\n\n        if (!canSkipTotalColumns) {\n            for (let i = 0; i < secondaryColumns.length; i++) {\n                const secondaryCol = secondaryColumns[i];\n                const colDef = secondaryCol.getColDef();\n    \n                if (colDef.pivotTotalColumnIds == null || !colDef.pivotTotalColumnIds.length) {\n                    continue;\n                }\n    \n                const aggResults: any[] = colDef.pivotTotalColumnIds.map((currentColId: string) => result[currentColId]);\n                // bit of a memory drain storing null/undefined, but seems to speed up performance.\n                result[colDef.colId!] = this.aggregateValues(aggResults, colDef.pivotValueColumn!.getAggFunc()!, colDef.pivotValueColumn!, rowNode, secondaryCol);\n            }\n        }\n\n        return result;\n    }\n\n    private aggregateRowNodeUsingValuesOnly(rowNode: RowNode, aggDetails: AggregationDetails): any {\n        const result: any = {};\n\n        const changedValueColumns = aggDetails.changedPath.isActive() ?\n            aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : aggDetails.valueColumns;\n\n        const notChangedValueColumns = aggDetails.changedPath.isActive() ?\n            aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : null;\n\n        const values2d = this.getValuesNormal(rowNode, changedValueColumns, aggDetails.filteredOnly);\n        const oldValues = rowNode.aggData;\n\n        changedValueColumns.forEach((valueColumn: Column, index: number) => {\n            result[valueColumn.getId()] = this.aggregateValues(values2d[index], valueColumn.getAggFunc()!, valueColumn, rowNode);\n        });\n\n        if (notChangedValueColumns && oldValues) {\n            notChangedValueColumns.forEach((valueColumn: Column) => {\n                result[valueColumn.getId()] = oldValues[valueColumn.getId()];\n            });\n        }\n\n        return result;\n    }\n\n    private getValuesPivotNonLeaf(rowNode: RowNode, colId: string): any[] {\n        return rowNode.childrenAfterFilter!.map((childNode: RowNode) => childNode.aggData[colId]);\n    }\n\n    private getValuesFromMappedSet(mappedSet: any, keys: string[], valueColumn: Column): any[] {\n        let mapPointer = mappedSet;\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            mapPointer = mapPointer ? mapPointer[key] : null;\n        }\n\n        if (!mapPointer) {\n            return [];\n        }\n\n        return mapPointer.map((rowNode: RowNode) => this.valueService.getValue(valueColumn, rowNode));\n    }\n\n    private getValuesNormal(rowNode: RowNode, valueColumns: Column[], filteredOnly: boolean): any[][] {\n        // create 2d array, of all values for all valueColumns\n        const values: any[][] = [];\n        valueColumns.forEach(() => values.push([]));\n\n        const valueColumnCount = valueColumns.length;\n\n        const nodeList = filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;\n        const rowCount = nodeList!.length;\n\n        for (let i = 0; i < rowCount; i++) {\n            const childNode = nodeList![i];\n            for (let j = 0; j < valueColumnCount; j++) {\n                const valueColumn = valueColumns[j];\n                // if the row is a group, then it will only have an agg result value,\n                // which means valueGetter is never used.\n                const value = this.valueService.getValue(valueColumn, childNode);\n                values[j].push(value);\n            }\n        }\n\n        return values;\n    }\n\n    public aggregateValues(values: any[], aggFuncOrString: string | IAggFunc, column?: Column, rowNode?: RowNode, pivotResultColumn?: Column): any {\n        const aggFunc = typeof aggFuncOrString === 'string' ?\n            this.aggFuncService.getAggFunc(aggFuncOrString) :\n            aggFuncOrString;\n\n        if (typeof aggFunc !== 'function') {\n            console.error(`AG Grid: unrecognised aggregation function ${aggFuncOrString}`);\n            return null;\n        }\n\n        const aggFuncAny = aggFunc;\n        const params: IAggFuncParams = this.gridOptionsService.addGridCommonParams({\n            values: values,\n            column: column,\n            colDef: column ? column.getColDef() : undefined,\n            pivotResultColumn: pivotResultColumn,\n            rowNode: rowNode,\n            data: rowNode ? rowNode.data : undefined\n        } as any); // the \"as any\" is needed to allow the deprecation warning messages\n\n        return aggFuncAny(params);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    ChangedPath,\n    Column,\n    ColumnModel,\n    GetDataPath,\n    IRowNodeStage,\n    IsGroupOpenByDefaultParams,\n    RowNode,\n    RowNodeTransaction,\n    SelectableService,\n    StageExecuteParams,\n    ValueService,\n    Beans,\n    ISelectionService,\n    WithoutGridCommon,\n    InitialGroupOrderComparatorParams,\n    GridOptions,\n    KeyCreatorParams\n} from \"@ag-grid-community/core\";\nimport { BatchRemover } from \"./batchRemover\";\n\ninterface GroupInfo {\n    key: string; // e.g. 'Ireland'\n    field: string | null; // e.g. 'country'\n    rowGroupColumn: Column | null;\n    leafNode?: RowNode;\n}\n\ninterface GroupingDetails {\n    pivotMode: boolean;\n    includeParents: boolean;\n    expandByDefault: number;\n    changedPath: ChangedPath;\n    rootNode: RowNode;\n    groupedCols: Column[];\n    groupedColCount: number;\n    transactions: RowNodeTransaction[];\n    rowNodeOrder: { [id: string]: number; };\n    \n    groupAllowUnbalanced: boolean;\n    isGroupOpenByDefault: (params: WithoutGridCommon<IsGroupOpenByDefaultParams>) => boolean;\n    initialGroupOrderComparator: (params: WithoutGridCommon<InitialGroupOrderComparatorParams>) => number;\n    \n    usingTreeData: boolean;\n    suppressGroupMaintainValueType: boolean;\n    getDataPath: GetDataPath | undefined;\n    keyCreators: (((params: KeyCreatorParams) => string) | undefined)[];\n}\n\n@Bean('groupStage')\nexport class GroupStage extends BeanStub implements IRowNodeStage {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('selectableService') private selectableService: SelectableService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('beans') private beans: Beans;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n\n    // when grouping, these items are of note:\n    // rowNode.parent: RowNode: set to the parent\n    // rowNode.childrenAfterGroup: RowNode[] = the direct children of this group\n    // rowNode.childrenMapped: string=>RowNode = children mapped by group key (when groups) or an empty map if leaf group (this is then used by pivot)\n    // for leaf groups, rowNode.childrenAfterGroup = rowNode.allLeafChildren;\n\n    private oldGroupingDetails: GroupingDetails;\n    private oldGroupDisplayColIds: string;\n\n    public execute(params: StageExecuteParams): void {\n\n        const details = this.createGroupingDetails(params);\n\n        if (details.transactions) {\n            this.handleTransaction(details);\n        } else {\n            const afterColsChanged = params.afterColumnsChanged === true;\n            this.shotgunResetEverything(details, afterColsChanged);\n        }\n\n        if (!details.usingTreeData) {\n            // we don't do group sorting for tree data\n            this.positionLeafsAndGroups(params.changedPath!);\n            this.orderGroups(details);\n        }\n\n        this.selectableService.updateSelectableAfterGrouping();\n    }\n\n    private positionLeafsAndGroups(changedPath: ChangedPath) {\n        changedPath.forEachChangedNodeDepthFirst(group => {\n            if (group.childrenAfterGroup) {\n                const leafNodes: RowNode[] = [];\n                const groupNodes: RowNode[] = [];\n                let unbalancedNode: RowNode | undefined;\n\n                group.childrenAfterGroup.forEach(row => {\n                    if (!row.childrenAfterGroup?.length) {\n                        leafNodes.push(row);\n                    } else {\n                        if (row.key === '' && !unbalancedNode) {\n                            unbalancedNode = row;\n                        } else {\n                            groupNodes.push(row);\n                        }\n                    }\n                });\n\n                if (unbalancedNode) {\n                    groupNodes.push(unbalancedNode);\n                }\n                \n                group.childrenAfterGroup = [...leafNodes, ...groupNodes];\n            }\n        }, false);\n    }\n\n    private createGroupingDetails(params: StageExecuteParams): GroupingDetails {\n        const { rowNode, changedPath, rowNodeTransactions, rowNodeOrder } = params;\n\n        const usingTreeData = this.gridOptionsService.get('treeData');\n\n        const groupedCols = usingTreeData ? null : this.columnModel.getRowGroupColumns();\n\n        const details: GroupingDetails = {\n            // someone complained that the parent attribute was causing some change detection\n            // to break in an angular add-on.  Taking the parent out breaks a cyclic dependency, hence this flag got introduced.\n            includeParents: !this.gridOptionsService.get('suppressParentsInRowNodes'),\n            expandByDefault: this.gridOptionsService.get('groupDefaultExpanded'),\n            groupedCols: groupedCols!,\n            rootNode: rowNode,\n            pivotMode: this.columnModel.isPivotMode(),\n            groupedColCount: usingTreeData || !groupedCols ? 0 : groupedCols.length,\n            rowNodeOrder: rowNodeOrder!,\n            transactions: rowNodeTransactions!,\n            // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway\n            changedPath: changedPath!,\n            groupAllowUnbalanced:  this.gridOptionsService.get('groupAllowUnbalanced'),\n            isGroupOpenByDefault: this.gridOptionsService.getCallback('isGroupOpenByDefault') as any,\n            initialGroupOrderComparator: this.gridOptionsService.getCallback('initialGroupOrderComparator') as any,\n            usingTreeData: usingTreeData,\n            suppressGroupMaintainValueType: this.gridOptionsService.get('suppressGroupMaintainValueType'),\n            getDataPath: usingTreeData ? this.gridOptionsService.get('getDataPath') : undefined,\n            keyCreators: groupedCols?.map(column => column.getColDef().keyCreator) ?? []\n        };\n\n        return details;\n    }\n\n    private handleTransaction(details: GroupingDetails): void {\n\n        details.transactions.forEach(tran => {\n            // we don't allow batch remover for tree data as tree data uses Filler Nodes,\n            // and creating/deleting filler nodes needs to be done alongside the node deleting\n            // and moving. if we want to Batch Remover working with tree data then would need\n            // to consider how Filler Nodes would be impacted (it's possible that it can be easily\n            // modified to work, however for now I don't have the brain energy to work it all out).\n            const batchRemover = !details.usingTreeData ? new BatchRemover() : undefined;\n\n            // the order here of [add, remove, update] needs to be the same as in ClientSideNodeManager,\n            // as the order is important when a record with the same id is added and removed in the same\n            // transaction.\n            if (_.existsAndNotEmpty(tran.remove)) {\n                this.removeNodes(tran.remove as RowNode[], details, batchRemover);\n            }\n            if (_.existsAndNotEmpty(tran.update)) {\n                this.moveNodesInWrongPath(tran.update as RowNode[], details, batchRemover);\n            }\n            if (_.existsAndNotEmpty(tran.add)) {\n                this.insertNodes(tran.add as RowNode[], details, false);\n            }\n            // must flush here, and not allow another transaction to be applied,\n            // as each transaction must finish leaving the data in a consistent state.\n            if (batchRemover) {\n                const parentsWithChildrenRemoved = batchRemover.getAllParents().slice();\n                batchRemover.flush();\n                this.removeEmptyGroups(parentsWithChildrenRemoved, details);\n            }\n        });\n\n        if (details.rowNodeOrder) {\n            this.sortChildren(details);\n        }\n    }\n\n    // this is used when doing delta updates, eg Redux, keeps nodes in right order\n    private sortChildren(details: GroupingDetails): void {\n        details.changedPath.forEachChangedNodeDepthFirst(node => {\n            if (!node.childrenAfterGroup) {\n                return;\n            }\n\n            const didSort = _.sortRowNodesByOrder(node.childrenAfterGroup!, details.rowNodeOrder);\n            if (didSort) {\n                details.changedPath.addParentNode(node);\n            }\n        }, false, true);\n    }\n\n    private orderGroups(details: GroupingDetails): void {\n        const comparator = details.initialGroupOrderComparator;\n        if (_.exists(comparator)) { recursiveSort(details.rootNode); }\n\n        function recursiveSort(rowNode: RowNode): void {\n            const doSort = _.exists(rowNode.childrenAfterGroup) &&\n                // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)\n                !rowNode.leafGroup;\n\n            if (doSort) {\n                rowNode.childrenAfterGroup!.sort((nodeA, nodeB) => comparator!({ nodeA, nodeB }));\n                rowNode.childrenAfterGroup!.forEach((childNode: RowNode) => recursiveSort(childNode));\n            }\n        }\n    }\n\n    private getExistingPathForNode(node: RowNode, details: GroupingDetails): GroupInfo[] {\n        const res: GroupInfo[] = [];\n\n        // when doing tree data, the node is part of the path,\n        // but when doing grid grouping, the node is not part of the path so we start with the parent.\n        let pointer = details.usingTreeData ? node : node.parent;\n        while (pointer && pointer !== details.rootNode) {\n            res.push({\n                key: pointer.key!,\n                rowGroupColumn: pointer.rowGroupColumn,\n                field: pointer.field\n            });\n            pointer = pointer.parent;\n        }\n        res.reverse();\n        return res;\n    }\n\n    private moveNodesInWrongPath(childNodes: RowNode[], details: GroupingDetails, batchRemover: BatchRemover | undefined): void {\n        childNodes.forEach(childNode => {\n\n            // we add node, even if parent has not changed, as the data could have\n            // changed, hence aggregations will be wrong\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(childNode.parent);\n            }\n\n            const infoToKeyMapper = (item: GroupInfo) => item.key;\n            const oldPath: string[] = this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);\n            const newPath: string[] = this.getGroupInfo(childNode, details).map(infoToKeyMapper);\n\n            const nodeInCorrectPath = _.areEqual(oldPath, newPath);\n\n            if (!nodeInCorrectPath) {\n                this.moveNode(childNode, details, batchRemover);\n            }\n        });\n    }\n\n    private moveNode(childNode: RowNode, details: GroupingDetails, batchRemover: BatchRemover | undefined): void {\n\n        this.removeNodesInStages([childNode], details, batchRemover);\n        this.insertOneNode(childNode, details, true, batchRemover);\n\n        // hack - if we didn't do this, then renaming a tree item (ie changing rowNode.key) wouldn't get\n        // refreshed into the gui.\n        // this is needed to kick off the event that rowComp listens to for refresh. this in turn\n        // then will get each cell in the row to refresh - which is what we need as we don't know which\n        // columns will be displaying the rowNode.key info.\n        childNode.setData(childNode.data);\n\n        // we add both old and new parents to changed path, as both will need to be refreshed.\n        // we already added the old parent (in calling method), so just add the new parent here\n        if (details.changedPath.isActive()) {\n            const newParent = childNode.parent;\n            details.changedPath.addParentNode(newParent);\n        }\n    }\n\n    private removeNodes(leafRowNodes: RowNode[], details: GroupingDetails, batchRemover: BatchRemover | undefined): void {\n        this.removeNodesInStages(leafRowNodes, details, batchRemover);\n        if (details.changedPath.isActive()) {\n            leafRowNodes.forEach(rowNode => details.changedPath.addParentNode(rowNode.parent));\n        }\n    }\n\n    private removeNodesInStages(leafRowNodes: RowNode[], details: GroupingDetails, batchRemover: BatchRemover | undefined): void {\n        this.removeNodesFromParents(leafRowNodes, details, batchRemover);\n        if (details.usingTreeData) {\n            this.postRemoveCreateFillerNodes(leafRowNodes, details);\n\n            // When not TreeData, then removeEmptyGroups is called just before the BatchRemover is flushed.\n            // However for TreeData, there is no BatchRemover, so we have to call removeEmptyGroups here.\n            const nodeParents = leafRowNodes.map(n => n.parent!);\n            this.removeEmptyGroups(nodeParents, details);\n        }\n    }\n\n    private forEachParentGroup(details: GroupingDetails, group: RowNode, callback: (parent: RowNode) => void): void {\n        let pointer: RowNode | null = group;\n        while (pointer && pointer !== details.rootNode) {\n            callback(pointer);\n            pointer = pointer.parent;\n        }\n    }\n\n    private removeNodesFromParents(nodesToRemove: RowNode[], details: GroupingDetails, provided: BatchRemover | undefined): void {\n        // this method can be called with BatchRemover as optional. if it is missed, we created a local version\n        // and flush it at the end. if one is provided, we add to the provided one and it gets flushed elsewhere.\n        const batchRemoverIsLocal = provided == null;\n        const batchRemoverToUse = provided ? provided : new BatchRemover();\n\n        nodesToRemove.forEach(nodeToRemove => {\n            this.removeFromParent(nodeToRemove, batchRemoverToUse);\n\n            // remove from allLeafChildren. we clear down all parents EXCEPT the Root Node, as\n            // the ClientSideNodeManager is responsible for the Root Node.\n            this.forEachParentGroup(details, nodeToRemove.parent!, parentNode => {\n                batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);\n            });\n        });\n\n        if (batchRemoverIsLocal) {\n            batchRemoverToUse.flush();\n        }\n    }\n\n    private postRemoveCreateFillerNodes(nodesToRemove: RowNode[], details: GroupingDetails): void {\n        nodesToRemove.forEach(nodeToRemove => {\n\n            // if not group, and children are present, need to move children to a group.\n            // otherwise if no children, we can just remove without replacing.\n            const replaceWithGroup = nodeToRemove.hasChildren();\n            if (replaceWithGroup) {\n                const oldPath = this.getExistingPathForNode(nodeToRemove, details);\n                // because we just removed the userGroup, this will always return new support group\n                const newGroupNode = this.findParentForNode(nodeToRemove, oldPath, details);\n\n                // these properties are the ones that will be incorrect in the newly created group,\n                // so copy them from the old childNode\n                newGroupNode.expanded = nodeToRemove.expanded;\n                newGroupNode.allLeafChildren = nodeToRemove.allLeafChildren;\n                newGroupNode.childrenAfterGroup = nodeToRemove.childrenAfterGroup;\n                newGroupNode.childrenMapped = nodeToRemove.childrenMapped;\n                newGroupNode.updateHasChildren();\n\n                newGroupNode.childrenAfterGroup!.forEach(rowNode => rowNode.parent = newGroupNode);\n            }\n\n        });\n    }\n\n    private removeEmptyGroups(possibleEmptyGroups: RowNode[], details: GroupingDetails): void {\n        // we do this multiple times, as when we remove groups, that means the parent of just removed\n        // group can then be empty. to get around this, if we remove, then we check everything again for\n        // newly emptied groups. the max number of times this will execute is the depth of the group tree.\n        let checkAgain = true;\n\n        const groupShouldBeRemoved = (rowNode: RowNode): boolean => {\n\n            // because of the while loop below, it's possible we already moved the node,\n            // so double check before trying to remove again.\n            const mapKey = this.getChildrenMappedKey(rowNode.key!, rowNode.rowGroupColumn);\n            const parentRowNode = rowNode.parent;\n            const groupAlreadyRemoved = (parentRowNode && parentRowNode.childrenMapped) ?\n                !parentRowNode.childrenMapped[mapKey] : true;\n\n            if (groupAlreadyRemoved) {\n                // if not linked, then group was already removed\n                return false;\n            }\n            // if still not removed, then we remove if this group is empty\n            return !!rowNode.isEmptyRowGroupNode();\n        };\n\n        while (checkAgain) {\n            checkAgain = false;\n            const batchRemover: BatchRemover = new BatchRemover();\n            possibleEmptyGroups.forEach(possibleEmptyGroup => {\n                // remove empty groups\n                this.forEachParentGroup(details, possibleEmptyGroup, rowNode => {\n                    if (groupShouldBeRemoved(rowNode)) {\n                        checkAgain = true;\n                        this.removeFromParent(rowNode, batchRemover);\n                        // we remove selection on filler nodes here, as the selection would not be removed\n                        // from the RowNodeManager, as filler nodes don't exist on the RowNodeManager\n                        rowNode.setSelectedParams({ newValue: false, source: 'rowGroupChanged' });\n                    }\n                });\n            });\n            batchRemover.flush();\n        }\n    }\n\n    // removes the node from the parent by:\n    // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)\n    // b) removing from childrenMapped (immediately)\n    // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed\n    // d) setRowIndex(null) - as the rowNode will no longer be displayed.\n    private removeFromParent(child: RowNode, batchRemover?: BatchRemover) {\n        if (child.parent) {\n            if (batchRemover) {\n                batchRemover.removeFromChildrenAfterGroup(child.parent, child);\n            } else {\n                _.removeFromArray(child.parent.childrenAfterGroup!, child);\n                child.parent.updateHasChildren();\n            }\n        }\n        const mapKey = this.getChildrenMappedKey(child.key!, child.rowGroupColumn);\n        if (child.parent && child.parent.childrenMapped) {\n            child.parent.childrenMapped[mapKey] = undefined;\n        }\n        // this is important for transition, see rowComp removeFirstPassFuncs. when doing animation and\n        // remove, if rowTop is still present, the rowComp thinks it's just moved position.\n        child.setRowTop(null);\n        child.setRowIndex(null);\n    }\n\n    private addToParent(child: RowNode, parent: RowNode | null) {\n        const mapKey = this.getChildrenMappedKey(child.key!, child.rowGroupColumn);\n        if (parent) {\n            const children = parent.childrenMapped != null;\n            if (children) {\n                parent.childrenMapped![mapKey] = child;\n            }\n            parent.childrenAfterGroup!.push(child);\n            parent.updateHasChildren();\n        }\n    }\n\n    private areGroupColsEqual(d1: GroupingDetails, d2: GroupingDetails): boolean {\n        if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) { return false; }\n\n        return _.areEqual(d1.groupedCols, d2.groupedCols) && _.areEqual(d1.keyCreators, d2.keyCreators);\n    }\n\n    private checkAllGroupDataAfterColsChanged(details: GroupingDetails): void {\n\n        const recurse = (rowNodes: RowNode[] | null) => {\n            if (!rowNodes) { return; }\n            rowNodes.forEach(rowNode => {\n                const isLeafNode = !details.usingTreeData && !rowNode.group;\n                if (isLeafNode) { return; }\n                const groupInfo: GroupInfo = {\n                    field: rowNode.field,\n                    key: rowNode.key!,\n                    rowGroupColumn: rowNode.rowGroupColumn,\n                    leafNode: rowNode.allLeafChildren[0],\n                };\n                this.setGroupData(rowNode, groupInfo, details);\n                recurse(rowNode.childrenAfterGroup);\n            });\n        };\n\n        recurse(details.rootNode.childrenAfterGroup);\n    }\n\n    private shotgunResetEverything(details: GroupingDetails, afterColumnsChanged: boolean): void {\n\n        if (this.noChangeInGroupingColumns(details, afterColumnsChanged)) {\n            return;\n        }\n\n        // groups are about to get disposed, so need to deselect any that are selected\n        this.selectionService.filterFromSelection((node: RowNode) => node && !node.group);\n\n        const { rootNode, groupedCols } = details;\n        // because we are not creating the root node each time, we have the logic\n        // here to change leafGroup once.\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        rootNode.leafGroup = details.usingTreeData ? false : groupedCols.length === 0;\n\n        // we are doing everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode\n        rootNode.childrenAfterGroup = [];\n        rootNode.childrenMapped = {};\n        rootNode.updateHasChildren();\n\n        const sibling = rootNode.sibling;\n        if (sibling) {\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenMapped = rootNode.childrenMapped;\n        }\n\n        this.insertNodes(rootNode.allLeafChildren, details, false);\n    }\n\n    private noChangeInGroupingColumns(details: GroupingDetails, afterColumnsChanged: boolean): boolean {\n        let noFurtherProcessingNeeded = false;\n\n        const groupDisplayColumns = this.columnModel.getGroupDisplayColumns();\n        const newGroupDisplayColIds = groupDisplayColumns ?\n            groupDisplayColumns.map(c => c.getId()).join('-') : '';\n\n        if (afterColumnsChanged) {\n            // we only need to redo grouping if doing normal grouping (ie not tree data)\n            // and the group cols have changed.\n            noFurtherProcessingNeeded = details.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);\n\n            // if the group display cols have changed, then we need to update rowNode.groupData\n            // (regardless of tree data or row grouping)\n            if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {\n                this.checkAllGroupDataAfterColsChanged(details);\n            }\n        }\n\n        this.oldGroupingDetails = details;\n        this.oldGroupDisplayColIds = newGroupDisplayColIds;\n\n        return noFurtherProcessingNeeded;\n    }\n\n    private insertNodes(newRowNodes: RowNode[], details: GroupingDetails, isMove: boolean): void {\n        newRowNodes.forEach(rowNode => {\n            this.insertOneNode(rowNode, details, isMove);\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(rowNode.parent);\n            }\n        });\n    }\n\n    private insertOneNode(childNode: RowNode, details: GroupingDetails, isMove: boolean, batchRemover?: BatchRemover): void {\n\n        const path: GroupInfo[] = this.getGroupInfo(childNode, details);\n\n        const parentGroup = this.findParentForNode(childNode, path, details, batchRemover);\n        if (!parentGroup.group) {\n            console.warn(`AG Grid: duplicate group keys for row data, keys should be unique`,\n                [parentGroup.data, childNode.data]);\n        }\n\n        if (details.usingTreeData) {\n            this.swapGroupWithUserNode(parentGroup, childNode, isMove);\n        } else {\n            childNode.parent = parentGroup;\n            childNode.level = path.length;\n            parentGroup.childrenAfterGroup!.push(childNode);\n            parentGroup.updateHasChildren();\n        }\n    }\n\n    private findParentForNode(childNode: RowNode, path: GroupInfo[], details: GroupingDetails, batchRemover?: BatchRemover): RowNode {\n        let nextNode: RowNode = details.rootNode;\n\n        path.forEach((groupInfo, level) => {\n            nextNode = this.getOrCreateNextNode(nextNode, groupInfo, level, details);\n            // node gets added to all group nodes.\n            // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes\n\n            if (!batchRemover?.isRemoveFromAllLeafChildren(nextNode, childNode)) {\n                nextNode.allLeafChildren.push(childNode);\n            } else {\n                // if this node is about to be removed, prevent that\n                batchRemover?.preventRemoveFromAllLeafChildren(nextNode, childNode);\n            }\n        });\n\n        return nextNode;\n    }\n\n    private swapGroupWithUserNode(fillerGroup: RowNode, userGroup: RowNode, isMove: boolean) {\n        userGroup.parent = fillerGroup.parent;\n        userGroup.key = fillerGroup.key;\n        userGroup.field = fillerGroup.field;\n        userGroup.groupData = fillerGroup.groupData;\n        userGroup.level = fillerGroup.level;\n        // AG-3441 - preserve the existing expanded status of the node if we're moving it, so that\n        // you can drag a sub tree from one parent to another without changing its expansion\n        if (!isMove) {\n            userGroup.expanded = fillerGroup.expanded;\n        }\n\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        userGroup.leafGroup = fillerGroup.leafGroup;\n\n        // always null for userGroups, as row grouping is not allowed when doing tree data\n        userGroup.rowGroupIndex = fillerGroup.rowGroupIndex;\n\n        userGroup.allLeafChildren = fillerGroup.allLeafChildren;\n        userGroup.childrenAfterGroup = fillerGroup.childrenAfterGroup;\n        userGroup.childrenMapped = fillerGroup.childrenMapped;\n        userGroup.sibling = fillerGroup.sibling;\n        userGroup.updateHasChildren();\n\n        this.removeFromParent(fillerGroup);\n        userGroup.childrenAfterGroup!.forEach((rowNode: RowNode) => rowNode.parent = userGroup);\n        this.addToParent(userGroup, fillerGroup.parent);\n    }\n\n    private getOrCreateNextNode(parentGroup: RowNode, groupInfo: GroupInfo, level: number,\n        details: GroupingDetails): RowNode {\n\n        const key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);\n        let nextNode = parentGroup.childrenMapped ? parentGroup.childrenMapped[key] : undefined;\n\n        if (!nextNode) {\n            nextNode = this.createGroup(groupInfo, parentGroup, level, details);\n            // attach the new group to the parent\n            this.addToParent(nextNode, parentGroup);\n        }\n\n        return nextNode;\n    }\n\n    private createGroup(groupInfo: GroupInfo, parent: RowNode, level: number, details: GroupingDetails): RowNode {\n        const groupNode = new RowNode(this.beans);\n\n        groupNode.group = true;\n        groupNode.field = groupInfo.field;\n        groupNode.rowGroupColumn = groupInfo.rowGroupColumn;\n\n        this.setGroupData(groupNode, groupInfo, details);\n\n        groupNode.key = groupInfo.key;\n        groupNode.id = this.createGroupId(groupNode, parent, details.usingTreeData, level);\n\n        groupNode.level = level;\n        groupNode.leafGroup = details.usingTreeData ? false : level === (details.groupedColCount - 1);\n\n        groupNode.allLeafChildren = [];\n\n        // why is this done here? we are not updating the children count as we go,\n        // i suspect this is updated in the filter stage\n        groupNode.setAllChildrenCount(0);\n\n        groupNode.rowGroupIndex = details.usingTreeData ? null : level;\n\n        groupNode.childrenAfterGroup = [];\n        groupNode.childrenMapped = {};\n        groupNode.updateHasChildren();\n\n        groupNode.parent = details.includeParents ? parent : null;\n\n        this.setExpandedInitialValue(details, groupNode);\n\n        return groupNode;\n    }\n\n    private createGroupId(node: RowNode, parent: RowNode, usingTreeData: boolean, level: number): string {\n        let createGroupId: (node: RowNode, parent: RowNode | null, level: number) => string | null;\n        if (usingTreeData) {\n            createGroupId = (node, parent, level) => {\n                if (level < 0) { return null; } // root node\n                const parentId = parent ? createGroupId(parent, parent.parent, level - 1) : null;\n                return `${parentId == null ? '' : parentId + '-'}${level}-${node.key}`;\n            };\n        } else {\n            createGroupId = (node, parent) => {\n                if (!node.rowGroupColumn) { return null; } // root node\n                const parentId = parent ? createGroupId(parent, parent.parent, 0) : null;\n                return `${parentId == null ? '' : parentId + '-'}${node.rowGroupColumn.getColId()}-${node.key}`;\n            };\n        }\n\n        // we put 'row-group-' before the group id, so it doesn't clash with standard row id's. we also use 't-' and 'b-'\n        // for top pinned and bottom pinned rows.\n        return RowNode.ID_PREFIX_ROW_GROUP + createGroupId(node, parent, level);\n    }\n\n    private setGroupData(groupNode: RowNode, groupInfo: GroupInfo, details: GroupingDetails): void {\n        groupNode.groupData = {};\n        const groupDisplayCols: Column[] = this.columnModel.getGroupDisplayColumns();\n        groupDisplayCols.forEach(col => {\n            // newGroup.rowGroupColumn=null when working off GroupInfo, and we always display the group in the group column\n            // if rowGroupColumn is present, then it's grid row grouping and we only include if configuration says so\n            const isTreeData = details.usingTreeData;\n            if (isTreeData) {\n                groupNode.groupData![col.getColId()] = groupInfo.key;\n                return;\n            }\n\n            const groupColumn = groupNode.rowGroupColumn;\n            const isRowGroupDisplayed = groupColumn !== null && col.isRowGroupDisplayed(groupColumn.getId());\n            if (isRowGroupDisplayed) {\n                if (details.suppressGroupMaintainValueType) {\n                    groupNode.groupData![col.getColId()] = groupInfo.key;\n                } else {\n                    // if maintain group value type, get the value from any leaf node.\n                    groupNode.groupData![col.getColId()] = this.valueService.getValue(groupColumn, groupInfo.leafNode);\n                }\n            }\n        });\n    }\n\n    private getChildrenMappedKey(key: string, rowGroupColumn: Column | null): string {\n        if (rowGroupColumn) {\n            // grouping by columns\n            return rowGroupColumn.getId() + '-' + key;\n        }\n        // tree data - we don't have rowGroupColumns\n        return key;\n    }\n\n    private setExpandedInitialValue(details: GroupingDetails, groupNode: RowNode): void {\n        // if pivoting the leaf group is never expanded as we do not show leaf rows\n        if (details.pivotMode && groupNode.leafGroup) {\n            groupNode.expanded = false;\n            return;\n        }\n\n        // use callback if exists\n        const userCallback = details.isGroupOpenByDefault;\n        if (userCallback) {\n            const params: WithoutGridCommon<IsGroupOpenByDefaultParams> = {\n                rowNode: groupNode,\n                field: groupNode.field!,\n                key: groupNode.key!,\n                level: groupNode.level,\n                rowGroupColumn: groupNode.rowGroupColumn!\n            };\n            groupNode.expanded = userCallback(params) == true;\n            return;\n        }\n\n        // use expandByDefault if exists\n        const { expandByDefault } = details;\n        if (details.expandByDefault === -1) {\n            groupNode.expanded = true;\n            return;\n        }\n\n        // otherwise\n        groupNode.expanded = groupNode.level < expandByDefault;\n    }\n\n    private getGroupInfo(rowNode: RowNode, details: GroupingDetails): GroupInfo[] {\n        if (details.usingTreeData) {\n            return this.getGroupInfoFromCallback(rowNode, details);\n        }\n        return this.getGroupInfoFromGroupColumns(rowNode, details);\n    }\n\n    private getGroupInfoFromCallback(rowNode: RowNode, details: GroupingDetails): GroupInfo[] {        \n        const keys: string[] | null = details.getDataPath ? details.getDataPath(rowNode.data) : null;\n\n        if (keys === null || keys === undefined || keys.length === 0) {\n            _.warnOnce(`getDataPath() should not return an empty path for data ${rowNode.data}`);\n        }\n        const groupInfoMapper = (key: string | null) => ({ key, field: null, rowGroupColumn: null }) as GroupInfo;\n        return keys ? keys.map(groupInfoMapper) : [];\n    }\n\n    private getGroupInfoFromGroupColumns(rowNode: RowNode, details: GroupingDetails) {\n        const res: GroupInfo[] = [];\n        details.groupedCols.forEach(groupCol => {\n            let key: string = this.valueService.getKeyForNode(groupCol, rowNode);\n            let keyExists = key !== null && key !== undefined && key !== '';\n\n            // unbalanced tree and pivot mode don't work together - not because of the grid, it doesn't make\n            // mathematical sense as you are building up a cube. so if pivot mode, we put in a blank key where missing.\n            // this keeps the tree balanced and hence can be represented as a group.\n            const createGroupForEmpty = details.pivotMode || !details.groupAllowUnbalanced;\n            if (createGroupForEmpty && !keyExists) {\n                key = '';\n                keyExists = true;\n            }\n\n            if (keyExists) {\n                const item = {\n                    key: key,\n                    field: groupCol.getColDef().field,\n                    rowGroupColumn: groupCol,\n                    leafNode: rowNode,\n                } as GroupInfo;\n                res.push(item);\n            }\n        });\n        return res;\n    }\n}", "import { RowNode } from \"@ag-grid-community/core\";\n\n// doing _.removeFromArray() multiple times on a large list can be a bottleneck.\n// when doing large deletes (eg removing 1,000 rows) then we would be calling _.removeFromArray()\n// a thousands of times, in particular RootNode.allGroupChildren could be a large list, and\n// 1,000 removes is time consuming as each one requires traversing the full list.\n// to get around this, we do all the removes in a batch. this class manages the batch.\n//\n// This problem was brought to light by a client (AG-2879), with dataset of 20,000\n// in 10,000 groups (2 items per group), then deleting all rows with transaction,\n// it took about 20 seconds to delete. with the BathRemoved, the reduced to less than 1 second.\n\ninterface RemoveDetails {\n    removeFromChildrenAfterGroup: { [id: string]: boolean; };\n    removeFromAllLeafChildren: { [id: string]: boolean; };\n}\n\nexport class BatchRemover {\n\n    private allSets: { [parentId: string]: RemoveDetails; } = {};\n    private allParents: RowNode[] = [];\n\n    public removeFromChildrenAfterGroup(parent: RowNode, child: RowNode): void {\n        const set = this.getSet(parent);\n        set.removeFromChildrenAfterGroup[child.id!] = true;\n    }\n\n    public isRemoveFromAllLeafChildren(parent: RowNode, child: RowNode): boolean {\n        const set = this.getSet(parent);\n        return !!set.removeFromAllLeafChildren[child.id!];\n    }\n\n    public preventRemoveFromAllLeafChildren(parent: RowNode, child: RowNode): void {\n        const set = this.getSet(parent);\n        delete set.removeFromAllLeafChildren[child.id!];\n    }\n    \n    public removeFromAllLeafChildren(parent: RowNode, child: RowNode): void {\n        const set = this.getSet(parent);\n        set.removeFromAllLeafChildren[child.id!] = true;\n    }\n\n    private getSet(parent: RowNode): RemoveDetails {\n        if (!this.allSets[parent.id!]) {\n            this.allSets[parent.id!] = {\n                removeFromAllLeafChildren: {},\n                removeFromChildrenAfterGroup: {}\n            };\n            this.allParents.push(parent);\n        }\n        return this.allSets[parent.id!];\n    }\n\n    public getAllParents(): RowNode[] {\n        return this.allParents;\n    }\n\n    public flush(): void {\n        this.allParents.forEach(parent => {\n            const nodeDetails = this.allSets[parent.id!];\n\n            parent.childrenAfterGroup = parent.childrenAfterGroup!.filter(\n                child => !nodeDetails.removeFromChildrenAfterGroup[child.id!]\n            );\n            parent.allLeafChildren = parent.allLeafChildren.filter(\n                child => !nodeDetails.removeFromAllLeafChildren[child.id!]\n            );\n            parent.updateHasChildren();\n\n            if (parent.sibling) {\n                parent.sibling.childrenAfterGroup = parent.childrenAfterGroup;\n                parent.sibling.allLeafChildren = parent.allLeafChildren;\n            }\n        });\n        this.allSets = {};\n        this.allParents.length = 0;\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    ColDef,\n    ColGroupDef,\n    Column,\n    ColumnModel,\n    GridOptionsService,\n    IPivotColDefService,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\n\nexport interface PivotColDefServiceResult {\n    pivotColumnGroupDefs: (ColDef | ColGroupDef)[];\n    pivotColumnDefs: ColDef[];\n}\n\n@Bean('pivotColDefService')\nexport class PivotColDefService extends BeanStub implements IPivotColDefService {\n\n    public static PIVOT_ROW_TOTAL_PREFIX = 'PivotRowTotal_';\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridOptionsService') private gos: GridOptionsService;\n\n    private fieldSeparator: string;\n    private pivotDefaultExpanded: number;\n\n    @PostConstruct\n    public init(): void {\n        const getFieldSeparator = () => this.gos.get('serverSidePivotResultFieldSeparator') ?? '_';\n        this.fieldSeparator = getFieldSeparator();\n        this.addManagedPropertyListener('serverSidePivotResultFieldSeparator', () => {this.fieldSeparator = getFieldSeparator();});\n\n        const getPivotDefaultExpanded = () => this.gos.get('pivotDefaultExpanded');\n        this.pivotDefaultExpanded = getPivotDefaultExpanded();\n        this.addManagedPropertyListener('pivotDefaultExpanded', () => {this.pivotDefaultExpanded = getPivotDefaultExpanded();});\n    }\n\n    public createPivotColumnDefs(uniqueValues: any): PivotColDefServiceResult {\n        // this is passed to the columnModel, to configure the columns and groups we show\n\n        const pivotColumnGroupDefs: (ColDef | ColGroupDef)[] = this.createPivotColumnsFromUniqueValues(uniqueValues);\n\n        function extractColDefs(input: (ColDef | ColGroupDef)[], arr: ColDef[] = []): ColDef[] {\n            input.forEach((def: any) => {\n                if (def.children !== undefined) {\n                    extractColDefs(def.children, arr);\n                } else {\n                    arr.push(def);\n                }\n            });\n            return arr;\n        }\n        const pivotColumnDefs = extractColDefs(pivotColumnGroupDefs);\n\n        // additional columns that contain the aggregated total for each value column per row\n        this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs);\n\n        // additional group columns that contain child totals for each collapsed child column / group\n        this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs);\n\n        // additional group columns that contain an aggregated total across all child columns\n        this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs);\n\n        // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that\n        // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,\n        // as these use the col defs also\n        const pivotColumnDefsClone: ColDef[] = pivotColumnDefs.map(colDef => _.cloneObject(colDef));\n\n        return {\n            pivotColumnGroupDefs: pivotColumnGroupDefs,\n            pivotColumnDefs: pivotColumnDefsClone\n        };\n    }\n\n    private createPivotColumnsFromUniqueValues(uniqueValues: any): (ColDef | ColGroupDef)[] {\n        const pivotColumns = this.columnModel.getPivotColumns();\n        const maxDepth = pivotColumns.length;\n\n        const pivotColumnGroupDefs: (ColDef | ColGroupDef)[] = this.recursivelyBuildGroup(0, uniqueValues, [], maxDepth, pivotColumns);\n        return pivotColumnGroupDefs;\n    }\n\n    private recursivelyBuildGroup(\n        index: number,\n        uniqueValue: any,\n        pivotKeys: string[],\n        maxDepth: number,\n        primaryPivotColumns: Column[]\n    ): ColGroupDef[] | ColDef[]  {\n        const measureColumns = this.columnModel.getValueColumns();\n        if (index >= maxDepth) { // Base case - build the measure columns\n            return this.buildMeasureCols(pivotKeys);\n        }\n\n        // sort by either user provided comparator, or our own one\n        const primaryPivotColumnDefs = primaryPivotColumns[index].getColDef();\n        const comparator = this.headerNameComparator.bind(this, primaryPivotColumnDefs.pivotComparator);\n\n        // Base case for the compact layout, instead of recursing build the last layer of groups as measure columns instead\n        if (measureColumns.length === 1 && this.gridOptionsService.get('removePivotHeaderRowWhenSingleValueColumn') && index === maxDepth - 1) {\n            const leafCols: ColDef[] = [];\n\n            _.iterateObject(uniqueValue, (key) => {\n                const newPivotKeys = [...pivotKeys, key];\n                const colDef = this.createColDef(measureColumns[0], key, newPivotKeys);\n                colDef.columnGroupShow = 'open';\n                leafCols.push(colDef);\n            });\n            leafCols.sort(comparator);\n            return leafCols;\n        }\n        // Recursive case\n        const groups: ColGroupDef[] = [];\n        _.iterateObject(uniqueValue, (key, value) => {\n            // expand group by default based on depth of group. (pivotDefaultExpanded provides desired level of depth for expanding group by default)\n            const openByDefault = this.pivotDefaultExpanded === -1 || (index < this.pivotDefaultExpanded);\n\n            const newPivotKeys = [...pivotKeys, key];\n            groups.push({\n                children: this.recursivelyBuildGroup(index + 1, value, newPivotKeys, maxDepth, primaryPivotColumns),\n                headerName: key,\n                pivotKeys: newPivotKeys,\n                columnGroupShow: 'open',\n                openByDefault: openByDefault,\n                groupId: this.generateColumnGroupId(newPivotKeys),\n            });\n        });\n        groups.sort(comparator);\n        return groups;\n    }\n\n    private buildMeasureCols(\n        pivotKeys: string[],\n    ): ColDef[] {\n        const measureColumns = this.columnModel.getValueColumns();\n        if (measureColumns.length === 0) {\n            // if no value columns selected, then we insert one blank column, so the user at least sees columns\n            // rendered. otherwise the grid would render with no columns (just empty groups) which would give the\n            // impression that the grid is broken\n            return [this.createColDef(null, '-', pivotKeys)];\n        }\n        return measureColumns.map((measureCol) => {\n            const columnName = this.columnModel.getDisplayNameForColumn(measureCol, 'header');\n            return {\n                ...this.createColDef(measureCol, columnName, pivotKeys),\n                columnGroupShow: 'open'\n            };\n        });\n    };\n\n    private addExpandablePivotGroups(\n        pivotColumnGroupDefs: (ColDef | ColGroupDef)[],\n        pivotColumnDefs: ColDef[],\n    ) {\n        if (\n            this.gridOptionsService.get('suppressExpandablePivotGroups') ||\n            this.gridOptionsService.get('pivotColumnGroupTotals')\n        ) {\n            return;\n        }\n\n        const recursivelyAddSubTotals = (\n            groupDef: (ColGroupDef | ColDef),\n            currentPivotColumnDefs: ColDef[],\n            acc: Map<string, string[]>\n        ) => {\n            const group = groupDef as ColGroupDef;\n\n            if (group.children) {\n                const childAcc = new Map();\n\n                group.children.forEach((grp: ColDef | ColGroupDef) => {\n                    recursivelyAddSubTotals(grp, currentPivotColumnDefs, childAcc);\n                });\n\n                const firstGroup = !group.children.some(child => (child as ColGroupDef).children);\n\n                this.columnModel.getValueColumns().forEach(valueColumn => {\n                    const columnName: string | null = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');\n                    const totalColDef = this.createColDef(valueColumn, columnName, groupDef.pivotKeys);\n                    totalColDef.pivotTotalColumnIds = childAcc.get(valueColumn.getColId());\n\n                    totalColDef.columnGroupShow = 'closed';\n\n                    totalColDef.aggFunc = valueColumn.getAggFunc();\n\n                    if (!firstGroup) {\n                        // add total colDef to group and pivot colDefs array\n                        const children = (groupDef as ColGroupDef).children;\n                        children.push(totalColDef);\n                        currentPivotColumnDefs.push(totalColDef);\n                    }\n                });\n\n                this.merge(acc, childAcc);\n\n            } else {\n                const def: ColDef = groupDef as ColDef;\n\n                // check that value column exists, i.e. aggFunc is supplied\n                if (!def.pivotValueColumn) { return; }\n\n                const pivotValueColId = def.pivotValueColumn.getColId();\n\n                const arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];\n                arr!.push(def.colId!);\n                acc.set(pivotValueColId, arr!);\n            }\n        };\n\n        pivotColumnGroupDefs.forEach((groupDef: (ColGroupDef | ColDef)) => {\n            recursivelyAddSubTotals(groupDef, pivotColumnDefs, new Map());\n        });\n    }\n\n    private addPivotTotalsToGroups(pivotColumnGroupDefs: (ColDef | ColGroupDef)[], pivotColumnDefs: ColDef[]) {\n        if (!this.gridOptionsService.get('pivotColumnGroupTotals')) { return; }\n\n        const insertAfter = this.gridOptionsService.get('pivotColumnGroupTotals') === 'after';\n\n        const valueCols = this.columnModel.getValueColumns();\n        const aggFuncs = valueCols.map(valueCol => valueCol.getAggFunc());\n\n        // don't add pivot totals if there is less than 1 aggFunc or they are not all the same\n        if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n            // console.warn('AG Grid: aborting adding pivot total columns - value columns require same aggFunc');\n            return;\n        }\n\n        // arbitrarily select a value column to use as a template for pivot columns\n        const valueColumn = valueCols[0];\n\n        pivotColumnGroupDefs.forEach((groupDef: (ColGroupDef | ColDef)) => {\n            this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter);\n        });\n    }\n\n    private recursivelyAddPivotTotal(groupDef: (ColGroupDef | ColDef),\n                                     pivotColumnDefs: ColDef[],\n                                     valueColumn: Column,\n                                     insertAfter: boolean): string[] | null {\n        const group = groupDef as ColGroupDef;\n        if (!group.children) {\n            const def: ColDef = groupDef as ColDef;\n            return def.colId ? [def.colId] : null;\n        }\n\n        let colIds: string[] = [];\n\n        // need to recurse children first to obtain colIds used in the aggregation stage\n        group.children\n            .forEach((grp: ColDef | ColGroupDef) => {\n                const childColIds = this.recursivelyAddPivotTotal(grp, pivotColumnDefs, valueColumn, insertAfter);\n                if (childColIds) {\n                    colIds = colIds.concat(childColIds);\n                }\n            });\n\n        // only add total colDef if there is more than 1 child node\n        if (group.children.length > 1) {\n\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const headerName = localeTextFunc('pivotColumnGroupTotals', 'Total');\n\n            //create total colDef using an arbitrary value column as a template\n            const totalColDef = this.createColDef(valueColumn, headerName, groupDef.pivotKeys, true);\n            totalColDef.pivotTotalColumnIds = colIds;\n            totalColDef.aggFunc = valueColumn.getAggFunc();\n\n            // add total colDef to group and pivot colDefs array\n            const children = (groupDef as ColGroupDef).children;\n            insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n            pivotColumnDefs.push(totalColDef);\n        }\n\n        return colIds;\n    }\n\n    private addRowGroupTotals(pivotColumnGroupDefs: (ColDef | ColGroupDef)[],\n                              pivotColumnDefs: ColDef[]) {\n        if (!this.gridOptionsService.get('pivotRowTotals')) { return; }\n\n        const insertAfter = this.gridOptionsService.get('pivotRowTotals') === 'after';\n\n        const valueColumns = this.columnModel.getValueColumns();\n        // order of row group totals depends on position\n        const valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n\n        for (let i = 0; i < valueCols.length; i++) {\n            const valueCol = valueCols[i];\n\n            let colIds: any[] = [];\n            pivotColumnGroupDefs.forEach((groupDef: (ColGroupDef | ColDef)) => {\n                colIds = colIds.concat(this.extractColIdsForValueColumn(groupDef, valueCol));\n            });\n\n            const withGroup = valueCols.length > 1 || !this.gridOptionsService.get('removePivotHeaderRowWhenSingleValueColumn');\n            this.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, valueCol, colIds, insertAfter, withGroup);\n        }\n    }\n\n    private extractColIdsForValueColumn(groupDef: (ColGroupDef | ColDef), valueColumn: Column): string[] {\n        const group = groupDef as ColGroupDef;\n        if (!group.children) {\n            const colDef = (group as ColDef);\n            return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n        }\n\n        let colIds: string[] = [];\n        group.children\n            .forEach((grp: ColDef | ColGroupDef) => {\n                this.extractColIdsForValueColumn(grp, valueColumn);\n                const childColIds = this.extractColIdsForValueColumn(grp, valueColumn);\n                colIds = colIds.concat(childColIds);\n            });\n\n        return colIds;\n    }\n\n    private createRowGroupTotal(parentChildren: (ColGroupDef | ColDef)[],\n                                pivotColumnDefs: ColDef[],\n                                valueColumn: Column,\n                                colIds: string[],\n                                insertAfter: boolean,\n                                addGroup: boolean): void {\n\n        const measureColumns = this.columnModel.getValueColumns();\n\n        let colDef: ColDef;\n\n        if (measureColumns.length === 0) {\n            colDef = this.createColDef(null, '-', []);\n        } else {\n            const columnName: string | null = this.columnModel.getDisplayNameForColumn(valueColumn, 'header');\n            colDef = this.createColDef(valueColumn, columnName, []);\n            colDef.pivotTotalColumnIds = colIds;\n        }\n\n        colDef.colId = PivotColDefService.PIVOT_ROW_TOTAL_PREFIX + colDef.colId;\n        pivotColumnDefs.push(colDef);\n\n        const valueGroup: ColGroupDef | ColDef = addGroup ? {\n            children: [colDef],\n            pivotKeys: [],\n            groupId: `${PivotColDefService.PIVOT_ROW_TOTAL_PREFIX}_pivotGroup_${valueColumn.getColId()}`,\n        } : colDef;\n\n        insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n    }\n\n    private createColDef(valueColumn: Column | null, headerName: any, pivotKeys: string[] | undefined, totalColumn: boolean = false): ColDef {\n\n        const colDef: ColDef = {};\n\n        // This is null when there are no measure columns and we're creating placeholder columns\n        if (valueColumn) {\n            const colDefToCopy = valueColumn.getColDef();\n            Object.assign(colDef, colDefToCopy);\n            // even if original column was hidden, we always show the pivot value column, otherwise it would be\n            // very confusing for people thinking the pivot is broken\n            colDef.hide = false;\n        }\n\n        colDef.headerName = headerName;\n        colDef.colId = this.generateColumnId(pivotKeys || [], valueColumn && !totalColumn ? valueColumn.getColId() : '');\n\n        // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to\n        // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.\n        colDef.field = colDef.colId;\n        // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n        // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n        colDef.valueGetter = (params) => params.data?.[params.colDef.field!];\n\n        colDef.pivotKeys = pivotKeys;\n        colDef.pivotValueColumn = valueColumn;\n        if (colDef.filter === true) {\n            colDef.filter = 'agNumberColumnFilter';\n        }\n\n        return colDef;\n    }\n\n    private sameAggFuncs(aggFuncs: any[]) {\n        if (aggFuncs.length == 1) { return true; }\n        //check if all aggFunc's match\n        for (let i = 1; i < aggFuncs.length; i++) {\n            if (aggFuncs[i] !== aggFuncs[0]) { return false; }\n        }\n        return true;\n    }\n\n    private headerNameComparator(userComparator: (a: string | undefined, b: string | undefined) => number, a: ColGroupDef | ColDef, b: ColGroupDef | ColDef): number {\n        if (userComparator) {\n            return userComparator(a.headerName, b.headerName);\n        } else {\n            if (a.headerName && !b.headerName) {\n                return 1;\n            } else if (!a.headerName && b.headerName) {\n                return -1;\n            }\n\n            // slightly naff here - just to satify typescript\n            // really should be &&, but if so ts complains\n            // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are\n            // ..still naff though\n            if (!a.headerName || !b.headerName) {\n                return 0;\n            }\n\n            if (a.headerName < b.headerName) {\n                return -1;\n            }\n\n            if (a.headerName > b.headerName) {\n                return 1;\n            }\n\n            return 0;\n        }\n    }\n\n    private merge(m1: Map<string, string[]>, m2: Map<any, any>) {\n        m2.forEach((value, key, map) => {\n            const existingList = m1.has(key) ? m1.get(key) : [];\n            const updatedList = [...existingList!, ...value];\n            m1.set(key, updatedList);\n        });\n    }\n\n    private generateColumnGroupId(pivotKeys: string[]): string {\n        const pivotCols = this.columnModel.getPivotColumns().map((col) => col.getColId());\n        return `pivotGroup_${pivotCols.join('-')}_${pivotKeys.join('-')}`;\n    }\n\n    private generateColumnId(pivotKeys: string[], measureColumnId: string) {\n        const pivotCols = this.columnModel.getPivotColumns().map((col) => col.getColId());\n        return `pivot_${pivotCols.join('-')}_${pivotKeys.join('-')}_${measureColumnId}`;\n    }\n\n    /**\n     * Used by the SSRM to create secondary columns from provided fields\n     * @param fields \n     */\n    public createColDefsFromFields(fields: string[]): (ColDef | ColGroupDef)[] {\n        interface UniqueValue {\n            [key: string]: UniqueValue;\n        };\n        // tear the ids down into groups, while this could be done in-step with the next stage, the lookup is faster \n        // than searching col group children array for the right group\n        const uniqueValues: UniqueValue = {};\n        for (let i = 0; i < fields.length; i++) {\n            const field = fields[i];\n            const parts = field.split(this.fieldSeparator);\n\n            let level: UniqueValue = uniqueValues;\n            for (let p = 0; p < parts.length; p++) {\n                const part = parts[p];\n                if (level[part] == null) {\n                    level[part] = {};\n                }\n                level = level[part];\n            }\n        }\n\n        const uniqueValuesToGroups = (id: string, key: string, uniqueValues: UniqueValue, depth: number): ColDef | ColGroupDef => {\n            const children: (ColDef | ColGroupDef)[] = [];\n            for (let key in uniqueValues) {\n                const item = uniqueValues[key];\n                const child = uniqueValuesToGroups(`${id}${this.fieldSeparator}${key}`, key, item, depth + 1);\n                children.push(child);\n            }\n\n            if (children.length === 0) {\n                const potentialAggCol = this.columnModel.getPrimaryColumn(key);\n                if (potentialAggCol) {\n                    const headerName = this.columnModel.getDisplayNameForColumn(potentialAggCol, 'header') ?? key;\n                    const colDef = this.createColDef(potentialAggCol, headerName, undefined, false);\n                    colDef.colId = id;\n                    colDef.aggFunc = potentialAggCol.getAggFunc();\n                    colDef.valueGetter = (params) => params.data?.[id];\n                    return colDef;\n                }\n\n                const col: ColDef = {\n                    colId: id,\n                    headerName: key,\n                    // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n                    // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n                    valueGetter: (params) => params.data?.[id],\n                };\n                return col;\n            }\n\n            // this is a bit sketchy. As the fields can be anything we just build groups as deep as the fields go.\n            // nothing says user has to give us groups the same depth.\n            const collapseSingleChildren = this.gridOptionsService.get('removePivotHeaderRowWhenSingleValueColumn');\n            if (collapseSingleChildren && children.length === 1 && 'colId' in children[0]) {\n                children[0].headerName = key;\n                return children[0];\n            }\n\n            const group: ColGroupDef = {\n                openByDefault: this.pivotDefaultExpanded === -1 || depth < this.pivotDefaultExpanded,\n                groupId: id,\n                headerName: key,\n                children,\n            };\n            return group;\n        }\n\n        const res: (ColDef | ColGroupDef)[] = [];\n        for (let key in uniqueValues) {\n            const item = uniqueValues[key];\n            const col = uniqueValuesToGroups(key, key, item, 0);\n            res.push(col);\n        }\n        return res;\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    ChangedPath,\n    ColDef,\n    Column,\n    ColumnModel,\n    Events,\n    PivotMaxColumnsExceededEvent,\n    GridOptions,\n    IRowNodeStage,\n    RowNode,\n    StageExecuteParams,\n    ValueService,\n    WithoutGridCommon,\n    _\n} from \"@ag-grid-community/core\";\nimport { PivotColDefService } from \"./pivotColDefService\";\n\n@Bean('pivotStage')\nexport class PivotStage extends BeanStub implements IRowNodeStage {\n\n    // these should go into the pivot column creator\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('pivotColDefService') private pivotColDefService: PivotColDefService;\n\n    private uniqueValues: any = {};\n\n    private pivotColumnDefs: ColDef[];\n\n    private aggregationColumnsHashLastTime: string | null;\n    private aggregationFuncsHashLastTime: string;\n\n    private groupColumnsHashLastTime: string | null;\n\n    private pivotRowTotalsLastTime: GridOptions['pivotRowTotals'];\n    private pivotColumnGroupTotalsLastTime: GridOptions['pivotColumnGroupTotals'];\n    private suppressExpandablePivotGroupsLastTime: GridOptions['suppressExpandablePivotGroups'];\n    private removePivotHeaderRowWhenSingleValueColumnLastTime: GridOptions['removePivotHeaderRowWhenSingleValueColumn'];\n\n    private lastTimeFailed = false;\n\n    private maxUniqueValues: number = -1;\n    private static EXCEEDED_MAX_UNIQUE_VALUES = 'Exceeded maximum allowed pivot column count.';\n\n    public execute(params: StageExecuteParams): void {\n        const changedPath = params.changedPath;\n        if (this.columnModel.isPivotActive()) {\n            this.executePivotOn(changedPath!);\n        } else {\n            this.executePivotOff(changedPath!);\n        }\n    }\n\n    private executePivotOff(changedPath: ChangedPath): void {\n        this.aggregationColumnsHashLastTime = null;\n        this.uniqueValues = {};\n        if (this.columnModel.isSecondaryColumnsPresent()) {\n            this.columnModel.setSecondaryColumns(null, \"rowModelUpdated\");\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n    }\n\n    private executePivotOn(changedPath: ChangedPath): void {\n        const numberOfAggregationColumns = this.columnModel.getValueColumns().length ?? 1;\n\n        // As unique values creates one column per aggregation column, divide max columns by number of aggregation columns\n        // to get the max number of unique values.\n        const configuredMaxCols = this.gridOptionsService.get('pivotMaxGeneratedColumns');\n        this.maxUniqueValues = configuredMaxCols === -1 ? -1 : configuredMaxCols / numberOfAggregationColumns;\n        let uniqueValues;\n        try {\n            // try catch is used to force execution to stop when the max count is exceeded.\n            uniqueValues = this.bucketUpRowNodes(changedPath);\n        } catch(e) {\n            // message is checked rather than inheritance as the build seems to break instanceof\n            if (e.message === PivotStage.EXCEEDED_MAX_UNIQUE_VALUES) {\n                this.columnModel.setSecondaryColumns([], \"rowModelUpdated\");\n                const event: WithoutGridCommon<PivotMaxColumnsExceededEvent> = {\n                    type: Events.EVENT_PIVOT_MAX_COLUMNS_EXCEEDED,\n                    message: e.message,\n                };\n                this.eventService.dispatchEvent(event);\n                this.lastTimeFailed = true;\n                return;\n            }\n            throw e;\n        }\n\n        const uniqueValuesChanged = this.setUniqueValues(uniqueValues);\n\n        const aggregationColumns = this.columnModel.getValueColumns();\n        const aggregationColumnsHash = aggregationColumns.map((column) => `${column.getId()}-${column.getColDef().headerName}`).join('#');\n        const aggregationFuncsHash = aggregationColumns.map((column) => column.getAggFunc()!.toString()).join('#');\n\n        const aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;\n        const aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;\n        this.aggregationColumnsHashLastTime = aggregationColumnsHash;\n        this.aggregationFuncsHashLastTime = aggregationFuncsHash;\n\n        const groupColumnsHash = this.columnModel.getRowGroupColumns().map((column) => column.getId()).join('#');\n        const groupColumnsChanged = groupColumnsHash !== this.groupColumnsHashLastTime;\n        this.groupColumnsHashLastTime = groupColumnsHash;\n\n        const pivotRowTotals = this.gridOptionsService.get('pivotRowTotals');\n        const pivotColumnGroupTotals = this.gridOptionsService.get('pivotColumnGroupTotals');\n        const suppressExpandablePivotGroups = this.gridOptionsService.get('suppressExpandablePivotGroups');\n        const removePivotHeaderRowWhenSingleValueColumn = this.gridOptionsService.get('removePivotHeaderRowWhenSingleValueColumn');\n\n        const anyGridOptionsChanged = (\n            pivotRowTotals !== this.pivotRowTotalsLastTime || pivotColumnGroupTotals !== this.pivotColumnGroupTotalsLastTime ||\n            suppressExpandablePivotGroups !== this.suppressExpandablePivotGroupsLastTime || removePivotHeaderRowWhenSingleValueColumn !== this.removePivotHeaderRowWhenSingleValueColumnLastTime\n        );\n\n        this.pivotRowTotalsLastTime = pivotRowTotals;\n        this.pivotColumnGroupTotalsLastTime = pivotColumnGroupTotals;\n        this.suppressExpandablePivotGroupsLastTime = suppressExpandablePivotGroups;\n        this.removePivotHeaderRowWhenSingleValueColumnLastTime = removePivotHeaderRowWhenSingleValueColumn;\n\n        if (this.lastTimeFailed || uniqueValuesChanged || aggregationColumnsChanged || groupColumnsChanged || aggregationFuncsChanged || anyGridOptionsChanged) {\n            const {pivotColumnGroupDefs, pivotColumnDefs} = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues);\n            this.pivotColumnDefs = pivotColumnDefs;\n            this.columnModel.setSecondaryColumns(pivotColumnGroupDefs, \"rowModelUpdated\");\n            // because the secondary columns have changed, then the aggregation needs to visit the whole\n            // tree again, so we make the changedPath not active, to force aggregation to visit all paths.\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n        this.lastTimeFailed = false;\n    }\n\n    private setUniqueValues(newValues: any): boolean {\n        const json1 = JSON.stringify(newValues);\n        const json2 = JSON.stringify(this.uniqueValues);\n\n        const uniqueValuesChanged = json1 !== json2;\n\n        // we only continue the below if the unique values are different, as otherwise\n        // the result will be the same as the last time we did it\n        if (uniqueValuesChanged) {\n            this.uniqueValues = newValues;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private currentUniqueCount = 0;\n    private bucketUpRowNodes(changedPath: ChangedPath): any {\n        this.currentUniqueCount = 0;\n        // accessed from inside inner function\n        const uniqueValues: any = {};\n\n        // ensure childrenMapped is cleared, as if a node has been filtered out it should not have mapped children.\n        changedPath.forEachChangedNodeDepthFirst(node => {\n            if (node.leafGroup) {\n                node.childrenMapped = null;\n            }\n        });\n\n        const recursivelyBucketFilteredChildren = (node: RowNode) => {\n            if (node.leafGroup) {\n                this.bucketRowNode(node, uniqueValues);\n            } else {\n                node.childrenAfterFilter?.forEach(recursivelyBucketFilteredChildren);\n            }\n        }\n\n        changedPath.executeFromRootNode(recursivelyBucketFilteredChildren);\n\n        return uniqueValues;\n    }\n\n    private bucketRowNode(rowNode: RowNode, uniqueValues: any): void {\n\n        const pivotColumns = this.columnModel.getPivotColumns();\n\n        if (pivotColumns.length === 0) {\n            rowNode.childrenMapped = null;\n        } else {\n            rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter!, pivotColumns, 0, uniqueValues);\n        }\n\n        if (rowNode.sibling) {\n            rowNode.sibling.childrenMapped = rowNode.childrenMapped;\n        }\n    }\n\n    private bucketChildren(children: RowNode[], pivotColumns: Column[], pivotIndex: number, uniqueValues: any): any {\n\n        const mappedChildren: any = {};\n        const pivotColumn = pivotColumns[pivotIndex];\n\n        // map the children out based on the pivot column\n        children.forEach((child: RowNode) => {\n            let key: string = this.valueService.getKeyForNode(pivotColumn, child);\n\n            if (_.missing(key)) {\n                key = '';\n            }\n\n            if (!uniqueValues[key]) {\n                this.currentUniqueCount += 1;\n                uniqueValues[key] = {};\n\n                const doesGeneratedColMaxExist = this.maxUniqueValues !== -1;\n                const hasExceededColMax = this.currentUniqueCount > this.maxUniqueValues;\n                if (doesGeneratedColMaxExist && hasExceededColMax) {\n                    // throw an error to prevent all additional execution and escape the loops.\n                    throw Error(PivotStage.EXCEEDED_MAX_UNIQUE_VALUES);\n                }\n            }\n\n            if (!mappedChildren[key]) {\n                mappedChildren[key] = [];\n            }\n            mappedChildren[key].push(child);\n        });\n\n        // if it's the last pivot column, return as is, otherwise go one level further in the map\n        if (pivotIndex === pivotColumns.length - 1) {\n            return mappedChildren;\n        } else {\n            const result: any = {};\n\n            _.iterateObject(mappedChildren, (key: string, value: RowNode[]) => {\n                result[key] = this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);\n            });\n\n            return result;\n        }\n    }\n\n    public getPivotColumnDefs(): ColDef[] {\n        return this.pivotColumnDefs;\n    }\n\n}\n", "import {\n    Bean,\n    BeanStub,\n    Column,\n    IAggFunc,\n    IAggFuncService,\n    PostConstruct,\n    _,\n    IAggFuncParams\n} from '@ag-grid-community/core';\n\n// @ts-ignore\nconst AGBigInt = typeof BigInt === 'undefined' ? null : BigInt;\n\nconst defaultAggFuncNames: { [key: string]: string } = {\n    sum: 'Sum',\n    first: 'First',\n    last: 'Last',\n    min: 'Min',\n    max: 'Max',\n    count: 'Count',\n    avg: 'Average',\n};\n\n@Bean('aggFuncService')\nexport class AggFuncService extends BeanStub implements IAggFuncService {\n\n    private static AGG_SUM = 'sum';\n    private static AGG_FIRST = 'first';\n    private static AGG_LAST = 'last';\n    private static AGG_MIN = 'min';\n    private static AGG_MAX = 'max';\n    private static AGG_COUNT = 'count';\n    private static AGG_AVG = 'avg';\n\n    private aggFuncsMap: { [key: string]: IAggFunc; } = {};\n    private initialised = false;\n\n    @PostConstruct\n    private init() {\n        if (this.initialised) {\n            return;\n        }\n\n        this.initialiseWithDefaultAggregations();\n        this.addAggFuncs(this.gridOptionsService.get('aggFuncs'));\n    }\n\n    private initialiseWithDefaultAggregations(): void {\n        this.aggFuncsMap[AggFuncService.AGG_SUM] = aggSum;\n        this.aggFuncsMap[AggFuncService.AGG_FIRST] = aggFirst;\n        this.aggFuncsMap[AggFuncService.AGG_LAST] = aggLast;\n        this.aggFuncsMap[AggFuncService.AGG_MIN] = aggMin;\n        this.aggFuncsMap[AggFuncService.AGG_MAX] = aggMax;\n        this.aggFuncsMap[AggFuncService.AGG_COUNT] = aggCount;\n        this.aggFuncsMap[AggFuncService.AGG_AVG] = aggAvg;\n        this.initialised = true;\n    }\n    \n    private isAggFuncPossible(column: Column, func: string): boolean {\n        const allKeys = this.getFuncNames(column);\n        const allowed = _.includes(allKeys, func);\n        const funcExists = _.exists(this.aggFuncsMap[func]);\n        return allowed && funcExists;\n    }\n\n    public getDefaultFuncLabel(fctName: string): string {\n        return defaultAggFuncNames[fctName] ?? fctName;\n    }\n\n    public getDefaultAggFunc(column: Column): string | null {\n        const defaultAgg = column.getColDef().defaultAggFunc;\n\n        if (_.exists(defaultAgg) && this.isAggFuncPossible(column, defaultAgg)) {\n            return defaultAgg;\n        }\n\n        if (this.isAggFuncPossible(column, AggFuncService.AGG_SUM)) {\n            return AggFuncService.AGG_SUM;\n        }\n\n        const allKeys = this.getFuncNames(column);\n        return _.existsAndNotEmpty(allKeys) ? allKeys[0] : null;\n    }\n\n    public addAggFuncs(aggFuncs?: { [key: string]: IAggFunc; }): void {\n        this.init();\n        _.iterateObject(aggFuncs, (key: string, aggFunc: IAggFunc) => {\n            this.aggFuncsMap[key] = aggFunc;\n        });\n    }\n\n    public getAggFunc(name: string): IAggFunc {\n        this.init();\n        return this.aggFuncsMap[name];\n    }\n\n    public getFuncNames(column: Column): string[] {\n        const userAllowedFuncs = column.getColDef().allowedAggFuncs;\n\n        return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;\n    }\n\n    public clear(): void {\n        this.aggFuncsMap = {};\n    }\n}\n\nfunction aggSum(params: IAggFuncParams): number | bigint {\n    const { values } = params;\n    let result: any = null; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if (typeof value === 'number') {\n            if (result === null) {\n                result = value;\n            } else {\n                if (AGBigInt) {\n                    result += typeof result === 'number' ? value : AGBigInt(value);\n                } else {\n                    result += value;\n                }\n            }\n        } else if (typeof value === 'bigint') {\n            if (result === null) {\n                result = value;\n            } else {\n                result = (typeof result === 'bigint' ? result : AGBigInt(result)) + value;\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction aggFirst(params: IAggFuncParams): any {\n    return params.values.length > 0 ? params.values[0] : null;\n}\n\nfunction aggLast(params: IAggFuncParams): any {\n    return params.values.length > 0 ? _.last(params.values) : null;\n}\n\nfunction aggMin(params: IAggFuncParams): number | bigint | null {\n    const { values } = params;\n    let result: number | bigint | null = null;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result > value)) {\n            result = value;\n        }\n    }\n\n    return result;\n}\n\nfunction aggMax(params: IAggFuncParams): number | bigint | null {\n    const { values } = params;\n    let result: number | bigint | null = null;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result < value)) {\n            result = value;\n        }\n    }\n\n    return result;\n}\n\nfunction aggCount(params: IAggFuncParams) {\n    const { values } = params;\n    let result = 0;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        // check if the value is from a group, in which case use the group's count\n        result += value != null && typeof value.value === 'number' ? value.value : 1;\n    }\n\n\n    // the previous aggregation data\n    const existingAggData = params.rowNode?.aggData?.[params.column.getColId()];\n    if (existingAggData && existingAggData.value === result) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n\n    // it's important to wrap it in the object so we can determine if this is a group level\n    return {\n        value: result,\n        toString: function() {\n            return this.value.toString();\n        },\n        // used for sorting\n        toNumber: function() {\n            return this.value;\n        }\n    };\n}\n\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction aggAvg(params: IAggFuncParams): { value: number | bigint | null; count: number; toString(): string; toNumber(): number; } {\n    const { values } = params;\n    let sum: any = 0; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n    let count = 0;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const currentValue = values[i];\n        let valueToAdd = null;\n\n        if (typeof currentValue === 'number' || typeof currentValue === 'bigint') {\n            valueToAdd = currentValue;\n            count++;\n        } else if (currentValue != null && (typeof currentValue.value === 'number' || typeof currentValue.value === 'bigint') && typeof currentValue.count === 'number') {\n            // we are aggregating groups, so we take the aggregated values to calculated a weighted average\n            if (AGBigInt) {\n                valueToAdd = currentValue.value * (typeof currentValue.value === 'number' ? currentValue.count : AGBigInt(currentValue.count));\n            } else {\n                valueToAdd = currentValue.value * currentValue.count;\n            }\n            count += currentValue.count;\n        }\n\n        if (typeof valueToAdd === 'number') {\n            if (AGBigInt) {\n                sum += typeof sum === 'number' ? valueToAdd : AGBigInt(valueToAdd);\n            } else {\n                sum += valueToAdd;\n            }\n        } else if (typeof valueToAdd === 'bigint') {\n            sum = (typeof sum === 'bigint' ? sum : AGBigInt(sum)) + valueToAdd;\n        }\n    }\n\n    let value = null;\n\n    // avoid divide by zero error\n    if (count > 0) {\n        if (AGBigInt) {\n            value = sum / ((typeof sum === 'number' ? count : AGBigInt(count)) as any);\n        } else {\n            value = sum / count;\n        }\n\n    }\n\n    // the previous aggregation data\n    const existingAggData = params.rowNode?.aggData?.[params.column?.getColId()];\n    if (existingAggData && existingAggData.count === count && existingAggData.value === value) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    return {\n        count,\n        value,\n        // the grid by default uses toString to render values for an object, so this\n        // is a trick to get the default cellRenderer to display the avg value\n        toString: function() {\n            return typeof this.value === 'number' || typeof this.value === 'bigint' ? this.value.toString() : '';\n        },\n        // used for sorting\n        toNumber: function() {\n            return this.value;\n        }\n    };\n}\n", "import {\n    Autowired,\n    ColumnModel,\n    Component,\n    Events,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { RowGroupDropZonePanel } from \"./rowGroupDropZonePanel\";\nimport { PivotDropZonePanel } from \"./pivotDropZonePanel\";\n\nexport class GridHeaderDropZones extends Component {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private rowGroupComp: Component;\n    private pivotComp: Component;\n\n    constructor() {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.setGui(this.createNorthPanel());\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onRowGroupChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onRowGroupChanged());\n        this.addManagedPropertyListener('rowGroupPanelShow', () => this.onRowGroupChanged());\n        this.addManagedPropertyListener('pivotPanelShow', () => this.onPivotPanelShow());\n\n        this.onRowGroupChanged();\n    }\n\n    private createNorthPanel(): HTMLElement {\n        const topPanelGui = document.createElement('div');\n\n        topPanelGui.classList.add('ag-column-drop-wrapper');\n        _.setAriaRole(topPanelGui, 'presentation');\n\n        this.rowGroupComp = new RowGroupDropZonePanel(true);\n        this.createManagedBean(this.rowGroupComp);\n\n        this.pivotComp = new PivotDropZonePanel(true);\n        this.createManagedBean(this.pivotComp);\n\n        topPanelGui.appendChild(this.rowGroupComp.getGui());\n        topPanelGui.appendChild(this.pivotComp.getGui());\n\n        this.addManagedListener(this.rowGroupComp, Component.EVENT_DISPLAYED_CHANGED, () => this.onDropPanelVisible());\n        this.addManagedListener(this.pivotComp, Component.EVENT_DISPLAYED_CHANGED, () => this.onDropPanelVisible());\n\n        this.onDropPanelVisible();\n\n        return topPanelGui;\n    }\n\n    private onDropPanelVisible(): void {\n        const bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();\n        this.rowGroupComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);\n        this.pivotComp.addOrRemoveCssClass('ag-column-drop-horizontal-half-width', bothDisplayed);\n    }\n\n    private onRowGroupChanged(): void {\n        if (!this.rowGroupComp) {\n            return;\n        }\n\n        const rowGroupPanelShow = this.gridOptionsService.get('rowGroupPanelShow');\n\n        if (rowGroupPanelShow === 'always') {\n            this.rowGroupComp.setDisplayed(true);\n        } else if (rowGroupPanelShow === 'onlyWhenGrouping') {\n            const grouping = !this.columnModel.isRowGroupEmpty();\n            this.rowGroupComp.setDisplayed(grouping);\n        } else {\n            this.rowGroupComp.setDisplayed(false);\n        }\n    }\n\n    private onPivotPanelShow() {\n        if (!this.pivotComp) {\n            return;\n        }\n\n        const pivotPanelShow = this.gridOptionsService.get('pivotPanelShow');\n\n        if (pivotPanelShow === 'always') {\n            this.pivotComp.setDisplayed(true);\n        } else if (pivotPanelShow === 'onlyWhenPivoting') {\n            const pivoting = this.columnModel.isPivotActive();\n            this.pivotComp.setDisplayed(pivoting);\n        } else {\n            this.pivotComp.setDisplayed(false);\n        }\n    }\n}\n", "import {\n    _,\n    Column,\n    ColumnRowGroupChangeRequestEvent,\n    DragAndDropService,\n    DraggingEvent,\n    Events,\n    ITooltipParams,\n    PostConstruct,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { BaseDropZonePanel } from \"./baseDropZonePanel\";\n\nexport class RowGroupDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal: boolean) {\n        super(horizontal, 'rowGroup');\n    }\n\n    @PostConstruct\n    private passBeansUp(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');\n        const title = localeTextFunc('groups', 'Row Groups');\n\n        super.init({\n            icon: _.createIconNoSpan('rowGroupPanel', this.gridOptionsService, null)!,\n            emptyMessage: emptyMessage,\n            title\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));\n    }\n\n    protected getAriaLabel(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaRowGroupDropZonePanelLabel', 'Row Groups');\n\n        return label;\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'rowGroupColumnsList';\n\n        return res;\n    }\n\n    protected isItemDroppable(column: Column, draggingEvent: DraggingEvent): boolean {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.get('functionsReadOnly') || !column.isPrimary()) { return false; }\n\n        return column.isAllowRowGroup() && (!column.isRowGroupActive() || this.isSourceEventFromTarget(draggingEvent));\n    }\n\n    protected updateItems(columns: Column[]) {\n        if (this.gridOptionsService.get('functionsPassive')) {\n            const event: WithoutGridCommon<ColumnRowGroupChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: columns\n            };\n\n            this.eventService.dispatchEvent(event);\n        } else {\n            this.columnModel.setRowGroupColumns(columns, \"toolPanelUi\");\n        }\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? DragAndDropService.ICON_GROUP : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n\n    protected getExistingItems(): Column[] {\n        return this.columnModel.getRowGroupColumns();\n    }\n}\n", "import {\n    Column,\n    DraggingEvent,\n    DropTarget,\n    _,\n    PillDropZonePanel,\n    PillDropZonePanelParams,\n    DragItem,\n    Autowired,\n    ColumnModel,\n    ColumnEventType,\n    Events,\n    DragSourceType\n} from \"@ag-grid-community/core\";\nimport { DropZoneColumnComp } from \"./dropZoneColumnComp\";\n\nexport type TDropZone = 'rowGroup' | 'pivot' | 'aggregation';\n\nexport abstract class BaseDropZonePanel extends PillDropZonePanel<DropZoneColumnComp, Column> {\n    @Autowired('columnModel') protected readonly columnModel: ColumnModel;\n\n    constructor(horizontal: boolean, private dropZonePurpose: TDropZone) {\n        super(horizontal);\n    }\n\n    public init(params: PillDropZonePanelParams): void {\n        super.init(params);\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.refreshGui.bind(this));\n\n        this.addManagedPropertyListeners(['functionsReadOnly', 'rowGroupPanelSuppressSort', 'groupLockGroupColumns'], this.refreshGui.bind(this));\n    }\n\n    protected getItems(dragItem: DragItem): Column[] {\n        return dragItem.columns ?? [];\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        // not interested in row drags\n        return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel;\n    }\n\n    protected minimumAllowedNewInsertIndex(): number {\n        const numberOfLockedCols = this.gridOptionsService.get('groupLockGroupColumns');\n        const numberOfGroupCols = this.columnModel.getRowGroupColumns().length;\n        if (numberOfLockedCols === -1) {\n            return numberOfGroupCols;\n        }\n        return Math.min(numberOfLockedCols, numberOfGroupCols);\n    }\n\n    private showOrHideColumnOnExit(draggingEvent: DraggingEvent): boolean {\n        return this.isRowGroupPanel() && !this.gridOptionsService.get('suppressRowGroupHidesColumns') && !draggingEvent.fromNudge;\n    }\n\n    protected handleDragEnterEnd(draggingEvent: DraggingEvent): void {\n        const hideColumnOnExit = this.showOrHideColumnOnExit(draggingEvent);\n\n        if (hideColumnOnExit) {\n            const dragItem = draggingEvent.dragSource.getDragItem();\n            const columns = dragItem.columns;\n            this.setColumnsVisible(columns, false, \"uiColumnDragged\");\n        }\n    }\n\n    protected handleDragLeaveEnd(draggingEvent: DraggingEvent): void {\n        const showColumnOnExit = this.showOrHideColumnOnExit(draggingEvent);\n\n        if (showColumnOnExit) {\n            const dragItem = draggingEvent.dragSource.getDragItem();\n\n            this.setColumnsVisible(dragItem.columns, true, \"uiColumnDragged\");\n    }\n    }\n\n    public setColumnsVisible(columns: Column[] | null | undefined, visible: boolean, source: ColumnEventType) {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockVisible);\n            this.columnModel.setColumnsVisible(allowedCols, visible, source);\n        }\n    }\n\n    private isRowGroupPanel() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n\n    protected refreshOnDragStop(): boolean {\n        // If the function is passive, then we don't refresh, as we assume the client application\n        // is going to call setRowGroups / setPivots / setValues at a later point which will then\n        // cause a refresh. This gives a nice GUI where the ghost stays until the app has caught\n        // up with the changes. However, if there was no change in the order, then we do need to\n        // refresh to reset the columns\n        return !this.gridOptionsService.get('functionsPassive');\n    }\n\n    protected createPillComponent(column: Column, dropTarget: DropTarget, ghost: boolean, horizontal: boolean): DropZoneColumnComp {\n        return new DropZoneColumnComp(column, dropTarget, ghost, this.dropZonePurpose, horizontal);\n    }\n}", "import {\n    PopupService,\n    Component,\n    Autowired,\n    Events,\n    DropTarget,\n    Column,\n    ColumnAggFuncChangeRequestEvent,\n    RefSelector,\n    Optional,\n    IAggFuncService,\n    VirtualList,\n    KeyCode,\n    _,\n    SortController,\n    SortIndicatorComp,\n    WithoutGridCommon,\n    PillDragComp,\n    ColumnModel,\n    DragItem,\n    DragSourceType,\n    DragAndDropService\n} from \"@ag-grid-community/core\";\nimport { TDropZone } from \"./baseDropZonePanel\";\n\nexport class DropZoneColumnComp extends PillDragComp<Column> {\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Optional('aggFuncService') private readonly aggFuncService: IAggFuncService;\n    @Autowired('sortController') private readonly sortController: SortController;\n    @Autowired('columnModel') protected readonly columnModel: ColumnModel;\n\n    @RefSelector('eSortIndicator') private eSortIndicator: SortIndicatorComp;\n\n    private displayName: string | null;\n    private popupShowing = false;\n\n    constructor(\n        private column: Column,\n        dragSourceDropTarget: DropTarget,\n        ghost: boolean,\n        private dropZonePurpose: TDropZone,\n        horizontal: boolean\n    ) {\n        super(\n            dragSourceDropTarget, ghost, horizontal,\n            /* html */`\n                <span role=\"option\">\n                    <span ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n                    <span ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n                    <ag-sort-indicator ref=\"eSortIndicator\"></ag-sort-indicator>\n                    <span ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n                </span>\n            `);\n    }\n\n    public init(): void {\n        this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnDrop');\n\n        super.init();\n\n        this.setupSort();\n\n        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, () => {\n            this.setupAria();\n        });\n\n        if (this.isGroupingZone()) {\n            this.addManagedPropertyListener('groupLockGroupColumns', () => {\n                this.refreshRemove();\n                this.refreshDraggable();\n                this.setupAria();\n            });\n        }\n    }\n\n    public getItem(): Column {\n        return this.column;\n    }\n\n    protected getDisplayName(): string {\n        return this.displayName!;\n    }\n\n    protected getTooltip(): string | null | undefined {\n        return this.column.getColDef().headerTooltip;\n    }\n\n    protected addAdditionalAriaInstructions(ariaInstructions: string[], translate: (key: string, defaultValue: string) => string): void {\n        const isSortSuppressed = this.gridOptionsService.get('rowGroupPanelSuppressSort');\n        const isFunctionsReadOnly = this.gridOptionsService.get('functionsReadOnly')\n        if (this.isAggregationZone() && !isFunctionsReadOnly) {\n            const aggregationMenuAria = translate('ariaDropZoneColumnValueItemDescription', 'Press ENTER to change the aggregation type');\n            ariaInstructions.push(aggregationMenuAria);\n        }\n\n        if (this.isGroupingZone() && this.column.isSortable() && !isSortSuppressed) {\n            const sortProgressAria = translate('ariaDropZoneColumnGroupItemDescription', 'Press ENTER to sort');\n            ariaInstructions.push(sortProgressAria);\n        }\n\n        super.addAdditionalAriaInstructions(ariaInstructions, translate);\n    }\n\n    protected isDraggable(): boolean {\n        return this.isReadOnly();\n    }\n\n    protected isRemovable(): boolean {\n         return this.isReadOnly();\n    }\n\n    private isReadOnly(): boolean {\n        return !this.isGroupingAndLocked() && !this.gridOptionsService.get('functionsReadOnly');\n    }\n\n    protected getAriaDisplayName(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        const aggSeparator = translate('ariaDropZoneColumnComponentAggFuncSeparator', ' of ');\n        const sortDirection = {\n            asc: translate('ariaDropZoneColumnComponentSortAscending', 'ascending'),\n            desc: translate('ariaDropZoneColumnComponentSortDescending', 'descending'),\n        };\n        const columnSort = this.column.getSort();\n        const isSortSuppressed = this.gridOptionsService.get('rowGroupPanelSuppressSort');\n        return [\n            aggFuncName && `${aggFuncName}${aggSeparator}`,\n            name,\n            this.isGroupingZone() && !isSortSuppressed && columnSort && `, ${sortDirection[columnSort]}`\n        ].filter(part => !!part).join('');\n    }\n\n    private getColumnAndAggFuncName(): { name: string, aggFuncName: string } {\n        const name = this.displayName as string;\n        let aggFuncName: string = '';\n\n        if (this.isAggregationZone()) {\n            const aggFunc = this.column.getAggFunc();\n            // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'\n            const aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'agg';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            aggFuncName = localeTextFunc(aggFuncString, aggFuncString);\n        }\n\n        return { name, aggFuncName };\n    }\n\n    public setupSort(): void {\n        const canSort = this.column.isSortable();\n        const isGroupingZone = this.isGroupingZone();\n        if (!canSort || !isGroupingZone) {\n            return;\n        }\n\n        if (!this.gridOptionsService.get('rowGroupPanelSuppressSort')) {\n            this.eSortIndicator.setupSort(this.column, true);\n            const performSort = (event: MouseEvent | KeyboardEvent) => {\n                event.preventDefault();\n                const sortUsingCtrl = this.gridOptionsService.get('multiSortKey') === 'ctrl';\n                const multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;\n                this.sortController.progressSort(this.column, multiSort, 'uiColumnSorted');\n            };\n\n            this.addGuiEventListener('click', performSort);\n            this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n                const isEnter = e.key === KeyCode.ENTER;\n                if (isEnter && this.isGroupingZone()) {\n                    performSort(e);\n                }\n            });\n        }\n    }\n\n    protected getDefaultIconName(): string {\n        return DragAndDropService.ICON_HIDE;\n    }\n\n    protected createGetDragItem(): () => DragItem {\n        const { column } = this;\n        return () => {\n            const visibleState: { [key: string]: boolean } = {};\n            visibleState[column.getId()] = column.isVisible();\n            return {\n                columns: [column],\n                visibleState: visibleState\n            };\n        };\n    }\n\n    protected setupComponents(): void {\n        super.setupComponents();\n\n        if (this.isAggregationZone() && !this.gridOptionsService.get('functionsReadOnly')) {\n            this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));\n        }\n    }\n\n    protected onKeyDown(e: KeyboardEvent): void {\n        super.onKeyDown(e);\n\n        const isEnter = e.key === KeyCode.ENTER;\n        if (isEnter && this.isAggregationZone() && !this.gridOptionsService.get('functionsReadOnly')) {\n            e.preventDefault();\n            this.onShowAggFuncSelection();\n        }\n    }\n\n    protected getDisplayValue(): string {\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        return this.isAggregationZone() ? `${aggFuncName}(${name})` : name;\n    }\n\n    private onShowAggFuncSelection(): void {\n        if (this.popupShowing) { return; }\n\n        this.popupShowing = true;\n\n        const virtualList = new VirtualList({ cssIdentifier: 'select-agg-func' });\n        const rows = this.aggFuncService.getFuncNames(this.column);\n        const eGui = this.getGui();\n        const virtualListGui = virtualList.getGui();\n\n        virtualList.setModel({\n            getRow: function (index: number) { return rows[index]; },\n            getRowCount: function () { return rows.length; }\n        });\n\n        this.getContext().createBean(virtualList);\n\n        const ePopup = _.loadTemplate(/* html*/ `<div class=\"ag-select-agg-func-popup\"></div>`);\n        ePopup.style.top = '0px';\n        ePopup.style.left = '0px';\n        ePopup.appendChild(virtualListGui);\n        ePopup.style.width = `${eGui.clientWidth}px`;\n\n        const focusoutListener = this.addManagedListener(ePopup, 'focusout', (e: FocusEvent) => {\n            if (!ePopup.contains(e.relatedTarget as HTMLElement) && addPopupRes) {\n                addPopupRes.hideFunc();\n            }\n        });\n\n        const popupHiddenFunc = (callbackEvent?: KeyboardEvent) => {\n            this.destroyBean(virtualList);\n            this.popupShowing = false;\n\n            if (callbackEvent?.key === 'Escape') {\n                eGui.focus();\n            }\n\n            if (focusoutListener) {\n                focusoutListener();\n            }\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            closeOnEsc: true,\n            closedCallback: popupHiddenFunc,\n            ariaLabel: translate('ariaLabelAggregationFunction', 'Aggregation Function')\n        });\n\n        if (addPopupRes) {\n            virtualList.setComponentCreator(\n                this.createAggSelect.bind(this, addPopupRes.hideFunc)\n            );\n        }\n\n        virtualList.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                const row = virtualList.getLastFocusedRow();\n\n                if (row == null) { return; }\n\n                const comp = virtualList.getComponentAt(row) as AggItemComp;\n\n                if (comp) {\n                    comp.selectItem();\n                }\n            }\n        });\n\n        this.popupService.positionPopupByComponent({\n            type: 'aggFuncSelect',\n            eventSource: eGui,\n            ePopup: ePopup,\n            keepWithinBounds: true,\n            column: this.column,\n            position: 'under'\n        });\n\n        virtualList.refresh();\n\n        let rowToFocus = rows.findIndex(r => r === this.column.getAggFunc());\n        if (rowToFocus === -1) { rowToFocus = 0; }\n\n        virtualList.focusRow(rowToFocus);\n    }\n\n    private createAggSelect(hidePopup: () => void, value: any): Component {\n\n        const itemSelected = () => {\n            hidePopup();\n            if (this.gridOptionsService.get('functionsPassive')) {\n                const event: WithoutGridCommon<ColumnAggFuncChangeRequestEvent> = {\n                    type: Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST,\n                    columns: [this.column],\n                    aggFunc: value\n                };\n                this.eventService.dispatchEvent(event);\n            } else {\n                this.columnModel.setColumnAggFunc(this.column, value, \"toolPanelDragAndDrop\");\n            }\n        };\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const aggFuncString = value.toString();\n        const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n        const comp = new AggItemComp(itemSelected, aggFuncStringTranslated);\n\n        return comp;\n    }\n\n    private isGroupingAndLocked(): boolean {\n        return this.isGroupingZone() && this.columnModel.isColumnGroupingLocked(this.column);\n    }\n\n    private isAggregationZone() {\n        return this.dropZonePurpose === 'aggregation';\n    }\n\n    private isGroupingZone() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n\n    protected getDragSourceType(): DragSourceType {\n        return DragSourceType.ToolPanel;\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        (this.column as any) = null;\n    }\n}\n\nclass AggItemComp extends Component {\n\n    public selectItem: () => void;\n\n    constructor(itemSelected: () => void, value: string) {\n        super(/* html */ `<div class=\"ag-select-agg-func-item\"/>`);\n        this.selectItem = itemSelected;\n        this.getGui().innerText = value;\n        this.addGuiEventListener('click', this.selectItem);\n    }\n\n}\n", "import {\n    _,\n    Column,\n    ColumnPivotChangeRequestEvent,\n    DragAndDropService,\n    DraggingEvent,\n    Events,\n    ITooltipParams,\n    PostConstruct,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { BaseDropZonePanel } from \"./baseDropZonePanel\";\n\nexport class PivotDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal: boolean) {\n        super(horizontal, 'pivot');\n    }\n\n    @PostConstruct\n    private passBeansUp(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');\n        const title = localeTextFunc('pivots', 'Column Labels');\n\n        super.init({\n            icon: _.createIconNoSpan('pivotPanel', this.gridOptionsService, null)!,\n            emptyMessage: emptyMessage,\n            title: title\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));\n\n        this.refresh();\n    }\n\n    protected getAriaLabel(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaPivotDropZonePanelLabel', 'Column Labels');\n\n        return label;\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'pivotColumnsList';\n        return res;\n    }\n\n    private refresh(): void {\n        this.checkVisibility();\n        this.refreshGui();\n    }\n\n    private checkVisibility(): void {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        if (this.isHorizontal()) {\n            // what we do for horizontal (ie the pivot panel at the top) depends\n            // on the user property as well as pivotMode.\n            switch (this.gridOptionsService.get('pivotPanelShow')) {\n                case 'always':\n                    this.setDisplayed(pivotMode);\n                    break;\n                case 'onlyWhenPivoting':\n                    const pivotActive = this.columnModel.isPivotActive();\n                    this.setDisplayed(pivotMode && pivotActive);\n                    break;\n                default:\n                    // never show it\n                    this.setDisplayed(false);\n                    break;\n            }\n        } else {\n            // in toolPanel, the pivot panel is always shown when pivot mode is on\n            this.setDisplayed(pivotMode);\n        }\n    }\n\n    protected isItemDroppable(column: Column, draggingEvent: DraggingEvent): boolean {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.get('functionsReadOnly') || !column.isPrimary()) { return false; }\n\n        return column.isAllowPivot() && (!column.isPivotActive() || this.isSourceEventFromTarget(draggingEvent));\n    }\n\n    protected updateItems(columns: Column[]): void {\n        if (this.gridOptionsService.get('functionsPassive')) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: columns\n            };\n\n            this.eventService.dispatchEvent(event);\n        } else {\n            this.columnModel.setPivotColumns(columns, \"toolPanelUi\");\n        }\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? DragAndDropService.ICON_PIVOT : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n\n    protected getExistingItems(): Column[] {\n        return this.columnModel.getPivotColumns();\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    IRowNodeStage,\n    StageExecuteParams,\n    BeanStub,\n    FilterManager,\n    RowNode,\n    ColumnModel,\n    GridOptions,\n} from \"@ag-grid-community/core\";\n\n@Bean('filterAggregatesStage')\nexport class FilterAggregatesStage extends BeanStub implements IRowNodeStage {\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public execute(params: StageExecuteParams): void {\n        const isPivotMode = this.columnModel.isPivotMode();\n        const isAggFilterActive = this.filterManager.isAggregateFilterPresent()\n            || this.filterManager.isAggregateQuickFilterPresent();\n\n        // This is the default filter for applying only to leaf nodes, realistically this should not apply as primary agg columns,\n        // should not be applied by the filterManager if getGroupAggFiltering is missing. Predicate will apply filters to leaf level.\n        const defaultPrimaryColumnPredicate = (params: { node: RowNode }) => !params.node.group;\n\n        // Default secondary column predicate, selecting only leaf level groups.\n        const defaultSecondaryColumnPredicate = ((params: { node: RowNode }) => params.node.leafGroup);\n\n        // The predicate to determine whether filters should apply to this row. Either defined by the user in groupAggFiltering or a default depending\n        // on current pivot mode status.\n        const applyFilterToNode = this.gridOptionsService.getGroupAggFiltering()\n            || (isPivotMode ? defaultSecondaryColumnPredicate : defaultPrimaryColumnPredicate);\n\n        const { changedPath } = params;\n\n        const preserveChildren = (node: RowNode, recursive = false) => {\n            if (node.childrenAfterFilter) {\n                node.childrenAfterAggFilter = node.childrenAfterFilter;\n                if (recursive) {\n                    node.childrenAfterAggFilter.forEach((child) => preserveChildren(child, recursive));\n                }\n                this.setAllChildrenCount(node);\n            }\n\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        }\n\n        const filterChildren = (node: RowNode) => {\n            node.childrenAfterAggFilter = node.childrenAfterFilter?.filter((child: RowNode) => {\n                const shouldFilterRow = applyFilterToNode({ node: child });\n                if (shouldFilterRow) {\n                    const doesNodePassFilter = this.filterManager.doesRowPassAggregateFilters({ rowNode: child });\n                    if (doesNodePassFilter) {\n                        // Node has passed, so preserve children\n                        preserveChildren(child, true);\n                        return true;\n                    }\n                }\n                const hasChildPassed = child.childrenAfterAggFilter?.length;\n                return hasChildPassed;\n            }) || null;\n\n            this.setAllChildrenCount(node);\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n\n        changedPath!.forEachChangedNodeDepthFirst(\n            isAggFilterActive ? filterChildren : preserveChildren,\n            true,\n        );\n    }\n\n    private setAllChildrenCountTreeData(rowNode: RowNode) {\n        // for tree data, we include all children, groups and leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter!.forEach((child: RowNode) => {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount as any;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n\n    private setAllChildrenCountGridGrouping(rowNode: RowNode) {\n        // for grid data, we only count the leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter!.forEach((child: RowNode) => {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount as any;\n            } else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n\n    private setAllChildrenCount(rowNode: RowNode) {\n        if (!rowNode.hasChildren()) {\n            rowNode.setAllChildrenCount(null);\n            return;\n        }\n\n        if (this.gridOptionsService.get('treeData')) {\n            this.setAllChildrenCountTreeData(rowNode);\n        } else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    }\n}", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import {\n    _,\n    AgPromise,\n    AgSelect,\n    Autowired,\n    Column,\n    ColumnModel,\n    Events,\n    FilterManager,\n    IAfterGuiAttachedParams,\n    IFilterComp,\n    IFilterParams,\n    PostConstruct,\n    RefSelector,\n    TabGuardComp,\n} from '@ag-grid-community/core';\n\ninterface FilterColumnPair {\n    filter: IFilterComp;\n    column: Column;\n}\n\nexport class GroupFilter extends TabGuardComp implements IFilterComp {\n    public static EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n    public static EVENT_SELECTED_COLUMN_CHANGED = 'selectedColumnChanged';\n\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    @RefSelector('eGroupField') private readonly eGroupField: HTMLElement;\n    @RefSelector('eUnderlyingFilter') private readonly eUnderlyingFilter: HTMLElement;\n\n    private params: IFilterParams;\n    private groupColumn: Column;\n    private selectedColumn: Column | undefined;\n    private selectedFilter: IFilterComp | undefined;\n    private filterColumnPairs: FilterColumnPair[] | undefined;\n    private eGroupFieldSelect: AgSelect;\n    private afterGuiAttachedParams: IAfterGuiAttachedParams | undefined;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-group-filter\">\n                <div ref=\"eGroupField\"></div>\n                <div ref=\"eUnderlyingFilter\"></div>\n            </div>\n        `);\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initialiseTabGuard({});\n    }\n\n    public init(params: IFilterParams): AgPromise<void> {\n        this.params = params;\n        this.validateParams();\n        return this.updateGroups().then(() => {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onColumnRowGroupChanged());\n        });\n    }\n\n    private validateParams(): void {\n        const { colDef } = this.params;\n        if (colDef.field) {\n            _.warnOnce('Group Column Filter does not work with the colDef property \"field\". This property will be ignored.');\n        }\n        if (colDef.filterValueGetter) {\n            _.warnOnce('Group Column Filter does not work with the colDef property \"filterValueGetter\". This property will be ignored.');\n        }\n        if (colDef.filterParams) {\n            _.warnOnce('Group Column Filter does not work with the colDef property \"filterParams\". This property will be ignored.');\n        }\n    }\n\n    private updateGroups(): AgPromise<void> {\n        const sourceColumns = this.updateGroupField();\n        return this.getUnderlyingFilters(sourceColumns);\n    }\n\n    private getSourceColumns(): Column[] {\n        this.groupColumn = this.params.column;\n        if (this.gridOptionsService.get('treeData')) {\n            _.warnOnce('Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.');\n            return [];\n        }\n        const sourceColumns = this.columnModel.getSourceColumnsForGroupColumn(this.groupColumn);\n        if (!sourceColumns) {\n            _.warnOnce('Group Column Filter only works on group columns. Please use a different filter.');\n            return [];\n        }\n        return sourceColumns;\n    }\n\n    private updateGroupField(): Column[] | null {\n        _.clearElement(this.eGroupField);\n        if (this.eGroupFieldSelect) {\n            this.destroyBean(this.eGroupFieldSelect);\n        }\n        const allSourceColumns = this.getSourceColumns();\n        const sourceColumns = allSourceColumns.filter(sourceColumn => sourceColumn.isFilterAllowed());\n        if (!sourceColumns.length) {\n            this.selectedColumn = undefined;\n            _.setDisplayed(this.eGroupField, false);\n            return null;\n        }\n        if (allSourceColumns.length === 1) {\n            // we only want to hide the group field element if there's only one group column.\n            // If there's one group column that has a filter, but multiple columns in total,\n            // we should still show the select so the user knows which column it's for.\n            this.selectedColumn = sourceColumns[0];\n            _.setDisplayed(this.eGroupField, false);\n        } else {\n            // keep the old selected column if it's still valid\n            if (!this.selectedColumn || !sourceColumns.some(column => column.getId() === this.selectedColumn!.getId())) {\n                this.selectedColumn = sourceColumns[0];\n            }\n            this.createGroupFieldSelectElement(sourceColumns);\n            this.eGroupField.appendChild(this.eGroupFieldSelect.getGui());\n            this.eGroupField.appendChild(_.loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n            _.setDisplayed(this.eGroupField, true);\n        }\n\n        return sourceColumns;\n    }\n\n    private createGroupFieldSelectElement(sourceColumns: Column[]): void {\n        this.eGroupFieldSelect = this.createManagedBean(new AgSelect());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eGroupFieldSelect.setLabel(localeTextFunc('groupFilterSelect', 'Select field:'));\n        this.eGroupFieldSelect.setLabelAlignment('top');\n        this.eGroupFieldSelect.addOptions(sourceColumns.map(sourceColumn => ({\n            value: sourceColumn.getId(),\n            text: this.columnModel.getDisplayNameForColumn(sourceColumn, 'groupFilter', false) ?? undefined\n        })));\n        this.eGroupFieldSelect.setValue(this.selectedColumn!.getId());\n        this.eGroupFieldSelect.onValueChange((newValue) => this.updateSelectedColumn(newValue));\n        this.eGroupFieldSelect.addCssClass('ag-group-filter-field-select-wrapper');\n        if (sourceColumns.length === 1) {\n            this.eGroupFieldSelect.setDisabled(true);\n        }\n    }\n\n    private getUnderlyingFilters(sourceColumns: Column[] | null): AgPromise<void> {\n        if (!sourceColumns) {\n            this.filterColumnPairs = undefined;\n            this.selectedFilter = undefined;\n            this.groupColumn.setFilterActive(false, 'columnRowGroupChanged');\n            return AgPromise.resolve();\n        }\n        const filterPromises: AgPromise<IFilterComp>[] = [];\n        const filterColumnPairs: FilterColumnPair[] = [];\n        sourceColumns.forEach(column => {\n            const filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');\n            if (filterWrapper?.filterPromise) {\n                filterPromises.push(filterWrapper.filterPromise.then(filter => {\n                    if (filter) {\n                        filterColumnPairs.push({\n                            filter,\n                            column\n                        });\n                    }\n                    if (column.getId() === this.selectedColumn!.getId()) {\n                        this.selectedFilter = filter ?? undefined;\n                    }\n                    return filter!;\n                }));\n            }\n        });\n        return AgPromise.all(filterPromises).then(() => {\n            this.filterColumnPairs = filterColumnPairs;\n            this.groupColumn.setFilterActive(this.isFilterActive(), 'columnRowGroupChanged');\n        });\n    }\n\n    private addUnderlyingFilterElement(): AgPromise<void> {\n        _.clearElement(this.eUnderlyingFilter);\n        if (!this.selectedColumn) {\n            return AgPromise.resolve();\n        }\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.selectedColumn, 'COLUMN_MENU');\n        if (!filterWrapper) {\n            return AgPromise.resolve();\n        }\n        return filterWrapper.guiPromise.then(gui => {\n            this.eUnderlyingFilter.appendChild(gui!);\n            filterWrapper.filterPromise?.then(filter => {\n                filter?.afterGuiAttached?.(this.afterGuiAttachedParams);\n                if (!this.afterGuiAttachedParams?.suppressFocus && this.eGroupFieldSelect && !this.eGroupFieldSelect.isDisabled()) {\n                    this.eGroupFieldSelect.getFocusableElement().focus();\n                }\n            });\n        });\n    }\n\n    private updateSelectedColumn(columnId: string | null | undefined): void {\n        if (!columnId) {\n            return;\n        }\n        this.selectedFilter?.afterGuiDetached?.();\n        const selectedFilterColumnPair = this.getFilterColumnPair(columnId);\n        this.selectedColumn = selectedFilterColumnPair?.column;\n        this.selectedFilter = selectedFilterColumnPair?.filter;\n\n        this.dispatchEvent({\n            type: GroupFilter.EVENT_SELECTED_COLUMN_CHANGED\n        });\n        this.addUnderlyingFilterElement();\n    }\n\n    public isFilterActive(): boolean {\n        return !!this.filterColumnPairs?.some(({ filter }) => filter.isFilterActive());\n    }\n\n    public doesFilterPass(): boolean {\n        return true;\n    }\n\n    public getModel(): null {\n        return null;\n    }\n\n    public setModel(): AgPromise<void> {\n        return AgPromise.resolve();\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        this.afterGuiAttachedParams = params;\n        this.addUnderlyingFilterElement();\n    }\n\n    public afterGuiDetached(): void {\n        _.clearElement(this.eUnderlyingFilter);\n        this.selectedFilter?.afterGuiDetached?.();\n    }\n\n    private onColumnRowGroupChanged(): void {\n        this.updateGroups().then(() => {\n            this.dispatchEvent({\n                type: GroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED\n            });\n            this.eventService.dispatchEvent({\n                type: 'filterAllowedUpdated'\n            })\n        });\n    }\n\n    private getFilterColumnPair(columnId: string | undefined): FilterColumnPair | undefined {\n        if (!columnId) {\n            return undefined;\n        }\n        return this.filterColumnPairs?.find(({ column }) => column.getId() === columnId);\n    }\n\n    public getSelectedFilter(): IFilterComp | undefined {\n        return this.selectedFilter;\n    }\n\n    public getSelectedColumn(): Column | undefined {\n        return this.selectedColumn;\n    }\n\n    public isFilterAllowed(): boolean {\n        return !!this.selectedColumn;\n    }\n\n    public destroy(): void {\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    AgInputTextField,\n    AgPromise,\n    Autowired,\n    ColumnModel,\n    Column,\n    Component,\n    FilterChangedEvent,\n    FilterManager,\n    IFloatingFilterComp,\n    IFloatingFilterParams,\n    RefSelector,\n    UserCompDetails,\n    ColumnEvent,\n} from '@ag-grid-community/core';\nimport { GroupFilter } from './groupFilter';\n\nexport class GroupFloatingFilterComp extends Component implements IFloatingFilterComp<GroupFilter> {\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n\n    @RefSelector('eFloatingFilter') private readonly eFloatingFilter: HTMLElement;\n    \n    private params: IFloatingFilterParams<GroupFilter>;\n    private eFloatingFilterText: AgInputTextField;\n    private parentFilterInstance: GroupFilter;\n    private underlyingFloatingFilter: IFloatingFilterComp | undefined;\n    private showingUnderlyingFloatingFilter: boolean;\n    private compDetails: UserCompDetails;\n    private haveAddedColumnListeners: boolean = false;\n    \n    constructor() {\n        super(/* html */ `\n            <div ref=\"eFloatingFilter\" class=\"ag-group-floating-filter ag-floating-filter-input\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: IFloatingFilterParams<GroupFilter>): AgPromise<void> {\n        this.params = params;\n\n        // we only support showing the underlying floating filter for multiple group columns\n        const canShowUnderlyingFloatingFilter = this.gridOptionsService.get('groupDisplayType') === 'multipleColumns';\n\n        return new AgPromise<void>(resolve => {\n            this.params.parentFilterInstance(parentFilterInstance => {\n                this.parentFilterInstance = parentFilterInstance;\n\n                if (canShowUnderlyingFloatingFilter) {\n                    this.setupUnderlyingFloatingFilterElement().then(() => resolve());\n                } else {\n                    this.setupReadOnlyFloatingFilterElement();\n                    resolve();\n                }\n            });\n        }).then(() => {\n            this.addManagedListener(this.parentFilterInstance, GroupFilter.EVENT_SELECTED_COLUMN_CHANGED, () => this.onSelectedColumnChanged());\n            this.addManagedListener(this.parentFilterInstance, GroupFilter.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onColumnRowGroupChanged());\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams<GroupFilter>): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams<GroupFilter>): void {\n        this.params = params;\n        this.setParams();\n    }\n\n    private setParams(): void {\n        const displayName = this.columnModel.getDisplayNameForColumn(this.params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFloatingFilterText?.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    private setupReadOnlyFloatingFilterElement(): void {\n        if (!this.eFloatingFilterText) {\n            this.eFloatingFilterText = this.createManagedBean(new AgInputTextField());\n            \n            this.eFloatingFilterText\n                .setDisabled(true)\n                .addGuiEventListener('click', () => this.params.showParentFilter());\n\n            this.setParams();\n        }\n\n        this.updateDisplayedValue();\n\n        this.eFloatingFilter.appendChild(this.eFloatingFilterText.getGui());\n    }\n\n    private setupUnderlyingFloatingFilterElement(): AgPromise<void> {\n        this.showingUnderlyingFloatingFilter = false;\n        this.underlyingFloatingFilter = undefined;\n        _.clearElement(this.eFloatingFilter);\n        const column = this.parentFilterInstance.getSelectedColumn();\n        // we can only show the underlying filter if there is one instance (e.g. the underlying column is not visible)\n        if (column && !column.isVisible()) {\n            const compDetails = this.filterManager.getFloatingFilterCompDetails(column, this.params.showParentFilter);\n            if (compDetails) {\n                this.compDetails = compDetails;\n                if (!this.haveAddedColumnListeners) {\n                    this.haveAddedColumnListeners = true;\n                    this.addManagedListener(column, Column.EVENT_VISIBLE_CHANGED, this.onColumnVisibleChanged.bind(this));\n                    this.addManagedListener(column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));\n                }\n                return compDetails.newAgStackInstance().then(floatingFilter => {\n                    this.underlyingFloatingFilter = floatingFilter;\n                    this.underlyingFloatingFilter?.onParentModelChanged(this.parentFilterInstance.getSelectedFilter()?.getModel());\n                    this.appendChild(floatingFilter.getGui());\n                    this.showingUnderlyingFloatingFilter = true;\n                });\n            }\n        }\n        // fallback to the read-only version\n        this.setupReadOnlyFloatingFilterElement();\n        return AgPromise.resolve();\n    }\n\n    private onColumnVisibleChanged(): void {\n        this.setupUnderlyingFloatingFilterElement();\n    }\n\n    private onColDefChanged(event: ColumnEvent): void {\n        if (!event.column) { return; }\n        const compDetails = this.filterManager.getFloatingFilterCompDetails(event.column, this.params.showParentFilter);\n        if (compDetails) {\n            if (this.underlyingFloatingFilter?.refresh) {\n                this.underlyingFloatingFilter.refresh(compDetails.params);\n            } else {\n                this.underlyingFloatingFilter?.onParamsUpdated?.(compDetails.params);\n            }\n        }\n    }\n\n    public onParentModelChanged(_model: null, event: FilterChangedEvent): void {\n        if (this.showingUnderlyingFloatingFilter) {\n            this.underlyingFloatingFilter?.onParentModelChanged(this.parentFilterInstance.getSelectedFilter()?.getModel(), event);\n        } else {\n            this.updateDisplayedValue();\n        }\n\n    }\n\n    private updateDisplayedValue(): void {\n        if (!this.parentFilterInstance || !this.eFloatingFilterText) {\n            return;\n        }\n        const selectedFilter = this.parentFilterInstance.getSelectedFilter();\n        if (!selectedFilter) {\n            this.eFloatingFilterText.setValue('');\n            this.eFloatingFilterText.setDisplayed(false);\n            return;\n        }\n        this.eFloatingFilterText.setDisplayed(true);\n        if (selectedFilter.getModelAsString) {\n            const filterModel = selectedFilter.getModel();\n            this.eFloatingFilterText.setValue(filterModel == null ? '' : selectedFilter.getModelAsString(filterModel));\n        } else {\n            this.eFloatingFilterText.setValue('');\n        }\n    }\n\n    private onSelectedColumnChanged(): void {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n\n    private onColumnRowGroupChanged(): void {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n\n    public destroy(): void {\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    Column,\n    ColumnValueChangeRequestEvent,\n    DragAndDropService,\n    DraggingEvent,\n    Events,\n    ITooltipParams,\n    PostConstruct,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { BaseDropZonePanel } from \"./baseDropZonePanel\";\n\nexport class ValuesDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal: boolean) {\n        super(horizontal, 'aggregation');\n    }\n\n    @PostConstruct\n    private passBeansUp(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');\n        const title = localeTextFunc('values', 'Values');\n\n        super.init({\n            icon: _.createIconNoSpan('valuePanel', this.gridOptionsService, null)!,\n            emptyMessage: emptyMessage,\n            title: title\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshGui.bind(this));\n    }\n\n    protected getAriaLabel(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaValuesDropZonePanelLabel', 'Values');\n\n        return label;\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'valueColumnsList';\n        return res;\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? DragAndDropService.ICON_AGGREGATE : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n\n    protected isItemDroppable(column: Column, draggingEvent: DraggingEvent): boolean {\n        // we never allow grouping of secondary columns\n        if (this.gridOptionsService.get('functionsReadOnly') || !column.isPrimary()) { return false; }\n\n        return column.isAllowValue() && (!column.isValueActive() || this.isSourceEventFromTarget(draggingEvent));\n    }\n\n    protected updateItems(columns: Column[]): void {\n        if (this.gridOptionsService.get('functionsPassive')) {\n            const event: WithoutGridCommon<ColumnValueChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: columns\n            };\n            this.eventService.dispatchEvent(event);\n        } else {\n            this.columnModel.setValueColumns(columns, \"toolPanelUi\");\n        }\n    }\n\n    protected getExistingItems(): Column[] {\n        return this.columnModel.getValueColumns();\n    }\n}\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { HorizontalResizeComp } from \"./sideBar/horizontalResizeComp\";\nimport { SideBarComp } from \"./sideBar/sideBarComp\";\nimport { SideBarButtonsComp } from \"./sideBar/sideBarButtonsComp\";\nimport { ToolPanelColDefService } from \"./sideBar/common/toolPanelColDefService\";\nimport { VERSION } from \"./version\";\nimport { SideBarService } from \"./sideBar/sideBarService\";\n\nexport const SideBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SideBarModule,\n    beans: [ToolPanelColDefService, SideBarService],\n    agStackComponents: [\n        { componentName: 'AgHorizontalResize', componentClass: HorizontalResizeComp },\n        { componentName: 'AgSideBar', componentClass: SideBarComp },\n        { componentName: 'AgSideBarButtons', componentClass: SideBarButtonsComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Component,\n    HorizontalResizeService,\n    PostConstruct,\n    ToolPanelSizeChangedEvent,\n    WithoutGridCommon,\n    Events\n} from \"@ag-grid-community/core\";\n\nexport class HorizontalResizeComp extends Component {\n\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n\n    private startingWidth: number;\n    private elementToResize: HTMLElement;\n    private inverted: boolean;\n    private minWidth: number = 100;\n    private maxWidth: number | null = null;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-horizontal-resize\"></div>`);\n    }\n\n    public setElementToResize(elementToResize: HTMLElement): void {\n        this.elementToResize = elementToResize;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.getGui(),\n            dragStartPixels: 1,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this),\n            onResizeEnd: this.onResizeEnd.bind(this)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n        this.setInverted(this.gridOptionsService.get('enableRtl'));\n    }\n\n    private dispatchResizeEvent(start: boolean, end: boolean, width: number) {\n        const event: WithoutGridCommon<ToolPanelSizeChangedEvent> = {\n            type: Events.EVENT_TOOL_PANEL_SIZE_CHANGED,\n            width: width,\n            started: start,\n            ended: end,\n        };\n        this.eventService.dispatchEvent(event)\n    }\n\n    private onResizeStart(): void {\n        this.startingWidth = this.elementToResize.offsetWidth;        \n        this.dispatchResizeEvent(true, false, this.startingWidth);\n    }\n\n    private onResizeEnd(delta: number): void {\n        return this.onResizing(delta, true);\n    }\n\n    private onResizing(delta: number, isEnd: boolean = false): void {\n        const direction = this.inverted ? -1 : 1;\n        let newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - (delta * direction)));\n\n        if (this.maxWidth != null) {\n            newWidth = Math.min(this.maxWidth, newWidth);\n        }\n        this.elementToResize.style.width = `${newWidth}px`;\n        this.dispatchResizeEvent(false, isEnd, newWidth);        \n    }\n\n    public setInverted(inverted: boolean) {\n        this.inverted = inverted;\n    }\n\n    public setMaxWidth(value: number | null) {\n        this.maxWidth = value;\n    }\n\n    public setMinWidth(value: number | null) {\n        if (value != null) {\n            this.minWidth = value;\n        } else {\n            this.minWidth = 100;\n        }\n    }\n}\n", "import {\n    _,\n    Component,\n    Events,\n    ISideBar,\n    IToolPanel,\n    ModuleNames,\n    ModuleRegistry,\n    PostConstruct,\n    RefSelector,\n    SideBarDef,\n    ToolPanelDef,\n    ToolPanelVisibleChangedEvent,\n    Autowired,\n    ManagedFocusFeature,\n    FocusService,\n    KeyCode,\n    WithoutGridCommon,\n    FilterManager,\n    SideBarState,\n    IToolPanelParams\n} from \"@ag-grid-community/core\";\nimport { SideBarButtonClickedEvent, SideBarButtonsComp } from \"./sideBarButtonsComp\";\nimport { SideBarDefParser } from \"./sideBarDefParser\";\nimport { SideBarService } from \"./sideBarService\";\nimport { ToolPanelWrapper } from \"./toolPanelWrapper\";\n\nexport class SideBarComp extends Component implements ISideBar {\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('sideBarService') private sideBarService: SideBarService;\n    @RefSelector('sideBarButtons') private sideBarButtonsComp: SideBarButtonsComp;\n\n    private toolPanelWrappers: ToolPanelWrapper[] = [];\n    private sideBar: SideBarDef | undefined;\n    private position: 'left' | 'right';\n\n    private static readonly TEMPLATE = /* html */\n        `<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>`;\n\n    constructor() {\n        super(SideBarComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.sideBarButtonsComp.addEventListener(SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED, this.onToolPanelButtonClicked.bind(this));\n        const { sideBar: sideBarState } = this.gridOptionsService.get('initialState') ?? {};\n        this.setSideBarDef({\n            sideBarDef: SideBarDefParser.parse(this.gridOptionsService.get('sideBar')),\n            sideBarState\n        });\n\n        this.addManagedPropertyListener('sideBar', this.onSideBarUpdated.bind(this));\n\n        this.sideBarService.registerSideBarComp(this);\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) { return; }\n\n        const { focusService, sideBarButtonsComp } = this;\n        const eGui = this.getGui();\n        const sideBarGui = sideBarButtonsComp.getGui();\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement as HTMLElement;\n        const openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)') as HTMLElement;\n        const target = e.target as HTMLElement;\n\n        if (!openPanel) { return; }\n\n        if (sideBarGui.contains(activeElement)) {\n            if (focusService.focusInto(openPanel, e.shiftKey)) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        // only handle backwards focus to target the sideBar buttons\n        if (!e.shiftKey) { return; }\n\n        let nextEl: HTMLElement | null = null;\n\n\n        if (openPanel.contains(activeElement)) {\n            nextEl = this.focusService.findNextFocusableElement(openPanel, undefined, true);\n        } else if (focusService.isTargetUnderManagedComponent(openPanel, target) && e.shiftKey) {\n            nextEl = this.focusService.findFocusableElementBeforeTabGuard(openPanel, target);\n        }\n\n        if (!nextEl) {\n            nextEl = sideBarGui.querySelector('.ag-selected button') as HTMLElement;\n        }\n\n        if (nextEl && nextEl !== e.target) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!this.sideBarButtonsComp.getGui().contains(eDocument.activeElement)) { return; }\n        const sideBarGui = this.sideBarButtonsComp.getGui();\n        const buttons: HTMLElement[] = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));\n        const currentButton = eDocument.activeElement;\n        const currentPos = buttons.findIndex(button => button.contains(currentButton));\n        let nextPos: number | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n            case KeyCode.UP:\n                nextPos = Math.max(0, currentPos - 1);\n                break;\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n                nextPos = Math.min(currentPos + 1, buttons.length - 1);\n                break;\n        }\n\n        if (nextPos === null) { return; }\n\n        const innerButton = buttons[nextPos].querySelector('button');\n\n        if (innerButton) {\n            innerButton.focus();\n            e.preventDefault();\n        }\n    }\n\n    private onToolPanelButtonClicked(event: SideBarButtonClickedEvent): void {\n        const id = event.toolPanelId;\n        const openedItem = this.openedItem();\n\n        // if item was already open, we close it\n        if (openedItem === id) {\n            this.openToolPanel(undefined, 'sideBarButtonClicked'); // passing undefined closes\n        } else {\n            this.openToolPanel(id, 'sideBarButtonClicked');\n        }\n    }\n\n    private clearDownUi(): void {\n        this.sideBarButtonsComp.clearButtons();\n        this.destroyToolPanelWrappers();\n    }\n\n    private setSideBarDef({\n        sideBarDef, sideBarState, existingToolPanelWrappers\n    }: {\n        sideBarDef?: SideBarDef, sideBarState?: SideBarState, existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper }\n    }): void {\n        // initially hide side bar\n        this.setDisplayed(false);\n\n        this.sideBar = sideBarDef;\n\n        if (!!this.sideBar && !!this.sideBar.toolPanels) {\n            const toolPanelDefs = this.sideBar.toolPanels as ToolPanelDef[];\n            this.createToolPanelsAndSideButtons(toolPanelDefs, sideBarState, existingToolPanelWrappers);\n            if (!this.toolPanelWrappers.length) { return; }\n\n            const shouldDisplaySideBar = sideBarState ? sideBarState.visible : !this.sideBar.hiddenByDefault;\n            this.setDisplayed(shouldDisplaySideBar);\n\n            this.setSideBarPosition(sideBarState ? sideBarState.position : this.sideBar.position);\n\n            if (shouldDisplaySideBar) {\n                if (sideBarState) {\n                    const { openToolPanel } = sideBarState;\n                    if (openToolPanel) {\n                        this.openToolPanel(openToolPanel, 'sideBarInitializing');\n                    }\n                } else {\n                    this.openToolPanel(this.sideBar.defaultToolPanel, 'sideBarInitializing');\n                }\n            }\n        }\n    }\n\n    public getDef() {\n        return this.sideBar;\n    }\n\n    public setSideBarPosition(position?: 'left' | 'right'): this {\n        if (!position) { position = 'right'; }\n\n        this.position = position;\n\n        const isLeft =  position === 'left';\n        const resizerSide = isLeft ? 'right' : 'left';\n\n        this.addOrRemoveCssClass('ag-side-bar-left', isLeft);\n        this.addOrRemoveCssClass('ag-side-bar-right', !isLeft);\n\n        this.toolPanelWrappers.forEach(wrapper => {\n            wrapper.setResizerSizerSide(resizerSide);\n        });\n\n        this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED });\n\n        return this;\n    }\n\n    public setDisplayed(displayed: boolean, options?: { skipAriaHidden?: boolean | undefined; } | undefined): void {\n        super.setDisplayed(displayed, options);\n        this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED });\n    }\n\n    public getState(): SideBarState {\n        const toolPanels: { [id: string]: any } = {};\n        this.toolPanelWrappers.forEach(wrapper => {\n            toolPanels[wrapper.getToolPanelId()] = wrapper.getToolPanelInstance()?.getState?.();\n        });\n        return {\n            visible: this.isDisplayed(),\n            position: this.position,\n            openToolPanel: this.openedItem(),\n            toolPanels\n        };\n    }\n\n    private createToolPanelsAndSideButtons(\n        defs: ToolPanelDef[],\n        sideBarState?: SideBarState,\n        existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper }\n    ): void {\n        for (const def of defs) {\n            this.createToolPanelAndSideButton(def, sideBarState?.toolPanels?.[def.id], existingToolPanelWrappers?.[def.id]);\n        }\n    }\n\n    private validateDef(def: ToolPanelDef): boolean {\n        if (def.id == null) {\n            console.warn(`AG Grid: please review all your toolPanel components, it seems like at least one of them doesn't have an id`);\n            return false;\n        }\n\n        // helpers, in case user doesn't have the right module loaded\n        if (def.toolPanel === 'agColumnsToolPanel') {\n            const moduleMissing =\n                !ModuleRegistry.__assertRegistered(ModuleNames.ColumnsToolPanelModule, 'Column Tool Panel', this.context.getGridId());\n            if (moduleMissing) { return false; }\n        }\n\n        if (def.toolPanel === 'agFiltersToolPanel') {\n            const moduleMissing =\n                !ModuleRegistry.__assertRegistered(ModuleNames.FiltersToolPanelModule, 'Filters Tool Panel', this.context.getGridId());\n            if (moduleMissing) { return false; }\n            if (this.filterManager.isAdvancedFilterEnabled()) {\n                _.warnOnce('Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.');                \n                return false;\n            }\n        }\n\n        return true;\n\n    }\n\n    private createToolPanelAndSideButton(def: ToolPanelDef, initialState?: any, existingToolPanelWrapper?: ToolPanelWrapper): void {\n        if (!this.validateDef(def)) { return; }\n        const button = this.sideBarButtonsComp.addButtonComp(def);\n        let wrapper: ToolPanelWrapper;\n        if (existingToolPanelWrapper) {\n            wrapper = existingToolPanelWrapper;\n        } else {\n            wrapper = this.getContext().createBean(new ToolPanelWrapper());\n\n            wrapper.setToolPanelDef(def, {\n                initialState,\n                onStateUpdated: () => this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED })\n            });\n        }\n        wrapper.setDisplayed(false);\n\n        const wrapperGui = wrapper.getGui();\n        this.appendChild(wrapperGui);\n\n        this.toolPanelWrappers.push(wrapper);\n\n        _.setAriaControls(button.getButtonElement(), wrapperGui);\n    }\n\n    public refresh(): void {\n        this.toolPanelWrappers.forEach(wrapper => wrapper.refresh());\n    }\n\n    public openToolPanel(key: string | undefined, source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'): void {\n        const currentlyOpenedKey = this.openedItem();\n        if (currentlyOpenedKey === key) { return; }\n\n        this.toolPanelWrappers.forEach(wrapper => {\n            const show = key === wrapper.getToolPanelId();\n            wrapper.setDisplayed(show);\n        });\n\n        const newlyOpenedKey = this.openedItem();\n        const openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;\n        if (openToolPanelChanged) {\n            this.sideBarButtonsComp.setActiveButton(key);\n            this.raiseToolPanelVisibleEvent(key, currentlyOpenedKey ?? undefined, source);\n        }\n    }\n\n    public getToolPanelInstance(key: string): IToolPanel | undefined {\n        const toolPanelWrapper = this.toolPanelWrappers.filter(toolPanel => toolPanel.getToolPanelId() === key)[0];\n\n        if (!toolPanelWrapper) {\n            console.warn(`AG Grid: unable to lookup Tool Panel as invalid key supplied: ${key}`);\n            return;\n        }\n\n        return toolPanelWrapper.getToolPanelInstance();\n    }\n\n    private raiseToolPanelVisibleEvent(key: string | undefined, previousKey: string | undefined, source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api'): void {\n        const switchingToolPanel = !!key && !!previousKey;\n        if (previousKey) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key: previousKey,\n                visible: false,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (key) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key,\n                visible: true,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public close(source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'): void {\n        this.openToolPanel(undefined, source);\n    }\n\n    public isToolPanelShowing(): boolean {\n        return !!this.openedItem();\n    }\n\n    public openedItem(): string | null {\n        let activeToolPanel: string | null = null;\n        this.toolPanelWrappers.forEach(wrapper => {\n            if (wrapper.isDisplayed()) {\n                activeToolPanel = wrapper.getToolPanelId();\n            }\n        });\n        return activeToolPanel;\n    }\n\n    private onSideBarUpdated(): void {\n        const sideBarDef = SideBarDefParser.parse(this.gridOptionsService.get('sideBar'));\n\n        let existingToolPanelWrappers: { [id: string]: ToolPanelWrapper } = {};\n        if (sideBarDef && this.sideBar) {\n            sideBarDef.toolPanels?.forEach((toolPanelDef: ToolPanelDef) => {\n                const { id } = toolPanelDef;\n                if (!id) { return; }\n                const existingToolPanelDef = this.sideBar!.toolPanels?.find(\n                    (toolPanelDefToCheck: ToolPanelDef) => toolPanelDefToCheck.id === id\n                ) as ToolPanelDef | undefined;\n                if (!existingToolPanelDef || toolPanelDef.toolPanel !== existingToolPanelDef.toolPanel) {\n                    return;\n                }\n                const toolPanelWrapper = this.toolPanelWrappers.find(toolPanel => toolPanel.getToolPanelId() === id);\n                if (!toolPanelWrapper) { return; }\n                const params = this.gridOptionsService.addGridCommonParams<IToolPanelParams>({\n                    ...(toolPanelDef.toolPanelParams ?? {}),\n                    onStateUpdated: () => this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED })\n                });\n                const hasRefreshed = toolPanelWrapper.getToolPanelInstance().refresh(params);\n                if (hasRefreshed !== true) { return; }\n                this.toolPanelWrappers = this.toolPanelWrappers.filter(toolPanel => toolPanel !== toolPanelWrapper);\n                _.removeFromParent(toolPanelWrapper.getGui());\n                existingToolPanelWrappers[id] = toolPanelWrapper;\n            });\n        }\n\n        this.clearDownUi();\n\n        // don't re-assign initial state\n        this.setSideBarDef({ sideBarDef, existingToolPanelWrappers });\n    }\n\n    private destroyToolPanelWrappers(): void {\n        this.toolPanelWrappers.forEach(wrapper => {\n            _.removeFromParent(wrapper.getGui());\n            this.destroyBean(wrapper);\n        });\n        this.toolPanelWrappers.length = 0;\n    }\n\n    protected destroy(): void {\n        this.destroyToolPanelWrappers();\n        super.destroy();\n    }\n}\n", "import {\n    Autowired,\n    AgEvent,\n    Component,\n    PostConstruct,\n    ToolPanelDef,\n    PreDestroy,\n    FocusService,\n    _,\n    KeyCode,\n    ColumnModel\n} from \"@ag-grid-community/core\";\n\nimport { SideBarButtonComp } from \"./sideBarButtonComp\";\n\nexport interface SideBarButtonClickedEvent extends AgEvent {\n    toolPanelId: string;\n}\n\nexport class SideBarButtonsComp extends Component {\n\n    public static EVENT_SIDE_BAR_BUTTON_CLICKED = 'sideBarButtonClicked';\n    private static readonly TEMPLATE: string = /* html */ `<div class=\"ag-side-buttons\" role=\"tablist\"></div>`;\n    private buttonComps: SideBarButtonComp[] = [];\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    constructor() {\n        super(SideBarButtonsComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.getFocusableElement(), 'keydown', this.handleKeyDown.bind(this));\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key !== KeyCode.TAB || !e.shiftKey) { return; }\n\n        const lastColumn = _.last(this.columnModel.getAllDisplayedColumns());\n\n        if (this.focusService.focusGridView(lastColumn, true)) {\n            e.preventDefault();\n        }\n    }\n\n    public setActiveButton(id: string | undefined): void {\n        this.buttonComps.forEach(comp => {\n            comp.setSelected(id === comp.getToolPanelId());\n        });\n    }\n\n    public addButtonComp(def: ToolPanelDef): SideBarButtonComp {\n        const buttonComp = this.createBean(new SideBarButtonComp(def));\n        this.buttonComps.push(buttonComp);\n        this.appendChild(buttonComp);\n\n        buttonComp.addEventListener(SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED, () => {\n            this.dispatchEvent({\n                type: SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED,\n                toolPanelId: def.id\n            });\n        });\n\n        return buttonComp;\n    }\n\n    @PreDestroy\n    public clearButtons(): void {\n        this.buttonComps = this.destroyBeans(this.buttonComps);\n        _.clearElement(this.getGui());\n    }\n\n}\n", "import {\n    Component,\n    PostConstruct,\n    RefSelector,\n    ToolPanelDef,\n    _,\n} from \"@ag-grid-community/core\";\n\nexport class SideBarButtonComp extends Component {\n\n    public static EVENT_TOGGLE_BUTTON_CLICKED = 'toggleButtonClicked';\n\n    @RefSelector('eToggleButton') private readonly eToggleButton: HTMLButtonElement;\n    @RefSelector('eIconWrapper') private readonly eIconWrapper: HTMLElement;\n    @RefSelector('eLabel') private readonly eLabel: HTMLElement;\n\n    private readonly toolPanelDef: ToolPanelDef;\n\n    constructor(toolPanelDef: ToolPanelDef) {\n        super();\n        this.toolPanelDef = toolPanelDef;\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelDef.id;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const template = this.createTemplate();\n        this.setTemplate(template);\n        this.setLabel();\n        this.setIcon();\n        this.addManagedListener(this.eToggleButton, 'click', this.onButtonPressed.bind(this));\n        this.eToggleButton.setAttribute('id', `ag-${this.getCompId()}-button`);\n    }\n\n    private createTemplate(): string {\n        const res = /* html */\n            `<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" aria-expanded=\"false\" class=\"ag-button ag-side-button-button\">\n                    <div ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span ref =\"eLabel\" class=\"ag-side-button-label\"></span>\n                </button>\n            </div>`;\n        return res;\n    }\n    \n    private setLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const def = this.toolPanelDef;\n        const label = translate(def.labelKey, def.labelDefault);\n\n        this.eLabel.innerText = label;\n    }\n\n    private setIcon(): void {\n        this.eIconWrapper.insertAdjacentElement('afterbegin', _.createIconNoSpan(this.toolPanelDef.iconKey, this.gridOptionsService)!);\n    }\n\n    private onButtonPressed(): void {\n        this.dispatchEvent({ type: SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED });\n    }\n\n    public setSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-selected', selected);\n        _.setAriaExpanded(this.eToggleButton, selected);\n    }\n\n    public getButtonElement(): Element {\n        return this.eToggleButton;\n    }\n}\n", "import { SideBarDef, ToolPanelDef } from \"@ag-grid-community/core\";\n\nexport class SideBarDefParser {\n    static readonly DEFAULT_COLUMN_COMP: ToolPanelDef = {\n        id: 'columns',\n        labelDefault: 'Columns',\n        labelKey: 'columns',\n        iconKey: 'columns',\n        toolPanel: 'agColumnsToolPanel',\n    };\n\n    static readonly DEFAULT_FILTER_COMP: ToolPanelDef = {\n        id: 'filters',\n        labelDefault: 'Filters',\n        labelKey: 'filters',\n        iconKey: 'filter',\n        toolPanel: 'agFiltersToolPanel',\n    };\n\n    static readonly DEFAULT_BY_KEY: { [p: string]: ToolPanelDef } = {\n        columns: SideBarDefParser.DEFAULT_COLUMN_COMP,\n        filters: SideBarDefParser.DEFAULT_FILTER_COMP\n    };\n\n    static parse(toParse: SideBarDef | string | string[] | boolean | null | undefined): SideBarDef | undefined {\n        if (!toParse) { return undefined; }\n        if (toParse === true) {\n            return {\n                toolPanels: [\n                    SideBarDefParser.DEFAULT_COLUMN_COMP,\n                    SideBarDefParser.DEFAULT_FILTER_COMP,\n                ],\n                defaultToolPanel: 'columns'\n            };\n        }\n\n        if (typeof toParse === 'string') { return SideBarDefParser.parse([toParse]); }\n\n        if (Array.isArray(toParse)) {\n            const comps: ToolPanelDef[] = [];\n            toParse.forEach(key => {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n\n                comps.push(lookupResult);\n            });\n\n            if (comps.length === 0) {\n                return undefined;\n            }\n\n            return {\n                toolPanels: comps,\n                defaultToolPanel: comps[0].id\n            };\n        }\n\n        const result: SideBarDef = {\n            toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),\n            defaultToolPanel: toParse.defaultToolPanel,\n            hiddenByDefault: toParse.hiddenByDefault,\n            position: toParse.position\n        };\n\n        return result;\n    }\n\n    static parseComponents(from?: (ToolPanelDef | string)[]): ToolPanelDef[] {\n        const result: ToolPanelDef[] = [];\n\n        if (!from) { return result; }\n\n        from.forEach((it: ToolPanelDef | string) => {\n            let toAdd: ToolPanelDef | null = null;\n            if (typeof it === 'string') {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${it} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n\n                toAdd = lookupResult;\n            } else {\n                toAdd = it;\n            }\n\n            result.push(toAdd);\n        });\n\n        return result;\n    }\n}", "import {\n    Autowired,\n    Component,\n    UserComponentFactory,\n    IToolPanelComp,\n    IToolPanelParams,\n    ToolPanelDef,\n    PostConstruct,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { HorizontalResizeComp } from \"./horizontalResizeComp\";\n\nexport class ToolPanelWrapper extends Component {\n\n    @Autowired(\"userComponentFactory\") private userComponentFactory: UserComponentFactory;\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-tool-panel-wrapper\" role=\"tabpanel\"/>`;\n\n    private toolPanelCompInstance: IToolPanelComp;\n    private toolPanelId: string;\n    private resizeBar: HorizontalResizeComp;\n    private width: number | undefined;\n    private params: IToolPanelParams;\n\n    constructor() {\n        super(ToolPanelWrapper.TEMPLATE);\n    }\n\n    @PostConstruct\n    private setupResize(): void {\n        const eGui = this.getGui();\n        const resizeBar = this.resizeBar = this.createManagedBean(new HorizontalResizeComp());\n\n        eGui.setAttribute('id', `ag-${this.getCompId()}`);\n\n        resizeBar.setElementToResize(eGui);\n        this.appendChild(resizeBar);\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelId;\n    }\n\n    public setToolPanelDef(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): void {\n        const { id, minWidth, maxWidth, width } = toolPanelDef;\n\n        this.toolPanelId = id;\n        this.width = width;\n\n        const compDetails = this.userComponentFactory.getToolPanelCompDetails(toolPanelDef, params);\n        const componentPromise = compDetails.newAgStackInstance();\n\n        this.params = compDetails.params;\n\n        if (componentPromise == null) {\n            console.warn(`AG Grid: error processing tool panel component ${id}. You need to specify 'toolPanel'`);\n            return;\n        }\n        componentPromise.then(this.setToolPanelComponent.bind(this));\n\n        if (minWidth != null) {\n            this.resizeBar.setMinWidth(minWidth);\n        }\n\n        if (maxWidth != null) {\n            this.resizeBar.setMaxWidth(maxWidth);\n        }\n    }\n\n    private setToolPanelComponent(compInstance: IToolPanelComp): void {\n        this.toolPanelCompInstance = compInstance;\n\n        this.appendChild(compInstance.getGui());\n        this.addDestroyFunc(() => {\n            this.destroyBean(compInstance);\n        });\n\n        if (this.width) {\n            this.getGui().style.width = `${this.width}px`;\n        }\n    }\n\n    public getToolPanelInstance(): IToolPanelComp {\n        return this.toolPanelCompInstance;\n    }\n\n    public setResizerSizerSide(side: 'right' | 'left') {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const isLeft = side === 'left';\n        const inverted = isRtl ? isLeft : !isLeft;\n\n        this.resizeBar.setInverted(inverted);\n    }\n\n    public refresh(): void {\n        this.toolPanelCompInstance.refresh(this.params);\n    }\n\n}\n", "import {\n    _,\n    AbstractColDef,\n    Autowired,\n    Bean,\n    BeanStub,\n    ColDef,\n    ColGroupDef,\n    Column,\n    ColumnModel,\n    ProvidedColumnGroup,\n    IProvidedColumn\n} from \"@ag-grid-community/core\";\n\n@Bean('toolPanelColDefService')\nexport class ToolPanelColDefService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public createColumnTree(colDefs: AbstractColDef[]): IProvidedColumn[] {\n        const invalidColIds: AbstractColDef[] = [];\n\n        const createDummyColGroup = (abstractColDef: AbstractColDef, depth: number): IProvidedColumn => {\n            if (this.isColGroupDef(abstractColDef)) {\n\n                // creating 'dummy' group which is not associated with grid column group\n                const groupDef = abstractColDef as ColGroupDef;\n                const groupId = (typeof groupDef.groupId !== 'undefined') ? groupDef.groupId : groupDef.headerName;\n                const group = new ProvidedColumnGroup(groupDef, groupId!, false, depth);\n                const children: IProvidedColumn[] = [];\n                groupDef.children.forEach(def => {\n                    const child = createDummyColGroup(def, depth + 1);\n                    // check column exists in case invalid colDef is supplied for primary column\n                    if (child) {\n                        children.push(child);\n                    }\n                });\n                group.setChildren(children);\n\n                return group;\n            } else {\n                const colDef = abstractColDef as ColDef;\n                const key = colDef.colId ? colDef.colId : colDef.field;\n                const column = this.columnModel.getPrimaryColumn(key!) as IProvidedColumn;\n\n                if (!column) {\n                    invalidColIds.push(colDef);\n                }\n\n                return column;\n            }\n        };\n\n        const mappedResults: IProvidedColumn[] = [];\n        colDefs.forEach(colDef => {\n            const result = createDummyColGroup(colDef, 0);\n            if (result) {\n                // only return correctly mapped colDef results\n                mappedResults.push(result);\n            }\n        });\n\n        if (invalidColIds.length > 0) {\n            console.warn('AG Grid: unable to find grid columns for the supplied colDef(s):', invalidColIds);\n        }\n\n        return mappedResults;\n    }\n\n    public syncLayoutWithGrid(syncLayoutCallback: (colDefs: AbstractColDef[]) => void): void {\n        // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)\n        const leafPathTrees: AbstractColDef[] = this.getLeafPathTrees();\n\n        // merge leaf path tree taking split column groups into account\n        const mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);\n\n        // sync layout with merged column trees\n        syncLayoutCallback(mergedColumnTrees);\n    }\n\n    private getLeafPathTrees(): AbstractColDef[] {\n\n        // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.\n        const getLeafPathTree = (node: Column | ProvidedColumnGroup, childDef: AbstractColDef): AbstractColDef => {\n            let leafPathTree: AbstractColDef;\n\n            // build up tree in reverse order\n            if (node instanceof ProvidedColumnGroup) {\n                if (node.isPadding()) {\n                    // skip over padding groups\n                    leafPathTree = childDef;\n                } else {\n                    const groupDef = Object.assign({}, node.getColGroupDef());\n                    // ensure group contains groupId\n                    groupDef.groupId = node.getGroupId();\n                    groupDef.children = [childDef];\n                    leafPathTree = groupDef;\n                }\n            } else {\n                const colDef = Object.assign({}, node.getColDef());\n                // ensure col contains colId\n                colDef.colId = node.getColId();\n                leafPathTree = colDef;\n            }\n\n            // walk tree\n            const parent = node.getOriginalParent();\n            if (parent) {\n                // keep walking up the tree until we reach the root\n                return getLeafPathTree(parent, leafPathTree);\n            } else {\n                // we have reached the root - exit with resulting leaf path tree\n                return leafPathTree;\n            }\n        };\n\n        // obtain a sorted list of all grid columns\n        const allGridColumns = this.columnModel.getAllGridColumns();\n\n        // only primary columns and non row group columns should appear in the tool panel\n        const allPrimaryGridColumns = allGridColumns.filter(column => {\n            const colDef = column.getColDef();\n            return column.isPrimary() && !colDef.showRowGroup;\n        });\n\n        // construct a leaf path tree for each column\n        return allPrimaryGridColumns.map(col => getLeafPathTree(col, col.getColDef()));\n    }\n\n    private mergeLeafPathTrees(leafPathTrees: AbstractColDef[]) {\n        const matchingRootGroupIds = (pathA: AbstractColDef, pathB: AbstractColDef) => {\n            const bothPathsAreGroups = this.isColGroupDef(pathA) && this.isColGroupDef(pathB);\n            return bothPathsAreGroups && this.getId(pathA) === this.getId(pathB);\n        };\n\n        const mergeTrees = (treeA: AbstractColDef, treeB: AbstractColDef): AbstractColDef => {\n            if (!this.isColGroupDef(treeB)) { return treeA; }\n\n            const mergeResult = treeA;\n            const groupToMerge = treeB as ColGroupDef;\n\n            if (groupToMerge.children && groupToMerge.groupId) {\n                const added = this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);\n                if (added) { return mergeResult; }\n            }\n\n            groupToMerge.children.forEach(child => mergeTrees(mergeResult, child));\n\n            return mergeResult;\n        };\n\n        // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf\n        // path groups with the same root group id are contiguous.\n        const mergeColDefs: AbstractColDef[] = [];\n        for (let i = 1; i <= leafPathTrees.length; i++) {\n            const first = leafPathTrees[i - 1];\n            const second = leafPathTrees[i];\n\n            if (matchingRootGroupIds(first, second)) {\n                leafPathTrees[i] = mergeTrees(first, second);\n            } else {\n                mergeColDefs.push(first);\n            }\n        }\n\n        return mergeColDefs;\n    }\n\n    private addChildrenToGroup(tree: AbstractColDef, groupId: string, colDef: AbstractColDef): boolean {\n        const subGroupIsSplit = (currentSubGroup: ColGroupDef, currentSubGroupToAdd: ColGroupDef) => {\n            const existingChildIds = currentSubGroup.children.map(this.getId);\n            const childGroupAlreadyExists = _.includes(existingChildIds, this.getId(currentSubGroupToAdd));\n            const lastChild = _.last(currentSubGroup.children);\n            const lastChildIsDifferent = lastChild && this.getId(lastChild) !== this.getId(currentSubGroupToAdd);\n            return childGroupAlreadyExists && lastChildIsDifferent;\n        };\n\n        if (!this.isColGroupDef(tree)) { return true; }\n\n        const currentGroup = tree as ColGroupDef;\n        const groupToAdd = colDef as ColGroupDef;\n\n        if (subGroupIsSplit(currentGroup, groupToAdd)) {\n            currentGroup.children.push(groupToAdd);\n            return true;\n        }\n\n        if (currentGroup.groupId === groupId) {\n            // add children that don't already exist to group\n            const existingChildIds = currentGroup.children.map(this.getId);\n            const colDefAlreadyPresent = _.includes(existingChildIds, this.getId(groupToAdd));\n            if (!colDefAlreadyPresent) {\n                currentGroup.children.push(groupToAdd);\n                return true;\n            }\n        }\n\n        // recurse until correct group is found to add children\n        currentGroup.children.forEach(subGroup => this.addChildrenToGroup(subGroup, groupId, colDef));\n        return false;\n    }\n\n    private isColGroupDef = (colDef: AbstractColDef) => colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n\n    private getId = (colDef: AbstractColDef): string | undefined => {\n        return this.isColGroupDef(colDef) ? (colDef as ColGroupDef).groupId : (colDef as ColDef).colId;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Bean, BeanStub, ISideBar, ISideBarService } from \"@ag-grid-community/core\";\n\n@Bean('sideBarService')\nexport class SideBarService extends BeanStub implements ISideBarService {\n    private sideBarComp: ISideBar;\n\n    public registerSideBarComp(sideBarComp: ISideBar): void {\n        this.sideBarComp = sideBarComp;\n    }\n\n    public getSideBarComp(): ISideBar {\n        return this.sideBarComp;\n    }\n}\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { ExcelCreator } from \"./excelExport/excelCreator\";\nimport { CsvCreator, GridSerializer } from \"@ag-grid-community/csv-export\";\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\";\nimport { VERSION } from \"./version\";\n\nexport const ExcelExportModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ExcelExportModule,\n    beans: [\n        // beans in this module\n        ExcelCreator,\n\n        // these beans are part of CSV Export module\n        GridSerializer, CsvCreator\n    ],\n    dependantModules: [\n        CsvExportModule,\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Bean,\n    Column,\n    ColumnModel,\n    ExcelExportParams,\n    ExcelFactoryMode,\n    ExcelStyle,\n    GridOptionsService,\n    IExcelCreator,\n    PostConstruct,\n    StylingService,\n    ValueService,\n    ExcelExportMultipleSheetParams,\n    ExcelRow,\n    CssClassApplier,\n    ColumnGroup,\n    ValueFormatterService,\n    ValueParserService,\n} from '@ag-grid-community/core';\nimport { ExcelXlsxFactory } from './excelXlsxFactory';\nimport { BaseCreator, Downloader, GridSerializer, RowType, ZipContainer } from \"@ag-grid-community/csv-export\";\nimport { ExcelGridSerializingParams, ExcelSerializingSession, StyleLinkerInterface } from './excelSerializingSession';\n\nconst createExcelXMLCoreFolderStructure = (): void => {\n    ZipContainer.addFolders([\n        '_rels/',\n        'docProps/',\n        'xl/',\n        'xl/theme/',\n        'xl/_rels/',\n        'xl/worksheets/'\n    ]);\n\n    if (!ExcelXlsxFactory.images.size) { return; }\n\n    ZipContainer.addFolders([\n        'xl/worksheets/_rels',\n        'xl/drawings/',\n        'xl/drawings/_rels',\n        'xl/media/',\n\n    ]);\n\n    let imgCounter = 0;\n    ExcelXlsxFactory.images.forEach(value => {\n        const firstImage = value[0].image[0];\n        const ext = firstImage.imageType;\n        ZipContainer.addFile(`xl/media/image${++imgCounter}.${ext}`, firstImage.base64, true);\n    });\n}\n\nconst createExcelXmlWorksheets = (data: string[]): void => {\n    let imageRelationCounter = 0;\n    let tableRelationCounter = 0;\n\n    for (let i = 0; i < data.length; i++) {\n        const value = data[i];\n        ZipContainer.addFile(`xl/worksheets/sheet${i + 1}.xml`, value, false);\n\n        const hasImages = ExcelXlsxFactory.images.size > 0 && ExcelXlsxFactory.worksheetImages.has(i);\n        const hasTables = ExcelXlsxFactory.worksheetDataTables.size > 0 && ExcelXlsxFactory.worksheetDataTables.has(i);\n\n        if (!hasImages && !hasTables) { continue; }\n\n        let tableIndex: number | undefined;\n        let drawingIndex: number | undefined;\n\n        if (hasImages) {\n            createExcelXmlDrawings(i, imageRelationCounter);\n            drawingIndex = imageRelationCounter;\n            imageRelationCounter++;\n        }\n\n        if (hasTables) {\n            tableIndex = tableRelationCounter;\n            tableRelationCounter++;\n        }\n\n        const worksheetRelFile = `xl/worksheets/_rels/sheet${i + 1}.xml.rels`;\n        ZipContainer.addFile(\n            worksheetRelFile,\n            ExcelXlsxFactory.createRelationships({ tableIndex, drawingIndex }),\n        );\n    }\n\n}\n\nconst createExcelXmlDrawings = (sheetIndex: number, drawingIndex: number): void => {\n    const drawingFolder = 'xl/drawings';\n    const drawingFileName = `${drawingFolder}/drawing${drawingIndex + 1}.xml`;\n    const relFileName = `${drawingFolder}/_rels/drawing${drawingIndex + 1}.xml.rels`;\n\n    ZipContainer.addFile(relFileName, ExcelXlsxFactory.createDrawingRel(sheetIndex));\n    ZipContainer.addFile(drawingFileName, ExcelXlsxFactory.createDrawing(sheetIndex));\n};\n\nconst createExcelXmlTables = (): void => {\n    const tablesDataByWorksheet = ExcelXlsxFactory.worksheetDataTables;\n    const worksheetKeys = Array.from(tablesDataByWorksheet.keys());\n\n    for (let i = 0; i < worksheetKeys.length; i++) {\n        const sheetIndex = worksheetKeys[i];\n        const dataTable = tablesDataByWorksheet.get(sheetIndex);\n\n        if (!dataTable) {\n            continue;\n        }\n\n        ZipContainer.addFile(\n            `xl/tables/${dataTable.name}.xml`,\n            ExcelXlsxFactory.createTable(dataTable, i),\n        );\n    }\n}\n\nconst createExcelXmlCoreSheets = (fontSize: number, author: string, sheetLen: number): void => {\n    ZipContainer.addFile('xl/workbook.xml', ExcelXlsxFactory.createWorkbook());\n    ZipContainer.addFile('xl/styles.xml', ExcelXlsxFactory.createStylesheet(fontSize));\n    ZipContainer.addFile('xl/sharedStrings.xml', ExcelXlsxFactory.createSharedStrings());\n    ZipContainer.addFile('xl/theme/theme1.xml', ExcelXlsxFactory.createTheme());\n    ZipContainer.addFile('xl/_rels/workbook.xml.rels', ExcelXlsxFactory.createWorkbookRels(sheetLen));\n    ZipContainer.addFile('docProps/core.xml', ExcelXlsxFactory.createCore(author));\n    ZipContainer.addFile('[Content_Types].xml', ExcelXlsxFactory.createContentTypes(sheetLen));\n    ZipContainer.addFile('_rels/.rels', ExcelXlsxFactory.createRels());\n}\n\nconst createExcelFileForExcel = (data: string[], options: {\n    columns?: string[],\n    rowCount?: number,\n    fontSize?: number\n    author?: string,\n} = {}): boolean  => {\n    if (!data || data.length === 0) {\n        console.warn(\"AG Grid: Invalid params supplied to createExcelFileForExcel() - `ExcelExportParams.data` is empty.\");\n        ExcelXlsxFactory.resetFactory();\n        return false;\n    }\n\n    const {\n        fontSize = 11,\n        author = 'AG Grid',\n    } = options;\n\n    createExcelXMLCoreFolderStructure();\n    createExcelXmlTables();\n    createExcelXmlWorksheets(data);\n    createExcelXmlCoreSheets(fontSize, author, data.length);\n\n    ExcelXlsxFactory.resetFactory();\n    return true;\n}\n\nconst getMultipleSheetsAsExcelCompressed = (params: ExcelExportMultipleSheetParams): Promise<Blob | undefined> => {\n    const { data, fontSize, author } = params;\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n    if (!createExcelFileForExcel(data, {\n        author,\n        fontSize,\n    })) { return Promise.resolve(undefined); }\n\n    return ZipContainer.getZipFile(mimeType);\n};\n\nexport const getMultipleSheetsAsExcel = (params: ExcelExportMultipleSheetParams): Blob | undefined => {\n    const { data, fontSize, author } = params;\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n    if (!createExcelFileForExcel(data, {\n        author,\n        fontSize,\n    })) { return; }\n\n    return ZipContainer.getUncompressedZipFile(mimeType);\n};\n\nexport const exportMultipleSheetsAsExcel = (params: ExcelExportMultipleSheetParams) => {\n    const { fileName = 'export.xlsx' } = params;\n\n    getMultipleSheetsAsExcelCompressed(params).then(contents => {\n        if (contents) {\n            const downloadFileName = typeof fileName === 'function'\n                ? fileName()\n                : fileName;\n\n            Downloader.download(downloadFileName, contents);\n        }\n    });\n};\n\n@Bean('excelCreator')\nexport class ExcelCreator extends BaseCreator<ExcelRow[], ExcelSerializingSession, ExcelExportParams> implements IExcelCreator {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('stylingService') private stylingService: StylingService;\n\n    @Autowired('gridSerializer') private gridSerializer: GridSerializer;\n    @Autowired('gridOptionsService') gridOptionsService: GridOptionsService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n\n    @PostConstruct\n    public postConstruct(): void {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gridOptionsService: this.gridOptionsService\n        });\n    }\n\n    protected getMergedParams(params?: ExcelExportParams): ExcelExportParams {\n        const baseParams = this.gridOptionsService.get('defaultExcelExportParams');\n        return Object.assign({}, baseParams, params);\n    }\n\n    protected export(userParams?: ExcelExportParams): void {\n        if (this.isExportSuppressed()) {\n            console.warn(`AG Grid: Export cancelled. Export is not allowed as per your configuration.`);\n            return;\n        }\n\n        const mergedParams = this.getMergedParams(userParams);\n        const data = this.getData(mergedParams);\n\n        const exportParams: ExcelExportMultipleSheetParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType\n        };\n\n        this.packageCompressedFile(exportParams).then(packageFile => {\n            if (packageFile) {\n                const { fileName } = mergedParams;\n                const providedFileName = typeof fileName === 'function'\n                    ? fileName(this.gridOptionsService.getGridCommonParams())\n                    : fileName;\n\n                Downloader.download(this.getFileName(providedFileName), packageFile);\n            }\n        });\n    }\n\n    public exportDataAsExcel(params?: ExcelExportParams): void {\n        this.export(params);\n    }\n\n    public getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined {\n        const mergedParams = this.getMergedParams(params);\n        const data = this.getData(mergedParams);\n\n        const exportParams: ExcelExportMultipleSheetParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType\n        };\n\n        return this.packageFile(exportParams);\n    }\n\n    public setFactoryMode(factoryMode: ExcelFactoryMode): void {\n        ExcelXlsxFactory.factoryMode = factoryMode;\n    }\n\n    public getFactoryMode(): ExcelFactoryMode {\n        return ExcelXlsxFactory.factoryMode;\n    }\n\n    public getSheetDataForExcel(params: ExcelExportParams): string {\n        const mergedParams = this.getMergedParams(params);\n        return this.getData(mergedParams);\n    }\n\n    public getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        return getMultipleSheetsAsExcel(params);\n    }\n\n    public exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void {\n        exportMultipleSheetsAsExcel(params);\n    }\n\n    public getDefaultFileExtension(): 'xlsx' {\n        return 'xlsx';\n    }\n\n    public createSerializingSession(params: ExcelExportParams): ExcelSerializingSession {\n        const { columnModel, valueService, gridOptionsService, valueFormatterService, valueParserService } = this;\n\n        let sheetName: string;\n        if (params.sheetName != null) {\n            const {sheetName: sheetNameParam } = params;\n            const sheetNameValue = typeof sheetNameParam === 'function'\n                ? sheetNameParam(this.gridOptionsService.getGridCommonParams())\n                : sheetNameParam;\n\n            sheetName = String(sheetNameValue).substring(0, 31);\n        } else {\n            sheetName = 'ag-grid';\n        }\n\n        const config: ExcelGridSerializingParams = {\n            ...params,\n            sheetName,\n            columnModel,\n            valueService,\n            gridOptionsService,\n            valueFormatterService,\n            valueParserService,\n            suppressRowOutline: params.suppressRowOutline || params.skipRowGroups,\n            headerRowHeight: params.headerRowHeight || params.rowHeight,\n            baseExcelStyles: this.gridOptionsService.get('excelStyles') || [],\n            styleLinker: this.styleLinker.bind(this)\n        };\n\n        return new ExcelSerializingSession(config);\n    }\n\n    private styleLinker(params: StyleLinkerInterface): string[] {\n        const  { rowType, rowIndex, value, column, columnGroup, node } = params;\n        const isHeader = rowType === RowType.HEADER;\n        const isGroupHeader = rowType === RowType.HEADER_GROUPING;\n        const col = (isHeader ? column : columnGroup) as Column | ColumnGroup;\n        let headerClasses: string[] = [];\n\n        if (isHeader || isGroupHeader) {\n            headerClasses.push('header');\n            if (isGroupHeader) {\n                headerClasses.push('headerGroup');\n            }\n            \n            if (col) {\n                headerClasses = headerClasses.concat(CssClassApplier.getHeaderClassesFromColDef(\n                    col.getDefinition(),\n                    this.gridOptionsService,\n                    column || null,\n                    columnGroup || null\n                ));\n            }\n\n            return headerClasses;\n        }\n\n        const styles = this.gridOptionsService.get('excelStyles');\n\n        const applicableStyles: string [] = [\"cell\"];\n\n        if (!styles || !styles.length) { return applicableStyles; }\n\n        const styleIds: string[] = styles.map((it: ExcelStyle) => {\n            return it.id;\n        });\n\n        this.stylingService.processAllCellClasses(\n            column!.getDefinition(),\n            this.gridOptionsService.addGridCommonParams({\n                value,\n                data: node!.data,\n                node: node!,\n                colDef: column!.getDefinition(),\n                column: column!,\n                rowIndex: rowIndex\n            }),\n            (className: string) => {\n                if (styleIds.indexOf(className) > -1) {\n                    applicableStyles.push(className);\n                }\n            }\n        );\n\n        return applicableStyles.sort((left: string, right: string): number => {\n            return (styleIds.indexOf(left) < styleIds.indexOf(right)) ? -1 : 1;\n        });\n    }\n\n    public isExportSuppressed():boolean {\n        return this.gridOptionsService.get('suppressExcelExport');\n    }\n\n    private packageCompressedFile(params: ExcelExportMultipleSheetParams): Promise<Blob | undefined> {\n        return getMultipleSheetsAsExcelCompressed(params);\n    }\n\n    private packageFile(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        return getMultipleSheetsAsExcel(params);\n    }\n}\n", "import {\n    Column,\n    ColGroupDef,\n    ColDef,\n    ColumnModel,\n    ExcelFactoryMode,\n    ExcelImage,\n    ExcelRelationship,\n    ExcelStyle,\n    ExcelWorksheet,\n    ExcelTableConfig,\n    RowHeightCallbackParams,\n    _\n} from '@ag-grid-community/core';\n\nimport coreFactory from './files/ooxml/core';\nimport contentTypesFactory from './files/ooxml/contentTypes';\nimport drawingFactory from './files/ooxml/drawing';\nimport tableFactory from './files/ooxml/table';\nimport officeThemeFactory from './files/ooxml/themes/office';\nimport sharedStringsFactory from './files/ooxml/sharedStrings';\nimport stylesheetFactory, { registerStyles } from './files/ooxml/styles/stylesheet';\nimport workbookFactory from './files/ooxml/workbook';\nimport worksheetFactory from './files/ooxml/worksheet';\nimport relationshipsFactory from './files/ooxml/relationships';\n\nimport { setExcelImageTotalHeight, setExcelImageTotalWidth, createXmlPart } from './assets/excelUtils';\nimport { ImageIdMap, ExcelCalculatedImage, ExcelDataTable } from './assets/excelInterfaces';\nimport { ExcelGridSerializingParams } from './excelSerializingSession';\n\n/**\n * See links for more info on the Office Open XML format being used:\n * https://www.ecma-international.org/wp-content/uploads/Office-Open-XML-White-Paper.pdf\n * https://ecma-international.org/publications-and-standards/standards/ecma-376/\n */\nexport class ExcelXlsxFactory {\n\n    private static sharedStrings: Map<string, number> = new Map();\n    private static sheetNames: string[] = [];\n\n    /** Maps images to sheet */\n    public static images: Map<string, { sheetId: number, image: ExcelCalculatedImage[] }[]> = new Map();\n    /** Maps sheets to images */\n    public static worksheetImages: Map<number, ExcelCalculatedImage[]> = new Map();\n    /** Maps all workbook images to a global Id */\n    public static workbookImageIds: ImageIdMap = new Map();\n    /** Maps all sheet images to unique Ids */\n    public static worksheetImageIds: Map<number, ImageIdMap> = new Map();\n    /** Maps all sheet tables to unique Ids */\n    public static worksheetDataTables: Map<number, ExcelDataTable> = new Map();\n    /** Default name to be used for tables when no name is provided */\n    public static defaultTableDisplayName = 'AG-GRID-TABLE';\n\n    public static factoryMode: ExcelFactoryMode = ExcelFactoryMode.SINGLE_SHEET;\n\n    public static createExcel(\n        styles: ExcelStyle[],\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ): string {\n        this.addSheetName(worksheet);\n        registerStyles(styles, this.sheetNames.length);\n\n        let newConfig = Object.assign({}, config);\n\n        // Table export is not compatible with pivot mode nor master/detail features\n        if (config.exportAsExcelTable) {\n            if (config.columnModel.isPivotActive()) {\n                this.showExcelTableNonCompatibleFeaturesWarning('pivot mode');\n                newConfig.exportAsExcelTable = false;\n            }\n\n            if (config.gridOptionsService.get('masterDetail')) {\n                this.showExcelTableNonCompatibleFeaturesWarning('master/detail');\n                newConfig.exportAsExcelTable = false;\n            }\n        }\n\n        this.processTableConfig(worksheet, newConfig);\n        return this.createWorksheet(worksheet, newConfig);\n    }\n\n    private static showExcelTableNonCompatibleFeaturesWarning(featureName: string) {\n        console.warn(\n            `AG Grid: Excel table export does not work with ${featureName}. ` +\n            `The exported Excel file will not contain any Excel tables.\\n` +\n            `Please turn off ${featureName} to enable Excel table exports.`\n        );\n    }\n\n    public static getTableNameFromIndex(idx: number) {\n        return `table${idx + 1}`;\n    }\n\n    public static getTableRelIdFromIndex(idx: number) {\n        return `tableRelId${idx + 1}`;\n    }\n\n    public static getSanitizedTableName(name: string) {\n        return name.replace(/^[^a-zA-Z_]+/, '_')\n                   .replace(/\\s/g, '_')\n                   .replace(/[^a-zA-Z0-9_]/g, '_')\n    }\n\n    public static addTableToSheet(sheetIndex: number, table: ExcelDataTable): void {\n        if (this.worksheetDataTables.has(sheetIndex)) {\n            console.warn('Unable to add data table to Excel sheet: A table already exists.');\n            return;\n        }\n\n        this.worksheetDataTables.set(sheetIndex, table);\n    }\n\n    public static buildImageMap(image: ExcelImage, rowIndex: number, col: Column, columnsToExport: Column[], rowHeight?: number | ((params: RowHeightCallbackParams) => number)): void {\n        const currentSheetIndex = this.sheetNames.length;\n        const registeredImage = this.images.get(image.id);\n\n        if (!image.position || !image.position.row || !image.position.column) {\n            if (!image.position) { image.position = {}; }\n\n            image.position = Object.assign({}, image.position, {\n                row: rowIndex,\n                column: columnsToExport.indexOf(col) + 1\n            });\n        }\n\n        const calculatedImage = image as ExcelCalculatedImage;\n\n        setExcelImageTotalWidth(calculatedImage, columnsToExport);\n        setExcelImageTotalHeight(calculatedImage, rowHeight);\n\n        if (registeredImage) {\n            const currentSheetImages = registeredImage.find(currentImage => currentImage.sheetId === currentSheetIndex);\n            if (currentSheetImages) {\n                currentSheetImages.image.push(calculatedImage);\n            } else {\n                registeredImage.push({\n                    sheetId: currentSheetIndex,\n                    image: [calculatedImage]\n                });\n            }\n        } else {\n            this.images.set(calculatedImage.id, [{ sheetId: currentSheetIndex, image: [calculatedImage] }]);\n            this.workbookImageIds.set(calculatedImage.id, { type: calculatedImage.imageType, index: this.workbookImageIds.size });\n        }\n\n        this.buildSheetImageMap(currentSheetIndex, calculatedImage);\n    }\n\n    private static processTableConfig(\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ) {\n        if (!config.exportAsExcelTable) {\n            return;\n        }\n\n        const tableConfig: Partial<ExcelTableConfig> = typeof config.exportAsExcelTable === 'boolean'\n            ? {} : config.exportAsExcelTable;\n\n        const {\n            name: nameFromConfig,\n            showColumnStripes,\n            showRowStripes,\n            showFilterButton,\n            highlightFirstColumn,\n            highlightLastColumn,\n        } = tableConfig;\n\n        const tableName = this.getSanitizedTableName(\n            nameFromConfig || ExcelXlsxFactory.defaultTableDisplayName\n        );\n\n        const sheetIndex = this.sheetNames.length - 1;\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const headerRowCount = config.columnModel.getHeaderRowCount();\n        const tableHeaderRowIndex: number = headerRowCount - 1; // Assuming that header starts at row 0\n        const tableRowCount = rows.length;\n        const tableColCount = columns.length;\n\n        const tableColumns: string[] = [];\n        const showFilterButtons: boolean[] = [];\n\n        for (let i = 0; i < tableColCount; i++) {\n            const col = columns[i];\n            tableColumns.push(col.displayName || '');\n            showFilterButtons.push(\n                (showFilterButton === 'match' || showFilterButton === undefined)\n                    ? (col.filterAllowed ?? false) // We fall back to the column's filterAllowed property on match\n                    : showFilterButton\n            );\n        }\n\n        if (!tableColumns || !tableColumns.length || !tableRowCount || !tableName) {\n            console.warn('Unable to add data table to Excel sheet: Missing required parameters.');\n            return;\n        }\n\n        this.addTableToSheet(sheetIndex, {\n            name: this.getTableNameFromIndex(sheetIndex),\n            displayName: tableName,\n            columns: tableColumns,\n            showFilterButtons: showFilterButtons,\n            headerRowIndex: tableHeaderRowIndex,\n            rowCount: tableRowCount - headerRowCount,\n            showRowStripes: showRowStripes ?? true,\n            showColumnStripes: showColumnStripes ?? false,\n            highlightFirstColumn: highlightFirstColumn ?? false,\n            highlightLastColumn: highlightLastColumn ?? false,\n        });\n    }\n\n    private static buildSheetImageMap(sheetIndex: number, image: ExcelCalculatedImage): void {\n        let worksheetImageIdMap = this.worksheetImageIds.get(sheetIndex);\n\n        if (!worksheetImageIdMap) {\n            worksheetImageIdMap = new Map();\n            this.worksheetImageIds.set(sheetIndex, worksheetImageIdMap);\n        }\n\n        const sheetImages = this.worksheetImages.get(sheetIndex);\n\n        if (!sheetImages) {\n            this.worksheetImages.set(sheetIndex, [image]);\n            worksheetImageIdMap.set(image.id, { index: 0, type: image.imageType });\n        } else {\n            sheetImages.push(image);\n            if (!worksheetImageIdMap.get(image.id)) {\n                worksheetImageIdMap.set(image.id, { index: worksheetImageIdMap.size, type: image.imageType });\n            }\n        }\n    }\n\n    private static addSheetName(worksheet: ExcelWorksheet): void {\n        const name = _.escapeString(worksheet.name) || '';\n        let append = '';\n\n        while (this.sheetNames.indexOf(`${name}${append}`) !== -1) {\n            if (append === '') {\n                append = '_1';\n            } else {\n                const curr = parseInt(append.slice(1), 10);\n                append = `_${curr + 1}`;\n            }\n        }\n\n        worksheet.name = `${name}${append}`;\n        this.sheetNames.push(worksheet.name);\n    }\n\n    public static getStringPosition(str: string): number {\n        if (this.sharedStrings.has(str)) {\n            return this.sharedStrings.get(str)!;\n        }\n\n        this.sharedStrings.set(str, this.sharedStrings.size);\n        return this.sharedStrings.size - 1;\n    }\n\n    public static resetFactory(): void {\n        this.sharedStrings = new Map();\n\n        this.images = new Map();\n        this.worksheetImages = new Map();\n\n        this.workbookImageIds = new Map();\n        this.worksheetImageIds = new Map();\n        this.worksheetDataTables = new Map();\n\n        this.sheetNames = [];\n        this.factoryMode = ExcelFactoryMode.SINGLE_SHEET;\n    }\n\n    public static createWorkbook(): string {\n        return createXmlPart(workbookFactory.getTemplate(this.sheetNames));\n    }\n\n    public static createStylesheet(defaultFontSize: number): string {\n        return createXmlPart(stylesheetFactory.getTemplate(defaultFontSize));\n    }\n\n    public static createSharedStrings(): string {\n        return createXmlPart(sharedStringsFactory.getTemplate(this.sharedStrings));\n    }\n\n    public static createCore(author: string): string {\n        return createXmlPart(coreFactory.getTemplate(author));\n    }\n\n    public static createContentTypes(sheetLen: number): string {\n        return createXmlPart(contentTypesFactory.getTemplate(sheetLen));\n    }\n\n    public static createRels(): string {\n        const rs = relationshipsFactory.getTemplate([{\n            Id: 'rId1',\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',\n            Target: 'xl/workbook.xml'\n        }, {\n            Id: 'rId2',\n            Type: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',\n            Target: 'docProps/core.xml'\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createTheme(): string {\n        return createXmlPart(officeThemeFactory.getTemplate());\n    }\n\n    public static createTable(dataTable: ExcelDataTable, index?: number): string {\n        return createXmlPart(tableFactory.getTemplate(dataTable, index));\n    }\n\n    public static createWorkbookRels(sheetLen: number): string {\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            Id: `rId${i + 1}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n            Target: `worksheets/sheet${i + 1}.xml`\n        }));\n\n        const rs = relationshipsFactory.getTemplate([\n            ...worksheets,\n        {\n            Id: `rId${sheetLen + 1}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n            Target: 'theme/theme1.xml'\n        }, {\n            Id: `rId${sheetLen + 2}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n            Target: 'styles.xml'\n        }, {\n            Id: `rId${sheetLen + 3}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n            Target: 'sharedStrings.xml'\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createDrawing(sheetIndex: number) {\n        return createXmlPart(drawingFactory.getTemplate({ sheetIndex }));\n    }\n\n    public static createDrawingRel(sheetIndex: number) {\n        const worksheetImageIds = this.worksheetImageIds.get(sheetIndex);\n        const XMLArr: ExcelRelationship[] = [];\n\n        worksheetImageIds!.forEach((value, key) => {\n            XMLArr.push({\n                Id: `rId${value.index + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n                Target: `../media/image${this.workbookImageIds.get(key)!.index + 1}.${value.type}`\n            });\n        });\n\n        return createXmlPart(relationshipsFactory.getTemplate(XMLArr));\n    }\n\n    public static createWorksheetDrawingRel(currentRelationIndex: number) {\n        const rs = relationshipsFactory.getTemplate([{\n            Id: 'rId1',\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n            Target: `../drawings/drawing${currentRelationIndex + 1}.xml`\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createWorksheetTableRel(currentRelationIndex: number) {\n        const tableId = this.getTableNameFromIndex(currentRelationIndex);\n        const tableRelId = this.getTableRelIdFromIndex(currentRelationIndex);\n        const rs = relationshipsFactory.getTemplate([{\n            Id: tableRelId,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',\n            Target: `../tables/${tableId}.xml`\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createRelationships({\n        drawingIndex,\n        tableIndex,\n    } : {\n        drawingIndex?: number,\n        tableIndex?: number,\n    } = {}) {\n        if (drawingIndex === undefined && tableIndex === undefined) {\n            return '';\n        }\n\n        const config = [];\n        if (typeof drawingIndex === 'number') {\n            config.push({\n                Id: 'rId1',\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n                Target: `../drawings/drawing${drawingIndex + 1}.xml`\n            });\n        }\n\n        if (typeof tableIndex === 'number') {\n            const tableId = this.getTableNameFromIndex(tableIndex);\n            const tableRelId = this.getTableRelIdFromIndex(tableIndex);\n            config.push({\n                Id: tableRelId,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',\n                Target: `../tables/${tableId}.xml`\n            });\n        }\n\n        const rs = relationshipsFactory.getTemplate(config);\n        return createXmlPart(rs);\n    }\n\n    private static createWorksheet(\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ): string {\n        return createXmlPart(worksheetFactory.getTemplate({\n            worksheet,\n            currentSheet: this.sheetNames.length - 1,\n            config\n        }));\n    }\n}\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst coreFactory: ExcelOOXMLTemplate = {\n    getTemplate(author: string) {\n        const dt = new Date();\n        const jsonDate = dt.toJSON();\n\n        return {\n            name: 'cp:coreProperties',\n            properties: {\n                prefixedAttributes: [{\n                    prefix: \"xmlns:\",\n                    map: {\n                        cp: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n                        dc: 'http://purl.org/dc/elements/1.1/',\n                        dcterms: 'http://purl.org/dc/terms/',\n                        dcmitype: 'http://purl.org/dc/dcmitype/',\n                        xsi: 'http://www.w3.org/2001/XMLSchema-instance'\n                    }\n                }]\n            },\n            children: [{\n                name: 'dc:creator',\n                textNode: author\n            }, {\n                name: 'dc:title',\n                textNode: 'Workbook'\n            }, {\n                name: 'dcterms:created',\n                properties: {\n                    rawMap: {\n                        'xsi:type': 'dcterms:W3CDTF'\n                    }\n                },\n                textNode: jsonDate\n            }, {\n                name: 'dcterms:modified',\n                properties: {\n                    rawMap: {\n                        'xsi:type': 'dcterms:W3CDTF'\n                    }\n                },\n                textNode: jsonDate\n            }]\n        };\n    }\n};\n\nexport default coreFactory;\n", "import { ExcelContentType, ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst contentTypeFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelContentType) {\n        const {name, ContentType, Extension, PartName} = config;\n\n        return {\n            name,\n            properties: {\n                rawMap: {\n                    Extension,\n                    PartName,\n                    ContentType\n                }\n            }\n        };\n    }\n};\n\nexport default contentTypeFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport contentTypeFactory from './contentType';\n\nconst contentTypesFactory: ExcelOOXMLTemplate = {\n    getTemplate(sheetLen: number) {\n\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n            PartName: `/xl/worksheets/sheet${i + 1}.xml`\n        }));\n\n        const sheetsWithImages = ExcelXlsxFactory.worksheetImages.size;\n        const sheetsWithTables = ExcelXlsxFactory.worksheetDataTables.size;\n        const imageTypesObject: { [ key: string ]: boolean} = {};\n\n        ExcelXlsxFactory.workbookImageIds.forEach((v) => {\n            imageTypesObject[v.type] = true;\n        });\n\n        const imageDocs = new Array(sheetsWithImages).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\n            PartName: `/xl/drawings/drawing${i + 1}.xml`\n        }));\n\n        const tableDocs = new Array(sheetsWithTables).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',\n            PartName: `/xl/tables/${ExcelXlsxFactory.getTableNameFromIndex(i)}.xml`\n        }));\n\n        const imageTypes = Object.keys(imageTypesObject).map(ext => ({\n            name: 'Default',\n            ContentType: `image/${ext}`,\n            Extension: ext\n        }));\n\n        const children = [\n            ...imageTypes,\n            {\n                name: 'Default',\n                Extension: 'rels',\n                ContentType: 'application/vnd.openxmlformats-package.relationships+xml'\n            }, {\n                name: 'Default',\n                ContentType: 'application/xml',\n                Extension: 'xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n                PartName: \"/xl/workbook.xml\"\n            },\n            ...worksheets,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',\n                PartName: '/xl/theme/theme1.xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n                PartName: '/xl/styles.xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n                PartName: '/xl/sharedStrings.xml'\n            },\n            ...imageDocs,\n            ...tableDocs,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',\n                PartName: '/docProps/core.xml'\n            }\n        ].map(contentType => contentTypeFactory.getTemplate(contentType));\n\n        return {\n            name: \"Types\",\n            properties: {\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/content-types\"\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default contentTypesFactory;\n", "import { Column, RowHeightCallbackParams, XmlElement } from \"@ag-grid-community/core\";\nimport { XmlFactory } from \"@ag-grid-community/csv-export\";\nimport { INCH_TO_EMU } from \"./excelConstants\";\nimport { ExcelCalculatedImage } from \"./excelInterfaces\";\n\nexport const pixelsToPoint = (pixels: number): number => {\n    return Math.round(pixels * 72 / 96);\n};\n\nexport const pointsToPixel = (points: number): number => {\n    return Math.round(points * 96 / 72);\n};\n\nexport const pixelsToEMU = (value: number): number => {\n    return Math.ceil(value * INCH_TO_EMU);\n};\n\nexport const getFontFamilyId = (name?: string): number | undefined => {\n    if (name === undefined) { return; }\n\n    const families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];\n    const pos = families.indexOf(name || 'Automatic');\n\n    return Math.max(pos, 0);\n};\n\nexport const getHeightFromProperty = (rowIndex: number, height?: number | ((params: RowHeightCallbackParams) => number)): number | undefined => {\n    if (!height) { return; }\n\n    let finalHeight: number;\n\n    if (typeof height === 'number') {\n        finalHeight = height;\n    } else {\n        const heightFunc = height as Function;\n        finalHeight = heightFunc({ rowIndex });\n    }\n\n    return pixelsToPoint(finalHeight);\n};\n\nexport const setExcelImageTotalWidth = (image: ExcelCalculatedImage, columnsToExport: Column[]): void => {\n    const { colSpan, column } = image.position!;\n\n    if (image.width) {\n        if (colSpan) {\n            const columnsInSpan = columnsToExport.slice(column! - 1, column! + colSpan - 1);\n            let totalWidth = 0;\n            for (let i = 0; i < columnsInSpan.length; i++) {\n                const colWidth = columnsInSpan[i].getActualWidth();\n                if (image.width < totalWidth + colWidth) {\n                    image.position!.colSpan = i + 1;\n                    image.totalWidth = image.width;\n                    image.width = image.totalWidth - totalWidth;\n                    break;\n                }\n                totalWidth += colWidth;\n            }\n        } else {\n            image.totalWidth = image.width;\n        }\n    }\n};\n\nexport const setExcelImageTotalHeight = (image: ExcelCalculatedImage, rowHeight?: number | ((params: RowHeightCallbackParams) => number)): void => {\n    const { rowSpan, row } = image.position!;\n\n    if (image.height) {\n        if (rowSpan) {\n            let totalHeight = 0;\n            let counter = 0;\n            for (let i = row!; i < row! + rowSpan; i++) {\n                const nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);\n                if (image.height < totalHeight + nextRowHeight) {\n                    image.position!.rowSpan = counter + 1;\n                    image.totalHeight = image.height;\n                    image.height = image.totalHeight - totalHeight;\n                    break;\n                }\n                totalHeight += nextRowHeight;\n                counter++;\n            }\n        } else {\n            image.totalHeight = image.height;\n        }\n    }\n};\n\nexport const createXmlPart = (body: XmlElement): string => {\n    const header = XmlFactory.createHeader({\n        encoding: 'UTF-8',\n        standalone: 'yes'\n    });\n\n    const xmlBody = XmlFactory.createXml(body);\n    return `${header}${xmlBody}`;\n};\n\nexport const getExcelColumnName = (colIdx: number): string => {\n    const startCode = 65;\n    const tableWidth = 26;\n    const fromCharCode = String.fromCharCode;\n\n    const pos = Math.floor(colIdx / tableWidth);\n    const tableIdx = colIdx % tableWidth;\n\n    if (!pos || colIdx === tableWidth) { return fromCharCode(startCode + colIdx - 1); }\n    if (!tableIdx) { return getExcelColumnName(pos - 1) + 'Z'; }\n    if (pos < tableWidth) { return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1); }\n\n    return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};", "export const INCH_TO_EMU = 9525;\n\nexport const numberFormatMap: {[key: string]: number} = {\n    '0': 1,\n    '0.00': 2,\n    '#,##0': 3,\n    '#,##0.00': 4,\n    '0%': 9,\n    '0.00%': 10,\n    '0.00E+00': 11,\n    '# ?/?': 12,\n    '# ??/??': 13,\n    'mm-dd-yy': 14,\n    'd-mmm-yy': 15,\n    'd-mmm': 16,\n    'mmm-yy': 17,\n    'h:mm AM/PM': 18,\n    'h:mm:ss AM/PM': 19,\n    'h:mm': 20,\n    'h:mm:ss': 21,\n    'm/d/yy h:mm': 22,\n    '#,##0 ;(#,##0)': 37,\n    '#,##0 ;[Red](#,##0)': 38,\n    '#,##0.00;(#,##0.00)': 39,\n    '#,##0.00;[Red](#,##0.00)': 40,\n    'mm:ss': 45,\n    '[h]:mm:ss': 46,\n    'mmss.0': 47,\n    '##0.0E+0': 48,\n    '@': 49\n};", "import { ExcelImage, ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport { ExcelCalculatedImage, ImageAnchor, ImageBoxSize, ImageColor } from '../../assets/excelInterfaces';\nimport { pixelsToEMU } from '../../assets/excelUtils';\n\nconst getAnchor = (name: string, imageAnchor: ImageAnchor): XmlElement => ({\n    name: `xdr:${name}`,\n    children: [{\n        name: 'xdr:col',\n        textNode: (imageAnchor.col).toString()\n    }, {\n        name: 'xdr:colOff',\n        textNode: imageAnchor.offsetX.toString()\n    }, {\n        name: 'xdr:row',\n        textNode: imageAnchor.row.toString()\n    }, {\n        name: 'xdr:rowOff',\n        textNode: imageAnchor.offsetY.toString()\n    }]\n});\n\nconst getExt = (image: ExcelImage): XmlElement => {\n    const children: XmlElement[] = [{\n        name: 'a:ext',\n        properties: {\n            rawMap: {\n                uri: '{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}'\n            }\n        },\n        children: [{\n            name: 'a16:creationId',\n            properties: {\n                rawMap: {\n                    'id': '{822E6D20-D7BC-2841-A643-D49A6EF008A2}',\n                    'xmlns:a16': 'http://schemas.microsoft.com/office/drawing/2014/main'\n                }\n            }\n        }]\n    }];\n    const recolor = image.recolor && image.recolor.toLowerCase();\n\n    switch (recolor) {\n        case 'grayscale':\n        case 'sepia':\n        case 'washout':\n            children.push({\n                name: 'a:ext',\n                properties: {\n                    rawMap: {\n                        uri: '{C183D7F6-B498-43B3-948B-1728B52AA6E4}'\n                    }\n                },\n                children: [{\n                    name: 'adec:decorative',\n                    properties: {\n                        rawMap: {\n                            'val': '0',\n                            'xmlns:adec': 'http://schemas.microsoft.com/office/drawing/2017/decorative'\n                        }\n                    }\n                }]\n            });\n    }\n\n    return {\n        name: 'a:extLst',\n        children\n    };\n};\n\nconst getNvPicPr = (image: ExcelImage, index: number) => ({\n    name: 'xdr:nvPicPr',\n    children: [{\n        name: 'xdr:cNvPr',\n        properties: {\n            rawMap: {\n                id: index,\n                name: image.id,\n                descr: image.altText != null ? image.altText : undefined\n            }\n        },\n        children: [getExt(image)]\n    }, {\n        name: 'xdr:cNvPicPr',\n        properties: {\n            rawMap: {\n                preferRelativeResize: '0'\n            }\n        },\n        children: [{\n            name: 'a:picLocks'\n        }]\n    }]\n});\n\nconst getColorDetails = (color: ImageColor): XmlElement[] | undefined => {\n    if (!color.saturation && !color.tint) { return; }\n    const ret: XmlElement[] = [];\n\n    if (color.saturation) {\n        ret.push({\n            name: 'a:satMod',\n            properties: {\n                rawMap: {\n                    val: color.saturation * 1000\n                }\n            }\n        });\n    }\n\n    if (color.tint) {\n        ret.push({\n            name: 'a:tint',\n            properties: {\n                rawMap: {\n                    val: color.tint * 1000\n                }\n            }\n        });\n    }\n\n    return ret;\n};\n\nconst getDuoTone = (primaryColor: ImageColor, secondaryColor: ImageColor): XmlElement => {\n    return ({\n        name: 'a:duotone',\n        children: [{\n            name: 'a:prstClr',\n            properties: {\n                rawMap: {\n                    val: primaryColor.color\n                }\n            },\n            children: getColorDetails(primaryColor)\n        }, {\n            name: 'a:srgbClr',\n            properties: {\n                rawMap: {\n                    val: secondaryColor.color\n                }\n            },\n            children: getColorDetails(secondaryColor)\n        }]\n    });\n};\n\nconst getBlipFill = (image: ExcelImage, index: number) => {\n    let blipChildren: XmlElement[] | undefined;\n\n    if (image.transparency) {\n        const transparency = Math.min(Math.max(image.transparency, 0), 100);\n        blipChildren = [{\n            name: 'a:alphaModFix',\n            properties: {\n                rawMap: {\n                    amt: 100000 - Math.round(transparency * 1000),\n                }\n            }\n        }];\n    }\n\n    if (image.recolor) {\n        if (!blipChildren) { blipChildren = []; }\n        switch (image.recolor.toLocaleLowerCase()) {\n            case 'grayscale':\n                blipChildren.push({ name: 'a:grayscl' });\n                break;\n            case 'sepia':\n                blipChildren.push(getDuoTone({ color: 'black' }, { color: 'D9C3A5', tint: 50, saturation: 180 }));\n                break;\n            case 'washout':\n                blipChildren.push({\n                    name: 'a:lum',\n                    properties: {\n                        rawMap: {\n                            bright: '70000',\n                            contrast: '-70000'\n                        }\n                    }\n                });\n                break;\n            default:\n        }\n    }\n\n    return ({\n        name: 'xdr:blipFill',\n        children: [{\n            name: 'a:blip',\n            properties: {\n                rawMap: {\n                    'cstate': 'print',\n                    'r:embed': `rId${index}`,\n                    'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n                }\n            },\n            children: blipChildren\n        }, {\n            name:'a:stretch',\n            children: [{\n                name: 'a:fillRect'\n            }]\n        }]\n    });\n};\n\nconst getSpPr = (image: ExcelImage, imageBoxSize: ImageBoxSize) => {\n    const xfrm: XmlElement = {\n        name: 'a:xfrm',\n        children: [{\n            name: 'a:off',\n            properties: {\n                rawMap: {\n                    x: 0,\n                    y: 0\n                }\n            }\n        }, {\n            name: 'a:ext',\n            properties: {\n                rawMap: {\n                    cx: imageBoxSize.width,\n                    cy: imageBoxSize.height\n                }\n            }\n        }]\n    };\n\n    if (image.rotation) {\n        const rotation = image.rotation;\n        xfrm.properties = {\n            rawMap: {\n                rot: Math.min(Math.max(rotation, 0), 360) * 60000\n            }\n        };\n    }\n\n    const prstGeom: XmlElement = {\n        name: 'a:prstGeom',\n        properties: {\n            rawMap: {\n                prst: 'rect'\n            }\n        },\n        children: [{ name: 'a:avLst' }]\n    };\n\n    const ret = {\n        name: 'xdr:spPr',\n        children: [xfrm, prstGeom]\n    };\n\n    return ret;\n};\n\nconst getImageBoxSize = (image: ExcelCalculatedImage): ImageBoxSize => {\n    image.fitCell = !!image.fitCell || (!image.width || !image.height);\n\n    const { position = {}, fitCell, width = 0, height = 0, totalHeight, totalWidth } = image;\n    const { offsetX = 0 , offsetY = 0, row = 1, rowSpan = 1, column = 1, colSpan = 1 } = position;\n\n    return {\n        from: {\n            row: row - 1,\n            col: column - 1,\n            offsetX: pixelsToEMU(offsetX),\n            offsetY: pixelsToEMU(offsetY)\n        },\n        to: {\n            row: (row - 1) + (fitCell ? 1 : rowSpan - 1),\n            col: (column - 1) + (fitCell ? 1 : colSpan - 1),\n            offsetX: pixelsToEMU(width + offsetX),\n            offsetY: pixelsToEMU(height + offsetY)\n        },\n        height: pixelsToEMU(totalHeight || height),\n        width: pixelsToEMU(totalWidth || width)\n    };\n};\n\nconst getPicture = (\n    image: ExcelImage,\n    currentIndex: number,\n    worksheetImageIndex: number,\n    imageBoxSize: ImageBoxSize\n): XmlElement => {\n    return {\n        name: 'xdr:pic',\n        children: [\n            getNvPicPr(image, currentIndex + 1),\n            getBlipFill(image, worksheetImageIndex + 1),\n            getSpPr(image, imageBoxSize)\n        ]\n    };\n};\n\nconst drawingFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: {\n        sheetIndex: number\n    }) {\n        const { sheetIndex } = config;\n        const sheetImages = ExcelXlsxFactory.worksheetImages.get(sheetIndex);\n        const sheetImageIds = ExcelXlsxFactory.worksheetImageIds.get(sheetIndex);\n\n        const children = sheetImages!.map((image, idx) => {\n            const boxSize = getImageBoxSize(image);\n            return ({\n                name: 'xdr:twoCellAnchor',\n                properties: {\n                    rawMap: {\n                        editAs: 'absolute'\n                    }\n                },\n                children: [\n                    getAnchor('from', boxSize.from),\n                    getAnchor('to', boxSize.to),\n                    getPicture(image, idx, sheetImageIds!.get(image.id)!.index, boxSize),\n                    { name: 'xdr:clientData'}\n                ]\n            });\n        });\n\n        return {\n            name: 'xdr:wsDr',\n            properties: {\n                rawMap: {\n                    'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                    'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default drawingFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { ExcelDataTable } from '../../assets/excelInterfaces';\n\nconst tableFactory: ExcelOOXMLTemplate = {\n    getTemplate(dataTable: ExcelDataTable, idx: number) {\n        const {\n            name,\n            columns,\n            rowCount,\n            displayName,\n            headerRowIndex,\n            showRowStripes,\n            showColumnStripes,\n            showFilterButtons,\n            highlightFirstColumn,\n            highlightLastColumn\n        } = dataTable || {};\n\n        if (!dataTable || !name || !Array.isArray(columns) || !columns.length || !rowCount) {\n            return { name: \"table\" };\n        }\n\n        const filterColumns = columns.map((col: string, idx: number) => ({\n            name: \"filterColumn\",\n            properties: {\n                rawMap: {\n                    colId: idx.toString(), // For filters, this should start with 0\n                    hiddenButton: showFilterButtons[idx] ? 0 : 1\n                }\n            }\n        }));\n\n        const firstRow = headerRowIndex + 1;\n        const id: string = (idx + 1).toString();\n        const firstCell = `A${firstRow}`;\n        const lastCell = `${String.fromCharCode(64 + columns.length)}${firstRow + rowCount}`;\n        const ref = `${firstCell}:${lastCell}`;\n        const displayNameToUse = idx ? `${displayName}_${idx + 1}` : displayName;\n\n        return {\n            name: \"table\",\n            properties: {\n                rawMap: {\n                    \"xmlns\": \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\",\n                    \"xmlns:mc\": \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n                    \"mc:Ignorable\": \"xr xr3\",\n                    \"xmlns:xr\": \"http://schemas.microsoft.com/office/spreadsheetml/2014/revision\",\n                    \"xmlns:xr3\": \"http://schemas.microsoft.com/office/spreadsheetml/2016/revision3\",\n                    \"name\": name,\n                    \"displayName\": displayNameToUse,\n                    \"ref\": ref,\n                    \"totalsRowShown\": 0,\n                    \"id\": id,\n                }\n            },\n            children: [\n                {\n                    name: \"autoFilter\",\n                    properties: {\n                        rawMap: {\n                            ref,\n                        }\n                    },\n                    children: filterColumns,\n                },\n                {\n                    name: \"tableColumns\",\n                    properties: {\n                        rawMap: {\n                            count: columns.length\n                        }\n                    },\n                    children: columns.map((col: string, idx: number) => ({\n                        name: \"tableColumn\",\n                        properties: {\n                            rawMap: {\n                                id: (idx + 1).toString(),\n                                name: col,\n                                dataCellStyle: \"Normal\"\n                            }\n                        }\n                    }))\n                },\n                {\n                    name: \"tableStyleInfo\",\n                    properties: {\n                        rawMap: {\n                            name: \"TableStyleLight1\",\n                            showFirstColumn: highlightFirstColumn ? 1 : 0,\n                            showLastColumn: highlightLastColumn ? 1 : 0,\n                            showRowStripes: showRowStripes ? 1 : 0,\n                            showColumnStripes: showColumnStripes ? 1 : 0,\n                        }\n                    }\n                }\n            ]\n        };\n    }\n};\n\nexport default tableFactory;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nconst getColorChildren = (props: [string, string, string, string?]): XmlElement => {\n    const [type, innerType, val, lastClr] = props;\n\n    return {\n        name: `a:${type}`,\n        children: [{\n            name: `a:${innerType}`,\n            properties: {\n                rawMap: {\n                    val,\n                    lastClr\n                }\n            }\n        }]\n    };\n};\n\nconst colorScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n\n        return {\n            name: \"a:clrScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [\n                getColorChildren(['dk1', 'sysClr', 'windowText', '000000']),\n                getColorChildren(['lt1', 'sysClr', 'window', 'FFFFFF']),\n                getColorChildren(['dk2', 'srgbClr', '44546A']),\n                getColorChildren(['lt2', 'srgbClr', 'E7E6E6']),\n                getColorChildren(['accent1', 'srgbClr', '4472C4']),\n                getColorChildren(['accent2', 'srgbClr', 'ED7D31']),\n                getColorChildren(['accent3', 'srgbClr', 'A5A5A5']),\n                getColorChildren(['accent4', 'srgbClr', 'FFC000']),\n                getColorChildren(['accent5', 'srgbClr', '5B9BD5']),\n                getColorChildren(['accent6', 'srgbClr', '70AD47']),\n                getColorChildren(['hlink', 'srgbClr', '0563C1']),\n                getColorChildren(['folHlink', 'srgbClr', '954F72'])\n            ]\n        };\n    }\n};\n\nexport default colorScheme;\n", "import { ExcelOOXMLTemplate, XmlElement, _ } from '@ag-grid-community/core';\n\nconst getFont = (props: [string, string, string?, string?]): XmlElement => {\n    const [type, typeface, script, panose] = props;\n    return {\n        name: `a:${type}`,\n        properties: {\n            rawMap: {\n                script,\n                typeface,\n                panose\n            }\n        }\n    };\n};\n\nconst fontScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: \"a:fontScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [{\n                name: 'a:majorFont',\n                children: [\n                    getFont(['latin', 'Calibri Light', undefined, '020F0302020204030204']),\n                    getFont(['ea', '']),\n                    getFont(['cs', '']),\n                    getFont(['font', '\u6E38\u30B4\u30B7\u30C3\u30AF Light', 'Jpan']),\n                    getFont(['font', '\uB9D1\uC740 \uACE0\uB515', 'Hang']),\n                    getFont(['font', '\u7B49\u7EBF Light', 'Hans']),\n                    getFont(['font', '\u65B0\u7D30\u660E\u9AD4', 'Hant']),\n                    getFont(['font', 'Times New Roman', 'Arab']),\n                    getFont(['font', 'Times New Roman', 'Hebr']),\n                    getFont(['font', 'Tahoma', 'Thai']),\n                    getFont(['font', 'Nyala', 'Ethi']),\n                    getFont(['font', 'Vrinda', 'Beng']),\n                    getFont(['font', 'Shruti', 'Gujr']),\n                    getFont(['font', 'MoolBoran', 'Khmr']),\n                    getFont(['font', 'Tunga', 'Knda']),\n                    getFont(['font', 'Raavi', 'Guru']),\n                    getFont(['font', 'Euphemia', 'Cans']),\n                    getFont(['font', 'Plantagenet Cherokee', 'Cher']),\n                    getFont(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                    getFont(['font', 'Microsoft Himalaya', 'Tibt']),\n                    getFont(['font', 'MV Boli', 'Thaa']),\n                    getFont(['font', 'Mangal', 'Deva']),\n                    getFont(['font', 'Gautami', 'Telu']),\n                    getFont(['font', 'Latha', 'Taml']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrc']),\n                    getFont(['font', 'Kalinga', 'Orya']),\n                    getFont(['font', 'Kartika', 'Mlym']),\n                    getFont(['font', 'DokChampa', 'Laoo']),\n                    getFont(['font', 'Iskoola Pota', 'Sinh']),\n                    getFont(['font', 'Mongolian Baiti', 'Mong']),\n                    getFont(['font', 'Times New Roman', 'Viet']),\n                    getFont(['font', 'Microsoft Uighur', 'Uigh']),\n                    getFont(['font', 'Sylfaen', 'Geor']),\n                    getFont(['font', 'Arial', 'Armn']),\n                    getFont(['font', 'Leelawadee UI', 'Bugi']),\n                    getFont(['font', 'Microsoft JhengHei', 'Bopo']),\n                    getFont(['font', 'Javanese Text', 'Java']),\n                    getFont(['font', 'Segoe UI', 'Lisu']),\n                    getFont(['font', 'Myanmar Text', 'Mymr']),\n                    getFont(['font', 'Ebrima', 'Nkoo']),\n                    getFont(['font', 'Nirmala UI', 'Olck']),\n                    getFont(['font', 'Ebrima', 'Osma']),\n                    getFont(['font', 'Phagspa', 'Phag']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrn']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrj']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syre']),\n                    getFont(['font', 'Nirmala UI', 'Sora']),\n                    getFont(['font', 'Microsoft Tai Le', 'Tale']),\n                    getFont(['font', 'Microsoft New Tai Lue', 'Talu']),\n                    getFont(['font', 'Ebrima', 'Tfng'])\n                ]\n            }, {\n                name: 'a:minorFont',\n                children: [\n                    getFont(['latin', 'Calibri', undefined, '020F0502020204030204']),\n                    getFont(['ea', '']),\n                    getFont(['cs', '']),\n                    getFont(['font', '\u6E38\u30B4\u30B7\u30C3\u30AF', 'Jpan']),\n                    getFont(['font', '\uB9D1\uC740 \uACE0\uB515', 'Hang']),\n                    getFont(['font', '\u7B49\u7EBF', 'Hans']),\n                    getFont(['font', '\u65B0\u7D30\u660E\u9AD4', 'Hant']),\n                    getFont(['font', 'Arial', 'Arab']),\n                    getFont(['font', 'Arial', 'Hebr']),\n                    getFont(['font', 'Tahoma', 'Thai']),\n                    getFont(['font', 'Nyala', 'Ethi']),\n                    getFont(['font', 'Vrinda', 'Beng']),\n                    getFont(['font', 'Shruti', 'Gujr']),\n                    getFont(['font', 'DaunPenh', 'Khmr']),\n                    getFont(['font', 'Tunga', 'Knda']),\n                    getFont(['font', 'Raavi', 'Guru']),\n                    getFont(['font', 'Euphemia', 'Cans']),\n                    getFont(['font', 'Plantagenet Cherokee', 'Cher']),\n                    getFont(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                    getFont(['font', 'Microsoft Himalaya', 'Tibt']),\n                    getFont(['font', 'MV Boli', 'Thaa']),\n                    getFont(['font', 'Mangal', 'Deva']),\n                    getFont(['font', 'Gautami', 'Telu']),\n                    getFont(['font', 'Latha', 'Taml']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrc']),\n                    getFont(['font', 'Kalinga', 'Orya']),\n                    getFont(['font', 'Kartika', 'Mlym']),\n                    getFont(['font', 'DokChampa', 'Laoo']),\n                    getFont(['font', 'Iskoola Pota', 'Sinh']),\n                    getFont(['font', 'Mongolian Baiti', 'Mong']),\n                    getFont(['font', 'Arial', 'Viet']),\n                    getFont(['font', 'Microsoft Uighur', 'Uigh']),\n                    getFont(['font', 'Sylfaen', 'Geor']),\n                    getFont(['font', 'Arial', 'Armn']),\n                    getFont(['font', 'Leelawadee UI', 'Bugi']),\n                    getFont(['font', 'Microsoft JhengHei', 'Bopo']),\n                    getFont(['font', 'Javanese Text', 'Java']),\n                    getFont(['font', 'Segoe UI', 'Lisu']),\n                    getFont(['font', 'Myanmar Text', 'Mymr']),\n                    getFont(['font', 'Ebrima', 'Nkoo']),\n                    getFont(['font', 'Nirmala UI', 'Olck']),\n                    getFont(['font', 'Ebrima', 'Osma']),\n                    getFont(['font', 'Phagspa', 'Phag']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrn']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrj']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syre']),\n                    getFont(['font', 'Nirmala UI', 'Sora']),\n                    getFont(['font', 'Microsoft Tai Le', 'Tale']),\n                    getFont(['font', 'Microsoft New Tai Lue', 'Talu']),\n                    getFont(['font', 'Ebrima', 'Tfng'])\n                ]\n            }]\n        };\n    }\n};\n\nexport default fontScheme;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\ntype GsType = [string, string, string, string?, string?, string?];\ntype LinType = [string, string];\n\nconst getPropertyVal = (name: string, val: string, children?: XmlElement[]): XmlElement => ({\n    name: `a:${name}`,\n    properties: {\n        rawMap: {\n            val\n        }\n    },\n    children\n});\n\nconst getGs = (props: GsType): XmlElement => {\n    const [pos, schemeColor, satMod, lumMod, tint, shade] = props;\n    const children: XmlElement[] = [];\n\n    children.push(getPropertyVal('satMod', satMod));\n    if (lumMod) { children.push(getPropertyVal('lumMod', lumMod)); }\n    if (tint) { children.push(getPropertyVal('tint', tint)); }\n    if (shade) { children.push(getPropertyVal('shade', shade)); }\n\n    return {\n        name: 'a:gs',\n        properties: {\n            rawMap: {\n                pos\n            }\n        },\n        children: [{\n            name: 'a:schemeClr',\n            properties: {\n                rawMap: {\n                    val: schemeColor\n                }\n            },\n            children\n        }]\n    };\n};\n\nconst getSolidFill = (val: string, children?: XmlElement[]): XmlElement => ({\n    name: 'a:solidFill',\n    children: [getPropertyVal('schemeClr', val, children)]\n});\n\nconst getGradFill = (props: [string, GsType, GsType, GsType, LinType]): XmlElement => {\n    const [rotWithShape, gs1, gs2, gs3, lin] = props;\n    const [ang, scaled] = lin;\n    return {\n        name: 'a:gradFill',\n        properties: {\n            rawMap: {\n                rotWithShape\n            }\n        },\n        children: [{\n            name: 'a:gsLst',\n            children: [\n                getGs(gs1),\n                getGs(gs2),\n                getGs(gs3)\n            ]\n        }, {\n            name: 'a:lin',\n            properties: {\n                rawMap: {\n                    ang: ang,\n                    scaled: scaled\n                }\n            }\n        }]\n    };\n};\n\nconst getLine = (props: [string, string, string, string]): XmlElement => {\n    const [w, cap, cmpd, algn] = props;\n\n    return {\n        name: 'a:ln',\n        properties: {\n            rawMap: { w, cap, cmpd, algn }\n        },\n        children: [\n            getSolidFill('phClr'),\n            getPropertyVal('prstDash', 'solid'),\n            {\n                name: 'a:miter',\n                properties: {\n                    rawMap: {\n                        lim: '800000'\n                    }\n                }\n            }\n        ]\n    };\n};\n\nconst getEffectStyle = (shadow?: [string, string, string, string, string]): XmlElement => {\n    const children: XmlElement[] = [];\n\n    if (shadow) {\n        const [blurRad, dist, dir, algn, rotWithShape] = shadow;\n        children.push({\n            name: 'a:outerShdw',\n            properties: {\n                rawMap: { blurRad, dist, dir, algn, rotWithShape }\n            },\n            children: [\n                getPropertyVal('srgbClr', '000000', [getPropertyVal('alpha', '63000')])\n            ]\n        });\n    }\n\n    return {\n        name: 'a:effectStyle',\n        children: [Object.assign({}, {\n            name: 'a:effectLst'\n        }, children.length ? {children} : {})]\n    };\n};\n\nconst getFillStyleList = (): XmlElement => ({\n    name: 'a:fillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '105000', '110000', '67000'],\n            ['50000', 'phClr', '103000', '105000', '73000' ],\n            ['100000', 'phClr', '109000', '105000', '81000' ],\n            ['5400000', '0']\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '103000', '102000', '94000' ],\n            ['50000', 'phClr', '110000', '100000', undefined, '100000' ],\n            ['100000', 'phClr', '120000', '99000', undefined, '78000' ],\n            ['5400000', '0' ]\n        ])\n    ]\n});\n\nconst getLineStyleList = (): XmlElement => ({\n    name: 'a:lnStyleLst',\n    children: [\n        getLine(['6350', 'flat', 'sng', 'ctr']),\n        getLine(['12700', 'flat', 'sng', 'ctr']),\n        getLine(['19050', 'flat', 'sng', 'ctr'])\n    ]\n});\n\nconst getEffectStyleList = (): XmlElement => ({\n    name: 'a:effectStyleLst',\n    children: [\n        getEffectStyle(),\n        getEffectStyle(),\n        getEffectStyle(['57150', '19050', '5400000', 'ctr', '0'])\n    ]\n});\n\nconst getBgFillStyleList = (): XmlElement => ({\n    name: 'a:bgFillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getSolidFill('phClr', [\n            getPropertyVal('tint', '95000'),\n            getPropertyVal('satMod', '170000'),\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '150000', '102000', '93000', '98000'],\n            ['50000', 'phClr', '130000', '103000', '98000', '90000'],\n            ['100000', 'phClr', '120000', undefined, undefined, '63000'],\n            ['5400000', '0']\n        ])\n    ]\n});\n\nconst formatScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: \"a:fmtScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [\n                getFillStyleList(),\n                getLineStyleList(),\n                getEffectStyleList(),\n                getBgFillStyleList()\n            ]\n        };\n    }\n};\n\nexport default formatScheme;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport colorScheme from './colorScheme';\nimport fontScheme from './fontScheme';\nimport formatScheme from './formatScheme';\n\nconst themeElements: ExcelOOXMLTemplate = {\n    getTemplate() {\n\n        return {\n            name: \"a:themeElements\",\n            children: [\n                colorScheme.getTemplate(),\n                fontScheme.getTemplate(),\n                formatScheme.getTemplate()\n            ]\n        };\n    }\n};\n\nexport default themeElements;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport themeElements from './office/themeElements';\n\nconst officeTheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n\n        return {\n            name: \"a:theme\",\n            properties: {\n                prefixedAttributes:[{\n                    prefix: \"xmlns:\",\n                    map: {\n                        a: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n                    },\n                }],\n                rawMap: {\n                    name: \"Office Theme\"\n                }\n            },\n            children: [\n                themeElements.getTemplate(),\n                {\n                    name: 'a:objectDefaults'\n                },\n                {\n                    name: 'a:extraClrSchemeLst'\n                }\n            ]\n        };\n    }\n};\n\nexport default officeTheme;\n", "import { ExcelOOXMLTemplate, XmlElement, _ } from '@ag-grid-community/core';\n\nconst buildSharedString = (strMap: Map<string, number>): XmlElement[] => {\n    const ret: XmlElement[] = [];\n\n    for (const key of strMap.keys()) {\n        const textNode = key.toString();\n\n\n        const child: XmlElement = {\n            name: 't',\n            textNode: _.escapeString(textNode)\n        };\n\n        // if we have leading or trailing spaces, instruct Excel not to trim them\n        const preserveSpaces = textNode.trim().length !== textNode.length;\n\n        if (preserveSpaces) {\n            child.properties = {\n                rawMap: {\n                    \"xml:space\": \"preserve\"\n                }\n            };\n        }\n        ret.push({\n            name: 'si',\n            children: [child]\n        });\n    }\n\n    return ret;\n};\n\nconst sharedStrings: ExcelOOXMLTemplate = {\n    getTemplate(strings: Map<string, number>) {\n        return {\n            name: \"sst\",\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    count: strings.size,\n                    uniqueCount: strings.size\n                }\n            },\n            children: buildSharedString(strings)\n        };\n    }\n};\n\nexport default sharedStrings;\n", "import { ExcelOOXMLTemplate, _ } from '@ag-grid-community/core';\nimport { NumberFormat } from '../../../assets/excelInterfaces';\n\nfunction prepareString(str: string): string {\n    const split = str.split(/(\\[[^\\]]*\\])/);\n\n    for (let i = 0; i < split.length; i++) {\n        // excel formulas require symbols to be escaped. Excel also requires $ to be \n        // placed in quotes but only when the $ is not wrapped inside of square brackets.\n        let currentString = split[i];\n        if (!currentString.length) { continue; }\n        if (!currentString.startsWith('[')) {\n            currentString = currentString.replace(/\\$/g, '\"$\"');\n         }\n\n         split[i] = _.escapeString(currentString) as string;\n    }\n\n    return split.join('');\n}\n\nconst numberFormatFactory: ExcelOOXMLTemplate = {\n    getTemplate(numberFormat: NumberFormat) {\n        let { formatCode, numFmtId } = numberFormat;\n\n        \n        if (formatCode.length) {\n            formatCode = prepareString(formatCode);\n        }\n\n        return {\n            name: \"numFmt\",\n            properties: {\n                rawMap: {\n                    formatCode,\n                    numFmtId\n                }\n            }\n        };\n    }\n};\n\nexport default numberFormatFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { NumberFormat } from '../../../assets/excelInterfaces';\nimport numberFormatFactory from './numberFormat';\n\nconst numberFormatsFactory: ExcelOOXMLTemplate = {\n    getTemplate(numberFormats: NumberFormat[]) {\n        return {\n            name: \"numFmts\",\n            properties: {\n                rawMap: {\n                    count: numberFormats.length\n                }\n            },\n            children: numberFormats.map(numberFormat => numberFormatFactory.getTemplate(numberFormat))\n        };\n    }\n};\n\nexport default numberFormatsFactory;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { ExcelThemeFont } from '../../../assets/excelInterfaces';\n\nconst fontFactory: ExcelOOXMLTemplate = {\n    getTemplate(font: ExcelThemeFont) {\n        const {\n            size, colorTheme, color = 'FF000000', fontName = 'Calibri', family, scheme,\n            italic, bold, strikeThrough, outline, shadow, underline, verticalAlign\n        } = font;\n\n        const children: XmlElement[] = [\n            { name: 'sz', properties: { rawMap: { val: size } }},\n            { name: 'color', properties: { rawMap: { theme: colorTheme, rgb: color } }},\n            { name: 'name', properties: { rawMap: { val: fontName } }}\n        ];\n\n        if (family) {\n            children.push({ name: 'family', properties: { rawMap: { val: family } }});\n        }\n\n        if (scheme) {\n            children.push({ name: 'scheme', properties: { rawMap: { val: scheme } }});\n        }\n\n        if (italic) { children.push({ name: 'i' }); }\n        if (bold) { children.push({ name: 'b' }); }\n        if (strikeThrough) { children.push({ name: 'strike' }); }\n        if (outline) { children.push({name: 'outline' }); }\n        if (shadow) { children.push({ name: 'shadow' }); }\n        if (underline) {\n            children.push({name: 'u', properties: { rawMap: { val: underline } }});\n        }\n        if (verticalAlign) {\n            children.push({name: 'vertAlign', properties: { rawMap: { val: verticalAlign } }});\n        }\n\n        return { name: \"font\", children };\n    }\n};\n\nexport default fontFactory;", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { ExcelThemeFont } from '../../../assets/excelInterfaces';\nimport fontFactory from './font';\n\nconst fontsFactory: ExcelOOXMLTemplate = {\n    getTemplate(fonts: ExcelThemeFont[]) {\n        return {\n            name: \"fonts\",\n            properties: {\n                rawMap: {\n                    count: fonts.length\n                }\n            },\n            children: fonts.map(font => fontFactory.getTemplate(font))\n        };\n    }\n};\n\nexport default fontsFactory;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { Fill } from '../../../assets/excelInterfaces';\n\nconst fillFactory: ExcelOOXMLTemplate = {\n    getTemplate(fill: Fill) {\n        const {patternType, fgTheme, fgTint, fgRgb, bgRgb, bgIndexed} = fill;\n        const pf: XmlElement = {\n            name: 'patternFill',\n            properties: {\n                rawMap: {\n                    patternType\n                }\n            }\n        };\n\n        if (fgTheme || fgTint || fgRgb) {\n            pf.children = [{\n                name: 'fgColor',\n                properties: {\n                    rawMap: {\n                        theme: fgTheme,\n                        tint: fgTint,\n                        rgb: fgRgb\n                    }\n                }\n            }];\n        }\n\n        if (bgIndexed || bgRgb) {\n            if (!pf.children) { pf.children = []; }\n            pf.children.push({\n                name: 'bgColor',\n                properties: {\n                    rawMap: {\n                        indexed: bgIndexed,\n                        rgb: bgRgb\n                    }\n                }\n            });\n        }\n\n        return {\n            name: \"fill\",\n            children: [pf]\n        };\n    }\n};\n\nexport default fillFactory;", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { Fill } from '../../../assets/excelInterfaces';\nimport fillFactory from './fill';\n\nconst fillsFactory: ExcelOOXMLTemplate = {\n    getTemplate(fills: Fill[]) {\n        return {\n            name: \"fills\",\n            properties: {\n                rawMap: {\n                    count: fills.length\n                }\n            },\n            children: fills.map(fill => fillFactory.getTemplate(fill))\n        };\n    }\n};\n\nexport default fillsFactory;\n", "import { ColorMap } from \"./excelInterfaces\";\n\nconst getWeightName = (value?: number): string => {\n    switch (value) {\n        case 1: return 'thin';\n        case 2: return 'medium';\n        case 3: return 'thick';\n        default: return 'hair';\n    }\n};\n\nconst mappedBorderNames: { [key: string]: string } = {\n    None: 'None',\n    Dot: 'Dotted',\n    Dash: 'Dashed',\n    Double: 'Double',\n    DashDot: 'DashDot',\n    DashDotDot: 'DashDotDot',\n    SlantDashDot: 'SlantDashDot'\n};\n\nconst mediumBorders = ['Dashed', 'DashDot', 'DashDotDot'];\n\nconst colorMap: ColorMap = {\n    None: 'none',\n    Solid: 'solid',\n    Gray50: 'mediumGray',\n    Gray75: 'darkGray',\n    Gray25: 'lightGray',\n    HorzStripe: 'darkHorizontal',\n    VertStripe: 'darkVertical',\n    ReverseDiagStripe: 'darkDown',\n    DiagStripe: 'darkUp',\n    DiagCross: 'darkGrid',\n    ThickDiagCross: 'darkTrellis',\n    ThinHorzStripe: 'lightHorizontal',\n    ThinVertStripe: 'lightVertical',\n    ThinReverseDiagStripe: 'lightDown',\n    ThinDiagStripe: 'lightUp',\n    ThinHorzCross: 'lightGrid',\n    ThinDiagCross: 'lightTrellis',\n    Gray125: 'gray125',\n    Gray0625: 'gray0625'\n};\n\nconst horizontalAlignmentMap: { [key: string]: string } = {\n    Automatic: 'general',\n    Left: 'left',\n    Center: 'center',\n    Right: 'right',\n    Fill: 'fill',\n    Justify: 'justify',\n    CenterAcrossSelection: 'centerContinuous',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify'\n};\n\nconst verticalAlignmentMap: { [key: string]: string | undefined } = {\n    Automatic: undefined,\n    Top: 'top',\n    Bottom: 'bottom',\n    Center: 'center',\n    Justify: 'justify',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify'\n};\n\nexport const convertLegacyPattern = (name: string | undefined): string => {\n    if (!name) { return 'none'; }\n\n    return colorMap[name] || name;\n};\n\nexport const convertLegacyColor = (color?: string): string | undefined => {\n    if (color == undefined) { return color; }\n\n    if (color.charAt(0) === '#') {\n        color = color.substring(1);\n    }\n\n    return color.length === 6 ? 'FF' + color : color;\n};\n\nexport const convertLegacyBorder = (type?: string, weight?: number): string => {\n    if (!type) { return 'thin'; }\n\n    // Legacy Types are: None, Continuous, Dash, Dot, DashDot, DashDotDot, SlantDashDot, and Double\n    // Weight represents: 0\u2014Hairline, 1\u2014Thin , 2\u2014Medium, 3\u2014Thick\n\n    // New types: none, thin, medium, dashed, dotted, thick, double, hair, mediumDashed, dashDot, mediumDashDot,\n    // dashDotDot, mediumDashDotDot, slantDashDot\n    const namedWeight = getWeightName(weight);\n    const mappedName = mappedBorderNames[type];\n\n    if (type === 'Continuous') { return namedWeight; }\n    if (namedWeight === 'medium' && mediumBorders.indexOf(mappedName) !== -1) { return `medium${mappedName}`; }\n\n    return mappedName.charAt(0).toLowerCase() + mappedName.substring(1);\n};\n\nexport const convertLegacyHorizontalAlignment = (alignment: string): string => {\n    return horizontalAlignmentMap[alignment] || 'general';\n};\n\nexport const convertLegacyVerticalAlignment = (alignment: string): string | undefined => {\n    return verticalAlignmentMap[alignment] || undefined;\n};", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { BorderSet } from '../../../assets/excelInterfaces';\nimport { convertLegacyColor } from '../../../assets/excelLegacyConvert';\n\nconst getBorderColor = (color?: string): XmlElement => {\n    return {\n        name: 'color',\n        properties: {\n            rawMap: {\n                rgb: convertLegacyColor(color || '#000000')\n            }\n        }\n    };\n};\n\nconst borderFactory: ExcelOOXMLTemplate = {\n    getTemplate(border: BorderSet) {\n        const {left, right, top, bottom, diagonal} = border;\n        const leftChildren = left ? [getBorderColor(left.color)] : undefined;\n        const rightChildren = right ? [getBorderColor(right.color)] : undefined;\n        const topChildren = top ? [getBorderColor(top.color)] : undefined;\n        const bottomChildren = bottom ? [getBorderColor(bottom.color)] : undefined;\n        const diagonalChildren = diagonal ? [getBorderColor(diagonal.color)] : undefined;\n        return {\n            name: 'border',\n            children: [{\n                name: 'left',\n                properties: { rawMap: { style: left && left.style } },\n                children: leftChildren\n            }, {\n                name: 'right',\n                properties: { rawMap: { style: right && right.style } },\n                children: rightChildren\n            }, {\n                name: 'top',\n                properties: { rawMap: { style: top && top.style } },\n                children: topChildren\n            }, {\n                name: 'bottom',\n                properties: { rawMap: { style: bottom && bottom.style } },\n                children: bottomChildren\n            }, {\n                name: 'diagonal',\n                properties: { rawMap: { style: diagonal && diagonal.style } },\n                children: diagonalChildren\n            }]\n        };\n    }\n};\n\nexport default borderFactory;", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { BorderSet } from '../../../assets/excelInterfaces';\nimport borderFactory from './border';\n\nconst bordersFactory: ExcelOOXMLTemplate = {\n    getTemplate(borders: BorderSet[]) {\n        return {\n            name: \"borders\",\n            properties: {\n                rawMap: {\n                    count: borders.length\n                }\n            },\n            children: borders.map(border => borderFactory.getTemplate(border))\n        };\n    }\n};\n\nexport default bordersFactory;\n", "import { ExcelOOXMLTemplate, ExcelAlignment } from '@ag-grid-community/core';\nimport { convertLegacyHorizontalAlignment, convertLegacyVerticalAlignment } from '../../../assets/excelLegacyConvert';\n\nconst getReadingOrderId = (readingOrder: string): number => {\n    const order = ['Context', 'LeftToRight', 'RightToLeft'];\n    const pos = order.indexOf(readingOrder);\n    return Math.max(pos, 0);\n};\n\nconst alignmentFactory: ExcelOOXMLTemplate = {\n    getTemplate(alignment: ExcelAlignment) {\n        const {horizontal, indent, readingOrder, rotate, shrinkToFit, vertical, wrapText} = alignment;\n\n        return {\n            name: 'alignment',\n            properties: {\n                rawMap: {\n                    horizontal: horizontal && convertLegacyHorizontalAlignment(horizontal),\n                    indent,\n                    readingOrder: readingOrder && getReadingOrderId(readingOrder),\n                    textRotation: rotate,\n                    shrinkToFit,\n                    vertical: vertical && convertLegacyVerticalAlignment(vertical),\n                    wrapText\n                }\n            }\n        };\n    }\n};\n\nexport default alignmentFactory;\n", "import { ExcelOOXMLTemplate, ExcelProtection } from '@ag-grid-community/core';\n\nconst protectionFactory: ExcelOOXMLTemplate = {\n    getTemplate(protection: ExcelProtection) {\n        const locked = protection.protected === false ? 0 : 1;\n        const hidden = protection.hideFormula === true ? 1 : 0;\n        return {\n            name: 'protection',\n            properties: {\n                rawMap: {\n                    hidden,\n                    locked\n                }\n            }\n        };\n    }\n};\n\nexport default protectionFactory;\n", "import { ExcelOOXMLTemplate, XmlElement, ExcelAlignment, ExcelProtection } from '@ag-grid-community/core';\nimport alignmentFactory from './alignment';\nimport protectionFactory from './protection';\n\nconst xfFactory: ExcelOOXMLTemplate = {\n    getTemplate(xf: Xf) {\n        const { alignment, borderId, fillId, fontId, numFmtId, protection, quotePrefix, xfId } = xf;\n        const children: XmlElement[] = [];\n        if (alignment) {\n            children.push(alignmentFactory.getTemplate(alignment));\n        }\n\n        if (protection) {\n            children.push(protectionFactory.getTemplate(protection));\n        }\n\n        return {\n            name: \"xf\",\n            properties: {\n                rawMap: {\n                    applyAlignment: alignment ? 1 : undefined,\n                    applyProtection: protection ? 1 : undefined,\n                    applyBorder: borderId ? 1 : undefined,\n                    applyFill: fillId ? 1 : undefined,\n                    borderId,\n                    fillId,\n                    applyFont: fontId ? 1 : undefined,\n                    fontId,\n                    applyNumberFormat: numFmtId ? 1 : undefined,\n                    numFmtId,\n                    quotePrefix: quotePrefix ? 1 : undefined,\n                    xfId\n                }\n            },\n            children: children.length ? children : undefined\n        };\n    }\n};\n\nexport default xfFactory;\n\nexport interface Xf {\n    alignment?: ExcelAlignment;\n    borderId: number;\n    fillId: number;\n    fontId: number;\n    numFmtId: number;\n    quotePrefix?: number;\n    xfId?: number;\n    protection?: ExcelProtection;\n}\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport xfFactory, { Xf } from './xf';\n\nconst cellStylesXfsFactory: ExcelOOXMLTemplate = {\n    getTemplate(xfs: Xf[]) {\n        return {\n            name: \"cellStyleXfs\",\n            properties: {\n                rawMap: {\n                    count: xfs.length\n                }\n            },\n            children: xfs.map(xf => xfFactory.getTemplate(xf))\n        };\n    }\n};\n\nexport default cellStylesXfsFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport xfFactory, { Xf } from './xf';\n\nconst cellXfsFactory: ExcelOOXMLTemplate = {\n    getTemplate(xfs: Xf[]) {\n        return {\n            name: \"cellXfs\",\n            properties: {\n                rawMap: {\n                    count: xfs.length\n                }\n            },\n            children: xfs.map(xf => xfFactory.getTemplate(xf))\n        };\n    }\n};\n\nexport default cellXfsFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst borderFactory: ExcelOOXMLTemplate = {\n    getTemplate(cellStyle: CellStyle) {\n        const {builtinId, name, xfId} = cellStyle;\n\n        return {\n            name: \"cellStyle\",\n            properties: {\n                rawMap: {\n                    builtinId,\n                    name,\n                    xfId\n                }\n            }\n        };\n    }\n};\n\nexport default borderFactory;\n\nexport interface CellStyle {\n    builtinId: number;\n    name: string;\n    xfId: number;\n}\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport cellStyleFactory, { CellStyle } from './cellStyle';\n\nconst cellStylesFactory: ExcelOOXMLTemplate = {\n    getTemplate(cellStyles: CellStyle[]) {\n        return {\n            name: \"cellStyles\",\n            properties: {\n                rawMap: {\n                    count: cellStyles.length\n                }\n            },\n            children: cellStyles.map(cellStyle => cellStyleFactory.getTemplate(cellStyle))\n        };\n    }\n};\n\nexport default cellStylesFactory;\n", "import { ExcelOOXMLTemplate, ExcelStyle, ExcelInterior, ExcelBorders, ExcelFont, _ } from '@ag-grid-community/core';\nimport numberFormatsFactory from './numberFormats';\nimport fontsFactory from './fonts';\nimport fillsFactory from './fills';\nimport bordersFactory from './borders';\nimport cellStylesXfsFactory from './cellStyleXfs';\nimport cellXfsFactory from './cellXfs';\nimport cellStylesFactory from './cellStyles';\n\nimport { Xf } from './xf';\nimport { CellStyle } from './cellStyle';\nimport { Border, BorderProperty, BorderSet, ExcelThemeFont, Fill, NumberFormat, StylesMap } from '../../../assets/excelInterfaces';\nimport { convertLegacyBorder, convertLegacyColor, convertLegacyPattern } from '../../../assets/excelLegacyConvert';\nimport { numberFormatMap } from '../../../assets/excelConstants';\nimport { getFontFamilyId } from '../../../assets/excelUtils';\n\nlet stylesMap: StylesMap;\nlet registeredNumberFmts: NumberFormat[];\nlet registeredFonts: ExcelThemeFont[];\nlet registeredFills: Fill[];\nlet registeredBorders: BorderSet[];\nlet registeredCellStyleXfs: Xf[];\nlet registeredCellXfs: Xf[];\nlet registeredCellStyles: CellStyle[];\nlet currentSheet: number;\n\nconst getStyleName = (name: string, currentSheet: number): string => {\n    if (name.indexOf('mixedStyle') !== -1 && currentSheet > 1) {\n        name += `_${currentSheet}`;\n    }\n    return name;\n};\n\nconst resetStylesheetValues = (): void => {\n    stylesMap = { base: 0 };\n    registeredNumberFmts = [];\n    registeredFonts = [{ fontName: 'Calibri', colorTheme: '1', family: '2', scheme: 'minor' }];\n    registeredFills = [{ patternType: 'none', }, { patternType: 'gray125' }];\n    registeredBorders = [{ left: undefined, right: undefined, top: undefined, bottom: undefined, diagonal: undefined }];\n    registeredCellStyleXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0 }];\n    registeredCellXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0, xfId: 0 }];\n    registeredCellStyles = [{ builtinId: 0, name: 'Normal', xfId: 0 }];\n};\n\nconst registerFill = (fill: ExcelInterior): number => {\n    const convertedPattern = convertLegacyPattern(fill.pattern);\n    const convertedFillColor = convertLegacyColor(fill.color);\n    const convertedPatternColor = convertLegacyColor(fill.patternColor);\n\n    let pos = registeredFills.findIndex(currentFill => {\n        const { patternType, fgRgb, bgRgb } = currentFill;\n\n        if (\n            patternType != convertedPattern ||\n            fgRgb != convertedFillColor ||\n            bgRgb != convertedPatternColor\n        ) {\n            return false;\n        }\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredFills.length;\n        registeredFills.push({ patternType: convertedPattern, fgRgb: convertedFillColor, bgRgb: convertedPatternColor });\n    }\n\n    return pos;\n};\n\nconst registerNumberFmt = (format: string): number => {\n    if (numberFormatMap[format]) { return numberFormatMap[format]; }\n\n    let pos = registeredNumberFmts.findIndex(currentFormat => currentFormat.formatCode === format);\n\n    if (pos === -1) {\n        pos = registeredNumberFmts.length + 164;\n        registeredNumberFmts.push({ formatCode: format, numFmtId: pos });\n    } else {\n        pos = registeredNumberFmts[pos].numFmtId;\n    }\n\n    return pos;\n};\n\nconst registerBorders = (borders: ExcelBorders): number => {\n    const { borderBottom, borderTop, borderLeft, borderRight } = borders;\n    let bottomStyle: BorderProperty;\n    let topStyle: BorderProperty;\n    let leftStyle: BorderProperty;\n    let rightStyle: BorderProperty;\n    let bottomColor: BorderProperty;\n    let topColor: BorderProperty;\n    let leftColor: BorderProperty;\n    let rightColor: BorderProperty;\n\n    if (borderLeft) {\n        leftStyle = convertLegacyBorder(borderLeft.lineStyle, borderLeft.weight);\n        leftColor = convertLegacyColor(borderLeft.color);\n    }\n\n    if (borderRight) {\n        rightStyle = convertLegacyBorder(borderRight.lineStyle, borderRight.weight);\n        rightColor = convertLegacyColor(borderRight.color);\n    }\n\n    if (borderBottom) {\n        bottomStyle = convertLegacyBorder(borderBottom.lineStyle, borderBottom.weight);\n        bottomColor = convertLegacyColor(borderBottom.color);\n    }\n    if (borderTop) {\n        topStyle = convertLegacyBorder(borderTop.lineStyle, borderTop.weight);\n        topColor = convertLegacyColor(borderTop.color);\n    }\n\n    let pos = registeredBorders.findIndex(currentBorder => {\n        const { left, right, top, bottom } = currentBorder;\n        if (!left && (leftStyle || leftColor)) { return false; }\n        if (!right && (rightStyle || rightColor)) { return false; }\n        if (!top && (topStyle || topColor)) { return false; }\n        if (!bottom && (bottomStyle || bottomColor)) { return false; }\n\n        const { style: clS, color: clC } = left || {} as Border;\n        const { style: crS, color: crC } = right || {} as Border;\n        const { style: ctS, color: ctC } = top || {} as Border;\n        const { style: cbS, color: cbC } = bottom || {} as Border;\n\n        if (clS != leftStyle || clC != leftColor) { return false; }\n        if (crS != rightStyle || crC != rightColor) { return false; }\n        if (ctS != topStyle || ctC != topColor) { return false; }\n        if (cbS != bottomStyle || cbC != bottomColor) { return false; }\n\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredBorders.length;\n        registeredBorders.push({\n            left: {\n                style: leftStyle, color: leftColor\n            },\n            right: {\n                style: rightStyle, color: rightColor\n            },\n            top: {\n                style: topStyle, color: topColor\n            },\n            bottom: {\n                style: bottomStyle, color: bottomColor\n            },\n            diagonal: {\n                style: undefined,\n                color: undefined\n            }\n        });\n    }\n\n    return pos;\n};\n\nconst registerFont = (font: ExcelFont): number => {\n    const { fontName: name = 'Calibri', color, size, bold, italic, outline, shadow, strikeThrough, underline, family, verticalAlign } = font;\n    const convertedColor = convertLegacyColor(color);\n    const familyId = getFontFamilyId(family);\n    const convertedUnderline = underline ? underline.toLocaleLowerCase() : undefined;\n    const convertedVerticalAlign = verticalAlign ? verticalAlign.toLocaleLowerCase() : undefined;\n\n    let pos = registeredFonts.findIndex(currentFont => {\n        if (\n            currentFont.fontName != name ||\n            currentFont.color != convertedColor ||\n            currentFont.size != size ||\n            currentFont.bold != bold ||\n            currentFont.italic != italic ||\n            currentFont.outline != outline ||\n            currentFont.shadow != shadow ||\n            currentFont.strikeThrough != strikeThrough ||\n            currentFont.underline != convertedUnderline ||\n            currentFont.verticalAlign != convertedVerticalAlign ||\n            // @ts-ignore\n            currentFont.family != familyId\n        ) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredFonts.length;\n        registeredFonts.push({\n            fontName: name,\n            color: convertedColor,\n            size,\n            bold,\n            italic,\n            outline,\n            shadow,\n            strikeThrough,\n            underline: convertedUnderline as any,\n            verticalAlign: convertedVerticalAlign as any,\n            family: familyId != null ? familyId.toString() : undefined\n        });\n    }\n\n    return pos;\n};\n\nconst registerStyle = (config: ExcelStyle & { quotePrefix?: 1 }): void => {\n    const { alignment, borders, font, interior, numberFormat, protection, quotePrefix } = config;\n    let { id } = config;\n    let currentFill = 0;\n    let currentBorder = 0;\n    let currentFont = 0;\n    let currentNumberFmt = 0;\n\n    if (!id) { return; }\n\n    id = getStyleName(id, currentSheet);\n\n    if (stylesMap[id] != undefined) { return; }\n\n    if (interior) {\n        currentFill = registerFill(interior);\n    }\n\n    if (borders) {\n        currentBorder = registerBorders(borders);\n    }\n\n    if (font) {\n        currentFont = registerFont(font);\n    }\n\n    if (numberFormat) {\n        currentNumberFmt = registerNumberFmt(numberFormat.format);\n    }\n\n    stylesMap[id] = registeredCellXfs.length;\n\n    registeredCellXfs.push({\n        alignment,\n        borderId: currentBorder || 0,\n        fillId: currentFill || 0,\n        fontId: currentFont || 0,\n        numFmtId: currentNumberFmt || 0,\n        protection,\n        quotePrefix: quotePrefix,\n        xfId: 0\n    });\n};\n\nconst stylesheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(defaultFontSize: number) {\n        const numberFormats = numberFormatsFactory.getTemplate(registeredNumberFmts);\n        const fonts = fontsFactory.getTemplate(registeredFonts.map(font => ({...font, size: font.size != null ? font.size : defaultFontSize })));\n        const fills = fillsFactory.getTemplate(registeredFills);\n        const borders = bordersFactory.getTemplate(registeredBorders);\n        const cellStylesXfs = cellStylesXfsFactory.getTemplate(registeredCellStyleXfs);\n        const cellXfs = cellXfsFactory.getTemplate(registeredCellXfs);\n        const cellStyles = cellStylesFactory.getTemplate(registeredCellStyles);\n\n        resetStylesheetValues();\n\n        return {\n            name: 'styleSheet',\n            properties: {\n                rawMap: {\n                    'mc:Ignorable': 'x14ac x16r2 xr',\n                    'xmlns': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n                    'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n                    'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',\n                    'xmlns:xr': 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'\n                }\n            },\n            children: [\n                numberFormats,\n                fonts,\n                fills,\n                borders,\n                cellStylesXfs,\n                cellXfs,\n                cellStyles,\n                {\n                    name: 'tableStyles',\n                    properties: {\n                        rawMap: {\n                            count: 0,\n                            defaultPivotStyle: 'PivotStyleLight16',\n                            defaultTableStyle: 'TableStyleMedium2'\n                        }\n                    }\n                }\n            ]\n        };\n    }\n};\n\nexport const getStyleId = (name: string, currentSheet: number): number => {\n    return stylesMap[getStyleName(name, currentSheet)] || 0;\n};\n\nexport const registerStyles = (styles: ExcelStyle[], _currentSheet: number): void => {\n    currentSheet = _currentSheet;\n\n    if (currentSheet === 1) {\n        resetStylesheetValues();\n    }\n\n    styles.forEach(registerStyle);\n};\n\nexport default stylesheetFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst sheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(name: string, idx: number) {\n        const sheetId = (idx + 1).toString();\n        return {\n            name: \"sheet\",\n            properties: {\n                rawMap: {\n                    \"name\": name,\n                    \"sheetId\": sheetId,\n                    \"r:id\": `rId${sheetId}`\n                }\n            }\n        };\n    }\n};\n\nexport default sheetFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport sheetFactory from './sheet';\n\nconst sheetsFactory: ExcelOOXMLTemplate = {\n    getTemplate(names: string[]) {\n        return {\n            name: \"sheets\",\n            children: names.map((sheet, idx) => sheetFactory.getTemplate(sheet, idx))\n        };\n    }\n};\n\nexport default sheetsFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport sheetsFactory from './sheets';\n\nconst workbookFactory: ExcelOOXMLTemplate = {\n    getTemplate(names: string[]) {\n\n        return {\n            name: \"workbook\",\n            properties: {\n                prefixedAttributes:[{\n                    prefix: \"xmlns:\",\n                    map: {\n                        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                    },\n                }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children: [sheetsFactory.getTemplate(names)]\n        };\n    }\n};\n\nexport default workbookFactory;\n", "import {\n    ExcelOOXMLTemplate,\n    ExcelWorksheet,\n    ExcelCell,\n    ExcelRow,\n    ExcelColumn,\n    XmlElement,\n    ExcelSheetMargin,\n    ExcelSheetPageSetup,\n    ExcelHeaderFooterContent,\n    ExcelHeaderFooterConfig,\n    ExcelFont,\n    _\n} from '@ag-grid-community/core';\nimport { ExcelDataTable } from '../../assets/excelInterfaces';\n\nimport columnFactory from './column';\nimport rowFactory from './row';\nimport mergeCellFactory from './mergeCell';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport { getExcelColumnName } from '../../assets/excelUtils';\nimport { ExcelGridSerializingParams } from '../../excelSerializingSession';\n\nconst getMergedCellsAndAddColumnGroups = (rows: ExcelRow[], cols: ExcelColumn[], suppressColumnOutline: boolean): string[] => {\n    const mergedCells: string[] = [];\n    const cellsWithCollapsibleGroups: number[][] = [];\n\n    rows.forEach((currentRow, rowIdx) => {\n        const cells = currentRow.cells;\n        let merges = 0;\n        let lastCol: ExcelColumn;\n\n        cells.forEach((currentCell: ExcelCell, cellIdx: number) => {\n            const min = cellIdx + merges + 1;\n            const start = getExcelColumnName(min);\n            const outputRow = rowIdx + 1;\n\n            if (currentCell.mergeAcross) {\n                merges += currentCell.mergeAcross;\n                const end = getExcelColumnName(cellIdx + merges + 1);\n\n                mergedCells.push(`${start}${outputRow}:${end}${outputRow}`);\n            }\n\n            if (!cols[min - 1]) {\n                cols[min - 1] = {} as ExcelColumn;\n            }\n            \n            const { collapsibleRanges } = currentCell;\n\n            if (collapsibleRanges) {\n                collapsibleRanges.forEach(range => {\n                    cellsWithCollapsibleGroups.push([min + range[0], min + range[1]]);\n                });\n            }\n\n            lastCol = cols[min - 1];\n            lastCol.min = min;\n            lastCol.max = min;\n            currentCell.ref = `${start}${outputRow}`;\n        });\n    });\n\n    cellsWithCollapsibleGroups.sort((a, b) => {\n        if (a[0] !== b[0]) { return a[0] - b[0]}\n        return b[1] - a[1];\n    });\n\n    const rangeMap = new Map<string, boolean>();\n    const outlineLevel = new Map<number, number>();\n\n    cellsWithCollapsibleGroups.filter(currentRange => {\n        const rangeString = currentRange.toString();\n        const inMap = rangeMap.get(rangeString);\n\n        if (inMap) { return false; }\n        rangeMap.set(rangeString, true);\n\n        return  true;\n    }).forEach(range => {\n        const refCol = cols.find(col => col.min == range[0] && col.max == range[1]);\n        const currentOutlineLevel = outlineLevel.get(range[0]);\n        cols.push({\n            min: range[0],\n            max: range[1],\n            outlineLevel: suppressColumnOutline ? undefined : (currentOutlineLevel || 1),\n            width: (refCol || { width: 100 }).width\n        });\n\n        outlineLevel.set(range[0], (currentOutlineLevel || 0) + 1);\n    });\n\n    return mergedCells;\n};\n\nconst getPageOrientation = (orientation?: 'Portrait' | 'Landscape'): 'portrait' | 'landscape' => {\n    if (!orientation || (orientation !== 'Portrait' && orientation !== 'Landscape')) {\n        return 'portrait';\n    }\n\n    return orientation.toLocaleLowerCase() as 'portrait' | 'landscape';\n};\n\nconst getPageSize = (pageSize?: string): number => {\n    if (pageSize == null) { return 1; }\n\n    const positions = ['Letter', 'Letter Small', 'Tabloid', 'Ledger', 'Legal', 'Statement', 'Executive', 'A3', 'A4', 'A4 Small', 'A5', 'A6', 'B4', 'B5', 'Folio', 'Envelope', 'Envelope DL', 'Envelope C5', 'Envelope B5', 'Envelope C3', 'Envelope C4', 'Envelope C6', 'Envelope Monarch', 'Japanese Postcard', 'Japanese Double Postcard'];\n    const pos = positions.indexOf(pageSize);\n\n    return pos === -1 ? 1 : (pos + 1);\n};\n\nconst addColumns = (columns: ExcelColumn[]) => {\n    return (children: XmlElement[]) => {\n        if (columns.length) {\n            children.push({\n                name: 'cols',\n                children: columns.map(column => columnFactory.getTemplate(column))\n            });\n        }\n        return children;\n    };\n};\n\nconst addSheetData = (rows: ExcelRow[], sheetNumber: number) => {\n    return (children: XmlElement[]) => {\n        if (rows.length) {\n            children.push({\n                name: 'sheetData',\n                children: rows.map((row, idx) => rowFactory.getTemplate(row, idx, sheetNumber))\n            });\n        }\n        return children;\n    };\n};\n\nconst addMergeCells = (mergeCells: string[]) => {\n    return (children: XmlElement[]) => {\n        if (mergeCells.length) {\n            children.push({\n                name: 'mergeCells',\n                properties: {\n                    rawMap: {\n                        count: mergeCells.length\n                    }\n                },\n                children: mergeCells.map(mergedCell => mergeCellFactory.getTemplate(mergedCell))\n            });\n        }\n        return children;\n    };\n};\n\nconst addPageMargins = (margins: ExcelSheetMargin) => {\n    return (children: XmlElement[]) => {\n        const { top = 0.75, right = 0.7, bottom = 0.75, left = 0.7, header = 0.3, footer = 0.3 } = margins;\n\n        children.push({\n            name: 'pageMargins',\n            properties: {\n                rawMap: { bottom, footer, header, left, right, top }\n            }\n        });\n\n        return children;\n    };\n};\n\nconst addPageSetup = (pageSetup?: ExcelSheetPageSetup) => {\n    return (children: XmlElement[]) => {\n        if (pageSetup) {\n            children.push({\n                name: 'pageSetup',\n                properties: {\n                    rawMap: {\n                        horizontalDpi: 0,\n                        verticalDpi: 0,\n                        orientation: getPageOrientation(pageSetup.orientation),\n                        paperSize: getPageSize(pageSetup.pageSize)\n                    }\n                }\n            });\n        }\n        return children;\n    };\n};\n\nconst replaceHeaderFooterTokens = (value: string): string => {\n    const map = {\n        '&[Page]': '&P',\n        '&[Pages]': '&N',\n        '&[Date]': '&D',\n        '&[Time]': '&T',\n        '&[Tab]': '&A',\n        '&[Path]': '&Z',\n        '&[File]': '&F'\n    };\n\n    _.iterateObject<string>(map, (key, val) => {\n        value = value.replace(key, val);\n    });\n\n    return value;\n};\n\nconst getHeaderPosition = (position?: string): string => {\n    if (position === 'Center') { return 'C'; }\n    if (position === 'Right') { return 'R'; }\n\n    return 'L';\n};\n\nconst applyHeaderFontStyle = (headerString: string, font?: ExcelFont): string => {\n    if (!font) { return headerString; }\n\n    headerString += '&amp;&quot;';\n    headerString += font.fontName || 'Calibri';\n\n    if (font.bold !== font.italic) {\n        headerString += font.bold ? ',Bold' : ',Italic';\n    } else if (font.bold) {\n        headerString += ',Bold Italic';\n    } else {\n        headerString += ',Regular';\n    }\n    headerString += '&quot;';\n\n    if (font.size) { headerString += `&amp;${font.size}`; }\n    if (font.strikeThrough) { headerString += '&amp;S'; }\n    if (font.underline) {\n        headerString += `&amp;${font.underline === 'Double' ? 'E' : 'U'}`;\n     }\n    if (font.color) { headerString += `&amp;K${font.color.replace('#', '').toUpperCase()}`; }\n\n    return headerString;\n};\n\nconst processHeaderFooterContent = (content: ExcelHeaderFooterContent[]): string =>\n    content.reduce((prev, curr) => {\n        const pos = getHeaderPosition(curr.position);\n        const output = applyHeaderFontStyle(`${prev}&amp;${pos}`, curr.font);\n\n        return `${output}${_.escapeString(replaceHeaderFooterTokens(curr.value))}`;\n    }, '');\n\nconst buildHeaderFooter = (headerFooterConfig: ExcelHeaderFooterConfig): XmlElement[] => {\n    const rules: ['all', 'first', 'even'] = ['all', 'first', 'even'];\n    const headersAndFooters = [] as XmlElement[];\n\n    rules.forEach(rule => {\n        const headerFooter = headerFooterConfig[rule];\n        const namePrefix = rule === 'all' ? 'odd' : rule;\n\n        if (!headerFooter || (!headerFooter.header && !headerFooter.footer)) { return; }\n\n        _.iterateObject<ExcelHeaderFooterContent[]>((headerFooter as any), (key: string, value: ExcelHeaderFooterContent[]) => {\n            const nameSuffix = `${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n\n            if (value) {\n                headersAndFooters.push({\n                    name: `${namePrefix}${nameSuffix}`,\n                    properties: {\n                        rawMap: {\n                            'xml:space': 'preserve'\n                        }\n                    },\n                    textNode: processHeaderFooterContent(value)\n                });\n            }\n        });\n    });\n\n    return headersAndFooters;\n};\n\nconst addHeaderFooter = (headerFooterConfig?: ExcelHeaderFooterConfig) => {\n    return (children: XmlElement[]) => {\n        if (!headerFooterConfig) { return children; }\n\n        const differentFirst = headerFooterConfig.first != null ? 1 : 0;\n        const differentOddEven = headerFooterConfig.even != null ? 1 : 0;\n\n        children.push({\n            name: 'headerFooter',\n            properties: {\n                rawMap: {\n                    differentFirst,\n                    differentOddEven\n                }\n            },\n            children: buildHeaderFooter(headerFooterConfig)\n        });\n        return children;\n    };\n};\n\nconst addExcelTableParts = (excelTable?: ExcelDataTable, index?: number) => {\n    if (!excelTable) {\n        return (children: XmlElement[]) => children;\n    }\n\n    const rId = ExcelXlsxFactory.getTableRelIdFromIndex(index || 0);\n    return (children: XmlElement[]) => {\n        children.push({\n            name: 'tableParts',\n            properties: {\n                rawMap: {\n                    count: '1',\n                }\n            },\n            children: [{\n                name: 'tablePart',\n                properties: {\n                    rawMap: {\n                        'r:id': rId,\n                    }\n                }\n            }],\n        });\n\n        return children;\n    };\n};\n\nconst addDrawingRel = (currentSheet: number) => {\n    return (children: XmlElement[]) => {\n        if (ExcelXlsxFactory.worksheetImages.get(currentSheet)) {\n            children.push({\n                name: 'drawing',\n                properties: {\n                    rawMap: {\n                        'r:id': 'rId1'\n                    }\n                }\n            });\n        }\n\n        return children;\n    };\n};\n\nconst addSheetPr = () => {\n    return (children: XmlElement[]) => {\n        children.push({\n            name: 'sheetPr',\n            children: [{\n                name: 'outlinePr',\n                properties: {\n                    rawMap: {\n                        summaryBelow: 0\n                    }\n                }\n            }]\n        });\n        return children;\n    }\n}\n\nconst addSheetFormatPr = (rows: ExcelRow[]) => {\n    return (children: XmlElement[]) => {\n        const maxOutline = rows.reduce((prev: number, row: ExcelRow) => {\n            if (row.outlineLevel && row.outlineLevel > prev) {\n                return row.outlineLevel;\n            }\n            return prev;\n        }, 0);\n\n        children.push({\n            name: 'sheetFormatPr',\n            properties: {\n                rawMap: {\n                    baseColWidth: 10,\n                    defaultRowHeight: 16,\n                    outlineLevelRow: maxOutline ? maxOutline : undefined\n                }\n            }\n        });\n        return children;\n    }\n}\n\nconst worksheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(params: {\n        worksheet: ExcelWorksheet,\n        currentSheet: number,\n        config: ExcelGridSerializingParams\n    }) {\n        const { worksheet, currentSheet, config } = params;\n        const { margins = {}, pageSetup, headerFooterConfig, suppressColumnOutline } = config;\n\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const mergedCells = (columns && columns.length) ? getMergedCellsAndAddColumnGroups(rows, columns, !!suppressColumnOutline) : [];\n\n        const worksheetExcelTables = ExcelXlsxFactory.worksheetDataTables.get(currentSheet);\n\n        const createWorksheetChildren = _.compose(\n            addSheetPr(),\n            addSheetFormatPr(rows),\n            addColumns(columns),\n            addSheetData(rows, currentSheet + 1),\n            addMergeCells(mergedCells),\n            addPageMargins(margins),\n            addPageSetup(pageSetup),\n            addHeaderFooter(headerFooterConfig),\n            addDrawingRel(currentSheet),\n            addExcelTableParts(worksheetExcelTables, currentSheet),\n        );\n\n        const children = createWorksheetChildren([]);\n\n        return {\n            name: \"worksheet\",\n            properties: {\n                prefixedAttributes:[{\n                    prefix: \"xmlns:\",\n                    map: {\n                        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                    }\n                }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default worksheetFactory;\n", "import { ExcelOOXMLTemplate, ExcelColumn } from '@ag-grid-community/core';\n\n// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-column-widths\nconst getExcelCellWidth = (width: number): number => Math.ceil((width - 12) / 7 + 1);\n\nconst columnFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelColumn) {\n        const { min, max, outlineLevel, s, width, hidden, bestFit } = config;\n        let excelWidth = 1;\n        let customWidth = '0';\n\n        if (width! > 1) {\n            excelWidth = getExcelCellWidth(width!);\n            customWidth = '1';\n        }\n\n        return {\n            name: 'col',\n            properties: {\n                rawMap: {\n                    min: min,\n                    max: max,\n                    outlineLevel: outlineLevel != null ? outlineLevel : undefined,\n                    width: excelWidth,\n                    style: s,\n                    hidden: hidden ? '1' : '0',\n                    bestFit: bestFit ? '1' : '0',\n                    customWidth: customWidth\n                }\n            }\n        };\n    }\n};\n\nexport default columnFactory;\n", "import { ExcelOOXMLTemplate, ExcelCell, _ } from '@ag-grid-community/core';\nimport { getStyleId } from './styles/stylesheet';\n\nconst convertLegacyType = (type: string): string => {\n    const t = type.charAt(0).toLowerCase();\n\n    return t === 's' ? 'inlineStr' : t;\n};\n\nconst cellFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelCell, idx: number, currentSheet: number) {\n        const { ref, data, styleId } = config;\n        const { type, value } = data || { type: 'empty', value: null };\n        let convertedType: string = type;\n\n        if (type === 'f') {\n            convertedType = 'str';\n        } else if (type.charAt(0) === type.charAt(0).toUpperCase()) {\n            convertedType = convertLegacyType(type);\n        }\n\n        const obj = {\n            name: 'c',\n            properties: {\n                rawMap: {\n                    r: ref,\n                    t: convertedType === 'empty' ? undefined : convertedType,\n                    s: styleId ? getStyleId(styleId as string, currentSheet) : undefined\n                }\n            }\n        };\n\n        if (convertedType === 'empty') { return obj; }\n\n        let children;\n\n        if (convertedType === 'str' && type === 'f') {\n            children = [{\n                name: 'f',\n                textNode: _.escapeString(value)\n            }];\n        } else if (convertedType === 'inlineStr') {\n            children = [{\n                name: 'is',\n                children: [{\n                    name: 't',\n                    textNode: _.escapeString(value)\n                }]\n            }];\n        } else {\n            children = [{\n                name: 'v',\n                textNode: value,\n            }];\n        }\n\n        return Object.assign({}, obj, { children });\n    }\n};\n\nexport default cellFactory;\n", "import { ExcelOOXMLTemplate, ExcelCell, ExcelRow } from '@ag-grid-community/core';\nimport { getExcelColumnName } from '../../assets/excelUtils';\nimport cellFactory from './cell';\n\nconst addEmptyCells = (cells: ExcelCell[], rowIdx: number): void => {\n    const mergeMap: { pos: number, excelPos: number }[] = [];\n    let posCounter = 0;\n    for (let i = 0; i < cells.length; i++) {\n        const cell = cells[i];\n        if (cell.mergeAcross) {\n            mergeMap.push({\n                pos: i,\n                excelPos: posCounter\n            });\n            posCounter += cell.mergeAcross;\n        }\n        posCounter++;\n    }\n\n    if (mergeMap.length) {\n        for (let i = mergeMap.length - 1; i >= 0; i--) {\n            const mergedCells: ExcelCell[] = [];\n            const cell = cells[mergeMap[i].pos];\n            for (let j = 1; j <= cell.mergeAcross!; j++) {\n                mergedCells.push({\n                    ref: `${getExcelColumnName(mergeMap[i].excelPos + 1 + j)}${rowIdx + 1}`,\n                    styleId: cell.styleId,\n                    data: { type: 'empty', value: null }\n                });\n            }\n            if (mergedCells.length) {\n                cells.splice(mergeMap[i].pos + 1, 0, ...mergedCells);\n            }\n\n        }\n    }\n};\n\nconst shouldDisplayCell = (cell: ExcelCell) => cell.data?.value !== '' || cell.styleId !== undefined;\n\nconst rowFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelRow, idx: number, currentSheet: number) {\n        const { collapsed, hidden, height, outlineLevel, cells = [] } = config;\n        addEmptyCells(cells, idx);\n        const children = cells.filter(shouldDisplayCell).map((cell, idx) => cellFactory.getTemplate(cell, idx, currentSheet));\n\n        return {\n            name: \"row\",\n            properties: {\n                rawMap: {\n                    r: idx + 1,\n                    collapsed: collapsed ? '1' : '0',\n                    hidden: hidden ? '1' : '0',\n                    ht: height,\n                    customHeight: height != null ? '1' : '0',\n                    spans: '1:1',\n                    outlineLevel: outlineLevel || undefined\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default rowFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst mergeCellFactory: ExcelOOXMLTemplate = {\n    getTemplate(ref: string) {\n        return {\n            name: 'mergeCell',\n            properties: {\n                rawMap: {\n                    ref: ref\n                }\n            }\n        };\n    }\n};\n\nexport default mergeCellFactory;\n", "import { ExcelOOXMLTemplate, ExcelRelationship } from '@ag-grid-community/core';\n\nconst relationshipFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelRelationship) {\n        const {Id, Type, Target} = config;\n        return {\n            name: \"Relationship\",\n            properties: {\n                rawMap: {\n                    Id,\n                    Type,\n                    Target\n                }\n            }\n        };\n    }\n};\n\nexport default relationshipFactory;\n", "import { ExcelOOXMLTemplate, ExcelRelationship } from '@ag-grid-community/core';\nimport relationshipFactory from './relationship';\n\nconst relationshipsFactory: ExcelOOXMLTemplate = {\n    getTemplate(c: ExcelRelationship[]) {\n        const children = c.map(relationship => relationshipFactory.getTemplate(relationship));\n\n        return {\n            name: \"Relationships\",\n            properties: {\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default relationshipsFactory;\n", "import {\n    Column,\n    ColumnGroup,\n    ColumnWidthCallbackParams,\n    ExcelCell,\n    ExcelColumn,\n    ExcelImage,\n    ExcelHeaderFooterConfig,\n    ExcelOOXMLDataType,\n    ExcelRow,\n    ExcelSheetPageSetup,\n    ExcelSheetMargin,\n    ExcelStyle,\n    ExcelWorksheet,\n    ExcelTableConfig,\n    RowHeightCallbackParams,\n    RowNode,\n    _,\n} from '@ag-grid-community/core';\n\nimport {\n    BaseGridSerializingSession,\n    GridSerializingParams,\n    RowAccumulator,\n    RowSpanningAccumulator,\n    RowType\n} from \"@ag-grid-community/csv-export\";\n\nimport { ExcelXlsxFactory } from './excelXlsxFactory';\nimport { getHeightFromProperty } from './assets/excelUtils';\n\nexport interface StyleLinkerInterface {\n    rowType: RowType;\n    rowIndex: number;\n    value: string;\n    column?: Column;\n    columnGroup?: ColumnGroup;\n    node?: RowNode;\n}\n\ninterface ExcelMixedStyle {\n    key: string;\n    excelID: string;\n    result: ExcelStyle;\n}\n\nexport interface ExcelGridSerializingParams extends GridSerializingParams {\n    autoConvertFormulas?: boolean;\n    baseExcelStyles: ExcelStyle[];\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    margins?: ExcelSheetMargin;\n    pageSetup?: ExcelSheetPageSetup;\n    exportAsExcelTable?: boolean | ExcelTableConfig;\n    sheetName: string;\n    suppressColumnOutline?: boolean;\n    suppressRowOutline?: boolean;\n    rowGroupExpandState?:  'expanded' | 'collapsed' | 'match';\n    styleLinker: (params: StyleLinkerInterface) => string[];\n    addImageToCell?: (rowIndex: number, column: Column, value: string) => { image: ExcelImage, value?: string } | undefined;\n}\n\nexport class ExcelSerializingSession extends BaseGridSerializingSession<ExcelRow[]> {\n\n    private readonly config: ExcelGridSerializingParams;\n    private readonly stylesByIds: { [key: string]: ExcelStyle };\n\n    private mixedStyles: { [key: string]: ExcelMixedStyle } = {};\n    private mixedStyleCounter: number = 0;\n\n    private readonly excelStyles: (ExcelStyle & { quotePrefix?: 1 })[];\n\n    private rows: ExcelRow[] = [];\n    private cols: ExcelColumn[];\n    private columnsToExport: Column[];\n\n    constructor(config: ExcelGridSerializingParams) {\n        super(config);\n        this.config = Object.assign({}, config);\n        this.stylesByIds = {};\n        this.config.baseExcelStyles.forEach(style => {\n            this.stylesByIds[style.id] = style;\n        });\n        this.excelStyles = [...this.config.baseExcelStyles, { id: '_quotePrefix', quotePrefix: 1 }];\n    }\n\n    public addCustomContent(customContent: ExcelRow[]): void {\n        customContent.forEach(row => {\n            const rowLen = this.rows.length + 1;\n            let outlineLevel: number | undefined;\n\n            if (!this.config.suppressRowOutline && row.outlineLevel != null) {\n                outlineLevel = row.outlineLevel;\n            }\n\n            const rowObj: ExcelRow = {\n                height: getHeightFromProperty(rowLen, row.height || this.config.rowHeight),\n                cells: (row.cells || []).map((cell, idx) => {\n                    const image = this.addImage(rowLen, this.columnsToExport[idx], cell.data?.value as string);\n\n                    let excelStyles: string[] | null = null;\n                    \n                    if (cell.styleId) {\n                        excelStyles = typeof cell.styleId === 'string' ? [cell.styleId] : cell.styleId;\n                    }\n\n                    const excelStyleId = this.getStyleId(excelStyles);\n\n                    if (image) {\n                        return this.createCell(excelStyleId, this.getDataTypeForValue(image.value), image.value == null ? '' : image.value);\n                    }\n\n                    const value = cell.data?.value ?? '';\n                    const type = this.getDataTypeForValue(value);\n\n                    if (cell.mergeAcross) {\n                        return this.createMergedCell(excelStyleId, type, value, cell.mergeAcross)\n                    }\n\n                    return this.createCell(excelStyleId, type, value);\n                }),\n                outlineLevel\n            };\n\n            if (row.collapsed != null) { rowObj.collapsed = row.collapsed; }\n            if (row.hidden != null) { rowObj.hidden = row.hidden; }\n\n            this.rows.push(rowObj);\n        });\n    }\n\n    public onNewHeaderGroupingRow(): RowSpanningAccumulator {\n        const currentCells: ExcelCell[] = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight)\n        });\n        return {\n            onColumn: (columnGroup: ColumnGroup, header: string, index: number, span: number, collapsibleRanges: number[][]) => {\n                const styleIds: string[] = this.config.styleLinker({ rowType: RowType.HEADER_GROUPING, rowIndex: 1, value: `grouping-${header}`, columnGroup });\n                currentCells.push({\n                    ...this.createMergedCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), header, span),\n                    collapsibleRanges\n                });\n            }\n        };\n    }\n\n    public onNewHeaderRow(): RowAccumulator {\n        return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n    }\n\n    public onNewBodyRow(node?: RowNode): RowAccumulator {\n        const rowAccumulator = this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n\n        if (node) {\n            this.addRowOutlineIfNecessary(node);\n        }\n\n        return rowAccumulator;\n    }\n\n    public prepare(columnsToExport: Column[]): void {\n        super.prepare(columnsToExport);\n        this.columnsToExport = [...columnsToExport];\n        this.cols = columnsToExport.map((col, i) => this.convertColumnToExcel(col, i));\n    }\n\n    public parse(): string {\n        // adding custom content might have made some rows wider than the grid, so add new columns\n        const longestRow = this.rows.reduce((a, b) => Math.max(a, b.cells.length), 0);\n        while (this.cols.length < longestRow) {\n            this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n        }\n\n        const data: ExcelWorksheet = {\n            name: this.config.sheetName,\n            table: {\n                columns: this.cols,\n                rows: this.rows\n            }\n        };\n\n        return this.createExcel(data);\n    }\n\n    private addRowOutlineIfNecessary(node: RowNode): void {\n        const { gridOptionsService, suppressRowOutline, rowGroupExpandState = 'expanded' } = this.config;\n        const isGroupHideOpenParents = gridOptionsService.get('groupHideOpenParents');\n\n        if (isGroupHideOpenParents || suppressRowOutline || node.level == null) { return; }\n\n        const padding = node.footer ? 1 : 0;\n        const currentRow = _.last(this.rows);\n\n        currentRow.outlineLevel = node.level + padding;\n\n        if (rowGroupExpandState === 'expanded') { return; }\n\n        const collapseAll = rowGroupExpandState === 'collapsed';\n\n        if (node.isExpandable()) {\n            const isExpanded = !collapseAll && node.expanded;\n            currentRow.collapsed = !isExpanded;\n        }\n\n        currentRow.hidden = \n            // always show the node if there is no parent to be expanded\n            !!node.parent &&\n            // or if it is a child of the root node\n            node.parent.level !== -1 &&\n            (collapseAll || this.isAnyParentCollapsed(node.parent));\n    }\n\n    private isAnyParentCollapsed(node?: RowNode | null): boolean {\n        while (node && node.level !== -1) {\n            if (!node.expanded) { return true; }\n\n            node = node.parent;\n        }\n\n        return false;\n    }\n\n    private convertColumnToExcel(column: Column | null, index: number): ExcelColumn {\n        const columnWidth = this.config.columnWidth;\n        const headerValue = column ? this.extractHeaderValue(column) : undefined;\n        const displayName = headerValue ?? '';\n        const filterAllowed = column ? column.isFilterAllowed() : false;\n        if (columnWidth) {\n            if (typeof columnWidth === 'number') {\n                return { width: columnWidth, displayName, filterAllowed };\n            }\n\n            return { width: columnWidth({ column, index }), displayName, filterAllowed };\n        }\n\n        if (column) {\n            const smallestUsefulWidth = 75;\n            return { width: Math.max(column.getActualWidth(), smallestUsefulWidth), displayName, filterAllowed };\n        }\n\n        return {\n            displayName,\n            filterAllowed,\n        };\n    }\n\n    private onNewHeaderColumn(rowIndex: number, currentCells: ExcelCell[]): (column: Column, index: number, node: RowNode) => void {\n        return (column) => {\n            const nameForCol = this.extractHeaderValue(column);\n            const styleIds: string[] = this.config.styleLinker({ rowType: RowType.HEADER, rowIndex, value: nameForCol, column });\n            currentCells.push(this.createCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), nameForCol));\n        };\n    }\n\n    private onNewBodyColumn(rowIndex: number, currentCells: ExcelCell[]): (column: Column, index: number, node: RowNode) => void {\n        let skipCols = 0;\n\n        return (column, index, node) => {\n            if (skipCols > 0) {\n                skipCols -= 1;\n                return;\n            }\n\n            const { value: valueForCell, valueFormatted } = this.extractRowCellValue(column, index, rowIndex, 'excel', node);\n            const styleIds: string[] = this.config.styleLinker({ rowType: RowType.BODY, rowIndex, value: valueForCell, column, node });\n            const excelStyleId: string | null = this.getStyleId(styleIds);\n            const colSpan = column.getColSpan(node);\n            const addedImage = this.addImage(rowIndex, column, valueForCell);\n\n            if (addedImage) {\n                currentCells.push(this.createCell(excelStyleId, this.getDataTypeForValue(addedImage.value), addedImage.value == null ? '' : addedImage.value));\n            } else if (colSpan > 1) {\n                skipCols = colSpan - 1;\n                currentCells.push(this.createMergedCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, colSpan - 1));\n            } else {\n                currentCells.push(this.createCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, valueFormatted));\n            }\n        };\n    }\n\n    private onNewRow(onNewColumnAccumulator: (rowIndex: number, currentCells: ExcelCell[]) => (column: Column, index: number, node: RowNode) => void, height?: number | ((params: RowHeightCallbackParams) => number)): RowAccumulator {\n        const currentCells: ExcelCell[] = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, height)\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n        };\n    }\n\n    private createExcel(data: ExcelWorksheet): string {\n        const { excelStyles, config } = this;\n\n        return ExcelXlsxFactory.createExcel(\n            excelStyles,\n            data,\n            config\n        );\n    }\n\n    private getDataTypeForValue(valueForCell?: string): ExcelOOXMLDataType {\n        if (valueForCell === undefined) { return 'empty'; }\n        return this.isNumerical(valueForCell) ? 'n' : 's';\n    }\n\n    private getTypeFromStyle(style: ExcelStyle | null, value: string | null): ExcelOOXMLDataType | null {\n        if (this.isFormula(value)) { return 'f'; }\n\n        if (style && style.dataType) {\n            switch (style.dataType.toLocaleLowerCase()) {\n                case 'formula':\n                    return 'f';\n                case 'string':\n                    return 's';\n                case 'number':\n                    return 'n';\n                case 'datetime':\n                    return 'd';\n                case 'error':\n                    return 'e';\n                case 'boolean':\n                    return 'b';\n                default:\n                    console.warn(`AG Grid: Unrecognized data type for excel export [${style.id}.dataType=${style.dataType}]`);\n            }\n        }\n\n        return null;\n    }\n\n    private addImage(rowIndex: number, column: Column, value: string): { image: ExcelImage, value?: string } | undefined {\n        if (!this.config.addImageToCell) { return; }\n\n        const addedImage = this.config.addImageToCell(rowIndex, column, value);\n\n        if (!addedImage) { return; }\n\n        ExcelXlsxFactory.buildImageMap(addedImage.image, rowIndex, column, this.columnsToExport, this.config.rowHeight);\n\n        return addedImage;\n    }\n\n    private createCell(styleId: string | null | undefined, type: ExcelOOXMLDataType, value: string, valueFormatted?: string | null): ExcelCell {\n        const actualStyle: ExcelStyle | null = this.getStyleById(styleId);\n        if (!actualStyle?.dataType && type === 's' && valueFormatted) {\n            value = valueFormatted;\n        }\n        const processedType = this.getTypeFromStyle(actualStyle, value) || type;\n\n        const { value: processedValue, escaped } = this.getCellValue(processedType, value);\n        const styles: string[] = [];\n\n        if (actualStyle) {\n            styles.push(styleId!);\n        }\n\n        if (escaped) {\n            styles.push('_quotePrefix');\n        }\n\n        styleId = this.getStyleId(styles) || undefined;\n\n        return {\n            styleId,\n            data: {\n                type: processedType,\n                value: processedValue\n            }\n        };\n    }\n\n    private createMergedCell(styleId: string | null, type: ExcelOOXMLDataType, value: string, numOfCells: number): ExcelCell {\n        const valueToUse = value == null ? '' : value;\n        return {\n            styleId: !!this.getStyleById(styleId) ? styleId! : undefined,\n            data: {\n                type: type,\n                value: type === 's' ? ExcelXlsxFactory.getStringPosition(valueToUse).toString() : value\n            },\n            mergeAcross: numOfCells\n        };\n    }\n\n    private getCellValue(type: ExcelOOXMLDataType, value: string | null): { value: string | null, escaped?: boolean } {\n        let escaped = false;\n\n        if (value == null) {\n            type = 's';\n            value = '';\n        }\n\n        if (type === 's') {\n            if (value && value[0] === \"'\") {\n                escaped = true;\n                value = value.slice(1);\n            }\n\n            value = ExcelXlsxFactory.getStringPosition(value).toString()\n        } else if (type === 'f') {\n            value = value.slice(1);\n        } else  if (type === 'n') {\n            value = Number(value).toString();\n        }\n\n        return { value, escaped };\n    }\n\n    private getStyleId(styleIds?: string[] | null): string | null {\n        if (!styleIds || !styleIds.length) { return null; }\n        if (styleIds.length === 1) { return styleIds[0]; }\n\n        const key: string = styleIds.join(\"-\");\n        if (!this.mixedStyles[key]) {\n            this.addNewMixedStyle(styleIds);\n        }\n        return this.mixedStyles[key].excelID;\n    }\n\n    private deepCloneObject<T>(object: T): T {\n        return JSON.parse(JSON.stringify(object));\n    }\n\n    private addNewMixedStyle(styleIds: string[]): void {\n        this.mixedStyleCounter += 1;\n        const excelId = `mixedStyle${this.mixedStyleCounter}`;\n        const resultantStyle: ExcelStyle = {} as ExcelStyle;\n\n        for (const styleId of styleIds) {\n            for (const excelStyle of this.excelStyles) {\n                if (excelStyle.id === styleId) {\n                    _.mergeDeep(resultantStyle, this.deepCloneObject(excelStyle));\n                }\n            }\n        }\n\n        resultantStyle.id = excelId;\n        resultantStyle.name = excelId;\n        const key: string = styleIds.join(\"-\");\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    }\n\n    private isFormula(value: string | null) {\n        if (value == null) { return false; }\n        return this.config.autoConvertFormulas && value.toString().startsWith('=');\n    }\n\n    private isNumerical(value: any): boolean {\n        if (typeof value === 'bigint') { return true; }\n        return isFinite(value) && value !== '' && !isNaN(parseFloat(value));\n    }\n\n    private getStyleById(styleId?: string | null): ExcelStyle | null {\n        if (styleId == null) { return null; }\n        return this.stylesByIds[styleId] || null;\n    }\n\n\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { FiltersToolPanelHeaderPanel } from \"./filterToolPanel/filtersToolPanelHeaderPanel\";\nimport { FiltersToolPanelListPanel } from \"./filterToolPanel/filtersToolPanelListPanel\";\nimport { FiltersToolPanel } from \"./filterToolPanel/filtersToolPanel\";\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\";\nimport { VERSION } from \"./version\";\n\nexport const FiltersToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.FiltersToolPanelModule,\n    beans: [],\n    agStackComponents: [\n        { componentName: 'AgFiltersToolPanelHeader', componentClass: FiltersToolPanelHeaderPanel },\n        { componentName: 'AgFiltersToolPanelList', componentClass: FiltersToolPanelListPanel }\n    ],\n    userComponents: [\n        { componentName: 'agFiltersToolPanel', componentClass: FiltersToolPanel },\n    ],\n    dependantModules: [\n        SideBarModule,\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    _,\n    Autowired, Column,\n    ColumnModel,\n    Component,\n    Events,\n    PostConstruct,\n    PreConstruct,\n    RefSelector,\n    AgInputTextField\n} from \"@ag-grid-community/core\";\nimport { ToolPanelFiltersCompParams } from \"./filtersToolPanel\";\n\nexport enum EXPAND_STATE { EXPANDED, COLLAPSED, INDETERMINATE }\n\nexport class FiltersToolPanelHeaderPanel extends Component {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    @RefSelector('eExpand') private eExpand: Element;\n    @RefSelector('eFilterTextField') private eFilterTextField: AgInputTextField;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private onSearchTextChangedDebounced: () => void;\n\n    private currentExpandState: EXPAND_STATE;\n\n    private params: ToolPanelFiltersCompParams;\n\n    @PreConstruct\n    private preConstruct(): void {\n        this.setTemplate(/* html */\n            `<div class=\"ag-filter-toolpanel-search\" role=\"presentation\">\n                <div ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <ag-input-text-field ref=\"eFilterTextField\" class=\"ag-filter-toolpanel-search-input\"></ag-input-text-field>\n            </div>`\n        );\n    }\n\n    @PostConstruct\n    public postConstruct(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField\n            .setAutoComplete(false)\n            .setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'))\n            .onValueChange(this.onSearchTextChanged.bind(this));\n\n        this.createExpandIcons();\n        this.setExpandState(EXPAND_STATE.EXPANDED);\n        this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        this.params = params;\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild(this.eExpandChecked = _.createIconNoSpan('columnSelectOpen', this.gridOptionsService)!);\n        this.eExpand.appendChild(this.eExpandUnchecked = _.createIconNoSpan('columnSelectClosed', this.gridOptionsService)!);\n        this.eExpand.appendChild(this.eExpandIndeterminate = _.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsService)!);\n    }\n\n    // we only show expand / collapse if we are showing filters\n    private showOrHideOptions(): void {\n        const showFilterSearch = !this.params.suppressFilterSearch;\n        const showExpand = !this.params.suppressExpandAll;\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        const isFilterGroupPresent = (col: Column) => col.getOriginalParent() && col.isFilterAllowed();\n        const filterGroupsPresent = this.columnModel.getAllGridColumns().some(isFilterGroupPresent);\n\n        _.setDisplayed(this.eFilterTextField.getGui(), showFilterSearch);\n        _.setDisplayed(this.eExpand, showExpand && filterGroupsPresent);\n    }\n\n    private onSearchTextChanged(): void {\n        if (!this.onSearchTextChangedDebounced) {\n            this.onSearchTextChangedDebounced = _.debounce(() => {\n                this.dispatchEvent({type: 'searchChanged', searchText: this.eFilterTextField.getValue()});\n            }, 300);\n        }\n\n        this.onSearchTextChangedDebounced();\n    }\n\n    private onExpandClicked(): void {\n        const event = this.currentExpandState === EXPAND_STATE.EXPANDED ? {type: 'collapseAll'} : {type: 'expandAll'};\n        this.dispatchEvent(event);\n    }\n\n    public setExpandState(state: EXPAND_STATE): void {\n        this.currentExpandState = state;\n\n        _.setDisplayed(this.eExpandChecked, this.currentExpandState === EXPAND_STATE.EXPANDED);\n        _.setDisplayed(this.eExpandUnchecked, this.currentExpandState === EXPAND_STATE.COLLAPSED);\n        _.setDisplayed(this.eExpandIndeterminate, this.currentExpandState === EXPAND_STATE.INDETERMINATE);\n    }\n}\n", "import {\n    _,\n    AbstractColDef,\n    Autowired,\n    Column,\n    ColumnModel,\n    Component,\n    Events,\n    ProvidedColumnGroup,\n    IProvidedColumn,\n    FiltersToolPanelState\n} from \"@ag-grid-community/core\";\n\nimport { ToolPanelFilterComp } from \"./toolPanelFilterComp\";\nimport { ToolPanelFiltersCompParams } from \"./filtersToolPanel\";\nimport { ToolPanelFilterGroupComp, ToolPanelFilterItem } from \"./toolPanelFilterGroupComp\";\nimport { EXPAND_STATE } from \"./filtersToolPanelHeaderPanel\";\nimport { ToolPanelColDefService } from \"@ag-grid-enterprise/side-bar\";\n\nexport class FiltersToolPanelListPanel extends Component {\n\n    private static TEMPLATE = /* html */ `<div class=\"ag-filter-list-panel\"></div>`;\n\n    @Autowired('toolPanelColDefService') private toolPanelColDefService: ToolPanelColDefService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private initialised = false;\n    private hasLoadedInitialState = false;\n    private isInitialState = false;\n\n    private params: ToolPanelFiltersCompParams;\n    private filterGroupComps: ToolPanelFilterGroupComp[] = [];\n\n    // null is used to check if we should search filters when new cols are loaded\n    private searchFilterText: string | null;\n\n    // If a column drag is happening, we suppress handling the event until it has completed\n    private suppressOnColumnsChanged: boolean = false;\n    private onColumnsChangedPending: boolean = false;\n\n    constructor() {\n        super(FiltersToolPanelListPanel.TEMPLATE);\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        this.initialised = true;\n\n        const defaultParams: Partial<ToolPanelFiltersCompParams> = this.gridOptionsService.addGridCommonParams({\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false\n        });\n        _.mergeDeep(defaultParams, params);\n        this.params = defaultParams as ToolPanelFiltersCompParams;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, () => this.onColumnsChanged());\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n\n        this.addManagedListener(this.eventService, Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED, (event) => {\n            // when re-entering the filters tool panel we need to refresh the virtual lists in the set filters in case\n            // filters have been changed elsewhere, i.e. via an api call.\n            if (event.key === 'filters') {\n                this.refreshFilters(event.visible);\n            }\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_DRAG_STARTED, () => {\n            this.suppressOnColumnsChanged = true;\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_DRAG_STOPPED, () => {\n            this.suppressOnColumnsChanged = false;\n            if (this.onColumnsChangedPending) {\n                this.onColumnsChangedPending = false;\n                this.onColumnsChanged();\n            }\n        });\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n    }\n\n    public onColumnsChanged(): void {\n        if (this.suppressOnColumnsChanged) {\n            this.onColumnsChangedPending = true;\n            return;\n        }\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        shouldSyncColumnLayoutWithGrid ? this.syncFilterLayout() : this.buildTreeFromProvidedColumnDefs();\n        this.refreshAriaLabel();\n    }\n\n    public syncFilterLayout(): void {\n        this.toolPanelColDefService.syncLayoutWithGrid(this.setFiltersLayout.bind(this));\n        this.refreshAriaLabel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        const columnTree: IProvidedColumn[] = this.columnModel.getPrimaryColumnTree();\n        this.recreateFilters(columnTree);\n    }\n\n    public setFiltersLayout(colDefs: AbstractColDef[]): void {\n        const columnTree: IProvidedColumn[] = this.toolPanelColDefService.createColumnTree(colDefs);\n        this.recreateFilters(columnTree);\n    }\n\n    private recreateFilters(columnTree: IProvidedColumn[]): void {\n        // Underlying filter comp/element won't get recreated if the column still exists (the element just gets detached/re-attached).\n        // We can therefore restore focus if an element in the filter tool panel was focused.\n        const activeElement = this.gridOptionsService.getDocument().activeElement as HTMLElement;\n\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        // Want to restore the expansion state where possible.\n        const expansionState = this.getExpansionState();\n\n        this.destroyFilters();\n\n        this.filterGroupComps = this.recursivelyAddComps(columnTree, 0, expansionState) as ToolPanelFilterGroupComp[];\n\n        const len = this.filterGroupComps.length;\n\n        if (len) {\n            // skip the destroy function because this will be managed\n            // by the `destroyFilters` function\n            this.filterGroupComps.forEach(comp => this.appendChild(comp));\n            this.setFirstAndLastVisible(0, len - 1);\n        }\n\n        // perform search if searchFilterText exists\n        if (_.exists(this.searchFilterText)) {\n            this.searchFilters(this.searchFilterText);\n        }\n\n        // notify header of expand\n        this.fireExpandedEvent();\n\n        // We only care about restoring focus if the originally focused element was in the filter tool panel.\n        if (this.getGui().contains(activeElement)) {\n            activeElement.focus();\n        }\n\n        this.isInitialState = false;\n        this.refreshAriaLabel();\n    }\n\n    private recursivelyAddComps(tree: IProvidedColumn[], depth: number, expansionState: Map<string, boolean>): (ToolPanelFilterGroupComp | ToolPanelFilterComp)[] {\n        return _.flatten(tree.map(child => {\n            if (child instanceof ProvidedColumnGroup) {\n                return _.flatten(this.recursivelyAddFilterGroupComps(child, depth, expansionState)!);\n            }\n\n            const column = child as Column;\n\n            if (!this.shouldDisplayFilter(column)) { return []; }\n\n            const hideFilterCompHeader = depth === 0;\n            const filterComp = new ToolPanelFilterComp(hideFilterCompHeader, () => this.onFilterExpanded());\n            this.createBean(filterComp);\n\n            filterComp.setColumn(column);\n            if (expansionState.get(column.getId())) {\n                // Default state on creation and desired state are both collapsed. Expand if expanded before.\n                filterComp.expand();\n            }\n\n            if (depth > 0) { return filterComp; }\n\n            const filterGroupComp = this.createBean(new ToolPanelFilterGroupComp(column, [filterComp], this.onGroupExpanded.bind(this), depth, true));\n            filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n            if (!expansionState.get(filterGroupComp.getFilterGroupId())) {\n                // Default state on creation is expanded. Desired initial state is collapsed. Always collapse unless expanded before.\n                filterGroupComp.collapse();\n            }\n            return filterGroupComp;\n        }));\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterPanelList', 'Filter List');\n        const localeFilters = translate('filters', 'Filters');\n\n        const eGui = this.getGui();\n        const groupSelector = '.ag-filter-toolpanel-group-wrapper';\n        const itemSelector = '.ag-filter-toolpanel-group-item';\n        const hiddenSelector = '.ag-hidden';\n        const visibleItems = eGui.querySelectorAll(`${itemSelector}:not(${groupSelector}, ${hiddenSelector})`);\n\n        const totalVisibleItems = visibleItems.length;\n\n        _.setAriaLabel(this.getAriaElement(), `${filterListName} ${totalVisibleItems} ${localeFilters}`);\n\n    }\n\n    private recursivelyAddFilterGroupComps(\n        columnGroup: ProvidedColumnGroup,\n        depth: number,\n        expansionState: Map<string, boolean>\n    ): (ToolPanelFilterGroupComp | ToolPanelFilterComp)[] | undefined {\n        if (!this.filtersExistInChildren(columnGroup.getChildren())) { return; }\n\n        const colGroupDef = columnGroup.getColGroupDef();\n        if (colGroupDef && colGroupDef.suppressFiltersToolPanel) { return []; }\n\n        const newDepth = columnGroup.isPadding() ? depth : depth + 1;\n        const childFilterComps = _.flatten(this.recursivelyAddComps(columnGroup.getChildren(), newDepth, expansionState));\n\n        if (columnGroup.isPadding()) { return childFilterComps; }\n\n        const filterGroupComp =\n            new ToolPanelFilterGroupComp(columnGroup, childFilterComps, this.onGroupExpanded.bind(this), depth, false);\n\n        this.createBean(filterGroupComp);\n        filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n        const expansionStateValue = expansionState.get(filterGroupComp.getFilterGroupId());\n        if ((this.isInitialState && !expansionStateValue) || expansionStateValue === false) {\n            // Default state on creation is expanded. Desired initial state is expanded. Only collapse if collapsed before or using initial state.\n            filterGroupComp.collapse();\n        }\n        return [filterGroupComp];\n    }\n\n    private filtersExistInChildren(tree: IProvidedColumn[]): boolean {\n        return tree.some(child => {\n            if (child instanceof ProvidedColumnGroup) {\n                return this.filtersExistInChildren(child.getChildren());\n            }\n\n            return this.shouldDisplayFilter(child as Column);\n        });\n    }\n\n    private shouldDisplayFilter(column: Column) {\n        const suppressFiltersToolPanel = column.getColDef() && column.getColDef().suppressFiltersToolPanel;\n        return column.isFilterAllowed() && !suppressFiltersToolPanel;\n    }\n\n    private getExpansionState(): Map<string, boolean> {\n        const expansionState: Map<string, boolean> = new Map();\n\n        if (this.isInitialState) {\n            const { expandedColIds, expandedGroupIds } = this.params.initialState as FiltersToolPanelState;\n            expandedColIds.forEach(id => expansionState.set(id, true));\n            expandedGroupIds.forEach(id => expansionState.set(id, true));\n            return expansionState;\n        }\n\n        const recursiveGetExpansionState = (filterGroupComp: ToolPanelFilterGroupComp) => {\n            expansionState.set(filterGroupComp.getFilterGroupId(), filterGroupComp.isExpanded());\n            filterGroupComp.getChildren().forEach(child => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    recursiveGetExpansionState(child);\n                } else {\n                    expansionState.set(child.getColumn().getId(), child.isExpanded());\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(recursiveGetExpansionState);\n\n        return expansionState\n    }\n\n    // we don't support refreshing, but must implement because it's on the tool panel interface\n    public refresh(): void { }\n\n    // lazy initialise the panel\n    public setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public expandFilterGroups(expand: boolean, groupIds?: string[]): void {\n        const updatedGroupIds: string[] = [];\n\n        const updateGroupExpandState = (filterGroup: ToolPanelFilterGroupComp) => {\n            const groupId = filterGroup.getFilterGroupId();\n            const shouldExpandOrCollapse = !groupIds || _.includes(groupIds, groupId);\n            if (shouldExpandOrCollapse) {\n                // don't expand 'column groups', i.e. top level columns wrapped in a group\n                if (expand && filterGroup.isColumnGroup()) {\n                    filterGroup.expand();\n                } else {\n                    filterGroup.collapse();\n                }\n                updatedGroupIds.push(groupId);\n            }\n\n            // recursively look for more groups to expand / collapse\n            filterGroup.getChildren().forEach(child => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateGroupExpandState(child);\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(updateGroupExpandState);\n\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n\n        if (groupIds) {\n            const unrecognisedGroupIds = groupIds.filter(groupId => updatedGroupIds.indexOf(groupId) < 0);\n            if (unrecognisedGroupIds.length > 0) {\n                console.warn('AG Grid: unable to find groups for these supplied groupIds:', unrecognisedGroupIds);\n            }\n        }\n    }\n\n    public expandFilters(expand: boolean, colIds?: string[]): void {\n        const updatedColIds: string[] = [];\n\n        const updateGroupExpandState = (filterComp: ToolPanelFilterGroupComp | ToolPanelFilterComp): boolean => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                let anyChildrenChanged = false;\n                filterComp.getChildren().forEach(child => {\n                    const childUpdated = updateGroupExpandState(child);\n                    if (childUpdated) {\n                        if (expand) {\n                            filterComp.expand();\n                            anyChildrenChanged = true;\n                        } else if (!filterComp.isColumnGroup()) {\n                            // we only collapse columns wrapped in groups\n                            filterComp.collapse();\n                        }\n                    }\n                });\n                return anyChildrenChanged;\n            }\n\n            const colId = filterComp.getColumn().getColId();\n            const updateFilterExpandState = !colIds || _.includes(colIds, colId);\n\n            if (updateFilterExpandState) {\n                expand ? filterComp.expand() : filterComp.collapse();\n                updatedColIds.push(colId);\n            }\n\n            return updateFilterExpandState;\n        };\n\n        this.filterGroupComps.forEach(updateGroupExpandState);\n\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n\n        if (colIds) {\n            const unrecognisedColIds = colIds.filter(colId => updatedColIds.indexOf(colId) < 0);\n            if (unrecognisedColIds.length > 0) {\n                console.warn('AG Grid: unable to find columns for these supplied colIds:', unrecognisedColIds);\n            }\n        }\n    }\n\n    private onGroupExpanded(): void {\n        this.fireExpandedEvent();\n    }\n\n    private onFilterExpanded(): void {\n        this.dispatchEvent({ type: 'filterExpanded' });\n    }\n\n    private fireExpandedEvent(): void {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        const updateExpandCounts = (filterGroup: ToolPanelFilterGroupComp) => {\n            if (!filterGroup.isColumnGroup()) { return; }\n\n            filterGroup.isExpanded() ? expandedCount++ : notExpandedCount++;\n\n            filterGroup.getChildren().forEach(child => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateExpandCounts(child);\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(updateExpandCounts);\n\n        let state: EXPAND_STATE;\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            state = EXPAND_STATE.INDETERMINATE;\n        } else if (notExpandedCount > 0) {\n            state = EXPAND_STATE.COLLAPSED;\n        } else {\n            state = EXPAND_STATE.EXPANDED;\n        }\n\n        this.dispatchEvent({ type: 'groupExpanded', state: state });\n    }\n\n    public performFilterSearch(searchText: string) {\n        this.searchFilterText = _.exists(searchText) ? searchText.toLowerCase() : null;\n        this.searchFilters(this.searchFilterText);\n    }\n\n    private searchFilters(searchFilter: string | null) {\n        const passesFilter = (groupName: string) => {\n            return !_.exists(searchFilter) || groupName.toLowerCase().indexOf(searchFilter) !== -1;\n        };\n\n        const recursivelySearch = (filterItem: ToolPanelFilterItem, parentPasses: boolean): boolean => {\n            if (!(filterItem instanceof ToolPanelFilterGroupComp)) {\n                return passesFilter(filterItem.getColumnFilterName() || '');\n            }\n\n            const children = filterItem.getChildren();\n            const groupNamePasses = passesFilter(filterItem.getFilterGroupName());\n\n            // if group or parent already passed - ensure this group and all children are visible\n            const alreadyPassed = parentPasses || groupNamePasses;\n            if (alreadyPassed) {\n                // ensure group visible\n                filterItem.hideGroup(false);\n\n                // ensure all children are visible\n                for (let i = 0; i < children.length; i++) {\n                    recursivelySearch(children[i], alreadyPassed);\n                    filterItem.hideGroupItem(false, i);\n                }\n                return true;\n            }\n\n            // hide group item filters\n            let anyChildPasses = false;\n            children.forEach((child: ToolPanelFilterItem, index: number) => {\n                const childPasses = recursivelySearch(child, parentPasses);\n                filterItem.hideGroupItem(!childPasses, index);\n                if (childPasses) { anyChildPasses = true; }\n            });\n\n            // hide group if no children pass\n            filterItem.hideGroup(!anyChildPasses);\n\n            return anyChildPasses;\n        };\n\n        let firstVisible: number | undefined;\n        let lastVisible: number | undefined;\n\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            recursivelySearch(filterGroup, false);\n\n            if (firstVisible === undefined) {\n                if (!filterGroup.containsCssClass('ag-hidden')) {\n                    firstVisible = idx;\n                    lastVisible = idx;\n                }\n            } else if (!filterGroup.containsCssClass('ag-hidden') && lastVisible !== idx) {\n                lastVisible = idx;\n            }\n        });\n\n        this.setFirstAndLastVisible(firstVisible, lastVisible);\n        this.refreshAriaLabel();\n    }\n\n    private setFirstAndLastVisible(firstIdx?: number, lastIdx?: number) {\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            filterGroup.removeCssClass('ag-first-group-visible');\n            filterGroup.removeCssClass('ag-last-group-visible');\n\n            if (idx === firstIdx) {\n                filterGroup.addCssClass('ag-first-group-visible');\n            }\n            if (idx === lastIdx) {\n                filterGroup.addCssClass('ag-last-group-visible');\n            }\n        });\n    }\n\n    private refreshFilters(isDisplayed: boolean) {\n        this.filterGroupComps.forEach(filterGroupComp => filterGroupComp.refreshFilters(isDisplayed));\n    }\n\n    public getExpandedFiltersAndGroups(): { expandedGroupIds: string[], expandedColIds: string[] } {\n        const expandedGroupIds: string[] = [];\n        const expandedColIds: Set<string> = new Set();\n\n        const getExpandedFiltersAndGroups = (filterComp: ToolPanelFilterGroupComp | ToolPanelFilterComp) => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.getChildren().forEach(child => getExpandedFiltersAndGroups(child));\n                const groupId = filterComp.getFilterGroupId();\n                if (filterComp.isExpanded() && !expandedColIds.has(groupId)) {\n                    expandedGroupIds.push(groupId);\n                }\n            } else {\n                if (filterComp.isExpanded()) {\n                    expandedColIds.add(filterComp.getColumn().getColId());\n                }\n            }\n        };\n\n        this.filterGroupComps.forEach(getExpandedFiltersAndGroups);\n\n        return { expandedGroupIds, expandedColIds: Array.from(expandedColIds) };\n    }\n\n    private destroyFilters() {\n        this.filterGroupComps = this.destroyBeans(this.filterGroupComps);\n        _.clearElement(this.getGui());\n    }\n\n    protected destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Column,\n    ColumnModel,\n    Component,\n    Events,\n    FilterManager,\n    FilterOpenedEvent,\n    IFilterComp,\n    KeyCode,\n    PostConstruct,\n    RefSelector,\n    FilterDestroyedEvent\n} from \"@ag-grid-community/core\";\n\nexport class ToolPanelFilterComp extends Component {\n    private static TEMPLATE = /* html */`\n        <div class=\"ag-filter-toolpanel-instance\">\n            <div class=\"ag-filter-toolpanel-header ag-filter-toolpanel-instance-header\" ref=\"eFilterToolPanelHeader\" role=\"button\" aria-expanded=\"false\">\n                <div ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <span ref=\"eFilterName\" class=\"ag-header-cell-text\"></span>\n                <span ref=\"eFilterIcon\" class=\"ag-header-icon ag-filter-icon ag-filter-toolpanel-instance-header-icon\" aria-hidden=\"true\"></span>\n            </div>\n            <div class=\"ag-filter-toolpanel-instance-body ag-filter\" ref=\"agFilterToolPanelBody\"></div>\n        </div>`;\n\n    @RefSelector('eFilterToolPanelHeader') private eFilterToolPanelHeader: HTMLElement;\n    @RefSelector('eFilterName') private eFilterName: HTMLElement;\n    @RefSelector('agFilterToolPanelBody') private agFilterToolPanelBody: HTMLElement;\n    @RefSelector('eFilterIcon') private eFilterIcon: Element;\n    @RefSelector('eExpand') private eExpand: Element;\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private hideHeader: boolean;\n    private column: Column;\n    private expanded: boolean = false;\n    private underlyingFilter: IFilterComp | null;\n\n    constructor(hideHeader: boolean, private readonly expandedCallback: () => void) {\n        super(ToolPanelFilterComp.TEMPLATE);\n        this.hideHeader = hideHeader;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.eExpandChecked = _.createIconNoSpan('columnSelectOpen', this.gridOptionsService)!;\n        this.eExpandUnchecked = _.createIconNoSpan('columnSelectClosed', this.gridOptionsService)!;\n        this.eExpand.appendChild(this.eExpandChecked);\n        this.eExpand.appendChild(this.eExpandUnchecked);\n    }\n\n    public setColumn(column: Column): void {\n        this.column = column;\n        this.eFilterName.innerText = this.columnModel.getDisplayNameForColumn(this.column, 'filterToolPanel', false) || '';\n        this.addManagedListener(this.eFilterToolPanelHeader, 'click', this.toggleExpanded.bind(this));\n        this.addManagedListener(this.eFilterToolPanelHeader, 'keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                e.preventDefault();\n                this.toggleExpanded();\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_OPENED, this.onFilterOpened.bind(this));\n        this.addInIcon('filter', this.eFilterIcon, this.column);\n\n        _.setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        _.setDisplayed(this.eExpandChecked, false);\n\n        if (this.hideHeader) {\n            _.setDisplayed(this.eFilterToolPanelHeader, false);\n            this.eFilterToolPanelHeader.removeAttribute('tabindex');\n        } else {\n            this.eFilterToolPanelHeader.setAttribute('tabindex', '0');\n        }\n\n        this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_DESTROYED, this.onFilterDestroyed.bind(this));\n    }\n\n    public getColumn(): Column {\n        return this.column;\n    }\n\n    public getColumnFilterName(): string | null {\n        return this.columnModel.getDisplayNameForColumn(this.column, 'filterToolPanel', false);\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.eFilterToolPanelHeader.classList.add(cssClass);\n    }\n\n    private addInIcon(iconName: string, eParent: Element, column: Column): void {\n        if (eParent == null) { return; }\n\n        const eIcon = _.createIconNoSpan(iconName, this.gridOptionsService, column)!;\n        eParent.appendChild(eIcon);\n    }\n\n    public isFilterActive(): boolean {\n        return this.filterManager.isFilterActive(this.column);\n    }\n\n    private onFilterChanged(): void {\n        _.setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        this.dispatchEvent({ type: Column.EVENT_FILTER_CHANGED });\n    }\n\n    private onFilterDestroyed(event: FilterDestroyedEvent): void {\n        if (\n            this.expanded &&\n            (event.source === 'api' || event.source === 'paramsUpdated') &&\n            event.column.getId() === this.column.getId() &&\n            this.columnModel.getPrimaryColumn(this.column)\n        ) {\n            // filter was visible and has been destroyed by the API or params changing. If the column still exists, need to recreate UI component\n            this.removeFilterElement();\n            this.addFilterElement(true);\n        }\n    }\n\n    public toggleExpanded(): void {\n        this.expanded ? this.collapse() : this.expand();\n    }\n\n    public expand(): void {\n        if (this.expanded) { return; }\n\n        this.expanded = true;\n        _.setAriaExpanded(this.eFilterToolPanelHeader, true);\n\n        _.setDisplayed(this.eExpandChecked, true);\n        _.setDisplayed(this.eExpandUnchecked, false);\n\n        this.addFilterElement();\n\n        this.expandedCallback();\n    }\n\n    private addFilterElement(suppressFocus?: boolean): void {\n        const filterPanelWrapper = _.loadTemplate(/* html */`<div class=\"ag-filter-toolpanel-instance-filter\"></div>`);\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column, 'TOOLBAR');\n\n        if (!filterWrapper) { return; }\n\n        const { filterPromise, guiPromise } = filterWrapper;\n\n        filterPromise?.then(filter => {\n            this.underlyingFilter = filter;\n\n            if (!filter) { return; }\n            guiPromise.then(filterContainerEl => {\n                if (filterContainerEl) {\n                    filterPanelWrapper.appendChild(filterContainerEl);\n                }\n\n                this.agFilterToolPanelBody.appendChild(filterPanelWrapper);\n\n                if (filter.afterGuiAttached) {\n                    filter.afterGuiAttached({ container: 'toolPanel', suppressFocus });\n                }\n            });\n        });\n        \n    }\n\n    public collapse(): void {\n        if (!this.expanded) { return; }\n\n        this.expanded = false;\n        _.setAriaExpanded(this.eFilterToolPanelHeader, false);\n        this.removeFilterElement();\n\n        _.setDisplayed(this.eExpandChecked, false);\n        _.setDisplayed(this.eExpandUnchecked, true);\n\n        this.underlyingFilter?.afterGuiDetached?.();\n\n        this.expandedCallback();\n    }\n\n    private removeFilterElement(): void {\n        _.clearElement(this.agFilterToolPanelBody);\n    }\n\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public refreshFilter(isDisplayed: boolean): void {\n        if (!this.expanded) { return; }\n\n        const filter = this.underlyingFilter as any;\n\n        if (!filter) { return; }\n\n        if (isDisplayed) {\n            // set filters should be updated when the filter has been changed elsewhere, i.e. via api. Note that we can't\n            // use 'afterGuiAttached' to refresh the virtual list as it also focuses on the mini filter which changes the\n            // scroll position in the filter list panel\n            if (typeof filter.refreshVirtualList === 'function') {\n                filter.refreshVirtualList();\n            }\n        } else {\n            filter.afterGuiDetached?.();\n        }\n    }\n\n    private onFilterOpened(event: FilterOpenedEvent): void {\n        if (event.source !== 'COLUMN_MENU') { return; }\n        if (event.column !== this.column) { return; }\n        if (!this.expanded) { return; }\n\n        this.collapse();\n    }\n}\n", "import {\n    _,\n    AgGroupComponent,\n    Autowired,\n    Column,\n    ColumnModel,\n    Component,\n    Events,\n    FilterOpenedEvent,\n    ProvidedColumnGroup,\n    IProvidedColumn,\n    PostConstruct,\n    ITooltipParams,\n    PreConstruct,\n    RefSelector,\n    AgGroupComponentParams,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { ToolPanelFilterComp } from \"./toolPanelFilterComp\";\n\nexport type ToolPanelFilterItem = ToolPanelFilterGroupComp | ToolPanelFilterComp;\n\nexport class ToolPanelFilterGroupComp extends Component {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-filter-toolpanel-group-wrapper\">\n            <ag-group-component ref=\"filterGroupComp\"></ag-group-component>\n        </div>`;\n\n    @RefSelector('filterGroupComp') private filterGroupComp: AgGroupComponent;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private readonly depth: number;\n    private readonly columnGroup: IProvidedColumn;\n    private readonly showingColumn: boolean;\n    private childFilterComps: (ToolPanelFilterGroupComp | ToolPanelFilterComp)[];\n    private expandedCallback: () => void;\n    private filterGroupName: string | null;\n\n    constructor(\n        columnGroup: IProvidedColumn,\n        childFilterComps: (ToolPanelFilterGroupComp | ToolPanelFilterComp)[],\n        expandedCallback: () => void,\n        depth: number, \n        showingColumn: boolean\n    ) {\n        super();\n        this.columnGroup = columnGroup;\n        this.childFilterComps = childFilterComps;\n        this.depth = depth;\n        this.expandedCallback = expandedCallback;\n        this.showingColumn = showingColumn;\n    }\n\n    @PreConstruct\n    private preConstruct(): void {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'filter-toolpanel',\n            direction: 'vertical'\n        };\n        this.setTemplate(ToolPanelFilterGroupComp.TEMPLATE, { filterGroupComp: groupParams });\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.setGroupTitle();\n        this.filterGroupComp.setAlignItems('stretch');\n\n        this.filterGroupComp.addCssClass(`ag-filter-toolpanel-group-level-${this.depth}`);\n        this.filterGroupComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth}-header`);\n\n        this.childFilterComps.forEach(filterComp => {\n            this.filterGroupComp.addItem(filterComp as Component);\n            filterComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth + 1}-header`);\n        });\n\n        this.refreshFilterClass();\n        this.addExpandCollapseListeners();\n        this.addFilterChangedListeners();\n        this.setupTooltip();\n    }\n\n    private setupTooltip(): void {\n        // we don't show tooltips for groups, as when the group expands, it's div contains the columns which also\n        // have tooltips, so the tooltips would clash. Eg mouse over group, tooltip shows, mouse over column, another\n        // tooltip shows but cos we didn't leave the group the group tooltip remains. this should be fixed in the future,\n        // maybe the group shouldn't contain the children form a DOM perspective.\n        if (!this.showingColumn) { return; }\n\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => {\n                const eGui = this.filterGroupComp.getGui();\n                const eTitle = eGui.querySelector('.ag-group-title');\n\n                if (!eTitle) { return true; } // show tooltip by default\n                return eTitle.scrollWidth > eTitle.clientWidth;\n            }\n        }\n\n        const refresh = () => {\n            const newTooltipText = (this.columnGroup as Column).getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'filterToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'filterToolPanelColumnGroup';\n        return res;\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.filterGroupComp.addCssClassToTitleBar(cssClass);\n    }\n\n    public refreshFilters(isDisplayed: boolean) {\n        this.childFilterComps.forEach(filterComp => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.refreshFilters(isDisplayed);\n            } else {\n                filterComp.refreshFilter(isDisplayed);\n            }\n        });\n    }\n\n    public isColumnGroup(): boolean {\n        return this.columnGroup instanceof ProvidedColumnGroup;\n    }\n\n    public isExpanded(): boolean {\n        return this.filterGroupComp.isExpanded();\n    }\n\n    public getChildren(): ToolPanelFilterItem[] {\n        return this.childFilterComps;\n    }\n\n    public getFilterGroupName(): string {\n        return this.filterGroupName ? this.filterGroupName : '';\n    }\n\n    public getFilterGroupId(): string {\n        return this.columnGroup.getId();\n    }\n\n    public hideGroupItem(hide: boolean, index: number) {\n        this.filterGroupComp.hideItem(hide, index);\n    }\n\n    public hideGroup(hide: boolean) {\n        this.setDisplayed(!hide);\n    }\n\n    private forEachToolPanelFilterChild(action: (filterComp: ToolPanelFilterItem) => void) {\n        this.childFilterComps.forEach(filterComp => {\n            if (filterComp instanceof ToolPanelFilterComp) {\n                action(filterComp);\n            }\n        });\n    }\n\n    private addExpandCollapseListeners() {\n        const expandListener = this.isColumnGroup() ?\n            () => this.expandedCallback() :\n            () => this.forEachToolPanelFilterChild(filterComp => filterComp.expand());\n\n        const collapseListener = this.isColumnGroup() ?\n            () => this.expandedCallback() :\n            () => this.forEachToolPanelFilterChild(filterComp => filterComp.collapse());\n\n        this.addManagedListener(this.filterGroupComp, AgGroupComponent.EVENT_EXPANDED, expandListener);\n        this.addManagedListener(this.filterGroupComp, AgGroupComponent.EVENT_COLLAPSED, collapseListener);\n    }\n\n    private getColumns(): Column[] {\n        if (this.columnGroup instanceof ProvidedColumnGroup) {\n            return this.columnGroup.getLeafColumns();\n        }\n\n        return [this.columnGroup as Column];\n    }\n\n    private addFilterChangedListeners() {\n        this.getColumns().forEach(column => {\n            this.addManagedListener(column, Column.EVENT_FILTER_CHANGED, () => this.refreshFilterClass());\n        });\n\n        if (!(this.columnGroup instanceof ProvidedColumnGroup)) {\n            this.addManagedListener(this.eventService, Events.EVENT_FILTER_OPENED, this.onFilterOpened.bind(this));\n        }\n    }\n\n    private refreshFilterClass(): void {\n        const columns = this.getColumns();\n\n        const anyChildFiltersActive = () => columns.some(col => col.isFilterActive());\n        this.filterGroupComp.addOrRemoveCssClass('ag-has-filter', anyChildFiltersActive());\n    }\n\n    private onFilterOpened(event: FilterOpenedEvent): void {\n        // when a filter is opened elsewhere, i.e. column menu we close the filter comp so we also need to collapse\n        // the column group. This approach means we don't need to try and sync filter models on the same column.\n\n        if (event.source !== 'COLUMN_MENU') { return; }\n        if (event.column !== this.columnGroup) { return; }\n        if (!this.isExpanded()) { return; }\n\n        this.collapse();\n    }\n\n    public expand() {\n        this.filterGroupComp.toggleGroupExpand(true);\n    }\n\n    public collapse() {\n        this.filterGroupComp.toggleGroupExpand(false);\n    }\n\n    private setGroupTitle() {\n        this.filterGroupName = (this.columnGroup instanceof ProvidedColumnGroup) ?\n            this.getColumnGroupName(this.columnGroup) : this.getColumnName(this.columnGroup as Column);\n\n        this.filterGroupComp.setTitle(this.filterGroupName || '');\n    }\n\n    private getColumnGroupName(columnGroup: ProvidedColumnGroup): string | null {\n        return this.columnModel.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'filterToolPanel');\n    }\n\n    private getColumnName(column: Column): string | null {\n        return this.columnModel.getDisplayNameForColumn(column, 'filterToolPanel', false);\n    }\n\n    private destroyFilters() {\n        this.childFilterComps = this.destroyBeans(this.childFilterComps);\n        _.clearElement(this.getGui());\n    }\n\n    protected destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\n", "import {\n    ColDef,\n    ColGroupDef,\n    Component,\n    FiltersToolPanelState,\n    IFiltersToolPanel,\n    IToolPanelComp,\n    IToolPanelParams,\n    RefSelector\n} from \"@ag-grid-community/core\";\nimport { FiltersToolPanelHeaderPanel } from \"./filtersToolPanelHeaderPanel\";\nimport { FiltersToolPanelListPanel } from \"./filtersToolPanelListPanel\";\n\nexport interface ToolPanelFiltersCompParams<TData = any, TContext = any> extends IToolPanelParams<TData, TContext, FiltersToolPanelState> {\n    /** To suppress Expand / Collapse All */\n    suppressExpandAll: boolean;\n    /** To suppress the Filter Search */\n    suppressFilterSearch: boolean;\n    /** Suppress updating the layout of columns as they are rearranged in the grid */\n    suppressSyncLayoutWithGrid: boolean;\n}\n\nexport class FiltersToolPanel extends Component implements IFiltersToolPanel, IToolPanelComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-filter-toolpanel\">\n            <ag-filters-tool-panel-header ref=\"filtersToolPanelHeaderPanel\"></ag-filters-tool-panel-header>\n            <ag-filters-tool-panel-list ref=\"filtersToolPanelListPanel\"></ag-filters-tool-panel-list>\n         </div>`;\n\n    @RefSelector('filtersToolPanelHeaderPanel') private filtersToolPanelHeaderPanel: FiltersToolPanelHeaderPanel;\n\n    @RefSelector('filtersToolPanelListPanel') private filtersToolPanelListPanel: FiltersToolPanelListPanel;\n\n    private initialised = false;\n    private params: ToolPanelFiltersCompParams;\n    private listenerDestroyFuncs: (() => void)[] = [];\n\n    constructor() {\n        super(FiltersToolPanel.TEMPLATE);\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        // if initialised is true, means this is a refresh\n        if (this.initialised) {\n            this.listenerDestroyFuncs.forEach(func => func());\n            this.listenerDestroyFuncs = [];\n        }\n\n        this.initialised = true;\n\n        const defaultParams: Partial<ToolPanelFiltersCompParams> = this.gridOptionsService.addGridCommonParams({\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false\n        });\n        this.params = {\n            ...defaultParams,\n            ...params\n        };\n\n        this.filtersToolPanelHeaderPanel.init(this.params);\n        this.filtersToolPanelListPanel.init(this.params);\n\n        const hideExpand = this.params.suppressExpandAll;\n        const hideSearch = this.params.suppressFilterSearch;\n\n        if (hideExpand && hideSearch) {\n            this.filtersToolPanelHeaderPanel.setDisplayed(false);\n        }\n\n        // this is necessary to prevent a memory leak while refreshing the tool panel\n        this.listenerDestroyFuncs.push(\n            this.addManagedListener(this.filtersToolPanelHeaderPanel, 'expandAll', this.onExpandAll.bind(this))!,\n            this.addManagedListener(this.filtersToolPanelHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this))!,\n            this.addManagedListener(this.filtersToolPanelHeaderPanel, 'searchChanged', this.onSearchChanged.bind(this))!,\n            this.addManagedListener(this.filtersToolPanelListPanel, 'filterExpanded', this.onFilterExpanded.bind(this))!,\n            this.addManagedListener(this.filtersToolPanelListPanel, 'groupExpanded', this.onGroupExpanded.bind(this))!\n        );\n    }\n\n    // lazy initialise the panel\n    public setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public onExpandAll(): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(true);\n    }\n\n    public onCollapseAll(): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(false);\n    }\n\n    private onSearchChanged(event: any): void {\n        this.filtersToolPanelListPanel.performFilterSearch(event.searchText);\n    }\n\n    public setFilterLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.filtersToolPanelListPanel.setFiltersLayout(colDefs);\n    }\n\n    private onFilterExpanded(): void {\n        this.params.onStateUpdated();\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.filtersToolPanelHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    public expandFilterGroups(groupIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(true, groupIds);\n    }\n\n    public collapseFilterGroups(groupIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(false, groupIds);\n    }\n\n    public expandFilters(colIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilters(true, colIds);\n    }\n\n    public collapseFilters(colIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilters(false, colIds);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.filtersToolPanelListPanel.syncFilterLayout();\n    }\n\n    public refresh(params: ToolPanelFiltersCompParams): boolean {\n        this.init(params);\n        return true;\n    }\n\n    public getState(): FiltersToolPanelState {\n        return this.filtersToolPanelListPanel.getExpandedFiltersAndGroups();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { DetailCellRenderer } from \"./masterDetail/detailCellRenderer\";\nimport { DetailCellRendererCtrl } from \"./masterDetail/detailCellRendererCtrl\";\nimport { VERSION } from \"./version\";\n\nexport const MasterDetailModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MasterDetailModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agDetailCellRenderer', componentClass: DetailCellRenderer }\n    ],\n    controllers: [\n        { controllerName: 'detailCellRenderer', controllerClass: DetailCellRendererCtrl }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import { Component, GridOptions, ICellRenderer, RefSelector, _, GridApi, IDetailCellRenderer, IDetailCellRendererParams, ModuleRegistry, createGrid, GridParams, ColumnApi } from \"@ag-grid-community/core\";\nimport { DetailCellRendererCtrl } from \"./detailCellRendererCtrl\";\n\nexport class DetailCellRenderer extends Component implements ICellRenderer {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-details-row\" role=\"gridcell\">\n            <div ref=\"eDetailGrid\" class=\"ag-details-grid\" role=\"presentation\"></div>\n        </div>`;\n\n    @RefSelector('eDetailGrid') private eDetailGrid: HTMLElement;\n\n    private detailApi: GridApi;\n\n    private params: IDetailCellRendererParams;\n\n    private ctrl: DetailCellRendererCtrl;\n\n    public init(params: IDetailCellRendererParams): void {\n\n        this.params = params;\n        this.selectAndSetTemplate();\n\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (cssClassName: string, on: boolean) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveDetailGridCssClass: (cssClassName: string, on: boolean) => this.eDetailGrid.classList.toggle(cssClassName, on),\n            setDetailGrid: gridOptions => this.setDetailGrid(gridOptions),\n            setRowData: rowData => this.setRowData(rowData),\n            getGui: () => this.eDetailGrid\n        };\n\n        this.ctrl = this.createManagedBean(new DetailCellRendererCtrl());\n        this.ctrl.init(compProxy, params);\n    }\n\n    public refresh(): boolean {\n        return this.ctrl && this.ctrl.refresh();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n\n    private selectAndSetTemplate(): void {\n\n        if (this.params.pinned) {\n            this.setTemplate('<div class=\"ag-details-row\"></div>');\n            return;\n        }\n\n        const setDefaultTemplate = () => {\n            this.setTemplate(DetailCellRenderer.TEMPLATE);\n        };\n\n        if (_.missing(this.params.template)) {\n            // use default template\n            setDefaultTemplate();\n        } else {\n            // use user provided template\n            if (typeof this.params.template === 'string') {\n                this.setTemplate(this.params.template);\n            } else if (typeof this.params.template === 'function') {\n                const templateFunc = this.params.template;\n                const template = templateFunc(this.params);\n                this.setTemplate(template);\n            } else {\n                console.warn('AG Grid: detailCellRendererParams.template should be function or string');\n                setDefaultTemplate();\n            }\n        }\n\n        if (this.eDetailGrid == null) {\n            console.warn('AG Grid: reference to eDetailGrid was missing from the details template. ' +\n                'Please add ref=\"eDetailGrid\" to the template.');\n        }\n    }\n\n    private setDetailGrid(gridOptions: GridOptions): void {\n        if (!this.eDetailGrid) { return; }\n\n        // AG-1715\n        // this is only needed when suppressReactUi=true, once we remove the old way\n        // of doing react, and Master / Details is all native React, then we\n        // can remove this code.\n        const agGridReact = this.context.getBean('agGridReact');\n        const agGridReactCloned = agGridReact ? _.cloneObject(agGridReact) : undefined;\n\n        // when we create detail grid, the detail grid needs frameworkComponentWrapper so that\n        // it created child components correctly, ie  Angular detail grid can have Angular cell renderer.\n        // this is only used by Angular and Vue, as React uses native React AG Grid detail grids\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n        const frameworkOverrides = this.getFrameworkOverrides();\n\n        const api = createGrid(this.eDetailGrid, gridOptions, {\n            frameworkOverrides,\n            providedBeanInstances: {\n                agGridReact: agGridReactCloned,\n                frameworkComponentWrapper: frameworkComponentWrapper,\n            },\n            modules: ModuleRegistry.__getGridRegisteredModules(this.params.api.getGridId()),\n        } as GridParams);\n\n        this.detailApi = api;\n        this.ctrl.registerDetailWithMaster(api, new ColumnApi(api));\n\n        this.addDestroyFunc(() => {\n            api?.destroy();\n        });\n    }\n\n    private setRowData(rowData: any[]): void {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        this.detailApi && this.detailApi.setGridOption('rowData', rowData);\n    }\n}\n", "import {\n    Autowired,\n    BeanStub,\n    ColumnApi,\n    DetailGridInfo,\n    GridApi,\n    IDetailCellRendererCtrl,\n    RowNode,\n    IDetailCellRendererParams,\n    IDetailCellRenderer,\n    Events,\n    RowPositionUtils,\n    FullWidthRowFocusedEvent,\n    FocusService,\n    _\n} from \"@ag-grid-community/core\";\n\nexport class DetailCellRendererCtrl extends BeanStub implements IDetailCellRendererCtrl {\n\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private params: IDetailCellRendererParams;\n\n    private comp: IDetailCellRenderer;\n\n    private loadRowDataVersion = 0;\n\n    private refreshStrategy: 'rows' | 'everything' | 'nothing';\n\n    public init(comp: IDetailCellRenderer, params: IDetailCellRendererParams): void {\n        this.params = params;\n        this.comp = comp;\n\n        const doNothingBecauseInsidePinnedSection = params.pinned != null;\n        if (doNothingBecauseInsidePinnedSection) { return; }\n\n        this.setAutoHeightClasses();\n        this.setupRefreshStrategy();\n        this.addThemeToDetailGrid();\n        this.createDetailGrid();\n        this.loadRowData();\n\n        this.addManagedListener(this.eventService, Events.EVENT_FULL_WIDTH_ROW_FOCUSED, this.onFullWidthRowFocused.bind(this));\n    }\n\n    private onFullWidthRowFocused(e: FullWidthRowFocusedEvent): void {\n        const params = this.params;\n        const row = { rowIndex: params.node.rowIndex!, rowPinned: params.node.rowPinned! };\n        const eventRow = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned! };\n        const isSameRow = this.rowPositionUtils.sameRow(row, eventRow);\n\n        if (!isSameRow) { return; }\n\n        this.focusService.focusInto(this.comp.getGui(), e.fromBelow);\n    }\n\n    private setAutoHeightClasses(): void {\n        const autoHeight = this.gridOptionsService.get('detailRowAutoHeight');\n\n        const parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n        const detailClass =  autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n\n        this.comp.addOrRemoveCssClass(parentClass, true);\n        this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n    }\n\n    private setupRefreshStrategy(): void {\n        const providedStrategy = this.params.refreshStrategy;\n\n        const validSelection = providedStrategy == 'everything' || providedStrategy == 'nothing' || providedStrategy == 'rows';\n        if (validSelection) {\n            this.refreshStrategy = providedStrategy;\n            return;\n        }\n\n        if (providedStrategy!=null) {\n            console.warn(\"AG Grid: invalid cellRendererParams.refreshStrategy = '\" + providedStrategy +\n                \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n        }\n    \n        this.refreshStrategy = 'rows';\n    }\n\n    private addThemeToDetailGrid(): void {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        const { theme } = this.environment.getTheme();\n        if (theme) {\n            this.comp.addOrRemoveDetailGridCssClass(theme, true);\n        }\n    }\n\n    private createDetailGrid(): void {\n        if (_.missing(this.params.detailGridOptions)) {\n            console.warn('AG Grid: could not find detail grid options for master detail, ' +\n                'please set gridOptions.detailCellRendererParams.detailGridOptions');\n            return;\n        }\n\n        const autoHeight = this.gridOptionsService.get('detailRowAutoHeight');\n\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api and columnApi into gridOptions\n        const gridOptions = {...this.params.detailGridOptions};\n\n        if (autoHeight) {\n            gridOptions.domLayout = 'autoHeight';\n        }\n\n        this.comp.setDetailGrid(gridOptions);\n    }\n\n    public registerDetailWithMaster(api: GridApi, columnApi: ColumnApi): void {\n        const rowId = this.params.node.id!;\n        const masterGridApi = this.params.api;\n\n        const gridInfo: DetailGridInfo = {\n            id: rowId,\n            api: api,\n            columnApi: columnApi\n        };\n\n        const rowNode = this.params.node as RowNode;\n\n        // register with api\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n\n        this.addDestroyFunc(() => {\n            // the gridInfo can be stale if a refresh happens and\n            // a new row is created before the old one is destroyed.\n            if (rowNode.detailGridInfo !== gridInfo) { return; }\n            masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    }\n\n    private loadRowData(): void {\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        const versionThisCall = this.loadRowDataVersion;\n\n        if (this.params.detailGridOptions?.rowModelType === 'serverSide') {\n            const node = this.params.node as RowNode;\n            node.detailGridInfo?.api?.refreshServerSide({ purge: true });\n            return;\n        }\n\n        const userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            console.warn('AG Grid: could not find getDetailRowData for master / detail, ' +\n                'please set gridOptions.detailCellRendererParams.getDetailRowData');\n            return;\n        }\n\n        const successCallback = (rowData: any[]) => {\n            const mostRecentCall = this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                this.comp.setRowData(rowData);\n            }\n        };\n\n        const funcParams: any = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback,\n            context: this.gridOptionsService.getGridCommonParams().context\n        };\n        userFunc(funcParams);\n    }\n\n    public refresh(): boolean {\n        const GET_GRID_TO_REFRESH = false;\n        const GET_GRID_TO_DO_NOTHING = true;\n\n        switch (this.refreshStrategy) {\n            // ignore this refresh, make grid think we've refreshed but do nothing\n            case 'nothing': return GET_GRID_TO_DO_NOTHING;\n            // grid will destroy and recreate the cell\n            case 'everything': return GET_GRID_TO_REFRESH;\n        }\n\n        // do the refresh here, and tell the grid to do nothing\n        this.loadRowData();\n        return GET_GRID_TO_DO_NOTHING;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { EnterpriseMenuFactory } from \"./menu/enterpriseMenu\";\nimport { ContextMenuFactory } from \"./menu/contextMenu\";\nimport { MenuItemMapper } from \"./menu/menuItemMapper\";\nimport { VERSION } from \"./version\";\nimport { ChartMenuItemMapper } from \"./menu/chartMenuItemMapper\";\nimport { ColumnChooserFactory } from \"./menu/columnChooserFactory\";\nimport { ColumnMenuFactory } from \"./menu/columnMenuFactory\";\nimport { MenuUtils } from \"./menu/menuUtils\";\n\nexport const MenuModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MenuModule,\n    beans: [EnterpriseMenuFactory, ContextMenuFactory, MenuItemMapper, ChartMenuItemMapper, ColumnChooserFactory, ColumnMenuFactory, MenuUtils],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    _,\n    AgEvent,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    ColumnMenuTab,\n    FilterManager,\n    FilterWrapper,\n    IMenuFactory,\n    ModuleNames,\n    ModuleRegistry,\n    PopupService,\n    PostConstruct,\n    RefSelector,\n    AgPromise,\n    TabbedItem,\n    TabbedLayout,\n    FocusService,\n    IAfterGuiAttachedParams,\n    ContainerType,\n    CtrlsService,\n    AgMenuList,\n    AgMenuItemComponent,\n    PopupEventParams,\n    Component,\n    CloseMenuEvent,\n    MenuService,\n    AgGridEvent,\n    ColumnMenuVisibleChangedEvent,\n    Events,\n    WithoutGridCommon\n} from '@ag-grid-community/core';\nimport { ColumnChooserFactory } from './columnChooserFactory';\nimport { ColumnMenuFactory } from './columnMenuFactory';\nimport { MenuRestoreFocusParams, MenuUtils } from './menuUtils';\n\nexport interface TabSelectedEvent extends AgEvent {\n    key: string;\n}\n\ninterface EnterpriseColumnMenu {\n    getGui(): HTMLElement;\n    showTab?(tab: string): void;\n    afterGuiAttached(params?: IAfterGuiAttachedParams): void;\n    showTabBasedOnPreviousSelection?(): void;\n}\n\n@Bean('enterpriseMenuFactory')\nexport class EnterpriseMenuFactory extends BeanStub implements IMenuFactory {\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('ctrlsService') private readonly ctrlsService: CtrlsService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n    @Autowired('menuService') private readonly menuService: MenuService;\n\n    private lastSelectedTab: string;\n    private activeMenu: EnterpriseColumnMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    public showMenuAfterMouseEvent(column: Column | undefined, mouseEvent: MouseEvent | Touch, containerType: ContainerType, filtersOnly?: boolean): void {\n        const defaultTab = filtersOnly ? 'filterMenuTab' : undefined;\n        this.showMenu(column, (menu: EnterpriseColumnMenu) => {\n            const ePopup = menu.getGui();\n\n            this.popupService.positionPopupUnderMouseEvent({\n                type: containerType,\n                column,\n                mouseEvent,\n                ePopup\n            });\n\n            if (defaultTab) {\n                menu.showTab?.(defaultTab);\n            }\n            this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n        }, containerType, defaultTab, undefined, mouseEvent.target as HTMLElement);\n    }\n\n    public showMenuAfterButtonClick(column: Column | undefined, eventSource: HTMLElement, containerType: ContainerType, filtersOnly?: boolean): void {\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const defaultTab: ColumnMenuTab | undefined = filtersOnly ? 'filterMenuTab' : undefined;\n        const restrictToTabs = defaultTab ? [defaultTab] : undefined;\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        let nudgeX = (isLegacyMenuEnabled ? 9 : 4) * multiplier;\n        let nudgeY = isLegacyMenuEnabled ? -23 : 4;\n\n        this.showMenu(column, (menu: EnterpriseColumnMenu) => {\n            const ePopup = menu.getGui();\n\n            this.popupService.positionPopupByComponent({\n                type: containerType,\n                column,\n                eventSource,\n                ePopup,\n                alignSide,\n                nudgeX,\n                nudgeY,\n                position: 'under',\n                keepWithinBounds: true,\n            });\n\n            if (defaultTab) {\n                menu.showTab?.(defaultTab);\n            }\n            this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n        }, containerType, defaultTab, restrictToTabs, eventSource);\n    }\n\n    private showMenu(\n        column: Column | undefined,\n        positionCallback: (menu: EnterpriseColumnMenu) => void,\n        containerType: ContainerType,\n        defaultTab?: string,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): void {\n        const { menu, eMenuGui, anchorToElement, restoreFocusParams } = this.getMenuParams(column, restrictToTabs, eventSource);\n        const closedFuncs: ((e?: Event) => void)[] = [];\n\n        closedFuncs.push(\n            (e) => {\n                const eComp = menu.getGui();\n                this.destroyBean(menu);\n                if (column) {\n                    column.setMenuVisible(false, 'contextMenu');\n                    // if we don't have a column, then the menu wasn't launched via keyboard navigation\n                    this.menuUtils.restoreFocusOnClose(restoreFocusParams, eComp, e);\n                }\n            }\n        );\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        // need to show filter before positioning, as only after filter\n        // is visible can we find out what the width of it is\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e?: Event) => { // menu closed callback\n                closedFuncs.forEach(f => f(e));\n                this.dispatchVisibleChangedEvent(false, false, column, defaultTab);\n            },\n            afterGuiAttached: params => menu.afterGuiAttached(Object.assign({}, { container: containerType }, params)),\n            // if defaultTab is not present, positionCallback will be called\n            // after `showTabBasedOnPreviousSelection` is called.\n            positionCallback: !!defaultTab ? () => positionCallback(menu) : undefined,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu')\n        });\n\n        if (!defaultTab) {\n            menu.showTabBasedOnPreviousSelection?.();\n            // reposition the menu because the method above could load\n            // an element that is bigger than enterpriseMenu header.\n            positionCallback(menu);\n        }\n\n        if (this.menuService.isColumnMenuAnchoringEnabled()) {\n            // if user starts showing / hiding columns, or otherwise move the underlying column\n            // for this menu, we want to stop tracking the menu with the column position. otherwise\n            // the menu would move as the user is using the columns tab inside the menu.\n            const stopAnchoringPromise = this.popupService.setPopupPositionRelatedToElement(eMenuGui, anchorToElement);\n            \n            if (stopAnchoringPromise && column) {\n                this.addStopAnchoring(stopAnchoringPromise, column, closedFuncs);\n            }\n        }\n\n        menu.addEventListener(TabbedColumnMenu.EVENT_TAB_SELECTED, (event: AgGridEvent & { key: string }) => {\n            this.dispatchVisibleChangedEvent(false, true, column);\n            this.lastSelectedTab = event.key;\n            this.dispatchVisibleChangedEvent(true, true, column);\n        });\n\n        column?.setMenuVisible(true, 'contextMenu');\n\n        this.activeMenu = menu;\n\n        menu.addEventListener(BeanStub.EVENT_DESTROYED, () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n    }\n\n    private addStopAnchoring(\n        stopAnchoringPromise: AgPromise<() => void>,\n        column: Column,\n        closedFuncsArr: (() => void)[]\n    ) {\n        stopAnchoringPromise.then((stopAnchoringFunc: () => void) => {\n            column.addEventListener('leftChanged', stopAnchoringFunc);\n            column.addEventListener('visibleChanged', stopAnchoringFunc);\n\n            closedFuncsArr.push(() => {\n                column.removeEventListener('leftChanged', stopAnchoringFunc);\n                column.removeEventListener('visibleChanged', stopAnchoringFunc);\n            });\n        });\n    }\n\n    private getMenuParams(\n        column: Column | undefined,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ) {\n        const restoreFocusParams = {\n            column,\n            headerPosition: this.focusService.getFocusedHeader(),\n            columnIndex: this.columnModel.getAllDisplayedColumns().indexOf(column!),\n            eventSource\n        };\n        const menu = this.createMenu(column, restoreFocusParams, restrictToTabs, eventSource);\n        return {\n            menu,\n            eMenuGui: menu.getGui(),\n            anchorToElement: eventSource || this.ctrlsService.getGridBodyCtrl().getGui(),\n            restoreFocusParams\n        }\n    }\n\n    private createMenu(\n        column: Column | undefined,\n        restoreFocusParams: MenuRestoreFocusParams,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): (EnterpriseColumnMenu & BeanStub) {\n        if (this.menuService.isLegacyMenuEnabled()) {\n            return this.createBean(new TabbedColumnMenu(column, restoreFocusParams, this.lastSelectedTab, restrictToTabs, eventSource));\n        } else {\n            return this.createBean(new ColumnContextMenu(column, restoreFocusParams, eventSource));\n        }\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, switchingTab: boolean, column?: Column, defaultTab?: string): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: Events.EVENT_COLUMN_MENU_VISIBLE_CHANGED,\n            visible,\n            switchingTab,\n            key: (this.lastSelectedTab ?? defaultTab ?? (this.menuService.isLegacyMenuEnabled() ? TabbedColumnMenu.TAB_GENERAL : 'columnMenu')) as any,\n            column: column ?? null\n        }\n        this.eventService.dispatchEvent(event)\n    }\n\n    public isMenuEnabled(column: Column): boolean {\n        if (!this.menuService.isLegacyMenuEnabled()) {\n            return true;\n        }\n        // Determine whether there are any tabs to show in the menu, given that the filter tab may be hidden\n        const isFilterDisabled = !this.filterManager.isFilterAllowed(column);\n        const tabs = column.getColDef().menuTabs ?? TabbedColumnMenu.TABS_DEFAULT;\n        const numActiveTabs = isFilterDisabled && tabs.includes(TabbedColumnMenu.TAB_FILTER)\n            ? tabs.length - 1\n            : tabs.length;\n        return numActiveTabs > 0;\n    }\n\n    public showMenuAfterContextMenuEvent(column: Column<any> | undefined, mouseEvent?: MouseEvent | null, touchEvent?: TouchEvent | null): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) => {\n            this.showMenuAfterMouseEvent(column, eventOrTouch, 'columnMenu');\n            return true;\n        })\n    }\n}\n\nclass TabbedColumnMenu extends BeanStub implements EnterpriseColumnMenu {\n\n    public static EVENT_TAB_SELECTED = 'tabSelected';\n    public static TAB_FILTER: 'filterMenuTab' = 'filterMenuTab';\n    public static TAB_GENERAL: 'generalMenuTab' = 'generalMenuTab';\n    public static TAB_COLUMNS: 'columnsMenuTab' = 'columnsMenuTab';\n    public static TABS_DEFAULT: ColumnMenuTab[] = [TabbedColumnMenu.TAB_GENERAL, TabbedColumnMenu.TAB_FILTER, TabbedColumnMenu.TAB_COLUMNS];\n\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('columnChooserFactory') private readonly columnChooserFactory: ColumnChooserFactory;\n    @Autowired('columnMenuFactory') private readonly columnMenuFactory: ColumnMenuFactory;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n\n    private tabbedLayout: TabbedLayout;\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    private tabItemFilter: TabbedItem;\n    private tabItemGeneral: TabbedItem;\n    private tabItemColumns: TabbedItem;\n\n    private tabFactories: { [p: string]: () => TabbedItem; } = {};\n    private includeChecks: { [p: string]: () => boolean; } = {};\n\n    constructor(\n        private readonly column: Column | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly initialSelection: string,\n        private readonly restrictTo?: ColumnMenuTab[],\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super();\n        this.tabFactories[TabbedColumnMenu.TAB_GENERAL] = this.createMainPanel.bind(this);\n        this.tabFactories[TabbedColumnMenu.TAB_FILTER] = this.createFilterPanel.bind(this);\n        this.tabFactories[TabbedColumnMenu.TAB_COLUMNS] = this.createColumnsPanel.bind(this);\n\n        this.includeChecks[TabbedColumnMenu.TAB_GENERAL] = () => true;\n        this.includeChecks[TabbedColumnMenu.TAB_FILTER] = () => column ? this.filterManager.isFilterAllowed(column) : false;\n        this.includeChecks[TabbedColumnMenu.TAB_COLUMNS] = () => true;\n    }\n\n    @PostConstruct\n    public init(): void {\n        const tabs = this.getTabsToCreate().map(name => this.createTab(name));\n\n        this.tabbedLayout = new TabbedLayout({\n            items: tabs,\n            cssClass: 'ag-menu',\n            onActiveItemClicked: this.onHidePopup.bind(this),\n            onItemClicked: this.onTabItemClicked.bind(this)\n        });\n\n        this.createBean(this.tabbedLayout);\n\n        if (this.mainMenuList) {\n            this.mainMenuList.setParentComponent(this.tabbedLayout);\n        }\n\n        this.addDestroyFunc(() => this.destroyBean(this.tabbedLayout));\n    }\n\n    private getTabsToCreate() {\n        if (this.restrictTo) { return this.restrictTo; }\n\n        return (this.column?.getColDef().menuTabs ?? TabbedColumnMenu.TABS_DEFAULT)\n            .filter(tabName => this.isValidMenuTabItem(tabName))\n            .filter(tabName => this.isNotSuppressed(tabName))\n            .filter(tabName => this.isModuleLoaded(tabName));\n    }\n\n    private isModuleLoaded(menuTabName: string): boolean {\n        if (menuTabName === TabbedColumnMenu.TAB_COLUMNS) {\n            return ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.context.getGridId());\n        }\n\n        return true;\n    }\n\n    private isValidMenuTabItem(menuTabName: ColumnMenuTab): boolean {\n        let isValid: boolean = true;\n        let itemsToConsider = TabbedColumnMenu.TABS_DEFAULT;\n\n        if (this.restrictTo != null) {\n            isValid = this.restrictTo.indexOf(menuTabName) > -1;\n            itemsToConsider = this.restrictTo;\n        }\n\n        isValid = isValid && TabbedColumnMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;\n\n        if (!isValid) { console.warn(`AG Grid: Trying to render an invalid menu item '${menuTabName}'. Check that your 'menuTabs' contains one of [${itemsToConsider}]`); }\n\n        return isValid;\n    }\n\n    private isNotSuppressed(menuTabName: string): boolean {\n        return this.includeChecks[menuTabName]();\n    }\n\n    private createTab(name: string): TabbedItem {\n        return this.tabFactories[name]();\n    }\n\n    public showTabBasedOnPreviousSelection(): void {\n        // show the tab the user was on last time they had a menu open\n        this.showTab(this.initialSelection);\n    }\n\n    public showTab(toShow: string) {\n        if (this.tabItemColumns && toShow === TabbedColumnMenu.TAB_COLUMNS) {\n            this.tabbedLayout.showItem(this.tabItemColumns);\n        } else if (this.tabItemFilter && toShow === TabbedColumnMenu.TAB_FILTER) {\n            this.tabbedLayout.showItem(this.tabItemFilter);\n        } else if (this.tabItemGeneral && toShow === TabbedColumnMenu.TAB_GENERAL) {\n            this.tabbedLayout.showItem(this.tabItemGeneral);\n        } else {\n            this.tabbedLayout.showFirstItem();\n        }\n    }\n\n    private onTabItemClicked(event: { item: TabbedItem }): void {\n        let key: string | null = null;\n\n        switch (event.item) {\n            case this.tabItemColumns: key = TabbedColumnMenu.TAB_COLUMNS; break;\n            case this.tabItemFilter: key = TabbedColumnMenu.TAB_FILTER; break;\n            case this.tabItemGeneral: key = TabbedColumnMenu.TAB_GENERAL; break;\n        }\n\n        if (key) { this.activateTab(key); }\n    }\n\n    private activateTab(tab: string): void {\n        const ev: TabSelectedEvent = {\n            type: TabbedColumnMenu.EVENT_TAB_SELECTED,\n            key: tab\n        };\n        this.dispatchEvent(ev);\n    }\n\n    private createMainPanel(): TabbedItem {\n        this.mainMenuList = this.columnMenuFactory.createMenu(this, this.column, () => this.sourceElement ?? this.getGui());\n        this.mainMenuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, this.onHidePopup.bind(this));\n\n        this.tabItemGeneral = {\n            title: _.createIconNoSpan('menu', this.gridOptionsService, this.column)!,\n            titleLabel: TabbedColumnMenu.TAB_GENERAL.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(this.mainMenuList.getGui()),\n            name: TabbedColumnMenu.TAB_GENERAL\n        };\n\n        return this.tabItemGeneral;\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    private createFilterPanel(): TabbedItem {\n        const filterWrapper: FilterWrapper | null = this.column ? this.filterManager.getOrCreateFilterWrapper(this.column, 'COLUMN_MENU') : null;\n        if (!filterWrapper) {\n            throw new Error('AG Grid - Unable to instantiate filter');\n        }\n\n        const afterFilterAttachedCallback = (params: IAfterGuiAttachedParams) => {\n            if (!filterWrapper?.filterPromise) { return; }\n\n            // slightly odd block this - this promise will always have been resolved by the time it gets here, so won't be\n            // async (_unless_ in react or similar, but if so why not encountered before now?).\n            // I'd suggest a future improvement would be to remove/replace this promise as this block just wont work if it is\n            // async and is confusing if you don't have this context\n            filterWrapper.filterPromise.then(filter => {\n                if (filter && filter.afterGuiAttached) {\n                    filter.afterGuiAttached(params);\n                }\n            });\n        };\n\n        // see comment above\n        const afterDetachedCallback = () => filterWrapper?.filterPromise?.then(filter => filter?.afterGuiDetached?.());\n\n        this.tabItemFilter = {\n            title: _.createIconNoSpan('filter', this.gridOptionsService, this.column)!,\n            titleLabel: TabbedColumnMenu.TAB_FILTER.replace('MenuTab', ''),\n            bodyPromise: filterWrapper?.guiPromise as AgPromise<HTMLElement>,\n            afterAttachedCallback: afterFilterAttachedCallback,\n            afterDetachedCallback,\n            name: TabbedColumnMenu.TAB_FILTER\n        };\n\n        return this.tabItemFilter;\n    }\n\n    private createColumnsPanel(): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-menu-column-select-wrapper');\n\n        const columnSelectPanel = this.columnChooserFactory.createColumnSelectPanel(this, this.column);\n\n        const columnSelectPanelGui = columnSelectPanel.getGui();\n        columnSelectPanelGui.classList.add('ag-menu-column-select');\n        eWrapperDiv.appendChild(columnSelectPanelGui);\n\n        this.tabItemColumns = {\n            title: _.createIconNoSpan('columns', this.gridOptionsService, this.column)!, //createColumnsIcon(),\n            titleLabel: TabbedColumnMenu.TAB_COLUMNS.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            name: TabbedColumnMenu.TAB_COLUMNS\n        };\n\n        return this.tabItemColumns;\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        const { container, hidePopup } = params;\n\n        this.tabbedLayout.setAfterAttachedParams({ container, hidePopup });\n\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.tabbedLayout.getGui();\n    }\n}\n\nclass ColumnContextMenu extends Component implements EnterpriseColumnMenu {\n    @Autowired('columnMenuFactory') private readonly columnMenuFactory: ColumnMenuFactory;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    @RefSelector('eColumnMenu') private readonly eColumnMenu: HTMLElement;\n\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(\n        private readonly column: Column | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super(/* html */`\n            <div ref=\"eColumnMenu\" role=\"presentation\" class=\"ag-menu ag-column-menu\"></div>\n        `);\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.mainMenuList = this.columnMenuFactory.createMenu(this, this.column, () => this.sourceElement ?? this.getGui());\n        this.mainMenuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, this.onHidePopup.bind(this));\n        this.eColumnMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}\n", "import {\n    _,\n    AgEvent,\n    AgMenuItemComponent,\n    AgMenuList,\n    Autowired,\n    Bean,\n    BeanStub,\n    CellPosition,\n    CellPositionUtils,\n    Column,\n    ColumnModel,\n    Component,\n    FocusService,\n    GetContextMenuItemsParams,\n    IAfterGuiAttachedParams,\n    IContextMenuFactory,\n    IRangeService,\n    MenuItemDef,\n    ModuleNames,\n    ModuleRegistry,\n    Optional,\n    PopupService,\n    PostConstruct,\n    RowNode,\n    CtrlsService,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { MenuItemMapper } from \"./menuItemMapper\";\nimport { MenuUtils } from \"./menuUtils\";\n\nconst CSS_MENU = 'ag-menu';\nconst CSS_CONTEXT_MENU_OPEN = 'ag-context-menu-open';\n\n@Bean('contextMenuFactory')\nexport class ContextMenuFactory extends BeanStub implements IContextMenuFactory {\n\n    @Autowired('popupService') private popupService: PopupService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('menuUtils') private menuUtils: MenuUtils;\n\n    private activeMenu: ContextMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    private getMenuItems(node: RowNode | null, column: Column | null, value: any): (MenuItemDef | string)[] | undefined {\n        const defaultMenuOptions: string[] = [];\n\n        if (_.exists(node) && ModuleRegistry.__isRegistered(ModuleNames.ClipboardModule, this.context.getGridId())) {\n            if (column) {\n                // only makes sense if column exists, could have originated from a row\n                if (!this.gridOptionsService.get('suppressCutToClipboard')) {\n                    defaultMenuOptions.push('cut');\n                }\n                defaultMenuOptions.push('copy', 'copyWithHeaders', 'copyWithGroupHeaders', 'paste', 'separator');\n            }\n        }\n\n        if (this.gridOptionsService.get('enableCharts') && ModuleRegistry.__isRegistered(ModuleNames.GridChartsModule, this.context.getGridId())) {\n            if (this.columnModel.isPivotMode()) {\n                defaultMenuOptions.push('pivotChart');\n            }\n\n            if (this.rangeService && !this.rangeService.isEmpty()) {\n                defaultMenuOptions.push('chartRange');\n            }\n        }\n\n        if (_.exists(node)) {\n            // if user clicks a cell\n            const csvModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.context.getGridId());\n            const excelModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.context.getGridId());\n            const suppressExcel = this.gridOptionsService.get('suppressExcelExport') || excelModuleMissing;\n            const suppressCsv = this.gridOptionsService.get('suppressCsvExport') || csvModuleMissing;\n            const onIPad = _.isIOSUserAgent();\n            const anyExport: boolean = !onIPad && (!suppressExcel || !suppressCsv);\n            if (anyExport) {\n                defaultMenuOptions.push('export');\n            }\n        }\n\n        const defaultItems = defaultMenuOptions.length ? defaultMenuOptions : undefined;\n        const columnContextMenuItems = column?.getColDef().contextMenuItems;\n        if (Array.isArray(columnContextMenuItems)) {\n            return columnContextMenuItems;\n        } else if (typeof columnContextMenuItems === 'function') {\n            return columnContextMenuItems(this.gridOptionsService.addGridCommonParams({\n                column, node, value,\u00A0defaultItems\n            }));\n        } else {\n            const userFunc = this.gridOptionsService.getCallback('getContextMenuItems');\n            if (userFunc) {\n                return userFunc({ column, node, value,\u00A0defaultItems });\n            } else {\n                return defaultMenuOptions;\n            }\n        }\n    }\n\n    public onContextMenu(mouseEvent: MouseEvent | null, touchEvent: TouchEvent | null, rowNode: RowNode | null, column: Column | null, value: any, anchorToElement: HTMLElement): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) => this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement));\n    }\n\n    public showMenu(node: RowNode | null, column: Column | null, value: any, mouseEvent: MouseEvent | Touch, anchorToElement: HTMLElement): boolean {\n        const menuItems = this.getMenuItems(node, column, value);\n        const eGridBodyGui = this.ctrlsService.getGridBodyCtrl().getGui();\n\n        if (menuItems === undefined || _.missingOrEmpty(menuItems)) { return false; }\n\n        const menu = new ContextMenu(menuItems, column, node, value);\n        this.createBean(menu);\n\n        const eMenuGui = menu.getGui();\n\n        const positionParams = {\n            column: column,\n            rowNode: node,\n            type: 'contextMenu',\n            mouseEvent: mouseEvent,\n            ePopup: eMenuGui,\n            // move one pixel away so that accidentally double clicking\n            // won't show the browser's contextmenu\n            nudgeY: 1\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                eGridBodyGui.classList.remove(CSS_CONTEXT_MENU_OPEN);\n                this.destroyBean(menu);\n            },\n            click: mouseEvent,\n            positionCallback: () => {\n                const isRtl = this.gridOptionsService.get('enableRtl');\n                this.popupService.positionPopupUnderMouseEvent({\n                    ...positionParams,\n                    nudgeX: isRtl ? (eMenuGui.offsetWidth + 1) * -1 : 1\n                });\n            },\n            // so when browser is scrolled down, or grid is scrolled, context menu stays with cell\n            anchorToElement: anchorToElement,\n            ariaLabel: translate('ariaLabelContextMenu', 'Context Menu')\n        });\n\n        if (addPopupRes) {\n            eGridBodyGui.classList.add(CSS_CONTEXT_MENU_OPEN);\n            menu.afterGuiAttached({ container: 'contextMenu', hidePopup: addPopupRes.hideFunc });\n        }\n\n        // there should never be an active menu at this point, however it was found\n        // that you could right click a second time just 1 or 2 pixels from the first\n        // click, and another menu would pop up. so somehow the logic for closing the\n        // first menu (clicking outside should close it) was glitchy somehow. an easy\n        // way to avoid this is just remove the old context menu here if it exists.\n        if (this.activeMenu) {\n            this.hideActiveMenu();\n        }\n\n        this.activeMenu = menu;\n\n        menu.addEventListener(BeanStub.EVENT_DESTROYED, () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n\n        // hide the popup if something gets selected\n        if (addPopupRes) {\n            menu.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, addPopupRes.hideFunc);\n        }\n\n        return true;\n    }\n}\n\nclass ContextMenu extends Component {\n\n    @Autowired('menuItemMapper') private menuItemMapper: MenuItemMapper;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('cellPositionUtils') private cellPositionUtils: CellPositionUtils;\n\n    private menuList: AgMenuList | null = null;\n    private focusedCell: CellPosition | null = null;\n\n    constructor(\n        private readonly menuItems: (MenuItemDef | string)[],\n        private readonly column: Column | null,\n        private readonly node: RowNode | null,\n        private readonly value: any\n    ) {\n        super(/* html */`<div class=\"${CSS_MENU}\" role=\"presentation\"></div>`);\n    }\n\n    @PostConstruct\n    private addMenuItems(): void {\n        const menuList = this.createManagedBean(new AgMenuList(0, {\n            column: this.column,\n            node: this.node,\n            value: this.value\n        }));\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(this.menuItems, null, () => this.getGui());\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        this.appendChild(menuList);\n        this.menuList = menuList;\n\n        menuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, (e: AgEvent) => this.dispatchEvent(e));\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        if (params.hidePopup) {\n            this.addDestroyFunc(params.hidePopup);\n        }\n\n        this.focusedCell = this.focusService.getFocusedCell();\n\n        if (this.menuList) {\n            this.focusService.focusInto(this.menuList.getGui());\n        }\n    }\n\n    private restoreFocusedCell(): void {\n        const currentFocusedCell = this.focusService.getFocusedCell();\n\n        if (currentFocusedCell && this.focusedCell && this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)) {\n            const { rowIndex, rowPinned, column } = this.focusedCell;\n            const doc = this.gridOptionsService.getDocument();\n\n            if (doc.activeElement === doc.body) {\n                this.focusService.setFocusedCell({ rowIndex, column, rowPinned, forceBrowserFocus: true });\n            }\n        }\n    }\n\n    protected destroy(): void {\n        this.restoreFocusedCell();\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    GridApi,\n    IAggFuncService,\n    IClipboardService,\n    MenuItemDef,\n    ModuleNames, ModuleRegistry,\n    Optional,\n    FocusService,\n    RowPositionUtils,\n    MenuService,\n    SortController,\n} from '@ag-grid-community/core';\nimport { ChartMenuItemMapper } from './chartMenuItemMapper';\n\n@Bean('menuItemMapper')\nexport class MenuItemMapper extends BeanStub {\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Optional('clipboardService') private readonly clipboardService: IClipboardService;\n    @Optional('aggFuncService') private readonly aggFuncService: IAggFuncService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Autowired('chartMenuItemMapper') private readonly chartMenuItemMapper: ChartMenuItemMapper;\n    @Autowired('menuService') private readonly menuService: MenuService;\n    @Autowired('sortController') private readonly sortController: SortController;\n\n    public mapWithStockItems(originalList: (MenuItemDef | string)[], column: Column | null, sourceElement: () => HTMLElement): (MenuItemDef | string)[] {\n        if (!originalList) {\n            return [];\n        }\n\n        const resultList: (MenuItemDef | string)[] = [];\n\n        originalList.forEach(menuItemOrString => {\n            let result: MenuItemDef | string | null;\n\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, column, sourceElement);\n            } else {\n                // Spread to prevent leaking mapped subMenus back into the original menuItem\n                result = { ...menuItemOrString };\n            }\n            // if no mapping, can happen when module is not loaded but user tries to use module anyway\n            if (!result) { return; }\n\n            const resultDef = result as MenuItemDef;\n            const { subMenu } = resultDef;\n\n            if (subMenu && subMenu instanceof Array) {\n                resultDef.subMenu = this.mapWithStockItems(subMenu as (MenuItemDef | string)[], column, sourceElement);\n            }\n\n            if (result != null) {\n                resultList.push(result);\n            }\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(key: string, column: Column | null, sourceElement: () => HTMLElement): MenuItemDef | string | null {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const skipHeaderOnAutoSize = this.gridOptionsService.get('skipHeaderOnAutoSize');\n\n        switch (key) {\n            case 'pinSubMenu':\n                return {\n                    name: localeTextFunc('pinColumn', 'Pin Column'),\n                    icon: _.createIconNoSpan('menuPin', this.gridOptionsService, null),\n                    subMenu: ['clearPinned', 'pinLeft', 'pinRight']\n                };\n            case 'pinLeft':\n                return {\n                    name: localeTextFunc('pinLeft', 'Pin Left'),\n                    action: () => this.columnModel.setColumnsPinned([column], 'left', \"contextMenu\"),\n                    checked: !!column && column.isPinnedLeft()\n                };\n            case 'pinRight':\n                return {\n                    name: localeTextFunc('pinRight', 'Pin Right'),\n                    action: () => this.columnModel.setColumnsPinned([column], 'right', \"contextMenu\"),\n                    checked: !!column && column.isPinnedRight()\n                };\n            case 'clearPinned':\n                return {\n                    name: localeTextFunc('noPin', 'No Pin'),\n                    action: () => this.columnModel.setColumnsPinned([column], null, \"contextMenu\"),\n                    checked: !!column && !column.isPinned()\n                };\n            case 'valueAggSubMenu':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Aggregation from Menu', this.context.getGridId())) {\n                    if (!column?.isPrimary() && !column?.getColDef().pivotValueColumn) {\n                        return null;\n                    }\n\n                    return {\n                        name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n                        icon: _.createIconNoSpan('menuValue', this.gridOptionsService, null),\n                        subMenu: this.createAggregationSubMenu(column!)\n                    };\n                } else {\n                    return null;\n                }\n            case 'autoSizeThis':\n                return {\n                    name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),\n                    action: () => this.columnModel.autoSizeColumn(column, \"contextMenu\", skipHeaderOnAutoSize)\n                };\n            case 'autoSizeAll':\n                return {\n                    name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n                    action: () => this.columnModel.autoSizeAllColumns(\"contextMenu\", skipHeaderOnAutoSize)\n                };\n            case 'rowGroup':\n                return {\n                    name: localeTextFunc('groupBy', 'Group by') + ' ' + _.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),\n                    disabled: column?.isRowGroupActive() || !column?.getColDef().enableRowGroup,\n                    action: () => this.columnModel.addRowGroupColumns([column], \"contextMenu\"),\n                    icon: _.createIconNoSpan('menuAddRowGroup', this.gridOptionsService, null)\n                };\n            case 'rowUnGroup':\n                const icon = _.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsService, null);\n                const showRowGroup = column?.getColDef().showRowGroup;\n                const lockedGroups = this.gridOptionsService.get('groupLockGroupColumns');\n                // Handle single auto group column\n                if (showRowGroup === true) {\n                    return {\n                        name: localeTextFunc('ungroupAll', 'Un-Group All'),\n                        disabled: lockedGroups === -1 || lockedGroups >= this.columnModel.getRowGroupColumns().length,\n                        action: () => this.columnModel.setRowGroupColumns(this.columnModel.getRowGroupColumns().slice(0, lockedGroups), \"contextMenu\"),\n                        icon: icon\n                    };\n                }\n                // Handle multiple auto group columns\n                if (typeof showRowGroup === 'string') {\n                    const underlyingColumn = this.columnModel.getPrimaryColumn(showRowGroup);\n                    const ungroupByName = (underlyingColumn != null) ? _.escapeString(this.columnModel.getDisplayNameForColumn(underlyingColumn, 'header')) : showRowGroup;\n                    return {\n                        name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + ungroupByName,\n                        disabled: underlyingColumn != null && this.columnModel.isColumnGroupingLocked(underlyingColumn),\n                        action: () => this.columnModel.removeRowGroupColumns([showRowGroup], \"contextMenu\"),\n                        icon: icon\n                    };\n                }\n                // Handle primary column\n                return {\n                    name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + _.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),\n                    disabled: !column?.isRowGroupActive() || !column?.getColDef().enableRowGroup || this.columnModel.isColumnGroupingLocked(column),\n                    action: () => this.columnModel.removeRowGroupColumns([column], \"contextMenu\"),\n                    icon: icon\n                };\n            case 'resetColumns':\n                return {\n                    name: localeTextFunc('resetColumns', 'Reset Columns'),\n                    action: () => this.columnModel.resetColumnState(\"contextMenu\")\n                };\n            case 'expandAll':\n                return {\n                    name: localeTextFunc('expandAll', 'Expand All Row Groups'),\n                    action: () => this.gridApi.expandAll()\n                };\n            case 'contractAll':\n                return {\n                    name: localeTextFunc('collapseAll', 'Collapse All Row Groups'),\n                    action: () => this.gridApi.collapseAll()\n                };\n            case 'copy':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copy', 'Copy'),\n                        shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n                        icon: _.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard()\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithHeaders':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy with Headers from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard({ includeHeaders: true })\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithGroupHeaders':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy with Group Headers from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copyWithGroupHeaders', 'Copy with Group Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard({ includeHeaders: true, includeGroupHeaders: true })\n                    };\n                } else {\n                    return null;\n                }\n            case 'cut':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Cut from Menu', this.context.getGridId())) {\n                    const focusedCell = this.focusService.getFocusedCell();\n                    const rowNode = focusedCell ? this.rowPositionUtils.getRowNode(focusedCell) : null;\n                    const isEditable = rowNode ? focusedCell?.column.isCellEditable(rowNode) : false;\n                    return {\n                        name: localeTextFunc('cut', 'Cut'),\n                        shortcut: localeTextFunc('ctrlX', 'Ctrl+X'),\n                        icon: _.createIconNoSpan('clipboardCut', this.gridOptionsService, null),\n                        disabled: !isEditable || this.gridOptionsService.get('suppressCutToClipboard'),\n                        action: () => this.clipboardService.cutToClipboard(undefined, 'contextMenu')\n                    };\n                } else {\n                    return null;\n                }\n            case 'paste':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Paste from Clipboard', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('paste', 'Paste'),\n                        shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n                        disabled: true,\n                        icon: _.createIconNoSpan('clipboardPaste', this.gridOptionsService, null),\n                        action: () => this.clipboardService.pasteFromClipboard()\n                    };\n                } else {\n                    return null;\n                }\n            case 'export':\n                const exportSubMenuItems: string[] = [];\n\n                const csvModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.context.getGridId());\n                const excelModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.context.getGridId());\n\n                if (!this.gridOptionsService.get('suppressCsvExport') && csvModuleLoaded) {\n                    exportSubMenuItems.push('csvExport');\n                }\n                if (!this.gridOptionsService.get('suppressExcelExport') && excelModuleLoaded) {\n                    exportSubMenuItems.push('excelExport');\n                }\n                return {\n                    name: localeTextFunc('export', 'Export'),\n                    subMenu: exportSubMenuItems,\n                    icon: _.createIconNoSpan('save', this.gridOptionsService, null),\n                };\n            case 'csvExport':\n                return {\n                    name: localeTextFunc('csvExport', 'CSV Export'),\n                    icon: _.createIconNoSpan('csvExport', this.gridOptionsService, null),\n                    action: () => this.gridApi.exportDataAsCsv({})\n                };\n            case 'excelExport':\n                return {\n                    name: localeTextFunc('excelExport', 'Excel Export'),\n                    icon: _.createIconNoSpan('excelExport', this.gridOptionsService, null),\n                    action: () => this.gridApi.exportDataAsExcel()\n                };\n            case 'separator':\n                return 'separator';\n            case 'pivotChart':\n            case 'chartRange':\n                return this.chartMenuItemMapper.getChartItems(key) ?? null;\n            case 'columnFilter':\n                if (column) {\n                    return {\n                        name: localeTextFunc('columnFilter', 'Column Filter'),\n                        icon: _.createIconNoSpan('filter', this.gridOptionsService, null),\n                        action: () => this.menuService.showFilterMenu({\n                            column, buttonElement: sourceElement(), containerType: 'columnFilter', positionBy: 'button'\n                        })\n                    };\n                } else {\n                    return null;\n                }\n            case 'columnChooser':\n                if (ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('columnChooser', 'Choose Columns'),\n                        icon: _.createIconNoSpan('columns', this.gridOptionsService, null),\n                        action: () => this.menuService.showColumnChooser({ column, eventSource: sourceElement() })\n                    }\n                } else {\n                    return null;\n                }\n            case 'sortAscending':\n                return {\n                    name: localeTextFunc('sortAscending', 'Sort Ascending'),\n                    icon: _.createIconNoSpan('sortAscending', this.gridOptionsService, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'asc', false, 'columnMenu')\n                }\n            case 'sortDescending':\n                return {\n                    name: localeTextFunc('sortDescending', 'Sort Descending'),\n                    icon: _.createIconNoSpan('sortDescending', this.gridOptionsService, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'desc', false, 'columnMenu')\n                }\n            case 'sortUnSort':\n                return {\n                    name: localeTextFunc('sortUnSort', 'Clear Sort'),\n                    icon: _.createIconNoSpan('sortUnSort', this.gridOptionsService, null),\n                    action: () => this.sortController.setSortForColumn(column!, null, false, 'columnMenu')\n                }\n            default: {\n                console.warn(`AG Grid: unknown menu item type ${key}`);\n                return null;\n            }\n        }\n    }\n\n    private createAggregationSubMenu(column: Column): MenuItemDef[] {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let columnToUse: Column | undefined;\n        if (column.isPrimary()) {\n            columnToUse = column;\n        } else {\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n            columnToUse = _.exists(pivotValueColumn) ? pivotValueColumn : undefined;\n        }\n\n        const result: MenuItemDef[] = [];\n        if (columnToUse) {\n            const columnIsAlreadyAggValue = columnToUse.isValueActive();\n            const funcNames = this.aggFuncService.getFuncNames(columnToUse);\n\n            result.push({\n                name: localeTextFunc('noAggregation', 'None'),\n                action: () => {\n                    this.columnModel.removeValueColumns([columnToUse!], \"contextMenu\");\n                    this.columnModel.setColumnAggFunc(columnToUse, undefined, \"contextMenu\");\n                },\n                checked: !columnIsAlreadyAggValue\n            })\n\n            funcNames.forEach(funcName => {\n                result.push({\n                    name: localeTextFunc(funcName, this.aggFuncService.getDefaultFuncLabel(funcName)),\n                    action: () => {\n                        this.columnModel.setColumnAggFunc(columnToUse, funcName, \"contextMenu\");\n                        this.columnModel.addValueColumns([columnToUse!], \"contextMenu\");\n                    },\n                    checked: columnIsAlreadyAggValue && columnToUse!.getAggFunc() === funcName\n                });\n            });\n\n        }\n\n        return result;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Bean, BeanStub, ChartGroupsDef, ChartType, GridOptionsService, IChartService, LocaleService, MenuItemDef, ModuleNames, ModuleRegistry, Optional, _ } from '@ag-grid-community/core';\n\n@Bean('chartMenuItemMapper')\nexport class ChartMenuItemMapper extends BeanStub {\n\n    @Optional('chartService') private readonly chartService: IChartService;\n\n    public getChartItems(key: 'pivotChart' | 'chartRange'): MenuItemDef | undefined {\n        if (!this.chartService) {\n            ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, `the Context Menu key \"${key}\"`, this.context.getGridId());\n            return undefined;\n        }\n\n        const builder = key === 'pivotChart'\n            ? new PivotMenuItemMapper(this.gridOptionsService, this.chartService, this.localeService)\n            : new RangeMenuItemMapper(this.gridOptionsService, this.chartService, this.localeService);\n\n        const isEnterprise = this.chartService.isEnterprise();\n\n        let topLevelMenuItem: MenuItemDefWithKey | undefined = builder.getMenuItem();\n\n        if (topLevelMenuItem && topLevelMenuItem.subMenu && !isEnterprise) {\n            // Filter out enterprise-only menu items if 'Community Integrated'\n            const filterEnterpriseItems = (m: MenuItemDefWithKey): MenuItemDefWithKey => ({\n                ...m,\n                subMenu: m.subMenu?.filter((menu) => !menu._enterprise).map((menu) => filterEnterpriseItems(menu))\n            });\n            topLevelMenuItem = filterEnterpriseItems(topLevelMenuItem);\n        }\n\n        const chartGroupsDef = this.gridOptionsService.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n        if (chartGroupsDef) {\n            topLevelMenuItem = ChartMenuItemMapper.filterAndOrderChartMenu(topLevelMenuItem, chartGroupsDef, builder.getConfigLookup());\n        }\n        return this.cleanInternals(topLevelMenuItem);\n    }\n\n    // Remove our internal _key and _enterprise properties so this does not leak out of the class on the menu items.\n    private cleanInternals(menuItem: MenuItemDefWithKey | undefined): MenuItemDef | undefined {\n        if (!menuItem) {\n            return menuItem;\n        }\n\n        const removeKeys = (m: MenuItemDefWithKey | undefined) => {\n            delete m?._key;\n            delete m?._enterprise;\n            m?.subMenu?.forEach(s => removeKeys(s));\n            return m;\n        }\n\n        return removeKeys(menuItem);\n    }\n\n    private static buildLookup<T extends MenuItemDefWithKey<any>>(menuItem: T) {\n        let itemLookup: Record<any, T> = {} as any;\n        const addItem = (item: T) => {\n            itemLookup[item._key] = item;\n            if (item.subMenu) {\n                item.subMenu.forEach(s => addItem(s as T))\n            }\n        }\n        addItem(menuItem);\n        return itemLookup;\n    }\n\n    /**\n     * Make the MenuItem match the charts provided and their ordering on the ChartGroupsDef config object as provided by the user.\n     */\n    private static filterAndOrderChartMenu<TKeys extends string>(topLevelMenuItem: MenuItemDefWithKey<TKeys>, chartGroupsDef: ChartGroupsDef, configLookup: ChartDefToMenuItems<TKeys>): MenuItemDefWithKey<TKeys> | undefined {\n\n        const menuItemLookup = this.buildLookup(topLevelMenuItem)\n        let orderedAndFiltered: MenuItemDefWithKey = { ...topLevelMenuItem, subMenu: [] };\n\n        Object.entries(chartGroupsDef).forEach(([group, chartTypes]: [keyof ChartGroupsDef, ChartType[]]) => {\n\n            const chartConfigGroup = configLookup[group];\n\n            // Skip any context panels that are not enabled for the current chart type\n            if (chartConfigGroup === null) return;\n\n            if (chartConfigGroup == undefined) {\n                _.warnOnce(`invalid chartGroupsDef config '${group}'`);\n                return undefined;\n            }\n\n            const menuItem = menuItemLookup[chartConfigGroup._key];\n            if (menuItem) {\n                if (menuItem.subMenu) {\n                    const subMenus = chartTypes.map(chartType => {\n                        const itemKey = (chartConfigGroup as any)[chartType];\n                        if (itemKey == undefined) {                            \n                            _.warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                            return undefined;\n                        }\n                        return menuItemLookup[itemKey];\n                    }).filter(s => s !== undefined) as MenuItemDefWithKey[];\n\n                    if (subMenus.length > 0) {\n                        menuItem.subMenu = subMenus;\n                        orderedAndFiltered.subMenu?.push(menuItem);\n                    }\n                } else {\n                    // Handles line case which is not actually a sub subMenu\n                    orderedAndFiltered.subMenu?.push(menuItem);\n                }\n            }\n        })\n        if (orderedAndFiltered.subMenu?.length == 0) {\n            return undefined;\n        }\n        return orderedAndFiltered;\n    }\n}\n\n\ninterface MenuItemBuilder<MenuItemKeys extends string> {\n    getMenuItem(): MenuItemDefWithKey<MenuItemKeys>;\n    getConfigLookup(): ChartDefToMenuItems<MenuItemKeys>\n}\n\n/** Utility type to keep chart menu item lookups in sync with ChartGroupsDef */\ntype ChartDefToMenuItems<MenuItemKeys extends string> = {\n    [K in keyof ChartGroupsDef]-?: ChartGroupsDef[K] extends ((infer P)[] | undefined) ?\n    [P] extends [ChartType] ?\n    ({ [T in P]-?: MenuItemKeys | null } & { _key: MenuItemKeys }) | null\n    : never\n    : never\n}\n\n\ninterface MenuItemDefWithKey<MenuItemKey extends string = any> extends MenuItemDef {\n    _key: MenuItemKey;\n    _enterprise?: boolean;\n    subMenu?: MenuItemDefWithKey<MenuItemKey>[];\n}\n\nexport type PivotMenuOptionName =\n    'pivotChart' |\n    'pivotColumnChart' | 'pivotGroupedColumn' | 'pivotStackedColumn' | 'pivotNormalizedColumn' |\n    'pivotBarChart' | 'pivotGroupedBar' | 'pivotStackedBar' | 'pivotNormalizedBar' |\n    'pivotPieChart' | 'pivotPie' | 'pivotDonut' |\n    'pivotLineChart' |\n    'pivotXYChart' | 'pivotScatter' | 'pivotBubble' |\n    'pivotAreaChart' | 'pivotArea' | 'pivotStackedArea' | 'pivotNormalizedArea' |\n    'pivotStatisticalChart' | 'pivotHistogram' |\n    'pivotHierarchicalChart' | 'pivotTreemap' | 'pivotSunburst' |\n    'pivotCombinationChart' | 'pivotColumnLineCombo' | 'pivotAreaColumnCombo';\n\nclass PivotMenuItemMapper implements MenuItemBuilder<PivotMenuOptionName>{\n\n    constructor(private gridOptionsService: GridOptionsService, private chartService: IChartService, private localeService: LocaleService) { }\n\n    getMenuItem(): MenuItemDefWithKey<PivotMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (localeKey: string, defaultText: string, chartType: ChartType, key: PivotMenuOptionName, enterprise = false) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createPivotChart({ chartType }),\n                _key: key,\n                _enterprise: enterprise\n            };\n        };\n        return {\n            name: localeTextFunc('pivotChart', 'Pivot Chart'),\n            _key: 'pivotChart',\n            subMenu: [\n                {\n                    _key: 'pivotColumnChart',\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'pivotGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'pivotStackedColumn'),\n                        getMenuItem('normalizedColumn', '100% Stacked&lrm;', 'normalizedColumn', 'pivotNormalizedColumn')\n                    ]\n                },\n                {\n                    _key: 'pivotBarChart',\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'pivotGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'pivotStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'pivotNormalizedBar')\n                    ]\n                },\n                {\n                    _key: 'pivotPieChart',\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'pivotPie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'pivotDonut')\n                    ]\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'pivotLineChart'),\n                {\n                    _key: 'pivotXYChart',\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'pivotScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'pivotBubble')\n                    ]\n                },\n                {\n                    _key: 'pivotAreaChart',\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu:\n                        [\n                            getMenuItem('area', 'Area&lrm;', 'area', 'pivotArea'),\n                            getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'pivotStackedArea'),\n                            getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'pivotNormalizedArea')\n                        ]\n                },\n                {\n                    _key: 'pivotStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu:\n                        [\n                            getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'pivotHistogram', false),\n                        ],\n                },\n                {\n                    _key: 'pivotHierarchicalChart',\n                    _enterprise: true,\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu:\n                        [\n                            getMenuItem('treemapChart', 'Treemap&lrm;', 'treemap', 'pivotTreemap', true),\n                            getMenuItem('sunburstChart', 'Sunburst&lrm;', 'sunburst', 'pivotSunburst', true),\n                        ],\n                },\n                {\n                    _key: 'pivotCombinationChart',\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'pivotColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'pivotAreaColumnCombo')\n                    ]\n                }\n            ],\n            icon: _.createIconNoSpan('chart', this.gridOptionsService, undefined),\n        }\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<PivotMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'pivotColumnChart',\n                column: 'pivotGroupedColumn',\n                stackedColumn: 'pivotStackedColumn',\n                normalizedColumn: 'pivotNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'pivotBarChart',\n                bar: 'pivotGroupedBar',\n                stackedBar: 'pivotStackedBar',\n                normalizedBar: 'pivotNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'pivotPieChart',\n                pie: 'pivotPie',\n                donut: 'pivotDonut',\n                doughnut: 'pivotDonut',\n            },\n            lineGroup: {\n                _key: 'pivotLineChart',\n                line: 'pivotLineChart',\n            },\n            scatterGroup: {\n                _key: 'pivotXYChart',\n                bubble: 'pivotBubble',\n                scatter: 'pivotScatter',\n            },\n            areaGroup: {\n                _key: 'pivotAreaChart',\n                area: 'pivotArea',\n                stackedArea: 'pivotStackedArea',\n                normalizedArea: 'pivotNormalizedArea',\n            },\n            combinationGroup: {\n                _key: 'pivotCombinationChart',\n                columnLineCombo: 'pivotColumnLineCombo',\n                areaColumnCombo: 'pivotAreaColumnCombo',\n                customCombo: null, // Not currently supported\n            },\n            hierarchicalGroup: {\n                _key: 'pivotHierarchicalChart',\n                treemap: 'pivotTreemap',\n                sunburst: 'pivotSunburst',\n            },\n            statisticalGroup: {\n                _key: 'pivotStatisticalChart',\n                histogram: 'pivotHistogram',\n                // Some statistical charts do not currently support pivot mode\n                rangeBar: null,\n                rangeArea: null,\n                boxPlot: null,\n            },\n            // Polar charts do not support pivot mode\n            polarGroup: null,\n            // Specialized charts do not currently support pivot mode\n            specializedGroup: null,\n        }\n    }\n}\n\nexport type RangeMenuOptionName =\n    'chartRange' |\n    'rangeColumnChart' | 'rangeGroupedColumn' | 'rangeStackedColumn' | 'rangeNormalizedColumn' |\n    'rangeBarChart' | 'rangeGroupedBar' | 'rangeStackedBar' | 'rangeNormalizedBar' |\n    'rangePieChart' | 'rangePie' | 'rangeDonut' |\n    'rangeLineChart' |\n    'rangeXYChart' | 'rangeScatter' | 'rangeBubble' |\n    'rangeAreaChart' | 'rangeArea' | 'rangeStackedArea' | 'rangeNormalizedArea' |\n    'rangePolarChart' | 'rangeRadarLine' | 'rangeRadarArea' | 'rangeNightingale' | 'rangeRadialColumn' | 'rangeRadialBar' |\n    'rangeStatisticalChart' | 'rangeBoxPlot' | 'rangeHistogram' |'rangeRangeBar' | 'rangeRangeArea' |\n    'rangeHierarchicalChart' | 'rangeTreemap' | 'rangeSunburst' |\n    'rangeSpecializedChart' | 'rangeWaterfall' | 'rangeHeatmap' |\n    'rangeCombinationChart' | 'rangeColumnLineCombo' | 'rangeAreaColumnCombo';\n\nclass RangeMenuItemMapper implements MenuItemBuilder<RangeMenuOptionName> {\n\n    constructor(private gridOptionsService: GridOptionsService, private chartService: IChartService, private localeService: LocaleService) { }\n\n    getMenuItem(): MenuItemDefWithKey<RangeMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (localeKey: string, defaultText: string, chartType: ChartType, key: RangeMenuOptionName, enterprise = false) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createChartFromCurrentRange(chartType),\n                _key: key,\n                _enterprise: enterprise\n            };\n        };\n\n        return {\n            name: localeTextFunc('chartRange', 'Chart Range'),\n            _key: 'chartRange',\n            subMenu: [\n                {\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'rangeGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'rangeStackedColumn'),\n                        getMenuItem('normalizedColumn', '100% Stacked&lrm;', 'normalizedColumn', 'rangeNormalizedColumn')\n                    ],\n                    _key: 'rangeColumnChart'\n                },\n                {\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'rangeGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'rangeStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'rangeNormalizedBar')\n                    ],\n                    _key: 'rangeBarChart'\n                },\n                {\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'rangePie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'rangeDonut')\n                    ],\n                    _key: 'rangePieChart'\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'rangeLineChart'),\n                {\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'rangeScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'rangeBubble')\n                    ],\n                    _key: 'rangeXYChart'\n                },\n                {\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu:\n                        [\n                            getMenuItem('area', 'Area&lrm;', 'area', 'rangeArea'),\n                            getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'rangeStackedArea'),\n                            getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'rangeNormalizedArea')\n                        ],\n                    _key: 'rangeAreaChart'\n                },\n                {\n                    name: localeTextFunc('polarChart', 'Polar'),\n                    subMenu:\n                        [\n                            getMenuItem('radarLine', 'Radar Line&lrm;', 'radarLine', 'rangeRadarLine'),\n                            getMenuItem('radarArea', 'Radar Area&lrm;', 'radarArea', 'rangeRadarArea'),\n                            getMenuItem('nightingale', 'Nightingale&lrm;', 'nightingale', 'rangeNightingale'),\n                            getMenuItem('radialColumn', 'Radial Column&lrm;', 'radialColumn', 'rangeRadialColumn'),\n                            getMenuItem('radialBar', 'Radial Bar&lrm;', 'radialBar', 'rangeRadialBar'),\n                        ],\n                    _key: 'rangePolarChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu:\n                        [\n                            getMenuItem('boxPlot', 'Box Plot&lrm;', 'boxPlot', 'rangeBoxPlot', true),\n                            getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'rangeHistogram', false),\n                            getMenuItem('rangeBar', 'Range Bar&lrm;', 'rangeBar', 'rangeRangeBar', true),\n                            getMenuItem('rangeArea', 'Range Area&lrm;', 'rangeArea', 'rangeRangeArea', true),\n                        ],\n                    _key: 'rangeStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                },\n                {\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu:\n                        [\n                            getMenuItem('treemap', 'Treemap&lrm;', 'treemap', 'rangeTreemap'),\n                            getMenuItem('sunburst', 'Sunburst&lrm;', 'sunburst', 'rangeSunburst'),\n                        ],\n                    _key: 'rangeHierarchicalChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('specializedChart', 'Specialized'),\n                    subMenu:\n                        [\n                            getMenuItem('heatmap', 'Heatmap&lrm;', 'heatmap', 'rangeHeatmap'),\n                            getMenuItem('waterfall', 'Waterfall&lrm;', 'waterfall', 'rangeWaterfall'),\n                        ],\n                    _key: 'rangeSpecializedChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'rangeColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'rangeAreaColumnCombo')\n                    ],\n                    _key: 'rangeCombinationChart'\n                }\n            ],\n            icon: _.createIconNoSpan('chart', this.gridOptionsService, undefined),\n        }\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<RangeMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'rangeColumnChart',\n                column: 'rangeGroupedColumn',\n                stackedColumn: 'rangeStackedColumn',\n                normalizedColumn: 'rangeNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'rangeBarChart',\n                bar: 'rangeGroupedBar',\n                stackedBar: 'rangeStackedBar',\n                normalizedBar: 'rangeNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'rangePieChart',\n                pie: 'rangePie',\n                donut: 'rangeDonut',\n                doughnut: 'rangeDonut',\n            },\n            lineGroup: {\n                _key: 'rangeLineChart',\n                line: 'rangeLineChart',\n            },\n            scatterGroup: {\n                _key: 'rangeXYChart',\n                bubble: 'rangeBubble',\n                scatter: 'rangeScatter',\n            },\n            areaGroup: {\n                _key: 'rangeAreaChart',\n                area: 'rangeArea',\n                stackedArea: 'rangeStackedArea',\n                normalizedArea: 'rangeNormalizedArea',\n            },\n            polarGroup: {\n                _key: 'rangePolarChart',\n                radarLine: 'rangeRadarLine',\n                radarArea: 'rangeRadarArea',\n                nightingale: 'rangeNightingale',\n                radialColumn: 'rangeRadialColumn',\n                radialBar: 'rangeRadialBar',\n            },\n            statisticalGroup: {\n                _key: 'rangeStatisticalChart',\n                boxPlot: 'rangeBoxPlot',\n                histogram: 'rangeHistogram',\n                rangeBar: 'rangeRangeBar',\n                rangeArea: 'rangeRangeArea',\n            },\n            hierarchicalGroup: {\n                _key: 'rangeHierarchicalChart',\n                treemap: 'rangeTreemap',\n                sunburst: 'rangeSunburst',\n            },\n            specializedGroup: {\n                _key: 'rangeSpecializedChart',\n                heatmap: 'rangeHeatmap',\n                waterfall: 'rangeWaterfall',\n            },\n            combinationGroup: {\n                _key: 'rangeCombinationChart',\n                columnLineCombo: 'rangeColumnLineCombo',\n                areaColumnCombo: 'rangeAreaColumnCombo',\n                customCombo: null // Not currently supported\n            }\n        }\n    }\n}\n", "import {\n    AgDialog,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnChooserParams,\n    ColumnMenuVisibleChangedEvent,\n    ColumnModel,\n    Events,\n    FocusService,\n    IColumnChooserFactory,\n    ShowColumnChooserParams,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { PrimaryColsPanel } from \"@ag-grid-enterprise/column-tool-panel\";\nimport { MenuUtils } from \"./menuUtils\";\n\n@Bean('columnChooserFactory')\nexport class ColumnChooserFactory extends BeanStub implements IColumnChooserFactory {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    private activeColumnChooser: PrimaryColsPanel | undefined;\n    private activeColumnChooserDialog: AgDialog | undefined;\n\n    public createColumnSelectPanel(\n        parent: BeanStub, column?: Column | null, draggable?: boolean, params?: ColumnChooserParams\n    ): PrimaryColsPanel {\n        const columnSelectPanel = parent.createManagedBean(new PrimaryColsPanel());\n    \n        const columnChooserParams = params ?? column?.getColDef().columnChooserParams ?? column?.getColDef().columnsMenuParams ?? {};\n    \n        const {\n            contractColumnSelection, suppressColumnExpandAll, suppressColumnFilter,\n            suppressColumnSelectAll, suppressSyncLayoutWithGrid, columnLayout\n        } = columnChooserParams;\n    \n        columnSelectPanel.init(!!draggable, this.gridOptionsService.addGridCommonParams({\n            suppressColumnMove: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressRowGroups: false,\n            suppressPivotMode: false,\n            contractColumnSelection: !!contractColumnSelection,\n            suppressColumnExpandAll: !!suppressColumnExpandAll,\n            suppressColumnFilter: !!suppressColumnFilter,\n            suppressColumnSelectAll: !!suppressColumnSelectAll,\n            suppressSyncLayoutWithGrid: !!columnLayout || !!suppressSyncLayoutWithGrid,\n            onStateUpdated: () => {}\n        }), 'columnMenu');\n    \n        if (columnLayout) {\n            columnSelectPanel.setColumnLayout(columnLayout);\n        }\n    \n        return columnSelectPanel;\n    }\n\n    public showColumnChooser({ column, chooserParams, eventSource }: ShowColumnChooserParams): void {\n        this.hideActiveColumnChooser();\n\n        const columnSelectPanel = this.createColumnSelectPanel(this, column, true, chooserParams);\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnIndex = this.columnModel.getAllDisplayedColumns().indexOf(column!);\n        const headerPosition = column ? this.focusService.getFocusedHeader() : null;\n\n        this.activeColumnChooserDialog = this.createBean(new AgDialog({\n            title: translate('chooseColumns', 'Choose Columns'),\n            component: columnSelectPanel,\n            width: 300,\n            height: 300,\n            resizable: true,\n            movable: true,\n            centered: true,\n            closable: true,\n            afterGuiAttached: () => {\n                this.focusService.findNextFocusableElement(columnSelectPanel.getGui())?.focus();\n                this.dispatchVisibleChangedEvent(true, column);\n            },\n            closedCallback: (event) => {\n                const eComp = this.activeColumnChooser!.getGui();\n                this.destroyBean(this.activeColumnChooser);\n                this.activeColumnChooser = undefined;\n                this.activeColumnChooserDialog = undefined;\n                this.dispatchVisibleChangedEvent(false, column);\n                if (column) {\n                    this.menuUtils.restoreFocusOnClose({ column, headerPosition, columnIndex, eventSource }, eComp, event, true);\n                }\n            }\n        }));\n\n        this.activeColumnChooser = columnSelectPanel;\n    }\n\n    public hideActiveColumnChooser(): void {\n        if (this.activeColumnChooserDialog) {\n            this.destroyBean(this.activeColumnChooserDialog);\n        }\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, column?: Column | null): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: Events.EVENT_COLUMN_MENU_VISIBLE_CHANGED,\n            visible,\n            switchingTab: false,\n            key: 'columnChooser',\n            column: column ?? null\n        };\n        this.eventService.dispatchEvent(event);\n    }\n}\n", "import {\n    AgMenuList,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    FilterManager,\n    IRowModel,\n    MenuItemDef,\n    MenuService,\n    _\n} from \"@ag-grid-community/core\";\nimport { MenuItemMapper } from \"./menuItemMapper\";\n\n@Bean('columnMenuFactory')\nexport class ColumnMenuFactory extends BeanStub {\n    @Autowired('menuItemMapper') private readonly menuItemMapper: MenuItemMapper;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('rowModel') private readonly rowModel: IRowModel;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('menuService') private readonly menuService: MenuService;\n\n    private static MENU_ITEM_SEPARATOR = 'separator';\n\n    public createMenu(parent: BeanStub, column: Column | undefined, sourceElement: () => HTMLElement): AgMenuList {\n        const menuList = parent.createManagedBean(new AgMenuList(0, {\n            column: column ?? null,\n            node: null,\n            value: null\n        }));\n\n        const menuItems = this.getMenuItems(column);\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, column ?? null, sourceElement);\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        return menuList;\n    }\n\n    private getMenuItems(column?: Column): (string | MenuItemDef)[] {\n        const defaultItems = this.getDefaultMenuOptions(column);\n        let result: (string | MenuItemDef)[];\n\n        const columnMainMenuItems = column?.getColDef().mainMenuItems;\n        if (Array.isArray(columnMainMenuItems)) {\n            result = columnMainMenuItems;\n        } else if (typeof columnMainMenuItems === 'function') {\n            result = columnMainMenuItems(this.gridOptionsService.addGridCommonParams({\n                column: column!,\n                defaultItems\n            }));\n        } else {\n            const userFunc = this.gridOptionsService.getCallback('getMainMenuItems');\n            if (userFunc && column) {\n                result = userFunc({\n                    column,\n                    defaultItems\n                });\n            } else {\n                result = defaultItems;\n            }\n        }\n\n        // GUI looks weird when two separators are side by side. this can happen accidentally\n        // if we remove items from the menu then two separators can edit up adjacent.\n        _.removeRepeatsFromArray(result, ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n\n        return result;\n    }\n\n    private getDefaultMenuOptions(column?: Column): string[] {\n        const result: string[] = [];\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n\n        if (!column) {\n            if (!isLegacyMenuEnabled) {\n                result.push('columnChooser');\n            }\n            result.push('resetColumns');\n            return result;\n        }\n\n        const allowPinning = !column.getColDef().lockPinned;\n\n        const rowGroupCount = this.columnModel.getRowGroupColumns().length;\n        const doingGrouping = rowGroupCount > 0;\n\n        const allowValue = column.isAllowValue();\n        const allowRowGroup = column.isAllowRowGroup();\n        const isPrimary = column.isPrimary();\n        const pivotModeOn = this.columnModel.isPivotMode();\n\n        const isInMemoryRowModel = this.rowModel.getType() === 'clientSide';\n\n        const usingTreeData = this.gridOptionsService.get('treeData');\n\n        const allowValueAgg =\n            // if primary, then only allow aggValue if grouping and it's a value columns\n            (isPrimary && doingGrouping && allowValue)\n            // secondary columns can always have aggValue, as it means it's a pivot value column\n            || !isPrimary;\n\n        if (!isLegacyMenuEnabled && column.isSortable()) {\n            const sort = column.getSort();\n            if (sort !== 'asc') {\n                result.push('sortAscending');\n            }\n            if (sort !== 'desc') {\n                result.push('sortDescending');\n            }\n            if (sort) {\n                result.push('sortUnSort');\n            }\n            result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        }\n\n        if (this.menuService.isFilterMenuItemEnabled(column)) {\n            result.push('columnFilter');\n            result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        }\n\n        if (allowPinning) {\n            result.push('pinSubMenu');\n        }\n\n        if (allowValueAgg) {\n            result.push('valueAggSubMenu');\n        }\n\n        if (allowPinning || allowValueAgg) {\n            result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        }\n\n        result.push('autoSizeThis');\n        result.push('autoSizeAll');\n        result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n\n        const showRowGroup = column.getColDef().showRowGroup;\n        if (showRowGroup) {\n            result.push('rowUnGroup');\n        } else if (allowRowGroup && column.isPrimary()) {\n            if (column.isRowGroupActive()) {\n                const groupLocked = this.columnModel.isColumnGroupingLocked(column);\n                if (!groupLocked) {\n                    result.push('rowUnGroup');\n                }\n            } else {\n                result.push('rowGroup');\n            }\n        }\n        result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        if (!isLegacyMenuEnabled) {\n            result.push('columnChooser');\n        }\n        result.push('resetColumns');\n\n        // only add grouping expand/collapse if grouping in the InMemoryRowModel\n        // if pivoting, we only have expandable groups if grouping by 2 or more columns\n        // as the lowest level group is not expandable while pivoting.\n        // if not pivoting, then any active row group can be expanded.\n        const allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));\n\n        if (allowExpandAndContract) {\n            result.push('expandAll');\n            result.push('contractAll');\n        }\n\n        return result;\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    FocusService,\n    HeaderNavigationService,\n    HeaderPosition,\n    CloseMenuEvent,\n    PopupEventParams,\n    _\n} from \"@ag-grid-community/core\";\n\nexport interface MenuRestoreFocusParams {\n    column: Column | undefined;\n    headerPosition: HeaderPosition | null;\n    columnIndex: number;\n    eventSource?: HTMLElement;\n}\n\n@Bean('menuUtils')\nexport class MenuUtils extends BeanStub {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('headerNavigationService') private readonly headerNavigationService: HeaderNavigationService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    public restoreFocusOnClose(\n        restoreFocusParams: MenuRestoreFocusParams,\n        eComp:  HTMLElement,\n        e?: Event,\n        restoreIfMouseEvent?: boolean\n    ): void {\n        const { eventSource } = restoreFocusParams;\n        const isKeyboardEvent = e instanceof KeyboardEvent;\n        if ((!restoreIfMouseEvent && !isKeyboardEvent) || !eventSource) { return; }\n        \n        const eDocument = this.gridOptionsService.getDocument();\n        if (!eComp.contains(eDocument.activeElement) && eDocument.activeElement !== eDocument.body) {\n            // something else has focus, so don't return focus to the header\n            return;\n        }\n\n        this.focusHeaderCell(restoreFocusParams);\n    }\n\n    public closePopupAndRestoreFocusOnSelect(\n        hidePopupFunc: (popupParams?: PopupEventParams) => void,\n        restoreFocusParams: MenuRestoreFocusParams,\n        event?: CloseMenuEvent\n    ): void {\n        let keyboardEvent: KeyboardEvent | undefined;\n\n        if (event && event.event && event.event instanceof KeyboardEvent) {\n            keyboardEvent = event.event;\n        }\n\n        hidePopupFunc(keyboardEvent && { keyboardEvent });\n\n        // this method only gets called when the menu was closed by selecting an option\n        // in this case we focus the cell that was previously focused, otherwise the header\n        const focusedCell = this.focusService.getFocusedCell();\n        const eDocument = this.gridOptionsService.getDocument();\n\n        if (eDocument.activeElement === eDocument.body) {\n            if (focusedCell) {\n                const { rowIndex, rowPinned, column } = focusedCell;\n                this.focusService.setFocusedCell({ rowIndex, column, rowPinned, forceBrowserFocus: true, preventScrollOnBrowserFocus: true });\n            } else {\n                this.focusHeaderCell(restoreFocusParams);\n            }\n        }\n    }\n\n    public onContextMenu(\n        mouseEvent: MouseEvent | null | undefined,\n        touchEvent: TouchEvent | null | undefined,\n        showMenuCallback: (eventOrTouch: (MouseEvent | Touch)\n    ) => boolean): void {\n        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.\n        // not everyone wants this, so first 'if' below allows to turn this hack off.\n        if (!this.gridOptionsService.get('allowContextMenuWithControlKey')) {\n            // then do the check\n            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) { return; }\n        }\n\n        // need to do this regardless of context menu showing or not, so doing\n        // before the isSuppressContextMenu() check\n        if (mouseEvent) {\n            this.blockMiddleClickScrollsIfNeeded(mouseEvent);\n        }\n\n        if (this.gridOptionsService.get('suppressContextMenu')) { return; }\n\n        const eventOrTouch: (MouseEvent | Touch) = mouseEvent ?? touchEvent!.touches[0];\n        if (showMenuCallback(eventOrTouch)) {\n            const event = mouseEvent ?? touchEvent;\n            event!.preventDefault();\n        }\n    }\n\n    private focusHeaderCell(restoreFocusParams: MenuRestoreFocusParams): void {\n        const { column, columnIndex, headerPosition, eventSource } = restoreFocusParams;\n\n        const isColumnStillVisible = this.columnModel.getAllDisplayedColumns().some(col => col === column);\n\n        if (isColumnStillVisible && eventSource && _.isVisible(eventSource)) {\n            const focusableEl = this.focusService.findTabbableParent(eventSource);\n            if (focusableEl) {\n                if (column) {\n                    this.headerNavigationService.scrollToColumn(column);\n                }\n                focusableEl.focus();\n            }\n        }\n        // if the focusEl is no longer in the DOM, we try to focus\n        // the header that is closest to the previous header position\n        else if (headerPosition && columnIndex !== -1) {\n            const allColumns = this.columnModel.getAllDisplayedColumns();\n            const columnToFocus = allColumns[columnIndex] || _.last(allColumns);\n\n            if (columnToFocus) {\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerPosition.headerRowIndex,\n                        column: columnToFocus\n                    }\n                });\n            }\n        }\n    }\n\n    private blockMiddleClickScrollsIfNeeded(mouseEvent: MouseEvent): void {\n        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'\n        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse\n        // button in the browser). so this property allows the user to receive middle button clicks if\n        // they want.\n        const { gridOptionsService } = this;\n        const { which } = mouseEvent;\n\n        if (gridOptionsService.get('suppressMiddleClickScrolls') && which === 2) {\n            mouseEvent.preventDefault();\n        }\n    }\n}\n", "import { Module, ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { MultiFilter } from './multiFilter/multiFilter';\nimport { MultiFloatingFilterComp } from './multiFilter/multiFloatingFilter';\nimport { VERSION } from './version';\n\nexport const MultiFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MultiFilterModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agMultiColumnFilter', componentClass: MultiFilter },\n        { componentName: 'agMultiColumnFloatingFilter', componentClass: MultiFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    ProvidedFilter,\n    AgPromise,\n    ProvidedFilterModel,\n    IDoesFilterPassParams,\n    IAfterGuiAttachedParams,\n    IFilterComp,\n    IMultiFilterDef,\n    MultiFilterParams,\n    IMultiFilterModel,\n    Autowired,\n    UserComponentFactory,\n    FilterManager,\n    Column,\n    IFilterDef,\n    IFilterParams,\n    RowNode,\n    AgGroupComponent,\n    ContainerType,\n    TabGuardComp,\n    AgMenuItemComponent,\n    AgMenuItemRenderer,\n    MenuItemActivatedEvent,\n    PostConstruct,\n    IMultiFilter,\n    _,\n    KeyCode\n} from '@ag-grid-community/core';\n\nexport class MultiFilter extends TabGuardComp implements IFilterComp, IMultiFilter {\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    private params: MultiFilterParams;\n    private filterDefs: IMultiFilterDef[] = [];\n    private filters: IFilterComp[] | null = [];\n    private guiDestroyFuncs: (() => void)[] = [];\n    // this could be the accordion/sub menu element depending on the display type\n    private filterGuis: HTMLElement[] = [];\n    private column: Column;\n    private filterChangedCallback: ((additionalEventAttributes?: any) => void) | null;\n    private lastOpenedInContainer?: ContainerType;\n    private activeFilterIndices: number[] = [];\n    private lastActivatedMenuItem: AgMenuItemComponent | null = null;\n    private hidePopup?: () => void;\n\n    private afterFiltersReadyFuncs: (() => void)[] = [];\n\n    constructor() {\n        super(/* html */`<div class=\"ag-multi-filter ag-menu-list-compact\"></div>`);\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initialiseTabGuard({\n            onFocusIn: e => this.onFocusIn(e)\n        });\n    }\n\n    public static getFilterDefs(params: MultiFilterParams): IMultiFilterDef[] {\n        const { filters } = params;\n\n        return filters && filters.length > 0 ?\n            filters :\n            [{ filter: 'agTextColumnFilter' }, { filter: 'agSetColumnFilter' }];\n    }\n\n    public init(params: MultiFilterParams): AgPromise<void> {\n        this.params = params;\n        this.filterDefs = MultiFilter.getFilterDefs(params);\n\n        const { column, filterChangedCallback } = params;\n\n        this.column = column;\n        this.filterChangedCallback = filterChangedCallback;\n\n        const filterPromises: AgPromise<IFilterComp>[] = [];\n\n        this.filterDefs.forEach((filterDef, index) => {\n            const filterPromise = this.createFilter(filterDef, index);\n\n            if (filterPromise != null) {\n                filterPromises.push(filterPromise);\n            }\n        });\n\n        // we have to refresh the GUI here to ensure that Angular components are not rendered in odd places\n        return new AgPromise<void>(resolve => {\n            AgPromise.all(filterPromises).then(filters => {\n                this.filters = filters as IFilterComp[];\n                this.refreshGui('columnMenu').then(() => {\n                    resolve();\n                });\n            });\n        }).then(() => {\n            this.afterFiltersReadyFuncs.forEach(f => f());\n            this.afterFiltersReadyFuncs.length = 0;\n\n        });\n    }\n\n    private refreshGui(container: ContainerType): AgPromise<void> {\n        if (container === this.lastOpenedInContainer) { return AgPromise.resolve(); }\n\n        this.removeAllChildrenExceptTabGuards();\n        this.destroyChildren();\n\n        return AgPromise.all(this.filters!.map((filter, index) => {\n            const filterDef = this.filterDefs[index];\n            const filterTitle = this.getFilterTitle(filter, filterDef);\n            let filterGuiPromise: AgPromise<HTMLElement>;\n\n            if (filterDef.display === 'subMenu' && container !== 'toolPanel') {\n                // prevent sub-menu being used in tool panel\n                filterGuiPromise = this.insertFilterMenu(filter, filterTitle).then(menuItem => menuItem!.getGui());\n            } else if (filterDef.display === 'subMenu' || filterDef.display === 'accordion') {\n                // sub-menus should appear as groups in the tool panel\n                const group = this.insertFilterGroup(filter, filterTitle);\n\n                filterGuiPromise = AgPromise.resolve(group.getGui());\n            } else {\n                // display inline\n                filterGuiPromise = AgPromise.resolve(filter.getGui());\n            }\n\n            return filterGuiPromise;\n        })).then((filterGuis) => {\n            filterGuis!.forEach((filterGui, index) => {\n                if (index > 0) {\n                    this.appendChild(_.loadTemplate(/* html */`<div class=\"ag-filter-separator\"></div>`));\n                }\n                this.appendChild(filterGui!);\n            });\n            this.filterGuis = filterGuis as HTMLElement[];\n            this.lastOpenedInContainer = container;\n        });\n    }\n\n    private getFilterTitle(filter: IFilterComp, filterDef: IMultiFilterDef): string {\n        if (filterDef.title != null) {\n            return filterDef.title;\n        }\n\n        return filter instanceof ProvidedFilter ? filter.getFilterTitle() : 'Filter';\n    }\n\n    private destroyChildren() {\n        this.guiDestroyFuncs.forEach(func => func());\n        this.guiDestroyFuncs.length = 0;\n        this.filterGuis.length = 0;\n    }\n\n    private insertFilterMenu(filter: IFilterComp, name: string): AgPromise<AgMenuItemComponent> {\n        const menuItem = this.createBean(new AgMenuItemComponent());\n        return menuItem.init({\n            menuItemDef: {\n                name,\n                subMenu: [],\n                cssClasses: ['ag-multi-filter-menu-item'],\n                menuItem: AgMenuItemRenderer,\n                menuItemParams: {\n                    cssClassPrefix: 'ag-compact-menu-option',\n                    isCompact: true,\n                }\n            },\n            level: 0,\n            isAnotherSubMenuOpen: () => false,\n            childComponent: filter,\n            contextParams: {\n                column: null,\n                node: null,\n                value: null\n            }\n        }).then(() => {\n            menuItem.setParentComponent(this);\n\n            this.guiDestroyFuncs.push(() => this.destroyBean(menuItem));\n\n            this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, (event: MenuItemActivatedEvent) => {\n                if (this.lastActivatedMenuItem && this.lastActivatedMenuItem !== event.menuItem) {\n                    this.lastActivatedMenuItem.deactivate();\n                }\n\n                this.lastActivatedMenuItem = event.menuItem;\n            });\n\n            const menuItemGui = menuItem.getGui();\n            // `AgMenuList` normally handles keyboard navigation, so need to do here\n            menuItem.addManagedListener(menuItemGui, 'keydown', (e: KeyboardEvent) => {\n                const { key } = e;\n                switch (key) {\n                    case KeyCode.UP:\n                    case KeyCode.RIGHT:\n                    case KeyCode.DOWN:\n                    case KeyCode.LEFT:\n                        e.preventDefault();\n                        if (key === KeyCode.RIGHT) {\n                            menuItem.openSubMenu(true);\n                        }\n                        break;\n                }\n            });\n            menuItem.addManagedListener(menuItemGui, 'focusin', () => menuItem.activate());\n            menuItem.addManagedListener(menuItemGui, 'focusout', () => {\n                if (!menuItem.isSubMenuOpen() && !menuItem.isSubMenuOpening()) {\n                    menuItem.deactivate();\n                }\n            });\n\n            return menuItem;\n        });\n    }\n\n    private insertFilterGroup(filter: IFilterComp, title: string): AgGroupComponent {\n        const group = this.createBean(new AgGroupComponent({\n            title,\n            cssIdentifier: 'multi-filter',\n        }));\n\n        this.guiDestroyFuncs.push(() => this.destroyBean(group));\n\n        group.addItem(filter.getGui());\n        group.toggleGroupExpand(false);\n\n        if (filter.afterGuiAttached) {\n            group.addManagedListener(group, AgGroupComponent.EVENT_EXPANDED, () => filter.afterGuiAttached!({\n                container: this.lastOpenedInContainer!,\n                suppressFocus: true,\n                hidePopup: this.hidePopup\n            }));\n        }\n\n        return group;\n    }\n\n    public isFilterActive(): boolean {\n        return this.filters!.some(filter => filter.isFilterActive());\n    }\n\n    public getLastActiveFilterIndex(): number | null {\n        return this.activeFilterIndices.length > 0 ? this.activeFilterIndices[this.activeFilterIndices.length - 1] : null;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams, filterToSkip?: IFilterComp): boolean {\n        let rowPasses = true;\n\n        this.filters!.forEach(filter => {\n            if (!rowPasses || filter === filterToSkip || !filter.isFilterActive()) { return; }\n\n            rowPasses = filter.doesFilterPass(params);\n        });\n\n        return rowPasses;\n    }\n\n    private getFilterType(): 'multi' {\n        return 'multi';\n    }\n\n    public getModelFromUi(): IMultiFilterModel | null {\n        const model: IMultiFilterModel = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters!.map(filter => {\n                const providedFilter = filter as ProvidedFilter<IMultiFilterModel, unknown>;\n\n                if (typeof providedFilter.getModelFromUi === 'function') {\n                    return providedFilter.getModelFromUi();\n                }\n\n                return null;\n            })\n        };\n\n        return model;\n    }\n\n    public getModel(): ProvidedFilterModel | null {\n        if (!this.isFilterActive()) {\n            return null;\n        }\n\n        const model: IMultiFilterModel = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters!.map(filter => {\n                if (filter.isFilterActive()) {\n                    return filter.getModel();\n                }\n\n                return null;\n            })\n        };\n\n        return model;\n    }\n\n    public setModel(model: IMultiFilterModel | null): AgPromise<void> {\n        const setFilterModel = (filter: IFilterComp, filterModel: any) => {\n            return new AgPromise<void>(resolve => {\n                const promise = filter.setModel(filterModel);\n                promise ? promise.then(() => resolve()) : resolve();\n            });\n        };\n\n        let promises: AgPromise<void>[] = [];\n\n        if (model == null) {\n            promises = this.filters!.map((filter: IFilterComp, index: number) => {\n                const res = setFilterModel(filter, null).then(() => {\n                    this.updateActiveList(index);\n                });\n                return res;\n            })!;\n        } else {\n            this.filters!.forEach((filter, index) => {\n                const filterModel = model.filterModels!.length > index ? model.filterModels![index] : null;\n                const res = setFilterModel(filter, filterModel).then(() => {\n                    this.updateActiveList(index);\n                });\n                promises.push(res);\n            });\n        }\n\n        return AgPromise.all(promises).then(() => { });\n    }\n\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        let result = false;\n\n        this.filters!.forEach((filter) => {\n            if (filter instanceof ProvidedFilter) {\n                result = filter.applyModel(source) || result;\n            }\n        });\n\n        return result;\n    }\n\n    public getChildFilterInstance(index: number): IFilterComp | undefined {\n        return this.filters![index];\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        let refreshPromise: AgPromise<void>;\n        if (params) {\n            this.hidePopup = params.hidePopup;\n            refreshPromise = this.refreshGui(params.container!);\n        } else {\n            this.hidePopup = undefined;\n            refreshPromise = AgPromise.resolve();\n        }\n\n        refreshPromise.then(() => {\n            const { filterDefs } = this;\n            let hasFocused = false;\n            if (filterDefs) {\n                _.forEachReverse(filterDefs!, (filterDef, index) => {\n                    const isFirst = index === 0;\n                    const suppressFocus = !isFirst || filterDef.display !== 'inline';\n                    const afterGuiAttachedParams = { ...params ?? {}, suppressFocus };\n                    const filter = this.filters?.[index];\n                    if (filter) {\n                        this.executeFunctionIfExistsOnFilter(filter, 'afterGuiAttached', afterGuiAttachedParams);\n                        if (isFirst) {\n                            hasFocused = true;\n                        }\n                    }\n                    if (isFirst && suppressFocus) {\n                        // focus the first filter container instead (accordion/sub menu)\n                        const filterGui = this.filterGuis[index];\n                        if (filterGui) {\n                            filterGui.focus();\n                            hasFocused = true;\n                        }\n                    }\n                });\n            }\n\n            const eDocument = this.gridOptionsService.getDocument();\n            const activeEl = eDocument.activeElement;\n\n            // if we haven't focused the first item in the filter, we might run into two scenarios:\n            // 1 - we are loading the filter for the first time and the component isn't ready,\n            //     which means the document will have focus.\n            // 2 - The focus will be somewhere inside the component due to auto focus\n            // In both cases we need to force the focus somewhere valid but outside the filter.\n            if (!hasFocused && (activeEl === eDocument.body || this.getGui().contains(activeEl))) {\n                // reset focus to the top of the container, and blur\n                this.forceFocusOutOfContainer(true);\n            }     \n        });\n    }\n\n    public afterGuiDetached(): void {\n        this.executeFunctionIfExists('afterGuiDetached');\n    }\n\n    public onAnyFilterChanged(): void {\n        this.executeFunctionIfExists('onAnyFilterChanged');\n    }\n\n    public onNewRowsLoaded(): void {\n        this.executeFunctionIfExists('onNewRowsLoaded');\n    }\n\n    public destroy(): void {\n        this.filters!.forEach(filter => {\n            filter.setModel(null);\n            this.destroyBean(filter);\n        });\n\n        this.filters!.length = 0;\n        this.destroyChildren();\n        this.hidePopup = undefined;\n\n        super.destroy();\n    }\n\n    private executeFunctionIfExists<T extends IFilterComp>(name: keyof T, ...params: any[]): void {\n        // The first filter is always the \"dominant\" one. By iterating in reverse order we ensure the first filter\n        // always gets the last say\n        _.forEachReverse(this.filters!, filter => {\n            this.executeFunctionIfExistsOnFilter(filter as T, name, params);\n        });\n    }\n\n    private executeFunctionIfExistsOnFilter<T extends IFilterComp>(filter: T, name: keyof T, ...params: any[]): void {\n        const func = filter[name];\n\n        if (typeof func === 'function') {\n            func.apply(filter, params);\n        }\n    }\n\n    private createFilter(filterDef: IFilterDef, index: number): AgPromise<IFilterComp> | null {\n        const { filterModifiedCallback, doesRowPassOtherFilter } = this.params;\n\n        let filterInstance: IFilterComp;\n\n        const filterParams: IFilterParams = {\n            ...this.filterManager.createFilterParams(this.column, this.column.getColDef()),\n            filterModifiedCallback,\n            filterChangedCallback: additionalEventAttributes => {\n                this.executeWhenAllFiltersReady(() => this.filterChanged(index, additionalEventAttributes));\n            },\n            doesRowPassOtherFilter: (node: RowNode) =>\n                doesRowPassOtherFilter(node) && this.doesFilterPass({ node, data: node.data }, filterInstance),\n        };\n\n        const compDetails = this.userComponentFactory.getFilterDetails(filterDef, filterParams, 'agTextColumnFilter');\n        if (!compDetails) { return null; }\n        const filterPromise = compDetails.newAgStackInstance();\n\n        if (filterPromise) {\n            filterPromise.then(filter => filterInstance = filter!);\n        }\n\n        return filterPromise;\n    }\n\n    private executeWhenAllFiltersReady(action: () => void): void {\n        if (this.filters && this.filters.length > 0) {\n            action();\n        } else {\n            this.afterFiltersReadyFuncs.push(action);\n        }\n    }\n\n    private updateActiveList(index: number): void {\n        const changedFilter = this.filters![index];\n\n        _.removeFromArray(this.activeFilterIndices, index);\n\n        if (changedFilter.isFilterActive()) {\n            this.activeFilterIndices.push(index);\n        }\n    }\n\n    private filterChanged(index: number, additionalEventAttributes: any): void {\n        this.updateActiveList(index);\n\n        this.filterChangedCallback!(additionalEventAttributes);\n        const changedFilter = this.filters![index];\n\n        this.filters!.forEach(filter => {\n            if (filter === changedFilter) { return; }\n\n            if (typeof filter.onAnyFilterChanged === 'function') {\n                filter.onAnyFilterChanged();\n            }\n        });\n    }\n\n    protected onFocusIn(e: FocusEvent): void {\n        if (this.lastActivatedMenuItem != null && !this.lastActivatedMenuItem.getGui().contains(e.target as HTMLElement)) {\n            this.lastActivatedMenuItem.deactivate();\n            this.lastActivatedMenuItem = null;\n        }\n    }\n\n    getModelAsString(model: IMultiFilterModel): string {\n        if (!this.filters || !model?.filterModels?.length) {\n            return '';\n        }\n        const lastActiveIndex = this.getLastActiveFilterIndex() ?? 0;\n        const activeFilter = this.filters[lastActiveIndex];\n        return activeFilter.getModelAsString?.(model.filterModels[lastActiveIndex]) ?? '';\n    }\n}\n", "import {\n    Component,\n    FilterChangedEvent,\n    _,\n    IFloatingFilterComp,\n    IFloatingFilterParams,\n    UserComponentFactory,\n    Autowired,\n    IFilterDef,\n    AgPromise,\n    MultiFilterParams,\n    IMultiFilterModel,\n    IFilter,\n    FilterManager,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { MultiFilter } from './multiFilter';\n\nexport class MultiFloatingFilterComp extends Component implements IFloatingFilterComp<MultiFilter> {\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n\n    private floatingFilters: IFloatingFilterComp[] = [];\n    private compDetailsList: UserCompDetails[] = [];\n    private params: IFloatingFilterParams<MultiFilter>;\n\n    constructor() {\n        super(/* html */`<div class=\"ag-multi-floating-filter ag-floating-filter-input\"></div>`);\n    }\n\n    public init(params: IFloatingFilterParams<MultiFilter>): AgPromise<void> {\n        this.params = params;\n\n        const { compDetailsList } = this.getCompDetailsList(params);\n        return this.setParams( compDetailsList );\n    }\n\n    private setParams(compDetailsList: UserCompDetails[]): AgPromise<void> {\n        const floatingFilterPromises: AgPromise<IFloatingFilterComp>[] = [];\n\n        compDetailsList.forEach(compDetails => {\n            const floatingFilterPromise = compDetails?.newAgStackInstance();\n\n            if (floatingFilterPromise != null) {\n                this.compDetailsList.push(compDetails!);\n                floatingFilterPromises.push(floatingFilterPromise);\n            }\n        });\n\n        return AgPromise.all(floatingFilterPromises).then(floatingFilters => {\n            floatingFilters!.forEach((floatingFilter, index) => {\n                this.floatingFilters.push(floatingFilter!);\n\n                const gui = floatingFilter!.getGui();\n\n                this.appendChild(gui);\n\n                if (index > 0) {\n                    _.setDisplayed(gui, false);\n                }\n            });\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams<MultiFilter>): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams<MultiFilter>): void {\n        this.params = params;\n        const { compDetailsList: newCompDetailsList, floatingFilterParamsList } = this.getCompDetailsList(params);\n        const allFloatingFilterCompsUnchanged = newCompDetailsList.length === this.compDetailsList.length\n            && newCompDetailsList.every((newCompDetails, index) => !this.filterManager.areFilterCompsDifferent(this.compDetailsList[index], newCompDetails));\n\n        if (allFloatingFilterCompsUnchanged) {\n            floatingFilterParamsList.forEach((floatingFilterParams, index) => {\n                const floatingFilter = this.floatingFilters[index] as IFloatingFilterComp<IFilter>;\n                let hasRefreshed = false;\n                if (floatingFilter.refresh) {\n                    const result = floatingFilter.refresh(floatingFilterParams);\n                    // framework wrapper always implements optional methods, but returns null if no underlying method\n                    if (result !== null) {\n                        hasRefreshed = true;\n                    }\n                }\n                if (!hasRefreshed) {\n                    floatingFilter.onParamsUpdated?.(floatingFilterParams);\n                }\n            });\n        } else {\n            _.clearElement(this.getGui());\n            this.destroyBeans(this.floatingFilters);\n            this.floatingFilters = [];\n            this.compDetailsList = [];\n            this.setParams(newCompDetailsList);\n        }\n    }\n\n    private getCompDetailsList(params: IFloatingFilterParams<MultiFilter>): {\n        compDetailsList: UserCompDetails[], floatingFilterParamsList: IFloatingFilterParams<IFilter>[]\n    } {\n        const compDetailsList: UserCompDetails[] = [];\n        const floatingFilterParamsList: IFloatingFilterParams<IFilter>[] = [];\n        const filterParams = params.filterParams as MultiFilterParams;\n\n        MultiFilter.getFilterDefs(filterParams).forEach((filterDef, index) => {\n            const floatingFilterParams: IFloatingFilterParams<IFilter> = {\n                ...params,\n                // set the parent filter instance for each floating filter to the relevant child filter instance\n                parentFilterInstance: (callback) => {   \n                    this.parentMultiFilterInstance((parent) => {\n                        const child = parent.getChildFilterInstance(index);\n                        if (child == null) { return; }\n\n                        callback(child);\n                    });\n                }\n            };\n            _.mergeDeep(floatingFilterParams.filterParams, filterDef.filterParams);\n\n            const compDetails = this.getCompDetails(filterDef, floatingFilterParams);\n            if (compDetails) {\n                compDetailsList.push(compDetails);\n                floatingFilterParamsList.push(floatingFilterParams);\n            }\n        });\n        return { compDetailsList, floatingFilterParamsList };\n    }\n\n    public onParentModelChanged(model: IMultiFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing\n        if (event && event.afterFloatingFilter) { return; }\n\n        this.parentMultiFilterInstance((parent) => {\n            if (model == null) {\n                this.floatingFilters.forEach((filter, i) => {\n                    filter.onParentModelChanged(null, event);\n                    _.setDisplayed(filter.getGui(), i === 0);\n                });\n            } else {\n                const lastActiveFloatingFilterIndex = parent.getLastActiveFilterIndex();\n\n                this.floatingFilters.forEach((filter, i) => {\n                    const filterModel = model.filterModels!.length > i ? model.filterModels![i] : null;\n\n                    filter.onParentModelChanged(filterModel, event);\n\n                    const shouldShow = lastActiveFloatingFilterIndex == null ? i === 0 : i === lastActiveFloatingFilterIndex;\n\n                    _.setDisplayed(filter.getGui(), shouldShow);\n                });\n            }\n        });\n    }\n\n    public destroy(): void {\n        this.destroyBeans(this.floatingFilters);\n        this.floatingFilters.length = 0;\n\n        super.destroy();\n    }\n\n    private getCompDetails(filterDef: IFilterDef, params: IFloatingFilterParams<IFilter>): UserCompDetails | undefined {\n        let defaultComponentName = this.userComponentFactory.getDefaultFloatingFilterType(\n            filterDef,\n            () => this.filterManager.getDefaultFloatingFilter(this.params.column)\n        ) ?? 'agReadOnlyFloatingFilter';\n\n        return this.userComponentFactory.getFloatingFilterCompDetails(filterDef, params, defaultComponentName);\n    }\n\n    private parentMultiFilterInstance(cb: (instance: MultiFilter) => void): void {\n        this.params.parentFilterInstance((parent) => {\n            if (!(parent instanceof MultiFilter)) {\n                throw new Error('AG Grid - MultiFloatingFilterComp expects MultiFilter as its parent');\n            }\n\n            cb(parent);\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { RichSelectCellEditor } from \"./richSelect/richSelectCellEditor\";\nimport { VERSION } from \"./version\";\n\nexport const RichSelectModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RichSelectModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agRichSelect', componentClass: RichSelectCellEditor },\n        { componentName: 'agRichSelectCellEditor', componentClass: RichSelectCellEditor }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    AgRichSelect,\n    Events,\n    ICellEditor,\n    ICellEditorParams,\n    KeyCreatorParams,\n    RichSelectParams,\n    PopupComponent,\n    FieldPickerValueSelectedEvent,\n    RichCellEditorParams,\n    _\n} from \"@ag-grid-community/core\";\n\nexport class RichSelectCellEditor<TData = any, TValue = any> extends PopupComponent implements ICellEditor<TValue> {\n\n    private params: RichCellEditorParams<TData, TValue>;\n    private focusAfterAttached: boolean;\n    private richSelect: AgRichSelect<TValue>;\n\n    constructor() {\n        super(/* html */ \n            `<div class=\"ag-cell-edit-wrapper\"></div>`\n        );\n    }\n\n    public init(params: RichCellEditorParams<TData, TValue>): void {\n        this.params = params;\n\n        const  { cellStartedEdit, cellHeight, values } = params;\n\n        if (_.missing(values)) {\n            console.warn('AG Grid: agRichSelectCellEditor requires cellEditorParams.values to be set');\n        }\n\n        const { params: richSelectParams, valuesPromise } = this.buildRichSelectParams();\n\n        this.richSelect = this.createManagedBean(new AgRichSelect<TValue>(richSelectParams));\n        this.richSelect.addCssClass('ag-cell-editor');\n        this.appendChild(this.richSelect);\n\n        if (valuesPromise) {\n            valuesPromise.then((values: TValue[]) => {\n                this.richSelect.setValueList({ valueList: values, refresh: true });\n                const searchStringCallback = this.getSearchStringCallback(values);\n                if (searchStringCallback) {\n                    this.richSelect.setSearchStringCreator(searchStringCallback);\n                }\n            });\n        }\n\n        this.addManagedListener(this.richSelect, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, this.onEditorPickerValueSelected.bind(this));\n        this.addManagedListener(this.richSelect.getGui(), 'focusout', this.onEditorFocusOut.bind(this));\n\n        this.focusAfterAttached = cellStartedEdit;\n\n        if (_.exists(cellHeight)) {\n            this.richSelect.setRowHeight(cellHeight);\n        }\n    }\n\n    private onEditorPickerValueSelected(e: FieldPickerValueSelectedEvent<TData>): void {\n        this.params.stopEditing(!e.fromEnterKey);\n    }\n\n    private onEditorFocusOut(e: FocusEvent): void {\n        if (this.richSelect.getGui().contains(e.relatedTarget as Element)) { return; }\n        this.params.stopEditing(true);\n    }\n\n    private buildRichSelectParams(): { params: RichSelectParams<TValue>, valuesPromise?: Promise<TValue[]> } {\n        const { \n            cellRenderer, value, values, formatValue, searchDebounceDelay, \n            valueListGap, valueListMaxHeight, valueListMaxWidth, allowTyping,\n            filterList, searchType, highlightMatch, valuePlaceholder, eventKey\n        } = this.params;\n\n        const ret: RichSelectParams = {\n            value: value,\n            cellRenderer,\n            searchDebounceDelay,\n            valueFormatter: formatValue,\n            pickerAriaLabelKey: 'ariaLabelRichSelectField',\n            pickerAriaLabelValue: 'Rich Select Field',\n            pickerType: 'virtual-list',\n            pickerGap: valueListGap,\n            allowTyping,\n            filterList,\n            searchType,\n            highlightMatch,\n            maxPickerHeight: valueListMaxHeight,\n            maxPickerWidth: valueListMaxWidth,\n            placeholder: valuePlaceholder,\n            initialInputValue: eventKey?.length === 1 ? eventKey : undefined\n        }\n\n        let valuesResult;\n        let valuesPromise;\n\n        if (typeof values === 'function') {\n            valuesResult = values(this.params as ICellEditorParams);\n        } else {\n            valuesResult = values ?? [];\n        }\n\n        if (Array.isArray(valuesResult)) {\n            ret.valueList = valuesResult;\n            ret.searchStringCreator = this.getSearchStringCallback(valuesResult);\n        } else {\n            valuesPromise = valuesResult;\n        }\n\n        return { params: ret, valuesPromise };\n    }\n\n    private getSearchStringCallback(values: TValue[]): ((values: TValue[]) => string[]) | undefined {\n        const { colDef } = this.params;\n\n        if (typeof values[0] !== 'object' || !colDef.keyCreator) {\n            return;\n        }\n\n        return (values: TValue[]) => values.map((value: TValue) => {\n            const keyParams: KeyCreatorParams = this.gridOptionsService.addGridCommonParams({\n                value: value,\n                colDef: this.params.colDef,\n                column: this.params.column,\n                node: this.params.node,\n                data: this.params.data\n            });\n            return colDef.keyCreator!(keyParams);\n        });\n    }\n\n    // we need to have the gui attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the gui state\n    public afterGuiAttached(): void {\n        const { focusAfterAttached, params } = this;\n\n        setTimeout(() => {\n            if (!this.isAlive()) { return; }\n\n            if (focusAfterAttached) {\n                const focusableEl = this.richSelect.getFocusableElement() as HTMLInputElement;\n                focusableEl.focus();\n                const { allowTyping, eventKey } = this.params;\n                if (allowTyping && (!eventKey || eventKey.length !== 1)) {\n                    focusableEl.select();\n                }\n            }\n\n            this.richSelect.showPicker();\n\n            const { eventKey } = params;\n            if (eventKey) {\n                if (eventKey?.length === 1) {\n                    this.richSelect.searchTextFromString(eventKey);\n                }\n            }\n\n        });\n    }\n\n    public getValue(): any {\n        return this.richSelect.getValue();\n    }\n\n    public isPopup(): boolean {\n        return false;\n    }\n\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { ServerSideRowModel } from \"./serverSideRowModel/serverSideRowModel\";\nimport { StoreUtils } from \"./serverSideRowModel/stores/storeUtils\";\nimport { BlockUtils } from \"./serverSideRowModel/blocks/blockUtils\";\nimport { NodeManager } from \"./serverSideRowModel/nodeManager\";\nimport { TransactionManager } from \"./serverSideRowModel/transactionManager\";\nimport { ExpandListener } from \"./serverSideRowModel/listeners/expandListener\";\nimport { SortListener } from \"./serverSideRowModel/listeners/sortListener\";\nimport { FilterListener } from \"./serverSideRowModel/listeners/filterListener\";\nimport { StoreFactory } from \"./serverSideRowModel/stores/storeFactory\";\nimport { ListenerUtils } from \"./serverSideRowModel/listeners/listenerUtils\";\nimport { ServerSideSelectionService } from \"./serverSideRowModel/services/serverSideSelectionService\";\nimport { VERSION } from \"./version\";\nimport { ServerSideExpansionService } from \"./serverSideRowModel/services/serverSideExpansionService\";\nimport { LazyBlockLoadingService } from \"./serverSideRowModel/stores/lazy/lazyBlockLoadingService\";\n\nexport const ServerSideRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ServerSideRowModelModule,\n    rowModel: 'serverSide',\n    beans: [ServerSideRowModel, ExpandListener, SortListener, StoreUtils, BlockUtils, NodeManager, TransactionManager,\n        FilterListener, StoreFactory, ListenerUtils, ServerSideSelectionService, ServerSideExpansionService, LazyBlockLoadingService],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    ColumnVO,\n    Events,\n    FilterManager,\n    IServerSideDatasource,\n    IServerSideRowModel,\n    IServerSideStore,\n    ModelUpdatedEvent,\n    NumberSequence,\n    PostConstruct,\n    PreDestroy,\n    RowBounds,\n    RowNode,\n    RowRenderer,\n    StoreRefreshAfterParams,\n    RefreshServerSideParams,\n    ServerSideGroupLevelState,\n    Beans,\n    SortModelItem,\n    WithoutGridCommon,\n    RowModelType,\n    Optional,\n    IPivotColDefService,\n    LoadSuccessParams,\n    SortController,\n    FilterModel,\n    AdvancedFilterModel,\n} from \"@ag-grid-community/core\";\n\nimport { NodeManager } from \"./nodeManager\";\nimport { SortListener } from \"./listeners/sortListener\";\nimport { StoreFactory } from \"./stores/storeFactory\";\nimport { FullStore } from \"./stores/fullStore\";\nimport { LazyStore } from \"./stores/lazy/lazyStore\";\n\nexport interface SSRMParams {\n    sortModel: SortModelItem[];\n    filterModel: FilterModel | AdvancedFilterModel | null;\n    lastAccessedSequence: NumberSequence;\n    dynamicRowHeight: boolean;\n    rowGroupCols: ColumnVO[];\n    valueCols: ColumnVO[];\n    pivotCols: ColumnVO[];\n    pivotMode: boolean;\n    datasource?: IServerSideDatasource;\n}\n\n@Bean('rowModel')\nexport class ServerSideRowModel extends BeanStub implements IServerSideRowModel {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('ssrmNodeManager') private nodeManager: NodeManager;\n    @Autowired('ssrmStoreFactory') private storeFactory: StoreFactory;\n    @Autowired('beans') private beans: Beans;\n    @Optional('pivotColDefService') private pivotColDefService: IPivotColDefService;\n\n    private onRowHeightChanged_debounced = _.debounce(this.onRowHeightChanged.bind(this), 100);\n\n    private rootNode: RowNode;\n    private datasource: IServerSideDatasource | undefined;\n\n    private storeParams: SSRMParams;\n\n    private pauseStoreUpdateListening = false;\n\n    private started = false;\n\n    private managingPivotResultColumns = false;\n\n    // we don't implement as lazy row heights is not supported in this row model\n    public ensureRowHeightsValid(): boolean { return false; }\n\n    public start(): void {\n        this.started = true;\n        this.updateDatasource();\n    }\n\n    @PreDestroy\n    private destroyDatasource(): void {\n        if (!this.datasource) { return; }\n\n        if (this.datasource.destroy) {\n            this.datasource.destroy();\n        }\n\n        this.rowRenderer.datasourceChanged();\n        this.datasource = undefined;\n    }\n\n    @PostConstruct\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onStoreUpdated.bind(this));\n\n        const resetListener = this.resetRootStore.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, resetListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, resetListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, resetListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, resetListener);\n        this.addManagedPropertyListeners([\n            /**\n             * Following properties omitted as they are likely to come with undesired  side effects.\n             * 'getRowId', 'isRowMaster', 'getRowHeight', 'isServerSideGroup', 'getServerSideGroupKey',\n             * */\n            'masterDetail', 'treeData', 'removePivotHeaderRowWhenSingleValueColumn',\n            'suppressServerSideInfiniteScroll', 'cacheBlockSize',\n        ], resetListener);\n        this.addManagedPropertyListener('rowHeight', () => this.resetRowHeights());\n        this.verifyProps();\n\n        this.addManagedPropertyListener('serverSideDatasource', () => this.updateDatasource());\n    }\n\n    private updateDatasource(): void {\n        const datasource = this.gridOptionsService.get('serverSideDatasource');\n\n        if (datasource) {\n            this.setDatasource(datasource);\n        }\n    }\n\n    private verifyProps(): void {\n        if (this.gridOptionsService.exists('initialGroupOrderComparator')) {\n            _.warnOnce(`initialGroupOrderComparator cannot be used with Server Side Row Model.`);\n        }\n        if (this.gridOptionsService.isRowSelection() && !this.gridOptionsService.exists('getRowId')) {\n            _.warnOnce(`getRowId callback must be provided for Server Side Row Model selection to work correctly.`);\n        }\n    }\n\n    public setDatasource(datasource: IServerSideDatasource): void {\n        // sometimes React, due to async, can call gridApi.setDatasource() before we have started.\n        // this happens when React app does this:\n        //      useEffect(() => setDatasource(ds), []);\n        // thus if we set the datasource before the grid UI has finished initialising, we do not set it,\n        // and the ssrm.start() method will set the datasoure when the grid is ready.\n        if (!this.started) { return; }\n\n        this.destroyDatasource();\n        this.datasource = datasource;\n        this.resetRootStore();\n    }\n\n    public applyRowData(rowDataParams: LoadSuccessParams, startRow: number, route: string[]) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n\n        const storeToExecuteOn = rootStore.getChildStore(route);\n\n        if (!storeToExecuteOn) { return };\n    \n        if (storeToExecuteOn instanceof LazyStore) {\n            storeToExecuteOn.applyRowData(rowDataParams, startRow, rowDataParams.rowData.length);\n        } else if (storeToExecuteOn instanceof FullStore) {\n            storeToExecuteOn.processServerResult(rowDataParams);\n        }\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        const cache = this.getRootStore();\n        if (!cache) { return false; }\n        return cache.isLastRowIndexKnown();\n    }\n\n    private onColumnEverything(): void {\n        // if first time, always reset\n        if (!this.storeParams) {\n            this.resetRootStore();\n            return;\n        }\n\n        // check if anything pertaining to fetching data has changed, and if it has, reset, but if\n        // it has not, don't reset\n        const rowGroupColumnVos = this.columnsToValueObjects(this.columnModel.getRowGroupColumns());\n        const valueColumnVos = this.columnsToValueObjects(this.columnModel.getValueColumns());\n        const pivotColumnVos = this.columnsToValueObjects(this.columnModel.getPivotColumns());\n\n        // compares two sets of columns, ensuring no columns have been added or removed (unless specified via allowRemovedColumns)\n        // if the columns are found, also ensures the field and aggFunc properties have not been changed.\n        const areColsSame = (params: { oldCols: ColumnVO[], newCols: ColumnVO[], allowRemovedColumns?: boolean }) => {\n            const oldColsMap: { [key: string]: ColumnVO } = {};\n            params.oldCols.forEach(col => oldColsMap[col.id] = col);\n\n            const allColsUnchanged = params.newCols.every(col => {\n                const equivalentCol = oldColsMap[col.id];\n                if (equivalentCol) {\n                    delete oldColsMap[col.id];\n                }\n                return equivalentCol && equivalentCol.field === col.field && equivalentCol.aggFunc === col.aggFunc;\n            });\n\n            const missingCols = !params.allowRemovedColumns && !!Object.values(oldColsMap).length;\n            return allColsUnchanged && !missingCols;\n        }\n\n        const sortModelDifferent = !_.jsonEquals(this.storeParams.sortModel, this.sortController.getSortModel());\n        const rowGroupDifferent = !areColsSame({\n            oldCols: this.storeParams.rowGroupCols,\n            newCols: rowGroupColumnVos,\n        });\n        const pivotDifferent = !areColsSame({\n            oldCols: this.storeParams.pivotCols,\n            newCols: pivotColumnVos,\n        });\n        const valuesDifferent = !!rowGroupColumnVos?.length && !areColsSame({\n            oldCols: this.storeParams.valueCols,\n            newCols: valueColumnVos,\n            allowRemovedColumns: true,\n        });\n\n        const resetRequired = sortModelDifferent || rowGroupDifferent || pivotDifferent || valuesDifferent;\n\n        if (resetRequired) {\n            this.resetRootStore();\n        } else {\n            // cols may have changed even if we didn't do a reset. storeParams ref will be provided when getRows\n            // is called, so it's important to keep it up to date.\n            const newParams = this.createStoreParams();\n            this.storeParams.rowGroupCols = newParams.rowGroupCols;\n            this.storeParams.pivotCols = newParams.pivotCols;\n            this.storeParams.valueCols = newParams.valueCols;\n        }\n    }\n\n    @PreDestroy\n    private destroyRootStore(): void {\n        if (!this.rootNode || !this.rootNode.childStore) { return; }\n        this.rootNode.childStore = this.destroyBean(this.rootNode.childStore)!;\n        this.nodeManager.clear();\n    }\n\n    public refreshAfterSort(newSortModel: SortModelItem[], params: StoreRefreshAfterParams): void {\n        if (this.storeParams) {\n            this.storeParams.sortModel = newSortModel;\n        }\n\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n\n        rootStore.refreshAfterSort(params);\n\n        this.onStoreUpdated();\n    }\n\n    public generateSecondaryColumns(pivotFields: string[]) {\n        const pivotColumnGroupDefs = this.pivotColDefService.createColDefsFromFields(pivotFields);\n        this.managingPivotResultColumns = true;\n        this.columnModel.setSecondaryColumns(pivotColumnGroupDefs, \"rowModelUpdated\");\n    };\n\n    public resetRowHeights(): void {\n        const atLeastOne = this.resetRowHeightsForAllRowNodes();\n\n        const rootNodeHeight = this.gridOptionsService.getRowHeightForNode(this.rootNode);\n        this.rootNode.setRowHeight(rootNodeHeight.height, rootNodeHeight.estimated);\n        if (this.rootNode.sibling) {\n            const rootNodeSibling = this.gridOptionsService.getRowHeightForNode(this.rootNode.sibling);\n            this.rootNode.sibling.setRowHeight(rootNodeSibling.height, rootNodeSibling.estimated);\n        }\n\n        // when pivotMode but pivot not active, root node is displayed on its own\n        // because it's only ever displayed alone, refreshing the model (onRowHeightChanged) is not required\n        if (atLeastOne) {\n            this.onRowHeightChanged();\n        }\n    }\n\n    private resetRowHeightsForAllRowNodes(): boolean {\n        let atLeastOne = false;\n        this.forEachNode(rowNode => {\n            const rowHeightForNode = this.gridOptionsService.getRowHeightForNode(rowNode);\n            rowNode.setRowHeight(rowHeightForNode.height, rowHeightForNode.estimated);\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\n            const detailNode = rowNode.detailNode;\n            if (detailNode) {\n                const detailRowHeight = this.gridOptionsService.getRowHeightForNode(detailNode);\n                detailNode.setRowHeight(detailRowHeight.height, detailRowHeight.estimated);\n            }\n\n            if (rowNode.sibling) {\n                const siblingRowHeight = this.gridOptionsService.getRowHeightForNode(rowNode.sibling);\n                detailNode.setRowHeight(siblingRowHeight.height, siblingRowHeight.estimated);\n            }\n            atLeastOne = true;\n        });\n\n        return atLeastOne;\n    }\n\n    public resetRootStore(): void {\n        this.destroyRootStore();\n\n        this.rootNode = new RowNode(this.beans);\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n\n        if (this.datasource) {\n            this.storeParams = this.createStoreParams();\n            this.rootNode.childStore = this.createBean(this.storeFactory.createStore(this.storeParams, this.rootNode));\n            this.updateRowIndexesAndBounds();\n        }\n\n        if (this.managingPivotResultColumns) {\n            // if managing pivot columns, also reset secondary columns.\n            this.columnModel.setSecondaryColumns(null, 'api');\n            this.managingPivotResultColumns = false;\n        }\n\n        // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).\n        // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer\n        // to treat the rows as new rows, as it's all new data\n        this.dispatchModelUpdated(true);\n    }\n\n    public columnsToValueObjects(columns: Column[]): ColumnVO[] {\n        return columns.map(col => ({\n            id: col.getId(),\n            aggFunc: col.getAggFunc(),\n            displayName: this.columnModel.getDisplayNameForColumn(col, 'model'),\n            field: col.getColDef().field\n        }) as ColumnVO);\n    }\n\n    private createStoreParams(): SSRMParams {\n\n        const rowGroupColumnVos = this.columnsToValueObjects(this.columnModel.getRowGroupColumns());\n        const valueColumnVos = this.columnsToValueObjects(this.columnModel.getValueColumns());\n        const pivotColumnVos = this.columnsToValueObjects(this.columnModel.getPivotColumns());\n\n        const dynamicRowHeight = this.gridOptionsService.isGetRowHeightFunction();\n\n        const params: SSRMParams = {\n            // the columns the user has grouped and aggregated by\n            valueCols: valueColumnVos,\n            rowGroupCols: rowGroupColumnVos,\n            pivotCols: pivotColumnVos,\n            pivotMode: this.columnModel.isPivotMode(),\n\n            // sort and filter model\n            filterModel: this.filterManager.isAdvancedFilterEnabled()\n                ? this.filterManager.getAdvancedFilterModel()\n                : this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n\n            datasource: this.datasource,\n            lastAccessedSequence: new NumberSequence(),\n            // blockSize: blockSize == null ? 100 : blockSize,\n            dynamicRowHeight: dynamicRowHeight\n        };\n\n        return params;\n    }\n\n    public getParams(): SSRMParams {\n        return this.storeParams;\n    }\n\n    private dispatchModelUpdated(reset = false): void {\n        const modelUpdatedEvent: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: !reset,\n            keepRenderedRows: !reset,\n            newPage: false,\n            newData: false\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    }\n\n    private onStoreUpdated(): void {\n        // sometimes if doing a batch update, we do the batch first,\n        // then call onStoreUpdated manually. eg expandAll() method.\n        if (this.pauseStoreUpdateListening) { return; }\n\n        this.updateRowIndexesAndBounds();\n        this.dispatchModelUpdated();\n    }\n\n    /** This method is debounced. It is used for row auto-height. If we don't debounce,\n     * then the Row Models will end up recalculating each row position\n     * for each row height change and result in the Row Renderer laying out rows.\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\n     * each row will change it's height, causing Row Model to update 1,000 times.\n     */\n    public onRowHeightChangedDebounced(): void {\n        this.onRowHeightChanged_debounced();\n    }\n\n    public onRowHeightChanged(): void {\n        this.updateRowIndexesAndBounds();\n        this.dispatchModelUpdated();\n    }\n\n    public updateRowIndexesAndBounds(): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n        rootStore.setDisplayIndexes(new NumberSequence(), { value: 0 });\n    }\n\n    public retryLoads(): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n        rootStore.retryLoads();\n        this.onStoreUpdated();\n    }\n\n    public getRow(index: number): RowNode | undefined {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return undefined; }\n        return rootStore.getRowUsingDisplayIndex(index) as RowNode;\n    }\n\n    /**\n     * Pauses the store, to prevent it updating the UI. This is used when doing batch updates to the store.\n     */\n    public setPaused(paused: boolean): void {\n        this.pauseStoreUpdateListening = paused;\n    }\n\n    public expandAll(value: boolean): void {\n        // if we don't pause store updating, we are needlessly\n        // recalculating row-indexes etc, and also getting rendering\n        // engine to re-render (listens on ModelUpdated event)\n        this.pauseStoreUpdateListening = true;\n        this.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n\n            if (node.hasChildren()) {\n                node.setExpanded(value);\n            }\n        });\n        this.pauseStoreUpdateListening = false;\n        this.onStoreUpdated();\n    }\n\n    public refreshAfterFilter(newFilterModel: FilterModel | AdvancedFilterModel | null, params: StoreRefreshAfterParams): void {\n        if (this.storeParams) {\n            this.storeParams.filterModel = newFilterModel;\n        }\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n        rootStore.refreshAfterFilter(params);\n\n        this.onStoreUpdated();\n    }\n\n    public getRootStore(): IServerSideStore | undefined {\n        if (this.rootNode && this.rootNode.childStore) {\n            return this.rootNode.childStore;\n        }\n    }\n\n    public getRowCount(): number {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return 0; }\n\n        return rootStore.getDisplayIndexEnd()!;\n    }\n\n    public getTopLevelRowCount(): number {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return 1; }\n        return rootStore.getRowCount();\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return topLevelIndex; }\n        return rootStore.getTopLevelRowDisplayedIndex(topLevelIndex);\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            const rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n            return {\n                rowTop: 0,\n                rowHeight: rowHeight\n            };\n        }\n        return rootStore.getRowBounds(index)!;\n    }\n\n    public getBlockStates() {\n        const root = this.getRootStore();\n        if (!root) {\n            return undefined;\n        }\n        \n        const states: any = {};\n        root.forEachStoreDeep(store => {\n            if (store instanceof FullStore) {\n                const { id, state } = store.getBlockStateJson();\n                states[id] = state;\n            } else if (store instanceof LazyStore) {\n                Object.entries(store.getBlockStates()).forEach(([block, state]) => {\n                    states[block] = state;\n                });\n            } else {\n                throw new Error('AG Grid: Unsupported store type');\n            }\n        });\n        return states;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        const rootStore = this.getRootStore();\n        if (pixel <= 0 || !rootStore) { return 0; }\n\n        return rootStore.getRowIndexAtPixel(pixel)!;\n    }\n\n    public isEmpty(): boolean {\n        return false;\n    }\n\n    public isRowsToRender(): boolean {\n        return this.getRootStore() != null && this.getRowCount() > 0;\n    }\n\n    public getType(): RowModelType {\n        return 'serverSide';\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n        rootStore.forEachNodeDeep(callback);\n    }\n\n    public forEachNodeAfterFilterAndSort(callback: (node: RowNode, index: number) => void, includeFooterNodes = false): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return; }\n        rootStore.forEachNodeDeepAfterFilterAndSort(callback, undefined, includeFooterNodes);\n    }\n\n    /** @return false if store hasn't started */\n    public executeOnStore(route: string[], callback: (cache: IServerSideStore) => void): boolean {\n        if (!this.started) { return false; }\n        const rootStore = this.getRootStore();\n        if (!rootStore) { return true; }\n\n        const storeToExecuteOn = rootStore.getChildStore(route);\n\n        if (storeToExecuteOn) {\n            callback(storeToExecuteOn);\n        }\n        return true;\n    }\n\n    public refreshStore(params: RefreshServerSideParams = {}): void {\n        const route = params.route ? params.route : [];\n        this.executeOnStore(route, store => store.refreshStore(params.purge == true));\n    }\n\n    public getStoreState(): ServerSideGroupLevelState[] {\n        const res: ServerSideGroupLevelState[] = [];\n        const rootStore = this.getRootStore();\n        if (rootStore) {\n            rootStore.addStoreStates(res);\n        }\n        return res;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode | null): RowNode[] {\n        if (!_.exists(firstInRange)) {\n            return [];   \n        }\n\n        if (!lastInRange) {\n            return [firstInRange];\n        }\n\n        const startIndex = firstInRange.rowIndex;\n        const endIndex = lastInRange.rowIndex;\n        if (startIndex === null || endIndex === null) {\n            return [firstInRange];\n        }\n\n        const nodeRange: RowNode[] = [];\n        const [firstIndex, lastIndex] = [startIndex, endIndex].sort((a,b) => a - b);\n        this.forEachNode((node) => {\n            const thisRowIndex = node.rowIndex;\n            if (thisRowIndex == null || node.stub) {\n                return;\n            }\n\n            if (thisRowIndex >= firstIndex && thisRowIndex <= lastIndex) {\n                nodeRange.push(node);\n            }\n        });\n\n        // don't allow range selection if we don't have the full range of rows\n        if (nodeRange.length !== (lastIndex - firstIndex + 1)) {\n            return [firstInRange];\n        }\n\n        return nodeRange;\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        let result: RowNode | undefined;\n        this.forEachNode(rowNode => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n            if (rowNode.detailNode && rowNode.detailNode.id === id) {\n                result = rowNode.detailNode;\n            }\n        });\n        return result;\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const foundRowNode = this.getRowNode(rowNode.id!);\n        return !!foundRowNode;\n    }\n\n    public setRowCount(rowCount: number, lastRowIndexKnown?: boolean): void {\n        const rootStore = this.getRootStore();\n        if (rootStore) {\n            if (rootStore instanceof LazyStore) {\n                rootStore.setRowCount(rowCount, lastRowIndexKnown);\n                return;\n            }\n            console.error('AG Grid: Infinite scrolling must be enabled in order to set the row count.');\n        }\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Column,\n    ColumnModel,\n    Events,\n    FilterManager,\n    IServerSideStore,\n    LoadSuccessParams,\n    NumberSequence,\n    PostConstruct,\n    PostSortRowsParams,\n    PreDestroy,\n    RowBounds,\n    RowNode,\n    RowNodeBlock,\n    RowNodeBlockLoader,\n    RowNodeSorter,\n    SelectionChangedEvent,\n    ServerSideGroupLevelParams,\n    ServerSideGroupLevelState,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    ServerSideTransactionResultStatus,\n    SortController,\n    StoreRefreshAfterParams,\n    StoreUpdatedEvent,\n    WithoutGridCommon,\n    IsApplyServerSideTransactionParams,\n    IRowNode,\n    ISelectionService,\n} from \"@ag-grid-community/core\";\nimport { SSRMParams, ServerSideRowModel } from \"../serverSideRowModel\";\nimport { StoreUtils } from \"./storeUtils\";\nimport { BlockUtils } from \"../blocks/blockUtils\";\nimport { NodeManager } from \"../nodeManager\";\nimport { TransactionManager } from \"../transactionManager\";\n\nexport class FullStore extends RowNodeBlock implements IServerSideStore {\n\n    @Autowired('ssrmStoreUtils') private storeUtils: StoreUtils;\n    @Autowired('ssrmBlockUtils') private blockUtils: BlockUtils;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n    @Autowired('rowNodeSorter') private rowNodeSorter: RowNodeSorter;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n    @Autowired('ssrmNodeManager') private nodeManager: NodeManager;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('ssrmTransactionManager') private transactionManager: TransactionManager;\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n\n    private readonly level: number;\n    private readonly groupLevel: boolean | undefined;\n    private readonly leafGroup: boolean;\n    private readonly ssrmParams: SSRMParams;\n    private readonly parentRowNode: RowNode;\n\n    private nodeIdSequence: NumberSequence = new NumberSequence();\n\n    private usingTreeData: boolean;\n\n    private allRowNodes: RowNode[];\n    private nodesAfterFilter: RowNode[];\n    private nodesAfterSort: RowNode[];\n\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    private allNodesMap: { [id: string]: RowNode };\n\n    private groupField: string;\n    private rowGroupColumn: Column;\n    private nodeIdPrefix: string | undefined;\n\n    private displayIndexStart: number | undefined;\n    private displayIndexEnd: number | undefined;\n\n    private topPx: number;\n    private heightPx: number;\n\n    private info: any = {};\n\n    private postSortFunc: ((params: WithoutGridCommon<PostSortRowsParams>) => void) | undefined;\n\n    constructor(ssrmParams: SSRMParams, storeParams: ServerSideGroupLevelParams, parentRowNode: RowNode) {\n        // finite block represents a cache with just one block, thus 0 is the id, it's the first block\n        super(0);\n        this.ssrmParams = ssrmParams;\n        this.parentRowNode = parentRowNode;\n        this.level = parentRowNode.level + 1;\n        this.groupLevel = ssrmParams.rowGroupCols ? this.level < ssrmParams.rowGroupCols.length : undefined;\n        this.leafGroup = ssrmParams.rowGroupCols ? this.level === ssrmParams.rowGroupCols.length - 1 : false;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.usingTreeData = this.gridOptionsService.get('treeData');\n        this.nodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.parentRowNode);\n\n        if (!this.usingTreeData && this.groupLevel) {\n            const groupColVo = this.ssrmParams.rowGroupCols[this.level];\n            this.groupField = groupColVo.field!;\n            this.rowGroupColumn = this.columnModel.getRowGroupColumns()[this.level];\n        }\n\n\n        let initialRowCount = 1;\n        const isRootStore = this.parentRowNode.level === -1;\n        const userInitialRowCount = this.storeUtils.getServerSideInitialRowCount();\n        if (isRootStore && userInitialRowCount != null) {\n            initialRowCount = userInitialRowCount;\n        }\n        this.initialiseRowNodes(initialRowCount);\n\n        this.rowNodeBlockLoader.addBlock(this);\n        this.addDestroyFunc(() => this.rowNodeBlockLoader.removeBlock(this));\n\n\n        this.postSortFunc = this.gridOptionsService.getCallback('postSortRows');\n\n        if (userInitialRowCount != null) {\n            this.eventService.dispatchEventOnce({\n                type: Events.EVENT_ROW_COUNT_READY\n            });\n        }\n    }\n\n    @PreDestroy\n    private destroyRowNodes(): void {\n        this.blockUtils.destroyRowNodes(this.allRowNodes);\n\n        this.allRowNodes = [];\n        this.nodesAfterSort = [];\n        this.nodesAfterFilter = [];\n        this.allNodesMap = {};\n    }\n\n    private initialiseRowNodes(loadingRowsCount: number, failedLoad = false): void {\n        this.destroyRowNodes();\n        for (let i = 0; i < loadingRowsCount; i++) {\n            const loadingRowNode = this.blockUtils.createRowNode(\n                {\n                    field: this.groupField, group: this.groupLevel!, leafGroup: this.leafGroup,\n                    level: this.level, parent: this.parentRowNode, rowGroupColumn: this.rowGroupColumn\n                }\n            );\n            if (failedLoad) {\n                loadingRowNode.failedLoad = true;\n            }\n            this.allRowNodes.push(loadingRowNode);\n            this.nodesAfterFilter.push(loadingRowNode);\n            this.nodesAfterSort.push(loadingRowNode);\n        }\n    }\n\n    public getBlockStateJson(): { id: string, state: any } {\n        return {\n            id: this.nodeIdPrefix ? this.nodeIdPrefix : '',\n            state: this.getState()\n        };\n    }\n\n    protected loadFromDatasource(): void {\n        this.storeUtils.loadFromDatasource({\n            startRow: undefined,\n            endRow: undefined,\n            parentBlock: this,\n            parentNode: this.parentRowNode,\n            storeParams: this.ssrmParams,\n            success: this.success.bind(this, this.getVersion()),\n            fail: this.pageLoadFailed.bind(this, this.getVersion())\n        });\n    }\n\n    public getStartRow(): number {\n        return 0; // always zero as not in a cache\n    }\n\n    public getEndRow(): number {\n        return this.nodesAfterSort.length;\n    }\n\n    private createDataNode(data: any, index?: number): RowNode {\n        const rowNode = this.blockUtils.createRowNode(\n            {\n                field: this.groupField, group: this.groupLevel!, leafGroup: this.leafGroup,\n                level: this.level, parent: this.parentRowNode, rowGroupColumn: this.rowGroupColumn\n            }\n        );\n\n        if (index != null) {\n            _.insertIntoArray(this.allRowNodes, rowNode, index);\n        } else {\n            this.allRowNodes.push(rowNode);\n        }\n\n        const defaultId = this.prefixId(this.nodeIdSequence.next());\n        this.blockUtils.setDataIntoRowNode(rowNode, data, defaultId, undefined);\n        this.nodeManager.addRowNode(rowNode);\n\n        this.blockUtils.checkOpenByDefault(rowNode);\n\n        this.allNodesMap[rowNode.id!] = rowNode;\n\n        return rowNode;\n    }\n\n    private prefixId(id: number): string {\n        if (this.nodeIdPrefix) {\n            return this.nodeIdPrefix + '-' + id;\n        } else {\n            return id.toString();\n        }\n    }\n\n    protected processServerFail(): void {\n        this.initialiseRowNodes(1, true);\n        this.fireStoreUpdatedEvent();\n        this.flushAsyncTransactions();\n    }\n\n    public processServerResult(params: LoadSuccessParams): void {\n        if (!this.isAlive()) { return; }\n\n        const info = params.groupLevelInfo;\n        if (info) {\n            Object.assign(this.info, info);\n        }\n\n        if (params.pivotResultFields) {\n            this.serverSideRowModel.generateSecondaryColumns(params.pivotResultFields);\n        }\n\n        const nodesToRecycle = this.allRowNodes.length > 0 ? this.allNodesMap : undefined;\n\n        this.allRowNodes = [];\n        this.nodesAfterSort = [];\n        this.nodesAfterFilter = [];\n        this.allNodesMap = {};\n\n        if (!params.rowData) {\n            _.warnOnce('\"params.data\" is missing from Server-Side Row Model success() callback. Please use the \"data\" attribute. If no data is returned, set an empty list.');\n        }\n\n        this.createOrRecycleNodes(nodesToRecycle, params.rowData);\n\n        if (nodesToRecycle) {\n            this.blockUtils.destroyRowNodes(_.getAllValuesInObject(nodesToRecycle));\n        }\n\n        if (this.level === 0) {\n            this.eventService.dispatchEventOnce({\n                type: Events.EVENT_ROW_COUNT_READY\n            });\n        }\n\n        this.filterAndSortNodes();\n        this.fireStoreUpdatedEvent();\n        this.flushAsyncTransactions();\n    }\n\n    private createOrRecycleNodes(nodesToRecycle?: { [id: string]: RowNode }, rowData?: any[]): void {\n        if (!rowData) { return; }\n\n        const lookupNodeToRecycle = (data: any): RowNode | undefined => {\n            if (!nodesToRecycle) { return undefined; }\n\n            const getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n            if (!getRowIdFunc) { return undefined; }\n\n            const parentKeys = this.parentRowNode.getGroupKeys();\n            const level = this.level;\n            const id = getRowIdFunc({\n                data,\n                parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                level,\n            });\n            const foundNode = nodesToRecycle[id];\n            if (!foundNode) { return undefined; }\n\n            delete nodesToRecycle[id];\n            return foundNode;\n        };\n\n        const recycleNode = (rowNode: RowNode, dataItem: any) => {\n            this.allNodesMap[rowNode.id!] = rowNode;\n            this.blockUtils.updateDataIntoRowNode(rowNode, dataItem);\n            this.allRowNodes.push(rowNode);\n        };\n\n        rowData.forEach(dataItem => {\n            const nodeToRecycle = lookupNodeToRecycle(dataItem);\n            if (nodeToRecycle) {\n                recycleNode(nodeToRecycle, dataItem);\n            } else {\n                this.createDataNode(dataItem);\n            }\n        });\n    }\n\n    private flushAsyncTransactions(): void {\n        // we want to update the store with any outstanding transactions straight away,\n        // as otherwise if waitTimeMillis is large (eg 5s), then the user could be looking\n        // at old data for a few seconds before the transactions is applied, which isn't what\n        // you would expect when we advertise 'transaction is applied when data is loaded'.\n        // we do this in a timeout as flushAsyncTransactions expects the grid to be in a settled\n        // state, not in the middle of loading rows! keeps the VM Turns more simple and deterministic.\n        window.setTimeout(() => this.transactionManager.flushAsyncTransactions(), 0);\n    }\n\n    private filterAndSortNodes(): void {\n        this.filterRowNodes();\n        this.sortRowNodes();\n    }\n\n    private sortRowNodes(): void {\n        const serverIsSorting = this.storeUtils.isServerSideSortAllLevels() || this.storeUtils.isServerSideSortOnServer();\n        const sortOptions = this.sortController.getSortOptions();\n        const noSortApplied = !sortOptions || sortOptions.length == 0;\n        if (serverIsSorting || noSortApplied) {\n            this.nodesAfterSort = this.nodesAfterFilter;\n            return;\n        }\n\n        this.nodesAfterSort = this.rowNodeSorter.doFullSort(this.nodesAfterFilter, sortOptions);\n        if (this.postSortFunc) {\n            const params: WithoutGridCommon<PostSortRowsParams> = { nodes: this.nodesAfterSort };\n            this.postSortFunc(params);\n        }\n    }\n\n    private filterRowNodes(): void {\n        const serverIsFiltering = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups() || this.storeUtils.isServerSideFilterOnServer();\n        // filtering for InFullStore only works at lowest level details.\n        // reason is the logic for group filtering was to difficult to work out how it should work at time of writing.\n        const groupLevel = this.groupLevel;\n\n        if (serverIsFiltering || groupLevel) {\n            this.nodesAfterFilter = this.allRowNodes;\n            return;\n        }\n\n        this.nodesAfterFilter = this.allRowNodes.filter(\n            rowNode => this.filterManager.doesRowPassFilter({ rowNode: rowNode })\n        );\n    }\n\n    public clearDisplayIndexes(): void {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.allRowNodes.forEach(rowNode => this.blockUtils.clearDisplayIndex(rowNode));\n    }\n\n    public getDisplayIndexEnd(): number | undefined {\n        return this.displayIndexEnd;\n    }\n\n    public isDisplayIndexInStore(displayIndex: number): boolean {\n        if (this.getRowCount() === 0) {\n            return false;\n        }\n        return displayIndex >= this.displayIndexStart! && displayIndex < this.displayIndexEnd!;\n    }\n\n    public setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.topPx = nextRowTop.value;\n\n        const visibleNodeIds: { [id: string]: boolean } = {};\n\n        // set on all visible nodes\n        this.nodesAfterSort.forEach(rowNode => {\n            this.blockUtils.setDisplayIndex(rowNode, displayIndexSeq, nextRowTop);\n            visibleNodeIds[rowNode.id!] = true;\n        });\n\n        // and clear on all non-visible nodes\n        this.allRowNodes.forEach(rowNode => {\n            if (!visibleNodeIds[rowNode.id!]) {\n                this.blockUtils.clearDisplayIndex(rowNode);\n            }\n        });\n\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.heightPx = nextRowTop.value - this.topPx;\n    }\n\n    public forEachStoreDeep(callback: (store: IServerSideStore, index: number) => void, sequence = new NumberSequence()): void {\n        callback(this, sequence.next());\n        this.allRowNodes.forEach(rowNode => {\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachStoreDeep(callback, sequence);\n            }\n        });\n    }\n\n    public forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence = new NumberSequence()): void {\n        this.allRowNodes.forEach(rowNode => {\n            callback(rowNode, sequence.next());\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeep(callback, sequence);\n            }\n        });\n    }\n\n    public forEachNodeDeepAfterFilterAndSort(callback: (rowNode: RowNode, index: number) => void, sequence = new NumberSequence(), includeFooterNodes = false): void {\n        this.nodesAfterSort.forEach(rowNode => {\n            callback(rowNode, sequence.next());\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence, includeFooterNodes);\n            }\n        });\n\n        if (includeFooterNodes && this.parentRowNode.sibling) {\n            callback(this.parentRowNode.sibling, sequence.next());\n        }\n    }\n\n    public getRowUsingDisplayIndex(displayRowIndex: number): IRowNode | undefined {\n        // this can happen if asking for a row that doesn't exist in the model,\n        // eg if a cell range is selected, and the user filters so rows no longer exists\n        if (!this.isDisplayIndexInStore(displayRowIndex)) { return undefined; }\n\n        const res = this.blockUtils.binarySearchForDisplayIndex(displayRowIndex, this.nodesAfterSort);\n        return res;\n    }\n\n    public getRowBounds(index: number): RowBounds | null {\n        for (let i = 0; i < this.nodesAfterSort.length; i++) {\n            const rowNode = this.nodesAfterSort[i];\n            const res = this.blockUtils.extractRowBounds(rowNode, index);\n            if (res) { return res; }\n        }\n\n        return null;\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        return pixel >= this.topPx && pixel < (this.topPx + this.heightPx);\n    }\n\n    public getRowIndexAtPixel(pixel: number): number | null {\n\n        // if pixel before block, return first row\n        const pixelBeforeThisStore = pixel <= this.topPx;\n        if (pixelBeforeThisStore) {\n            const firstNode = this.nodesAfterSort[0];\n            return firstNode.rowIndex!;\n        }\n        // if pixel after store, return last row, however the last\n        // row could be a child store\n        const pixelAfterThisStore = pixel >= (this.topPx + this.heightPx);\n        if (pixelAfterThisStore) {\n            const lastRowNode = this.nodesAfterSort[this.nodesAfterSort.length - 1];\n            const lastRowNodeBottomPx = lastRowNode.rowTop! + lastRowNode.rowHeight!;\n\n            if (pixel >= lastRowNodeBottomPx && lastRowNode.expanded) {\n                if (lastRowNode.childStore && lastRowNode.childStore.getRowCount() > 0) {\n                    return lastRowNode.childStore.getRowIndexAtPixel(pixel);\n                }\n                if (lastRowNode.detailNode) {\n                    return lastRowNode.detailNode.rowIndex;\n                }\n            }\n\n            return lastRowNode.rowIndex;\n        }\n\n        let res: number | null = null;\n        this.nodesAfterSort.forEach(rowNode => {\n            const res2 = this.blockUtils.getIndexAtPixel(rowNode, pixel);\n            if (res2 != null) {\n                res = res2;\n            }\n        });\n\n        const pixelIsPastLastRow = res == null;\n\n        if (pixelIsPastLastRow) {\n            return this.displayIndexEnd! - 1;\n        }\n\n        return res;\n    }\n\n    public getChildStore(keys: string[]): IServerSideStore | null {\n        return this.storeUtils.getChildStore(keys, this, (key: string) => {\n            const rowNode = this.allRowNodes.find(currentRowNode => {\n                return currentRowNode.key == key;\n            });\n\n            return rowNode!;\n        });\n    }\n\n    private forEachChildStoreShallow(callback: (childStore: IServerSideStore) => void): void {\n        this.allRowNodes.forEach(rowNode => {\n            const childStore = rowNode.childStore;\n            if (childStore) {\n                callback(childStore);\n            }\n        });\n    }\n\n    public refreshAfterFilter(params: StoreRefreshAfterParams): void {\n        const serverIsFiltering = this.storeUtils.isServerSideFilterOnServer();\n        const storeIsImpacted = this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params);\n        const serverIsFilteringAllLevels = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups();\n        if (serverIsFilteringAllLevels || (serverIsFiltering && storeIsImpacted)) {\n            this.refreshStore(true);\n            this.sortRowNodes();\n            return;\n        }\n\n        this.filterRowNodes();\n        this.sortRowNodes();\n        this.forEachChildStoreShallow(store => store.refreshAfterFilter(params));\n    }\n\n    public refreshAfterSort(params: StoreRefreshAfterParams): void {\n        const serverIsSorting = this.storeUtils.isServerSideSortOnServer();\n        const storeIsImpacted = this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params);\n        const serverIsSortingAllLevels = this.storeUtils.isServerSideSortAllLevels();\n        if (serverIsSortingAllLevels || (serverIsSorting && storeIsImpacted)) {\n            this.refreshStore(true);\n            this.filterRowNodes();\n            return;\n        }\n\n        this.filterRowNodes();\n        this.sortRowNodes();\n        this.forEachChildStoreShallow(store => store.refreshAfterSort(params));\n    }\n\n    public applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult {\n\n        // we only apply transactions to loaded state\n        switch (this.getState()) {\n            case RowNodeBlock.STATE_FAILED:\n                return { status: ServerSideTransactionResultStatus.StoreLoadingFailed };\n            case RowNodeBlock.STATE_LOADING:\n                return { status: ServerSideTransactionResultStatus.StoreLoading };\n            case RowNodeBlock.STATE_WAITING_TO_LOAD:\n                return { status: ServerSideTransactionResultStatus.StoreWaitingToLoad };\n        }\n\n        const applyCallback = this.gridOptionsService.getCallback('isApplyServerSideTransaction');\n        if (applyCallback) {\n            const params: WithoutGridCommon<IsApplyServerSideTransactionParams> = {\n                transaction: transaction,\n                parentNode: this.parentRowNode,\n                groupLevelInfo: this.info\n            };\n            const apply = applyCallback(params);\n            if (!apply) {\n                return { status: ServerSideTransactionResultStatus.Cancelled };\n            }\n        }\n\n        const res: ServerSideTransactionResult = {\n            status: ServerSideTransactionResultStatus.Applied,\n            remove: [],\n            update: [],\n            add: []\n        };\n\n        const nodesToUnselect: RowNode[] = [];\n\n        this.executeAdd(transaction, res);\n        this.executeRemove(transaction, res, nodesToUnselect);\n        this.executeUpdate(transaction, res, nodesToUnselect);\n\n        this.filterAndSortNodes();\n\n        this.updateSelection(nodesToUnselect);\n\n        return res;\n    }\n\n    private updateSelection(nodesToUnselect: RowNode[]): void {\n        const selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                nodes: nodesToUnselect,\n                suppressFinishActions: true,\n                clearSelection: false,\n                source: 'rowDataChanged',\n            });\n\n            const event: WithoutGridCommon<SelectionChangedEvent> = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                source: 'rowDataChanged'\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private executeAdd(rowDataTran: ServerSideTransaction, rowNodeTransaction: ServerSideTransactionResult): void {\n        const { add, addIndex } = rowDataTran;\n        if (_.missingOrEmpty(add)) { return; }\n\n        const useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // items get inserted in reverse order for index insertion\n            add!.reverse().forEach(item => {\n                const newRowNode: RowNode = this.createDataNode(item, addIndex);\n                rowNodeTransaction.add!.push(newRowNode);\n            });\n        } else {\n            add!.forEach(item => {\n                const newRowNode: RowNode = this.createDataNode(item);\n                rowNodeTransaction.add!.push(newRowNode);\n            });\n        }\n    }\n\n    private executeRemove(rowDataTran: ServerSideTransaction, rowNodeTransaction: ServerSideTransactionResult, nodesToUnselect: RowNode[]): void {\n        const { remove } = rowDataTran;\n\n        if (remove == null) { return; }\n\n        const rowIdsRemoved: { [key: string]: boolean } = {};\n\n        remove.forEach(item => {\n            const rowNode = this.lookupRowNode(item);\n\n            if (!rowNode) { return; }\n\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id!] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete this.allNodesMap[rowNode.id!];\n\n            rowNodeTransaction.remove!.push(rowNode);\n\n            this.nodeManager.removeNode(rowNode);\n        });\n\n        this.allRowNodes = this.allRowNodes.filter(rowNode => !rowIdsRemoved[rowNode.id!]);\n    }\n\n    private executeUpdate(rowDataTran: ServerSideTransaction, rowNodeTransaction: ServerSideTransactionResult, nodesToUnselect: RowNode[]): void {\n        const { update } = rowDataTran;\n        if (update == null) { return; }\n\n        update.forEach(item => {\n            const rowNode = this.lookupRowNode(item);\n\n            if (!rowNode) { return; }\n\n            this.blockUtils.updateDataIntoRowNode(rowNode, item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n\n            rowNodeTransaction.update!.push(rowNode);\n        });\n    }\n\n    private lookupRowNode(data: any): RowNode | null {\n        const getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n\n        let rowNode: RowNode;\n        if (getRowIdFunc != null) {\n            // find rowNode using id\n            const level = this.level;\n            const parentKeys = this.parentRowNode.getGroupKeys();\n            const id: string = getRowIdFunc({\n                data,\n                parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                level,\n            });\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(`AG Grid: could not find row id=${id}, data item was not found for this id`);\n                return null;\n            }\n        } else {\n            // find rowNode using object references\n            rowNode = this.allRowNodes.find(currentRowNode => currentRowNode.data === data)!;\n            if (!rowNode) {\n                console.error(`AG Grid: could not find data item as object was not found`, data);\n                return null;\n            }\n        }\n\n        return rowNode;\n    }\n\n    public addStoreStates(result: ServerSideGroupLevelState[]): void {\n        result.push({\n            suppressInfiniteScroll: true,\n            route: this.parentRowNode.getGroupKeys(),\n            rowCount: this.allRowNodes.length,\n            info: this.info\n        });\n        this.forEachChildStoreShallow(childStore => childStore.addStoreStates(result));\n    }\n\n    public refreshStore(purge: boolean): void {\n        if (purge) {\n            const loadingRowsToShow = this.nodesAfterSort ? this.nodesAfterSort.length : 1;\n            this.initialiseRowNodes(loadingRowsToShow);\n        }\n        this.scheduleLoad();\n        this.fireStoreUpdatedEvent();\n    }\n\n    public retryLoads(): void {\n        if (this.getState() === RowNodeBlock.STATE_FAILED) {\n            this.initialiseRowNodes(1);\n            this.scheduleLoad();\n        }\n\n        this.forEachChildStoreShallow(store => store.retryLoads());\n    }\n\n    private scheduleLoad(): void {\n        this.setStateWaitingToLoad();\n        this.rowNodeBlockLoader.checkBlockToLoad();\n    }\n\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    private fireStoreUpdatedEvent(): void {\n        // this results in row model firing ModelUpdated.\n        // server side row model also updates the row indexes first\n        const event: WithoutGridCommon<StoreUpdatedEvent> = {\n            type: Events.EVENT_STORE_UPDATED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getRowCount(): number {\n        return this.nodesAfterSort.length;\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const rowNode = this.nodesAfterSort[topLevelIndex];\n        return rowNode.rowIndex!;\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return this.getState() == RowNodeBlock.STATE_LOADED;\n    }\n\n    public getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const result: RowNode[] = [];\n\n        let inActiveRange = false;\n\n        // if only one node passed, we start the selection at the top\n        if (_.missing(firstInRange)) {\n            inActiveRange = true;\n        }\n\n        this.nodesAfterSort.forEach(rowNode => {\n            const hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\n            if (inActiveRange || hitFirstOrLast) {\n                result.push(rowNode);\n            }\n\n            if (hitFirstOrLast) {\n                inActiveRange = !inActiveRange;\n            }\n        });\n\n        // inActiveRange will be still true if we never hit the second rowNode\n        const invalidRange = inActiveRange;\n        return invalidRange ? [] : result;\n    }\n\n    public getStoreBounds() {\n        return {\n            topPx: this.topPx,\n            heightPx: this.heightPx,\n        }\n    }\n}", "import {\n    _,\n    Autowired,\n    BeanStub,\n    Events,\n    IServerSideStore,\n    NumberSequence,\n    PostConstruct,\n    PreDestroy,\n    RowBounds,\n    RowNode,\n    ServerSideGroupLevelParams,\n    ServerSideGroupLevelState,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    ServerSideTransactionResultStatus,\n    StoreRefreshAfterParams,\n    StoreUpdatedEvent,\n    WithoutGridCommon,\n    Column,\n    ColumnModel,\n    IsApplyServerSideTransactionParams,\n    SelectionChangedEvent,\n    IRowNode,\n    StoreRefreshedEvent,\n    ISelectionService,\n    LoadSuccessParams\n} from \"@ag-grid-community/core\";\nimport { SSRMParams } from \"../../serverSideRowModel\";\nimport { StoreUtils } from \"../storeUtils\";\nimport { BlockUtils } from \"../../blocks/blockUtils\";\nimport { LazyCache } from \"./lazyCache\";\n\nexport class LazyStore extends BeanStub implements IServerSideStore {\n\n    @Autowired('ssrmBlockUtils') private blockUtils: BlockUtils;\n    @Autowired('ssrmStoreUtils') private storeUtils: StoreUtils;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n\n    // display indexes\n    private displayIndexStart: number | undefined;\n    private displayIndexEnd: number | undefined;\n\n    // group positioning\n    private topPx: number;\n    private heightPx: number;\n\n    // group details\n    private readonly level: number;\n    private readonly group: boolean;\n    private readonly leafGroup: boolean;\n    private readonly ssrmParams: SSRMParams;\n    private readonly storeParams: ServerSideGroupLevelParams;\n    private readonly parentRowNode: RowNode;\n    private groupField: string | undefined;\n    private rowGroupColumn: Column;\n\n    private idSequence = new NumberSequence();\n    private cache: LazyCache;\n    private info: any;\n\n    constructor(ssrmParams: SSRMParams, storeParams: ServerSideGroupLevelParams, parentRowNode: RowNode) {\n        super();\n        this.ssrmParams = ssrmParams;\n        this.parentRowNode = parentRowNode;\n        this.storeParams = storeParams;\n        this.level = parentRowNode.level + 1;\n        this.group = ssrmParams.rowGroupCols ? this.level < ssrmParams.rowGroupCols.length : false;\n        this.leafGroup = ssrmParams.rowGroupCols ? this.level === ssrmParams.rowGroupCols.length - 1 : false;\n        this.info = {};\n    }\n\n\n    @PostConstruct\n    private init() {\n        let numberOfRows = 1;\n        if (this.level === 0) {\n            numberOfRows = this.storeUtils.getServerSideInitialRowCount() ?? 1;\n\n            this.eventService.dispatchEventOnce({\n                type: Events.EVENT_ROW_COUNT_READY\n            });\n        }\n        this.cache = this.createManagedBean(new LazyCache(this, numberOfRows, this.storeParams));\n\n        const usingTreeData = this.gridOptionsService.get('treeData');\n\n        if (!usingTreeData && this.group) {\n            const groupColVo = this.ssrmParams.rowGroupCols[this.level];\n            this.groupField = groupColVo.field!;\n            this.rowGroupColumn = this.columnModel.getRowGroupColumns()[this.level];\n        }\n    }\n\n    @PreDestroy\n    private destroyRowNodes(): void {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.destroyBean(this.cache);\n    }\n\n    /**\n     * Given a server response, ingest the rows outside of the data source lifecycle.\n     * \n     * @param rowDataParams the server response containing the rows to ingest\n     * @param startRow the index to start ingesting rows\n     * @param expectedRows the expected number of rows in the response (used to determine if the last row index is known)\n     */\n    applyRowData(rowDataParams: LoadSuccessParams, startRow: number, expectedRows: number) {\n        this.cache.onLoadSuccess(startRow, expectedRows, rowDataParams);\n    }\n\n    /**\n     * Applies a given transaction to the data set within this store\n     * \n     * @param transaction an object containing delta instructions determining the changes to apply to this store\n     * @returns an object determining the status of this transaction and effected nodes\n     */\n    applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult {\n        const idFunc = this.gridOptionsService.getCallback('getRowId');\n        if (!idFunc) {\n            console.warn('AG Grid: getRowId callback must be implemented for transactions to work. Transaction was ignored.');\n            return {\n                status: ServerSideTransactionResultStatus.Cancelled,\n            };\n        }\n\n        const applyCallback = this.gridOptionsService.getCallback('isApplyServerSideTransaction');\n        if (applyCallback) {\n            const params: WithoutGridCommon<IsApplyServerSideTransactionParams> = {\n                transaction: transaction,\n                parentNode: this.parentRowNode,\n                groupLevelInfo: this.info\n            };\n            const apply = applyCallback(params);\n            if (!apply) {\n                return { status: ServerSideTransactionResultStatus.Cancelled };\n            }\n        }\n\n        // needs checked before transactions are applied, as rows won't be contiguous immediately\n        // after\n        const allRowsLoaded = this.cache.isStoreFullyLoaded();\n\n        let updatedNodes: RowNode[] | undefined = undefined;\n        if (transaction.update?.length) {\n            updatedNodes = this.cache.updateRowNodes(transaction.update);\n        }\n\n        let insertedNodes: RowNode[] | undefined = undefined;\n        if (transaction.add?.length) {\n            let addIndex = transaction.addIndex;\n            if (addIndex != null && addIndex < 0) {\n                addIndex = undefined;\n            }\n            insertedNodes = this.cache.insertRowNodes(transaction.add, addIndex);\n        }\n\n        let removedNodes: RowNode[] | undefined = undefined;\n        if (transaction.remove?.length) {\n            const allIdsToRemove = transaction.remove.map(data => (\n                idFunc({ level: this.level, parentKeys: this.parentRowNode.getGroupKeys(), data })\n            ));\n            const allUniqueIdsToRemove = [...new Set(allIdsToRemove)];\n            removedNodes = this.cache.removeRowNodes(allUniqueIdsToRemove);\n        }\n\n        const isClientSideSortingEnabled = this.gridOptionsService.get('serverSideEnableClientSideSort');\n        \n        const isUpdateOrAdd = updatedNodes?.length || insertedNodes?.length;\n        const isClientSideSort = allRowsLoaded && isClientSideSortingEnabled;\n        if (isClientSideSort && isUpdateOrAdd) {\n            // if client side sorting, we need to sort the rows after the transaction\n            this.cache.clientSideSortRows();\n        }\n\n        this.updateSelectionAfterTransaction(updatedNodes, removedNodes);\n        return {\n            status: ServerSideTransactionResultStatus.Applied,\n            update: updatedNodes,\n            add: insertedNodes,\n            remove: removedNodes,\n        }\n    }\n\n    private updateSelectionAfterTransaction(updatedNodes?: RowNode[], removedNodes?: RowNode[]) {\n        const nodesToDeselect: RowNode[] = [];\n        updatedNodes?.forEach(node => {\n            if (node.isSelected() && !node.selectable) {\n                nodesToDeselect.push(node);\n            }\n        });\n\n        removedNodes?.forEach(node => {\n            if (node.isSelected()) {\n                nodesToDeselect.push(node);\n            }\n        });\n\n        if (nodesToDeselect.length) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                clearSelection: false,\n                nodes: nodesToDeselect,\n                source: 'rowDataChanged',\n            });\n        }\n    }\n\n    /**\n     * Clear the display indexes, used for fading rows out when stores are not being destroyed\n     */\n    clearDisplayIndexes(): void {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.cache.getNodes().forEach(lazyNode => this.blockUtils.clearDisplayIndex(lazyNode.node));\n\n        if (this.parentRowNode.sibling) {\n            this.blockUtils.clearDisplayIndex(this.parentRowNode.sibling);\n        }\n        this.cache.clearDisplayIndexes();\n    }\n\n    /**\n     * @returns an index representing the last sequentially displayed row in the grid for this store\n     */\n    getDisplayIndexStart(): number | undefined {\n        return this.displayIndexStart;\n    }\n\n    /**\n     * @returns the index representing one after the last sequentially displayed row in the grid for this store\n     */\n    getDisplayIndexEnd(): number | undefined {\n        return this.displayIndexEnd;\n    }\n\n    /** \n     * @returns the virtual size of this store\n     */\n    getRowCount(): number {\n        if (this.parentRowNode.sibling) {\n            return this.cache.getRowCount() + 1;\n        }\n        return this.cache.getRowCount();\n    }\n\n    /** \n     * Sets the current row count of the store, and whether the last row index is known\n     */\n    setRowCount(rowCount: number, isLastRowIndexKnown?: boolean): void {\n        this.cache.setRowCount(rowCount, isLastRowIndexKnown);\n    }\n\n    /**\n     * Given a display index, returns whether that row is within this store or a child store of this store\n     * \n     * @param displayIndex the visible index of a row\n     * @returns whether or not the row exists within this store\n     */\n    isDisplayIndexInStore(displayIndex: number): boolean {\n        if (this.cache.getRowCount() === 0) return false;\n\n        return this.displayIndexStart! <= displayIndex && displayIndex < this.getDisplayIndexEnd()!;\n    }\n\n    /**\n     * Recursively sets up the display indexes and top position of every node belonging to this store.\n     * \n     * Called after a row height changes, or a store updated event.\n     * \n     * @param displayIndexSeq the number sequence for generating the display index of each row\n     * @param nextRowTop an object containing the next row top value intended to be modified by ref per row\n     */\n    setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number; }): void {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.topPx = nextRowTop.value;\n\n        // delegate to the store to set the row display indexes\n        this.cache.setDisplayIndexes(displayIndexSeq, nextRowTop);\n\n        if (this.parentRowNode.sibling) {\n            this.blockUtils.setDisplayIndex(this.parentRowNode.sibling, displayIndexSeq, nextRowTop);\n        }\n\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.heightPx = nextRowTop.value - this.topPx;\n    }\n\n    /**\n     * Recursively applies a provided function to every node\n     * \n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeepAfterFilterAndSort\n     */\n    forEachStoreDeep(callback: (store: IServerSideStore, index: number) => void, sequence = new NumberSequence()): void {\n        callback(this, sequence.next());\n        this.cache.getNodes().forEach(lazyNode => {\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachStoreDeep(callback, sequence);\n            }\n        });\n    }\n\n    /**\n     * Recursively applies a provided function to every node\n     * \n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeepAfterFilterAndSort\n     */\n    forEachNodeDeep(callback: (rowNode: RowNode<any>, index: number) => void, sequence = new NumberSequence()): void {\n        this.cache.getNodes().forEach(lazyNode => {\n            callback(lazyNode.node, sequence.next());\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeep(callback, sequence);\n            }\n        });\n    }\n\n    /**\n     * Recursively applies a provided function to every node\n     * \n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeep\n     */\n    forEachNodeDeepAfterFilterAndSort(callback: (rowNode: RowNode<any>, index: number) => void, sequence = new NumberSequence(), includeFooterNodes = false): void {\n        const orderedNodes = this.cache.getOrderedNodeMap();\n        for (let key in orderedNodes) {\n            const lazyNode = orderedNodes[key];\n            callback(lazyNode.node, sequence.next());\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence, includeFooterNodes);\n            }\n        }\n\n        if (includeFooterNodes && this.parentRowNode.sibling) {\n            callback(this.parentRowNode.sibling, sequence.next());\n        }\n    }\n\n    /**\n     * Removes the failed status from all nodes, and marks them as stub to encourage reloading\n     */\n    retryLoads(): void {\n        this.cache.getNodes().forEach(({ node }) => {\n            if (node.failedLoad) {\n                node.failedLoad = false;\n                node.__needsRefreshWhenVisible = true;\n                node.stub = true;\n            }\n        });\n        this.forEachChildStoreShallow(store => store.retryLoads());\n        this.fireStoreUpdatedEvent();\n    }\n\n    /**\n     * Given a display index, returns the row at that location.\n     * \n     * @param displayRowIndex the displayed index within the grid to search for\n     * @returns the row node if the display index falls within the store, if it didn't exist this will create a new stub to return\n     */\n    getRowUsingDisplayIndex(displayRowIndex: number): IRowNode<any> | undefined {\n        if (this.parentRowNode.sibling && displayRowIndex === this.parentRowNode.sibling.rowIndex) {\n            return this.parentRowNode.sibling;\n        }\n        return this.cache.getRowByDisplayIndex(displayRowIndex);\n    }\n\n    /**\n     * Given a display index, returns the row top and height for the row at that index.\n     * \n     * @param displayIndex the display index of the node\n     * @returns an object containing the rowTop and rowHeight of the node at the given displayIndex\n     */\n    getRowBounds(displayIndex: number): RowBounds | null {\n        if (!this.isDisplayIndexInStore(displayIndex)) {\n            return null;\n        }\n\n        const thisNode = this.cache.getNodeCachedByDisplayIndex(displayIndex);\n        if (thisNode) {\n            const boundsFromRow = this.blockUtils.extractRowBounds(thisNode, displayIndex);\n            if (boundsFromRow) {\n                return boundsFromRow;\n            }\n        }\n\n        const { previousNode, nextNode } = this.cache.getSurroundingNodesByDisplayIndex(displayIndex) ?? {};\n\n        // previous node may equal, or catch via detail node or child of group\n        if (previousNode) {\n            const boundsFromRow = this.blockUtils.extractRowBounds(previousNode.node, displayIndex);\n            if (boundsFromRow != null) {\n                return boundsFromRow;\n            }\n        }\n    \n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        // if node after this, can calculate backwards (and ignore detail/grouping)\n        if (nextNode) {\n            const numberOfRowDiff = (nextNode.node.rowIndex! - displayIndex) * defaultRowHeight;\n            return {\n                rowTop: nextNode.node.rowTop! - numberOfRowDiff,\n                rowHeight: defaultRowHeight,\n            };\n        }\n\n        // otherwise calculate from end of store\n        const lastTop = this.topPx + this.heightPx;\n        const numberOfRowDiff = (this.getDisplayIndexEnd()! - displayIndex) * defaultRowHeight;\n        return {\n            rowTop: lastTop - numberOfRowDiff,\n            rowHeight: defaultRowHeight,\n        };\n    }\n\n    /**\n     * Given a vertical pixel, determines whether this store contains a row at that pixel\n     * \n     * @param pixel a vertical pixel position from the grid\n     * @returns whether that pixel points to a virtual space belonging to this store\n     */\n    isPixelInRange(pixel: number): boolean {\n        return pixel >= this.topPx && pixel < (this.topPx + this.heightPx);\n    }\n\n    /**\n     * Given a vertical pixel, returns the row existing at that pixel location\n     * \n     * @param pixel a vertical pixel position from the grid\n     * @returns the display index at the given pixel location\n     */\n    getRowIndexAtPixel(pixel: number): number | null {\n        if (pixel < this.topPx) {\n            return this.getDisplayIndexStart()!;\n        }\n\n        if (pixel >= this.topPx + this.heightPx) {\n            return this.getDisplayIndexEnd()! - 1;\n        }\n    \n        let distToPreviousNodeTop: number = Number.MAX_SAFE_INTEGER;\n        let previousNode: RowNode | null = null;\n        let distToNextNodeTop: number = Number.MAX_SAFE_INTEGER;\n        let nextNode: RowNode | null = null;\n\n        this.cache.getNodes().forEach(({ node }) => {\n            const distBetween = Math.abs(pixel - node.rowTop!);\n    \n            // previous node\n            if (node.rowTop! < pixel) {\n                if (distBetween < distToPreviousNodeTop) {\n                    distToPreviousNodeTop = distBetween;\n                    previousNode = node;\n                }\n                return;\n            }\n            // next node\n            if (distBetween < distToNextNodeTop) {\n                distToNextNodeTop = distBetween;\n                nextNode = node;\n            }\n        });\n\n        // cast these back as typescript doesn't understand the forEach above\n        previousNode = previousNode as RowNode | null;\n        nextNode = nextNode as RowNode | null;\n\n        // previous node may equal, or catch via detail node or child of group\n        if (previousNode) {\n            const indexOfRow = this.blockUtils.getIndexAtPixel(previousNode, pixel);\n            if (indexOfRow != null) {\n                return indexOfRow;\n            }\n        }\n\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        // if node after this, can calculate backwards (and ignore detail/grouping)\n        if (nextNode) {\n            const nextTop = nextNode.rowTop!;\n            const numberOfRowDiff = Math.ceil((nextTop - pixel) / defaultRowHeight);\n            return nextNode.rowIndex! - numberOfRowDiff;\n        }\n\n        // otherwise calculate from end of store\n        const nextTop = this.topPx + this.heightPx;\n        const numberOfRowDiff = Math.floor((nextTop - pixel) / defaultRowHeight);\n        return this.getDisplayIndexEnd()! - numberOfRowDiff;\n    }\n\n    /**\n     * Given a path of group keys, returns the child store for that group.\n     * \n     * @param keys the grouping path to the desired store\n     * @returns the child store for the given keys, or null if not found\n     */\n    getChildStore(keys: string[]): IServerSideStore | null {\n        return this.storeUtils.getChildStore(keys, this, (key: string) => {\n            const lazyNode = this.cache.getNodes().find(lazyNode => lazyNode.node.key == key);\n            if (!lazyNode) {\n                return null;\n            }\n            return lazyNode.node;\n        });\n    }\n\n    /**\n     * Executes a provided callback on each child store belonging to this store\n     * \n     * @param cb the callback to execute\n     */\n    private forEachChildStoreShallow(cb: (store: IServerSideStore) => void) {\n        this.cache.getNodes().forEach(({ node }) => {\n            if (node.childStore) {\n                cb(node.childStore);\n            }\n        })\n    }\n\n    /**\n     * Executes after a change to sorting, determines recursively whether this store or a child requires refreshed.\n     * \n     * If a purge refresh occurs, the row count is preserved.\n     * \n     * @param params a set of properties pertaining to the sort changes\n     */\n    refreshAfterSort(params: StoreRefreshAfterParams) {\n        const serverSortsAllLevels = this.storeUtils.isServerSideSortAllLevels();\n        if (serverSortsAllLevels || this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)) {\n            const allRowsLoaded = this.cache.isStoreFullyLoaded();\n            const isClientSideSortingEnabled = this.gridOptionsService.get('serverSideEnableClientSideSort');\n            \n            const isClientSideSort = allRowsLoaded && isClientSideSortingEnabled;\n            if (!isClientSideSort) {\n                const oldCount = this.cache.getRowCount();\n                this.destroyBean(this.cache);\n                this.cache = this.createManagedBean(new LazyCache(this, oldCount, this.storeParams));\n                return;\n            }\n\n            // client side sorting only handles one level, so allow it to pass through\n            // to recursive sort.\n            this.cache.clientSideSortRows();\n        }\n\n        // call refreshAfterSort on children, as we did not purge.\n        // if we did purge, no need to do this as all children were destroyed\n        this.forEachChildStoreShallow(store => store.refreshAfterSort(params));\n    }\n\n    /**\n     * Executes after a change to filtering, determines recursively whether this store or a child requires refreshed.\n     * \n     * If a refresh occurs, the row count is reset.\n     * \n     * @param params a set of properties pertaining to the filter changes\n     */\n    refreshAfterFilter(params: StoreRefreshAfterParams) {\n        const serverFiltersAllLevels = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups();\n        if (serverFiltersAllLevels || this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)) {\n            this.refreshStore(true);\n            return;\n        }\n\n        // call refreshAfterFilter on children, as we did not purge.\n        // if we did purge, no need to do this as all children were destroyed\n        this.forEachChildStoreShallow(store => store.refreshAfterFilter(params));\n    }\n\n    /**\n     * Marks all existing nodes as requiring reloaded, and triggers a load check\n     *\n     * @param purge whether to remove all nodes and data in favour of stub nodes\n     */\n    refreshStore(purge: boolean) {\n        if (purge) {\n            this.destroyBean(this.cache);\n            this.cache = this.createManagedBean(new LazyCache(this, 1, this.storeParams));\n            this.fireStoreUpdatedEvent();\n            return;\n        }\n\n        this.cache.markNodesForRefresh();\n    }\n\n    /**\n     * Used for pagination, given a local/store index, returns the display index of that row\n     * \n     * @param topLevelIndex the store index of a row\n     * @returns the display index for the given store index\n     */\n    getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const displayIndex = this.cache.getDisplayIndexFromStoreIndex(topLevelIndex);\n        return displayIndex ?? topLevelIndex;\n    }\n\n    /**\n     * Used for pagination to determine if the last page is known, and for aria to determine if the last grid row is known\n     * \n     * @returns whether the last index of this store is known, or if lazy loading still required\n     */\n    isLastRowIndexKnown(): boolean {\n        return this.cache.isLastRowIndexKnown();\n    }\n\n    /**\n     * Used by the selection service to select a range of nodes\n     * \n     * @param firstInRange the first node in the range to find\n     * @param lastInRange the last node in the range to find\n     * @returns a range of nodes between firstInRange and lastInRange inclusive\n     */\n    getRowNodesInRange(firstInRange: RowNode<any>, lastInRange: RowNode<any>): RowNode<any>[] {\n        const result: RowNode[] = [];\n\n        let inActiveRange = false;\n\n        // if only one node passed, we start the selection at the top\n        if (_.missing(firstInRange)) {\n            inActiveRange = true;\n        }\n\n        return this.cache.getNodes().filter(({ node }) => {\n            return node.rowIndex! >= firstInRange.rowIndex! &&  node.rowIndex! <= lastInRange.rowIndex!;\n        }).map(({ node }) => node);\n    }\n\n    /**\n     * Mutates a given array to add this stores state, and recursively add all the children store states.\n     * \n     * @param result a mutable results array\n     */\n    addStoreStates(result: ServerSideGroupLevelState[]) {\n        result.push({\n            suppressInfiniteScroll: false,\n            route: this.parentRowNode.getGroupKeys(),\n            rowCount: this.getRowCount(),\n            lastRowIndexKnown: this.isLastRowIndexKnown(),\n            info: this.info,\n            maxBlocksInCache: this.storeParams.maxBlocksInCache,\n            cacheBlockSize: this.storeParams.cacheBlockSize,\n        });\n        this.forEachChildStoreShallow(childStore => childStore.addStoreStates(result));\n    }\n\n    public getIdSequence() {\n        return this.idSequence;\n    }\n\n    public getParentNode() {\n        return this.parentRowNode;\n    }\n\n    public getRowDetails() {\n        return {\n            field: this.groupField!,\n            group: this.group,\n            leafGroup: this.leafGroup,\n            level: this.level,\n            parent: this.parentRowNode,\n            rowGroupColumn: this.rowGroupColumn,\n        };\n    }\n\n    public getSsrmParams() {\n        return this.ssrmParams;\n    }\n\n    public setStoreInfo(info: any) {\n        if (info) {\n            Object.assign(this.info, info);\n        }\n    }\n\n    // gets called 1) row count changed 2) cache purged\n    public fireStoreUpdatedEvent(): void {\n        // this results in row model firing ModelUpdated.\n        // server side row model also updates the row indexes first\n        const event: WithoutGridCommon<StoreUpdatedEvent> = {\n            type: Events.EVENT_STORE_UPDATED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    // gets called when row data updated, and no more refreshing needed\n    public fireRefreshFinishedEvent(): void {\n        const event: WithoutGridCommon<StoreRefreshedEvent> = {\n            type: Events.EVENT_STORE_REFRESHED,\n            route: this.parentRowNode.getRoute(),\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getBlockStates() {\n        return this.cache.getBlockStates();\n    }\n\n    public getStoreBounds() {\n        return {\n            topPx: this.topPx,\n            heightPx: this.heightPx,\n        }\n    }\n\n    public getCache() {\n        return this.cache;\n    }\n}\n", "import { Autowired, BeanStub, FocusService, GridApi, LoadSuccessParams, NumberSequence, PostConstruct, PreDestroy, RowNode, IRowNode, ServerSideGroupLevelParams, WithoutGridCommon, GetRowIdParams } from \"@ag-grid-community/core\";\nimport { BlockUtils } from \"../../blocks/blockUtils\";\nimport { NodeManager } from \"../../nodeManager\";\nimport { LazyStore } from \"./lazyStore\";\nimport { MultiIndexMap } from \"./multiIndexMap\";\nimport { ServerSideRowModel } from \"../../serverSideRowModel\";\nimport { RowNodeSorter } from \"@ag-grid-community/core\";\nimport { SortController } from \"@ag-grid-community/core\";\nimport { LazyBlockLoadingService } from \"./lazyBlockLoadingService\";\n\ninterface LazyStoreNode {\n    id: string;\n    index: number;\n    node: RowNode;\n};\n\nexport class LazyCache extends BeanStub {\n    @Autowired('gridApi') private api: GridApi;\n    @Autowired('ssrmBlockUtils') private blockUtils: BlockUtils;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ssrmNodeManager') private nodeManager: NodeManager;\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('rowNodeSorter') private rowNodeSorter: RowNodeSorter;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('lazyBlockLoadingService') private lazyBlockLoadingService: LazyBlockLoadingService;\n\n    /**\n     * Indicates whether this is still the live dataset for this store (used for ignoring old requests after purge)\n     */\n    private live = true;\n\n    /**\n     * A node map indexed by the node's id, index, and node.\n     */\n    private nodeMap: MultiIndexMap<LazyStoreNode>;\n\n    /**\n     * A map of nodes indexed by the display index.\n     */\n    private nodeDisplayIndexMap: Map<number, RowNode>;\n\n    /**\n     * A set of nodes waiting to be refreshed\n     */\n    private nodesToRefresh: Set<RowNode>;\n\n    /**\n     * End of store properties\n     */\n    private numberOfRows: number;\n    private isLastRowKnown: boolean;\n\n    /**\n     * The prefix to use for node ids, this is used to ensure that node ids are unique across stores\n     */\n    private defaultNodeIdPrefix: string | undefined;\n\n    /**\n     * Sibling services - 1-1 relationships.\n     */\n    private store: LazyStore;\n    private storeParams: ServerSideGroupLevelParams;\n\n    /**\n     * Grid options properties - stored locally for access speed.\n     */\n    private getRowIdFunc?: ((params: WithoutGridCommon<GetRowIdParams<any, any>>) => string);\n    private isMasterDetail: boolean;\n\n    /**\n     * A cache of removed group nodes, this is retained for preserving group\n     * state when the node moves in and out of the cache. Generally caused by\n     * rows moving blocks.\n     */\n    private removedNodeCache = new Map<string, RowNode>();\n\n    constructor(store: LazyStore, numberOfRows: number, storeParams: ServerSideGroupLevelParams) {\n        super();\n        this.store = store;\n        this.numberOfRows = numberOfRows;\n        this.isLastRowKnown = false;\n        this.storeParams = storeParams;\n    }\n\n    @PostConstruct\n    private init() {\n        this.lazyBlockLoadingService.subscribe(this);\n        // initiate the node map to be indexed at 'index', 'id' and 'node' for quick look-up.\n        // it's important id isn't first, as stub nodes overwrite each-other, and the first index is\n        // used for iteration.\n        this.nodeMap = new MultiIndexMap('index', 'id', 'node');\n\n        this.nodeDisplayIndexMap = new Map();\n        this.nodesToRefresh = new Set();\n\n        this.defaultNodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.store.getParentNode());\n        this.getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n        this.isMasterDetail = this.gridOptionsService.get('masterDetail');\n    }\n\n    @PreDestroy\n    private destroyRowNodes() {\n        this.lazyBlockLoadingService.unsubscribe(this);\n        this.numberOfRows = 0;\n        this.nodeMap.forEach(node => this.blockUtils.destroyRowNode(node.node));\n        this.nodeMap.clear();\n        this.nodeDisplayIndexMap.clear();\n        this.nodesToRefresh.clear();\n        this.live = false;\n    }\n\n    /**\n     * Get the row node for a specific display index from this store\n     * @param displayIndex the display index of the node to find\n     * @returns undefined if the node is not in the store bounds, otherwise will always return a node\n     */\n    public getRowByDisplayIndex(displayIndex: number): IRowNode | undefined {\n        // if index isn't in store, nothing to return\n        if (!this.store.isDisplayIndexInStore(displayIndex)) {\n            return undefined;\n        }\n\n        // first try to directly look this node up in the display index map\n        const node = this.nodeDisplayIndexMap.get(displayIndex);\n        if (node) {\n            // if we have the node, check if it needs refreshed when rendered\n            if (node.stub || node.__needsRefreshWhenVisible) {\n                this.lazyBlockLoadingService.queueLoadCheck();\n            }\n            return node;\n        }\n\n        // next check if this is the first row, if so return a stub node\n        // this is a performance optimisation, as it is the most common scenario\n        // and enables the node - 1 check to kick in more often.\n        if (displayIndex === this.store.getDisplayIndexStart()) {\n            return this.createStubNode(0, displayIndex);\n        }\n\n        // check if the row immediately prior is available in the store\n        const contiguouslyPreviousNode = this.nodeDisplayIndexMap.get(displayIndex - 1);\n        if (contiguouslyPreviousNode) {\n            // if previous row is master detail, and expanded, this node must be detail\n            if (this.isMasterDetail && contiguouslyPreviousNode.master && contiguouslyPreviousNode.expanded) {\n                return contiguouslyPreviousNode.detailNode;\n            }\n\n            // if previous row is expanded group, this node will belong to that group.\n            if (contiguouslyPreviousNode.expanded && contiguouslyPreviousNode.childStore?.isDisplayIndexInStore(displayIndex)) {\n                return contiguouslyPreviousNode.childStore?.getRowUsingDisplayIndex(displayIndex);\n            }\n\n            // otherwise, row must be a stub node\n            const lazyCacheNode = this.nodeMap.getBy('node', contiguouslyPreviousNode)!;\n            return this.createStubNode(lazyCacheNode.index + 1, displayIndex);\n        }\n\n        const adjacentNodes = this.getSurroundingNodesByDisplayIndex(displayIndex);\n\n        // if no bounds skipped includes this, calculate from end index\n        if (adjacentNodes == null) {\n            const storeIndexFromEndIndex = this.store.getRowCount() - (this.store.getDisplayIndexEnd()! - displayIndex);\n            return this.createStubNode(storeIndexFromEndIndex, displayIndex);\n        }\n\n        const {previousNode, nextNode} = adjacentNodes;\n\n        // if the node before this node is expanded, this node might be a child of that node\n        if (previousNode && previousNode.node.expanded && previousNode.node.childStore?.isDisplayIndexInStore(displayIndex)) {\n            return previousNode.node.childStore?.getRowUsingDisplayIndex(displayIndex);\n        }\n\n        // if we have the node after this node, we can calculate the store index of this node by the difference\n        // in display indexes between the two nodes.\n        if (nextNode) {\n            const displayIndexDiff = nextNode.node.rowIndex! - displayIndex;\n            const newStoreIndex = nextNode.index - displayIndexDiff;\n            return this.createStubNode(newStoreIndex, displayIndex);\n        }\n\n        // if no next node, calculate from end index of this store\n        const storeIndexFromEndIndex = this.store.getRowCount() - (this.store.getDisplayIndexEnd()! - displayIndex);\n        return this.createStubNode(storeIndexFromEndIndex, displayIndex);\n    }\n\n    /**\n     * Used for creating and positioning a stub node without firing a store updated event\n     */\n    private createStubNode(storeIndex: number, displayIndex: number): RowNode {\n        // bounds are acquired before creating the node, as otherwise it'll use it's own empty self to calculate\n        const rowBounds = this.store.getRowBounds(displayIndex!);\n        const newNode = this.createRowAtIndex(storeIndex, null, node => {\n            node.setRowIndex(displayIndex);\n            node.setRowTop(rowBounds!.rowTop);\n            this.nodeDisplayIndexMap.set(displayIndex, node);\n        });\n        this.lazyBlockLoadingService.queueLoadCheck();\n        return newNode;\n    }\n\n    /**\n     * @param index The row index relative to this store\n     * @returns A rowNode at the given store index\n     */\n    public getRowByStoreIndex(index: number) {\n        return this.nodeMap.getBy('index', index)?.node;\n    }\n\n    /**\n     * Given a number of rows, skips through the given sequence & row top reference (using default row height)\n     * @param numberOfRowsToSkip number of rows to skip over in the given sequence\n     * @param displayIndexSeq the sequence in which to skip\n     * @param nextRowTop the row top reference in which to skip\n     */\n    private skipDisplayIndexes(numberOfRowsToSkip: number, displayIndexSeq: NumberSequence, nextRowTop: { value: number; }) {\n        if (numberOfRowsToSkip === 0) {\n            return;\n        }\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n\n        displayIndexSeq.skip(numberOfRowsToSkip);\n        nextRowTop.value += numberOfRowsToSkip * defaultRowHeight;\n    }\n\n    /**\n     * @param displayIndexSeq the number sequence for generating the display index of each row\n     * @param nextRowTop an object containing the next row top value intended to be modified by ref per row\n     */\n    public setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number; }): void {\n        // Create a map of display index nodes for access speed\n        this.nodeDisplayIndexMap.clear();\n\n        // create an object indexed by store index, as this will sort all of the nodes when we iterate\n        // the object\n        const orderedMap: {[key: number]: RowNode} = {};\n        this.nodeMap.forEach(lazyNode => {\n            orderedMap[lazyNode.index] = lazyNode.node;\n        });\n\n        let lastIndex = -1;\n        // iterate over the nodes in order, setting the display index on each node.\n        for (const stringIndex in orderedMap) {\n            const node = orderedMap[stringIndex];\n            const numericIndex = Number(stringIndex);\n\n            // if any nodes aren't currently in the store, skip the display indexes too\n            const numberOfRowsToSkip = (numericIndex - 1) - lastIndex;\n            this.skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop);\n\n\n            // set this nodes index and row top\n            this.blockUtils.setDisplayIndex(node, displayIndexSeq, nextRowTop);\n            this.nodeDisplayIndexMap.set(node.rowIndex!, node);\n\n\n\n            // store this index for skipping after this\n            lastIndex = numericIndex;\n        }\n\n        // need to skip rows until the end of this store\n        const numberOfRowsToSkip = (this.numberOfRows - 1) - lastIndex;\n        this.skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop);\n\n        // this is not terribly efficient, and could probs be improved\n        this.purgeExcessRows();\n    }\n\n    public getRowCount(): number {\n        return this.numberOfRows;\n    }\n    \n    setRowCount(rowCount: number, isLastRowIndexKnown?: boolean): void {\n        if (rowCount < 0) {\n            throw new Error('AG Grid: setRowCount can only accept a positive row count.');\n        }\n\n        this.numberOfRows = rowCount;\n\n        if (isLastRowIndexKnown != null) {\n            this.isLastRowKnown = isLastRowIndexKnown;\n\n            if (isLastRowIndexKnown === false) {\n                this.numberOfRows += 1;\n            }\n        }\n\n        this.fireStoreUpdatedEvent();\n    }\n\n    public getNodes() {\n        return this.nodeMap;\n    }\n\n    public getNodeCachedByDisplayIndex(displayIndex: number): RowNode | null {\n        return this.nodeDisplayIndexMap.get(displayIndex) ?? null;\n    }\n\n    public getNodesToRefresh(): Set<RowNode> {\n        return this.nodesToRefresh;\n    }\n\n    /**\n     * @returns the previous and next loaded row nodes surrounding the given display index\n     */\n    public getSurroundingNodesByDisplayIndex(displayIndex: number) {\n        let nextNode: LazyStoreNode | undefined;\n        let previousNode: LazyStoreNode | undefined;\n        this.nodeMap.forEach(lazyNode => {\n            // previous node\n            if (displayIndex > lazyNode.node.rowIndex!) {\n                // get the largest previous node\n                if (previousNode == null || previousNode.node.rowIndex! < lazyNode.node.rowIndex!) {\n                    previousNode = lazyNode;\n                }\n                return;\n            }\n            // next node\n            // get the smallest next node\n            if (nextNode == null || nextNode.node.rowIndex! > lazyNode.node.rowIndex!) {\n                nextNode = lazyNode;\n                return;\n            }\n        });\n        if (!previousNode && !nextNode) return null;\n        return {previousNode, nextNode};\n    }\n\n    /**\n     * Get or calculate the display index for a given store index\n     * @param storeIndex the rows index within this store\n     * @returns the rows visible display index relative to the grid\n     */\n    public getDisplayIndexFromStoreIndex(storeIndex: number): number | null {\n\n        const nodeAtIndex = this.nodeMap.getBy('index', storeIndex);\n        if (nodeAtIndex) {\n            return nodeAtIndex.node.rowIndex!;\n        }\n\n        let nextNode: LazyStoreNode | undefined;\n        let previousNode: LazyStoreNode | undefined;\n        this.nodeMap.forEach(lazyNode => {\n            // previous node\n            if (storeIndex > lazyNode.index) {\n                // get the largest previous node\n                if (previousNode == null || previousNode.index < lazyNode.index) {\n                    previousNode = lazyNode;\n                }\n                return;\n            }\n            // next node\n            // get the smallest next node\n            if (nextNode == null || nextNode.index > lazyNode.index) {\n                nextNode = lazyNode;\n                return;\n            }\n        });\n\n        if (!nextNode) {\n            return this.store.getDisplayIndexEnd()! - (this.numberOfRows - storeIndex);\n        }\n\n        if (!previousNode) {\n            return this.store.getDisplayIndexStart()! + storeIndex;\n        }\n\n        const storeIndexDiff = storeIndex - previousNode.index;\n        const previousDisplayIndex = (previousNode.node.childStore?.getDisplayIndexEnd() ?? previousNode.node.rowIndex!);\n        return previousDisplayIndex + storeIndexDiff;\n    }\n\n    /**\n     * Creates a new row and inserts it at the given index\n     * @param atStoreIndex the node index relative to this store\n     * @param data the data object to populate the node with \n     * @returns the new row node\n     */\n    private createRowAtIndex(atStoreIndex: number, data?: any, createNodeCallback?: (node: RowNode) => void): RowNode {\n        // make sure an existing node isn't being overwritten\n        const lazyNode = this.nodeMap.getBy('index', atStoreIndex);\n\n        // if node already exists, update it or destroy it\n        if (lazyNode) {\n            const { node } = lazyNode;\n            node.__needsRefreshWhenVisible = false;\n\n            // if the node is the same, just update the content\n            if (this.doesNodeMatch(data, node)) {\n                this.blockUtils.updateDataIntoRowNode(node, data);\n                this.nodesToRefresh.delete(node);\n                return node;\n            }\n\n            // if there's no id and this is an open group, protect this node from changes\n            // hasChildren also checks for tree data and master detail\n            if (this.getRowIdFunc == null && node.hasChildren() && node.expanded) {\n                this.nodesToRefresh.delete(node);\n                return node;\n            }\n\n            // destroy the old node, might be worth caching state here\n            this.destroyRowAtIndex(atStoreIndex);\n        }\n\n        // if the node already exists elsewhere, update it and move it to the new location\n        if (data && this.getRowIdFunc != null) {\n            const id = this.getRowId(data);\n\n            // the node was deleted at some point, but as we're refreshing\n            // it's been cached and we can retrieve it for reuse.\n            const deletedNode = id && this.removedNodeCache?.get(id);\n            if (deletedNode) {\n                this.removedNodeCache?.delete(id!);\n                this.blockUtils.updateDataIntoRowNode(deletedNode, data);\n                this.nodeMap.set({\n                    id: deletedNode.id!,\n                    node: deletedNode,\n                    index: atStoreIndex\n                });\n                return deletedNode;\n            }\n\n            const lazyNode = this.nodeMap.getBy('id', id);\n            if (lazyNode) {\n                // delete old lazy node so we can insert it at different location\n                this.nodeMap.delete(lazyNode);\n\n                const { node, index } = lazyNode;\n                this.blockUtils.updateDataIntoRowNode(node, data);\n                this.nodeMap.set({\n                    id: node.id!,\n                    node,\n                    index: atStoreIndex\n                });\n                this.nodesToRefresh.delete(node);\n\n                if (this.getBlockStartIndex(index) === this.getBlockStartIndex(atStoreIndex)) {\n                    // if the block hasn't changed and we have a nodes map, we don't need to refresh the original block, as this block\n                    // has just been refreshed.\n                    return node;\n                }\n\n                // mark all of the old block as needsVerify to trigger it for a refresh, as nodes\n                // should not be out of place\n                this.markBlockForVerify(index);\n\n                return node;\n            }\n        }\n\n        // node doesn't exist, create a new one\n        const newNode = this.blockUtils.createRowNode(this.store.getRowDetails());\n        if (data != null) {\n            const defaultId = this.getPrefixedId(this.store.getIdSequence().next());\n            this.blockUtils.setDataIntoRowNode(newNode, data, defaultId, undefined);\n\n            // don't allow the SSRM to listen to the dispatched row event, as it will\n            // compute extra unnecessary row updates\n            this.serverSideRowModel.setPaused(true);\n            this.blockUtils.checkOpenByDefault(newNode);\n            this.serverSideRowModel.setPaused(false);\n            this.nodeManager.addRowNode(newNode);\n        }\n\n        // add the new node to the store, has to be done after the display index is calculated so it doesn't take itself into account\n        this.nodeMap.set({\n            id: newNode.id!,\n            node: newNode,\n            index: atStoreIndex,\n        });\n\n        if (createNodeCallback) {\n            createNodeCallback(newNode);\n        }\n\n        return newNode;\n    }\n\n    public getBlockStates() {\n        const blockCounts: { [key: string]: number } = {};\n        const blockStates: { [key: string]: Set<string> } = {};\n\n        this.nodeMap.forEach(({ node, index }) => {\n            const blockStart = this.getBlockStartIndex(index);\n\n            if (!node.stub && !node.failedLoad) {\n                blockCounts[blockStart] = (blockCounts[blockStart] ?? 0) + 1;\n            }\n\n            let rowState = 'loaded';\n            if (node.failedLoad) {\n                rowState = 'failed';\n            } else if (this.lazyBlockLoadingService.isRowLoading(this, blockStart)) {\n                rowState = 'loading';\n            } else if (this.nodesToRefresh.has(node) || node.stub) {\n                rowState = 'needsLoading';\n            }\n\n            if (!blockStates[blockStart]) {\n                blockStates[blockStart] = new Set<string>();\n            }\n            blockStates[blockStart].add(rowState);\n        });\n\n        const statePriorityMap: { [key: string]: number } = {\n            loading: 4,\n            failed: 3,\n            needsLoading: 2,\n            loaded: 1,\n        };\n\n        const blockPrefix = this.blockUtils.createNodeIdPrefix(this.store.getParentNode());\n\n        const results: { [key: string]: any } = {};\n        Object.entries(blockStates).forEach(([blockStart, uniqueStates]) => {\n            const sortedStates = [...uniqueStates].sort((a, b) => (statePriorityMap[a] ?? 0) - (statePriorityMap[b] ?? 0));\n            const priorityState = sortedStates[0];\n\n            const blockNumber = Number(blockStart) / this.getBlockSize();\n\n            const blockId = blockPrefix ? `${blockPrefix}-${blockNumber}` : String(blockNumber);\n            results[blockId] = {\n                blockNumber,\n                startRow: Number(blockStart),\n                endRow: Number(blockStart) + this.getBlockSize(),\n                pageStatus: priorityState,\n                loadedRowCount: blockCounts[blockStart] ?? 0,\n            };\n        });\n        return results;\n    }\n\n    public destroyRowAtIndex(atStoreIndex: number) {\n        const lazyNode = this.nodeMap.getBy('index', atStoreIndex);\n        if (!lazyNode) { return; }\n\n        this.nodeMap.delete(lazyNode);\n        \n        this.nodeDisplayIndexMap.delete(lazyNode.node.rowIndex!);\n        \n        if (this.nodesToRefresh.size > 0) {\n            // while refreshing, we retain the group nodes so they can be moved\n            // without losing state\n            this.removedNodeCache.set(lazyNode.node.id!, lazyNode.node);\n        } else {\n            this.blockUtils.destroyRowNode(lazyNode.node);\n        }\n\n        this.nodesToRefresh.delete(lazyNode.node);\n    }\n\n    public getSsrmParams() {\n        return this.store.getSsrmParams();\n    }\n\n    /**\n     * @param id the base id to be prefixed\n     * @returns a node id with prefix if required\n     */\n    private getPrefixedId(id: number): string {\n        if (this.defaultNodeIdPrefix) {\n            return this.defaultNodeIdPrefix + '-' + id;\n        } else {\n            return id.toString();\n        }\n    }\n\n    private markBlockForVerify(rowIndex: number) {\n        const [start, end] = this.getBlockBounds(rowIndex);\n        const lazyNodesInRange = this.nodeMap.filter((lazyNode) => lazyNode.index >= start && lazyNode.index < end);\n        lazyNodesInRange.forEach(({ node }) => {\n            node.__needsRefreshWhenVisible = true;\n        });\n    }\n\n    private doesNodeMatch(data: any, node: RowNode): boolean {\n        if (node.stub) {\n            return false;\n        }\n\n        if (this.getRowIdFunc != null) {\n            const id: string = this.getRowId(data)!;\n            return node.id === id;\n        }\n        return node.data === data;\n    }\n\n    /**\n     * Deletes any stub nodes not within the given range\n     */\n    public purgeStubsOutsideOfViewport() {\n        const firstRow = this.api.getFirstDisplayedRowIndex();\n        const lastRow = this.api.getLastDisplayedRowIndex();\n        const firstRowBlockStart = this.getBlockStartIndex(firstRow);\n        const [_, lastRowBlockEnd] = this.getBlockBounds(lastRow);\n\n        this.nodeMap.forEach(lazyNode => {\n            // failed loads are still useful, so we don't purge them\n            if (this.lazyBlockLoadingService.isRowLoading(this, lazyNode.index) || lazyNode.node.failedLoad) {\n                return;\n            }\n            if (lazyNode.node.stub && (lazyNode.index < firstRowBlockStart || lazyNode.index > lastRowBlockEnd)) {\n                this.destroyRowAtIndex(lazyNode.index);\n            }\n        });\n    }\n\n    private getBlocksDistanceFromRow(nodes: LazyStoreNode[], otherDisplayIndex: number) {\n        const blockDistanceToMiddle: { [key: number]: number } = {};\n        nodes.forEach(({ node, index }) => {\n            const [blockStart, blockEnd] = this.getBlockBounds(index);\n            if (blockStart in blockDistanceToMiddle) {\n                return;\n            }\n            const distStart = Math.abs(node.rowIndex! - otherDisplayIndex);\n            let distEnd;\n            // may not have an end node if the block came back small \n            const lastLazyNode = this.nodeMap.getBy('index', [blockEnd - 1]);\n            if (lastLazyNode) distEnd = Math.abs(lastLazyNode.node.rowIndex! - otherDisplayIndex);\n            const farthest = distEnd == null || distStart < distEnd ? distStart : distEnd;\n\n            blockDistanceToMiddle[blockStart] = farthest;\n        });\n        return Object.entries(blockDistanceToMiddle);\n    }\n\n    private purgeExcessRows() {\n        // Delete all stub nodes which aren't in the viewport or already loading\n        this.purgeStubsOutsideOfViewport();\n\n        if (this.store.getDisplayIndexEnd() == null || this.storeParams.maxBlocksInCache == null) {\n            // if group is collapsed, or max blocks missing, ignore the event\n            return;\n        }\n\n        const firstRowInViewport = this.api.getFirstDisplayedRowIndex();\n        const lastRowInViewport = this.api.getLastDisplayedRowIndex();\n\n        // the start storeIndex of every block in this store\n        const allLoadedBlocks: Set<number> = new Set();\n        // the start storeIndex of every displayed block in this store\n        const blocksInViewport: Set<number> = new Set();\n        this.nodeMap.forEach(({ index, node }) => {\n            const blockStart = this.getBlockStartIndex(index);\n            allLoadedBlocks.add(blockStart);\n\n            const isInViewport = node.rowIndex! >= firstRowInViewport && node.rowIndex! <= lastRowInViewport;\n            if (isInViewport) {\n                blocksInViewport.add(blockStart);\n            }\n        });\n\n        // if the viewport is larger than the max blocks, then the viewport size is minimum cache size\n        const numberOfBlocksToRetain = Math.max(blocksInViewport.size, this.storeParams.maxBlocksInCache ?? 0);\n\n        // ensure there is blocks that can be removed\n        const loadedBlockCount = allLoadedBlocks.size;\n        const blocksToRemove = loadedBlockCount - numberOfBlocksToRetain;\n        if (blocksToRemove <= 0) {\n            return;\n        }\n\n        // the first and last block in the viewport\n        let firstRowBlockStart = Number.MAX_SAFE_INTEGER;\n        let lastRowBlockStart = Number.MIN_SAFE_INTEGER;\n        blocksInViewport.forEach(blockStart => {\n            if (firstRowBlockStart > blockStart) {\n                firstRowBlockStart = blockStart;\n            }\n\n            if (lastRowBlockStart < blockStart) {\n                lastRowBlockStart = blockStart;\n            }\n        });\n\n        // all nodes which aren't cached or in the viewport, and so can be removed\n        const disposableNodes = this.nodeMap.filter(({ node, index }) => {\n            const rowBlockStart = this.getBlockStartIndex(index);\n            const rowBlockInViewport = rowBlockStart >= firstRowBlockStart && rowBlockStart <= lastRowBlockStart;\n\n            return !rowBlockInViewport && !this.isNodeCached(node);\n        });\n\n        if (disposableNodes.length === 0) {\n            return;\n        }\n\n        const midViewportRow = firstRowInViewport + ((lastRowInViewport - firstRowInViewport) / 2);\n        const blockDistanceArray = this.getBlocksDistanceFromRow(disposableNodes, midViewportRow);\n        const blockSize = this.getBlockSize();\n\n        // sort the blocks by distance from middle of viewport\n        blockDistanceArray.sort((a, b) => Math.sign(b[1] - a[1]));\n\n        // remove excess blocks, starting from furthest from viewport\n        for (let i = 0; i < Math.min(blocksToRemove, blockDistanceArray.length); i++) {\n            const blockStart = Number(blockDistanceArray[i][0]);\n            for (let x = blockStart; x < blockStart + blockSize; x++) {\n                const lazyNode = this.nodeMap.getBy('index', x);\n                if (!lazyNode || this.isNodeCached(lazyNode.node)) {\n                    continue;\n                }\n                this.destroyRowAtIndex(x);\n            }\n        }\n    }\n\n    private isNodeFocused(node: RowNode): boolean {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) { return false; }\n        if (focusedCell.rowPinned != null) { return false; }\n\n        const hasFocus = focusedCell.rowIndex === node.rowIndex;\n        return hasFocus;\n    }\n\n    private isNodeCached(node: RowNode): boolean {\n        return (node.isExpandable() && node.expanded) || this.isNodeFocused(node);\n    }\n\n    private extractDuplicateIds(rows: any[]) {\n        if (this.getRowIdFunc == null) {\n            return [];\n        }\n\n        const newIds = new Set();\n        const duplicates = new Set();\n        rows.forEach(data => {\n            const id = this.getRowId(data);\n            if (newIds.has(id)) {\n                duplicates.add(id);\n                return;\n            }\n            newIds.add(id);\n        });\n\n        return [...duplicates];\n    }\n\n    public onLoadSuccess(firstRowIndex: number, numberOfRowsExpected: number, response: LoadSuccessParams) {\n        if (!this.live) return;\n\n        const info = response.groupLevelInfo;\n        this.store.setStoreInfo(info);\n    \n        if (this.getRowIdFunc != null) {\n            const duplicates = this.extractDuplicateIds(response.rowData);\n            if (duplicates.length > 0) {\n                const duplicateIdText = duplicates.join(', ');\n                console.warn(`AG Grid: Unable to display rows as duplicate row ids (${duplicateIdText}) were returned by the getRowId callback. Please modify the getRowId callback to provide unique ids.`);\n                this.onLoadFailed(firstRowIndex, numberOfRowsExpected);\n                return;\n            }\n        }\n\n        if (response.pivotResultFields) {\n            this.serverSideRowModel.generateSecondaryColumns(response.pivotResultFields);\n        }\n        \n        const wasRefreshing = this.nodesToRefresh.size > 0;\n        response.rowData.forEach((data, responseRowIndex) => {\n            const rowIndex = firstRowIndex + responseRowIndex;\n            const nodeFromCache = this.nodeMap.getBy('index', rowIndex);\n        \n            // if stub, overwrite\n            if (nodeFromCache?.node?.stub) {\n                this.createRowAtIndex(rowIndex, data);\n                return;\n            }\n\n            // node already exists, and same as node at designated position, update data\n            if (nodeFromCache && this.doesNodeMatch(data, nodeFromCache.node)) {\n                this.blockUtils.updateDataIntoRowNode(nodeFromCache.node, data);\n                this.nodesToRefresh.delete(nodeFromCache.node);\n                nodeFromCache.node.__needsRefreshWhenVisible = false;\n                return;\n            }\n            // create row will handle deleting the overwritten row\n            this.createRowAtIndex(rowIndex, data);\n        });\n\n        if (response.rowCount != undefined && response.rowCount !== -1) {\n            // if the rowCount has been provided, set the row count\n            this.numberOfRows = response.rowCount;\n            this.isLastRowKnown = true;\n        } else if (numberOfRowsExpected > response.rowData.length) {\n            // infer the last row as the response came back short\n            this.numberOfRows = firstRowIndex + response.rowData.length;\n            this.isLastRowKnown = true;\n        } else if (!this.isLastRowKnown) {\n            // add 1 for loading row, as we don't know the last row\n            const lastInferredRow = firstRowIndex + response.rowData.length + 1;\n            if (lastInferredRow > this.numberOfRows) {\n                this.numberOfRows = lastInferredRow;\n            }\n        }\n\n        if (this.isLastRowKnown) {\n            // delete any rows after the last index\n            const lazyNodesAfterStoreEnd = this.nodeMap.filter(lazyNode => lazyNode.index >= this.numberOfRows);\n            lazyNodesAfterStoreEnd.forEach(lazyNode => this.destroyRowAtIndex(lazyNode.index));\n        }\n\n        this.fireStoreUpdatedEvent();\n\n        // Happens after store updated, as store updating can clear our excess rows.\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        if (wasRefreshing && finishedRefreshing) {\n            this.fireRefreshFinishedEvent();\n        }\n    }\n\n    public fireRefreshFinishedEvent() {\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        // if anything refreshing currently, skip.\n        if (!finishedRefreshing) {\n            return;\n        }\n\n        // any nodes left in the map need to be cleaned up, this prevents us preserving nodes\n        // indefinitely\n        this.removedNodeCache.forEach(node => {\n            this.blockUtils.destroyRowNode(node);\n        });\n        this.removedNodeCache = new Map();\n\n        this.store.fireRefreshFinishedEvent();\n    }\n\n    /**\n     * @returns true if all rows are loaded\n     */\n    public isStoreFullyLoaded() {\n        const knowsSize = this.isLastRowKnown;\n        const hasCorrectRowCount = this.nodeMap.getSize() === this.numberOfRows;\n        if (!knowsSize || !hasCorrectRowCount) {\n            return;\n        }\n\n        if (this.nodesToRefresh.size > 0) {\n            return;\n        }\n\n        // nodeMap find cancels early when it finds a matching record.\n        // better to use this than forEach\n        let index = -1;\n        const firstOutOfPlaceNode = this.nodeMap.find(lazyNode => {\n            index += 1;\n            // node not contiguous, nodes must be missing\n            if (lazyNode.index !== index) {\n                return true;\n            }\n            // node data is out of date\n            if (lazyNode.node.__needsRefreshWhenVisible) {\n                return true;\n            }\n            // node not yet loaded\n            if (lazyNode.node.stub) {\n                return true;\n            }\n            return false;\n        });\n        return firstOutOfPlaceNode == null;\n    }\n\n    public isLastRowIndexKnown() {\n        return this.isLastRowKnown;\n    }\n\n    public onLoadFailed(firstRowIndex: number, numberOfRowsExpected: number) {\n        if (!this.live) return;\n        const wasRefreshing = this.nodesToRefresh.size > 0;\n\n        for (let i = firstRowIndex; i < firstRowIndex + numberOfRowsExpected && i < this.getRowCount(); i++) {\n            let { node }: { node?: RowNode } = this.nodeMap.getBy('index', i) ?? {};\n            if (node) {\n                this.nodesToRefresh.delete(node);\n            }\n            if (!node || !node.stub) {\n                if (node && !node.stub) {\n                    // if node is not a stub, we destroy it and recreate as nodes can't go from data to stub\n                    this.destroyRowAtIndex(i);\n                }\n                node = this.createRowAtIndex(i);\n            }\n            // this node has been refreshed, even if it wasn't successful\n            node.__needsRefreshWhenVisible = false;\n            node.failedLoad = true;\n        }\n\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        if (wasRefreshing && finishedRefreshing) {\n            this.fireRefreshFinishedEvent();\n        }\n\n        this.fireStoreUpdatedEvent();\n    }\n\n    public markNodesForRefresh() {\n        this.nodeMap.forEach(lazyNode => {\n            if (lazyNode.node.stub && !lazyNode.node.failedLoad) {\n                return;\n            }\n            this.nodesToRefresh.add(lazyNode.node);\n        });\n        this.lazyBlockLoadingService.queueLoadCheck();\n\n        if (this.isLastRowKnown && this.numberOfRows === 0) {\n            this.numberOfRows = 1;\n            this.isLastRowKnown = false;\n            this.fireStoreUpdatedEvent();\n        }\n    }\n\n    public isNodeInCache(id: string): boolean {\n        return !!this.nodeMap.getBy('id', id);\n    }\n\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    private fireStoreUpdatedEvent(): void {\n        if (!this.live) { return; }\n\n        this.store.fireStoreUpdatedEvent();\n    }\n\n    private getRowId(data: any) {\n        if (this.getRowIdFunc == null) {\n            return null;\n        }\n\n        // find rowNode using id\n        const { level } = this.store.getRowDetails();\n        const parentKeys = this.store.getParentNode().getGroupKeys();\n        const id: string = this.getRowIdFunc({\n            data,\n            parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n            level,\n        });\n        return String(id);\n    }\n\n    public getOrderedNodeMap() {\n        const obj: { [key: number]: LazyStoreNode } = {};\n        this.nodeMap.forEach(node => obj[node.index] = node);\n        return obj;\n    }\n\n    public clearDisplayIndexes() {\n        this.nodeDisplayIndexMap.clear();\n    }\n\n    /**\n     * Client side sorting\n     */\n    public clientSideSortRows() {\n        const sortOptions = this.sortController.getSortOptions();\n        const isAnySort = sortOptions.some(opt => opt.sort != null);\n        if (!isAnySort) {\n            return;\n        }\n        \n        // the node map does not need entirely recreated, only the indexes need updated.\n        const allNodes = new Array(this.nodeMap.getSize());\n        this.nodeMap.forEach(lazyNode => allNodes[lazyNode.index] = lazyNode.node);\n        this.nodeMap.clear();\n\n        const sortedNodes = this.rowNodeSorter.doFullSort(allNodes, sortOptions);\n        sortedNodes.forEach((node, index) => {\n            this.nodeMap.set({\n                id: node.id!,\n                node,\n                index,\n            });\n        });\n    }\n\n    /**\n     * Transaction Support here\n     */\n    public updateRowNodes(updates: any[]): RowNode[] {\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Transactions can only be applied when row ids are supplied.');\n        }\n        \n        const updatedNodes: RowNode[] = [];\n        updates.forEach(data => {\n            const id: string = this.getRowId(data)!;\n            const lazyNode = this.nodeMap.getBy('id', id);\n            if (lazyNode) {\n                this.blockUtils.updateDataIntoRowNode(lazyNode.node, data);\n                updatedNodes.push(lazyNode.node);\n            }\n        });\n        return updatedNodes;\n    }\n\n    public insertRowNodes(inserts: any[], indexToAdd?: number): RowNode[] {\n        // adjust row count to allow for footer row\n        const realRowCount = this.store.getRowCount() - (this.store.getParentNode().sibling ? 1 : 0);\n\n        // if missing and we know the last row, we're inserting at the end\n        const addIndex = indexToAdd == null && this.isLastRowKnown ? realRowCount : indexToAdd;\n\n        // can't insert nodes past the end of the store\n        if (addIndex == null || realRowCount < addIndex) {\n            return [];\n        }\n\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Transactions can only be applied when row ids are supplied.');\n        }\n\n        const uniqueInsertsMap: { [id: string]: any } = {};\n        \n        inserts.forEach(data => {\n            const dataId = this.getRowId(data)!;\n            if (dataId && this.isNodeInCache(dataId)) {\n                return;\n            }\n            \n            uniqueInsertsMap[dataId] = data;\n        });\n\n        const uniqueInserts = Object.values(uniqueInsertsMap);\n\n        let numberOfInserts = uniqueInserts.length;\n        if (numberOfInserts === 0) {\n            return [];\n        }\n\n        const nodesToMove = this.nodeMap.filter(node => node.index >= addIndex);\n        // delete all nodes which need moved first, so they don't get overwritten\n        nodesToMove.forEach(lazyNode => this.nodeMap.delete(lazyNode));\n        // then move the nodes to their new locations\n        nodesToMove.forEach(lazyNode => {\n            this.nodeMap.set({\n                node: lazyNode.node,\n                index: lazyNode.index + numberOfInserts,\n                id: lazyNode.id,\n            });\n        });\n                    \n        // increase the store size to accommodate\n        this.numberOfRows += numberOfInserts;\n\n        // finally insert the new rows\n        return uniqueInserts.map((data, uniqueInsertOffset) => this.createRowAtIndex(addIndex + uniqueInsertOffset, data));\n    }\n\n    public removeRowNodes(idsToRemove: string[]): RowNode[] {\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Transactions can only be applied when row ids are supplied.');\n        }\n\n        const removedNodes: RowNode[] = [];\n        const nodesToVerify: RowNode[] = [];\n\n        // track how many nodes have been deleted, as when we pass other nodes we need to shift them up\n        let deletedNodeCount = 0;\n\n        const remainingIdsToRemove = [...idsToRemove];\n\n        const allNodes = this.getOrderedNodeMap();\n        let contiguousIndex = -1;\n        for (let stringIndex in allNodes) {\n            contiguousIndex += 1;\n            const node = allNodes[stringIndex];\n\n            // finding the index allows the use of splice which should be slightly faster than both a check and filter\n            const matchIndex = remainingIdsToRemove.findIndex(idToRemove => idToRemove === node.id);\n            if (matchIndex !== -1) {\n                // found node, remove it from nodes to remove\n                remainingIdsToRemove.splice(matchIndex, 1);\n\n                this.destroyRowAtIndex(Number(stringIndex));\n                removedNodes.push(node.node);\n                deletedNodeCount += 1;\n                continue;\n            }\n\n            // no nodes removed and this node doesn't match, so no need to shift\n            if (deletedNodeCount === 0) {\n                continue;\n            }\n\n            const numericStoreIndex = Number(stringIndex);\n            if (contiguousIndex !== numericStoreIndex) {\n                nodesToVerify.push(node.node);\n            }\n\n            // shift normal node up by number of deleted prior to this point\n            this.nodeMap.delete(allNodes[stringIndex]);\n            this.nodeMap.set({\n                id: node.id!,\n                node: node.node,\n                index: numericStoreIndex - deletedNodeCount,\n            });\n        }\n\n        this.numberOfRows -= this.isLastRowIndexKnown() ? idsToRemove.length : deletedNodeCount;\n\n        if (remainingIdsToRemove.length > 0 && nodesToVerify.length > 0) {\n            nodesToVerify.forEach(node => node.__needsRefreshWhenVisible = true);\n            this.lazyBlockLoadingService.queueLoadCheck();\n        }\n\n        return removedNodes;\n    }\n\n    /**\n     * Return the block size configured for this cache\n     */\n    public getBlockSize() {\n        return this.storeParams.cacheBlockSize || LazyBlockLoadingService.DEFAULT_BLOCK_SIZE;\n    }\n\n    /**\n     * Get the start index of the loading block for a given index\n     */\n    public getBlockStartIndex(storeIndex: number): number {\n        const blockSize = this.getBlockSize();\n        return storeIndex - (storeIndex % blockSize);\n    }\n\n    /**\n     * Get the start and end index of a block, given a row store index\n     */\n    public getBlockBounds(storeIndex: number): [number, number] {\n        const startOfBlock = this.getBlockStartIndex(storeIndex);\n        const blockSize = this.getBlockSize();\n        return [startOfBlock, startOfBlock + blockSize];\n    }\n}\n", "export class MultiIndexMap<K> {\n    private indexes: (keyof K)[];\n    private maps: Map<keyof K, Map<any, K>>;\n\n    constructor(...indexes: (keyof K)[]) {\n        if (indexes.length < 1) {\n            throw new Error('AG Grid: At least one index must be provided.');\n        }\n        this.indexes = indexes;\n        this.maps = new Map(\n            this.indexes.map(index => [index, new Map()])\n        );\n    }\n\n    public getSize(): number {\n        return this.maps.get(this.indexes[0])!.size;\n    }\n\n    public getBy(index: keyof K, key: any): K | undefined {\n        const map = this.maps.get(index);\n        if (!map) {\n            throw new Error(`AG Grid: ${String(index)} not found`);\n        }\n        return map.get(key);\n    }\n\n    public set(item: K) {\n        this.indexes.forEach(index => {\n            const map = this.maps.get(index);\n            if (!map) {\n                throw new Error(`AG Grid: ${String(index)} not found`);\n            }\n            map.set(item[index], item);\n        });\n    }\n\n    public delete(item: K) {\n        this.indexes.forEach(index => {\n            const map = this.maps.get(index);\n            if (!map) {\n                throw new Error(`AG Grid: ${String(index)} not found`);\n            }\n            map.delete(item[index]);\n        });\n    }\n\n    public clear() {\n        this.maps.forEach(map => map.clear());\n    }\n\n    private getIterator(index: keyof K) {\n        const map = this.maps.get(index);\n        if (!map) {\n            throw new Error(`AG Grid: ${String(index)} not found`);\n        }\n        return map.values();\n    }\n    \n    public forEach(callback: (item: K) => void) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer: IteratorResult<K, any>;\n        while (pointer = iterator.next()) {\n            if (pointer.done) break;\n            callback(pointer.value);\n        }\n    }\n    \n    public find(callback: (item: K) => boolean) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer: IteratorResult<K, any>;\n        while (pointer = iterator.next()) {\n            if (pointer.done) break;\n            if (callback(pointer.value)) {\n                return pointer.value;\n            }\n        }\n    }\n\n    public filter(predicate: (item: K) => boolean) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer: IteratorResult<K, any>;\n        const result: K[] = [];\n        while (pointer = iterator.next()) {\n            if (pointer.done) break;\n            if (predicate(pointer.value)) {\n                result.push(pointer.value);\n            }\n        }\n        return result;\n    }\n}", "import { Autowired, Bean, BeanStub, PostConstruct, RowNodeBlockLoader, RowRenderer, RowNode, IServerSideGetRowsRequest, LoadSuccessParams, IServerSideGetRowsParams } from \"@ag-grid-community/core\";\nimport { LazyCache } from \"./lazyCache\";\nimport { ServerSideRowModel } from \"../../serverSideRowModel\";\nimport { LazyStore } from \"./lazyStore\";\n\n@Bean('lazyBlockLoadingService')\nexport class LazyBlockLoadingService extends BeanStub {\n    public static DEFAULT_BLOCK_SIZE = 100;\n\n    @Autowired('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('rowModel') private rowModel: ServerSideRowModel;\n    \n    // a map of caches to loading nodes\n    private cacheLoadingNodesMap: Map<LazyCache, Set<number>> = new Map();\n\n    // if a check is queued to happen this cycle\n    private isCheckQueued = false;\n\n    // this is cached for blockLoadDebounce\n    private nextBlockToLoad?: { cache: LazyCache, index: number } = undefined;\n    private loaderTimeout?: number;\n\n    @PostConstruct\n    private init() {\n        // after a block is loaded, check if we have a block to load now that\n        // `maxConcurrentDatasourceRequests` has changed\n        this.addManagedListener(this.rowNodeBlockLoader, RowNodeBlockLoader.BLOCK_LOADED_EVENT, () => this.queueLoadAction());\n    }\n\n    public subscribe(cache: LazyCache) {\n        this.cacheLoadingNodesMap.set(cache, new Set());\n    }\n\n    public unsubscribe(cache: LazyCache) {\n        this.cacheLoadingNodesMap.delete(cache);\n    }\n\n    /**\n     * Queues a microtask to check if any blocks need to be loaded.\n     */\n    public queueLoadCheck() {\n        if (this.isCheckQueued) {\n            return;\n        }\n        this.isCheckQueued = true;\n        window.queueMicrotask(() => {\n            this.queueLoadAction();\n            this.isCheckQueued = false;\n        });\n    }\n\n    private queueLoadAction() {\n        const nextBlockToLoad = this.getBlockToLoad();\n        if (!nextBlockToLoad) {\n            return;\n        }\n    \n        // for blockLoadDebounceMillis, if the next block to load is the same as the last block to load, ignore\n        // otherwise cancel existing timeout and requeue\n        const isSameBlock = this.nextBlockToLoad && this.nextBlockToLoad.cache === nextBlockToLoad.cache && this.nextBlockToLoad.index === nextBlockToLoad.index;\n        if (isSameBlock) {\n            return;\n        }\n        \n        if (!this.nextBlockToLoad || !isSameBlock) {\n            this.nextBlockToLoad = nextBlockToLoad;\n            window.clearTimeout(this.loaderTimeout);\n\n            const startRow = Number(this.nextBlockToLoad.index);\n            const cache = this.nextBlockToLoad.cache;\n            const endRow = nextBlockToLoad.index + nextBlockToLoad.cache.getBlockSize();\n            this.loaderTimeout = window.setTimeout(() => {\n                if (!cache.isAlive()) {\n                    return;\n                }\n                this.loaderTimeout = undefined;\n                this.attemptLoad(cache, startRow, endRow);\n                this.nextBlockToLoad = undefined;\n            }, this.gridOptionsService.get('blockLoadDebounceMillis'));\n        }\n    }\n\n    private attemptLoad(cache: LazyCache, start: number, end: number) {\n        const availableLoadingCount = this.rowNodeBlockLoader.getAvailableLoadingCount();\n        // too many loads already, ignore the request as a successful request will requeue itself anyway\n        if (availableLoadingCount != null && availableLoadingCount === 0) {\n            return;\n        };\n\n        this.rowNodeBlockLoader.registerLoads(1);\n        this.executeLoad(cache, start, end);\n\n        // requeue a load action before waiting for a response, this is to enable\n        // more than one block to load simultaneously due to maxConcurrentDatasourceRequests\n        this.queueLoadAction();\n    }\n\n    private executeLoad(cache: LazyCache, startRow: number, endRow: number) {\n        const ssrmParams = cache.getSsrmParams();\n        const request: IServerSideGetRowsRequest = {\n            startRow,\n            endRow,\n            rowGroupCols: ssrmParams.rowGroupCols,\n            valueCols: ssrmParams.valueCols,\n            pivotCols: ssrmParams.pivotCols,\n            pivotMode: ssrmParams.pivotMode,\n            groupKeys: (cache as any).store.getParentNode().getGroupKeys(),\n            filterModel: ssrmParams.filterModel,\n            sortModel: ssrmParams.sortModel,\n        };\n\n        const loadingNodes = this.cacheLoadingNodesMap.get(cache)!;\n        const removeNodesFromLoadingMap = () => {\n            for (let i = 0; i < endRow - startRow; i++) {\n                loadingNodes.delete(startRow + i);\n            }\n        }\n        \n        const addNodesToLoadingMap = () => {\n            for (let i = 0; i < endRow - startRow; i++) {\n                loadingNodes.add(startRow + i);\n            }\n        }\n\n        const success = (params: LoadSuccessParams) => {\n            cache.onLoadSuccess(startRow, endRow - startRow, params);\n            removeNodesFromLoadingMap();\n            this.rowNodeBlockLoader.loadComplete();\n        };\n\n        const fail = () => {\n            cache.onLoadFailed(startRow, endRow - startRow);\n            removeNodesFromLoadingMap();\n            this.rowNodeBlockLoader.loadComplete();\n        }\n\n        const params: IServerSideGetRowsParams = this.gridOptionsService.addGridCommonParams({\n            request,\n            success,\n            fail,\n            parentNode: (cache as any).store.getParentNode()\n        });\n\n        addNodesToLoadingMap();\n        cache.getSsrmParams().datasource?.getRows(params);\n    }\n\n    private getBlockToLoad() {\n        const firstRowInViewport = this.rowRenderer.getFirstVirtualRenderedRow();\n        const lastRowInViewport = this.rowRenderer.getLastVirtualRenderedRow();\n\n        // quick look-up for priority rows needing loading in viewport.\n        for (let i = firstRowInViewport; i <= lastRowInViewport; i++) {\n            const row = this.rowModel.getRow(i);\n            if (!row) {\n                continue;\n            }\n\n            const store = row.parent && row.parent.childStore;\n            if (!store || !(store instanceof LazyStore)) {\n                continue;\n            }\n\n            const cache: LazyCache = store.getCache();\n            const lazyNode = cache.getNodes().getBy('node', row);\n            if (!lazyNode) {\n                continue;\n            }\n\n            const loadingNodes = this.cacheLoadingNodesMap.get(cache);\n            if (loadingNodes?.has(lazyNode.index)) {\n                continue;\n            }\n\n            if (row.__needsRefreshWhenVisible || (row.stub && !row.failedLoad)) {\n                return {\n                    cache: cache,\n                    index: cache.getBlockStartIndex(lazyNode.index),\n                };\n            }\n        }\n\n        let cacheToRefresh: LazyCache | null = null;\n        let nodeToRefresh: RowNode | null = null;\n        let nodeToRefreshDist: number = Number.MAX_SAFE_INTEGER;\n\n        for (const cache of this.cacheLoadingNodesMap.keys()) {\n            const nodesToRefresh = cache.getNodesToRefresh();\n            nodesToRefresh.forEach(node => {\n                if (node.rowIndex == null) {\n                    nodeToRefresh = node;\n                    cacheToRefresh = cache;\n                    return;\n                }\n\n                const lazyNode = cache.getNodes().getBy('node', node);\n                if (!lazyNode) {\n                    return;\n                }\n\n                const loadingNodes = this.cacheLoadingNodesMap.get(cache);\n                if (loadingNodes?.has(lazyNode.index)) {\n                    return;\n                }\n            \n                const distToViewportTop = Math.abs(firstRowInViewport - node.rowIndex);\n                const distToViewportBottom = Math.abs(node.rowIndex - lastRowInViewport);\n                if (distToViewportTop < nodeToRefreshDist) {\n                    nodeToRefresh = node;\n                    nodeToRefreshDist = distToViewportTop;\n                    cacheToRefresh = cache;\n                }\n\n                if (distToViewportBottom < nodeToRefreshDist) {\n                    nodeToRefresh = node;\n                    nodeToRefreshDist = distToViewportBottom;\n                    cacheToRefresh = cache;\n                }\n            });\n        }\n\n        if (!cacheToRefresh) {\n            return undefined;\n        }\n\n        const lazyCache = cacheToRefresh as LazyCache;\n\n        const lazyIndex = lazyCache.getNodes().getBy('node', nodeToRefresh)?.index;\n        return lazyIndex == null ? undefined : {\n            cache: lazyCache,\n            index: lazyCache.getBlockStartIndex(lazyIndex),\n        };\n    }\n\n    public isRowLoading(cache: LazyCache, index: number) {\n        return this.cacheLoadingNodesMap.get(cache)?.has(index) ?? false;\n    }\n}", "import {\n    _,\n    IServerSideStore,\n    Autowired,\n    Bean,\n    BeanStub,\n    IServerSideGetRowsParams,\n    IServerSideGetRowsRequest,\n    StoreRefreshAfterParams,\n    RowNode,\n    ColumnVO,\n    RowNodeBlock,\n    ColumnModel,\n    GridOptions\n} from \"@ag-grid-community/core\";\nimport { SSRMParams, ServerSideRowModel } from \"../serverSideRowModel\";\nimport { StoreFactory } from \"./storeFactory\";\n\n@Bean('ssrmStoreUtils')\nexport class StoreUtils extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('ssrmStoreFactory') private storeFactory: StoreFactory;\n\n    public loadFromDatasource(p: {\n        storeParams: SSRMParams,\n        parentNode: RowNode,\n        parentBlock: RowNodeBlock,\n        success: () => void,\n        fail: () => void,\n        startRow?: number,\n        endRow?: number}\n    ): void {\n        const { storeParams, parentBlock, parentNode } = p;\n        const groupKeys = parentNode.getGroupKeys();\n\n        if (!storeParams.datasource) { return; }\n\n        const request: IServerSideGetRowsRequest = {\n            startRow: p.startRow,\n            endRow: p.endRow,\n            rowGroupCols: storeParams.rowGroupCols,\n            valueCols: storeParams.valueCols,\n            pivotCols: storeParams.pivotCols,\n            pivotMode: storeParams.pivotMode,\n            groupKeys: groupKeys,\n            filterModel: storeParams.filterModel,\n            sortModel: storeParams.sortModel\n        };\n\n        const getRowsParams: IServerSideGetRowsParams = this.gridOptionsService.addGridCommonParams({\n            success: p.success,\n            fail: p.fail,\n            request: request,\n            parentNode: p.parentNode\n        });\n\n        window.setTimeout(() => {\n            if (!storeParams.datasource || !parentBlock.isAlive()) {\n                // failCallback() is important, to reduce the 'RowNodeBlockLoader.activeBlockLoadsCount' count\n                p.fail();\n                return;\n            }\n            storeParams.datasource.getRows(getRowsParams);\n        }, 0);\n    }\n\n    public getChildStore(keys: string[], currentCache: IServerSideStore, findNodeFunc: (key: string) => RowNode | null): IServerSideStore | null {\n        if (_.missingOrEmpty(keys)) { return currentCache; }\n\n        const nextKey = keys[0];\n        const nextNode = findNodeFunc(nextKey);\n\n        if (nextNode) {\n            // if we have the final node, but not the final store, we create it to allow\n            // early population of data\n            if (keys.length === 1 && !nextNode.childStore) {\n                const storeParams = this.serverSideRowModel.getParams();\n                nextNode.childStore = this.createBean(this.storeFactory.createStore(storeParams, nextNode));\n            }\n\n            const keyListForNextLevel = keys.slice(1, keys.length);\n            const nextStore = nextNode.childStore;\n            return nextStore ? nextStore.getChildStore(keyListForNextLevel) : null;\n        }\n\n        return null;\n    }\n\n    public isServerRefreshNeeded(parentRowNode: RowNode, rowGroupCols: ColumnVO[], params: StoreRefreshAfterParams): boolean {\n        if (params.valueColChanged || params.secondaryColChanged) {\n            return true;\n        }\n\n        const level = parentRowNode.level + 1;\n        const grouping = level < rowGroupCols.length;\n        const leafNodes = !grouping;\n\n        if (leafNodes) { return true; }\n\n        const colIdThisGroup = rowGroupCols[level].id;\n        const actionOnThisGroup = params.changedColumns.indexOf(colIdThisGroup) > -1;\n\n        if (actionOnThisGroup) { return true; }\n\n        const allCols = this.columnModel.getAllGridColumns();\n        const affectedGroupCols = allCols\n            // find all impacted cols which also a group display column\n            .filter(col => col.getColDef().showRowGroup && params.changedColumns.includes(col.getId()))\n            .map(col => col.getColDef().showRowGroup)\n            // if displaying all groups, or displaying the effected col for this group, refresh\n            .some(group => group === true || group === colIdThisGroup);\n\n        return affectedGroupCols;\n    }\n\n    public getServerSideInitialRowCount(): number | null {\n        return this.gridOptionsService.get('serverSideInitialRowCount');\n    }\n\n    private assertRowModelIsServerSide(key: keyof GridOptions) {\n        if (!this.gridOptionsService.isRowModelType('serverSide')) {\n            _.warnOnce(`The '${key}' property can only be used with the Server Side Row Model.`);\n            return false;\n        }\n        return true;\n    }\n    private assertNotTreeData(key: keyof GridOptions) {\n        if (this.gridOptionsService.get('treeData')) {\n            _.warnOnce(`The '${key}' property cannot be used while using tree data.`);\n            return false;\n        }\n        return true;\n    }\n\n    public isServerSideSortAllLevels() {\n        return this.gridOptionsService.get('serverSideSortAllLevels') && this.assertRowModelIsServerSide('serverSideSortAllLevels');\n    }\n    public isServerSideOnlyRefreshFilteredGroups() {\n        return this.gridOptionsService.get('serverSideOnlyRefreshFilteredGroups') && this.assertRowModelIsServerSide('serverSideOnlyRefreshFilteredGroups');\n    }\n    public isServerSideSortOnServer() {\n        return this.gridOptionsService.get('serverSideSortOnServer') && this.assertRowModelIsServerSide('serverSideSortOnServer') && this.assertNotTreeData('serverSideSortOnServer');\n    }\n    public isServerSideFilterOnServer() {\n        return this.gridOptionsService.get('serverSideFilterOnServer') && this.assertRowModelIsServerSide('serverSideFilterOnServer') && this.assertNotTreeData('serverSideFilterOnServer');\n    }\n\n}", "import {\n    _,\n    RowBounds,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    PostConstruct,\n    RowNode,\n    ValueService,\n    NumberSequence,\n    Beans,\n    IRowNode\n} from \"@ag-grid-community/core\";\nimport { NodeManager } from \"../nodeManager\";\nimport { ServerSideExpansionService } from \"../services/serverSideExpansionService\";\n\nexport const GROUP_MISSING_KEY_ID: 'ag-Grid-MissingKey' = 'ag-Grid-MissingKey';\n\n@Bean('ssrmBlockUtils')\nexport class BlockUtils extends BeanStub {\n\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ssrmNodeManager') private nodeManager: NodeManager;\n    @Autowired('beans') private beans: Beans;\n    @Autowired('expansionService') private readonly expansionService: ServerSideExpansionService;\n\n    public createRowNode(params: {\n        group: boolean, leafGroup: boolean, level: number,\n        parent: RowNode, field: string, rowGroupColumn: Column, rowHeight?: number\n    }): RowNode {\n\n        const rowNode = new RowNode(this.beans);\n\n        const rowHeight = params.rowHeight != null ? params.rowHeight : this.gridOptionsService.getRowHeightAsNumber();\n        rowNode.setRowHeight(rowHeight);\n\n        rowNode.group = params.group;\n        rowNode.leafGroup = params.leafGroup;\n        rowNode.level = params.level;\n        rowNode.uiLevel = params.level;\n        rowNode.parent = params.parent;\n\n        // stub gets set to true here, and then false when this rowNode gets it's data\n        rowNode.stub = true;\n        rowNode.__needsRefreshWhenVisible = false;\n\n        if (rowNode.group) {\n            rowNode.expanded = false;\n            rowNode.field = params.field;\n            rowNode.rowGroupColumn = params.rowGroupColumn;\n        }\n\n        return rowNode;\n    }\n\n    public destroyRowNodes(rowNodes: RowNode[]): void {\n        if (rowNodes) {\n            rowNodes.forEach((row) => this.destroyRowNode(row));\n        }\n    }\n\n    public destroyRowNode(rowNode: RowNode, preserveStore: boolean = false): void {\n        if (rowNode.childStore && !preserveStore) {\n            this.destroyBean(rowNode.childStore);\n            rowNode.childStore = null;\n        }\n\n        // if this has a footer, destroy that too\n        if (rowNode.sibling && !rowNode.footer) {\n            this.destroyRowNode(rowNode.sibling, false);\n        }\n    \n        // this is needed, so row render knows to fade out the row, otherwise it\n        // sees row top is present, and thinks the row should be shown. maybe\n        // rowNode should have a flag on whether it is visible???\n        rowNode.clearRowTopAndRowIndex();\n        if (rowNode.id != null) {\n            this.nodeManager.removeNode(rowNode);\n        }\n    }\n\n    private setTreeGroupInfo(rowNode: RowNode): void {\n        rowNode.updateHasChildren();\n\n        const getKeyFunc = this.gridOptionsService.get('getServerSideGroupKey');\n        if (rowNode.hasChildren() && getKeyFunc != null) {\n            rowNode.key = getKeyFunc(rowNode.data);\n        }\n\n        if (!rowNode.hasChildren() && rowNode.childStore != null) {\n            this.destroyBean(rowNode.childStore);\n            rowNode.childStore = null;\n            rowNode.expanded = false;\n        }\n    }\n\n    private setRowGroupInfo(rowNode: RowNode): void {\n        rowNode.key = this.valueService.getValue(rowNode.rowGroupColumn!, rowNode);\n        if (rowNode.key === null || rowNode.key === undefined) {\n            _.doOnce(() => {\n                console.warn(`AG Grid: null and undefined values are not allowed for server side row model keys`);\n                if (rowNode.rowGroupColumn) {\n                    console.warn(`column = ${rowNode.rowGroupColumn.getId()}`);\n                }\n                console.warn(`data is `, rowNode.data);\n            }, 'ServerSideBlock-CannotHaveNullOrUndefinedForKey');\n        }\n\n        const getGroupIncludeFooter = this.beans.gridOptionsService.getGroupIncludeFooter();\n        const doesRowShowFooter = getGroupIncludeFooter({ node: rowNode });\n        if (doesRowShowFooter) {\n            rowNode.createFooter();\n            if (rowNode.sibling) {\n                rowNode.sibling.uiLevel = rowNode.uiLevel + 1;\n            }\n        }\n    }\n\n    private setMasterDetailInfo(rowNode: RowNode): void {\n        const isMasterFunc = this.gridOptionsService.get('isRowMaster');\n        if (isMasterFunc != null) {\n            rowNode.master = isMasterFunc(rowNode.data);\n        } else {\n            rowNode.master = true;\n        }\n    }\n\n    public updateDataIntoRowNode(rowNode: RowNode, data: any): void {\n        rowNode.updateData(data);\n\n        if (this.gridOptionsService.get('treeData')) {\n            this.setTreeGroupInfo(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        } else if (rowNode.group) {\n            this.setChildCountIntoRowNode(rowNode);\n\n            if (!rowNode.footer) {\n                const getGroupIncludeFooter = this.beans.gridOptionsService.getGroupIncludeFooter();\n                const doesRowShowFooter = getGroupIncludeFooter({ node: rowNode });\n                if (doesRowShowFooter) {\n                    if (rowNode.sibling) {\n                        rowNode.sibling.updateData(data);\n                    } else {\n                        rowNode.createFooter();\n                    }\n                } else if (rowNode.sibling) {\n                    rowNode.destroyFooter();\n                }\n            }\n\n            // it's not possible for a node to change whether it's a group or not\n            // when doing row grouping (as only rows at certain levels are groups),\n            // so nothing to do here\n        } else if (this.gridOptionsService.get('masterDetail')) {\n            // this should be implemented, however it's not the use case i'm currently\n            // programming, so leaving for another day. to test this, create an example\n            // where whether a master row is expandable or not is dynamic\n        }\n    }\n\n    public setDataIntoRowNode(rowNode: RowNode, data: any, defaultId: string, cachedRowHeight: number | undefined): void {\n        rowNode.stub = false;\n        const treeData = this.gridOptionsService.get('treeData');\n\n        if (_.exists(data)) {\n            rowNode.setDataAndId(data, defaultId);\n\n            if (treeData) {\n                this.setTreeGroupInfo(rowNode);\n            } else if (rowNode.group) {\n                this.setRowGroupInfo(rowNode);\n            } else if (this.gridOptionsService.get('masterDetail')) {\n                this.setMasterDetailInfo(rowNode);\n            }\n\n        } else {\n            rowNode.setDataAndId(undefined, undefined);\n            rowNode.key = null;\n        }\n\n        if (treeData || rowNode.group) {\n            this.setGroupDataIntoRowNode(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        }\n\n        // this needs to be done AFTER setGroupDataIntoRowNode(), as the height can depend on the group data\n        // getting set, if it's a group node and colDef.autoHeight=true\n        if (_.exists(data)) {\n            rowNode.setRowHeight(this.gridOptionsService.getRowHeightForNode(rowNode, false, cachedRowHeight).height);\n            rowNode.sibling?.setRowHeight(this.gridOptionsService.getRowHeightForNode(rowNode.sibling, false, cachedRowHeight).height);\n        }\n    }\n\n    private setChildCountIntoRowNode(rowNode: RowNode): void {\n        const getChildCount = this.gridOptionsService.get('getChildCount');\n        if (getChildCount) {\n            rowNode.setAllChildrenCount(getChildCount(rowNode.data));\n        }\n    }\n\n    private setGroupDataIntoRowNode(rowNode: RowNode): void {\n        const groupDisplayCols: Column[] = this.columnModel.getGroupDisplayColumns();\n\n        const usingTreeData = this.gridOptionsService.get('treeData');\n\n        groupDisplayCols.forEach(col => {\n            if (rowNode.groupData == null) {\n                rowNode.groupData = {};\n            }\n            if (usingTreeData) {\n                rowNode.groupData[col.getColId()] = rowNode.key;\n            } else if (col.isRowGroupDisplayed(rowNode.rowGroupColumn!.getId())) {\n                const groupValue = this.valueService.getValue(rowNode.rowGroupColumn!, rowNode);\n                rowNode.groupData[col.getColId()] = groupValue;\n            }\n        });\n    }\n\n    public clearDisplayIndex(rowNode: RowNode): void {\n        rowNode.clearRowTopAndRowIndex();\n\n        const hasChildStore = rowNode.hasChildren() && _.exists(rowNode.childStore);\n        if (hasChildStore) {\n            const childStore = rowNode.childStore;\n            childStore!.clearDisplayIndexes();\n        }\n\n        const hasDetailNode = rowNode.master && rowNode.detailNode;\n        if (hasDetailNode) {\n            rowNode.detailNode.clearRowTopAndRowIndex();\n        }\n    }\n\n    public setDisplayIndex(rowNode: RowNode, displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void {\n        // set this row\n        rowNode.setRowIndex(displayIndexSeq.next());\n        rowNode.setRowTop(nextRowTop.value);\n        nextRowTop.value += rowNode.rowHeight!;\n\n        if (rowNode.footer) {\n            return;\n        }\n\n        // set child for master / detail\n        const hasDetailRow = rowNode.master;\n        if (hasDetailRow) {\n            if (rowNode.expanded && rowNode.detailNode) {\n                rowNode.detailNode.setRowIndex(displayIndexSeq.next());\n                rowNode.detailNode.setRowTop(nextRowTop.value);\n                nextRowTop.value += rowNode.detailNode.rowHeight!;\n            } else if (rowNode.detailNode) {\n                rowNode.detailNode.clearRowTopAndRowIndex();\n            }\n        }\n\n        // set children for SSRM child rows\n        const hasChildStore = rowNode.hasChildren() && _.exists(rowNode.childStore);\n        if (hasChildStore) {\n            const childStore = rowNode.childStore;\n            if (rowNode.expanded) {\n                childStore!.setDisplayIndexes(displayIndexSeq, nextRowTop);\n            } else {\n                // we need to clear the row tops, as the row renderer depends on\n                // this to know if the row should be faded out\n                childStore!.clearDisplayIndexes();\n            }\n        }\n    }\n\n    public binarySearchForDisplayIndex(displayRowIndex: number, rowNodes: RowNode[]): IRowNode | undefined {\n\n        let bottomPointer = 0;\n        let topPointer = rowNodes.length - 1;\n\n        if (_.missing(topPointer) || _.missing(bottomPointer)) {\n            console.warn(`AG Grid: error: topPointer = ${topPointer}, bottomPointer = ${bottomPointer}`);\n            return undefined;\n        }\n\n        while (true) {\n            const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            const currentRowNode = rowNodes[midPointer];\n\n            // first check current row for index\n            if (currentRowNode.rowIndex === displayRowIndex) {\n                return currentRowNode;\n            }\n\n            // then check if current row contains a detail row with the index\n            const expandedMasterRow = currentRowNode.master && currentRowNode.expanded;\n            const detailNode = currentRowNode.detailNode;\n\n            if (expandedMasterRow && detailNode && detailNode.rowIndex === displayRowIndex) {\n                return currentRowNode.detailNode;\n            }\n\n            // then check if child cache contains index\n            const childStore = currentRowNode.childStore;\n            if (currentRowNode.expanded && childStore && childStore.isDisplayIndexInStore(displayRowIndex)) {\n                return childStore.getRowUsingDisplayIndex(displayRowIndex);\n            }\n\n            // otherwise adjust pointers to continue searching for index\n            if (currentRowNode.rowIndex! < displayRowIndex) {\n                bottomPointer = midPointer + 1;\n            } else if (currentRowNode.rowIndex! > displayRowIndex) {\n                topPointer = midPointer - 1;\n            } else {\n                console.warn(`AG Grid: error: unable to locate rowIndex = ${displayRowIndex} in cache`);\n                return undefined;\n            }\n        }\n    }\n\n    public extractRowBounds(rowNode: RowNode, index: number): RowBounds | undefined {\n        const extractRowBounds = (currentRowNode: RowNode): RowBounds => ({\n            rowHeight: currentRowNode.rowHeight!,\n            rowTop: currentRowNode.rowTop!\n        });\n\n        if (rowNode.rowIndex === index) {\n            return extractRowBounds(rowNode);\n        }\n\n        if (rowNode.hasChildren() && rowNode.expanded && _.exists(rowNode.childStore)) {\n            const childStore = rowNode.childStore;\n            if (childStore.isDisplayIndexInStore(index)) {\n                return childStore.getRowBounds(index)!;\n            }\n        } else if (rowNode.master && rowNode.expanded && _.exists(rowNode.detailNode)) {\n            if (rowNode.detailNode.rowIndex === index) {\n                return extractRowBounds(rowNode.detailNode);\n            }\n        }\n    }\n\n    public getIndexAtPixel(rowNode: RowNode, pixel: number): number | null {\n        // first check if pixel is in range of current row\n        if (rowNode.isPixelInRange(pixel)) {\n            return rowNode.rowIndex;\n        }\n\n        // then check if current row contains a detail row with pixel in range\n        const expandedMasterRow = rowNode.master && rowNode.expanded;\n        const detailNode = rowNode.detailNode;\n\n        if (expandedMasterRow && detailNode && detailNode.isPixelInRange(pixel)) {\n            return rowNode.detailNode.rowIndex;\n        }\n\n        // then check if it's a group row with a child cache with pixel in range\n        if (rowNode.hasChildren() && rowNode.expanded && _.exists(rowNode.childStore)) {\n            const childStore = rowNode.childStore;\n            if (childStore.isPixelInRange(pixel)) {\n                return childStore.getRowIndexAtPixel(pixel);\n            }\n        }\n\n        return null;\n        // pixel is not within this row node or it's children / detail, so return undefined\n    }\n\n    public createNodeIdPrefix(parentRowNode: RowNode): string | undefined {\n        const parts: string[] = [];\n        let rowNode: RowNode | null = parentRowNode;\n        // pull keys from all parent nodes, but do not include the root node\n        while (rowNode && rowNode.level >= 0) {\n            if (rowNode.key === '') {\n                parts.push(GROUP_MISSING_KEY_ID);\n            } else {\n                parts.push(rowNode.key!);\n            }\n            rowNode = rowNode.parent;\n        }\n\n        if (parts.length > 0) {\n            return parts.reverse().join('-');\n        }\n        // no prefix, so node id's are left as they are\n        return undefined;\n    }\n\n    public checkOpenByDefault(rowNode: RowNode): void {\n        return this.expansionService.checkOpenByDefault(rowNode);\n    }\n}", "import { Bean, RowNode, PreDestroy } from \"@ag-grid-community/core\";\n\n@Bean('ssrmNodeManager')\nexport class NodeManager {\n\n    private rowNodes: {[id: string]: RowNode | undefined } = {};\n\n    public addRowNode(rowNode: RowNode): void {\n        const id = rowNode.id!;\n        if (this.rowNodes[id]) {\n            console.warn(`AG Grid: Duplicate node id ${rowNode.id}. Row ID's are provided via the getRowId() callback. Please modify the getRowId() callback code to provide unique row id values.`);\n            console.warn('first instance', this.rowNodes[id]!.data);\n            console.warn('second instance', rowNode.data);\n        }\n\n        this.rowNodes[id] = rowNode;\n    }\n\n    public removeNode(rowNode: RowNode): void {\n        const id = rowNode.id!;\n        if (this.rowNodes[id]) {\n            this.rowNodes[id] = undefined;\n        }\n    }\n\n    @PreDestroy\n    public clear(): void {\n        this.rowNodes = {};\n    }\n\n}", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    Events,\n    IServerSideTransactionManager,\n    PostConstruct,\n    RowNodeBlockLoader,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    ServerSideTransactionResultStatus,\n    ValueCache,\n    AsyncTransactionsFlushed,\n    RowRenderer,\n    WithoutGridCommon,\n    RowNode\n} from \"@ag-grid-community/core\";\nimport { ServerSideRowModel } from \"./serverSideRowModel\";\nimport { ServerSideSelectionService } from \"./services/serverSideSelectionService\";\n\ninterface AsyncTransactionWrapper {\n    transaction: ServerSideTransaction;\n    callback?: (result: ServerSideTransactionResult) => void;\n}\n\n@Bean('ssrmTransactionManager')\nexport class TransactionManager extends BeanStub implements IServerSideTransactionManager {\n\n    @Autowired('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n    @Autowired('valueCache') private valueCache: ValueCache;\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('selectionService') private selectionService: ServerSideSelectionService;\n\n    private asyncTransactionsTimeout: number | undefined;\n    private asyncTransactions: AsyncTransactionWrapper[] = [];\n\n    @PostConstruct\n    private postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) { return; }\n    }\n\n    public applyTransactionAsync(transaction: ServerSideTransaction, callback?: (res: ServerSideTransactionResult) => void): void {\n        if (this.asyncTransactionsTimeout == null) {\n            this.scheduleExecuteAsync();\n        }\n        this.asyncTransactions.push({ transaction: transaction, callback: callback });\n    }\n\n    private scheduleExecuteAsync(): void {\n        const waitMillis = this.gridOptionsService.getAsyncTransactionWaitMillis();\n        this.asyncTransactionsTimeout = window.setTimeout(() => {\n            this.executeAsyncTransactions();\n        }, waitMillis);\n    }\n\n    private executeAsyncTransactions(): void {\n        if (!this.asyncTransactions) { return; }\n\n        const resultFuncs: (() => void)[] = [];\n        const resultsForEvent: ServerSideTransactionResult[] = [];\n\n        const transactionsToRetry: AsyncTransactionWrapper[] = [];\n        let atLeastOneTransactionApplied = false;\n\n        this.asyncTransactions.forEach(txWrapper => {\n            let result: ServerSideTransactionResult | undefined;\n            const hasStarted = this.serverSideRowModel.executeOnStore(txWrapper.transaction.route!, cache => {\n                result = cache.applyTransaction(txWrapper.transaction);\n            });\n\n            if (!hasStarted) {\n                result = {status: ServerSideTransactionResultStatus.StoreNotStarted};\n            } else if (result == undefined) {\n                result = {status: ServerSideTransactionResultStatus.StoreNotFound};\n            }\n\n            resultsForEvent.push(result);\n\n            const retryTransaction = result.status == ServerSideTransactionResultStatus.StoreLoading;\n\n            if (retryTransaction) {\n                transactionsToRetry.push(txWrapper);\n                return;\n            }\n\n            if (txWrapper.callback) {\n                resultFuncs.push(() => txWrapper.callback!(result!));\n            }\n            if (result.status === ServerSideTransactionResultStatus.Applied) {\n                atLeastOneTransactionApplied = true;\n            }\n        });\n\n        // do callbacks in next VM turn so it's async\n        if (resultFuncs.length > 0) {\n            window.setTimeout(() => {\n                resultFuncs.forEach(func => func());\n            }, 0);\n        }\n\n        this.asyncTransactionsTimeout = undefined;\n\n        // this will be empty list if nothing to retry\n        this.asyncTransactions = transactionsToRetry;\n\n        if (atLeastOneTransactionApplied) {\n            this.valueCache.onDataChanged();\n            this.eventService.dispatchEvent({type: Events.EVENT_STORE_UPDATED});\n        }\n\n        if (resultsForEvent.length > 0) {\n            const event: WithoutGridCommon<AsyncTransactionsFlushed> = {                \n                type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n                results: resultsForEvent\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public flushAsyncTransactions(): void {\n        // the timeout could be missing, if we are flushing due to row data loaded\n        if (this.asyncTransactionsTimeout != null) {\n            clearTimeout(this.asyncTransactionsTimeout);\n        }\n        this.executeAsyncTransactions();\n    }\n\n    public applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult | undefined {\n        let res: ServerSideTransactionResult | undefined;\n\n        const hasStarted = this.serverSideRowModel.executeOnStore(transaction.route!, store => {\n            res = store.applyTransaction(transaction);\n        });\n\n        if (!hasStarted) {\n            return { status: ServerSideTransactionResultStatus.StoreNotStarted };\n        } else if (res) {\n            this.valueCache.onDataChanged();\n            if (res.remove) {\n                const removedRowIds = res.remove.map(row => row.id!);\n                this.selectionService.deleteSelectionStateFromParent(transaction.route || [], removedRowIds);\n            }\n\n            this.eventService.dispatchEvent({type: Events.EVENT_STORE_UPDATED});\n            return res;\n        } else {\n            return { status: ServerSideTransactionResultStatus.StoreNotFound };\n        }\n    }\n}", "import {\n    _,\n    Autowired,\n    BeanStub,\n    StoreUpdatedEvent,\n    Events,\n    PostConstruct,\n    RowGroupOpenedEvent,\n    RowNode,\n    Bean,\n    Beans,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { ServerSideRowModel } from \"../serverSideRowModel\";\nimport { StoreFactory } from \"../stores/storeFactory\";\n\n@Bean('ssrmExpandListener')\nexport class ExpandListener extends BeanStub {\n\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('ssrmStoreFactory') private storeFactory: StoreFactory;\n    @Autowired('beans') private beans: Beans;\n\n    @PostConstruct\n    private postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) { return; }\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n    }\n\n    private onRowGroupOpened(event: RowGroupOpenedEvent): void {\n        const rowNode = event.node as RowNode;\n\n        if (rowNode.expanded) {\n            if (rowNode.master) {\n                this.createDetailNode(rowNode);\n            } else if (_.missing(rowNode.childStore)) {\n                const storeParams = this.serverSideRowModel.getParams();\n                rowNode.childStore = this.createBean(this.storeFactory.createStore(storeParams, rowNode));\n            }\n        } else if (this.gridOptionsService.get('purgeClosedRowNodes') && _.exists(rowNode.childStore)) {\n            rowNode.childStore = this.destroyBean(rowNode.childStore)!;\n        }\n\n        const storeUpdatedEvent: WithoutGridCommon<StoreUpdatedEvent> = { type: Events.EVENT_STORE_UPDATED };\n        this.eventService.dispatchEvent(storeUpdatedEvent);\n    }\n\n    private createDetailNode(masterNode: RowNode): RowNode {\n        if (_.exists(masterNode.detailNode)) { return masterNode.detailNode; }\n\n        const detailNode = new RowNode(this.beans);\n\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n\n        if (_.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n\n        const defaultDetailRowHeight = 200;\n        const rowHeight = this.gridOptionsService.getRowHeightForNode(detailNode).height;\n\n        detailNode.rowHeight = rowHeight ? rowHeight : defaultDetailRowHeight;\n        masterNode.detailNode = detailNode;\n\n        return detailNode;\n    }\n\n}", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    ColumnModel,\n    GROUP_AUTO_COLUMN_ID,\n    Events,\n    PostConstruct,\n    SortController,\n    Column,\n    SortModelItem,\n    StoreRefreshAfterParams\n} from \"@ag-grid-community/core\";\nimport { ServerSideRowModel } from \"../serverSideRowModel\";\nimport { ListenerUtils } from \"./listenerUtils\";\n\n@Bean('ssrmSortService')\nexport class SortListener extends BeanStub {\n\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('ssrmListenerUtils') private listenerUtils: ListenerUtils;\n\n    @PostConstruct\n    private postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) { return; }\n\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    }\n\n    private onSortChanged(): void {\n        const storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) { return; } // params is undefined if no datasource set\n\n        const newSortModel = this.sortController.getSortModel();\n        const oldSortModel = storeParams.sortModel;\n\n        const changedColumns = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n        const valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        const secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n\n        const params: StoreRefreshAfterParams = {\n            valueColChanged,\n            secondaryColChanged,\n            changedColumns\n        };\n\n        this.serverSideRowModel.refreshAfterSort(newSortModel, params);\n    }\n\n    // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n    // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n    // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n    // was previously sorted by A and then the A sort now needs to be cleared.\n    private findChangedColumnsInSort(\n        newSortModel: SortModelItem[],\n        oldSortModel: SortModelItem[]): string[] {\n\n        let allColsInBothSorts: string[] = [];\n\n        [newSortModel, oldSortModel].forEach(sortModel => {\n            if (sortModel) {\n                const ids = sortModel.map(sm => sm.colId);\n                allColsInBothSorts = allColsInBothSorts.concat(ids);\n            }\n        });\n\n        const differentSorts = (oldSortItem: SortModelItem | undefined, newSortItem: SortModelItem | undefined) => {\n            const oldSort = oldSortItem ? oldSortItem.sort : null;\n            const newSort = newSortItem ? newSortItem.sort : null;\n            return oldSort !== newSort;\n        };\n\n        const differentIndexes = (oldSortItem: SortModelItem | undefined, newSortItem: SortModelItem | undefined) => {\n            const oldIndex = oldSortItem ? oldSortModel.indexOf(oldSortItem) : -1;\n            const newIndex = newSortItem ? newSortModel.indexOf(newSortItem) : -1;\n            return oldIndex !== newIndex;\n        };\n\n        return allColsInBothSorts.filter(colId => {\n            const oldSortItem = oldSortModel.find(sm => sm.colId === colId);\n            const newSortItem = newSortModel.find(sm => sm.colId === colId);\n            return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n        });\n    }\n\n}", "import {\n    AdvancedFilterModel,\n    Autowired,\n    Bean,\n    BeanStub,\n    Events,\n    FilterManager,\n    FilterModel,\n    PostConstruct,\n    StoreRefreshAfterParams\n} from \"@ag-grid-community/core\";\nimport { ServerSideRowModel } from \"../serverSideRowModel\";\nimport { ListenerUtils } from \"./listenerUtils\";\n\n@Bean('ssrmFilterListener')\nexport class FilterListener extends BeanStub {\n\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('ssrmListenerUtils') private listenerUtils: ListenerUtils;\n\n    @PostConstruct\n    private postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsService.isRowModelType('serverSide')) { return; }\n\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, () => this.onFilterChanged(true));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, () => this.onFilterChanged());\n    }\n\n    private onFilterChanged(advancedFilterEnabledChanged?: boolean): void {\n        const storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) { return; } // params is undefined if no datasource set\n\n        const oldModel = storeParams.filterModel;\n        let newModel: FilterModel | AdvancedFilterModel | null;\n        let changedColumns: string[];\n\n        if (this.filterManager.isAdvancedFilterEnabled()) {\n            newModel = this.filterManager.getAdvancedFilterModel();\n            // if advancedFilterEnabledChanged, old model is of type `FilterModel`\n            const oldColumns = advancedFilterEnabledChanged ? Object.keys(oldModel ?? {}) : this.getAdvancedFilterColumns(oldModel as AdvancedFilterModel | null);\n            const newColumns = this.getAdvancedFilterColumns(newModel as AdvancedFilterModel | null);\n            oldColumns.forEach(column => newColumns.add(column));\n            changedColumns = Array.from(newColumns);\n        } else {\n            newModel = this.filterManager.getFilterModel();\n            if (advancedFilterEnabledChanged) {\n                // old model is of type `AdvancedFilterModel | null`\n                const oldColumns = this.getAdvancedFilterColumns(oldModel as AdvancedFilterModel | null);\n                Object.keys(newModel).forEach(column => oldColumns.add(column));\n                changedColumns = Array.from(oldColumns);\n            } else {\n                changedColumns = this.findChangedColumns(oldModel as FilterModel, newModel as FilterModel);\n            }\n        }\n\n        const valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        const secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n\n        const params: StoreRefreshAfterParams = {\n            valueColChanged,\n            secondaryColChanged,\n            changedColumns\n        };\n\n        this.serverSideRowModel.refreshAfterFilter(newModel, params);\n    }\n\n    private findChangedColumns(oldModel: FilterModel, newModel: FilterModel): string[] {\n\n        const allColKeysMap: {[key: string]: boolean} = {};\n\n        Object.keys(oldModel).forEach(key => allColKeysMap[key] = true);\n        Object.keys(newModel).forEach(key => allColKeysMap[key] = true);\n\n        const res: string[] = [];\n\n        Object.keys(allColKeysMap).forEach(key => {\n            const oldJson = JSON.stringify(oldModel[key]);\n            const newJson = JSON.stringify(newModel[key]);\n            const filterChanged = oldJson != newJson;\n            if (filterChanged) {\n                res.push(key);\n            }\n        });\n\n        return res;\n    }\n\n    private getAdvancedFilterColumns(model: AdvancedFilterModel | null): Set<string> {\n        const columns = new Set<string>();\n        if (!model) { return columns; }\n\n        const processAdvancedFilterModel = (filterModel: AdvancedFilterModel) => {\n            if (filterModel.filterType === 'join') {\n                filterModel.conditions.forEach(condition => processAdvancedFilterModel(condition));\n            } else {\n                columns.add(filterModel.colId);\n            }\n        };\n\n        processAdvancedFilterModel(model);\n\n        return columns;\n    }\n}", "import {\n    _,\n    Autowired,\n    Bean,\n    IServerSideStore,\n    RowNode,\n    ServerSideGroupLevelParams,\n    GetServerSideGroupLevelParamsParams,\n    ColumnModel,\n    WithoutGridCommon,\n    GridOptionsService\n} from \"@ag-grid-community/core\";\nimport { SSRMParams } from \"../serverSideRowModel\";\nimport { FullStore } from \"./fullStore\";\nimport { LazyStore } from \"./lazy/lazyStore\";\n\n@Bean('ssrmStoreFactory')\nexport class StoreFactory {\n\n    @Autowired('gridOptionsService') private gridOptionsService: GridOptionsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public createStore(ssrmParams: SSRMParams, parentNode: RowNode): IServerSideStore {\n        const storeParams = this.getStoreParams(ssrmParams, parentNode);\n\n        const CacheClass = storeParams.suppressInfiniteScroll ? FullStore : LazyStore;\n\n        return new CacheClass(ssrmParams, storeParams, parentNode);\n    }\n\n    private getStoreParams(ssrmParams: SSRMParams, parentNode: RowNode): ServerSideGroupLevelParams {\n\n        const userStoreParams = this.getLevelSpecificParams(parentNode);\n\n        // if user provided overrideParams, we take infiniteScroll from there if it exists\n        const infiniteScroll = this.isInfiniteScroll(userStoreParams);\n        const cacheBlockSize = this.getBlockSize(infiniteScroll, userStoreParams);\n        const maxBlocksInCache = this.getMaxBlocksInCache(infiniteScroll, ssrmParams, userStoreParams);\n\n        const storeParams: ServerSideGroupLevelParams = {\n            suppressInfiniteScroll: !infiniteScroll,\n            cacheBlockSize,\n            maxBlocksInCache\n        };\n\n        return storeParams;\n    }\n\n    private getMaxBlocksInCache(infiniteScroll: boolean, ssrmParams: SSRMParams, userStoreParams?: ServerSideGroupLevelParams)\n        : number | undefined {\n\n        if (!infiniteScroll) { return undefined; }\n\n        const maxBlocksInCache = (userStoreParams && userStoreParams.maxBlocksInCache != null)\n            ? userStoreParams.maxBlocksInCache\n            : this.gridOptionsService.get('maxBlocksInCache');\n\n        const maxBlocksActive = maxBlocksInCache != null && maxBlocksInCache >= 0;\n\n        if (!maxBlocksActive) {\n            return undefined;\n        }\n\n        if (ssrmParams.dynamicRowHeight) {\n            const message = 'Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' +\n                'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.';\n            _.warnOnce(message);\n            return undefined;\n        }\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            const message = 'Server Side Row Model does not support Auto Row Height and Cache Purging. ' +\n                'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.';\n            _.warnOnce(message);\n            return undefined;\n        }\n\n        return maxBlocksInCache;\n    }\n\n    private getBlockSize(infiniteScroll: boolean, userStoreParams?: ServerSideGroupLevelParams): number | undefined {\n        if (!infiniteScroll) { return undefined; }\n\n        const blockSize = (userStoreParams && userStoreParams.cacheBlockSize != null)\n            ? userStoreParams.cacheBlockSize\n            : this.gridOptionsService.get('cacheBlockSize');\n\n        if (blockSize != null && blockSize > 0) {\n            return blockSize;\n        } else {\n            return 100;\n        }\n    }\n\n    private getLevelSpecificParams(parentNode: RowNode): ServerSideGroupLevelParams | undefined {\n\n        const callback = this.gridOptionsService.getCallback('getServerSideGroupLevelParams');\n        if (!callback) { return undefined; }\n\n        const params: WithoutGridCommon<GetServerSideGroupLevelParamsParams> = {\n            level: parentNode.level + 1,\n            parentRowNode: parentNode.level >= 0 ? parentNode : undefined,\n            rowGroupColumns: this.columnModel.getRowGroupColumns(),\n            pivotColumns: this.columnModel.getPivotColumns(),\n            pivotMode: this.columnModel.isPivotMode()\n        };\n\n        const res = callback(params);\n        \n        return res;\n    }\n\n    private isInfiniteScroll(storeParams?: ServerSideGroupLevelParams): boolean {\n        const res = (storeParams && storeParams.suppressInfiniteScroll != null)\n            ? storeParams.suppressInfiniteScroll\n            : this.isSuppressServerSideInfiniteScroll();\n        return !res;\n    }\n\n    private isSuppressServerSideInfiniteScroll(): boolean {\n        return this.gridOptionsService.get('suppressServerSideInfiniteScroll');\n    }\n}", "import { Autowired, Bean, ColumnModel } from \"@ag-grid-community/core\";\n\n@Bean('ssrmListenerUtils')\nexport class ListenerUtils {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public isSortingWithValueColumn(changedColumnsInSort: string[]): boolean {\n        const valueColIds = this.columnModel.getValueColumns().map(col => col.getColId());\n\n        for (let i = 0; i < changedColumnsInSort.length; i++) {\n            if (valueColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public isSortingWithSecondaryColumn(changedColumnsInSort: string[]): boolean {\n        if (!this.columnModel.getSecondaryColumns()) {\n            return false;\n        }\n\n        const secondaryColIds = this.columnModel.getSecondaryColumns()!.map(col => col.getColId());\n\n        for (let i = 0; i < changedColumnsInSort.length; i++) {\n            if (secondaryColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    ChangedPath,\n    Events,\n    IRowModel,\n    ISelectionService,\n    PostConstruct,\n    RowNode,\n    SelectionChangedEvent,\n    SelectionEventSourceType,\n    WithoutGridCommon,\n    ISetNodesSelectedParams,\n    ServerSideRowSelectionState,\n    ServerSideRowGroupSelectionState\n} from \"@ag-grid-community/core\";\nimport { DefaultStrategy } from \"./selection/strategies/defaultStrategy\";\nimport { GroupSelectsChildrenStrategy } from \"./selection/strategies/groupSelectsChildrenStrategy\";\nimport { ISelectionStrategy } from \"./selection/strategies/iSelectionStrategy\";\n\n@Bean('selectionService')\nexport class ServerSideSelectionService extends BeanStub implements ISelectionService {\n    @Autowired('rowModel') private rowModel: IRowModel;\n    private selectionStrategy: ISelectionStrategy;\n\n    @PostConstruct\n    private init(): void {\n        const groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n        this.addManagedPropertyListener('groupSelectsChildren', (propChange) => {\n            this.destroyBean(this.selectionStrategy);\n\n            const StrategyClazz = !propChange.currentValue ? DefaultStrategy : GroupSelectsChildrenStrategy;\n            this.selectionStrategy = this.createManagedBean(new StrategyClazz());\n\n            this.shotgunResetNodeSelectionState();\n            const event: WithoutGridCommon<SelectionChangedEvent> = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                source: 'api',\n            };\n            this.eventService.dispatchEvent(event);\n        });\n\n        this.addManagedPropertyListener('rowSelection', () => this.deselectAllRowNodes({ source: 'api' }));\n\n        const StrategyClazz = !groupSelectsChildren ? DefaultStrategy : GroupSelectsChildrenStrategy;\n        this.selectionStrategy = this.createManagedBean(new StrategyClazz());\n    }\n \n    public getSelectionState(): string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState | null {\n        return this.selectionStrategy.getSelectedState();\n    }\n\n    public setSelectionState(state: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState, source: SelectionEventSourceType): void {\n        if (Array.isArray(state)) { return; }\n        this.selectionStrategy.setSelectedState(state);\n        this.shotgunResetNodeSelectionState();\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        const {nodes, ...otherParams} = params;\n\n        const rowSelection = this.gridOptionsService.get('rowSelection');\n        if (nodes.length > 1 && rowSelection !== 'multiple') {\n            console.warn(`AG Grid: cannot multi select while rowSelection='single'`);\n            return 0;\n        }\n\n        if (nodes.length > 1 && params.rangeSelect) {\n            console.warn(`AG Grid: cannot use range selection when multi selecting rows`);\n            return 0;\n        }\n\n        const adjustedParams = {\n            nodes: nodes.filter(node => node.selectable),\n            ...otherParams,\n        };\n\n        // if no selectable nodes, then return 0\n        if (!adjustedParams.nodes.length) {\n            return 0;\n        }\n \n        const changedNodes = this.selectionStrategy.setNodesSelected(adjustedParams);\n        this.shotgunResetNodeSelectionState(adjustedParams.source);\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source: adjustedParams.source,\n        };\n        this.eventService.dispatchEvent(event);\n        return changedNodes;\n    }\n\n    /**\n     * Deletes the selection state for a set of nodes, for use after deleting nodes via\n     * transaction. As this is designed for transactions, all nodes should belong to the same group.\n     */\n    public deleteSelectionStateFromParent(storeRoute: string[], removedNodeIds: string[]) {\n        const stateChanged = this.selectionStrategy.deleteSelectionStateFromParent(storeRoute, removedNodeIds);\n        if (!stateChanged) {\n            return;\n        }\n\n        this.shotgunResetNodeSelectionState();\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source: 'api',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private shotgunResetNodeSelectionState(source?: SelectionEventSourceType) {\n        this.rowModel.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n\n            const isNodeSelected = this.selectionStrategy.isNodeSelected(node);\n            if (isNodeSelected !== node.isSelected()) {\n                node.selectThisNode(isNodeSelected, undefined, source);\n            }\n        });\n    }\n\n    public getSelectedNodes(): RowNode<any>[] {\n        return this.selectionStrategy.getSelectedNodes();\n    }\n\n    public getSelectedRows(): any[] {\n        return this.selectionStrategy.getSelectedRows();\n    }\n\n    public getSelectionCount(): number {\n        return this.selectionStrategy.getSelectionCount();\n    }\n\n    public syncInRowNode(rowNode: RowNode<any>, oldNode: RowNode<any> | null): void {\n        // update any refs being held in the strategies\n        this.selectionStrategy.processNewRow(rowNode);\n\n        const isNodeSelected = this.selectionStrategy.isNodeSelected(rowNode);\n\n        // if the node was selected but node is not selectable, we deselect the node.\n        // (could be due to user applying selected state directly, or a change in selectable)\n        if (isNodeSelected != false && !rowNode.selectable) {\n            this.selectionStrategy.setNodesSelected({\n                nodes: [rowNode],\n                newValue: false,\n                source: 'api',\n            });\n\n            // we need to shotgun reset here as if this was hierarchical, some group nodes\n            // may be changing from indeterminate to unchecked.\n            this.shotgunResetNodeSelectionState();\n            const event: WithoutGridCommon<SelectionChangedEvent> = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                source: 'api',\n            };\n            this.eventService.dispatchEvent(event);\n            return;\n        }\n        rowNode.setSelectedInitialValue(isNodeSelected);\n    }\n\n    public reset(): void {\n        this.selectionStrategy.deselectAllRowNodes({ source: 'api' });\n    }\n\n    public isEmpty(): boolean {\n        return this.selectionStrategy.isEmpty();\n    }\n\n    public hasNodesToSelect(justFiltered = false, justCurrentPage = false) {\n        return true;\n    }\n\n    public selectAllRowNodes(params: { source: SelectionEventSourceType; justFiltered?: boolean | undefined; justCurrentPage?: boolean | undefined; }): void {\n        if (params.justCurrentPage || params.justFiltered) {\n            console.warn(\"AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n        }\n\n        this.selectionStrategy.selectAllRowNodes(params);\n\n        this.rowModel.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n\n            node.selectThisNode(true, undefined, params.source);\n        });\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source: params.source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    \n    public deselectAllRowNodes(params: { source: SelectionEventSourceType; justFiltered?: boolean | undefined; justCurrentPage?: boolean | undefined; }): void {\n        if (params.justCurrentPage || params.justFiltered) {\n            console.warn(\"AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n        }\n\n        this.selectionStrategy.deselectAllRowNodes(params);\n\n        this.rowModel.forEachNode(node => {\n            if (node.stub) {\n                return;\n            }\n\n            node.selectThisNode(false, undefined, params.source);\n        });\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source: params.source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getSelectAllState(justFiltered?: boolean, justCurrentPage?: boolean): boolean | null {\n        return this.selectionStrategy.getSelectAllState(justFiltered, justCurrentPage);\n    }\n\n    // used by CSRM\n    public updateGroupsFromChildrenSelections(source: SelectionEventSourceType, changedPath?: ChangedPath | undefined): boolean {\n        return false;\n    }\n\n    // used by CSRM\n    public getBestCostNodeSelection(): RowNode<any>[] | undefined {\n        console.warn('AG Grid: calling gridApi.getBestCostNodeSelection() is only possible when using rowModelType=`clientSide`.');\n        return undefined;\n    }\n\n    // used by CSRM\n    public filterFromSelection(): void {\n        return;\n    }\n}", "import { Autowired, BeanStub, Events, IRowModel, PostConstruct, RowNode, SelectionChangedEvent, SelectionEventSourceType, WithoutGridCommon, ISetNodesSelectedParams, IServerSideSelectionState } from \"@ag-grid-community/core\";\nimport { ISelectionStrategy } from \"./iSelectionStrategy\";\n\ninterface SelectedState {\n    selectAll: boolean;\n    toggledNodes: Set<string>;\n}\n\nexport class DefaultStrategy extends BeanStub implements ISelectionStrategy {\n    @Autowired('rowModel') private rowModel: IRowModel;\n\n    private selectedState: SelectedState = { selectAll: false, toggledNodes: new Set() };\n    private lastSelected: string | null = null;\n\n    private selectAllUsed: boolean = false;\n    // this is to prevent regressions, default selectionService retains reference of clicked nodes.\n    private selectedNodes: { [key: string]: RowNode } = {};\n\n    private rowSelection?: 'single' | 'multiple';\n\n    @PostConstruct\n    private init(): void {\n        this.rowSelection = this.gridOptionsService.get('rowSelection');\n        this.addManagedPropertyListener('rowSelection', (propChange) => {\n            this.rowSelection = propChange.currentValue;\n        });\n\n    }\n\n    public getSelectedState(): IServerSideSelectionState {\n        return {\n            selectAll: this.selectedState.selectAll,\n            toggledNodes: [...this.selectedState.toggledNodes],\n        };\n    }\n\n    public setSelectedState(state: any) {\n        // fire selection changed event\n        const newState: SelectedState = {\n            selectAll: false,\n            toggledNodes: new Set(),\n        };\n\n        if (typeof state !== 'object') {\n            console.error('AG Grid: The provided selection state should be an object.');\n            return;\n        }\n\n        if ('selectAll' in state && typeof state.selectAll === 'boolean') {\n            newState.selectAll = state.selectAll;\n        }  else {\n            console.error('AG Grid: Select all status should be of boolean type.');\n            return;\n        }\n\n        if ('toggledNodes' in state && Array.isArray(state.toggledNodes)) {\n            state.toggledNodes.forEach((key: any) => {\n                if (typeof key === 'string') {\n                    newState.toggledNodes.add(key);\n                } else {\n                    console.warn(`AG Grid: Provided ids must be of string type. Invalid id provided: ${key}`);\n                }\n            });\n        } else {\n            console.error('AG Grid: `toggledNodes` must be an array of string ids.');\n            return;\n        }\n\n        this.selectedState = newState;\n    }\n\n    public deleteSelectionStateFromParent(parentPath: string[], removedNodeIds: string[]): boolean {\n        if (this.selectedState.toggledNodes.size === 0) {\n            return false;\n        }\n\n        let anyNodesToggled = false;\n\n        removedNodeIds.forEach(id => {\n            if (this.selectedState.toggledNodes.delete(id)) {\n                anyNodesToggled = true;\n            }\n        });\n\n        return anyNodesToggled;\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        if (params.nodes.length === 0) return 0;\n\n        const onlyThisNode = params.clearSelection && params.newValue && !params.rangeSelect;\n        if (this.rowSelection !== 'multiple' || onlyThisNode) {\n            if (params.nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when rowSelection is set to \\'single\\'');\n            }\n            const node = params.nodes[0];\n            if (params.newValue) {\n                this.selectedNodes = { [node.id!]: node };\n                this.selectedState = {\n                    selectAll: false,\n                    toggledNodes: new Set([node.id!]),\n                };\n            } else {\n                this.selectedNodes = {};\n                this.selectedState = {\n                    selectAll: false,\n                    toggledNodes: new Set(),\n                }\n            }\n            this.lastSelected = node.id!;\n            return 1;\n        }\n\n        const updateNodeState = (node: RowNode) => {\n            if (params.newValue) {\n                this.selectedNodes[node.id!] = node;\n            } else {\n                delete this.selectedNodes[node.id!];\n            }\n\n            const isNodeSelectable = node.selectable;\n            const doesNodeConform = params.newValue === this.selectedState.selectAll;\n            if (doesNodeConform || !isNodeSelectable) {\n                this.selectedState.toggledNodes.delete(node.id!);\n                return;\n            }\n            this.selectedState.toggledNodes.add(node.id!);\n        }\n\n        if (params.rangeSelect && this.lastSelected) {\n            if (params.nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when using rangeSelect');\n            }\n            const node = params.nodes[0];\n            const lastSelectedNode = this.rowModel.getRowNode(this.lastSelected);\n            this.rowModel.getNodesInRangeForSelection(node, lastSelectedNode ?? null).forEach(updateNodeState);\n            this.lastSelected = node.id!;\n            return 1;\n        }\n\n        params.nodes.forEach(updateNodeState);\n        this.lastSelected = params.nodes[params.nodes.length - 1].id!;\n        return 1;\n    }\n\n    public processNewRow(node: RowNode<any>): void {\n        if (this.selectedNodes[node.id!]) {\n            this.selectedNodes[node.id!] = node;\n        }\n    }\n\n    public isNodeSelected(node: RowNode): boolean | undefined {\n        const isToggled = this.selectedState.toggledNodes.has(node.id!);\n        return this.selectedState.selectAll ? !isToggled : isToggled;\n    }\n\n    public getSelectedNodes(): RowNode<any>[] {\n        if (this.selectAllUsed) {\n            console.warn(\n                `AG Grid: getSelectedNodes and getSelectedRows functions cannot be used with select all functionality with the server-side row model.\n                Use \\`api.getServerSideSelectionState()\\` instead.`\n            );\n        }\n        return Object.values(this.selectedNodes);\n    }\n\n    public getSelectedRows(): any[] {\n        return this.getSelectedNodes().map(node => node.data);\n    }\n\n    public getSelectionCount(): number {\n        if (this.selectedState.selectAll) {\n            return -1;\n        }\n        return this.selectedState.toggledNodes.size;\n    }\n\n    public clearOtherNodes(rowNodeToKeepSelected: RowNode<any>, source: SelectionEventSourceType): number {\n        const clearedRows = this.selectedState.selectAll ? 1 : this.selectedState.toggledNodes.size - 1;\n        this.selectedState = {\n            selectAll: false,\n            toggledNodes: new Set([rowNodeToKeepSelected.id!]),\n        }\n\n        this.rowModel.forEachNode(node => {\n            if (node !== rowNodeToKeepSelected) {\n                node.selectThisNode(false, undefined, source);\n            }\n        });\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n\n        return clearedRows;\n    }\n\n    public isEmpty(): boolean {\n        return !this.selectedState.selectAll && !this.selectedState.toggledNodes?.size;\n    }\n    \n    public selectAllRowNodes(params: { source: SelectionEventSourceType; justFiltered?: boolean | undefined; justCurrentPage?: boolean | undefined; }): void {\n        this.selectedState = { selectAll: true, toggledNodes: new Set() };\n        this.selectedNodes = {};\n        this.selectAllUsed = true;\n    }\n\n    public deselectAllRowNodes(params: { source: SelectionEventSourceType; justFiltered?: boolean | undefined; justCurrentPage?: boolean | undefined; }): void {\n        this.selectedState = { selectAll: false, toggledNodes: new Set() };\n        this.selectedNodes = {};\n    }\n\n    public getSelectAllState(justFiltered?: boolean, justCurrentPage?: boolean): boolean | null {\n        if (this.selectedState.selectAll) {\n            if (this.selectedState.toggledNodes.size > 0) {\n                return null;\n            }\n            return true;\n        }\n\n        if (this.selectedState.toggledNodes.size > 0) {\n            return null;\n        }\n        return false;\n    }\n}", "import { Autowired, BeanStub, IRowModel, IRowNode, IServerSideGroupSelectionState, RowNode, SelectionEventSourceType, ISetNodesSelectedParams, ColumnModel, FilterManager, PostConstruct, Events, IServerSideStore, ISelectionService } from \"@ag-grid-community/core\";\nimport { ServerSideRowModel } from \"../../../serverSideRowModel\";\nimport { ISelectionStrategy } from \"./iSelectionStrategy\";\n\ninterface SelectionState {\n    selectAllChildren: boolean;\n    toggledNodes: Map<string, SelectionState>;\n}\n\nexport class GroupSelectsChildrenStrategy extends BeanStub implements ISelectionStrategy {\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('rowModel') private serverSideRowModel: ServerSideRowModel;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n\n    private selectedState: SelectionState = { selectAllChildren: false, toggledNodes: new Map() };\n    private lastSelected: RowNode | null = null;\n\n    @PostConstruct\n    private init(): void {\n        // if model has updated, a store may now be fully loaded to clean up indeterminate states\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, () => this.removeRedundantState());\n\n        // when the grouping changes, the state no longer makes sense, so reset the state.\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.selectionService.reset('rowGroupChanged'));\n    }\n\n    public getSelectedState() {\n        const treeData = this.gridOptionsService.get('treeData');\n        const recursivelySerializeState = (state: SelectionState, level: number, nodeId?: string) => {\n            const normalisedState: IServerSideGroupSelectionState = {\n                nodeId,\n            };\n    \n            if (treeData || level <= this.columnModel.getRowGroupColumns().length) {\n                normalisedState.selectAllChildren = state.selectAllChildren;\n            }\n    \n            // omit toggledNodes if empty\n            if (state.toggledNodes.size) {\n                const toggledNodes: IServerSideGroupSelectionState[] = [];\n                state.toggledNodes.forEach((value, key) => {\n                    const newState = recursivelySerializeState(value, level + 1, key);\n                    toggledNodes.push(newState);\n                });\n                normalisedState.toggledNodes = toggledNodes;\n            }\n    \n            return normalisedState;\n        }\n        return recursivelySerializeState(this.selectedState, 0);\n    }\n\n    public setSelectedState(state: IServerSideGroupSelectionState) {\n        const recursivelyDeserializeState = (normalisedState: IServerSideGroupSelectionState, parentSelected: boolean): SelectionState => {\n            if (typeof normalisedState !== 'object') {\n                throw new Error('AG Grid: Each provided state object must be an object.')\n            }\n            if ('selectAllChildren' in normalisedState && typeof normalisedState.selectAllChildren !== 'boolean') {\n                throw new Error('AG Grid: `selectAllChildren` must be a boolean value or undefined.');\n            }\n            if ('toggledNodes' in normalisedState) {\n                if (!Array.isArray(normalisedState.toggledNodes)) {\n                    throw new Error('AG Grid: `toggledNodes` must be an array.');\n                }\n                const allHaveIds = normalisedState.toggledNodes.every(innerState => (\n                    typeof innerState === 'object' && 'nodeId' in innerState && typeof innerState.nodeId === 'string'\n                ));\n                if (!allHaveIds) {\n                    throw new Error('AG Grid: Every `toggledNode` requires an associated string id.')\n                }\n            }\n            const isThisNodeSelected = normalisedState.selectAllChildren ?? !parentSelected;\n            const convertedChildren = normalisedState.toggledNodes?.map<[string, SelectionState]>(innerState => (\n                [innerState.nodeId!, recursivelyDeserializeState(innerState, isThisNodeSelected)]\n            ));\n            const doesRedundantStateExist = convertedChildren?.some(([_, innerState]) => isThisNodeSelected === innerState.selectAllChildren && innerState.toggledNodes.size === 0);\n            if (doesRedundantStateExist) {\n                throw new Error(`\n                    AG Grid: AG Grid: Row selection state could not be parsed due to invalid data. Ensure all child state has toggledNodes or does not conform with the parent rule.\n                    Please rebuild the selection state and reapply it.\n                `);\n            }\n            return {\n                selectAllChildren: isThisNodeSelected,\n                toggledNodes: new Map(convertedChildren),\n            };\n        };\n\n        try {\n            this.selectedState = recursivelyDeserializeState(state, !!state.selectAllChildren);\n        } catch (e) {\n            console.error(e.message);\n        }\n    }\n\n    public deleteSelectionStateFromParent(parentRoute: string[], removedNodeIds: string[]): boolean {\n        let parentState: SelectionState | undefined = this.selectedState;\n        const remainingRoute = [...parentRoute];\n        while (parentState && remainingRoute.length) {\n            parentState = parentState.toggledNodes.get(remainingRoute.pop()!);\n        }\n\n        // parent has no explicit state, nothing to remove\n        if (!parentState) {\n            return false;\n        }\n\n        let anyStateChanged = false;\n        removedNodeIds.forEach(id => {\n            if (parentState?.toggledNodes.delete(id)) {\n                anyStateChanged = true;\n            }\n        });\n\n        if (anyStateChanged) {\n            this.removeRedundantState();\n        }\n        return anyStateChanged;\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        const { nodes, ...other } = params;\n\n        if (nodes.length === 0) return 0;\n\n        if (params.rangeSelect) {\n            if (nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when using rangeSelect');\n            }\n            const node = nodes[0];\n            const rangeOfNodes = this.rowModel.getNodesInRangeForSelection(node, this.lastSelected);\n            // sort the routes by route length, high to low, this means we can do the lowest level children first\n            const routes = rangeOfNodes.map(this.getRouteToNode).sort((a, b) => b.length - a.length);\n\n            // skip routes if we've already done a descendent\n            const completedRoutes: Set<IRowNode> = new Set();\n            routes.forEach(route => {\n                // skip routes if we've already selected a descendent\n                if (completedRoutes.has(route[route.length - 1])) {\n                    return;\n                }\n\n                route.forEach(part => completedRoutes.add(part));\n                this.recursivelySelectNode(route, this.selectedState, {node, ...other});\n            });\n\n            this.removeRedundantState();\n            this.lastSelected = node;\n            return 1;\n        }\n\n        params.nodes.forEach(node => {\n            const idPathToNode = this.getRouteToNode(node);\n            this.recursivelySelectNode(idPathToNode, this.selectedState, { ...other, node });\n        });\n        this.removeRedundantState();\n        this.lastSelected = params.nodes[params.nodes.length - 1];\n        return 1;\n    }\n\n    public isNodeSelected(node: RowNode): boolean | undefined {\n        const path = this.getRouteToNode(node);\n        return this.isNodePathSelected(path, this.selectedState);\n    }\n\n    private isNodePathSelected([nextNode, ...nodes]: RowNode[], state: SelectionState): boolean | undefined {\n        if (nodes.length === 0) {\n            const isToggled = state.toggledNodes.has(nextNode.id!);\n            if (nextNode.hasChildren()) {\n                const groupState = state.toggledNodes.get(nextNode.id!);\n                if (groupState && groupState.toggledNodes.size) {\n                    return undefined;\n                }\n            }\n            return state.selectAllChildren ? !isToggled : isToggled;\n        }\n\n        // if there's a deeper level, check recursively\n        if (state.toggledNodes.has(nextNode.id!)) {\n            const nextState = state.toggledNodes.get(nextNode.id!);\n            if (nextState) {\n                return this.isNodePathSelected(nodes, nextState);\n            }\n        }\n \n        // no deeper custom state, respect the closest default\n        return !!state.selectAllChildren;\n    }\n\n    private getRouteToNode(node: RowNode) {\n        const pathToNode = [];\n        let tempNode = node;\n        while (tempNode.parent) {\n            pathToNode.push(tempNode);\n            tempNode = tempNode.parent;\n        }\n        return pathToNode.reverse();\n    }\n\n    private removeRedundantState() {\n        if (this.filterManager.isAnyFilterPresent()) {\n            return;\n        }\n\n        const forEachNodeStateDepthFirst = (state = this.selectedState, thisKey?: string, parentState?: SelectionState) => {\n            // clean up lowest level state first in order to calculate this levels state\n            // from updated child state\n            state.toggledNodes.forEach((value, key) => {\n                forEachNodeStateDepthFirst(value, key, state);\n            });\n\n            if (thisKey) {\n                const thisRow = this.rowModel.getRowNode(thisKey);\n                const thisRowStore = thisRow?.childStore;\n                const isStoreSizeKnown = thisRowStore?.isLastRowIndexKnown();\n                if (isStoreSizeKnown) {\n                    // have to check greater than, as we may have stale state still, if so all visible rows may not be\n                    // toggled\n                    const possibleAllNodesToggled = state.toggledNodes.size >= thisRowStore!.getRowCount();\n                    if (possibleAllNodesToggled) {\n                        // more complex checks nested for performance\n                        for(const childState of state.toggledNodes.entries()) {\n                            const [key, value] = childState;\n                            // if any child has toggled rows, then this row is indeterminate\n                            // and the state is relevant.\n                            if (value.toggledNodes.size > 0) {\n                                return;\n                            }\n\n                            const rowDoesNotExist = !this.rowModel.getRowNode(key);\n                            if (rowDoesNotExist) {\n                                // if row doesn't exist, it's not toggled.\n                                return;\n                            }\n                        }\n    \n                        // no indeterminate rows, and all rows are toggled, flip this row state\n                        // and clear child states.\n                        state.selectAllChildren = !state.selectAllChildren;\n                        state.toggledNodes.clear();\n                    }\n                }\n            }\n\n            // if this has no toggled rows, and is identical to parent state, it's redundant and can be removed.\n            const hasNoToggledRows = state.toggledNodes.size === 0;\n            const isIdenticalToParent = parentState?.selectAllChildren === state.selectAllChildren;\n            if (hasNoToggledRows && isIdenticalToParent) {\n                parentState?.toggledNodes.delete(thisKey!);\n            }\n        }\n        forEachNodeStateDepthFirst();\n    }\n\n    private recursivelySelectNode([nextNode, ...nodes]: IRowNode[], selectedState: SelectionState, params: { newValue: boolean, source: SelectionEventSourceType, event?: Event, node: RowNode }) {\n        if (!nextNode) {\n            return;\n        }\n\n        // if this is the last node, hard add/remove based on its selectAllChildren state\n        const isLastNode = !nodes.length;\n        if (isLastNode) {\n            // if the node is not selectable, we should never have it in selection state\n            const isNodeSelectable = nextNode.selectable;\n            const doesNodeConform = selectedState.selectAllChildren === params.newValue;\n            if (doesNodeConform || !isNodeSelectable) {\n                selectedState.toggledNodes.delete(nextNode.id!);\n                return;\n            }\n            const newState: SelectionState = {\n                selectAllChildren: params.newValue,\n                toggledNodes: new Map(),\n            };\n            selectedState.toggledNodes.set(nextNode.id!, newState);\n            return;\n        }\n\n        const doesStateAlreadyExist = selectedState.toggledNodes.has(nextNode.id!);\n        const childState: SelectionState = doesStateAlreadyExist ? (\n            selectedState.toggledNodes.get(nextNode.id!)!\n        ) : {\n            selectAllChildren: selectedState.selectAllChildren,\n            toggledNodes: new Map(),\n        };\n\n        if (!doesStateAlreadyExist) {\n            selectedState.toggledNodes.set(nextNode.id!, childState);\n        }\n\n        this.recursivelySelectNode(nodes, childState, params);\n\n        // cleans out groups which have no toggled nodes and an equivalent default to its parent\n        if (selectedState.selectAllChildren === childState.selectAllChildren && childState.toggledNodes.size === 0) {\n            selectedState.toggledNodes.delete(nextNode.id!);\n        }\n    }\n\n    public getSelectedNodes(): RowNode<any>[] {\n        console.warn(\n            `AG Grid: \\`getSelectedNodes\\` and \\`getSelectedRows\\` functions cannot be used with \\`groupSelectsChildren\\` and the server-side row model.\n            Use \\`api.getServerSideSelectionState()\\` instead.`\n        );\n\n        const selectedNodes: RowNode[] = [];\n        this.rowModel.forEachNode(node => {\n            if (node.isSelected()) {\n                selectedNodes.push(node);\n            }\n        });\n        return selectedNodes;\n    }\n\n    public processNewRow(node: RowNode<any>): void {\n        // This is used for updating outdated node refs, as this model entirely uses ids it's irrelevant\n    }\n\n    public getSelectedRows(): any[] {\n        return this.getSelectedNodes().map(node => node.data);\n    }\n\n    public getSelectionCount(): number {\n        return -1;\n    }\n\n    public isEmpty(): boolean {\n        return !this.selectedState.selectAllChildren && !this.selectedState.toggledNodes?.size;\n    }\n\n    public selectAllRowNodes(params: { source: SelectionEventSourceType; justFiltered?: boolean | undefined; justCurrentPage?: boolean | undefined; }): void {\n        this.selectedState = { selectAllChildren: true, toggledNodes: new Map() };\n    }\n\n    public deselectAllRowNodes(params: { source: SelectionEventSourceType; justFiltered?: boolean | undefined; justCurrentPage?: boolean | undefined; }): void {\n        this.selectedState = { selectAllChildren: false, toggledNodes: new Map() };\n    }\n\n    public getSelectAllState(justFiltered?: boolean, justCurrentPage?: boolean): boolean | null {\n        if (this.selectedState.selectAllChildren) {\n            if (this.selectedState.toggledNodes.size > 0) {\n                return null;\n            }\n            return true;\n        }\n\n        if (this.selectedState.toggledNodes.size > 0) {\n            return null;\n        }\n        return false;\n    }\n}", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import {\n    Autowired,\n    Bean,\n    Events,\n    ExpansionService,\n    IExpansionService,\n    IsServerSideGroupOpenByDefaultParams,\n    RowNode,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { ServerSideRowModel } from \"../serverSideRowModel\";\n\n@Bean('expansionService')\nexport class ServerSideExpansionService extends ExpansionService implements IExpansionService {\n    @Autowired('rowModel') private readonly serverSideRowModel: ServerSideRowModel;\n\n    private queuedRowIds: Set<string> = new Set();\n\n    protected postConstruct(): void {\n        super.postConstruct();\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => {\n            this.queuedRowIds.clear();\n        });\n    }\n\n    public checkOpenByDefault(rowNode: RowNode): void {\n        if (!rowNode.isExpandable()) { return; }\n\n        if (this.queuedRowIds.has(rowNode.id!)) {\n            this.queuedRowIds.delete(rowNode.id!);\n            rowNode.setExpanded(true);\n            return;\n        }\n\n        const userFunc = this.gridOptionsService.getCallback('isServerSideGroupOpenByDefault');\n        if (!userFunc) { return; }\n\n        const params: WithoutGridCommon<IsServerSideGroupOpenByDefaultParams> = {\n            data: rowNode.data,\n            rowNode\n        };\n\n        const userFuncRes = userFunc(params);\n\n        if (userFuncRes) {\n            rowNode.setExpanded(true);\n        }\n    }\n\n    public expandRows(rowIds: string[]): void {\n        rowIds.forEach(rowId => {\n            const rowNode = this.serverSideRowModel.getRowNode(rowId);\n            if (rowNode) {\n                rowNode.setExpanded(true);\n            } else {\n                this.queuedRowIds.add(rowId);\n            }\n        });\n    }\n\n    public expandAll(value: boolean): void {\n        this.serverSideRowModel.expandAll(value);\n    }\n\n    public onGroupExpandedOrCollapsed(): void {\n        // do nothing\n    }\n}", "import { Module, ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { SetFilter } from './setFilter/setFilter';\nimport { SetFloatingFilterComp } from './setFilter/setFloatingFilter';\nimport { VERSION } from './version';\n\nexport const SetFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SetFilterModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agSetColumnFilter', componentClass: SetFilter },\n        { componentName: 'agSetColumnFloatingFilter', componentClass: SetFloatingFilterComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    AgInputTextField,\n    Autowired,\n    CellValueChangedEvent,\n    Events,\n    IDoesFilterPassParams,\n    SetFilterParams,\n    ProvidedFilter,\n    RefSelector,\n    ValueFormatterService,\n    VirtualList,\n    VirtualListModel,\n    IAfterGuiAttachedParams,\n    AgPromise,\n    KeyCode,\n    KeyCreatorParams,\n    _,\n    ISetFilter,\n    SetFilterModel,\n    SetFilterModelValue,\n    ValueFormatterParams,\n    ColumnModel,\n    ValueService,\n    GetDataPath,\n    GROUP_AUTO_COLUMN_ID,\n    IRowNode,\n    ColDef,\n} from '@ag-grid-community/core';\nimport { SetFilterModelValuesType, SetValueModel } from './setValueModel';\nimport { SetFilterListItem, SetFilterListItemExpandedChangedEvent, SetFilterListItemParams, SetFilterListItemSelectionChangedEvent } from './setFilterListItem';\nimport { ISetFilterLocaleText, DEFAULT_LOCALE_TEXT } from './localeText';\nimport { SetFilterDisplayValue, SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { SetFilterModelFormatter } from './setFilterModelFormatter';\n\n/** @param V type of value in the Set Filter */\nexport class SetFilter<V = string> extends ProvidedFilter<SetFilterModel, V> implements ISetFilter<V> {\n    @RefSelector('eMiniFilter') private readonly eMiniFilter: AgInputTextField;\n    @RefSelector('eFilterLoading') private readonly eFilterLoading: HTMLElement;\n    @RefSelector('eSetFilterList') private readonly eSetFilterList: HTMLElement;\n    @RefSelector('eFilterNoMatches') private readonly eNoMatches: HTMLElement;\n\n    @Autowired('valueFormatterService') private readonly valueFormatterService: ValueFormatterService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n\n    private valueModel: SetValueModel<V> | null = null;\n    private setFilterParams: SetFilterParams<any, V> | null = null;\n    private virtualList: VirtualList | null = null;\n    private caseSensitive: boolean = false;\n    private convertValuesToStrings: boolean = false;\n    private treeDataTreeList = false;\n    private getDataPath?: GetDataPath<any>;\n    private groupingTreeList = false;\n    private hardRefreshVirtualList = false;\n    private noValueFormatterSupplied = false;\n\n    private createKey: (value: V | null | undefined, node?: IRowNode | null) => string | null;\n\n    private valueFormatter?: (params: ValueFormatterParams) => string;\n    private readonly filterModelFormatter = new SetFilterModelFormatter();\n\n    constructor() {\n        super('setFilter');\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n    }\n\n    // unlike the simple filters, nothing in the set filter UI shows/hides.\n    // maybe this method belongs in abstractSimpleFilter???\n    protected updateUiVisibility(): void { }\n\n    protected createBodyTemplate(): string {\n        return /* html */`\n            <div class=\"ag-set-filter\">\n                <div ref=\"eFilterLoading\" class=\"ag-filter-loading ag-hidden\">${this.translateForSetFilter('loadingOoo')}</div>\n                <ag-input-text-field class=\"ag-mini-filter\" ref=\"eMiniFilter\"></ag-input-text-field>\n                <div ref=\"eFilterNoMatches\" class=\"ag-filter-no-matches ag-hidden\">${this.translateForSetFilter('noMatches')}</div>\n                <div ref=\"eSetFilterList\" class=\"ag-set-filter-list\" role=\"presentation\"></div>\n            </div>`;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        if (e.defaultPrevented) { return; }\n\n        switch (e.key) {\n            case KeyCode.SPACE:\n                this.handleKeySpace(e);\n                break;\n            case KeyCode.ENTER:\n                this.handleKeyEnter(e);\n                break;\n            case KeyCode.LEFT:\n                this.handleKeyLeft(e);\n                break;\n            case KeyCode.RIGHT:\n                this.handleKeyRight(e);\n                break;\n        }\n    }\n\n    private handleKeySpace(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.toggleSelected();\n    }\n\n    private handleKeyEnter(e: KeyboardEvent): void {\n        if (!this.setFilterParams) { return; }\n\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (!excelMode || !!readOnly) { return; }\n\n        e.preventDefault();\n\n        // in Excel Mode, hitting Enter is the same as pressing the Apply button\n        this.onBtApply(false, false, e);\n\n        if (this.setFilterParams.excelMode === 'mac') {\n            // in Mac version, select all the input text\n            this.eMiniFilter.getInputElement().select();\n        }\n    }\n\n    private handleKeyLeft(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.setExpanded(false);\n    }\n\n    private handleKeyRight(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.setExpanded(true);\n    }\n\n    private getComponentForKeyEvent(e: KeyboardEvent): SetFilterListItem<V> | undefined {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!this.eSetFilterList.contains(eDocument.activeElement) || !this.virtualList) { return; }\n\n        const currentItem = this.virtualList.getLastFocusedRow();\n        if (currentItem == null) { return; }\n\n        const component = this.virtualList.getComponentAt(currentItem) as SetFilterListItem<V>;\n        if (component == null) { return ; }\n\n        e.preventDefault();\n\n        const { readOnly } = this.setFilterParams ?? {};\n        if (!!readOnly) { return; }\n        return component;\n    }\n\n    protected getCssIdentifier(): string {\n        return 'set-filter';\n    }\n\n    public setModel(model: SetFilterModel | null): AgPromise<void> {\n        if (model == null && this.valueModel?.getModel() == null) {\n            // refreshing is expensive. if new and old model are both null (e.g. nothing set), skip.\n            // mini filter isn't contained within the model, so always reset\n            this.setMiniFilter(null);\n            return AgPromise.resolve();\n        }\n        return super.setModel(model);\n    }\n\n    refresh(params: SetFilterParams<any, V>): boolean {\n        if (!super.refresh(params)) {\n            return false;\n        }\n\n        // Those params have a large impact and should trigger a reload when they change.\n        const paramsThatForceReload: (keyof SetFilterParams<any, V>)[] = [\n            'treeList', 'treeListFormatter', 'treeListPathGetter', 'keyCreator', 'convertValuesToStrings',\n            'caseSensitive', 'comparator', 'suppressSelectAll', 'excelMode'\n        ];\n\n        if (paramsThatForceReload.some(param => params[param] !== this.setFilterParams?.[param])) {\n            return false;\n        }\n\n        if (this.haveColDefParamsChanged(params.colDef)) {\n            return false;\n        }\n\n        super.updateParams(params);\n        this.updateSetFilterOnParamsChange(params);\n        this.updateMiniFilter();\n\n        if (params.cellRenderer !== this.setFilterParams?.cellRenderer ||\n            params.valueFormatter !== this.setFilterParams?.valueFormatter) {\n            this.checkAndRefreshVirtualList();\n        }\n\n        this.valueModel?.updateOnParamsChange(params).then(() => {\n            if (this.valueModel?.hasSelections()) {\n                this.refreshFilterValues();\n            }\n        });\n\n        return true;\n    }\n\n    private haveColDefParamsChanged(colDef: ColDef): boolean {\n        const paramsThatForceReload: (keyof ColDef)[] = [\n            'keyCreator', 'filterValueGetter',\n        ];\n        const existingColDef = this.setFilterParams?.colDef;\n        return paramsThatForceReload.some(param => colDef[param] !== existingColDef?.[param]);\n    }\n\n    private setModelAndRefresh(values: SetFilterModelValue | null): AgPromise<void> {\n        return this.valueModel ? this.valueModel.setModel(values).then(() => this.checkAndRefreshVirtualList()) : AgPromise.resolve();\n    }\n\n    protected resetUiToDefaults(): AgPromise<void> {\n        this.setMiniFilter(null);\n\n        return this.setModelAndRefresh(null);\n    }\n\n    protected setModelIntoUi(model: SetFilterModel | null): AgPromise<void> {\n        this.setMiniFilter(null);\n\n        const values = model == null ? null : model.values;\n        return this.setModelAndRefresh(values);\n    }\n\n    public getModelFromUi(): SetFilterModel | null {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const values = this.valueModel.getModel();\n\n        if (!values) { return null; }\n\n        return { values, filterType: this.getFilterType() };\n    }\n\n    public getFilterType(): 'set' {\n        return 'set';\n    }\n\n    public getValueModel(): SetValueModel<V> | null {\n        return this.valueModel;\n    }\n\n    protected areModelsEqual(a: SetFilterModel, b: SetFilterModel): boolean {\n        // both are missing\n        if (a == null && b == null) { return true; }\n\n        return a != null && b != null && _.areEqual(a.values, b.values);\n    }\n\n    private updateSetFilterOnParamsChange = (newParams: SetFilterParams<any, V>) => {\n        this.setFilterParams = newParams;\n        this.convertValuesToStrings = !!newParams.convertValuesToStrings;\n        this.caseSensitive = !!newParams.caseSensitive;\n        const keyCreator = newParams.keyCreator ?? newParams.colDef.keyCreator;\n        this.setValueFormatter(newParams.valueFormatter, keyCreator, this.convertValuesToStrings, !!newParams.treeList, !!newParams.colDef.refData);\n        const isGroupCol = newParams.column.getId().startsWith(GROUP_AUTO_COLUMN_ID);\n        this.treeDataTreeList = this.gridOptionsService.get('treeData') && !!newParams.treeList && isGroupCol;\n        this.getDataPath = this.gridOptionsService.get('getDataPath');\n        this.groupingTreeList = !!this.columnModel.getRowGroupColumns().length && !!newParams.treeList && isGroupCol;\n        this.createKey = this.generateCreateKey(keyCreator, this.convertValuesToStrings, this.treeDataTreeList || this.groupingTreeList);\n    }\n\n    public setParams(params: SetFilterParams<any, V>): void {\n        this.applyExcelModeOptions(params);\n\n        super.setParams(params);\n\n        this.updateSetFilterOnParamsChange(params);\n\n        const keyCreator = params.keyCreator ?? params.colDef.keyCreator;\n\n        this.valueModel = new SetValueModel({\n            filterParams: params,\n            setIsLoading: loading => this.setIsLoading(loading),\n            valueFormatterService: this.valueFormatterService,\n            translate: key => this.translateForSetFilter(key),\n            caseFormat: v => this.caseFormat(v),\n            createKey: this.createKey,\n            valueFormatter: this.valueFormatter,\n            usingComplexObjects: !!keyCreator,\n            gridOptionsService: this.gridOptionsService,\n            columnModel: this.columnModel,\n            valueService: this.valueService,\n            treeDataTreeList: this.treeDataTreeList,\n            groupingTreeList: this.groupingTreeList,\n            addManagedListener: (event, listener) => this.addManagedListener(this.eventService, event, listener)\n        });\n\n        this.initialiseFilterBodyUi();\n\n        this.addEventListenersForDataChanges();\n    }\n\n    private onAddCurrentSelectionToFilterChange(newValue: boolean) {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n        this.valueModel.setAddCurrentSelectionToFilter(newValue);\n    }\n\n    private setValueFormatter(\n        providedValueFormatter: ((params: ValueFormatterParams) => string) | undefined,\n        keyCreator: ((params: KeyCreatorParams<any, any>) => string) | undefined,\n        convertValuesToStrings: boolean,\n        treeList: boolean,\n        isRefData: boolean\n    ) {\n        let valueFormatter = providedValueFormatter;\n        if (!valueFormatter) {\n            if (keyCreator && !convertValuesToStrings && !treeList) {\n                throw new Error('AG Grid: Must supply a Value Formatter in Set Filter params when using a Key Creator unless convertValuesToStrings is enabled');\n            }\n            this.noValueFormatterSupplied = true;\n            // ref data is handled by ValueFormatterService\n            if (!isRefData) {\n                valueFormatter = params => _.toStringOrNull(params.value)!;\n            }\n        }\n        this.valueFormatter = valueFormatter;\n    }\n\n    private generateCreateKey(\n        keyCreator: ((params: KeyCreatorParams<any, any>) => string) | undefined,\n        convertValuesToStrings: boolean,\n        treeDataOrGrouping: boolean\n    ): (value: V | null | undefined, node?: IRowNode | null) => string | null {\n        if (treeDataOrGrouping && !keyCreator) {\n            throw new Error('AG Grid: Must supply a Key Creator in Set Filter params when `treeList = true` on a group column, and Tree Data or Row Grouping is enabled.');\n        }\n        if (keyCreator) {\n            return (value, node = null) => {\n                const params = this.getKeyCreatorParams(value, node);\n                return _.makeNull(keyCreator!(params));\n            };\n        }\n        if (convertValuesToStrings) {\n            // for backwards compatibility - keeping separate as it will eventually be removed\n            return value => Array.isArray(value) ? value as any : _.makeNull(_.toStringOrNull(value));\n        } else {\n            return value => _.makeNull(_.toStringOrNull(value));\n        }\n    }\n\n    public getFormattedValue(key: string | null): string | null {\n        let value: V | string | null = this.valueModel!.getValue(key);\n        if (this.noValueFormatterSupplied && (this.treeDataTreeList || this.groupingTreeList) && Array.isArray(value)) {\n            // essentially get back the cell value\n            value = _.last(value) as string;\n        }\n\n        const formattedValue = this.valueFormatterService.formatValue(\n            this.setFilterParams!.column, null, value, this.valueFormatter, false);\n\n        return (formattedValue == null ? _.toStringOrNull(value) : formattedValue) ?? this.translateForSetFilter('blanks')\n    }\n\n    private applyExcelModeOptions(params: SetFilterParams<any, V>): void {\n        // apply default options to match Excel behaviour, unless they have already been specified\n        if (params.excelMode === 'windows') {\n            if (!params.buttons) {\n                params.buttons = ['apply', 'cancel'];\n            }\n\n            if (params.closeOnApply == null) {\n                params.closeOnApply = true;\n            }\n        } else if (params.excelMode === 'mac') {\n            if (!params.buttons) {\n                params.buttons = ['reset'];\n            }\n\n            if (params.applyMiniFilterWhileTyping == null) {\n                params.applyMiniFilterWhileTyping = true;\n            }\n\n            if (params.debounceMs == null) {\n                params.debounceMs = 500;\n            }\n        }\n        if (params.excelMode && params.defaultToNothingSelected) {\n            params.defaultToNothingSelected = false;\n            _.warnOnce('The Set Filter Parameter \"defaultToNothingSelected\" value was ignored because it does not work when \"excelMode\" is used.');\n        }\n    }\n\n    private addEventListenersForDataChanges(): void {\n        if (!this.isValuesTakenFromGrid()) { return; }\n\n        this.addManagedListener(\n            this.eventService,\n            Events.EVENT_CELL_VALUE_CHANGED,\n            (event: CellValueChangedEvent) => {\n                // only interested in changes to do with this column\n                if (this.setFilterParams && event.column === this.setFilterParams.column) {\n                    this.syncAfterDataChange();\n                }\n            });\n\n        this.addManagedPropertyListeners(['treeData', 'getDataPath', 'groupAllowUnbalanced'], () => {\n            this.syncAfterDataChange();\n        })\n    }\n\n    private syncAfterDataChange(): AgPromise<void> {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        let promise = this.valueModel.refreshValues();\n\n        return promise.then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onBtApply(false, true);\n        });\n    }\n\n    private setIsLoading(isLoading: boolean): void {\n        _.setDisplayed(this.eFilterLoading, isLoading);\n        if (!isLoading) {\n            // hard refresh when async data received\n            this.hardRefreshVirtualList = true;\n        }\n    }\n\n    private initialiseFilterBodyUi(): void {\n        this.initVirtualList();\n        this.initMiniFilter();\n    }\n\n    private initVirtualList(): void {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterList', 'Filter List');\n        const isTree = !!this.setFilterParams.treeList;\n\n        const virtualList = this.virtualList = this.createBean(new VirtualList({\n            cssIdentifier: 'filter',\n            ariaRole: isTree ? 'tree' : 'listbox',\n            listName: filterListName\n        }));\n        const eSetFilterList = this.getRefElement('eSetFilterList');\n\n        if (isTree) {\n            eSetFilterList.classList.add('ag-set-filter-tree-list');\n        }\n\n        if (eSetFilterList) {\n            eSetFilterList.appendChild(virtualList.getGui());\n        }\n\n        const { cellHeight } = this.setFilterParams;\n\n        if (cellHeight != null) {\n            virtualList.setRowHeight(cellHeight);\n        }\n\n        const componentCreator = (item: SetFilterModelTreeItem | string | null, listItemElement: HTMLElement) => this.createSetListItem(item, isTree, listItemElement);\n        virtualList.setComponentCreator(componentCreator);\n\n        const componentUpdater = (item: SetFilterModelTreeItem | string | null, component: SetFilterListItem<V | string | null>) => this.updateSetListItem(item, component);\n        virtualList.setComponentUpdater(componentUpdater);\n\n        let model: VirtualListModel;\n\n        if (this.setFilterParams.suppressSelectAll) {\n            model = new ModelWrapper(this.valueModel);\n        } else {\n            model = new ModelWrapperWithSelectAll(this.valueModel, () => this.isSelectAllSelected());\n        }\n        if (isTree) {\n            model = new TreeModelWrapper(model);\n        }\n\n        virtualList.setModel(model);\n    }\n\n    private getSelectAllLabel(): string {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const key = this.valueModel.getMiniFilter() == null || !this.setFilterParams.excelMode ?\n            'selectAll' : 'selectAllSearchResults';\n\n        return this.translateForSetFilter(key);\n    }\n\n    private getAddSelectionToFilterLabel(): string {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        return this.translateForSetFilter('addCurrentSelectionToFilter');\n    }\n\n    private createSetListItem(item: SetFilterModelTreeItem | string | null, isTree: boolean, focusWrapper: HTMLElement): SetFilterListItem<V | string | null> {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const groupsExist = this.valueModel.hasGroups();\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n\n        const {\n            value,\n            depth,\n            isGroup,\n            hasIndeterminateExpandState,\n            selectedListener,\n            expandedListener,\n        } = this.newSetListItemAttributes(item, isTree);\n\n        const itemParams: SetFilterListItemParams<V | string | null> = {\n            focusWrapper,\n            value,\n            params: this.setFilterParams,\n            translate: (translateKey: any) => this.translateForSetFilter(translateKey),\n            valueFormatter: this.valueFormatter,\n            item,\n            isSelected,\n            isTree,\n            depth,\n            groupsExist,\n            isGroup,\n            isExpanded,\n            hasIndeterminateExpandState,\n        }\n        const listItem = this.createBean(new SetFilterListItem<V | string | null>(itemParams));\n\n        listItem.addEventListener(SetFilterListItem.EVENT_SELECTION_CHANGED, selectedListener as any);\n        if (expandedListener) {\n            listItem.addEventListener(SetFilterListItem.EVENT_EXPANDED_CHANGED, expandedListener as any);\n        }\n\n        return listItem;\n    }\n\n    \n\n    private newSetTreeItemAttributes(item: SetFilterModelTreeItem, isTree: boolean): ({\n        value: V | string | (() => string) | null,\n        depth?: number | undefined,\n        isGroup?: boolean | undefined,\n        hasIndeterminateExpandState?: boolean | undefined,\n        selectedListener: (e: SetFilterListItemSelectionChangedEvent) => void,\n        expandedListener?: (e: SetFilterListItemExpandedChangedEvent) => void,\n    }) {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const groupsExist = this.valueModel.hasGroups();\n\n        // Select all option\n        if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n            return {\n                value: () => this.getSelectAllLabel(),\n                isGroup: groupsExist,\n                depth: item.depth,\n                hasIndeterminateExpandState: true,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent) => this.onSelectAll(e.isSelected),\n                expandedListener: (e: SetFilterListItemExpandedChangedEvent<SetFilterModelTreeItem>) => this.onExpandAll(e.item, e.isExpanded),\n            };\n        }\n\n        // Add selection to filter option\n        if (item.key === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n            return {\n                value: () => this.getAddSelectionToFilterLabel(),\n                depth: item.depth,\n                isGroup: false,\n                hasIndeterminateExpandState: false,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent) => {\n                    this.onAddCurrentSelectionToFilterChange(e.isSelected);\n                }\n            };\n        }\n\n        // Group\n        if (item.children) {\n            return {\n                value: this.setFilterParams.treeListFormatter?.(item.treeKey, item.depth, item.parentTreeKeys) ?? item.treeKey,\n                depth: item.depth,\n                isGroup: true,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<SetFilterModelTreeItem>) => this.onGroupItemSelected(e.item, e.isSelected),\n                expandedListener: (e: SetFilterListItemExpandedChangedEvent<SetFilterModelTreeItem>) => this.onExpandedChanged(e.item, e.isExpanded),\n            };\n        }\n\n        // Leaf\n        return {\n            value: this.setFilterParams.treeListFormatter?.(item.treeKey, item.depth, item.parentTreeKeys) ?? item.treeKey,\n            depth: item.depth,\n            selectedListener: (e: SetFilterListItemSelectionChangedEvent<SetFilterModelTreeItem>) => this.onItemSelected(e.item.key!, e.isSelected),\n        };\n    }\n\n    private newSetListItemAttributes(item: SetFilterModelTreeItem | string | null, isTree: boolean): ({\n        value: V | string | (() => string) | null,\n        depth?: number | undefined,\n        isGroup?: boolean | undefined,\n        hasIndeterminateExpandState?: boolean | undefined,\n        selectedListener: (e: SetFilterListItemSelectionChangedEvent) => void,\n        expandedListener?: (e: SetFilterListItemExpandedChangedEvent) => void,\n    }) {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        // Tree item\n        if (this.isSetFilterModelTreeItem(item)) {\n            return this.newSetTreeItemAttributes(item, isTree);\n        }\n\n        // List item - 'Select All'\n        if (item === SetFilterDisplayValue.SELECT_ALL) {\n            return {\n                value: () => this.getSelectAllLabel(),\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<string>) => this.onSelectAll(e.isSelected),\n            };\n        }\n        \n        // List item - 'Add selection to filter'\n        if (item === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER)  {\n            return {\n                value: () => this.getAddSelectionToFilterLabel(),\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<string | null>) => {\n                    this.onAddCurrentSelectionToFilterChange(e.isSelected);\n                },\n            };\n        }\n\n        // List item\n        return {\n            value: this.valueModel.getValue(item),\n            selectedListener: (e: SetFilterListItemSelectionChangedEvent<string | null>) => this.onItemSelected(e.item, e.isSelected),\n        };\n    }\n\n    private updateSetListItem(item: SetFilterModelTreeItem | string | null, component: SetFilterListItem<V | string | null>): void {\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n        component.refresh(item, isSelected, isExpanded);\n    }\n\n    private isSelectedExpanded(item: SetFilterModelTreeItem | string | null): { isSelected: boolean | undefined, isExpanded: boolean | undefined } {\n        let isSelected: boolean | undefined;\n        let isExpanded: boolean | undefined;\n        if (this.isSetFilterModelTreeItem(item)) {\n            isExpanded = item.expanded;\n            if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            } else if (item.key === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n                isSelected = this.valueModel!.isAddCurrentSelectionToFilterChecked();\n            } else if (item.children) {\n                isSelected = this.areAllChildrenSelected(item);\n            } else {\n                isSelected = this.valueModel!.isKeySelected(item.key!);\n            }\n        } else {\n            if (item === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            } else if (item === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n                isSelected = this.valueModel!.isAddCurrentSelectionToFilterChecked();\n            } else {\n                isSelected = this.valueModel!.isKeySelected(item);\n            }\n        }\n        return { isSelected, isExpanded };\n    }\n\n    private isSetFilterModelTreeItem(item: any): item is SetFilterModelTreeItem {\n        return item?.treeKey !== undefined;\n    }\n\n    private initMiniFilter() {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const { eMiniFilter, localeService } = this;\n        const translate = localeService.getLocaleTextFunc();\n\n        eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        eMiniFilter.setValue(this.valueModel.getMiniFilter());\n        eMiniFilter.onValueChange(() => this.onMiniFilterInput());\n        eMiniFilter.setInputAriaLabel(translate('ariaSearchFilterValues', 'Search filter values'));\n\n        this.addManagedListener(eMiniFilter.getInputElement(), 'keydown', e => this.onMiniFilterKeyDown(e));\n    }\n\n    private updateMiniFilter() {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const { eMiniFilter } = this;\n\n        if (eMiniFilter.isDisplayed() !== !this.setFilterParams.suppressMiniFilter) {\n            eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        }\n\n        const miniFilterValue = this.valueModel.getMiniFilter();\n        if (eMiniFilter.getValue() !== miniFilterValue) {\n            eMiniFilter.setValue(miniFilterValue);\n        }\n    }\n\n    // we need to have the GUI attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the GUI state\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n\n        super.afterGuiAttached(params);\n\n        // collapse all tree list items (if tree list)\n        this.resetExpansion();\n\n        this.refreshVirtualList();\n\n        const { eMiniFilter } = this;\n\n        eMiniFilter.setInputPlaceholder(this.translateForSetFilter('searchOoo'));\n\n        if (!params || !params.suppressFocus) {\n            eMiniFilter.getFocusableElement().focus();\n        }\n    }\n\n    public afterGuiDetached(): void {\n        super.afterGuiDetached();\n\n        // discard any unapplied UI state (reset to model)\n        if (this.setFilterParams?.excelMode) {\n            this.resetMiniFilter();\n        }\n        const appliedModel = this.getModel();\n        if (this.setFilterParams?.excelMode || !this.areModelsEqual(appliedModel!, this.getModelFromUi()!)) {\n            this.resetUiToActiveModel(appliedModel);\n            this.showOrHideResults();\n        }\n    }\n\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        if (this.setFilterParams.excelMode && source !== 'rowDataUpdated' && this.valueModel.isEverythingVisibleSelected()) {\n            // In Excel, if the filter is applied with all visible values selected, then any active filter on the\n            // column is removed. This ensures the filter is removed in this situation.\n            this.valueModel.selectAllMatchingMiniFilter();\n        }\n\n        // Here we implement AG-9090 TC2\n        // When 'Add current selection to filter' is visible and checked, but no filter is applied:\n        // Do NOT apply the current selection as filter.\n        const shouldKeepCurrentSelection = this.valueModel!.showAddCurrentSelectionToFilter() && this.valueModel!.isAddCurrentSelectionToFilterChecked();\n        if (shouldKeepCurrentSelection && !this.getModel()) {\n            return false;\n        }\n\n        const result = super.applyModel(source);\n\n        // keep appliedModelKeys in sync with the applied model\n        const appliedModel = this.getModel();\n\n        if (appliedModel) {\n            if (!shouldKeepCurrentSelection) {\n                this.valueModel.setAppliedModelKeys(new Set());\n            }\n\n            appliedModel.values.forEach(key => {\n                this.valueModel!.addToAppliedModelKeys(key);\n            });\n        } else {\n            if (!shouldKeepCurrentSelection) {\n                this.valueModel.setAppliedModelKeys(null);\n            }\n        }\n\n        return result;\n    }\n\n    protected isModelValid(model: SetFilterModel): boolean {\n        return this.setFilterParams && this.setFilterParams.excelMode ? model == null || model.values.length > 0 : true;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        if (!this.setFilterParams || !this.valueModel || !this.valueModel.getCaseFormattedAppliedModelKeys()) { return true; }\n\n        // if nothing selected, don't need to check value\n        if (!this.valueModel.hasAnyAppliedModelKey()) {\n            return false;\n        }\n\n        const { node, data } = params;\n        if (this.treeDataTreeList) {\n            return this.doesFilterPassForTreeData(node, data);\n        }\n        if (this.groupingTreeList) {\n            return this.doesFilterPassForGrouping(node);\n        }\n\n        let value = this.getValueFromNode(node);\n\n        if (this.convertValuesToStrings) {\n            // for backwards compatibility - keeping separate as it will eventually be removed\n            return this.doesFilterPassForConvertValuesToString(node, value);\n        }\n\n        if (value != null && Array.isArray(value)) {\n            if (value.length === 0) {\n                return this.valueModel!.hasAppliedModelKey(null);\n            }\n            return value.some(v => this.isInAppliedModel(this.createKey(v, node)));\n        }\n\n        return this.isInAppliedModel(this.createKey(value, node));\n    }\n\n    private doesFilterPassForConvertValuesToString(node: IRowNode, value: V | null | undefined) {\n        const key = this.createKey(value, node);\n        if (key != null && Array.isArray(key)) {\n            if (key.length === 0) {\n                return this.valueModel!.hasAppliedModelKey(null);\n            }\n            return key.some(v => this.isInAppliedModel(v));\n        }\n\n        return this.isInAppliedModel(key as any);\n    }\n\n    private doesFilterPassForTreeData(node: IRowNode, data: any): boolean {\n        if (node.childrenAfterGroup?.length) {\n            // only perform checking on leaves. The core filtering logic for tree data won't work properly otherwise\n            return false;\n        }\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(this.getDataPath!(data)) as any) as any);\n    }\n\n    private doesFilterPassForGrouping(node: IRowNode): boolean {\n        const dataPath = this.columnModel.getRowGroupColumns().map(groupCol => this.valueService.getKeyForNode(groupCol, node));\n        dataPath.push(this.getValueFromNode(node));\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(dataPath) as any) as any);\n        \n    }\n\n    private checkMakeNullDataPath(dataPath: string[] | null): string[] | null {\n        if (dataPath) {\n            dataPath = dataPath.map(treeKey => _.toStringOrNull(_.makeNull(treeKey))) as any;\n        }\n        if (dataPath?.some(treeKey => treeKey == null)) {\n            return null;\n        }\n        return dataPath;\n    }\n\n    private isInAppliedModel(key: string | null): boolean {\n        return this.valueModel!.hasAppliedModelKey(key);\n    }\n\n    private getValueFromNode(node: IRowNode): V | null | undefined {\n        return this.setFilterParams!.getValue(node);\n    }\n\n    private getKeyCreatorParams(value: V | null | undefined, node: IRowNode | null = null): KeyCreatorParams {\n        return {\n            value,\n            colDef: this.setFilterParams!.colDef,\n            column: this.setFilterParams!.column,\n            node: node,\n            data: node?.data,\n            api: this.setFilterParams!.api,\n            columnApi: this.setFilterParams!.columnApi,\n            context: this.setFilterParams!.context\n        }\n    }\n\n    public onNewRowsLoaded(): void {\n        if (!this.isValuesTakenFromGrid()) { return; }\n        this.syncAfterDataChange();\n    }\n\n    private isValuesTakenFromGrid(): boolean {\n        if (!this.valueModel) { return false; }\n        const valuesType = this.valueModel.getValuesType();\n        return valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can change the value of the filter once\n     * the filter has been already started\n     * @param values The values to use.\n     */\n    public setFilterValues(values: (V | null)[]): void {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        this.valueModel.overrideValues(values).then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        });\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can reset the values of the filter once that it has started.\n     */\n    public resetFilterValues(): void {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        this.valueModel.setValuesType(SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES);\n        this.syncAfterDataChange();\n    }\n\n    public refreshFilterValues(): void {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        // the model is still being initialised\n        if (!this.valueModel.isInitialised()) { return; }\n\n        this.valueModel.refreshValues().then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        });\n    }\n\n    public onAnyFilterChanged(): void {\n        // don't block the current action when updating the values for this filter\n        setTimeout(() => {\n            if (!this.isAlive()) { return; }\n\n            if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n            this.valueModel.refreshAfterAnyFilterChanged().then(refresh => {\n                if (refresh) {\n                    this.checkAndRefreshVirtualList();\n                    this.showOrHideResults();\n                }\n            });\n        }, 0);\n    }\n\n    private onMiniFilterInput() {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        if (!this.valueModel.setMiniFilter(this.eMiniFilter.getValue())) { return; }\n\n        const { applyMiniFilterWhileTyping, readOnly } = this.setFilterParams || {};\n        if (!readOnly && applyMiniFilterWhileTyping) {\n            this.filterOnAllVisibleValues(false);\n        } else {\n            this.updateUiAfterMiniFilterChange();\n        }\n    }\n\n    private updateUiAfterMiniFilterChange(): void {\n        if (!this.setFilterParams) { throw new Error('Set filter params have not been provided.'); }\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (excelMode == null || !!readOnly) {\n            this.checkAndRefreshVirtualList();\n        } else if (this.valueModel.getMiniFilter() == null) {\n            this.resetUiToActiveModel(this.getModel());\n        } else {\n            this.valueModel.selectAllMatchingMiniFilter(true);\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        }\n\n        this.showOrHideResults();\n    }\n\n    private showOrHideResults(): void {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n\n        const hideResults = this.valueModel.getMiniFilter() != null && this.valueModel.getDisplayedValueCount() < 1;\n\n        _.setDisplayed(this.eNoMatches, hideResults);\n        _.setDisplayed(this.eSetFilterList, !hideResults);\n    }\n\n    private resetMiniFilter(): void {\n        this.eMiniFilter.setValue(null, true);\n        this.valueModel?.setMiniFilter(null);\n    }\n\n    protected resetUiToActiveModel(currentModel: SetFilterModel | null, afterUiUpdatedFunc?: () => void): void {\n        // override the default behaviour as we don't always want to clear the mini filter\n        this.setModelAndRefresh(currentModel == null ? null : currentModel.values).then(() => {\n            this.onUiChanged(false, 'prevent');\n\n            afterUiUpdatedFunc?.();\n        });\n    }\n\n    protected handleCancelEnd(e: Event): void {\n        this.setMiniFilter(null);\n        super.handleCancelEnd(e);\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (e.key === KeyCode.ENTER && !excelMode && !readOnly) {\n            this.filterOnAllVisibleValues();\n        }\n    }\n\n    private filterOnAllVisibleValues(applyImmediately = true): void {\n        const { readOnly } = this.setFilterParams || {};\n\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n        if (!!readOnly) { throw new Error('Unable to filter in readOnly mode.'); }\n\n        this.valueModel.selectAllMatchingMiniFilter(true);\n        this.checkAndRefreshVirtualList();\n        this.onUiChanged(false, applyImmediately ? 'immediately' : 'debounce');\n        this.showOrHideResults();\n    }\n\n    private focusRowIfAlive(rowIndex: number | null): void {\n        if (rowIndex == null) { return; }\n\n        window.setTimeout(() => {\n            if (!this.virtualList) { throw new Error('Virtual list has not been created.'); }\n\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private onSelectAll(isSelected: boolean): void {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n        if (!this.virtualList) { throw new Error('Virtual list has not been created.'); }\n\n        if (isSelected) {\n            this.valueModel.selectAllMatchingMiniFilter();\n        } else {\n            this.valueModel.deselectAllMatchingMiniFilter();\n        }\n\n        this.refreshAfterSelection();\n    }\n\n    private onGroupItemSelected(item: SetFilterModelTreeItem, isSelected: boolean): void {\n        const recursiveGroupSelection = (i: SetFilterModelTreeItem) => {\n            if (i.children) {\n                i.children.forEach(childItem => recursiveGroupSelection(childItem));\n            } else {\n                this.selectItem(i.key!, isSelected);\n            }\n        };\n\n        recursiveGroupSelection(item);\n\n        this.refreshAfterSelection();\n    }\n\n    private onItemSelected(key: string | null, isSelected: boolean): void {\n        if (!this.valueModel) { throw new Error('Value model has not been created.'); }\n        if (!this.virtualList) { throw new Error('Virtual list has not been created.'); }\n\n        this.selectItem(key, isSelected);\n\n        this.refreshAfterSelection();\n    }\n\n    private selectItem(key: string | null, isSelected: boolean): void {\n        if (isSelected) {\n            this.valueModel!.selectKey(key);\n        } else {\n            this.valueModel!.deselectKey(key);\n        }\n    }\n\n    private onExpandAll(item: SetFilterModelTreeItem, isExpanded: boolean): void {\n        const recursiveExpansion = (i: SetFilterModelTreeItem) => {\n            if (i.filterPasses && i.available && i.children) {\n                i.children.forEach(childItem => recursiveExpansion(childItem));\n                i.expanded = isExpanded;\n            }\n        };\n\n        recursiveExpansion(item);\n\n        this.refreshAfterExpansion();\n    }\n    \n    private onExpandedChanged(item: SetFilterModelTreeItem, isExpanded: boolean): void {\n        item.expanded = isExpanded;\n\n        this.refreshAfterExpansion();\n    }\n    \n    private refreshAfterExpansion(): void {\n        const focusedRow = this.virtualList!.getLastFocusedRow();\n\n        this.valueModel!.updateDisplayedValues('expansion');\n\n        this.checkAndRefreshVirtualList();\n        this.focusRowIfAlive(focusedRow);\n    }\n\n    private refreshAfterSelection(): void {\n        const focusedRow = this.virtualList!.getLastFocusedRow();\n\n        this.checkAndRefreshVirtualList();\n        this.onUiChanged();\n        this.focusRowIfAlive(focusedRow);\n    }\n\n    public setMiniFilter(newMiniFilter: string | null): void {\n        this.eMiniFilter.setValue(newMiniFilter);\n        this.onMiniFilterInput();\n    }\n\n    public getMiniFilter(): string | null {\n        return this.valueModel ? this.valueModel.getMiniFilter() : null;\n    }\n\n    private checkAndRefreshVirtualList() {\n        if (!this.virtualList) { throw new Error('Virtual list has not been created.'); }\n\n        this.virtualList.refresh(!this.hardRefreshVirtualList);\n\n        if (this.hardRefreshVirtualList) {\n            this.hardRefreshVirtualList = false;\n        }\n    }\n\n    public getFilterKeys(): SetFilterModelValue {\n        return this.valueModel ? this.valueModel.getKeys() : [];\n    }\n\n    public getFilterValues(): (V | null)[] {\n        return this.valueModel ? this.valueModel.getValues() : [];\n    }\n\n    public getValues(): SetFilterModelValue {\n        return this.getFilterKeys();\n    }\n\n    public refreshVirtualList(): void {\n        if (this.setFilterParams && this.setFilterParams.refreshValuesOnOpen) {\n            this.refreshFilterValues();\n        } else {\n            this.checkAndRefreshVirtualList();\n        }\n    }\n\n    private translateForSetFilter(key: keyof ISetFilterLocaleText): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        return translate(key, DEFAULT_LOCALE_TEXT[key]);\n    }\n\n    private isSelectAllSelected(): boolean | undefined {\n        if (!this.setFilterParams || !this.valueModel) { return false; }\n\n        if (!this.setFilterParams.defaultToNothingSelected) {\n            // everything selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n\n            if (this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n        } else {\n            // nothing selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n\n            if (this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n        }\n        // returning `undefined` means the checkbox status is indeterminate.\n        return undefined;\n    }\n\n    private areAllChildrenSelected(item: SetFilterModelTreeItem): boolean | undefined {\n        const recursiveChildSelectionCheck = (i: SetFilterModelTreeItem): boolean | undefined => {\n            if (i.children) {\n                let someTrue = false;\n                let someFalse = false;\n                const mixed = i.children.some(child => {\n                    if (!child.filterPasses || !child.available) {\n                        return false;\n                    }\n                    const childSelected = recursiveChildSelectionCheck(child);\n                    if (childSelected === undefined) {\n                        return true;\n                    }\n                    if (childSelected) {\n                        someTrue = true;\n                    } else {\n                        someFalse = true;\n                    }\n                    return someTrue && someFalse;\n                });\n                // returning `undefined` means the checkbox status is indeterminate.\n                // if not mixed and some true, all must be true\n                return mixed ? undefined : someTrue;\n            } else {\n                return this.valueModel!.isKeySelected(i.key!);\n            }\n        };\n\n        if (!this.setFilterParams!.defaultToNothingSelected) {\n            // everything selected by default\n            return recursiveChildSelectionCheck(item);\n        } else {\n            // nothing selected by default\n            return this.valueModel!.hasSelections() && recursiveChildSelectionCheck(item);\n        }\n    }\n\n    public destroy(): void {\n        if (this.virtualList != null) {\n            this.virtualList.destroy();\n            this.virtualList = null;\n        }\n\n        super.destroy();\n    }\n\n    private caseFormat<T extends string | number | null>(valueToFormat: T): typeof valueToFormat {\n        if (valueToFormat == null || typeof valueToFormat !== 'string') {\n            return valueToFormat;\n        }\n        return this.caseSensitive ? valueToFormat : valueToFormat.toUpperCase() as T;\n    }\n\n    private resetExpansion(): void {\n        if (!this.setFilterParams?.treeList) {\n            return;\n        }\n\n        const selectAllItem = this.valueModel?.getSelectAllItem();\n\n        if (this.isSetFilterModelTreeItem(selectAllItem)) {\n            const recursiveCollapse = (i: SetFilterModelTreeItem) => {\n                if (i.children) {\n                    i.children.forEach(childItem => recursiveCollapse(childItem));\n                    i.expanded = false;\n                }\n            };\n            recursiveCollapse(selectAllItem);\n            this.valueModel!.updateDisplayedValues('expansion');\n        }\n    }\n\n    public getModelAsString(model: SetFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model, this);\n    }\n\n    protected getPositionableElement(): HTMLElement {\n        return this.eSetFilterList;\n    }\n}\n\nclass ModelWrapper<V> implements VirtualListModel {\n    constructor(private readonly model: SetValueModel<V>) {\n    }\n\n    public getRowCount(): number {\n        return this.model.getDisplayedValueCount();\n    }\n\n    public getRow(index: number): string | null {\n        return this.model.getDisplayedItem(index) as any;\n    }\n\n    public areRowsEqual(oldRow: string | null, newRow: string | null): boolean {\n        return oldRow === newRow;\n    }\n}\n\nclass ModelWrapperWithSelectAll<V> implements VirtualListModel {\n    constructor(\n        private readonly model: SetValueModel<V>,\n        private readonly isSelectAllSelected: (() => boolean | undefined)) {\n    }\n\n    public getRowCount(): number {\n        const showAddCurrentSelectionToFilter = this.model.showAddCurrentSelectionToFilter();\n        const outboundItems = showAddCurrentSelectionToFilter ? 2 : 1;\n        return this.model.getDisplayedValueCount() + outboundItems;\n    }\n\n    public getRow(index: number): string | null {\n        if (index === 0) {\n            return this.model.getSelectAllItem() as any;\n        }\n\n        const showAddCurrentSelectionToFilter = this.model.showAddCurrentSelectionToFilter();\n        const outboundItems = showAddCurrentSelectionToFilter ? 2 : 1;\n        if (index === 1 && showAddCurrentSelectionToFilter) {\n            return this.model.getAddSelectionToFilterItem() as any;\n        }\n\n        return this.model.getDisplayedItem(index - outboundItems) as any;\n    }\n\n    public areRowsEqual(oldRow: string | null, newRow: string | null): boolean {\n        return oldRow === newRow;\n    }\n}\n\n// isRowSelected is used by VirtualList to add aria tags for flat lists. We want to suppress this when using trees\nclass TreeModelWrapper implements VirtualListModel {\n    constructor(private readonly model: VirtualListModel) {}\n\n    public getRowCount(): number {\n        return this.model.getRowCount();\n    }\n\n    public getRow(index: number): SetFilterModelTreeItem | null {\n        return this.model.getRow(index);\n    }\n\n    public areRowsEqual(oldRow: SetFilterModelTreeItem | null, newRow: SetFilterModelTreeItem | null): boolean {\n        if (oldRow == null && newRow == null) {\n            return true;\n        }\n        return oldRow != null && newRow != null && oldRow.treeKey === newRow.treeKey && oldRow.depth === newRow.depth;\n    }\n}\n", "import {\n    _,\n    IClientSideRowModel,\n    SetFilterParams,\n    AgPromise,\n    SetFilterValues,\n    SetFilterValuesFunc,\n    SetFilterValuesFuncParams,\n    TextFilter,\n    TextFormatter,\n    ValueFormatterService,\n    IEventEmitter,\n    EventService,\n    RowNode,\n    SetFilterModelValue,\n    ValueFormatterParams,\n    GridOptionsService,\n    ColumnModel,\n    ValueService,\n    AgEventListener\n} from '@ag-grid-community/core';\nimport { ISetFilterLocaleText } from './localeText';\nimport { ClientSideValuesExtractor } from '../clientSideValueExtractor';\nimport { FlatSetDisplayValueModel } from './flatSetDisplayValueModel';\nimport { ISetDisplayValueModel, SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { TreeSetDisplayValueModel } from './treeSetDisplayValueModel';\nimport { SetValueModelFilteringKeys } from './filteringKeys';\n\nexport enum SetFilterModelValuesType {\n    PROVIDED_LIST, PROVIDED_CALLBACK, TAKEN_FROM_GRID_VALUES\n}\n\nexport interface SetValueModelParams<V> {\n    valueFormatterService: ValueFormatterService,\n    gridOptionsService: GridOptionsService,\n    columnModel: ColumnModel,\n    valueService: ValueService,\n    filterParams: SetFilterParams<any, V>,\n    setIsLoading: (loading: boolean) => void,\n    translate: (key: keyof ISetFilterLocaleText) => string,\n    caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat,\n    createKey: (value: V | null | undefined, node?: RowNode) => string | null,\n    valueFormatter?: (params: ValueFormatterParams) => string,\n    usingComplexObjects?: boolean,\n    treeDataTreeList?: boolean,\n    groupingTreeList?: boolean,\n    addManagedListener: (event: string, listener: (event?: any) => void) => (() => null) | undefined\n}\n\n/** @param V type of value in the Set Filter */\nexport class SetValueModel<V> implements IEventEmitter {\n    public static EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';\n\n    private readonly gridOptionsService: GridOptionsService;\n    private readonly localEventService = new EventService();\n    private formatter: TextFormatter;\n    private suppressSorting: boolean;\n    private readonly clientSideValuesExtractor: ClientSideValuesExtractor<V>;\n    private readonly doesRowPassOtherFilters: (node: RowNode) => boolean;\n    private readonly keyComparator: (a: string | null, b: string | null) => number;\n    private readonly entryComparator: (a: [string | null, V | null], b: [string | null, V | null]) => number;\n    private readonly compareByValue: boolean;\n    private readonly convertValuesToStrings: boolean;\n    private readonly caseSensitive: boolean;\n    private displayValueModel: ISetDisplayValueModel<V>;\n    private filterParams: SetFilterParams<any, V>;\n    private readonly setIsLoading: (loading: boolean) => void;\n    private readonly translate: (key: keyof ISetFilterLocaleText) => string;\n    private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n    private readonly createKey: (value: V | null | undefined, node?: RowNode) => string | null;\n    private readonly usingComplexObjects: boolean;\n\n    private valuesType: SetFilterModelValuesType;\n    private miniFilterText: string | null = null;\n\n    /** When true, in excelMode = 'windows', it adds previously selected filter items to newly checked filter selection */\n    private addCurrentSelectionToFilter: boolean = false;\n\n    /** Values provided to the filter for use. */\n    private providedValues: SetFilterValues<any, V> | null = null;\n\n    /** Values can be loaded asynchronously, so wait on this promise if you need to ensure values have been loaded. */\n    private allValuesPromise: AgPromise<(string | null)[]>;\n\n    /** All possible values for the filter, sorted if required. */\n    private allValues: Map<string | null, V | null> = new Map();\n\n    /** Remaining keys when filters from other columns have been applied. */\n    private availableKeys = new Set<string | null>();\n\n    /** Keys that have been selected for this filter. */\n    private selectedKeys = new Set<string | null>();\n\n    /**\n     * Here we keep track of the keys that are currently being used for filtering.\n     * In most cases, the filtering keys are the same as the selected keys,\n     * but for the specific case when excelMode = 'windows' and the user has ticked 'Add current selection to filter',\n     * the filtering keys can be different from the selected keys.\n     */\n    private filteringKeys: SetValueModelFilteringKeys;\n\n    private initialised: boolean = false;\n\n    constructor(params: SetValueModelParams<V>) {\n        const {\n            usingComplexObjects,\n            columnModel,\n            valueService,\n            treeDataTreeList,\n            groupingTreeList,\n            filterParams,\n            gridOptionsService,\n            valueFormatterService,\n            valueFormatter,\n            addManagedListener\n        } = params;\n        const {\n            column,\n            colDef,\n            textFormatter,\n            doesRowPassOtherFilter,\n            suppressSorting,\n            comparator,\n            rowModel,\n            values,\n            caseSensitive,\n            convertValuesToStrings,\n            treeList,\n            treeListPathGetter,\n            treeListFormatter\n        } = filterParams;\n\n        this.filterParams = filterParams;\n        this.gridOptionsService = gridOptionsService;\n        this.setIsLoading = params.setIsLoading;\n        this.translate = params.translate;\n        this.caseFormat = params.caseFormat;\n        this.createKey = params.createKey;\n        this.usingComplexObjects = !!params.usingComplexObjects;\n        this.formatter = textFormatter || TextFilter.DEFAULT_FORMATTER;\n        this.doesRowPassOtherFilters = doesRowPassOtherFilter;\n        this.suppressSorting = suppressSorting || false;\n        this.convertValuesToStrings = !!convertValuesToStrings;\n        this.filteringKeys = new SetValueModelFilteringKeys({ caseFormat: this.caseFormat });\n        const keyComparator = comparator ?? colDef.comparator as (a: any, b: any) => number;\n        const treeDataOrGrouping = !!treeDataTreeList || !!groupingTreeList;\n        // If using complex objects and a comparator is provided, sort by values, otherwise need to sort by the string keys.\n        // Also if tree data, grouping, or date with tree list, then need to do value sort\n        this.compareByValue = !!((usingComplexObjects && keyComparator) || treeDataOrGrouping || (treeList && !treeListPathGetter));\n        if (treeDataOrGrouping && !keyComparator) {\n            this.entryComparator = this.createTreeDataOrGroupingComparator() as any;\n        } else if (treeList && !treeListPathGetter && !keyComparator) {\n            this.entryComparator = ([_aKey, aValue]: [string | null, V | null], [_bKey, bValue]: [string | null, V | null]) => _.defaultComparator(aValue, bValue);\n        } else {\n            this.entryComparator = ([_aKey, aValue]: [string | null, V | null], [_bKey, bValue]: [string | null, V | null]) => keyComparator(aValue, bValue);\n        }\n        this.keyComparator = keyComparator as any ?? _.defaultComparator;\n        this.caseSensitive = !!caseSensitive\n        const getDataPath = gridOptionsService.get('getDataPath');\n        const groupAllowUnbalanced = gridOptionsService.get('groupAllowUnbalanced');\n\n        if (rowModel.getType() === 'clientSide') {\n            this.clientSideValuesExtractor = new ClientSideValuesExtractor(\n                rowModel as IClientSideRowModel,\n                this.filterParams,\n                this.createKey,\n                this.caseFormat,\n                columnModel,\n                valueService,\n                treeDataOrGrouping,\n                !!treeDataTreeList,\n                getDataPath,\n                groupAllowUnbalanced,\n                addManagedListener\n            );\n        }\n\n        if (values == null) {\n            this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n        } else {\n            this.valuesType = Array.isArray(values) ?\n                SetFilterModelValuesType.PROVIDED_LIST :\n                SetFilterModelValuesType.PROVIDED_CALLBACK;\n\n            this.providedValues = values;\n        }\n\n        this.displayValueModel = treeList ? new TreeSetDisplayValueModel(\n            this.formatter,\n            treeListPathGetter,\n            treeListFormatter,\n            treeDataTreeList || groupingTreeList\n        ) : new FlatSetDisplayValueModel<V>(\n            valueFormatterService,\n            valueFormatter,\n            this.formatter,\n            column\n        ) as any;\n\n        this.updateAllValues().then(updatedKeys => this.resetSelectionState(updatedKeys || []));\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener, async?: boolean): void {\n        this.localEventService.addEventListener(eventType, listener, async);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener, async?: boolean): void {\n        this.localEventService.removeEventListener(eventType, listener, async);\n    }\n\n    public updateOnParamsChange(filterParams: SetFilterParams<any, V>): AgPromise<void> {\n        return new AgPromise<void>(resolve => {\n            const {\n                values,\n                textFormatter,\n                suppressSorting,\n            } = filterParams;\n\n            const currentProvidedValues = this.providedValues;\n            const currentSuppressSorting = this.suppressSorting;\n\n            this.filterParams = filterParams;\n            this.formatter = textFormatter || TextFilter.DEFAULT_FORMATTER;\n\n            this.suppressSorting = suppressSorting || false;\n            this.providedValues = values ?? null;\n\n            // Rebuild values when values or their sort order changes\n            if (this.providedValues !== currentProvidedValues || this.suppressSorting !== currentSuppressSorting) {\n                if (!values || values.length === 0) {\n                    this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n                    this.providedValues = null;\n                } else {\n                    const isArrayOfCallback = Array.isArray(values) && values.length > 0 && typeof values[0] === 'function';\n                    this.valuesType = isArrayOfCallback ?\n                        SetFilterModelValuesType.PROVIDED_CALLBACK :\n                        SetFilterModelValuesType.PROVIDED_LIST;\n                }\n\n                const currentModel = this.getModel();\n                this.updateAllValues().then((updatedKeys) => {\n                    this.setModel(currentModel).then(() => resolve());\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Re-fetches the values used in the filter from the value source.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    public refreshValues(): AgPromise<void> {\n        return new AgPromise<void>(resolve => {\n            // don't get the model until values are resolved, as there could be queued setModel calls\n            this.allValuesPromise.then(() => {\n                const currentModel = this.getModel();\n\n                this.updateAllValues();\n\n                // ensure model is updated for new values\n                this.setModel(currentModel).then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Overrides the current values being used for the set filter.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    public overrideValues(valuesToUse: (V | null)[]): AgPromise<void> {\n        return new AgPromise<void>(resolve => {\n            // wait for any existing values to be populated before overriding\n            this.allValuesPromise.then(() => {\n                this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n                this.providedValues = valuesToUse;\n                this.refreshValues().then(() => resolve());\n            });\n        });\n    }\n\n    /** @return has anything been updated */\n    public refreshAfterAnyFilterChanged(): AgPromise<boolean> {\n        if (this.showAvailableOnly()) {\n            return this.allValuesPromise.then(keys => {\n                this.updateAvailableKeys(keys ?? [], 'otherFilter');\n                return true;\n            });\n        }\n        return AgPromise.resolve(false);\n    }\n\n    public isInitialised(): boolean {\n        return this.initialised;\n    }\n\n    private updateAllValues(): AgPromise<(string | null)[]> {\n        this.allValuesPromise = new AgPromise<(string | null)[]>(resolve => {\n            switch (this.valuesType) {\n                case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n                    this.getValuesFromRowsAsync(false).then(values => resolve(this.processAllValues(values)));\n\n                    break;\n                case SetFilterModelValuesType.PROVIDED_LIST: {\n                    resolve(this.processAllValues(this.uniqueValues(this.validateProvidedValues(this.providedValues as (V | null)[]))));\n\n                    break;\n                }\n\n                case SetFilterModelValuesType.PROVIDED_CALLBACK: {\n                    this.setIsLoading(true);\n\n                    const callback = this.providedValues as SetFilterValuesFunc<any, V>;\n                    const { column, colDef } = this.filterParams;\n                    const params: SetFilterValuesFuncParams<any, V> = this.gridOptionsService.addGridCommonParams({\n                        success: values => {\n                            this.setIsLoading(false);\n\n                            resolve(this.processAllValues(this.uniqueValues(this.validateProvidedValues(values))));\n                        },\n                        colDef,\n                        column\n                    });\n\n                    window.setTimeout(() => callback(params), 0);\n\n                    break;\n                }\n\n                default:\n                    throw new Error('Unrecognised valuesType');\n            }\n        });\n\n        this.allValuesPromise.then(values => this.updateAvailableKeys(values || [], 'reload')).then(() => this.initialised = true);\n\n        return this.allValuesPromise;\n    }\n\n    private processAllValues(values: Map<string | null, V | null> | null): (string | null)[] {\n        const sortedKeys = this.sortKeys(values);\n\n        this.allValues = values ?? new Map();\n        \n        return sortedKeys;\n    }\n\n    private validateProvidedValues(values: (V | null)[]): (V | null)[]{\n        if (this.usingComplexObjects && values?.length) {\n            const firstValue = values[0];\n            if (firstValue && typeof firstValue !== 'object' && typeof firstValue !== 'function') {\n                const firstKey = this.createKey(firstValue);\n                if  (firstKey == null) {\n                    _.warnOnce('Set Filter Key Creator is returning null for provided values and provided values are primitives. Please provide complex objects or set convertValuesToStrings=true in the filterParams. See https://www.ag-grid.com/javascript-data-grid/filter-set-filter-list/#filter-value-types');\n                } else {\n                    _.warnOnce('Set Filter has a Key Creator, but provided values are primitives. Did you mean to provide complex objects or enable convertValuesToStrings?');\n                }\n            }\n        }\n        return values;\n    }\n\n    public setValuesType(value: SetFilterModelValuesType) {\n        this.valuesType = value;\n    }\n\n    public getValuesType(): SetFilterModelValuesType {\n        return this.valuesType;\n    }\n\n    public isKeyAvailable(key: string | null): boolean {\n        return this.availableKeys.has(key);\n    }\n\n    private showAvailableOnly(): boolean {\n        return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n\n    private updateAvailableKeys(allKeys: (string | null)[], source: 'reload' | 'otherFilter'): void {\n        const availableKeys = this.showAvailableOnly() ? this.sortKeys(this.getValuesFromRows(true)) : allKeys;\n\n        this.availableKeys = new Set(availableKeys);\n        this.localEventService.dispatchEvent({ type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED });\n\n        this.updateDisplayedValues(source, allKeys);\n    }\n\n    public sortKeys(nullableValues: Map<string | null, V | null> | null): (string | null)[] {\n        const values = nullableValues ?? new Map();\n\n        if (this.suppressSorting) { return Array.from(values.keys()); }\n\n        let sortedKeys;\n        if (this.compareByValue) {\n            sortedKeys = Array.from(values.entries()).sort(this.entryComparator).map(([key]) => key);\n        } else {\n            sortedKeys = Array.from(values.keys()).sort(this.keyComparator);\n        }\n\n        if (this.filterParams.excelMode && values.has(null)) {\n            // ensure the blank value always appears last\n            sortedKeys = sortedKeys.filter(v => v != null);\n            sortedKeys.push(null);\n        }\n\n        return sortedKeys;\n    }\n\n    private getParamsForValuesFromRows(removeUnavailableValues = false): {\n        predicate: (node: RowNode) => boolean,\n        existingValues?: Map<string | null, V | null>\n    } | null {\n        if (!this.clientSideValuesExtractor) {\n            _.doOnce(() => {\n                console.error('AG Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');\n            }, 'setFilterValueNotCSRM');\n            return null;\n        }\n\n        const predicate = (node: RowNode) => (!removeUnavailableValues || this.doesRowPassOtherFilters(node));\n\n        const existingValues = removeUnavailableValues && !this.caseSensitive ? this.allValues : undefined;\n\n        return { predicate, existingValues };\n    }\n\n    private getValuesFromRows(removeUnavailableValues = false): Map<string | null, V | null> | null {\n        const params = this.getParamsForValuesFromRows(removeUnavailableValues);\n        if (!params) { return null; }\n\n        return this.clientSideValuesExtractor.extractUniqueValues(params.predicate, params.existingValues);\n    }\n\n    private getValuesFromRowsAsync(removeUnavailableValues = false): AgPromise<Map<string | null, V | null> | null> {\n        const params = this.getParamsForValuesFromRows(removeUnavailableValues);\n        if (!params) {\n            return AgPromise.resolve(null);\n        }\n\n        return this.clientSideValuesExtractor.extractUniqueValuesAsync(params.predicate, params.existingValues);\n    }\n\n    /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n    public setMiniFilter(value?: string | null): boolean {\n        value = _.makeNull(value);\n\n        if (this.miniFilterText === value) {\n            //do nothing if filter has not changed\n            return false;\n        }\n\n        if (value === null) {\n            // Reset 'Add current selection to filter' checkbox when clearing mini filter\n            this.setAddCurrentSelectionToFilter(false);\n        }\n\n        this.miniFilterText = value;\n        this.updateDisplayedValues('miniFilter');\n\n        return true;\n    }\n\n    public getMiniFilter(): string | null {\n        return this.miniFilterText;\n    }\n\n    public updateDisplayedValues(source: 'reload' | 'otherFilter' | 'miniFilter' | 'expansion', allKeys?: (string | null)[]): void {\n        if (source === 'expansion') {\n            this.displayValueModel.refresh();\n            return;\n        }\n\n        // if no filter, just display all available values\n        if (this.miniFilterText == null) {\n            this.displayValueModel.updateDisplayedValuesToAllAvailable(\n                (key: string | null) => this.getValue(key),\n                allKeys,\n                this.availableKeys,\n                source,\n            );\n            return;\n        }\n\n        // if filter present, we filter down the list\n        // to allow for case insensitive searches, upper-case both filter text and value\n        const formattedFilterText = this.caseFormat(this.formatter(this.miniFilterText) || '');\n\n        const matchesFilter = (valueToCheck: string | null): boolean =>\n            valueToCheck != null && this.caseFormat(valueToCheck).indexOf(formattedFilterText) >= 0;\n\n        const nullMatchesFilter = !!this.filterParams.excelMode && matchesFilter(this.translate('blanks'));\n\n        this.displayValueModel.updateDisplayedValuesToMatchMiniFilter(\n            (key: string | null) => this.getValue(key),\n            allKeys,\n            this.availableKeys,\n            matchesFilter,\n            nullMatchesFilter,\n            source);\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.displayValueModel.getDisplayedValueCount();\n    }\n\n    public getDisplayedItem(index: number): string | SetFilterModelTreeItem | null {\n        return this.displayValueModel.getDisplayedItem(index);\n    }\n\n    public getSelectAllItem(): string | SetFilterModelTreeItem  {\n        return this.displayValueModel.getSelectAllItem();\n    }\n\n    public getAddSelectionToFilterItem(): string | SetFilterModelTreeItem {\n        return this.displayValueModel.getAddSelectionToFilterItem();\n    }\n\n    public hasSelections(): boolean {\n        return this.filterParams.defaultToNothingSelected ?\n            this.selectedKeys.size > 0 :\n            this.allValues.size !== this.selectedKeys.size;\n    }\n\n    public getKeys(): SetFilterModelValue {\n        return Array.from(this.allValues.keys());\n    }\n\n    public getValues(): (V | null)[] {\n        return Array.from(this.allValues.values());\n    }\n\n    public getValue(key: string | null): V | null {\n        return this.allValues.get(key)!;\n    }\n\n    public setAddCurrentSelectionToFilter(value: boolean) {\n        this.addCurrentSelectionToFilter = value;\n    }\n\n    private isInWindowsExcelMode(): boolean {\n        return this.filterParams.excelMode === 'windows';\n    }\n\n    public isAddCurrentSelectionToFilterChecked(): boolean {\n        return this.isInWindowsExcelMode() && this.addCurrentSelectionToFilter;\n    }\n\n    public showAddCurrentSelectionToFilter(): boolean {\n        // We only show the 'Add current selection to filter' option\n        // when excel mode is enabled with 'windows' mode\n        // and when the users types a value in the mini filter.\n        return (\n            this.isInWindowsExcelMode()\n            && _.exists(this.miniFilterText)\n            && this.miniFilterText.length > 0\n        );\n    }\n\n    public selectAllMatchingMiniFilter(clearExistingSelection = false): void {\n        if (this.miniFilterText == null) {\n            // ensure everything is selected\n            this.selectedKeys = new Set(this.allValues.keys());\n        } else {\n            // ensure everything that matches the mini filter is selected\n            if (clearExistingSelection) {\n                this.selectedKeys.clear();\n            }\n\n            this.displayValueModel.forEachDisplayedKey(key => this.selectedKeys.add(key));\n        }\n    }\n\n    public deselectAllMatchingMiniFilter(): void {\n        if (this.miniFilterText == null) {\n            // ensure everything is deselected\n            this.selectedKeys.clear();\n        } else {\n            // ensure everything that matches the mini filter is deselected\n            this.displayValueModel.forEachDisplayedKey(key => this.selectedKeys.delete(key));\n        }\n    }\n\n    public selectKey(key: string | null): void {\n        this.selectedKeys.add(key);\n    }\n\n    public deselectKey(key: string | null): void {\n        if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n            // ensure we're starting from the correct \"everything selected\" state\n            this.resetSelectionState(this.displayValueModel.getDisplayedKeys());\n        }\n\n        this.selectedKeys.delete(key);\n    }\n\n    public isKeySelected(key: string | null): boolean {\n        return this.selectedKeys.has(key);\n    }\n\n    public isEverythingVisibleSelected(): boolean {\n        return !this.displayValueModel.someDisplayedKey(it => !this.isKeySelected(it));\n    }\n\n    public isNothingVisibleSelected(): boolean {\n        return !this.displayValueModel.someDisplayedKey(it => this.isKeySelected(it));\n    }\n\n    public getModel(): SetFilterModelValue | null {\n        if (!this.hasSelections()) {\n            return null;\n        }\n\n        // When excelMode = 'windows' and the user has ticked 'Add current selection to filter'\n        // the filtering keys can be different from the selected keys, and they should be included\n        // in the model.\n        const filteringKeys = this.isAddCurrentSelectionToFilterChecked()\n            ? this.filteringKeys.allFilteringKeys()\n            : null;\n\n        if (filteringKeys && filteringKeys.size > 0) {\n            if (this.selectedKeys) {\n                // When existing filtering keys are present along with selected keys,\n                // we combine them and return the result.\n                // We use a set structure to avoid duplicates\n                const modelKeys = new Set<string | null>([\n                    ...Array.from(filteringKeys),\n                    ...Array.from(this.selectedKeys).filter(key => !filteringKeys.has(key)),\n                ]);\n                return Array.from(modelKeys);\n            }\n\n            return Array.from(filteringKeys);\n        }\n\n        // No extra filtering keys are present - so just return the selected keys\n        return Array.from(this.selectedKeys);\n    }\n\n    public setModel(model: SetFilterModelValue | null): AgPromise<void> {\n        return this.allValuesPromise.then(keys => {\n            if (model == null) {\n                this.resetSelectionState(keys ?? []);\n            } else {\n                // select all values from the model that exist in the filter\n                this.selectedKeys.clear();\n\n                const existingFormattedKeys: Map<string | null, string | null> = new Map();\n                this.allValues.forEach((_value, key) => {\n                    existingFormattedKeys.set(this.caseFormat(key), key);\n                });\n\n                model.forEach(unformattedKey => {\n                    const formattedKey = this.caseFormat(_.makeNull(unformattedKey));\n                    const existingUnformattedKey = existingFormattedKeys.get(formattedKey);\n                    if (existingUnformattedKey !== undefined) {\n                        this.selectKey(existingUnformattedKey);\n                    }\n                });\n            }\n        });\n    }\n\n    private uniqueValues(values: (V | null)[] | null): Map<string | null, V | null> {\n        const uniqueValues: Map<string | null, V | null> = new Map();\n        const formattedKeys: Set<string | null> = new Set();\n        (values ?? []).forEach(value => {\n            const valueToUse = _.makeNull(value);\n            const unformattedKey = this.convertAndGetKey(valueToUse);\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                uniqueValues.set(unformattedKey, valueToUse);\n            }\n        });\n\n        return uniqueValues;\n    }\n\n    private convertAndGetKey(value: V | null): string | null {\n        return this.convertValuesToStrings ? value as any : this.createKey(value);\n    }\n\n    private resetSelectionState(keys: (string | null)[]): void {\n        if (this.filterParams.defaultToNothingSelected) {\n            this.selectedKeys.clear();\n        } else {\n            this.selectedKeys = new Set(keys);\n        }\n    }\n\n    public hasGroups(): boolean {\n        return this.displayValueModel.hasGroups();\n    }\n\n    private createTreeDataOrGroupingComparator(): (a: [string | null, string[] | null], b: [string | null, string[] | null]) => number {\n        return ([_aKey, aValue]: [string | null, string[] | null], [_bKey, bValue]: [string | null, string[] | null]) => {\n            if (aValue == null) {\n                return bValue == null ? 0 : -1;\n            } else if (bValue == null) {\n                return 1;\n            }\n            for (let i = 0; i < aValue.length; i++) {\n                if (i >= bValue.length) {\n                    return 1;\n                }\n                const diff = _.defaultComparator(aValue[i], bValue[i]);\n                if (diff !== 0) {\n                    return diff;\n                }\n            }\n            return 0;\n        };\n    }\n\n    public setAppliedModelKeys(appliedModelKeys: Set<string | null> | null): void {\n        this.filteringKeys.setFilteringKeys(appliedModelKeys);\n    }\n\n    public addToAppliedModelKeys(appliedModelKey: string | null): void {\n        this.filteringKeys.addFilteringKey(appliedModelKey);\n    }\n\n    public getAppliedModelKeys(): Set<string | null> | null {\n        return this.filteringKeys.allFilteringKeys();\n    }\n\n    public getCaseFormattedAppliedModelKeys(): Set<string | null> | null {\n        return this.filteringKeys.allFilteringKeysCaseFormatted()\n    }\n\n    public hasAppliedModelKey(appliedModelKey: string | null): boolean {\n        return this.filteringKeys.hasCaseFormattedFilteringKey(appliedModelKey);\n    }\n\n    public hasAnyAppliedModelKey(): boolean {\n        return !this.filteringKeys.noAppliedFilteringKeys();\n    }\n}\n", "import {\n    AgPromise,\n    Column,\n    ColumnModel,\n    Events,\n    GetDataPath,\n    IClientSideRowModel,\n    SetFilterParams,\n    RowNode,\n    ValueService,\n    _\n} from '@ag-grid-community/core';\n\n/** @param V type of value in the Set Filter */\nexport class ClientSideValuesExtractor<V> {\n    constructor(\n        private readonly rowModel: IClientSideRowModel,\n        private readonly filterParams: SetFilterParams<any, V>,\n        private readonly createKey: (value: V | null | undefined, node?: RowNode) => string | null,\n        private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat,\n        private readonly columnModel: ColumnModel,\n        private readonly valueService: ValueService,\n        private readonly treeDataOrGrouping: boolean,\n        private readonly treeData: boolean,\n        private readonly getDataPath: GetDataPath | undefined,\n        private readonly groupAllowUnbalanced: boolean,\n        private readonly addManagedListener: (event: string, listener: (event?: any) => void) => (() => null) | undefined\n    ) {\n    }\n\n    public extractUniqueValuesAsync(predicate: (node: RowNode) => boolean, existingValues?: Map<string | null, V | null>): AgPromise<Map<string | null, V | null>> {\n        return new AgPromise(resolve => {\n            if (this.rowModel.isRowDataLoaded()) {\n                resolve(this.extractUniqueValues(predicate, existingValues));\n            } else {\n                const destroyFunc = this.addManagedListener(Events.EVENT_ROW_COUNT_READY, () => {\n                    destroyFunc?.();\n                    resolve(this.extractUniqueValues(predicate, existingValues));\n                });\n            }\n        });\n    }\n\n    public extractUniqueValues(predicate: (node: RowNode) => boolean, existingValues?: Map<string | null, V | null>): Map<string | null, V | null> {\n        const values: Map<string | null, V | null> = new Map();\n        const existingFormattedKeys = this.extractExistingFormattedKeys(existingValues);\n        const formattedKeys: Set<string | null> = new Set();\n        const treeData = this.treeData && !!this.getDataPath;\n        const groupedCols = this.columnModel.getRowGroupColumns();\n\n        const addValue = (unformattedKey: string | null, value: V | null | undefined) => {\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                let keyToAdd = unformattedKey;\n                let valueToAdd = _.makeNull(value);\n                // when case insensitive, we pick the first value to use. if this is later filtered out,\n                // we still want to use the original value and not one with a different case\n                const existingUnformattedKey = existingFormattedKeys?.get(formattedKey);\n                if (existingUnformattedKey != null) {\n                    keyToAdd = existingUnformattedKey;\n                    valueToAdd = existingValues!.get(existingUnformattedKey)!;\n                }\n                values.set(keyToAdd, valueToAdd);\n            }\n        };\n\n        this.rowModel.forEachLeafNode(node => {\n            // only pull values from rows that have data. this means we skip filler group nodes.\n            if (!node.data || !predicate(node)) { return; }\n            if (this.treeDataOrGrouping) {\n                this.addValueForTreeDataOrGrouping(node, treeData, groupedCols, addValue);\n                return;\n            }\n\n            let value = this.getValue(node);\n\n            if (this.filterParams.convertValuesToStrings) {\n                // for backwards compatibility - keeping separate as it will eventually be removed\n                this.addValueForConvertValuesToString(node, value, addValue);\n                return;\n            }\n\n            if (value != null && Array.isArray(value)) {\n                value.forEach(x => {\n                    addValue(this.createKey(x, node), x);\n                });\n                if (value.length === 0) {\n                    addValue(null, null);\n                }\n            } else {\n                addValue(this.createKey(value, node), value);\n            }\n        });\n\n        return values;\n    }\n\n    private addValueForConvertValuesToString(node: RowNode, value: V | null | undefined, addValue: (unformattedKey: string | null, value: V | null) => void): void {\n        const key = this.createKey(value, node);\n        if (key != null && Array.isArray(key)) {\n            key.forEach(part => {\n                const processedPart = _.toStringOrNull(_.makeNull(part));\n                addValue(processedPart, processedPart as any);\n            });\n            if (key.length === 0) {\n                addValue(null, null);\n            }\n        } else {\n            addValue(key, key as any);\n        }\n    }\n\n    private addValueForTreeDataOrGrouping(node: RowNode, treeData: boolean, groupedCols: Column[], addValue: (unformattedKey: string | null, value: V | null) => void): void {\n        let dataPath: string[] | null;\n        if (treeData) {\n            if (node.childrenAfterGroup?.length) { return; }\n            dataPath = this.getDataPath!(node.data);\n        } else {\n            dataPath = groupedCols.map(groupCol => this.valueService.getKeyForNode(groupCol, node));\n            dataPath.push(this.getValue(node) as any);\n        }\n        if (dataPath) {\n            dataPath = dataPath.map(treeKey => _.toStringOrNull(_.makeNull(treeKey))) as any;\n        }\n        if (!treeData && this.groupAllowUnbalanced && dataPath?.some(treeKey => treeKey == null)) {\n            dataPath = dataPath.filter(treeKey => treeKey != null);\n        }\n        addValue(this.createKey(dataPath as any), dataPath as any);\n    }\n\n    private getValue(node: RowNode): V | null | undefined {\n        return this.filterParams.getValue(node);\n    }\n\n    private extractExistingFormattedKeys(existingValues?: Map<string | null, V | null>): Map<string | null, string | null> | null {\n        if (!existingValues) {\n            return null;\n        }\n        const existingFormattedKeys: Map<string | null, string | null> = new Map();\n        existingValues.forEach((_value, key) => {\n            existingFormattedKeys.set(this.caseFormat(key), key);\n        });\n        return existingFormattedKeys;\n    }\n}", "export interface ISetDisplayValueModel<V> {\n    updateDisplayedValuesToAllAvailable(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void;\n\n    updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined, \n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void;\n\n    getDisplayedValueCount(): number;\n\n    getDisplayedItem(index: number): string | SetFilterModelTreeItem | null;\n\n    getSelectAllItem(): string | SetFilterModelTreeItem;\n\n    getAddSelectionToFilterItem(): string | SetFilterModelTreeItem;\n\n    getDisplayedKeys(): (string | null)[];\n\n    forEachDisplayedKey(func: (key: string | null) => void): void;\n\n    someDisplayedKey(func: (key: string | null) => boolean): boolean;\n\n    hasGroups(): boolean;\n\n    refresh(): void;\n}\n\nexport class SetFilterDisplayValue {\n    public static readonly SELECT_ALL = '__AG_SELECT_ALL__';\n    public static readonly ADD_SELECTION_TO_FILTER = '__AG_ADD_SELECTION_TO_FILTER__';\n}\n\nexport interface SetFilterModelTreeItem {\n    treeKey: string | null;\n    depth: number;\n    filterPasses: boolean;\n    available: boolean;\n    expanded?: boolean;\n    children?: SetFilterModelTreeItem[];\n    key?: string | null;\n    parentTreeKeys: (string | null)[];\n}\n", "import { Column, TextFormatter, ValueFormatterParams, ValueFormatterService } from '@ag-grid-community/core';\nimport { ISetDisplayValueModel, SetFilterDisplayValue } from './iSetDisplayValueModel';\n\nexport class FlatSetDisplayValueModel<V> implements ISetDisplayValueModel<V> {\n    /** All keys that are currently displayed, after the mini-filter has been applied. */\n    private displayedKeys: (string | null)[] = [];\n\n    constructor(\n        private readonly valueFormatterService: ValueFormatterService,\n        private readonly valueFormatter: ((params: ValueFormatterParams) => string) | undefined,\n        private readonly formatter: TextFormatter,\n        private readonly column: Column\n    ) {}\n\n    public updateDisplayedValuesToAllAvailable(\n        _getValue: (key: string | null) => V | null,\n        _allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>\n    ): void {\n        this.displayedKeys = Array.from(availableKeys);\n    }\n\n    public updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        _allKeys: Iterable<string | null> | undefined, \n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean\n    ): void {\n        this.displayedKeys = [];\n\n        for (let key of availableKeys) {\n            if (key == null) {\n                if (nullMatchesFilter) {\n                    this.displayedKeys.push(key);\n                }\n            } else {\n                const value = getValue(key);\n                const valueFormatterValue = this.valueFormatterService.formatValue(\n                    this.column, null, value, this.valueFormatter, false);\n\n                const textFormatterValue = this.formatter(valueFormatterValue);\n\n                if (matchesFilter(textFormatterValue)) {\n                    this.displayedKeys.push(key);\n                }\n            }\n        }\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.displayedKeys.length;\n    }\n\n    public getDisplayedItem(index: number): string | null {\n        return this.displayedKeys[index];\n    }\n\n    getSelectAllItem(): string {\n        return SetFilterDisplayValue.SELECT_ALL;\n    }\n\n    getAddSelectionToFilterItem(): string {\n        return SetFilterDisplayValue.ADD_SELECTION_TO_FILTER;\n    }\n\n\n    public getDisplayedKeys(): (string | null)[] {\n        return this.displayedKeys;\n    }\n\n    public forEachDisplayedKey(func: (key: string | null) => void): void {\n        this.displayedKeys.forEach(func);\n    }\n\n    public someDisplayedKey(func: (key: string | null) => boolean): boolean {\n        return this.displayedKeys.some(func);\n    }\n\n    public hasGroups(): boolean {\n        return false;\n    }\n\n    public refresh(): void {\n        // not used\n    }\n}", "import { _, TextFormatter } from '@ag-grid-community/core';\nimport { ISetDisplayValueModel, SetFilterDisplayValue, SetFilterModelTreeItem } from './iSetDisplayValueModel';\n\nexport class TreeSetDisplayValueModel<V> implements ISetDisplayValueModel<V> {\n    private static readonly DATE_TREE_LIST_PATH_GETTER = (date: Date | null) => date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;\n\n    /** all displayed items in a tree structure */\n    private allDisplayedItemsTree: SetFilterModelTreeItem[] = [];\n    /** all displayed items flattened and filtered */\n    private activeDisplayedItemsFlat: SetFilterModelTreeItem[] = [];\n\n    private groupsExist: boolean;\n\n    private readonly selectAllItem: SetFilterModelTreeItem = {\n        depth: 0,\n        filterPasses: true,\n        available: true,\n        treeKey: SetFilterDisplayValue.SELECT_ALL,\n        children: this.allDisplayedItemsTree,\n        expanded: true,\n        key: SetFilterDisplayValue.SELECT_ALL,\n        parentTreeKeys: []\n    };\n\n    private readonly addSelectionToFilterItem: SetFilterModelTreeItem = {\n        depth: 0,\n        filterPasses: true,\n        available: true,\n        treeKey: SetFilterDisplayValue.ADD_SELECTION_TO_FILTER,\n        expanded: true,\n        key: SetFilterDisplayValue.ADD_SELECTION_TO_FILTER,\n        parentTreeKeys: []\n    };\n\n    constructor(\n        private readonly formatter: TextFormatter,\n        private readonly treeListPathGetter?: (value: V | null) => string[] | null,\n        private readonly treeListFormatter?: (pathKey: string | null, level: number, parentPathKeys: (string | null)[]) => string,\n        private readonly treeDataOrGrouping?: boolean\n    ) {};\n\n    public updateDisplayedValuesToAllAvailable(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys!, availableKeys);\n        } else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n            this.updateExpandAll();\n        } else if (source === 'miniFilter') {\n            this.resetFilter();\n            this.updateExpandAll();\n        }\n\n        this.flattenItems();\n    }\n\n    public updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined, \n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys!, availableKeys);\n        } else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n        }\n\n        this.updateFilter(matchesFilter, nullMatchesFilter);\n        this.updateExpandAll();\n\n        this.flattenItems();\n    }\n\n    private generateItemTree(getValue: (key: string | null) => V | null, allKeys: Iterable<string | null>, availableKeys: Set<string | null>): void {\n        this.allDisplayedItemsTree = [];\n        this.groupsExist = false;\n        \n        const treeListPathGetter = this.getTreeListPathGetter(getValue, availableKeys);\n        for (let key of allKeys) {\n            const value = getValue(key)!;\n            const dataPath = treeListPathGetter(value) ?? [null];\n            if (dataPath.length > 1) {\n                this.groupsExist = true;\n            }\n            const available = availableKeys.has(key);\n            let children: SetFilterModelTreeItem[] | undefined = this.allDisplayedItemsTree;\n            let item: SetFilterModelTreeItem | undefined;\n            let parentTreeKeys: (string | null)[] = [];\n            dataPath.forEach((treeKey: string | null, depth: number) => {\n                if (!children) {\n                    children = [];\n                    item!.children = children;\n                }\n                item = children.find(child => child.treeKey?.toUpperCase() === treeKey?.toUpperCase());\n                if (!item) {\n                    item = { treeKey, depth, filterPasses: true, expanded: false, available, parentTreeKeys };\n                    if (depth === dataPath.length - 1) {\n                        item.key = key;\n                    }\n                    children.push(item);\n                }\n                children = item.children;\n                parentTreeKeys = [...parentTreeKeys, treeKey];\n            });\n        }\n        // update the parent availability based on the children\n        this.updateAvailable(availableKeys);\n\n        this.selectAllItem.children = this.allDisplayedItemsTree;\n        this.selectAllItem.expanded = false;\n    }\n\n    private getTreeListPathGetter(getValue: (key: string | null) => V | null, availableKeys: Set<string | null>): (value: V | null) => string[] | null {\n        if (this.treeListPathGetter) {\n            return this.treeListPathGetter;\n        }\n        if (this.treeDataOrGrouping) {\n            return value => value as any;\n        }\n        // infer from data\n        let isDate = false;\n        for (const availableKey of availableKeys) {\n            // find the first non-null value\n            const value = getValue(availableKey);\n            if (value instanceof Date) {\n                isDate = true;\n                break;\n            } else if (value != null) {\n                break;\n            }\n        }\n        if (isDate) {\n            return TreeSetDisplayValueModel.DATE_TREE_LIST_PATH_GETTER as any;\n        }\n        _.warnOnce('property treeList=true for Set Filter params, but you did not provide a treeListPathGetter or values of type Date.');\n        return value => [String(value)];\n    }\n\n    private flattenItems(): void {\n        this.activeDisplayedItemsFlat = [];\n        const recursivelyFlattenDisplayedItems = (items: SetFilterModelTreeItem[]) => {\n            items.forEach(item => {\n                if (!item.filterPasses || !item.available) { return; }\n                this.activeDisplayedItemsFlat.push(item);\n                if (item.children && item.expanded) {\n                    recursivelyFlattenDisplayedItems(item.children)\n                }\n            });\n        };\n        recursivelyFlattenDisplayedItems(this.allDisplayedItemsTree);\n    }\n\n    private resetFilter(): void {\n        const recursiveFilterReset = (item: SetFilterModelTreeItem) => {\n            if (item.children) {\n                item.children.forEach(child => {\n                    recursiveFilterReset(child);\n                });\n            }\n\n            item.filterPasses = true;\n        };\n\n        this.allDisplayedItemsTree.forEach(item => recursiveFilterReset(item));\n    }\n\n    private updateFilter(matchesFilter: (valueToCheck: string | null) => boolean, nullMatchesFilter: boolean): void {\n        const passesFilter = (item: SetFilterModelTreeItem) => {\n            if (!item.available) {\n                return false;\n            }\n            if (item.treeKey == null) {\n                return nullMatchesFilter;\n            }\n\n            return matchesFilter(\n                this.formatter(this.treeListFormatter ? this.treeListFormatter(item.treeKey, item.depth, item.parentTreeKeys) : item.treeKey)\n            );\n        };\n\n        this.allDisplayedItemsTree.forEach(item => this.recursiveItemCheck(item, false, passesFilter, 'filterPasses'));\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.activeDisplayedItemsFlat.length;\n    }\n \n    public getDisplayedItem(index: number): SetFilterModelTreeItem | null {\n        return this.activeDisplayedItemsFlat[index];\n    }\n\n    public getSelectAllItem(): SetFilterModelTreeItem {\n        return this.selectAllItem;\n    }\n \n    public getAddSelectionToFilterItem(): string | SetFilterModelTreeItem {\n        return this.addSelectionToFilterItem;\n    }\n\n    public getDisplayedKeys(): (string | null)[] {\n        const displayedKeys: (string | null)[] = [];\n        this.forEachDisplayedKey((key) => displayedKeys.push(key));\n        return displayedKeys;\n    }\n\n    public forEachDisplayedKey(func: (key: string | null) => void): void {\n        const recursiveForEachItem = (item: SetFilterModelTreeItem, topParentExpanded: boolean) => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    item.children.forEach(child => {\n                        if (child.filterPasses) {\n                            recursiveForEachItem(child, false);\n                        }\n                    });\n                }\n            } else {\n                func(item.key!);\n            }\n        };\n\n        this.activeDisplayedItemsFlat.forEach(item => recursiveForEachItem(item, true));\n    }\n\n    public someDisplayedKey(func: (key: string | null) => boolean): boolean {\n        const recursiveSomeItem = (item: SetFilterModelTreeItem, topParentExpanded: boolean): boolean => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    return item.children.some(child => {\n                        if (child.filterPasses) {\n                            return recursiveSomeItem(child, false);\n                        }\n                        return false;\n                    });\n                }\n            } else {\n                return func(item.key!);\n            }\n            return false;\n        };\n\n        return this.activeDisplayedItemsFlat.some(item => recursiveSomeItem(item, true));\n    }\n\n    public hasGroups(): boolean {\n        return this.groupsExist;\n    }\n\n    public refresh(): void {\n        this.updateExpandAll();\n        this.flattenItems();\n    }\n\n    private updateExpandAll(): void {\n        const recursiveExpansionCheck = (items: SetFilterModelTreeItem[], someTrue: boolean, someFalse: boolean): boolean | undefined => {\n            for (const item of items) {\n                if (!item.filterPasses || !item.available || !item.children) {\n                    continue;\n                }\n                // indeterminate state only exists for expand all, so don't need to check for the current item\n                someTrue = someTrue || !!item.expanded;\n                someFalse = someFalse || !item.expanded;\n                if (someTrue && someFalse) {\n                    // already indeterminate. No need to check the children\n                    return undefined;\n                }\n                const childExpanded = recursiveExpansionCheck(item.children, someTrue, someFalse);\n                if (childExpanded === undefined) {\n                    return undefined;\n                } else if (childExpanded) {\n                    someTrue = true;\n                } else {\n                    someFalse = true;\n                }\n            }\n            return someTrue && someFalse ? undefined : someTrue;\n        };\n\n        const item = this.getSelectAllItem();\n        item.expanded = recursiveExpansionCheck(item.children!, false, false);\n    }\n\n    private recursiveItemCheck(\n        item: SetFilterModelTreeItem,\n        parentPasses: boolean,\n        checkFunction: (item: SetFilterModelTreeItem) => boolean,\n        itemProp: 'filterPasses' | 'available'\n    ): boolean {\n        let atLeastOneChildPassed = false;\n            if (item.children) {\n                item.children.forEach(child => {\n                    const childPasses = this.recursiveItemCheck(child, parentPasses || checkFunction(item), checkFunction, itemProp);\n                    atLeastOneChildPassed = atLeastOneChildPassed || childPasses;\n                });\n            }\n\n            const itemPasses = parentPasses || atLeastOneChildPassed || checkFunction(item);\n            item[itemProp] = itemPasses;\n            return itemPasses;\n    }\n\n    private updateAvailable(availableKeys: Set<string | null>) {\n        const isAvailable = (item: SetFilterModelTreeItem) => availableKeys.has(item.key!);\n\n        this.allDisplayedItemsTree.forEach(item => this.recursiveItemCheck(item, false, isAvailable, 'available'));\n    }\n}", "export class SetValueModelFilteringKeys {\n    // To make the filtering fast, we store the keys in a Set rather than using the default array.\n    private filteringKeys: Set<string | null> | null = null;\n\n    // This attribute contains keys that are actually used for filtering.\n    // These keys take into account case sensitivity:\n    // - When filtering is case-insensitive, all filtering keys are converted to upper case and stored here.\n    // - When filtering is case-sensitive, this is the same as filteringKeys.\n    private filteringKeysCaseFormatted: Set<string | null> | null = null;\n\n    private hasNoAppliedFilteringKeys: boolean = false;\n\n    // Function responsible for formatting the filtering keys.\n    private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n\n    constructor({ caseFormat }: { caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat }) {\n        this.caseFormat = caseFormat;\n    }\n\n    public allFilteringKeys(): Set<string | null> | null {\n        return this.filteringKeys;\n    }\n\n    public allFilteringKeysCaseFormatted(): Set<string | null> | null {\n        return this.filteringKeysCaseFormatted;\n    }\n\n    public noAppliedFilteringKeys(): boolean {\n        return this.hasNoAppliedFilteringKeys;\n    }\n\n    public setFilteringKeys(filteringKeys: Set<string | null> | null): void {\n        this.filteringKeys = new Set(filteringKeys);\n        this.hasNoAppliedFilteringKeys = !this.filteringKeys || this.filteringKeys.size === 0;\n\n        this.filteringKeysCaseFormatted = new Set<string | null>();\n        this.filteringKeys.forEach(key =>\n            this.filteringKeysCaseFormatted!.add(this.caseFormat(key))\n        );\n    }\n\n    public addFilteringKey(key: string | null): void {\n        if (this.filteringKeys == null) {\n            this.filteringKeys = new Set<string | null>();\n            this.filteringKeysCaseFormatted = new Set<string | null>();\n        }\n\n        this.filteringKeys.add(key);\n        this.filteringKeysCaseFormatted!.add(this.caseFormat(key));\n\n        if (this.hasNoAppliedFilteringKeys) {\n            this.hasNoAppliedFilteringKeys = false;\n        }\n    }\n\n    public hasCaseFormattedFilteringKey(key: string | null): boolean {\n        return this.filteringKeysCaseFormatted!.has(this.caseFormat(key));\n    }\n\n    public hasFilteringKey(key: string | null): boolean {\n        return this.filteringKeys!.has(key);\n    }\n\n    public reset() {\n        this.filteringKeys = null;\n        this.filteringKeysCaseFormatted = null;\n        this.hasNoAppliedFilteringKeys = false;\n    }\n}\n", "import {\n    _,\n    AgCheckbox,\n    AgEvent,\n    Autowired,\n    ColDef,\n    Column,\n    Component,\n    ISetFilterCellRendererParams,\n    SetFilterParams,\n    ITooltipParams,\n    PostConstruct,\n    RefSelector,\n    UserComponentFactory,\n    ValueFormatterService,\n    WithoutGridCommon,\n    ValueFormatterParams,\n    ICellRendererComp,\n    ISetFilterTreeListTooltipParams\n} from '@ag-grid-community/core';\nimport { SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { ISetFilterLocaleText } from './localeText';\n\nexport interface SetFilterListItemSelectionChangedEvent<\n    I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null\n> extends AgEvent {\n    isSelected: boolean;\n    item: I;\n}\n\nexport interface SetFilterListItemExpandedChangedEvent<\n    I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null\n> extends AgEvent {\n    isExpanded: boolean;\n    item: I;\n}\n\nexport interface SetFilterListItemParams<V> {\n    focusWrapper: HTMLElement,\n    value: V | null | (() => string),\n    params: SetFilterParams<any, V>,\n    translate: (key: keyof ISetFilterLocaleText) => string,\n    valueFormatter?: (params: ValueFormatterParams) => string,\n    item: SetFilterModelTreeItem | string | null,\n    isSelected: boolean | undefined,\n    isTree?: boolean,\n    depth?: number,\n    groupsExist?: boolean,\n    isGroup?: boolean,\n    isExpanded?: boolean,\n    hasIndeterminateExpandState?: boolean,\n}\n\n/** @param V type of value in the Set Filter */\nexport class SetFilterListItem<V> extends Component {\n    public static EVENT_SELECTION_CHANGED = 'selectionChanged';\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n\n    @Autowired('valueFormatterService') private readonly valueFormatterService: ValueFormatterService;\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    private static GROUP_TEMPLATE = /* html */`\n        <div class=\"ag-set-filter-item\" aria-hidden=\"true\">\n            <span class=\"ag-set-filter-group-icons\">\n                <span class=\"ag-set-filter-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-set-filter-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n                <span class=\"ag-set-filter-group-indeterminate-icon\" ref=\"eGroupIndeterminateIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n        </div>`;\n\n    private static TEMPLATE = /* html */`\n        <div class=\"ag-set-filter-item\">\n            <ag-checkbox ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n        </div>`;\n\n    @RefSelector('eCheckbox') private readonly eCheckbox: AgCheckbox;\n\n    @RefSelector('eGroupOpenedIcon') private eGroupOpenedIcon: HTMLElement;\n    @RefSelector('eGroupClosedIcon') private eGroupClosedIcon: HTMLElement;\n    @RefSelector('eGroupIndeterminateIcon') private eGroupIndeterminateIcon: HTMLElement;\n\n    private readonly focusWrapper: HTMLElement;\n    private readonly value: V | null | (() => string);\n    private readonly params: SetFilterParams<any, V>;\n    private readonly translate: (key: keyof ISetFilterLocaleText) => string;\n    private readonly valueFormatter?: (params: ValueFormatterParams) => string;\n    private readonly isTree?: boolean;\n    private readonly depth: number;\n    private readonly isGroup?: boolean;\n    private readonly groupsExist?: boolean\n    private readonly hasIndeterminateExpandState?: boolean;\n\n    private item: SetFilterModelTreeItem | string | null;\n    private isSelected: boolean | undefined;\n    private isExpanded: boolean | undefined;\n    // only used for select all\n    private valueFunction?: () => string;\n\n    private cellRendererParams: ISetFilterCellRendererParams;\n    private cellRendererComponent?: ICellRendererComp;\n    private destroyCellRendererComponent?: () => void;\n\n    constructor(params: SetFilterListItemParams<V>) {\n        super(params.isGroup ? SetFilterListItem.GROUP_TEMPLATE : SetFilterListItem.TEMPLATE);\n        this.focusWrapper = params.focusWrapper;\n        this.value = params.value;\n        this.params = params.params;\n        this.translate = params.translate;\n        this.valueFormatter = params.valueFormatter;\n        this.item = params.item;\n        this.isSelected = params.isSelected;\n        this.isTree = params.isTree;\n        this.depth = params.depth ?? 0;\n        this.isGroup = params.isGroup;\n        this.groupsExist = params.groupsExist;\n        this.isExpanded = params.isExpanded;\n        this.hasIndeterminateExpandState = params.hasIndeterminateExpandState;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.addDestroyFunc(() => this.destroyCellRendererComponent?.());\n\n        this.render();\n\n        this.eCheckbox\n            .setLabelEllipsis(true)\n            .setValue(this.isSelected, true)\n            .setDisabled(!!this.params.readOnly)\n            .getInputElement().setAttribute('tabindex', '-1');\n\n        this.refreshVariableAriaLabels();\n\n        if (this.isTree) {\n            if (this.depth > 0) {\n                this.addCssClass('ag-set-filter-indent-' + this.depth);\n            }\n            if (this.isGroup) {\n                this.setupExpansion();\n            } else {\n                if (this.groupsExist) {\n                    this.addCssClass('ag-set-filter-add-group-indent');\n                }\n            }\n\n            _.setAriaLevel(this.getAriaElement(), this.depth + 1)\n        }\n\n        this.refreshAriaChecked();\n\n        if (!!this.params.readOnly) {\n            // Don't add event listeners if we're read-only.\n            return;\n        }\n\n        this.eCheckbox.onValueChange((value) => this.onCheckboxChanged(!!value));\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.focusWrapper;\n    }\n\n    private setupExpansion(): void {\n        this.eGroupClosedIcon.appendChild(_.createIcon('setFilterGroupClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(_.createIcon('setFilterGroupOpen', this.gridOptionsService, null));\n        this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n\n        if (this.hasIndeterminateExpandState) {\n            this.eGroupIndeterminateIcon.appendChild(_.createIcon('setFilterGroupIndeterminate', this.gridOptionsService, null));\n            this.addManagedListener(this.eGroupIndeterminateIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        }\n\n        this.setExpandedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private onExpandOrContractClicked(): void {\n        this.setExpanded(!this.isExpanded);\n    }\n\n    public setExpanded(isExpanded: boolean | undefined, silent?: boolean): void {\n        if (this.isGroup && isExpanded !== this.isExpanded) {\n            this.isExpanded = isExpanded;\n\n            const event: SetFilterListItemExpandedChangedEvent = {\n                type: SetFilterListItem.EVENT_EXPANDED_CHANGED,\n                isExpanded: !!isExpanded,\n                item: this.item\n            };\n\n            if (!silent) {\n                this.dispatchEvent(event);\n            }\n\n            this.setExpandedIcons();\n            this.refreshAriaExpanded();\n        }\n    }\n\n    private setExpandedIcons(): void {\n        _.setDisplayed(this.eGroupClosedIcon, this.hasIndeterminateExpandState ? this.isExpanded === false : !this.isExpanded);\n        _.setDisplayed(this.eGroupOpenedIcon, this.isExpanded === true);\n        if (this.hasIndeterminateExpandState) {\n            _.setDisplayed(this.eGroupIndeterminateIcon, this.isExpanded === undefined);\n        }\n    }\n\n    private onCheckboxChanged(isSelected: boolean): void {\n        this.isSelected = isSelected;\n\n        const event: SetFilterListItemSelectionChangedEvent = {\n            type: SetFilterListItem.EVENT_SELECTION_CHANGED,\n            isSelected,\n            item: this.item\n        };\n\n        this.dispatchEvent(event);\n        this.refreshVariableAriaLabels();\n        this.refreshAriaChecked();\n    }\n\n    public toggleSelected(): void {\n        if (!!this.params.readOnly) { return; }\n\n        this.setSelected(!this.isSelected);\n    }\n    \n    private setSelected(isSelected: boolean | undefined, silent?: boolean) {\n        this.isSelected = isSelected;\n        this.eCheckbox.setValue(isSelected, silent);\n        this.refreshAriaChecked();\n    }\n\n    private refreshVariableAriaLabels(): void {\n        if (!this.isTree) { return; }\n        const translate = this.localeService.getLocaleTextFunc();\n        const checkboxValue = this.eCheckbox.getValue();\n        const state = checkboxValue === undefined ?\n            translate('ariaIndeterminate', 'indeterminate') : \n            (checkboxValue ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden'));\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        _.setAriaLabelledBy(this.eCheckbox.getInputElement(), undefined as any);\n        this.eCheckbox.setInputAriaLabel(`${visibilityLabel} (${state})`);\n    }\n    \n    private setupFixedAriaLabels(value: any): void {\n        if (!this.isTree) { return; }\n        const translate = this.localeService.getLocaleTextFunc();\n        const itemLabel = translate('ariaFilterValue', 'Filter Value');\n        const ariaEl = this.getAriaElement();\n        _.setAriaLabel(ariaEl, `${value} ${itemLabel}`);\n        _.setAriaDescribedBy(ariaEl, this.eCheckbox.getInputElement().id);\n    }\n\n    private refreshAriaChecked(): void {\n        const ariaEl = this.getAriaElement();\n\n        _.setAriaChecked(ariaEl, this.eCheckbox.getValue());\n    }\n\n    private refreshAriaExpanded(): void {\n        _.setAriaExpanded(this.getAriaElement(), !!this.isExpanded);\n    }\n\n    public refresh(item: SetFilterModelTreeItem | string | null, isSelected: boolean | undefined, isExpanded: boolean | undefined): void {\n        this.item = item;\n        // setExpanded checks if value has changed, setSelected does not\n        if (isSelected !== this.isSelected) {\n            this.setSelected(isSelected, true);\n        }\n        this.setExpanded(isExpanded, true);\n        if (this.valueFunction) {\n            // underlying value might have changed, so call again and re-render\n            const value = this.valueFunction();\n            this.setTooltipAndCellRendererParams(value as any, value);\n            if (!this.cellRendererComponent) {\n                this.renderCellWithoutCellRenderer();\n            }\n        }\n        if (this.cellRendererComponent) {\n            const success = this.cellRendererComponent.refresh?.(this.cellRendererParams as any);\n            if (!success) {\n                const oldComponent = this.cellRendererComponent;\n                this.renderCell();\n                this.destroyBean(oldComponent);\n            }\n        }\n    }\n\n    public render(): void {\n        const { params: { column } } = this;\n\n        let { value } = this;\n        let formattedValue: string | null = null;\n\n        if (typeof value === 'function') {\n            this.valueFunction = value as () => string;\n            formattedValue = this.valueFunction();\n            // backwards compatibility for select all in value\n            value = formattedValue as any;\n        } else if (this.isTree) {\n            // tree values are already formatted via treeListFormatter\n            formattedValue = _.toStringOrNull(value);\n        } else {\n            formattedValue = this.getFormattedValue(column, value);\n        }\n\n        this.setTooltipAndCellRendererParams(value, formattedValue);\n\n        this.renderCell();\n    }\n\n    private setTooltipAndCellRendererParams(value: V | null | (() => string), formattedValue: string | null): void {\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n\n        if (this.params.showTooltips && (!isTooltipWhenTruncated || !this.params.cellRenderer)) {\n            const newTooltipText = formattedValue != null ? formattedValue : _.toStringOrNull(value);\n            let shouldDisplayTooltip: (() => boolean) | undefined;\n\n            if (isTooltipWhenTruncated) {\n                shouldDisplayTooltip = () => {\n                    const el = this.eCheckbox.getGui().querySelector('.ag-label');\n                    if (!el) { return true; } // show label by default\n                    return el.scrollWidth > el.clientWidth;\n                }\n            }\n            this.setTooltip({ newTooltipText, location: 'setFilterValue', shouldDisplayTooltip });\n        }\n\n        this.cellRendererParams = this.gridOptionsService.addGridCommonParams({\n            value,\n            valueFormatted: formattedValue,\n            colDef: this.params.colDef,\n            column: this.params.column,\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setTooltip({ newTooltipText: value, location:'setFilterValue', shouldDisplayTooltip });\n            }\n        });\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'setFilterValue';\n        res.colDef = this.getComponentHolder();\n        if (this.isTree) {\n            (res as ISetFilterTreeListTooltipParams).level = this.depth;\n        }\n        return res;\n    }\n\n    private getFormattedValue(column: Column, value: any) {\n        return this.valueFormatterService.formatValue(column, null, value, this.valueFormatter, false);\n    }\n\n    private renderCell(): void {\n        const compDetails = this.userComponentFactory.getSetFilterCellRendererDetails(this.params, this.cellRendererParams);\n        const cellRendererPromise = compDetails ? compDetails.newAgStackInstance() : undefined;\n\n        if (cellRendererPromise == null) {\n            this.renderCellWithoutCellRenderer();\n            return;\n        }\n\n        cellRendererPromise.then(component => {\n            if (component) {\n                this.cellRendererComponent = component;\n                this.eCheckbox.setLabel(component.getGui());\n                this.destroyCellRendererComponent = () => this.destroyBean(component);\n            }\n        });\n    }\n\n    private renderCellWithoutCellRenderer(): void {\n        let valueToRender = (this.cellRendererParams.valueFormatted == null ? this.cellRendererParams.value : this.cellRendererParams.valueFormatted) ?? this.translate('blanks');\n        if (typeof valueToRender !== 'string') {\n            _.warnOnce(`Set Filter Value Formatter must return string values. Please ensure the Set Filter Value Formatter returns string values for complex objects, or set convertValuesToStrings=true in the filterParams. See ${this.getFrameworkOverrides().getDocLink('filter-set-filter-list/#filter-value-types')}`);\n            valueToRender = '';\n        }\n\n        this.eCheckbox.setLabel(valueToRender);\n        this.setupFixedAriaLabels(valueToRender)\n    }\n\n    public getComponentHolder(): ColDef {\n        return this.params.column.getColDef();\n    }\n}\n", "export interface ISetFilterLocaleText {\n    loadingOoo: string;\n    blanks: string;\n    searchOoo: string;\n    selectAll: string;\n    selectAllSearchResults: string;\n    addCurrentSelectionToFilter: string;\n    noMatches: string;\n}\n\nexport const DEFAULT_LOCALE_TEXT: ISetFilterLocaleText = {\n    loadingOoo: 'Loading...',\n    blanks: '(Blanks)',\n    searchOoo: 'Search...',\n    selectAll: '(Select All)',\n    selectAllSearchResults: '(Select All Search Results)',\n    addCurrentSelectionToFilter: 'Add current selection to filter',\n    noMatches: 'No matches.'\n};", "import { SetFilterModel } from \"@ag-grid-community/core\";\nimport { SetFilter } from \"./setFilter\";\n\nexport class SetFilterModelFormatter {\n    public getModelAsString<V>(model: SetFilterModel | null | undefined, setFilter: SetFilter<V>): string {\n        const { values } = model || setFilter.getModel() || {};\n        const valueModel = setFilter.getValueModel();\n\n        if (values == null || valueModel == null) {\n            return '';\n        }\n\n        const availableKeys = values.filter(v => valueModel.isKeyAvailable(v));\n        const numValues = availableKeys.length;\n\n        const formattedValues = availableKeys.slice(0, 10).map(key => setFilter.getFormattedValue(key));\n\n        return `(${numValues}) ${formattedValues.join(',')}${numValues > 10 ? ',...' : ''}`;\n    }\n}", "import {\n    Autowired,\n    Component,\n    IFloatingFilter,\n    RefSelector,\n    IFloatingFilterParams,\n    AgInputTextField,\n    ColumnModel,\n    SetFilterModel,\n} from '@ag-grid-community/core';\n\nimport { SetFilter } from './setFilter';\nimport { SetFilterModelFormatter } from './setFilterModelFormatter';\nimport { SetValueModel } from './setValueModel';\n\nexport class SetFloatingFilterComp<V = string> extends Component implements IFloatingFilter {\n    @RefSelector('eFloatingFilterText') private readonly eFloatingFilterText: AgInputTextField;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    private params: IFloatingFilterParams;\n    private availableValuesListenerAdded = false;\n    private readonly filterModelFormatter = new SetFilterModelFormatter();\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input ag-set-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .addGuiEventListener('click', () => this.params.showParentFilter());\n\n        this.setParams(params);\n    }\n\n    private setParams(params: IFloatingFilterParams): void {\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFloatingFilterText.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.params = params;\n        this.setParams(params);\n    }\n\n    public onParentModelChanged(parentModel: SetFilterModel): void {\n        this.updateFloatingFilterText(parentModel);\n    }\n\n    private parentSetFilterInstance(cb: (instance: SetFilter<V>) => void): void {\n        this.params.parentFilterInstance((filter) => {\n            if (!(filter instanceof SetFilter)) {\n                throw new Error('AG Grid - SetFloatingFilter expects SetFilter as its parent');\n            }\n\n            cb(filter);\n        });\n    }\n\n    private addAvailableValuesListener(): void {\n        this.parentSetFilterInstance((setFilter) => {\n            const setValueModel = setFilter.getValueModel();\n\n            if (!setValueModel) { return; }\n\n            // unlike other filters, what we show in the floating filter can be different, even\n            // if another filter changes. this is due to how set filter restricts its values based\n            // on selections in other filters, e.g. if you filter Language to English, then the set filter\n            // on Country will only show English speaking countries. Thus the list of items to show\n            // in the floating filter can change.\n            this.addManagedListener(\n                setValueModel, SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED, () => this.updateFloatingFilterText());\n        });\n\n        this.availableValuesListenerAdded = true;\n    }\n\n    private updateFloatingFilterText(parentModel?: SetFilterModel | null): void {\n        if (!this.availableValuesListenerAdded) {\n            this.addAvailableValuesListener();\n        }\n\n        this.parentSetFilterInstance((setFilter) => {\n            this.eFloatingFilterText.setValue(this.filterModelFormatter.getModelAsString(parentModel, setFilter));\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { SparklineCellRenderer } from './sparklineCellRenderer';\nimport { SparklineTooltipSingleton } from './tooltip/sparklineTooltipSingleton';\nimport { VERSION } from './version';\n\nexport const SparklinesModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SparklinesModule,\n    beans: [SparklineTooltipSingleton],\n    userComponents: [{ componentName: 'agSparklineCellRenderer', componentClass: SparklineCellRenderer }],\n    dependantModules: [EnterpriseCoreModule],\n};", "import {\n    Autowired,\n    Component,\n    ICellRenderer,\n    ISparklineCellRendererParams,\n    RefSelector,\n    ResizeObserverService,\n} from '@ag-grid-community/core';\nimport { AgSparkline, SparklineFactoryOptions } from './sparkline/agSparkline';\nimport { SparklineTooltipSingleton } from './tooltip/sparklineTooltipSingleton';\n\nexport class SparklineCellRenderer extends Component implements ICellRenderer {\n    private static TEMPLATE /* html */ = `<div class=\"ag-sparkline-wrapper\">\n            <span ref=\"eSparkline\"></span>\n        </div>`;\n\n    @RefSelector('eSparkline') private eSparkline!: HTMLElement;\n\n    @Autowired('resizeObserverService') private resizeObserverService!: ResizeObserverService;\n    @Autowired('sparklineTooltipSingleton') private sparklineTooltipSingleton!: SparklineTooltipSingleton;\n\n    private sparkline?: any;\n\n    constructor() {\n        super(SparklineCellRenderer.TEMPLATE);\n    }\n\n    public init(params: ISparklineCellRendererParams): void {\n        let firstTimeIn = true;\n        const updateSparkline = () => {\n            const { clientWidth, clientHeight } = this.getGui();\n            if (clientWidth === 0 || clientHeight === 0) {\n                return;\n            }\n\n            if (firstTimeIn) {\n                const options: SparklineFactoryOptions = {\n                    data: params.value,\n                    width: clientWidth,\n                    height: clientHeight,\n                    context: {\n                        data: params.data,\n                    },\n                    ...params.sparklineOptions,\n                };\n\n                // create new instance of sparkline\n                this.sparkline = AgSparkline.create(options, this.sparklineTooltipSingleton.getSparklineTooltip());\n\n                // append sparkline canvas to cell renderer element\n                this.eSparkline!.appendChild(this.sparkline.canvasElement);\n\n                firstTimeIn = false;\n            } else {\n                this.sparkline.width = clientWidth;\n                this.sparkline.height = clientHeight;\n            }\n        };\n\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.getGui(), updateSparkline);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public refresh(params: ISparklineCellRendererParams): boolean {\n        if (this.sparkline) {\n            this.sparkline.data = params.value;\n            return true;\n        }\n        return false;\n    }\n\n    public destroy() {\n        if (this.sparkline) {\n            this.sparkline.destroy();\n        }\n        super.destroy();\n    }\n}", "import { MarkerFormat, MarkerFormatterParams, CrosshairLineOptions } from '@ag-grid-community/core';\nimport { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport { Point, SeriesNodeDatum, Sparkline, ZINDICIES } from '../sparkline';\nimport { toTooltipHtml } from '../tooltip/sparklineTooltip';\nimport { getMarker } from '../marker/markerFactory';\nimport { getLineDash } from '../../util/lineDash';\n\nconst { extent } = _Util;\nconst { BandScale } = _Scale;\n\ninterface AreaNodeDatum extends SeriesNodeDatum {}\n\ninterface PathDatum extends SeriesNodeDatum {\n    point: Point;\n}\n\nclass SparklineMarker {\n    enabled: boolean = true;\n    shape: string = 'circle';\n    size: number = 0;\n    fill?: string = 'rgb(124, 181, 236)';\n    stroke?: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n    formatter?: (params: MarkerFormatterParams) => MarkerFormat = undefined;\n}\n\nclass SparklineLine {\n    stroke: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n}\n\nclass SparklineCrosshairs {\n    xLine: CrosshairLineOptions = {\n        enabled: true,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n    yLine: CrosshairLineOptions = {\n        enabled: false,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n}\nexport class AreaSparkline extends Sparkline {\n    static className = 'AreaSparkline';\n\n    fill: string = 'rgba(124, 181, 236, 0.25)';\n\n    protected strokePath: _Scene.Path = new _Scene.Path();\n    protected fillPath: _Scene.Path = new _Scene.Path();\n    protected xCrosshairLine: _Scene.Line = new _Scene.Line();\n    protected yCrosshairLine: _Scene.Line = new _Scene.Line();\n\n    private areaSparklineGroup: _Scene.Group = new _Scene.Group();\n    private xAxisLine: _Scene.Line = new _Scene.Line();\n    private markers: _Scene.Group = new _Scene.Group();\n    private markerSelection: _Scene.Selection<_Scene.Marker, AreaNodeDatum> = _Scene.Selection.select(\n        this.markers,\n        () => this.markerFactory()\n    );\n    private markerSelectionData: AreaNodeDatum[] = [];\n\n    readonly marker = new SparklineMarker();\n    readonly line = new SparklineLine();\n    readonly crosshairs = new SparklineCrosshairs();\n\n    constructor() {\n        super();\n        this.rootGroup.append(this.areaSparklineGroup);\n\n        this.xAxisLine.zIndex = ZINDICIES.AXIS_LINE_ZINDEX;\n        this.fillPath.zIndex = ZINDICIES.SERIES_FILL_ZINDEX;\n        this.strokePath.zIndex = ZINDICIES.SERIES_STROKE_ZINDEX;\n        this.xCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.yCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.markers.zIndex = ZINDICIES.SERIES_MARKERS_ZINDEX;\n\n        this.areaSparklineGroup.append([\n            this.fillPath,\n            this.xAxisLine,\n            this.strokePath,\n            this.xCrosshairLine,\n            this.yCrosshairLine,\n            this.markers,\n        ]);\n    }\n\n    protected markerFactory(): _Scene.Marker {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker(shape);\n        return new MarkerShape();\n    }\n\n    protected getNodeData(): AreaNodeDatum[] {\n        return this.markerSelectionData;\n    }\n\n    protected update(): void {\n        const data = this.generateNodeData();\n\n        if (!data) {\n            return;\n        }\n\n        const { nodeData, fillData, strokeData } = data;\n\n        this.markerSelectionData = nodeData;\n\n        this.updateSelection(nodeData);\n        this.updateNodes();\n\n        this.updateStroke(strokeData);\n        this.updateFill(fillData);\n    }\n\n    protected updateYScaleDomain(): void {\n        const { yData, yScale } = this;\n        const yMinMax = extent(yData as number[]);\n\n        let yMin = 0;\n        let yMax = 1;\n\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0] as number;\n            yMax = this.max = yMinMax[1] as number;\n        }\n\n        // if yMin is positive, set yMin to 0\n        yMin = yMin < 0 ? yMin : 0;\n\n        // if yMax is negative, set yMax to 0\n        yMax = yMax < 0 ? 0 : yMax;\n\n        yScale.domain = [yMin, yMax];\n    }\n\n    protected generateNodeData():\n        | { nodeData: AreaNodeDatum[]; fillData: PathDatum[]; strokeData: PathDatum[] }\n        | undefined {\n        const { data, yData, xData, xScale, yScale } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const continuous = !(xScale instanceof BandScale);\n\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        const n = yData.length;\n\n        const nodeData: AreaNodeDatum[] = [];\n        const fillData: PathDatum[] = [];\n        const strokeData: PathDatum[] = [];\n\n        let firstValidX;\n        let lastValidX;\n\n        let previousX;\n        let nextX;\n\n        const yZero = yScale.convert(0);\n\n        for (let i = 0; i < n; i++) {\n            const yDatum = yData[i];\n            const xDatum = xData[i];\n\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n\n            // if this iteration is not the last, set nextX using the next value in the data array\n            if (i + 1 < n) {\n                nextX = xScale.convert(continuous ? xScale.toDomain(xData[i + 1]) : xData[i + 1]) + offsetX;\n            }\n\n            // set stroke data regardless of missing/ undefined values. Undefined values will be handled in the updateStroke() method\n            strokeData.push({\n                seriesDatum: { x: xDatum, y: yDatum },\n                point: { x, y },\n            });\n\n            if (yDatum === undefined && previousX !== undefined) {\n                // if yDatum is undefined and there is a valid previous data point, add a phantom point at yZero\n                // if a next data point exists, add a phantom point at yZero at the next X\n                fillData.push({ seriesDatum: undefined, point: { x: previousX, y: yZero } });\n                if (nextX !== undefined) {\n                    fillData.push({ seriesDatum: undefined, point: { x: nextX, y: yZero } });\n                }\n            } else if (yDatum !== undefined) {\n                fillData.push({\n                    seriesDatum: { x: xDatum, y: yDatum },\n                    point: { x, y },\n                });\n\n                // set node data only if yDatum is not undefined. These values are used in the updateSelection() method to update markers\n                nodeData.push({\n                    seriesDatum: { x: xDatum, y: yDatum },\n                    point: { x, y },\n                });\n\n                firstValidX = firstValidX !== undefined ? firstValidX : x;\n                lastValidX = x;\n            }\n            previousX = x;\n        }\n\n        // phantom points for creating closed area\n        fillData.push(\n            { seriesDatum: undefined, point: { x: lastValidX, y: yZero } },\n            { seriesDatum: undefined, point: { x: firstValidX, y: yZero } }\n        );\n\n        return { nodeData, fillData, strokeData };\n    }\n\n    protected updateAxisLine() {\n        const { xScale, yScale, axis, xAxisLine } = this;\n\n        xAxisLine.x1 = xScale.range[0];\n        xAxisLine.x2 = xScale.range[1];\n        xAxisLine.y1 = xAxisLine.y2 = 0;\n        xAxisLine.stroke = axis.stroke;\n        xAxisLine.strokeWidth = axis.strokeWidth;\n\n        const yZero: number = yScale.convert(0);\n        xAxisLine.translationY = yZero;\n    }\n\n    private updateSelection(selectionData: AreaNodeDatum[]): void {\n        this.markerSelection.update(selectionData);\n    }\n\n    protected updateNodes(): void {\n        const { highlightedDatum, highlightStyle, marker } = this;\n        const {\n            size: highlightSize,\n            fill: highlightFill,\n            stroke: highlightStroke,\n            strokeWidth: highlightStrokeWidth,\n        } = highlightStyle;\n        const markerFormatter = marker.formatter;\n\n        this.markerSelection.each((node, datum, index) => {\n            const { point, seriesDatum } = datum;\n\n            if (!point) {\n                return;\n            }\n\n            const highlighted = datum === highlightedDatum;\n            const markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;\n            const markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke;\n            const markerStrokeWidth =\n                highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : marker.strokeWidth;\n            const markerSize = highlighted && highlightSize !== undefined ? highlightSize : marker.size;\n\n            let markerFormat: MarkerFormat | undefined;\n\n            if (markerFormatter) {\n                const first = index === 0;\n                const last = index === this.markerSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n\n                markerFormat = markerFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: markerFill,\n                    stroke: markerStroke,\n                    strokeWidth: markerStrokeWidth,\n                    size: markerSize,\n                    highlighted,\n                });\n            }\n\n            node.size = markerFormat && markerFormat.size != undefined ? markerFormat.size : markerSize;\n            node.fill = markerFormat && markerFormat.fill != undefined ? markerFormat.fill : markerFill;\n            node.stroke = markerFormat && markerFormat.stroke != undefined ? markerFormat.stroke : markerStroke;\n            node.strokeWidth =\n                markerFormat && markerFormat.strokeWidth != undefined ? markerFormat.strokeWidth : markerStrokeWidth;\n\n            node.translationX = point.x;\n            node.translationY = point.y;\n            node.visible =\n                markerFormat && markerFormat.enabled != undefined\n                    ? markerFormat.enabled\n                    : marker.enabled && node.size > 0;\n        });\n    }\n\n    updateStroke(strokeData: PathDatum[]) {\n        const { strokePath, yData, line } = this;\n\n        const path = strokePath.path;\n        path.clear();\n\n        if (yData.length < 2) {\n            return;\n        }\n\n        const n = strokeData.length;\n        let moveTo = true;\n\n        for (let i = 0; i < n; i++) {\n            const { point, seriesDatum } = strokeData[i];\n\n            const x = point.x;\n            const y = point.y;\n\n            if (seriesDatum.y == undefined) {\n                moveTo = true;\n            } else {\n                if (moveTo) {\n                    path.moveTo(x, y);\n                    moveTo = false;\n                } else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n\n        strokePath.lineJoin = strokePath.lineCap = 'round';\n        strokePath.fill = undefined;\n        strokePath.stroke = line.stroke;\n        strokePath.strokeWidth = line.strokeWidth;\n    }\n\n    updateFill(areaData: PathDatum[]) {\n        const { fillPath, yData, fill } = this;\n\n        const path = fillPath.path;\n        const n = areaData.length;\n\n        path.clear();\n\n        if (yData.length < 2) {\n            return;\n        }\n\n        for (let i = 0; i < n; i++) {\n            const { point } = areaData[i];\n\n            const x = point.x;\n            const y = point.y;\n\n            if (i > 0) {\n                path.lineTo(x, y);\n            } else {\n                path.moveTo(x, y);\n            }\n        }\n\n        path.closePath();\n\n        fillPath.lineJoin = 'round';\n        fillPath.stroke = undefined;\n        fillPath.fill = fill;\n    }\n\n    protected updateXCrosshairLine(): void {\n        const {\n            yScale,\n            xCrosshairLine,\n            highlightedDatum,\n            crosshairs: { xLine },\n        } = this;\n\n        if (!xLine.enabled || highlightedDatum == undefined) {\n            xCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        xCrosshairLine.y1 = yScale.range[0];\n        xCrosshairLine.y2 = yScale.range[1];\n        xCrosshairLine.x1 = xCrosshairLine.x2 = 0;\n        xCrosshairLine.stroke = xLine.stroke;\n        xCrosshairLine.strokeWidth = xLine.strokeWidth ?? 1;\n\n        xCrosshairLine.lineCap = xLine.lineCap === 'round' || xLine.lineCap === 'square' ? xLine.lineCap : undefined;\n\n        const { lineDash } = xLine;\n        xCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(xCrosshairLine.lineCap, xLine.lineDash as string);\n\n        xCrosshairLine.translationX = highlightedDatum.point!.x;\n    }\n\n    protected updateYCrosshairLine() {\n        const {\n            xScale,\n            yCrosshairLine,\n            highlightedDatum,\n            crosshairs: { yLine },\n        } = this;\n\n        if (!yLine.enabled || highlightedDatum == undefined) {\n            yCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        yCrosshairLine.x1 = xScale.range[0];\n        yCrosshairLine.x2 = xScale.range[1];\n        yCrosshairLine.y1 = yCrosshairLine.y2 = 0;\n        yCrosshairLine.stroke = yLine.stroke;\n        yCrosshairLine.strokeWidth = yLine.strokeWidth ?? 1;\n\n        yCrosshairLine.lineCap = yLine.lineCap === 'round' || yLine.lineCap === 'square' ? yLine.lineCap : undefined;\n\n        const { lineDash } = yLine;\n        yCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(yCrosshairLine.lineCap, yLine.lineDash as string);\n\n        yCrosshairLine.translationY = highlightedDatum.point!.y;\n    }\n\n    getTooltipHtml(datum: SeriesNodeDatum): string | undefined {\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n\n        const defaults = {\n            content,\n            title,\n        };\n\n        const tooltipRenderer = this.processedOptions?.tooltip?.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(\n                tooltipRenderer({\n                    context: this.context,\n                    datum: seriesDatum,\n                    yValue,\n                    xValue,\n                }),\n                defaults\n            );\n        }\n\n        return toTooltipHtml(defaults);\n    }\n}\n", "import { HighlightStyleOptions } from '@ag-grid-community/core';\nimport { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport { SparklineFactoryOptions } from './agSparkline';\nimport { defaultTooltipCss } from './tooltip/defaultTooltipCss';\nimport { SparklineTooltip, SparklineTooltipMeta } from './tooltip/sparklineTooltip';\n\nconst { extent, isNumber, isString, isStringObject, isDate, createId, Padding } = _Util;\nconst { LinearScale, BandScale, TimeScale } = _Scale;\n\n/**\n * Constants to declare the expected nominal zIndex for nodes in a sparkline rendering.\n */\nexport enum ZINDICIES {\n    SERIES_FILL_ZINDEX = 50,\n    AXIS_LINE_ZINDEX = 500,\n    SERIES_STROKE_ZINDEX = 1000,\n    SERIES_LABEL_ZINDEX = 1500,\n    CROSSHAIR_ZINDEX = 2000,\n    SERIES_MARKERS_ZINDEX = 2500,\n}\n\nexport interface SeriesNodeDatum {\n    readonly seriesDatum: any;\n    readonly point?: Point;\n}\n\nexport interface Point {\n    readonly x: number;\n    readonly y: number;\n}\n\ninterface SeriesRect {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\ntype Container = HTMLElement | undefined | null;\ntype Data = any[] | undefined | null;\ntype DataType = 'number' | 'array' | 'object' | undefined;\ntype AxisType = 'number' | 'category' | 'time';\ntype ScaleType = _Scale.LinearScale | _Scale.TimeScale | _Scale.BandScale<string>;\n\nexport class SparklineAxis {\n    type?: AxisType = 'category';\n    stroke: string = 'rgb(204, 214, 235)';\n    strokeWidth: number = 1;\n}\nexport abstract class Sparkline {\n    readonly id: string = createId(this);\n\n    processedOptions?: SparklineFactoryOptions;\n\n    readonly scene: _Scene.Scene;\n    readonly canvasElement: HTMLCanvasElement;\n    readonly rootGroup: _Scene.Group;\n\n    // Only one tooltip instance for all sparkline instances.\n    tooltip!: SparklineTooltip;\n    private static tooltipDocuments: Document[] = [];\n\n    private mouseMoveEvent: MouseEvent;\n\n    protected seriesRect: SeriesRect = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n\n    private _context: { data: any } | undefined = undefined;\n    set context(value: { data: any } | undefined) {\n        if (this._context !== value) {\n            this._context = value;\n        }\n    }\n    get context(): { data: any } | undefined {\n        return this._context;\n    }\n\n    private _container: Container = undefined;\n    set container(value: Container) {\n        if (this._container !== value) {\n            const { parentNode } = this.canvasElement;\n\n            if (parentNode != null) {\n                parentNode.removeChild(this.canvasElement);\n            }\n\n            if (value) {\n                value.appendChild(this.canvasElement);\n            }\n\n            this._container = value;\n        }\n    }\n    get container(): Container {\n        return this._container;\n    }\n\n    private _data: Data = undefined;\n    set data(value: Data) {\n        if (this._data !== value) {\n            this._data = value;\n            this.processData();\n            if (this.mouseMoveEvent && this.highlightedDatum) {\n                this.updateHitPoint(this.mouseMoveEvent);\n            }\n        }\n    }\n    get data() {\n        return this._data;\n    }\n\n    padding: _Util.Padding = new Padding(3);\n\n    xKey: string = 'x';\n    yKey: string = 'y';\n\n    protected dataType: DataType = undefined;\n    protected xData: any[] = [];\n    protected yData: (number | undefined)[] = [];\n\n    // Minimum y value in provided data.\n    protected min: number | undefined = undefined;\n    // Maximum y value in provided data.\n    protected max: number | undefined = undefined;\n\n    protected xScale!: any;\n    protected yScale: _Scale.LinearScale = new LinearScale();\n\n    readonly axis = new SparklineAxis();\n    readonly highlightStyle: HighlightStyleOptions = {\n        size: 6,\n        fill: 'yellow',\n        stroke: 'silver',\n        strokeWidth: 1,\n    };\n\n    protected constructor() {\n        const root = new _Scene.Group();\n        this.rootGroup = root;\n\n        const element = document.createElement('div');\n        element.setAttribute('class', 'ag-sparkline-wrapper');\n\n        // initialise scene\n        const scene = new _Scene.Scene({});\n        this.scene = scene;\n        this.canvasElement = scene.canvas.element;\n\n        // set scene properties\n        scene.setRoot(root);\n        scene.setContainer(element);\n\n        this.resizeAndSetDimensions(this.width, this.height);\n\n        // one style element for tooltip styles per document\n        if (!Sparkline.tooltipDocuments.includes(document)) {\n            this.initialiseTooltipStyles();\n        }\n\n        this.setupDomEventListeners(this.canvasElement);\n    }\n\n    private resizeAndSetDimensions(width: number, height: number): void {\n        this.scene.resize(width, height);\n        this.seriesRect.width = width;\n        this.seriesRect.height = height;\n    }\n\n    private initialiseTooltipStyles(): void {\n        const styleElement = document.createElement('style');\n        styleElement.innerHTML = defaultTooltipCss;\n        document.head.insertBefore(styleElement, document.head.querySelector('style'));\n        Sparkline.tooltipDocuments.push(document);\n    }\n\n\n\n    private _width: number = 100;\n    set width(value: number) {\n        if (this._width !== value) {\n            this._width = value;\n            this.scene.resize(value, this.height);\n            this.scheduleLayout();\n        }\n    }\n    get width(): number {\n        return this._width;\n    }\n\n    private _height: number = 100;\n    set height(value: number) {\n        if (this._height !== value) {\n            this._height = value;\n            this.scene.resize(this.width, value);\n            this.scheduleLayout();\n        }\n    }\n    get height(): number {\n        return this._height;\n    }\n\n    /**\n     * Generate node data from processed data.\n     * Produce data joins.\n     * Update selection's nodes using node data.\n     */\n    protected update() {}\n\n    // Update y scale based on processed data.\n    protected updateYScale(): void {\n        this.updateYScaleRange();\n        this.updateYScaleDomain();\n    }\n\n    // Update y scale domain based on processed data.\n    protected updateYScaleDomain() {}\n\n    // Update y scale range based on height and padding (seriesRect).\n    protected updateYScaleRange(): void {\n        const { yScale, seriesRect } = this;\n        yScale.range = [seriesRect.height, 0];\n    }\n\n    // Update x scale based on processed data.\n    protected updateXScale(): void {\n        const { type } = this.axis;\n\n        this.xScale = this.getXScale(type);\n\n        this.updateXScaleRange();\n        this.updateXScaleDomain();\n    }\n\n    // Update x scale range based on width and padding (seriesRect).\n    protected updateXScaleRange(): void {\n        this.xScale.range = [0, this.seriesRect.width];\n    }\n\n    // Update x scale domain based on processed data and type of scale.\n    protected updateXScaleDomain(): void {\n        const { xData, xScale } = this;\n\n        let xMinMax;\n        if (xScale instanceof LinearScale || xScale instanceof TimeScale) {\n            xMinMax = extent(xData);\n        }\n\n        this.xScale.domain = xMinMax ? xMinMax.slice() : xData;\n    }\n\n    /**\n     * Return xScale instance based on the provided type or return a `BandScale` by default.\n     * The default type is `category`.\n     * @param type\n     */\n    protected getXScale(type: AxisType = 'category'): ScaleType {\n        switch (type) {\n            case 'number':\n                return new LinearScale();\n            case 'time':\n                return new TimeScale();\n            case 'category':\n            default:\n                return new BandScale();\n        }\n    }\n\n    // Update axis line.\n    protected updateAxisLine(): void {}\n\n    // Update X and Y scales and the axis line.\n    protected updateAxes(): void {\n        this.updateYScale();\n        this.updateXScale();\n        this.updateAxisLine();\n    }\n\n    // Update horizontal and vertical crosshair lines.\n    protected updateCrosshairs(): void {\n        this.updateXCrosshairLine();\n        this.updateYCrosshairLine();\n    }\n\n    // Using processed data, generate data that backs visible nodes.\n    protected generateNodeData():\n        | { nodeData: SeriesNodeDatum[]; fillData: SeriesNodeDatum[]; strokeData: SeriesNodeDatum[] }\n        | SeriesNodeDatum[]\n        | undefined {\n        return [];\n    }\n\n    // Returns persisted node data associated with the sparkline's data.\n    protected getNodeData(): readonly SeriesNodeDatum[] {\n        return [];\n    }\n\n    // Update the selection's nodes.\n    protected updateNodes(): void {}\n\n    // Update the vertical crosshair line.\n    protected updateXCrosshairLine(): void {}\n\n    // Update the horizontal crosshair line.\n    protected updateYCrosshairLine(): void {}\n\n    // Efficiently update sparkline nodes on hightlight changes.\n    protected highlightedDatum?: SeriesNodeDatum;\n    protected highlightDatum(closestDatum: SeriesNodeDatum): void {\n        this.updateNodes();\n    }\n\n    protected dehighlightDatum(): void {\n        this.highlightedDatum = undefined;\n        this.updateNodes();\n        this.updateCrosshairs();\n    }\n\n    abstract getTooltipHtml(datum: SeriesNodeDatum): string | undefined;\n\n    /**\n     * Highlight closest datum and display tooltip if enabled.\n     * Only update if necessary, i.e. only update if the highlighted datum is different from previously highlighted datum,\n     * or if there is no previously highlighted datum.\n     * @param event\n     */\n    private onMouseMove(event: MouseEvent) {\n        this.mouseMoveEvent = event;\n        this.updateHitPoint(event);\n    }\n\n    private updateHitPoint(event: MouseEvent) {\n        const closestDatum: SeriesNodeDatum | undefined = this.pickClosestSeriesNodeDatum(event.offsetX, event.offsetY);\n\n        if (!closestDatum) {\n            return;\n        }\n\n        const oldHighlightedDatum = this.highlightedDatum;\n        this.highlightedDatum = closestDatum;\n\n        if (\n            (this.highlightedDatum && !oldHighlightedDatum) ||\n            (this.highlightedDatum && oldHighlightedDatum && this.highlightedDatum !== oldHighlightedDatum)\n        ) {\n            this.highlightDatum(closestDatum);\n            this.updateCrosshairs();\n            this.scene.render().catch((e) => console.error(`AG Grid - chart rendering failed`, e));\n        }\n\n        const tooltipEnabled = this.processedOptions?.tooltip?.enabled ?? true;\n        if (tooltipEnabled) {\n            this.handleTooltip(event, closestDatum);\n        }\n    }\n\n    /**\n     * Dehighlight all nodes and remove tooltip.\n     * @param event\n     */\n    private onMouseOut(event: MouseEvent) {\n        this.dehighlightDatum();\n        this.tooltip.toggle(false);\n        this.scene.render().catch((e) => console.error(`AG Grid - chart rendering failed`, e));\n    }\n\n    protected smallestInterval?: { x: number; y: number } = undefined;\n    // Fetch required values from the data object and process them.\n    private processData() {\n        const { data, yData, xData } = this;\n\n        if (!data || this.invalidData(this.data)) {\n            return;\n        }\n\n        yData.length = 0;\n        xData.length = 0;\n\n        const n = data.length;\n\n        const dataType = this.getDataType(data);\n        this.dataType = dataType;\n\n        const { type: xValueType } = this.axis;\n        const xType = xValueType !== 'number' && xValueType !== 'time' ? 'category' : xValueType;\n\n        const isContinuousX = xType === 'number' || xType === 'time';\n\n        const setSmallestXInterval = (curr: number, prev: number) => {\n            if (this.smallestInterval == undefined) {\n                this.smallestInterval = { x: Infinity, y: Infinity };\n            }\n            const { x } = this.smallestInterval;\n\n            const interval = Math.abs(curr - prev);\n            if (interval > 0 && interval < x) {\n                this.smallestInterval.x = interval;\n            }\n        };\n\n        let prevX;\n\n        if (dataType === 'number') {\n            for (let i = 0; i < n; i++) {\n                const xDatum = i;\n                const yDatum = data[i];\n\n                const x = this.getDatum(xDatum, xType);\n                const y = this.getDatum(yDatum, 'number');\n\n                if (isContinuousX) {\n                    setSmallestXInterval(x, prevX);\n                }\n\n                xData.push(x);\n                yData.push(y);\n\n                prevX = x;\n            }\n        } else if (dataType === 'array') {\n            for (let i = 0; i < n; i++) {\n                const datum = data[i];\n                if (Array.isArray(datum)) {\n                    const xDatum = datum[0];\n                    const yDatum = datum[1];\n\n                    const x = this.getDatum(xDatum, xType);\n                    const y = this.getDatum(yDatum, 'number');\n\n                    if (x == undefined) {\n                        continue;\n                    }\n\n                    if (isContinuousX) {\n                        setSmallestXInterval(x, prevX);\n                    }\n\n                    xData.push(x);\n                    yData.push(y);\n\n                    prevX = x;\n                }\n            }\n        } else if (dataType === 'object') {\n            const { yKey, xKey } = this;\n\n            for (let i = 0; i < n; i++) {\n                const datum = data[i];\n\n                if (typeof datum === 'object' && !Array.isArray(datum)) {\n                    const xDatum = datum[xKey];\n                    const yDatum = datum[yKey];\n\n                    const x = this.getDatum(xDatum, xType);\n                    const y = this.getDatum(yDatum, 'number');\n\n                    if (x == undefined) {\n                        continue;\n                    }\n\n                    if (isContinuousX) {\n                        setSmallestXInterval(x, prevX);\n                    }\n\n                    xData.push(x);\n                    yData.push(y);\n\n                    prevX = x;\n                }\n            }\n        }\n\n        this.updateAxes();\n        this.immediateLayout();\n    }\n\n    /**\n     * Return the type of data provided to the sparkline based on the first truthy value in the data array.\n     * If the value is not a number, array or object, return `undefined`.\n     * @param data\n     */\n    private getDataType(data: any): DataType {\n        for (const datum of data) {\n            if (datum != undefined) {\n                if (isNumber(datum)) {\n                    return 'number';\n                } else if (Array.isArray(datum)) {\n                    return 'array';\n                } else if (typeof datum === 'object') {\n                    return 'object';\n                }\n            }\n        }\n    }\n\n    /**\n     * Return the given value depending on the type of axis.\n     * Return `undefined` if the value is invalid for the given axis type.\n     * @param value\n     */\n    private getDatum(value: any, type: AxisType): any {\n        if ((type === 'number' && isNumber(value)) || (type === 'time' && (isNumber(value) || isDate(value)))) {\n            return value;\n        } else if (type === 'category') {\n            if (isString(value) || isDate(value) || isNumber(value)) {\n                return { toString: () => String(value) };\n            } else if (isStringObject(value)) {\n                return value;\n            }\n        }\n    }\n\n    private layoutId: number = 0;\n\n    /**\n     * Only `true` while we are waiting for the layout to start.\n     * This will be `false` if the layout has already started and is ongoing.\n     */\n    get layoutScheduled(): boolean {\n        return !!this.layoutId;\n    }\n\n    /**\n     * Execute update method on the next available screen repaint to make changes to the canvas.\n     * If we are waiting for a layout to start and a new layout is requested,\n     * cancel the previous layout using the non 0 integer (this.layoutId) returned from requestAnimationFrame.\n     */\n    protected scheduleLayout() {\n        if (this.layoutId) {\n            cancelAnimationFrame(this.layoutId);\n        }\n        this.layoutId = requestAnimationFrame(() => {\n            this.immediateLayout();\n\n            this.layoutId = 0;\n        });\n    }\n\n    private immediateLayout() {\n        this.setSparklineDimensions();\n\n        if (this.invalidData(this.data)) {\n            return;\n        }\n\n        // update axes ranges\n        this.updateXScaleRange();\n        this.updateYScaleRange();\n\n        // update axis line\n        this.updateAxisLine();\n\n        // produce data joins and update selection's nodes\n        this.update();\n\n        this.scene.render().catch((e) => console.error(`AG Grid - chart rendering failed`, e));\n    }\n\n    private setSparklineDimensions() {\n        const { width, height, padding, seriesRect, rootGroup } = this;\n        const shrunkWidth = width - padding.left - padding.right;\n        const shrunkHeight = height - padding.top - padding.bottom;\n\n        seriesRect.width = shrunkWidth;\n        seriesRect.height = shrunkHeight;\n        seriesRect.x = padding.left;\n        seriesRect.y = padding.top;\n\n        rootGroup.translationX = seriesRect.x;\n        rootGroup.translationY = seriesRect.y;\n    }\n\n    /**\n     * Return the closest data point to x/y canvas coordinates.\n     * @param x\n     * @param y\n     */\n    private pickClosestSeriesNodeDatum(x: number, y: number): SeriesNodeDatum | undefined {\n        let minDistance = Infinity;\n        let closestDatum: SeriesNodeDatum | undefined;\n        const hitPoint = this.rootGroup.transformPoint(x, y);\n        const nodeData = this.getNodeData();\n\n        for (let i = 0; i < nodeData.length; i++) {\n            const datum = nodeData[i];\n\n            if (!datum.point) {\n                return;\n            }\n            const distance = this.getDistance(hitPoint, datum.point);\n            if (distance <= minDistance) {\n                minDistance = distance;\n                closestDatum = datum;\n            }\n        }\n\n        return closestDatum;\n    }\n\n    /**\n     * Return the relevant distance between two points.\n     * The distance will be calculated based on the x value of the points for all sparklines except bar sparkline, where the distance is based on the y values.\n     * @param x\n     * @param y\n     */\n    protected getDistance(p1: Point, p2: Point): number {\n        return Math.abs(p1.x - p2.x);\n    }\n\n    /**\n     * calculate x/y coordinates for tooltip based on coordinates of highlighted datum, position of canvas and page offset.\n     * @param datum\n     */\n    private handleTooltip(event: MouseEvent, datum: SeriesNodeDatum): void {\n        const { seriesDatum } = datum;\n        const { canvasElement } = this;\n        const { clientX, clientY } = event;\n\n        const tooltipOptions = this.processedOptions?.tooltip;\n        const meta: SparklineTooltipMeta = {\n            pageX: clientX,\n            pageY: clientY,\n            position: {\n                xOffset: tooltipOptions?.xOffset,\n                yOffset: tooltipOptions?.yOffset,\n            },\n            container: tooltipOptions?.container,\n        };\n\n        // confine tooltip to sparkline width if tooltip container not provided.\n        if (meta.container == undefined) {\n            meta.container = canvasElement;\n        }\n\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n\n        // check if tooltip is enabled for this specific data point\n        let enabled = tooltipOptions?.enabled ?? true;\n\n        const tooltipRenderer = tooltipOptions?.renderer;\n        if (tooltipRenderer) {\n            const tooltipRendererResult = tooltipRenderer({\n                context: this.context,\n                datum: seriesDatum,\n                yValue,\n                xValue,\n            });\n            enabled =\n                typeof tooltipRendererResult !== 'string' && tooltipRendererResult.enabled !== undefined\n                    ? tooltipRendererResult.enabled\n                    : enabled;\n        }\n\n        const html = enabled && seriesDatum.y !== undefined && this.getTooltipHtml(datum);\n\n        if (html) {\n            this.tooltip.show(meta, html);\n        }\n    }\n\n    protected formatNumericDatum(datum: number): string {\n        return String(Math.round(datum * 10) / 10);\n    }\n\n    private defaultDateFormatter = new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n    } as any);\n\n    // locale.format('%m/%d/%y, %H:%M:%S');\n\n    protected formatDatum(datum: any): string {\n        const type = this.axis.type || 'category';\n\n        if (type === 'number' && typeof datum === 'number') {\n            return this.formatNumericDatum(datum);\n        } else if (type === 'time' && (datum instanceof Date || isNumber(datum))) {\n            return this.defaultDateFormatter.format(datum);\n        } else {\n            return String(datum);\n        }\n    }\n\n    private _onMouseMove = this.onMouseMove.bind(this);\n    private _onMouseOut = this.onMouseOut.bind(this);\n\n    private setupDomEventListeners(chartElement: HTMLCanvasElement): void {\n        chartElement.addEventListener('mousemove', this._onMouseMove);\n        chartElement.addEventListener('mouseout', this._onMouseOut);\n    }\n\n    private cleanupDomEventListeners(chartElement: HTMLCanvasElement): void {\n        chartElement.removeEventListener('mousemove', this._onMouseMove);\n        chartElement.removeEventListener('mouseout', this._onMouseOut);\n    }\n\n    private invalidData(data: any) {\n        return !data || !Array.isArray(data);\n    }\n\n    /**\n     * Cleanup and remove canvas element from the DOM.\n     */\n    public destroy(): void {\n        this.cleanupDomEventListeners(this.canvasElement);\n        this.scene.destroy();\n        // remove canvas element from the DOM\n        this.container = undefined;\n    }\n}\n", "export const defaultTooltipCss = `\n.ag-sparkline-tooltip-wrapper {\n    position: absolute;\n    user-select: none;\n    pointer-events: none;\n}\n\n.ag-sparkline-tooltip {\n    position: relative;\n    font: 12px arial,sans-serif;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px rgb(0 0 0 / 20%), 0 1px 1px rgb(0 0 0 / 14%);\n    line-height: 1.7em;\n    overflow: hidden;\n    white-space: nowrap;\n    z-index: 99999;\n    background-color: rgb(255, 255, 255);\n    color: rgba(0,0,0, 0.67);\n}\n\n.ag-sparkline-tooltip-content {\n    padding: 0 7px;\n    opacity: 1;\n}\n\n.ag-sparkline-tooltip-title {\n    padding-left: 7px;\n    opacity: 1;\n}\n\n.ag-sparkline-tooltip-wrapper-hidden {\n    top: -10000px !important;\n}\n\n.ag-sparkline-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n`;", "import { TooltipRendererResult } from '@ag-grid-community/core';\n\nexport interface SparklineTooltipMeta {\n    pageX: number;\n    pageY: number;\n    position?: {\n        xOffset?: number;\n        yOffset?: number;\n    };\n    container?: HTMLElement;\n}\n\nexport function toTooltipHtml(input: string | TooltipRendererResult, defaults?: TooltipRendererResult): string {\n    if (typeof input === 'string') {\n        return input;\n    }\n\n    defaults = defaults ?? {};\n\n    const {\n        content = defaults.content ?? '',\n        title = defaults.title ?? undefined,\n        color = defaults.color,\n        backgroundColor = defaults.backgroundColor,\n        opacity = defaults.opacity ?? 1,\n    } = input;\n\n    let titleHtml;\n    let contentHtml;\n\n    if (color) {\n        titleHtml = title\n            ? `<span class=\"${SparklineTooltip.class}-title\"; style=\"color: ${color}\">${title}</span>`\n            : '';\n        contentHtml = `<span class=\"${SparklineTooltip.class}-content\" style=\"color: ${color}\">${content}</span>`;\n    } else {\n        titleHtml = title ? `<span class=\"${SparklineTooltip.class}-title\">${title}</span>` : '';\n        contentHtml = `<span class=\"${SparklineTooltip.class}-content\">${content}</span>`;\n    }\n\n    let style = `opacity: ${opacity}`;\n    if (backgroundColor) {\n        style += `; background-color: ${backgroundColor.toLowerCase()}`;\n    }\n\n    return `<div class=\"${SparklineTooltip.class}\" style=\"${style}\">\n                ${titleHtml}\n                ${contentHtml}\n            </div>`;\n}\n\nexport class SparklineTooltip {\n    element: HTMLElement = document.createElement('div');\n\n    static class: string = 'ag-sparkline-tooltip';\n\n    constructor() {\n        const tooltipRoot = document.body;\n        tooltipRoot.appendChild(this.element);\n    }\n\n    isVisible(): boolean {\n        const { element } = this;\n        if (element.classList) {\n            return !element.classList.contains(`${SparklineTooltip.class}-wrapper-hidden`);\n        }\n\n        // IE11\n        const classes = element.getAttribute('class');\n        if (classes) {\n            return classes.split(' ').indexOf(`${SparklineTooltip.class}-wrapper-hidden`) < 0;\n        }\n\n        return false;\n    }\n\n    updateClass(visible?: boolean) {\n        const classList = [`${SparklineTooltip.class}-wrapper`];\n\n        if (visible !== true) {\n            classList.push(`${SparklineTooltip.class}-wrapper-hidden`);\n        }\n\n        this.element.setAttribute('class', classList.join(' '));\n    }\n\n    show(meta: SparklineTooltipMeta, html?: string) {\n        this.toggle(false);\n\n        const { element } = this;\n\n        if (html !== undefined) {\n            element.innerHTML = html;\n        } else if (!element.innerHTML) {\n            return;\n        }\n\n        const xOffset = meta.position?.xOffset ?? 10;\n        const yOffset = meta.position?.yOffset ?? 0;\n\n        let left = meta.pageX + xOffset;\n        let top = meta.pageY + yOffset;\n\n        const tooltipRect = element.getBoundingClientRect();\n\n        let maxLeft = window.innerWidth - tooltipRect.width;\n\n        if (meta.container) {\n            const containerRect = meta.container.getBoundingClientRect();\n\n            maxLeft = containerRect.left + (containerRect.width - tooltipRect.width);\n        }\n\n        if (left > maxLeft) {\n            left = meta.pageX - element.clientWidth - xOffset;\n        }\n\n        if (typeof scrollX !== 'undefined') {\n            left += scrollX;\n        }\n        if (typeof scrollY !== 'undefined') {\n            top += scrollY;\n        }\n\n        element.style.left = `${Math.round(left)}px`;\n        element.style.top = `${Math.round(top)}px`;\n\n        this.toggle(true);\n    }\n\n    toggle(visible?: boolean) {\n        this.updateClass(visible);\n    }\n\n    destroy() {\n        const { parentNode } = this.element;\n\n        if (parentNode) {\n            parentNode.removeChild(this.element);\n        }\n    }\n}\n", "import { _Scene } from 'ag-charts-community';\n\nexport function getMarker(shape: string) {\n    switch (shape) {\n        case 'circle':\n            return _Scene.Circle;\n        case 'square':\n            return _Scene.Square;\n        case 'diamond':\n            return _Scene.Diamond;\n        default:\n            return _Scene.Circle;\n    }\n}", "export function getLineDash(lineCap: 'butt' | 'square' | 'round' | undefined, lineDash: string = 'solid'): number[] {\n\n    const buttOrNull: { [key: string]: number[] } = {\n        solid: [],\n        dash: [4, 3],\n        dot: [1, 3],\n        dashDot: [4, 3, 1, 3],\n        dashDotDot: [4, 3, 1, 3, 1, 3],\n        shortDot: [1, 1],\n        shortDash: [3, 1],\n        shortDashDot: [3, 1, 1, 1],\n        shortDashDotDot: [3, 1, 1, 1, 1, 1],\n        longDash: [8, 3],\n        longDashDot: [8, 3, 1, 3],\n        longDashDotDot: [8, 3, 1, 3, 1, 3]\n    };\n\n    const roundOrSquare: { [key: string]: number[] } = {\n        solid: [],\n        dash: [3, 3],\n        dot: [0, 3],\n        dashDot: [3, 3, 0, 3],\n        dashDotDot: [3, 3, 0, 3, 0, 3],\n        shortDot: [0, 2],\n        shortDash: [2, 2],\n        shortDashDot: [2, 2, 0, 2],\n        shortDashDotDot: [2, 2, 0, 2, 0, 2],\n        longDash: [7, 3],\n        longDashDot: [7, 3, 0, 3],\n        longDashDotDot: [7, 3, 0, 3, 0, 3]\n    };\n\n    if (lineCap === 'round' || lineCap === 'square') {\n        if (roundOrSquare[lineDash] == undefined) {\n            console.warn(`'${lineDash}' is not a valid 'lineDash' option.`);\n            return roundOrSquare.solid;\n        }\n\n        return roundOrSquare[lineDash];\n    }\n\n    if (buttOrNull[lineDash] == undefined) {\n        console.warn(`'${lineDash}' is not a valid 'lineDash' option.`);\n        return buttOrNull.solid;\n    }\n\n    return buttOrNull[lineDash];\n}", "import { MarkerFormat, MarkerFormatterParams, CrosshairLineOptions } from '@ag-grid-community/core';\nimport { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport { Point, SeriesNodeDatum, Sparkline, ZINDICIES } from '../sparkline';\nimport { toTooltipHtml } from '../tooltip/sparklineTooltip';\nimport { getMarker } from '../marker/markerFactory';\nimport { getLineDash } from '../../util/lineDash';\n\nconst { extent } = _Util;\nconst { BandScale } = _Scale;\n\ninterface LineNodeDatum extends SeriesNodeDatum {\n    readonly point: Point;\n}\n\nclass SparklineMarker {\n    enabled: boolean = true;\n    shape: string = 'circle';\n    size: number = 0;\n    fill?: string = 'rgb(124, 181, 236)';\n    stroke?: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n    formatter?: (params: MarkerFormatterParams) => MarkerFormat = undefined;\n}\n\nclass SparklineLine {\n    stroke: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n}\n\nclass SparklineCrosshairs {\n    xLine: CrosshairLineOptions = {\n        enabled: true,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n    yLine: CrosshairLineOptions = {\n        enabled: false,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n}\n\nexport class LineSparkline extends Sparkline {\n    static className = 'LineSparkline';\n\n    protected linePath: _Scene.Path = new _Scene.Path();\n    protected xCrosshairLine: _Scene.Line = new _Scene.Line();\n    protected yCrosshairLine: _Scene.Line = new _Scene.Line();\n\n    private lineSparklineGroup: _Scene.Group = new _Scene.Group();\n    private markers: _Scene.Group = new _Scene.Group();\n    private markerSelection: _Scene.Selection<_Scene.Marker, LineNodeDatum> = _Scene.Selection.select(\n        this.markers,\n        () => this.markerFactory()\n    );\n    private markerSelectionData: LineNodeDatum[] = [];\n\n    readonly marker = new SparklineMarker();\n    readonly line = new SparklineLine();\n    readonly crosshairs = new SparklineCrosshairs();\n\n    constructor() {\n        super();\n        this.rootGroup.append(this.lineSparklineGroup);\n\n        this.linePath.zIndex = ZINDICIES.SERIES_STROKE_ZINDEX;\n        this.xCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.yCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.markers.zIndex = ZINDICIES.SERIES_MARKERS_ZINDEX;\n\n        this.lineSparklineGroup.append([this.linePath, this.xCrosshairLine, this.yCrosshairLine, this.markers]);\n    }\n\n    protected getNodeData(): LineNodeDatum[] {\n        return this.markerSelectionData;\n    }\n\n    protected markerFactory(): _Scene.Marker {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker(shape);\n        return new MarkerShape();\n    }\n\n    /**\n     * If marker shape is changed, this method should be called to remove the previous marker nodes selection.\n     */\n    private onMarkerShapeChange() {\n        this.markerSelection = this.markerSelection.clear();\n        this.scheduleLayout();\n    }\n\n    protected update(): void {\n        const nodeData = this.generateNodeData();\n\n        if (!nodeData) {\n            return;\n        }\n\n        this.markerSelectionData = nodeData;\n\n        this.updateSelection(nodeData);\n        this.updateNodes();\n\n        this.updateLine();\n    }\n\n    protected updateYScaleDomain(): void {\n        const { yData, yScale } = this;\n\n        const yMinMax = extent(yData as number[]);\n\n        let yMin = 0;\n        let yMax = 1;\n\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0] as number;\n            yMax = this.max = yMinMax[1] as number;\n        }\n\n        if (yMin === yMax) {\n            // if all values in the data are the same, yMin and yMax will be equal, need to adjust the domain with some padding\n            const padding = Math.abs(yMin * 0.01);\n            yMin -= padding;\n            yMax += padding;\n        }\n\n        yScale.domain = [yMin, yMax];\n    }\n\n    protected generateNodeData(): LineNodeDatum[] | undefined {\n        const { data, yData, xData, xScale, yScale } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const continuous = !(xScale instanceof BandScale);\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n\n        const nodeData: LineNodeDatum[] = [];\n\n        for (let i = 0; i < yData.length; i++) {\n            const yDatum = yData[i];\n            const xDatum = xData[i];\n\n            if (yDatum == undefined) {\n                continue;\n            }\n\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n\n            nodeData.push({\n                seriesDatum: { x: xDatum, y: yDatum },\n                point: { x, y },\n            });\n        }\n        return nodeData;\n    }\n\n    private updateSelection(selectionData: LineNodeDatum[]): void {\n        this.markerSelection.update(selectionData);\n    }\n\n    protected updateNodes(): void {\n        const { highlightedDatum, highlightStyle, marker } = this;\n        const {\n            size: highlightSize,\n            fill: highlightFill,\n            stroke: highlightStroke,\n            strokeWidth: highlightStrokeWidth,\n        } = highlightStyle;\n        const markerFormatter = marker.formatter;\n\n        this.markerSelection.each((node, datum, index) => {\n            const highlighted = datum === highlightedDatum;\n            const markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;\n            const markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke;\n            const markerStrokeWidth =\n                highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : marker.strokeWidth;\n            const markerSize = highlighted && highlightSize !== undefined ? highlightSize : marker.size;\n\n            let markerFormat: MarkerFormat | undefined;\n\n            const { seriesDatum, point } = datum;\n\n            if (markerFormatter) {\n                const first = index === 0;\n                const last = index === this.markerSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n\n                markerFormat = markerFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: markerFill,\n                    stroke: markerStroke,\n                    strokeWidth: markerStrokeWidth,\n                    size: markerSize,\n                    highlighted,\n                });\n            }\n\n            node.size = markerFormat && markerFormat.size != undefined ? markerFormat.size : markerSize;\n            node.fill = markerFormat && markerFormat.fill != undefined ? markerFormat.fill : markerFill;\n            node.stroke = markerFormat && markerFormat.stroke != undefined ? markerFormat.stroke : markerStroke;\n            node.strokeWidth =\n                markerFormat && markerFormat.strokeWidth != undefined ? markerFormat.strokeWidth : markerStrokeWidth;\n\n            node.translationX = point.x;\n            node.translationY = point.y;\n            node.visible =\n                markerFormat && markerFormat.enabled != undefined\n                    ? markerFormat.enabled\n                    : marker.enabled && node.size > 0;\n        });\n    }\n\n    protected updateLine(): void {\n        const { linePath, yData, xData, xScale, yScale, line } = this;\n\n        const path = linePath.path;\n        path.clear();\n\n        if (yData.length < 2) {\n            return;\n        }\n\n        const continuous = !(xScale instanceof BandScale);\n        const n = yData.length;\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        let moveTo = true;\n\n\n        for (let i = 0; i < n; i++) {\n            const xDatum = xData[i];\n            const yDatum = yData[i];\n\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n\n            if (yDatum == undefined) {\n                moveTo = true;\n            } else {\n                if (moveTo) {\n                    path.moveTo(x, y);\n                    moveTo = false;\n                } else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n\n        linePath.fill = undefined;\n        linePath.stroke = line.stroke;\n        linePath.strokeWidth = line.strokeWidth;\n    }\n\n    protected updateXCrosshairLine(): void {\n        const {\n            yScale,\n            xCrosshairLine,\n            highlightedDatum,\n            crosshairs: { xLine },\n        } = this;\n\n        if (!xLine.enabled || highlightedDatum == undefined) {\n            xCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        xCrosshairLine.y1 = yScale.range[0];\n        xCrosshairLine.y2 = yScale.range[1];\n        xCrosshairLine.x1 = xCrosshairLine.x2 = 0;\n        xCrosshairLine.stroke = xLine.stroke;\n        xCrosshairLine.strokeWidth = xLine.strokeWidth ?? 1;\n\n        xCrosshairLine.lineCap = xLine.lineCap === 'round' || xLine.lineCap === 'square' ? xLine.lineCap : undefined;\n\n        const { lineDash } = xLine;\n        xCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(xCrosshairLine.lineCap, xLine.lineDash as string);\n\n        xCrosshairLine.translationX = highlightedDatum.point!.x;\n    }\n\n    protected updateYCrosshairLine() {\n        const {\n            xScale,\n            yCrosshairLine,\n            highlightedDatum,\n            crosshairs: { yLine },\n        } = this;\n\n        if (!yLine.enabled || highlightedDatum == undefined) {\n            yCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        yCrosshairLine.x1 = xScale.range[0];\n        yCrosshairLine.x2 = xScale.range[1];\n        yCrosshairLine.y1 = yCrosshairLine.y2 = 0;\n        yCrosshairLine.stroke = yLine.stroke;\n        yCrosshairLine.strokeWidth = yLine.strokeWidth ?? 1;\n\n        yCrosshairLine.lineCap = yLine.lineCap === 'round' || yLine.lineCap === 'square' ? yLine.lineCap : undefined;\n\n        const { lineDash } = yLine;\n        yCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(yCrosshairLine.lineCap, yLine.lineDash as string);\n\n        yCrosshairLine.translationY = highlightedDatum.point!.y;\n    }\n\n    getTooltipHtml(datum: SeriesNodeDatum): string | undefined {\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n\n        const defaults = {\n            content,\n            title,\n        };\n\n        const tooltipRenderer = this.processedOptions?.tooltip?.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(\n                tooltipRenderer({\n                    context: this.context,\n                    datum: seriesDatum,\n                    yValue,\n                    xValue,\n                }),\n                defaults\n            );\n        }\n\n        return toTooltipHtml(defaults);\n    }\n}\n", "import { _Scale, _Scene, _Util } from 'ag-charts-community';\nimport { BarColumnLabelPlacement, BarColumnSparkline, RectNodeDatum } from './barColumnSparkline';\nimport { Point } from '../sparkline';\n\nconst { isNumber } = _Util;\nconst { BandScale } = _Scale;\n\ninterface BarNodeDatum extends RectNodeDatum {}\nexport class BarSparkline extends BarColumnSparkline {\n    static className = 'BarSparkline';\n\n    protected updateYScaleRange() {\n        const { seriesRect, yScale } = this;\n        yScale.range = [0, seriesRect.width];\n    }\n\n    protected updateXScaleRange() {\n        const { xScale, seriesRect, paddingOuter, paddingInner } = this;\n        if (xScale instanceof BandScale) {\n            xScale.range = [0, seriesRect.height];\n            xScale.paddingInner = paddingInner;\n            xScale.paddingOuter = paddingOuter;\n        } else {\n            // last node will be clipped if the scale is not a band scale\n            // subtract last band width from the range so that the last band is not clipped\n\n            const step = this.calculateStep(seriesRect.height);\n\n            // PaddingOuter and paddingInner are fractions of the step with values between 0 and 1\n            const padding = step * paddingOuter; // left and right outer padding\n            this.bandWidth = step * (1 - paddingInner);\n\n            xScale.range = [padding, seriesRect.height - padding - this.bandWidth];\n        }\n    }\n\n    protected updateAxisLine() {\n        const { yScale, axis, axisLine, seriesRect } = this;\n        const { strokeWidth } = axis;\n\n        axisLine.x1 = 0;\n        axisLine.x2 = 0;\n        axisLine.y1 = 0;\n        axisLine.y2 = seriesRect.height;\n        axisLine.stroke = axis.stroke;\n        axisLine.strokeWidth = strokeWidth + (strokeWidth % 2 === 1 ? 1 : 0);\n\n        const yZero: number = yScale.convert(0);\n        axisLine.translationX = yZero;\n    }\n\n    protected generateNodeData(): BarNodeDatum[] | undefined {\n        const { data, yData, xData, xScale, yScale, fill, stroke, strokeWidth, label } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const {\n            fontStyle: labelFontStyle,\n            fontWeight: labelFontWeight,\n            fontSize: labelFontSize,\n            fontFamily: labelFontFamily,\n            color: labelColor,\n            formatter: labelFormatter,\n            placement: labelPlacement,\n        } = label;\n\n        const nodeData: BarNodeDatum[] = [];\n\n        const yZero = yScale.convert(0);\n        const continuous = !(xScale instanceof BandScale);\n\n        for (let i = 0, n = yData.length; i < n; i++) {\n            let yDatum = yData[i];\n            const xDatum = xData[i];\n            const invalidDatum = yDatum === undefined;\n\n            if (invalidDatum) {\n                yDatum = 0;\n            }\n\n            const y = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum);\n            const x = Math.min(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n\n            const bottom: number = Math.max(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n\n            // if the scale is a band scale, the width of the rects will be the bandwidth, otherwise the width of the rects will be the range / number of items in the data\n            const height = !continuous ? xScale.bandwidth : this.bandWidth;\n\n            const width = bottom - x;\n\n            const midPoint = {\n                x: yZero,\n                y: y,\n            };\n\n            let labelText: string;\n            if (labelFormatter) {\n                labelText = labelFormatter({ value: yDatum });\n            } else {\n                labelText = yDatum !== undefined && isNumber(yDatum) ? this.formatLabelValue(yDatum) : '';\n            }\n\n            const labelY: number = y + height / 2;\n            let labelX: number;\n\n            const labelTextBaseline: CanvasTextBaseline = 'middle';\n            let labelTextAlign: CanvasTextAlign;\n\n            const isPositiveY = yDatum !== undefined && yDatum >= 0;\n            const labelPadding = 4;\n\n            if (labelPlacement === BarColumnLabelPlacement.Center) {\n                labelX = x + width / 2;\n                labelTextAlign = 'center';\n            } else if (labelPlacement === BarColumnLabelPlacement.OutsideEnd) {\n                labelX = x + (isPositiveY ? width + labelPadding : -labelPadding);\n                labelTextAlign = isPositiveY ? 'start' : 'end';\n            } else if (labelPlacement === BarColumnLabelPlacement.InsideEnd) {\n                labelX = x + (isPositiveY ? width - labelPadding : labelPadding);\n                labelTextAlign = isPositiveY ? 'end' : 'start';\n\n                const textSize = _Scene.Text.getTextSize(labelText, labelFontFamily);\n                const textWidth = textSize.width || 20;\n                const positiveBoundary = yZero + textWidth;\n                const negativeBoundary = yZero - textWidth;\n                const exceedsBoundaries =\n                    (isPositiveY && labelX < positiveBoundary) || (!isPositiveY && labelX > negativeBoundary);\n\n                if (exceedsBoundaries) {\n                    // if labelX exceeds the boundary, labels should be positioned at `insideBase`.\n                    labelX = yZero + labelPadding * (isPositiveY ? 1 : -1);\n                    labelTextAlign = isPositiveY ? 'start' : 'end';\n                }\n            } else {\n                // if labelPlacement === BarColumnLabelPlacement.InsideBase\n                labelX = yZero + labelPadding * (isPositiveY ? 1 : -1);\n                labelTextAlign = isPositiveY ? 'start' : 'end';\n            }\n\n            nodeData.push({\n                x,\n                y,\n                width,\n                height,\n                fill,\n                stroke,\n                strokeWidth,\n                seriesDatum: { x: xDatum, y: invalidDatum ? undefined : yDatum },\n                point: midPoint,\n                label: {\n                    x: labelX,\n                    y: labelY,\n                    text: labelText,\n                    fontStyle: labelFontStyle,\n                    fontWeight: labelFontWeight,\n                    fontSize: labelFontSize,\n                    fontFamily: labelFontFamily,\n                    textAlign: labelTextAlign,\n                    textBaseline: labelTextBaseline,\n                    fill: labelColor,\n                },\n            });\n        }\n        return nodeData;\n    }\n\n    protected getDistance(p1: Point, p2: Point): number {\n        return Math.abs(p1.y - p2.y);\n    }\n}\n", "import { ColumnFormat, ColumnFormatterParams } from '@ag-grid-community/core';\nimport { FontStyle, FontWeight, _Scene, _Util } from 'ag-charts-community';\n\nimport { SeriesNodeDatum, Sparkline, ZINDICIES } from '../sparkline';\nimport { toTooltipHtml } from '../tooltip/sparklineTooltip';\nimport { Label } from '../label/label';\n\nconst { extent } = _Util;\n\nexport interface RectNodeDatum extends SeriesNodeDatum {\n    readonly x: number;\n    readonly y: number;\n    readonly width: number;\n    readonly height: number;\n    readonly fill?: string;\n    readonly stroke?: string;\n    readonly strokeWidth: number;\n    readonly label?: {\n        readonly x: number;\n        readonly y: number;\n        readonly text: string;\n        readonly fontStyle?: FontStyle;\n        readonly fontWeight?: FontWeight;\n        readonly fontSize: number;\n        readonly fontFamily: string;\n        readonly textAlign: CanvasTextAlign;\n        readonly textBaseline: CanvasTextBaseline;\n        readonly fill: string;\n    };\n}\n\nenum BarColumnNodeTag {\n    Rect,\n    Label,\n}\n\nexport enum BarColumnLabelPlacement {\n    InsideBase = 'insideBase',\n    InsideEnd = 'insideEnd',\n    Center = 'center',\n    OutsideEnd = 'outsideEnd',\n}\n\nexport class BarColumnLabel extends Label {\n    formatter?: (params: { value: number | undefined }) => string = undefined;\n    placement = BarColumnLabelPlacement.InsideEnd;\n}\n\nexport abstract class BarColumnSparkline extends Sparkline {\n    fill: string = 'rgb(124, 181, 236)';\n    stroke: string = 'silver';\n    strokeWidth: number = 0;\n    paddingInner: number = 0.1;\n    paddingOuter: number = 0.2;\n    valueAxisDomain: [number, number] | undefined = undefined;\n    formatter?: (params: ColumnFormatterParams) => ColumnFormat = undefined;\n\n    protected axisLine: _Scene.Line = new _Scene.Line();\n    protected bandWidth: number = 0;\n\n    private sparklineGroup: _Scene.Group = new _Scene.Group();\n    private rectGroup: _Scene.Group = new _Scene.Group();\n    private labelGroup: _Scene.Group = new _Scene.Group();\n\n    private rectSelection: _Scene.Selection<_Scene.Rect, RectNodeDatum> = _Scene.Selection.select(\n        this.rectGroup,\n        _Scene.Rect\n    );\n    private labelSelection: _Scene.Selection<_Scene.Text, RectNodeDatum> = _Scene.Selection.select(\n        this.labelGroup,\n        _Scene.Text\n    );\n\n    private nodeSelectionData: RectNodeDatum[] = [];\n\n    readonly label = new BarColumnLabel();\n\n    constructor() {\n        super();\n\n        this.rootGroup.append(this.sparklineGroup);\n\n        this.rectGroup.zIndex = ZINDICIES.SERIES_FILL_ZINDEX;\n        this.axisLine.zIndex = ZINDICIES.AXIS_LINE_ZINDEX;\n        this.labelGroup.zIndex = ZINDICIES.SERIES_LABEL_ZINDEX;\n\n        this.sparklineGroup.append([this.rectGroup, this.axisLine, this.labelGroup]);\n\n        this.axisLine.lineCap = 'round';\n\n        this.label.enabled = false;\n    }\n\n    protected abstract generateNodeData(): RectNodeDatum[] | undefined;\n    protected abstract updateYScaleRange(): void;\n    protected abstract updateXScaleRange(): void;\n\n    protected getNodeData(): RectNodeDatum[] {\n        return this.nodeSelectionData;\n    }\n\n    protected update(): void {\n        this.updateSelections();\n        this.updateNodes();\n    }\n\n    protected updateSelections(): void {\n        const nodeData = this.generateNodeData();\n\n        if (!nodeData) {\n            return;\n        }\n\n        this.nodeSelectionData = nodeData;\n        this.updateRectSelection(nodeData);\n        this.updateLabelSelection(nodeData);\n    }\n\n    protected updateNodes(): void {\n        this.updateRectNodes();\n        this.updateLabelNodes();\n    }\n\n    protected calculateStep(range: number): number {\n        const { xScale, paddingInner, paddingOuter, smallestInterval } = this;\n\n        // calculate step\n        let domainLength = xScale.domain[1] - xScale.domain[0];\n        let intervals = domainLength / (smallestInterval?.x ?? 1) + 1;\n\n        // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.\n        // Allow a maximum of 50 bands to ensure the step (width of individual bands + padding) does not fall below a certain number of pixels.\n        // If the number of intervals exceeds 50, calculate the step for 50 bands within the given range.\n        // This means there could be some overlap of the bands in the sparkline.\n        const maxBands = 50;\n        const bands = Math.min(intervals, maxBands);\n        const gaps = bands - 1; // number of gaps (padding between bands)\n\n        const step = range / Math.max(1, 2 * paddingOuter + gaps * paddingInner + bands); // step width is a combination of band width and gap width\n\n        return step;\n    }\n\n    protected updateYScaleDomain(): void {\n        const { yScale, yData, valueAxisDomain } = this;\n\n        const yMinMax = extent(yData as number[]);\n\n        let yMin = 0;\n        let yMax = 1;\n\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0] as number;\n            yMax = this.max = yMinMax[1] as number;\n        }\n\n        // if yMin is positive, set yMin to 0\n        yMin = yMin < 0 ? yMin : 0;\n\n        // if yMax is negative, set yMax to 0\n        yMax = yMax < 0 ? 0 : yMax;\n\n        if (valueAxisDomain) {\n            if (valueAxisDomain[1] < yMax) {\n                valueAxisDomain[1] = yMax;\n            }\n            if (valueAxisDomain[0] > yMin) {\n                valueAxisDomain[0] = yMin;\n            }\n        }\n\n        yScale.domain = valueAxisDomain ? valueAxisDomain : [yMin, yMax];\n    }\n\n    private updateRectSelection(selectionData: RectNodeDatum[]): void {\n        this.rectSelection.update(selectionData);\n    }\n\n    protected updateRectNodes(): void {\n        const { highlightedDatum, formatter: nodeFormatter, fill, stroke, strokeWidth } = this;\n        const { fill: highlightFill, stroke: highlightStroke, strokeWidth: highlightStrokeWidth } = this.highlightStyle;\n\n        this.rectSelection.each((node, datum, index) => {\n            const highlighted = datum === highlightedDatum;\n            const nodeFill = highlighted && highlightFill !== undefined ? highlightFill : fill;\n            const nodeStroke = highlighted && highlightStroke !== undefined ? highlightStroke : stroke;\n            const nodeStrokeWidth =\n                highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : strokeWidth;\n\n            let nodeFormat: ColumnFormat | undefined;\n\n            const { x, y, width, height, seriesDatum } = datum;\n\n            if (nodeFormatter) {\n                const first = index === 0;\n                const last = index === this.nodeSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n\n                nodeFormat = nodeFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    width: width,\n                    height: height,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: nodeFill,\n                    stroke: nodeStroke,\n                    strokeWidth: nodeStrokeWidth,\n                    highlighted,\n                });\n            }\n\n            node.fill = (nodeFormat && nodeFormat.fill) || nodeFill;\n            node.stroke = (nodeFormat && nodeFormat.stroke) || nodeStroke;\n            node.strokeWidth = (nodeFormat && nodeFormat.strokeWidth) || nodeStrokeWidth;\n\n            node.x = node.y = 0;\n            node.width = width;\n            node.height = height;\n            node.visible = node.height > 0;\n\n            node.translationX = x;\n            node.translationY = y;\n\n            // shifts bars upwards?\n            // node.crisp = true;\n        });\n    }\n\n    private updateLabelSelection(selectionData: RectNodeDatum[]): void {\n        this.labelSelection.update(selectionData, (text) => {\n            text.tag = BarColumnNodeTag.Label;\n            text.pointerEvents = _Scene.PointerEvents.None;\n        });\n    }\n\n    private updateLabelNodes(): void {\n        const {\n            label: { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color },\n        } = this;\n        this.labelSelection.each((text, datum) => {\n            const label = datum.label;\n\n            if (label && labelEnabled) {\n                text.fontStyle = fontStyle;\n                text.fontWeight = fontWeight;\n                text.fontSize = fontSize;\n                text.fontFamily = fontFamily;\n                text.textAlign = label.textAlign;\n                text.textBaseline = label.textBaseline;\n                text.text = label.text;\n                text.x = label.x;\n                text.y = label.y;\n                text.fill = color;\n                text.visible = true;\n            } else {\n                text.visible = false;\n            }\n        });\n    }\n\n    getTooltipHtml(datum: SeriesNodeDatum): string | undefined {\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n\n        const defaults = {\n            content,\n            title,\n        };\n\n        const tooltipRenderer = this.processedOptions?.tooltip?.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(\n                tooltipRenderer({\n                    context: this.context,\n                    datum: seriesDatum,\n                    yValue,\n                    xValue,\n                }),\n                defaults\n            );\n        }\n\n        return toTooltipHtml(defaults);\n    }\n\n    protected formatLabelValue(value: number): string {\n        return value % 1 !== 0 ? value.toFixed(1) : value.toFixed(0);\n    }\n}\n", "import { FontStyle, FontWeight } from 'ag-charts-community';\n\nexport class Label {\n    enabled = true;\n    fontSize = 8;\n    fontFamily = 'Verdana, sans-serif';\n    fontStyle?: FontStyle = undefined;\n    fontWeight?: FontWeight = undefined;\n    color = 'rgba(70, 70, 70, 1)';\n}\n", "import { _Scale, _Scene, _Util } from 'ag-charts-community';\nimport { BarColumnLabelPlacement, BarColumnSparkline, RectNodeDatum } from './barColumnSparkline';\n\nconst { isNumber } = _Util;\nconst { BandScale } = _Scale;\n\ninterface ColumnNodeDatum extends RectNodeDatum {}\nexport class ColumnSparkline extends BarColumnSparkline {\n    static className = 'ColumnSparkline';\n\n    protected updateYScaleRange() {\n        const { seriesRect, yScale } = this;\n        yScale.range = [seriesRect.height, 0];\n    }\n\n    protected updateXScaleRange() {\n        const { xScale, seriesRect, paddingOuter, paddingInner } = this;\n        if (xScale instanceof BandScale) {\n            xScale.range = [0, seriesRect.width];\n            xScale.paddingInner = paddingInner;\n            xScale.paddingOuter = paddingOuter;\n        } else {\n            // last node will be clipped if the scale is not a band scale\n            // subtract last band width from the range so that the last band is not clipped\n\n            const step = this.calculateStep(seriesRect.width);\n\n            // PaddingOuter and paddingInner are fractions of the step with values between 0 and 1\n            const padding = step * paddingOuter; // left and right outer padding\n            this.bandWidth = step * (1 - paddingInner);\n\n            xScale.range = [padding, seriesRect.width - padding - this.bandWidth];\n        }\n    }\n\n    protected updateAxisLine() {\n        const { yScale, axis, axisLine, seriesRect } = this;\n        const { strokeWidth } = axis;\n\n        axisLine.x1 = 0;\n        axisLine.x2 = seriesRect.width;\n        axisLine.y1 = 0;\n        axisLine.y2 = 0;\n        axisLine.stroke = axis.stroke;\n        axisLine.strokeWidth = strokeWidth + (strokeWidth % 2 === 1 ? 1 : 0);\n\n        const yZero: number = yScale.convert(0);\n        axisLine.translationY = yZero;\n    }\n\n    protected generateNodeData(): ColumnNodeDatum[] | undefined {\n        const { data, yData, xData, xScale, yScale, fill, stroke, strokeWidth, label } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const {\n            fontStyle: labelFontStyle,\n            fontWeight: labelFontWeight,\n            fontSize: labelFontSize,\n            fontFamily: labelFontFamily,\n            color: labelColor,\n            formatter: labelFormatter,\n            placement: labelPlacement,\n        } = label;\n\n        const nodeData: ColumnNodeDatum[] = [];\n\n        const yZero = yScale.convert(0);\n        const continuous = !(xScale instanceof BandScale);\n\n        for (let i = 0, n = yData.length; i < n; i++) {\n            let yDatum = yData[i];\n            const xDatum = xData[i];\n            const invalidDatum = yDatum === undefined;\n\n            if (invalidDatum) {\n                yDatum = 0;\n            }\n\n            const y = Math.min(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum);\n\n            const bottom: number = Math.max(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n\n            // if the scale is a band scale, the width of the rects will be the bandwidth, otherwise the width of the rects will be the range / number of items in the data\n            const width = !continuous ? xScale.bandwidth : this.bandWidth;\n\n            const height = bottom - y;\n\n            const midPoint = {\n                x: x + width / 2,\n                y: yZero,\n            };\n\n            let labelText: string;\n            if (labelFormatter) {\n                labelText = labelFormatter({ value: yDatum });\n            } else {\n                labelText = yDatum !== undefined && isNumber(yDatum) ? this.formatLabelValue(yDatum) : '';\n            }\n\n            const labelX: number = x + width / 2;\n            let labelY: number;\n\n            const labelTextAlign: CanvasTextAlign = 'center';\n            let labelTextBaseline: CanvasTextBaseline;\n\n            const isPositiveY = yDatum !== undefined && yDatum >= 0;\n            const labelPadding = 2;\n\n            if (labelPlacement === BarColumnLabelPlacement.Center) {\n                labelY = y + height / 2;\n                labelTextBaseline = 'middle';\n            } else if (labelPlacement === BarColumnLabelPlacement.OutsideEnd) {\n                labelY = y + (isPositiveY ? -labelPadding : height + labelPadding);\n                labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n            } else if (labelPlacement === BarColumnLabelPlacement.InsideEnd) {\n                labelY = y + (isPositiveY ? labelPadding : height - labelPadding);\n                labelTextBaseline = isPositiveY ? 'top' : 'bottom';\n\n                const textSize = _Scene.Text.getTextSize(labelText, labelFontFamily);\n                const textHeight = textSize.height || 10;\n                const positiveBoundary = yZero - textHeight;\n                const negativeBoundary = yZero + textHeight;\n                const exceedsBoundaries =\n                    (isPositiveY && labelY > positiveBoundary) || (!isPositiveY && labelY < negativeBoundary);\n\n                if (exceedsBoundaries) {\n                    // if labelY exceeds the y boundary, labels should be positioned at the insideBase\n                    labelY = yZero + labelPadding * (isPositiveY ? -1 : 1);\n                    labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n                }\n            } else {\n                // if labelPlacement === BarColumnLabelPlacement.InsideBase\n                labelY = yZero + labelPadding * (isPositiveY ? -1 : 1);\n                labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n            }\n\n            nodeData.push({\n                x,\n                y,\n                width,\n                height,\n                fill,\n                stroke,\n                strokeWidth,\n                seriesDatum: { x: xDatum, y: invalidDatum ? undefined : yDatum },\n                point: midPoint,\n                label: {\n                    x: labelX,\n                    y: labelY,\n                    text: labelText,\n                    fontStyle: labelFontStyle,\n                    fontWeight: labelFontWeight,\n                    fontSize: labelFontSize,\n                    fontFamily: labelFontFamily,\n                    textAlign: labelTextAlign,\n                    textBaseline: labelTextBaseline,\n                    fill: labelColor,\n                },\n            });\n        }\n        return nodeData;\n    }\n}\n", "import { AreaSparkline } from './area/areaSparkline';\nimport { SparklineAxis } from './sparkline';\nimport { LineSparkline } from './line/lineSparkline';\nimport { BarSparkline } from './bar-column/barSparkline';\nimport { ColumnSparkline } from './bar-column/columnSparkline';\n\nimport {\n    CrosshairLineOptions,\n    SparklineOptions,\n    HighlightStyleOptions,\n    SparklineMarkerOptions,\n    SparklineLineOptions,\n    PaddingOptions,\n    SparklineCrosshairsOptions,\n} from '@ag-grid-community/core';\nimport { SparklineTooltip } from './tooltip/sparklineTooltip';\nimport { BarColumnLabel } from './bar-column/barColumnSparkline';\nimport { _Util } from 'ag-charts-community';\n\nconst { isNumber } = _Util;\n\nexport type SparklineFactoryOptions = SparklineOptions & {\n    data: any[];\n    width: number;\n    height: number;\n    context?: any;\n    container?: HTMLElement;\n};\n\ntype SparklineType = LineSparkline | AreaSparkline | ColumnSparkline | BarSparkline;\n\ntype Validators = {\n    [property: string]: ValidatorFunc;\n};\n\ntype ValidatorFunc = (property: string, value: any, defaultValue?: any) => boolean;\n\nexport abstract class AgSparkline {\n    static create(options: SparklineFactoryOptions, tooltip: SparklineTooltip) {\n        // avoid mutating user provided options\n        options = _Util.deepClone(options);\n\n        const sparkline = getSparklineInstance(options.type);\n\n        if (tooltip) {\n            sparkline.tooltip = tooltip;\n        }\n\n        initSparkline(sparkline, options);\n        initSparklineByType(sparkline, options);\n\n        if (options.data) {\n            sparkline.data = options.data;\n        }\n\n        sparkline.processedOptions = options;\n\n        return sparkline;\n    }\n}\n\nfunction getSparklineInstance(type: string = 'line'): any {\n    switch (type) {\n        case 'column':\n            return new ColumnSparkline();\n        case 'bar':\n            return new BarSparkline();\n        case 'area':\n            return new AreaSparkline();\n        case 'line':\n        default:\n            return new LineSparkline();\n    }\n}\n\nfunction initSparklineByType(sparkline: SparklineType, options: any): void {\n    switch (options.type) {\n        case 'bar':\n            initBarColumnSparkline(sparkline as BarSparkline, options);\n            break;\n        case 'column':\n            initBarColumnSparkline(sparkline as ColumnSparkline, options);\n            break;\n        case 'area':\n            initAreaSparkline(sparkline as AreaSparkline, options);\n            break;\n        case 'line':\n        default:\n            initLineSparkline(sparkline as LineSparkline, options);\n            break;\n    }\n}\n\nfunction initSparkline(sparkline: SparklineType, options: any) {\n    setValueIfPropertyExists(sparkline, 'context', options.context, options);\n    setValueIfPropertyExists(sparkline, 'width', options.width, options);\n    setValueIfPropertyExists(sparkline, 'height', options.height, options);\n    setValueIfPropertyExists(sparkline, 'container', options.container, options);\n    setValueIfPropertyExists(sparkline, 'xKey', options.xKey, options);\n    setValueIfPropertyExists(sparkline, 'yKey', options.yKey, options);\n\n    if (options.padding) {\n        initPaddingOptions(sparkline.padding, options.padding);\n    }\n\n    if (options.axis) {\n        initAxisOptions(sparkline.axis, options.axis);\n    }\n\n    if (options.highlightStyle) {\n        initHighlightStyleOptions(sparkline.highlightStyle, options.highlightStyle);\n    }\n}\n\nfunction initLineSparkline(sparkline: LineSparkline, options: any) {\n    if (options.marker) {\n        initMarkerOptions(sparkline.marker, options.marker);\n    }\n\n    if (options.line) {\n        initLineOptions(sparkline.line, options.line);\n    }\n\n    if (options.crosshairs) {\n        initCrosshairsOptions(sparkline.crosshairs, options.crosshairs);\n    }\n}\n\nfunction initAreaSparkline(sparkline: AreaSparkline, options: any) {\n    setValueIfPropertyExists(sparkline, 'fill', options.fill, options);\n\n    if (options.marker) {\n        initMarkerOptions(sparkline.marker, options.marker);\n    }\n\n    if (options.line) {\n        initLineOptions(sparkline.line, options.line);\n    }\n\n    if (options.crosshairs) {\n        initCrosshairsOptions(sparkline.crosshairs, options.crosshairs);\n    }\n}\n\nfunction initBarColumnSparkline(sparkline: ColumnSparkline | BarSparkline, options: any) {\n    setValueIfPropertyExists(sparkline, 'valueAxisDomain', options.valueAxisDomain, options);\n    setValueIfPropertyExists(sparkline, 'fill', options.fill, options);\n    setValueIfPropertyExists(sparkline, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(sparkline, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(sparkline, 'paddingInner', options.paddingInner, options);\n    setValueIfPropertyExists(sparkline, 'paddingOuter', options.paddingOuter, options);\n    setValueIfPropertyExists(sparkline, 'formatter', options.formatter, options);\n\n    if (options.label) {\n        initLabelOptions(sparkline.label, options.label);\n    }\n}\n\nfunction initPaddingOptions(target: PaddingOptions, options: any) {\n    setValueIfPropertyExists(target, 'top', options.top, options);\n    setValueIfPropertyExists(target, 'right', options.right, options);\n    setValueIfPropertyExists(target, 'bottom', options.bottom, options);\n    setValueIfPropertyExists(target, 'left', options.left, options);\n}\n\nfunction initMarkerOptions(target: SparklineMarkerOptions, options: any) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'size', options.size, options);\n    setValueIfPropertyExists(target, 'shape', options.shape, options);\n    setValueIfPropertyExists(target, 'fill', options.fill, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(target, 'formatter', options.formatter, options);\n}\n\nfunction initLabelOptions(target: BarColumnLabel, options: any) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'fontStyle', options.fontStyle, options);\n    setValueIfPropertyExists(target, 'fontWeight', options.fontWeight, options);\n    setValueIfPropertyExists(target, 'fontSize', options.fontSize, options);\n    setValueIfPropertyExists(target, 'fontFamily', options.fontFamily, options);\n    setValueIfPropertyExists(target, 'textAlign', options.textAlign, options);\n    setValueIfPropertyExists(target, 'textBaseline', options.textBaseline, options);\n    setValueIfPropertyExists(target, 'color', options.color, options);\n    setValueIfPropertyExists(target, 'formatter', options.formatter, options);\n    setValueIfPropertyExists(target, 'placement', options.placement, options);\n}\n\nfunction initLineOptions(target: SparklineLineOptions, options: any) {\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\n\nfunction initAxisOptions(target: SparklineAxis, options: any) {\n    setValueIfPropertyExists(target, 'type', options.type, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\n\nfunction initHighlightStyleOptions(target: HighlightStyleOptions, options: any) {\n    setValueIfPropertyExists(target, 'fill', options.fill, options);\n    setValueIfPropertyExists(target, 'size', options.size, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\n\nfunction initCrosshairsOptions(target: SparklineCrosshairsOptions, options: any) {\n    if (target.xLine && options.xLine) {\n        initCrosshairLineOptions(target.xLine, options.xLine);\n    }\n\n    if (target.yLine && options.yLine) {\n        initCrosshairLineOptions(target.yLine, options.yLine);\n    }\n}\n\nfunction initCrosshairLineOptions(target: CrosshairLineOptions, options: any) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(target, 'lineDash', options.lineDash, options);\n    setValueIfPropertyExists(target, 'lineCap', options.lineCap, options);\n}\n\nconst doOnceFlags: { [key: string]: boolean } = {};\n/**\n * If the key was passed before, then doesn't execute the func\n * @param {Function} func\n * @param {string} key\n */\nfunction doOnce(func: () => void, key: string) {\n    if (doOnceFlags[key]) {\n        return;\n    }\n\n    func();\n    doOnceFlags[key] = true;\n}\n\nconst offsetValidator = (property: string, value: number, defaultOffset?: number): boolean => {\n    if (isNumber(value)) {\n        return true;\n    }\n\n    const message = `AG Charts: ${property} must be a number, the value you provided is not a valid number. Using the default of ${defaultOffset}px.`;\n    doOnce(() => console.warn(message), `${property} not a number`);\n    return false;\n};\n\nconst validators: Validators = {\n    xOffset: offsetValidator,\n    yOffset: offsetValidator,\n};\n\nfunction setValueIfPropertyExists(target: any, property: string, value: any, options: any): void {\n    if (property in options) {\n        if (property in target) {\n            const validator = validators[property];\n            const isValid = validator ? validator(property, value, target[property]) : true;\n\n            if (isValid && target[property] !== value) {\n                // only set property if the value is different to new value\n                target[property] = value;\n            }\n        } else {\n            console.warn(`Property ${property} does not exist on the target object.`);\n        }\n    }\n}\n", "import { Bean, BeanStub, PostConstruct, PreDestroy } from '@ag-grid-community/core';\nimport { SparklineTooltip } from '../sparkline/tooltip/sparklineTooltip';\n\n/**\n * This 'bean' creates a single sparkline tooltip that is bound to the grid lifecycle.\n */\n@Bean('sparklineTooltipSingleton')\nexport class SparklineTooltipSingleton extends BeanStub {\n    private tooltip!: SparklineTooltip;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.tooltip = new SparklineTooltip();\n    }\n\n    public getSparklineTooltip() {\n        return this.tooltip;\n    }\n\n    @PreDestroy\n    private destroyTooltip(): void {\n        if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n    }\n}", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { StatusBarService } from \"./statusBar/statusBarService\";\nimport { StatusBar } from \"./statusBar/statusBar\";\nimport { NameValueComp } from \"./statusBar/providedPanels/nameValueComp\";\nimport { TotalAndFilteredRowsComp } from \"./statusBar/providedPanels/totalAndFilteredRowsComp\";\nimport { FilteredRowsComp } from \"./statusBar/providedPanels/filteredRowsComp\";\nimport { TotalRowsComp } from \"./statusBar/providedPanels/totalRowsComp\";\nimport { SelectedRowsComp } from \"./statusBar/providedPanels/selectedRowsComp\";\nimport { AggregationComp } from \"./statusBar/providedPanels/aggregationComp\";\nimport { VERSION } from \"./version\";\n\nexport const StatusBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.StatusBarModule,\n    beans: [StatusBarService],\n    agStackComponents: [\n        { componentName: 'AgStatusBar', componentClass: StatusBar },\n        { componentName: 'AgNameValue', componentClass: NameValueComp },\n    ],\n    userComponents: [\n        { componentName: 'agAggregationComponent', componentClass: AggregationComp },\n        { componentName: 'agSelectedRowCountComponent', componentClass: SelectedRowsComp },\n        { componentName: 'agTotalRowCountComponent', componentClass: TotalRowsComp },\n        { componentName: 'agFilteredRowCountComponent', componentClass: FilteredRowsComp },\n        { componentName: 'agTotalAndFilteredRowCountComponent', componentClass: TotalAndFilteredRowsComp }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import { Bean, BeanStub, IStatusPanelComp, IStatusBarService } from '@ag-grid-community/core';\n\n@Bean('statusBarService')\nexport class StatusBarService extends BeanStub implements IStatusBarService {\n\n    private allComponents: Map<string, IStatusPanelComp> = new Map();\n\n    // tslint:disable-next-line\n    constructor() {\n        super();\n    }\n\n    public registerStatusPanel(key: string, component: IStatusPanelComp): void {\n        this.allComponents.set(key, component);\n    }\n\n    public unregisterStatusPanel(key: string): void {\n        this.allComponents.delete(key);\n    }\n\n    public unregisterAllComponents(): void {\n        this.allComponents.clear();\n    }\n\n    public getStatusPanel(key: string): IStatusPanelComp {\n        return this.allComponents.get(key)!;\n    }\n\n    protected destroy(): void {\n        this.unregisterAllComponents();\n        super.destroy();\n    }\n}\n", "import {\n    Autowired,\n    Component,\n    UserComponentFactory,\n    PostConstruct,\n    PreDestroy,\n    AgPromise,\n    RefSelector,\n    IStatusPanelComp,\n    IStatusPanelParams,\n    WithoutGridCommon,\n    StatusPanelDef,\n    _\n} from '@ag-grid-community/core';\nimport { StatusBarService } from \"./statusBarService\";\n\nexport class StatusBar extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-status-bar\">\n            <div ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('statusBarService') private statusBarService: StatusBarService;\n\n    @RefSelector('eStatusBarLeft') private eStatusBarLeft: HTMLElement;\n    @RefSelector('eStatusBarCenter') private eStatusBarCenter: HTMLElement;\n    @RefSelector('eStatusBarRight') private eStatusBarRight: HTMLElement;\n\n    private compDestroyFunctions: { [key: string]: () => void } = {};\n\n    constructor() {\n        super(StatusBar.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.processStatusPanels(new Map());\n        this.addManagedPropertyListeners(['statusBar'], this.handleStatusBarChanged.bind(this));\n    }\n\n    private processStatusPanels(existingStatusPanelsToReuse: Map<string, IStatusPanelComp>) {\n        const statusPanels = this.gridOptionsService.get('statusBar')?.statusPanels;\n        if (statusPanels) {\n            const leftStatusPanelComponents = statusPanels\n                .filter((componentConfig) => componentConfig.align === 'left');\n            this.createAndRenderComponents(leftStatusPanelComponents, this.eStatusBarLeft, existingStatusPanelsToReuse);\n\n            const centerStatusPanelComponents = statusPanels\n                .filter((componentConfig) => componentConfig.align === 'center');\n            this.createAndRenderComponents(centerStatusPanelComponents, this.eStatusBarCenter, existingStatusPanelsToReuse);\n\n            const rightStatusPanelComponents = statusPanels\n                .filter((componentConfig) => (!componentConfig.align || componentConfig.align === 'right'));\n            this.createAndRenderComponents(rightStatusPanelComponents, this.eStatusBarRight, existingStatusPanelsToReuse);\n        } else {\n            this.setDisplayed(false);\n        }\n    }\n\n    private handleStatusBarChanged() {\n        const statusPanels = this.gridOptionsService.get('statusBar')?.statusPanels;\n        const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n        this.setDisplayed(validStatusBarPanelsProvided);\n\n        const existingStatusPanelsToReuse: Map<string, IStatusPanelComp> = new Map();\n\n        if (validStatusBarPanelsProvided) {\n            statusPanels.forEach(statusPanelConfig => {\n                const key = statusPanelConfig.key ?? statusPanelConfig.statusPanel;\n                const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n                if (existingStatusPanel?.refresh) {\n                    const newParams = this.gridOptionsService.addGridCommonParams(statusPanelConfig.statusPanelParams ?? {});\n                    const hasRefreshed = existingStatusPanel.refresh(newParams);\n                    if (hasRefreshed) {\n                        existingStatusPanelsToReuse.set(key, existingStatusPanel);\n                        delete this.compDestroyFunctions[key];\n                        _.removeFromParent(existingStatusPanel.getGui());\n                    }\n                }\n            });\n        }\n\n        this.resetStatusBar();\n        if (validStatusBarPanelsProvided) {\n            this.processStatusPanels(existingStatusPanelsToReuse);\n        }\n    }\n\n    resetStatusBar() {\n        this.eStatusBarLeft.innerHTML = '';\n        this.eStatusBarCenter.innerHTML = '';\n        this.eStatusBarRight.innerHTML = '';\n\n        this.destroyComponents();\n        this.statusBarService.unregisterAllComponents();\n    }\n\n    @PreDestroy\n    private destroyComponents() {\n        Object.values(this.compDestroyFunctions).forEach((func) => func());\n        this.compDestroyFunctions = {};\n    }\n\n    private createAndRenderComponents(\n        statusBarComponents: StatusPanelDef[],\n        ePanelComponent: HTMLElement,\n        existingStatusPanelsToReuse: Map<string, IStatusPanelComp>\n    ) {\n        const componentDetails: { key: string; promise: AgPromise<IStatusPanelComp>; }[] = [];\n\n        statusBarComponents.forEach(componentConfig => {\n            // default to the component name if no key supplied\n            const key = componentConfig.key || componentConfig.statusPanel\n            const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n            let promise: AgPromise<IStatusPanelComp>;\n            if (existingStatusPanel) {\n                promise = AgPromise.resolve(existingStatusPanel);\n            } else {\n                const params: WithoutGridCommon<IStatusPanelParams> = {};\n\n                const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n                promise = compDetails.newAgStackInstance();\n\n                if (!promise) { return; }\n            }\n\n            componentDetails.push({\n                key,\n                promise\n            });\n        });\n\n        AgPromise.all(componentDetails.map((details) => details.promise))\n            .then(() => {\n                componentDetails.forEach(componentDetail => {\n                    componentDetail.promise.then((component: IStatusPanelComp) => {\n                        const destroyFunc = () => {\n                            this.getContext().destroyBean(component);\n                        };\n\n                        if (this.isAlive()) {\n                            this.statusBarService.registerStatusPanel(componentDetail.key, component);\n                            ePanelComponent.appendChild(component.getGui());\n                            this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n                        } else {\n                            destroyFunc();\n                        }\n                    });\n                });\n            });\n    }\n}\n", "import { Component, RefSelector } from '@ag-grid-community/core';\n\nexport class NameValueComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-status-name-value\">\n            <span ref=\"eLabel\"></span>:&nbsp;\n            <span ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`;\n\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n\n    constructor() {\n        super(NameValueComp.TEMPLATE);\n    }\n\n    public setLabel(key: string, defaultValue: string): void {\n        // we want to hide until the first value comes in\n        this.setDisplayed(false);\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n    }\n\n    public setValue(value: any): void {\n        this.eValue.innerHTML = value;\n    }\n}\n", "import {\n    Autowired,\n    Events,\n    GridApi,\n    IStatusPanelComp,\n    PostConstruct,\n    _\n} from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class TotalAndFilteredRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        // this component is only really useful with client side row model\n        if (this.gridApi.__getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.setLabel('totalAndFilteredRows', 'Rows');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-and-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        const rowCount = _.formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n        const totalRowCount = _.formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n\n        if (rowCount === totalRowCount) {\n            this.setValue(rowCount);\n        } else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            this.setValue(`${rowCount} ${localeTextFunc('of', 'of')} ${totalRowCount}`);\n        }\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n        this.gridApi.forEachNodeAfterFilter((node) => {\n            if (!node.group) { filteredRowCount++; }\n        });\n        return filteredRowCount;\n    }\n\n    private getTotalRowCount(): number {\n        let totalRowCount = 0;\n        this.gridApi.forEachNode(node => {\n            if (!node.group) { totalRowCount++; }\n        });\n        return totalRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import {\n    Autowired,\n    Events,\n    GridApi,\n    PostConstruct,\n    IStatusPanelComp,\n    _\n} from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class FilteredRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.setLabel('filteredRows', 'Filtered');\n\n        // this component is only really useful with client side row model\n        if (this.gridApi.__getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        const listener = this.onDataChanged.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, listener);\n        listener();\n    }\n\n    private onDataChanged() {\n        const totalRowCountValue = this.getTotalRowCountValue();\n        const filteredRowCountValue = this.getFilteredRowCountValue();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        this.setValue(_.formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n        this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n    }\n\n    private getTotalRowCountValue(): number {\n        let totalRowCount = 0;\n        this.gridApi.forEachNode((node) => totalRowCount += 1);\n        return totalRowCount;\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n\n        this.gridApi.forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount += 1;\n            }\n        });\n        return filteredRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import { Autowired, Events, GridApi, IStatusPanelComp, PostConstruct, _ } from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class TotalRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.setLabel('totalRows', 'Total Rows');\n\n        // this component is only really useful with client side row model\n        if (this.gridApi.__getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agTotalRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_.formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n    }\n\n    private getRowCountValue(): number {\n        let totalRowCount = 0;\n        this.gridApi.forEachLeafNode((node) => totalRowCount += 1);\n        return totalRowCount;\n    }\n\n    public init() {\n    }\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import { Autowired, Events, GridApi, PostConstruct, IStatusPanelComp, _, ISelectionService } from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class SelectedRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n\n    @PostConstruct\n    protected postConstruct(): void {\n\n        if (!this.isValidRowModel()) {\n            console.warn(`AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.setLabel('selectedRows', 'Selected');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-selected-row-count');\n\n        this.onRowSelectionChanged();\n\n        const eventListener = this.onRowSelectionChanged.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, eventListener);\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, eventListener);\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.gridApi.__getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    private onRowSelectionChanged() {\n        const selectedRowCount = this.selectionService.getSelectionCount();\n        if (selectedRowCount < 0) {\n            this.setValue('?');\n            this.setDisplayed(true);\n            return;\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_.formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n        this.setDisplayed(selectedRowCount > 0);\n    }\n\n    public init() {\n    }\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import {\n    Autowired,\n    CellNavigationService,\n    Component,\n    Events,\n    GridApi,\n    RowPosition,\n    IStatusPanelComp,\n    PostConstruct,\n    RefSelector,\n    IRangeService,\n    ValueService,\n    _, CellPositionUtils,\n    RowPositionUtils,\n    RowRenderer, Optional,\n    AggregationStatusPanelAggFunc,\n    AggregationStatusPanelParams\n} from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class AggregationComp extends Component implements IStatusPanelComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`;\n\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('cellNavigationService') private cellNavigationService: CellNavigationService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') public rowPositionUtils: RowPositionUtils;\n\n    @RefSelector('sumAggregationComp') private sumAggregationComp: NameValueComp;\n    @RefSelector('countAggregationComp') private countAggregationComp: NameValueComp;\n    @RefSelector('minAggregationComp') private minAggregationComp: NameValueComp;\n    @RefSelector('maxAggregationComp') private maxAggregationComp: NameValueComp;\n    @RefSelector('avgAggregationComp') private avgAggregationComp: NameValueComp;\n\n    private params!: AggregationStatusPanelParams;\n\n    constructor() {\n        super(AggregationComp.TEMPLATE);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (!this.isValidRowModel()) {\n            console.warn(`AG Grid: agAggregationComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.avgAggregationComp.setLabel('avg', 'Average');\n        this.countAggregationComp.setLabel('count', 'Count');\n        this.minAggregationComp.setLabel('min', 'Min');\n        this.maxAggregationComp.setLabel('max', 'Max');\n        this.sumAggregationComp.setLabel('sum', 'Sum');\n\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.gridApi.__getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    public init(params: AggregationStatusPanelParams) {\n        this.params = params;\n    }\n\n    public refresh(params: AggregationStatusPanelParams): boolean {\n        this.params = params;\n        this.onRangeSelectionChanged();\n        return true;\n    }\n\n    private setAggregationComponentValue(aggFuncName: AggregationStatusPanelAggFunc, value: number | null, visible: boolean) {\n        const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n        if (_.exists(statusBarValueComponent) && statusBarValueComponent) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n            const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n            statusBarValueComponent.setValue(_.formatNumberTwoDecimalPlacesAndCommas(value!, thousandSeparator, decimalSeparator));\n            statusBarValueComponent.setDisplayed(visible);\n        } else {\n            // might have previously been visible, so hide now\n            this.getAggregationValueComponent(aggFuncName)?.setDisplayed(false);\n        }\n    }\n\n    private getAllowedAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): NameValueComp | null {\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        const { aggFuncs } = this.params;\n        if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n            return this.getAggregationValueComponent(aggFuncName);\n        }\n\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return null;\n    }\n\n    private getAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): NameValueComp {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        const refComponentName = `${aggFuncName}AggregationComp`;\n        return (this as any)[refComponentName];\n    }\n\n    private onRangeSelectionChanged(): void {\n        const cellRanges = this.rangeService ? this.rangeService.getCellRanges() : undefined;\n\n        let sum = 0;\n        let count = 0;\n        let numberCount = 0;\n        let min: number | null = null;\n        let max: number | null = null;\n\n        const cellsSoFar: any = {};\n\n        if (cellRanges && !_.missingOrEmpty(cellRanges)) {\n\n            cellRanges.forEach((cellRange) => {\n\n                let currentRow: RowPosition | null = this.rangeService.getRangeStartRow(cellRange);\n                const lastRow = this.rangeService.getRangeEndRow(cellRange);\n\n                while (true) {\n\n                    const finishedAllRows = _.missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n                    if (finishedAllRows || !currentRow || !cellRange.columns) {\n                        break;\n                    }\n\n                    cellRange.columns.forEach(col => {\n                        if (currentRow === null) {\n                            return;\n                        }\n\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        const cellId = this.cellPositionUtils.createId({\n                            rowPinned: currentRow.rowPinned,\n                            column: col,\n                            rowIndex: currentRow.rowIndex\n                        });\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n\n                        const rowNode = this.rowRenderer.getRowNode(currentRow);\n                        if (_.missing(rowNode)) {\n                            return;\n                        }\n\n                        let value = this.valueService.getValue(col, rowNode);\n\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (_.missing(value) || value === '') {\n                            return;\n                        }\n\n                        count++;\n\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (typeof value === 'object' && 'value' in value) {\n                            value = value.value;\n\n                            // ensure that the new value wouldn't have been skipped by the previous check\n                            if (value === '') {\n                                return;\n                            }\n                        }\n\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n\n                        if (typeof value === 'number' && !isNaN(value)) {\n\n                            sum += value;\n\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n\n                            numberCount++;\n                        }\n                    });\n\n                    currentRow = this.cellNavigationService.getRowBelow(currentRow);\n                }\n            });\n        }\n\n        const gotResult = count > 1;\n        const gotNumberResult = numberCount > 1;\n\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', (sum / numberCount), gotNumberResult);\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { VERSION } from \"./version\";\nimport { ViewportRowModel } from \"./viewportRowModel/viewportRowModel\";\n\nexport const ViewportRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ViewportRowModelModule,\n    rowModel: 'viewport',\n    beans: [ViewportRowModel],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    Events,\n    IRowModel,\n    IViewportDatasource,\n    ModelUpdatedEvent,\n    PostConstruct,\n    PreDestroy,\n    RowBounds,\n    RowNode,\n    RowRenderer,\n    Beans,\n    WithoutGridCommon,\n    FocusService,\n    RowModelType\n} from \"@ag-grid-community/core\";\n\n@Bean('rowModel')\nexport class ViewportRowModel extends BeanStub implements IRowModel {\n\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('beans') private beans: Beans;\n\n    // rowRenderer tells us these\n    private firstRow = -1;\n    private lastRow = -1;\n\n    // datasource tells us this\n    private rowCount = -1;\n    private rowNodesByIndex: {[index: number]: RowNode} = {};\n    private rowHeight: number;\n    private viewportDatasource: IViewportDatasource;\n\n    // we don't implement as lazy row heights is not supported in this row model\n    public ensureRowHeightsValid(startPixel: number, endPixel: number, startLimitIndex: number, endLimitIndex: number): boolean { return false; }\n\n    @PostConstruct\n    private init(): void {\n        this.rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        this.addManagedListener(this.eventService, Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));\n        this.addManagedPropertyListener('viewportDatasource', () => this.updateDatasource());\n        this.addManagedPropertyListener('rowHeight', () => {\n            this.rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n            this.updateRowHeights();\n        });\n    }\n\n    public start(): void {\n        this.updateDatasource();\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return true;\n    }\n\n    @PreDestroy\n    private destroyDatasource(): void {\n        if (!this.viewportDatasource) { return; }\n\n        if (this.viewportDatasource.destroy) {\n            this.viewportDatasource.destroy();\n        }\n\n        this.rowRenderer.datasourceChanged();\n        this.firstRow = -1;\n        this.lastRow = -1;\n    }\n\n    private updateDatasource(): void {\n        const datasource = this.gridOptionsService.get('viewportDatasource');\n        if (datasource) {\n            this.setViewportDatasource(datasource);\n        }\n    }\n\n    private getViewportRowModelPageSize(): number | undefined {\n        return this.gridOptionsService.get('viewportRowModelPageSize');\n    }\n\n    private getViewportRowModelBufferSize(): number {\n        return this.gridOptionsService.get('viewportRowModelBufferSize');\n    }\n\n    private calculateFirstRow(firstRenderedRow: number): number {\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize()!;\n        const afterBuffer = firstRenderedRow - bufferSize;\n\n        if (afterBuffer < 0) { return 0; }\n\n        return Math.floor(afterBuffer / pageSize) * pageSize;\n    }\n\n    private calculateLastRow(lastRenderedRow: number): number {\n        if (lastRenderedRow === -1) { return lastRenderedRow; }\n\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize()!;\n        const afterBuffer = lastRenderedRow + bufferSize;\n        const result = Math.ceil(afterBuffer / pageSize) * pageSize;\n        const lastRowIndex = this.rowCount - 1;\n\n        return Math.min(result, lastRowIndex);\n    }\n\n    private onViewportChanged(event: any): void {\n        const newFirst = this.calculateFirstRow(event.firstRow);\n        const newLast = this.calculateLastRow(event.lastRow);\n\n        if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n            this.firstRow = newFirst;\n            this.lastRow = newLast;\n            this.purgeRowsNotInViewport();\n            if (this.viewportDatasource) {\n                this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n            }\n        }\n    }\n\n    public purgeRowsNotInViewport(): void {\n        Object.keys(this.rowNodesByIndex).forEach(indexStr => {\n            const index = parseInt(indexStr, 10);\n            if (index < this.firstRow || index > this.lastRow) {\n                if (this.isRowFocused(index)) {\n                    return;\n                }\n\n                delete this.rowNodesByIndex[index];\n            }\n        });\n    }\n\n    private isRowFocused(rowIndex: number): boolean {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) { return false; }\n        if (focusedCell.rowPinned != null) { return false; }\n\n        const hasFocus = focusedCell.rowIndex === rowIndex;\n        return hasFocus;\n    }\n\n    public setViewportDatasource(viewportDatasource: IViewportDatasource): void {\n        this.destroyDatasource();\n\n        this.viewportDatasource = viewportDatasource;\n        this.rowCount = -1;\n\n        if (!viewportDatasource.init) {\n            console.warn('AG Grid: viewport is missing init method.');\n        } else {\n            viewportDatasource.init({\n                setRowCount: this.setRowCount.bind(this),\n                setRowData: this.setRowData.bind(this),\n                getRow: this.getRow.bind(this)\n            });\n        }\n    }\n\n    public getType(): RowModelType {\n        return 'viewport';\n    }\n\n    public getRow(rowIndex: number): RowNode {\n        if (!this.rowNodesByIndex[rowIndex]) {\n            this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n        }\n\n        return this.rowNodesByIndex[rowIndex];\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        let result: RowNode | undefined;\n        this.forEachNode(rowNode => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    }\n\n    public getRowCount(): number {\n        return this.rowCount === -1 ? 0 : this.rowCount;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            return Math.floor(pixel / this.rowHeight);\n        }\n\n        return 0;\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    }\n\n    private updateRowHeights() {\n        this.forEachNode(node => {\n            node.setRowHeight(this.rowHeight);\n            node.setRowTop(this.rowHeight * node.rowIndex!);\n        });\n        \n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: Events.EVENT_MODEL_UPDATED,\n            newData: false,\n            newPage: false,\n            keepRenderedRows: true,\n            animate: false,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getTopLevelRowCount(): number {\n        return this.getRowCount();\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        return topLevelIndex;\n    }\n\n    public isEmpty(): boolean {\n        return this.rowCount > 0;\n    }\n\n    public isRowsToRender(): boolean {\n        return this.rowCount > 0;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const firstIndex = _.missing(firstInRange) ? 0 : firstInRange.rowIndex!;\n        const lastIndex = lastInRange.rowIndex!;\n\n        const firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n        const lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n\n        if (firstNodeOutOfRange || lastNodeOutOfRange) { return []; }\n\n        const result: RowNode[] = [];\n\n        const startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n        const endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n\n        for (let i = startIndex; i <= endIndex; i++) {\n            result.push(this.rowNodesByIndex[i]);\n        }\n\n        return result;\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        let callbackCount = 0;\n\n        Object.keys(this.rowNodesByIndex).forEach(indexStr => {\n            const index = parseInt(indexStr, 10);\n            const rowNode: RowNode = this.rowNodesByIndex[index];\n            callback(rowNode, callbackCount);\n            callbackCount++;\n        });\n    }\n\n    private setRowData(rowData: {[key: number]: any}): void {\n        _.iterateObject(rowData, (indexStr: string, dataItem: any) => {\n            const index = parseInt(indexStr, 10);\n            // we should never keep rows that we didn't specifically ask for, this\n            // guarantees the contract we have with the server.\n            if (index >= this.firstRow && index <= this.lastRow) {\n                let rowNode = this.rowNodesByIndex[index];\n\n                // the abnormal case is we requested a row even though the grid didn't need it\n                // as a result of the paging and buffer (ie the row is off screen), in which\n                // case we need to create a new node now\n                if (_.missing(rowNode)) {\n                    rowNode = this.createBlankRowNode(index);\n                    this.rowNodesByIndex[index] = rowNode;\n                }\n\n                // now we deffo have a row node, so set in the details\n                // if the grid already asked for this row (the normal case), then we would\n                // of put a placeholder node in place.\n                rowNode.setDataAndId(dataItem, index.toString());\n            }\n        });\n    }\n\n    private createBlankRowNode(rowIndex: number): RowNode {\n        const rowNode = new RowNode(this.beans);\n\n        rowNode.setRowHeight(this.rowHeight);\n        rowNode.setRowTop(this.rowHeight * rowIndex);\n        rowNode.setRowIndex(rowIndex);\n\n        return rowNode;\n    }\n\n    public setRowCount(rowCount: number, keepRenderedRows = false): void {\n        if (rowCount === this.rowCount) { return; }\n\n        this.rowCount = rowCount;\n\n        this.eventService.dispatchEventOnce({\n            type: Events.EVENT_ROW_COUNT_READY\n        });\n\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: Events.EVENT_MODEL_UPDATED,\n            newData: false,\n            newPage: false,\n            keepRenderedRows: keepRenderedRows,\n            animate: false\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const foundRowNode = this.getRowNode(rowNode.id!);\n        return !!foundRowNode;\n    }\n\n}\n"],
  "mappings": "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",
  "names": ["AgAbstractLabel", "AgAutocomplete", "AgDialog", "AgGroupComponent", "AgInputDateField", "AgInputNumberField", "AgInputTextField", "AgMenuItemComponent", "AgMenuItemRenderer", "AgMenuList", "AgPanel", "AgPickerField", "AgPromise", "AgRichSelect", "AgSelect", "AgSlider", "AgToggleButton", "AutoScrollService", "Autowired", "Bean", "BeanStub", "CellCtrl", "CellNavigationService", "CellPositionUtils", "CellRangeType", "ChangedPath", "Component", "CssClassApplier", "DragAndDropService", "DragSourceType", "EventService", "Events", "ExcelFactoryMode", "ExpansionService", "GROUP_AUTO_COLUMN_ID", "GridApi", "KeyCode", "ManagedFocusFeature", "ModuleNames", "ModuleRegistry", "NumberSequence", "Optional", "PillDragComp", "PillDropZonePanel", "PopupComponent", "PositionableFeature", "PostConstruct", "PreConstruct", "PreDestroy", "ProvidedColumnGroup", "ProvidedFilter", "RefSelector", "RowNode", "RowNodeBlock", "RowPositionUtils", "RowRenderer", "SelectionHandleType", "ServerSideTransactionResultStatus", "TabGuardComp", "TabbedLayout", "TextFilter", "TooltipFeature", "TouchListener", "UserComponentFactory", "ValueService", "VirtualList", "VirtualListDragFeature", "_", "createGrid", "CsvExportModule", "ModuleNames", "document", "Autowired", "Autowired", "Autowired", "Component", "PostConstruct", "RefSelector", "_", "BeanStub", "Events", "TooltipFeature", "VirtualList", "DragSourceType", "KeyCode", "AgRichSelect", "Bean", "__decorateClass", "_AdvancedFilterBuilderDragFeature", "key", "value", "eTreeLine", "_a", "filterModel", "treeLines", "item", "destinationIndex", "_AdvancedFilterCtrl", "displayValue", "OperatorParser", "model", "expression", "VERSION", "ModuleNames", "ModuleNames", "ModuleNames", "Autowired", "Bean", "Events", "PostConstruct", "BeanStub", "_", "SelectionHandleType", "Component", "__spreadValues", "__decorateClass", "_FillHandle", "params", "__spreadProps", "_RangeHandle", "VERSION", "ModuleNames", "Autowired", "Bean", "BeanStub", "ModuleRegistry", "Optional", "_ModuleSupport", "_", "AgDialog", "Component", "Events", "PostConstruct", "RefSelector", "AgPromise", "AutoScrollService", "CellRangeType", "ModuleNames", "_Theme", "AgCheckbox", "AgGroupComponent", "AgRadioButton", "AgSelect", "DragAndDropService", "DragSourceType", "AgToggleButton", "AgSlider", "KeyCode", "_Scene", "_Util", "AgCharts", "TabGuardComp", "_ChartDatasource", "__decorateClass", "_ComboChartModel", "_ChartDataModel", "__spreadProps", "__spreadValues", "isTitleEnabled", "baseTheme", "overrides", "_UpdateParamsValidator", "_ChartController", "_AgPillSelect", "_CategoriesDataPanel", "aggFunc", "_SeriesDataPanel", "_SeriesChartTypePanel", "_SwitchCategorySeriesDataPanel", "_ChartDataPanel", "_FontPanel", "_LegendPanel", "_AxisTicksPanel", "_GridLinePanel", "_AgAngleSelect", "value", "optionsValue", "_CartesianAxisPanel", "autoRotate", "_a", "_PolarAxisPanel", "_PaddingPanel", "_BackgroundPanel", "_TitlePanel", "_ChartPanel", "_ShadowPanel", "_MarkersPanel", "_AgColorPanel", "isHorizontal", "_CalloutPanel", "_CapsPanel", "_ConnectorLinePanel", "_WhiskersPanel", "_SeriesItemsPanel", "_TileSpacingPanel", "_SeriesPanel", "_GradientLegendPanel", "_FormatPanel", "xScale", "yScale", "_MiniStackedColumn", "_MiniNormalizedColumn", "_MiniStackedBar", "_MiniNormalizedBar", "_MiniArea", "_MiniStackedArea", "_MiniNormalizedArea", "innerRadius", "acc", "offset", "length", "pattern", "data", "startAngle", "_MiniChartsContainer", "_ChartSettingsPanel", "_TabbedChartMenu", "_ChartMenu", "_TitleEdit", "axes", "params", "angleKey", "opts", "series", "hierarchy", "getItemGroupKey", "_GridChartComp", "updatedChartType", "VERSION", "_b", "chartComp", "cellRange", "document", "_AnimationPanel", "_CrosshairPanel", "_NavigatorPanel", "_ZoomPanel", "_AdvancedSettingsPanel", "_AdvancedSettingsMenu", "ModuleNames", "_", "Autowired", "Bean", "BeanStub", "Events", "PostConstruct", "Optional", "params", "value", "column", "_a", "__decorateClass", "VERSION", "ModuleNames", "ModuleNames", "_", "Autowired", "Events", "RefSelector", "KeyCode", "PostConstruct", "Component", "ProvidedColumnGroup", "VirtualList", "PreDestroy", "BeanStub", "DragSourceType", "VirtualListDragFeature", "Column", "DragAndDropService", "AgMenuItemComponent", "AgMenuList", "CssClassApplier", "ModuleNames", "ModuleRegistry", "PreConstruct", "ModuleNames", "Bean", "BeanStub", "Autowired", "_", "RowNode", "PostConstruct", "Events", "Component", "DragAndDropService", "PillDropZonePanel", "DragSourceType", "Column", "RefSelector", "Optional", "KeyCode", "PillDragComp", "AgPromise", "AgSelect", "TabGuardComp", "AgInputTextField", "__decorateClass", "set", "node", "parent", "level", "__spreadProps", "__spreadValues", "uniqueValues", "key", "_a", "params", "VERSION", "_GroupFilter", "ModuleNames", "Component", "RefSelector", "ModuleNames", "Autowired", "Component", "PostConstruct", "Events", "_", "ModuleNames", "ModuleRegistry", "RefSelector", "KeyCode", "PreDestroy", "Bean", "BeanStub", "__decorateClass", "_SideBarButtonComp", "_SideBarButtonsComp", "_SideBarDefParser", "_ToolPanelWrapper", "_SideBarComp", "_a", "__spreadProps", "__spreadValues", "VERSION", "Events", "Bean", "Autowired", "_", "_PrimaryColsHeaderPanel", "Component", "KeyCode", "__decorateClass", "RefSelector", "PostConstruct", "_ColumnModelItem", "Column", "ProvidedColumnGroup", "AgMenuList", "AgMenuItemComponent", "_ToolPanelColumnGroupComp", "DragSourceType", "DragAndDropService", "BeanStub", "VirtualListDragFeature", "_ToolPanelColumnComp", "CssClassApplier", "_PrimaryColsListPanel", "VirtualList", "PreDestroy", "PreConstruct", "_PrimaryColsPanel", "_ColumnToolPanel", "__spreadValues", "ModuleRegistry", "ModuleNames", "VERSION", "ModuleNames", "Autowired", "Bean", "PostConstruct", "CssClassApplier", "_", "RowType", "GridSerializer", "CsvExportModule", "idx", "borderFactory", "currentSheet", "__spreadProps", "__spreadValues", "_ExcelXlsxFactory", "__decorateClass", "VERSION", "ModuleNames", "ModuleNames", "_", "Autowired", "Component", "Events", "PostConstruct", "PreConstruct", "RefSelector", "ProvidedColumnGroup", "Column", "KeyCode", "Component", "Events", "_", "__decorateClass", "Autowired", "RefSelector", "PreConstruct", "PostConstruct", "_ToolPanelFilterComp", "KeyCode", "Column", "_ToolPanelFilterGroupComp", "ProvidedColumnGroup", "_FiltersToolPanelListPanel", "_FiltersToolPanel", "__spreadValues", "VERSION", "ModuleNames", "ModuleNames", "Component", "RefSelector", "_", "ModuleRegistry", "ColumnApi", "Autowired", "BeanStub", "Events", "__spreadValues", "__decorateClass", "_DetailCellRenderer", "VERSION", "ModuleNames", "ModuleNames", "_", "Autowired", "Bean", "BeanStub", "ModuleNames", "ModuleRegistry", "PostConstruct", "RefSelector", "AgPromise", "TabbedLayout", "AgMenuItemComponent", "Component", "Events", "AgMenuList", "Optional", "AgDialog", "AgMenuList", "Autowired", "Bean", "BeanStub", "_", "Events", "__decorateClass", "_TabbedColumnMenu", "TabbedLayout", "ModuleRegistry", "ModuleNames", "AgMenuItemComponent", "AgPromise", "_a", "PostConstruct", "Component", "RefSelector", "__spreadProps", "__spreadValues", "Optional", "VERSION", "AgDialog", "ModuleNames", "AgPromise", "Autowired", "AgGroupComponent", "TabGuardComp", "AgMenuItemComponent", "PostConstruct", "_", "KeyCode", "Component", "_MultiFilter", "__spreadProps", "__spreadValues", "__decorateClass", "VERSION", "ModuleNames", "ModuleNames", "AgRichSelect", "Events", "_", "values", "eventKey", "VERSION", "ModuleNames", "ModuleNames", "_", "Autowired", "Bean", "BeanStub", "Events", "NumberSequence", "PostConstruct", "PreDestroy", "RowNode", "Optional", "ServerSideTransactionResultStatus", "RowNodeBlockLoader", "__decorateClass", "params", "storeIndexFromEndIndex", "numberOfRowsToSkip", "lazyNode", "_a", "numberOfRowDiff", "nextTop", "__objRest", "__spreadValues", "__spreadProps", "StrategyClazz", "VERSION", "ModuleNames", "ModuleNames", "Autowired", "Events", "ProvidedFilter", "RefSelector", "VirtualList", "AgPromise", "KeyCode", "_", "GROUP_AUTO_COLUMN_ID", "EventService", "Component", "PostConstruct", "_TreeSetDisplayValueModel", "_a", "isDate", "item", "_SetValueModel", "_SetFilterListItem", "value", "__decorateClass", "VERSION", "ModuleNames", "ModuleNames", "Autowired", "Component", "RefSelector", "_Scale", "_Scene", "_Util", "Bean", "BeanStub", "PostConstruct", "PreDestroy", "isString", "_Sparkline", "_SparklineTooltip", "extent", "BandScale", "SparklineMarker", "SparklineLine", "SparklineCrosshairs", "isNumber", "_SparklineCellRenderer", "__spreadValues", "__decorateClass", "VERSION", "ModuleNames", "ModuleNames", "Bean", "BeanStub", "BeanStub", "Bean", "Autowired", "Component", "PostConstruct", "PreDestroy", "AgPromise", "RefSelector", "_", "Component", "_a", "_", "AgPromise", "Autowired", "RefSelector", "PostConstruct", "PreDestroy", "Component", "RefSelector", "Component", "RefSelector", "Autowired", "Events", "PostConstruct", "_", "Events", "_", "localeTextFunc", "Autowired", "PostConstruct", "Autowired", "Events", "PostConstruct", "_", "Events", "_", "Autowired", "PostConstruct", "Autowired", "Events", "PostConstruct", "_", "Events", "_", "Autowired", "PostConstruct", "Autowired", "Events", "PostConstruct", "_", "Events", "_", "Autowired", "PostConstruct", "Autowired", "Component", "Events", "PostConstruct", "RefSelector", "_", "Optional", "Component", "Events", "_", "Optional", "Autowired", "RefSelector", "PostConstruct", "VERSION", "VERSION", "ModuleNames", "ModuleNames", "_", "Autowired", "Bean", "BeanStub", "Events", "PostConstruct", "PreDestroy", "VERSION", "__decorateClass", "ModuleNames", "AgAbstractLabel", "AgAutocomplete", "AgDialog", "AgGroupComponent", "AgInputDateField", "AgInputNumberField", "AgInputTextField", "AgMenuItemComponent", "AgMenuItemRenderer", "AgMenuList", "AgPanel", "AgPickerField", "AgPromise", "AgRichSelect", "AgSelect", "AgSlider", "AgToggleButton", "AutoScrollService", "Autowired", "Bean", "BeanStub", "CellCtrl", "CellNavigationService", "CellPositionUtils", "CellRangeType", "ChangedPath", "Component", "CssClassApplier", "DragAndDropService", "DragSourceType", "EventService", "Events", "ExcelFactoryMode", "ExpansionService", "GROUP_AUTO_COLUMN_ID", "GridApi", "KeyCode", "ManagedFocusFeature", "ModuleNames", "ModuleRegistry", "NumberSequence", "Optional", "PillDragComp", "PillDropZonePanel", "PopupComponent", "PositionableFeature", "PostConstruct", "PreConstruct", "PreDestroy", "ProvidedColumnGroup", "ProvidedFilter", "RefSelector", "RowNode", "RowNodeBlock", "RowPositionUtils", "RowRenderer", "SelectionHandleType", "ServerSideTransactionResultStatus", "TabGuardComp", "TabbedLayout", "TextFilter", "TooltipFeature", "TouchListener", "UserComponentFactory", "ValueService", "VirtualList", "VirtualListDragFeature", "_", "createGrid", "CsvExportModule"]
}
