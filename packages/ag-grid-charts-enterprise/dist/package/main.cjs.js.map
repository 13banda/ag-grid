{
  "version": 3,
  "sources": ["../../src/main.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilterModule.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterApi.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterExpressionService.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterLocaleText.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/filterExpressionUtils.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/colFilterExpressionParser.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/filterExpressionOperators.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterService.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterCtrl.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/autocomplete/agAutocomplete.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/autocomplete/agAutocompleteList.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/autocomplete/agAutocompleteRow.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/advancedFilterHeaderComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderDragFeature.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderItemAddComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/addDropdownComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderItemNavigationFeature.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderUtils.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/advancedFilterBuilderItemComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/conditionPillWrapperComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/inputPillComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/joinPillWrapperComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/builder/selectPillComp.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/joinFilterExpressionParser.ts", "../../../../enterprise-modules/advanced-filter/src/advancedFilter/filterExpressionParser.ts", "../../../../enterprise-modules/advanced-filter/src/version.ts", "../../../../enterprise-modules/core/src/agGridEnterpriseModule.ts", "../../../../enterprise-modules/core/src/license/gridLicenseManager.ts", "../../../../enterprise-modules/core/src/license/shared/licenseManager.ts", "../../../../enterprise-modules/core/src/license/shared/md5.ts", "../../../../enterprise-modules/core/src/license/watermark.ts", "../../../../enterprise-modules/core/src/version.ts", "../../../../enterprise-modules/core/src/widgets/agMenuItemRenderer.ts", "../../../../enterprise-modules/core/src/widgets/agGroupComponent.ts", "../../../../enterprise-modules/core/src/widgets/agRichSelect.ts", "../../../../enterprise-modules/core/src/widgets/AgPillContainer.ts", "../../../../enterprise-modules/core/src/widgets/agPill.ts", "../../../../enterprise-modules/core/src/widgets/agRichSelectList.ts", "../../../../enterprise-modules/core/src/widgets/agRichSelectRow.ts", "../../../../enterprise-modules/core/src/widgets/virtualList.ts", "../../../../enterprise-modules/core/src/widgets/pillDragComp.ts", "../../../../enterprise-modules/core/src/widgets/pillDropZonePanel.ts", "../../../../enterprise-modules/core/src/widgets/agDialog.ts", "../../../../enterprise-modules/core/src/widgets/agPanel.ts", "../../../../enterprise-modules/core/src/widgets/agMenuItemComponent.ts", "../../../../enterprise-modules/core/src/widgets/agMenuList.ts", "../../../../enterprise-modules/core/src/widgets/agMenuPanel.ts", "../../../../enterprise-modules/core/src/features/virtualListDragFeature.ts", "../../../../enterprise-modules/core/src/widgets/tabbedLayout.ts", "../../../../enterprise-modules/core/src/rendering/groupCellRenderer.ts", "../../../../enterprise-modules/core/src/rendering/groupCellRendererCtrl.ts", "../../../../enterprise-modules/charts-enterprise/src/main.ts", "../../../../enterprise-modules/charts/src/main.ts", "../../../../enterprise-modules/charts/src/gridChartsModule.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/advancedSettingsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/seriesTypeMapper.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartPanelFeature.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/animationPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/crosshairPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agColorPicker.ts", "../../../../enterprise-modules/charts/src/widgets/agColorPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agColorInput.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/navigatorPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agSlider.ts", "../../../../enterprise-modules/charts/src/widgets/agInputRange.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/advancedSettings/interactivity/zoomPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartMenuList.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartCrossFilterService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartMenuService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartTranslationService.ts", "../../../../enterprise-modules/charts/src/charts/chartService.ts", "../../../../enterprise-modules/charts/src/version.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/gridChartComp.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartController.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/chartTheme.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/axisTypeMapper.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/object.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/model/chartDataModel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/datasource/chartDatasource.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartColumnService.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/model/comboChartModel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/chartParamsValidator.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/chartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/integration.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/cartesianChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/areaChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/barChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/color.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/histogramChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/lineChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/scatterChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/cartesian/waterfallChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/combo/comboChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartUtils.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/pie/pieChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/polar/polarChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/utils/array.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/specialized/heatmapChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/statistical/statisticalChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/statistical/boxPlotChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/chartProxies/statistical/rangeChartProxy.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartMenu.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartToolbar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/tabbedChartMenu.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/chartDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/categoriesDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/dragDataPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agPillSelect.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/chartSpecificDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/chartMenuParamsFactory.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/seriesChartTypePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/data/seriesDataPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/formatPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/cartesianAxisPanel.ts", "../../../../enterprise-modules/charts/src/widgets/agAngleSelect.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/fontPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/axisTicksPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/gridLinePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/axis/polarAxisPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/chartPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/backgroundPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/chart/paddingPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/groupExpansionFeature.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/legend/legendPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/seriesPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/calloutPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/capsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/connectorLinePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/markersPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/seriesUtils.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/seriesItemsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/shadowPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/tileSpacingPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/series/whiskersPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/titles/titlesPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/titles/titlePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/format/titles/chartTitlePanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/chartSettingsPanel.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniChartsContainer.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChartHelpers.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChartWithAxes.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChart.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/column/miniColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/column/miniStackedColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/column/miniNormalizedColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/bar/miniBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/bar/miniStackedBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/bar/miniNormalizedBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/pie/miniDonut.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/pie/miniPie.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/line/miniLine.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/scatter/miniScatter.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/scatter/miniBubble.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/area/miniArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/area/miniStackedArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/area/miniNormalizedArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/histogram/miniHistogram.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialColumn.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/miniChartWithPolarAxes.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarLine.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/polar/miniNightingale.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeBar.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeArea.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/statistical/miniBoxPlot.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniTreemap.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniSunburst.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/specialized/miniHeatmap.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/specialized/miniWaterfall.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/combo/miniColumnLineCombo.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/combo/miniAreaColumnCombo.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/menu/settings/miniCharts/combo/miniCustomCombo.ts", "../../../../enterprise-modules/charts/src/charts/chartComp/services/chartOptionsService.ts", "../../../../enterprise-modules/charts/src/charts/chartModelMigration.ts", "../../../../enterprise-modules/charts/src/charts/chartsApi.ts", "../../../../enterprise-modules/charts/src/utils/validGridChartsVersion.ts", "../../../../enterprise-modules/range-selection/src/rangeSelectionModule.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/rangeSelectionApi.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/rangeService.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/agFillHandle.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/abstractSelectionHandle.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/utils.ts", "../../../../enterprise-modules/range-selection/src/rangeSelection/agRangeHandle.ts", "../../../../enterprise-modules/range-selection/src/version.ts", "../../../../enterprise-modules/clipboard/src/clipboardModule.ts", "../../../../enterprise-modules/clipboard/src/clipboard/clipboardApi.ts", "../../../../enterprise-modules/clipboard/src/clipboard/clipboardService.ts", "../../../../enterprise-modules/clipboard/src/version.ts", "../../../../enterprise-modules/column-tool-panel/src/columnsToolPanelModule.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/columnToolPanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/agPrimaryCols.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/agPrimaryColsHeader.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/agPrimaryColsList.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/columnModelItem.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/primaryColsListPanelItemDragFeature.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/toolPanelColumnGroupComp.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/toolPanelContextMenu.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/toolPanelColumnComp.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/pivotModePanel.ts", "../../../../enterprise-modules/column-tool-panel/src/columnToolPanel/modelItemUtils.ts", "../../../../enterprise-modules/column-tool-panel/src/version.ts", "../../../../enterprise-modules/row-grouping/src/rowGroupingModule.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/aggFuncService.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/aggregationStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/autoColService.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/columnDropZoneService.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/agGridHeaderDropZones.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/pivotDropZonePanel.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/baseDropZonePanel.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/dropZoneColumnComp.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/rowGroupDropZonePanel.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/filterAggregatesStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/groupFilter/groupFilter.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/groupFilter/groupFloatingFilter.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/groupStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/batchRemover.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/pivotColDefService.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/pivotStage.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/rowGroupingApi.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/showRowGroupColsService.ts", "../../../../enterprise-modules/row-grouping/src/version.ts", "../../../../enterprise-modules/row-grouping/src/rowGrouping/columnDropZones/valueDropZonePanel.ts", "../../../../enterprise-modules/side-bar/src/sideBarModule.ts", "../../../../enterprise-modules/side-bar/src/sideBar/common/toolPanelColDefService.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarApi.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarService.ts", "../../../../enterprise-modules/side-bar/src/sideBar/agSideBar.ts", "../../../../enterprise-modules/side-bar/src/sideBar/agSideBarButtons.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarButtonComp.ts", "../../../../enterprise-modules/side-bar/src/sideBar/sideBarDefParser.ts", "../../../../enterprise-modules/side-bar/src/sideBar/toolPanelWrapper.ts", "../../../../enterprise-modules/side-bar/src/sideBar/agHorizontalResize.ts", "../../../../enterprise-modules/side-bar/src/version.ts", "../../../../enterprise-modules/excel-export/src/excelExportModule.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelCreator.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelSerializingSession.ts", "../../../../enterprise-modules/excel-export/src/excelExport/assets/excelUtils.ts", "../../../../enterprise-modules/excel-export/src/excelExport/assets/excelConstants.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelXlsxFactory.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/contentType.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/contentTypes.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/core.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/drawing.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/relationship.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/relationships.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/sharedStrings.ts", "../../../../enterprise-modules/excel-export/src/excelExport/assets/excelLegacyConvert.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/border.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/borders.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/alignment.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/protection.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/xf.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellStyleXfs.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellStyle.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellStyles.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/cellXfs.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/fill.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/fills.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/font.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/fonts.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/numberFormat.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/numberFormats.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/styles/stylesheet.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/table.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/colorScheme.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/fontScheme.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/formatScheme.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office/themeElements.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/themes/office.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/vmlDrawing.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/sheet.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/sheets.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/workbook.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/worksheet.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/column.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/mergeCell.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/cell.ts", "../../../../enterprise-modules/excel-export/src/excelExport/files/ooxml/row.ts", "../../../../enterprise-modules/excel-export/src/excelExport/excelExportApi.ts", "../../../../enterprise-modules/excel-export/src/version.ts", "../../../../enterprise-modules/filter-tool-panel/src/filtersToolPanelModule.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/filtersToolPanel.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/agFiltersToolPanelHeader.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/agFiltersToolPanelList.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/toolPanelFilterComp.ts", "../../../../enterprise-modules/filter-tool-panel/src/filterToolPanel/toolPanelFilterGroupComp.ts", "../../../../enterprise-modules/filter-tool-panel/src/version.ts", "../../../../enterprise-modules/master-detail/src/masterDetailModule.ts", "../../../../enterprise-modules/master-detail/src/masterDetail/detailCellRenderer.ts", "../../../../enterprise-modules/master-detail/src/masterDetail/detailCellRendererCtrl.ts", "../../../../enterprise-modules/master-detail/src/masterDetail/detailGridApiService.ts", "../../../../enterprise-modules/master-detail/src/masterDetail/masterDetailApi.ts", "../../../../enterprise-modules/master-detail/src/version.ts", "../../../../enterprise-modules/menu/src/menuModule.ts", "../../../../enterprise-modules/menu/src/menu/chartMenuItemMapper.ts", "../../../../enterprise-modules/menu/src/menu/columnChooserFactory.ts", "../../../../enterprise-modules/menu/src/menu/columnMenuFactory.ts", "../../../../enterprise-modules/menu/src/menu/contextMenu.ts", "../../../../enterprise-modules/menu/src/menu/enterpriseMenu.ts", "../../../../enterprise-modules/menu/src/menu/menuApi.ts", "../../../../enterprise-modules/menu/src/menu/menuItemMapper.ts", "../../../../enterprise-modules/menu/src/menu/menuUtils.ts", "../../../../enterprise-modules/menu/src/version.ts", "../../../../enterprise-modules/multi-filter/src/multiFilterModule.ts", "../../../../enterprise-modules/multi-filter/src/multiFilter/multiFilter.ts", "../../../../enterprise-modules/multi-filter/src/multiFilter/multiFloatingFilter.ts", "../../../../enterprise-modules/multi-filter/src/version.ts", "../../../../enterprise-modules/rich-select/src/richSelectModule.ts", "../../../../enterprise-modules/rich-select/src/richSelect/richSelectCellEditor.ts", "../../../../enterprise-modules/rich-select/src/version.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModelModule.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/blocks/blockUtils.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/expandListener.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/filterListener.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/listenerUtils.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/listeners/sortListener.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/nodeManager.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/serverSideRowModel.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/fullStore.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/lazyStore.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/lazyCache.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/lazyBlockLoadingService.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/lazy/multiIndexMap.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/serverSideRowModelApi.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/serverSideExpansionService.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/serverSideSelectionService.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/selection/strategies/defaultStrategy.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/selection/serverSideRowRangeSelectionContext.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/services/selection/strategies/groupSelectsChildrenStrategy.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/storeFactory.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/stores/storeUtils.ts", "../../../../enterprise-modules/server-side-row-model/src/serverSideRowModel/transactionManager.ts", "../../../../enterprise-modules/server-side-row-model/src/version.ts", "../../../../enterprise-modules/set-filter/src/setFilterModule.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFilter.ts", "../../../../enterprise-modules/set-filter/src/setFilter/iSetDisplayValueModel.ts", "../../../../enterprise-modules/set-filter/src/setFilter/localeText.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFilterListItem.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFilterModelFormatter.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setValueModel.ts", "../../../../enterprise-modules/set-filter/src/clientSideValueExtractor.ts", "../../../../enterprise-modules/set-filter/src/setFilter/filteringKeys.ts", "../../../../enterprise-modules/set-filter/src/setFilter/flatSetDisplayValueModel.ts", "../../../../enterprise-modules/set-filter/src/setFilter/treeSetDisplayValueModel.ts", "../../../../enterprise-modules/set-filter/src/setFilter/setFloatingFilter.ts", "../../../../enterprise-modules/set-filter/src/version.ts", "../../../../enterprise-modules/sparklines/src/sparklinesModule.ts", "../../../../enterprise-modules/sparklines/src/sparklineCellRenderer.ts", "../../../../enterprise-modules/sparklines/src/sparkline/agSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/area/areaSparkline.ts", "../../../../enterprise-modules/sparklines/src/util/lineDash.ts", "../../../../enterprise-modules/sparklines/src/sparkline/marker/markerFactory.ts", "../../../../enterprise-modules/sparklines/src/sparkline/sparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/tooltip/defaultTooltipCss.ts", "../../../../enterprise-modules/sparklines/src/sparkline/tooltip/sparklineTooltip.ts", "../../../../enterprise-modules/sparklines/src/sparkline/bar-column/barSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/bar-column/barColumnSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/label/label.ts", "../../../../enterprise-modules/sparklines/src/sparkline/bar-column/columnSparkline.ts", "../../../../enterprise-modules/sparklines/src/sparkline/line/lineSparkline.ts", "../../../../enterprise-modules/sparklines/src/tooltip/sparklineTooltipSingleton.ts", "../../../../enterprise-modules/sparklines/src/version.ts", "../../../../enterprise-modules/status-bar/src/statusBarModule.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/aggregationComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/agNameValue.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/filteredRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/selectedRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/totalAndFilteredRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/providedPanels/totalRowsComp.ts", "../../../../enterprise-modules/status-bar/src/statusBar/statusBarApi.ts", "../../../../enterprise-modules/status-bar/src/statusBar/statusBarService.ts", "../../../../enterprise-modules/status-bar/src/statusBar/agStatusBar.ts", "../../../../enterprise-modules/status-bar/src/version.ts", "../../../../enterprise-modules/viewport-row-model/src/viewportRowModelModule.ts", "../../../../enterprise-modules/viewport-row-model/src/version.ts", "../../../../enterprise-modules/viewport-row-model/src/viewportRowModel/viewportRowModel.ts"],
  "sourcesContent": ["/*\n * Used for umd bundles without styles, as well as cjs/esm packaging\n */\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { CommunityFeaturesModule, ModuleRegistry } from '@ag-grid-community/core';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nimport { AdvancedFilterModule } from '@ag-grid-enterprise/advanced-filter';\nimport { GridChartsModule } from '@ag-grid-enterprise/charts-enterprise';\nimport { ClipboardModule } from '@ag-grid-enterprise/clipboard';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { ExcelExportModule } from '@ag-grid-enterprise/excel-export';\nimport { FiltersToolPanelModule } from '@ag-grid-enterprise/filter-tool-panel';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { MultiFilterModule } from '@ag-grid-enterprise/multi-filter';\nimport { RangeSelectionModule } from '@ag-grid-enterprise/range-selection';\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport { ServerSideRowModelModule } from '@ag-grid-enterprise/server-side-row-model';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { SideBarModule } from '@ag-grid-enterprise/side-bar';\nimport { SparklinesModule } from '@ag-grid-enterprise/sparklines';\nimport { StatusBarModule } from '@ag-grid-enterprise/status-bar';\nimport { ViewportRowModelModule } from '@ag-grid-enterprise/viewport-row-model';\n\nModuleRegistry.__registerModules(\n    [\n        CommunityFeaturesModule,\n        ClientSideRowModelModule,\n        InfiniteRowModelModule,\n        CsvExportModule,\n        AdvancedFilterModule,\n        GridChartsModule,\n        ClipboardModule,\n        ColumnsToolPanelModule,\n        ExcelExportModule,\n        FiltersToolPanelModule,\n        MasterDetailModule,\n        MenuModule,\n        MultiFilterModule,\n        RangeSelectionModule,\n        RichSelectModule,\n        RowGroupingModule,\n        ServerSideRowModelModule,\n        SetFilterModule,\n        SideBarModule,\n        SparklinesModule,\n        StatusBarModule,\n        ViewportRowModelModule,\n    ],\n    false,\n    undefined\n);\n\nexport * from '@ag-grid-community/core';\nexport * from '@ag-grid-enterprise/core';\nexport * from '@ag-grid-enterprise/advanced-filter';\nexport * from '@ag-grid-enterprise/charts-enterprise';\nexport * from '@ag-grid-enterprise/clipboard';\nexport * from '@ag-grid-enterprise/column-tool-panel';\nexport * from '@ag-grid-enterprise/excel-export';\nexport * from '@ag-grid-enterprise/filter-tool-panel';\nexport * from '@ag-grid-enterprise/master-detail';\nexport * from '@ag-grid-enterprise/menu';\nexport * from '@ag-grid-enterprise/multi-filter';\nexport * from '@ag-grid-enterprise/range-selection';\nexport * from '@ag-grid-enterprise/rich-select';\nexport * from '@ag-grid-enterprise/row-grouping';\nexport * from '@ag-grid-enterprise/server-side-row-model';\nexport * from '@ag-grid-enterprise/set-filter';\nexport * from '@ag-grid-enterprise/side-bar';\nexport * from '@ag-grid-enterprise/sparklines';\nexport * from '@ag-grid-enterprise/status-bar';\nexport * from '@ag-grid-enterprise/viewport-row-model';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _FilterCoreModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport {\n    getAdvancedFilterModel,\n    hideAdvancedFilterBuilder,\n    setAdvancedFilterModel,\n    showAdvancedFilterBuilder,\n} from './advancedFilter/advancedFilterApi';\nimport { AdvancedFilterExpressionService } from './advancedFilter/advancedFilterExpressionService';\nimport { AdvancedFilterService } from './advancedFilter/advancedFilterService';\nimport { VERSION } from './version';\n\nexport const AdvancedFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.AdvancedFilterModule}-core`,\n    beans: [AdvancedFilterService, AdvancedFilterExpressionService],\n    dependantModules: [EnterpriseCoreModule, _FilterCoreModule],\n};\n\nexport const AdvancedFilterApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.AdvancedFilterModule}-api`,\n    apiFunctions: {\n        getAdvancedFilterModel,\n        setAdvancedFilterModel,\n        showAdvancedFilterBuilder,\n        hideAdvancedFilterBuilder,\n    },\n    dependantModules: [AdvancedFilterCoreModule],\n};\n\nexport const AdvancedFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.AdvancedFilterModule,\n    dependantModules: [AdvancedFilterCoreModule, AdvancedFilterApiModule],\n};\n", "import type { AdvancedFilterModel, BeanCollection } from '@ag-grid-community/core';\n\nexport function getAdvancedFilterModel(beans: BeanCollection): AdvancedFilterModel | null {\n    return beans.filterManager?.getAdvancedFilterModel() ?? null;\n}\n\nexport function setAdvancedFilterModel(beans: BeanCollection, advancedFilterModel: AdvancedFilterModel | null): void {\n    beans.filterManager?.setAdvancedFilterModel(advancedFilterModel);\n}\n\nexport function showAdvancedFilterBuilder(beans: BeanCollection): void {\n    beans.filterManager?.toggleAdvancedFilterBuilder(true, 'api');\n}\n\nexport function hideAdvancedFilterBuilder(beans: BeanCollection): void {\n    beans.filterManager?.toggleAdvancedFilterBuilder(false, 'api');\n}\n", "import type {\n    AgColumn,\n    BaseCellDataType,\n    BeanCollection,\n    ColumnAdvancedFilterModel,\n    ColumnModel,\n    ColumnNameService,\n    DataTypeService,\n    JoinAdvancedFilterModel,\n    NamedBean,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _exists, _parseDateTimeFromString, _serialiseDate, _toStringOrNull } from '@ag-grid-community/core';\n\nimport { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport { ColFilterExpressionParser } from './colFilterExpressionParser';\nimport type {\n    DataTypeFilterExpressionOperators,\n    FilterExpressionEvaluatorParams,\n    FilterExpressionOperator,\n    FilterExpressionOperators,\n} from './filterExpressionOperators';\nimport {\n    BooleanFilterExpressionOperators,\n    ScalarFilterExpressionOperators,\n    TextFilterExpressionOperators,\n} from './filterExpressionOperators';\n\nexport class AdvancedFilterExpressionService extends BeanStub implements NamedBean {\n    beanName = 'advancedFilterExpressionService' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private dataTypeService?: DataTypeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    private columnNameToIdMap: { [columnNameUpperCase: string]: { colId: string; columnName: string } } = {};\n    private columnAutocompleteEntries: AutocompleteEntry[] | null = null;\n    private expressionOperators: FilterExpressionOperators;\n    private expressionJoinOperators: { AND: string; OR: string };\n    private expressionEvaluatorParams: { [colId: string]: FilterExpressionEvaluatorParams<any> } = {};\n\n    public postConstruct(): void {\n        this.expressionJoinOperators = this.generateExpressionJoinOperators();\n        this.expressionOperators = this.generateExpressionOperators();\n    }\n\n    public parseJoinOperator(model: JoinAdvancedFilterModel): string {\n        const { type } = model;\n        return this.expressionJoinOperators[type] ?? type;\n    }\n\n    public getColumnDisplayValue(model: ColumnAdvancedFilterModel): string | undefined {\n        const { colId } = model;\n        const columnEntries = this.getColumnAutocompleteEntries();\n        const columnEntry = columnEntries.find(({ key }) => key === colId);\n        let columnName;\n        if (columnEntry) {\n            columnName = columnEntry.displayValue!;\n            this.columnNameToIdMap[columnName.toLocaleUpperCase()] = { colId, columnName };\n        } else {\n            columnName = colId;\n        }\n        return columnName;\n    }\n\n    public getOperatorDisplayValue(model: ColumnAdvancedFilterModel): string | undefined {\n        return this.getExpressionOperator(model.filterType, model.type)?.displayValue ?? model.type;\n    }\n\n    public getOperandModelValue(\n        operand: string,\n        baseCellDataType: BaseCellDataType,\n        column: AgColumn\n    ): string | number | null {\n        switch (baseCellDataType) {\n            case 'number':\n                return _exists(operand) ? Number(operand) : null;\n            case 'date':\n                return _serialiseDate(this.valueService.parseValue(column, null, operand, undefined), false);\n            case 'dateString': {\n                // displayed string format may be different from data string format, so parse before converting to date\n                const parsedDateString = this.valueService.parseValue(column, null, operand, undefined);\n                return this.dataTypeService\n                    ? _serialiseDate(\n                          this.dataTypeService.getDateParserFunction(column)(parsedDateString) ?? null,\n                          false\n                      )\n                    : parsedDateString;\n            }\n        }\n        return operand;\n    }\n\n    public getOperandDisplayValue(model: ColumnAdvancedFilterModel, skipFormatting?: boolean): string {\n        const { colId, filter } = model as any;\n        const column = this.columnModel.getColDefCol(colId);\n        let operand = '';\n        if (filter != null) {\n            let operand1: string | null | undefined;\n            switch (model.filterType) {\n                case 'number':\n                    operand1 = _toStringOrNull(filter) ?? '';\n                    break;\n                case 'date': {\n                    const dateValue = _parseDateTimeFromString(filter);\n                    operand1 = column ? this.valueService.formatValue(column, null, dateValue) : null;\n                    break;\n                }\n                case 'dateString': {\n                    let dateStringStringValue;\n                    if (this.dataTypeService) {\n                        // need to convert from ISO date string to Date to data string format to formatted string format\n                        const dateStringDateValue = _parseDateTimeFromString(filter);\n                        dateStringStringValue = column\n                            ? this.dataTypeService?.getDateFormatterFunction(column)(dateStringDateValue ?? undefined)\n                            : null;\n                    } else {\n                        dateStringStringValue = filter;\n                    }\n                    operand1 = column ? this.valueService.formatValue(column, null, dateStringStringValue) : null;\n                    break;\n                }\n            }\n            if (model.filterType !== 'number') {\n                operand1 = operand1 ?? _toStringOrNull(filter) ?? '';\n                if (!skipFormatting) {\n                    operand1 = `\"${operand1}\"`;\n                }\n            }\n            operand = skipFormatting ? operand1! : ` ${operand1}`;\n        }\n        return operand;\n    }\n\n    public parseColumnFilterModel(model: ColumnAdvancedFilterModel): string {\n        const columnName = this.getColumnDisplayValue(model) ?? '';\n        const operator = this.getOperatorDisplayValue(model) ?? '';\n        const operands = this.getOperandDisplayValue(model);\n        return `[${columnName}] ${operator}${operands}`;\n    }\n\n    public updateAutocompleteCache(updateEntry: AutocompleteEntry, type?: string): void {\n        if (type === 'column') {\n            const { key: colId, displayValue } = updateEntry;\n            this.columnNameToIdMap[updateEntry.displayValue!.toLocaleUpperCase()] = {\n                colId,\n                columnName: displayValue!,\n            };\n        }\n    }\n\n    public translate(key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]): string {\n        let defaultValue = ADVANCED_FILTER_LOCALE_TEXT[key];\n        if (typeof defaultValue === 'function') {\n            defaultValue = defaultValue(variableValues!);\n        }\n        return this.localeService.getLocaleTextFunc()(key, defaultValue, variableValues);\n    }\n\n    public generateAutocompleteListParams(\n        entries: AutocompleteEntry[],\n        type: string,\n        searchString: string\n    ): AutocompleteListParams {\n        return {\n            enabled: true,\n            type,\n            searchString,\n            entries,\n        };\n    }\n\n    public getColumnAutocompleteEntries(): AutocompleteEntry[] {\n        if (this.columnAutocompleteEntries) {\n            return this.columnAutocompleteEntries;\n        }\n        const columns = this.columnModel.getColDefCols() ?? [];\n        const entries: AutocompleteEntry[] = [];\n        const includeHiddenColumns = this.gos.get('includeHiddenColumnsInAdvancedFilter');\n        columns.forEach((column) => {\n            if (\n                column.getColDef().filter &&\n                (includeHiddenColumns || column.isVisible() || column.isRowGroupActive())\n            ) {\n                entries.push({\n                    key: column.getColId(),\n                    displayValue: this.columnNameService.getDisplayNameForColumn(column, 'advancedFilter')!,\n                });\n            }\n        });\n        entries.sort((a, b) => {\n            const aValue = a.displayValue ?? '';\n            const bValue = b.displayValue ?? '';\n            if (aValue < bValue) {\n                return -1;\n            } else if (bValue > aValue) {\n                return 1;\n            }\n            return 0;\n        });\n        return entries;\n    }\n\n    public getOperatorAutocompleteEntries(column: AgColumn, baseCellDataType: BaseCellDataType): AutocompleteEntry[] {\n        const activeOperators = this.getActiveOperators(column);\n        return this.getDataTypeExpressionOperator(baseCellDataType)!.getEntries(activeOperators);\n    }\n\n    public getJoinOperatorAutocompleteEntries(): AutocompleteEntry[] {\n        return Object.entries(this.expressionJoinOperators).map(([key, displayValue]) => ({ key, displayValue }));\n    }\n\n    public getDefaultAutocompleteListParams(searchString: string): AutocompleteListParams {\n        return this.generateAutocompleteListParams(this.getColumnAutocompleteEntries(), 'column', searchString);\n    }\n\n    public getDataTypeExpressionOperator(\n        baseCellDataType?: BaseCellDataType\n    ): DataTypeFilterExpressionOperators<any> | undefined {\n        return this.expressionOperators[baseCellDataType!];\n    }\n\n    public getExpressionOperator(\n        baseCellDataType?: BaseCellDataType,\n        operator?: string\n    ): FilterExpressionOperator<any> | undefined {\n        return this.getDataTypeExpressionOperator(baseCellDataType)?.operators?.[operator!];\n    }\n\n    public getExpressionJoinOperators(): { AND: string; OR: string } {\n        return this.expressionJoinOperators;\n    }\n\n    public getColId(columnName: string): { colId: string; columnName: string } | null {\n        const upperCaseColumnName = columnName.toLocaleUpperCase();\n        const cachedColId = this.columnNameToIdMap[upperCaseColumnName];\n        if (cachedColId) {\n            return cachedColId;\n        }\n\n        const columnAutocompleteEntries = this.getColumnAutocompleteEntries();\n        const colEntry = columnAutocompleteEntries.find(\n            ({ displayValue }) => displayValue!.toLocaleUpperCase() === upperCaseColumnName\n        );\n        if (colEntry) {\n            const { key: colId, displayValue } = colEntry;\n            const colValue = { colId, columnName: displayValue! };\n            // cache for faster lookup\n            this.columnNameToIdMap[upperCaseColumnName] = colValue;\n            return colValue;\n        }\n        return null;\n    }\n\n    public getExpressionEvaluatorParams<ConvertedTValue, TValue = ConvertedTValue>(\n        colId: string\n    ): FilterExpressionEvaluatorParams<ConvertedTValue, TValue> {\n        let params = this.expressionEvaluatorParams[colId];\n        if (params) {\n            return params;\n        }\n\n        const column = this.columnModel.getColDefCol(colId);\n        if (!column) {\n            return { valueConverter: (v: any) => v };\n        }\n\n        const baseCellDataType = this.dataTypeService?.getBaseDataType(column);\n        switch (baseCellDataType) {\n            case 'dateString':\n                params = {\n                    valueConverter: this.dataTypeService?.getDateParserFunction(column) ?? ((v: any) => v),\n                };\n                break;\n            case 'object':\n                // If there's a filter value getter, assume the value is already a string. Otherwise we need to format it.\n                if (column.getColDef().filterValueGetter) {\n                    params = { valueConverter: (v: any) => v };\n                } else {\n                    params = {\n                        valueConverter: (value, node) =>\n                            this.valueService.formatValue(column, node, value) ??\n                            (typeof value.toString === 'function' ? value.toString() : ''),\n                    };\n                }\n                break;\n            case 'text':\n            case undefined:\n                params = { valueConverter: (v: any) => _toStringOrNull(v) };\n                break;\n            default:\n                params = { valueConverter: (v: any) => v };\n                break;\n        }\n        const { filterParams } = column.getColDef();\n        if (filterParams) {\n            ['caseSensitive', 'includeBlanksInEquals', 'includeBlanksInLessThan', 'includeBlanksInGreaterThan'].forEach(\n                (param: keyof FilterExpressionEvaluatorParams<ConvertedTValue, TValue>) => {\n                    const paramValue = filterParams[param];\n                    if (paramValue) {\n                        params[param] = paramValue;\n                    }\n                }\n            );\n        }\n        this.expressionEvaluatorParams[colId] = params;\n\n        return params;\n    }\n\n    public getColumnDetails(colId: string): { column?: AgColumn; baseCellDataType: BaseCellDataType } {\n        const column = this.columnModel.getColDefCol(colId) ?? undefined;\n        const baseCellDataType = (column ? this.dataTypeService?.getBaseDataType(column) : undefined) ?? 'text';\n        return { column, baseCellDataType };\n    }\n\n    public generateExpressionOperators(): FilterExpressionOperators {\n        const translate = (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]) =>\n            this.translate(key, variableValues);\n        return {\n            text: new TextFilterExpressionOperators({ translate }),\n            boolean: new BooleanFilterExpressionOperators({ translate }),\n            object: new TextFilterExpressionOperators<any>({ translate }),\n            number: new ScalarFilterExpressionOperators<number>({ translate, equals: (v, o) => v === o }),\n            date: new ScalarFilterExpressionOperators<Date>({\n                translate,\n                equals: (v: Date, o: Date) => v.getTime() === o.getTime(),\n            }),\n            dateString: new ScalarFilterExpressionOperators<Date, string>({\n                translate,\n                equals: (v: Date, o: Date) => v.getTime() === o.getTime(),\n            }),\n        };\n    }\n\n    public getColumnValue({ displayValue }: AutocompleteEntry): string {\n        return `${ColFilterExpressionParser.COL_START_CHAR}${displayValue}${ColFilterExpressionParser.COL_END_CHAR}`;\n    }\n\n    private generateExpressionJoinOperators(): { AND: string; OR: string } {\n        return {\n            AND: this.translate('advancedFilterAnd'),\n            OR: this.translate('advancedFilterOr'),\n        };\n    }\n\n    private getActiveOperators(column: AgColumn): string[] | undefined {\n        const filterOptions = column.getColDef().filterParams?.filterOptions;\n        if (!filterOptions) {\n            return undefined;\n        }\n        const isValid = filterOptions.every((filterOption: any) => typeof filterOption === 'string');\n        return isValid ? filterOptions : undefined;\n    }\n\n    public resetColumnCaches(): void {\n        this.columnAutocompleteEntries = null;\n        this.columnNameToIdMap = {};\n        this.expressionEvaluatorParams = {};\n    }\n}\n", "export const ADVANCED_FILTER_LOCALE_TEXT = {\n    ariaAdvancedFilterBuilderItem: (variableValues: string[]) =>\n        `${variableValues[0]}. Level ${variableValues[1]}. Press ENTER to edit`,\n    ariaAdvancedFilterBuilderItemValidation: (variableValues: string[]) =>\n        `${variableValues[0]}. Level ${variableValues[1]}. ${variableValues[2]} Press ENTER to edit`,\n    ariaAdvancedFilterBuilderList: 'Advanced Filter Builder List',\n    ariaAdvancedFilterBuilderFilterItem: 'Filter Condition',\n    ariaAdvancedFilterBuilderGroupItem: 'Filter Group',\n    ariaAdvancedFilterBuilderColumn: 'Column',\n    ariaAdvancedFilterBuilderOption: 'Option',\n    ariaAdvancedFilterBuilderValue: 'Value',\n    ariaAdvancedFilterBuilderJoinOperator: 'Join Operator',\n\n    ariaAdvancedFilterInput: 'Advanced Filter Input',\n    ariaLabelAdvancedFilterAutocomplete: 'Advanced Filter Autocomplete',\n    advancedFilterContains: 'contains',\n    advancedFilterNotContains: 'does not contain',\n    advancedFilterTextEquals: 'equals',\n    advancedFilterTextNotEqual: 'does not equal',\n    advancedFilterStartsWith: 'begins with',\n    advancedFilterEndsWith: 'ends with',\n    advancedFilterBlank: 'is blank',\n    advancedFilterNotBlank: 'is not blank',\n    advancedFilterEquals: '=',\n    advancedFilterNotEqual: '!=',\n    advancedFilterGreaterThan: '>',\n    advancedFilterGreaterThanOrEqual: '>=',\n    advancedFilterLessThan: '<',\n    advancedFilterLessThanOrEqual: '<=',\n    advancedFilterTrue: 'is true',\n    advancedFilterFalse: 'is false',\n    advancedFilterAnd: 'AND',\n    advancedFilterOr: 'OR',\n    advancedFilterApply: 'Apply',\n    advancedFilterBuilder: 'Builder',\n    advancedFilterValidationMissingColumn: 'Column is missing',\n    advancedFilterValidationMissingOption: 'Option is missing',\n    advancedFilterValidationMissingValue: 'Value is missing',\n    advancedFilterValidationInvalidColumn: 'Column not found',\n    advancedFilterValidationInvalidOption: 'Option not found',\n    advancedFilterValidationMissingQuote: 'Value is missing an end quote',\n    advancedFilterValidationNotANumber: 'Value is not a number',\n    advancedFilterValidationInvalidDate: 'Value is not a valid date',\n    advancedFilterValidationMissingCondition: 'Condition is missing',\n    advancedFilterValidationJoinOperatorMismatch: 'Join operators within a condition must be the same',\n    advancedFilterValidationInvalidJoinOperator: 'Join operator not found',\n    advancedFilterValidationMissingEndBracket: 'Missing end bracket',\n    advancedFilterValidationExtraEndBracket: 'Too many end brackets',\n    advancedFilterValidationMessage: (variableValues: string[]) =>\n        `Expression has an error. ${variableValues[0]} - ${variableValues[1]}.`,\n    advancedFilterValidationMessageAtEnd: (variableValues: string[]) =>\n        `Expression has an error. ${variableValues[0]} at end of expression.`,\n    advancedFilterBuilderTitle: 'Advanced Filter',\n    advancedFilterBuilderApply: 'Apply',\n    advancedFilterBuilderCancel: 'Cancel',\n    advancedFilterBuilderAddButtonTooltip: 'Add Filter or Group',\n    advancedFilterBuilderRemoveButtonTooltip: 'Remove',\n    advancedFilterBuilderMoveUpButtonTooltip: 'Move Up',\n    advancedFilterBuilderMoveDownButtonTooltip: 'Move Down',\n    advancedFilterBuilderAddJoin: 'Add Group',\n    advancedFilterBuilderAddCondition: 'Add Filter',\n    advancedFilterBuilderSelectColumn: 'Select a column',\n    advancedFilterBuilderSelectOption: 'Select an option',\n    advancedFilterBuilderEnterValue: 'Enter a value...',\n    advancedFilterBuilderValidationAlreadyApplied: 'Current filter already applied.',\n    advancedFilterBuilderValidationIncomplete: 'Not all conditions are complete.',\n    advancedFilterBuilderValidationSelectColumn: 'Must select a column.',\n    advancedFilterBuilderValidationSelectOption: 'Must select an option.',\n    advancedFilterBuilderValidationEnterValue: 'Must enter a value.',\n};\n", "import type { ColumnModel, DataTypeService, IRowNode, ValueService } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport type { FilterExpressionEvaluatorParams, FilterExpressionOperator } from './filterExpressionOperators';\n\nexport interface FilterExpressionParserParams {\n    expression: string;\n    columnModel: ColumnModel;\n    dataTypeService?: DataTypeService;\n    valueService: ValueService;\n    advancedFilterExpressionService: AdvancedFilterExpressionService;\n}\n\nexport interface AutocompleteUpdate {\n    updatedValue: string;\n    updatedPosition: number;\n    hideAutocomplete?: boolean;\n}\n\nexport interface FilterExpressionValidationError {\n    message: string;\n    startPosition: number;\n    endPosition: number;\n}\n\nexport interface FilterExpressionFunctionParams {\n    operands: any[];\n    operators: FilterExpressionOperator<any>[];\n    evaluatorParams: FilterExpressionEvaluatorParams<any, any>[];\n}\n\nexport interface ExpressionProxy {\n    getValue<T = any>(colId: string, node: IRowNode): T;\n}\n\nexport type FilterExpressionFunction = (\n    expressionProxy: ExpressionProxy,\n    node: IRowNode,\n    params: FilterExpressionFunctionParams\n) => boolean;\n\nexport function getSearchString(value: string, position: number, endPosition: number): string {\n    if (!value) {\n        return '';\n    }\n    const numChars = endPosition - position;\n    return numChars ? value.slice(0, value.length - numChars) : value;\n}\n\nexport function updateExpression(\n    expression: string,\n    startPosition: number,\n    endPosition: number,\n    updatedValuePart: string,\n    appendSpace?: boolean,\n    appendQuote?: boolean,\n    empty?: boolean\n): AutocompleteUpdate {\n    const secondPartStartPosition = endPosition + (!expression.length || empty ? 0 : 1);\n    let positionOffset = 0;\n    if (appendSpace) {\n        if (expression[secondPartStartPosition] === ' ') {\n            // already a space, just move the position\n            positionOffset = 1;\n        } else {\n            updatedValuePart += ' ';\n            if (appendQuote) {\n                updatedValuePart += `\"`;\n            }\n        }\n    }\n    const updatedValue =\n        expression.slice(0, startPosition) + updatedValuePart + expression.slice(secondPartStartPosition);\n    return { updatedValue, updatedPosition: startPosition + updatedValuePart.length + positionOffset };\n}\n\nexport function findStartPosition(expression: string, position: number, endPosition: number) {\n    let startPosition = position;\n    while (startPosition < endPosition) {\n        const char = expression[startPosition];\n        if (char !== ' ') {\n            break;\n        }\n        startPosition++;\n    }\n    return startPosition;\n}\n\nexport function findEndPosition(\n    expression: string,\n    position: number,\n    includeCloseBracket?: boolean,\n    isStartPositionUnknown?: boolean\n): { endPosition: number; isEmpty: boolean } {\n    let endPosition = position;\n    let isEmpty = false;\n    while (endPosition < expression.length) {\n        const char = expression[endPosition];\n        if (char === '(') {\n            if (isStartPositionUnknown && expression[endPosition - 1] === ' ') {\n                isEmpty = true;\n            } else {\n                endPosition = endPosition - 1;\n            }\n            break;\n        } else if (char === ' ' || (includeCloseBracket && char === ')')) {\n            endPosition = endPosition - 1;\n            break;\n        }\n        endPosition++;\n    }\n    return { endPosition, isEmpty };\n}\n\nexport function checkAndUpdateExpression(\n    params: FilterExpressionParserParams,\n    userValue: string,\n    displayValue: string,\n    endPosition: number\n): void {\n    if (displayValue !== userValue) {\n        params.expression = updateExpression(\n            params.expression,\n            endPosition - userValue.length + 1,\n            endPosition,\n            displayValue\n        ).updatedValue;\n    }\n}\n\nexport function escapeQuotes(value: string): string {\n    return value.replace(/(['\"])/, '\\\\$1');\n}\n", "import type { AdvancedFilterModel, AgColumn, BaseCellDataType } from '@ag-grid-community/core';\n\nimport type { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport type {\n    AutocompleteUpdate,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n    FilterExpressionValidationError,\n} from './filterExpressionUtils';\nimport {\n    checkAndUpdateExpression,\n    escapeQuotes,\n    findEndPosition,\n    findStartPosition,\n    getSearchString,\n    updateExpression,\n} from './filterExpressionUtils';\n\ninterface Parser {\n    type: string;\n    parse(char: string, position: number): boolean | undefined;\n    complete(position: number): void;\n    getValidationError(): FilterExpressionValidationError | null;\n}\n\nclass ColumnParser implements Parser {\n    public readonly type = 'column';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    public baseCellDataType: BaseCellDataType;\n    public column: AgColumn | null | undefined;\n    public hasStartChar = false;\n    public hasEndChar = false;\n    private colName: string = '';\n    private colId: string;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ColFilterExpressionParser.COL_START_CHAR && !this.colName) {\n            this.hasStartChar = true;\n        } else if (char === ColFilterExpressionParser.COL_END_CHAR && this.hasStartChar) {\n            const isMatch = this.parseColumn(false, position);\n            if (isMatch) {\n                this.hasEndChar = true;\n                return false;\n            } else {\n                this.colName += char;\n            }\n        } else {\n            this.colName += char;\n        }\n        return undefined;\n    }\n\n    public getDisplayValue(): string {\n        return (\n            (this.hasStartChar ? ColFilterExpressionParser.COL_START_CHAR : '') +\n            this.colName +\n            (this.hasEndChar ? ColFilterExpressionParser.COL_END_CHAR : '')\n        );\n    }\n\n    public getColId(): string {\n        return this.colId;\n    }\n\n    public complete(position: number): void {\n        this.parseColumn(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.valid\n            ? null\n            : {\n                  message: this.params.advancedFilterExpressionService.translate(\n                      'advancedFilterValidationInvalidColumn'\n                  ),\n                  startPosition: this.startPosition,\n                  endPosition: this.endPosition ?? this.params.expression.length - 1,\n              };\n    }\n\n    private parseColumn(fromComplete: boolean, endPosition: number): boolean {\n        this.endPosition = endPosition;\n        const colValue = this.params.advancedFilterExpressionService.getColId(this.colName);\n        if (colValue && this.hasStartChar) {\n            this.colId = colValue.colId;\n            checkAndUpdateExpression(this.params, this.colName, colValue.columnName, endPosition - 1);\n            this.colName = colValue.columnName;\n            this.column = this.params.columnModel.getColDefCol(this.colId);\n            if (this.column) {\n                this.baseCellDataType = this.params.dataTypeService?.getBaseDataType(this.column) ?? 'text';\n                return true;\n            }\n        }\n        if (fromComplete) {\n            this.valid = false;\n        }\n        this.baseCellDataType = 'text';\n        return false;\n    }\n}\n\nclass OperatorParser implements Parser {\n    public readonly type = 'operator';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    public expectedNumOperands: number = 0;\n    private operator: string = '';\n    private parsedOperator: string;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number,\n        private readonly baseCellDataType: BaseCellDataType\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ' ' || char === ')') {\n            const isMatch = this.parseOperator(false, position - 1);\n            if (isMatch) {\n                return true;\n            } else {\n                this.operator += char;\n            }\n        } else {\n            this.operator += char;\n        }\n        return undefined;\n    }\n\n    public complete(position: number): void {\n        this.parseOperator(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.valid\n            ? null\n            : {\n                  message: this.params.advancedFilterExpressionService.translate(\n                      'advancedFilterValidationInvalidOption'\n                  ),\n                  startPosition: this.startPosition,\n                  endPosition: this.endPosition ?? this.params.expression.length - 1,\n              };\n    }\n\n    public getDisplayValue(): string {\n        return this.operator;\n    }\n\n    public getOperatorKey(): string {\n        return this.parsedOperator;\n    }\n\n    private parseOperator(fromComplete: boolean, endPosition: number): boolean {\n        const operatorForType = this.params.advancedFilterExpressionService.getDataTypeExpressionOperator(\n            this.baseCellDataType\n        )!;\n        const parsedOperator = operatorForType.findOperator(this.operator);\n        this.endPosition = endPosition;\n        if (parsedOperator) {\n            this.parsedOperator = parsedOperator;\n            const operator = operatorForType.operators[parsedOperator];\n            this.expectedNumOperands = operator.numOperands;\n            const operatorDisplayValue = operator.displayValue;\n            checkAndUpdateExpression(this.params, this.operator, operatorDisplayValue, endPosition);\n            this.operator = operatorDisplayValue;\n            return true;\n        }\n        const isPartialMatch = parsedOperator === null;\n        if (fromComplete || !isPartialMatch) {\n            this.valid = false;\n        }\n        return false;\n    }\n}\n\nclass OperandParser implements Parser {\n    public readonly type = 'operand';\n\n    public valid = true;\n    public endPosition: number | undefined;\n    private quotes: `'` | `\"` | undefined;\n    private operand = '';\n    private modelValue: number | string;\n    private validationMessage: string | null = null;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number,\n        private readonly baseCellDataType: BaseCellDataType,\n        private readonly column: AgColumn | null | undefined\n    ) {}\n\n    public parse(char: string, position: number): boolean | undefined {\n        if (char === ' ') {\n            if (this.quotes) {\n                this.operand += char;\n            } else {\n                this.parseOperand(false, position);\n                return true;\n            }\n        } else if (char === ')') {\n            if (this.baseCellDataType === 'number' || !this.quotes) {\n                this.parseOperand(false, position - 1);\n                return true;\n            } else {\n                this.operand += char;\n            }\n        } else if (!this.operand && !this.quotes && (char === `'` || char === `\"`)) {\n            this.quotes = char;\n        } else if (this.quotes && char === this.quotes) {\n            this.parseOperand(false, position);\n            return false;\n        } else {\n            this.operand += char;\n        }\n        return undefined;\n    }\n\n    public complete(position: number): void {\n        this.parseOperand(true, position);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.validationMessage\n            ? {\n                  message: this.validationMessage,\n                  startPosition: this.startPosition,\n                  endPosition: this.endPosition ?? this.params.expression.length - 1,\n              }\n            : null;\n    }\n\n    public getRawValue(): string {\n        return this.operand;\n    }\n\n    public getModelValue(): string | number {\n        return this.modelValue;\n    }\n\n    private parseOperand(fromComplete: boolean, position: number): void {\n        const { advancedFilterExpressionService } = this.params;\n        this.endPosition = position;\n        this.modelValue = this.operand;\n        if (fromComplete && this.quotes) {\n            // missing end quote\n            this.valid = false;\n            this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationMissingQuote');\n        } else if (this.modelValue === '') {\n            this.valid = false;\n            this.validationMessage = advancedFilterExpressionService.translate('advancedFilterValidationMissingValue');\n        } else {\n            const modelValue = advancedFilterExpressionService.getOperandModelValue(\n                this.operand,\n                this.baseCellDataType,\n                this.column!\n            );\n            if (modelValue != null) {\n                this.modelValue = modelValue;\n            }\n            switch (this.baseCellDataType) {\n                case 'number':\n                    if (this.quotes || isNaN(this.modelValue as number)) {\n                        this.valid = false;\n                        this.validationMessage = advancedFilterExpressionService.translate(\n                            'advancedFilterValidationNotANumber'\n                        );\n                    }\n                    break;\n                case 'date':\n                case 'dateString':\n                    if (modelValue == null) {\n                        this.valid = false;\n                        this.validationMessage = advancedFilterExpressionService.translate(\n                            'advancedFilterValidationInvalidDate'\n                        );\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nexport class ColFilterExpressionParser {\n    public static readonly COL_START_CHAR = '[';\n    public static readonly COL_END_CHAR = ']';\n\n    private endPosition: number | undefined;\n    private isAwaiting = true;\n    private parser: Parser | undefined;\n    private columnParser: ColumnParser | undefined;\n    private operatorParser: OperatorParser | undefined;\n    private operandParser: OperandParser | undefined;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parseExpression(): number {\n        let i = this.startPosition;\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === ' ' && this.isAwaiting) {\n                // ignore duplicate spaces\n            } else {\n                this.isAwaiting = false;\n                if (!this.parser) {\n                    let parser: Parser;\n                    if (!this.columnParser) {\n                        this.columnParser = new ColumnParser(this.params, i);\n                        parser = this.columnParser;\n                    } else if (!this.operatorParser) {\n                        this.operatorParser = new OperatorParser(this.params, i, this.columnParser!.baseCellDataType);\n                        parser = this.operatorParser;\n                    } else {\n                        this.operandParser = new OperandParser(\n                            this.params,\n                            i,\n                            this.columnParser!.baseCellDataType,\n                            this.columnParser!.column\n                        );\n                        parser = this.operandParser;\n                    }\n                    this.parser = parser;\n                }\n                const hasCompletedOnPrevChar = this.parser.parse(char, i);\n                if (hasCompletedOnPrevChar != null) {\n                    if (this.isComplete()) {\n                        return this.returnEndPosition(hasCompletedOnPrevChar ? i - 1 : i, true);\n                    }\n                    this.parser = undefined;\n                    this.isAwaiting = true;\n                }\n            }\n            i++;\n        }\n        this.parser?.complete?.(i - 1);\n        return this.returnEndPosition(i);\n    }\n\n    public isValid(): boolean {\n        return (\n            this.isComplete() &&\n            this.columnParser!.valid &&\n            this.operatorParser!.valid &&\n            (!this.operandParser || this.operandParser!.valid)\n        );\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        const validationError =\n            this.columnParser?.getValidationError() ??\n            this.operatorParser?.getValidationError() ??\n            this.operandParser?.getValidationError();\n        if (validationError) {\n            return validationError;\n        }\n        const endPosition = this.params.expression.length;\n        let translateKey: keyof typeof ADVANCED_FILTER_LOCALE_TEXT | undefined;\n        if (!this.columnParser) {\n            translateKey = 'advancedFilterValidationMissingColumn';\n        } else if (!this.operatorParser) {\n            translateKey = 'advancedFilterValidationMissingOption';\n        } else if (this.operatorParser.expectedNumOperands && !this.operandParser) {\n            translateKey = 'advancedFilterValidationMissingValue';\n        }\n        if (translateKey) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(translateKey),\n                startPosition: endPosition,\n                endPosition,\n            };\n        }\n        return null;\n    }\n\n    public getFunctionString(params: FilterExpressionFunctionParams): string {\n        return this.getFunctionCommon(params, (operandIndex, operatorIndex, colId, evaluatorParamsIndex) => {\n            const escapedColId = escapeQuotes(colId);\n            const operand = operandIndex == null ? '' : `, params.operands[${operandIndex}]`;\n            return `params.operators[${operatorIndex}].evaluator(expressionProxy.getValue('${escapedColId}', node), node, params.evaluatorParams[${evaluatorParamsIndex}]${operand})`;\n        });\n    }\n\n    public getFunctionParsed(params: FilterExpressionFunctionParams): FilterExpressionFunction {\n        return this.getFunctionCommon(params, (operandIndex, operatorIndex, colId, evaluatorParamsIndex) => {\n            return (expressionProxy, node, p) =>\n                p.operators[operatorIndex].evaluator(\n                    expressionProxy.getValue(colId, node),\n                    node,\n                    p.evaluatorParams[evaluatorParamsIndex],\n                    operandIndex == null ? undefined : p.operands[operandIndex]\n                );\n        });\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams | undefined {\n        if (this.isColumnPosition(position)) {\n            return this.getColumnAutocompleteListParams(position);\n        }\n        if (this.isOperatorPosition(position)) {\n            return this.getOperatorAutocompleteListParams(position);\n        }\n        if (this.isBeyondEndPosition(position)) {\n            return undefined;\n        }\n        return { enabled: false };\n    }\n\n    public updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        type?: string\n    ): AutocompleteUpdate | null {\n        const { expression } = this.params;\n        if (this.isColumnPosition(position)) {\n            return updateExpression(\n                this.params.expression,\n                this.startPosition,\n                this.columnParser?.getColId()\n                    ? this.columnParser!.endPosition!\n                    : findEndPosition(expression, position).endPosition,\n                this.params.advancedFilterExpressionService.getColumnValue(updateEntry),\n                true\n            );\n        } else if (this.isOperatorPosition(position)) {\n            const baseCellDataType = this.getBaseCellDataTypeFromOperatorAutocompleteType(type);\n            const hasOperand = this.hasOperand(baseCellDataType, updateEntry.key);\n            const doesOperandNeedQuotes = hasOperand && this.doesOperandNeedQuotes(baseCellDataType);\n            let update: AutocompleteUpdate;\n            if (this.operatorParser?.startPosition != null && position < this.operatorParser.startPosition) {\n                // in between multiple spaces, just insert direct\n                update = updateExpression(\n                    expression,\n                    position,\n                    position,\n                    updateEntry.displayValue ?? updateEntry.key,\n                    hasOperand,\n                    doesOperandNeedQuotes\n                );\n            } else {\n                let endPosition: number;\n                let empty = false;\n                if (this.operatorParser?.getOperatorKey()) {\n                    endPosition = this.operatorParser!.endPosition!;\n                } else {\n                    const { endPosition: calculatedEndPosition, isEmpty } = findEndPosition(\n                        expression,\n                        position,\n                        true,\n                        true\n                    );\n                    endPosition = calculatedEndPosition;\n                    empty = isEmpty;\n                }\n                update = updateExpression(\n                    expression,\n                    findStartPosition(expression, this.columnParser!.endPosition! + 1, endPosition),\n                    endPosition,\n                    updateEntry.displayValue ?? updateEntry.key,\n                    hasOperand,\n                    doesOperandNeedQuotes,\n                    empty\n                );\n            }\n            return { ...update, hideAutocomplete: !hasOperand };\n        }\n        return null;\n    }\n\n    public getModel(): AdvancedFilterModel {\n        const colId = this.columnParser!.getColId();\n        const model = {\n            filterType: this.columnParser!.baseCellDataType,\n            colId,\n            type: this.operatorParser!.getOperatorKey(),\n        };\n        if (this.operatorParser!.expectedNumOperands) {\n            (model as any).filter = this.operandParser!.getModelValue();\n        }\n        return model as AdvancedFilterModel;\n    }\n\n    private getFunctionCommon<T>(\n        params: FilterExpressionFunctionParams,\n        processFunc: (\n            operandIndex: number | undefined,\n            operatorIndex: number,\n            colId: string,\n            evaluatorParamsIndex: number\n        ) => T\n    ) {\n        const colId = this.columnParser!.getColId();\n        const operator = this.operatorParser?.getOperatorKey();\n        const { operators, evaluatorParams, operands } = params;\n        const operatorForColumn = this.params.advancedFilterExpressionService.getExpressionOperator(\n            this.columnParser!.baseCellDataType,\n            operator\n        );\n        const operatorIndex = this.addToListAndGetIndex(operators, operatorForColumn);\n        const evaluatorParamsForColumn =\n            this.params.advancedFilterExpressionService.getExpressionEvaluatorParams(colId);\n        const evaluatorParamsIndex = this.addToListAndGetIndex(evaluatorParams, evaluatorParamsForColumn);\n        const operandIndex =\n            this.operatorParser?.expectedNumOperands === 0\n                ? undefined\n                : this.addToListAndGetIndex(operands, this.getOperandValue());\n        return processFunc(operandIndex, operatorIndex, colId, evaluatorParamsIndex);\n    }\n\n    private getOperandValue(): any {\n        let operand: any = this.operandParser!.getRawValue();\n        const { baseCellDataType, column } = this.columnParser!;\n        switch (baseCellDataType) {\n            case 'number':\n                operand = Number(operand);\n                break;\n            case 'date':\n            case 'dateString':\n                operand = this.params.valueService.parseValue(column!, null, operand, undefined);\n                break;\n        }\n        if (baseCellDataType === 'dateString') {\n            const { dataTypeService } = this.params;\n            return dataTypeService ? dataTypeService.getDateParserFunction(column)(operand as string) : operand;\n        }\n        return operand;\n    }\n\n    private isComplete(): boolean {\n        return !!(\n            this.operatorParser &&\n            (!this.operatorParser.expectedNumOperands ||\n                (this.operatorParser.expectedNumOperands && this.operandParser))\n        );\n    }\n\n    private isColumnPosition(position: number): boolean {\n        return (\n            !this.columnParser || this.columnParser.endPosition == null || position <= this.columnParser.endPosition + 1\n        );\n    }\n\n    private isOperatorPosition(position: number): boolean {\n        return (\n            !this.operatorParser ||\n            this.operatorParser.endPosition == null ||\n            position <= this.operatorParser.endPosition + 1\n        );\n    }\n\n    private isBeyondEndPosition(position: number): boolean {\n        return (\n            this.isComplete() &&\n            this.endPosition != null &&\n            position > this.endPosition + 1 &&\n            this.endPosition + 1 < this.params.expression.length\n        );\n    }\n\n    private returnEndPosition(returnPosition: number, treatAsEnd?: boolean): number {\n        this.endPosition = treatAsEnd ? returnPosition : returnPosition - 1;\n        return returnPosition;\n    }\n\n    private getColumnAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getColumnAutocompleteEntries(),\n            'column',\n            this.getColumnSearchString(position)\n        );\n    }\n\n    private getColumnSearchString(position: number): string {\n        const columnName = this.columnParser?.getDisplayValue() ?? '';\n        const searchString = getSearchString(\n            columnName,\n            position,\n            this.columnParser?.endPosition == null ? this.params.expression.length : this.columnParser.endPosition + 1\n        );\n        const containsStartChar = this.columnParser?.hasStartChar && searchString.length > 0;\n        const containsEndChar = this.columnParser?.hasEndChar && searchString.length === columnName.length + 2;\n        if (containsStartChar) {\n            return searchString.slice(1, containsEndChar ? -1 : undefined);\n        }\n        return searchString;\n    }\n\n    private getOperatorAutocompleteListParams(position: number): AutocompleteListParams {\n        const column = this.columnParser?.column;\n        if (!column) {\n            return { enabled: false };\n        }\n\n        const baseCellDataType = this.columnParser!.baseCellDataType;\n        const searchString =\n            this.operatorParser?.startPosition != null && position < this.operatorParser.startPosition\n                ? ''\n                : getSearchString(\n                      this.operatorParser?.getDisplayValue() ?? '',\n                      position,\n                      this.operatorParser?.endPosition == null\n                          ? this.params.expression.length\n                          : this.operatorParser.endPosition + 1\n                  );\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getOperatorAutocompleteEntries(column, baseCellDataType),\n            `operator-${baseCellDataType}`,\n            searchString\n        );\n    }\n\n    private getBaseCellDataTypeFromOperatorAutocompleteType(type?: string): BaseCellDataType | undefined {\n        return type?.replace('operator-', '') as BaseCellDataType;\n    }\n\n    private hasOperand(baseCellDataType?: BaseCellDataType, operator?: string): boolean {\n        return (\n            !baseCellDataType ||\n            !operator ||\n            (this.params.advancedFilterExpressionService.getExpressionOperator(baseCellDataType, operator)\n                ?.numOperands ?? 0) > 0\n        );\n    }\n\n    private doesOperandNeedQuotes(baseCellDataType?: BaseCellDataType): boolean {\n        return baseCellDataType !== 'number';\n    }\n\n    private addToListAndGetIndex<T>(list: T[], value: T): number {\n        const index = list.length;\n        list.push(value);\n        return index;\n    }\n}\n", "import type { IRowNode } from '@ag-grid-community/core';\n\nimport type { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry } from './autocomplete/autocompleteParams';\n\nexport interface FilterExpressionEvaluatorParams<ConvertedTValue, TValue = ConvertedTValue> {\n    caseSensitive?: boolean;\n    includeBlanksInEquals?: boolean;\n    includeBlanksInLessThan?: boolean;\n    includeBlanksInGreaterThan?: boolean;\n    valueConverter: (value: TValue, node: IRowNode) => ConvertedTValue;\n}\n\nexport type FilterExpressionEvaluator<ConvertedTValue, TValue = ConvertedTValue> = (\n    value: TValue | null | undefined,\n    node: IRowNode,\n    params: FilterExpressionEvaluatorParams<ConvertedTValue, TValue>,\n    operand1?: ConvertedTValue,\n    operand2?: ConvertedTValue\n) => boolean;\n\nexport interface FilterExpressionOperator<ConvertedTValue, TValue = ConvertedTValue> {\n    displayValue: string;\n    evaluator: FilterExpressionEvaluator<ConvertedTValue, TValue>;\n    numOperands: number;\n}\n\nexport interface DataTypeFilterExpressionOperators<ConvertedTValue, TValue = ConvertedTValue> {\n    operators: {\n        [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue>;\n    };\n    getEntries(activeOperators?: string[]): AutocompleteEntry[];\n    findOperator(displayValue: string): string | null | undefined;\n}\n\nexport interface FilterExpressionOperators {\n    text: DataTypeFilterExpressionOperators<string>;\n    number: DataTypeFilterExpressionOperators<number>;\n    boolean: DataTypeFilterExpressionOperators<boolean>;\n    date: DataTypeFilterExpressionOperators<Date>;\n    dateString: DataTypeFilterExpressionOperators<Date, string>;\n    object: DataTypeFilterExpressionOperators<string, any>;\n}\n\n// null = partial match, undefined = no match\nexport function findMatch<T>(\n    searchValue: string,\n    values: { [key: string]: T },\n    getDisplayValue: (value: T) => string\n): string | null | undefined {\n    let partialMatch = false;\n    const searchValueLowerCase = searchValue.toLocaleLowerCase();\n    const partialSearchValue = searchValueLowerCase + ' ';\n    const parsedValue = Object.entries(values).find(([, value]) => {\n        const displayValueLowerCase = getDisplayValue(value).toLocaleLowerCase();\n        if (displayValueLowerCase.startsWith(partialSearchValue)) {\n            partialMatch = true;\n        }\n        return displayValueLowerCase === searchValueLowerCase;\n    });\n    if (parsedValue) {\n        return parsedValue[0];\n    } else if (partialMatch) {\n        return null;\n    } else {\n        return undefined;\n    }\n}\n\nfunction getEntries<ConvertedTValue, TValue = ConvertedTValue>(\n    operators: { [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue> },\n    activeOperatorKeys?: string[]\n): AutocompleteEntry[] {\n    const keys = activeOperatorKeys ?? Object.keys(operators);\n    return keys.map((key) => ({\n        key,\n        displayValue: operators[key].displayValue,\n    }));\n}\n\nexport interface FilterExpressionOperatorsParams {\n    translate: (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT, variableValues?: string[]) => string;\n}\n\nexport class TextFilterExpressionOperators<TValue = string>\n    implements DataTypeFilterExpressionOperators<string, TValue>\n{\n    public operators: { [operator: string]: FilterExpressionOperator<string, TValue> };\n\n    constructor(private params: FilterExpressionOperatorsParams) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({ displayValue }) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate } = this.params;\n        this.operators = {\n            contains: {\n                displayValue: translate('advancedFilterContains'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.includes(o)),\n                numOperands: 1,\n            },\n            notContains: {\n                displayValue: translate('advancedFilterNotContains'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, true, (v, o) => !v.includes(o)),\n                numOperands: 1,\n            },\n            equals: {\n                displayValue: translate('advancedFilterTextEquals'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v === o),\n                numOperands: 1,\n            },\n            notEqual: {\n                displayValue: translate('advancedFilterTextNotEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, true, (v, o) => v != o),\n                numOperands: 1,\n            },\n            startsWith: {\n                displayValue: translate('advancedFilterStartsWith'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.startsWith(o)),\n                numOperands: 1,\n            },\n            endsWith: {\n                displayValue: translate('advancedFilterEndsWith'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateExpression(value, node, params, operand1!, false, (v, o) => v.endsWith(o)),\n                numOperands: 1,\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null || (typeof value === 'string' && value.trim().length === 0),\n                numOperands: 0,\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null && (typeof value !== 'string' || value.trim().length > 0),\n                numOperands: 0,\n            },\n        };\n    }\n\n    private evaluateExpression(\n        value: TValue | null | undefined,\n        node: IRowNode,\n        params: FilterExpressionEvaluatorParams<string, TValue>,\n        operand: string,\n        nullsMatch: boolean,\n        expression: (value: string, operand: string) => boolean\n    ): boolean {\n        if (value == null) {\n            return nullsMatch;\n        }\n        return params.caseSensitive\n            ? expression(params.valueConverter(value, node), operand)\n            : expression(params.valueConverter(value, node).toLocaleLowerCase(), operand.toLocaleLowerCase());\n    }\n}\n\nexport interface ScalarFilterExpressionOperatorsParams<ConvertedTValue> extends FilterExpressionOperatorsParams {\n    equals: (value: ConvertedTValue, operand: ConvertedTValue) => boolean;\n}\n\nexport class ScalarFilterExpressionOperators<ConvertedTValue extends number | Date, TValue = ConvertedTValue>\n    implements DataTypeFilterExpressionOperators<ConvertedTValue, TValue>\n{\n    public operators: { [operator: string]: FilterExpressionOperator<ConvertedTValue, TValue> };\n\n    constructor(private params: ScalarFilterExpressionOperatorsParams<ConvertedTValue>) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({ displayValue }) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate, equals } = this.params;\n        this.operators = {\n            equals: {\n                displayValue: translate('advancedFilterEquals'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInEquals,\n                        equals!\n                    ),\n                numOperands: 1,\n            },\n            notEqual: {\n                displayValue: translate('advancedFilterNotEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInEquals,\n                        (v, o) => !equals!(v, o)\n                    ),\n                numOperands: 1,\n            },\n            greaterThan: {\n                displayValue: translate('advancedFilterGreaterThan'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInGreaterThan,\n                        (v, o) => v > o\n                    ),\n                numOperands: 1,\n            },\n            greaterThanOrEqual: {\n                displayValue: translate('advancedFilterGreaterThanOrEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInGreaterThan,\n                        (v, o) => v >= o\n                    ),\n                numOperands: 1,\n            },\n            lessThan: {\n                displayValue: translate('advancedFilterLessThan'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInLessThan,\n                        (v, o) => v < o\n                    ),\n                numOperands: 1,\n            },\n            lessThanOrEqual: {\n                displayValue: translate('advancedFilterLessThanOrEqual'),\n                evaluator: (value, node, params, operand1) =>\n                    this.evaluateSingleOperandExpression(\n                        value,\n                        node,\n                        params,\n                        operand1!,\n                        !!params.includeBlanksInLessThan,\n                        (v, o) => v <= o\n                    ),\n                numOperands: 1,\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null,\n                numOperands: 0,\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null,\n                numOperands: 0,\n            },\n        };\n    }\n\n    private evaluateSingleOperandExpression(\n        value: TValue | null | undefined,\n        node: IRowNode,\n        params: FilterExpressionEvaluatorParams<ConvertedTValue, TValue>,\n        operand: ConvertedTValue,\n        nullsMatch: boolean,\n        expression: (value: ConvertedTValue, operand: ConvertedTValue) => boolean\n    ): boolean {\n        if (value == null) {\n            return nullsMatch;\n        }\n        return expression(params.valueConverter(value, node), operand);\n    }\n}\n\nexport class BooleanFilterExpressionOperators implements DataTypeFilterExpressionOperators<boolean> {\n    public operators: { [operator: string]: FilterExpressionOperator<boolean> };\n\n    constructor(private params: FilterExpressionOperatorsParams) {\n        this.initOperators();\n    }\n\n    public getEntries(activeOperators?: string[]): AutocompleteEntry[] {\n        return getEntries(this.operators, activeOperators);\n    }\n\n    public findOperator(displayValue: string): string | null | undefined {\n        return findMatch(displayValue, this.operators, ({ displayValue }) => displayValue);\n    }\n\n    private initOperators(): void {\n        const { translate } = this.params;\n        this.operators = {\n            true: {\n                displayValue: translate('advancedFilterTrue'),\n                evaluator: (value) => !!value,\n                numOperands: 0,\n            },\n            false: {\n                displayValue: translate('advancedFilterFalse'),\n                evaluator: (value) => value === false,\n                numOperands: 0,\n            },\n            blank: {\n                displayValue: translate('advancedFilterBlank'),\n                evaluator: (value) => value == null,\n                numOperands: 0,\n            },\n            notBlank: {\n                displayValue: translate('advancedFilterNotBlank'),\n                evaluator: (value) => value != null,\n                numOperands: 0,\n            },\n        };\n    }\n}\n", "import type {\n    AdvancedFilterEnabledChangedEvent,\n    AdvancedFilterModel,\n    BeanCollection,\n    ColumnModel,\n    DataTypeService,\n    IAdvancedFilterService,\n    IRowModel,\n    IRowNode,\n    NamedBean,\n    NewColumnsLoadedEvent,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _exists, _warnOnce } from '@ag-grid-community/core';\n\nimport { AdvancedFilterCtrl } from './advancedFilterCtrl';\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport type { AutocompleteEntry } from './autocomplete/autocompleteParams';\nimport { FilterExpressionParser } from './filterExpressionParser';\nimport type {\n    ExpressionProxy,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n} from './filterExpressionUtils';\n\nexport class AdvancedFilterService extends BeanStub implements NamedBean, IAdvancedFilterService {\n    beanName = 'advancedFilterService' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private dataTypeService?: DataTypeService;\n    private rowModel: IRowModel;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.dataTypeService = beans.dataTypeService;\n        this.rowModel = beans.rowModel;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private enabled: boolean;\n    private ctrl: AdvancedFilterCtrl;\n\n    private expressionProxy: ExpressionProxy;\n    private appliedExpression: string | null = null;\n    /** The value displayed in the input, which may be invalid */\n    private expression: string | null = null;\n    private expressionFunction: FilterExpressionFunction | null;\n    private expressionParams: FilterExpressionFunctionParams | null;\n    private isValid: boolean = true;\n\n    public postConstruct(): void {\n        this.setEnabled(this.gos.get('enableAdvancedFilter'), true);\n\n        this.ctrl = this.createManagedBean(new AdvancedFilterCtrl(this.enabled));\n\n        this.expressionProxy = {\n            getValue: (colId, node) => {\n                const column = this.columnModel.getColDefCol(colId);\n                return column ? this.valueService.getValue(column, node, true) : undefined;\n            },\n        };\n\n        this.addManagedPropertyListener('enableAdvancedFilter', (event) => this.setEnabled(!!event.currentValue));\n        this.addManagedEventListeners({\n            newColumnsLoaded: (event) => this.onNewColumnsLoaded(event),\n        });\n        this.addManagedPropertyListener('includeHiddenColumnsInAdvancedFilter', () => this.updateValidity());\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    public isFilterPresent(): boolean {\n        return !!this.expressionFunction;\n    }\n\n    public doesFilterPass(node: IRowNode): boolean {\n        return this.expressionFunction!(this.expressionProxy, node, this.expressionParams!);\n    }\n\n    public getModel(): AdvancedFilterModel | null {\n        const expressionParser = this.createExpressionParser(this.appliedExpression);\n        expressionParser?.parseExpression();\n        return expressionParser?.getModel() ?? null;\n    }\n\n    public setModel(model: AdvancedFilterModel | null): void {\n        const parseModel = (model: AdvancedFilterModel, isFirstParent?: boolean): string | null => {\n            if (model.filterType === 'join') {\n                const operator = this.advancedFilterExpressionService.parseJoinOperator(model);\n                const expression = model.conditions\n                    .map((condition) => parseModel(condition))\n                    .filter((condition) => _exists(condition))\n                    .join(` ${operator} `);\n                return isFirstParent || model.conditions.length <= 1 ? expression : `(${expression})`;\n            } else {\n                return this.advancedFilterExpressionService.parseColumnFilterModel(model);\n            }\n        };\n\n        const expression = model ? parseModel(model, true) : null;\n\n        this.setExpressionDisplayValue(expression);\n        this.applyExpression();\n        this.ctrl.refreshComp();\n        this.ctrl.refreshBuilderComp();\n    }\n\n    public getExpressionDisplayValue(): string | null {\n        return this.expression;\n    }\n\n    public setExpressionDisplayValue(expression: string | null): void {\n        this.expression = expression;\n    }\n\n    public isCurrentExpressionApplied(): boolean {\n        return this.appliedExpression === this.expression;\n    }\n\n    public createExpressionParser(expression: string | null): FilterExpressionParser | null {\n        if (!expression) {\n            return null;\n        }\n\n        return new FilterExpressionParser({\n            expression,\n            columnModel: this.columnModel,\n            dataTypeService: this.dataTypeService,\n            valueService: this.valueService,\n            advancedFilterExpressionService: this.advancedFilterExpressionService,\n        });\n    }\n\n    public getDefaultExpression(updateEntry: AutocompleteEntry): {\n        updatedValue: string;\n        updatedPosition: number;\n    } {\n        const updatedValue = this.advancedFilterExpressionService.getColumnValue(updateEntry) + ' ';\n        return {\n            updatedValue,\n            updatedPosition: updatedValue.length,\n        };\n    }\n\n    public isHeaderActive(): boolean {\n        return !this.gos.get('advancedFilterParent');\n    }\n\n    public getCtrl(): AdvancedFilterCtrl {\n        return this.ctrl;\n    }\n\n    private setEnabled(enabled: boolean, silent?: boolean): void {\n        const previousValue = this.enabled;\n        const rowModelType = this.rowModel.getType();\n        const isValidRowModel = rowModelType === 'clientSide' || rowModelType === 'serverSide';\n        if (enabled && !rowModelType) {\n            _warnOnce('Advanced Filter is only supported with the Client-Side Row Model or Server-Side Row Model.');\n        }\n        this.enabled = enabled && isValidRowModel;\n        if (!silent && this.enabled !== previousValue) {\n            const event: WithoutGridCommon<AdvancedFilterEnabledChangedEvent> = {\n                type: 'advancedFilterEnabledChanged',\n                enabled: this.enabled,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public applyExpression(): void {\n        const expressionParser = this.createExpressionParser(this.expression);\n        expressionParser?.parseExpression();\n        this.applyExpressionFromParser(expressionParser);\n    }\n\n    private applyExpressionFromParser(expressionParser: FilterExpressionParser | null): void {\n        this.isValid = !expressionParser || expressionParser.isValid();\n        if (!expressionParser || !this.isValid) {\n            this.expressionFunction = null;\n            this.expressionParams = null;\n            this.appliedExpression = null;\n            return;\n        }\n\n        const { expressionFunction, params } = this.getFunction(expressionParser);\n\n        this.expressionFunction = expressionFunction;\n        this.expressionParams = params;\n        this.appliedExpression = this.expression;\n    }\n\n    private getFunction(expressionParser: FilterExpressionParser): {\n        expressionFunction: FilterExpressionFunction;\n        params: FilterExpressionFunctionParams;\n    } {\n        if (this.gos.get('suppressAdvancedFilterEval')) {\n            return expressionParser.getFunctionParsed();\n        } else {\n            const { functionString, params } = expressionParser.getFunctionString();\n            return {\n                expressionFunction: new Function(\n                    'expressionProxy',\n                    'node',\n                    'params',\n                    functionString\n                ) as FilterExpressionFunction,\n                params,\n            };\n        }\n    }\n\n    public updateValidity(): boolean {\n        this.advancedFilterExpressionService.resetColumnCaches();\n        const expressionParser = this.createExpressionParser(this.expression);\n        expressionParser?.parseExpression();\n        const isValid = !expressionParser || expressionParser.isValid();\n\n        const updatedValidity = isValid !== this.isValid;\n\n        this.applyExpressionFromParser(expressionParser);\n        this.ctrl.refreshComp();\n        this.ctrl.refreshBuilderComp();\n        return updatedValidity;\n    }\n\n    private onNewColumnsLoaded(event: NewColumnsLoadedEvent): void {\n        if (event.source !== 'gridInitializing' || !this.dataTypeService?.isPendingInference()) {\n            return;\n        }\n\n        this.ctrl.setInputDisabled(true);\n        const [destroyFunc] = this.addManagedEventListeners({\n            dataTypesInferred: () => {\n                destroyFunc?.();\n                this.ctrl.setInputDisabled(false);\n            },\n        });\n    }\n}\n", "import type {\n    AdvancedFilterBuilderVisibleChangedEvent,\n    BeanCollection,\n    CtrlsService,\n    Environment,\n    IAdvancedFilterCtrl,\n    PopupService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _getAbsoluteHeight, _getAbsoluteWidth, _removeFromParent } from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\n\nimport { AdvancedFilterComp } from './advancedFilterComp';\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport { AdvancedFilterHeaderComp } from './advancedFilterHeaderComp';\nimport { AdvancedFilterBuilderComp } from './builder/advancedFilterBuilderComp';\n\nexport type AdvancedFilterCtrlEvent = 'advancedFilterBuilderClosed';\nexport class AdvancedFilterCtrl extends BeanStub<AdvancedFilterCtrlEvent> implements IAdvancedFilterCtrl {\n    private ctrlsService: CtrlsService;\n    private popupService: PopupService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.ctrlsService = beans.ctrlsService;\n        this.popupService = beans.popupService;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n        this.environment = beans.environment;\n    }\n\n    private eHeaderComp: AdvancedFilterHeaderComp | undefined;\n    private eFilterComp: AdvancedFilterComp | undefined;\n    private hasAdvancedFilterParent: boolean;\n    private eBuilderComp: AdvancedFilterBuilderComp | undefined;\n    private eBuilderDialog: AgDialog | undefined;\n    private builderDestroySource?: 'api' | 'ui';\n\n    constructor(private enabled: boolean) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.hasAdvancedFilterParent = !!this.gos.get('advancedFilterParent');\n\n        this.ctrlsService.whenReady(() => this.setAdvancedFilterComp());\n\n        this.addManagedEventListeners({\n            advancedFilterEnabledChanged: ({ enabled }) => this.onEnabledChanged(enabled),\n        });\n\n        this.addManagedPropertyListener('advancedFilterParent', () => this.updateComps());\n\n        this.addDestroyFunc(() => {\n            this.destroyAdvancedFilterComp();\n            this.destroyBean(this.eBuilderComp);\n            if (this.eBuilderDialog && this.eBuilderDialog.isAlive()) {\n                this.destroyBean(this.eBuilderDialog);\n            }\n        });\n    }\n\n    public setupHeaderComp(eCompToInsertBefore: HTMLElement): void {\n        this.eHeaderComp = this.createManagedBean(\n            new AdvancedFilterHeaderComp(this.enabled && !this.hasAdvancedFilterParent)\n        );\n        eCompToInsertBefore.insertAdjacentElement('beforebegin', this.eHeaderComp.getGui());\n    }\n\n    public focusHeaderComp(): boolean {\n        if (this.eHeaderComp) {\n            this.eHeaderComp.getFocusableElement().focus();\n            return true;\n        }\n        return false;\n    }\n\n    public refreshComp(): void {\n        this.eFilterComp?.refresh();\n        this.eHeaderComp?.refresh();\n    }\n\n    public refreshBuilderComp(): void {\n        this.eBuilderComp?.refresh();\n    }\n\n    public getHeaderHeight(): number {\n        return this.eHeaderComp?.getHeight() ?? 0;\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eFilterComp?.setInputDisabled(disabled);\n        this.eHeaderComp?.setInputDisabled(disabled);\n    }\n\n    public toggleFilterBuilder(source: 'api' | 'ui', force?: boolean): void {\n        if ((force && this.eBuilderDialog) || (force === false && !this.eBuilderDialog)) {\n            // state requested is already active\n            return;\n        }\n        if (this.eBuilderDialog) {\n            this.builderDestroySource = source;\n            this.destroyBean(this.eBuilderDialog);\n            return;\n        }\n\n        this.setInputDisabled(true);\n\n        const { width, height, minWidth } = this.getBuilderDialogSize();\n\n        this.eBuilderComp = this.createBean(new AdvancedFilterBuilderComp());\n        this.eBuilderDialog = this.createBean(\n            new AgDialog({\n                title: this.advancedFilterExpressionService.translate('advancedFilterBuilderTitle'),\n                component: this.eBuilderComp,\n                width,\n                height,\n                resizable: true,\n                movable: true,\n                maximizable: true,\n                centered: true,\n                closable: true,\n                minWidth,\n                afterGuiAttached: () => this.eBuilderComp?.afterGuiAttached(),\n            })\n        );\n\n        this.dispatchFilterBuilderVisibleChangedEvent(source, true);\n\n        this.eBuilderDialog.addEventListener('destroyed', () => {\n            this.destroyBean(this.eBuilderComp);\n            this.eBuilderComp = undefined;\n            this.eBuilderDialog = undefined;\n            this.setInputDisabled(false);\n            this.dispatchLocalEvent({\n                type: 'advancedFilterBuilderClosed',\n            });\n            this.dispatchFilterBuilderVisibleChangedEvent(this.builderDestroySource ?? 'ui', false);\n            this.builderDestroySource = undefined;\n        });\n    }\n\n    private dispatchFilterBuilderVisibleChangedEvent(source: 'api' | 'ui', visible: boolean): void {\n        const event: WithoutGridCommon<AdvancedFilterBuilderVisibleChangedEvent> = {\n            type: 'advancedFilterBuilderVisibleChanged',\n            source,\n            visible,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getBuilderDialogSize(): { width: number; height: number; minWidth: number } {\n        const minWidth = this.gos.get('advancedFilterBuilderParams')?.minWidth ?? 500;\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = Math.round(_getAbsoluteWidth(popupParent)) - 2; // assume 1 pixel border\n        const maxHeight = Math.round(_getAbsoluteHeight(popupParent) * 0.75) - 2;\n\n        const width = Math.min(Math.max(600, minWidth), maxWidth);\n        const height = Math.min(600, maxHeight);\n\n        return { width, height, minWidth };\n    }\n\n    private onEnabledChanged(enabled: boolean): void {\n        this.enabled = enabled;\n        this.updateComps();\n    }\n\n    private updateComps(): void {\n        this.setAdvancedFilterComp();\n        this.setHeaderCompEnabled();\n        this.eventService.dispatchEvent({\n            type: 'headerHeightChanged',\n        });\n    }\n\n    private setAdvancedFilterComp(): void {\n        this.destroyAdvancedFilterComp();\n        if (!this.enabled) {\n            return;\n        }\n\n        const advancedFilterParent = this.gos.get('advancedFilterParent');\n        this.hasAdvancedFilterParent = !!advancedFilterParent;\n        if (advancedFilterParent) {\n            // unmanaged as can be recreated\n            const eAdvancedFilterComp = this.createBean(new AdvancedFilterComp());\n            const eAdvancedFilterCompGui = eAdvancedFilterComp.getGui();\n\n            this.environment.applyThemeClasses(eAdvancedFilterCompGui);\n\n            eAdvancedFilterCompGui.classList.add(this.gos.get('enableRtl') ? 'ag-rtl' : 'ag-ltr');\n\n            advancedFilterParent.appendChild(eAdvancedFilterCompGui);\n\n            this.eFilterComp = eAdvancedFilterComp;\n        }\n    }\n\n    private setHeaderCompEnabled(): void {\n        this.eHeaderComp?.setEnabled(this.enabled && !this.hasAdvancedFilterParent);\n    }\n\n    private destroyAdvancedFilterComp(): void {\n        if (this.eFilterComp) {\n            _removeFromParent(this.eFilterComp.getGui());\n            this.destroyBean(this.eFilterComp);\n        }\n    }\n}\n", "import type { BeanCollection, FilterManager, ITooltipParams, WithoutGridCommon } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _createIconNoSpan, _makeNull, _setDisabled } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from './advancedFilterExpressionService';\nimport type { AdvancedFilterService } from './advancedFilterService';\nimport type {\n    AgAutocomplete,\n    AutocompleteOptionSelectedEvent,\n    AutocompleteValidChangedEvent,\n    AutocompleteValueChangedEvent,\n    AutocompleteValueConfirmedEvent,\n} from './autocomplete/agAutocomplete';\nimport { AgAutocompleteSelector } from './autocomplete/agAutocomplete';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport type { FilterExpressionParser } from './filterExpressionParser';\nimport type { AutocompleteUpdate } from './filterExpressionUtils';\n\nexport class AdvancedFilterComp extends Component {\n    private advancedFilterService: AdvancedFilterService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n        this.advancedFilterService = beans.advancedFilterService as AdvancedFilterService;\n        this.filterManager = beans.filterManager;\n    }\n\n    private readonly eAutocomplete: AgAutocomplete = RefPlaceholder;\n    private readonly eApplyFilterButton: HTMLElement = RefPlaceholder;\n    private readonly eBuilderFilterButton: HTMLElement = RefPlaceholder;\n    private readonly eBuilderFilterButtonIcon: HTMLElement = RefPlaceholder;\n    private readonly eBuilderFilterButtonLabel: HTMLElement = RefPlaceholder;\n\n    private expressionParser: FilterExpressionParser | null = null;\n    private isApplyDisabled = true;\n    private builderOpen = false;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-advanced-filter\" role=\"presentation\" tabindex=\"-1\">\n                <ag-autocomplete data-ref=\"eAutocomplete\"></ag-autocomplete>\n                <button class=\"ag-button ag-standard-button ag-advanced-filter-apply-button\" data-ref=\"eApplyFilterButton\"></button>\n                <button class=\"ag-advanced-filter-builder-button\" data-ref=\"eBuilderFilterButton\">\n                    <span data-ref=\"eBuilderFilterButtonIcon\" aria-hidden=\"true\"></span>\n                    <span class=\"ag-advanced-filter-builder-button-label\" data-ref=\"eBuilderFilterButtonLabel\"></span>\n                </button>\n            </div>`,\n            [AgAutocompleteSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.eAutocomplete\n            .setListGenerator((_value, position) => this.generateAutocompleteListParams(position))\n            .setValidator(() => this.validateValue())\n            .setForceLastSelection((lastSelection, searchString) =>\n                this.forceLastSelection(lastSelection, searchString)\n            )\n            .setInputAriaLabel(this.advancedFilterExpressionService.translate('ariaAdvancedFilterInput'))\n            .setListAriaLabel(this.advancedFilterExpressionService.translate('ariaLabelAdvancedFilterAutocomplete'));\n\n        this.refresh();\n\n        this.addManagedListeners(this.eAutocomplete, {\n            eventValueChanged: ({ value }: AutocompleteValueChangedEvent) => this.onValueChanged(value),\n            eventValueConfirmed: ({ isValid }: AutocompleteValueConfirmedEvent) => this.onValueConfirmed(isValid),\n            eventOptionSelected: ({ position, updateEntry, autocompleteType }: AutocompleteOptionSelectedEvent) =>\n                this.onOptionSelected(position, updateEntry, autocompleteType),\n            eventValidChanged: ({ isValid, validationMessage }: AutocompleteValidChangedEvent) =>\n                this.onValidChanged(isValid, validationMessage),\n        });\n\n        this.setupApplyButton();\n        this.setupBuilderButton();\n    }\n\n    public refresh(): void {\n        const expression = this.advancedFilterService.getExpressionDisplayValue();\n        this.eAutocomplete.setValue({\n            value: expression ?? '',\n            position: expression?.length,\n            updateListOnlyIfOpen: true,\n        });\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eAutocomplete.setInputDisabled(disabled);\n        _setDisabled(this.eApplyFilterButton, disabled || this.isApplyDisabled);\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'advancedFilter';\n        return res;\n    }\n\n    private setupApplyButton(): void {\n        this.eApplyFilterButton.innerText = this.advancedFilterExpressionService.translate('advancedFilterApply');\n        this.activateTabIndex([this.eApplyFilterButton]);\n        this.addManagedElementListeners(this.eApplyFilterButton, {\n            click: () => this.onValueConfirmed(this.eAutocomplete.isValid()),\n        });\n        _setDisabled(this.eApplyFilterButton, this.isApplyDisabled);\n    }\n\n    private setupBuilderButton(): void {\n        this.eBuilderFilterButtonIcon.appendChild(_createIconNoSpan('advancedFilterBuilder', this.gos)!);\n        this.eBuilderFilterButtonLabel.innerText =\n            this.advancedFilterExpressionService.translate('advancedFilterBuilder');\n        this.activateTabIndex([this.eBuilderFilterButton]);\n        this.addManagedElementListeners(this.eBuilderFilterButton, { click: () => this.openBuilder() });\n        this.addManagedListeners(this.advancedFilterService.getCtrl(), {\n            advancedFilterBuilderClosed: () => this.closeBuilder(),\n        });\n    }\n\n    private onValueChanged(value: string | null): void {\n        value = _makeNull(value);\n        this.advancedFilterService.setExpressionDisplayValue(value);\n        this.expressionParser = this.advancedFilterService.createExpressionParser(value);\n        const updatedExpression = this.expressionParser?.parseExpression();\n        if (updatedExpression && updatedExpression !== value) {\n            this.eAutocomplete.setValue({ value: updatedExpression, silent: true, restoreFocus: true });\n        }\n    }\n\n    private onValueConfirmed(isValid: boolean): void {\n        if (!isValid || this.isApplyDisabled) {\n            return;\n        }\n        _setDisabled(this.eApplyFilterButton, true);\n        this.advancedFilterService.applyExpression();\n        this.filterManager?.onFilterChanged({ source: 'advancedFilter' });\n    }\n\n    private onOptionSelected(position: number, updateEntry: AutocompleteEntry, type?: string): void {\n        const { updatedValue, updatedPosition, hideAutocomplete } = this.updateExpression(position, updateEntry, type);\n        this.eAutocomplete.setValue({\n            value: updatedValue,\n            position: updatedPosition,\n            updateListOnlyIfOpen: hideAutocomplete,\n            restoreFocus: true,\n        });\n    }\n\n    private validateValue(): string | null {\n        return this.expressionParser?.isValid() ? null : this.expressionParser?.getValidationMessage() ?? null;\n    }\n\n    private onValidChanged(isValid: boolean, validationMessage: string | null): void {\n        this.isApplyDisabled = !isValid || this.advancedFilterService.isCurrentExpressionApplied();\n        _setDisabled(this.eApplyFilterButton, this.isApplyDisabled);\n        this.setTooltip({\n            newTooltipText: validationMessage,\n            showDelayOverride: 1000,\n        });\n    }\n\n    private generateAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.expressionParser\n            ? this.expressionParser.getAutocompleteListParams(position)\n            : this.advancedFilterExpressionService.getDefaultAutocompleteListParams('');\n    }\n\n    private updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate {\n        this.advancedFilterExpressionService.updateAutocompleteCache(updateEntry, type);\n        return (\n            this.expressionParser?.updateExpression(position, updateEntry, type) ??\n            this.advancedFilterService.getDefaultExpression(updateEntry)\n        );\n    }\n\n    private forceLastSelection({ key, displayValue }: AutocompleteEntry, searchString: string): boolean {\n        return !!searchString.toLocaleLowerCase().match(`^${(displayValue ?? key).toLocaleLowerCase()}\\\\s*$`);\n    }\n\n    private openBuilder(): void {\n        if (this.builderOpen) {\n            return;\n        }\n        this.builderOpen = true;\n        _setDisabled(this.eBuilderFilterButton, true);\n        this.advancedFilterService.getCtrl().toggleFilterBuilder('ui');\n    }\n\n    private closeBuilder(): void {\n        if (!this.builderOpen) {\n            return;\n        }\n        this.builderOpen = false;\n        _setDisabled(this.eBuilderFilterButton, false);\n        this.eBuilderFilterButton.focus();\n    }\n}\n", "import type {\n    AgEvent,\n    AgInputTextField,\n    BeanCollection,\n    ComponentSelector,\n    PopupPositionParams,\n    PopupService,\n} from '@ag-grid-community/core';\nimport { AgInputTextFieldSelector, Component, KeyCode, RefPlaceholder, _makeNull } from '@ag-grid-community/core';\n\nimport { AgAutocompleteList } from './agAutocompleteList';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocompleteParams';\n\ninterface AutoCompleteEvent<T extends AgAutocompleteEvent> extends AgEvent<T> {\n    value: string | null;\n}\n\nexport interface AutocompleteValueChangedEvent extends AutoCompleteEvent<'eventValueChanged'> {}\n\nexport interface AutocompleteValueConfirmedEvent extends AutoCompleteEvent<'eventValueConfirmed'> {\n    isValid: boolean;\n}\n\nexport interface AutocompleteOptionSelectedEvent extends AutoCompleteEvent<'eventOptionSelected'> {\n    position: number;\n    updateEntry: AutocompleteEntry;\n    autocompleteType?: string;\n}\n\nexport interface AutocompleteValidChangedEvent extends AgEvent<'eventValidChanged'> {\n    isValid: boolean;\n    validationMessage: string | null;\n}\n\nexport type AgAutocompleteEvent =\n    | 'eventValueChanged'\n    | 'eventValueConfirmed'\n    | 'eventOptionSelected'\n    | 'eventValidChanged';\nexport class AgAutocomplete extends Component<AgAutocompleteEvent> {\n    private popupService: PopupService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n    }\n\n    private eAutocompleteInput: AgInputTextField = RefPlaceholder;\n\n    private isListOpen = false;\n    private autocompleteList: AgAutocompleteList | null;\n    private hidePopup: () => void;\n    private autocompleteListParams: AutocompleteListParams;\n    private lastPosition: number = 0;\n    private valid: boolean = true;\n    private validationMessage: string | null;\n    private listAriaLabel: string;\n    private listGenerator?: (value: string | null, position: number) => AutocompleteListParams;\n    private validator?: (value: string | null) => string | null;\n    private forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean;\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-autocomplete\" role=\"presentation\">\n                <ag-input-text-field data-ref=\"eAutocompleteInput\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.eAutocompleteInput.onValueChange((value) => this.onValueChanged(value));\n        this.eAutocompleteInput.getInputElement().setAttribute('autocomplete', 'off');\n\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n\n        this.addGuiEventListener('click', this.updatePositionAndList.bind(this));\n\n        this.addDestroyFunc(() => {\n            this.destroyBean(this.autocompleteList);\n        });\n\n        this.addGuiEventListener('focusout', () => this.onFocusOut());\n    }\n\n    private onValueChanged(value?: string | null): void {\n        const parsedValue = _makeNull(value);\n        this.updateValue(parsedValue);\n        this.updateAutocompleteList(parsedValue);\n    }\n\n    private updateValue(value: string | null): void {\n        this.updateLastPosition();\n        this.dispatchLocalEvent<AutocompleteValueChangedEvent>({\n            type: 'eventValueChanged',\n            value,\n        });\n        this.validate(value);\n    }\n\n    private updateAutocompleteList(value: string | null): void {\n        const autocompleteListParams = this.listGenerator?.(value, this.lastPosition) ?? { enabled: false };\n        if (!autocompleteListParams.type || autocompleteListParams.type !== this.autocompleteListParams?.type) {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n        this.autocompleteListParams = autocompleteListParams;\n        if (this.autocompleteListParams?.enabled) {\n            if (!this.isListOpen) {\n                this.openList();\n            }\n            const { searchString } = this.autocompleteListParams;\n            this.autocompleteList!.setSearch(searchString ?? '');\n        } else {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        this.updateLastPosition();\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onUpDownKeyDown(event, key);\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // input position is updated after this is called, so do async\n                setTimeout(() => {\n                    this.updatePositionAndList();\n                });\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.SPACE:\n                if (event.ctrlKey && !this.isListOpen) {\n                    event.preventDefault();\n                    this.forceOpenList();\n                }\n                break;\n        }\n    }\n\n    private confirmSelection(): void {\n        const selectedValue = this.autocompleteList?.getSelectedValue();\n        if (selectedValue) {\n            this.closeList();\n            this.dispatchLocalEvent<AutocompleteOptionSelectedEvent>({\n                type: 'eventOptionSelected',\n                value: this.getValue()!,\n                position: this.lastPosition,\n                updateEntry: selectedValue,\n                autocompleteType: this.autocompleteListParams.type,\n            });\n        }\n    }\n\n    private onTabKeyDown(event: KeyboardEvent): void {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.confirmSelection();\n        }\n    }\n\n    private onEnterKeyDown(event: KeyboardEvent): void {\n        event.preventDefault();\n        if (this.isListOpen) {\n            this.confirmSelection();\n        } else {\n            this.onCompleted();\n        }\n    }\n\n    private onUpDownKeyDown(event: KeyboardEvent, key: string): void {\n        event.preventDefault();\n        if (!this.isListOpen) {\n            this.forceOpenList();\n        } else {\n            this.autocompleteList?.onNavigationKeyDown(event, key);\n        }\n    }\n\n    private onEscapeKeyDown(event: KeyboardEvent): void {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.closeList();\n            this.setCaret(this.lastPosition, true);\n        }\n    }\n\n    private onFocusOut(): void {\n        if (this.isListOpen) {\n            this.closeList();\n        }\n    }\n\n    private updatePositionAndList(): void {\n        this.updateLastPosition();\n        this.updateAutocompleteList(this.eAutocompleteInput.getValue() ?? null);\n    }\n\n    private setCaret(position: number, setFocus?: boolean): void {\n        const eDocument = this.gos.getDocument();\n        const activeEl = this.gos.getActiveDomElement();\n        if (setFocus && (!activeEl || activeEl === eDocument.body)) {\n            // clicking on the list loses focus, so restore\n            this.eAutocompleteInput.getFocusableElement().focus();\n        }\n        const eInput = this.eAutocompleteInput.getInputElement();\n        eInput.setSelectionRange(position, position);\n        if (position === eInput.value.length) {\n            // ensure the caret is visible\n            eInput.scrollLeft = eInput.scrollWidth;\n        }\n    }\n\n    private forceOpenList(): void {\n        this.onValueChanged(this.eAutocompleteInput.getValue());\n    }\n\n    private updateLastPosition(): void {\n        this.lastPosition = this.eAutocompleteInput.getInputElement().selectionStart ?? 0;\n    }\n\n    private validate(value: string | null): void {\n        if (!this.validator) {\n            return;\n        }\n        this.validationMessage = this.validator(value);\n        this.eAutocompleteInput.getInputElement().setCustomValidity(this.validationMessage ?? '');\n        this.valid = !this.validationMessage;\n        this.dispatchLocalEvent<AutocompleteValidChangedEvent>({\n            type: 'eventValidChanged',\n            isValid: this.valid,\n            validationMessage: this.validationMessage,\n        });\n    }\n\n    private openList(): void {\n        this.isListOpen = true;\n        // this is unmanaged as it gets destroyed/created each time it is opened\n        this.autocompleteList = this.createBean(\n            new AgAutocompleteList({\n                autocompleteEntries: this.autocompleteListParams.entries!,\n                onConfirmed: () => this.confirmSelection(),\n                forceLastSelection: this.forceLastSelection,\n            })\n        );\n        const ePopupGui = this.autocompleteList.getGui();\n\n        const positionParams: PopupPositionParams & { type: string; eventSource: HTMLElement } = {\n            ePopup: ePopupGui,\n            type: 'autocomplete',\n            eventSource: this.getGui(),\n            position: 'under',\n            alignSide: this.gos.get('enableRtl') ? 'right' : 'left',\n            keepWithinBounds: true,\n        };\n\n        const addPopupRes = this.popupService.addPopup({\n            eChild: ePopupGui,\n            anchorToElement: this.getGui(),\n            positionCallback: () => this.popupService.positionPopupByComponent(positionParams),\n            ariaLabel: this.listAriaLabel,\n        });\n        this.hidePopup = addPopupRes.hideFunc;\n\n        this.autocompleteList.afterGuiAttached();\n    }\n\n    private closeList(): void {\n        this.isListOpen = false;\n        this.hidePopup();\n        this.destroyBean(this.autocompleteList);\n        this.autocompleteList = null;\n    }\n\n    private onCompleted(): void {\n        if (this.isListOpen) {\n            this.closeList();\n        }\n        this.dispatchLocalEvent<AutocompleteValueConfirmedEvent>({\n            type: 'eventValueConfirmed',\n            value: this.getValue(),\n            isValid: this.isValid(),\n        });\n    }\n\n    public getValue(): string | null {\n        return _makeNull(this.eAutocompleteInput.getValue());\n    }\n\n    public setInputPlaceholder(placeholder: string): this {\n        this.eAutocompleteInput.setInputPlaceholder(placeholder);\n        return this;\n    }\n\n    public setInputAriaLabel(label?: string | null): this {\n        this.eAutocompleteInput.setInputAriaLabel(label);\n        return this;\n    }\n\n    public setListAriaLabel(label: string): this {\n        this.listAriaLabel = label;\n        return this;\n    }\n\n    public setListGenerator(listGenerator?: (value: string | null, position: number) => AutocompleteListParams): this {\n        this.listGenerator = listGenerator;\n        return this;\n    }\n\n    public setValidator(validator?: (value: string | null) => string | null): this {\n        this.validator = validator;\n        return this;\n    }\n\n    public isValid(): boolean {\n        return this.valid;\n    }\n\n    public setValue(params: {\n        value: string;\n        position?: number;\n        silent?: boolean;\n        updateListOnlyIfOpen?: boolean;\n        restoreFocus?: boolean;\n    }): void {\n        const { value, position, silent, updateListOnlyIfOpen, restoreFocus } = params;\n        this.eAutocompleteInput.setValue(value, true);\n        this.setCaret(position ?? this.lastPosition, restoreFocus);\n        if (!silent) {\n            this.updateValue(value);\n        }\n        if (!updateListOnlyIfOpen || this.isListOpen) {\n            this.updateAutocompleteList(value);\n        }\n    }\n\n    public setForceLastSelection(\n        forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean\n    ): this {\n        this.forceLastSelection = forceLastSelection;\n        return this;\n    }\n\n    public setInputDisabled(disabled: boolean): this {\n        this.eAutocompleteInput.setDisabled(disabled);\n        return this;\n    }\n}\n\nexport const AgAutocompleteSelector: ComponentSelector = {\n    selector: 'AG-AUTOCOMPLETE',\n    component: AgAutocomplete,\n};\n", "import type { Component } from '@ag-grid-community/core';\nimport { KeyCode, PopupComponent, RefPlaceholder, _exists, _fuzzySuggestions } from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\n\nimport { AgAutocompleteRow } from './agAutocompleteRow';\nimport type { AutocompleteEntry } from './autocompleteParams';\n\nexport class AgAutocompleteList extends PopupComponent {\n    private readonly eList: HTMLElement = RefPlaceholder;\n\n    private virtualList: VirtualList<any>;\n\n    private autocompleteEntries: AutocompleteEntry[];\n\n    // as the user moves the mouse, the selectedValue changes\n    private selectedValue: AutocompleteEntry;\n\n    private searchString = '';\n\n    constructor(\n        private params: {\n            autocompleteEntries: AutocompleteEntry[];\n            onConfirmed: () => void;\n            useFuzzySearch?: boolean;\n            forceLastSelection?: (lastSelection: AutocompleteEntry, searchString: string) => boolean;\n        }\n    ) {\n        super(/* html */ `<div class=\"ag-autocomplete-list-popup\">\n            <div data-ref=\"eList\" class=\"ag-autocomplete-list\"></div>\n        <div>`);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public postConstruct(): void {\n        this.autocompleteEntries = this.params.autocompleteEntries;\n        this.virtualList = this.createManagedBean(new VirtualList({ cssIdentifier: 'autocomplete' }));\n        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n        this.eList.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setModel({\n            getRowCount: () => this.autocompleteEntries.length,\n            getRow: (index: number) => this.autocompleteEntries[index],\n        });\n\n        const virtualListGui = this.virtualList.getGui();\n\n        this.addManagedListeners(virtualListGui, {\n            click: () => this.params.onConfirmed(),\n            mousemove: this.onMouseMove.bind(this),\n            mousedown: (e) => e.preventDefault(),\n        });\n\n        this.setSelectedValue(0);\n    }\n\n    public onNavigationKeyDown(event: any, key: string): void {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n        const oldIndex = this.autocompleteEntries.indexOf(this.selectedValue);\n        const newIndex = key === KeyCode.UP ? oldIndex - 1 : oldIndex + 1;\n\n        this.checkSetSelectedValue(newIndex);\n    }\n\n    public setSearch(searchString: string): void {\n        this.searchString = searchString;\n        if (_exists(searchString)) {\n            this.runSearch();\n        } else {\n            // reset\n            this.autocompleteEntries = this.params.autocompleteEntries;\n            this.virtualList.refresh();\n            this.checkSetSelectedValue(0);\n        }\n        this.updateSearchInList();\n    }\n\n    private runContainsSearch(\n        searchString: string,\n        searchStrings: string[]\n    ): { topMatch: string | undefined; allMatches: string[] } {\n        let topMatch: string | undefined;\n        let topMatchStartsWithSearchString = false;\n        const lowerCaseSearchString = searchString.toLocaleLowerCase();\n        const allMatches = searchStrings.filter((string) => {\n            const lowerCaseString = string.toLocaleLowerCase();\n            const index = lowerCaseString.indexOf(lowerCaseSearchString);\n            const startsWithSearchString = index === 0;\n            const isMatch = index >= 0;\n            // top match is shortest value that starts with the search string, otherwise shortest value that includes the search string\n            if (\n                isMatch &&\n                (!topMatch ||\n                    (!topMatchStartsWithSearchString && startsWithSearchString) ||\n                    (topMatchStartsWithSearchString === startsWithSearchString && string.length < topMatch.length))\n            ) {\n                topMatch = string;\n                topMatchStartsWithSearchString = startsWithSearchString;\n            }\n            return isMatch;\n        });\n        if (!topMatch && allMatches.length) {\n            topMatch = allMatches[0];\n        }\n        return { topMatch, allMatches };\n    }\n\n    private runSearch() {\n        const { autocompleteEntries } = this.params;\n        const searchStrings = autocompleteEntries.map((v) => v.displayValue ?? v.key);\n\n        let matchingStrings: string[];\n        let topSuggestion: string | undefined;\n        if (this.params.useFuzzySearch) {\n            matchingStrings = _fuzzySuggestions(this.searchString, searchStrings, true).values;\n            topSuggestion = matchingStrings.length ? matchingStrings[0] : undefined;\n        } else {\n            const containsMatches = this.runContainsSearch(this.searchString, searchStrings);\n            matchingStrings = containsMatches.allMatches;\n            topSuggestion = containsMatches.topMatch;\n        }\n\n        let filteredEntries = autocompleteEntries.filter(({ key, displayValue }) =>\n            matchingStrings.includes(displayValue ?? key)\n        );\n        if (\n            !filteredEntries.length &&\n            this.selectedValue &&\n            this.params?.forceLastSelection?.(this.selectedValue, this.searchString)\n        ) {\n            filteredEntries = [this.selectedValue];\n        }\n        this.autocompleteEntries = filteredEntries;\n        this.virtualList.refresh();\n\n        if (!topSuggestion) {\n            return;\n        }\n\n        const topSuggestionIndex = matchingStrings.indexOf(topSuggestion);\n\n        this.checkSetSelectedValue(topSuggestionIndex);\n    }\n\n    private updateSearchInList(): void {\n        this.virtualList.forEachRenderedRow((row: AgAutocompleteRow) => row.setSearchString(this.searchString));\n    }\n\n    private checkSetSelectedValue(index: number): void {\n        if (index >= 0 && index < this.autocompleteEntries.length) {\n            this.setSelectedValue(index);\n        }\n    }\n\n    private setSelectedValue(index: number): void {\n        const value = this.autocompleteEntries[index];\n\n        if (this.selectedValue === value) {\n            return;\n        }\n\n        this.selectedValue = value;\n        this.virtualList.ensureIndexVisible(index);\n\n        this.virtualList.forEachRenderedRow((cmp: AgAutocompleteRow, idx: number) => {\n            cmp.updateSelected(index === idx);\n        });\n    }\n\n    private createRowComponent(value: AutocompleteEntry): Component {\n        const row = new AgAutocompleteRow();\n\n        this.createBean(row);\n        row.setState(value.displayValue ?? value.key, value === this.selectedValue);\n\n        return row;\n    }\n\n    private onMouseMove(mouseEvent: MouseEvent): void {\n        const rect = this.virtualList.getGui().getBoundingClientRect();\n        const scrollTop = this.virtualList.getScrollTop();\n        const mouseY = mouseEvent.clientY - rect.top + scrollTop;\n        const row = Math.floor(mouseY / this.virtualList.getRowHeight());\n\n        this.checkSetSelectedValue(row);\n    }\n\n    public afterGuiAttached(): void {\n        this.virtualList.refresh();\n    }\n\n    public getSelectedValue(): AutocompleteEntry | null {\n        if (!this.autocompleteEntries.length) {\n            return null;\n        }\n        return this.selectedValue ?? null;\n    }\n}\n", "import { Component, _escapeString, _exists } from '@ag-grid-community/core';\n\nexport class AgAutocompleteRow extends Component {\n    private value: string;\n    private hasHighlighting = false;\n\n    constructor() {\n        super(/* html */ `\n        <div class=\"ag-autocomplete-row\" role=\"presentation\">\n            <div class=\"ag-autocomplete-row-label\"></div>\n        </div>`);\n    }\n\n    public setState(value: string, selected: boolean): void {\n        this.value = value;\n\n        this.render();\n\n        this.updateSelected(selected);\n    }\n\n    public updateSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-autocomplete-row-selected', selected);\n    }\n\n    public setSearchString(searchString: string): void {\n        let keepHighlighting = false;\n        if (_exists(searchString)) {\n            const index = this.value?.toLocaleLowerCase().indexOf(searchString.toLocaleLowerCase());\n            if (index >= 0) {\n                keepHighlighting = true;\n                this.hasHighlighting = true;\n                const highlightEndIndex = index + searchString.length;\n                const startPart = _escapeString(this.value.slice(0, index));\n                const highlightedPart = _escapeString(this.value.slice(index, highlightEndIndex));\n                const endPart = _escapeString(this.value.slice(highlightEndIndex));\n                this.getGui().lastElementChild!.innerHTML = `${startPart}<b>${highlightedPart}</b>${endPart}`;\n            }\n        }\n        if (!keepHighlighting && this.hasHighlighting) {\n            this.hasHighlighting = false;\n            this.render();\n        }\n    }\n\n    private render() {\n        // putting in blank if missing, so at least the user can click on it\n        this.getGui().lastElementChild!.innerHTML = _escapeString(this.value) ?? '&nbsp;';\n    }\n}\n", "import type { BeanCollection, ColumnModel, FocusService, HeaderNavigationService } from '@ag-grid-community/core';\nimport {\n    Component,\n    KeyCode,\n    _clearElement,\n    _setAriaColIndex,\n    _setAriaColSpan,\n    _setAriaRole,\n    _setAriaRowIndex,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport { AdvancedFilterComp } from './advancedFilterComp';\n\nexport class AdvancedFilterHeaderComp extends Component {\n    private columnModel: ColumnModel;\n    private focusService: FocusService;\n    private headerNavigationService: HeaderNavigationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.focusService = beans.focusService;\n        this.headerNavigationService = beans.headerNavigationService;\n    }\n\n    private eAdvancedFilter: AdvancedFilterComp | undefined;\n    private height: number;\n\n    constructor(private enabled: boolean) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-header\" role=\"row\">\n            </div>`);\n    }\n\n    public postConstruct(): void {\n        this.setupAdvancedFilter(this.enabled);\n\n        this.addDestroyFunc(() => this.destroyBean(this.eAdvancedFilter));\n\n        const heightListener = () => {\n            if (this.enabled) {\n                this.setEnabledHeight();\n            }\n        };\n\n        this.addManagedEventListeners({\n            gridColumnsChanged: () => this.onGridColumnsChanged(),\n            columnHeaderHeightChanged: heightListener,\n            gridStylesChanged: heightListener,\n        });\n\n        this.addManagedPropertyListener('headerHeight', heightListener);\n        this.addManagedPropertyListener('floatingFiltersHeight', heightListener);\n\n        this.addGuiEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event));\n\n        this.addGuiEventListener('focusout', (event: FocusEvent) => {\n            if (!this.getFocusableElement().contains(event.relatedTarget as HTMLElement)) {\n                this.focusService.clearAdvancedFilterColumn();\n            }\n        });\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eAdvancedFilter?.getGui() ?? this.getGui();\n    }\n\n    public setEnabled(enabled: boolean): void {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.setupAdvancedFilter(enabled);\n    }\n\n    public refresh(): void {\n        this.eAdvancedFilter?.refresh();\n    }\n\n    public getHeight(): number {\n        return this.height;\n    }\n\n    public setInputDisabled(disabled: boolean): void {\n        this.eAdvancedFilter?.setInputDisabled(disabled);\n    }\n\n    private setupAdvancedFilter(enabled: boolean): void {\n        const eGui = this.getGui();\n        if (enabled) {\n            // unmanaged as can be recreated\n            this.eAdvancedFilter = this.createBean(new AdvancedFilterComp());\n            const eAdvancedFilterGui = this.eAdvancedFilter.getGui();\n            this.eAdvancedFilter.addCssClass('ag-advanced-filter-header-cell');\n\n            this.setEnabledHeight();\n\n            this.setAriaRowIndex();\n            _setAriaRole(eAdvancedFilterGui, 'gridcell');\n            _setAriaColIndex(eAdvancedFilterGui, 1);\n            this.setAriaColumnCount(eAdvancedFilterGui);\n\n            eGui.appendChild(eAdvancedFilterGui);\n        } else {\n            _clearElement(eGui);\n            this.destroyBean(this.eAdvancedFilter);\n            this.height = 0;\n        }\n        _setDisplayed(eGui, enabled);\n        this.enabled = enabled;\n    }\n\n    private setEnabledHeight(): void {\n        const eGui = this.getGui();\n        this.height = this.columnModel.getFloatingFiltersHeight();\n        const height = `${this.height}px`;\n        eGui.style.height = height;\n        eGui.style.minHeight = height;\n    }\n\n    private setAriaColumnCount(eAdvancedFilterGui: HTMLElement): void {\n        _setAriaColSpan(eAdvancedFilterGui, this.columnModel.getCols().length);\n    }\n\n    private setAriaRowIndex(): void {\n        _setAriaRowIndex(this.getGui(), this.headerNavigationService.getHeaderRowCount());\n    }\n\n    private onGridColumnsChanged(): void {\n        if (!this.eAdvancedFilter) {\n            return;\n        }\n        this.setAriaColumnCount(this.eAdvancedFilter.getGui());\n        this.setAriaRowIndex();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        switch (event.key) {\n            case KeyCode.ENTER: {\n                if (this.hasFocus()) {\n                    if (this.focusService.focusInto(this.getFocusableElement())) {\n                        event.preventDefault();\n                    }\n                }\n                break;\n            }\n            case KeyCode.ESCAPE:\n                if (!this.hasFocus()) {\n                    this.getFocusableElement().focus();\n                }\n                break;\n            case KeyCode.UP:\n                this.navigateUpDown(true, event);\n                break;\n            case KeyCode.DOWN:\n                this.navigateUpDown(false, event);\n                break;\n            case KeyCode.TAB:\n                if (this.hasFocus()) {\n                    this.navigateLeftRight(event);\n                } else {\n                    const nextFocusableEl = this.focusService.findNextFocusableElement(\n                        this.getFocusableElement(),\n                        null,\n                        event.shiftKey\n                    );\n                    if (nextFocusableEl) {\n                        event.preventDefault();\n                        nextFocusableEl.focus();\n                    } else {\n                        this.navigateLeftRight(event);\n                    }\n                }\n                break;\n        }\n    }\n\n    private navigateUpDown(backwards: boolean, event: KeyboardEvent): void {\n        if (this.hasFocus()) {\n            if (this.focusService.focusNextFromAdvancedFilter(backwards)) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    private navigateLeftRight(event: KeyboardEvent): void {\n        if (\n            event.shiftKey\n                ? this.focusService.focusLastHeader()\n                : this.focusService.focusNextFromAdvancedFilter(false, true)\n        ) {\n            event.preventDefault();\n        }\n    }\n\n    private hasFocus(): boolean {\n        return this.gos.getActiveDomElement() === this.getFocusableElement();\n    }\n}\n", "import type {\n    AdvancedFilterModel,\n    BeanCollection,\n    ColumnAdvancedFilterModel,\n    FilterManager,\n    JoinAdvancedFilterModel,\n} from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, TooltipFeature, _exists, _setDisabled } from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\nimport type { VirtualListDragItem } from '@ag-grid-enterprise/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type { AdvancedFilterService } from '../advancedFilterService';\nimport { AdvancedFilterBuilderDragFeature } from './advancedFilterBuilderDragFeature';\nimport { AdvancedFilterBuilderItemAddComp } from './advancedFilterBuilderItemAddComp';\nimport { AdvancedFilterBuilderItemComp } from './advancedFilterBuilderItemComp';\nimport type {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    AdvancedFilterBuilderMoveEvent,\n    AdvancedFilterBuilderRemoveEvent,\n} from './iAdvancedFilterBuilder';\n\nexport class AdvancedFilterBuilderComp extends Component<AdvancedFilterBuilderEvents> {\n    private filterManager?: FilterManager;\n    private advancedFilterService: AdvancedFilterService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.advancedFilterService = beans.advancedFilterService as AdvancedFilterService;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly eList: HTMLElement = RefPlaceholder;\n    private readonly eApplyFilterButton: HTMLElement = RefPlaceholder;\n    private readonly eCancelFilterButton: HTMLElement = RefPlaceholder;\n\n    private virtualList: VirtualList<AdvancedFilterBuilderItemComp | AdvancedFilterBuilderItemAddComp>;\n    private filterModel: AdvancedFilterModel;\n    private stringifiedModel: string;\n    private items: AdvancedFilterBuilderItem[];\n    private dragFeature: AdvancedFilterBuilderDragFeature;\n    private showMove: boolean;\n    private validationTooltipFeature: TooltipFeature;\n    private validationMessage: string | null = null;\n\n    constructor() {\n        super(/* html */ `\n            <div role=\"presentation\" class=\"ag-advanced-filter-builder\" tabindex=\"-1\">\n                <div role=\"presentation\" class=\"ag-advanced-filter-builder-list\" data-ref=\"eList\"></div>\n                <div role=\"presentation\" class=\"ag-advanced-filter-builder-button-panel\">\n                    <button class=\"ag-button ag-standard-button ag-advanced-filter-builder-apply-button\" data-ref=\"eApplyFilterButton\"></button>\n                    <button class=\"ag-button ag-standard-button ag-advanced-filter-builder-cancel-button\" data-ref=\"eCancelFilterButton\"></button>\n                </div>\n            </div>`);\n    }\n\n    public postConstruct(): void {\n        const { showMoveButtons } = this.gos.get('advancedFilterBuilderParams') ?? {};\n        this.showMove = !!showMoveButtons;\n        this.addManagedPropertyListener('advancedFilterBuilderParams', ({ currentValue }) => {\n            this.showMove = !!currentValue?.showMoveButtons;\n            this.refreshList(false);\n        });\n\n        this.filterModel = this.setupFilterModel();\n        this.setupVirtualList();\n\n        this.dragFeature = this.createManagedBean(new AdvancedFilterBuilderDragFeature(this, this.virtualList));\n\n        this.setupButtons();\n    }\n\n    public refresh(): void {\n        let indexToFocus = this.virtualList.getLastFocusedRow();\n        this.setupFilterModel();\n        this.validateItems();\n        this.refreshList(false);\n        if (indexToFocus != null) {\n            // last focused row is cleared on focus out, so if defined, we need to put the focus back\n            if (!this.virtualList.getComponentAt(indexToFocus)) {\n                indexToFocus = 0;\n            }\n            this.virtualList.focusRow(indexToFocus);\n        }\n    }\n\n    public getNumItems(): number {\n        return this.items.length;\n    }\n\n    public moveItem(\n        item: AdvancedFilterBuilderItem | null,\n        destination: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n    ): void {\n        if (!destination || !item) {\n            return;\n        }\n        this.moveItemToIndex(item, destination.rowIndex, destination.position);\n    }\n\n    public afterGuiAttached(): void {\n        this.virtualList.focusRow(0);\n    }\n\n    private setupVirtualList(): void {\n        this.virtualList = this.createManagedBean(\n            new VirtualList({\n                cssIdentifier: 'advanced-filter-builder',\n                ariaRole: 'tree',\n                listName: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderList'),\n            })\n        );\n        this.virtualList.setComponentCreator(this.createItemComponent.bind(this));\n        this.virtualList.setComponentUpdater(this.updateItemComponent.bind(this));\n        this.virtualList.setRowHeight(40);\n        this.eList.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setModel({\n            getRowCount: () => this.items.length,\n            getRow: (index: number) => this.items[index],\n            areRowsEqual: (oldRow: AdvancedFilterBuilderItem, newRow: AdvancedFilterBuilderItem) => oldRow === newRow,\n        });\n        this.buildList();\n        this.virtualList.refresh();\n    }\n\n    private setupButtons(): void {\n        this.eApplyFilterButton.innerText =\n            this.advancedFilterExpressionService.translate('advancedFilterBuilderApply');\n        this.activateTabIndex([this.eApplyFilterButton]);\n        this.addManagedElementListeners(this.eApplyFilterButton, {\n            click: () => {\n                this.advancedFilterService.setModel(this.filterModel);\n                this.filterManager?.onFilterChanged({ source: 'advancedFilter' });\n                this.close();\n            },\n        });\n\n        this.validationTooltipFeature = this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eApplyFilterButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () => this.validationMessage,\n                getTooltipShowDelayOverride: () => 1000,\n            })\n        );\n        this.validate();\n\n        const mouseListener = (isEnter: boolean) =>\n            this.addOrRemoveCssClass('ag-advanced-filter-builder-validation', isEnter);\n        this.addManagedListeners(this.eApplyFilterButton, {\n            mouseenter: () => mouseListener(true),\n            mouseleave: () => mouseListener(false),\n        });\n\n        this.eCancelFilterButton.innerText =\n            this.advancedFilterExpressionService.translate('advancedFilterBuilderCancel');\n        this.activateTabIndex([this.eCancelFilterButton]);\n        this.addManagedElementListeners(this.eCancelFilterButton, { click: () => this.close() });\n    }\n\n    private removeItemFromParent(item: AdvancedFilterBuilderItem): number {\n        const sourceParentIndex = item.parent!.conditions.indexOf(item.filterModel!);\n        item.parent!.conditions.splice(sourceParentIndex, 1);\n        return sourceParentIndex;\n    }\n\n    private moveItemToIndex(\n        item: AdvancedFilterBuilderItem,\n        destinationRowIndex: number,\n        destinationPosition: 'top' | 'bottom'\n    ): void {\n        const destinationItem = this.items[destinationRowIndex];\n        const destinationIsParent =\n            destinationItem.filterModel?.filterType === 'join' && destinationPosition === 'bottom';\n        const destinationParent = destinationIsParent\n            ? (destinationItem.filterModel as JoinAdvancedFilterModel)\n            : destinationItem.parent;\n\n        // trying to move before the root\n        if (!destinationParent) {\n            return;\n        }\n\n        // can't move into itself\n        if (this.isChildOrSelf(destinationParent, item.filterModel!) || destinationItem === item) {\n            return;\n        }\n\n        this.removeItemFromParent(item);\n\n        let destinationParentIndex;\n        if (destinationIsParent) {\n            destinationParentIndex = 0;\n        } else {\n            destinationParentIndex = destinationParent.conditions.indexOf(destinationItem.filterModel!);\n            if (destinationParentIndex === -1) {\n                destinationParentIndex = destinationParent.conditions.length;\n            } else if (destinationPosition === 'bottom') {\n                destinationParentIndex += 1;\n            }\n        }\n        destinationParent.conditions.splice(destinationParentIndex, 0, item.filterModel!);\n        this.refreshList(false);\n    }\n\n    private isChildOrSelf(modelToCheck: AdvancedFilterModel, potentialParentModel: AdvancedFilterModel): boolean {\n        return (\n            modelToCheck === potentialParentModel ||\n            (potentialParentModel.filterType === 'join' &&\n                potentialParentModel.conditions.some((condition) => this.isChildOrSelf(modelToCheck, condition)))\n        );\n    }\n\n    private setupFilterModel(): AdvancedFilterModel {\n        const filterModel = this.formatFilterModel(this.advancedFilterService.getModel());\n        this.stringifiedModel = JSON.stringify(filterModel);\n        return filterModel;\n    }\n\n    private formatFilterModel(filterModel: AdvancedFilterModel | null): AdvancedFilterModel {\n        filterModel = filterModel ?? {\n            filterType: 'join',\n            type: 'AND',\n            conditions: [],\n        };\n        if (filterModel.filterType !== 'join') {\n            filterModel = {\n                filterType: 'join',\n                type: 'AND',\n                conditions: [filterModel],\n            };\n        }\n        return filterModel;\n    }\n\n    private buildList(): void {\n        const parseFilterModel = (\n            filterModel: AdvancedFilterModel,\n            items: AdvancedFilterBuilderItem[],\n            level: number,\n            parent?: JoinAdvancedFilterModel\n        ) => {\n            items.push({ filterModel, level, parent, valid: true, showMove: this.showMove });\n            if (filterModel.filterType === 'join') {\n                filterModel.conditions.forEach((childFilterModel) =>\n                    parseFilterModel(childFilterModel, items, level + 1, filterModel)\n                );\n                if (level === 0) {\n                    items.push({ filterModel: null, level: level + 1, parent: filterModel, valid: true });\n                }\n            }\n        };\n        this.items = [];\n        parseFilterModel(this.filterModel, this.items, 0);\n    }\n\n    private refreshList(softRefresh: boolean): void {\n        if (!softRefresh) {\n            const invalidModels: AdvancedFilterModel[] = [];\n            this.items.forEach((item) => {\n                if (!item.valid) {\n                    invalidModels.push(item.filterModel!);\n                }\n            });\n            this.buildList();\n            if (invalidModels.length) {\n                this.items.forEach((item) => {\n                    if (item.filterModel && invalidModels.includes(item.filterModel)) {\n                        item.valid = false;\n                    }\n                });\n            }\n        }\n        this.virtualList.refresh(softRefresh);\n        this.validate();\n    }\n\n    private updateItemComponent(item: AdvancedFilterBuilderItem, comp: AdvancedFilterBuilderItemComp): void {\n        const index = this.items.indexOf(item);\n        const populateTreeLines = (filterModel: AdvancedFilterModel | null, treeLines: boolean[]) => {\n            const parentItem = this.items.find((itemToCheck) => itemToCheck.filterModel === filterModel);\n            const parentFilterModel = parentItem?.parent;\n            if (parentFilterModel) {\n                const { conditions } = parentFilterModel as JoinAdvancedFilterModel;\n                // check parent\n                populateTreeLines(parentFilterModel, treeLines);\n                treeLines.push(conditions[conditions.length - 1] === filterModel);\n            }\n        };\n        const treeLines: boolean[] = [];\n        const { filterModel } = item;\n        if (filterModel) {\n            populateTreeLines(filterModel, treeLines);\n            // the add item button is always last child\n            treeLines[0] = false;\n        }\n        const showStartTreeLine = filterModel?.filterType === 'join' && !!filterModel.conditions.length;\n        comp.setState({\n            disableMoveUp: index === 1,\n            disableMoveDown: !this.canMoveDown(item, index),\n            treeLines,\n            showStartTreeLine,\n        });\n    }\n\n    private createItemComponent(\n        item: AdvancedFilterBuilderItem,\n        focusWrapper: HTMLElement\n    ): Component<AdvancedFilterBuilderEvents> {\n        const itemComp = this.createBean(\n            item.filterModel\n                ? new AdvancedFilterBuilderItemComp(item, this.dragFeature, focusWrapper)\n                : new AdvancedFilterBuilderItemAddComp(item, focusWrapper)\n        );\n\n        itemComp.addManagedListeners(itemComp, {\n            advancedFilterBuilderRemoved: ({ item }: AdvancedFilterBuilderRemoveEvent) => this.removeItem(item),\n            advancedFilterBuilderValueChanged: () => this.validate(),\n            advancedFilterBuilderAdded: ({ item, isJoin }: AdvancedFilterBuilderAddEvent) => this.addItem(item, isJoin),\n            advancedFilterBuilderMoved: ({ item, backwards }: AdvancedFilterBuilderMoveEvent) =>\n                this.moveItemUpDown(item, backwards),\n        });\n\n        if (itemComp instanceof AdvancedFilterBuilderItemComp) {\n            this.updateItemComponent(item, itemComp);\n        }\n\n        return itemComp;\n    }\n\n    private addItem(item: AdvancedFilterBuilderItem, isJoin: boolean): void {\n        const { parent: itemParent, level, filterModel: itemFilterModel } = item;\n        const itemIsJoin = itemFilterModel?.filterType === 'join';\n        const filterModel = isJoin\n            ? ({\n                  filterType: 'join',\n                  type: 'AND',\n                  conditions: [],\n              } as JoinAdvancedFilterModel)\n            : ({} as ColumnAdvancedFilterModel);\n        const parent = (itemIsJoin ? (itemFilterModel as JoinAdvancedFilterModel) : itemParent)!;\n        let insertIndex = itemIsJoin ? 0 : parent.conditions.indexOf(itemFilterModel!);\n        if (insertIndex >= 0) {\n            if (!itemIsJoin) {\n                insertIndex += 1;\n            }\n            parent.conditions.splice(insertIndex, 0, filterModel);\n        } else {\n            parent.conditions.push(filterModel);\n        }\n        let index = this.items.indexOf(item);\n        const softRefresh = index >= 0;\n        if (softRefresh) {\n            if (item.filterModel) {\n                index++;\n            }\n            const newItems: AdvancedFilterBuilderItem[] = [\n                {\n                    filterModel,\n                    level: itemIsJoin ? level + 1 : level,\n                    parent,\n                    valid: isJoin,\n                    showMove: this.showMove,\n                },\n            ];\n            this.items.splice(index, 0, ...newItems);\n        }\n        this.refreshList(softRefresh);\n        if (softRefresh) {\n            this.virtualList.getComponentAt(index)?.afterAdd();\n        }\n    }\n\n    private removeItem(item: AdvancedFilterBuilderItem): void {\n        const parent = item.parent!;\n        const { filterModel } = item;\n        const parentIndex = parent.conditions.indexOf(filterModel!);\n        parent.conditions.splice(parentIndex, 1);\n\n        const isJoin = item.filterModel?.filterType === 'join';\n        const index = this.items.indexOf(item);\n        // if it's a join, we don't know how many children there are, so always rebuild\n        const softRefresh = !isJoin && index >= 0;\n        if (softRefresh) {\n            this.items.splice(index, 1);\n        }\n        this.refreshList(softRefresh);\n        if (index >= 0) {\n            this.virtualList.focusRow(index);\n        }\n    }\n\n    private moveItemUpDown(item: AdvancedFilterBuilderItem, backwards: boolean): void {\n        const itemIndex = this.items.indexOf(item);\n        const destinationIndex = backwards ? itemIndex - 1 : itemIndex + 1;\n        if (destinationIndex === 0 || (!backwards && !this.canMoveDown(item, itemIndex))) {\n            return;\n        }\n        const destinationItem = this.items[destinationIndex];\n        const indexInParent = this.removeItemFromParent(item);\n        const { level, filterModel, parent } = item;\n        const {\n            level: destinationLevel,\n            filterModel: destinationFilterModel,\n            parent: destinationParent,\n        } = destinationItem;\n        if (backwards) {\n            if (destinationLevel === level && destinationFilterModel!.filterType === 'join') {\n                // destination is empty join. move to last child\n                (destinationFilterModel as JoinAdvancedFilterModel).conditions.push(filterModel!);\n            } else if (destinationLevel <= level) {\n                // same parent or first child. move above destination in destination parent\n                const destinationIndex = destinationParent!.conditions.indexOf(destinationFilterModel!);\n                destinationParent!.conditions.splice(destinationIndex, 0, filterModel!);\n            } else {\n                // need to move up a level. move to end of previous item's children\n                const newParentItem = parent!.conditions[indexInParent - 1] as JoinAdvancedFilterModel;\n                newParentItem.conditions.push(filterModel!);\n            }\n        } else {\n            if (destinationLevel === level) {\n                if (destinationFilterModel!.filterType === 'join') {\n                    // destination is join. move to first child\n                    (destinationFilterModel as JoinAdvancedFilterModel).conditions.splice(0, 0, filterModel!);\n                } else {\n                    // switch positions\n                    const destinationIndex = destinationParent!.conditions.indexOf(destinationFilterModel!);\n                    destinationParent!.conditions.splice(destinationIndex + 1, 0, filterModel!);\n                }\n            } else {\n                if (indexInParent < parent!.conditions.length) {\n                    // keep in parent, but swap with next child\n                    parent!.conditions.splice(indexInParent + 1, 0, filterModel!);\n                } else {\n                    // need to move down a level. move after parent in its parent\n                    const parentItem = this.items.find((itemToCheck) => itemToCheck.filterModel === parent);\n                    const destinationIndex = parentItem!.parent!.conditions.indexOf(parentItem!.filterModel!) + 1;\n                    parentItem!.parent!.conditions.splice(destinationIndex, 0, filterModel!);\n                }\n            }\n        }\n        this.refreshList(false);\n        const newIndex = this.items.findIndex(\n            ({ filterModel: filterModelToCheck }) => filterModelToCheck === filterModel\n        );\n        if (newIndex >= 0) {\n            const comp = this.virtualList.getComponentAt(newIndex);\n            if (comp instanceof AdvancedFilterBuilderItemComp) {\n                comp.focusMoveButton(backwards);\n            }\n        }\n    }\n\n    private canMoveDown(item: AdvancedFilterBuilderItem, index: number): boolean {\n        return !(\n            (item.level === 1 && index === this.items.length - 2) ||\n            (item.level === 1 && item.parent!.conditions[item.parent!.conditions.length - 1] === item.filterModel!)\n        );\n    }\n\n    private close(): void {\n        this.advancedFilterService.getCtrl().toggleFilterBuilder('ui');\n    }\n\n    private validate(): void {\n        let disableApply = !this.items.every(({ valid }) => valid);\n        if (!disableApply) {\n            disableApply = JSON.stringify(this.filterModel) === this.stringifiedModel;\n            if (disableApply) {\n                this.validationMessage = this.advancedFilterExpressionService.translate(\n                    'advancedFilterBuilderValidationAlreadyApplied'\n                );\n            } else {\n                this.validationMessage = null;\n            }\n        } else {\n            this.validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationIncomplete'\n            );\n        }\n        _setDisabled(this.eApplyFilterButton, disableApply);\n        this.validationTooltipFeature.refreshToolTip();\n    }\n\n    private validateItems(): void {\n        const clearOperator = (filterModel: ColumnAdvancedFilterModel) => {\n            filterModel.type = undefined as any;\n        };\n        const clearOperand = (filterModel: ColumnAdvancedFilterModel) => {\n            delete (filterModel as any).filter;\n        };\n        this.items.forEach((item) => {\n            if (!item.valid || !item.filterModel || item.filterModel.filterType === 'join') {\n                return;\n            }\n            const { filterModel } = item;\n            const { colId } = filterModel;\n            const hasColumn = this.advancedFilterExpressionService\n                .getColumnAutocompleteEntries()\n                .find(({ key }) => key === colId);\n            const columnDetails = this.advancedFilterExpressionService.getColumnDetails(filterModel.colId);\n            if (!hasColumn || !columnDetails.column) {\n                item.valid = false;\n                filterModel.colId = undefined as any;\n                clearOperator(filterModel);\n                clearOperand(filterModel);\n                return;\n            }\n            const operatorForType = this.advancedFilterExpressionService.getDataTypeExpressionOperator(\n                columnDetails.baseCellDataType\n            )!;\n            const operator = operatorForType.operators[filterModel.type];\n            if (!operator) {\n                item.valid = false;\n                clearOperator(filterModel);\n                clearOperand(filterModel);\n                return;\n            }\n            if (operator.numOperands > 0 && !_exists((filterModel as any).filter)) {\n                item.valid = false;\n                return;\n            }\n        });\n    }\n}\n", "import type { AgEvent } from '@ag-grid-community/core';\nimport { BeanStub, DragSourceType } from '@ag-grid-community/core';\nimport { VirtualListDragFeature } from '@ag-grid-enterprise/core';\nimport type { VirtualList, VirtualListDragItem } from '@ag-grid-enterprise/core';\n\nimport type { AdvancedFilterBuilderComp } from './advancedFilterBuilderComp';\nimport type { AdvancedFilterBuilderItemComp } from './advancedFilterBuilderItemComp';\nimport type { AdvancedFilterBuilderItem } from './iAdvancedFilterBuilder';\n\nexport interface AdvancedFilterBuilderDragStartedEvent extends AgEvent<'advancedFilterBuilderDragStarted'> {\n    item: AdvancedFilterBuilderItem;\n}\n\nexport type AdvancedFilterBuilderDragFeatureEvent =\n    | 'advancedFilterBuilderDragStarted'\n    | 'advancedFilterBuilderDragEnded';\nexport class AdvancedFilterBuilderDragFeature extends BeanStub<AdvancedFilterBuilderDragFeatureEvent> {\n    constructor(\n        private readonly comp: AdvancedFilterBuilderComp,\n        private readonly virtualList: VirtualList\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.createManagedBean(\n            new VirtualListDragFeature<\n                AdvancedFilterBuilderComp,\n                AdvancedFilterBuilderItemComp,\n                AdvancedFilterBuilderItem,\n                AdvancedFilterBuilderDragStartedEvent\n            >(this.comp, this.virtualList, {\n                dragSourceType: DragSourceType.AdvancedFilterBuilder,\n                listItemDragStartEvent: 'advancedFilterBuilderDragStarted',\n                listItemDragEndEvent: 'advancedFilterBuilderDragEnded',\n                eventSource: this,\n                getCurrentDragValue: (listItemDragStartEvent: AdvancedFilterBuilderDragStartedEvent) =>\n                    this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: () => false,\n                getNumRows: (comp: AdvancedFilterBuilderComp) => comp.getNumItems(),\n                moveItem: (\n                    currentDragValue: AdvancedFilterBuilderItem | null,\n                    lastHoveredListItem: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem),\n            })\n        );\n    }\n\n    private getCurrentDragValue(\n        listItemDragStartEvent: AdvancedFilterBuilderDragStartedEvent\n    ): AdvancedFilterBuilderItem {\n        return listItemDragStartEvent.item;\n    }\n\n    private moveItem(\n        currentDragValue: AdvancedFilterBuilderItem | null,\n        lastHoveredListItem: VirtualListDragItem<AdvancedFilterBuilderItemComp> | null\n    ): void {\n        this.comp.moveItem(currentDragValue, lastHoveredListItem);\n    }\n}\n", "import type { BeanCollection, FieldPickerValueSelectedEvent } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, TooltipFeature, _setAriaLabel, _setAriaLevel } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport { AddDropdownComp } from './addDropdownComp';\nimport { AdvancedFilterBuilderItemNavigationFeature } from './advancedFilterBuilderItemNavigationFeature';\nimport { getAdvancedFilterBuilderAddButtonParams } from './advancedFilterBuilderUtils';\nimport type {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n} from './iAdvancedFilterBuilder';\n\nexport class AdvancedFilterBuilderItemAddComp extends Component<AdvancedFilterBuilderEvents> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly eItem: HTMLElement = RefPlaceholder;\n\n    constructor(\n        private readonly item: AdvancedFilterBuilderItem,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-wrapper\" role=\"presentation\">\n                <div data-ref=\"eItem\" class=\"ag-advanced-filter-builder-item\" role=\"presentation\">\n                    <div class=\"ag-advanced-filter-builder-item-tree-lines\" aria-hidden=\"true\">\n                        <div class=\"ag-advanced-filter-builder-item-tree-line-vertical-top ag-advanced-filter-builder-item-tree-line-horizontal\"></div>\n                    </div>\n                </div>\n            </div>\n        `);\n    }\n\n    public postConstruct(): void {\n        _setAriaLevel(this.focusWrapper, 2);\n\n        const addButtonParams = getAdvancedFilterBuilderAddButtonParams(\n            (key) => this.advancedFilterExpressionService.translate(key),\n            this.gos.get('advancedFilterBuilderParams')?.addSelectWidth\n        );\n        const eAddButton = this.createManagedBean(new AddDropdownComp(addButtonParams));\n        this.addManagedListeners(eAddButton, {\n            fieldPickerValueSelected: ({ value }: FieldPickerValueSelectedEvent) => {\n                this.dispatchLocalEvent<AdvancedFilterBuilderAddEvent>({\n                    type: 'advancedFilterBuilderAdded',\n                    item: this.item,\n                    isJoin: value.key === 'join',\n                });\n            },\n        });\n        this.eItem.appendChild(eAddButton.getGui());\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => eAddButton.getGui(),\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () =>\n                    this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n            })\n        );\n\n        this.createManagedBean(\n            new AdvancedFilterBuilderItemNavigationFeature(this.getGui(), this.focusWrapper, eAddButton)\n        );\n\n        _setAriaLabel(\n            this.focusWrapper,\n            this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItem', [\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n                `${this.item.level + 1}`,\n            ])\n        );\n    }\n\n    public afterAdd(): void {\n        // do nothing\n    }\n}\n", "import type { RichSelectParams } from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    _setAriaLabel,\n    _setAriaLabelledBy,\n    _setDisplayed,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\nimport { AgRichSelect } from '@ag-grid-enterprise/core';\n\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\n\nexport interface AddDropdownCompParams extends RichSelectParams<AutocompleteEntry> {\n    wrapperClassName?: string;\n    ariaLabel: string;\n}\n\nexport class AddDropdownComp extends AgRichSelect {\n    constructor(private readonly params: AddDropdownCompParams) {\n        super({\n            ...params,\n            template: /* html */ `\n                <div class=\"ag-picker-field\" role=\"presentation\">\n                    <div data-ref=\"eLabel\"></div>\n                    <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-picker-collapsed\">\n                        <div data-ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                        <ag-input-text-field data-ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                        <span data-ref=\"eDeselect\" class=\"ag-rich-select-deselect-button ag-picker-field-icon\" role=\"presentation\"></span>\n                        <div data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                    </div>\n                </div>`,\n            agComponents: [AgInputTextFieldSelector],\n        });\n    }\n\n    public override showPicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.showPicker());\n    }\n\n    public override hidePicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.hidePicker());\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        const { wrapperClassName, ariaLabel } = this.params;\n\n        _setDisplayed(this.eDisplayField, false);\n        if (wrapperClassName) {\n            this.eWrapper.classList.add(wrapperClassName);\n        }\n        _setAriaLabelledBy(this.eWrapper, '');\n        _setAriaLabel(this.eWrapper, ariaLabel);\n    }\n\n    protected override onEnterKeyDown(event: KeyboardEvent): void {\n        _stopPropagationForAgGrid(event);\n        if (this.isPickerDisplayed) {\n            super.onEnterKeyDown(event);\n        } else {\n            event.preventDefault();\n            this.showPicker();\n        }\n    }\n}\n", "import type { Component } from '@ag-grid-community/core';\nimport { BeanStub, KeyCode, _isStopPropagationForAgGrid, _stopPropagationForAgGrid } from '@ag-grid-community/core';\n\nexport class AdvancedFilterBuilderItemNavigationFeature extends BeanStub {\n    constructor(\n        private readonly eGui: HTMLElement,\n        private readonly focusWrapper: HTMLElement,\n        private readonly eFocusableComp: Component<any>\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.addManagedElementListeners(this.eGui, {\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.TAB:\n                        if (!event.defaultPrevented) {\n                            // tab guard handled the navigation. stop from reaching virtual list\n                            _stopPropagationForAgGrid(event);\n                        }\n                        break;\n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        // if this hasn't been handled by an editor, prevent virtual list navigation\n                        _stopPropagationForAgGrid(event);\n                        break;\n                    case KeyCode.ESCAPE:\n                        if (_isStopPropagationForAgGrid(event)) {\n                            return;\n                        }\n                        if (this.eGui.contains(this.gos.getActiveDomElement())) {\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.focusWrapper.focus();\n                        }\n                        break;\n                }\n            },\n        });\n        const highlightClass = 'ag-advanced-filter-builder-virtual-list-item-highlight';\n        this.addManagedListeners(this.focusWrapper, {\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        if (_isStopPropagationForAgGrid(event)) {\n                            return;\n                        }\n                        if (this.gos.getActiveDomElement() === this.focusWrapper) {\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.eFocusableComp.getFocusableElement().focus();\n                        }\n                        break;\n                }\n            },\n            focusin: () => {\n                this.focusWrapper.classList.add(highlightClass);\n            },\n            focusout: (event: FocusEvent) => {\n                if (!this.focusWrapper.contains(event.relatedTarget as HTMLElement)) {\n                    this.focusWrapper.classList.remove(highlightClass);\n                }\n            },\n        });\n    }\n}\n", "import type { ADVANCED_FILTER_LOCALE_TEXT } from '../advancedFilterLocaleText';\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\nimport type { AddDropdownCompParams } from './addDropdownComp';\n\nexport function getAdvancedFilterBuilderAddButtonParams(\n    translate: (key: keyof typeof ADVANCED_FILTER_LOCALE_TEXT) => string,\n    maxPickerWidth?: number\n): AddDropdownCompParams {\n    return {\n        pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderAddField',\n        pickerAriaLabelValue: 'Advanced Filter Builder Add Field',\n        pickerType: 'ag-list',\n        valueList: [\n            {\n                key: 'condition',\n                displayValue: translate('advancedFilterBuilderAddCondition'),\n            },\n            {\n                key: 'join',\n                displayValue: translate('advancedFilterBuilderAddJoin'),\n            },\n        ],\n        valueFormatter: (value: AutocompleteEntry) => (value == null ? null : value.displayValue ?? value.key),\n        pickerIcon: 'advancedFilterBuilderAdd',\n        maxPickerWidth: `${maxPickerWidth ?? 120}px`,\n        wrapperClassName: 'ag-advanced-filter-builder-item-button',\n        ariaLabel: translate('advancedFilterBuilderAddButtonTooltip'),\n    };\n}\n", "import type {\n    BaseCellDataType,\n    BeanCollection,\n    DragAndDropService,\n    DragSource,\n    FieldPickerValueSelectedEvent,\n    FieldValueEvent,\n} from '@ag-grid-community/core';\nimport {\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    TabGuardComp,\n    TooltipFeature,\n    _createIconNoSpan,\n    _removeAriaExpanded,\n    _setAriaDisabled,\n    _setAriaExpanded,\n    _setAriaLabel,\n    _setAriaLevel,\n    _setDisplayed,\n    _setVisible,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\nimport { AddDropdownComp } from './addDropdownComp';\nimport type { AdvancedFilterBuilderDragStartedEvent } from './advancedFilterBuilderDragFeature';\nimport type { AdvancedFilterBuilderDragFeature } from './advancedFilterBuilderDragFeature';\nimport { AdvancedFilterBuilderItemNavigationFeature } from './advancedFilterBuilderItemNavigationFeature';\nimport { getAdvancedFilterBuilderAddButtonParams } from './advancedFilterBuilderUtils';\nimport { ConditionPillWrapperComp } from './conditionPillWrapperComp';\nimport type {\n    AdvancedFilterBuilderAddEvent,\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    AdvancedFilterBuilderMoveEvent,\n    AdvancedFilterBuilderRemoveEvent,\n    CreatePillParams,\n} from './iAdvancedFilterBuilder';\nimport { InputPillComp } from './inputPillComp';\nimport { JoinPillWrapperComp } from './joinPillWrapperComp';\nimport { SelectPillComp } from './selectPillComp';\n\nexport class AdvancedFilterBuilderItemComp extends TabGuardComp<AdvancedFilterBuilderEvents> {\n    private dragAndDropService: DragAndDropService;\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dragAndDropService = beans.dragAndDropService;\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly eTreeLines: HTMLElement = RefPlaceholder;\n    private readonly eDragHandle: HTMLElement = RefPlaceholder;\n    private readonly eButtons: HTMLElement = RefPlaceholder;\n    private readonly eValidation: HTMLElement = RefPlaceholder;\n    private readonly eMoveUpButton: HTMLElement = RefPlaceholder;\n    private readonly eMoveDownButton: HTMLElement = RefPlaceholder;\n    private readonly eAddButton: HTMLElement = RefPlaceholder;\n    private readonly eRemoveButton: HTMLElement = RefPlaceholder;\n\n    private ePillWrapper: JoinPillWrapperComp | ConditionPillWrapperComp;\n    private validationTooltipFeature: TooltipFeature;\n    private moveUpDisabled: boolean = false;\n    private moveDownDisabled: boolean = false;\n    private moveUpTooltipFeature: TooltipFeature;\n    private moveDownTooltipFeature: TooltipFeature;\n\n    constructor(\n        private readonly item: AdvancedFilterBuilderItem,\n        private readonly dragFeature: AdvancedFilterBuilderDragFeature,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-wrapper\" role=\"presentation\">\n                <div class=\"ag-advanced-filter-builder-item\" role=\"presentation\">\n                    <div data-ref=\"eTreeLines\" class=\"ag-advanced-filter-builder-item-tree-lines\" aria-hidden=\"true\"></div>\n                    <span data-ref=\"eDragHandle\" class=\"ag-drag-handle\" aria-hidden=\"true\"></span>\n                    <span data-ref=\"eValidation\" class=\"ag-advanced-filter-builder-item-button ag-advanced-filter-builder-invalid\" aria-hidden=\"true\"></span>\n                </div>\n                <div data-ref=\"eButtons\" class=\"ag-advanced-filter-builder-item-buttons\">\n                    <span data-ref=\"eMoveUpButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                    <span data-ref=\"eMoveDownButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                    <div data-ref=\"eAddButton\" role=\"presentation\"></div>\n                    <span data-ref=\"eRemoveButton\" class=\"ag-advanced-filter-builder-item-button\" role=\"button\"></span>\n                </div>\n            </div>\n        `);\n    }\n\n    public postConstruct(): void {\n        const { filterModel, level, showMove } = this.item;\n\n        const isJoin = filterModel!.filterType === 'join';\n        this.ePillWrapper = this.createManagedBean(isJoin ? new JoinPillWrapperComp() : new ConditionPillWrapperComp());\n        this.ePillWrapper.init({ item: this.item, createPill: (params: CreatePillParams) => this.createPill(params) });\n        this.eDragHandle.insertAdjacentElement('afterend', this.ePillWrapper.getGui());\n\n        if (level === 0) {\n            const eTreeLine = document.createElement('div');\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-vertical-bottom');\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-root');\n            this.eTreeLines.appendChild(eTreeLine);\n\n            _setDisplayed(this.eDragHandle, false);\n            _setDisplayed(this.eButtons, false);\n            _setAriaExpanded(this.focusWrapper, true);\n        } else {\n            this.setupTreeLines(level);\n\n            this.eDragHandle.appendChild(_createIconNoSpan('advancedFilterBuilderDrag', this.gos)!);\n            this.setupValidation();\n            this.setupMoveButtons(showMove);\n            this.setupAddButton();\n            this.setupRemoveButton();\n\n            this.setupDragging();\n            this.updateAriaExpanded();\n        }\n\n        _setAriaLevel(this.focusWrapper, level + 1);\n\n        this.initialiseTabGuard({});\n\n        this.createManagedBean(\n            new AdvancedFilterBuilderItemNavigationFeature(this.getGui(), this.focusWrapper, this.ePillWrapper)\n        );\n\n        this.updateAriaLabel();\n\n        this.addManagedListeners(this.ePillWrapper, {\n            advancedFilterBuilderValueChanged: () =>\n                this.dispatchLocalEvent({\n                    type: 'advancedFilterBuilderValueChanged',\n                }),\n            advancedFilterBuilderValidChanged: () => this.updateValidity(),\n        });\n    }\n\n    public setState(params: {\n        disableMoveUp?: boolean;\n        disableMoveDown?: boolean;\n        treeLines: boolean[];\n        showStartTreeLine: boolean;\n    }): void {\n        const { level } = this.item;\n        if (level === 0) {\n            return;\n        }\n        const { showMove } = this.item;\n        const { disableMoveUp, disableMoveDown, treeLines, showStartTreeLine } = params;\n        this.updateTreeLines(treeLines, showStartTreeLine);\n        this.updateAriaExpanded();\n        if (showMove) {\n            this.moveUpDisabled = !!disableMoveUp;\n            this.moveDownDisabled = !!disableMoveDown;\n            this.eMoveUpButton.classList.toggle('ag-advanced-filter-builder-item-button-disabled', disableMoveUp);\n            this.eMoveDownButton.classList.toggle('ag-advanced-filter-builder-item-button-disabled', disableMoveDown);\n            _setAriaDisabled(this.eMoveUpButton, !!disableMoveUp);\n            _setAriaDisabled(this.eMoveDownButton, !!disableMoveDown);\n            this.moveUpTooltipFeature.refreshToolTip();\n            this.moveDownTooltipFeature.refreshToolTip();\n        }\n    }\n\n    public focusMoveButton(backwards: boolean): void {\n        (backwards ? this.eMoveUpButton : this.eMoveDownButton).focus();\n    }\n\n    public afterAdd(): void {\n        this.ePillWrapper.getFocusableElement().focus();\n    }\n\n    private setupTreeLines(level: number): void {\n        for (let i = 0; i < level; i++) {\n            const eTreeLine = document.createElement('div');\n            this.eTreeLines.appendChild(eTreeLine);\n        }\n    }\n\n    private updateTreeLines(treeLines: boolean[], showStartTreeLine: boolean): void {\n        const lastTreeLineIndex = treeLines.length - 1;\n        const { children } = this.eTreeLines;\n        for (let i = 0; i < lastTreeLineIndex; i++) {\n            const eTreeLine = children.item(i);\n            if (eTreeLine) {\n                eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical', !treeLines[i]);\n            }\n        }\n        const eTreeLine = children.item(lastTreeLineIndex);\n        if (eTreeLine) {\n            eTreeLine.classList.add('ag-advanced-filter-builder-item-tree-line-horizontal');\n            const isLastChild = treeLines[lastTreeLineIndex];\n            eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical-top', isLastChild);\n            eTreeLine.classList.toggle('ag-advanced-filter-builder-item-tree-line-vertical', !isLastChild);\n        }\n        this.eDragHandle.classList.toggle(\n            'ag-advanced-filter-builder-item-tree-line-vertical-bottom',\n            showStartTreeLine\n        );\n    }\n\n    private setupValidation(): void {\n        this.eValidation.appendChild(_createIconNoSpan('advancedFilterBuilderInvalid', this.gos)!);\n        this.validationTooltipFeature = this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eValidation,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () => this.ePillWrapper.getValidationMessage(),\n                getTooltipShowDelayOverride: () => 1000,\n            })\n        );\n        this.updateValidity();\n    }\n\n    private setupAddButton(): void {\n        const addButtonParams = getAdvancedFilterBuilderAddButtonParams(\n            (key) => this.advancedFilterExpressionService.translate(key),\n            this.gos.get('advancedFilterBuilderParams')?.addSelectWidth\n        );\n        const eAddButton = this.createManagedBean(new AddDropdownComp(addButtonParams));\n        this.addManagedListeners(eAddButton, {\n            fieldPickerValueSelected: ({ value }: FieldPickerValueSelectedEvent) =>\n                this.dispatchLocalEvent<AdvancedFilterBuilderAddEvent>({\n                    type: 'advancedFilterBuilderAdded',\n                    item: this.item,\n                    isJoin: value.key === 'join',\n                }),\n        });\n        this.eAddButton.appendChild(eAddButton.getGui());\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eAddButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () =>\n                    this.advancedFilterExpressionService.translate('advancedFilterBuilderAddButtonTooltip'),\n            })\n        );\n    }\n\n    private setupRemoveButton(): void {\n        this.eRemoveButton.appendChild(_createIconNoSpan('advancedFilterBuilderRemove', this.gos)!);\n        this.addManagedListeners(this.eRemoveButton, {\n            click: () => this.removeItem(),\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.removeItem();\n                        break;\n                }\n            },\n        });\n\n        this.createManagedBean(\n            new TooltipFeature({\n                getGui: () => this.eRemoveButton,\n                getLocation: () => 'advancedFilter',\n                getTooltipValue: () =>\n                    this.advancedFilterExpressionService.translate('advancedFilterBuilderRemoveButtonTooltip'),\n            })\n        );\n        _setAriaLabel(\n            this.eRemoveButton,\n            this.advancedFilterExpressionService.translate('advancedFilterBuilderRemoveButtonTooltip')\n        );\n\n        this.activateTabIndex([this.eRemoveButton]);\n    }\n\n    private setupMoveButtons(showMove?: boolean): void {\n        if (showMove) {\n            this.eMoveUpButton.appendChild(_createIconNoSpan('advancedFilterBuilderMoveUp', this.gos)!);\n\n            this.addManagedListeners(this.eMoveUpButton, {\n                click: () => this.moveItem(true),\n                keydown: (event: KeyboardEvent) => {\n                    switch (event.key) {\n                        case KeyCode.ENTER:\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.moveItem(true);\n                            break;\n                    }\n                },\n            });\n\n            this.moveUpTooltipFeature = this.createManagedBean(\n                new TooltipFeature({\n                    getGui: () => this.eMoveUpButton,\n                    getLocation: () => 'advancedFilter',\n                    getTooltipValue: () =>\n                        this.moveUpDisabled\n                            ? null\n                            : this.advancedFilterExpressionService.translate(\n                                  'advancedFilterBuilderMoveUpButtonTooltip'\n                              ),\n                })\n            );\n            _setAriaLabel(\n                this.eMoveUpButton,\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveUpButtonTooltip')\n            );\n\n            this.eMoveDownButton.appendChild(_createIconNoSpan('advancedFilterBuilderMoveDown', this.gos)!);\n            this.addManagedListeners(this.eMoveDownButton, {\n                click: () => this.moveItem(false),\n                keydown: (event: KeyboardEvent) => {\n                    switch (event.key) {\n                        case KeyCode.ENTER:\n                            event.preventDefault();\n                            _stopPropagationForAgGrid(event);\n                            this.moveItem(false);\n                            break;\n                    }\n                },\n            });\n\n            this.moveDownTooltipFeature = this.createManagedBean(\n                new TooltipFeature({\n                    getGui: () => this.eMoveDownButton,\n                    getLocation: () => 'advancedFilter',\n                    getTooltipValue: () =>\n                        this.moveDownDisabled\n                            ? null\n                            : this.advancedFilterExpressionService.translate(\n                                  'advancedFilterBuilderMoveDownButtonTooltip'\n                              ),\n                })\n            );\n            _setAriaLabel(\n                this.eMoveDownButton,\n                this.advancedFilterExpressionService.translate('advancedFilterBuilderMoveDownButtonTooltip')\n            );\n\n            this.activateTabIndex([this.eMoveUpButton, this.eMoveDownButton]);\n        } else {\n            _setDisplayed(this.eMoveUpButton, false);\n            _setDisplayed(this.eMoveDownButton, false);\n        }\n    }\n\n    private updateValidity(): void {\n        _setVisible(this.eValidation, !this.item.valid);\n        this.validationTooltipFeature.refreshToolTip();\n        this.updateAriaLabel();\n    }\n\n    private createPill(params: CreatePillParams): SelectPillComp | InputPillComp {\n        const { key, displayValue, cssClass, update, ariaLabel } = params;\n        const onUpdated = (key: string) => {\n            if (key == null) {\n                return;\n            }\n            update(key);\n            this.dispatchLocalEvent({\n                type: 'advancedFilterBuilderValueChanged',\n            });\n        };\n        if (params.isSelect) {\n            const { getEditorParams, pickerAriaLabelKey, pickerAriaLabelValue } = params;\n            const advancedFilterBuilderParams = this.gos.get('advancedFilterBuilderParams');\n            const minPickerWidth = `${advancedFilterBuilderParams?.pillSelectMinWidth ?? 140}px`;\n            const maxPickerWidth = `${advancedFilterBuilderParams?.pillSelectMaxWidth ?? 200}px`;\n            const comp = this.createBean(\n                new SelectPillComp({\n                    pickerAriaLabelKey,\n                    pickerAriaLabelValue,\n                    pickerType: 'ag-list',\n                    value: {\n                        key,\n                        displayValue,\n                    },\n                    valueFormatter: (value: AutocompleteEntry) =>\n                        value == null ? null : value.displayValue ?? value.key,\n                    variableWidth: true,\n                    minPickerWidth,\n                    maxPickerWidth,\n                    getEditorParams,\n                    wrapperClassName: cssClass,\n                    ariaLabel,\n                })\n            );\n            this.addManagedListeners(comp, {\n                fieldPickerValueSelected: ({ value }: FieldPickerValueSelectedEvent) => onUpdated(value?.key),\n            });\n            return comp;\n        } else {\n            const comp = this.createBean(\n                new InputPillComp({\n                    value: displayValue,\n                    cssClass,\n                    type: this.getInputType(params.baseCellDataType),\n                    ariaLabel,\n                })\n            );\n            this.addManagedListeners(comp, { fieldValueChanged: ({ value }: FieldValueEvent) => onUpdated(value) });\n            return comp;\n        }\n    }\n\n    private getInputType(baseCellDataType: BaseCellDataType): 'text' | 'number' | 'date' {\n        switch (baseCellDataType) {\n            case 'text':\n            case 'object':\n            case 'boolean':\n                return 'text';\n            case 'number':\n                return 'number';\n            case 'date':\n            case 'dateString':\n                return 'date';\n        }\n    }\n\n    private setupDragging(): void {\n        const dragSource: DragSource = {\n            type: DragSourceType.AdvancedFilterBuilder,\n            eElement: this.eDragHandle,\n            dragItemName: () => this.ePillWrapper.getDragName(),\n            getDefaultIconName: () => 'notAllowed',\n            getDragItem: () => ({}),\n            onDragStarted: () =>\n                this.dragFeature.dispatchLocalEvent<AdvancedFilterBuilderDragStartedEvent>({\n                    type: 'advancedFilterBuilderDragStarted',\n                    item: this.item,\n                }),\n            onDragStopped: () =>\n                this.dragFeature.dispatchLocalEvent({\n                    type: 'advancedFilterBuilderDragEnded',\n                }),\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private updateAriaLabel(): void {\n        const wrapperLabel = this.ePillWrapper.getAriaLabel();\n        const level = `${this.item.level + 1}`;\n        const validationMessage = this.ePillWrapper.getValidationMessage();\n        let ariaLabel;\n        if (validationMessage) {\n            ariaLabel = this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItemValidation', [\n                wrapperLabel,\n                level,\n                validationMessage,\n            ]);\n        } else {\n            ariaLabel = this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderItem', [\n                wrapperLabel,\n                level,\n            ]);\n        }\n        _setAriaLabel(this.focusWrapper, ariaLabel);\n    }\n\n    private updateAriaExpanded(): void {\n        _removeAriaExpanded(this.focusWrapper);\n        const { filterModel } = this.item;\n        if (filterModel?.filterType === 'join' && filterModel.conditions.length) {\n            _setAriaExpanded(this.focusWrapper, true);\n        }\n    }\n\n    private removeItem(): void {\n        this.dispatchLocalEvent<AdvancedFilterBuilderRemoveEvent>({\n            type: 'advancedFilterBuilderRemoved',\n            item: this.item,\n        });\n    }\n\n    private moveItem(backwards: boolean): void {\n        this.dispatchLocalEvent<AdvancedFilterBuilderMoveEvent>({\n            type: 'advancedFilterBuilderMoved',\n            item: this.item,\n            backwards,\n        });\n    }\n}\n", "import type { AgColumn, BaseCellDataType, BeanCollection, ColumnAdvancedFilterModel } from '@ag-grid-community/core';\nimport { Component, _exists, _removeFromParent } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\nimport type {\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    CreatePillParams,\n} from './iAdvancedFilterBuilder';\nimport type { InputPillComp } from './inputPillComp';\nimport type { SelectPillComp } from './selectPillComp';\n\nexport class ConditionPillWrapperComp extends Component<AdvancedFilterBuilderEvents> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private item: AdvancedFilterBuilderItem;\n    private createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    private filterModel: ColumnAdvancedFilterModel;\n    private baseCellDataType: BaseCellDataType;\n    private column: AgColumn | undefined;\n    private numOperands: number;\n    private eColumnPill: SelectPillComp | InputPillComp;\n    private eOperatorPill: SelectPillComp | InputPillComp | undefined;\n    private eOperandPill: SelectPillComp | InputPillComp | undefined;\n    private validationMessage: string | null = null;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-condition\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: {\n        item: AdvancedFilterBuilderItem;\n        createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    }): void {\n        const { item, createPill } = params;\n        this.item = item;\n        this.createPill = createPill;\n        this.filterModel = item.filterModel as ColumnAdvancedFilterModel;\n        this.setupColumnCondition(this.filterModel);\n        this.validate();\n\n        this.addDestroyFunc(() => this.destroyBeans([this.eColumnPill, this.eOperatorPill, this.eOperandPill]));\n    }\n\n    public getDragName(): string {\n        return this.filterModel.colId\n            ? this.advancedFilterExpressionService.parseColumnFilterModel(this.filterModel)\n            : this.getDefaultColumnDisplayValue();\n    }\n\n    public getAriaLabel(): string {\n        return `${this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderFilterItem')} ${this.getDragName()}`;\n    }\n\n    public getValidationMessage(): string | null {\n        return this.validationMessage;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eColumnPill.getFocusableElement();\n    }\n\n    private setupColumnCondition(filterModel: ColumnAdvancedFilterModel): void {\n        const columnDetails = this.advancedFilterExpressionService.getColumnDetails(filterModel.colId);\n        this.baseCellDataType = columnDetails.baseCellDataType;\n        this.column = columnDetails.column;\n        this.numOperands = this.getNumOperands(this.getOperatorKey());\n\n        this.eColumnPill = this.createPill({\n            key: this.getColumnKey(),\n            displayValue: this.getColumnDisplayValue() ?? this.getDefaultColumnDisplayValue(),\n            cssClass: 'ag-advanced-filter-builder-column-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.advancedFilterExpressionService.getColumnAutocompleteEntries() }),\n            update: (key) => this.setColumnKey(key),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderColumnSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Column Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderColumn'),\n        });\n        this.getGui().appendChild(this.eColumnPill.getGui());\n\n        if (_exists(this.getColumnKey())) {\n            this.createOperatorPill();\n            if (this.hasOperand()) {\n                this.createOperandPill();\n            }\n        }\n    }\n\n    private createOperatorPill(): void {\n        this.eOperatorPill = this.createPill({\n            key: this.getOperatorKey(),\n            displayValue: this.getOperatorDisplayValue() ?? this.getDefaultOptionSelectValue(),\n            cssClass: 'ag-advanced-filter-builder-option-pill',\n            isSelect: true,\n            getEditorParams: () => ({ values: this.getOperatorAutocompleteEntries() }),\n            update: (key) => this.setOperatorKey(key),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderOptionSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Option Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderOption'),\n        });\n        this.eColumnPill.getGui().insertAdjacentElement('afterend', this.eOperatorPill.getGui());\n    }\n\n    private createOperandPill(): void {\n        const key = this.getOperandDisplayValue() ?? '';\n        this.eOperandPill = this.createPill({\n            key,\n            displayValue: key,\n            baseCellDataType: this.baseCellDataType,\n            cssClass: 'ag-advanced-filter-builder-value-pill',\n            isSelect: false,\n            update: (key) => this.setOperand(key),\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderValue'),\n        });\n        this.getGui().appendChild(this.eOperandPill.getGui());\n    }\n\n    private getColumnKey(): string {\n        return this.filterModel.colId;\n    }\n\n    private getColumnDisplayValue(): string | undefined {\n        return this.advancedFilterExpressionService.getColumnDisplayValue(this.filterModel);\n    }\n\n    private getOperatorKey(): string {\n        return this.filterModel.type;\n    }\n\n    private getOperatorDisplayValue(): string | undefined {\n        return this.advancedFilterExpressionService.getOperatorDisplayValue(this.filterModel);\n    }\n\n    private getOperandDisplayValue(): string {\n        return this.advancedFilterExpressionService.getOperandDisplayValue(this.filterModel, true);\n    }\n\n    private hasOperand(): boolean {\n        return this.numOperands > 0;\n    }\n\n    private getOperatorAutocompleteEntries(): AutocompleteEntry[] {\n        return this.column\n            ? this.advancedFilterExpressionService.getOperatorAutocompleteEntries(this.column, this.baseCellDataType)\n            : [];\n    }\n\n    private setColumnKey(colId: string): void {\n        if (!this.eOperatorPill) {\n            this.createOperatorPill();\n        }\n\n        const newColumnDetails = this.advancedFilterExpressionService.getColumnDetails(colId);\n        this.column = newColumnDetails.column;\n        const newBaseCellDataType = newColumnDetails.baseCellDataType;\n        if (this.baseCellDataType !== newBaseCellDataType) {\n            this.baseCellDataType = newBaseCellDataType;\n\n            this.setOperatorKey(undefined as any);\n            if (this.eOperatorPill) {\n                _removeFromParent(this.eOperatorPill.getGui());\n                this.destroyBean(this.eOperatorPill);\n                this.createOperatorPill();\n            }\n            this.validate();\n        }\n        this.filterModel.colId = colId;\n        this.filterModel.filterType = this.baseCellDataType;\n    }\n\n    private setOperatorKey(operator: string): void {\n        const newNumOperands = this.getNumOperands(operator);\n        if (newNumOperands !== this.numOperands) {\n            this.numOperands = newNumOperands;\n            if (newNumOperands === 0) {\n                this.destroyOperandPill();\n            } else {\n                this.createOperandPill();\n                if (this.baseCellDataType !== 'number') {\n                    this.setOperand('');\n                }\n            }\n        }\n        this.filterModel.type = operator as any;\n        this.validate();\n    }\n\n    private setOperand(operand: string): void {\n        let parsedOperand: string | number = operand;\n        if (this.column) {\n            parsedOperand =\n                this.advancedFilterExpressionService.getOperandModelValue(\n                    operand,\n                    this.baseCellDataType,\n                    this.column\n                ) ?? '';\n        }\n        (this.filterModel as any).filter = parsedOperand;\n        this.validate();\n    }\n\n    private getNumOperands(operator: string): number {\n        return (\n            this.advancedFilterExpressionService.getExpressionOperator(this.baseCellDataType, operator)?.numOperands ??\n            0\n        );\n    }\n\n    private destroyOperandPill(): void {\n        delete (this.filterModel as any).filter;\n        this.getGui().removeChild(this.eOperandPill!.getGui());\n        this.destroyBean(this.eOperandPill);\n        this.eOperandPill = undefined;\n    }\n\n    private validate(): void {\n        let validationMessage = null;\n        if (!_exists(this.getColumnKey())) {\n            validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationSelectColumn'\n            );\n        } else if (!_exists(this.getOperatorKey())) {\n            validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationSelectOption'\n            );\n        } else if (this.numOperands > 0 && !_exists(this.getOperandDisplayValue())) {\n            validationMessage = this.advancedFilterExpressionService.translate(\n                'advancedFilterBuilderValidationEnterValue'\n            );\n        }\n\n        this.item.valid = !validationMessage;\n        if (validationMessage !== this.validationMessage) {\n            this.validationMessage = validationMessage;\n            this.dispatchLocalEvent({\n                type: 'advancedFilterBuilderValidChanged',\n            });\n        }\n    }\n\n    private getDefaultColumnDisplayValue(): string {\n        return this.advancedFilterExpressionService.translate('advancedFilterBuilderSelectColumn');\n    }\n\n    private getDefaultOptionSelectValue(): string {\n        return this.advancedFilterExpressionService.translate('advancedFilterBuilderSelectOption');\n    }\n}\n", "import type { BeanCollection, FieldValueEvent, WithoutGridCommon } from '@ag-grid-community/core';\nimport {\n    AgInputDateField,\n    AgInputNumberField,\n    AgInputTextField,\n    Component,\n    KeyCode,\n    RefPlaceholder,\n    _exists,\n    _setAriaDescribedBy,\n    _setAriaLabel,\n    _setDisplayed,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\n\nexport type InputPillCompEvent = 'fieldValueChanged';\nexport class InputPillComp extends Component<InputPillCompEvent> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private readonly ePill: HTMLElement = RefPlaceholder;\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n\n    private eEditor: AgInputTextField | undefined;\n    private value: string;\n\n    constructor(\n        private readonly params: {\n            value: string;\n            cssClass: string;\n            type: 'text' | 'number' | 'date';\n            ariaLabel: string;\n        }\n    ) {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-pill-wrapper\" role=\"presentation\">\n                <div data-ref=\"ePill\" class=\"ag-advanced-filter-builder-pill\" role=\"button\">\n                    <span data-ref=\"eLabel\" class=\"ag-advanced-filter-builder-pill-display\"></span>\n                </div>\n            </div>\n        `);\n        this.value = params.value;\n    }\n\n    public postConstruct(): void {\n        const { cssClass, ariaLabel } = this.params;\n\n        this.ePill.classList.add(cssClass);\n        this.activateTabIndex([this.ePill]);\n\n        this.eLabel.id = `${this.getCompId()}`;\n        _setAriaDescribedBy(this.ePill, this.eLabel.id);\n        _setAriaLabel(this.ePill, ariaLabel);\n\n        this.renderValue();\n\n        this.addManagedListeners(this.ePill, {\n            click: (event: MouseEvent) => {\n                event.preventDefault();\n                this.showEditor();\n            },\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.showEditor();\n                        break;\n                }\n            },\n        });\n        this.addDestroyFunc(() => this.destroyBean(this.eEditor));\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.ePill;\n    }\n\n    private showEditor(): void {\n        if (this.eEditor) {\n            return;\n        }\n        _setDisplayed(this.ePill, false);\n        this.eEditor = this.createEditorComp(this.params.type);\n        this.eEditor.setValue(this.value);\n        const eEditorGui = this.eEditor.getGui();\n        this.eEditor.addManagedElementListeners(eEditorGui, {\n            keydown: (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case KeyCode.ENTER:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.updateValue(true);\n                        break;\n                    case KeyCode.ESCAPE:\n                        event.preventDefault();\n                        _stopPropagationForAgGrid(event);\n                        this.hideEditor(true);\n                        break;\n                }\n            },\n            focusout: () => this.updateValue(false),\n        });\n        this.getGui().appendChild(eEditorGui);\n        this.eEditor.getFocusableElement().focus();\n    }\n\n    private createEditorComp(\n        type: 'text' | 'number' | 'date'\n    ): AgInputTextField | AgInputNumberField | AgInputDateField {\n        let comp;\n        switch (type) {\n            case 'text':\n                comp = new AgInputTextField();\n                break;\n            case 'number':\n                comp = new AgInputNumberField();\n                break;\n            case 'date':\n                comp = new AgInputDateField();\n                break;\n        }\n        return this.createBean(comp);\n    }\n\n    private hideEditor(keepFocus: boolean): void {\n        const { eEditor } = this;\n        if (!eEditor) {\n            return;\n        }\n        this.eEditor = undefined;\n        this.getGui().removeChild(eEditor.getGui());\n        this.destroyBean(eEditor);\n        _setDisplayed(this.ePill, true);\n        if (keepFocus) {\n            this.ePill.focus();\n        }\n    }\n\n    private renderValue(): void {\n        let value: string;\n        this.eLabel.classList.remove(\n            'ag-advanced-filter-builder-value-empty',\n            'ag-advanced-filter-builder-value-number',\n            'ag-advanced-filter-builder-value-text'\n        );\n        if (!_exists(this.value)) {\n            value = this.advancedFilterExpressionService.translate('advancedFilterBuilderEnterValue');\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-empty');\n        } else if (this.params.type === 'number') {\n            value = this.value;\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-number');\n        } else {\n            value = `\"${this.value}\"`;\n            this.eLabel.classList.add('ag-advanced-filter-builder-value-text');\n        }\n        this.eLabel.innerText = value;\n    }\n\n    private updateValue(keepFocus: boolean): void {\n        if (!this.eEditor) {\n            return;\n        }\n        const value = this.eEditor!.getValue() ?? '';\n        this.dispatchLocalEvent<WithoutGridCommon<FieldValueEvent>>({\n            type: 'fieldValueChanged',\n            value,\n        });\n        this.value = value;\n        this.renderValue();\n        this.hideEditor(keepFocus);\n    }\n}\n", "import type { BeanCollection, JoinAdvancedFilterModel } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nimport type { AdvancedFilterExpressionService } from '../advancedFilterExpressionService';\nimport type {\n    AdvancedFilterBuilderEvents,\n    AdvancedFilterBuilderItem,\n    CreatePillParams,\n} from './iAdvancedFilterBuilder';\nimport type { InputPillComp } from './inputPillComp';\nimport type { SelectPillComp } from './selectPillComp';\n\nexport class JoinPillWrapperComp extends Component<AdvancedFilterBuilderEvents> {\n    private advancedFilterExpressionService: AdvancedFilterExpressionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.advancedFilterExpressionService = beans.advancedFilterExpressionService as AdvancedFilterExpressionService;\n    }\n\n    private filterModel: JoinAdvancedFilterModel;\n    private ePill: SelectPillComp | InputPillComp;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-advanced-filter-builder-item-condition\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: {\n        item: AdvancedFilterBuilderItem;\n        createPill: (params: CreatePillParams) => SelectPillComp | InputPillComp;\n    }): void {\n        const { item, createPill } = params;\n        const filterModel = item.filterModel as JoinAdvancedFilterModel;\n        this.filterModel = filterModel;\n\n        this.ePill = createPill({\n            key: filterModel.type,\n            displayValue: this.advancedFilterExpressionService.parseJoinOperator(filterModel),\n            cssClass: 'ag-advanced-filter-builder-join-pill',\n            isSelect: true,\n            getEditorParams: () => ({\n                values: this.advancedFilterExpressionService.getJoinOperatorAutocompleteEntries(),\n            }),\n            update: (key) => (filterModel.type = key as any),\n            pickerAriaLabelKey: 'ariaLabelAdvancedFilterBuilderJoinSelectField',\n            pickerAriaLabelValue: 'Advanced Filter Builder Join Operator Select Field',\n            ariaLabel: this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderJoinOperator'),\n        });\n        this.getGui().appendChild(this.ePill.getGui());\n        this.addDestroyFunc(() => this.destroyBean(this.ePill));\n    }\n\n    public getDragName(): string {\n        return this.advancedFilterExpressionService.parseJoinOperator(this.filterModel);\n    }\n\n    public getAriaLabel(): string {\n        return `${this.advancedFilterExpressionService.translate('ariaAdvancedFilterBuilderGroupItem')} ${this.getDragName()}`;\n    }\n\n    public getValidationMessage(): string | null {\n        return null;\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.ePill.getFocusableElement();\n    }\n}\n", "import type { RichSelectParams } from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    _setAriaLabel,\n    _setAriaLabelledBy,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\nimport { AgRichSelect } from '@ag-grid-enterprise/core';\n\nimport type { AutocompleteEntry } from '../autocomplete/autocompleteParams';\n\nexport interface SelectPillParams extends RichSelectParams<AutocompleteEntry> {\n    getEditorParams: () => { values?: any[] };\n    wrapperClassName: string;\n    ariaLabel: string;\n}\n\nexport class SelectPillComp extends AgRichSelect<AutocompleteEntry> {\n    constructor(private readonly params: SelectPillParams) {\n        super({\n            ...params,\n            template: /* html */ `\n                <div class=\"ag-picker-field ag-advanced-filter-builder-pill-wrapper\" role=\"presentation\">\n                    <div data-ref=\"eLabel\"></div>\n                    <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-advanced-filter-builder-pill ag-picker-collapsed\">\n                        <div data-ref=\"eDisplayField\" class=\"ag-picker-field-display ag-advanced-filter-builder-pill-display\"></div>\n                        <ag-input-text-field data-ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                        <span data-ref=\"eDeselect\" class=\"ag-rich-select-deselect-button ag-picker-field-icon\" role=\"presentation\"></span>\n                        <div data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                    </div>\n                </div>`,\n            agComponents: [AgInputTextFieldSelector],\n        });\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.eWrapper;\n    }\n\n    public override showPicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.showPicker());\n    }\n\n    public override hidePicker(): void {\n        // avoid focus handling issues with multiple rich selects\n        setTimeout(() => super.hidePicker());\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n\n        const { wrapperClassName, ariaLabel } = this.params;\n\n        this.eWrapper.classList.add(wrapperClassName);\n        _setAriaLabelledBy(this.eWrapper, '');\n        _setAriaLabel(this.eWrapper, ariaLabel);\n    }\n\n    protected override createPickerComponent() {\n        if (!this.values) {\n            const { values } = this.params.getEditorParams();\n            this.values = values!;\n            const key = (this.value as AutocompleteEntry).key;\n            const value = values!.find((value) => value.key === key) ?? {\n                key,\n                displayValue: (this.value as AutocompleteEntry).displayValue,\n            };\n            this.value = value;\n        }\n        return super.createPickerComponent();\n    }\n\n    protected override onEnterKeyDown(event: KeyboardEvent): void {\n        _stopPropagationForAgGrid(event);\n        if (this.isPickerDisplayed) {\n            super.onEnterKeyDown(event);\n        } else {\n            event.preventDefault();\n            this.showPicker();\n        }\n    }\n}\n", "import type { AdvancedFilterModel } from '@ag-grid-community/core';\n\nimport type { ADVANCED_FILTER_LOCALE_TEXT } from './advancedFilterLocaleText';\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport { ColFilterExpressionParser } from './colFilterExpressionParser';\nimport { findMatch } from './filterExpressionOperators';\nimport type {\n    AutocompleteUpdate,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n    FilterExpressionValidationError,\n} from './filterExpressionUtils';\nimport { checkAndUpdateExpression, findEndPosition, getSearchString, updateExpression } from './filterExpressionUtils';\n\nclass OperatorParser {\n    private operators: string[] = [];\n    private parsedOperator: 'AND' | 'OR';\n    private operatorStartPositions: number[] = [];\n    private operatorEndPositions: (number | undefined)[] = [];\n    private activeOperator: number = 0;\n    private validationError: FilterExpressionValidationError | null = null;\n\n    constructor(private params: FilterExpressionParserParams) {}\n\n    public parseExpression(i: number): number {\n        this.operators.push('');\n        this.operatorStartPositions.push(i);\n        this.operatorEndPositions.push(undefined);\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === ' ') {\n                const isComplete = this.parseOperator(i - 1);\n                if (isComplete) {\n                    this.activeOperator++;\n                    return i - 1;\n                } else {\n                    this.operators[this.activeOperator] += char;\n                }\n            } else {\n                this.operators[this.activeOperator] += char;\n            }\n            i++;\n        }\n        this.parseOperator(i - 1);\n\n        return i;\n    }\n\n    public isValid(): boolean {\n        return !this.validationError && (!this.operators.length || !!this.parsedOperator);\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        return this.validationError;\n    }\n\n    public getFunction(): '&&' | '||' {\n        return this.parsedOperator === 'OR' ? '||' : '&&';\n    }\n\n    public getModel(): 'AND' | 'OR' {\n        return this.parsedOperator === 'OR' ? 'OR' : 'AND';\n    }\n\n    public getAutocompleteListParams(position: number, operatorIndex?: number): AutocompleteListParams {\n        let searchString: string;\n        if (operatorIndex == null) {\n            searchString = '';\n        } else {\n            const operator = this.operators[operatorIndex];\n            const operatorEndPosition = this.operatorEndPositions[operatorIndex];\n            searchString = getSearchString(\n                operator,\n                position,\n                operatorEndPosition == null ? this.params.expression.length : operatorEndPosition + 1\n            );\n        }\n        let entries = this.params.advancedFilterExpressionService.getJoinOperatorAutocompleteEntries();\n        if (operatorIndex || (operatorIndex == null && this.activeOperator)) {\n            // if operator already chosen, don't allow other operators\n            entries = entries.filter(({ key }) => key === this.parsedOperator);\n        }\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            entries,\n            'join',\n            searchString\n        );\n    }\n\n    public updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        operatorIndex: number\n    ): AutocompleteUpdate {\n        let { expression } = this.params;\n        const updatedValuePart = updateEntry.displayValue ?? updateEntry.key;\n        if (operatorIndex === 0) {\n            // need to update all others\n            for (let i = this.operatorEndPositions.length - 1; i > 0; i--) {\n                const operatorEndPosition = this.operatorEndPositions[i];\n                if (operatorEndPosition == null) {\n                    continue;\n                }\n                expression = updateExpression(\n                    expression,\n                    this.operatorStartPositions[i],\n                    operatorEndPosition,\n                    updatedValuePart\n                ).updatedValue;\n            }\n        }\n        // if we don't have a start position, haven't typed anything yet, so use current position\n        const startPosition =\n            this.operatorStartPositions.length > operatorIndex ? this.operatorStartPositions[operatorIndex] : position;\n        const endPosition =\n            (this.operatorEndPositions.length > operatorIndex ? this.operatorEndPositions[operatorIndex] : undefined) ??\n            findEndPosition(expression, position, true).endPosition;\n        return updateExpression(expression, startPosition, endPosition, updatedValuePart, true);\n    }\n\n    public getNumOperators(): number {\n        return this.operators.length;\n    }\n\n    public getLastOperatorEndPosition(): number | undefined {\n        return this.operatorEndPositions[this.operatorEndPositions.length - 1];\n    }\n\n    private parseOperator(endPosition: number): boolean {\n        const operator = this.operators.length > this.activeOperator ? this.operators[this.activeOperator] : '';\n        const joinOperators = this.params.advancedFilterExpressionService.getExpressionJoinOperators();\n        const parsedValue = findMatch(operator, joinOperators, (v) => v) as 'AND' | 'OR';\n        if (parsedValue) {\n            // exact match\n            this.operatorEndPositions[this.activeOperator] = endPosition;\n            const displayValue = joinOperators[parsedValue];\n            if (this.activeOperator) {\n                if (parsedValue !== this.parsedOperator) {\n                    if (!this.validationError) {\n                        this.validationError = {\n                            message: this.params.advancedFilterExpressionService.translate(\n                                'advancedFilterValidationJoinOperatorMismatch'\n                            ),\n                            startPosition: endPosition - operator.length + 1,\n                            endPosition,\n                        };\n                    }\n                    return false;\n                }\n            } else {\n                this.parsedOperator = parsedValue;\n            }\n            if (operator !== displayValue) {\n                checkAndUpdateExpression(this.params, operator, displayValue, endPosition);\n                this.operators[this.activeOperator] = displayValue;\n            }\n            return true;\n        } else if (parsedValue === null) {\n            // partial match\n            return false;\n        } else {\n            // no match\n            if (!this.validationError) {\n                this.validationError = {\n                    message: this.params.advancedFilterExpressionService.translate(\n                        'advancedFilterValidationInvalidJoinOperator'\n                    ),\n                    startPosition: endPosition - operator.length + 1,\n                    endPosition,\n                };\n            }\n            return true;\n        }\n    }\n}\n\nexport class JoinFilterExpressionParser {\n    private expectingExpression: boolean = true;\n    private expectingOperator: boolean = false;\n    private expressionParsers: (JoinFilterExpressionParser | ColFilterExpressionParser)[] = [];\n    private operatorParser: OperatorParser = new OperatorParser(this.params);\n    private endPosition: number;\n    private missingEndBracket: boolean = false;\n    private extraEndBracket: boolean = false;\n\n    constructor(\n        private params: FilterExpressionParserParams,\n        public readonly startPosition: number\n    ) {}\n\n    public parseExpression(): number {\n        let i = this.startPosition;\n        const { expression } = this.params;\n        while (i < expression.length) {\n            const char = expression[i];\n            if (char === '(' && !this.expectingOperator) {\n                const nestedParser = new JoinFilterExpressionParser(this.params, i + 1);\n                i = nestedParser.parseExpression();\n                this.expressionParsers.push(nestedParser);\n                this.expectingExpression = false;\n                this.expectingOperator = true;\n            } else if (char === ')') {\n                this.endPosition = i - 1;\n                if (this.startPosition === 0) {\n                    this.extraEndBracket = true;\n                }\n                return i;\n            } else if (char === ' ') {\n                // ignore extra whitespace\n            } else if (this.expectingExpression) {\n                const nestedParser = new ColFilterExpressionParser(this.params, i);\n                i = nestedParser.parseExpression();\n                this.expressionParsers.push(nestedParser);\n                this.expectingExpression = false;\n                this.expectingOperator = true;\n            } else if (this.expectingOperator) {\n                i = this.operatorParser.parseExpression(i);\n                this.expectingOperator = false;\n                this.expectingExpression = true;\n            }\n            i++;\n        }\n        if (this.startPosition > 0) {\n            this.missingEndBracket = true;\n        }\n\n        return i;\n    }\n\n    public isValid(): boolean {\n        return (\n            !this.missingEndBracket &&\n            !this.extraEndBracket &&\n            this.expressionParsers.length === this.operatorParser.getNumOperators() + 1 &&\n            this.operatorParser.isValid() &&\n            this.expressionParsers.every((expressionParser) => expressionParser.isValid())\n        );\n    }\n\n    public getValidationError(): FilterExpressionValidationError | null {\n        const operatorError = this.operatorParser.getValidationError();\n        for (let i = 0; i < this.expressionParsers.length; i++) {\n            const expressionError = this.expressionParsers[i].getValidationError();\n            if (expressionError) {\n                return operatorError && operatorError.startPosition < expressionError.startPosition\n                    ? operatorError\n                    : expressionError;\n            }\n        }\n        if (operatorError) {\n            return operatorError;\n        }\n        if (this.extraEndBracket) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(\n                    'advancedFilterValidationExtraEndBracket'\n                ),\n                startPosition: this.endPosition + 1,\n                endPosition: this.endPosition + 1,\n            };\n        }\n        let translateKey: keyof typeof ADVANCED_FILTER_LOCALE_TEXT | undefined;\n        if (this.expressionParsers.length === this.operatorParser.getNumOperators()) {\n            translateKey = 'advancedFilterValidationMissingCondition';\n        } else if (this.missingEndBracket) {\n            translateKey = 'advancedFilterValidationMissingEndBracket';\n        }\n        if (translateKey) {\n            return {\n                message: this.params.advancedFilterExpressionService.translate(translateKey),\n                startPosition: this.params.expression.length,\n                endPosition: this.params.expression.length,\n            };\n        }\n        return null;\n    }\n\n    public getFunctionString(params: FilterExpressionFunctionParams): string {\n        const hasMultipleExpressions = this.expressionParsers.length > 1;\n        const expression = this.expressionParsers\n            .map((expressionParser) => expressionParser.getFunctionString(params))\n            .join(` ${this.operatorParser.getFunction()} `);\n        return hasMultipleExpressions ? `(${expression})` : expression;\n    }\n\n    public getFunctionParsed(params: FilterExpressionFunctionParams): FilterExpressionFunction {\n        const operator = this.operatorParser.getFunction();\n        const funcs = this.expressionParsers.map((expressionParser) => expressionParser.getFunctionParsed(params));\n        const arrayFunc = operator === '&&' ? 'every' : 'some';\n        return (expressionProxy, node, p) => funcs[arrayFunc]((func) => func(expressionProxy, node, p));\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams | undefined {\n        if (this.endPosition != null && position > this.endPosition + 1) {\n            return undefined;\n        }\n        if (!this.expressionParsers.length) {\n            return this.getColumnAutocompleteListParams();\n        }\n\n        const expressionParserIndex = this.getExpressionParserIndex(position);\n\n        if (expressionParserIndex == null) {\n            if (this.params.expression[position] === '(') {\n                return { enabled: false };\n            }\n            // positioned before the expression, so new expression\n            return this.getColumnAutocompleteListParams();\n        }\n\n        const expressionParser = this.expressionParsers[expressionParserIndex];\n\n        const autocompleteType = expressionParser.getAutocompleteListParams(position);\n\n        if (!autocompleteType) {\n            // beyond the end of the expression\n            if (expressionParserIndex! < this.expressionParsers.length - 1) {\n                // in the middle of two expressions\n                return this.operatorParser.getAutocompleteListParams(position, expressionParserIndex);\n            }\n            if (this.expressionParsers.length === this.operatorParser.getNumOperators()) {\n                const operatorEndPosition = this.operatorParser.getLastOperatorEndPosition();\n                return operatorEndPosition == null || position <= operatorEndPosition + 1\n                    ? this.operatorParser.getAutocompleteListParams(position, this.operatorParser.getNumOperators() - 1)\n                    : this.getColumnAutocompleteListParams();\n            }\n            if (this.params.expression[position - 1] === ')') {\n                return { enabled: false };\n            }\n            return this.operatorParser.getAutocompleteListParams(position);\n        }\n\n        return autocompleteType;\n    }\n\n    public updateExpression(\n        position: number,\n        updateEntry: AutocompleteEntry,\n        type?: string\n    ): AutocompleteUpdate | null {\n        const expression = this.params.expression;\n\n        const expressionParserIndex = this.getExpressionParserIndex(position);\n\n        if (expressionParserIndex == null) {\n            // positioned before the expression\n            const updatedValuePart =\n                type === 'column'\n                    ? this.params.advancedFilterExpressionService.getColumnValue(updateEntry)\n                    : updateEntry.displayValue ?? updateEntry.key;\n            return updateExpression(expression, this.startPosition, this.startPosition, updatedValuePart, true);\n        }\n\n        const expressionParser = this.expressionParsers[expressionParserIndex];\n\n        const updatedExpression = expressionParser.updateExpression(position, updateEntry, type);\n\n        if (updatedExpression == null) {\n            if (type === 'column') {\n                // beyond the end of the expression, just do simple update\n                return updateExpression(\n                    expression,\n                    position,\n                    expression.length - 1,\n                    this.params.advancedFilterExpressionService.getColumnValue(updateEntry),\n                    true\n                );\n            } else if (this.endPosition != null && position > this.endPosition + 1) {\n                return null;\n            } else {\n                return this.operatorParser.updateExpression(position, updateEntry, expressionParserIndex);\n            }\n        }\n        return updatedExpression;\n    }\n\n    public getModel(): AdvancedFilterModel {\n        if (this.expressionParsers.length > 1) {\n            return {\n                filterType: 'join',\n                type: this.operatorParser.getModel(),\n                conditions: this.expressionParsers.map((parser) => parser.getModel()),\n            };\n        } else {\n            return this.expressionParsers[0].getModel();\n        }\n    }\n\n    private getColumnAutocompleteListParams(): AutocompleteListParams {\n        return this.params.advancedFilterExpressionService.generateAutocompleteListParams(\n            this.params.advancedFilterExpressionService.getColumnAutocompleteEntries(),\n            'column',\n            ''\n        );\n    }\n\n    private getExpressionParserIndex(position: number): number | undefined {\n        let expressionParserIndex: number | undefined;\n\n        for (let i = 0; i < this.expressionParsers.length; i++) {\n            const expressionParserToCheck = this.expressionParsers[i];\n            if (expressionParserToCheck.startPosition > position) {\n                break;\n            }\n            expressionParserIndex = i;\n        }\n\n        return expressionParserIndex;\n    }\n}\n", "import type { AdvancedFilterModel } from '@ag-grid-community/core';\n\nimport type { AutocompleteEntry, AutocompleteListParams } from './autocomplete/autocompleteParams';\nimport type {\n    AutocompleteUpdate,\n    FilterExpressionFunction,\n    FilterExpressionFunctionParams,\n    FilterExpressionParserParams,\n} from './filterExpressionUtils';\nimport { JoinFilterExpressionParser } from './joinFilterExpressionParser';\n\nexport class FilterExpressionParser {\n    private joinExpressionParser: JoinFilterExpressionParser;\n    private valid: boolean = false;\n\n    constructor(private params: FilterExpressionParserParams) {}\n\n    public parseExpression(): string {\n        this.joinExpressionParser = new JoinFilterExpressionParser(this.params, 0);\n        const i = this.joinExpressionParser.parseExpression();\n        this.valid = i >= this.params.expression.length - 1 && this.joinExpressionParser.isValid();\n        return this.params.expression;\n    }\n\n    public isValid(): boolean {\n        return this.valid;\n    }\n\n    public getValidationMessage(): string | null {\n        const error = this.joinExpressionParser.getValidationError();\n        if (!error) {\n            return null;\n        }\n        const { message, startPosition, endPosition } = error;\n        return startPosition < this.params.expression.length\n            ? this.params.advancedFilterExpressionService.translate('advancedFilterValidationMessage', [\n                  message,\n                  this.params.expression.slice(startPosition, endPosition + 1).trim(),\n              ])\n            : this.params.advancedFilterExpressionService.translate('advancedFilterValidationMessageAtEnd', [message]);\n    }\n\n    public getFunctionString(): {\n        functionString: string;\n        params: FilterExpressionFunctionParams;\n    } {\n        const params = this.createFunctionParams();\n        return {\n            functionString: `return ${this.joinExpressionParser.getFunctionString(params)};`,\n            params,\n        };\n    }\n\n    public getFunctionParsed(): {\n        expressionFunction: FilterExpressionFunction;\n        params: FilterExpressionFunctionParams;\n    } {\n        const params = this.createFunctionParams();\n        return {\n            expressionFunction: this.joinExpressionParser.getFunctionParsed(params),\n            params,\n        };\n    }\n\n    public getAutocompleteListParams(position: number): AutocompleteListParams {\n        return this.joinExpressionParser.getAutocompleteListParams(position) ?? { enabled: false };\n    }\n\n    public updateExpression(position: number, updateEntry: AutocompleteEntry, type?: string): AutocompleteUpdate {\n        return this.joinExpressionParser.updateExpression(position, updateEntry, type)!;\n    }\n\n    public getModel(): AdvancedFilterModel | null {\n        return this.isValid() ? this.joinExpressionParser.getModel() : null;\n    }\n\n    private createFunctionParams(): FilterExpressionFunctionParams {\n        return {\n            operands: [],\n            operators: [],\n            evaluatorParams: [],\n        };\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\n\nimport { GridLicenseManager as LicenseManager } from './license/gridLicenseManager';\nimport { VERSION } from './version';\nimport { AgMenuItemRenderer } from './widgets/agMenuItemRenderer';\n\nexport { AgWatermark } from './license/watermark';\n\nexport const EnterpriseCoreModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.EnterpriseCoreModule,\n    beans: [LicenseManager],\n    userComponents: [\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n};\n", "import type { ComponentSelector, IWatermark, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { ILicenseManager } from './shared/licenseManager';\nimport { LicenseManager } from './shared/licenseManager';\nimport { AgWatermarkSelector } from './watermark';\n\nexport class GridLicenseManager extends BeanStub implements NamedBean, IWatermark {\n    beanName = 'licenseManager' as const;\n\n    private licenseManager: LicenseManager;\n\n    public postConstruct(): void {\n        this.validateLicense();\n    }\n\n    public validateLicense(): void {\n        this.licenseManager = new LicenseManager(this.gos.getDocument());\n        this.licenseManager.validateLicense();\n    }\n\n    static getLicenseDetails(licenseKey: string) {\n        return new LicenseManager(null as any).getLicenseDetails(licenseKey);\n    }\n\n    public getWatermarkSelector(): ComponentSelector {\n        return AgWatermarkSelector;\n    }\n\n    public isDisplayWatermark(): boolean {\n        return this.licenseManager.isDisplayWatermark();\n    }\n\n    public getWatermarkMessage(): string {\n        return this.licenseManager.getWatermarkMessage();\n    }\n\n    static setLicenseKey(licenseKey: string): void {\n        LicenseManager.setLicenseKey(licenseKey);\n    }\n\n    static setChartsLicenseManager(chartsLicenseManager: ILicenseManager) {\n        LicenseManager.setChartsLicenseManager(chartsLicenseManager);\n    }\n}\n", "import { _missingOrEmpty } from '@ag-grid-community/core';\n\nimport { MD5 } from './md5';\n\nconst LICENSE_TYPES = {\n    '01': 'GRID',\n    '02': 'CHARTS',\n    '0102': 'BOTH',\n};\n\nexport interface ILicenseManager {\n    setLicenseKey: (key?: string, gridContext?: boolean) => void;\n}\n\nexport class LicenseManager {\n    private static RELEASE_INFORMATION: string = 'MTcxOTQzMTYzMDEwNw==';\n    private static licenseKey: string;\n    private static chartsLicenseManager?: ILicenseManager;\n    private watermarkMessage: string | undefined = undefined;\n\n    private md5: MD5;\n    private document: Document;\n\n    private totalMessageLength = 124;\n\n    constructor(document: Document) {\n        this.document = document;\n\n        this.md5 = new MD5();\n        this.md5.init();\n    }\n\n    public validateLicense(): void {\n        const licenseDetails = this.getLicenseDetails(LicenseManager.licenseKey);\n        const currentLicenseName = `AG Grid ${licenseDetails.currentLicenseType === 'BOTH' ? 'and AG Charts ' : ''}Enterprise`;\n        const suppliedLicenseName =\n            licenseDetails.suppliedLicenseType === undefined\n                ? ''\n                : `AG ${licenseDetails.suppliedLicenseType === 'BOTH' ? 'Grid and AG Charts' : licenseDetails.suppliedLicenseType === 'GRID' ? 'Grid' : 'Charts'} Enterprise`;\n\n        if (licenseDetails.missing) {\n            if (!this.isWebsiteUrl() || this.isForceWatermark()) {\n                this.outputMissingLicenseKey(currentLicenseName);\n            }\n        } else if (licenseDetails.expired) {\n            const gridReleaseDate = LicenseManager.getGridReleaseDate();\n            const formattedReleaseDate = LicenseManager.formatDate(gridReleaseDate);\n            this.outputExpiredKey(licenseDetails.expiry, formattedReleaseDate, currentLicenseName, suppliedLicenseName);\n        } else if (!licenseDetails.valid) {\n            this.outputInvalidLicenseKey(\n                !!licenseDetails.incorrectLicenseType,\n                currentLicenseName,\n                suppliedLicenseName\n            );\n        } else if (licenseDetails.isTrial && licenseDetails.trialExpired) {\n            this.outputExpiredTrialKey(licenseDetails.expiry, currentLicenseName, suppliedLicenseName);\n        }\n    }\n\n    private static extractExpiry(license: string) {\n        const restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);\n        return new Date(parseInt(LicenseManager.decode(restrictionHashed), 10));\n    }\n\n    private static extractLicenseComponents(licenseKey: string) {\n        // when users copy the license key from a PDF extra zero width characters are sometimes copied too\n        // carriage returns and line feeds are problematic too\n        // all of which causes license key validation to fail - strip these out\n        let cleanedLicenseKey = licenseKey.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n        cleanedLicenseKey = cleanedLicenseKey.replace(/\\r?\\n|\\r/g, '');\n\n        // the hash that follows the key is 32 chars long\n        if (licenseKey.length <= 32) {\n            return { md5: null, license: licenseKey, version: null, isTrial: null };\n        }\n\n        const hashStart = cleanedLicenseKey.length - 32;\n        const md5 = cleanedLicenseKey.substring(hashStart);\n        const license = cleanedLicenseKey.substring(0, hashStart);\n        const [version, isTrial, type] = LicenseManager.extractBracketedInformation(cleanedLicenseKey);\n        return { md5, license, version, isTrial, type };\n    }\n\n    public getLicenseDetails(licenseKey: string) {\n        const currentLicenseType = LicenseManager.chartsLicenseManager ? 'BOTH' : 'GRID';\n        if (_missingOrEmpty(licenseKey)) {\n            return {\n                licenseKey,\n                valid: false,\n                missing: true,\n                currentLicenseType,\n            };\n        }\n\n        const gridReleaseDate = LicenseManager.getGridReleaseDate();\n        const { md5, license, version, isTrial, type } = LicenseManager.extractLicenseComponents(licenseKey);\n        let valid = md5 === this.md5.md5(license) && licenseKey.indexOf('For_Trialing_ag-Grid_Only') === -1;\n        let trialExpired: undefined | boolean = undefined;\n        let expired: undefined | boolean = undefined;\n        let expiry: Date | null = null;\n        let incorrectLicenseType = false;\n        let suppliedLicenseType: undefined | string = undefined;\n\n        function handleTrial() {\n            const now = new Date();\n            trialExpired = expiry! < now;\n            expired = undefined;\n        }\n\n        if (valid) {\n            expiry = LicenseManager.extractExpiry(license);\n            valid = !isNaN(expiry.getTime());\n\n            if (valid) {\n                expired = gridReleaseDate > expiry;\n\n                switch (version) {\n                    case 'legacy':\n                    case '2': {\n                        if (isTrial) {\n                            handleTrial();\n                        }\n                        break;\n                    }\n                    case '3': {\n                        if (_missingOrEmpty(type)) {\n                            valid = false;\n                        } else {\n                            suppliedLicenseType = type;\n                            if (\n                                (type !== LICENSE_TYPES['01'] && type !== LICENSE_TYPES['0102']) ||\n                                (currentLicenseType === 'BOTH' && suppliedLicenseType !== 'BOTH')\n                            ) {\n                                valid = false;\n                                incorrectLicenseType = true;\n                            } else if (isTrial) {\n                                handleTrial();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!valid) {\n            return {\n                licenseKey,\n                valid,\n                incorrectLicenseType,\n                currentLicenseType,\n                suppliedLicenseType,\n            };\n        }\n\n        return {\n            licenseKey,\n            valid,\n            expiry: LicenseManager.formatDate(expiry),\n            expired,\n            version,\n            isTrial,\n            trialExpired,\n            incorrectLicenseType,\n            currentLicenseType,\n            suppliedLicenseType,\n        };\n    }\n\n    public isDisplayWatermark(): boolean {\n        return (\n            this.isForceWatermark() ||\n            (!this.isLocalhost() && !this.isWebsiteUrl() && !_missingOrEmpty(this.watermarkMessage))\n        );\n    }\n\n    public getWatermarkMessage(): string {\n        return this.watermarkMessage || '';\n    }\n\n    private getHostname(): string {\n        const win = this.document.defaultView || window;\n        const loc = win.location;\n        const { hostname = '' } = loc;\n\n        return hostname;\n    }\n\n    private isForceWatermark(): boolean {\n        const win = this.document.defaultView || window;\n        const loc = win.location;\n        const { pathname } = loc;\n\n        return pathname ? pathname.indexOf('forceWatermark') !== -1 : false;\n    }\n\n    private isWebsiteUrl(): boolean {\n        const hostname = this.getHostname();\n        return hostname.match(/^((?:[\\w-]+\\.)?ag-grid\\.com)$/) !== null;\n    }\n\n    private isLocalhost(): boolean {\n        const hostname = this.getHostname();\n        return hostname.match(/^(?:127\\.0\\.0\\.1|localhost)$/) !== null;\n    }\n\n    private static formatDate(date: any): string {\n        const monthNames: string[] = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December',\n        ];\n\n        const day = date.getDate();\n        const monthIndex = date.getMonth();\n        const year = date.getFullYear();\n\n        return day + ' ' + monthNames[monthIndex] + ' ' + year;\n    }\n\n    private static getGridReleaseDate() {\n        return new Date(parseInt(LicenseManager.decode(LicenseManager.RELEASE_INFORMATION), 10));\n    }\n\n    private static decode(input: string): string {\n        const keystr: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        let t = '';\n        let n: any, r: any, i: any;\n        let s: any, o: any, u: any, a: any;\n        let f: number = 0;\n        const e: string = input.replace(/[^A-Za-z0-9+/=]/g, '');\n        while (f < e.length) {\n            s = keystr.indexOf(e.charAt(f++));\n            o = keystr.indexOf(e.charAt(f++));\n            u = keystr.indexOf(e.charAt(f++));\n            a = keystr.indexOf(e.charAt(f++));\n            n = (s << 2) | (o >> 4);\n            r = ((o & 15) << 4) | (u >> 2);\n            i = ((u & 3) << 6) | a;\n            t = t + String.fromCharCode(n);\n            if (u != 64) {\n                t = t + String.fromCharCode(r);\n            }\n            if (a != 64) {\n                t = t + String.fromCharCode(i);\n            }\n        }\n        t = LicenseManager.utf8_decode(t);\n        return t;\n    }\n\n    private static utf8_decode(input: string): string {\n        input = input.replace(/rn/g, 'n');\n        let t = '';\n        for (let n = 0; n < input.length; n++) {\n            const r = input.charCodeAt(n);\n            if (r < 128) {\n                t += String.fromCharCode(r);\n            } else if (r > 127 && r < 2048) {\n                t += String.fromCharCode((r >> 6) | 192);\n                t += String.fromCharCode((r & 63) | 128);\n            } else {\n                t += String.fromCharCode((r >> 12) | 224);\n                t += String.fromCharCode(((r >> 6) & 63) | 128);\n                t += String.fromCharCode((r & 63) | 128);\n            }\n        }\n        return t;\n    }\n\n    static setChartsLicenseManager(dependantLicenseManager: ILicenseManager): void {\n        this.chartsLicenseManager = dependantLicenseManager;\n    }\n\n    static setLicenseKey(licenseKey: string): void {\n        this.licenseKey = licenseKey;\n\n        if (this.chartsLicenseManager) {\n            this.chartsLicenseManager.setLicenseKey(licenseKey, true);\n        }\n    }\n\n    private static extractBracketedInformation(licenseKey: string): [string | null, boolean | null, string?] {\n        // legacy no trial key\n        if (!licenseKey.includes('[')) {\n            return ['legacy', false, undefined];\n        }\n\n        const matches = licenseKey.match(/\\[(.*?)\\]/g)!.map((match) => match.replace('[', '').replace(']', ''));\n        if (!matches || matches.length === 0) {\n            return ['legacy', false, undefined];\n        }\n\n        const isTrial = matches.filter((match) => match === 'TRIAL').length === 1;\n        const rawVersion = matches.filter((match) => match.indexOf('v') === 0)[0];\n        const version = rawVersion ? rawVersion.replace('v', '') : 'legacy';\n        const type = (LICENSE_TYPES as any)[matches.filter((match) => (LICENSE_TYPES as any)[match])[0]];\n\n        return [version, isTrial, type];\n    }\n\n    private centerPadAndOutput(input: string) {\n        const paddingRequired = this.totalMessageLength - input.length;\n        console.error(input.padStart(paddingRequired / 2 + input.length, '*').padEnd(this.totalMessageLength, '*'));\n    }\n\n    private padAndOutput(input: string, padding = '*', terminateWithPadding = '') {\n        console.error(\n            input.padEnd(this.totalMessageLength - terminateWithPadding.length, padding) + terminateWithPadding\n        );\n    }\n\n    private outputInvalidLicenseKey(\n        incorrectLicenseType: boolean,\n        currentLicenseName: string,\n        suppliedLicenseName: string\n    ) {\n        if (incorrectLicenseType) {\n            // TC4, TC5,TC10\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput(` ${currentLicenseName} License `);\n            this.centerPadAndOutput(' Incompatible License Key ');\n            this.padAndOutput(\n                `* Your license key is for ${suppliedLicenseName} only and does not cover you for ${currentLicenseName}.`,\n                ' ',\n                '*'\n            );\n            this.padAndOutput('* Please contact info@ag-grid.com to obtain a combined license key.', ' ', '*');\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput('');\n        } else {\n            // TC3, TC9\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput(` ${currentLicenseName} License `);\n            this.centerPadAndOutput(' Invalid License Key ');\n            this.padAndOutput(\n                `* Your license key is not valid - please contact info@ag-grid.com to obtain a valid license.`,\n                ' ',\n                '*'\n            );\n            this.centerPadAndOutput('');\n            this.centerPadAndOutput('');\n        }\n\n        this.watermarkMessage = 'Invalid License';\n    }\n\n    private outputExpiredTrialKey(\n        formattedExpiryDate: string,\n        currentLicenseName: string,\n        suppliedLicenseName: string\n    ) {\n        // TC14\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput(` ${currentLicenseName} License `);\n        this.centerPadAndOutput(' Trial Period Expired. ');\n        this.padAndOutput(\n            `* Your trial only license for ${suppliedLicenseName} expired on ${formattedExpiryDate}.`,\n            ' ',\n            '*'\n        );\n        this.padAndOutput('* Please email info@ag-grid.com to purchase a license.', ' ', '*');\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput('');\n\n        this.watermarkMessage = 'Trial Period Expired';\n    }\n\n    private outputMissingLicenseKey(currentLicenseName: string) {\n        // TC6, TC12\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput(` ${currentLicenseName} License `);\n        this.centerPadAndOutput(' License Key Not Found ');\n        this.padAndOutput(`* All ${currentLicenseName} features are unlocked for trial.`, ' ', '*');\n        this.padAndOutput(\n            '* If you want to hide the watermark please email info@ag-grid.com for a trial license key.',\n            ' ',\n            '*'\n        );\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput('');\n\n        this.watermarkMessage = 'For Trial Use Only';\n    }\n\n    private outputExpiredKey(\n        formattedExpiryDate: string,\n        formattedReleaseDate: string,\n        currentLicenseName: string,\n        suppliedLicenseName: string\n    ) {\n        // TC2\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput(` ${currentLicenseName} License `);\n        this.centerPadAndOutput(' Incompatible Software Version ');\n        this.padAndOutput(\n            `* Your license key works with versions of ${suppliedLicenseName} released before ${formattedExpiryDate}.`,\n            ' ',\n            '*'\n        );\n        this.padAndOutput(`* The version you are trying to use was released on ${formattedReleaseDate}.`, ' ', '*');\n        this.padAndOutput('* Please contact info@ag-grid.com to renew your license key.', ' ', '*');\n        this.centerPadAndOutput('');\n        this.centerPadAndOutput('');\n\n        this.watermarkMessage = 'License Expired';\n    }\n}\n", "export class MD5 {\n    private ieCompatibility = false;\n\n    public init(): void {\n        this.ieCompatibility = this.md5('hello') != '5d41402abc4b2a76b9719d911017c592';\n    }\n\n    private md5cycle(x: any, k: any) {\n        let a: any = x[0],\n            b: any = x[1],\n            c: any = x[2],\n            d: any = x[3];\n\n        a = this.ff(a, b, c, d, k[0], 7, -680876936);\n        d = this.ff(d, a, b, c, k[1], 12, -389564586);\n        c = this.ff(c, d, a, b, k[2], 17, 606105819);\n        b = this.ff(b, c, d, a, k[3], 22, -1044525330);\n        a = this.ff(a, b, c, d, k[4], 7, -176418897);\n        d = this.ff(d, a, b, c, k[5], 12, 1200080426);\n        c = this.ff(c, d, a, b, k[6], 17, -1473231341);\n        b = this.ff(b, c, d, a, k[7], 22, -45705983);\n        a = this.ff(a, b, c, d, k[8], 7, 1770035416);\n        d = this.ff(d, a, b, c, k[9], 12, -1958414417);\n        c = this.ff(c, d, a, b, k[10], 17, -42063);\n        b = this.ff(b, c, d, a, k[11], 22, -1990404162);\n        a = this.ff(a, b, c, d, k[12], 7, 1804603682);\n        d = this.ff(d, a, b, c, k[13], 12, -40341101);\n        c = this.ff(c, d, a, b, k[14], 17, -1502002290);\n        b = this.ff(b, c, d, a, k[15], 22, 1236535329);\n\n        a = this.gg(a, b, c, d, k[1], 5, -165796510);\n        d = this.gg(d, a, b, c, k[6], 9, -1069501632);\n        c = this.gg(c, d, a, b, k[11], 14, 643717713);\n        b = this.gg(b, c, d, a, k[0], 20, -373897302);\n        a = this.gg(a, b, c, d, k[5], 5, -701558691);\n        d = this.gg(d, a, b, c, k[10], 9, 38016083);\n        c = this.gg(c, d, a, b, k[15], 14, -660478335);\n        b = this.gg(b, c, d, a, k[4], 20, -405537848);\n        a = this.gg(a, b, c, d, k[9], 5, 568446438);\n        d = this.gg(d, a, b, c, k[14], 9, -1019803690);\n        c = this.gg(c, d, a, b, k[3], 14, -187363961);\n        b = this.gg(b, c, d, a, k[8], 20, 1163531501);\n        a = this.gg(a, b, c, d, k[13], 5, -1444681467);\n        d = this.gg(d, a, b, c, k[2], 9, -51403784);\n        c = this.gg(c, d, a, b, k[7], 14, 1735328473);\n        b = this.gg(b, c, d, a, k[12], 20, -1926607734);\n\n        a = this.hh(a, b, c, d, k[5], 4, -378558);\n        d = this.hh(d, a, b, c, k[8], 11, -2022574463);\n        c = this.hh(c, d, a, b, k[11], 16, 1839030562);\n        b = this.hh(b, c, d, a, k[14], 23, -35309556);\n        a = this.hh(a, b, c, d, k[1], 4, -1530992060);\n        d = this.hh(d, a, b, c, k[4], 11, 1272893353);\n        c = this.hh(c, d, a, b, k[7], 16, -155497632);\n        b = this.hh(b, c, d, a, k[10], 23, -1094730640);\n        a = this.hh(a, b, c, d, k[13], 4, 681279174);\n        d = this.hh(d, a, b, c, k[0], 11, -358537222);\n        c = this.hh(c, d, a, b, k[3], 16, -722521979);\n        b = this.hh(b, c, d, a, k[6], 23, 76029189);\n        a = this.hh(a, b, c, d, k[9], 4, -640364487);\n        d = this.hh(d, a, b, c, k[12], 11, -421815835);\n        c = this.hh(c, d, a, b, k[15], 16, 530742520);\n        b = this.hh(b, c, d, a, k[2], 23, -995338651);\n\n        a = this.ii(a, b, c, d, k[0], 6, -198630844);\n        d = this.ii(d, a, b, c, k[7], 10, 1126891415);\n        c = this.ii(c, d, a, b, k[14], 15, -1416354905);\n        b = this.ii(b, c, d, a, k[5], 21, -57434055);\n        a = this.ii(a, b, c, d, k[12], 6, 1700485571);\n        d = this.ii(d, a, b, c, k[3], 10, -1894986606);\n        c = this.ii(c, d, a, b, k[10], 15, -1051523);\n        b = this.ii(b, c, d, a, k[1], 21, -2054922799);\n        a = this.ii(a, b, c, d, k[8], 6, 1873313359);\n        d = this.ii(d, a, b, c, k[15], 10, -30611744);\n        c = this.ii(c, d, a, b, k[6], 15, -1560198380);\n        b = this.ii(b, c, d, a, k[13], 21, 1309151649);\n        a = this.ii(a, b, c, d, k[4], 6, -145523070);\n        d = this.ii(d, a, b, c, k[11], 10, -1120210379);\n        c = this.ii(c, d, a, b, k[2], 15, 718787259);\n        b = this.ii(b, c, d, a, k[9], 21, -343485551);\n\n        x[0] = this.add32(a, x[0]);\n        x[1] = this.add32(b, x[1]);\n        x[2] = this.add32(c, x[2]);\n        x[3] = this.add32(d, x[3]);\n    }\n\n    private cmn(q: any, a: any, b: any, x: any, s: any, t: any) {\n        a = this.add32(this.add32(a, q), this.add32(x, t));\n        return this.add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    private ff(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn((b & c) | (~b & d), a, b, x, s, t);\n    }\n\n    private gg(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn((b & d) | (c & ~d), a, b, x, s, t);\n    }\n\n    private hh(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n\n    private ii(a: any, b: any, c: any, d: any, x: any, s: any, t: any) {\n        return this.cmn(c ^ (b | ~d), a, b, x, s, t);\n    }\n\n    private md51(s: any) {\n        const n: any = s.length;\n        const state: any = [1732584193, -271733879, -1732584194, 271733878];\n        let i: any;\n        for (i = 64; i <= s.length; i += 64) {\n            this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        const tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < s.length; i++) {\n            tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\n        }\n        tail[i >> 2] |= 0x80 << (i % 4 << 3);\n        if (i > 55) {\n            this.md5cycle(state, tail);\n            for (i = 0; i < 16; i++) {\n                tail[i] = 0;\n            }\n        }\n        tail[14] = n * 8;\n        this.md5cycle(state, tail);\n        return state;\n    }\n\n    /* there needs to be support for Unicode here, * unless we pretend that we can redefine the MD-5\n     * algorithm for multi-byte characters (perhaps by adding every four 16-bit characters and\n     * shortening the sum to 32 bits). Otherwise I suthis.ggest performing MD-5 as if every character\n     * was two bytes--e.g., 0040 0025 = @%--but then how will an ordinary MD-5 sum be matched?\n     * There is no way to standardize text to something like UTF-8 before transformation; speed cost is\n     * utterly prohibitive. The JavaScript standard itself needs to look at this: it should start\n     * providing access to strings as preformed UTF-8 8-bit unsigned value arrays.\n     */\n    private md5blk(s: any) {\n        /* I figured global was faster.   */\n        const md5blks: any = [];\n\n        /* Andy King said do it this way. */\n        for (let i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] =\n                s.charCodeAt(i) +\n                (s.charCodeAt(i + 1) << 8) +\n                (s.charCodeAt(i + 2) << 16) +\n                (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    private rhex(n: any) {\n        const hex_chr: any = '0123456789abcdef'.split('');\n        let s: string = '',\n            j: any = 0;\n        for (; j < 4; j++) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0f] + hex_chr[(n >> (j * 8)) & 0x0f];\n        }\n        return s;\n    }\n\n    private hex(x: any) {\n        for (let i: any = 0; i < x.length; i++) {\n            x[i] = this.rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    public md5(s: any) {\n        return this.hex(this.md51(s));\n    }\n\n    private add32(a: any, b: any) {\n        return this.ieCompatibility ? this.add32Compat(a, b) : this.add32Std(a, b);\n    }\n\n    /* this function is much faster, so if possible we use it. Some IEs are the only ones I know of that\n     need the idiotic second function, generated by an if clause.  */\n    private add32Std(a: any, b: any) {\n        return (a + b) & 0xffffffff;\n    }\n\n    private add32Compat(x: any, y: any) {\n        const lsw = (x & 0xffff) + (y & 0xffff),\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xffff);\n    }\n}\n", "import type { BeanCollection, ComponentSelector } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { GridLicenseManager as LicenseManager } from './gridLicenseManager';\n\nexport class AgWatermark extends Component {\n    licenseManager: LicenseManager;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.licenseManager = beans.licenseManager as LicenseManager;\n    }\n\n    private readonly eLicenseTextRef: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super(\n            /* html*/\n            `<div class=\"ag-watermark\">\n                <div data-ref=\"eLicenseTextRef\" class=\"ag-watermark-text\"></div>\n            </div>`\n        );\n    }\n\n    public postConstruct(): void {\n        const show = this.shouldDisplayWatermark();\n        this.setDisplayed(show);\n\n        if (show) {\n            this.eLicenseTextRef.innerText = this.licenseManager.getWatermarkMessage();\n\n            window.setTimeout(() => this.addCssClass('ag-opacity-zero'), 0);\n            window.setTimeout(() => this.setDisplayed(false), 5000);\n        }\n    }\n\n    private shouldDisplayWatermark(): boolean {\n        return this.licenseManager.isDisplayWatermark();\n    }\n}\n\nexport const AgWatermarkSelector: ComponentSelector = {\n    selector: 'AG-WATERMARK',\n    component: AgWatermark,\n};\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import {\n    Component,\n    _createIconNoSpan,\n    _isNodeOrElement,\n    _loadTemplate,\n    _setAriaExpanded,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport type { IMenuItemComp, IMenuItemParams } from '@ag-grid-community/core';\n\ninterface AgMenuItemRendererParams {\n    cssClassPrefix?: string;\n    isCompact?: boolean;\n}\n\nexport class AgMenuItemRenderer extends Component implements IMenuItemComp {\n    private params: IMenuItemParams & AgMenuItemRendererParams;\n    private cssClassPrefix: string;\n\n    constructor() {\n        super();\n\n        this.setTemplate(/* html */ `<div></div>`);\n    }\n\n    public init(params: IMenuItemParams & AgMenuItemRendererParams): void {\n        this.params = params;\n        this.cssClassPrefix = this.params.cssClassPrefix ?? 'ag-menu-option';\n\n        this.addIcon();\n        this.addName();\n        this.addShortcut();\n        this.addSubMenu();\n    }\n\n    public configureDefaults(): boolean {\n        return true;\n    }\n\n    private addIcon(): void {\n        if (this.params.isCompact) {\n            return;\n        }\n        const iconWrapper = _loadTemplate(\n            /* html */\n            `<span data-ref=\"eIcon\" class=\"${this.getClassName('part')} ${this.getClassName('icon')}\" role=\"presentation\"></span>`\n        );\n\n        const { checked, icon } = this.params;\n\n        if (checked) {\n            iconWrapper.appendChild(_createIconNoSpan('check', this.gos)!);\n        } else if (icon) {\n            if (_isNodeOrElement(icon)) {\n                iconWrapper.appendChild(icon);\n            } else if (typeof icon === 'string') {\n                iconWrapper.innerHTML = icon;\n            } else {\n                _warnOnce('menu item icon must be DOM node or string');\n            }\n        }\n\n        this.getGui().appendChild(iconWrapper);\n    }\n\n    private addName(): void {\n        const name = _loadTemplate(\n            /* html */\n            `<span data-ref=\"eName\" class=\"${this.getClassName('part')} ${this.getClassName('text')}\">${this.params.name || ''}</span>`\n        );\n\n        this.getGui().appendChild(name);\n    }\n\n    private addShortcut(): void {\n        if (this.params.isCompact) {\n            return;\n        }\n        const shortcut = _loadTemplate(\n            /* html */\n            `<span data-ref=\"eShortcut\" class=\"${this.getClassName('part')} ${this.getClassName('shortcut')}\">${this.params.shortcut || ''}</span>`\n        );\n\n        this.getGui().appendChild(shortcut);\n    }\n\n    private addSubMenu(): void {\n        const pointer = _loadTemplate(\n            /* html */\n            `<span data-ref=\"ePopupPointer\" class=\"${this.getClassName('part')} ${this.getClassName('popup-pointer')}\"></span>`\n        );\n\n        const eGui = this.getGui();\n\n        if (this.params.subMenu) {\n            const iconName = this.gos.get('enableRtl') ? 'smallLeft' : 'smallRight';\n            _setAriaExpanded(eGui, false);\n\n            pointer.appendChild(_createIconNoSpan(iconName, this.gos)!);\n        }\n\n        eGui.appendChild(pointer);\n    }\n\n    private getClassName(suffix: string) {\n        return `${this.cssClassPrefix}-${suffix}`;\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { AgCheckbox, AgEvent, ComponentSelector } from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    AgToggleButton,\n    Component,\n    KeyCode,\n    RefPlaceholder,\n    _createIcon,\n    _setAriaExpanded,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\ntype GroupItem = Component<any> | HTMLElement;\ntype Align = 'start' | 'end' | 'center' | 'stretch';\ntype Direction = 'horizontal' | 'vertical';\n\nexport interface AgGroupComponentParams {\n    title?: string;\n    enabled?: boolean;\n    suppressEnabledCheckbox?: boolean;\n    suppressOpenCloseIcons?: boolean;\n    suppressToggleExpandOnEnableChange?: boolean;\n    cssIdentifier?: string;\n    items?: GroupItem[];\n    alignItems?: Align;\n    direction?: Direction;\n    onEnableChange?: (enabled: boolean) => void;\n    onExpandedChange?: (expanded: boolean) => void;\n    expanded?: boolean;\n    useToggle?: boolean;\n    suppressKeyboardNavigation?: boolean;\n}\n\nexport type AgGroupComponentEvent = 'expanded' | 'collapsed' | 'enableChange';\nexport type ExpandedChangedEvent = 'expandedChanged';\n\ninterface ExpandChangedEvent extends AgEvent<ExpandedChangedEvent> {\n    expanded?: boolean;\n}\n\ninterface EnableChangeEvent extends AgEvent<'enableChange'> {\n    enabled: boolean;\n}\n\nfunction getAgGroupComponentTemplate(params: AgGroupComponentParams) {\n    const cssIdentifier = params.cssIdentifier || 'default';\n    const direction: Direction = params.direction || 'vertical';\n\n    return /* html */ `\n        <div class=\"ag-group ag-${cssIdentifier}-group\" role=\"presentation\">\n            <div data-ref=\"eToolbar\" class=\"ag-group-toolbar ag-${cssIdentifier}-group-toolbar\">\n                <ag-checkbox data-ref=\"cbGroupEnabled\"></ag-checkbox>\n            </div>\n            <div data-ref=\"eContainer\" class=\"ag-group-container ag-group-container-${direction} ag-${cssIdentifier}-group-container\"></div>\n        </div>\n    `;\n}\n\nexport class AgGroupComponent extends Component<AgGroupComponentEvent> {\n    private items: GroupItem[];\n    private cssIdentifier: string;\n    private enabled: boolean;\n    private expanded: boolean;\n    private suppressEnabledCheckbox: boolean = true;\n    private suppressToggleExpandOnEnableChange: boolean = false;\n    private alignItems: Align | undefined;\n    private useToggle: boolean;\n\n    private eToggle?: AgToggleButton;\n    private eTitleBar?: DefaultTitleBar;\n\n    private readonly eToolbar: HTMLElement = RefPlaceholder;\n    private readonly cbGroupEnabled: AgCheckbox = RefPlaceholder;\n    private readonly eContainer: HTMLElement = RefPlaceholder;\n\n    constructor(private readonly params: AgGroupComponentParams = {}) {\n        super(getAgGroupComponentTemplate(params), [AgCheckboxSelector]);\n\n        const {\n            enabled,\n            items,\n            suppressEnabledCheckbox,\n            expanded,\n            suppressToggleExpandOnEnableChange,\n            useToggle: toggleMode,\n        } = params;\n\n        this.cssIdentifier = params.cssIdentifier || 'default';\n        this.enabled = enabled != null ? enabled : true;\n        this.items = items || [];\n        this.useToggle = toggleMode ?? false;\n\n        this.alignItems = params.alignItems || 'center';\n\n        // expanded by default\n        this.expanded = expanded == null ? true : expanded;\n\n        if (suppressEnabledCheckbox != null) {\n            this.suppressEnabledCheckbox = suppressEnabledCheckbox;\n        }\n\n        if (suppressToggleExpandOnEnableChange != null) {\n            this.suppressToggleExpandOnEnableChange = suppressToggleExpandOnEnableChange;\n        }\n    }\n\n    public postConstruct() {\n        this.setupTitleBar();\n\n        if (this.items.length) {\n            const initialItems = this.items;\n            this.items = [];\n\n            this.addItems(initialItems);\n        }\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbGroupEnabled.setLabel(localeTextFunc('enabled', 'Enabled'));\n\n        if (this.enabled) {\n            this.setEnabled(this.enabled, undefined, true);\n        }\n\n        this.setAlignItems(this.alignItems);\n\n        const { onEnableChange, onExpandedChange, suppressOpenCloseIcons } = this.params;\n\n        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);\n        this.hideOpenCloseIcons(suppressOpenCloseIcons ?? false);\n\n        this.refreshChildDisplay();\n        _setDisplayed(this.eContainer, this.expanded);\n\n        this.cbGroupEnabled.onValueChange((newSelection: boolean) => {\n            this.setEnabled(newSelection, true, this.suppressToggleExpandOnEnableChange);\n            this.dispatchEnableChangeEvent(newSelection);\n        });\n\n        if (onEnableChange != null) {\n            this.onEnableChange(onEnableChange);\n        }\n\n        if (onExpandedChange != null) {\n            this.onExpandedChange(onExpandedChange);\n        }\n    }\n\n    private refreshChildDisplay(): void {\n        _setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);\n        this.eTitleBar?.refreshOnExpand(this.expanded);\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public setAlignItems(alignment: AgGroupComponentParams['alignItems']): this {\n        if (this.alignItems !== alignment) {\n            this.removeCssClass(`ag-group-item-alignment-${this.alignItems}`);\n        }\n\n        this.alignItems = alignment;\n        const newCls = `ag-group-item-alignment-${this.alignItems}`;\n\n        this.addCssClass(newCls);\n\n        return this;\n    }\n\n    public toggleGroupExpand(expanded?: boolean, silent?: boolean): this {\n        if (this.eTitleBar?.isSuppressCollapse() && !this.useToggle) {\n            expanded = true;\n            silent = true;\n        } else {\n            expanded = expanded != null ? expanded : !this.expanded;\n\n            if (this.expanded === expanded) {\n                return this;\n            }\n        }\n\n        this.expanded = expanded;\n        this.refreshChildDisplay();\n\n        _setDisplayed(this.eContainer, expanded);\n\n        if (!silent) {\n            this.dispatchLocalEvent({\n                type: expanded ? 'expanded' : 'collapsed',\n            });\n        }\n\n        return this;\n    }\n\n    public addItems(items: GroupItem[]) {\n        items.forEach((item) => this.addItem(item));\n    }\n\n    public prependItem(item: GroupItem) {\n        this.insertItem(item, true);\n    }\n\n    public addItem(item: GroupItem) {\n        this.insertItem(item, false);\n    }\n\n    private insertItem(item: GroupItem, prepend?: boolean) {\n        const container = this.eContainer;\n        const el = item instanceof Component ? item.getGui() : item;\n\n        el.classList.add('ag-group-item', `ag-${this.cssIdentifier}-group-item`);\n\n        if (prepend) {\n            container.insertAdjacentElement('afterbegin', el);\n            this.items.unshift(el);\n        } else {\n            container.appendChild(el);\n            this.items.push(el);\n        }\n    }\n\n    public hideItem(hide: boolean, index: number) {\n        const itemToHide = this.items[index] as HTMLElement;\n        _setDisplayed(itemToHide, !hide);\n    }\n\n    public getItemIndex(item: GroupItem): number | -1 {\n        const el = item instanceof Component ? item.getGui() : item;\n        return this.items.indexOf(el);\n    }\n\n    public setTitle(title: string): this {\n        this.eTitleBar?.setTitle(title);\n        return this;\n    }\n\n    public addTitleBarWidget(el: Element): this {\n        this.eTitleBar?.addWidget(el);\n        return this;\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.eTitleBar?.addCssClass(cssClass);\n    }\n\n    private dispatchEnableChangeEvent(enabled: boolean): void {\n        const event: EnableChangeEvent = {\n            type: 'enableChange',\n            enabled,\n        };\n        this.dispatchLocalEvent(event);\n    }\n\n    public setEnabled(enabled: boolean, skipToggle?: boolean, skipExpand?: boolean): this {\n        this.enabled = enabled;\n        this.refreshDisabledStyles();\n\n        if (!skipExpand) {\n            this.toggleGroupExpand(enabled);\n        }\n\n        if (!skipToggle) {\n            this.cbGroupEnabled.setValue(enabled);\n            this.eToggle?.setValue(enabled);\n        }\n\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    public onEnableChange(callbackFn: (enabled: boolean) => void): this {\n        this.addManagedListeners(this, { enableChange: (event: EnableChangeEvent) => callbackFn(event.enabled) });\n\n        return this;\n    }\n\n    public onExpandedChange(callbackFn: (expanded: boolean) => void): this {\n        this.addManagedListeners(this, {\n            expanded: () => callbackFn(true),\n            collapsed: () => callbackFn(false),\n        });\n\n        return this;\n    }\n\n    public hideEnabledCheckbox(hide: boolean): this {\n        this.suppressEnabledCheckbox = hide;\n        this.refreshChildDisplay();\n        this.refreshDisabledStyles();\n        return this;\n    }\n\n    public hideOpenCloseIcons(hide: boolean): this {\n        this.eTitleBar?.hideOpenCloseIcons(hide);\n\n        return this;\n    }\n\n    private refreshDisabledStyles() {\n        const disabled = !this.enabled;\n        this.eContainer.classList.toggle('ag-disabled', disabled);\n        this.eTitleBar?.refreshDisabledStyles(this.suppressEnabledCheckbox && disabled);\n        this.eContainer.classList.toggle('ag-disabled-group-container', disabled);\n    }\n\n    private setupTitleBar(): void {\n        const titleBar = this.useToggle ? this.createToggleTitleBar() : this.createDefaultTitleBar();\n        this.eToolbar.insertAdjacentElement('beforebegin', titleBar.getGui());\n    }\n\n    private createDefaultTitleBar(): DefaultTitleBar {\n        const titleBar = this.createManagedBean(new DefaultTitleBar(this.params));\n        this.eTitleBar = titleBar;\n        titleBar.refreshOnExpand(this.expanded);\n        this.addManagedListeners(titleBar, {\n            expandedChanged: (event: ExpandChangedEvent) => this.toggleGroupExpand(event.expanded),\n        });\n        return titleBar;\n    }\n\n    private createToggleTitleBar(): AgToggleButton {\n        const eToggle = this.createManagedBean(\n            new AgToggleButton({\n                value: this.enabled,\n                label: this.params.title,\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                onValueChange: (enabled) => {\n                    this.setEnabled(enabled, true);\n                    this.dispatchEnableChangeEvent(enabled);\n                },\n            })\n        );\n        eToggle.addCssClass('ag-group-title-bar');\n        eToggle.addCssClass(`ag-${this.params.cssIdentifier ?? 'default'}-group-title-bar ag-unselectable`);\n        this.eToggle = eToggle;\n        this.toggleGroupExpand(this.enabled);\n        return eToggle;\n    }\n}\n\nconst TITLE_BAR_DISABLED_CLASS = 'ag-disabled-group-title-bar';\nfunction getDefaultTitleBarTemplate(params: AgGroupComponentParams) {\n    const cssIdentifier = params.cssIdentifier ?? 'default';\n\n    const role = params.suppressKeyboardNavigation ? 'presentation' : 'role';\n\n    return /* html */ `\n        <div class=\"ag-group-title-bar ag-${cssIdentifier}-group-title-bar ag-unselectable\" role=\"${role}\">\n            <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" data-ref=\"eGroupOpenedIcon\" role=\"presentation\"></span>\n            <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" data-ref=\"eGroupClosedIcon\" role=\"presentation\"></span>\n            <span data-ref=\"eTitle\" class=\"ag-group-title ag-${cssIdentifier}-group-title\"></span>\n        </div>\n    `;\n}\nclass DefaultTitleBar extends Component<ExpandedChangedEvent> {\n    private title: string | undefined;\n    private suppressOpenCloseIcons: boolean = false;\n    private suppressKeyboardNavigation: boolean = false;\n\n    private readonly eGroupOpenedIcon: HTMLElement = RefPlaceholder;\n    private readonly eGroupClosedIcon: HTMLElement = RefPlaceholder;\n    private readonly eTitle: HTMLElement = RefPlaceholder;\n\n    constructor(params: AgGroupComponentParams = {}) {\n        super(getDefaultTitleBarTemplate(params));\n\n        const { title, suppressOpenCloseIcons, suppressKeyboardNavigation } = params;\n\n        if (!!title && title.length > 0) {\n            this.title = title;\n        }\n\n        if (suppressOpenCloseIcons != null) {\n            this.suppressOpenCloseIcons = suppressOpenCloseIcons;\n        }\n\n        this.suppressKeyboardNavigation = suppressKeyboardNavigation ?? false;\n    }\n\n    public postConstruct() {\n        this.setTitle(this.title);\n\n        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);\n\n        this.setupExpandContract();\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(_createIcon('columnSelectClosed', this.gos, null));\n        this.eGroupOpenedIcon.appendChild(_createIcon('columnSelectOpen', this.gos, null));\n        this.addManagedElementListeners(this.getGui(), {\n            click: () => this.dispatchExpandChanged(),\n            keydown: (e: KeyboardEvent) => {\n                switch (e.key) {\n                    case KeyCode.ENTER:\n                    case KeyCode.SPACE:\n                        e.preventDefault();\n                        this.dispatchExpandChanged();\n                        break;\n                    case KeyCode.RIGHT:\n                    case KeyCode.LEFT:\n                        e.preventDefault();\n                        this.dispatchExpandChanged(e.key === KeyCode.RIGHT);\n                        break;\n                }\n            },\n        });\n    }\n\n    public refreshOnExpand(expanded: boolean): void {\n        this.refreshAriaStatus(expanded);\n        this.refreshOpenCloseIcons(expanded);\n    }\n\n    private refreshAriaStatus(expanded: boolean): void {\n        if (!this.suppressOpenCloseIcons) {\n            _setAriaExpanded(this.getGui(), expanded);\n        }\n    }\n\n    private refreshOpenCloseIcons(expanded: boolean): void {\n        const showIcon = !this.suppressOpenCloseIcons;\n\n        _setDisplayed(this.eGroupOpenedIcon, showIcon && expanded);\n        _setDisplayed(this.eGroupClosedIcon, showIcon && !expanded);\n    }\n\n    public isSuppressCollapse(): boolean {\n        return this.suppressOpenCloseIcons;\n    }\n\n    private dispatchExpandChanged(expanded?: boolean): void {\n        const event: ExpandChangedEvent = {\n            type: 'expandedChanged',\n            expanded,\n        };\n        this.dispatchLocalEvent(event);\n    }\n\n    public setTitle(title: string | undefined): this {\n        const eGui = this.getGui();\n        const hasTitle = !!title && title.length > 0;\n        title = hasTitle ? title : undefined;\n\n        this.eTitle.textContent = title ?? '';\n        _setDisplayed(eGui, hasTitle);\n\n        if (title !== this.title) {\n            this.title = title;\n        }\n\n        const disabled = eGui.classList.contains(TITLE_BAR_DISABLED_CLASS);\n        this.refreshDisabledStyles(disabled);\n\n        return this;\n    }\n\n    public addWidget(el: Element): this {\n        this.getGui().appendChild(el);\n\n        return this;\n    }\n\n    public hideOpenCloseIcons(hide: boolean): this {\n        this.suppressOpenCloseIcons = hide;\n\n        if (hide) {\n            this.dispatchExpandChanged(true);\n        }\n\n        return this;\n    }\n\n    public refreshDisabledStyles(disabled: boolean) {\n        const eGui = this.getGui();\n        if (disabled) {\n            eGui.classList.add(TITLE_BAR_DISABLED_CLASS);\n            eGui.removeAttribute('tabindex');\n        } else {\n            eGui.classList.remove(TITLE_BAR_DISABLED_CLASS);\n            if (typeof this.title === 'string' && !this.suppressKeyboardNavigation) {\n                eGui.setAttribute('tabindex', '0');\n            } else {\n                eGui.removeAttribute('tabindex');\n            }\n        }\n    }\n}\n\nexport const AgGroupComponentSelector: ComponentSelector = {\n    selector: 'AG-GROUP-COMPONENT',\n    component: AgGroupComponent,\n};\n", "import type {\n    AgInputTextField,\n    AgPromise,\n    AriaAnnouncementService,\n    BeanCollection,\n    FieldPickerValueSelectedEvent,\n    IRichCellEditorRendererParams,\n    RichSelectListRowSelectedEvent,\n    RichSelectParams,\n    UserCompDetails,\n    UserComponentFactory,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    AgPickerField,\n    KeyCode,\n    RefPlaceholder,\n    _bindCellRendererToHtmlElement,\n    _clearElement,\n    _createIconNoSpan,\n    _debounce,\n    _escapeString,\n    _exists,\n    _fuzzySuggestions,\n    _isEventFromPrintableCharacter,\n    _isVisible,\n    _setAriaActiveDescendant,\n    _stopPropagationForAgGrid,\n} from '@ag-grid-community/core';\n\nimport { AgPillContainer } from './AgPillContainer';\nimport type { AgRichSelectListEvent } from './agRichSelectList';\nimport { AgRichSelectList } from './agRichSelectList';\n\nexport type AgRichSelectEvent = AgRichSelectListEvent;\nexport class AgRichSelect<TValue = any> extends AgPickerField<\n    TValue[] | TValue,\n    RichSelectParams<TValue>,\n    AgRichSelectEvent,\n    AgRichSelectList<TValue, AgRichSelectEvent>\n> {\n    private userComponentFactory: UserComponentFactory;\n    private ariaAnnouncementService: AriaAnnouncementService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.userComponentFactory = beans.userComponentFactory;\n        this.ariaAnnouncementService = beans.ariaAnnouncementService;\n    }\n\n    private searchString = '';\n    private listComponent: AgRichSelectList<TValue> | undefined;\n    private pillContainer: AgPillContainer<TValue> | null;\n    protected values: TValue[];\n\n    private searchStringCreator: ((values: TValue[]) => string[]) | null = null;\n    private readonly eInput: AgInputTextField = RefPlaceholder;\n    private readonly eDeselect: HTMLSpanElement = RefPlaceholder;\n\n    private ariaToggleSelection: string;\n    private ariaDeselectAllItems: string;\n    private ariaDeleteSelection: string;\n    private skipWrapperAnnouncement?: boolean = false;\n\n    constructor(config?: RichSelectParams<TValue>) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelRichSelectField',\n            pickerAriaLabelValue: 'Rich Select Field',\n            pickerType: 'ag-list',\n            className: 'ag-rich-select',\n            pickerIcon: 'smallDown',\n            ariaRole: 'combobox',\n            template:\n                config?.template ??\n                /* html */ `\n            <div class=\"ag-picker-field\" role=\"presentation\">\n                <div data-ref=\"eLabel\"></div>\n                <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-rich-select-value ag-picker-collapsed\">\n                    <span data-ref=\"eDisplayField\" class=\"ag-picker-field-display\"></span>\n                    <ag-input-text-field data-ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n                    <span data-ref=\"eDeselect\" class=\"ag-rich-select-deselect-button ag-picker-field-icon\" role=\"presentation\"></span>\n                    <span data-ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></span>\n                </div>\n            </div>`,\n            agComponents: [AgInputTextFieldSelector],\n            modalPicker: false,\n            ...config,\n            // maxPickerHeight needs to be set after expanding `config`\n            maxPickerHeight: config?.maxPickerHeight ?? 'calc(var(--ag-row-height) * 6.5)',\n        });\n\n        const { value, valueList, searchStringCreator } = config || {};\n\n        if (value !== undefined) {\n            this.value = value;\n        }\n\n        if (valueList != null) {\n            this.values = valueList;\n        }\n\n        if (searchStringCreator) {\n            this.searchStringCreator = searchStringCreator;\n        }\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n        this.createListComponent();\n        this.eDeselect.appendChild(_createIconNoSpan('cancel', this.gos)!);\n\n        const { allowTyping, placeholder, suppressDeselectAll } = this.config;\n\n        this.eDeselect.classList.add('ag-hidden');\n\n        if (allowTyping) {\n            this.eInput.setAutoComplete(false).setInputPlaceholder(placeholder);\n            this.eDisplayField.classList.add('ag-hidden');\n        } else {\n            this.eInput.setDisplayed(false);\n        }\n\n        this.setupAriaProperties();\n\n        const { searchDebounceDelay = 300 } = this.config;\n        this.clearSearchString = _debounce(this.clearSearchString, searchDebounceDelay);\n\n        this.renderSelectedValue();\n\n        if (allowTyping) {\n            this.eInput.onValueChange((value) => this.searchTextFromString(value));\n        }\n\n        this.addManagedElementListeners(this.eWrapper, { focus: this.onWrapperFocus.bind(this) });\n        this.addManagedElementListeners(this.eWrapper, { focusout: this.onWrapperFocusOut.bind(this) });\n\n        if (!suppressDeselectAll) {\n            this.addManagedElementListeners(this.eDeselect, {\n                mousedown: this.onDeselectAllMouseDown.bind(this),\n                click: this.onDeselectAllClick.bind(this),\n            });\n        }\n    }\n\n    private setupAriaProperties(): void {\n        const { eWrapper, gos, localeService } = this;\n\n        eWrapper.tabIndex = gos.get('tabIndex');\n\n        const translate = localeService.getLocaleTextFunc();\n        this.ariaDeleteSelection = translate('ariaLabelRichSelectDeleteSelection', 'Press DELETE to deselect item');\n        this.ariaDeselectAllItems = translate(\n            'ariaLabelRichSelectDeselectAllItems',\n            'Press DELETE to deselect all items'\n        );\n        this.ariaToggleSelection = translate('ariaLabelRichSelectToggleSelection', 'Press SPACE to toggle selection');\n    }\n\n    private createListComponent(): void {\n        this.listComponent = this.createBean(new AgRichSelectList(this.config, this.eWrapper, () => this.searchString));\n        this.listComponent.setParentComponent(this);\n\n        this.addManagedListeners(this.listComponent, {\n            richSelectListRowSelected: (e: RichSelectListRowSelectedEvent) => {\n                this.onListValueSelected(e.value, e.fromEnterKey);\n            },\n        });\n    }\n\n    private renderSelectedValue(): void {\n        const { value, eDisplayField, config } = this;\n        const {\n            allowTyping,\n            cellRenderer,\n            initialInputValue,\n            multiSelect,\n            suppressDeselectAll,\n            suppressMultiSelectPillRenderer,\n        } = config;\n        const valueFormatted = this.config.valueFormatter ? this.config.valueFormatter(value) : value;\n\n        if (allowTyping) {\n            this.eInput.setValue(initialInputValue ?? valueFormatted);\n            return;\n        }\n\n        if (multiSelect && !suppressDeselectAll) {\n            const isEmpty = value == null || (Array.isArray(value) && value.length === 0);\n            this.eDeselect.classList.toggle('ag-hidden', isEmpty);\n        }\n\n        let userCompDetails: UserCompDetails | undefined;\n\n        if (multiSelect && !suppressMultiSelectPillRenderer) {\n            this.createOrUpdatePillContainer(eDisplayField);\n            return;\n        }\n\n        if (cellRenderer) {\n            userCompDetails = this.userComponentFactory.getEditorRendererDetails<\n                RichSelectParams,\n                IRichCellEditorRendererParams<TValue>\n            >(config, {\n                value,\n                valueFormatted,\n                getValue: () => this.getValue(),\n                setValue: (value: TValue[] | TValue | null) => {\n                    this.setValue(value, true);\n                },\n                setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                    this.setTooltip({ newTooltipText: value, shouldDisplayTooltip });\n                },\n            });\n        }\n\n        let userCompDetailsPromise: AgPromise<any> | undefined;\n\n        if (userCompDetails) {\n            userCompDetailsPromise = userCompDetails.newAgStackInstance();\n        }\n\n        if (userCompDetailsPromise) {\n            _clearElement(eDisplayField);\n            _bindCellRendererToHtmlElement(userCompDetailsPromise, eDisplayField);\n            userCompDetailsPromise.then((renderer) => {\n                this.addDestroyFunc(() => this.destroyBean(renderer));\n            });\n        } else {\n            if (_exists(this.value)) {\n                eDisplayField.innerText = valueFormatted;\n                eDisplayField.classList.remove('ag-display-as-placeholder');\n            } else {\n                const { placeholder } = config;\n                if (_exists(placeholder)) {\n                    eDisplayField.innerHTML = `${_escapeString(placeholder)}`;\n                    eDisplayField.classList.add('ag-display-as-placeholder');\n                } else {\n                    _clearElement(eDisplayField);\n                }\n            }\n\n            this.setTooltip({\n                newTooltipText: valueFormatted ?? null,\n                shouldDisplayTooltip: () => this.eDisplayField.scrollWidth > this.eDisplayField.clientWidth,\n            });\n        }\n    }\n\n    protected createPickerComponent() {\n        const { values } = this;\n\n        if (values) {\n            this.setValueList({ valueList: values });\n        }\n\n        // do not create the picker every time to save state\n        return this.listComponent!;\n    }\n\n    public setSearchStringCreator(searchStringFn: (values: TValue[]) => string[]): void {\n        this.searchStringCreator = searchStringFn;\n    }\n\n    public setValueList(params: { valueList: TValue[]; refresh?: boolean }): void {\n        const { valueList, refresh } = params;\n\n        if (!this.listComponent || this.listComponent.getCurrentList() === valueList) {\n            return;\n        }\n\n        this.listComponent.setCurrentList(valueList);\n\n        if (refresh) {\n            // if `values` is not present, it means the valuesList was set asynchronously\n            if (!this.values) {\n                this.values = valueList;\n                if (this.isPickerDisplayed) {\n                    this.listComponent.selectValue(this.value);\n                }\n            } else {\n                this.listComponent.refresh(true);\n            }\n        }\n    }\n\n    public override showPicker() {\n        super.showPicker();\n        const { listComponent, value } = this;\n\n        if (!listComponent) {\n            return;\n        }\n\n        let idx = null;\n        if (this.value != null) {\n            listComponent.selectValue(this.value);\n            idx = listComponent.getIndicesForValues(Array.isArray(value) ? value : [value])[0];\n        }\n\n        if (idx != null) {\n            listComponent.highlightIndex(idx);\n        } else {\n            listComponent.refresh();\n        }\n\n        this.displayOrHidePicker();\n    }\n\n    protected override beforeHidePicker(): void {\n        super.beforeHidePicker();\n    }\n\n    private createOrUpdatePillContainer(container: HTMLElement): void {\n        if (!this.pillContainer) {\n            const pillContainer = (this.pillContainer = this.createBean(new AgPillContainer<TValue>()));\n            this.addDestroyFunc(() => {\n                this.destroyBean(this.pillContainer);\n                this.pillContainer = null;\n            });\n\n            _clearElement(container);\n            container.appendChild(pillContainer.getGui());\n\n            pillContainer.init({\n                eWrapper: this.eWrapper,\n                onPillMouseDown: (e: MouseEvent) => {\n                    e.stopImmediatePropagation();\n                },\n                announceItemFocus: () => {\n                    this.ariaAnnouncementService.announceValue(this.ariaDeleteSelection);\n                },\n                getValue: () => this.getValue() as TValue[] | null,\n                setValue: (value: TValue[] | null) => this.setValue(value, true),\n            });\n        }\n\n        this.doWhileBlockingAnnouncement(() => this.pillContainer?.refresh());\n    }\n\n    private doWhileBlockingAnnouncement(func: () => void): void {\n        this.skipWrapperAnnouncement = true;\n        func();\n        this.skipWrapperAnnouncement = false;\n    }\n\n    private onWrapperFocus(): void {\n        const { eInput, config } = this;\n        const { allowTyping, multiSelect, suppressDeselectAll } = config;\n\n        if (allowTyping) {\n            const focusableEl = eInput.getFocusableElement() as HTMLInputElement;\n            focusableEl.focus();\n            focusableEl.select();\n        } else if (multiSelect && !suppressDeselectAll && !this.skipWrapperAnnouncement) {\n            this.ariaAnnouncementService.announceValue(this.ariaDeselectAllItems);\n        }\n    }\n\n    private onWrapperFocusOut(e: FocusEvent): void {\n        if (!this.eWrapper.contains(e.relatedTarget as Element)) {\n            this.hidePicker();\n        }\n    }\n\n    private onDeselectAllMouseDown(e: MouseEvent): void {\n        // don't expand or collapse picker when clicking on deselect all\n        e.stopImmediatePropagation();\n    }\n\n    private onDeselectAllClick(): void {\n        this.setValue([], true);\n    }\n\n    private buildSearchStringFromKeyboardEvent(searchKey: KeyboardEvent) {\n        let { key } = searchKey;\n\n        if (key === KeyCode.BACKSPACE) {\n            this.searchString = this.searchString.slice(0, -1);\n            key = '';\n        } else if (!_isEventFromPrintableCharacter(searchKey)) {\n            return;\n        }\n\n        searchKey.preventDefault();\n\n        this.searchTextFromCharacter(key);\n    }\n\n    private searchTextFromCharacter(char: string): void {\n        this.searchString += char;\n        this.runSearch();\n        this.clearSearchString();\n    }\n\n    public searchTextFromString(str: string | null | undefined): void {\n        if (str == null) {\n            str = '';\n        }\n        this.searchString = str;\n        this.runSearch();\n    }\n\n    private buildSearchStrings(values: TValue[]): string[] | undefined {\n        const { valueFormatter = (value) => value } = this.config;\n\n        let searchStrings: string[] | undefined;\n        if (typeof values[0] === 'number' || typeof values[0] === 'string') {\n            searchStrings = values.map((v) => valueFormatter(v));\n        } else if (typeof values[0] === 'object' && this.searchStringCreator) {\n            searchStrings = this.searchStringCreator(values);\n        }\n\n        return searchStrings;\n    }\n\n    private filterListModel(filteredValues: TValue[]): void {\n        const { filterList } = this.config;\n\n        if (!filterList) {\n            return;\n        }\n\n        this.setValueList({ valueList: filteredValues, refresh: true });\n        this.alignPickerToComponent();\n    }\n\n    private runSearch() {\n        if (!this.listComponent) {\n            return;\n        }\n\n        const { values } = this;\n        const searchStrings = this.buildSearchStrings(values);\n\n        if (!searchStrings) {\n            this.listComponent.highlightIndex(-1);\n            return;\n        }\n\n        const { suggestions, filteredValues } = this.getSuggestionsAndFilteredValues(this.searchString, searchStrings);\n        const { filterList, highlightMatch, searchType = 'fuzzy' } = this.config;\n\n        const filterValueLen = filteredValues.length;\n        const shouldFilter = !!(filterList && this.searchString !== '');\n\n        this.filterListModel(shouldFilter ? filteredValues : values);\n\n        if (suggestions.length) {\n            const topSuggestionIndex = shouldFilter ? 0 : searchStrings.indexOf(suggestions[0]);\n            this.listComponent?.highlightIndex(topSuggestionIndex);\n        } else {\n            this.listComponent?.highlightIndex(-1);\n\n            if (!shouldFilter || filterValueLen) {\n                this.listComponent?.ensureIndexVisible(0);\n            } else if (shouldFilter) {\n                this.getAriaElement().removeAttribute('data-active-option');\n                const eListAriaEl = this.listComponent?.getAriaElement();\n                if (eListAriaEl) {\n                    _setAriaActiveDescendant(eListAriaEl, null);\n                }\n            }\n        }\n\n        if (highlightMatch && searchType !== 'fuzzy') {\n            this.listComponent?.highlightFilterMatch(this.searchString);\n        }\n\n        this.displayOrHidePicker();\n    }\n\n    private getSuggestionsAndFilteredValues(\n        searchValue: string,\n        valueList: string[]\n    ): { suggestions: string[]; filteredValues: TValue[] } {\n        let suggestions: string[] = [];\n        const filteredValues: TValue[] = [];\n\n        if (!searchValue.length) {\n            return { suggestions, filteredValues };\n        }\n\n        const { searchType = 'fuzzy', filterList } = this.config;\n\n        if (searchType === 'fuzzy') {\n            const fuzzySearchResult = _fuzzySuggestions(searchValue, valueList, true);\n            suggestions = fuzzySearchResult.values;\n\n            const indices = fuzzySearchResult.indices;\n            if (filterList && indices.length) {\n                for (let i = 0; i < indices.length; i++) {\n                    filteredValues.push(this.values[indices[i]]);\n                }\n            }\n        } else {\n            suggestions = valueList.filter((val, idx) => {\n                const currentValue = val.toLocaleLowerCase();\n                const valueToMatch = this.searchString.toLocaleLowerCase();\n\n                const isMatch =\n                    searchType === 'match'\n                        ? currentValue.startsWith(valueToMatch)\n                        : currentValue.indexOf(valueToMatch) !== -1;\n                if (filterList && isMatch) {\n                    filteredValues.push(this.values[idx]);\n                }\n                return isMatch;\n            });\n        }\n\n        return { suggestions, filteredValues };\n    }\n\n    private displayOrHidePicker(): void {\n        if (!this.listComponent) {\n            return;\n        }\n\n        const eListGui = this.listComponent.getGui();\n        const list = this.listComponent.getCurrentList();\n        const toggleValue = list ? list.length === 0 : false;\n\n        eListGui.classList.toggle('ag-hidden', toggleValue);\n    }\n\n    private clearSearchString(): void {\n        this.searchString = '';\n    }\n\n    public override setValue(\n        value: TValue[] | TValue | null,\n        silent?: boolean,\n        fromPicker?: boolean,\n        skipRendering?: boolean\n    ): this {\n        if (this.value === value) {\n            return this;\n        }\n\n        const isArray = Array.isArray(value);\n\n        if (value != null) {\n            if (!isArray) {\n                const list = this.listComponent?.getCurrentList();\n                const index = list ? list.indexOf(value) : -1;\n\n                if (index === -1) {\n                    return this;\n                }\n            }\n\n            if (!fromPicker) {\n                this.listComponent?.selectValue(value);\n            }\n        }\n\n        super.setValue(value, silent);\n\n        if (!skipRendering) {\n            this.renderSelectedValue();\n        }\n\n        return this;\n    }\n\n    private onNavigationKeyDown(event: any, key: string, announceItem: () => void): void {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n\n        const isDown = key === KeyCode.DOWN;\n\n        if (!this.isPickerDisplayed && isDown) {\n            this.showPicker();\n            return;\n        }\n\n        this.listComponent?.onNavigationKeyDown(key, announceItem);\n    }\n\n    protected onEnterKeyDown(e: KeyboardEvent): void {\n        if (!this.isPickerDisplayed) {\n            return;\n        }\n        e.preventDefault();\n\n        if (this.listComponent?.getCurrentList()) {\n            if (this.config.multiSelect) {\n                this.dispatchPickerEventAndHidePicker(this.value, true);\n            } else {\n                const lastRowHovered = this.listComponent.getLastItemHovered();\n                this.onListValueSelected(new Set<TValue>([lastRowHovered]), true);\n            }\n        }\n    }\n\n    private onDeleteKeyDown(e: KeyboardEvent): void {\n        const { eWrapper, gos } = this;\n        const activeEl = gos.getActiveDomElement();\n\n        if (activeEl === eWrapper) {\n            e.preventDefault();\n            this.setValue([], true);\n        }\n    }\n\n    private onTabKeyDown(): void {\n        const { config, isPickerDisplayed, listComponent } = this;\n        const { multiSelect } = config;\n\n        if (!isPickerDisplayed || !listComponent) {\n            return;\n        }\n\n        if (multiSelect) {\n            const values = this.getValueFromSet(listComponent.getSelectedItems());\n\n            if (values) {\n                this.setValue(values, false, true, true);\n            }\n        } else {\n            this.setValue(listComponent.getLastItemHovered(), false, true);\n        }\n    }\n\n    private getValueFromSet(valueSet: Set<TValue>): TValue[] | TValue | null {\n        const { multiSelect } = this.config;\n        let newValue: TValue[] | TValue | null = null;\n\n        for (const value of valueSet) {\n            if (valueSet.size === 1 && !multiSelect) {\n                newValue = value;\n                break;\n            }\n            if (!newValue) {\n                newValue = [];\n            }\n            (newValue as TValue[]).push(value);\n        }\n\n        if (Array.isArray(newValue)) {\n            newValue.sort();\n        }\n\n        return newValue;\n    }\n\n    private onListValueSelected(valueSet: Set<TValue>, fromEnterKey: boolean): void {\n        const newValue = this.getValueFromSet(valueSet);\n\n        this.setValue(newValue, false, true);\n\n        if (!this.config.multiSelect) {\n            this.dispatchPickerEventAndHidePicker(newValue, fromEnterKey);\n        }\n    }\n\n    private dispatchPickerEventAndHidePicker(value: TValue[] | TValue | null, fromEnterKey: boolean): void {\n        const event: WithoutGridCommon<FieldPickerValueSelectedEvent> = {\n            type: 'fieldPickerValueSelected',\n            fromEnterKey,\n            value,\n        };\n\n        this.dispatchLocalEvent(event);\n        this.hidePicker();\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        const { allowTyping } = this.config;\n\n        if (allowTyping) {\n            return this.eInput.getFocusableElement();\n        }\n\n        return super.getFocusableElement();\n    }\n\n    protected override onKeyDown(e: KeyboardEvent): void {\n        const { key } = e;\n\n        const { isPickerDisplayed, config, listComponent, pickerComponent } = this;\n        const { allowTyping, multiSelect, suppressDeselectAll } = config;\n\n        switch (key) {\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n                if (!allowTyping || this.pillContainer) {\n                    e.preventDefault();\n                    if (this.pillContainer) {\n                        this.listComponent?.highlightIndex(-1);\n                        this.pillContainer.onNavigationKeyDown(e);\n                    }\n                }\n                break;\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                if (allowTyping) {\n                    e.preventDefault();\n                    const inputEl = this.eInput.getInputElement();\n                    const target = key === KeyCode.PAGE_HOME ? 0 : inputEl.value.length;\n                    inputEl.setSelectionRange(target, target);\n                    break;\n                }\n            // Only break here for allowTyping, otherwise use the same logic as PageUp/PageDown\n            // eslint-disable-next-line\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_DOWN:\n                e.preventDefault();\n                if (pickerComponent) {\n                    listComponent?.navigateToPage(key);\n                }\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onNavigationKeyDown(e, key, () => {\n                    if (multiSelect) {\n                        this.doWhileBlockingAnnouncement(() => this.eWrapper.focus());\n                        this.ariaAnnouncementService.announceValue(this.ariaToggleSelection);\n                    }\n                });\n                break;\n            case KeyCode.ESCAPE:\n                if (isPickerDisplayed) {\n                    if (_isVisible(this.listComponent!.getGui())) {\n                        e.preventDefault();\n                        _stopPropagationForAgGrid(e);\n                    }\n                    this.hidePicker();\n                }\n                break;\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(e);\n                break;\n            case KeyCode.SPACE:\n                if (isPickerDisplayed && multiSelect && listComponent) {\n                    e.preventDefault();\n                    const lastItemHovered = listComponent.getLastItemHovered();\n\n                    if (lastItemHovered) {\n                        listComponent.toggleListItemSelection(lastItemHovered);\n                    }\n                }\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown();\n                break;\n            case KeyCode.DELETE:\n                if (multiSelect && !suppressDeselectAll) {\n                    this.onDeleteKeyDown(e);\n                }\n                break;\n            default:\n                if (!allowTyping) {\n                    this.buildSearchStringFromKeyboardEvent(e);\n                }\n        }\n    }\n\n    public override destroy(): void {\n        if (this.listComponent) {\n            this.listComponent = this.destroyBean(this.listComponent);\n        }\n\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, FocusService } from '@ag-grid-community/core';\nimport { Component, KeyCode, _clearElement, _setAriaPosInSet, _setAriaSetSize } from '@ag-grid-community/core';\n\nimport { AgPill } from './agPill';\n\nexport interface PillRendererParams<TValue> {\n    eWrapper?: HTMLElement;\n    announceItemFocus?: () => void;\n    onPillMouseDown?: (e: MouseEvent) => void;\n    getValue: () => TValue[] | null;\n    setValue: (value: TValue[] | null) => void;\n}\n\nexport class AgPillContainer<TValue> extends Component {\n    private focusService: FocusService;\n    private params: PillRendererParams<TValue>;\n    private pills: AgPill[] = [];\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n    }\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-pill-container\" role=\"listbox\"></div>\n            `);\n    }\n\n    public init(params: PillRendererParams<TValue>) {\n        this.params = params;\n        this.refresh();\n    }\n\n    public refresh(): void {\n        this.clearPills();\n\n        const { params, onPillKeyDown } = this;\n\n        const values = params.getValue();\n\n        if (!Array.isArray(values)) {\n            return;\n        }\n\n        const len = values.length;\n\n        for (let i = 0; i < len; i++) {\n            const value = values[i];\n            const pill: AgPill = this.createBean(\n                new AgPill({\n                    onButtonClick: () => this.onPillButtonClick(pill),\n                    onKeyDown: onPillKeyDown.bind(this),\n                })\n            );\n\n            const pillGui = pill.getGui();\n\n            _setAriaPosInSet(pillGui, i + 1);\n            _setAriaSetSize(pillGui, len);\n\n            if (params.onPillMouseDown) {\n                pill.addGuiEventListener('mousedown', params.onPillMouseDown);\n            }\n\n            if (params.announceItemFocus) {\n                pill.addGuiEventListener('focus', params.announceItemFocus);\n            }\n\n            pill.setText(value as string);\n            pill.toggleCloseButtonClass('ag-icon-cancel', true);\n            this.appendChild(pillGui);\n            this.pills.push(pill);\n        }\n    }\n\n    public onNavigationKeyDown(e: KeyboardEvent): void {\n        const { key } = e;\n\n        if (!this.pills.length || (key !== KeyCode.LEFT && key !== KeyCode.RIGHT)) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const activeEl = this.gos.getActiveDomElement();\n        const eGui = this.getGui();\n        const { params, focusService } = this;\n\n        if (eGui.contains(activeEl)) {\n            const nextFocusableEl = focusService.findNextFocusableElement(eGui, false, key === KeyCode.LEFT);\n\n            if (nextFocusableEl) {\n                nextFocusableEl.focus();\n            } else if (params.eWrapper) {\n                params.eWrapper.focus();\n            }\n        } else {\n            const focusableElements = focusService.findFocusableElements(eGui);\n            if (focusableElements.length > 0) {\n                focusableElements[key === KeyCode.RIGHT ? 0 : focusableElements.length - 1].focus();\n            }\n        }\n    }\n\n    private clearPills(): void {\n        const eGui = this.getGui();\n\n        if (eGui.contains(this.gos.getActiveDomElement()) && this.params.eWrapper) {\n            this.params.eWrapper.focus();\n        }\n\n        _clearElement(eGui);\n        this.destroyBeans(this.pills);\n        this.pills = [];\n    }\n\n    private onPillButtonClick(pill: AgPill): void {\n        this.deletePill(pill);\n    }\n\n    private onPillKeyDown(e: KeyboardEvent): void {\n        const key = e.key;\n\n        if (key !== KeyCode.DELETE && key !== KeyCode.BACKSPACE) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const eDoc = this.gos.getDocument();\n        const pillIndex = this.pills.findIndex((pill) => pill.getGui().contains(eDoc.activeElement));\n\n        if (pillIndex === -1) {\n            return;\n        }\n\n        const pill = this.pills[pillIndex];\n\n        if (pill) {\n            this.deletePill(pill, pillIndex);\n        }\n    }\n\n    private deletePill(pill: AgPill, restoreFocusToIndex?: number): void {\n        const value = pill.getText();\n        const values = (this.params.getValue() || []).filter((val) => val !== value);\n        this.params.setValue(values);\n\n        if (!values.length && this.params.eWrapper) {\n            this.params.eWrapper.focus();\n        } else if (restoreFocusToIndex != null) {\n            const pill = this.pills[Math.min(restoreFocusToIndex, this.pills.length - 1)];\n            if (pill) {\n                pill.getFocusableElement().focus();\n            }\n        }\n    }\n\n    public override destroy(): void {\n        this.clearPills();\n        super.destroy();\n    }\n}\n", "import { RefPlaceholder } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nexport interface PillConfig {\n    onKeyDown?: (e?: KeyboardEvent) => void;\n    onButtonClick?: (e?: MouseEvent) => void;\n}\n\nexport class AgPill extends Component {\n    private readonly eText: HTMLElement = RefPlaceholder;\n    private readonly eButton: HTMLElement = RefPlaceholder;\n\n    constructor(private readonly config: PillConfig) {\n        super(/* html */ `\n            <div class=\"ag-pill\" role=\"option\">\n                <span class=\"ag-pill-text\" data-ref=\"eText\"></span>\n                <span class=\"ag-button ag-pill-button\" data-ref=\"eButton\" role=\"presentation\"></span>\n            </div>\n        `);\n    }\n\n    public postConstruct() {\n        const { config, eButton } = this;\n        const { onKeyDown, onButtonClick } = config;\n\n        this.getGui().setAttribute('tabindex', String(this.gos.get('tabIndex')));\n\n        this.addGuiEventListener('focus', () => {\n            this.eButton.focus();\n        });\n\n        if (onKeyDown) {\n            this.addGuiEventListener('keydown', onKeyDown);\n        }\n\n        if (onButtonClick) {\n            this.addManagedElementListeners(eButton, {\n                click: onButtonClick,\n            });\n        }\n    }\n\n    public toggleCloseButtonClass(className: string, force?: boolean) {\n        this.eButton.classList.toggle(className, force);\n    }\n\n    public setText(text: string) {\n        this.eText.textContent = text;\n    }\n\n    public getText(): string | null {\n        return this.eText.textContent;\n    }\n}\n", "import type {\n    Component,\n    RichSelectListRowSelectedEvent,\n    RichSelectParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { KeyCode, _setAriaActiveDescendant, _setAriaControls, _setAriaLabel } from '@ag-grid-community/core';\n\nimport { RichSelectRow } from './agRichSelectRow';\nimport { VirtualList } from './virtualList';\n\nexport type AgRichSelectListEvent = 'fieldPickerValueSelected' | 'richSelectListRowSelected';\n\nconst LIST_COMPONENT_NAME = 'ag-rich-select-list';\nconst ROW_COMPONENT_NAME = 'ag-rich-select-row';\n\nexport class AgRichSelectList<TValue, TEventType extends string = AgRichSelectListEvent> extends VirtualList<\n    Component<TEventType | AgRichSelectListEvent>,\n    TEventType | AgRichSelectListEvent\n> {\n    private eLoading: HTMLElement | undefined;\n    private lastRowHovered: number = -1;\n    private currentList: TValue[] | undefined;\n    private selectedItems: Set<TValue> = new Set<TValue>();\n\n    constructor(\n        private readonly params: RichSelectParams,\n        private readonly richSelectWrapper: HTMLElement,\n        private readonly getSearchString: () => string\n    ) {\n        super({ cssIdentifier: 'rich-select' });\n        this.params = params;\n        this.setComponentCreator(this.createRowComponent.bind(this));\n        /* nothing to update but method required to soft refresh */\n        this.setComponentUpdater(() => {});\n    }\n\n    public override postConstruct(): void {\n        super.postConstruct();\n        this.createLoadingElement();\n\n        const { cellRowHeight, pickerAriaLabelKey, pickerAriaLabelValue } = this.params;\n\n        if (cellRowHeight) {\n            this.setRowHeight(cellRowHeight);\n        }\n\n        const eGui = this.getGui();\n        const eListAriaEl = this.getAriaElement();\n\n        this.addManagedListeners(eGui, {\n            mousemove: this.onMouseMove.bind(this),\n            mouseout: this.onMouseOut.bind(this),\n            mousedown: this.onMouseDown.bind(this),\n            click: this.onClick.bind(this),\n        });\n\n        eGui.classList.add(LIST_COMPONENT_NAME);\n\n        const listId = `${LIST_COMPONENT_NAME}-${this.getCompId()}`;\n        eListAriaEl.setAttribute('id', listId);\n        const translate = this.localeService.getLocaleTextFunc();\n        const ariaLabel = translate(pickerAriaLabelKey, pickerAriaLabelValue);\n\n        _setAriaLabel(eListAriaEl, ariaLabel);\n        _setAriaControls(this.richSelectWrapper, eListAriaEl);\n    }\n\n    public override navigateToPage(key: 'PageUp' | 'PageDown' | 'Home' | 'End'): number | null {\n        const newIndex = super.navigateToPage(key, this.lastRowHovered);\n\n        if (newIndex != null) {\n            this.animationFrameService.requestAnimationFrame(() => {\n                if (!this.isAlive()) {\n                    return null;\n                }\n                this.highlightIndex(newIndex);\n            });\n        }\n\n        return newIndex;\n    }\n\n    protected override drawVirtualRows(softRefresh?: boolean | undefined): void {\n        super.drawVirtualRows(softRefresh);\n\n        this.refreshSelectedItems();\n    }\n\n    public highlightFilterMatch(searchString: string): void {\n        this.forEachRenderedRow((cmp: RichSelectRow<TValue>) => {\n            cmp.highlightString(searchString);\n        });\n    }\n\n    public onNavigationKeyDown(key: string, announceItem: () => void): void {\n        this.animationFrameService.requestAnimationFrame(() => {\n            if (!this.currentList || !this.isAlive()) {\n                return;\n            }\n            const len = this.currentList.length;\n            const oldIndex = this.lastRowHovered;\n\n            const diff = key === KeyCode.DOWN ? 1 : -1;\n            const newIndex = Math.min(Math.max(oldIndex === -1 ? 0 : oldIndex + diff, 0), len - 1);\n            this.highlightIndex(newIndex);\n            announceItem();\n        });\n    }\n\n    public selectValue(value?: TValue[] | TValue): void {\n        if (!this.currentList) {\n            if (this.eLoading) {\n                this.appendChild(this.eLoading);\n            }\n            return;\n        }\n\n        if (this.eLoading?.offsetParent) {\n            this.eLoading.parentElement?.removeChild(this.eLoading);\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        const selectedPositions = this.getIndicesForValues(value);\n        const len = selectedPositions.length;\n\n        if (len > 0) {\n            // make sure the virtual list has been sized correctly\n            this.refresh();\n            this.ensureIndexVisible(selectedPositions[0]);\n            // this second call to refresh is necessary to force scrolled elements\n            // to be rendered with the correct index info.\n            this.refresh(true);\n        }\n\n        this.selectListItems(Array.isArray(value) ? value : [value]);\n    }\n\n    private selectListItems(values: TValue[], append = false): void {\n        if (!append) {\n            this.selectedItems.clear();\n        }\n\n        for (let i = 0; i < values.length; i++) {\n            const currentItem = values[i];\n            if (this.selectedItems.has(currentItem)) {\n                continue;\n            }\n            this.selectedItems.add(currentItem);\n        }\n\n        this.refreshSelectedItems();\n    }\n\n    public getCurrentList(): TValue[] | undefined {\n        return this.currentList;\n    }\n\n    public setCurrentList(list: TValue[]): void {\n        this.currentList = list;\n\n        this.setModel({\n            getRowCount: () => list.length,\n            getRow: (index: number) => list[index],\n            areRowsEqual: (oldRow, newRow) => oldRow === newRow,\n        });\n    }\n\n    public getSelectedItems(): Set<TValue> {\n        return this.selectedItems;\n    }\n\n    public getLastItemHovered(): TValue {\n        return this.currentList![this.lastRowHovered];\n    }\n\n    public highlightIndex(index: number, preventUnnecessaryScroll?: boolean): void {\n        if (!this.currentList) {\n            return;\n        }\n\n        if (index < 0 || index >= this.currentList.length) {\n            this.lastRowHovered = -1;\n        } else {\n            this.lastRowHovered = index;\n\n            const wasScrolled = this.ensureIndexVisible(index, !preventUnnecessaryScroll);\n\n            if (wasScrolled && !preventUnnecessaryScroll) {\n                this.refresh(true);\n            }\n        }\n\n        this.forEachRenderedRow((cmp: RichSelectRow<TValue>, idx: number) => {\n            const highlighted = index === idx;\n\n            cmp.toggleHighlighted(highlighted);\n\n            if (highlighted) {\n                const idForParent = `${ROW_COMPONENT_NAME}-${cmp.getCompId()}`;\n                _setAriaActiveDescendant(this.richSelectWrapper, idForParent);\n                this.richSelectWrapper.setAttribute('data-active-option', idForParent);\n            }\n        });\n    }\n\n    public getIndicesForValues(values?: TValue[] | TValue): number[] {\n        const { currentList } = this;\n\n        if (!currentList || currentList.length === 0 || values == null) {\n            return [];\n        }\n\n        if (!Array.isArray(values)) {\n            values = [values] as TValue[];\n        }\n\n        if (values.length === 0) {\n            return [];\n        }\n\n        const positions: number[] = [];\n\n        for (let i = 0; i < values.length; i++) {\n            const idx = currentList.indexOf(values[i]);\n            if (idx >= 0) {\n                positions.push(idx);\n            }\n        }\n\n        return positions;\n    }\n\n    public toggleListItemSelection(value: TValue): void {\n        if (this.selectedItems.has(value)) {\n            this.selectedItems.delete(value);\n        } else {\n            this.selectedItems.add(value);\n        }\n\n        this.refreshSelectedItems();\n        this.dispatchValueSelected();\n    }\n\n    private refreshSelectedItems(): void {\n        this.forEachRenderedRow((cmp: RichSelectRow<TValue>) => {\n            const selected = this.selectedItems.has(cmp.getValue());\n            cmp.updateSelected(selected);\n        });\n    }\n\n    private createLoadingElement(): void {\n        const eDocument = this.gos.getDocument();\n        const translate = this.localeService.getLocaleTextFunc();\n        const el = eDocument.createElement('div');\n\n        el.classList.add('ag-loading-text');\n        el.innerText = translate('loadingOoo', 'Loading...');\n        this.eLoading = el;\n    }\n\n    private createRowComponent(value: TValue, listItemElement: HTMLElement): Component<AgRichSelectListEvent> {\n        const row = new RichSelectRow<TValue>(this.params);\n        listItemElement.setAttribute('id', `${ROW_COMPONENT_NAME}-${row.getCompId()}`);\n        row.setParentComponent(this);\n        this.createBean(row);\n        row.setState(value);\n\n        const { highlightMatch, searchType = 'fuzzy' } = this.params;\n\n        if (highlightMatch && searchType !== 'fuzzy') {\n            row.highlightString(this.getSearchString());\n        }\n\n        return row;\n    }\n\n    private getRowForMouseEvent(e: MouseEvent): number {\n        const eGui = this.getGui();\n        const rect = eGui.getBoundingClientRect();\n        const scrollTop = this.getScrollTop();\n        const mouseY = e.clientY - rect.top + scrollTop;\n\n        return Math.floor(mouseY / this.getRowHeight());\n    }\n\n    private onMouseMove(e: MouseEvent): void {\n        const row = this.getRowForMouseEvent(e);\n\n        if (row !== -1 && row != this.lastRowHovered) {\n            this.lastRowHovered = row;\n            this.highlightIndex(row, true);\n        }\n    }\n\n    private onMouseDown(e: MouseEvent): void {\n        // this prevents the list from receiving focus as it\n        // should be controlled by the agRichSelect component\n        e.preventDefault();\n    }\n\n    private onMouseOut(e: MouseEvent): void {\n        if (!this.getGui().contains(e.relatedTarget as HTMLElement)) {\n            this.highlightIndex(-1);\n        }\n    }\n\n    private onClick(e: MouseEvent): void {\n        const { multiSelect } = this.params;\n\n        if (!this.currentList) {\n            return;\n        }\n\n        const row = this.getRowForMouseEvent(e);\n        const item = this.currentList[row];\n\n        if (multiSelect) {\n            this.toggleListItemSelection(item);\n        } else {\n            this.selectListItems([item]);\n            this.dispatchValueSelected();\n        }\n    }\n\n    private dispatchValueSelected(): void {\n        const event: WithoutGridCommon<RichSelectListRowSelectedEvent> = {\n            type: 'richSelectListRowSelected',\n            fromEnterKey: false,\n            value: this.selectedItems,\n        };\n\n        this.dispatchLocalEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        this.eLoading = undefined;\n    }\n}\n", "import type {\n    AgPromise,\n    BeanCollection,\n    IRichCellEditorRendererParams,\n    RichSelectParams,\n    UserCompDetails,\n    UserComponentFactory,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    _bindCellRendererToHtmlElement,\n    _escapeString,\n    _exists,\n    _setAriaSelected,\n} from '@ag-grid-community/core';\n\nimport type { AgRichSelect } from './agRichSelect';\n\nexport class RichSelectRow<TValue> extends Component {\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private value: TValue;\n    private parsedValue: string | null;\n\n    constructor(private readonly params: RichSelectParams<TValue>) {\n        super(/* html */ `<div class=\"ag-rich-select-row\" role=\"presentation\"></div>`);\n    }\n\n    public setState(value: TValue): void {\n        let formattedValue: string = '';\n\n        const { params } = this;\n\n        if (params.valueFormatter) {\n            formattedValue = params.valueFormatter(value);\n        }\n        const rendererSuccessful = this.populateWithRenderer(value, formattedValue);\n        if (!rendererSuccessful) {\n            this.populateWithoutRenderer(value, formattedValue);\n        }\n\n        this.value = value;\n    }\n\n    public highlightString(matchString: string): void {\n        const { parsedValue } = this;\n\n        if (this.params.cellRenderer || !_exists(parsedValue)) {\n            return;\n        }\n\n        let hasMatch = _exists(matchString);\n\n        if (hasMatch) {\n            const index = parsedValue?.toLocaleLowerCase().indexOf(matchString.toLocaleLowerCase());\n            if (index >= 0) {\n                const highlightEndIndex = index + matchString.length;\n                const startPart = _escapeString(parsedValue.slice(0, index), true);\n                const highlightedPart = _escapeString(parsedValue.slice(index, highlightEndIndex), true);\n                const endPart = _escapeString(parsedValue.slice(highlightEndIndex));\n                this.renderValueWithoutRenderer(\n                    /* html */ `${startPart}<span class=\"ag-rich-select-row-text-highlight\">${highlightedPart}</span>${endPart}`\n                );\n            } else {\n                hasMatch = false;\n            }\n        }\n\n        if (!hasMatch) {\n            this.renderValueWithoutRenderer(parsedValue);\n        }\n    }\n\n    public updateSelected(selected: boolean): void {\n        const eGui = this.getGui();\n        _setAriaSelected(eGui.parentElement!, selected);\n\n        this.addOrRemoveCssClass('ag-rich-select-row-selected', selected);\n    }\n\n    public getValue(): TValue {\n        return this.value;\n    }\n\n    public toggleHighlighted(highlighted: boolean): void {\n        this.addOrRemoveCssClass('ag-rich-select-row-highlighted', highlighted);\n    }\n\n    private populateWithoutRenderer(value: any, valueFormatted: any) {\n        const eDocument = this.gos.getDocument();\n        const eGui = this.getGui();\n\n        const span = eDocument.createElement('span');\n        span.style.overflow = 'hidden';\n        span.style.textOverflow = 'ellipsis';\n        const parsedValue = _escapeString(_exists(valueFormatted) ? valueFormatted : value, true);\n        this.parsedValue = _exists(parsedValue) ? parsedValue : null;\n\n        eGui.appendChild(span);\n        this.renderValueWithoutRenderer(parsedValue);\n        this.setTooltip({\n            newTooltipText: this.parsedValue,\n            shouldDisplayTooltip: () => span.scrollWidth > span.clientWidth,\n        });\n    }\n\n    private renderValueWithoutRenderer(value: string | null): void {\n        const span = this.getGui().querySelector('span');\n        if (!span) {\n            return;\n        }\n        span.innerHTML = _exists(value) ? value : '&nbsp;';\n    }\n\n    private populateWithRenderer(value: TValue, valueFormatted: string): boolean {\n        // bad coder here - we are not populating all values of the cellRendererParams\n        let cellRendererPromise: AgPromise<any> | undefined;\n        let userCompDetails: UserCompDetails | undefined;\n\n        if (this.params.cellRenderer) {\n            const richSelect = this.getParentComponent()?.getParentComponent() as AgRichSelect;\n            userCompDetails = this.userComponentFactory.getEditorRendererDetails<\n                RichSelectParams,\n                IRichCellEditorRendererParams<TValue>\n            >(this.params, {\n                value,\n                valueFormatted,\n                getValue: () => richSelect?.getValue(),\n                setValue: (value: TValue[] | TValue | null) => {\n                    richSelect?.setValue(value, true);\n                },\n                setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                    this.setTooltip({ newTooltipText: value, shouldDisplayTooltip });\n                },\n            });\n        }\n\n        if (userCompDetails) {\n            cellRendererPromise = userCompDetails.newAgStackInstance();\n        }\n\n        if (cellRendererPromise) {\n            _bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());\n        }\n\n        if (cellRendererPromise) {\n            cellRendererPromise.then((childComponent) => {\n                this.addDestroyFunc(() => {\n                    this.destroyBean(childComponent);\n                });\n            });\n            return true;\n        }\n        return false;\n    }\n}\n", "import type {\n    AnimationFrameService,\n    BeanCollection,\n    Component,\n    ComponentEvent,\n    CssVariablesChanged,\n    Environment,\n    ResizeObserverService,\n} from '@ag-grid-community/core';\nimport {\n    KeyCode,\n    RefPlaceholder,\n    TabGuardComp,\n    _getAriaPosInSet,\n    _setAriaLabel,\n    _setAriaPosInSet,\n    _setAriaRole,\n    _setAriaSetSize,\n    _stopPropagationForAgGrid,\n    _waitUntil,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { VirtualListModel } from './iVirtualList';\n\ninterface VirtualListParams {\n    cssIdentifier?: string;\n    ariaRole?: string;\n    listName?: string;\n}\n\nfunction getVirtualListTemplate(cssIdentifier: string) {\n    return (\n        /* html */\n        `<div class=\"ag-virtual-list-viewport ag-${cssIdentifier}-virtual-list-viewport\" role=\"presentation\">\n            <div class=\"ag-virtual-list-container ag-${cssIdentifier}-virtual-list-container\" data-ref=\"eContainer\"></div>\n        </div>`\n    );\n}\n\nexport class VirtualList<\n    C extends Component<any> = Component<any>,\n    TEventType extends string = ComponentEvent,\n> extends TabGuardComp<TEventType> {\n    private resizeObserverService: ResizeObserverService;\n    protected animationFrameService: AnimationFrameService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.resizeObserverService = beans.resizeObserverService;\n        this.animationFrameService = beans.animationFrameService;\n        this.environment = beans.environment;\n    }\n\n    private readonly cssIdentifier: string;\n    private readonly ariaRole: string;\n    private listName?: string;\n\n    private model: VirtualListModel;\n    private renderedRows = new Map<number, { rowComponent: C; eDiv: HTMLDivElement; value: any }>();\n    private componentCreator: (value: any, listItemElement: HTMLElement) => C;\n    private componentUpdater: (value: any, component: C) => void;\n    private rowHeight = 20;\n    private pageSize = -1;\n    private isScrolling = false;\n    private lastFocusedRowIndex: number | null;\n    private isHeightFromTheme: boolean = true;\n    private readonly eContainer: HTMLElement = RefPlaceholder;\n\n    constructor(params?: VirtualListParams) {\n        super(getVirtualListTemplate(params?.cssIdentifier || 'default'));\n\n        const { cssIdentifier = 'default', ariaRole = 'listbox', listName } = params || {};\n\n        this.cssIdentifier = cssIdentifier;\n        this.ariaRole = ariaRole;\n        this.listName = listName;\n    }\n\n    public postConstruct(): void {\n        this.addScrollListener();\n        this.rowHeight = this.getItemHeight();\n        this.addResizeObserver();\n\n        this.initialiseTabGuard({\n            onFocusIn: (e: FocusEvent) => this.onFocusIn(e),\n            onFocusOut: (e: FocusEvent) => this.onFocusOut(e),\n            focusInnerElement: (fromBottom: boolean) => this.focusInnerElement(fromBottom),\n            onTabKeyDown: (e) => this.onTabKeyDown(e),\n            handleKeyDown: (e) => this.handleKeyDown(e),\n        });\n\n        this.setAriaProperties();\n        this.addManagedEventListeners({ gridStylesChanged: this.onGridStylesChanged.bind(this) });\n    }\n\n    private onGridStylesChanged(e: CssVariablesChanged): void {\n        if (e.listItemHeightChanged) {\n            this.rowHeight = this.getItemHeight();\n            this.refresh();\n        }\n    }\n\n    private setAriaProperties(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const listName = translate('ariaDefaultListName', this.listName || 'List');\n        const ariaEl = this.eContainer;\n\n        _setAriaRole(ariaEl, this.ariaRole);\n        _setAriaLabel(ariaEl, listName);\n    }\n\n    private addResizeObserver(): void {\n        // do this in an animation frame to prevent loops\n        const listener = () => this.animationFrameService.requestAnimationFrame(() => this.drawVirtualRows());\n        const destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);\n        this.addDestroyFunc(destroyObserver);\n    }\n\n    protected focusInnerElement(fromBottom: boolean): void {\n        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);\n    }\n\n    protected onFocusIn(e: FocusEvent): void {\n        const target = e.target as HTMLElement;\n\n        if (target.classList.contains('ag-virtual-list-item')) {\n            this.lastFocusedRowIndex = _getAriaPosInSet(target) - 1;\n        }\n    }\n\n    protected onFocusOut(e: FocusEvent): void {\n        if (!this.getFocusableElement().contains(e.relatedTarget as HTMLElement)) {\n            this.lastFocusedRowIndex = null;\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (this.navigate(e.key === KeyCode.UP)) {\n                    e.preventDefault();\n                }\n\n                break;\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_DOWN:\n                if (this.navigateToPage(e.key) !== null) {\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        _stopPropagationForAgGrid(e);\n        this.forceFocusOutOfContainer(e.shiftKey);\n    }\n\n    private navigate(up: boolean): boolean {\n        if (this.lastFocusedRowIndex == null) {\n            return false;\n        }\n\n        const nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);\n\n        if (nextRow < 0 || nextRow >= this.model.getRowCount()) {\n            return false;\n        }\n\n        this.focusRow(nextRow);\n\n        return true;\n    }\n\n    public navigateToPage(\n        key: 'Home' | 'PageUp' | 'PageDown' | 'End',\n        fromItem: number | 'focused' = 'focused'\n    ): number | null {\n        let hasFocus = false;\n\n        if (fromItem === 'focused') {\n            fromItem = this.getLastFocusedRow() as number;\n            hasFocus = true;\n        }\n\n        const rowCount = this.model.getRowCount() - 1;\n\n        let newIndex = -1;\n\n        if (key === KeyCode.PAGE_HOME) {\n            newIndex = 0;\n        } else if (key === KeyCode.PAGE_END) {\n            newIndex = rowCount;\n        } else if (key === KeyCode.PAGE_DOWN) {\n            newIndex = Math.min(fromItem + this.pageSize, rowCount);\n        } else if (key === KeyCode.PAGE_UP) {\n            newIndex = Math.max(fromItem - this.pageSize, 0);\n        }\n\n        if (newIndex === -1) {\n            return null;\n        }\n\n        if (hasFocus) {\n            this.focusRow(newIndex);\n        } else {\n            this.ensureIndexVisible(newIndex);\n        }\n\n        return newIndex;\n    }\n\n    public getLastFocusedRow(): number | null {\n        return this.lastFocusedRowIndex;\n    }\n\n    public focusRow(rowNumber: number): void {\n        if (this.isScrolling) {\n            return;\n        }\n        this.isScrolling = true;\n\n        this.ensureIndexVisible(rowNumber);\n\n        this.animationFrameService.requestAnimationFrame(() => {\n            this.isScrolling = false;\n            if (!this.isAlive()) {\n                return;\n            }\n            const renderedRow = this.renderedRows.get(rowNumber);\n\n            if (renderedRow) {\n                renderedRow.eDiv.focus();\n            }\n        });\n    }\n\n    public getComponentAt(rowIndex: number): C | undefined {\n        const comp = this.renderedRows.get(rowIndex);\n\n        return comp && comp.rowComponent;\n    }\n\n    public forEachRenderedRow(func: (comp: C, idx: number) => void): void {\n        this.renderedRows.forEach((value, key) => func(value.rowComponent, key));\n    }\n\n    private getItemHeight(): number {\n        if (!this.isHeightFromTheme) {\n            return this.rowHeight;\n        }\n        return this.environment.getDefaultListItemHeight();\n    }\n\n    /**\n     * Returns true if the view had to be scrolled, otherwise, false.\n     */\n    public ensureIndexVisible(index: number, scrollPartialIntoView: boolean = true): boolean {\n        const lastRow = this.model.getRowCount();\n\n        if (typeof index !== 'number' || index < 0 || index >= lastRow) {\n            _warnOnce('invalid row index for ensureIndexVisible: ', index);\n            return false;\n        }\n\n        const rowTopPixel = index * this.rowHeight;\n        const rowBottomPixel = rowTopPixel + this.rowHeight;\n        const eGui = this.getGui();\n\n        const viewportTopPixel = eGui.scrollTop;\n        const viewportHeight = eGui.offsetHeight;\n        const viewportBottomPixel = viewportTopPixel + viewportHeight;\n\n        const diff = scrollPartialIntoView ? 0 : this.rowHeight;\n        const viewportScrolledPastRow = viewportTopPixel > rowTopPixel + diff;\n        const viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel - diff;\n\n        if (viewportScrolledPastRow) {\n            // if row is before, scroll up with row at top\n            eGui.scrollTop = rowTopPixel;\n            return true;\n        }\n\n        if (viewportScrolledBeforeRow) {\n            // if row is below, scroll down with row at bottom\n            const newScrollPosition = rowBottomPixel - viewportHeight;\n            eGui.scrollTop = newScrollPosition;\n            return true;\n        }\n\n        return false;\n    }\n\n    public setComponentCreator(componentCreator: (value: any, listItemElement: HTMLElement) => C): void {\n        this.componentCreator = componentCreator;\n    }\n\n    public setComponentUpdater(componentUpdater: (value: any, component: C) => void): void {\n        this.componentUpdater = componentUpdater;\n    }\n\n    public getRowHeight(): number {\n        return this.rowHeight;\n    }\n\n    public getScrollTop(): number {\n        return this.getGui().scrollTop;\n    }\n\n    public setRowHeight(rowHeight: number): void {\n        this.isHeightFromTheme = false;\n        this.rowHeight = rowHeight;\n        this.refresh();\n    }\n\n    public refresh(softRefresh?: boolean): void {\n        if (this.model == null || !this.isAlive()) {\n            return;\n        }\n\n        const rowCount = this.model.getRowCount();\n        this.eContainer.style.height = `${rowCount * this.rowHeight}px`;\n\n        // ensure height is applied before attempting to redraw rows\n        _waitUntil(\n            () => this.eContainer.clientHeight >= rowCount * this.rowHeight,\n            () => {\n                if (!this.isAlive()) {\n                    return;\n                }\n\n                if (this.canSoftRefresh(softRefresh)) {\n                    this.drawVirtualRows(true);\n                } else {\n                    this.clearVirtualRows();\n                    this.drawVirtualRows();\n                }\n            }\n        );\n    }\n\n    private canSoftRefresh(softRefresh: boolean | undefined): boolean {\n        return !!(\n            softRefresh &&\n            this.renderedRows.size &&\n            typeof this.model.areRowsEqual === 'function' &&\n            this.componentUpdater\n        );\n    }\n\n    private clearVirtualRows() {\n        this.renderedRows.forEach((_, rowIndex) => this.removeRow(rowIndex));\n    }\n\n    protected drawVirtualRows(softRefresh?: boolean) {\n        if (!this.isAlive() || !this.model) {\n            return;\n        }\n\n        const gui = this.getGui();\n        const topPixel = gui.scrollTop;\n        const bottomPixel = topPixel + gui.offsetHeight;\n        const firstRow = Math.floor(topPixel / this.rowHeight);\n        const lastRow = Math.floor(bottomPixel / this.rowHeight);\n        this.pageSize = Math.floor((bottomPixel - topPixel) / this.rowHeight);\n\n        this.ensureRowsRendered(firstRow, lastRow, softRefresh);\n    }\n\n    private ensureRowsRendered(start: number, finish: number, softRefresh?: boolean) {\n        // remove any rows that are no longer required\n        this.renderedRows.forEach((_, rowIndex) => {\n            if ((rowIndex < start || rowIndex > finish) && rowIndex !== this.lastFocusedRowIndex) {\n                this.removeRow(rowIndex);\n            }\n        });\n\n        if (softRefresh) {\n            // refresh any existing rows\n            this.refreshRows();\n        }\n\n        // insert any required new rows\n        for (let rowIndex = start; rowIndex <= finish; rowIndex++) {\n            if (this.renderedRows.has(rowIndex)) {\n                continue;\n            }\n\n            // check this row actually exists (in case overflow buffer window exceeds real data)\n            if (rowIndex < this.model.getRowCount()) {\n                this.insertRow(rowIndex);\n            }\n        }\n    }\n\n    private insertRow(rowIndex: number): void {\n        const value = this.model.getRow(rowIndex);\n        const eDiv = document.createElement('div');\n\n        eDiv.classList.add('ag-virtual-list-item', `ag-${this.cssIdentifier}-virtual-list-item`);\n        _setAriaRole(eDiv, this.ariaRole === 'tree' ? 'treeitem' : 'option');\n        _setAriaSetSize(eDiv, this.model.getRowCount());\n        _setAriaPosInSet(eDiv, rowIndex + 1);\n        eDiv.setAttribute('tabindex', '-1');\n\n        eDiv.style.height = `${this.rowHeight}px`;\n        eDiv.style.top = `${this.rowHeight * rowIndex}px`;\n\n        const rowComponent = this.componentCreator(value, eDiv);\n\n        rowComponent.addGuiEventListener('focusin', () => (this.lastFocusedRowIndex = rowIndex));\n\n        eDiv.appendChild(rowComponent.getGui());\n\n        // keep the DOM order consistent with the order of the rows\n        if (this.renderedRows.has(rowIndex - 1)) {\n            this.renderedRows.get(rowIndex - 1)!.eDiv.insertAdjacentElement('afterend', eDiv);\n        } else if (this.renderedRows.has(rowIndex + 1)) {\n            this.renderedRows.get(rowIndex + 1)!.eDiv.insertAdjacentElement('beforebegin', eDiv);\n        } else {\n            this.eContainer.appendChild(eDiv);\n        }\n\n        this.renderedRows.set(rowIndex, { rowComponent, eDiv, value });\n    }\n\n    private removeRow(rowIndex: number) {\n        const component = this.renderedRows.get(rowIndex)!;\n\n        this.eContainer.removeChild(component.eDiv);\n        this.destroyBean(component.rowComponent);\n        this.renderedRows.delete(rowIndex);\n    }\n\n    private refreshRows(): void {\n        const rowCount = this.model.getRowCount();\n        this.renderedRows.forEach((row, rowIndex) => {\n            if (rowIndex >= rowCount) {\n                this.removeRow(rowIndex);\n            } else {\n                const newValue = this.model.getRow(rowIndex);\n                if (this.model.areRowsEqual?.(row.value, newValue)) {\n                    this.componentUpdater(newValue, row.rowComponent);\n                } else {\n                    // to be replaced later\n                    this.removeRow(rowIndex);\n                }\n            }\n        });\n    }\n\n    private addScrollListener() {\n        this.addGuiEventListener('scroll', () => this.drawVirtualRows(), { passive: true });\n    }\n\n    public setModel(model: VirtualListModel): void {\n        this.model = model;\n    }\n\n    public override getAriaElement(): Element {\n        return this.eContainer;\n    }\n\n    public override destroy(): void {\n        if (!this.isAlive()) {\n            return;\n        }\n\n        this.clearVirtualRows();\n        super.destroy();\n    }\n}\n", "import type {\n    AgEvent,\n    BeanCollection,\n    ComponentSelector,\n    DragAndDropIcon,\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    DragSourceType,\n    DropTarget,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    KeyCode,\n    RefPlaceholder,\n    TouchListener,\n    _createIconNoSpan,\n    _escapeString,\n    _setAriaLabel,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nexport type PillDragCompEvent = 'columnRemove';\nexport abstract class PillDragComp<TItem> extends Component<PillDragCompEvent> {\n    private dragAndDropService: DragAndDropService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragAndDropService = beans.dragAndDropService;\n    }\n\n    private readonly eText: HTMLElement = RefPlaceholder;\n    private readonly eDragHandle: HTMLElement = RefPlaceholder;\n    private readonly eButton: HTMLElement = RefPlaceholder;\n\n    public abstract getItem(): TItem;\n    protected abstract getDisplayName(): string;\n    protected abstract getAriaDisplayName(): string;\n    protected abstract getTooltip(): string | null | undefined;\n    protected abstract createGetDragItem(): () => DragItem<TItem>;\n    protected abstract getDragSourceType(): DragSourceType;\n\n    constructor(\n        private dragSourceDropTarget: DropTarget,\n        private ghost: boolean,\n        private horizontal: boolean,\n        private template?: string,\n        private agComponents?: ComponentSelector[]\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(\n            this.template ??\n                /* html */ `\n            <span role=\"option\">\n              <span data-ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n              <span data-ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n              <span data-ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n            </span>`,\n            this.agComponents\n        );\n        const eGui = this.getGui();\n\n        this.addElementClasses(eGui);\n        this.addElementClasses(this.eDragHandle, 'drag-handle');\n        this.addElementClasses(this.eText, 'text');\n        this.addElementClasses(this.eButton, 'button');\n\n        this.eDragHandle.appendChild(_createIconNoSpan('columnDrag', this.gos)!);\n\n        this.eButton.appendChild(_createIconNoSpan('cancel', this.gos)!);\n\n        this.setupComponents();\n\n        if (!this.ghost && this.isDraggable()) {\n            this.addDragSource();\n        }\n\n        this.setupAria();\n\n        this.setupTooltip();\n        this.activateTabIndex();\n\n        this.refreshDraggable();\n    }\n\n    protected isDraggable(): boolean {\n        return true;\n    }\n\n    protected refreshDraggable(): void {\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !this.isDraggable());\n    }\n\n    protected setupAria() {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const ariaInstructions = [this.getAriaDisplayName()];\n\n        this.addAdditionalAriaInstructions(ariaInstructions, translate);\n\n        _setAriaLabel(this.getGui(), ariaInstructions.join('. '));\n    }\n\n    protected addAdditionalAriaInstructions(\n        ariaInstructions: string[],\n        translate: (key: string, defaultValue: string) => string\n    ): void {\n        if (this.isRemovable()) {\n            const deleteAria = translate('ariaDropZoneColumnComponentDescription', 'Press DELETE to remove');\n            ariaInstructions.push(deleteAria);\n        }\n    }\n\n    private setupTooltip(): void {\n        const refresh = () => {\n            const newTooltipText = this.getTooltip();\n            this.setTooltip({ newTooltipText });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    protected getDragSourceId(): string | undefined {\n        return undefined;\n    }\n\n    protected getDefaultIconName(): DragAndDropIcon {\n        return 'notAllowed';\n    }\n\n    private addDragSource(): void {\n        const { dragAndDropService, eDragHandle } = this;\n        const getDragItem = this.createGetDragItem();\n        const defaultIconName = this.getDefaultIconName();\n        const dragSource: DragSource = {\n            type: this.getDragSourceType(),\n            sourceId: this.getDragSourceId(),\n            eElement: eDragHandle,\n            getDefaultIconName: () => defaultIconName,\n            getDragItem,\n            dragItemName: this.getDisplayName(),\n        };\n\n        dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => dragAndDropService.removeDragSource(dragSource));\n    }\n\n    protected setupComponents(): void {\n        this.setTextValue();\n        this.setupRemove();\n\n        if (this.ghost) {\n            this.addCssClass('ag-column-drop-cell-ghost');\n        }\n    }\n\n    protected isRemovable(): boolean {\n        return true;\n    }\n\n    protected refreshRemove(): void {\n        _setDisplayed(this.eButton, this.isRemovable());\n    }\n\n    private setupRemove(): void {\n        this.refreshRemove();\n\n        const agEvent: AgEvent<PillDragCompEvent> = { type: 'columnRemove' };\n\n        this.addGuiEventListener('keydown', (e: KeyboardEvent) => this.onKeyDown(e));\n\n        this.addManagedElementListeners(this.eButton, {\n            click: (mouseEvent: MouseEvent) => {\n                this.dispatchLocalEvent(agEvent);\n                mouseEvent.stopPropagation();\n            },\n        });\n\n        const touchListener = new TouchListener(this.eButton);\n        this.addManagedListeners(touchListener, {\n            tap: () => this.dispatchLocalEvent(agEvent),\n        });\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n\n    protected onKeyDown(e: KeyboardEvent): void {\n        const isDelete = e.key === KeyCode.DELETE;\n\n        if (isDelete) {\n            if (this.isRemovable()) {\n                e.preventDefault();\n                this.dispatchLocalEvent({ type: 'columnRemove' });\n            }\n        }\n    }\n\n    protected getDisplayValue(): string {\n        return this.getDisplayName();\n    }\n\n    private setTextValue(): void {\n        const displayValue = this.getDisplayValue();\n        const displayValueSanitised: any = _escapeString(displayValue);\n\n        this.eText.innerHTML = displayValueSanitised;\n    }\n\n    private addElementClasses(el: HTMLElement, suffix?: string) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop-cell${suffix}`, `ag-column-drop-${direction}-cell${suffix}`);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        (this.dragSourceDropTarget as any) = null;\n    }\n}\n", "import type {\n    BeanCollection,\n    DragAndDropService,\n    DragItem,\n    DragSourceType,\n    DraggingEvent,\n    DropTarget,\n    FocusService,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    KeyCode,\n    ManagedFocusFeature,\n    PositionableFeature,\n    _areEqual,\n    _clearElement,\n    _createIconNoSpan,\n    _existsAndNotEmpty,\n    _includes,\n    _insertArrayIntoArray,\n    _last,\n    _setAriaHidden,\n    _setAriaLabel,\n    _setAriaPosInSet,\n    _setAriaRole,\n    _setAriaSetSize,\n} from '@ag-grid-community/core';\n\nimport type { PillDragComp } from './pillDragComp';\n\nexport interface PillDropZonePanelParams {\n    emptyMessage?: string;\n    title?: string;\n    icon?: Element;\n}\n\ntype PillState = 'notDragging' | 'newItemsIn' | 'rearrangeItems';\n\nexport abstract class PillDropZonePanel<TPill extends PillDragComp<TItem>, TItem> extends Component {\n    private focusService: FocusService;\n    private dragAndDropService: DragAndDropService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.dragAndDropService = beans.dragAndDropService;\n    }\n\n    private state: PillState = 'notDragging';\n\n    private dropTarget: DropTarget;\n\n    // when we are considering a drop from a dnd event,\n    // the items to be dropped go in here\n    private potentialDndItems: TItem[];\n\n    private guiDestroyFunctions: (() => void)[] = [];\n\n    private params: PillDropZonePanelParams;\n\n    private childPillComponents: TPill[] = [];\n    private insertIndex: number;\n\n    // when this component is refreshed, we rip out all DOM elements and build it up\n    // again from scratch. one exception is ePillDropList, as we want to maintain the\n    // scroll position between the refreshes, so we create one instance of it here and\n    // reuse it.\n    private ePillDropList: HTMLElement;\n\n    private positionableFeature: PositionableFeature;\n    private resizeEnabled: boolean = false;\n\n    protected abstract isItemDroppable(item: TItem, draggingEvent: DraggingEvent): boolean;\n    protected abstract updateItems(items: TItem[]): void;\n    protected abstract getExistingItems(): TItem[];\n    protected abstract getIconName(): string;\n    protected abstract getAriaLabel(): string;\n    protected abstract createPillComponent(\n        item: TItem,\n        dropTarget: DropTarget,\n        ghost: boolean,\n        horizontal: boolean\n    ): TPill;\n    protected abstract getItems(dragItem: DragItem<TItem>): TItem[];\n    protected abstract isInterestedIn(type: DragSourceType): boolean;\n\n    constructor(private horizontal: boolean) {\n        super(/* html */ `<div class=\"ag-unselectable\" role=\"presentation\"></div>`);\n        this.addElementClasses(this.getGui());\n        this.ePillDropList = document.createElement('div');\n        this.addElementClasses(this.ePillDropList, 'list');\n        _setAriaRole(this.ePillDropList, 'listbox');\n    }\n\n    public isHorizontal(): boolean {\n        return this.horizontal;\n    }\n\n    public toggleResizable(resizable: boolean) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n        this.resizeEnabled = resizable;\n    }\n\n    protected isSourceEventFromTarget(draggingEvent: DraggingEvent): boolean {\n        const { dropZoneTarget, dragSource } = draggingEvent;\n        return dropZoneTarget.contains(dragSource.eElement);\n    }\n\n    public override destroy(): void {\n        this.destroyGui();\n        super.destroy();\n    }\n\n    private destroyGui(): void {\n        this.guiDestroyFunctions.forEach((func) => func());\n        this.guiDestroyFunctions.length = 0;\n        this.childPillComponents.length = 0;\n        _clearElement(this.getGui());\n        _clearElement(this.ePillDropList);\n    }\n\n    public init(params?: PillDropZonePanelParams): void {\n        this.params = params ?? {};\n\n        this.createManagedBean(\n            new ManagedFocusFeature(this.getFocusableElement(), {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.onKeyDown.bind(this),\n            })\n        );\n\n        this.setupDropTarget();\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n\n        this.refreshGui();\n        _setAriaLabel(this.ePillDropList, this.getAriaLabel());\n    }\n\n    private onTabKeyDown(e: KeyboardEvent): void {\n        const focusableElements = this.focusService.findFocusableElements(this.getFocusableElement(), null, true);\n        const len = focusableElements.length;\n\n        if (len === 0) {\n            return;\n        }\n\n        const { shiftKey } = e;\n        const activeEl = this.gos.getActiveDomElement();\n\n        const isFirstFocused = activeEl === focusableElements[0];\n        const isLastFocused = activeEl === _last(focusableElements);\n        const shouldAllowDefaultTab = len === 1 || (isFirstFocused && shiftKey) || (isLastFocused && !shiftKey);\n\n        if (!shouldAllowDefaultTab) {\n            focusableElements[shiftKey ? 0 : len - 1].focus();\n        }\n    }\n\n    private onKeyDown(e: KeyboardEvent) {\n        const { key } = e;\n        const isVertical = !this.horizontal;\n\n        let isNext = key === KeyCode.DOWN;\n        let isPrevious = key === KeyCode.UP;\n\n        if (!isVertical) {\n            const isRtl = this.gos.get('enableRtl');\n            isNext = (!isRtl && key === KeyCode.RIGHT) || (isRtl && key === KeyCode.LEFT);\n            isPrevious = (!isRtl && key === KeyCode.LEFT) || (isRtl && key === KeyCode.RIGHT);\n        }\n\n        if (!isNext && !isPrevious) {\n            return;\n        }\n\n        const el = this.focusService.findNextFocusableElement(this.getFocusableElement(), false, isPrevious);\n\n        if (el) {\n            e.preventDefault();\n            el.focus();\n        }\n    }\n\n    private addElementClasses(el: Element, suffix?: string) {\n        suffix = suffix ? `-${suffix}` : '';\n        const direction = this.horizontal ? 'horizontal' : 'vertical';\n        el.classList.add(`ag-column-drop${suffix}`, `ag-column-drop-${direction}${suffix}`);\n    }\n\n    private setupDropTarget(): void {\n        this.dropTarget = {\n            getContainer: this.getGui.bind(this),\n            getIconName: this.getIconName.bind(this),\n            onDragging: this.onDragging.bind(this),\n            onDragEnter: this.onDragEnter.bind(this),\n            onDragLeave: this.onDragLeave.bind(this),\n            onDragStop: this.onDragStop.bind(this),\n            isInterestedIn: this.isInterestedIn.bind(this),\n        };\n\n        this.dragAndDropService.addDropTarget(this.dropTarget);\n    }\n\n    protected minimumAllowedNewInsertIndex(): number {\n        return 0;\n    }\n\n    private checkInsertIndex(draggingEvent: DraggingEvent): boolean {\n        const newIndex = this.getNewInsertIndex(draggingEvent);\n\n        // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel\n        if (newIndex < 0) {\n            return false;\n        }\n\n        const minimumAllowedIndex = this.minimumAllowedNewInsertIndex();\n        const newAdjustedIndex = Math.max(minimumAllowedIndex, newIndex);\n\n        const changed = newAdjustedIndex !== this.insertIndex;\n\n        if (changed) {\n            this.insertIndex = newAdjustedIndex;\n        }\n\n        return changed;\n    }\n\n    private getNewInsertIndex(draggingEvent: DraggingEvent): number {\n        const mouseEvent = draggingEvent.event;\n        const mouseLocation = this.horizontal ? mouseEvent.clientX : mouseEvent.clientY;\n\n        const boundsList = this.childPillComponents.map((comp) => comp.getGui().getBoundingClientRect());\n        // find the non-ghost component we're hovering\n        const hoveredIndex = boundsList.findIndex((rect) =>\n            this.horizontal\n                ? rect.right > mouseLocation && rect.left < mouseLocation\n                : rect.top < mouseLocation && rect.bottom > mouseLocation\n        );\n\n        // not hovering a non-ghost component\n        if (hoveredIndex === -1) {\n            const enableRtl = this.gos.get('enableRtl');\n\n            // if mouse is below or right of all components then new index should be placed last\n            const isLast = boundsList.every((rect) => mouseLocation > (this.horizontal ? rect.right : rect.bottom));\n\n            if (isLast) {\n                return enableRtl && this.horizontal ? 0 : this.childPillComponents.length;\n            }\n\n            // if mouse is above or left of all components, new index is first\n            const isFirst = boundsList.every((rect) => mouseLocation < (this.horizontal ? rect.left : rect.top));\n\n            if (isFirst) {\n                return enableRtl && this.horizontal ? this.childPillComponents.length : 0;\n            }\n\n            // must be hovering a ghost, don't change the index\n            return this.insertIndex;\n        }\n\n        // if the old index is equal to or less than the index of our new target\n        // we need to shift right, to insert after rather than before\n        if (this.insertIndex <= hoveredIndex) {\n            return hoveredIndex + 1;\n        }\n        return hoveredIndex;\n    }\n\n    private checkDragStartedBySelf(draggingEvent: DraggingEvent): void {\n        if (this.state !== 'notDragging') {\n            return;\n        }\n\n        this.state = 'rearrangeItems';\n\n        this.potentialDndItems = this.getItems(draggingEvent.dragSource.getDragItem());\n        this.refreshGui();\n\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    }\n\n    private onDragging(draggingEvent: DraggingEvent): void {\n        this.checkDragStartedBySelf(draggingEvent);\n\n        if (this.checkInsertIndex(draggingEvent)) {\n            this.refreshGui();\n        }\n    }\n\n    protected handleDragEnterEnd(draggingEvent: DraggingEvent): void {}\n\n    private onDragEnter(draggingEvent: DraggingEvent): void {\n        // this will contain all items that are potential drops\n        const dragItems = this.getItems(draggingEvent.dragSource.getDragItem());\n        this.state = 'newItemsIn';\n        // take out items that are not droppable\n        const goodDragItems = dragItems.filter((item) => this.isItemDroppable(item, draggingEvent));\n        const alreadyPresent = goodDragItems.every(\n            (item) => this.childPillComponents.map((cmp) => cmp.getItem()).indexOf(item) !== -1\n        );\n\n        if (goodDragItems.length === 0) {\n            return;\n        }\n\n        this.potentialDndItems = goodDragItems;\n\n        if (alreadyPresent) {\n            this.state = 'notDragging';\n            return;\n        }\n\n        this.handleDragEnterEnd(draggingEvent);\n\n        this.checkInsertIndex(draggingEvent);\n        this.refreshGui();\n    }\n\n    protected isPotentialDndItems(): boolean {\n        return _existsAndNotEmpty(this.potentialDndItems);\n    }\n\n    protected handleDragLeaveEnd(draggingEvent: DraggingEvent): void {}\n\n    private onDragLeave(draggingEvent: DraggingEvent): void {\n        // if the dragging started from us, we remove the group, however if it started\n        // some place else, then we don't, as it was only 'asking'\n\n        if (this.state === 'rearrangeItems') {\n            const items = this.getItems(draggingEvent.dragSource.getDragItem());\n            this.removeItems(items);\n        }\n\n        if (this.isPotentialDndItems()) {\n            this.handleDragLeaveEnd(draggingEvent);\n\n            this.potentialDndItems = [];\n            this.refreshGui();\n        }\n\n        this.state = 'notDragging';\n    }\n\n    private onDragStop(): void {\n        if (this.isPotentialDndItems()) {\n            if (this.state === 'newItemsIn') {\n                this.addItems(this.potentialDndItems);\n            } else {\n                this.rearrangeItems(this.potentialDndItems);\n            }\n\n            this.potentialDndItems = [];\n            this.refreshGui();\n        }\n\n        this.state = 'notDragging';\n    }\n\n    private removeItems(itemsToRemove: TItem[]): void {\n        const newItemList = this.getExistingItems().filter((item) => !_includes(itemsToRemove, item));\n        this.updateItems(newItemList);\n    }\n\n    private addItems(itemsToAdd: TItem[]): void {\n        if (!itemsToAdd) {\n            return;\n        }\n        const newItemList = this.getExistingItems().slice();\n        const itemsToAddNoDuplicates = itemsToAdd.filter((item) => newItemList.indexOf(item) < 0);\n        _insertArrayIntoArray(newItemList, itemsToAddNoDuplicates, this.insertIndex);\n        this.updateItems(newItemList);\n    }\n\n    public addItem(item: TItem): void {\n        this.insertIndex = this.getExistingItems().length;\n        this.addItems([item]);\n        this.refreshGui();\n    }\n\n    private rearrangeItems(itemsToAdd: TItem[]): boolean {\n        const newItemList = this.getNonGhostItems().slice();\n        _insertArrayIntoArray(newItemList, itemsToAdd, this.insertIndex);\n\n        if (_areEqual(newItemList, this.getExistingItems())) {\n            return false;\n        }\n\n        this.updateItems(newItemList);\n        return true;\n    }\n\n    public refreshGui(): void {\n        // we reset the scroll position after the refresh.\n        // if we don't do this, then the list will always scroll to the top\n        // each time we refresh it. this is because part of the refresh empties\n        // out the list which sets scroll to zero. so the user could be just\n        // reordering the list - we want to prevent the resetting of the scroll.\n        // this is relevant for vertical display only (as horizontal has no scroll)\n        const scrollTop = this.ePillDropList.scrollTop;\n        const resizeEnabled = this.resizeEnabled;\n        const focusedIndex = this.getFocusedItem();\n\n        let alternateElement = this.focusService.findNextFocusableElement();\n\n        if (!alternateElement) {\n            alternateElement = this.focusService.findNextFocusableElement(undefined, false, true);\n        }\n\n        this.toggleResizable(false);\n        this.destroyGui();\n\n        this.addIconAndTitleToGui();\n        this.addEmptyMessageToGui();\n        this.addItemsToGui();\n\n        if (!this.isHorizontal()) {\n            this.ePillDropList.scrollTop = scrollTop;\n        }\n\n        if (resizeEnabled) {\n            this.toggleResizable(resizeEnabled);\n        }\n\n        // focus should only be restored when keyboard mode\n        // otherwise mouse clicks will cause containers to scroll\n        // without no apparent reason.\n        if (this.focusService.isKeyboardMode()) {\n            this.restoreFocus(focusedIndex, alternateElement!);\n        }\n    }\n\n    private getFocusedItem(): number {\n        const eGui = this.getGui();\n        const activeElement = this.gos.getActiveDomElement();\n\n        if (!eGui.contains(activeElement)) {\n            return -1;\n        }\n\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n\n        return items.indexOf(activeElement as HTMLElement);\n    }\n\n    private restoreFocus(index: number, alternateElement: HTMLElement): void {\n        const eGui = this.getGui();\n        const items = Array.from(eGui.querySelectorAll('.ag-column-drop-cell'));\n\n        if (index === -1) {\n            return;\n        }\n\n        if (items.length === 0) {\n            alternateElement.focus();\n        }\n\n        const indexToFocus = Math.min(items.length - 1, index);\n        const el = items[indexToFocus] as HTMLElement;\n\n        if (el) {\n            el.focus();\n        }\n    }\n\n    public focusList(fromBottom?: boolean): void {\n        const index = fromBottom ? this.childPillComponents.length - 1 : 0;\n        this.restoreFocus(index, this.getFocusableElement());\n    }\n\n    private getNonGhostItems(): TItem[] {\n        const existingItems = this.getExistingItems();\n\n        if (this.isPotentialDndItems()) {\n            return existingItems.filter((item) => !_includes(this.potentialDndItems, item));\n        }\n        return existingItems;\n    }\n\n    private addItemsToGui(): void {\n        const nonGhostItems = this.getNonGhostItems();\n        const itemsToAddToGui: TPill[] = nonGhostItems.map((item) => this.createItemComponent(item, false));\n\n        if (this.isPotentialDndItems()) {\n            const dndItems = this.potentialDndItems.map((item) => this.createItemComponent(item, true));\n            if (this.insertIndex >= itemsToAddToGui.length) {\n                itemsToAddToGui.push(...dndItems);\n            } else {\n                itemsToAddToGui.splice(this.insertIndex, 0, ...dndItems);\n            }\n        }\n\n        this.appendChild(this.ePillDropList);\n\n        itemsToAddToGui.forEach((itemComponent, index) => {\n            if (index > 0) {\n                this.addArrow(this.ePillDropList);\n            }\n\n            this.ePillDropList.appendChild(itemComponent.getGui());\n        });\n\n        this.addAriaLabelsToComponents();\n    }\n\n    private addAriaLabelsToComponents(): void {\n        this.childPillComponents.forEach((comp, idx) => {\n            const eGui = comp.getGui();\n            _setAriaPosInSet(eGui, idx + 1);\n            _setAriaSetSize(eGui, this.childPillComponents.length);\n        });\n    }\n\n    private createItemComponent(item: TItem, ghost: boolean): TPill {\n        const itemComponent = this.createPillComponent(item, this.dropTarget, ghost, this.horizontal);\n        itemComponent.addEventListener('columnRemove', this.removeItems.bind(this, [item]));\n\n        this.createBean(itemComponent);\n        this.guiDestroyFunctions.push(() => this.destroyBean(itemComponent));\n\n        if (!ghost) {\n            this.childPillComponents.push(itemComponent);\n        }\n\n        return itemComponent;\n    }\n\n    private addIconAndTitleToGui(): void {\n        const { title, icon: eGroupIcon } = this.params;\n        if (!title || !eGroupIcon) {\n            return;\n        }\n        const eTitleBar = document.createElement('div');\n        _setAriaHidden(eTitleBar, true);\n        this.addElementClasses(eTitleBar, 'title-bar');\n        this.addElementClasses(eGroupIcon, 'icon');\n        this.addOrRemoveCssClass('ag-column-drop-empty', this.isExistingItemsEmpty());\n\n        eTitleBar.appendChild(eGroupIcon);\n\n        if (!this.horizontal) {\n            const eTitle = document.createElement('span');\n            this.addElementClasses(eTitle, 'title');\n            eTitle.innerHTML = title;\n\n            eTitleBar.appendChild(eTitle);\n        }\n\n        this.appendChild(eTitleBar);\n    }\n\n    private isExistingItemsEmpty(): boolean {\n        return this.getExistingItems().length === 0;\n    }\n\n    private addEmptyMessageToGui(): void {\n        const { emptyMessage } = this.params;\n        if (!emptyMessage || !this.isExistingItemsEmpty() || this.isPotentialDndItems()) {\n            return;\n        }\n\n        const eMessage = document.createElement('span');\n        eMessage.innerHTML = emptyMessage;\n        this.addElementClasses(eMessage, 'empty-message');\n        this.ePillDropList.appendChild(eMessage);\n    }\n\n    private addArrow(eParent: HTMLElement): void {\n        // only add the arrows if the layout is horizontal\n        if (this.horizontal) {\n            // for RTL it's a left arrow, otherwise it's a right arrow\n            const enableRtl = this.gos.get('enableRtl');\n            const icon = _createIconNoSpan(enableRtl ? 'smallLeft' : 'smallRight', this.gos)!;\n            this.addElementClasses(icon, 'cell-separator');\n            eParent.appendChild(icon);\n        }\n    }\n}\n", "import type {\n    BeanCollection,\n    FocusService,\n    FocusableContainer,\n    PopupService,\n    ResizableStructure,\n} from '@ag-grid-community/core';\nimport { Component, TabGuardFeature, _createIconNoSpan, _setDisplayed } from '@ag-grid-community/core';\n\nimport type { PanelOptions } from './agPanel';\nimport { AgPanel } from './agPanel';\n\nexport type ResizableSides =\n    | 'topLeft'\n    | 'top'\n    | 'topRight'\n    | 'right'\n    | 'bottomRight'\n    | 'bottom'\n    | 'bottomLeft'\n    | 'left';\n\nexport interface DialogOptions extends PanelOptions {\n    eWrapper?: HTMLElement;\n    modal?: boolean;\n    movable?: boolean;\n    alwaysOnTop?: boolean;\n    maximizable?: boolean;\n    afterGuiAttached?: () => void;\n    closedCallback?: (event?: MouseEvent | TouchEvent | KeyboardEvent) => void;\n}\n\nexport class AgDialog extends AgPanel<DialogOptions> implements FocusableContainer {\n    private popupService: PopupService;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.popupService = beans.popupService;\n        this.focusService = beans.focusService;\n    }\n\n    private tabGuardFeature: TabGuardFeature;\n    private isMaximizable: boolean = false;\n    private isMaximized: boolean = false;\n    private maximizeListeners: (() => void)[] = [];\n    private maximizeButtonComp: Component | undefined;\n    private maximizeIcon: Element | undefined;\n    private minimizeIcon: Element | undefined;\n    private resizeListenerDestroy: (() => void) | null | undefined = null;\n\n    private lastPosition = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n\n    constructor(config: DialogOptions) {\n        super({ ...config, popup: true });\n    }\n\n    public override postConstruct() {\n        const eGui = this.getGui();\n        const { movable, resizable, maximizable, modal } = this.config;\n\n        this.addCssClass('ag-dialog');\n\n        super.postConstruct();\n\n        this.tabGuardFeature = this.createManagedBean(new TabGuardFeature(this));\n        this.tabGuardFeature.initialiseTabGuard({\n            isFocusableContainer: true,\n            onFocusIn: () => {\n                const eDocument = this.gos.getDocument();\n                const { activeElement } = eDocument;\n                const restoreFocus = this.popupService.bringPopupToFront(eGui);\n                // if popup is brought to front, need to put focus back\n                if (restoreFocus && activeElement !== eDocument.body) {\n                    (activeElement as HTMLElement)?.focus?.();\n                }\n            },\n            onTabKeyDown: (e) => {\n                if (modal) {\n                    return;\n                }\n                const backwards = e.shiftKey;\n                const nextFocusableElement = this.focusService.findNextFocusableElement(eGui, false, backwards);\n                if (!nextFocusableElement || this.tabGuardFeature.getTabGuardCtrl().isTabGuard(nextFocusableElement)) {\n                    if (this.focusService.focusNextGridCoreContainer(backwards)) {\n                        e.preventDefault();\n                    }\n                }\n            },\n        });\n\n        if (movable) {\n            this.setMovable(movable);\n        }\n        if (maximizable) {\n            this.setMaximizable(maximizable);\n        }\n        if (resizable) {\n            this.setResizable(resizable);\n        }\n\n        if (!this.config.modal) {\n            const { focusService } = this;\n            focusService.addFocusableContainer(this);\n            this.addDestroyFunc(() => focusService.removeFocusableContainer(this));\n        }\n    }\n\n    public setAllowFocus(allowFocus: boolean): void {\n        this.tabGuardFeature.getTabGuardCtrl().setAllowFocus(allowFocus);\n    }\n\n    protected override renderComponent() {\n        const eGui = this.getGui();\n        const { alwaysOnTop, modal, title, afterGuiAttached } = this.config;\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: this.onClosed.bind(this),\n            alwaysOnTop,\n            ariaLabel: title || translate('ariaLabelDialog', 'Dialog'),\n            afterGuiAttached,\n        });\n\n        if (addPopupRes) {\n            this.close = addPopupRes.hideFunc;\n        }\n    }\n\n    private onClosed(event?: MouseEvent | TouchEvent | KeyboardEvent): void {\n        this.destroy();\n        this.config.closedCallback?.(event);\n    }\n\n    private toggleMaximize() {\n        const position = this.positionableFeature.getPosition();\n        if (this.isMaximized) {\n            const { x, y, width, height } = this.lastPosition;\n            this.setWidth(width);\n            this.setHeight(height);\n            this.positionableFeature.offsetElement(x, y);\n        } else {\n            this.lastPosition.width = this.getWidth()!;\n            this.lastPosition.height = this.getHeight()!;\n            this.lastPosition.x = position.x;\n            this.lastPosition.y = position.y;\n            this.positionableFeature.offsetElement(0, 0);\n            this.setHeight('100%');\n            this.setWidth('100%');\n        }\n\n        this.isMaximized = !this.isMaximized;\n        this.refreshMaximizeIcon();\n    }\n\n    private refreshMaximizeIcon() {\n        _setDisplayed(this.maximizeIcon!, !this.isMaximized);\n        _setDisplayed(this.minimizeIcon!, this.isMaximized);\n    }\n\n    private clearMaximizebleListeners() {\n        if (this.maximizeListeners.length) {\n            this.maximizeListeners.forEach((destroyListener) => destroyListener());\n            this.maximizeListeners.length = 0;\n        }\n\n        if (this.resizeListenerDestroy) {\n            this.resizeListenerDestroy();\n            this.resizeListenerDestroy = null;\n        }\n    }\n\n    public override destroy(): void {\n        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);\n\n        this.clearMaximizebleListeners();\n        super.destroy();\n    }\n\n    public setResizable(resizable: boolean | ResizableStructure) {\n        this.positionableFeature.setResizable(resizable);\n    }\n\n    public setMovable(movable: boolean) {\n        this.positionableFeature.setMovable(movable, this.eTitleBar);\n    }\n\n    public setMaximizable(maximizable: boolean) {\n        if (!maximizable) {\n            this.clearMaximizebleListeners();\n\n            if (this.maximizeButtonComp) {\n                this.destroyBean(this.maximizeButtonComp);\n                this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;\n            }\n            return;\n        }\n\n        const eTitleBar = this.eTitleBar;\n\n        if (!eTitleBar || maximizable === this.isMaximizable) {\n            return;\n        }\n\n        const maximizeButtonComp = this.buildMaximizeAndMinimizeElements();\n        this.refreshMaximizeIcon();\n\n        maximizeButtonComp.addManagedElementListeners(maximizeButtonComp.getGui(), {\n            click: this.toggleMaximize.bind(this),\n        });\n\n        this.addTitleBarButton(maximizeButtonComp, 0);\n\n        this.maximizeListeners.push(\n            ...this.addManagedElementListeners(eTitleBar, {\n                dblclick: this.toggleMaximize.bind(this),\n            })\n        );\n\n        [this.resizeListenerDestroy] = this.addManagedListeners(this.positionableFeature, {\n            resize: () => {\n                this.isMaximized = false;\n                this.refreshMaximizeIcon();\n            },\n        });\n    }\n\n    private buildMaximizeAndMinimizeElements(): Component {\n        const maximizeButtonComp = (this.maximizeButtonComp = this.createBean(\n            new Component(/* html */ `<div class=\"ag-dialog-button\"></span>`)\n        ));\n\n        const eGui = maximizeButtonComp.getGui();\n\n        this.maximizeIcon = _createIconNoSpan('maximize', this.gos)!;\n        eGui.appendChild(this.maximizeIcon);\n        this.maximizeIcon.classList.add('ag-panel-title-bar-button-icon');\n\n        this.minimizeIcon = _createIconNoSpan('minimize', this.gos)!;\n        eGui.appendChild(this.minimizeIcon);\n        this.minimizeIcon.classList.add('ag-panel-title-bar-button-icon');\n\n        return maximizeButtonComp;\n    }\n}\n", "import type { PositionableOptions, ResizableStructure } from '@ag-grid-community/core';\nimport {\n    Component,\n    PositionableFeature,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _getInnerHeight,\n    _getInnerWidth,\n    _isVisible,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nexport interface PanelOptions extends PositionableOptions {\n    component?: Component<any>;\n    hideTitleBar?: boolean | null;\n    closable?: boolean | null;\n    resizable?: boolean | ResizableStructure;\n    title?: string | null;\n    cssIdentifier?: string | null;\n}\nfunction getTemplate(config: PanelOptions) {\n    const cssIdentifier = config.cssIdentifier || 'default';\n    return /* html */ `<div class=\"ag-panel ag-${cssIdentifier}-panel\" tabindex=\"-1\">\n        <div data-ref=\"eTitleBar\" class=\"ag-panel-title-bar ag-${cssIdentifier}-panel-title-bar ag-unselectable\">\n            <span data-ref=\"eTitle\" class=\"ag-panel-title-bar-title ag-${cssIdentifier}-panel-title-bar-title\"></span>\n            <div data-ref=\"eTitleBarButtons\" class=\"ag-panel-title-bar-buttons ag-${cssIdentifier}-panel-title-bar-buttons\"></div>\n        </div>\n        <div data-ref=\"eContentWrapper\" class=\"ag-panel-content-wrapper ag-${cssIdentifier}-panel-content-wrapper\"></div>\n    </div>`;\n}\n\nexport class AgPanel<TConfig extends PanelOptions = PanelOptions> extends Component {\n    protected static CLOSE_BTN_TEMPLATE = /* html */ `<div class=\"ag-button\"></div>`;\n    protected closable = true;\n\n    protected closeButtonComp: Component | undefined;\n    protected positionableFeature: PositionableFeature;\n    public close: () => void;\n\n    protected readonly eContentWrapper: HTMLElement = RefPlaceholder;\n    protected readonly eTitleBar: HTMLElement = RefPlaceholder;\n    protected readonly eTitleBarButtons: HTMLElement = RefPlaceholder;\n    protected readonly eTitle: HTMLElement = RefPlaceholder;\n\n    constructor(protected readonly config: TConfig) {\n        super(getTemplate(config));\n    }\n\n    public postConstruct() {\n        const {\n            component,\n            closable,\n            hideTitleBar,\n            title,\n            minWidth = 250,\n            width,\n            minHeight = 250,\n            height,\n            centered,\n            popup,\n            x,\n            y,\n        } = this.config;\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), {\n            minWidth,\n            width,\n            minHeight,\n            height,\n            centered,\n            x,\n            y,\n            popup,\n            calculateTopBuffer: () => this.positionableFeature.getHeight()! - this.getBodyHeight(),\n        });\n\n        this.createManagedBean(this.positionableFeature);\n\n        const eGui = this.getGui();\n\n        if (component) {\n            this.setBodyComponent(component);\n        }\n\n        if (!hideTitleBar) {\n            if (title) {\n                this.setTitle(title);\n            }\n            this.setClosable(closable != null ? closable : this.closable);\n        } else {\n            _setDisplayed(this.eTitleBar, false);\n        }\n\n        this.addManagedElementListeners(this.eTitleBar, {\n            mousedown: (e: MouseEvent) => {\n                if (\n                    eGui.contains(e.relatedTarget as HTMLElement) ||\n                    eGui.contains(this.gos.getActiveDomElement()) ||\n                    this.eTitleBarButtons.contains(e.target as HTMLElement)\n                ) {\n                    e.preventDefault();\n                    return;\n                }\n\n                const focusEl = this.eContentWrapper.querySelector(\n                    'button, [href], input, select, textarea, [tabindex]'\n                );\n\n                if (focusEl) {\n                    (focusEl as HTMLElement).focus();\n                }\n            },\n        });\n\n        if (popup && this.positionableFeature.isPositioned()) {\n            return;\n        }\n\n        if (this.renderComponent) {\n            this.renderComponent();\n        }\n\n        this.positionableFeature.initialisePosition();\n        this.eContentWrapper.style.height = '0';\n    }\n\n    protected renderComponent() {\n        const eGui = this.getGui();\n        eGui.focus();\n\n        this.close = () => {\n            eGui.parentElement!.removeChild(eGui);\n            this.destroy();\n        };\n    }\n\n    public getHeight(): number | undefined {\n        return this.positionableFeature.getHeight();\n    }\n\n    public setHeight(height: number | string): void {\n        this.positionableFeature.setHeight(height);\n    }\n\n    public getWidth(): number | undefined {\n        return this.positionableFeature.getWidth();\n    }\n\n    public setWidth(width: number | string): void {\n        this.positionableFeature.setWidth(width);\n    }\n\n    public setClosable(closable: boolean) {\n        if (closable !== this.closable) {\n            this.closable = closable;\n        }\n\n        if (closable) {\n            const closeButtonComp = (this.closeButtonComp = new Component(AgPanel.CLOSE_BTN_TEMPLATE));\n            this.createBean(closeButtonComp);\n\n            const eGui = closeButtonComp.getGui();\n            const child = _createIconNoSpan('close', this.gos)!;\n            child.classList.add('ag-panel-title-bar-button-icon');\n            eGui.appendChild(child);\n\n            this.addTitleBarButton(closeButtonComp);\n            closeButtonComp.addManagedElementListeners(eGui, { click: this.onBtClose.bind(this) });\n        } else if (this.closeButtonComp) {\n            const eGui = this.closeButtonComp.getGui();\n            eGui.parentElement!.removeChild(eGui);\n\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n    }\n\n    public setBodyComponent(bodyComponent: Component<any>) {\n        bodyComponent.setParentComponent(this);\n        this.eContentWrapper.appendChild(bodyComponent.getGui());\n    }\n\n    public addTitleBarButton(button: Component, position?: number) {\n        const eTitleBarButtons = this.eTitleBarButtons;\n        const buttons = eTitleBarButtons.children;\n        const len = buttons.length;\n\n        if (position == null) {\n            position = len;\n        }\n\n        position = Math.max(0, Math.min(position, len));\n\n        button.addCssClass('ag-panel-title-bar-button');\n\n        const eGui = button.getGui();\n\n        if (position === 0) {\n            eTitleBarButtons.insertAdjacentElement('afterbegin', eGui);\n        } else if (position === len) {\n            eTitleBarButtons.insertAdjacentElement('beforeend', eGui);\n        } else {\n            buttons[position - 1].insertAdjacentElement('afterend', eGui);\n        }\n\n        button.setParentComponent(this);\n    }\n\n    public getBodyHeight(): number {\n        return _getInnerHeight(this.eContentWrapper);\n    }\n\n    public getBodyWidth(): number {\n        return _getInnerWidth(this.eContentWrapper);\n    }\n\n    public setTitle(title: string) {\n        this.eTitle.innerText = title;\n    }\n\n    // called when user hits the 'x' in the top right\n    private onBtClose() {\n        this.close();\n    }\n\n    public override destroy(): void {\n        if (this.closeButtonComp) {\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n\n        const eGui = this.getGui();\n\n        if (eGui && _isVisible(eGui)) {\n            this.close();\n        }\n\n        super.destroy();\n    }\n}\n", "import type {\n    AgEvent,\n    AgPromise,\n    BeanCollection,\n    Component,\n    IComponent,\n    IMenuActionParams,\n    IMenuConfigParams,\n    IMenuItemComp,\n    MenuItemDef,\n    PopupService,\n    UserComponentFactory,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    KeyCode,\n    TooltipFeature,\n    _loadTemplate,\n    _setAriaDisabled,\n    _setAriaExpanded,\n    _setAriaLevel,\n    _setAriaRole,\n} from '@ag-grid-community/core';\n\nimport { AgMenuList } from './agMenuList';\nimport { AgMenuPanel } from './agMenuPanel';\n\nexport interface CloseMenuEvent extends AgEvent<'closeMenu'> {\n    mouseEvent?: MouseEvent;\n    keyboardEvent?: KeyboardEvent;\n}\n\nexport interface MenuItemActivatedEvent extends AgEvent<'menuItemActivated'> {\n    menuItem: AgMenuItemComponent;\n}\n\ninterface AgMenuItemComponentParams {\n    menuItemDef: MenuItemDef;\n    isAnotherSubMenuOpen: () => boolean;\n    level: number;\n    childComponent?: IComponent<any>;\n    contextParams: WithoutGridCommon<IMenuActionParams>;\n}\n\nexport type AgMenuItemComponentEvent = 'closeMenu' | 'menuItemActivated';\n\nexport class AgMenuItemComponent extends BeanStub<AgMenuItemComponentEvent> {\n    private popupService: PopupService;\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.popupService = beans.popupService;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private ACTIVATION_DELAY = 80;\n\n    private eGui?: HTMLElement;\n    private params: MenuItemDef;\n    private isAnotherSubMenuOpen: () => boolean;\n    private level: number;\n    private childComponent?: IComponent<any>;\n    private contextParams: WithoutGridCommon<IMenuActionParams>;\n    private menuItemComp: IMenuItemComp;\n    private isActive = false;\n    private hideSubMenu: (() => void) | null;\n    private subMenuIsOpen = false;\n    private subMenuIsOpening = false;\n    private activateTimeoutId: number;\n    private deactivateTimeoutId: number;\n    private parentComponent?: Component<any>;\n    private tooltip?: string;\n    private tooltipFeature?: TooltipFeature;\n    private suppressRootStyles: boolean = true;\n    private suppressAria: boolean = true;\n    private suppressFocus: boolean = true;\n    private cssClassPrefix: string;\n    private eSubMenuGui?: HTMLElement;\n\n    public init(params: AgMenuItemComponentParams): AgPromise<void> {\n        const { menuItemDef, isAnotherSubMenuOpen, level, childComponent, contextParams } = params;\n        this.params = params.menuItemDef;\n        this.level = level;\n        this.isAnotherSubMenuOpen = isAnotherSubMenuOpen;\n        this.childComponent = childComponent;\n        this.contextParams = contextParams;\n        this.cssClassPrefix = this.params.menuItemParams?.cssClassPrefix ?? 'ag-menu-option';\n        const compDetails = this.userComponentFactory.getMenuItemCompDetails(this.params, {\n            ...menuItemDef,\n            level,\n            isAnotherSubMenuOpen,\n            openSubMenu: (activateFirstItem) => this.openSubMenu(activateFirstItem),\n            closeSubMenu: () => this.closeSubMenu(),\n            closeMenu: (event) => this.closeMenu(event),\n            updateTooltip: (tooltip?: string, shouldDisplayTooltip?: () => boolean) =>\n                this.refreshTooltip(tooltip, shouldDisplayTooltip),\n            onItemActivated: () => this.onItemActivated(),\n        });\n        return compDetails.newAgStackInstance().then((comp: IMenuItemComp) => {\n            this.menuItemComp = comp;\n            const configureDefaults = comp.configureDefaults?.();\n            if (configureDefaults) {\n                this.configureDefaults(configureDefaults === true ? undefined : configureDefaults);\n            }\n        });\n    }\n\n    private addListeners(eGui: HTMLElement, params?: IMenuConfigParams): void {\n        if (!params?.suppressClick) {\n            this.addManagedElementListeners(eGui, { click: (e) => this.onItemSelected(e!) });\n        }\n        if (!params?.suppressKeyboardSelect) {\n            this.addManagedElementListeners(eGui, {\n                keydown: (e: KeyboardEvent) => {\n                    if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                        e.preventDefault();\n                        this.onItemSelected(e);\n                    }\n                },\n            });\n        }\n        if (!params?.suppressMouseDown) {\n            this.addManagedElementListeners(eGui, {\n                mousedown: (e: MouseEvent) => {\n                    // Prevent event bubbling to other event handlers such as PopupService triggering\n                    // premature closing of any open sub-menu popup.\n                    e.stopPropagation();\n                    e.preventDefault();\n                },\n            });\n        }\n        if (!params?.suppressMouseOver) {\n            this.addManagedElementListeners(eGui, {\n                mouseenter: () => this.onMouseEnter(),\n                mouseleave: () => this.onMouseLeave(),\n            });\n        }\n    }\n\n    public isDisabled(): boolean {\n        return !!this.params.disabled;\n    }\n\n    public openSubMenu(activateFirstItem = false): void {\n        this.closeSubMenu();\n\n        if (!this.params.subMenu) {\n            return;\n        }\n\n        this.subMenuIsOpening = true;\n\n        const ePopup = _loadTemplate(/* html */ `<div class=\"ag-menu\" role=\"presentation\"></div>`);\n        this.eSubMenuGui = ePopup;\n        let destroySubMenu: () => void;\n        let afterGuiAttached = () => {\n            this.subMenuIsOpening = false;\n        };\n\n        if (this.childComponent) {\n            const menuPanel = this.createBean(new AgMenuPanel(this.childComponent));\n            menuPanel.setParentComponent(this as any);\n\n            const subMenuGui = menuPanel.getGui();\n            const mouseEvent = 'mouseenter';\n            const mouseEnterListener = () => this.cancelDeactivate();\n\n            subMenuGui.addEventListener(mouseEvent, mouseEnterListener);\n\n            destroySubMenu = () => subMenuGui.removeEventListener(mouseEvent, mouseEnterListener);\n\n            ePopup.appendChild(subMenuGui);\n\n            if ((this.childComponent as any).afterGuiAttached) {\n                afterGuiAttached = () => {\n                    (this.childComponent as any).afterGuiAttached!();\n                    this.subMenuIsOpening = false;\n                };\n            }\n        } else if (this.params.subMenu) {\n            const childMenu = this.createBean(new AgMenuList(this.level + 1, this.contextParams));\n\n            childMenu.setParentComponent(this as any);\n            childMenu.addMenuItems(this.params.subMenu);\n            ePopup.appendChild(childMenu.getGui());\n\n            // bubble menu item selected events\n            this.addManagedListeners(childMenu, { closeMenu: (e) => this.dispatchLocalEvent(e) });\n            childMenu.addGuiEventListener('mouseenter', () => this.cancelDeactivate());\n\n            destroySubMenu = () => this.destroyBean(childMenu);\n\n            if (activateFirstItem) {\n                afterGuiAttached = () => {\n                    childMenu.activateFirstItem();\n                    this.subMenuIsOpening = false;\n                };\n            }\n        }\n\n        const positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, {\n            eventSource: this.eGui,\n            ePopup,\n        });\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            positionCallback: positionCallback,\n            anchorToElement: this.eGui,\n            ariaLabel: translate('ariaLabelSubMenu', 'SubMenu'),\n            afterGuiAttached,\n        });\n\n        this.subMenuIsOpen = true;\n        this.setAriaExpanded(true);\n\n        this.hideSubMenu = () => {\n            if (addPopupRes) {\n                addPopupRes.hideFunc();\n            }\n            this.subMenuIsOpen = false;\n            this.setAriaExpanded(false);\n            destroySubMenu();\n            this.menuItemComp.setExpanded?.(false);\n            this.eSubMenuGui = undefined;\n        };\n\n        this.menuItemComp.setExpanded?.(true);\n    }\n\n    private setAriaExpanded(expanded: boolean): void {\n        if (!this.suppressAria) {\n            _setAriaExpanded(this.eGui!, expanded);\n        }\n    }\n\n    public closeSubMenu(): void {\n        if (!this.hideSubMenu) {\n            return;\n        }\n        this.hideSubMenu();\n        this.hideSubMenu = null;\n        this.setAriaExpanded(false);\n    }\n\n    public isSubMenuOpen(): boolean {\n        return this.subMenuIsOpen;\n    }\n\n    public isSubMenuOpening(): boolean {\n        return this.subMenuIsOpening;\n    }\n\n    public activate(openSubMenu?: boolean): void {\n        this.cancelActivate();\n\n        if (this.params.disabled) {\n            return;\n        }\n\n        this.isActive = true;\n        if (!this.suppressRootStyles) {\n            this.eGui!.classList.add(`${this.cssClassPrefix}-active`);\n        }\n        this.menuItemComp.setActive?.(true);\n        if (!this.suppressFocus) {\n            this.eGui!.focus({ preventScroll: true });\n        }\n\n        if (openSubMenu && this.params.subMenu) {\n            window.setTimeout(() => {\n                if (this.isAlive() && this.isActive) {\n                    this.openSubMenu();\n                }\n            }, 300);\n        }\n\n        this.onItemActivated();\n    }\n\n    public deactivate() {\n        this.cancelDeactivate();\n        if (!this.suppressRootStyles) {\n            this.eGui!.classList.remove(`${this.cssClassPrefix}-active`);\n        }\n        this.menuItemComp.setActive?.(false);\n        this.isActive = false;\n\n        if (this.subMenuIsOpen) {\n            this.hideSubMenu!();\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.menuItemComp.getGui();\n    }\n\n    public getParentComponent(): Component | undefined {\n        return this.parentComponent;\n    }\n\n    public setParentComponent(component: Component<any>): void {\n        this.parentComponent = component;\n    }\n\n    public getSubMenuGui(): HTMLElement | undefined {\n        return this.eSubMenuGui;\n    }\n\n    private onItemSelected(event: MouseEvent | KeyboardEvent): void {\n        this.menuItemComp.select?.();\n        if (this.params.action) {\n            this.getFrameworkOverrides().wrapOutgoing(() =>\n                this.params.action!(\n                    this.gos.addGridCommonParams({\n                        ...this.contextParams,\n                    })\n                )\n            );\n        } else {\n            this.openSubMenu(event && event.type === 'keydown');\n        }\n\n        if ((this.params.subMenu && !this.params.action) || this.params.suppressCloseOnSelect) {\n            return;\n        }\n\n        this.closeMenu(event);\n    }\n\n    private closeMenu(event?: MouseEvent | KeyboardEvent): void {\n        const e: CloseMenuEvent = {\n            type: 'closeMenu',\n        };\n\n        if (event) {\n            if (event instanceof MouseEvent) {\n                e.mouseEvent = event;\n            } else {\n                e.keyboardEvent = event;\n            }\n        }\n\n        this.dispatchLocalEvent(e);\n    }\n\n    private onItemActivated(): void {\n        const event: MenuItemActivatedEvent = {\n            type: 'menuItemActivated',\n            menuItem: this,\n        };\n\n        this.dispatchLocalEvent(event);\n    }\n\n    private cancelActivate(): void {\n        if (this.activateTimeoutId) {\n            window.clearTimeout(this.activateTimeoutId);\n            this.activateTimeoutId = 0;\n        }\n    }\n\n    private cancelDeactivate(): void {\n        if (this.deactivateTimeoutId) {\n            window.clearTimeout(this.deactivateTimeoutId);\n            this.deactivateTimeoutId = 0;\n        }\n    }\n\n    private onMouseEnter(): void {\n        this.cancelDeactivate();\n\n        if (this.isAnotherSubMenuOpen()) {\n            // wait to see if the user enters the open sub-menu\n            this.activateTimeoutId = window.setTimeout(() => this.activate(true), this.ACTIVATION_DELAY);\n        } else {\n            // activate immediately\n            this.activate(true);\n        }\n    }\n\n    private onMouseLeave(): void {\n        this.cancelActivate();\n\n        if (this.isSubMenuOpen()) {\n            // wait to see if the user enters the sub-menu\n            this.deactivateTimeoutId = window.setTimeout(() => this.deactivate(), this.ACTIVATION_DELAY);\n        } else {\n            // de-activate immediately\n            this.deactivate();\n        }\n    }\n\n    private configureDefaults(params?: IMenuConfigParams): void {\n        if (!this.menuItemComp) {\n            // need to wait for init to complete\n            setTimeout(() => this.configureDefaults(params));\n            return;\n        }\n\n        let eGui = this.menuItemComp.getGui();\n        // in some frameworks, `getGui` might be a framework element\n        const rootElement = (this.menuItemComp as any).getRootElement?.() as HTMLElement | undefined;\n        if (rootElement) {\n            if (!params?.suppressRootStyles) {\n                eGui.classList.add('ag-menu-option-custom');\n            }\n            eGui = rootElement;\n        }\n        this.eGui = eGui;\n\n        this.suppressRootStyles = !!params?.suppressRootStyles;\n        if (!this.suppressRootStyles) {\n            eGui.classList.add(this.cssClassPrefix);\n            this.params.cssClasses?.forEach((it) => eGui.classList.add(it));\n            if (this.params.disabled) {\n                eGui.classList.add(`${this.cssClassPrefix}-disabled`);\n            }\n        }\n        if (!params?.suppressTooltip) {\n            this.refreshTooltip(this.params.tooltip);\n        }\n        this.suppressAria = !!params?.suppressAria;\n        if (!this.suppressAria) {\n            _setAriaRole(eGui, 'treeitem');\n            _setAriaLevel(eGui, this.level + 1);\n            if (this.params.disabled) {\n                _setAriaDisabled(eGui, true);\n            }\n        }\n        if (!params?.suppressTabIndex) {\n            eGui.setAttribute('tabindex', '-1');\n        }\n        if (!this.params.disabled) {\n            this.addListeners(eGui, params);\n        }\n        this.suppressFocus = !!params?.suppressFocus;\n    }\n\n    private refreshTooltip(tooltip?: string, shouldDisplayTooltip?: () => boolean): void {\n        this.tooltip = tooltip;\n\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n\n        if (!tooltip || !this.menuItemComp) {\n            return;\n        }\n\n        this.tooltipFeature = this.createBean(\n            new TooltipFeature({\n                getGui: () => this.getGui(),\n                getTooltipValue: () => this.tooltip,\n                getLocation: () => 'menu',\n                shouldDisplayTooltip,\n            })\n        );\n    }\n\n    public override destroy(): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n        super.destroy();\n    }\n}\n", "import type { BeanStub, IMenuActionParams, MenuItemDef, WithoutGridCommon } from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    KeyCode,\n    TabGuardComp,\n    _last,\n    _loadTemplate,\n    _stopPropagationForAgGrid,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { AgMenuItemComponentEvent, CloseMenuEvent, MenuItemActivatedEvent } from './agMenuItemComponent';\nimport { AgMenuItemComponent } from './agMenuItemComponent';\n\nexport type AgMenuListEvent = AgMenuItemComponentEvent;\n\nexport class AgMenuList extends TabGuardComp<AgMenuListEvent> {\n    private menuItems: AgMenuItemComponent[] = [];\n    private activeMenuItem: AgMenuItemComponent | null;\n    private params: WithoutGridCommon<IMenuActionParams>;\n\n    constructor(\n        private readonly level = 0,\n        params?: WithoutGridCommon<IMenuActionParams>\n    ) {\n        super(/* html */ `<div class=\"ag-menu-list\" role=\"tree\"></div>`);\n        this.params = params ?? {\n            column: null,\n            node: null,\n            value: null,\n        };\n    }\n\n    public postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: (e) => this.onTabKeyDown(e),\n            handleKeyDown: (e) => this.handleKeyDown(e),\n            onFocusIn: (e) => this.handleFocusIn(e),\n            onFocusOut: (e) => this.handleFocusOut(e),\n        });\n    }\n\n    private onTabKeyDown(e: KeyboardEvent) {\n        const parent = this.getParentComponent();\n        const parentGui = parent && parent.getGui();\n        const isManaged = parentGui && parentGui.classList.contains('ag-focus-managed');\n\n        if (!isManaged) {\n            e.preventDefault();\n        }\n\n        if (e.shiftKey) {\n            this.closeIfIsChild(e);\n        }\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.handleNavKey(e.key);\n                break;\n            case KeyCode.ESCAPE:\n                if (this.closeIfIsChild()) {\n                    _stopPropagationForAgGrid(e);\n                }\n                break;\n        }\n    }\n\n    private handleFocusIn(e: FocusEvent): void {\n        // if focus is coming from outside the menu list, then re-activate an item\n        const oldFocusedElement = e.relatedTarget as HTMLElement;\n        if (\n            !this.tabGuardFeature.getTabGuardCtrl().isTabGuard(oldFocusedElement) &&\n            (this.getGui().contains(oldFocusedElement) ||\n                this.activeMenuItem?.getSubMenuGui()?.contains(oldFocusedElement))\n        ) {\n            return;\n        }\n        if (this.activeMenuItem) {\n            this.activeMenuItem.activate();\n        } else {\n            this.activateFirstItem();\n        }\n    }\n\n    private handleFocusOut(e: FocusEvent): void {\n        // if focus is going outside the menu list, deactivate the current item\n        const newFocusedElement = e.relatedTarget as HTMLElement;\n        if (\n            !this.activeMenuItem ||\n            this.getGui().contains(newFocusedElement) ||\n            this.activeMenuItem.getSubMenuGui()?.contains(newFocusedElement)\n        ) {\n            return;\n        }\n        if (!this.activeMenuItem.isSubMenuOpening()) {\n            this.activeMenuItem.deactivate();\n        }\n    }\n\n    public clearActiveItem(): void {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.deactivate();\n            this.activeMenuItem = null;\n        }\n    }\n\n    public addMenuItems(menuItems?: (MenuItemDef | string)[]): void {\n        if (menuItems == null) {\n            return;\n        }\n\n        AgPromise.all(\n            menuItems.map<AgPromise<{ eGui: HTMLElement | null; comp?: AgMenuItemComponent }>>((menuItemOrString) => {\n                if (menuItemOrString === 'separator') {\n                    return AgPromise.resolve({ eGui: this.createSeparator() });\n                } else if (typeof menuItemOrString === 'string') {\n                    _warnOnce(`unrecognised menu item ${menuItemOrString}`);\n                    return AgPromise.resolve({ eGui: null });\n                } else {\n                    return this.addItem(menuItemOrString);\n                }\n            })\n        ).then((elements) => {\n            elements!.forEach((element) => {\n                if (element?.eGui) {\n                    this.appendChild(element.eGui);\n                    if (element.comp) {\n                        this.menuItems.push(element.comp);\n                    }\n                }\n            });\n        });\n    }\n\n    private addItem(menuItemDef: MenuItemDef): AgPromise<{ comp: AgMenuItemComponent; eGui: HTMLElement }> {\n        const menuItem = this.createManagedBean(new AgMenuItemComponent());\n        return menuItem\n            .init({\n                menuItemDef,\n                isAnotherSubMenuOpen: () => this.menuItems.some((m) => m.isSubMenuOpen()),\n                level: this.level,\n                contextParams: this.params,\n            })\n            .then(() => {\n                menuItem.setParentComponent(this);\n\n                this.addManagedListeners(menuItem, {\n                    closeMenu: (event: CloseMenuEvent) => {\n                        this.dispatchLocalEvent(event);\n                    },\n                    menuItemActivated: (event: MenuItemActivatedEvent) => {\n                        if (this.activeMenuItem && this.activeMenuItem !== event.menuItem) {\n                            this.activeMenuItem.deactivate();\n                        }\n\n                        this.activeMenuItem = event.menuItem;\n                    },\n                });\n\n                return {\n                    comp: menuItem,\n                    eGui: menuItem.getGui(),\n                };\n            });\n    }\n\n    public activateFirstItem(): void {\n        const item = this.menuItems.filter((currentItem) => !currentItem.isDisabled())[0];\n\n        if (!item) {\n            return;\n        }\n\n        item.activate();\n    }\n\n    private createSeparator(): HTMLElement {\n        const separatorHtml = /* html */ `\n            <div class=\"ag-menu-separator\" aria-hidden=\"true\">\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n            </div>`;\n\n        return _loadTemplate(separatorHtml);\n    }\n\n    private handleNavKey(key: string): void {\n        switch (key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN: {\n                const nextItem = this.findNextItem(key === KeyCode.UP);\n\n                if (nextItem && nextItem !== this.activeMenuItem) {\n                    nextItem.activate();\n                }\n\n                return;\n            }\n        }\n\n        const left = this.gos.get('enableRtl') ? KeyCode.RIGHT : KeyCode.LEFT;\n\n        if (key === left) {\n            this.closeIfIsChild();\n        } else {\n            this.openChild();\n        }\n    }\n\n    private closeIfIsChild(e?: KeyboardEvent): boolean {\n        const parentItem = this.getParentComponent() as BeanStub;\n\n        if (parentItem && parentItem instanceof AgMenuItemComponent) {\n            if (e) {\n                e.preventDefault();\n            }\n\n            parentItem.closeSubMenu();\n            parentItem.getGui().focus();\n            return true;\n        }\n        return false;\n    }\n\n    private openChild(): void {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.openSubMenu(true);\n        }\n    }\n\n    private findNextItem(up?: boolean): AgMenuItemComponent | undefined {\n        const items = this.menuItems.filter((item) => !item.isDisabled());\n\n        if (!items.length) {\n            return;\n        }\n\n        if (!this.activeMenuItem) {\n            return up ? _last(items) : items[0];\n        }\n\n        if (up) {\n            items.reverse();\n        }\n\n        let nextItem: AgMenuItemComponent | undefined;\n        let foundCurrent = false;\n\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n\n            if (!foundCurrent) {\n                if (item === this.activeMenuItem) {\n                    foundCurrent = true;\n                }\n                continue;\n            }\n\n            nextItem = item;\n            break;\n        }\n\n        if (foundCurrent && !nextItem) {\n            // start again from the beginning (/end)\n            return items[0];\n        }\n\n        return nextItem! || this.activeMenuItem;\n    }\n\n    public override destroy(): void {\n        this.clearActiveItem();\n        super.destroy();\n    }\n}\n", "import type { IComponent } from '@ag-grid-community/core';\nimport { KeyCode, TabGuardComp } from '@ag-grid-community/core';\n\nimport type { AgMenuItemComponent } from './agMenuItemComponent';\n\nexport class AgMenuPanel extends TabGuardComp {\n    constructor(private readonly wrappedComponent: IComponent<any>) {\n        super();\n\n        this.setTemplateFromElement(wrappedComponent.getGui());\n    }\n\n    public postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: (e) => this.onTabKeyDown(e),\n            handleKeyDown: (e) => this.handleKeyDown(e),\n        });\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ESCAPE) {\n            this.closePanel();\n        }\n    }\n\n    private onTabKeyDown(e: KeyboardEvent): void {\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        this.closePanel();\n        e.preventDefault();\n    }\n\n    private closePanel(): void {\n        const menuItem = this.parentComponent as unknown as AgMenuItemComponent;\n        menuItem.closeSubMenu();\n        setTimeout(() => menuItem.getGui().focus(), 0);\n    }\n}\n", "import type {\n    AgEvent,\n    BeanCollection,\n    Component,\n    DragAndDropService,\n    DragSourceType,\n    DraggingEvent,\n    DropTarget,\n} from '@ag-grid-community/core';\nimport { AutoScrollService, BeanStub, _radioCssClass } from '@ag-grid-community/core';\n\nimport type { VirtualList } from '../widgets/virtualList';\nimport type { VirtualListDragItem, VirtualListDragParams } from './iVirtualListDragFeature';\n\nconst LIST_ITEM_HOVERED = 'ag-list-item-hovered';\n\nexport class VirtualListDragFeature<\n    C extends Component<any>,\n    R extends Component<any>,\n    V,\n    E extends AgEvent,\n> extends BeanStub {\n    private dragAndDropService: DragAndDropService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.dragAndDropService = beans.dragAndDropService;\n    }\n\n    private currentDragValue: V | null = null;\n    private lastHoveredListItem: VirtualListDragItem<R> | null = null;\n    private autoScrollService: AutoScrollService;\n    private moveBlocked: boolean;\n\n    constructor(\n        private readonly comp: C,\n        private readonly virtualList: VirtualList<any>,\n        private readonly params: VirtualListDragParams<C, R, V, E>\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.addManagedListeners(this.params.eventSource, {\n            [this.params.listItemDragStartEvent]: this.listItemDragStart.bind(this),\n            [this.params.listItemDragEndEvent]: this.listItemDragEnd.bind(this),\n        });\n\n        this.createDropTarget();\n        this.createAutoScrollService();\n    }\n\n    private listItemDragStart(event: E): void {\n        this.currentDragValue = this.params.getCurrentDragValue(event);\n        this.moveBlocked = this.params.isMoveBlocked(this.currentDragValue);\n    }\n\n    private listItemDragEnd(): void {\n        window.setTimeout(() => {\n            this.currentDragValue = null;\n            this.moveBlocked = false;\n        }, 10);\n    }\n\n    private createDropTarget(): void {\n        const dropTarget: DropTarget = {\n            isInterestedIn: (type: DragSourceType) => type === this.params.dragSourceType,\n            getIconName: () => (this.moveBlocked ? 'pinned' : 'move'),\n            getContainer: () => this.comp.getGui(),\n            onDragging: (e) => this.onDragging(e),\n            onDragStop: () => this.onDragStop(),\n            onDragLeave: () => this.onDragLeave(),\n        };\n\n        this.dragAndDropService.addDropTarget(dropTarget);\n    }\n\n    private createAutoScrollService(): void {\n        const virtualListGui = this.virtualList.getGui();\n        this.autoScrollService = new AutoScrollService({\n            scrollContainer: virtualListGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => virtualListGui.scrollTop,\n            setVerticalPosition: (position) => (virtualListGui.scrollTop = position),\n        });\n    }\n\n    private onDragging(e: DraggingEvent) {\n        if (!this.currentDragValue || this.moveBlocked) {\n            return;\n        }\n\n        const hoveredListItem = this.getListDragItem(e);\n        const comp = this.virtualList.getComponentAt(hoveredListItem.rowIndex);\n\n        if (!comp) {\n            return;\n        }\n\n        const el = comp!.getGui().parentElement as HTMLElement;\n\n        if (\n            this.lastHoveredListItem &&\n            this.lastHoveredListItem.rowIndex === hoveredListItem.rowIndex &&\n            this.lastHoveredListItem.position === hoveredListItem.position\n        ) {\n            return;\n        }\n\n        this.autoScrollService.check(e.event);\n        this.clearHoveredItems();\n        this.lastHoveredListItem = hoveredListItem;\n\n        _radioCssClass(el, LIST_ITEM_HOVERED);\n        _radioCssClass(el, `ag-item-highlight-${hoveredListItem.position}`);\n    }\n\n    private getListDragItem(e: DraggingEvent): VirtualListDragItem<R> {\n        const virtualListGui = this.virtualList.getGui();\n        const paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop as string);\n        const rowHeight = this.virtualList.getRowHeight();\n        const scrollTop = this.virtualList.getScrollTop();\n        const rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);\n        const maxLen = this.params.getNumRows(this.comp) - 1;\n        const normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;\n\n        return {\n            rowIndex: normalizedRowIndex,\n            position: Math.round(rowIndex) > rowIndex || rowIndex > maxLen ? 'bottom' : 'top',\n            component: this.virtualList.getComponentAt(normalizedRowIndex) as R,\n        };\n    }\n\n    private onDragStop() {\n        if (this.moveBlocked) {\n            return;\n        }\n\n        this.params.moveItem(this.currentDragValue, this.lastHoveredListItem);\n\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n\n    private onDragLeave() {\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n\n    private clearHoveredItems(): void {\n        const virtualListGui = this.virtualList.getGui();\n        virtualListGui.querySelectorAll(`.${LIST_ITEM_HOVERED}`).forEach((el) => {\n            [LIST_ITEM_HOVERED, 'ag-item-highlight-top', 'ag-item-highlight-bottom'].forEach((cls) => {\n                (el as HTMLElement).classList.remove(cls);\n            });\n        });\n        this.lastHoveredListItem = null;\n    }\n}\n", "import type { BeanCollection, FocusService, IAfterGuiAttachedParams } from '@ag-grid-community/core';\nimport {\n    KeyCode,\n    RefPlaceholder,\n    TabGuardComp,\n    _clearElement,\n    _createIconNoSpan,\n    _setAriaLabel,\n    _setAriaRole,\n} from '@ag-grid-community/core';\n\nimport type { TabbedItem, TabbedLayoutParams } from './iTabbedLayout';\n\ninterface TabbedItemWrapper {\n    tabbedItem: TabbedItem;\n    eHeaderButton: HTMLElement;\n}\n\nfunction getTabbedLayoutTemplate(cssClass?: string) {\n    return /* html */ `<div class=\"ag-tabs ${cssClass}\">\n        <div data-ref=\"eHeader\"></div>\n        <div data-ref=\"eBody\" role=\"presentation\" class=\"ag-tabs-body ${cssClass ? `${cssClass}-body` : ''}\"></div>\n    </div>`;\n}\n\nexport class TabbedLayout extends TabGuardComp {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n    }\n\n    private readonly eHeader: HTMLElement = RefPlaceholder;\n    private readonly eBody: HTMLElement = RefPlaceholder;\n\n    private eTabHeader: HTMLElement;\n    private eCloseButton?: HTMLElement;\n\n    private params: TabbedLayoutParams;\n    private afterAttachedParams: IAfterGuiAttachedParams;\n    private items: TabbedItemWrapper[] = [];\n    private activeItem: TabbedItemWrapper;\n    private lastScrollListener: (() => null) | null | undefined;\n    private readonly tabbedItemScrollMap = new Map<string, number>();\n\n    constructor(params: TabbedLayoutParams) {\n        super(getTabbedLayoutTemplate(params.cssClass));\n        this.params = params;\n    }\n\n    public postConstruct() {\n        this.setupHeader();\n\n        if (this.params.items) {\n            this.params.items.forEach((item) => this.addItem(item));\n        }\n\n        this.initialiseTabGuard({\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this),\n            focusInnerElement: this.focusInnerElement.bind(this),\n            focusTrapActive: true,\n        });\n\n        this.addDestroyFunc(() => this.activeItem?.tabbedItem?.afterDetachedCallback?.());\n    }\n\n    private setupHeader(): void {\n        const { enableCloseButton, cssClass } = this.params;\n        const addCssClasses = (el: HTMLElement, suffix: string) => {\n            el.classList.add(`ag-tabs-${suffix}`);\n            if (cssClass) {\n                el.classList.add(`${cssClass}-${suffix}`);\n            }\n        };\n        if (enableCloseButton) {\n            this.setupCloseButton(addCssClasses);\n            this.eTabHeader = this.gos.getDocument().createElement('div');\n            addCssClasses(this.eHeader, 'header-wrapper');\n            _setAriaRole(this.eHeader, 'presentation');\n            this.eHeader.appendChild(this.eTabHeader);\n        } else {\n            this.eTabHeader = this.eHeader;\n        }\n        _setAriaRole(this.eTabHeader, 'tablist');\n        addCssClasses(this.eTabHeader, 'header');\n    }\n\n    private setupCloseButton(addCssClasses: (el: HTMLElement, suffix: string) => void): void {\n        const eDocument = this.gos.getDocument();\n        const eCloseButton = eDocument.createElement('button');\n        addCssClasses(eCloseButton, 'close-button');\n        const eIcon = _createIconNoSpan('close', this.gos, undefined, true)!;\n        _setAriaLabel(eCloseButton, this.params.closeButtonAriaLabel);\n        eCloseButton.appendChild(eIcon);\n        this.addManagedElementListeners(eCloseButton, { click: () => this.params.onCloseClicked?.() });\n        const eCloseButtonWrapper = eDocument.createElement('div');\n        addCssClasses(eCloseButtonWrapper, 'close-button-wrapper');\n        _setAriaRole(eCloseButtonWrapper, 'presentation');\n        eCloseButtonWrapper.appendChild(eCloseButton);\n        this.eHeader.appendChild(eCloseButtonWrapper);\n        this.eCloseButton = eCloseButton;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT: {\n                if (!this.eTabHeader.contains(this.gos.getActiveDomElement())) {\n                    return;\n                }\n                const isRightKey = e.key === KeyCode.RIGHT;\n                const isRtl = this.gos.get('enableRtl');\n                const currentPosition = this.items.indexOf(this.activeItem);\n                const nextPosition =\n                    isRightKey !== isRtl\n                        ? Math.min(currentPosition + 1, this.items.length - 1)\n                        : Math.max(currentPosition - 1, 0);\n\n                if (currentPosition === nextPosition) {\n                    return;\n                }\n\n                e.preventDefault();\n\n                const nextItem = this.items[nextPosition];\n\n                this.showItemWrapper(nextItem);\n                nextItem.eHeaderButton.focus();\n                break;\n            }\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                e.stopPropagation();\n                break;\n        }\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        const { focusService, eHeader, eBody, activeItem, params } = this;\n        const { suppressTrapFocus, enableCloseButton } = params;\n\n        const activeElement = this.gos.getActiveDomElement();\n        const target = e.target as HTMLElement;\n        const backwards = e.shiftKey;\n\n        if (eHeader.contains(activeElement)) {\n            e.preventDefault();\n            if (enableCloseButton && backwards && !this.eCloseButton?.contains(activeElement)) {\n                this.eCloseButton?.focus();\n            } else if (suppressTrapFocus && backwards) {\n                this.focusService.findFocusableElementBeforeTabGuard(this.gos.getDocument().body, target)?.focus();\n            } else {\n                // focus is in header, move into body of popup\n                this.focusBody(e.shiftKey);\n            }\n            return;\n        }\n\n        let nextEl: HTMLElement | null = null;\n\n        if (focusService.isTargetUnderManagedComponent(eBody, target)) {\n            if (backwards) {\n                nextEl = this.focusService.findFocusableElementBeforeTabGuard(eBody, target);\n            }\n\n            if (!nextEl && !suppressTrapFocus) {\n                nextEl = activeItem.eHeaderButton;\n            }\n        }\n\n        if (!nextEl && eBody.contains(activeElement)) {\n            nextEl = focusService.findNextFocusableElement(eBody, false, backwards);\n\n            if (!nextEl) {\n                if (suppressTrapFocus && !backwards) {\n                    this.forceFocusOutOfContainer(backwards);\n                } else if (enableCloseButton && !backwards) {\n                    e.preventDefault();\n                    this.eCloseButton?.focus();\n                } else {\n                    e.preventDefault();\n                    this.focusHeader();\n                }\n                return;\n            }\n        }\n\n        if (nextEl) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n\n    private focusInnerElement(fromBottom?: boolean): void {\n        if (fromBottom) {\n            this.focusBody(true);\n        } else {\n            this.focusHeader();\n        }\n    }\n\n    public focusHeader(preventScroll?: boolean): void {\n        this.activeItem.eHeaderButton.focus({ preventScroll });\n    }\n\n    private focusBody(fromBottom?: boolean): void {\n        this.focusService.focusInto(this.eBody, fromBottom);\n    }\n\n    public setAfterAttachedParams(params: IAfterGuiAttachedParams): void {\n        this.afterAttachedParams = params;\n    }\n\n    public showFirstItem(): void {\n        if (this.items.length > 0) {\n            this.showItemWrapper(this.items[0]);\n        }\n    }\n\n    private addItem(item: TabbedItem): void {\n        const eHeaderButton = document.createElement('span');\n\n        _setAriaRole(eHeaderButton, 'tab');\n        eHeaderButton.setAttribute('tabindex', '-1');\n        eHeaderButton.appendChild(item.title);\n        eHeaderButton.classList.add('ag-tab');\n\n        this.eTabHeader.appendChild(eHeaderButton);\n        _setAriaLabel(eHeaderButton, item.titleLabel);\n\n        const wrapper: TabbedItemWrapper = {\n            tabbedItem: item,\n            eHeaderButton: eHeaderButton,\n        };\n        this.items.push(wrapper);\n\n        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));\n    }\n\n    public showItem(tabbedItem: TabbedItem): void {\n        const itemWrapper = this.items.find((wrapper) => wrapper.tabbedItem === tabbedItem);\n\n        if (itemWrapper) {\n            this.showItemWrapper(itemWrapper);\n        }\n    }\n\n    private showItemWrapper(wrapper: TabbedItemWrapper): void {\n        const { tabbedItem, eHeaderButton } = wrapper;\n\n        this.params.onItemClicked?.({ item: tabbedItem });\n\n        if (this.activeItem === wrapper) {\n            this.params.onActiveItemClicked?.();\n            return;\n        }\n\n        if (this.lastScrollListener) {\n            this.lastScrollListener = this.lastScrollListener();\n        }\n\n        _clearElement(this.eBody);\n\n        tabbedItem.bodyPromise.then((body: HTMLElement) => {\n            this.eBody.appendChild(body);\n            const onlyUnmanaged = !this.focusService.isKeyboardMode();\n\n            if (!this.params.suppressFocusBodyOnOpen) {\n                this.focusService.focusInto(this.eBody, false, onlyUnmanaged);\n            }\n\n            if (tabbedItem.afterAttachedCallback) {\n                tabbedItem.afterAttachedCallback(this.afterAttachedParams);\n            }\n\n            if (this.params.keepScrollPosition) {\n                const scrollableContainer =\n                    (tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer()) || body;\n                [this.lastScrollListener] = this.addManagedElementListeners(scrollableContainer, {\n                    scroll: () => {\n                        this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer.scrollTop);\n                    },\n                });\n                const scrollPosition = this.tabbedItemScrollMap.get(tabbedItem.name);\n                if (scrollPosition !== undefined) {\n                    // Safari needs a small timeout or it will fire a scroll event to position 0\n                    setTimeout(() => {\n                        scrollableContainer.scrollTop = scrollPosition;\n                    }, 0);\n                }\n            }\n        });\n\n        if (this.activeItem) {\n            this.activeItem.eHeaderButton.classList.remove('ag-tab-selected');\n            this.activeItem.tabbedItem.afterDetachedCallback?.();\n        }\n\n        eHeaderButton.classList.add('ag-tab-selected');\n\n        this.activeItem = wrapper;\n    }\n}\n", "import type {\n    GroupCellRendererParams,\n    ICellRendererComp,\n    IGroupCellRenderer,\n    UserCompDetails,\n} from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _setAriaRole, _setDisplayed } from '@ag-grid-community/core';\n\nimport { GroupCellRendererCtrl } from './groupCellRendererCtrl';\n\nconst groupTemplate =\n    /* html */\n    `<span class=\"ag-cell-wrapper\">\n        <span class=\"ag-group-expanded\" data-ref=\"eExpanded\"></span>\n        <span class=\"ag-group-contracted\" data-ref=\"eContracted\"></span>\n        <span class=\"ag-group-checkbox ag-invisible\" data-ref=\"eCheckbox\"></span>\n        <span class=\"ag-group-value\" data-ref=\"eValue\"></span>\n        <span class=\"ag-group-child-count\" data-ref=\"eChildCount\"></span>\n    </span>`;\n\nexport class GroupCellRenderer extends Component implements ICellRendererComp {\n    private readonly eExpanded: HTMLElement = RefPlaceholder;\n    private readonly eContracted: HTMLElement = RefPlaceholder;\n    private readonly eCheckbox: HTMLElement = RefPlaceholder;\n    private readonly eValue: HTMLElement = RefPlaceholder;\n    private readonly eChildCount: HTMLElement = RefPlaceholder;\n\n    // this cell renderer\n    private innerCellRenderer: ICellRendererComp;\n\n    constructor() {\n        super(groupTemplate);\n    }\n\n    public init(params: GroupCellRendererParams): void {\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (compDetails, valueToDisplay) => this.setRenderDetails(compDetails, valueToDisplay),\n            setChildCount: (count) => (this.eChildCount.textContent = count),\n            addOrRemoveCssClass: (cssClass, value) => this.addOrRemoveCssClass(cssClass, value),\n            setContractedDisplayed: (expanded) => _setDisplayed(this.eContracted, expanded),\n            setExpandedDisplayed: (expanded) => _setDisplayed(this.eExpanded, expanded),\n            setCheckboxVisible: (visible) => this.eCheckbox.classList.toggle('ag-invisible', !visible),\n        };\n\n        const ctrl = this.createManagedBean(new GroupCellRendererCtrl());\n        const fullWidth = !params.colDef;\n        const eGui = this.getGui();\n        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);\n\n        if (fullWidth) {\n            _setAriaRole(eGui, ctrl.getCellAriaRole());\n        }\n    }\n\n    private setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any): void {\n        if (compDetails) {\n            const componentPromise = compDetails.newAgStackInstance();\n            if (componentPromise == null) {\n                return;\n            }\n            componentPromise.then((comp) => {\n                if (!comp) {\n                    return;\n                }\n                const destroyComp = () => this.destroyBean(comp);\n                if (this.isAlive()) {\n                    this.eValue.appendChild(comp.getGui());\n                    this.addDestroyFunc(destroyComp);\n                } else {\n                    destroyComp();\n                }\n            });\n        } else {\n            this.eValue.innerText = valueToDisplay;\n        }\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    public override destroy(): void {\n        this.destroyBean(this.innerCellRenderer);\n        super.destroy();\n    }\n\n    public refresh(): boolean {\n        return false;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    CtrlsService,\n    ExpressionService,\n    FuncColsService,\n    GroupCellRendererParams,\n    IGroupCellRenderer,\n    IGroupCellRendererCtrl,\n    IRowNode,\n    RowNode,\n    UserCompDetails,\n    UserComponentFactory,\n    ValueService,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    CheckboxSelectionComponent,\n    KeyCode,\n    RowDragComp,\n    _cloneObject,\n    _createIconNoSpan,\n    _isElementInEventPath,\n    _isStopPropagationForAgGrid,\n    _missing,\n    _removeAriaExpanded,\n    _setAriaExpanded,\n    _stopPropagationForAgGrid,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nexport class GroupCellRendererCtrl extends BeanStub implements IGroupCellRendererCtrl {\n    private expressionService: ExpressionService;\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private userComponentFactory: UserComponentFactory;\n    private ctrlsService: CtrlsService;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.expressionService = beans.expressionService;\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.userComponentFactory = beans.userComponentFactory;\n        this.ctrlsService = beans.ctrlsService;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    private params: GroupCellRendererParams;\n\n    // will be true if the node was pulled down\n    private showingValueForOpenedParent: boolean;\n\n    // this is normally the rowNode of this row, however when doing hideOpenParents, it will\n    // be the parent who's details we are actually showing if the data was pulled down.\n    private displayedGroupNode: RowNode;\n\n    private eGui: HTMLElement;\n    private eExpanded: HTMLElement;\n    private eContracted: HTMLElement;\n    private eCheckbox: HTMLElement;\n    private expandListener: (() => null) | null;\n\n    // keep reference to this, so we can remove again when indent changes\n    private indentClass: string;\n\n    private comp: IGroupCellRenderer;\n    private compClass: any;\n\n    public init(\n        comp: IGroupCellRenderer,\n        eGui: HTMLElement,\n        eCheckbox: HTMLElement,\n        eExpanded: HTMLElement,\n        eContracted: HTMLElement,\n        compClass: any,\n        params: GroupCellRendererParams\n    ): void {\n        this.params = params;\n        this.eGui = eGui;\n        this.eCheckbox = eCheckbox;\n        this.eExpanded = eExpanded;\n        this.eContracted = eContracted;\n        this.comp = comp;\n        this.compClass = compClass;\n\n        const { node, colDef } = params;\n        const topLevelFooter = this.isTopLevelFooter();\n\n        // logic for skipping cells follows, never skip top level footer cell.\n        if (!topLevelFooter) {\n            const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n            if (embeddedRowMismatch) {\n                return;\n            }\n\n            // this footer should only be non-top level. Don't need to check groupIncludeFooter\n            // as we won't have footer rows in that instance.\n            if (node.footer && this.gos.get('groupHideOpenParents')) {\n                const showRowGroup = colDef && colDef.showRowGroup;\n                const rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n\n                // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n                // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n                if (showRowGroup !== rowGroupColumnId) {\n                    return;\n                }\n            }\n        }\n\n        this.setupShowingValueForOpenedParent();\n        this.findDisplayedGroupNode();\n\n        if (!topLevelFooter) {\n            const showingFooterTotal =\n                params.node.footer &&\n                params.node.rowGroupIndex ===\n                    this.funcColsService\n                        .getRowGroupColumns()\n                        .findIndex((c) => c.getColId() === params.colDef?.showRowGroup);\n            // if we're always showing a group value\n            const isAlwaysShowing = this.gos.get('groupDisplayType') != 'multipleColumns' || this.gos.get('treeData');\n            // if the cell is populated with a parent value due to `showOpenedGroup`\n            const showOpenGroupValue =\n                isAlwaysShowing ||\n                (this.gos.get('showOpenedGroup') &&\n                    !params.node.footer &&\n                    (!params.node.group ||\n                        (params.node.rowGroupIndex != null &&\n                            params.node.rowGroupIndex >\n                                this.funcColsService\n                                    .getRowGroupColumns()\n                                    .findIndex((c) => c.getColId() === params.colDef?.showRowGroup))));\n            // not showing a leaf value (field/valueGetter)\n            const leafWithValues = !node.group && (this.params.colDef?.field || this.params.colDef?.valueGetter);\n            // doesn't have expand/collapse chevron\n            const isExpandable = this.isExpandable();\n            // is showing pivot leaf cell\n            const showPivotModeLeafValue =\n                this.columnModel.isPivotMode() &&\n                node.leafGroup &&\n                node.rowGroupColumn?.getColId() === params.column?.getColDef().showRowGroup;\n\n            // if not showing any values or chevron, skip cell.\n            const canSkipRenderingCell =\n                !this.showingValueForOpenedParent &&\n                !isExpandable &&\n                !leafWithValues &&\n                !showOpenGroupValue &&\n                !showingFooterTotal &&\n                !showPivotModeLeafValue;\n            if (canSkipRenderingCell) {\n                return;\n            }\n        }\n\n        this.addExpandAndContract();\n        this.addFullWidthRowDraggerIfNeeded();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n        this.refreshAriaExpanded();\n    }\n\n    public getCellAriaRole(): string {\n        const colDefAriaRole = this.params.colDef?.cellAriaRole;\n        const columnColDefAriaRole = this.params.column?.getColDef().cellAriaRole;\n        return colDefAriaRole || columnColDefAriaRole || 'gridcell';\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        // property cleanup to avoid memory leaks\n        this.expandListener = null;\n    }\n\n    private refreshAriaExpanded(): void {\n        const { node, eGridCell } = this.params;\n\n        if (this.expandListener) {\n            this.expandListener = this.expandListener();\n        }\n\n        if (!this.isExpandable()) {\n            _removeAriaExpanded(eGridCell);\n            return;\n        }\n\n        const listener = () => {\n            // for react, we don't use JSX, as setting attributes via jsx is slower\n            _setAriaExpanded(eGridCell, !!node.expanded);\n        };\n\n        [this.expandListener] = this.addManagedListeners(node, { expandedChanged: listener }) || null;\n        listener();\n    }\n\n    private isTopLevelFooter(): boolean {\n        const totalRow = this.gos.getGrandTotalRow();\n        if (!totalRow) {\n            return false;\n        }\n\n        if (this.params.value != null || this.params.node.level != -1) {\n            return false;\n        }\n\n        // at this point, we know it's the root node and there is no value present, so it's a footer cell.\n        // the only thing to work out is if we are displaying groups  across multiple\n        // columns (groupDisplayType: 'multipleColumns'), we only want 'total' to appear in the first column.\n\n        const colDef = this.params.colDef;\n        const doingFullWidth = colDef == null;\n        if (doingFullWidth) {\n            return true;\n        }\n\n        if (colDef!.showRowGroup === true) {\n            return true;\n        }\n\n        const rowGroupCols = this.funcColsService.getRowGroupColumns();\n        // this is a sanity check, rowGroupCols should always be present\n        if (!rowGroupCols || rowGroupCols.length === 0) {\n            return true;\n        }\n\n        const firstRowGroupCol = rowGroupCols[0];\n\n        return firstRowGroupCol.getId() === colDef!.showRowGroup;\n    }\n\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    private isEmbeddedRowMismatch(): boolean {\n        if (!this.params.fullWidth || !this.gos.get('embedFullWidthRows')) {\n            return false;\n        }\n\n        const pinnedLeftCell = this.params.pinned === 'left';\n        const pinnedRightCell = this.params.pinned === 'right';\n        const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n        if (this.gos.get('enableRtl')) {\n            if (this.visibleColsService.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n\n        if (this.visibleColsService.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n\n        return !bodyCell;\n    }\n\n    private findDisplayedGroupNode(): void {\n        const column = this.params.column;\n        const rowNode = this.params.node as RowNode;\n\n        if (this.showingValueForOpenedParent) {\n            let pointer = rowNode.parent;\n\n            while (pointer != null) {\n                if (pointer.rowGroupColumn && column!.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroupNode = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n\n        // if we didn't find a displayed group, set it to the row node\n        if (_missing(this.displayedGroupNode)) {\n            this.displayedGroupNode = rowNode;\n        }\n    }\n\n    private setupShowingValueForOpenedParent(): void {\n        // note - this code depends on sortService.updateGroupDataForHiddenOpenParents, where group data\n        // is updated to reflect the dragged down parents\n        const rowNode = this.params.node;\n        const column = this.params.column as AgColumn;\n\n        if (!this.gos.get('groupHideOpenParents')) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // hideOpenParents means rowNode.groupData can have data for the group this column is displaying, even though\n        // this rowNode isn't grouping by the column we are displaying\n\n        // if no groupData at all, we are not showing a parent value\n        if (!rowNode.groupData) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // this is the normal case, in that we are showing a group for which this column is configured. note that\n        // this means the Row Group is closed (if it was open, we would not be displaying it)\n        const showingGroupNode = rowNode.rowGroupColumn != null;\n        if (showingGroupNode) {\n            const keyOfGroupingColumn = rowNode.rowGroupColumn!.getId();\n            const configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);\n            // if showing group as normal, we didn't take group info from parent\n            if (configuredToShowThisGroupLevel) {\n                this.showingValueForOpenedParent = false;\n                return;\n            }\n        }\n\n        // see if we are showing a Group Value for the Displayed Group. if we are showing a group value, and this Row Node\n        // is not grouping by this Displayed Group, we must of gotten the value from a parent node\n        const valPresent = rowNode.groupData[column.getId()] != null;\n\n        this.showingValueForOpenedParent = valPresent;\n    }\n\n    private addValueElement(): void {\n        if (this.displayedGroupNode.footer) {\n            this.addFooterValue();\n        } else {\n            this.addGroupValue();\n            this.addChildCount();\n        }\n    }\n\n    private addGroupValue(): void {\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();\n        const innerCompDetails = this.getInnerCompDetails(paramsAdjusted);\n\n        const { valueFormatted, value } = paramsAdjusted;\n\n        let valueWhenNoRenderer = valueFormatted;\n        if (valueWhenNoRenderer == null) {\n            const isGroupColForNode =\n                this.displayedGroupNode.rowGroupColumn &&\n                this.params.column?.isRowGroupDisplayed(this.displayedGroupNode.rowGroupColumn.getId());\n\n            if (this.displayedGroupNode.key === '' && this.displayedGroupNode.group && isGroupColForNode) {\n                const localeTextFunc = this.localeService.getLocaleTextFunc();\n                valueWhenNoRenderer = localeTextFunc('blanks', '(Blanks)');\n            } else {\n                valueWhenNoRenderer = value ?? null;\n            }\n        }\n\n        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);\n    }\n\n    private adjustParamsWithDetailsFromRelatedColumn(): GroupCellRendererParams {\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const column = this.params.column;\n\n        if (!relatedColumn) {\n            return this.params;\n        }\n\n        const notFullWidth = column != null;\n        if (notFullWidth) {\n            const showingThisRowGroup = column!.isRowGroupDisplayed(relatedColumn.getId());\n            if (!showingThisRowGroup) {\n                return this.params;\n            }\n        }\n\n        const params = this.params;\n\n        const { value, node } = this.params;\n        const valueFormatted = this.valueService.formatValue(relatedColumn, node, value);\n\n        // we don't update the original params, as they could of come through React,\n        // as react has RowGroupCellRenderer, which means the params could be props which\n        // would be read only\n        const paramsAdjusted = {\n            ...params,\n            valueFormatted: valueFormatted,\n        };\n\n        return paramsAdjusted;\n    }\n\n    private addFooterValue(): void {\n        let footerValueGetter = this.params.totalValueGetter;\n        if (!footerValueGetter) {\n            const legacyGetter = this.params.footerValueGetter;\n            if (legacyGetter) {\n                footerValueGetter = legacyGetter;\n                _warnOnce('As of v31.3, footerValueGetter is deprecated. Use `totalValueGetter` instead.');\n            }\n        }\n        let footerValue = '';\n\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone = _cloneObject(this.params);\n            paramsClone.value = this.params.value;\n\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            } else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            } else {\n                _warnOnce('footerValueGetter should be either a function or a string (expression)');\n            }\n        } else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const footerTotalPrefix = localeTextFunc('footerTotal', 'Total');\n            footerValue = footerTotalPrefix + ' ' + (this.params.value != null ? this.params.value : '');\n        }\n\n        const innerCompDetails = this.getInnerCompDetails(this.params);\n\n        this.comp.setInnerRenderer(innerCompDetails, footerValue);\n    }\n\n    private getInnerCompDetails(params: GroupCellRendererParams): UserCompDetails | undefined {\n        // for full width rows, we don't do any of the below\n        if (params.fullWidth) {\n            return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(\n                this.gos.get('groupRowRendererParams'),\n                params\n            );\n        }\n\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const innerCompDetails = this.userComponentFactory.getInnerRendererDetails(params, params);\n\n        // avoid using GroupCellRenderer again, otherwise stack overflow, as we insert same renderer again and again.\n        // this covers off chance user is grouping by a column that is also configured with GroupCellRenderer\n        const isGroupRowRenderer = (details: UserCompDetails | undefined) =>\n            details && details.componentClass == this.compClass;\n\n        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            return innerCompDetails;\n        }\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const relatedColDef = relatedColumn ? relatedColumn.getColDef() : undefined;\n\n        if (!relatedColDef) {\n            return;\n        }\n\n        // otherwise see if we can use the cellRenderer of the column we are grouping by\n        const relatedCompDetails = this.userComponentFactory.getCellRendererDetails(relatedColDef, params);\n\n        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {\n            // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n            return relatedCompDetails;\n        }\n\n        if (\n            isGroupRowRenderer(relatedCompDetails) &&\n            relatedColDef.cellRendererParams &&\n            relatedColDef.cellRendererParams.innerRenderer\n        ) {\n            // edge case - this comes from a column which has been grouped dynamically, that has a renderer 'group'\n            // and has an inner cell renderer\n            const res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);\n            return res;\n        }\n    }\n\n    private addChildCount(): void {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) {\n            return;\n        }\n\n        this.addManagedListeners(this.displayedGroupNode, {\n            allChildrenCountChanged: this.updateChildCount.bind(this),\n        });\n\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n\n    private updateChildCount(): void {\n        const allChildrenCount = this.displayedGroupNode.allChildrenCount;\n        const showingGroupForThisNode = this.isShowRowGroupForThisRow();\n        const showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;\n        const countString = showCount ? `(${allChildrenCount})` : ``;\n        this.comp.setChildCount(countString);\n    }\n\n    private isShowRowGroupForThisRow(): boolean {\n        if (this.gos.get('treeData')) {\n            return true;\n        }\n\n        const rowGroupColumn = this.displayedGroupNode.rowGroupColumn;\n\n        if (!rowGroupColumn) {\n            return false;\n        }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());\n\n        return thisColumnIsInterested;\n    }\n\n    private addExpandAndContract(): void {\n        const params = this.params;\n        const eExpandedIcon = _createIconNoSpan('groupExpanded', this.gos, null);\n        const eContractedIcon = _createIconNoSpan('groupContracted', this.gos, null);\n\n        if (eExpandedIcon) {\n            this.eExpanded.appendChild(eExpandedIcon);\n        }\n\n        if (eContractedIcon) {\n            this.eContracted.appendChild(eContractedIcon);\n        }\n\n        const eGroupCell = params.eGridCell;\n\n        // if editing groups, then double click is to start editing\n        const isDoubleClickEdit = this.params.column?.isCellEditable(params.node) && this.gos.get('enableGroupEdit');\n        if (!isDoubleClickEdit && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListeners(eGroupCell, { dblclick: this.onCellDblClicked.bind(this) });\n        }\n\n        this.addManagedListeners(this.eExpanded, { click: this.onExpandClicked.bind(this) });\n        this.addManagedListeners(this.eContracted, { click: this.onExpandClicked.bind(this) });\n\n        // expand / contract as the user hits enter\n        this.addManagedListeners(eGroupCell, { keydown: this.onKeyDown.bind(this) });\n        this.addManagedListeners(params.node, { expandedChanged: this.showExpandAndContractIcons.bind(this) });\n\n        this.showExpandAndContractIcons();\n\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        const expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);\n        this.addManagedListeners(this.displayedGroupNode, {\n            allChildrenCountChanged: expandableChangedListener,\n            masterChanged: expandableChangedListener,\n            groupChanged: expandableChangedListener,\n            hasChildrenChanged: expandableChangedListener,\n        });\n    }\n\n    private onExpandClicked(mouseEvent: MouseEvent): void {\n        if (_isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n\n        // so if we expand a node, it does not also get selected.\n        _stopPropagationForAgGrid(mouseEvent);\n\n        this.onExpandOrContract(mouseEvent);\n    }\n\n    private onExpandOrContract(e: MouseEvent | KeyboardEvent): void {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode: RowNode = this.displayedGroupNode;\n        const nextExpandState = !rowNode.expanded;\n\n        if (!nextExpandState && rowNode.sticky) {\n            this.scrollToStickyNode(rowNode);\n        }\n\n        rowNode.setExpanded(nextExpandState, e);\n    }\n\n    private scrollToStickyNode(rowNode: RowNode): void {\n        const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        const scrollFeature = gridBodyCtrl.getScrollFeature();\n\n        scrollFeature.setVerticalScrollPosition(rowNode.rowTop! - rowNode.stickyRowTop);\n    }\n\n    private isExpandable(): boolean {\n        if (this.showingValueForOpenedParent) {\n            return true;\n        }\n\n        const rowNode = this.displayedGroupNode;\n        const reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;\n        const expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n\n        if (!expandableGroup) {\n            return false;\n        }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';\n\n        if (displayingForOneColumnOnly) {\n            const showing = this.isShowRowGroupForThisRow();\n            return showing;\n        }\n\n        return true;\n    }\n\n    private showExpandAndContractIcons(): void {\n        const { params, displayedGroupNode: displayedGroup, columnModel } = this;\n        const { node } = params;\n\n        const isExpandable = this.isExpandable();\n\n        if (isExpandable) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.showingValueForOpenedParent ? true : node.expanded;\n            this.comp.setExpandedDisplayed(expanded);\n            this.comp.setContractedDisplayed(!expanded);\n        } else {\n            // it not expandable, show neither\n            this.comp.setExpandedDisplayed(false);\n            this.comp.setContractedDisplayed(false);\n        }\n\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotMode = columnModel.isPivotMode();\n        const pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;\n        const addExpandableCss = isExpandable && !pivotModeAndLeafGroup;\n        const isTotalFooterNode = node.footer && node.level === -1;\n\n        this.comp.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);\n        this.comp.addOrRemoveCssClass('ag-row-group', addExpandableCss);\n\n        if (pivotMode) {\n            this.comp.addOrRemoveCssClass('ag-pivot-leaf-group', !!pivotModeAndLeafGroup);\n        } else if (!isTotalFooterNode) {\n            this.comp.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);\n        }\n    }\n\n    private onRowNodeIsExpandableChanged(): void {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n\n        // if we have no children, this impacts the indent\n        this.setIndent();\n\n        this.refreshAriaExpanded();\n    }\n\n    private setupIndent(): void {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node: RowNode = this.params.node as RowNode;\n        const suppressPadding = this.params.suppressPadding;\n\n        if (!suppressPadding) {\n            this.addManagedListeners(node, { uiLevelChanged: this.setIndent.bind(this) });\n            this.setIndent();\n        }\n    }\n\n    private setIndent(): void {\n        if (this.gos.get('groupHideOpenParents')) {\n            return;\n        }\n\n        const params = this.params;\n        const rowNode: IRowNode = params.node;\n        // if we are only showing one group column, we don't want to be indenting based on level\n        const fullWithRow = !!params.colDef;\n        const treeData = this.gos.get('treeData');\n        const manyDimensionThisColumn = !fullWithRow || treeData || params.colDef!.showRowGroup === true;\n        const paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;\n\n        if (this.indentClass) {\n            this.comp.addOrRemoveCssClass(this.indentClass, false);\n        }\n\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.comp.addOrRemoveCssClass(this.indentClass, true);\n        this.eGui.style.setProperty('--ag-indentation-level', String(paddingCount));\n    }\n\n    private addFullWidthRowDraggerIfNeeded(): void {\n        if (!this.params.fullWidth || !this.params.rowDrag) {\n            return;\n        }\n\n        const rowDragComp = new RowDragComp(() => this.params.value, this.params.node as RowNode);\n        this.createManagedBean(rowDragComp);\n\n        this.eGui.insertAdjacentElement('afterbegin', rowDragComp.getGui());\n    }\n\n    private isUserWantsSelected(): boolean {\n        const paramsCheckbox = this.params.checkbox;\n\n        // if a function, we always return true as change detection can show or hide the checkbox.\n        return typeof paramsCheckbox === 'function' || paramsCheckbox === true;\n    }\n\n    private addCheckboxIfNeeded(): void {\n        const rowNode = this.displayedGroupNode;\n        const checkboxNeeded =\n            this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.createBean(cbSelectionComponent);\n\n            cbSelectionComponent.init({\n                rowNode: this.params.node as RowNode, // when groupHideOpenParents = true and group expanded, we want the checkbox to refer to leaf node state (not group node state)\n                column: this.params.column as AgColumn,\n                overrides: {\n                    isVisible: this.params.checkbox,\n                    callbackParams: this.params,\n                    removeHidden: true,\n                },\n            });\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => this.destroyBean(cbSelectionComponent));\n        }\n\n        this.comp.setCheckboxVisible(checkboxNeeded);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const isEnterKey = event.key === KeyCode.ENTER;\n\n        if (!isEnterKey || this.params.suppressEnterExpand) {\n            return;\n        }\n\n        const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n\n        if (cellEditable) {\n            return;\n        }\n\n        this.onExpandOrContract(event);\n    }\n\n    private onCellDblClicked(mouseEvent: MouseEvent): void {\n        if (_isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon =\n            _isElementInEventPath(this.eExpanded, mouseEvent) || _isElementInEventPath(this.eContracted, mouseEvent);\n\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract(mouseEvent);\n        }\n    }\n}\n", "import type { ILicenseManager } from '@ag-grid-enterprise/core';\nimport { LicenseManager } from '@ag-grid-enterprise/core';\nimport { AgCharts } from 'ag-charts-enterprise';\nimport 'ag-charts-enterprise';\n\nAgCharts.setGridContext(true);\n\nLicenseManager.setChartsLicenseManager(AgCharts as ILicenseManager);\n\nexport * from '@ag-grid-enterprise/charts';\n", "import { AgCharts, time } from 'ag-charts-community';\n\nexport { GridChartsModule } from './gridChartsModule';\n\nexport * from 'ag-charts-community';\n\nexport const agCharts = {\n    time,\n    AgCharts,\n};\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { RangeSelectionModule } from '@ag-grid-enterprise/range-selection';\n\nimport { AdvancedSettingsMenuFactory } from './charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory';\nimport { ChartMenuListFactory } from './charts/chartComp/menu/chartMenuList';\nimport { ChartCrossFilterService } from './charts/chartComp/services/chartCrossFilterService';\nimport { ChartMenuService } from './charts/chartComp/services/chartMenuService';\nimport { ChartTranslationService } from './charts/chartComp/services/chartTranslationService';\nimport { ChartService } from './charts/chartService';\nimport {\n    closeChartToolPanel,\n    createCrossFilterChart,\n    createPivotChart,\n    createRangeChart,\n    downloadChart,\n    getChartImageDataURL,\n    getChartModels,\n    getChartRef,\n    openChartToolPanel,\n    restoreChart,\n    updateChart,\n} from './charts/chartsApi';\nimport { validGridChartsVersion } from './utils/validGridChartsVersion';\nimport { VERSION as GRID_VERSION } from './version';\n\nexport const GridChartsCoreModule: Module = {\n    version: GRID_VERSION,\n    validate: () => {\n        return validGridChartsVersion({\n            gridVersion: GRID_VERSION,\n            chartsVersion: ChartService.CHARTS_VERSION,\n        });\n    },\n    moduleName: `${ModuleNames.GridChartsModule}-core`,\n    beans: [\n        ChartService,\n        ChartTranslationService,\n        ChartCrossFilterService,\n        ChartMenuListFactory,\n        ChartMenuService,\n        AdvancedSettingsMenuFactory,\n    ],\n    userComponents: [\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n    dependantModules: [RangeSelectionModule, EnterpriseCoreModule],\n};\n\nexport const GridChartsApiModule: Module = {\n    version: GRID_VERSION,\n    moduleName: `${ModuleNames.GridChartsModule}-api`,\n    apiFunctions: {\n        getChartModels,\n        getChartRef,\n        getChartImageDataURL,\n        downloadChart,\n        openChartToolPanel,\n        closeChartToolPanel,\n        createRangeChart,\n        createPivotChart,\n        createCrossFilterChart,\n        updateChart,\n        restoreChart,\n    },\n    dependantModules: [GridChartsCoreModule],\n};\n\nexport const GridChartsModule: Module = {\n    version: GRID_VERSION,\n    moduleName: ModuleNames.GridChartsModule,\n    dependantModules: [GridChartsCoreModule, GridChartsApiModule],\n};\n", "import type { BeanCollection, FocusService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub, TabGuardComp } from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { AdvancedSettingsPanel } from './advancedSettingsPanel';\n\nexport class AdvancedSettingsMenuFactory extends BeanStub implements NamedBean {\n    beanName = 'advancedSettingsMenuFactory' as const;\n\n    private focusService: FocusService;\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private activeMenu?: AdvancedSettingsMenu;\n    private activeDialog?: AgDialog;\n\n    public showMenu(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.hideMenu();\n\n        const menu = this.createBean(new AdvancedSettingsMenu(chartMenuContext));\n\n        this.activeDialog = this.createBean(\n            new AgDialog({\n                title: this.chartTranslationService.translate('advancedSettings'),\n                component: menu,\n                width: 300,\n                height: 400,\n                resizable: true,\n                movable: true,\n                centered: true,\n                closable: true,\n                afterGuiAttached: () => {\n                    this.focusService.findFocusableElements(menu.getGui())[0]?.focus();\n                },\n                closedCallback: () => {\n                    this.activeMenu = this.destroyBean(this.activeMenu);\n                    this.activeDialog = undefined;\n                    eventSource?.focus({ preventScroll: true });\n                },\n            })\n        );\n\n        this.activeMenu = menu;\n    }\n\n    public hideMenu(): void {\n        if (this.activeDialog) {\n            this.destroyBean(this.activeDialog);\n        }\n    }\n\n    public override destroy(): void {\n        this.activeMenu = this.destroyBean(this.activeMenu);\n        this.activeDialog = this.destroyBean(this.activeDialog);\n        super.destroy();\n    }\n}\n\nclass AdvancedSettingsMenu extends TabGuardComp {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n    }\n\n    private advancedSettingsPanel: AdvancedSettingsPanel;\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-advanced-settings\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.advancedSettingsPanel = this.createManagedBean(new AdvancedSettingsPanel(this.chartMenuContext));\n        this.getGui().appendChild(this.advancedSettingsPanel.getGui());\n        this.initialiseTabGuard({\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            focusTrapActive: true,\n        });\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const backwards = e.shiftKey;\n        const panelGui = this.advancedSettingsPanel.getGui();\n        const nextEl = this.focusService.findNextFocusableElement(panelGui, false, backwards);\n\n        if (nextEl) {\n            nextEl.focus();\n        } else {\n            const focusableElements = this.focusService.findFocusableElements(panelGui);\n            if (focusableElements.length) {\n                focusableElements[backwards ? focusableElements.length - 1 : 0].focus();\n            }\n        }\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nimport type { ChartSeriesType } from '../../utils/seriesTypeMapper';\nimport { isCartesian } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { ChartPanelFeature } from '../chartPanelFeature';\nimport { AnimationPanel } from './interactivity/animationPanel';\nimport { CrosshairPanel } from './interactivity/crosshairPanel';\nimport { NavigatorPanel } from './interactivity/navigatorPanel';\nimport { ZoomPanel } from './interactivity/zoomPanel';\n\nconst INTERACTIVITY_GROUPS = ['navigator', 'zoom', 'animation', 'crosshair'] as const;\n\ntype ChartInteractivityGroup = (typeof INTERACTIVITY_GROUPS)[number];\n\nexport class AdvancedSettingsPanel extends Component {\n    private chartPanelFeature: ChartPanelFeature;\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-advanced-settings-wrapper\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.chartPanelFeature = this.createManagedBean(\n            new ChartPanelFeature(\n                this.chartMenuContext.chartController,\n                this.getGui(),\n                'ag-chart-advanced-settings-section',\n                (chartType, seriesType) => this.createPanels(chartType, seriesType)\n            )\n        );\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(chartType: ChartType, seriesType: ChartSeriesType): void {\n        INTERACTIVITY_GROUPS.forEach((group) => {\n            if (!this.isGroupPanelShownForSeries(group, seriesType)) {\n                return;\n            }\n\n            const comp = this.createPanel(group);\n            this.chartPanelFeature.addComponent(comp);\n        });\n    }\n\n    private isGroupPanelShownForSeries(group: ChartInteractivityGroup, seriesType: ChartSeriesType): boolean {\n        return group === 'animation' || isCartesian(seriesType);\n    }\n\n    private createPanel(group: ChartInteractivityGroup): Component {\n        const { chartMenuParamsFactory, chartAxisMenuParamsFactory } = this.chartMenuContext;\n        switch (group) {\n            case 'navigator':\n                return new NavigatorPanel(chartMenuParamsFactory);\n            case 'zoom':\n                return new ZoomPanel(chartMenuParamsFactory);\n            case 'animation':\n                return new AnimationPanel(chartMenuParamsFactory);\n            case 'crosshair':\n                return new CrosshairPanel(chartAxisMenuParamsFactory);\n        }\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { ChartMappings } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../services/chartTranslationService';\n\nexport type ChartSeriesType =\n    (typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE)[keyof typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE] &\n        keyof AgChartThemeOverrides;\n\n// these values correspond to top level object names in `AgChartThemeOverrides`\nexport type ChartThemeOverridesSeriesType = keyof AgChartThemeOverrides & (ChartSeriesType | 'common');\n\ninterface SeriesParams {\n    isCartesian?: boolean;\n    isPolar?: boolean;\n    isEnterprise?: boolean;\n    isRadial?: boolean;\n    isHierarchical?: boolean;\n    isPie?: boolean;\n    canInvert?: boolean;\n    canSwitchDirection?: boolean;\n}\n\nconst SERIES_TYPES: { [key in ChartSeriesType]: SeriesParams } = {\n    area: {\n        isCartesian: true,\n        canInvert: true,\n    },\n    bar: {\n        isCartesian: true,\n        canInvert: true,\n    },\n    histogram: {\n        isCartesian: true,\n    },\n    line: {\n        isCartesian: true,\n        canInvert: true,\n    },\n    pie: {\n        isPie: true,\n    },\n    donut: {\n        isPie: true,\n        canInvert: true,\n    },\n    scatter: {\n        isCartesian: true,\n    },\n    bubble: {\n        isCartesian: true,\n    },\n    'radial-column': {\n        isPolar: true,\n        isEnterprise: true,\n        isRadial: true,\n        canInvert: true,\n    },\n    'radial-bar': {\n        isPolar: true,\n        isEnterprise: true,\n        isRadial: true,\n        canInvert: true,\n    },\n    'radar-line': {\n        isPolar: true,\n        isEnterprise: true,\n        canInvert: true,\n    },\n    'radar-area': {\n        isPolar: true,\n        isEnterprise: true,\n        canInvert: true,\n    },\n    nightingale: {\n        isPolar: true,\n        isEnterprise: true,\n        canInvert: true,\n    },\n    'range-bar': {\n        isCartesian: true,\n        isEnterprise: true,\n        canSwitchDirection: true,\n    },\n    'range-area': {\n        isCartesian: true,\n        isEnterprise: true,\n    },\n    'box-plot': {\n        isCartesian: true,\n        isEnterprise: true,\n        canSwitchDirection: true,\n    },\n    treemap: {\n        isEnterprise: true,\n        isHierarchical: true,\n    },\n    sunburst: {\n        isEnterprise: true,\n        isHierarchical: true,\n    },\n    heatmap: {\n        isCartesian: true,\n        isEnterprise: true,\n    },\n    waterfall: {\n        isCartesian: true,\n        isEnterprise: true,\n        canSwitchDirection: true,\n    },\n};\n\nexport function isSeriesType(seriesType: ChartSeriesType): boolean {\n    return !!SERIES_TYPES[seriesType];\n}\n\nexport function isComboChart(chartType: ChartType): boolean {\n    return ChartMappings.COMBO_CHART_TYPES.includes(chartType as (typeof ChartMappings.COMBO_CHART_TYPES)[number]);\n}\n\nfunction doesSeriesHaveProperty(seriesType: ChartSeriesType, prop: keyof SeriesParams): boolean {\n    return !!SERIES_TYPES[seriesType]?.[prop];\n}\n\nexport function isEnterpriseChartType(chartType: ChartType): boolean {\n    return doesSeriesHaveProperty(getSeriesType(chartType), 'isEnterprise');\n}\n\nconst stackedChartTypes = new Set(['stackedColumn', 'normalizedColumn', 'stackedBar', 'normalizedBar']);\nexport function isStacked(chartType: ChartType): boolean {\n    return stackedChartTypes.has(chartType);\n}\n\nexport function isCartesian(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isCartesian');\n}\n\nexport function isPolar(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isPolar');\n}\n\nexport function isRadial(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isRadial');\n}\n\nexport function isHierarchical(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isHierarchical');\n}\n\nexport function getCanonicalChartType(chartType: ChartType): Exclude<ChartType, 'doughnut'> {\n    return chartType === 'doughnut' ? 'donut' : chartType;\n}\n\nexport function getSeriesTypeIfExists(chartType: ChartType): ChartSeriesType | undefined {\n    return ChartMappings.CHART_TYPE_TO_SERIES_TYPE[chartType as keyof typeof ChartMappings.CHART_TYPE_TO_SERIES_TYPE];\n}\n\nexport function getSeriesType(chartType: ChartType): ChartSeriesType {\n    return getSeriesTypeIfExists(chartType) ?? 'line';\n}\n\nexport function isPieChartSeries(seriesType: ChartSeriesType): boolean {\n    return doesSeriesHaveProperty(seriesType, 'isPie');\n}\n\nfunction canOnlyHaveSingleSeries(chartType: ChartType): boolean {\n    return chartType === 'pie' || chartType === 'waterfall' || chartType === 'histogram';\n}\n\nexport function getMaxNumCategories(chartType: ChartType): number | undefined {\n    return isHierarchical(getSeriesType(chartType)) ? undefined : 1;\n}\n\nexport function getMaxNumSeries(chartType: ChartType): number | undefined {\n    if (isHierarchical(getSeriesType(chartType))) {\n        return 2;\n    } else if (canOnlyHaveSingleSeries(chartType)) {\n        return 1;\n    } else {\n        return undefined;\n    }\n}\n\nexport function supportsInvertedCategorySeries(chartType: ChartType): boolean {\n    return !isComboChart(chartType) && doesSeriesHaveProperty(getSeriesType(chartType), 'canInvert');\n}\n\nexport function canSwitchDirection(chartType: ChartType): boolean {\n    return doesSeriesHaveProperty(getSeriesType(chartType), 'canSwitchDirection');\n}\n\nexport function getFullChartNameTranslationKey(chartType: ChartType): ChartTranslationKey {\n    switch (chartType) {\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n        case 'stackedArea':\n        case 'normalizedArea':\n            return `${chartType}Full`;\n        case 'doughnut':\n            return 'donut';\n        case 'areaColumnCombo':\n            return 'AreaColumnCombo';\n        default:\n            return chartType;\n    }\n}\n", "import type { ChartType, Component } from '@ag-grid-community/core';\nimport { BeanStub, _removeFromParent } from '@ag-grid-community/core';\n\nimport type { ChartController } from '../chartController';\nimport type { ChartSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType } from '../utils/seriesTypeMapper';\n\nexport class ChartPanelFeature extends BeanStub {\n    private chartType: ChartType;\n    private isGrouping: boolean;\n    private panels: Component[] = [];\n\n    constructor(\n        private readonly chartController: ChartController,\n        private readonly eGui: HTMLElement,\n        private readonly cssClass: string,\n        private readonly createPanels: (chartType: ChartType, seriesType: ChartSeriesType) => void\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.addManagedListeners(this.chartController, {\n            chartUpdated: () => this.refreshPanels(true),\n            chartApiUpdate: () => this.refreshPanels(false),\n        });\n    }\n\n    public addComponent(component: Component): void {\n        this.createBean(component);\n        this.panels.push(component);\n        component.addCssClass(this.cssClass);\n        this.eGui.appendChild(component.getGui());\n    }\n\n    public refreshPanels(reuse?: boolean) {\n        const chartType = this.chartController.getChartType();\n        const isGrouping = this.chartController.isGrouping();\n        const seriesType = getSeriesType(chartType);\n\n        if (reuse && chartType === this.chartType && isGrouping === this.isGrouping) {\n            // existing panels can be re-used\n            return;\n        }\n\n        this.destroyPanels();\n\n        this.createPanels(chartType, seriesType);\n\n        this.chartType = chartType;\n        this.isGrouping = isGrouping;\n    }\n\n    private destroyPanels(): void {\n        this.panels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n        this.panels = [];\n    }\n\n    public override destroy(): void {\n        this.destroyPanels();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgInputNumberFieldSelector, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class AnimationPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const animationGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'animation.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('animation'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const animationHeightInputParams = this.chartMenuParamsFactory.getDefaultNumberInputParams(\n            'animation.duration',\n            'durationMillis',\n            {\n                min: 0,\n            }\n        );\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"animationGroup\">\n                <ag-input-number-field data-ref=\"animationHeightInput\"></ag-input>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgInputNumberFieldSelector],\n            {\n                animationGroup: animationGroupParams,\n                animationHeightInput: animationHeightInputParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckboxSelector, Component } from '@ag-grid-community/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class CrosshairPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const crosshairGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'crosshair.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('crosshair'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const crosshairLabelCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.label.enabled',\n            'crosshairLabel'\n        );\n        const crosshairSnapCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.snap',\n            'crosshairSnap'\n        );\n        const crosshairStrokeColorPickerParams = this.chartMenuParamsFactory.getDefaultColorPickerParams(\n            'crosshair.stroke',\n            'color'\n        );\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"crosshairGroup\">\n                <ag-checkbox data-ref=\"crosshairLabelCheckbox\"></ag-checkbox>\n                <ag-checkbox data-ref=\"crosshairSnapCheckbox\"></ag-checkbox>\n                <ag-color-picker data-ref=\"crosshairStrokeColorPicker\"></ag-color-picker>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgCheckboxSelector, AgColorPickerSelector],\n            {\n                crosshairGroup: crosshairGroupParams,\n                crosshairLabelCheckbox: crosshairLabelCheckboxParams,\n                crosshairSnapCheckbox: crosshairSnapCheckboxParams,\n                crosshairStrokeColorPicker: crosshairStrokeColorPickerParams,\n            }\n        );\n    }\n}\n", "import type { AgPickerFieldParams, ComponentSelector } from '@ag-grid-community/core';\nimport { AgPickerField } from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\nimport { _Util } from 'ag-charts-community';\n\nimport { AgColorPanel } from './agColorPanel';\n\nexport interface AgColorPickerParams\n    extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\n    pickerType?: string;\n    pickerAriaLabelKey?: string;\n    pickerAriaLabelValue?: string;\n}\n\nexport class AgColorPicker extends AgPickerField<string, AgColorPickerParams & AgPickerFieldParams, string, AgDialog> {\n    private isDestroyingPicker: boolean;\n    private eDisplayFieldColor: HTMLElement;\n    private eDisplayFieldText: HTMLElement;\n\n    constructor(config?: AgColorPickerParams) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelColorPicker',\n            pickerAriaLabelValue: 'Color Picker',\n            pickerType: 'ag-list',\n            className: 'ag-color-picker',\n            pickerIcon: 'smallDown',\n            ...config,\n        });\n    }\n\n    public override postConstruct() {\n        const eDocument = this.gos.getDocument();\n        this.eDisplayFieldColor = eDocument.createElement('span');\n        this.eDisplayFieldColor.classList.add('ag-color-picker-color');\n        this.eDisplayFieldText = eDocument.createElement('span');\n        this.eDisplayFieldText.classList.add('ag-color-picker-value');\n        this.eDisplayField.appendChild(this.eDisplayFieldColor);\n        this.eDisplayField.appendChild(this.eDisplayFieldText);\n\n        super.postConstruct();\n\n        if (this.value) {\n            this.setValue(this.value);\n        }\n    }\n\n    protected createPickerComponent() {\n        const eGuiRect = this.eWrapper.getBoundingClientRect();\n        const parentRect = this.popupService.getParentRect();\n\n        const colorDialog = this.createBean(\n            new AgDialog({\n                closable: false,\n                modal: true,\n                hideTitleBar: true,\n                minWidth: 190,\n                width: 190,\n                height: 250,\n                x: eGuiRect.right - parentRect.left - 190,\n                y: eGuiRect.top - parentRect.top - 250 - (this.config.pickerGap ?? 0),\n            })\n        );\n\n        return colorDialog;\n    }\n\n    protected override renderAndPositionPicker(): () => void {\n        const pickerComponent = this.pickerComponent!;\n        const colorPanel = this.createBean(new AgColorPanel({ picker: this }));\n\n        pickerComponent.addCssClass('ag-color-dialog');\n\n        colorPanel.addDestroyFunc(() => {\n            if (pickerComponent.isAlive()) {\n                this.destroyBean(pickerComponent);\n            }\n        });\n\n        pickerComponent.setParentComponent(this);\n        pickerComponent.setBodyComponent(colorPanel);\n        colorPanel.setValue(this.getValue());\n        colorPanel.getGui().focus();\n\n        pickerComponent.addDestroyFunc(() => {\n            // here we check if the picker was already being\n            // destroyed to avoid a stack overflow\n            if (!this.isDestroyingPicker) {\n                this.beforeHidePicker();\n                this.isDestroyingPicker = true;\n\n                if (colorPanel.isAlive()) {\n                    this.destroyBean(colorPanel);\n                }\n\n                if (this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            } else {\n                this.isDestroyingPicker = false;\n            }\n        });\n\n        return () => this.pickerComponent?.close();\n    }\n\n    public override setValue(color: string): this {\n        if (this.value === color) {\n            return this;\n        }\n\n        this.eDisplayFieldColor.style.backgroundColor = color;\n        this.eDisplayFieldText.textContent = _Util.Color.fromString(color).toHexString().toUpperCase();\n\n        return super.setValue(color);\n    }\n\n    public override getValue(): string {\n        return this.value;\n    }\n}\n\nexport const AgColorPickerSelector: ComponentSelector = {\n    selector: 'AG-COLOR-PICKER',\n    component: AgColorPicker,\n};\n", "import { Component, KeyCode, RefPlaceholder, _exists, _setDisplayed } from '@ag-grid-community/core';\nimport { _Util } from 'ag-charts-community';\n\nimport type { AgColorInput } from './agColorInput';\nimport { AgColorInputSelector } from './agColorInput';\nimport type { AgColorPicker } from './agColorPicker';\n\nexport class AgColorPanel extends Component {\n    private H = 1; // in the [0, 1] range\n    private S = 1; // in the [0, 1] range\n    private B = 1; // in the [0, 1] range\n    private A = 1; // in the [0, 1] range\n\n    private spectrumValRect?: ClientRect | DOMRect;\n    private isSpectrumDragging = false;\n\n    private spectrumHueRect?: ClientRect | DOMRect;\n    private isSpectrumHueDragging = false;\n\n    private spectrumAlphaRect?: ClientRect | DOMRect;\n    private isSpectrumAlphaDragging = false;\n\n    private picker: Component;\n\n    private colorChanged = false;\n    private static maxRecentColors = 8;\n    private static recentColors: string[] = [];\n    private tabIndex: string;\n\n    private readonly spectrumColor: HTMLElement = RefPlaceholder;\n    private readonly spectrumVal: HTMLElement = RefPlaceholder;\n    private readonly spectrumDragger: HTMLElement = RefPlaceholder;\n    private readonly spectrumHue: HTMLElement = RefPlaceholder;\n    private readonly spectrumHueSlider: HTMLElement = RefPlaceholder;\n    private readonly spectrumAlpha: HTMLElement = RefPlaceholder;\n    private readonly spectrumAlphaSlider: HTMLElement = RefPlaceholder;\n    private readonly colorInput: AgColorInput = RefPlaceholder;\n    private readonly recentColors: HTMLElement = RefPlaceholder;\n\n    constructor(config: { picker: Component<any> }) {\n        super(\n            /* html */ `<div class=\"ag-color-panel\" tabindex=\"-1\">\n            <div data-ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div data-ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div data-ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div data-ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div data-ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div data-ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div data-ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <ag-color-input data-ref=\"colorInput\"></ag-color-input>\n                <div data-ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>`,\n            [AgColorInputSelector]\n        );\n        this.picker = config.picker;\n    }\n\n    public postConstruct() {\n        this.initTabIndex();\n        this.initRecentColors();\n\n        this.addGuiEventListener('focus', () => this.spectrumColor.focus());\n        this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER && !e.defaultPrevented) {\n                this.destroy();\n            }\n        });\n\n        this.addManagedListeners(this.spectrumColor, { keydown: (e) => this.moveDragger(e) });\n        this.addManagedListeners(this.spectrumAlphaSlider, { keydown: (e) => this.moveAlphaSlider(e) });\n        this.addManagedListeners(this.spectrumHueSlider, { keydown: (e) => this.moveHueSlider(e) });\n\n        this.addManagedListeners(this.spectrumVal, { mousedown: this.onSpectrumDraggerDown.bind(this) });\n        this.addManagedListeners(this.spectrumHue, { mousedown: this.onSpectrumHueDown.bind(this) });\n        this.addManagedListeners(this.spectrumAlpha, { mousedown: this.onSpectrumAlphaDown.bind(this) });\n\n        this.addGuiEventListener('mousemove', (e: MouseEvent) => {\n            this.onSpectrumDraggerMove(e);\n            this.onSpectrumHueMove(e);\n            this.onSpectrumAlphaMove(e);\n        });\n\n        // Listening to `mouseup` on the document on purpose. The user might release the mouse button\n        // outside the UI control. When the mouse returns back to the control's area, the dragging\n        // of the thumb is not expected and seen as a bug.\n        this.addManagedListeners(document, { mouseup: this.onMouseUp.bind(this) });\n\n        this.colorInput.onColorChanged(this.setColor.bind(this));\n\n        this.addManagedListeners(this.recentColors, {\n            click: this.onRecentColorClick.bind(this),\n            keydown: (e: KeyboardEvent) => {\n                if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onRecentColorClick(e);\n                }\n            },\n        });\n    }\n\n    private initTabIndex(): void {\n        const tabIndex = (this.tabIndex = this.gos.get('tabIndex').toString());\n\n        this.spectrumColor.setAttribute('tabindex', tabIndex);\n        this.spectrumHueSlider.setAttribute('tabindex', tabIndex);\n        this.spectrumAlphaSlider.setAttribute('tabindex', tabIndex);\n    }\n\n    private refreshSpectrumRect() {\n        return (this.spectrumValRect = this.spectrumVal.getBoundingClientRect());\n    }\n\n    private refreshHueRect() {\n        return (this.spectrumHueRect = this.spectrumHue.getBoundingClientRect());\n    }\n\n    private refreshAlphaRect() {\n        return (this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect());\n    }\n\n    private onSpectrumDraggerDown(e: MouseEvent) {\n        this.refreshSpectrumRect();\n        this.isSpectrumDragging = true;\n\n        this.moveDragger(e);\n    }\n\n    private onSpectrumDraggerMove(e: MouseEvent) {\n        if (this.isSpectrumDragging) {\n            this.moveDragger(e);\n        }\n    }\n\n    private onSpectrumHueDown(e: MouseEvent) {\n        this.refreshHueRect();\n        this.isSpectrumHueDragging = true;\n\n        this.moveHueSlider(e);\n    }\n\n    private onSpectrumHueMove(e: MouseEvent) {\n        if (this.isSpectrumHueDragging) {\n            this.moveHueSlider(e);\n        }\n    }\n\n    private onSpectrumAlphaDown(e: MouseEvent) {\n        this.refreshAlphaRect();\n        this.isSpectrumAlphaDragging = true;\n\n        this.moveAlphaSlider(e);\n    }\n\n    private onSpectrumAlphaMove(e: MouseEvent) {\n        if (this.isSpectrumAlphaDragging) {\n            this.moveAlphaSlider(e);\n        }\n    }\n\n    private onMouseUp() {\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n    }\n\n    private moveDragger(e: MouseEvent | KeyboardEvent) {\n        const valRect = this.spectrumValRect;\n        if (!valRect) {\n            return;\n        }\n\n        let x: number;\n        let y: number;\n\n        if (e instanceof MouseEvent) {\n            x = e.clientX - valRect.left;\n            y = e.clientY - valRect.top;\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            const isUp = e.key === KeyCode.UP;\n            const isDown = e.key === KeyCode.DOWN;\n            const isVertical = isUp || isDown;\n            const isHorizontal = isLeft || isRight;\n\n            if (!isVertical && !isHorizontal) {\n                return;\n            }\n            e.preventDefault();\n\n            const { x: currentX, y: currentY } = this.getSpectrumValue();\n            x = currentX + (isHorizontal ? (isLeft ? -5 : 5) : 0);\n            y = currentY + (isVertical ? (isUp ? -5 : 5) : 0);\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, valRect.width);\n        y = Math.max(y, 0);\n        y = Math.min(y, valRect.height);\n\n        this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);\n    }\n\n    private moveHueSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumHueRect;\n\n        if (!rect) {\n            return;\n        }\n\n        const x = this.moveSlider(this.spectrumHueSlider, e);\n\n        if (x == null) {\n            return;\n        }\n\n        this.H = 1 - x / rect.width;\n        this.update();\n    }\n\n    private moveAlphaSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumAlphaRect;\n\n        if (!rect) {\n            return;\n        }\n\n        const x = this.moveSlider(this.spectrumAlphaSlider, e);\n\n        if (x == null) {\n            return;\n        }\n\n        this.A = x / rect.width;\n        this.update();\n    }\n\n    private moveSlider(slider: HTMLElement, e: MouseEvent | KeyboardEvent): number | null {\n        const sliderRect = slider.getBoundingClientRect();\n        const parentRect = slider.parentElement?.getBoundingClientRect();\n\n        if (!slider || !parentRect) {\n            return null;\n        }\n\n        const offset = sliderRect.width / 2;\n\n        let x: number;\n        if (e instanceof MouseEvent) {\n            x = Math.floor(e.clientX - parentRect.left);\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            if (!isLeft && !isRight) {\n                return null;\n            }\n            e.preventDefault();\n            const diff = isLeft ? -5 : 5;\n            x = parseFloat(slider.style.left) + offset + diff;\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, parentRect.width);\n\n        slider.style.left = x - offset + 'px';\n\n        return x;\n    }\n\n    private update(suppressColorInputUpdate?: boolean) {\n        const hue = this.H * 360;\n        const color = _Util.Color.fromHSB(hue, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n        const colorWithoutAlpha = _Util.Color.fromHSB(hue, this.S, this.B);\n        const rgbaColorWithoutAlpha = colorWithoutAlpha.toRgbaString();\n        const spectrumColor = _Util.Color.fromHSB(hue, 1, 1);\n        const spectrumRgbaColor = spectrumColor.toRgbaString();\n\n        // the recent color list needs to know color has actually changed\n        const colorPicker = this.picker as AgColorPicker;\n\n        const existingColor = _Util.Color.fromString(colorPicker.getValue());\n        if (existingColor.toRgbaString() !== rgbaColor) {\n            this.colorChanged = true;\n        }\n\n        colorPicker.setValue(rgbaColor);\n\n        this.spectrumColor.style.backgroundColor = spectrumRgbaColor;\n        this.spectrumDragger.style.backgroundColor = rgbaColorWithoutAlpha;\n\n        this.spectrumHueSlider.style.backgroundColor = spectrumRgbaColor;\n\n        this.spectrumAlpha.style.setProperty(\n            '--ag-internal-spectrum-alpha-color-from',\n            _Util.Color.fromHSB(hue, this.S, this.B, 0).toRgbaString()\n        );\n        this.spectrumAlpha.style.setProperty('--ag-internal-spectrum-alpha-color-to', rgbaColorWithoutAlpha);\n        this.spectrumAlpha.style.setProperty('--ag-internal-spectrum-alpha-color', rgbaColor);\n\n        if (!suppressColorInputUpdate) {\n            this.colorInput.setColor(color);\n        }\n    }\n\n    /**\n     * @param saturation In the [0, 1] interval.\n     * @param brightness In the [0, 1] interval.\n     */\n    public setSpectrumValue(saturation: number, brightness: number, suppressColorInputUpdate?: boolean) {\n        const valRect = this.spectrumValRect || this.refreshSpectrumRect();\n\n        if (valRect == null) {\n            return;\n        }\n\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        saturation = Math.max(0, saturation);\n        saturation = Math.min(1, saturation);\n        brightness = Math.max(0, brightness);\n        brightness = Math.min(1, brightness);\n\n        this.S = saturation;\n        this.B = brightness;\n\n        dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + 'px';\n        dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + 'px';\n\n        this.update(suppressColorInputUpdate);\n    }\n\n    private getSpectrumValue(): { x: number; y: number } {\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        const x = parseFloat(dragger.style.left) + draggerRect.width / 2;\n        const y = parseFloat(dragger.style.top) + draggerRect.height / 2;\n\n        return { x, y };\n    }\n\n    private initRecentColors() {\n        const recentColors = AgColorPanel.recentColors;\n        const innerHtml = recentColors.map((color: string, index: number) => {\n            return /* html */ `<div class=\"ag-recent-color\" id=${index} style=\"background-color: ${color}; width: 15px; height: 15px;\" recent-color=\"${color}\" tabIndex=\"${this.tabIndex}\"></div>`;\n        });\n\n        this.recentColors.innerHTML = innerHtml.join('');\n        _setDisplayed(this.recentColors, !!recentColors.length);\n    }\n\n    public setValue(val: string): void {\n        const color: _Util.Color = _Util.Color.fromString(val);\n        this.setColor(color, true);\n    }\n\n    private setColor(color: _Util.Color, updateColorInput?: boolean): void {\n        const [h, s, b] = color.toHSB();\n\n        this.H = (isNaN(h) ? 0 : h) / 360;\n        this.A = color.a;\n\n        const spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();\n        const spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();\n\n        this.spectrumHueSlider.style.left = `${(this.H - 1) * -spectrumHueRect.width - this.spectrumHueSlider.getBoundingClientRect().width / 2}px`;\n        this.spectrumAlphaSlider.style.left = `${this.A * spectrumAlphaRect.width - this.spectrumAlphaSlider.getBoundingClientRect().width / 2}px`;\n\n        this.setSpectrumValue(s, b, !updateColorInput);\n    }\n\n    private onRecentColorClick(e: MouseEvent | KeyboardEvent) {\n        const target = e.target as HTMLElement;\n\n        if (!_exists(target.id)) {\n            return;\n        }\n\n        const id = parseInt(target.id, 10);\n\n        this.setValue(AgColorPanel.recentColors[id]);\n        this.destroy();\n    }\n\n    private addRecentColor() {\n        const color = _Util.Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n\n        let recentColors = AgColorPanel.recentColors;\n\n        if (!this.colorChanged || recentColors[0] === rgbaColor) {\n            return;\n        }\n\n        // remove duplicate color\n        recentColors = recentColors.filter((currentColor) => currentColor != rgbaColor);\n\n        // add color to head\n        recentColors = [rgbaColor].concat(recentColors);\n\n        // ensure we don't exceed max number of recent colors\n        if (recentColors.length > AgColorPanel.maxRecentColors) {\n            recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);\n        }\n\n        AgColorPanel.recentColors = recentColors;\n    }\n\n    public override destroy(): void {\n        this.addRecentColor();\n        super.destroy();\n    }\n}\n", "import type { AgInputTextFieldParams, BeanCollection, ComponentSelector } from '@ag-grid-community/core';\nimport { AgInputTextField, RefPlaceholder } from '@ag-grid-community/core';\nimport { _Util } from 'ag-charts-community';\n\nimport type { ChartTranslationService } from '../charts/chartComp/services/chartTranslationService';\n\nexport type AgColorInputEvent = 'colorChanged';\nexport class AgColorInput extends AgInputTextField<AgInputTextFieldParams, AgColorInputEvent> {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly eColor: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super({\n            template: /* html */ `\n            <div role=\"presentation\" class=\"ag-color-input\">\n                <div data-ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div data-ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <input data-ref=\"eInput\" class=\"ag-input-field-input\">\n                    <div data-ref=\"eColor\" class=\"ag-color-input-color\"></div>\n                </div>\n            </div>`,\n        });\n    }\n\n    public setColor(color: _Util.Color): void {\n        const rgbaColor = color.toRgbaString();\n        this.setValue(_Util.Color.fromString(rgbaColor).toHexString().toUpperCase(), true);\n        this.eColor.style.backgroundColor = rgbaColor;\n    }\n\n    public override setValue(value?: string | null | undefined, silent?: boolean | undefined): this {\n        const isValid = _Util.Color.validColorString(value ?? '');\n        this.eInput.setCustomValidity(isValid ? '' : this.chartTranslationService.translate('invalidColor'));\n        super.setValue(value, silent);\n        if (isValid && !silent) {\n            this.dispatchLocalEvent({ type: 'colorChanged' });\n        }\n        return this;\n    }\n\n    public onColorChanged(callback: (color: _Util.Color) => void): void {\n        this.addManagedListeners(this, { colorChanged: () => callback(_Util.Color.fromString(this.value!)) });\n    }\n}\n\nexport const AgColorInputSelector: ComponentSelector = {\n    selector: 'AG-COLOR-INPUT',\n    component: AgColorInput,\n};\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckboxSelector, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class NavigatorPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const navigatorGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'navigator.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('navigator'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const navigatorHeightSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\n            'navigator.height',\n            'height',\n            60\n        );\n        navigatorHeightSliderParams.minValue = 10;\n        const navigatorMiniChartCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'navigator.miniChart.enabled',\n            'miniChart'\n        );\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"navigatorGroup\">\n                <ag-slider data-ref=\"navigatorHeightSlider\"></ag-slider>\n                <ag-checkbox data-ref=\"navigatorMiniChartCheckbox\"></ag-checkbox>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector, AgCheckboxSelector],\n            {\n                navigatorGroup: navigatorGroupParams,\n                navigatorHeightSlider: navigatorHeightSliderParams,\n                navigatorMiniChartCheckbox: navigatorMiniChartCheckboxParams,\n            }\n        );\n    }\n}\n", "import type { AgInputNumberField, AgLabelParams, ComponentSelector, LabelAlignment } from '@ag-grid-community/core';\nimport { AgAbstractLabel, AgInputNumberFieldSelector, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { AgInputRange } from './agInputRange';\nimport { AgInputRangeSelector } from './agInputRange';\n\nexport interface AgSliderParams extends AgLabelParams {\n    minValue?: number;\n    maxValue?: number;\n    textFieldWidth?: number;\n    step?: number;\n    value?: string;\n    onValueChange?: (newValue: number) => void;\n}\n\nexport type AgSliderEvent = 'fieldValueChanged';\nexport class AgSlider extends AgAbstractLabel<AgSliderParams, AgSliderEvent> {\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly eSlider: AgInputRange = RefPlaceholder;\n    private readonly eText: AgInputNumberField = RefPlaceholder;\n\n    protected override labelAlignment: LabelAlignment = 'top';\n\n    constructor(config?: AgSliderParams) {\n        super(\n            config,\n            /* html */ `<div class=\"ag-slider\">\n            <label data-ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range data-ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field data-ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>`,\n            [AgInputRangeSelector, AgInputNumberFieldSelector]\n        );\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n        this.eSlider.addCssClass('ag-slider-field');\n        const { minValue, maxValue, textFieldWidth, step, value, onValueChange } = this.config;\n        if (minValue != null) {\n            this.setMinValue(minValue);\n        }\n        if (maxValue != null) {\n            this.setMaxValue(maxValue);\n        }\n        if (textFieldWidth != null) {\n            this.setTextFieldWidth(textFieldWidth);\n        }\n        if (step != null) {\n            this.setStep(step);\n        }\n        if (value != null) {\n            this.setValue(value);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void) {\n        this.addManagedListeners(this.eText, {\n            fieldValueChanged: () => {\n                const textValue = parseFloat(this.eText.getValue()!);\n                this.eSlider.setValue(textValue.toString(), true);\n                callbackFn(textValue || 0);\n            },\n        });\n\n        this.addManagedListeners(this.eSlider, {\n            fieldValueChanged: () => {\n                const sliderValue = this.eSlider.getValue()!;\n                this.eText.setValue(sliderValue, true);\n                callbackFn(parseFloat(sliderValue));\n            },\n        });\n\n        return this;\n    }\n\n    public setSliderWidth(width: number): this {\n        this.eSlider.setWidth(width);\n        return this;\n    }\n\n    public setTextFieldWidth(width: number): this {\n        this.eText.setWidth(width);\n        return this;\n    }\n\n    public setMinValue(minValue: number): this {\n        this.eSlider.setMinValue(minValue);\n        this.eText.setMin(minValue);\n\n        return this;\n    }\n\n    public setMaxValue(maxValue: number): this {\n        this.eSlider.setMaxValue(maxValue);\n        this.eText.setMax(maxValue);\n        return this;\n    }\n\n    public getValue(): string | null | undefined {\n        return this.eText.getValue();\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        if (this.getValue() === value) {\n            return this;\n        }\n\n        this.eText.setValue(value, true);\n        this.eSlider.setValue(value, true);\n\n        if (!silent) {\n            this.dispatchLocalEvent({ type: 'fieldValueChanged' });\n        }\n\n        return this;\n    }\n\n    public setStep(step: number): this {\n        this.eSlider.setStep(step);\n        this.eText.setStep(step);\n        return this;\n    }\n}\n\nexport const AgSliderSelector: ComponentSelector = {\n    selector: 'AG-SLIDER',\n    component: AgSlider,\n};\n", "import type { AgInputFieldParams, ComponentSelector } from '@ag-grid-community/core';\nimport { AgAbstractInputField } from '@ag-grid-community/core';\n\ninterface IInputRange extends AgInputFieldParams {\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\nexport class AgInputRange extends AgAbstractInputField<HTMLInputElement, string, IInputRange> {\n    private min: number;\n    private max: number;\n\n    constructor(config?: IInputRange) {\n        super(config, 'ag-range-field', 'range');\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        const { min, max, step } = this.config;\n\n        if (min != null) {\n            this.setMinValue(min);\n        }\n\n        if (max != null) {\n            this.setMaxValue(max);\n        }\n\n        this.setStep(step || 1);\n    }\n\n    protected override addInputListeners() {\n        this.addManagedElementListeners(this.eInput, {\n            input: (e: any) => {\n                const value = e.target.value;\n\n                this.setValue(value);\n            },\n        });\n    }\n\n    public setMinValue(value: number): this {\n        this.min = value;\n\n        this.eInput.setAttribute('min', value.toString());\n\n        return this;\n    }\n\n    public setMaxValue(value: number): this {\n        this.max = value;\n\n        this.eInput.setAttribute('max', value.toString());\n\n        return this;\n    }\n\n    public setStep(value: number): this {\n        this.eInput.setAttribute('step', value.toString());\n\n        return this;\n    }\n\n    public override setValue(value: string, silent?: boolean): this {\n        if (this.min != null) {\n            value = Math.max(parseFloat(value), this.min).toString();\n        }\n\n        if (this.max != null) {\n            value = Math.min(parseFloat(value), this.max).toString();\n        }\n\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n}\n\nexport const AgInputRangeSelector: ComponentSelector = {\n    selector: 'AG-INPUT-RANGE',\n    component: AgInputRange,\n};\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckboxSelector, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { AgSlider } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ZoomPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly zoomScrollingStepInput: AgSlider = RefPlaceholder;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const zoomGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>('zoom.enabled', {\n            cssIdentifier: 'charts-advanced-settings-top-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('zoom'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n        });\n        const zoomScrollingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableScrolling',\n            'scrollingZoom'\n        );\n        const zoomScrollingStepSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\n            'zoom.scrollingStep',\n            'scrollingStep',\n            1\n        );\n        zoomScrollingStepSliderParams.step = 0.01;\n        zoomScrollingStepSliderParams.minValue = zoomScrollingStepSliderParams.step;\n        const zoomSelectingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableSelecting',\n            'selectingZoom'\n        );\n\n        // Enable/disable the scrolling step input according to whether the scrolling checkbox is checked\n        zoomScrollingCheckboxParams.onValueChange = ((onValueChange) => (value: boolean) => {\n            if (!onValueChange) return;\n            onValueChange(value);\n            this.zoomScrollingStepInput.setDisabled(!value);\n        })(zoomScrollingCheckboxParams.onValueChange);\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"zoomGroup\">\n                <ag-checkbox data-ref=\"zoomSelectingCheckbox\"></ag-checkbox>\n                <ag-checkbox data-ref=\"zoomScrollingCheckbox\"></ag-checkbox>\n                <ag-slider data-ref=\"zoomScrollingStepInput\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgCheckboxSelector, AgSliderSelector],\n            {\n                zoomGroup: zoomGroupParams,\n                zoomScrollingCheckbox: zoomScrollingCheckboxParams,\n                zoomScrollingStepInput: zoomScrollingStepSliderParams,\n                zoomSelectingCheckbox: zoomSelectingCheckboxParams,\n            }\n        );\n\n        // Set the initial state of the scrolling step input according to whether the scrolling checkbox is checked\n        this.zoomScrollingStepInput.setDisabled(!zoomScrollingCheckboxParams.value);\n    }\n}\n", "import type {\n    BeanCollection,\n    FocusService,\n    IAfterGuiAttachedParams,\n    MenuItemDef,\n    NamedBean,\n    PopupService,\n} from '@ag-grid-community/core';\nimport { BeanStub, Component, RefPlaceholder, _createIconNoSpan } from '@ag-grid-community/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../chartController';\nimport type { ChartMenuService } from '../services/chartMenuService';\nimport type { ChartTranslationService } from '../services/chartTranslationService';\nimport type { ChartMenuContext } from './chartMenuContext';\n\nexport class ChartMenuListFactory extends BeanStub implements NamedBean {\n    beanName = 'chartMenuListFactory' as const;\n\n    private popupService: PopupService;\n    private chartMenuService: ChartMenuService;\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private activeChartMenuList?: ChartMenuList;\n\n    public showMenuList(params: {\n        eventSource: HTMLElement;\n        showMenu: () => void;\n        chartMenuContext: ChartMenuContext;\n    }): void {\n        const { eventSource, showMenu, chartMenuContext } = params;\n        const areChartToolPanelsEnabled = this.chartMenuService.doChartToolPanelsExist(\n            chartMenuContext.chartController\n        );\n        const menuItems = this.mapWithStockItems(\n            this.getMenuItems(chartMenuContext.chartController, areChartToolPanelsEnabled),\n            chartMenuContext,\n            showMenu,\n            eventSource,\n            areChartToolPanelsEnabled\n        );\n        if (!menuItems.length) {\n            return;\n        }\n        const chartMenuList = this.createBean(new ChartMenuList(menuItems));\n        this.activeChartMenuList = chartMenuList;\n\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gos.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const eGui = chartMenuList.getGui();\n\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                this.destroyBean(chartMenuList);\n                this.activeChartMenuList = undefined;\n                const eDocument = this.gos.getDocument();\n                const activeEl = this.gos.getActiveDomElement();\n                if (!activeEl || activeEl === eDocument.body) {\n                    eventSource.focus({ preventScroll: true });\n                }\n            },\n            afterGuiAttached: (params) => chartMenuList.afterGuiAttached(params),\n            positionCallback: () => {\n                {\n                    this.popupService.positionPopupByComponent({\n                        type: 'chartMenu',\n                        eventSource,\n                        ePopup: eGui,\n                        alignSide,\n                        nudgeX: 4 * multiplier,\n                        nudgeY: 4,\n                        position: 'under',\n                        keepWithinBounds: true,\n                    });\n                }\n            },\n            ariaLabel: 'Chart Menu',\n        });\n    }\n\n    private getMenuItems(\n        chartController: ChartController,\n        areChartToolPanelsEnabled: boolean\n    ): (MenuItemDef | string)[] {\n        const defaultItems = [\n            ...(areChartToolPanelsEnabled ? ['chartEdit'] : []),\n            ...(chartController.isEnterprise() ? ['chartAdvancedSettings'] : []),\n            chartController.isChartLinked() ? 'chartUnlink' : 'chartLink',\n            'chartDownload',\n        ];\n        const chartMenuItems = this.gos.get('chartMenuItems');\n        if (!chartMenuItems) {\n            return defaultItems;\n        } else if (Array.isArray(chartMenuItems)) {\n            return chartMenuItems;\n        } else {\n            return chartMenuItems(\n                this.gos.addGridCommonParams({\n                    defaultItems,\n                })\n            );\n        }\n    }\n\n    private mapWithStockItems(\n        originalList: (MenuItemDef | string)[],\n        chartMenuContext: ChartMenuContext,\n        showMenu: () => void,\n        eventSource: HTMLElement,\n        areChartToolPanelsEnabled: boolean\n    ): MenuItemDef[] {\n        if (!originalList) {\n            return [];\n        }\n        const resultList: MenuItemDef[] = [];\n\n        originalList.forEach((menuItemOrString) => {\n            let result: MenuItemDef | null;\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(\n                    menuItemOrString,\n                    chartMenuContext,\n                    showMenu,\n                    eventSource,\n                    areChartToolPanelsEnabled\n                );\n            } else {\n                result = { ...menuItemOrString };\n            }\n            if (!result) {\n                return;\n            }\n\n            const { subMenu } = result;\n            if (Array.isArray(subMenu)) {\n                result.subMenu = this.mapWithStockItems(\n                    subMenu,\n                    chartMenuContext,\n                    showMenu,\n                    eventSource,\n                    areChartToolPanelsEnabled\n                );\n            }\n\n            resultList.push(result);\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(\n        key: string,\n        chartMenuContext: ChartMenuContext,\n        showMenu: () => void,\n        eventSource: HTMLElement,\n        areChartToolPanelsEnabled: boolean\n    ): MenuItemDef | null {\n        switch (key) {\n            case 'chartEdit':\n                return areChartToolPanelsEnabled\n                    ? this.createMenuItem(\n                          this.chartTranslationService.translate('chartEdit'),\n                          'chartsMenuEdit',\n                          showMenu\n                      )\n                    : null;\n            case 'chartAdvancedSettings':\n                return this.createMenuItem(\n                    this.chartTranslationService.translate('chartAdvancedSettings'),\n                    'chartsMenuAdvancedSettings',\n                    () => this.chartMenuService.openAdvancedSettings(chartMenuContext, eventSource)\n                );\n            case 'chartUnlink':\n                return chartMenuContext.chartController.isChartLinked()\n                    ? this.createMenuItem(this.chartTranslationService.translate('chartUnlink'), 'unlinked', () =>\n                          this.chartMenuService.toggleLinked(chartMenuContext)\n                      )\n                    : null;\n            case 'chartLink':\n                return !chartMenuContext.chartController.isChartLinked()\n                    ? this.createMenuItem(this.chartTranslationService.translate('chartLink'), 'linked', () =>\n                          this.chartMenuService.toggleLinked(chartMenuContext)\n                      )\n                    : null;\n            case 'chartDownload':\n                return this.createMenuItem(this.chartTranslationService.translate('chartDownload'), 'save', () =>\n                    this.chartMenuService.downloadChart(chartMenuContext)\n                );\n        }\n        return null;\n    }\n\n    private createMenuItem(name: string, iconName: string, action: () => void): MenuItemDef {\n        return {\n            name,\n            icon: _createIconNoSpan(iconName, this.gos, null),\n            action,\n        };\n    }\n\n    public override destroy(): void {\n        this.destroyBean(this.activeChartMenuList);\n        super.destroy();\n    }\n}\n\nclass ChartMenuList extends Component {\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n    }\n\n    private readonly eChartsMenu: HTMLElement = RefPlaceholder;\n\n    private hidePopupFunc: () => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(private readonly menuItems: (MenuItemDef | string)[]) {\n        super(/* html */ `\n            <div data-ref=\"eChartsMenu\" role=\"presentation\" class=\"ag-menu ag-chart-menu-popup\"></div>\n        `);\n    }\n\n    public postConstruct(): void {\n        this.mainMenuList = this.createManagedBean(new AgMenuList(0));\n        this.mainMenuList.addMenuItems(this.menuItems);\n        this.mainMenuList.addEventListener('closeMenu', this.onHidePopup.bind(this));\n        this.eChartsMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(): void {\n        this.hidePopupFunc?.();\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    FilterManager,\n    IClientSideRowModel,\n    NamedBean,\n    RowNode,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _includes, _warnOnce } from '@ag-grid-community/core';\n\nexport class ChartCrossFilterService extends BeanStub implements NamedBean {\n    beanName = 'chartCrossFilterService' as const;\n\n    private columnModel: ColumnModel;\n    private valueService: ValueService;\n    private filterManager?: FilterManager;\n    private clientSideRowModel?: IClientSideRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.valueService = beans.valueService;\n        this.filterManager = beans.filterManager;\n        if (beans.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = beans.rowModel as IClientSideRowModel;\n        }\n    }\n\n    public filter(event: any, reset: boolean = false): void {\n        const filterModel = this.filterManager?.getFilterModel() ?? {};\n\n        // filters should be reset when user clicks on canvas background\n        if (reset) {\n            this.resetFilters(filterModel);\n            return;\n        }\n\n        const colId = ChartCrossFilterService.extractFilterColId(event);\n        if (this.isValidColumnFilter(colId)) {\n            // update filters based on current chart selections\n            this.updateFilters(filterModel, event, colId);\n        } else {\n            _warnOnce(\n                \"cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' \" +\n                    \"to be defined on the column with id: '\" +\n                    colId +\n                    \"'\"\n            );\n        }\n    }\n\n    private resetFilters(filterModel: any) {\n        const filtersExist = Object.keys(filterModel).length > 0;\n        if (filtersExist) {\n            // only reset filters / charts when necessary to prevent undesirable flickering effect\n            this.filterManager?.setFilterModel(null);\n            this.filterManager?.onFilterChanged({ source: 'api' });\n        }\n    }\n\n    private updateFilters(filterModel: any, event: any, colId: string) {\n        const dataKey = ChartCrossFilterService.extractFilterColId(event);\n        const rawValue = event.datum[dataKey];\n        if (rawValue === undefined) {\n            return;\n        }\n\n        const selectedValue = rawValue.toString();\n\n        if (event.event.metaKey || event.event.ctrlKey) {\n            const existingGridValues = this.getCurrentGridValuesForCategory(colId);\n            const valueAlreadyExists = _includes(existingGridValues, selectedValue);\n\n            let updatedValues;\n            if (valueAlreadyExists) {\n                updatedValues = existingGridValues.filter((v: any) => v !== selectedValue);\n            } else {\n                updatedValues = existingGridValues;\n                updatedValues.push(selectedValue);\n            }\n\n            filterModel[colId] = this.getUpdatedFilterModel(colId, updatedValues);\n        } else {\n            const updatedValues = [selectedValue];\n            filterModel = { [colId]: this.getUpdatedFilterModel(colId, updatedValues) };\n        }\n\n        this.filterManager?.setFilterModel(filterModel);\n    }\n\n    private getUpdatedFilterModel(colId: any, updatedValues: any[]) {\n        const columnFilterType = this.getColumnFilterType(colId);\n        if (columnFilterType === 'agMultiColumnFilter') {\n            return { filterType: 'multi', filterModels: [null, { filterType: 'set', values: updatedValues }] };\n        }\n        return { filterType: 'set', values: updatedValues };\n    }\n\n    private getCurrentGridValuesForCategory(colId: string) {\n        const filteredValues: any[] = [];\n        const column = this.getColumnById(colId);\n        this.clientSideRowModel?.forEachNodeAfterFilter((rowNode: RowNode) => {\n            if (column && !rowNode.group) {\n                const value = this.valueService.getValue(column, rowNode) + '';\n                if (!filteredValues.includes(value)) {\n                    filteredValues.push(value);\n                }\n            }\n        });\n        return filteredValues;\n    }\n\n    private static extractFilterColId(event: any): string {\n        return event.xKey || event.calloutLabelKey;\n    }\n\n    private isValidColumnFilter(colId: any) {\n        if (colId.indexOf('-filtered-out')) {\n            colId = colId.replace('-filtered-out', '');\n        }\n\n        const filterType = this.getColumnFilterType(colId);\n        if (typeof filterType === 'boolean') {\n            return filterType;\n        }\n\n        return _includes(['agSetColumnFilter', 'agMultiColumnFilter'], filterType);\n    }\n\n    private getColumnFilterType(colId: any) {\n        const gridColumn = this.getColumnById(colId);\n        if (gridColumn) {\n            const colDef = gridColumn.getColDef();\n            return colDef.filter;\n        }\n    }\n\n    private getColumnById(colId: string) {\n        return this.columnModel.getCol(colId) as AgColumn;\n    }\n}\n", "import type {\n    BeanCollection,\n    ChartToolPanelMenuOptions,\n    ChartToolPanelName,\n    ChartToolbarMenuItemOptions,\n    GetChartToolbarItemsParams,\n    NamedBean,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ChartController } from '../chartController';\nimport type { AdvancedSettingsMenuFactory } from '../menu/advancedSettings/advancedSettingsMenuFactory';\nimport type { ChartMenuContext } from '../menu/chartMenuContext';\n\nconst CHART_TOOLBAR_ALLOW_LIST: ChartToolbarMenuItemOptions[] = [\n    'chartUnlink',\n    'chartLink',\n    'chartDownload',\n    'chartMenu',\n];\n\nexport const CHART_TOOL_PANEL_MENU_OPTIONS: { [key in ChartToolPanelName]: ChartToolPanelMenuOptions } = {\n    settings: 'chartSettings',\n    data: 'chartData',\n    format: 'chartFormat',\n};\n\nexport class ChartMenuService extends BeanStub implements NamedBean {\n    beanName = 'chartMenuService' as const;\n\n    private advancedSettingsMenuFactory: AdvancedSettingsMenuFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.advancedSettingsMenuFactory = beans.advancedSettingsMenuFactory as AdvancedSettingsMenuFactory;\n    }\n\n    public downloadChart(\n        chartMenuContext: ChartMenuContext,\n        dimensions?: { width: number; height: number },\n        fileName?: string,\n        fileFormat?: string\n    ): void {\n        chartMenuContext.chartController.getChartProxy().downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public toggleLinked(chartMenuContext: ChartMenuContext): void {\n        chartMenuContext.chartController.detachChartRange();\n    }\n\n    public openAdvancedSettings(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.advancedSettingsMenuFactory.showMenu(chartMenuContext, eventSource);\n    }\n\n    public hideAdvancedSettings(): void {\n        this.advancedSettingsMenuFactory.hideMenu();\n    }\n\n    public getChartToolbarOptions(): ChartToolbarMenuItemOptions[] {\n        const defaultChartToolbarOptions: ChartToolbarMenuItemOptions[] = ['chartMenu'];\n\n        const toolbarItemsFunc = this.gos.getCallback('getChartToolbarItems');\n        const params: WithoutGridCommon<GetChartToolbarItemsParams> = {\n            defaultItems: defaultChartToolbarOptions,\n        };\n        return toolbarItemsFunc\n            ? toolbarItemsFunc(params).filter((option) => {\n                  if (!CHART_TOOLBAR_ALLOW_LIST.includes(option)) {\n                      _warnOnce(`'${option}' is not a valid Chart Toolbar Option`);\n                      return false;\n                  }\n                  return true;\n              })\n            : defaultChartToolbarOptions;\n    }\n\n    public getChartToolPanels(chartController: ChartController): {\n        panels: ChartToolPanelMenuOptions[];\n        defaultPanel: ChartToolPanelMenuOptions;\n    } {\n        const chartToolPanelsDef = this.gos.get('chartToolPanelsDef');\n\n        const panelsOverride = chartToolPanelsDef?.panels\n            ?.map((panel) => {\n                const menuOption = CHART_TOOL_PANEL_MENU_OPTIONS[panel];\n                if (!menuOption) {\n                    _warnOnce(`Invalid panel in chartToolPanelsDef.panels: '${panel}'`);\n                }\n                return menuOption;\n            })\n            .filter((panel) => Boolean(panel));\n        let panels = panelsOverride ?? Object.values(CHART_TOOL_PANEL_MENU_OPTIONS);\n\n        // pivot charts use the column tool panel instead of the data panel\n        if (chartController.isPivotChart()) {\n            panels = panels.filter((panel) => panel !== 'chartData');\n        }\n\n        const defaultToolPanel = chartToolPanelsDef?.defaultToolPanel;\n        const defaultPanel = (defaultToolPanel && CHART_TOOL_PANEL_MENU_OPTIONS[defaultToolPanel]) || panels[0];\n\n        return {\n            panels,\n            defaultPanel,\n        };\n    }\n\n    public doesChartToolbarExist(): boolean {\n        const chartToolbarOptions = this.getChartToolbarOptions();\n        return chartToolbarOptions.length > 0;\n    }\n\n    public doChartToolPanelsExist(chartController: ChartController): boolean {\n        const { panels } = this.getChartToolPanels(chartController);\n        return panels.length > 0;\n    }\n}\n", "import type { NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nexport type ChartTranslationKey = keyof typeof ChartTranslationService.DEFAULT_TRANSLATIONS;\n\nexport class ChartTranslationService extends BeanStub implements NamedBean {\n    beanName = 'chartTranslationService' as const;\n\n    public static readonly DEFAULT_TRANSLATIONS = {\n        pivotChartTitle: 'Pivot Chart',\n        rangeChartTitle: 'Range Chart',\n        settings: 'Chart',\n        data: 'Set Up',\n        format: 'Customize',\n        categories: 'Categories',\n        defaultCategory: '(None)',\n        series: 'Series',\n        switchCategorySeries: 'Switch Category / Series',\n        categoryValues: 'Category Values',\n        seriesLabels: 'Series Labels',\n        aggregate: 'Aggregate',\n        xyValues: 'X Y Values',\n        paired: 'Paired Mode',\n        axis: 'Axis',\n        xAxis: 'Horizontal Axis',\n        yAxis: 'Vertical Axis',\n        polarAxis: 'Polar Axis',\n        radiusAxis: 'Radius Axis',\n        navigator: 'Navigator',\n        zoom: 'Zoom',\n        animation: 'Animation',\n        crosshair: 'Crosshair',\n        color: 'Color',\n        thickness: 'Thickness',\n        preferredLength: 'Preferred Length',\n        xType: 'X Type',\n        axisType: 'Axis Type',\n        automatic: 'Automatic',\n        category: 'Category',\n        number: 'Number',\n        time: 'Time',\n        timeFormat: 'Time Format',\n        autoRotate: 'Auto Rotate',\n        labelRotation: 'Rotation',\n        circle: 'Circle',\n        polygon: 'Polygon',\n        square: 'Square',\n        cross: 'Cross',\n        diamond: 'Diamond',\n        plus: 'Plus',\n        triangle: 'Triangle',\n        heart: 'Heart',\n        orientation: 'Orientation',\n        fixed: 'Fixed',\n        parallel: 'Parallel',\n        perpendicular: 'Perpendicular',\n        radiusAxisPosition: 'Position',\n        ticks: 'Ticks',\n        gridLines: 'Grid Lines',\n        width: 'Width',\n        height: 'Height',\n        length: 'Length',\n        padding: 'Padding',\n        spacing: 'Spacing',\n        chartStyle: 'Chart Style',\n        title: 'Title',\n        chartTitles: 'Titles',\n        chartTitle: 'Chart Title',\n        chartSubtitle: 'Subtitle',\n        horizontalAxisTitle: 'Horizontal Axis Title',\n        verticalAxisTitle: 'Vertical Axis Title',\n        polarAxisTitle: 'Polar Axis Title',\n        titlePlaceholder: 'Chart Title',\n        background: 'Background',\n        font: 'Font',\n        weight: 'Weight',\n        top: 'Top',\n        right: 'Right',\n        bottom: 'Bottom',\n        left: 'Left',\n        labels: 'Labels',\n        calloutLabels: 'Callout Labels',\n        sectorLabels: 'Sector Labels',\n        positionRatio: 'Position Ratio',\n        size: 'Size',\n        shape: 'Shape',\n        minSize: 'Minimum Size',\n        maxSize: 'Maximum Size',\n        legend: 'Legend',\n        position: 'Position',\n        markerSize: 'Marker Size',\n        markerStroke: 'Marker Stroke',\n        markerPadding: 'Marker Padding',\n        itemSpacing: 'Item Spacing',\n        itemPaddingX: 'Item Padding X',\n        itemPaddingY: 'Item Padding Y',\n        layoutHorizontalSpacing: 'Horizontal Spacing',\n        layoutVerticalSpacing: 'Vertical Spacing',\n        strokeWidth: 'Stroke Width',\n        offset: 'Offset',\n        offsets: 'Offsets',\n        tooltips: 'Tooltips',\n        callout: 'Callout',\n        markers: 'Markers',\n        shadow: 'Shadow',\n        blur: 'Blur',\n        xOffset: 'X Offset',\n        yOffset: 'Y Offset',\n        lineWidth: 'Line Width',\n        lineDash: 'Line Dash',\n        lineDashOffset: 'Dash Offset',\n        scrollingZoom: 'Scrolling',\n        scrollingStep: 'Scrolling Step',\n        selectingZoom: 'Selecting',\n        durationMillis: 'Duration (ms)',\n        crosshairLabel: 'Label',\n        crosshairSnap: 'Snap to Node',\n        normal: 'Normal',\n        bold: 'Bold',\n        italic: 'Italic',\n        boldItalic: 'Bold Italic',\n        predefined: 'Predefined',\n        fillOpacity: 'Fill Opacity',\n        strokeColor: 'Line Color',\n        strokeOpacity: 'Line Opacity',\n        miniChart: 'Mini-Chart',\n        histogramBinCount: 'Bin count',\n        connectorLine: 'Connector Line',\n        seriesItems: 'Series Items',\n        seriesItemType: 'Item Type',\n        seriesItemPositive: 'Positive',\n        seriesItemNegative: 'Negative',\n        seriesItemLabels: 'Item Labels',\n        columnGroup: 'Column',\n        barGroup: 'Bar',\n        pieGroup: 'Pie',\n        lineGroup: 'Line',\n        scatterGroup: 'X Y (Scatter)',\n        areaGroup: 'Area',\n        polarGroup: 'Polar',\n        statisticalGroup: 'Statistical',\n        hierarchicalGroup: 'Hierarchical',\n        specializedGroup: 'Specialized',\n        combinationGroup: 'Combination',\n        groupedColumnTooltip: 'Grouped',\n        stackedColumnTooltip: 'Stacked',\n        normalizedColumnTooltip: '100% Stacked',\n        groupedBarTooltip: 'Grouped',\n        stackedBarTooltip: 'Stacked',\n        normalizedBarTooltip: '100% Stacked',\n        pieTooltip: 'Pie',\n        donutTooltip: 'Donut',\n        lineTooltip: 'Line',\n        groupedAreaTooltip: 'Area',\n        stackedAreaTooltip: 'Stacked',\n        normalizedAreaTooltip: '100% Stacked',\n        scatterTooltip: 'Scatter',\n        bubbleTooltip: 'Bubble',\n        histogramTooltip: 'Histogram',\n        radialColumnTooltip: 'Radial Column',\n        radialBarTooltip: 'Radial Bar',\n        radarLineTooltip: 'Radar Line',\n        radarAreaTooltip: 'Radar Area',\n        nightingaleTooltip: 'Nightingale',\n        rangeBarTooltip: 'Range Bar',\n        rangeAreaTooltip: 'Range Area',\n        boxPlotTooltip: 'Box Plot',\n        treemapTooltip: 'Treemap',\n        sunburstTooltip: 'Sunburst',\n        waterfallTooltip: 'Waterfall',\n        heatmapTooltip: 'Heatmap',\n        columnLineComboTooltip: 'Column & Line',\n        areaColumnComboTooltip: 'Area & Column',\n        customComboTooltip: 'Custom Combination',\n        innerRadius: 'Inner Radius',\n        startAngle: 'Start Angle',\n        endAngle: 'End Angle',\n        reverseDirection: 'Reverse Direction',\n        groupPadding: 'Group Padding',\n        seriesPadding: 'Series Padding',\n        tile: 'Tile',\n        whisker: 'Whisker',\n        cap: 'Cap',\n        capLengthRatio: 'Length Ratio',\n        labelPlacement: 'Placement',\n        inside: 'Inside',\n        outside: 'Outside',\n        noDataToChart: 'No data available to be charted.',\n        pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',\n        chartSettingsToolbarTooltip: 'Menu',\n        chartLinkToolbarTooltip: 'Linked to Grid',\n        chartUnlinkToolbarTooltip: 'Unlinked from Grid',\n        chartDownloadToolbarTooltip: 'Download Chart',\n        chartMenuToolbarTooltip: 'Menu',\n        chartEdit: 'Edit Chart',\n        chartAdvancedSettings: 'Advanced Settings',\n        chartLink: 'Link to Grid',\n        chartUnlink: 'Unlink from Grid',\n        chartDownload: 'Download Chart',\n        histogramFrequency: 'Frequency',\n        seriesChartType: 'Series Chart Type',\n        seriesType: 'Series Type',\n        secondaryAxis: 'Secondary Axis',\n        seriesAdd: 'Add a series',\n        categoryAdd: 'Add a category',\n        bar: 'Bar',\n        column: 'Column',\n        histogram: 'Histogram',\n        advancedSettings: 'Advanced Settings',\n        direction: 'Direction',\n        horizontal: 'Horizontal',\n        vertical: 'Vertical',\n        seriesGroupType: 'Group Type',\n        groupedSeriesGroupType: 'Grouped',\n        stackedSeriesGroupType: 'Stacked',\n        normalizedSeriesGroupType: '100% Stacked',\n        legendEnabled: 'Enabled',\n        invalidColor: 'Color value is invalid',\n        groupedColumnFull: 'Grouped Column',\n        stackedColumnFull: 'Stacked Column',\n        normalizedColumnFull: '100% Stacked Column',\n        groupedBarFull: 'Grouped Bar',\n        stackedBarFull: 'Stacked Bar',\n        normalizedBarFull: '100% Stacked Bar',\n        stackedAreaFull: 'Stacked Area',\n        normalizedAreaFull: '100% Stacked Area',\n        customCombo: 'Custom Combination',\n\n        // menu items\n        groupedColumn: 'Grouped',\n        stackedColumn: 'Stacked',\n        pie: 'Pie',\n        donut: 'Donut',\n        line: 'Line',\n        scatter: 'Scatter',\n        bubble: 'Bubble',\n        area: 'Area',\n        stackedArea: 'Stacked',\n        radarLine: 'Radar Line',\n        radarArea: 'Radar Area',\n        nightingale: 'Nightingale',\n        radialColumn: 'Radial Column',\n        radialBar: 'Radial Bar',\n        boxPlot: 'Box Plot',\n        rangeBar: 'Range Bar',\n        rangeArea: 'Range Area',\n        treemap: 'Treemap',\n        sunburst: 'Sunburst',\n        waterfall: 'Waterfall',\n        heatmap: 'Heatmap',\n        columnLineCombo: 'Column & Line',\n        AreaColumnCombo: 'Area & Column',\n\n        // aria\n        ariaChartMenuClose: 'Close Chart Edit Menu',\n        ariaChartSelected: 'Selected',\n\n        // group\n        group: 'Group',\n\n        // time formats\n        timeFormatSlashesDDMMYYYY: 'DD/MM/YYYY',\n        timeFormatSlashesMMDDYYYY: 'MM/DD/YYYY',\n        timeFormatSlashesDDMMYY: 'DD/MM/YY',\n        timeFormatSlashesMMDDYY: 'MM/DD/YY',\n        timeFormatDotsDDMYY: 'DD.M.YY',\n        timeFormatDotsMDDYY: 'M.DD.YY',\n        timeFormatDashesYYYYMMDD: 'YYYY-MM-DD',\n        timeFormatSpacesDDMMMMYYYY: 'DD MMMM YYYY',\n        timeFormatHHMMSS: 'HH:MM:SS',\n        timeFormatHHMMSSAmPm: 'HH:MM:SS AM/PM',\n\n        // agg funcs\n        sum: 'Sum',\n        first: 'First',\n        last: 'Last',\n        min: 'Min',\n        max: 'Max',\n        count: 'Count',\n        avg: 'Average',\n    };\n\n    public translate(toTranslate: ChartTranslationKey): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const defaultTranslation = ChartTranslationService.DEFAULT_TRANSLATIONS[toTranslate];\n        return translate(toTranslate, defaultTranslation);\n    }\n}\n", "import type {\n    BaseCreateChartParams,\n    BeanCollection,\n    CellRangeParams,\n    ChartDownloadParams,\n    ChartModel,\n    ChartParamsCellRange,\n    ChartRef,\n    ChartType,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    Environment,\n    FocusService,\n    GetChartImageDataUrlParams,\n    IAggFunc,\n    IChartService,\n    IRangeService,\n    NamedBean,\n    OpenChartToolPanelParams,\n    PartialCellRange,\n    SeriesChartType,\n    SeriesGroupType,\n    UpdateChartParams,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides, AgChartThemePalette } from 'ag-charts-community';\nimport { VERSION as CHARTS_VERSION, _ModuleSupport } from 'ag-charts-community';\n\nimport { VERSION as GRID_VERSION } from '../version';\nimport type { GridChartParams } from './chartComp/gridChartComp';\nimport { GridChartComp } from './chartComp/gridChartComp';\nimport { ChartParamsValidator } from './chartComp/utils/chartParamsValidator';\nimport { getCanonicalChartType } from './chartComp/utils/seriesTypeMapper';\nimport { upgradeChartModel } from './chartModelMigration';\n\nexport interface CrossFilteringContext {\n    lastSelectedChartId: string;\n}\n\nexport interface CommonCreateChartParams extends BaseCreateChartParams {\n    cellRange: PartialCellRange;\n    pivotChart?: boolean;\n    suppressChartRanges?: boolean;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    crossFiltering?: boolean;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes?: SeriesChartType[];\n    seriesGroupType?: SeriesGroupType;\n    focusDialogOnOpen?: boolean;\n}\n\nexport class ChartService extends BeanStub implements NamedBean, IChartService {\n    beanName = 'chartService' as const;\n\n    private visibleColsService: VisibleColsService;\n    private rangeService?: IRangeService;\n    private environment: Environment;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.visibleColsService = beans.visibleColsService;\n        this.rangeService = beans.rangeService;\n        this.environment = beans.environment;\n        this.focusService = beans.focusService;\n    }\n\n    public static CHARTS_VERSION = CHARTS_VERSION;\n\n    // we destroy all charts bound to this grid when grid is destroyed. activeCharts contains all charts, including\n    // those in developer provided containers.\n    private activeCharts = new Set<ChartRef>();\n    private activeChartComps = new Set<GridChartComp>();\n\n    // this shared (singleton) context is used by cross filtering in line and area charts\n    private crossFilteringContext: CrossFilteringContext = {\n        lastSelectedChartId: '',\n    };\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    public updateChart(params: UpdateChartParams): void {\n        if (this.activeChartComps.size === 0) {\n            _warnOnce(`No active charts to update.`);\n            return;\n        }\n\n        const chartComp = [...this.activeChartComps].find((chartComp) => chartComp.getChartId() === params.chartId);\n        if (!chartComp) {\n            _warnOnce(`Unable to update chart. No active chart found with ID: ${params.chartId}.`);\n            return;\n        }\n\n        chartComp.update(params);\n    }\n\n    public getChartModels(): ChartModel[] {\n        const models: ChartModel[] = [];\n\n        const versionedModel = (c: ChartModel) => {\n            return { ...c, version: GRID_VERSION };\n        };\n        this.activeChartComps.forEach((c) => models.push(versionedModel(c.getChartModel())));\n\n        return models;\n    }\n\n    public getChartRef(chartId: string): ChartRef | undefined {\n        let chartRef;\n        this.activeCharts.forEach((cr) => {\n            if (cr.chartId === chartId) {\n                chartRef = cr;\n            }\n        });\n        return chartRef;\n    }\n\n    public getChartComp(chartId: string): GridChartComp | undefined {\n        let chartComp;\n        this.activeChartComps.forEach((comp) => {\n            if (comp.getChartId() === chartId) {\n                chartComp = comp;\n            }\n        });\n        return chartComp;\n    }\n\n    public getChartImageDataURL(params: GetChartImageDataUrlParams): string | undefined {\n        let url: any;\n        this.activeChartComps.forEach((c) => {\n            if (c.getChartId() === params.chartId) {\n                url = c.getChartImageDataURL(params.fileFormat);\n            }\n        });\n        return url;\n    }\n\n    public downloadChart(params: ChartDownloadParams) {\n        const chartComp = Array.from(this.activeChartComps).find((c) => c.getChartId() === params.chartId);\n        chartComp?.downloadChart(params.dimensions, params.fileName, params.fileFormat);\n    }\n\n    public openChartToolPanel(params: OpenChartToolPanelParams) {\n        const chartComp = Array.from(this.activeChartComps).find((c) => c.getChartId() === params.chartId);\n        chartComp?.openChartToolPanel(params.panel);\n    }\n\n    public closeChartToolPanel(chartId: string) {\n        const chartComp = Array.from(this.activeChartComps).find((c) => c.getChartId() === chartId);\n        chartComp?.closeChartToolPanel();\n    }\n\n    public createChartFromCurrentRange(\n        chartType: ChartType = 'groupedColumn',\n        fromApi?: boolean\n    ): ChartRef | undefined {\n        const cellRange: PartialCellRange = this.getSelectedRange();\n        return this.createChart({ cellRange, chartType, focusDialogOnOpen: !fromApi });\n    }\n\n    public restoreChart(model: ChartModel, chartContainer?: HTMLElement): ChartRef | undefined {\n        if (!model) {\n            _warnOnce('unable to restore chart as no chart model is provided');\n            return;\n        }\n\n        if (model.version !== GRID_VERSION) {\n            model = upgradeChartModel(model);\n        }\n\n        let cellRange: PartialCellRange | undefined;\n        let pivotChart: true | undefined;\n        let suppressChartRanges: boolean | undefined;\n        let chartPaletteToRestore: AgChartThemePalette | undefined;\n\n        if (model.modelType === 'pivot') {\n            // if required enter pivot mode\n            this.gos.updateGridOptions({ options: { pivotMode: true }, source: 'pivotChart' as any });\n\n            cellRange = this.createCellRange(undefined, true);\n            pivotChart = true;\n            suppressChartRanges = true;\n        } else {\n            cellRange = this.createCellRange(model.cellRange);\n            chartPaletteToRestore = model.chartPalette;\n            suppressChartRanges = model.suppressChartRanges;\n        }\n\n        if (!cellRange) {\n            return;\n        }\n\n        return this.createChart({\n            ...model,\n            cellRange,\n            pivotChart,\n            suppressChartRanges,\n            chartContainer,\n            chartOptionsToRestore: model.chartOptions,\n            chartPaletteToRestore,\n        });\n    }\n\n    public createRangeChart(params: CreateRangeChartParams, fromApi?: boolean): ChartRef | undefined {\n        const cellRange = this.createCellRange(params.cellRange);\n\n        if (!cellRange) {\n            return;\n        }\n\n        return this.createChart({\n            ...params,\n            cellRange,\n            focusDialogOnOpen: !fromApi,\n        });\n    }\n\n    public createPivotChart(params: CreatePivotChartParams, fromApi?: boolean): ChartRef | undefined {\n        // if required enter pivot mode\n        this.gos.updateGridOptions({ options: { pivotMode: true }, source: 'pivotChart' as any });\n\n        const cellRange = this.createCellRange(undefined, true);\n\n        if (!cellRange) {\n            return;\n        }\n\n        return this.createChart({\n            ...params,\n            cellRange,\n            pivotChart: true,\n            suppressChartRanges: true,\n            focusDialogOnOpen: !fromApi,\n        });\n    }\n\n    public createCrossFilterChart(params: CreateCrossFilterChartParams, fromApi?: boolean): ChartRef | undefined {\n        const cellRange = this.createCellRange(params.cellRange);\n\n        if (!cellRange) {\n            return;\n        }\n\n        const suppressChartRangesSupplied =\n            typeof params.suppressChartRanges !== 'undefined' && params.suppressChartRanges !== null;\n        const suppressChartRanges = suppressChartRangesSupplied ? params.suppressChartRanges : true;\n\n        return this.createChart({\n            ...params,\n            cellRange,\n            suppressChartRanges,\n            crossFiltering: true,\n            focusDialogOnOpen: !fromApi,\n        });\n    }\n\n    private createChart(params: CommonCreateChartParams): ChartRef | undefined {\n        const validationResult = ChartParamsValidator.validateCreateParams(params);\n        if (!validationResult) {\n            return undefined;\n        }\n        params = validationResult === true ? params : validationResult;\n\n        const { chartType, chartContainer } = params;\n\n        const createChartContainerFunc = this.gos.getCallback('createChartContainer');\n\n        const gridChartParams: GridChartParams = {\n            ...params,\n            chartId: this.generateId(),\n            chartType: getCanonicalChartType(chartType),\n            insideDialog: !(chartContainer || createChartContainerFunc),\n            crossFilteringContext: this.crossFilteringContext,\n            crossFilteringResetCallback: () => this.activeChartComps.forEach((c) => c.crossFilteringReset()),\n        };\n\n        const chartComp = new GridChartComp(gridChartParams);\n        this.createBean(chartComp);\n\n        const chartRef = this.createChartRef(chartComp);\n\n        if (chartContainer) {\n            // if container exists, means developer initiated chart create via API, so place in provided container\n            chartContainer.appendChild(chartComp.getGui());\n\n            // if the chart container was placed outside an element that\n            // has the grid's theme, we manually add the current theme to\n            // make sure all styles for the chartMenu are rendered correctly\n            const themeEl = this.environment.getThemeAncestorElement();\n\n            if (themeEl && !themeEl.contains(chartContainer)) {\n                this.environment.applyThemeClasses(chartContainer);\n            }\n        } else if (createChartContainerFunc) {\n            // otherwise, user created chart via grid UI, check if developer provides containers (e.g. if the application\n            // is using its own dialogs rather than the grid provided dialogs)\n            createChartContainerFunc(chartRef);\n        } else {\n            // add listener to remove from active charts list when charts are destroyed, e.g. closing chart dialog\n            chartComp.addEventListener('destroyed', () => {\n                this.activeChartComps.delete(chartComp);\n                this.activeCharts.delete(chartRef);\n            });\n        }\n\n        return chartRef;\n    }\n\n    private createChartRef(chartComp: GridChartComp): ChartRef {\n        const chartRef: ChartRef = {\n            destroyChart: () => {\n                if (this.activeCharts.has(chartRef)) {\n                    this.destroyBean(chartComp);\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                }\n            },\n            focusChart: () => {\n                this.focusService.focusInto(chartComp.getGui());\n            },\n            chartElement: chartComp.getGui(),\n            chart: chartComp.getUnderlyingChart(),\n            chartId: chartComp.getChartModel().chartId,\n        };\n\n        this.activeCharts.add(chartRef);\n        this.activeChartComps.add(chartComp);\n\n        return chartRef;\n    }\n\n    private getSelectedRange(): PartialCellRange {\n        const ranges = this.rangeService?.getCellRanges() ?? [];\n        return ranges.length > 0 ? ranges[0] : { columns: [] };\n    }\n\n    private generateId(): string {\n        return `id-${Math.random().toString(36).substring(2, 18)}`;\n    }\n\n    private createCellRange(cellRangeParams?: ChartParamsCellRange, allRange?: boolean): PartialCellRange | undefined {\n        const rangeParams = allRange\n            ? {\n                  rowStartIndex: null,\n                  rowStartPinned: undefined,\n                  rowEndIndex: null,\n                  rowEndPinned: undefined,\n                  columns: this.visibleColsService.getAllCols().map((col) => col.getColId()),\n              }\n            : cellRangeParams;\n        const cellRange =\n            rangeParams &&\n            this.rangeService?.createPartialCellRangeFromRangeParams(rangeParams as CellRangeParams, true);\n        if (!cellRange) {\n            _warnOnce(\n                `unable to create chart as ${allRange ? 'there are no columns in the grid' : 'no range is selected'}.`\n            );\n        }\n        return cellRange;\n    }\n\n    public override destroy(): void {\n        this.activeCharts.forEach((chart) => chart.destroyChart());\n        super.destroy();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type {\n    BeanCollection,\n    ChartCreatedEvent,\n    ChartDestroyedEvent,\n    ChartModel,\n    ChartToolPanelName,\n    ChartType,\n    FocusService,\n    IAggFunc,\n    PartialCellRange,\n    PopupService,\n    SeriesChartType,\n    UpdateChartParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    RefPlaceholder,\n    _clearElement,\n    _getAbsoluteHeight,\n    _getAbsoluteWidth,\n    _includes,\n    _removeFromParent,\n    _setDisplayed,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport { AgDialog } from '@ag-grid-enterprise/core';\nimport type { AgChartInstance, AgChartThemeOverrides, AgChartThemePalette } from 'ag-charts-community';\n\nimport type { CrossFilteringContext } from '../chartService';\nimport { ChartController, DEFAULT_THEMES } from './chartController';\nimport { AreaChartProxy } from './chartProxies/cartesian/areaChartProxy';\nimport { BarChartProxy } from './chartProxies/cartesian/barChartProxy';\nimport { HistogramChartProxy } from './chartProxies/cartesian/histogramChartProxy';\nimport { LineChartProxy } from './chartProxies/cartesian/lineChartProxy';\nimport { ScatterChartProxy } from './chartProxies/cartesian/scatterChartProxy';\nimport { WaterfallChartProxy } from './chartProxies/cartesian/waterfallChartProxy';\nimport type { ChartProxy, ChartProxyParams } from './chartProxies/chartProxy';\nimport { ComboChartProxy } from './chartProxies/combo/comboChartProxy';\nimport { HierarchicalChartProxy } from './chartProxies/hierarchical/hierarchicalChartProxy';\nimport { PieChartProxy } from './chartProxies/pie/pieChartProxy';\nimport { PolarChartProxy } from './chartProxies/polar/polarChartProxy';\nimport { HeatmapChartProxy } from './chartProxies/specialized/heatmapChartProxy';\nimport { BoxPlotChartProxy } from './chartProxies/statistical/boxPlotChartProxy';\nimport { RangeChartProxy } from './chartProxies/statistical/rangeChartProxy';\nimport { ChartMenu } from './menu/chartMenu';\nimport type { ChartMenuContext } from './menu/chartMenuContext';\nimport { ChartMenuParamsFactory } from './menu/chartMenuParamsFactory';\nimport type { ChartModelParams } from './model/chartDataModel';\nimport { ChartDataModel } from './model/chartDataModel';\nimport type { ChartCrossFilterService } from './services/chartCrossFilterService';\nimport type { ChartMenuService } from './services/chartMenuService';\nimport { CHART_TOOL_PANEL_MENU_OPTIONS } from './services/chartMenuService';\nimport { ChartOptionsService } from './services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from './services/chartTranslationService';\nimport { deepMerge } from './utils/object';\nimport { getCanonicalChartType, getSeriesType, isHierarchical } from './utils/seriesTypeMapper';\n\nexport interface GridChartParams {\n    chartId: string;\n    pivotChart?: boolean;\n    cellRange: PartialCellRange;\n    chartType: ChartType;\n    chartThemeName?: string;\n    insideDialog: boolean;\n    focusDialogOnOpen?: boolean;\n    suppressChartRanges?: boolean;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    chartThemeOverrides?: AgChartThemeOverrides;\n    unlinkChart?: boolean;\n    crossFiltering?: boolean;\n    crossFilteringContext: CrossFilteringContext;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes?: SeriesChartType[];\n    crossFilteringResetCallback?: () => void;\n}\n\nexport class GridChartComp extends Component {\n    private crossFilterService: ChartCrossFilterService;\n    private chartTranslationService: ChartTranslationService;\n    private chartMenuService: ChartMenuService;\n    private focusService: FocusService;\n    private popupService: PopupService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.crossFilterService = beans.chartCrossFilterService as ChartCrossFilterService;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n        this.focusService = beans.focusService;\n        this.popupService = beans.popupService;\n    }\n\n    private readonly eChart: HTMLElement = RefPlaceholder;\n    private readonly eChartContainer: HTMLElement = RefPlaceholder;\n    private readonly eMenuContainer: HTMLElement = RefPlaceholder;\n    private readonly eEmpty: HTMLElement = RefPlaceholder;\n\n    private chartMenu: ChartMenu;\n    private chartDialog: AgDialog;\n\n    private chartController: ChartController;\n    private chartOptionsService: ChartOptionsService;\n    private chartMenuContext: ChartMenuContext;\n\n    private chartProxy: ChartProxy;\n    private chartType: ChartType;\n    private chartEmpty: boolean;\n\n    private readonly params: GridChartParams;\n\n    // function to clean up the 'color-scheme-change' event listener\n    private onDestroyColorSchemeChangeListener: () => void;\n\n    constructor(params: GridChartParams) {\n        super(/* html */ `<div class=\"ag-chart\">\n            <div data-ref=\"eChartContainer\" class=\"ag-chart-components-wrapper ag-chart-menu-hidden\">\n                <div data-ref=\"eChart\" class=\"ag-chart-canvas-wrapper\"></div>\n                <div data-ref=\"eEmpty\" class=\"ag-chart-empty-text ag-unselectable\"></div>\n            </div>\n            <div data-ref=\"eMenuContainer\" class=\"ag-chart-docked-container\"></div>\n            </div>`);\n        this.params = params;\n    }\n\n    public postConstruct(): void {\n        const modelParams: ChartModelParams = {\n            ...this.params,\n            chartType: getCanonicalChartType(this.params.chartType),\n            chartThemeName: this.getThemeName(),\n        };\n\n        const isRtl = this.gos.get('enableRtl');\n\n        this.addCssClass(isRtl ? 'ag-rtl' : 'ag-ltr');\n\n        // only the chart controller interacts with the chart model\n        const model = this.createBean(new ChartDataModel(modelParams));\n        this.chartController = this.createManagedBean(new ChartController(model));\n        this.chartOptionsService = this.createManagedBean(new ChartOptionsService(this.chartController));\n\n        this.validateCustomThemes();\n\n        // create chart before dialog to ensure dialog is correct size\n        this.createChart();\n\n        if (this.params.insideDialog) {\n            this.addDialog();\n        }\n\n        this.addMenu();\n\n        this.addManagedElementListeners(this.getGui(), { focusin: this.setActiveChartCellRange.bind(this) });\n        this.addManagedListeners(this.chartController, { chartModelUpdate: this.update.bind(this) });\n\n        this.addManagedPropertyListeners(\n            ['chartThemeOverrides', 'chartThemes'],\n            this.reactivePropertyUpdate.bind(this)\n        );\n\n        this.update();\n        this.raiseChartCreatedEvent();\n    }\n\n    private createChart(): void {\n        // if chart already exists, destroy it and remove it from DOM\n        let chartInstance: AgChartInstance | undefined = undefined;\n        if (this.chartProxy) {\n            chartInstance = this.chartProxy.destroy({ keepChartInstance: true });\n        }\n\n        const crossFilterCallback = (event: any, reset: boolean) => {\n            const ctx = this.params.crossFilteringContext;\n            ctx.lastSelectedChartId = reset ? '' : this.chartController.getChartId();\n            if (reset) {\n                this.params.crossFilteringResetCallback!();\n            }\n            this.crossFilterService.filter(event, reset);\n        };\n\n        const chartType = this.chartController.getChartType();\n        const chartProxyParams: ChartProxyParams = {\n            chartType,\n            chartInstance,\n            getChartThemeName: this.getChartThemeName.bind(this),\n            getChartThemes: this.getChartThemes.bind(this),\n            customChartThemes: this.gos.get('customChartThemes'),\n            getGridOptionsChartThemeOverrides: () => this.getGridOptionsChartThemeOverrides(),\n            getExtraPaddingDirections: () => this.chartMenu?.getExtraPaddingDirections() ?? [],\n            apiChartThemeOverrides: this.params.chartThemeOverrides,\n            crossFiltering: this.params.crossFiltering ?? false,\n            crossFilterCallback,\n            parentElement: this.eChart,\n            grouping: this.chartController.isGrouping(),\n            chartThemeToRestore: this.params.chartThemeName,\n            chartOptionsToRestore: this.params.chartOptionsToRestore,\n            chartPaletteToRestore: this.params.chartPaletteToRestore,\n            seriesChartTypes: this.chartController.getSeriesChartTypes(),\n            translate: (toTranslate: ChartTranslationKey) => this.chartTranslationService.translate(toTranslate),\n        };\n\n        // ensure 'restoring' options are not reused when switching chart types\n        this.params.chartOptionsToRestore = undefined;\n\n        // set local state used to detect when chart changes\n        this.chartType = chartType;\n\n        this.chartProxy = GridChartComp.createChartProxy(chartProxyParams);\n        if (!this.chartProxy) {\n            _warnOnce('invalid chart type supplied: ' + chartProxyParams.chartType);\n            return;\n        }\n\n        this.chartController.setChartProxy(this.chartProxy);\n        this.createMenuContext();\n    }\n\n    private createMenuContext(): void {\n        if (this.chartMenuContext) {\n            return;\n        }\n        const chartMenuParamsFactory = this.createManagedBean(\n            new ChartMenuParamsFactory(this.chartOptionsService.getChartThemeOverridesProxy())\n        );\n        const chartAxisMenuParamsFactory = this.createManagedBean(\n            new ChartMenuParamsFactory(this.chartOptionsService.getAxisThemeOverridesProxy())\n        );\n        this.chartMenuContext = {\n            chartController: this.chartController,\n            chartOptionsService: this.chartOptionsService,\n            chartMenuParamsFactory,\n            chartAxisMenuParamsFactory,\n        };\n    }\n\n    private getChartThemeName(): string {\n        return this.chartController.getChartThemeName();\n    }\n\n    private getChartThemes(): string[] {\n        return this.chartController.getThemeNames();\n    }\n\n    private getGridOptionsChartThemeOverrides(): AgChartThemeOverrides | undefined {\n        return this.gos.get('chartThemeOverrides');\n    }\n\n    private static createChartProxy(chartProxyParams: ChartProxyParams): ChartProxy {\n        switch (chartProxyParams.chartType) {\n            case 'column':\n            case 'bar':\n            case 'groupedColumn':\n            case 'stackedColumn':\n            case 'normalizedColumn':\n            case 'groupedBar':\n            case 'stackedBar':\n            case 'normalizedBar':\n                return new BarChartProxy(chartProxyParams);\n            case 'pie':\n            case 'donut':\n            case 'doughnut':\n                return new PieChartProxy(chartProxyParams);\n            case 'area':\n            case 'stackedArea':\n            case 'normalizedArea':\n                return new AreaChartProxy(chartProxyParams);\n            case 'line':\n                return new LineChartProxy(chartProxyParams);\n            case 'scatter':\n            case 'bubble':\n                return new ScatterChartProxy(chartProxyParams);\n            case 'histogram':\n                return new HistogramChartProxy(chartProxyParams);\n            case 'radarLine':\n            case 'radarArea':\n            case 'nightingale':\n            case 'radialColumn':\n            case 'radialBar':\n                return new PolarChartProxy(chartProxyParams);\n            case 'rangeBar':\n            case 'rangeArea':\n                return new RangeChartProxy(chartProxyParams);\n            case 'boxPlot':\n                return new BoxPlotChartProxy(chartProxyParams);\n            case 'treemap':\n            case 'sunburst':\n                return new HierarchicalChartProxy(chartProxyParams);\n            case 'heatmap':\n                return new HeatmapChartProxy(chartProxyParams);\n            case 'waterfall':\n                return new WaterfallChartProxy(chartProxyParams);\n            case 'columnLineCombo':\n            case 'areaColumnCombo':\n            case 'customCombo':\n                return new ComboChartProxy(chartProxyParams);\n            default:\n                throw `AG Grid: Unable to create chart as an invalid chartType = '${chartProxyParams.chartType}' was supplied.`;\n        }\n    }\n\n    private addDialog(): void {\n        const title = this.chartTranslationService.translate(\n            this.params.pivotChart ? 'pivotChartTitle' : 'rangeChartTitle'\n        );\n\n        const { width, height } = this.getBestDialogSize();\n\n        const afterGuiAttached = this.params.focusDialogOnOpen\n            ? () => setTimeout(() => this.focusService.focusInto(this.getGui()))\n            : undefined;\n\n        this.chartDialog = new AgDialog({\n            resizable: true,\n            movable: true,\n            maximizable: true,\n            title,\n            width,\n            height,\n            component: this,\n            centered: true,\n            closable: true,\n            afterGuiAttached,\n        });\n\n        this.createBean(this.chartDialog);\n\n        this.chartDialog.addEventListener('destroyed', () => {\n            this.destroy();\n            this.chartMenuService.hideAdvancedSettings();\n            const lastFocusedCell = this.focusService.getFocusedCell();\n            setTimeout(() => {\n                if (lastFocusedCell) {\n                    this.focusService.setFocusedCell({ ...lastFocusedCell, forceBrowserFocus: true });\n                } else {\n                    this.focusService.focusGridInnerElement();\n                }\n            });\n        });\n    }\n\n    private getBestDialogSize(): { width: number; height: number } {\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = _getAbsoluteWidth(popupParent) * 0.75;\n        const maxHeight = _getAbsoluteHeight(popupParent) * 0.75;\n        const ratio = 0.553;\n\n        const chart = this.chartProxy.getChart();\n        let width = this.params.insideDialog ? 850 : chart.width;\n        let height = this.params.insideDialog ? 470 : chart.height;\n\n        if (width > maxWidth || height > maxHeight) {\n            width = Math.min(width, maxWidth);\n            height = Math.round(width * ratio);\n\n            if (height > maxHeight) {\n                height = maxHeight;\n                width = Math.min(width, Math.round(height / ratio));\n            }\n        }\n\n        return { width, height };\n    }\n\n    private addMenu(): void {\n        if (!this.params.crossFiltering) {\n            this.chartMenu = this.createBean(\n                new ChartMenu(this.eChartContainer, this.eMenuContainer, this.chartMenuContext)\n            );\n            this.eChartContainer.appendChild(this.chartMenu.getGui());\n        }\n    }\n\n    public update(params?: UpdateChartParams): void {\n        // update chart model for api.updateChart()\n        if (params?.chartId) {\n            const validUpdate = this.chartController.update(params);\n            if (!validUpdate) {\n                return; // warning already logged!\n            }\n        }\n\n        const updatedChartType = this.chartTypeChanged(params);\n        // If the chart type has changed, grab the theme overrides from the exisiting chart before destroying it,\n        // so that we can retain any compatible theme overrides across different chart types.\n        const persistedThemeOverrides =\n            updatedChartType || this.chartEmpty\n                ? ((updatedChartType) => {\n                      const currentChartType = this.chartType;\n                      const targetChartType = updatedChartType;\n                      const existingChartInstance = this.chartProxy.getChart();\n                      const existingChartOptions = existingChartInstance?.getOptions();\n                      const existingAxes = existingChartInstance?.axes;\n                      return this.chartOptionsService.getPersistedChartThemeOverrides(\n                          existingChartOptions,\n                          existingAxes,\n                          currentChartType,\n                          targetChartType ?? currentChartType\n                      );\n                  })(updatedChartType)\n                : undefined;\n\n        // recreate chart if chart type has changed\n        if (updatedChartType) this.createChart();\n\n        // combine any provided theme overrides with any retained theme overrides from changing chart type\n        const updatedThemeOverrides =\n            persistedThemeOverrides && params?.chartThemeOverrides\n                ? deepMerge(persistedThemeOverrides, params.chartThemeOverrides)\n                : persistedThemeOverrides || params?.chartThemeOverrides;\n\n        // update chart options if chart type hasn't changed or if overrides are supplied\n        this.updateChart(updatedThemeOverrides);\n\n        if (params?.chartId) {\n            this.chartProxy\n                .getChart()\n                .waitForUpdate()\n                .then(() => {\n                    this.chartController.raiseChartApiUpdateEvent();\n                });\n        }\n    }\n\n    private updateChart(updatedOverrides?: AgChartThemeOverrides): void {\n        const { chartProxy } = this;\n\n        const selectedCols = this.chartController.getSelectedValueColState();\n        const data = this.chartController.getChartData();\n        const chartEmpty = this.handleEmptyChart(data, selectedCols.length);\n\n        this.chartEmpty = chartEmpty;\n        if (chartEmpty) {\n            // We don't have enough data to reinstantiate the chart with the new chart type,\n            // but we still want to persist any theme overrides for when the data is present\n            if (updatedOverrides) this.chartController.updateThemeOverrides(updatedOverrides);\n            return;\n        }\n\n        const chartUpdateParams = this.chartController.getChartUpdateParams(updatedOverrides);\n        chartProxy.update(chartUpdateParams);\n\n        this.chartProxy\n            .getChart()\n            .waitForUpdate()\n            .then(() => {\n                this.chartController.raiseChartUpdatedEvent();\n            });\n    }\n\n    private chartTypeChanged(updateParams?: UpdateChartParams): ChartType | null {\n        const [currentType, updatedChartType] = [this.chartController.getChartType(), updateParams?.chartType];\n        const targetChartType = updatedChartType ? getCanonicalChartType(updatedChartType) : undefined;\n        // If the grid chart component is out of sync with the existing chart instance type, return the correct chart type\n        if (this.chartType !== currentType) return targetChartType ?? currentType;\n        // If the target chart type is different to the current chart type, return the new chart type\n        if (targetChartType && currentType !== targetChartType) return targetChartType;\n        // Otherwise nothing has changed\n        return null;\n    }\n\n    public getChartModel(): ChartModel {\n        return this.chartController.getChartModel();\n    }\n\n    public getChartImageDataURL(fileFormat?: string): string {\n        return this.chartProxy.getChartImageDataURL(fileFormat);\n    }\n\n    private handleEmptyChart(data: any[], numFields: number): boolean {\n        const pivotModeDisabled = this.chartController.isPivotChart() && !this.chartController.isPivotMode();\n\n        // Determine the minimum number of fields based on the chart type\n        const chartType = this.chartController.getChartType();\n        let minFieldsRequired = 1;\n        if (this.chartController.isActiveXYChart()) {\n            minFieldsRequired = chartType === 'bubble' ? 3 : 2;\n        } else if (isHierarchical(getSeriesType(chartType))) {\n            minFieldsRequired = 0;\n        }\n\n        const isEmptyChart = numFields < minFieldsRequired || data.length === 0;\n\n        if (this.eChart) {\n            const isEmpty = pivotModeDisabled || isEmptyChart;\n            _setDisplayed(this.eChart, !isEmpty);\n            _setDisplayed(this.eEmpty, isEmpty);\n        }\n\n        if (pivotModeDisabled) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('pivotChartRequiresPivotMode');\n            return true;\n        }\n\n        if (isEmptyChart) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('noDataToChart');\n            return true;\n        }\n\n        return false;\n    }\n\n    public downloadChart(dimensions?: { width: number; height: number }, fileName?: string, fileFormat?: string): void {\n        this.chartProxy.downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public openChartToolPanel(panel?: ChartToolPanelName) {\n        const menuPanel = panel ? CHART_TOOL_PANEL_MENU_OPTIONS[panel] : panel;\n        this.chartMenu.showMenu({ panel: menuPanel });\n    }\n\n    public closeChartToolPanel() {\n        this.chartMenu.hideMenu();\n    }\n\n    public getChartId(): string {\n        return this.chartController.getChartId();\n    }\n\n    public getUnderlyingChart() {\n        return this.chartProxy.getChartRef();\n    }\n\n    public crossFilteringReset(): void {\n        this.chartProxy.crossFilteringReset();\n    }\n\n    private setActiveChartCellRange(focusEvent: FocusEvent): void {\n        if (this.getGui().contains(focusEvent.relatedTarget as HTMLElement)) {\n            return;\n        }\n\n        this.chartController.setChartRange(true);\n        this.focusService.clearFocusedCell();\n    }\n\n    private getThemeName(): string {\n        const availableChartThemes = this.gos.get('chartThemes') || DEFAULT_THEMES;\n\n        if (availableChartThemes.length === 0) {\n            throw new Error('Cannot create chart: no chart themes available.');\n        }\n\n        const { chartThemeName } = this.params;\n        return _includes(availableChartThemes, chartThemeName) ? chartThemeName! : availableChartThemes[0];\n    }\n\n    private getAllKeysInObjects(objects: any[]): string[] {\n        const allValues: any = {};\n\n        objects\n            .filter((obj) => obj != null)\n            .forEach((obj) => {\n                Object.keys(obj).forEach((key) => (allValues[key] = null));\n            });\n\n        return Object.keys(allValues);\n    }\n\n    private validateCustomThemes() {\n        const suppliedThemes = this.getChartThemes();\n        const customChartThemes = this.gos.get('customChartThemes');\n        if (customChartThemes) {\n            this.getAllKeysInObjects([customChartThemes]).forEach((customThemeName) => {\n                if (!_includes(suppliedThemes, customThemeName)) {\n                    _warnOnce(\n                        \"a custom chart theme with the name '\" +\n                            customThemeName +\n                            \"' has been \" +\n                            \"supplied but not added to the 'chartThemes' list\"\n                    );\n                }\n            });\n        }\n    }\n\n    private reactivePropertyUpdate(): void {\n        // switch to the first theme if the current theme is unavailable\n        this.chartController.setChartThemeName(this.getThemeName(), true);\n\n        const chartId = this.getChartId();\n        const modelType = this.chartController.isCrossFilterChart() ? 'crossFilter' : this.getChartModel().modelType;\n\n        // standalone requires that `undefined` / `null` values are supplied as `{}`\n        const chartThemeOverrides = this.gos.get('chartThemeOverrides') || {};\n\n        this.update({\n            type: `${modelType}ChartUpdate`,\n            chartId,\n            chartThemeOverrides,\n        });\n    }\n\n    private raiseChartCreatedEvent(): void {\n        const event: WithoutGridCommon<ChartCreatedEvent> = {\n            type: 'chartCreated',\n            chartId: this.chartController.getChartId(),\n        };\n\n        this.chartProxy\n            .getChart()\n            .waitForUpdate()\n            .then(() => {\n                this.eventService.dispatchEvent(event);\n            });\n    }\n\n    private raiseChartDestroyedEvent(): void {\n        const event: WithoutGridCommon<ChartDestroyedEvent> = {\n            type: 'chartDestroyed',\n            chartId: this.chartController.getChartId(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        if (this.chartProxy) {\n            this.chartProxy.destroy();\n        }\n\n        this.destroyBean(this.chartMenu);\n\n        // don't want to invoke destroy() on the Dialog (prevents destroy loop)\n        if (this.chartDialog && this.chartDialog.isAlive()) {\n            this.destroyBean(this.chartDialog);\n        }\n\n        this.onDestroyColorSchemeChangeListener?.();\n\n        // if the user is providing containers for the charts, we need to clean up, otherwise the old chart\n        // data will still be visible although the chart is no longer bound to the grid\n        const eGui = this.getGui();\n        _clearElement(eGui);\n        // remove from parent, so if user provided container, we detach from the provided dom element\n        _removeFromParent(eGui);\n\n        this.raiseChartDestroyedEvent();\n    }\n}\n", "import type {\n    BeanCollection,\n    CellRange,\n    CellRangeParams,\n    ChartModel,\n    ChartModelType,\n    ChartOptionsChangedEvent,\n    ChartRangeSelectionChangedEvent,\n    ChartType,\n    IAggFunc,\n    IRangeService,\n    PartialCellRange,\n    SeriesChartType,\n    SeriesGroupType,\n    UpdateChartParams,\n    UpdateCrossFilterChartParams,\n    UpdateRangeChartParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\nimport type { AgCartesianAxisType, AgChartThemePalette } from 'ag-charts-community';\nimport { _ModuleSupport, _Theme } from 'ag-charts-community';\nimport type { AgChartThemeOverrides } from 'ag-charts-types';\n\nimport type { ChartProxy, FieldDefinition, UpdateParams } from './chartProxies/chartProxy';\nimport { isStockTheme } from './chartProxies/chartTheme';\nimport type { ChartModelParams, ColState } from './model/chartDataModel';\nimport { ChartDataModel } from './model/chartDataModel';\nimport { ChartParamsValidator } from './utils/chartParamsValidator';\nimport type { ChartSeriesType } from './utils/seriesTypeMapper';\nimport {\n    getMaxNumCategories,\n    getMaxNumSeries,\n    getSeriesType,\n    supportsInvertedCategorySeries,\n} from './utils/seriesTypeMapper';\n\nexport const DEFAULT_THEMES = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];\n\nexport type ChartControllerEvent =\n    | 'chartUpdated'\n    | 'chartApiUpdate'\n    | 'chartModelUpdate'\n    | 'chartTypeChanged'\n    | 'chartSeriesChartTypeChanged'\n    | 'chartLinkedChanged';\nexport class ChartController extends BeanStub<ChartControllerEvent> {\n    private rangeService: IRangeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rangeService = beans.rangeService!;\n    }\n\n    private chartProxy: ChartProxy;\n\n    public constructor(private readonly model: ChartDataModel) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.setChartRange();\n\n        if (this.model.unlinked) {\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n        const listener = this.updateForGridChange.bind(this);\n        this.addManagedEventListeners({\n            rangeSelectionChanged: (event) => {\n                if (event.id && event.id === this.model.chartId) {\n                    this.updateForRangeChange();\n                }\n            },\n            columnMoved: listener,\n            columnPinned: listener,\n            columnVisible: listener,\n            columnRowGroupChanged: listener,\n            modelUpdated: () => this.updateForGridChange({ fromModelUpdate: true }),\n            cellValueChanged: this.updateForDataChange.bind(this),\n        });\n    }\n\n    public update(params: UpdateChartParams): boolean {\n        if (!this.validUpdateType(params)) return false;\n        const validationResult = ChartParamsValidator.validateUpdateParams(params);\n        if (!validationResult) return false;\n        const validParams = validationResult === true ? params : validationResult;\n        this.applyValidatedChartParams(validParams);\n        return true;\n    }\n\n    private applyValidatedChartParams(params: UpdateChartParams): void {\n        const { chartId, chartType, chartThemeName, unlinkChart } = params;\n\n        // create a common base for the chart model parameters (this covers pivot chart updates)\n        const common = {\n            chartId: chartId,\n            pivotChart: this.model.pivotChart,\n            chartType: chartType ?? this.model.chartType,\n            chartThemeName: chartThemeName ?? this.model.chartThemeName,\n            unlinkChart: unlinkChart ?? this.model.unlinked,\n            cellRange: this.model.suppliedCellRange,\n            switchCategorySeries: this.model.switchCategorySeries,\n            aggFunc: this.model.aggFunc,\n            seriesChartTypes: undefined,\n            suppressChartRanges: false,\n            crossFiltering: false,\n        };\n\n        const chartModelParams: ChartModelParams = { ...common };\n\n        // modify the chart model properties based on the type of update\n        switch (params.type) {\n            case 'rangeChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = params.switchCategorySeries ?? this.model.switchCategorySeries;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.seriesChartTypes = params.seriesChartTypes;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                chartModelParams.seriesGroupType = params.seriesGroupType ?? this.model.seriesGroupType;\n                break;\n            case 'crossFilterChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = false;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.crossFiltering = true;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                break;\n            case 'pivotChartUpdate':\n                chartModelParams.switchCategorySeries = false;\n                break;\n        }\n\n        this.model.updateModel(chartModelParams);\n\n        // if the chart should be unlinked or chart ranges suppressed, remove all cell ranges; otherwise, set the chart range\n        const removeChartCellRanges = chartModelParams.unlinkChart || chartModelParams.suppressChartRanges;\n        removeChartCellRanges ? this.rangeService?.setCellRanges([]) : this.setChartRange();\n    }\n\n    public updateForGridChange(params?: {\n        maintainColState?: boolean;\n        setColsFromRange?: boolean;\n        fromModelUpdate?: boolean;\n    }): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        const { maintainColState, setColsFromRange, fromModelUpdate } = params ?? {};\n\n        this.model.updateCellRanges({ maintainColState, setColsFromRange, fromModelUpdate });\n        this.model.updateData();\n        this.setChartRange();\n    }\n\n    public updateForDataChange(): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public updateForRangeChange(): void {\n        this.updateForGridChange({ setColsFromRange: true });\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateForPanelChange(params: {\n        updatedColState: ColState;\n        resetOrder?: boolean;\n        skipAnimation?: boolean;\n    }): void {\n        this.model.updateCellRanges(params);\n        this.model.updateData();\n        if (params.skipAnimation) {\n            this.getChartProxy().getChartRef().skipAnimations();\n        }\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateThemeOverrides(updatedOverrides: AgChartThemeOverrides): void {\n        this.chartProxy.updateThemeOverrides(updatedOverrides);\n    }\n\n    public getChartUpdateParams(updatedOverrides?: AgChartThemeOverrides): UpdateParams {\n        const selectedCols = this.getSelectedValueColState();\n        const fields = selectedCols.map((c) => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.getChartData();\n        const selectedDimensions = this.getSelectedDimensions();\n\n        const params: UpdateParams = {\n            data,\n            groupData: this.model.groupChartData,\n            grouping: this.isGrouping(),\n            categories: selectedDimensions.map((selectedDimension) => ({\n                id: selectedDimension.colId,\n                name: selectedDimension.displayName!,\n                chartDataType: this.model.categoryAxisType ?? this.model.getChartDataType(selectedDimension.colId),\n            })),\n            fields,\n            chartId: this.getChartId(),\n            getCrossFilteringContext: () => ({ lastSelectedChartId: 'xxx' }), //this.params.crossFilteringContext, //TODO\n            seriesChartTypes: this.getSeriesChartTypes(),\n            updatedOverrides: updatedOverrides,\n            seriesGroupType: this.model.seriesGroupType,\n        };\n\n        return this.isCategorySeriesSwitched() ? this.invertCategorySeriesParams(params) : params;\n    }\n\n    private invertCategorySeriesParams(params: UpdateParams): UpdateParams {\n        const [category] = params.categories;\n        // Create a single synthetic output category that will contain the series name values\n        const categories = [{ id: ChartDataModel.DEFAULT_CATEGORY, name: '' }];\n        // Create an output series corresponding to each row in the input data\n        const fields = params.data.map((value, index): FieldDefinition => {\n            const categoryKey = `${category.id}:${index}`;\n            const categoryValue = value[category.id];\n            const seriesLabel = categoryValue == null ? '' : String(categoryValue);\n            return { colId: categoryKey, displayName: seriesLabel };\n        });\n        // Create an output data row corresponding to each selected series column\n        const data = params.fields.map((field) => {\n            // Create a new output row labeled with the series column name\n            const row: Record<PropertyKey, any> = {\n                [ChartDataModel.DEFAULT_CATEGORY]: field.displayName,\n            };\n            // Append fields corresponding to each row in the input data\n            for (const [index, value] of params.data.entries()) {\n                const categoryKey = `${category.id}:${index}`;\n                const seriesLabelValue = value[field.colId];\n                row[categoryKey] = seriesLabelValue;\n            }\n            return row;\n        });\n        return {\n            ...params,\n            categories,\n            fields,\n            data,\n        };\n    }\n\n    public getChartModel(): ChartModel {\n        const modelType: ChartModelType = this.model.pivotChart ? 'pivot' : 'range';\n\n        const seriesChartTypes = this.isComboChart() ? this.model.comboChartModel.seriesChartTypes : undefined;\n\n        return {\n            modelType,\n            chartId: this.model.chartId,\n            chartType: this.model.chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n            chartPalette: this.chartProxy.getChartPalette(),\n            cellRange: this.getCellRangeParams(),\n            switchCategorySeries: this.model.switchCategorySeries,\n            suppressChartRanges: this.model.suppressChartRanges,\n            aggFunc: this.model.aggFunc,\n            unlinkChart: this.model.unlinked,\n            seriesChartTypes,\n            seriesGroupType: this.model.seriesGroupType,\n        };\n    }\n\n    public getChartId(): string {\n        return this.model.chartId;\n    }\n\n    public getChartData(): any[] {\n        return this.model.chartData;\n    }\n\n    public getChartType(): ChartType {\n        return this.model.chartType;\n    }\n\n    public setChartType(chartType: ChartType): void {\n        this.updateMultiSeriesAndCategory(this.model.chartType, chartType);\n\n        this.model.chartType = chartType;\n\n        this.model.comboChartModel.updateSeriesChartTypes();\n\n        // Reset the inverted category/series toggle whenever the chart type changes\n        this.model.switchCategorySeries = false;\n\n        this.model.categoryAxisType = undefined;\n\n        this.model.seriesGroupType = undefined;\n\n        this.raiseChartModelUpdateEvent();\n        this.raiseChartOptionsChangedEvent();\n    }\n\n    public isCategorySeriesSwitched(): boolean {\n        return this.model.switchCategorySeries && !this.model.isGrouping();\n    }\n\n    public switchCategorySeries(inverted: boolean): void {\n        if (!supportsInvertedCategorySeries(this.getChartType())) return;\n        this.model.switchCategorySeries = inverted;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public getAggFunc(): string | IAggFunc | undefined {\n        return this.model.aggFunc;\n    }\n\n    public setAggFunc(value: string | IAggFunc | undefined, silent?: boolean): void {\n        if (this.model.aggFunc === value) return;\n        this.model.aggFunc = value;\n        if (silent) return;\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    private updateMultiSeriesAndCategory(previousChartType: ChartType, chartType: ChartType): void {\n        // If we are changing from a multi-category/series chart type to a single-category/series chart type,\n        // ensure that only the allowed number of selected category/series column remain selected\n        const updateForMax = (columns: ColState[], maxNum: number) => {\n            let numSelected = 0;\n            for (const colState of columns) {\n                if (!colState.selected) continue;\n                if (numSelected >= maxNum) {\n                    colState.selected = false;\n                } else {\n                    numSelected++;\n                }\n            }\n            if (numSelected === 0) {\n                columns[0].selected = true;\n            }\n        };\n\n        const maxNumDimensions = getMaxNumCategories(chartType);\n        const maxNumSeries = getMaxNumSeries(chartType);\n        const updateDimensionColState =\n            maxNumDimensions != null && (getMaxNumCategories(previousChartType) ?? 100) > (maxNumDimensions ?? 100);\n        const updateValueColState =\n            maxNumSeries != null && (getMaxNumSeries(previousChartType) ?? 100) > (maxNumSeries ?? 100);\n        if (updateDimensionColState) {\n            updateForMax(this.model.dimensionColState, maxNumDimensions);\n        }\n        if (updateValueColState) {\n            updateForMax(this.model.valueColState, maxNumSeries);\n        }\n        if (updateDimensionColState || updateValueColState) {\n            this.model.resetCellRanges(updateDimensionColState, updateValueColState);\n            this.setChartRange(true);\n        }\n    }\n\n    public setChartThemeName(chartThemeName: string, silent?: boolean): void {\n        this.model.chartThemeName = chartThemeName;\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getChartThemeName(): string {\n        return this.model.chartThemeName;\n    }\n\n    public isPivotChart(): boolean {\n        return this.model.pivotChart;\n    }\n\n    public isPivotMode(): boolean {\n        return this.model.isPivotMode();\n    }\n\n    public isGrouping(): boolean {\n        return this.model.isGrouping();\n    }\n\n    public isCrossFilterChart(): boolean {\n        return this.model.crossFiltering;\n    }\n\n    public getThemeNames(): string[] {\n        return this.gos.get('chartThemes') || DEFAULT_THEMES;\n    }\n\n    public getThemes(): _Theme.ChartTheme[] {\n        const themeNames = this.getThemeNames();\n\n        return themeNames.map((themeName) => {\n            const stockTheme = isStockTheme(themeName);\n            const theme = stockTheme ? themeName : this.chartProxy.lookupCustomChartTheme(themeName);\n            return _Theme.getChartTheme(theme);\n        });\n    }\n\n    public getPalettes(): AgChartThemePalette[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.palette;\n        });\n    }\n\n    public getThemeTemplateParameters(): Map<any, any>[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.getTemplateParameters();\n        });\n    }\n\n    public getValueColState(): ColState[] {\n        return this.model.valueColState.map(this.displayNameMapper.bind(this));\n    }\n\n    public getSelectedValueColState(): { colId: string; displayName: string | null }[] {\n        return this.getValueColState().filter((cs) => cs.selected);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.model.getSelectedDimensions();\n    }\n\n    private displayNameMapper(col: ColState): ColState {\n        const columnNames = this.model.columnNames[col.colId];\n        col.displayName = columnNames ? columnNames.join(' - ') : this.model.getColDisplayName(col.column!);\n        return col;\n    }\n\n    public getColStateForMenu(): { dimensionCols: ColState[]; valueCols: ColState[] } {\n        return { dimensionCols: this.model.dimensionColState, valueCols: this.getValueColState() };\n    }\n\n    public setChartRange(silent = false): void {\n        if (this.rangeService && !this.model.suppressChartRanges && !this.model.unlinked) {\n            this.rangeService.setCellRanges(this.getCellRanges());\n        }\n\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n        }\n    }\n\n    public detachChartRange(): void {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.unlinked = !this.model.unlinked;\n\n        if (this.model.unlinked) {\n            // remove range from grid\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        } else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n        this.dispatchLocalEvent({ type: 'chartLinkedChanged' });\n    }\n\n    public setChartProxy(chartProxy: ChartProxy): void {\n        this.chartProxy = chartProxy;\n    }\n\n    public getChartProxy(): ChartProxy {\n        return this.chartProxy;\n    }\n\n    public isActiveXYChart(): boolean {\n        return ['scatter', 'bubble'].includes(this.getChartType());\n    }\n\n    public isChartLinked(): boolean {\n        return !this.model.unlinked;\n    }\n\n    public customComboExists(): boolean {\n        const savedCustomSeriesChartTypes = this.model.comboChartModel.savedCustomSeriesChartTypes;\n        return savedCustomSeriesChartTypes && savedCustomSeriesChartTypes.length > 0;\n    }\n\n    public getSeriesChartTypes(): SeriesChartType[] {\n        return this.model.comboChartModel.seriesChartTypes;\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return this.model.isComboChart(chartType);\n    }\n\n    public updateSeriesChartType(colId: string, chartType?: ChartType, secondaryAxis?: boolean): void {\n        const seriesChartType = this.model.comboChartModel.seriesChartTypes.find((s) => s.colId === colId);\n        if (seriesChartType) {\n            // once a combo chart has been modified it is now a 'customCombo' chart\n            const updateChartType = this.model.chartType !== 'customCombo';\n            if (updateChartType) {\n                this.model.chartType = 'customCombo';\n            }\n\n            const prevSeriesChartType = seriesChartType.chartType;\n            if (chartType != null) {\n                seriesChartType.chartType = chartType;\n            }\n\n            if (secondaryAxis != null) {\n                seriesChartType.secondaryAxis = secondaryAxis;\n            }\n\n            // replace existing custom series types with this latest version\n            this.model.comboChartModel.savedCustomSeriesChartTypes = this.model.comboChartModel.seriesChartTypes;\n\n            // series chart types can be modified, i.e. column chart types should be moved to primary axis\n            this.model.comboChartModel.updateSeriesChartTypes();\n\n            this.updateForDataChange();\n\n            if (updateChartType) {\n                // update the settings panel by raising an 'chartTypeChanged' event\n                this.dispatchLocalEvent({\n                    type: 'chartTypeChanged',\n                });\n            }\n\n            if (prevSeriesChartType !== chartType) {\n                // update the format panel by raising an chartSeriesChartTypeChanged event\n                this.dispatchLocalEvent({\n                    type: 'chartSeriesChartTypeChanged',\n                });\n            }\n\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getActiveSeriesChartTypes(): SeriesChartType[] {\n        const selectedColIds = this.getSelectedValueColState().map((c) => c.colId);\n        return this.getSeriesChartTypes().filter((s) => selectedColIds.includes(s.colId));\n    }\n\n    public getChartSeriesTypes(chartType?: ChartType): ChartSeriesType[] {\n        const targetChartType = chartType ?? this.getChartType();\n        return this.isComboChart(targetChartType) ? ['line', 'bar', 'area'] : [getSeriesType(targetChartType)];\n    }\n\n    public getChartSeriesType(): ChartSeriesType {\n        const seriesChartTypes = this.getSeriesChartTypes();\n\n        if (seriesChartTypes.length === 0) {\n            return 'bar';\n        }\n        const ct = seriesChartTypes[0].chartType;\n\n        if (ct === 'columnLineCombo') {\n            return 'bar';\n        }\n\n        if (ct === 'areaColumnCombo') {\n            return 'area';\n        }\n        return getSeriesType(ct);\n    }\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    private getCellRanges(): CellRange[] {\n        return [this.model.dimensionCellRange!, this.model.valueCellRange!].filter((r) => r);\n    }\n\n    private createCellRange(\n        params: UpdateRangeChartParams | UpdateCrossFilterChartParams\n    ): PartialCellRange | undefined {\n        return (\n            params.cellRange &&\n            this.rangeService?.createPartialCellRangeFromRangeParams(params.cellRange as CellRangeParams, true)\n        );\n    }\n\n    private validUpdateType(params: UpdateChartParams): boolean {\n        if (!params.type) {\n            _warnOnce(\n                `Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`\n            );\n            return false;\n        }\n\n        const chartTypeMap: Record<string, () => boolean> = {\n            'Range Chart': () => !this.isPivotChart() && !this.isCrossFilterChart(),\n            'Pivot Chart': () => this.isPivotChart(),\n            'Cross Filter Chart': () => this.isCrossFilterChart(),\n        };\n\n        const currentChartType = Object.keys(chartTypeMap).find((type) => chartTypeMap[type]()) ?? 'Range Chart';\n\n        const valid =\n            params.type === `${currentChartType[0].toLowerCase()}${currentChartType.slice(1).replace(/ /g, '')}Update`;\n\n        if (!valid) {\n            _warnOnce(\n                `Unable to update chart as a '${params.type}' update type is not permitted on a ${currentChartType}.`\n            );\n        }\n        return valid;\n    }\n\n    private getCellRangeParams(): CellRangeParams {\n        const cellRanges = this.getCellRanges();\n        const firstCellRange = cellRanges[0];\n        const startRow = (firstCellRange && firstCellRange.startRow) || null;\n        const endRow = (firstCellRange && firstCellRange.endRow) || null;\n\n        return {\n            rowStartIndex: startRow && startRow.rowIndex,\n            rowStartPinned: startRow && startRow.rowPinned,\n            rowEndIndex: endRow && endRow.rowIndex,\n            rowEndPinned: endRow && endRow.rowPinned,\n            columns: cellRanges.reduce(\n                (columns, value) => columns.concat(value.columns.map((c) => c.getId())),\n                [] as string[]\n            ),\n        };\n    }\n\n    public setCategoryAxisType(categoryAxisType?: AgCartesianAxisType): void {\n        this.model.categoryAxisType = categoryAxisType;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public getSeriesGroupType(): SeriesGroupType | undefined {\n        return this.model.seriesGroupType ?? this.chartProxy.getSeriesGroupType();\n    }\n\n    public setSeriesGroupType(seriesGroupType?: SeriesGroupType): void {\n        this.model.seriesGroupType = seriesGroupType;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public raiseChartModelUpdateEvent(): void {\n        this.dispatchLocalEvent({ type: 'chartModelUpdate' });\n    }\n\n    public raiseChartUpdatedEvent(): void {\n        this.dispatchLocalEvent({ type: 'chartUpdated' });\n    }\n\n    public raiseChartApiUpdateEvent(): void {\n        this.dispatchLocalEvent({ type: 'chartApiUpdate' });\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const { chartId, chartType } = this.getChartModel();\n        const event: WithoutGridCommon<ChartOptionsChangedEvent> = {\n            type: 'chartOptionsChanged',\n            chartId,\n            chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private raiseChartRangeSelectionChangedEvent(): void {\n        const event: WithoutGridCommon<ChartRangeSelectionChangedEvent> = {\n            type: 'chartRangeSelectionChanged',\n            id: this.model.chartId,\n            chartId: this.model.chartId,\n            cellRange: this.getCellRangeParams(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n\n        if (this.rangeService) {\n            this.rangeService.setCellRanges([]);\n        }\n    }\n}\n", "import { _includes, _warnOnce } from '@ag-grid-community/core';\nimport type {\n    AgChartLegendClickEvent,\n    AgChartTheme,\n    AgChartThemeName,\n    AgChartThemeOverrides,\n    AgChartThemePalette,\n} from 'ag-charts-community';\nimport { _Theme } from 'ag-charts-community';\n\nimport { ALL_AXIS_TYPES } from '../utils/axisTypeMapper';\nimport { get } from '../utils/object';\nimport type { ChartSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType } from '../utils/seriesTypeMapper';\nimport type { ChartProxy, ChartProxyParams } from './chartProxy';\n\nexport function createAgChartTheme(\n    chartProxyParams: ChartProxyParams,\n    proxy: ChartProxy,\n    isEnterprise: boolean,\n    chartThemeDefaults?: AgChartThemeOverrides,\n    updatedOverrides?: AgChartThemeOverrides\n): AgChartTheme {\n    const { chartOptionsToRestore, chartPaletteToRestore, chartThemeToRestore } = chartProxyParams;\n    const themeName = getSelectedTheme(chartProxyParams);\n    const stockTheme = isStockTheme(themeName);\n\n    const rootTheme = stockTheme\n        ? { baseTheme: themeName as AgChartThemeName }\n        : lookupCustomChartTheme(chartProxyParams, themeName) ?? {};\n\n    const gridOptionsThemeOverrides = chartProxyParams.getGridOptionsChartThemeOverrides();\n    const apiThemeOverrides = chartProxyParams.apiChartThemeOverrides;\n\n    const standaloneChartType = getSeriesType(chartProxyParams.chartType);\n    const crossFilteringOverrides = chartProxyParams.crossFiltering\n        ? createCrossFilterThemeOverrides(proxy, chartProxyParams, standaloneChartType)\n        : undefined;\n\n    const isTitleEnabled = () => {\n        const isTitleEnabled = (obj: any) => {\n            if (!obj) {\n                return false;\n            }\n            return Object.keys(obj).some((key) => get(obj[key], 'title.enabled', false));\n        };\n        return isTitleEnabled(gridOptionsThemeOverrides) || isTitleEnabled(apiThemeOverrides);\n    };\n\n    // Overrides in ascending precedence ordering.\n    const overrides: (AgChartThemeOverrides | undefined)[] = [\n        stockTheme ? inbuiltStockThemeOverrides(chartProxyParams, isEnterprise, isTitleEnabled()) : undefined,\n        chartThemeDefaults,\n        crossFilteringOverrides,\n        gridOptionsThemeOverrides,\n        apiThemeOverrides,\n        { ...(chartOptionsToRestore ?? {}) },\n        updatedOverrides,\n    ];\n\n    // Recursively nest theme overrides so they are applied with correct precedence in\n    // Standalone Charts - this is an undocumented feature.\n    // Outermost theme overrides will be the formatting panel configured values, so they are\n    // differentiated from grid-config and inbuilt overrides.\n    const theme = overrides\n        .filter((v): v is AgChartThemeOverrides => !!v)\n        .reduce(\n            (r, n): AgChartTheme => ({\n                baseTheme: r as any,\n                overrides: n,\n            }),\n            rootTheme\n        );\n\n    // Avoid explicitly setting the `theme.palette` property unless we're using the restored theme\n    // AND the palette is actually different.\n    if (chartPaletteToRestore && themeName === chartThemeToRestore) {\n        const rootThemePalette = _Theme.getChartTheme(rootTheme).palette;\n        if (!isIdenticalPalette(chartPaletteToRestore, rootThemePalette)) {\n            theme.palette = chartPaletteToRestore;\n        }\n    }\n\n    return theme;\n}\n\nfunction isIdenticalPalette(paletteA: AgChartThemePalette, paletteB: AgChartThemePalette) {\n    const arrayCompare = (arrA?: any[], arrB?: any[]) => {\n        if (arrA === arrB) return true;\n        if (arrA?.length !== arrB?.length) return false;\n\n        return arrA?.every((v: any, i) => v === arrB?.[i]) ?? false;\n    };\n\n    return arrayCompare(paletteA.fills, paletteB.fills) && arrayCompare(paletteA.strokes, paletteB.strokes);\n}\n\nexport function isStockTheme(themeName: string): boolean {\n    return _includes(Object.keys(_Theme.themes), themeName);\n}\n\nfunction createCrossFilterThemeOverrides(\n    proxy: ChartProxy,\n    chartProxyParams: ChartProxyParams,\n    seriesType: ChartSeriesType\n): AgChartThemeOverrides {\n    const legend = {\n        listeners: {\n            legendItemClick: (e: AgChartLegendClickEvent) => {\n                const chart = proxy.getChart();\n                chart.series.forEach((s) => {\n                    s.toggleSeriesItem(e.itemId, e.enabled);\n                    s.toggleSeriesItem(`${e.itemId}-filtered-out`, e.enabled);\n                });\n            },\n        },\n    };\n\n    return {\n        [seriesType]: {\n            tooltip: {\n                delay: 500,\n            },\n            legend,\n            listeners: {\n                click: (e: any) => chartProxyParams.crossFilterCallback(e, true),\n            },\n        },\n    };\n}\n\nconst STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES = ALL_AXIS_TYPES.reduce(\n    (r, n) => ({ ...r, [n]: { title: { _enabledFromTheme: true } } }),\n    {}\n);\n\nfunction inbuiltStockThemeOverrides(params: ChartProxyParams, isEnterprise: boolean, titleEnabled: boolean) {\n    const extraPadding = params.getExtraPaddingDirections();\n    return {\n        common: {\n            ...(isEnterprise ? { animation: { duration: 500 } } : undefined),\n            axes: STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES,\n            padding: {\n                // don't add extra padding when a title is present!\n                top: !titleEnabled && extraPadding.includes('top') ? 40 : 20,\n                right: extraPadding.includes('right') ? 30 : 20,\n                bottom: extraPadding.includes('bottom') ? 40 : 20,\n                left: extraPadding.includes('left') ? 30 : 20,\n            },\n        },\n        pie: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n        donut: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n    };\n}\n\nfunction getSelectedTheme(chartProxyParams: ChartProxyParams): string {\n    let chartThemeName = chartProxyParams.getChartThemeName();\n    const availableThemes = chartProxyParams.getChartThemes();\n\n    if (!_includes(availableThemes, chartThemeName)) {\n        chartThemeName = availableThemes[0];\n    }\n\n    return chartThemeName;\n}\n\nexport function lookupCustomChartTheme(chartProxyParams: ChartProxyParams, name: string): AgChartTheme {\n    const { customChartThemes } = chartProxyParams;\n    const customChartTheme = customChartThemes && customChartThemes[name];\n\n    if (!customChartTheme) {\n        _warnOnce(\n            `no stock theme exists with the name '${name}' and no ` +\n                \"custom chart theme with that name was supplied to 'customChartThemes'\"\n        );\n    }\n\n    return customChartTheme as AgChartTheme;\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { AgCartesianAxisType } from 'ag-charts-community';\n\nexport const ALL_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'grouped-category', 'log', 'time'];\n\nexport function getLegacyAxisType(chartType: ChartType): [AgCartesianAxisType, AgCartesianAxisType] | undefined {\n    switch (chartType) {\n        case 'bar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return ['number', 'category'];\n        case 'groupedBar':\n            return ['number', 'grouped-category'];\n        case 'column':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'line':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'histogram':\n            return ['category', 'number'];\n        case 'groupedColumn':\n            return ['grouped-category', 'number'];\n        case 'scatter':\n        case 'bubble':\n            return ['number', 'number'];\n        default:\n            return undefined;\n    }\n}\n", "// deepMerge\nfunction emptyTarget(value: any) {\n    return Array.isArray(value) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value: any, options: any) {\n    return options.clone !== false && options.isMergeableObject(value)\n        ? deepMerge(emptyTarget(value), value, options)\n        : value;\n}\n\nfunction defaultArrayMerge(target: any, source: any, options: any) {\n    return target.concat(source).map(function (element: any) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\n\nfunction getMergeFunction(key: string, options: any) {\n    if (!options.customMerge) {\n        return deepMerge;\n    }\n    const customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target: any): any[] {\n    // @ts-ignore\n    return Object.getOwnPropertySymbols\n        ? // @ts-ignore\n          Object.getOwnPropertySymbols(target).filter(function (symbol) {\n              return target.propertyIsEnumerable(symbol);\n          })\n        : [];\n}\n\nfunction getKeys(target: any): any[] {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object: any, property: string) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target: any, key: string) {\n    return (\n        propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,\n        !(\n            Object.hasOwnProperty.call(target, key) && // unsafe if they exist up the prototype chain,\n            Object.propertyIsEnumerable.call(target, key)\n        )\n    ); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target: Record<string, any> = {}, source: Record<string, any> = {}, options: any) {\n    const destination: any = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function (key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function (key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\n\nfunction defaultIsMergeableObject(value: any): boolean {\n    return isNonNullObject(value) && !isSpecial(value);\n}\n\nfunction isNonNullObject(value: any): boolean {\n    return !!value && typeof value === 'object';\n}\n\nfunction isSpecial(value: any): boolean {\n    const stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\n\nexport function deepMerge<T>(target: T, source: T, options?: any): T;\nexport function deepMerge(target: any, source: any, options?: any): any;\nexport function deepMerge(target: any, source: any, options?: any): any {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n    const sourceIsArray = Array.isArray(source);\n    const targetIsArray = Array.isArray(target);\n    const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\n// END - deep merge\n\nexport function get(source: any, expression: string, defaultValue: any): any {\n    if (source == null) {\n        return defaultValue;\n    }\n\n    const keys = expression.split('.');\n    let objectToRead = source;\n\n    while (keys.length > 1) {\n        objectToRead = objectToRead[keys.shift()!];\n\n        if (objectToRead == null) {\n            return defaultValue;\n        }\n    }\n\n    const value = objectToRead[keys[0]];\n\n    return value != null ? value : defaultValue;\n}\n\nexport function set(target: any, expression: string, value: any) {\n    if (target == null) {\n        return;\n    }\n\n    const keys = expression.split('.');\n\n    let objectToUpdate = target;\n    // Create empty objects\n    keys.forEach((key, i) => {\n        if (!objectToUpdate[key]) {\n            objectToUpdate[key] = {};\n        }\n\n        if (i < keys.length - 1) {\n            objectToUpdate = objectToUpdate[key];\n        }\n    });\n\n    objectToUpdate[keys[keys.length - 1]] = value;\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellRange,\n    ChartType,\n    IAggFunc,\n    IRangeService,\n    PartialCellRange,\n    SeriesChartType,\n    SeriesGroupType,\n} from '@ag-grid-community/core';\nimport { BeanStub, CellRangeType, _includes } from '@ag-grid-community/core';\nimport type { AgCartesianAxisType } from 'ag-charts-community';\n\nimport type { ChartDatasourceParams } from '../datasource/chartDatasource';\nimport { ChartDatasource } from '../datasource/chartDatasource';\nimport { ChartColumnService } from '../services/chartColumnService';\nimport type { ChartTranslationService } from '../services/chartTranslationService';\nimport { getMaxNumSeries, getSeriesType, isComboChart, isHierarchical } from '../utils/seriesTypeMapper';\nimport { ComboChartModel } from './comboChartModel';\n\nexport interface ColState {\n    column?: AgColumn;\n    colId: string;\n    displayName: string | null;\n    selected?: boolean;\n    order: number;\n}\n\nexport interface ChartModelParams {\n    chartId: string;\n    pivotChart?: boolean;\n    chartType: ChartType;\n    chartThemeName: string;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    cellRange: PartialCellRange;\n    suppressChartRanges?: boolean;\n    unlinkChart?: boolean;\n    crossFiltering?: boolean;\n    seriesChartTypes?: SeriesChartType[];\n    seriesGroupType?: SeriesGroupType;\n}\n\nexport class ChartDataModel extends BeanStub {\n    public static DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n\n    private rangeService: IRangeService;\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.rangeService = beans.rangeService!;\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    public readonly params: ChartModelParams;\n\n    // this is used to associate chart ranges with charts\n    public readonly chartId: string;\n\n    public suppressChartRanges: boolean;\n    public switchCategorySeries: boolean;\n    public aggFunc?: string | IAggFunc;\n    public pivotChart: boolean;\n    public categoryAxisType?: AgCartesianAxisType;\n\n    public chartType: ChartType;\n    public chartThemeName: string;\n    public unlinked = false;\n    public chartData: any[] = [];\n    public groupChartData: any[] | undefined;\n    public valueColState: ColState[] = [];\n    public dimensionColState: ColState[] = [];\n    public columnNames: { [p: string]: string[] } = {};\n\n    public valueCellRange?: CellRange;\n    public dimensionCellRange?: CellRange;\n\n    public comboChartModel: ComboChartModel;\n    private chartColumnService: ChartColumnService;\n    private datasource: ChartDatasource;\n\n    public referenceCellRange: PartialCellRange;\n    public suppliedCellRange: PartialCellRange;\n\n    public crossFiltering = false;\n\n    private grouping = false;\n\n    public seriesGroupType?: SeriesGroupType;\n\n    public constructor(params: ChartModelParams) {\n        super();\n\n        this.params = params;\n        this.chartId = params.chartId;\n        this.setParams(params);\n    }\n\n    private setParams(params: ChartModelParams): void {\n        const {\n            chartType,\n            pivotChart,\n            chartThemeName,\n            switchCategorySeries,\n            aggFunc,\n            cellRange,\n            suppressChartRanges,\n            unlinkChart,\n            crossFiltering,\n            seriesGroupType,\n        } = params;\n        this.chartType = chartType;\n        this.pivotChart = pivotChart ?? false;\n        this.chartThemeName = chartThemeName;\n        this.switchCategorySeries = !!switchCategorySeries;\n        this.aggFunc = aggFunc;\n        this.referenceCellRange = cellRange;\n        this.suppliedCellRange = cellRange;\n        this.suppressChartRanges = suppressChartRanges ?? false;\n        this.unlinked = !!unlinkChart;\n        this.crossFiltering = !!crossFiltering;\n        this.seriesGroupType = seriesGroupType;\n    }\n\n    public postConstruct(): void {\n        this.datasource = this.createManagedBean(new ChartDatasource());\n        this.chartColumnService = this.createManagedBean(new ChartColumnService());\n        this.comboChartModel = this.createManagedBean(new ComboChartModel(this));\n        this.updateCellRanges({ setColsFromRange: true });\n        this.updateData();\n    }\n\n    public updateModel(params: ChartModelParams): void {\n        const { cellRange, seriesChartTypes } = params;\n\n        if (cellRange !== this.suppliedCellRange) {\n            this.dimensionCellRange = undefined;\n            this.valueCellRange = undefined;\n        }\n\n        this.setParams(params);\n\n        this.updateSelectedDimensions(cellRange?.columns as AgColumn[]);\n        this.updateCellRanges({ setColsFromRange: true });\n\n        const shouldUpdateComboModel = this.isComboChart() || seriesChartTypes;\n        if (shouldUpdateComboModel) {\n            this.comboChartModel.update(seriesChartTypes);\n        }\n\n        if (!this.unlinked) {\n            this.updateData();\n        }\n    }\n\n    public updateCellRanges(params?: {\n        updatedColState?: ColState;\n        resetOrder?: boolean;\n        maintainColState?: boolean;\n        setColsFromRange?: boolean;\n        fromModelUpdate?: boolean;\n    }): void {\n        const { updatedColState, resetOrder, maintainColState, setColsFromRange, fromModelUpdate } = params ?? {};\n        if (this.valueCellRange) {\n            this.referenceCellRange = this.valueCellRange;\n        }\n\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n\n        if (updatedColState) {\n            this.updateColumnState(updatedColState, resetOrder);\n        }\n\n        this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n        this.setValueCellRange(valueCols, allColsFromRanges, setColsFromRange);\n\n        if (!updatedColState && !maintainColState) {\n            this.resetColumnState(fromModelUpdate || setColsFromRange);\n            // dimension / category cell range could be out of sync after resetting column state when row grouping\n            this.syncDimensionCellRange();\n        }\n\n        this.comboChartModel.updateSeriesChartTypes();\n    }\n\n    public updateData(): void {\n        const { startRow, endRow } = this.getRowIndexes();\n\n        if (this.pivotChart) {\n            this.resetColumnState();\n        }\n\n        this.grouping = this.isGrouping();\n\n        const params: ChartDatasourceParams = {\n            aggFunc: this.aggFunc,\n            dimensionCols: this.getSelectedDimensions(),\n            grouping: this.grouping,\n            pivoting: this.isPivotActive(),\n            crossFiltering: this.crossFiltering,\n            valueCols: this.getSelectedValueCols(),\n            startRow,\n            endRow,\n            isScatter: _includes(['scatter', 'bubble'], this.chartType),\n        };\n\n        const { chartData, columnNames, groupChartData } = this.datasource.getData(params);\n\n        this.chartData = chartData;\n        this.groupChartData = groupChartData;\n        this.columnNames = columnNames;\n        this.categoryAxisType = undefined;\n    }\n\n    public isGrouping(): boolean {\n        const usingTreeData = this.gos.get('treeData');\n        const groupedCols = usingTreeData ? null : this.chartColumnService.getRowGroupColumns();\n        const isGroupActive = usingTreeData || (groupedCols && groupedCols.length > 0);\n\n        // charts only group when the selected category is a group column\n        const colIds = this.getSelectedDimensions().map(({ colId }) => colId);\n        const displayedGroupCols = this.chartColumnService.getGroupDisplayColumns();\n        const groupDimensionSelected = displayedGroupCols\n            .map((col) => col.getColId())\n            .some((id) => colIds.includes(id));\n        return !!isGroupActive && groupDimensionSelected;\n    }\n\n    public getSelectedValueCols(): AgColumn[] {\n        return this.valueColState.filter((cs) => cs.selected).map((cs) => cs.column!);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.dimensionColState.filter((cs) => cs.selected);\n    }\n\n    public getColDisplayName(col: AgColumn): string | null {\n        return this.chartColumnService.getColDisplayName(col);\n    }\n\n    public isPivotMode(): boolean {\n        return this.chartColumnService.isPivotMode();\n    }\n\n    public getChartDataType(colId: string): string | undefined {\n        const column = this.chartColumnService.getColumn(colId);\n        return column ? column.getColDef().chartDataType : undefined;\n    }\n\n    private isPivotActive(): boolean {\n        return this.chartColumnService.isPivotActive();\n    }\n\n    private createCellRange(type: CellRangeType, ...columns: AgColumn[]): CellRange {\n        return {\n            id: this.chartId, // set range ID to match chart ID so we can identify changes to the ranges for this chart\n            startRow: this.referenceCellRange.startRow,\n            endRow: this.referenceCellRange.endRow,\n            columns,\n            startColumn:\n                type === CellRangeType.DIMENSION || this.referenceCellRange.startColumn == null\n                    ? columns[0]\n                    : this.referenceCellRange.startColumn,\n            type,\n        };\n    }\n\n    private getAllColumnsFromRanges(): Set<AgColumn> {\n        if (this.pivotChart) {\n            return new Set(this.chartColumnService.getAllDisplayedColumns());\n        }\n\n        const columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n\n        if (this.dimensionCellRange) {\n            columns.push(...this.dimensionCellRange.columns);\n        }\n\n        if (this.valueCellRange) {\n            columns.push(...this.valueCellRange.columns);\n        }\n\n        return new Set(columns as AgColumn[]);\n    }\n\n    private getRowIndexes(): { startRow: number; endRow: number } {\n        let startRow = 0,\n            endRow = 0;\n        const { rangeService, valueCellRange, dimensionCellRange } = this;\n\n        // Not all chart types require a value series (e.g. hierarchical charts),\n        // so fall back to using the dimension cell range for inferring row indices\n        const cellRange = valueCellRange || dimensionCellRange;\n\n        if (rangeService && cellRange) {\n            startRow = rangeService.getRangeStartRow(cellRange).rowIndex;\n\n            // when the last row the cell range is a pinned 'bottom' row, the `endRow` index is set to -1 which results\n            // in the ChartDatasource processing all non pinned rows from the `startRow` index.\n            const endRowPosition = rangeService.getRangeEndRow(cellRange);\n            endRow = endRowPosition.rowPinned === 'bottom' ? -1 : endRowPosition.rowIndex;\n        }\n\n        return { startRow, endRow };\n    }\n\n    private resetColumnState(suppressSelectAutoGroupCol?: boolean): void {\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allCols = this.getAllColumnsFromRanges();\n        const isInitialising = this.valueColState.length < 1;\n\n        this.dimensionColState = [];\n        this.valueColState = [];\n\n        const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n        let hasSelectedDimension = false;\n        let order = 1;\n\n        const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n\n        dimensionCols.forEach((column) => {\n            const isAutoGroupCol = column.getColId() === 'ag-Grid-AutoColumn';\n\n            let selected = false;\n            if (this.crossFiltering && this.aggFunc) {\n                if (aggFuncDimension.getColId() === column.getColId()) {\n                    selected = true;\n                }\n            } else {\n                selected =\n                    isAutoGroupCol && !suppressSelectAutoGroupCol\n                        ? true\n                        : (!hasSelectedDimension || supportsMultipleDimensions) && allCols.has(column);\n            }\n\n            this.dimensionColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected,\n                order: order++,\n            });\n\n            if (selected) {\n                hasSelectedDimension = true;\n            }\n        });\n\n        const defaultCategory = {\n            colId: ChartDataModel.DEFAULT_CATEGORY,\n            displayName: this.chartTranslationService.translate('defaultCategory'),\n            selected: !hasSelectedDimension, // if no dimensions in range select the default\n            order: 0,\n        };\n\n        this.dimensionColState.unshift(defaultCategory);\n\n        const valueColumnsFromReferenceRange = (this.referenceCellRange.columns as AgColumn[]).filter((c) =>\n            valueCols.has(c)\n        );\n\n        valueCols.forEach((column) => {\n            // first time the value cell range is set, preserve the column order from the supplied range\n            if (isInitialising && _includes(this.referenceCellRange.columns, column)) {\n                column = valueColumnsFromReferenceRange.shift()!;\n            }\n\n            this.valueColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected: allCols.has(column),\n                order: order++,\n            });\n        });\n    }\n\n    private updateColumnState(updatedCol: ColState, resetOrder?: boolean): void {\n        const idsMatch = (cs: ColState) => cs.colId === updatedCol.colId;\n        const { dimensionColState, valueColState } = this;\n\n        // Determine whether the specified column is a dimension or value column\n        const matchedDimensionColState = dimensionColState.find(idsMatch);\n        const matchedValueColState = valueColState.find(idsMatch);\n\n        if (matchedDimensionColState) {\n            // For non-hierarchical chart types, only one dimension can be selected\n            const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n            if (!supportsMultipleDimensions) {\n                // Determine which column should end up selected, if any\n                const selectedColumnState = updatedCol.selected\n                    ? matchedDimensionColState\n                    : dimensionColState\n                          .filter((cs) => cs !== matchedDimensionColState)\n                          .find(({ selected }) => selected);\n                // Update the selection state of all dimension columns\n                dimensionColState.forEach((cs) => (cs.selected = cs === selectedColumnState));\n            } else {\n                // Update the selection state of the specified dimension column\n                matchedDimensionColState.selected = updatedCol.selected;\n            }\n        } else if (matchedValueColState) {\n            // Update the selection state of the specified value column\n            matchedValueColState.selected = updatedCol.selected;\n        }\n\n        const allColumns = [...dimensionColState, ...valueColState];\n        const orderedColIds: string[] = [];\n\n        if (!resetOrder) {\n            // calculate new order\n            allColumns.forEach((col: ColState, i: number) => {\n                if (i === updatedCol.order) {\n                    orderedColIds.push(updatedCol.colId);\n                }\n\n                if (col.colId !== updatedCol.colId) {\n                    orderedColIds.push(col.colId);\n                }\n            });\n\n            // update col state with new order\n            allColumns.forEach((col) => {\n                const order = orderedColIds.indexOf(col.colId);\n                col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n            });\n        }\n\n        this.reorderColState();\n    }\n\n    private reorderColState(): void {\n        const ascColStateOrder = (a: ColState, b: ColState) => a.order - b.order;\n        this.dimensionColState.sort(ascColStateOrder);\n        this.valueColState.sort(ascColStateOrder);\n    }\n\n    private setDimensionCellRange(\n        dimensionCols: Set<AgColumn>,\n        colsInRange: Set<AgColumn>,\n        updatedColState?: ColState\n    ): void {\n        this.dimensionCellRange = undefined;\n        const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n\n        if (!updatedColState && !this.dimensionColState.length) {\n            const selectedCols = new Array<AgColumn>();\n            // use first dimension column in range by default, or all dimension columns for hierarchical charts\n            dimensionCols.forEach((col) => {\n                if ((selectedCols.length > 0 && !supportsMultipleDimensions) || !colsInRange.has(col)) {\n                    return;\n                }\n                selectedCols.push(col);\n            });\n            if (selectedCols.length > 0) {\n                this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n            }\n            return;\n        }\n\n        let selectedDimensionColStates = updatedColState ? [updatedColState] : [];\n        if (this.crossFiltering && this.aggFunc) {\n            const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n            selectedDimensionColStates = this.dimensionColState.filter(\n                (cs) => cs.colId === aggFuncDimension.getColId()\n            );\n        } else if (\n            supportsMultipleDimensions ||\n            selectedDimensionColStates.length === 0 ||\n            selectedDimensionColStates.some(({ column }) => !column || !dimensionCols.has(column))\n        ) {\n            selectedDimensionColStates = this.dimensionColState.filter((cs) => cs.selected);\n        }\n\n        const isDefaultCategory =\n            selectedDimensionColStates.length === 1\n                ? selectedDimensionColStates[0].colId === ChartDataModel.DEFAULT_CATEGORY\n                : false;\n        const selectedColumns = selectedDimensionColStates\n            .map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedColumns.length > 0 && !isDefaultCategory) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedColumns);\n        }\n    }\n\n    private setValueCellRange(valueCols: Set<AgColumn>, colsInRange: Set<AgColumn>, setColsFromRange?: boolean): void {\n        this.valueCellRange = undefined;\n\n        const selectedValueCols: AgColumn[] = [];\n\n        const maxSelection = getMaxNumSeries(this.chartType);\n        let numSelected = 0;\n\n        valueCols.forEach((col) => {\n            if (setColsFromRange) {\n                if ((maxSelection == null || numSelected < maxSelection) && colsInRange.has(col)) {\n                    selectedValueCols.push(col);\n                    numSelected++;\n                }\n            } else {\n                if (this.valueColState.some((colState) => colState.selected && colState.colId === col.getColId())) {\n                    selectedValueCols.push(col);\n                }\n            }\n        });\n\n        if (selectedValueCols.length > 0) {\n            let orderedColIds: string[] = [];\n\n            if (this.valueColState.length > 0) {\n                orderedColIds = this.valueColState.map((c) => c.colId);\n            } else {\n                colsInRange.forEach((c) => orderedColIds.push(c.getColId()));\n            }\n\n            selectedValueCols.sort((a, b) => orderedColIds.indexOf(a.getColId()) - orderedColIds.indexOf(b.getColId()));\n\n            this.valueCellRange = this.createCellRange(CellRangeType.VALUE, ...selectedValueCols);\n        }\n    }\n\n    public resetCellRanges(dimension: boolean, value: boolean): void {\n        if (!dimension && !value) {\n            return;\n        }\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n        if (dimension) {\n            this.setDimensionCellRange(dimensionCols, allColsFromRanges);\n        }\n        if (value) {\n            this.setValueCellRange(valueCols, allColsFromRanges);\n        }\n    }\n\n    private updateSelectedDimensions(columns: AgColumn[]): void {\n        const colIdSet = new Set(columns.map((column) => column.getColId()));\n\n        // For non-hierarchical chart types, only one dimension can be selected\n        const supportsMultipleDimensions = isHierarchical(getSeriesType(this.chartType));\n        if (!supportsMultipleDimensions) {\n            // Determine which column should end up selected, if any\n            // if no dimension found in supplied columns use the default category (always index = 0)\n            const foundColState =\n                this.dimensionColState.find((colState) => colIdSet.has(colState.colId)) || this.dimensionColState[0];\n            const selectedColumnId = foundColState.colId;\n            // Update the selection state of all dimension columns\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: colState.colId === selectedColumnId,\n            }));\n        } else {\n            // Update the selection state of all dimension columns, selecting only the provided columns from the chart model\n            const foundColStates = this.dimensionColState.filter((colState) => colIdSet.has(colState.colId));\n            const selectedColumnIds = new Set(foundColStates.map((colState) => colState.colId));\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: selectedColumnIds.has(colState.colId),\n            }));\n        }\n    }\n\n    private syncDimensionCellRange() {\n        const selectedDimensions = this.getSelectedDimensions();\n        if (selectedDimensions.length === 0) return;\n        const selectedCols = selectedDimensions\n            .map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedCols.length > 0) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n        }\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return isComboChart(chartType ?? this.chartType);\n    }\n}\n", "import type {\n    AgColumn,\n    AgColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    IAggFunc,\n    IAggregationStage,\n    IClientSideRowModel,\n    IRowModel,\n    IRowNodeStage,\n    PartialCellRange,\n    PivotResultColsService,\n    RowNode,\n    RowNodeSorter,\n    SortController,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, ModuleNames, ModuleRegistry, _includes, _last, _values, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ColState } from '../model/chartDataModel';\nimport { ChartDataModel } from '../model/chartDataModel';\n\nexport interface ChartDatasourceParams {\n    dimensionCols: ColState[];\n    grouping: boolean;\n    pivoting: boolean;\n    crossFiltering: boolean;\n    valueCols: AgColumn[];\n    startRow: number;\n    endRow: number;\n    isScatter: boolean;\n    aggFunc?: string | IAggFunc;\n    referenceCellRange?: PartialCellRange;\n}\n\ninterface IData {\n    chartData: any[];\n    columnNames: { [key: string]: string[] };\n    groupChartData?: any[];\n}\n\nexport class ChartDatasource extends BeanStub {\n    private gridRowModel: IRowModel;\n    private pivotResultColsService: PivotResultColsService;\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private rowNodeSorter: RowNodeSorter;\n    private sortController: SortController;\n    private aggregationStage?: IRowNodeStage & IAggregationStage;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.sortController = beans.sortController;\n        this.gridRowModel = beans.rowModel;\n        this.columnModel = beans.columnModel;\n        this.valueService = beans.valueService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.aggregationStage = beans.aggregationStage as (IRowNodeStage & IAggregationStage) | undefined;\n    }\n\n    public getData(params: ChartDatasourceParams): IData {\n        if (params.crossFiltering) {\n            if (params.grouping) {\n                _warnOnce('crossing filtering with row grouping is not supported.');\n                return { chartData: [], columnNames: {} };\n            }\n\n            if (!this.gos.isRowModelType('clientSide')) {\n                _warnOnce('crossing filtering is only supported in the client side row model.');\n                return { chartData: [], columnNames: {} };\n            }\n        }\n\n        const isServerSide = this.gos.isRowModelType('serverSide');\n        if (isServerSide && params.pivoting) {\n            this.updatePivotKeysForSSRM();\n        }\n\n        const result = this.extractRowsFromGridRowModel(params);\n        result.chartData = this.aggregateRowsByDimension(params, result.chartData);\n        return result;\n    }\n\n    private extractRowsFromGridRowModel(params: ChartDatasourceParams): IData {\n        const { crossFiltering, startRow, endRow, valueCols, dimensionCols, grouping } = params;\n        let extractedRowData: any[] = [];\n        const columnNames: { [key: string]: string[] } = {};\n\n        // maps used to keep track of expanded groups that need to be removed\n        const groupNodeIndexes: { [key: string]: number } = {};\n        const groupsToRemove: { [key: string]: number } = {};\n\n        // only used when cross filtering\n        let filteredNodes: { [key: string]: RowNode } = {};\n        let allRowNodes: RowNode[] = [];\n\n        let numRows;\n        if (crossFiltering) {\n            filteredNodes = this.getFilteredRowNodes();\n            allRowNodes = this.getAllRowNodes();\n            numRows = allRowNodes.length;\n        } else {\n            // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n            // the last displayed row, not where the range ends.\n            const modelLastRow = this.gridRowModel.getRowCount() - 1;\n            // inclusivity is wrong for end row, so can't detect 0 rows properly\n            const hasNoRange =\n                startRow === endRow && startRow === 0 && dimensionCols.length === 0 && valueCols.length === 0;\n            if (hasNoRange) {\n                numRows = 0;\n            } else {\n                const rangeLastRow = endRow >= 0 ? Math.min(endRow, modelLastRow) : modelLastRow;\n                numRows = rangeLastRow - startRow + 1;\n            }\n        }\n\n        if (numRows > 0) {\n            valueCols.forEach((col) => {\n                let columnNamesArr: string[] = [];\n\n                // pivot keys should be added first\n                const pivotKeys = col.getColDef().pivotKeys;\n                if (pivotKeys) {\n                    columnNamesArr = pivotKeys.slice();\n                }\n\n                // then add column header name to results\n                const headerName = col.getColDef().headerName;\n                if (headerName) {\n                    columnNamesArr.push(headerName);\n                }\n\n                // add array of column names to results\n                if (columnNamesArr.length > 0) {\n                    columnNames[col.getId()] = columnNamesArr;\n                }\n            });\n        }\n\n        let numRemovedNodes = 0;\n\n        let id = 0;\n\n        for (let i = 0; i < numRows; i++) {\n            const rowNode = crossFiltering ? allRowNodes[i] : this.gridRowModel.getRow(i + startRow)!;\n\n            if (rowNode.footer || rowNode.detail) {\n                numRemovedNodes++;\n                continue;\n            }\n\n            const data: any = {};\n            // first get data for dimensions columns\n            dimensionCols.forEach((col) => {\n                const colId = col.colId;\n                const column = this.columnModel.getCol(colId);\n\n                if (column) {\n                    const valueObject = this.valueService.getValue(column, rowNode);\n\n                    // when grouping we also need to build up multi category labels for charts\n                    if (grouping) {\n                        const valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';\n\n                        // traverse parents to extract group label path\n                        const labels = ChartDatasource.getGroupLabels(rowNode, valueString);\n\n                        data[colId] = {\n                            labels,\n                            // this is needed so that standalone can handle animations properly when data updates\n                            id: id++,\n                            toString: function () {\n                                return this.labels\n                                    .filter((l: string) => !!l)\n                                    .reverse()\n                                    .join(' - ');\n                            },\n                        };\n\n                        // keep track of group node indexes, so they can be padded when other groups are expanded\n                        if (rowNode.group) {\n                            groupNodeIndexes[labels.toString()] = i - numRemovedNodes;\n                        }\n\n                        // if node (group or leaf) has parents then it is expanded and should be removed\n                        const groupKey = labels.slice(1, labels.length).toString();\n\n                        if (groupKey) {\n                            groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n                        }\n                    } else {\n                        // leaf nodes can be directly added to dimension columns\n                        data[colId] = valueObject;\n                    }\n                } else {\n                    // introduce a default category when no dimensions exist with a value based off row index (+1)\n                    data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n                }\n            });\n\n            // then get data for value columns\n            valueCols.forEach((col) => {\n                const colId = col.getColId();\n                if (crossFiltering) {\n                    const filteredOutColId = colId + '-filtered-out';\n\n                    // add data value to value column\n                    const value = this.valueService.getValue(col, rowNode);\n                    const actualValue =\n                        value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n\n                    if (filteredNodes[rowNode.id as string]) {\n                        data[colId] = actualValue;\n                        data[filteredOutColId] = params.aggFunc || params.isScatter ? undefined : 0;\n                    } else {\n                        data[colId] = params.aggFunc || params.isScatter ? undefined : 0;\n                        data[filteredOutColId] = actualValue;\n                    }\n                } else {\n                    // add data value to value column\n                    let value = this.valueService.getValue(col, rowNode);\n\n                    // aggregated value\n                    if (value && Object.prototype.hasOwnProperty.call(value, 'toString')) {\n                        value = parseFloat(value.toString());\n                    }\n\n                    data[colId] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n                }\n            });\n\n            // add data to results\n            extractedRowData.push(data);\n        }\n\n        let groupChartData: any[] | undefined;\n        if (grouping) {\n            const groupIndexesToRemove = _values(groupsToRemove);\n            const allData = extractedRowData;\n            extractedRowData = [];\n            groupChartData = [];\n            for (let i = 0; i < allData.length; i++) {\n                (_includes(groupIndexesToRemove, i) ? groupChartData : extractedRowData).push(allData[i]);\n            }\n        }\n\n        return { chartData: extractedRowData, columnNames, groupChartData };\n    }\n\n    private aggregateRowsByDimension(params: ChartDatasourceParams, dataFromGrid: any[]): any[] {\n        const dimensionCols = params.dimensionCols;\n\n        if (!params.aggFunc || dimensionCols.length === 0) {\n            return dataFromGrid;\n        }\n\n        const lastCol = _last(dimensionCols);\n        const lastColId = lastCol && lastCol.colId;\n        const map: any = {};\n        const dataAggregated: any[] = [];\n\n        dataFromGrid.forEach((data) => {\n            let currentMap = map;\n\n            dimensionCols.forEach((col) => {\n                const colId = col.colId;\n                const key = data[colId];\n\n                if (colId === lastColId) {\n                    let groupItem = currentMap[key];\n\n                    if (!groupItem) {\n                        groupItem = { __children: [] };\n\n                        dimensionCols.forEach((dimCol) => {\n                            const dimColId = dimCol.colId;\n                            groupItem[dimColId] = data[dimColId];\n                        });\n\n                        currentMap[key] = groupItem;\n                        dataAggregated.push(groupItem);\n                    }\n\n                    groupItem.__children.push(data);\n                } else {\n                    // map of maps\n                    if (!currentMap[key]) {\n                        currentMap[key] = {};\n                    }\n\n                    currentMap = currentMap[key];\n                }\n            });\n        });\n\n        if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation', this.gridId)) {\n            const aggStage = this.aggregationStage!;\n            dataAggregated.forEach((groupItem) =>\n                params.valueCols.forEach((col) => {\n                    if (params.crossFiltering) {\n                        params.valueCols.forEach((valueCol) => {\n                            const colId = valueCol.getColId();\n\n                            // filtered data\n                            const dataToAgg = groupItem.__children\n                                .filter((child: any) => typeof child[colId] !== 'undefined')\n                                .map((child: any) => child[colId]);\n\n                            const aggResult: any = aggStage.aggregateValues(dataToAgg, params.aggFunc!);\n                            groupItem[valueCol.getId()] =\n                                aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n\n                            // filtered out data\n                            const filteredOutColId = `${colId}-filtered-out`;\n                            const dataToAggFiltered = groupItem.__children\n                                .filter((child: any) => typeof child[filteredOutColId] !== 'undefined')\n                                .map((child: any) => child[filteredOutColId]);\n\n                            const aggResultFiltered: any = aggStage.aggregateValues(dataToAggFiltered, params.aggFunc!);\n                            groupItem[filteredOutColId] =\n                                aggResultFiltered && typeof aggResultFiltered.value !== 'undefined'\n                                    ? aggResultFiltered.value\n                                    : aggResultFiltered;\n                        });\n                    } else {\n                        const dataToAgg = groupItem.__children.map((child: any) => child[col.getId()]);\n                        const aggResult = aggStage.aggregateValues(dataToAgg, params.aggFunc!);\n\n                        groupItem[col.getId()] =\n                            aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n                    }\n                })\n            );\n        }\n\n        return dataAggregated;\n    }\n\n    private updatePivotKeysForSSRM() {\n        const secondaryColumns = this.pivotResultColsService.getPivotResultCols()?.list;\n\n        if (!secondaryColumns) {\n            return;\n        }\n\n        // we don't know what the application will use for the pivot key separator (i.e. '_' or '|' ) as the\n        // secondary columns are provided to grid by the application via api.setSecondaryColumns()\n        const pivotKeySeparator = this.extractPivotKeySeparator(secondaryColumns);\n\n        // `pivotKeys` is not used by the SSRM for pivoting, so it is safe to reuse this colDef property. This way\n        // the same logic can be used for CSRM and SSRM to extract legend names in extractRowsFromGridRowModel()\n        secondaryColumns.forEach((col) => {\n            if (pivotKeySeparator === '') {\n                col.getColDef().pivotKeys = [];\n            } else {\n                const keys = col.getColId().split(pivotKeySeparator);\n                col.getColDef().pivotKeys = keys.slice(0, keys.length - 1);\n            }\n        });\n    }\n\n    private extractPivotKeySeparator(secondaryColumns: AgColumn[]) {\n        if (secondaryColumns.length === 0) {\n            return '';\n        }\n\n        const extractSeparator = (columnGroup: AgColumnGroup, childId: string): string => {\n            const groupId = columnGroup.getGroupId();\n            if (!columnGroup.getParent()) {\n                // removing groupId ('2000') from childId ('2000|Swimming') yields '|Swimming' so first char is separator\n                return childId.split(groupId)[1][0];\n            }\n            return extractSeparator(columnGroup.getParent()!, groupId);\n        };\n\n        const firstSecondaryCol = secondaryColumns[0];\n        if (firstSecondaryCol.getParent() == null) {\n            return '';\n        }\n        return extractSeparator(firstSecondaryCol.getParent()!, firstSecondaryCol.getColId());\n    }\n\n    private static getGroupLabels(rowNode: RowNode | null, initialLabel: string): string[] {\n        const labels = [initialLabel];\n        while (rowNode && rowNode.level !== 0) {\n            rowNode = rowNode.parent;\n            if (rowNode) {\n                labels.push(rowNode.key!);\n            }\n        }\n        return labels;\n    }\n\n    private getFilteredRowNodes() {\n        const filteredNodes: { [key: string]: RowNode } = {};\n        (this.gridRowModel as IClientSideRowModel).forEachNodeAfterFilterAndSort((rowNode: RowNode) => {\n            filteredNodes[rowNode.id as string] = rowNode;\n        });\n        return filteredNodes;\n    }\n\n    private getAllRowNodes() {\n        const allRowNodes: RowNode[] = [];\n        this.gridRowModel.forEachNode((rowNode: RowNode) => {\n            allRowNodes.push(rowNode);\n        });\n        return this.sortRowNodes(allRowNodes);\n    }\n\n    private sortRowNodes(rowNodes: RowNode[]): RowNode[] {\n        const sortOptions = this.sortController.getSortOptions();\n        const noSort = !sortOptions || sortOptions.length == 0;\n        if (noSort) return rowNodes;\n        return this.rowNodeSorter.doFullSort(rowNodes, sortOptions);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    FuncColsService,\n    IShowRowGroupColsService,\n    NamedBean,\n    RowNode,\n    RowPositionUtils,\n    ValueService,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nexport class ChartColumnService extends BeanStub implements NamedBean {\n    beanName = 'chartColumnService' as const;\n\n    private columnModel: ColumnModel;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n    private columnNameService: ColumnNameService;\n    private visibleColsService: VisibleColsService;\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private rowPositionUtils: RowPositionUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n        this.columnNameService = beans.columnNameService;\n        this.visibleColsService = beans.visibleColsService;\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n    }\n\n    private valueColsWithoutSeriesType: Set<string> = new Set();\n\n    public postConstruct(): void {\n        const clearValueCols = () => this.valueColsWithoutSeriesType.clear();\n        this.addManagedEventListeners({\n            newColumnsLoaded: clearValueCols,\n            rowDataUpdated: clearValueCols,\n        });\n    }\n\n    public getColumn(colId: string): AgColumn | null {\n        return this.columnModel.getColDefCol(colId);\n    }\n\n    public getAllDisplayedColumns(): AgColumn[] {\n        return this.visibleColsService.getAllCols();\n    }\n\n    public getColDisplayName(col: AgColumn): string | null {\n        return this.columnNameService.getDisplayNameForColumn(col, 'chart');\n    }\n\n    public getRowGroupColumns(): AgColumn[] {\n        return this.funcColsService.getRowGroupColumns();\n    }\n\n    public getGroupDisplayColumns(): AgColumn[] {\n        return this.showRowGroupColsService?.getShowRowGroupCols() ?? [];\n    }\n\n    public isPivotMode(): boolean {\n        return this.columnModel.isPivotMode();\n    }\n\n    public isPivotActive(): boolean {\n        return this.columnModel.isPivotActive();\n    }\n\n    public getChartColumns(): { dimensionCols: Set<AgColumn>; valueCols: Set<AgColumn> } {\n        const gridCols = this.columnModel.getCols();\n\n        const dimensionCols = new Set<AgColumn>();\n        const valueCols = new Set<AgColumn>();\n\n        gridCols.forEach((col) => {\n            const colDef = col.getColDef();\n            const chartDataType = colDef.chartDataType;\n\n            if (chartDataType) {\n                // chart data type was specified explicitly\n                switch (chartDataType) {\n                    case 'category':\n                    case 'time':\n                        dimensionCols.add(col);\n                        return;\n                    case 'series':\n                        valueCols.add(col);\n                        return;\n                    case 'excluded':\n                        return;\n                    default:\n                        _warnOnce(\n                            `unexpected chartDataType value '${chartDataType}' supplied, instead use 'category', 'series' or 'excluded'`\n                        );\n                        break;\n                }\n            }\n\n            if (colDef.colId === 'ag-Grid-AutoColumn') {\n                dimensionCols.add(col);\n                return;\n            }\n\n            if (!col.isPrimary()) {\n                valueCols.add(col);\n                return;\n            }\n\n            // if 'chartDataType' is not provided then infer type based data contained in first row\n            (this.isInferredValueCol(col) ? valueCols : dimensionCols).add(col);\n        });\n\n        return { dimensionCols, valueCols };\n    }\n\n    private isInferredValueCol(col: AgColumn): boolean {\n        const colId = col.getColId();\n        if (colId === 'ag-Grid-AutoColumn') {\n            return false;\n        }\n\n        const row = this.rowPositionUtils.getRowNode({ rowIndex: 0, rowPinned: null });\n\n        if (!row) {\n            return this.valueColsWithoutSeriesType.has(colId);\n        }\n\n        let cellValue = this.valueService.getValue(col, row);\n\n        if (cellValue == null) {\n            cellValue = this.extractLeafData(row, col);\n        }\n\n        if (cellValue != null && typeof cellValue.toNumber === 'function') {\n            cellValue = cellValue.toNumber();\n        }\n\n        const isNumber = typeof cellValue === 'number';\n\n        if (isNumber) {\n            this.valueColsWithoutSeriesType.add(colId);\n        }\n\n        return isNumber;\n    }\n\n    private extractLeafData(row: RowNode, col: AgColumn): any {\n        if (!row.allLeafChildren) {\n            return null;\n        }\n\n        for (let i = 0; i < row.allLeafChildren.length; i++) {\n            const childRow = row.allLeafChildren[i];\n            const value = this.valueService.getValue(col, childRow);\n\n            if (value != null) {\n                return value;\n            }\n        }\n\n        return null;\n    }\n\n    public override destroy(): void {\n        this.valueColsWithoutSeriesType.clear();\n        super.destroy();\n    }\n}\n", "import type { ChartType, SeriesChartType } from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ChartDataModel, ColState } from './chartDataModel';\n\nexport class ComboChartModel extends BeanStub {\n    public static SUPPORTED_COMBO_CHART_TYPES = ['line', 'groupedColumn', 'stackedColumn', 'area', 'stackedArea'];\n\n    public seriesChartTypes: SeriesChartType[];\n    public savedCustomSeriesChartTypes: SeriesChartType[];\n\n    // this control flag is used to only log warning for the initial user config\n    private suppressComboChartWarnings = false;\n    private chartDataModel: ChartDataModel;\n\n    public constructor(chartDataModel: ChartDataModel) {\n        super();\n        this.chartDataModel = chartDataModel;\n        this.seriesChartTypes = chartDataModel.params.seriesChartTypes ?? [];\n    }\n\n    public postConstruct(): void {\n        this.initComboCharts();\n    }\n\n    public update(seriesChartTypes?: SeriesChartType[]): void {\n        this.seriesChartTypes = seriesChartTypes ?? this.seriesChartTypes;\n        this.initComboCharts();\n        this.updateSeriesChartTypes();\n    }\n\n    private initComboCharts() {\n        const seriesChartTypesExist = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        const customCombo = this.chartDataModel.chartType === 'customCombo' || seriesChartTypesExist;\n        if (customCombo) {\n            // it is not necessary to supply a chart type for combo charts when `seriesChartTypes` is supplied\n            this.chartDataModel.chartType = 'customCombo';\n\n            // cache supplied `seriesChartTypes` to allow switching between different chart types in the settings panel\n            this.savedCustomSeriesChartTypes = this.seriesChartTypes || [];\n        }\n    }\n\n    public updateSeriesChartTypes(): void {\n        if (!this.chartDataModel.isComboChart()) {\n            return;\n        }\n\n        // ensure primary only chart types are not placed on secondary axis\n        this.seriesChartTypes = this.seriesChartTypes.map((seriesChartType) => {\n            const primaryOnly = ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(seriesChartType.chartType);\n            seriesChartType.secondaryAxis = primaryOnly ? false : seriesChartType.secondaryAxis;\n            return seriesChartType;\n        });\n\n        // note that when seriesChartTypes are supplied the chart type is also changed to 'customCombo'\n        if (this.chartDataModel.chartType === 'customCombo') {\n            this.updateSeriesChartTypesForCustomCombo();\n            return;\n        }\n\n        this.updateChartSeriesTypesForBuiltInCombos();\n    }\n\n    private updateSeriesChartTypesForCustomCombo() {\n        const seriesChartTypesSupplied = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        if (!seriesChartTypesSupplied && !this.suppressComboChartWarnings) {\n            _warnOnce(`'seriesChartTypes' are required when the 'customCombo' chart type is specified.`);\n        }\n\n        // ensure correct chartTypes are supplied\n        this.seriesChartTypes = this.seriesChartTypes.map((s) => {\n            if (!ComboChartModel.SUPPORTED_COMBO_CHART_TYPES.includes(s.chartType)) {\n                _warnOnce(\n                    `invalid chartType '${s.chartType}' supplied in 'seriesChartTypes', converting to 'line' instead.`\n                );\n                s.chartType = 'line';\n            }\n            return s;\n        });\n\n        const getSeriesChartType = (valueCol: ColState): SeriesChartType => {\n            if (!this.savedCustomSeriesChartTypes || this.savedCustomSeriesChartTypes.length === 0) {\n                this.savedCustomSeriesChartTypes = this.seriesChartTypes;\n            }\n\n            const providedSeriesChartType = this.savedCustomSeriesChartTypes.find((s) => s.colId === valueCol.colId);\n            if (!providedSeriesChartType) {\n                if (valueCol.selected && !this.suppressComboChartWarnings) {\n                    _warnOnce(`no 'seriesChartType' found for colId = '${valueCol.colId}', defaulting to 'line'.`);\n                }\n                return {\n                    colId: valueCol.colId,\n                    chartType: 'line',\n                    secondaryAxis: false,\n                };\n            }\n\n            return providedSeriesChartType;\n        };\n\n        const updatedSeriesChartTypes = this.chartDataModel.valueColState.map(getSeriesChartType);\n\n        this.seriesChartTypes = updatedSeriesChartTypes;\n\n        // also cache custom `seriesChartTypes` to allow for switching between different chart types\n        this.savedCustomSeriesChartTypes = updatedSeriesChartTypes;\n\n        // turn off warnings as first combo chart attempt has completed\n        this.suppressComboChartWarnings = true;\n    }\n\n    private updateChartSeriesTypesForBuiltInCombos() {\n        const { chartType, valueColState } = this.chartDataModel;\n\n        const primaryChartType: ChartType = chartType === 'columnLineCombo' ? 'groupedColumn' : 'stackedArea';\n        const secondaryChartType: ChartType = chartType === 'columnLineCombo' ? 'line' : 'groupedColumn';\n\n        const selectedCols = valueColState.filter((cs) => cs.selected);\n        const lineIndex = Math.ceil(selectedCols.length / 2);\n        this.seriesChartTypes = selectedCols.map((valueCol: ColState, i: number) => {\n            const seriesType = i >= lineIndex ? secondaryChartType : primaryChartType;\n            return { colId: valueCol.colId, chartType: seriesType, secondaryAxis: false };\n        });\n    }\n}\n", "import type {\n    ChartParamsCellRange,\n    ChartType,\n    IAggFunc,\n    UpdateChartParams,\n    UpdateCrossFilterChartParams,\n    UpdatePivotChartParams,\n    UpdateRangeChartParams,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides } from 'ag-charts-community';\nimport { _ModuleSupport } from 'ag-charts-community';\n\nimport type { CommonCreateChartParams } from '../../chartService';\nimport { getCanonicalChartType, getSeriesTypeIfExists, isComboChart, isEnterpriseChartType } from './seriesTypeMapper';\n\nconst validateIfDefined = <I, O = never>(validationFn: (value: NonNullable<I>) => boolean | O) => {\n    return (value: I | null | undefined): boolean | O => {\n        if (value == undefined) return true;\n        return validationFn(value as NonNullable<I>);\n    };\n};\n\nconst isString = (value: any): boolean => typeof value === 'string';\nconst isBoolean = (value: any): boolean => typeof value === 'boolean';\nconst isValidSeriesChartType = (value: any): boolean => typeof value === 'object';\nconst createWarnMessage =\n    (property: string, expectedType: string): ((value: any) => string) =>\n    (value: any) =>\n        `AG Grid - unable to update chart as invalid params supplied:  \\`${property}: ${value}\\`, expected ${expectedType}.`;\n\nconst createEnterpriseMessage = (feature: string) => {\n    const url = 'https://www.ag-grid.com/javascript-data-grid/integrated-charts-installation/';\n    return `${feature} is not supported in AG Charts Community (either 'ag-grid-charts-enterprise' or '@ag-grid-enterprise/charts-enterprise' hasn't been loaded). See ${url} for more details.`;\n};\n\ninterface ValidationFunction<T, K extends keyof T = keyof T, V = T[K]> {\n    property: K;\n    validationFn: (value: T[K]) => boolean | V;\n    warnMessage: (value: T[K]) => string;\n    warnIfFixed?: boolean;\n}\n\nexport class ChartParamsValidator {\n    private static legacyChartTypes: ChartType[] = ['doughnut'];\n\n    private static baseUpdateChartParams = [\n        'type',\n        'chartId',\n        'chartType',\n        'chartThemeName',\n        'chartThemeOverrides',\n        'unlinkChart',\n    ] as const;\n\n    private static isEnterprise(): boolean {\n        return _ModuleSupport.enterpriseModule.isEnterprise;\n    }\n\n    private static isValidChartType(value: string): value is ChartType {\n        return !!getSeriesTypeIfExists(value as ChartType) || isComboChart(value as ChartType);\n    }\n\n    private static isLegacyChartType(value: string): value is ChartType {\n        return ChartParamsValidator.legacyChartTypes.includes(value as ChartType);\n    }\n\n    private static validateChartType = validateIfDefined<\n        UpdateChartParams['chartType'],\n        Exclude<ChartType, 'doughnut'>\n    >((chartType) => {\n        if (this.isValidChartType(chartType)) return true;\n        if (this.isLegacyChartType(chartType)) {\n            const renamedChartType = getCanonicalChartType(chartType);\n            _warnOnce(`The chart type '${chartType}' has been deprecated. Please use '${renamedChartType}' instead.`);\n            return renamedChartType;\n        }\n        return false;\n    });\n\n    private static validateAgChartThemeOverrides = validateIfDefined<AgChartThemeOverrides>((themeOverrides) => {\n        // ensure supplied AgChartThemeOverrides is an object - can be improved if necessary?\n        return typeof themeOverrides === 'object';\n    });\n\n    private static validateChartParamsCellRange = validateIfDefined<ChartParamsCellRange>((cellRange) => {\n        // ensure supplied ChartParamsCellRange is an object - can be improved if necessary?\n        return typeof cellRange === 'object';\n    });\n\n    private static validateAggFunc = validateIfDefined<string | IAggFunc>((aggFunc) => {\n        // ensure supplied aggFunc is a `string` or `function` - can be improved if necessary?\n        return typeof aggFunc === 'string' || typeof aggFunc === 'function';\n    });\n\n    private static enterpriseChartTypeValidation: ValidationFunction<any> = {\n        property: 'chartType',\n        validationFn: validateIfDefined<ChartType>(\n            (chartType) => ChartParamsValidator.isEnterprise() || !chartType || !isEnterpriseChartType(chartType)\n        ),\n        warnMessage: (chartType) => createEnterpriseMessage(`The '${chartType}' chart type`),\n    };\n\n    private static switchCategorySeriesValidation: ValidationFunction<any> = {\n        property: 'switchCategorySeries',\n        validationFn: validateIfDefined<boolean, undefined>((switchCategorySeries) => {\n            if (!switchCategorySeries || ChartParamsValidator.isEnterprise()) {\n                return true;\n            }\n            return undefined;\n        }),\n        warnMessage: () => createEnterpriseMessage(`'switchCategorySeries' has been ignored as it`),\n        warnIfFixed: true,\n    };\n\n    private static commonUpdateValidations: ValidationFunction<any>[] = [\n        { property: 'chartId', validationFn: isString, warnMessage: createWarnMessage('chartId', 'string') },\n        {\n            property: 'chartType',\n            validationFn: ChartParamsValidator.validateChartType,\n            warnMessage: createWarnMessage('chartType', 'ChartType'),\n        },\n        {\n            property: 'chartThemeName',\n            validationFn: isString,\n            warnMessage: createWarnMessage('chartThemeName', 'string'),\n        },\n        {\n            property: 'chartThemeOverrides',\n            validationFn: ChartParamsValidator.validateAgChartThemeOverrides,\n            warnMessage: createWarnMessage('chartThemeOverrides', 'AgChartThemeOverrides'),\n        },\n        { property: 'unlinkChart', validationFn: isBoolean, warnMessage: createWarnMessage('unlinkChart', 'boolean') },\n    ];\n\n    private static cellRangeValidations: ValidationFunction<any>[] = [\n        {\n            property: 'cellRange',\n            validationFn: ChartParamsValidator.validateChartParamsCellRange,\n            warnMessage: createWarnMessage('cellRange', 'ChartParamsCellRange'),\n        },\n        {\n            property: 'suppressChartRanges',\n            validationFn: isBoolean,\n            warnMessage: createWarnMessage('suppressChartRanges', 'boolean'),\n        },\n        {\n            property: 'aggFunc',\n            validationFn: ChartParamsValidator.validateAggFunc,\n            warnMessage: createWarnMessage('aggFunc', 'string or IAggFunc'),\n        },\n        ChartParamsValidator.switchCategorySeriesValidation,\n    ];\n\n    public static validateUpdateParams(params: UpdateChartParams): boolean | UpdateChartParams {\n        const paramsToValidate = params as UpdateChartParams;\n        switch (paramsToValidate.type) {\n            case 'rangeChartUpdate':\n                return ChartParamsValidator.validateUpdateRangeChartParams(params as UpdateRangeChartParams);\n            case 'pivotChartUpdate':\n                return ChartParamsValidator.validateUpdatePivotChartParams(params as UpdatePivotChartParams);\n            case 'crossFilterChartUpdate':\n                return ChartParamsValidator.validateUpdateCrossFilterChartParams(\n                    params as UpdateCrossFilterChartParams\n                );\n            default:\n                _warnOnce(\n                    `Invalid value supplied for 'type': ${params.type}. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`\n                );\n                return false;\n        }\n    }\n\n    public static validateCreateParams(params: CommonCreateChartParams): boolean | CommonCreateChartParams {\n        return validateProperties(params, [\n            ChartParamsValidator.enterpriseChartTypeValidation,\n            ChartParamsValidator.switchCategorySeriesValidation,\n        ]);\n    }\n\n    private static validateUpdateRangeChartParams(params: UpdateRangeChartParams): boolean | UpdateRangeChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...ChartParamsValidator.commonUpdateValidations,\n            ChartParamsValidator.enterpriseChartTypeValidation,\n            ...ChartParamsValidator.cellRangeValidations,\n            {\n                property: 'seriesChartTypes',\n                validationFn: (value: any) =>\n                    value === undefined || (Array.isArray(value) && value.every(isValidSeriesChartType)),\n                warnMessage: createWarnMessage('seriesChartTypes', 'Array of SeriesChartType'),\n            },\n        ];\n\n        return validateProperties(\n            params,\n            validations,\n            [\n                ...ChartParamsValidator.baseUpdateChartParams,\n                'cellRange',\n                'suppressChartRanges',\n                'switchCategorySeries',\n                'aggFunc',\n                'seriesChartTypes',\n                'seriesGroupType',\n            ],\n            'UpdateRangeChartParams'\n        );\n    }\n\n    private static validateUpdatePivotChartParams(params: UpdatePivotChartParams): boolean | UpdatePivotChartParams {\n        const validations: ValidationFunction<any>[] = [...ChartParamsValidator.commonUpdateValidations];\n\n        return validateProperties(\n            params,\n            validations,\n            [...ChartParamsValidator.baseUpdateChartParams],\n            'UpdatePivotChartParams'\n        );\n    }\n\n    private static validateUpdateCrossFilterChartParams(\n        params: UpdateCrossFilterChartParams\n    ): boolean | UpdateCrossFilterChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...ChartParamsValidator.commonUpdateValidations,\n            ...ChartParamsValidator.cellRangeValidations,\n        ];\n\n        return validateProperties(\n            params,\n            validations,\n            [...ChartParamsValidator.baseUpdateChartParams, 'cellRange', 'suppressChartRanges', 'aggFunc'],\n            'UpdateCrossFilterChartParams'\n        );\n    }\n}\n\nfunction validateProperties<T extends object>(\n    params: T,\n    validations: ValidationFunction<T>[],\n    validPropertyNames?: (keyof T)[],\n    paramsType?: string\n): boolean | T {\n    let validatedProperties: T | undefined = undefined;\n    for (const validation of validations) {\n        const { property, validationFn, warnMessage, warnIfFixed } = validation;\n        if (property in params) {\n            const value = params[property];\n            const validationResult = validationFn(value);\n            if (validationResult === true) continue;\n            if (validationResult === false) {\n                _warnOnce(warnMessage(value));\n                return false;\n            }\n            // If the validation function returned a 'fix' value, we need to return an updated property set.\n            // First we clone the input set if there has not been a 'fix' encountered in a previous iteration:\n            validatedProperties = validatedProperties || { ...params };\n            /// Then we update the cloned object with the 'fixed' value\n            validatedProperties[property] = validationResult;\n            if (warnIfFixed) {\n                _warnOnce(warnMessage(value));\n            }\n        }\n    }\n\n    if (validPropertyNames) {\n        // Check for unexpected properties\n        for (const property in params) {\n            if (!validPropertyNames.includes(property as keyof T)) {\n                _warnOnce(`Unexpected property supplied. ${paramsType} does not contain: \\`${property}\\`.`);\n                return false;\n            }\n        }\n    }\n\n    // If one or more 'fixed' values were encountered, return the updated property set\n    if (validatedProperties) return validatedProperties;\n\n    return true;\n}\n", "import type { ChartType, SeriesChartType, SeriesGroupType } from '@ag-grid-community/core';\nimport type {\n    AgChartInstance,\n    AgChartOptions,\n    AgChartTheme,\n    AgChartThemeOverrides,\n    AgChartThemePalette,\n    AgCommonThemeableChartOptions,\n    AgCrosshairOptions,\n} from 'ag-charts-community';\nimport { AgCharts, _ModuleSupport, _Theme } from 'ag-charts-community';\n\nimport type { CrossFilteringContext } from '../../chartService';\nimport { deproxy } from '../utils/integration';\nimport { get } from '../utils/object';\nimport type { ChartSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType } from '../utils/seriesTypeMapper';\nimport { createAgChartTheme, lookupCustomChartTheme } from './chartTheme';\n\nexport interface ChartProxyParams {\n    chartInstance?: AgChartInstance;\n    chartType: ChartType;\n    customChartThemes?: { [name: string]: AgChartTheme };\n    parentElement: HTMLElement;\n    grouping: boolean;\n    getChartThemeName: () => string;\n    getChartThemes: () => string[];\n    getGridOptionsChartThemeOverrides: () => AgChartThemeOverrides | undefined;\n    getExtraPaddingDirections: () => ExtraPaddingDirection[];\n    apiChartThemeOverrides?: AgChartThemeOverrides;\n    crossFiltering: boolean;\n    crossFilterCallback: (event: any, reset?: boolean) => void;\n    chartThemeToRestore?: string;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes: SeriesChartType[];\n    translate: (toTranslate: string, defaultText?: string) => string;\n}\n\nexport type ExtraPaddingDirection = 'top' | 'right' | 'bottom' | 'left';\n\nexport interface FieldDefinition {\n    colId: string;\n    displayName: string | null;\n}\n\nexport interface UpdateParams {\n    data: any[];\n    groupData?: any[];\n    grouping: boolean;\n    categories: {\n        id: string;\n        name: string;\n        chartDataType?: string;\n    }[];\n    fields: FieldDefinition[];\n    chartId?: string;\n    getCrossFilteringContext: () => CrossFilteringContext;\n    seriesChartTypes: SeriesChartType[];\n    updatedOverrides?: AgChartThemeOverrides;\n    seriesGroupType?: SeriesGroupType;\n}\n\nexport abstract class ChartProxy<\n    TOptions extends AgChartOptions = AgChartOptions,\n    TSeries extends ChartSeriesType = ChartSeriesType,\n> {\n    private readonly isEnterpriseCharts: boolean;\n    protected readonly chartType: ChartType;\n    protected readonly standaloneChartType: TSeries;\n\n    protected readonly chart: AgChartInstance;\n    protected readonly crossFiltering: boolean;\n    protected readonly crossFilterCallback: (event: any, reset?: boolean) => void;\n\n    protected clearThemeOverrides = false;\n\n    protected constructor(protected readonly chartProxyParams: ChartProxyParams) {\n        this.isEnterpriseCharts = _ModuleSupport.enterpriseModule.isEnterprise;\n        this.chart = chartProxyParams.chartInstance!;\n        this.chartType = chartProxyParams.chartType;\n        this.crossFiltering = chartProxyParams.crossFiltering;\n        this.crossFilterCallback = chartProxyParams.crossFilterCallback;\n        this.standaloneChartType = getSeriesType(this.chartType) as TSeries;\n\n        if (this.chart == null) {\n            this.chart = AgCharts.create(this.getCommonChartOptions());\n        } else {\n            // On chart change, reset formatting panel changes.\n            this.clearThemeOverrides = true;\n        }\n    }\n\n    protected abstract getUpdateOptions(params: UpdateParams, commonChartOptions: TOptions): TOptions;\n\n    public crossFilteringReset(): void {\n        // only required in cartesian charts\n    }\n\n    public update(params: UpdateParams): void {\n        this.getChartRef().update(this.getUpdateOptions(params, this.getCommonChartOptions(params.updatedOverrides)));\n    }\n\n    public updateThemeOverrides(themeOverrides: AgChartThemeOverrides): void {\n        this.getChartRef().updateDelta({ theme: { overrides: themeOverrides } });\n    }\n\n    public getChart() {\n        return deproxy(this.chart);\n    }\n\n    public getChartRef() {\n        return this.chart;\n    }\n\n    public downloadChart(dimensions?: { width: number; height: number }, fileName?: string, fileFormat?: string) {\n        const { chart } = this;\n        const rawChart = deproxy(chart);\n        const imageFileName = fileName || (rawChart.title ? rawChart.title.text : 'chart');\n        const { width, height } = dimensions || {};\n\n        chart.download({ width, height, fileName: imageFileName, fileFormat });\n    }\n\n    public getChartImageDataURL(type?: string) {\n        return this.getChart().getCanvasDataURL(type);\n    }\n\n    private getChartOptions(): AgChartOptions {\n        return this.chart.getOptions();\n    }\n\n    public getChartThemeOverrides(): AgChartThemeOverrides {\n        const chartOptionsTheme = this.getChartOptions().theme as AgChartTheme;\n        return chartOptionsTheme.overrides ?? {};\n    }\n\n    public getChartPalette(): AgChartThemePalette | undefined {\n        return _Theme.getChartTheme(this.getChartOptions().theme).palette;\n    }\n\n    public setPaired(paired: boolean) {\n        // Special handling to make scatter charts operate in paired mode by default, where\n        // columns alternate between being X and Y (and size for bubble). In standard mode,\n        // the first column is used for X and every other column is treated as Y\n        // (or alternates between Y and size for bubble)\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        this.chart.updateDelta({ theme: { overrides: { [seriesType]: { paired } } } });\n    }\n\n    public isPaired(): boolean {\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        return get(this.getChartThemeOverrides(), `${seriesType}.paired`, true);\n    }\n\n    public lookupCustomChartTheme(themeName: string) {\n        return lookupCustomChartTheme(this.chartProxyParams, themeName);\n    }\n\n    public getSeriesGroupType(): SeriesGroupType | undefined {\n        return undefined;\n    }\n\n    protected transformCategoryData(data: any[], categoryKey: string): any[] {\n        // replace the values for the selected category with a complex object to allow for duplicated categories\n        return data.map((d, index) => {\n            const value = d[categoryKey];\n            const valueString = value && value.toString ? value.toString() : '';\n            const datum = { ...d };\n\n            datum[categoryKey] = { id: index, value, toString: () => valueString };\n\n            return datum;\n        });\n    }\n\n    private getCommonChartOptions(updatedOverrides?: AgChartThemeOverrides): TOptions & { mode: 'integrated' } {\n        // Only apply active overrides if chart is initialised.\n        const existingOptions = (this.clearThemeOverrides ? {} : this.chart?.getOptions() ?? {}) as TOptions;\n        const formattingPanelOverrides = this.chart != null ? this.getActiveFormattingPanelOverrides() : undefined;\n        this.clearThemeOverrides = false;\n\n        const theme = createAgChartTheme(\n            this.chartProxyParams,\n            this,\n            this.isEnterpriseCharts,\n            this.getChartThemeDefaults(),\n            updatedOverrides ?? formattingPanelOverrides\n        );\n\n        const newOptions = {\n            ...existingOptions,\n            mode: 'integrated',\n        } as const;\n        newOptions.theme = theme;\n        newOptions.container = this.chartProxyParams.parentElement;\n        return newOptions;\n    }\n\n    private getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        const seriesOverrides = this.getSeriesChartThemeDefaults();\n        const seriesChartOptions = seriesOverrides\n            ? {\n                  [this.standaloneChartType]: seriesOverrides,\n              }\n            : {};\n        const crosshair: AgCrosshairOptions = {\n            enabled: true,\n            snap: true,\n            label: {\n                enabled: false,\n            },\n        };\n        const common: AgCommonThemeableChartOptions = this.isEnterpriseCharts\n            ? {\n                  zoom: {\n                      enabled: true,\n                  },\n                  animation: {\n                      enabled: true,\n                      duration: 500,\n                  },\n                  axes: {\n                      number: { crosshair },\n                      category: { crosshair },\n                      log: { crosshair },\n                      time: { crosshair },\n                  },\n              }\n            : {};\n        common.minHeight = 0;\n        common.minWidth = 0;\n        common.navigator = {\n            enabled: false,\n        };\n        return {\n            common,\n            ...seriesChartOptions,\n        };\n    }\n\n    protected getSeriesChartThemeDefaults(): AgChartThemeOverrides[TSeries] {\n        return undefined;\n    }\n\n    private getActiveFormattingPanelOverrides(): AgChartThemeOverrides {\n        if (this.clearThemeOverrides) {\n            return {};\n        }\n\n        const inUseTheme = this.chart?.getOptions().theme as AgChartTheme;\n        return inUseTheme?.overrides ?? {};\n    }\n\n    public destroy({ keepChartInstance = false } = {}): AgChartInstance | undefined {\n        if (keepChartInstance) {\n            // Reset Charts animation state, so that future updates to this re-used chart instance\n            // behave as-if the chart is brand new. When switching chartTypes, this means we hide\n            // the fact we are reusing the chart instance; the user sees a new chart which behaves\n            // as-if it is a completely new and distinct chart instance.\n            this.chart.resetAnimations();\n            return this.chart;\n        }\n\n        this.destroyChart();\n    }\n\n    protected destroyChart(): void {\n        if (this.chart) {\n            this.chart.destroy();\n            (this.chart as any) = undefined;\n        }\n    }\n}\n", "import type { AgCartesianAxisType, AgChartInstance, AgPolarAxisOptions, _Scene } from 'ag-charts-community';\n\nexport function deproxy(chartOrProxy: AgChartInstance): AgChartActual {\n    if ((chartOrProxy as any).chart != null) {\n        return (chartOrProxy as any).chart;\n    }\n    return chartOrProxy as AgChartActual;\n}\n\n// Extensions to the public ag-charts-community API that Integrated Charts currently depends on for\n// correct operation. Over time we aim to eliminate these and only use the public API.\n//\n// AVOID ADDING MORE DEPENDENCIES ON THESE PRIVATE APIS.\n\nexport interface AgChartActual extends AgChartInstance {\n    title?: _Scene.Caption;\n    width: number;\n    height: number;\n    series: {\n        type: string;\n        toggleSeriesItem(itemId: string, enabled: boolean): void;\n        properties: {\n            [key: string]: any;\n            toJson(): any;\n        };\n    }[];\n    axes?: {\n        type: AgCartesianAxisType | AgPolarAxisOptions['type'];\n        direction: 'x' | 'y';\n    }[];\n    canvasElement: HTMLCanvasElement;\n    getCanvasDataURL(type?: string): string;\n    addEventListener(type: 'click', cb: (even: any) => void): void;\n    waitForUpdate(): Promise<void>;\n}\n\nexport type AgChartAxis = NonNullable<AgChartActual['axes']>[number];\nexport type AgChartAxisType = AgChartAxis['type'];\n", "import type {\n    AgAreaSeriesOptions,\n    AgCartesianAxisOptions,\n    AgCartesianAxisType,\n    AgCartesianChartOptions,\n    AgCartesianSeriesOptions,\n    AgChartTheme,\n    AgChartThemeName,\n    AgLineSeriesOptions,\n    AgRangeBarSeriesThemeableOptions,\n} from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\nexport abstract class CartesianChartProxy<\n    TSeries extends\n        | 'area'\n        | 'bar'\n        | 'histogram'\n        | 'line'\n        | 'scatter'\n        | 'bubble'\n        | 'waterfall'\n        | 'box-plot'\n        | 'range-area'\n        | 'range-bar',\n> extends ChartProxy<AgCartesianChartOptions, TSeries> {\n    protected crossFilteringAllPoints = new Set<string>();\n    protected crossFilteringSelectedPoints: string[] = [];\n\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected abstract getAxes(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianAxisOptions[];\n    protected abstract getSeries(params: UpdateParams): AgCartesianSeriesOptions[];\n\n    protected getUpdateOptions(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianChartOptions {\n        const axes = this.getAxes(params, commonChartOptions);\n\n        return {\n            ...commonChartOptions,\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n    }\n\n    protected getData(params: UpdateParams, axes: AgCartesianAxisOptions[]): any[] {\n        const supportsCrossFiltering = ['area', 'line'].includes(this.standaloneChartType);\n        return this.crossFiltering && supportsCrossFiltering\n            ? this.getCrossFilterData(params)\n            : this.getDataTransformedData(params, axes);\n    }\n\n    private getDataTransformedData(params: UpdateParams, axes: AgCartesianAxisOptions[]) {\n        // assumed that the first axis is always the \"category\" axis\n        const xAxisType = axes[0].type;\n        const { categories, data } = params;\n        const [category] = categories;\n        switch (xAxisType) {\n            case 'category':\n                return this.transformCategoryData(data, category.id);\n            case 'time':\n                return this.transformTimeData(data, category.id);\n            default:\n                return data;\n        }\n    }\n\n    protected getXAxisType(params: UpdateParams) {\n        if (params.grouping) {\n            return 'grouped-category';\n        } else if (this.isXAxisOfType(params, 'time', (value) => value instanceof Date)) {\n            return 'time';\n        } else if (this.isXAxisOfType(params, 'number')) {\n            return 'number';\n        }\n        return 'category';\n    }\n\n    private isXAxisOfType<T>(\n        params: UpdateParams,\n        type: AgCartesianAxisType,\n        isInstance?: (value: T) => boolean\n    ): boolean {\n        const [category] = params.categories;\n        if (category?.chartDataType) {\n            return category.chartDataType === type;\n        }\n        if (!isInstance) {\n            return false;\n        }\n        const testDatum = params.data[0];\n        if (!testDatum) {\n            return false;\n        }\n        return isInstance(testDatum[category.id]);\n    }\n\n    private transformTimeData(data: any[], categoryKey: string): any[] {\n        const firstValue = data[0]?.[categoryKey];\n        if (firstValue instanceof Date) {\n            return data;\n        }\n\n        return data.map((datum) => {\n            const value = datum[categoryKey];\n            return typeof value === 'string'\n                ? {\n                      ...datum,\n                      [categoryKey]: new Date(value),\n                  }\n                : datum;\n        });\n    }\n\n    public override crossFilteringReset(): void {\n        this.crossFilteringSelectedPoints = [];\n        this.crossFilteringAllPoints.clear();\n    }\n\n    protected crossFilteringPointSelected(point: string): boolean {\n        return this.crossFilteringSelectedPoints.length == 0 || this.crossFilteringSelectedPoints.includes(point);\n    }\n\n    protected crossFilteringDeselectedPoints(): boolean {\n        return (\n            this.crossFilteringSelectedPoints.length > 0 &&\n            this.crossFilteringAllPoints.size !== this.crossFilteringSelectedPoints.length\n        );\n    }\n\n    protected extractLineAreaCrossFilterSeries(\n        series: (AgLineSeriesOptions | AgAreaSeriesOptions)[],\n        params: UpdateParams\n    ) {\n        const [category] = params.categories;\n\n        const getYKey = (yKey: string) => {\n            if (this.standaloneChartType === 'area') {\n                const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n                return lastSelectedChartId === params.chartId ? yKey + '-total' : yKey;\n            }\n            return yKey + '-total';\n        };\n\n        return series.map((s) => {\n            s.yKey = getYKey(s.yKey!);\n            s.listeners = {\n                nodeClick: (e: any) => {\n                    const value = e.datum![s.xKey!];\n                    const multiSelection = e.event.metaKey || e.event.ctrlKey;\n                    this.crossFilteringAddSelectedPoint(multiSelection, value);\n                    this.crossFilterCallback(e);\n                },\n            };\n            s.marker = {\n                itemStyler: (p) => {\n                    const value = p.datum[category.id];\n                    return {\n                        fill: p.highlighted ? 'yellow' : p.fill,\n                        size: p.highlighted ? 14 : this.crossFilteringPointSelected(value) ? 8 : 0,\n                    };\n                },\n            };\n            if (this.standaloneChartType === 'area') {\n                (s as AgAreaSeriesOptions).fillOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n            if (this.standaloneChartType === 'line') {\n                (s as AgLineSeriesOptions).strokeOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n\n            return s;\n        });\n    }\n\n    private getCrossFilterData(params: UpdateParams): any[] {\n        this.crossFilteringAllPoints.clear();\n        const [category] = params.categories;\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n        const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n\n        return params.data.map((d) => {\n            const value = d[category.id];\n            this.crossFilteringAllPoints.add(value);\n\n            const pointSelected = this.crossFilteringPointSelected(value);\n            if (this.standaloneChartType === 'area' && lastSelectedChartId === params.chartId) {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n            if (this.standaloneChartType === 'line') {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n\n            return d;\n        });\n    }\n\n    private crossFilteringAddSelectedPoint(multiSelection: boolean, value: string): void {\n        multiSelection ? this.crossFilteringSelectedPoints.push(value) : (this.crossFilteringSelectedPoints = [value]);\n    }\n\n    protected isHorizontal(commonChartOptions: AgCartesianChartOptions): boolean {\n        const seriesType = this.standaloneChartType;\n        if (seriesType !== 'waterfall' && seriesType !== 'box-plot' && seriesType !== 'range-bar') {\n            return false;\n        }\n        const theme = commonChartOptions.theme;\n        const isHorizontal = (theme?: AgChartTheme | AgChartThemeName): boolean => {\n            const direction = (\n                (theme as AgChartTheme)?.overrides?.[seriesType]?.series as AgRangeBarSeriesThemeableOptions\n            )?.direction;\n            if (direction != null) {\n                return direction === 'horizontal';\n            }\n            if (typeof (theme as AgChartTheme)?.baseTheme === 'object') {\n                return isHorizontal((theme as AgChartTheme).baseTheme as any);\n            }\n            return false;\n        };\n        return isHorizontal(theme);\n    }\n}\n", "import type { AgAreaSeriesOptions, AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class AreaChartProxy extends CartesianChartProxy<'area'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgAreaSeriesOptions[] = params.fields.map(\n            (f) =>\n                ({\n                    type: this.standaloneChartType,\n                    xKey: category.id,\n                    xName: category.name,\n                    yKey: f.colId,\n                    yName: f.displayName,\n                    normalizedTo: this.chartType === 'normalizedArea' ? 100 : undefined,\n                    stacked: ['normalizedArea', 'stackedArea'].includes(this.chartType),\n                }) as AgAreaSeriesOptions\n        );\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n\n    private isNormalised() {\n        return !this.crossFiltering && this.chartType === 'normalizedArea';\n    }\n}\n", "import { _includes } from '@ag-grid-community/core';\nimport type { AgBarSeriesOptions, AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport { hexToRGBA } from '../../utils/color';\nimport { deepMerge } from '../../utils/object';\nimport { isStacked } from '../../utils/seriesTypeMapper';\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nconst HORIZONTAL_CHART_TYPES = new Set(['bar', 'groupedBar', 'stackedBar', 'normalizedBar']);\n\nexport class BarChartProxy extends CartesianChartProxy<'bar'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: this.isHorizontal() ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: this.isHorizontal() ? 'bottom' : 'left',\n            },\n        ];\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams): AgBarSeriesOptions[] {\n        const [category] = params.categories;\n        const series: AgBarSeriesOptions[] = params.fields.map(\n            (f) =>\n                ({\n                    type: this.standaloneChartType,\n                    direction: this.isHorizontal() ? 'horizontal' : 'vertical',\n                    stacked: this.crossFiltering || isStacked(this.chartType),\n                    normalizedTo: this.isNormalised() ? 100 : undefined,\n                    xKey: category.id,\n                    xName: category.name,\n                    yKey: f.colId,\n                    yName: f.displayName,\n                }) as AgBarSeriesOptions\n        );\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private extractCrossFilterSeries(series: AgBarSeriesOptions[]): AgBarSeriesOptions[] {\n        const palette = this.getChartPalette();\n\n        const updatePrimarySeries = (seriesOptions: AgBarSeriesOptions, index: number) => {\n            return {\n                ...seriesOptions,\n                highlightStyle: { item: { fill: undefined } },\n                fill: palette?.fills?.[index],\n                stroke: palette?.strokes?.[index],\n                listeners: {\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        };\n\n        const updateFilteredOutSeries = (seriesOptions: AgBarSeriesOptions): AgBarSeriesOptions => {\n            const yKey = seriesOptions.yKey + '-filtered-out';\n            return {\n                ...deepMerge({}, seriesOptions),\n                yKey,\n                fill: hexToRGBA(seriesOptions.fill!, '0.3'),\n                stroke: hexToRGBA(seriesOptions.stroke!, '0.3'),\n                showInLegend: false,\n            };\n        };\n\n        const allSeries: AgBarSeriesOptions[] = [];\n        for (let i = 0; i < series.length; i++) {\n            // update primary series\n            const primarySeries = updatePrimarySeries(series[i], i);\n            allSeries.push(primarySeries);\n\n            // add 'filtered-out' series\n            allSeries.push(updateFilteredOutSeries(primarySeries));\n        }\n        return allSeries;\n    }\n\n    private isNormalised() {\n        const normalisedCharts = ['normalizedColumn', 'normalizedBar'];\n        return !this.crossFiltering && _includes(normalisedCharts, this.chartType);\n    }\n\n    protected override isHorizontal(): boolean {\n        return HORIZONTAL_CHART_TYPES.has(this.chartType);\n    }\n}\n", "import { _Util } from 'ag-charts-community';\n\nexport function hexToRGBA(hex: string, alpha: string) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return alpha ? `rgba(${r}, ${g}, ${b}, ${alpha})` : `rgba(${r}, ${g}, ${b})`;\n}\n\nexport function changeOpacity(fills: string[], alpha: number) {\n    return fills.map((fill) => {\n        const c = _Util.Color.fromString(fill);\n        return new _Util.Color(c.r, c.g, c.b, alpha).toHexString();\n    });\n}\n", "import type { AgCartesianAxisOptions, AgHistogramSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class HistogramChartProxy extends CartesianChartProxy<'histogram'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams): AgHistogramSeriesOptions[] {\n        const firstField = params.fields[0]; // multiple series are not supported!\n        return [\n            {\n                type: this.standaloneChartType,\n                xKey: firstField.colId,\n                xName: firstField.displayName,\n                yName: this.chartProxyParams.translate('histogramFrequency'),\n                areaPlot: false, // only constant width is supported via integrated charts\n            } as AgHistogramSeriesOptions,\n        ];\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n}\n", "import type { AgCartesianAxisOptions, AgLineSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class LineChartProxy extends CartesianChartProxy<'line'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgLineSeriesOptions[] = params.fields.map(\n            (f) =>\n                ({\n                    type: this.standaloneChartType,\n                    xKey: category.id,\n                    xName: category.name,\n                    yKey: f.colId,\n                    yName: f.displayName,\n                }) as AgLineSeriesOptions\n        );\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n}\n", "import type { AgBubbleSeriesOptions, AgCartesianAxisOptions, AgScatterSeriesOptions } from 'ag-charts-community';\n\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\ninterface SeriesDefinition {\n    xField: FieldDefinition;\n    yField: FieldDefinition;\n    sizeField?: FieldDefinition;\n}\n\nexport class ScatterChartProxy extends CartesianChartProxy<'scatter' | 'bubble'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const [category] = params.categories;\n        const paired = this.isPaired();\n        const seriesDefinitions = this.getSeriesDefinitions(params.fields, paired);\n        const labelFieldDefinition = category.id === ChartDataModel.DEFAULT_CATEGORY ? undefined : category;\n\n        const series = seriesDefinitions.map((seriesDefinition) => {\n            if (seriesDefinition?.sizeField) {\n                const opts: AgBubbleSeriesOptions = {\n                    type: 'bubble',\n                    xKey: seriesDefinition!.xField.colId,\n                    xName: seriesDefinition!.xField.displayName ?? undefined,\n                    yKey: seriesDefinition!.yField.colId,\n                    yName: seriesDefinition!.yField.displayName ?? undefined,\n                    title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                    sizeKey: seriesDefinition!.sizeField.colId,\n                    sizeName: seriesDefinition!.sizeField.displayName ?? '',\n                    labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                    labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n                };\n                return opts;\n            }\n\n            const opts: AgScatterSeriesOptions = {\n                type: 'scatter',\n                xKey: seriesDefinition!.xField.colId,\n                xName: seriesDefinition!.xField.displayName ?? undefined,\n                yKey: seriesDefinition!.yField.colId,\n                yName: seriesDefinition!.yField.displayName ?? undefined,\n                title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n            };\n            return opts;\n        });\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series, params) : series;\n    }\n\n    private extractCrossFilterSeries(\n        series: (AgScatterSeriesOptions | AgBubbleSeriesOptions)[],\n        params: UpdateParams\n    ): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const { data } = params;\n        const palette = this.getChartPalette();\n\n        const filteredOutKey = (key: string) => `${key}-filtered-out`;\n\n        const calcMarkerDomain = (data: any, sizeKey?: string) => {\n            const markerDomain: [number, number] = [Infinity, -Infinity];\n            if (sizeKey != null) {\n                for (const datum of data) {\n                    const value = datum[sizeKey] ?? datum[filteredOutKey(sizeKey)];\n                    if (value < markerDomain[0]) {\n                        markerDomain[0] = value;\n                    }\n                    if (value > markerDomain[1]) {\n                        markerDomain[1] = value;\n                    }\n                }\n            }\n            if (markerDomain[0] <= markerDomain[1]) {\n                return markerDomain;\n            }\n            return undefined;\n        };\n\n        const updatePrimarySeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(\n            series: T,\n            idx: number\n        ): T => {\n            const fill = palette?.fills?.[idx];\n            const stroke = palette?.strokes?.[idx];\n\n            let markerDomain: [number, number] | undefined = undefined;\n            if (series.type === 'bubble') {\n                const { sizeKey } = series;\n                markerDomain = calcMarkerDomain(data, sizeKey);\n            }\n\n            return {\n                ...series,\n                fill,\n                stroke,\n                domain: markerDomain,\n                highlightStyle: { item: { fill: 'yellow' } },\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        };\n\n        const updateFilteredOutSeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(series: T): T => {\n            const { yKey, xKey } = series;\n\n            let alteredSizeKey = {};\n            if (series.type === 'bubble') {\n                alteredSizeKey = { sizeKey: filteredOutKey(series.sizeKey!) };\n            }\n\n            return {\n                ...series,\n                ...alteredSizeKey,\n                yKey: filteredOutKey(yKey!),\n                xKey: filteredOutKey(xKey!),\n                fillOpacity: 0.3,\n                strokeOpacity: 0.3,\n                showInLegend: false,\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: (e: any) => {\n                        const value = e.datum[filteredOutKey(xKey!)];\n\n                        // Need to remove the `-filtered-out` suffixes from the event so that\n                        // upstream processing maps the event correctly onto grid column ids.\n                        const filterableEvent = {\n                            ...e,\n                            xKey,\n                            datum: { ...e.datum, [xKey!]: value },\n                        };\n                        this.crossFilterCallback(filterableEvent);\n                    },\n                },\n            };\n        };\n\n        const updatedSeries = series.map(updatePrimarySeries);\n        return [...updatedSeries, ...updatedSeries.map(updateFilteredOutSeries)];\n    }\n\n    private getSeriesDefinitions(fields: FieldDefinition[], paired: boolean): (SeriesDefinition | null)[] {\n        if (fields.length < 2) {\n            return [];\n        }\n\n        const isBubbleChart = this.chartType === 'bubble';\n\n        if (paired) {\n            if (isBubbleChart) {\n                return fields\n                    .map((currentXField, i) =>\n                        i % 3 === 0\n                            ? {\n                                  xField: currentXField,\n                                  yField: fields[i + 1],\n                                  sizeField: fields[i + 2],\n                              }\n                            : null\n                    )\n                    .filter((x) => x && x.yField && x.sizeField);\n            }\n            return fields\n                .map((currentXField, i) =>\n                    i % 2 === 0\n                        ? {\n                              xField: currentXField,\n                              yField: fields[i + 1],\n                          }\n                        : null\n                )\n                .filter((x) => x && x.yField);\n        }\n\n        const xField = fields[0];\n\n        if (isBubbleChart) {\n            return fields\n                .map((yField, i) =>\n                    i % 2 === 1\n                        ? {\n                              xField,\n                              yField,\n                              sizeField: fields[i + 1],\n                          }\n                        : null\n                )\n                .filter((x) => x && x.sizeField);\n        }\n\n        return fields.filter((value, i) => i > 0).map((yField) => ({ xField, yField }));\n    }\n}\n", "import type { AgCartesianAxisOptions, AgCartesianChartOptions, AgWaterfallSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CartesianChartProxy } from './cartesianChartProxy';\n\nexport class WaterfallChartProxy extends CartesianChartProxy<'waterfall'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: this.isHorizontal(commonChartOptions) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: this.isHorizontal(commonChartOptions) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): AgWaterfallSeriesOptions[] {\n        const [category] = params.categories;\n        const [firstField] = params.fields;\n        const firstSeries: AgWaterfallSeriesOptions = {\n            type: this.standaloneChartType as 'waterfall',\n            xKey: category.id,\n            xName: category.name,\n            yKey: firstField.colId,\n            yName: firstField.displayName ?? undefined,\n        };\n\n        return [firstSeries]; // waterfall only supports a single series!\n    }\n}\n", "import type { ChartType, SeriesChartType } from '@ag-grid-community/core';\nimport type { AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport { getSeriesType } from '../../utils/seriesTypeMapper';\nimport { CartesianChartProxy } from '../cartesian/cartesianChartProxy';\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\n\nexport class ComboChartProxy extends CartesianChartProxy<'line' | 'bar' | 'area'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const fields = params ? params.fields : [];\n        const fieldsMap = new Map(fields.map((f) => [f.colId, f]));\n\n        const { primaryYKeys, secondaryYKeys } = this.getYKeys(fields, params.seriesChartTypes);\n\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n        ];\n\n        if (primaryYKeys.length > 0) {\n            axes.push({\n                type: 'number',\n                keys: primaryYKeys,\n                position: 'left',\n            });\n        }\n\n        if (secondaryYKeys.length > 0) {\n            secondaryYKeys.forEach((secondaryYKey: string) => {\n                const field = fieldsMap.get(secondaryYKey);\n                const secondaryAxisIsVisible = field && field.colId === secondaryYKey;\n                if (!secondaryAxisIsVisible) {\n                    return;\n                }\n\n                const secondaryAxisOptions: AgCartesianAxisOptions = {\n                    type: 'number',\n                    keys: [secondaryYKey],\n                    position: 'right',\n                };\n\n                axes.push(secondaryAxisOptions);\n            });\n        }\n\n        return axes;\n    }\n\n    public getSeries(params: UpdateParams): any {\n        const { fields, seriesChartTypes } = params;\n        const [category] = params.categories;\n\n        return fields.map((field) => {\n            const seriesChartType = seriesChartTypes.find((s) => s.colId === field.colId);\n            if (seriesChartType) {\n                const chartType: ChartType = seriesChartType.chartType;\n                const grouped = ['groupedColumn', 'groupedBar'].includes(chartType);\n                const groupedOpts = grouped ? { grouped: true } : {};\n                return {\n                    type: getSeriesType(chartType),\n                    xKey: category.id,\n                    yKey: field.colId,\n                    yName: field.displayName,\n                    stacked: ['stackedArea', 'stackedColumn'].includes(chartType),\n                    ...groupedOpts,\n                };\n            }\n        });\n    }\n\n    private getYKeys(fields: FieldDefinition[], seriesChartTypes: SeriesChartType[]) {\n        const primaryYKeys: string[] = [];\n        const secondaryYKeys: string[] = [];\n\n        fields.forEach((field) => {\n            const colId = field.colId;\n            const seriesChartType = seriesChartTypes.find((s) => s.colId === colId);\n            if (seriesChartType) {\n                seriesChartType.secondaryAxis ? secondaryYKeys.push(colId) : primaryYKeys.push(colId);\n            }\n        });\n\n        return { primaryYKeys, secondaryYKeys };\n    }\n}\n", "import { GROUP_AUTO_COLUMN_ID } from '@ag-grid-community/core';\nimport type { AgChartThemeOverrides, AgHierarchyChartOptions, AgHierarchySeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\nimport { CATEGORY_LABEL_KEY, createAutoGroupHierarchy, createCategoryHierarchy } from './hierarchicalChartUtils';\n\nexport class HierarchicalChartProxy<TSeries extends 'sunburst' | 'treemap'> extends ChartProxy<\n    AgHierarchyChartOptions,\n    TSeries\n> {\n    constructor(chartProxyParams: ChartProxyParams) {\n        super(chartProxyParams);\n    }\n\n    protected override getUpdateOptions(\n        params: UpdateParams,\n        commonChartOptions: AgHierarchyChartOptions\n    ): AgHierarchyChartOptions {\n        const { fields } = params;\n        // Hierarchical charts support up to two input series, corresponding to size and color respectively\n        const [sizeField, colorField] = fields as [FieldDefinition | undefined, FieldDefinition | undefined];\n        return {\n            ...commonChartOptions,\n            series: this.getSeries(sizeField, colorField),\n            data: this.getData(params, sizeField, colorField),\n        };\n    }\n\n    protected override getSeriesChartThemeDefaults(): AgChartThemeOverrides['treemap' | 'sunburst'] {\n        return {\n            gradientLegend: {\n                gradient: {\n                    preferredLength: 200,\n                },\n            },\n        };\n    }\n\n    private getSeries(sizeField?: FieldDefinition, colorField?: FieldDefinition): AgHierarchySeriesOptions[] {\n        return [\n            {\n                type: this.standaloneChartType as AgHierarchySeriesOptions['type'],\n                labelKey: CATEGORY_LABEL_KEY,\n                // Size and color fields are inferred from the range data\n                sizeKey: sizeField?.colId,\n                sizeName: sizeField?.displayName ?? undefined,\n                colorKey: colorField?.colId,\n                colorName: colorField?.displayName ?? undefined,\n            },\n        ];\n    }\n\n    private getData(params: UpdateParams, sizeField?: FieldDefinition, colorField?: FieldDefinition): any[] {\n        const { categories, data, groupData, grouping: isGrouped } = params;\n        if (isGrouped) {\n            const processedData = colorField\n                ? data.concat(\n                      groupData?.map((groupDatum) => {\n                          const newDatum = { ...groupDatum };\n                          delete newDatum[sizeField!.colId];\n                          return newDatum;\n                      }) ?? []\n                  )\n                : data;\n            return createAutoGroupHierarchy(processedData, (item) => item[GROUP_AUTO_COLUMN_ID]?.labels ?? null);\n        } else {\n            const categoryKeys = categories.map(({ id }) => id);\n            return createCategoryHierarchy(data, categoryKeys);\n        }\n    }\n}\n", "export type CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\nexport const CATEGORY_LABEL_KEY: CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\n\nexport type CategoryItem<T extends object> = {\n    [CATEGORY_LABEL_KEY]: string | null;\n    children?: Array<CategoryItem<T>>;\n} & T;\n\nexport function createCategoryHierarchy<T extends object>(data: T[], categoryKeys: Array<keyof T>): CategoryItem<T>[] {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemCategoryLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return categoryKeys.length;\n    }\n\n    function getItemCategoryLabel(item: T, categoryIndex: number): string | null {\n        const categoryKey = categoryKeys[categoryIndex];\n        const categoryValue = item[categoryKey];\n        return getCategoryLabel(categoryValue);\n    }\n\n    function getCategoryLabel(value: unknown): string | null {\n        if (value == null) return null;\n        return String(value);\n    }\n}\n\nexport function createAutoGroupHierarchy<T extends object>(\n    data: T[],\n    getItemLabels: (item: T) => string[] | null\n): CategoryItem<T>[] {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemGroupLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return getItemLabels(item)?.length ?? 0;\n    }\n\n    function getItemGroupLabel(item: T, groupIndex: number): string | null {\n        const labels = getItemLabels(item);\n        if (!labels) return null;\n        // Autogroup label values are ordered from the leaf outwards\n        const labelIndex = labels.length - 1 - groupIndex;\n        return labels[labelIndex];\n    }\n}\n\n/* Utility functions for building and formatting nested category hierarchies */\n\n/** Convert an abstract nested hierarchy structure into an ag-charts-compatible 'category-grouped' data structure */\nfunction formatCategoryHierarchy<T extends object>(\n    hierarchy: Tree<T>,\n    key: string | null = null,\n    isChild?: boolean\n): CategoryItem<T>[] {\n    const { depth, rootValues, value, children: inputChildren } = hierarchy;\n    if (rootValues) {\n        return rootValues.map((item) => ({ [CATEGORY_LABEL_KEY]: key, ...item }));\n    } else if (depth === 0) {\n        return [{ [CATEGORY_LABEL_KEY]: key, ...value! }];\n    }\n\n    const children: CategoryItem<T>[] = [];\n    for (const [childKey, childHierarchy] of inputChildren.entries()) {\n        children.push(...formatCategoryHierarchy(childHierarchy, childKey, true));\n    }\n\n    return isChild\n        ? [\n              {\n                  [CATEGORY_LABEL_KEY]: key,\n                  children,\n                  ...(value ?? ({} as T)),\n              },\n          ]\n        : children;\n}\n\n/** Data structure that represents an arbitrarily deeply nested tree of keyed values */\ntype Tree<V> = {\n    /** Number of child levels nested within this path of the tree (leaves do not count towards the depth) */\n    depth: number;\n    rootValues?: V[];\n    value?: V;\n    /** Child levels contained within this path of the tree, grouped by child key */\n    children: Map<string | null, Tree<V>>;\n};\n\n/** Build an arbitrarily deeply nested hierarchy from a flat list of input items */\nfunction buildNestedHierarchy<V extends object>(\n    data: V[],\n    getItemDepth: (item: V) => number,\n    getItemGroupKey: (item: V, depthIndex: number) => string | null\n): Tree<V> {\n    const hierarchy: Tree<V> = { depth: 0, children: new Map() };\n    data.forEach((item) => {\n        const itemDepth = getItemDepth(item);\n        createNestedItemHierarchy(item, itemDepth, getItemGroupKey, 0, hierarchy);\n    });\n    return hierarchy;\n\n    function createNestedItemHierarchy(\n        item: V,\n        itemDepth: number,\n        getItemGroupKey: (item: V, depthIndex: number) => string | null,\n        currentDepth: number,\n        hierarchy: Tree<V>\n    ): Tree<V> {\n        if (currentDepth === itemDepth) {\n            if (currentDepth === 0) {\n                if (!hierarchy.rootValues) {\n                    hierarchy.rootValues = [];\n                }\n                hierarchy.rootValues.push(item);\n            } else {\n                hierarchy.value = item;\n            }\n            return hierarchy;\n        } else {\n            const key = getItemGroupKey(item, currentDepth);\n            const existingChildHierarchy = hierarchy.children.get(key);\n            const childHierarchy = createNestedItemHierarchy(\n                item,\n                itemDepth,\n                getItemGroupKey,\n                currentDepth + 1,\n                existingChildHierarchy || { depth: 0, children: new Map() }\n            );\n            hierarchy.children.set(key, childHierarchy);\n            hierarchy.depth = Math.max(1 + childHierarchy.depth, hierarchy.depth);\n            return hierarchy;\n        }\n    }\n}\n", "import type {\n    AgDonutSeriesOptions,\n    AgPieSeriesOptions,\n    AgPolarChartOptions,\n    AgPolarSeriesOptions,\n} from 'ag-charts-community';\n\nimport { changeOpacity } from '../../utils/color';\nimport { deepMerge } from '../../utils/object';\nimport type { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\ninterface DonutOffset {\n    offsetAmount: number;\n    currentOffset: number;\n}\n\nfunction calculateOffsets(offset: DonutOffset) {\n    const outerRadiusOffset = offset.currentOffset;\n    offset.currentOffset -= offset.offsetAmount;\n\n    const innerRadiusOffset = offset.currentOffset;\n    offset.currentOffset -= offset.offsetAmount;\n\n    return { outerRadiusOffset, innerRadiusOffset };\n}\n\nexport class PieChartProxy extends ChartProxy<AgPolarChartOptions, 'pie' | 'donut'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected getUpdateOptions(params: UpdateParams, commonChartOptions: AgPolarChartOptions): AgPolarChartOptions {\n        return {\n            ...commonChartOptions,\n            data: this.crossFiltering ? this.getCrossFilterData(params) : params.data,\n            series: this.getSeries(params),\n        };\n    }\n\n    private getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const [category] = params.categories;\n        const numFields = params.fields.length;\n\n        const offset = {\n            currentOffset: 0,\n            offsetAmount: numFields > 1 ? 20 : 40,\n        };\n\n        const series: (AgPieSeriesOptions | AgDonutSeriesOptions)[] = this.getFields(params).map(\n            (f: FieldDefinition) => {\n                // options shared by 'pie' and 'donut' charts\n                const options = {\n                    type: this.standaloneChartType as AgPieSeriesOptions['type'],\n                    angleKey: f.colId,\n                    angleName: f.displayName!,\n                    sectorLabelKey: f.colId,\n                    calloutLabelName: category.name,\n                    calloutLabelKey: category.id,\n                };\n\n                if (this.chartType === 'donut' || this.chartType === 'doughnut') {\n                    const { outerRadiusOffset, innerRadiusOffset } = calculateOffsets(offset);\n                    const title = f.displayName\n                        ? {\n                              title: { text: f.displayName, showInLegend: numFields > 1 },\n                          }\n                        : undefined;\n\n                    // augment shared options with 'donut' specific options\n                    return {\n                        ...options,\n                        type: 'donut',\n                        outerRadiusOffset,\n                        innerRadiusOffset,\n                        ...title,\n                        calloutLine: {\n                            colors: this.getChartPalette()?.strokes,\n                        },\n                    };\n                }\n\n                return options;\n            }\n        );\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private getCrossFilterData(params: UpdateParams) {\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n\n        return params.data.map((d) => {\n            const total = d[colId] + d[filteredOutColId];\n            d[`${colId}-total`] = total;\n            d[filteredOutColId] = 1; // normalise to 1\n            d[colId] = d[colId] / total; // fraction of 1\n            return d;\n        });\n    }\n\n    private extractCrossFilterSeries(series: (AgPieSeriesOptions | AgDonutSeriesOptions)[]) {\n        const palette = this.getChartPalette();\n\n        const primaryOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions) => {\n            return {\n                ...seriesOptions,\n                legendItemKey: seriesOptions.calloutLabelKey,\n                calloutLabel: { enabled: false }, // hide labels on primary series\n                highlightStyle: { item: { fill: undefined } },\n                radiusKey: seriesOptions.angleKey,\n                angleKey: seriesOptions.angleKey + '-total',\n                radiusMin: 0,\n                radiusMax: 1,\n                listeners: {\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        };\n\n        const filteredOutOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions, angleKey: string) => {\n            return {\n                ...deepMerge({}, primaryOpts),\n                radiusKey: angleKey + '-filtered-out',\n                fills: changeOpacity(seriesOptions.fills ?? palette?.fills ?? [], 0.3),\n                strokes: changeOpacity(seriesOptions.strokes ?? palette?.strokes ?? [], 0.3),\n                showInLegend: false,\n            };\n        };\n\n        // currently, only single 'donut' cross-filter series are supported\n        const primarySeries = series[0];\n\n        // update primary series\n        const angleKey = primarySeries.angleKey!;\n        const primaryOpts = primaryOptions(primarySeries);\n\n        return [filteredOutOptions(primarySeries, angleKey), primaryOpts];\n    }\n\n    private getFields(params: UpdateParams): FieldDefinition[] {\n        // pie charts only support a single series, donut charts support multiple series\n        return this.chartType === 'pie' ? params.fields.slice(0, 1) : params.fields;\n    }\n}\n", "import type { SeriesGroupType } from '@ag-grid-community/core';\nimport type {\n    AgPolarAxisOptions,\n    AgPolarChartOptions,\n    AgPolarSeriesOptions,\n    AgRadarAreaSeriesOptions,\n} from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\nexport class PolarChartProxy extends ChartProxy<\n    AgPolarChartOptions,\n    'radar-line' | 'radar-area' | 'nightingale' | 'radial-column' | 'radial-bar'\n> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(_: UpdateParams): AgPolarAxisOptions[] {\n        const radialBar = this.standaloneChartType === 'radial-bar';\n        return [\n            { type: radialBar ? 'angle-number' : 'angle-category' },\n            { type: radialBar ? 'radius-category' : 'radius-number' },\n        ];\n    }\n\n    public getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const { fields, categories, seriesGroupType } = params;\n        const [category] = categories;\n        const radialBar = this.standaloneChartType === 'radial-bar';\n        const seriesGroupTypeOptions = this.getSeriesGroupTypeOptions(seriesGroupType);\n\n        return fields.map((f) => ({\n            type: this.standaloneChartType as AgRadarAreaSeriesOptions['type'],\n            angleKey: radialBar ? f.colId : category.id,\n            angleName: radialBar ? f.displayName ?? undefined : category.name,\n            radiusKey: radialBar ? category.id : f.colId,\n            radiusName: radialBar ? category.name : f.displayName ?? undefined,\n            ...seriesGroupTypeOptions,\n        }));\n    }\n\n    public override getSeriesGroupType(): SeriesGroupType | undefined {\n        const standaloneChartType = this.standaloneChartType;\n        if (!['nightingale', 'radial-bar', 'radial-column'].includes(standaloneChartType)) {\n            return undefined;\n        }\n        const firstSeriesProperties = this.getChart().series?.[0]?.properties.toJson();\n        const getStackedValue = () => (firstSeriesProperties.normalizedTo ? 'normalized' : 'stacked');\n        if (standaloneChartType === 'nightingale') {\n            return firstSeriesProperties.grouped ? 'grouped' : getStackedValue();\n        } else {\n            return firstSeriesProperties.stacked ? getStackedValue() : 'grouped';\n        }\n    }\n\n    protected getUpdateOptions(params: UpdateParams, commonChartOptions: AgPolarChartOptions): AgPolarChartOptions {\n        const axes = this.getAxes(params);\n\n        return {\n            ...commonChartOptions,\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n    }\n\n    private getData(params: UpdateParams, axes: AgPolarAxisOptions[]): any[] {\n        const isCategoryAxis = axes.some((axis) => axis.type === 'angle-category' || axis.type === 'radius-category');\n        if (isCategoryAxis) {\n            const [category] = params.categories;\n            return this.transformCategoryData(params.data, category.id);\n        } else {\n            return params.data;\n        }\n    }\n\n    private getSeriesGroupTypeOptions(seriesGroupType?: SeriesGroupType): Partial<AgPolarSeriesOptions> {\n        if (!seriesGroupType) {\n            return {};\n        }\n        return {\n            grouped: seriesGroupType === 'grouped' || undefined,\n            stacked: seriesGroupType !== 'grouped' || undefined,\n            normalizedTo: seriesGroupType === 'normalized' ? 100 : undefined,\n        };\n    }\n}\n", "export function partition<T, K>(items: T[], selector: (item: T) => K): Map<K, T[]> {\n    return items.reduce((groupedItems, item) => {\n        const key = selector(item);\n        const existingItems = groupedItems.get(key);\n        return groupedItems.set(key, existingItems ? [...existingItems, item] : [item]);\n    }, new Map<K, T[]>());\n}\n\nexport function flatMap<T, V>(items: T[], iteratee: (item: T, index: number, array: T[]) => V[]): V[] {\n    return items.reduce((acc, item, index, array) => acc.concat(iteratee(item, index, array)), new Array<V>());\n}\n", "import type {\n    AgCartesianChartOptions,\n    AgChartThemeOverrides,\n    AgHeatmapSeriesOptions,\n    AgHeatmapSeriesTooltipRendererParams,\n    AgTooltipRendererResult,\n} from 'ag-charts-community';\n\nimport { flatMap } from '../../utils/array';\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { ChartProxy } from '../chartProxy';\n\nexport const HEATMAP_CATEGORY_KEY = 'AG-GRID-DEFAULT-HEATMAP-CATEGORY-KEY';\nexport const HEATMAP_SERIES_KEY = 'AG-GRID-DEFAULT-HEATMAP-SERIES-KEY';\nexport const HEATMAP_VALUE_KEY = 'AG-GRID-DEFAULT-HEATMAP-VALUE-KEY';\n\nexport class HeatmapChartProxy extends ChartProxy<AgCartesianChartOptions, 'heatmap'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected getUpdateOptions(\n        params: UpdateParams,\n        commonChartOptions: AgCartesianChartOptions\n    ): AgCartesianChartOptions {\n        const xSeriesKey = HEATMAP_SERIES_KEY;\n        const xValueKey = HEATMAP_VALUE_KEY;\n        const yKey = HEATMAP_CATEGORY_KEY;\n        return {\n            ...commonChartOptions,\n            series: this.getSeries(params, xSeriesKey, xValueKey, yKey),\n            data: this.getData(params, xSeriesKey, xValueKey, yKey),\n        };\n    }\n\n    protected getSeries(\n        params: UpdateParams,\n        xSeriesKey: string,\n        xValueKey: string,\n        yKey: string\n    ): AgHeatmapSeriesOptions[] {\n        const [category] = params.categories;\n        return [\n            {\n                type: this.standaloneChartType as AgHeatmapSeriesOptions['type'],\n                // The axis keys reference synthetic fields based on the category values and series column names\n                yKey,\n                xKey: xSeriesKey,\n                // The color key references a synthetic field based on the series column value for a specific cell\n                colorKey: xValueKey,\n                yName: category.name,\n                // We don't know how to label the 'x' series, as it is a synthetic series created from the set of all input columns\n                // In future releases we may want to consider inferring the series label from column groupings etc\n                xName: undefined,\n                colorName: undefined,\n            },\n        ];\n    }\n\n    protected getData(params: UpdateParams, xSeriesKey: string, xValueKey: string, yKey: string): any[] {\n        const [category] = params.categories;\n        // Heatmap chart expects a flat array of data, with each row representing a single cell in the heatmap\n        // This means we need to explode the list of input rows into their individual cells\n        return flatMap(params.data, (datum, index) => {\n            // We need to create a unique y value object for each row to prevent unintended category grouping\n            // when there are multiple rows with the same category value\n            const value = datum[category.id];\n            const valueString = value == null ? '' : String(value);\n            const yValue = { id: index, value, toString: () => valueString };\n            // Return a flat list of output data items corresponding to each cell,\n            // appending the synthetic series and category fields to the cell data\n            return params.fields.map(({ colId, displayName }) => ({\n                ...datum,\n                [xSeriesKey]: displayName,\n                [xValueKey]: datum[colId],\n                [yKey]: yValue,\n            }));\n        });\n    }\n\n    protected override getSeriesChartThemeDefaults(): AgChartThemeOverrides['heatmap'] {\n        return {\n            gradientLegend: {\n                gradient: {\n                    preferredLength: 200,\n                },\n            },\n            series: {\n                tooltip: {\n                    renderer: renderHeatmapTooltip,\n                },\n            },\n        };\n    }\n}\n\nfunction renderHeatmapTooltip(params: AgHeatmapSeriesTooltipRendererParams<any>): string | AgTooltipRendererResult {\n    const { xKey, yKey, colorKey, yName, datum } = params;\n    const table: Array<{ label: string; value: string | undefined }> = [\n        { label: yName, value: datum[yKey] },\n        { label: datum[xKey], value: colorKey && datum[colorKey] },\n    ];\n    const html = table\n        .map(({ label, value }) => `<b>${sanitizeHtml(String(label))}:</b> ${sanitizeHtml(String(value))}`)\n        .join('<br>');\n    return {\n        title: '',\n        content: html,\n    };\n}\n\nfunction sanitizeHtml(input: string): string {\n    const ESCAPED_CHARS = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n    };\n    const characterClass = `[${Object.keys(ESCAPED_CHARS).join('')}]`;\n    const pattern = new RegExp(characterClass, 'g');\n    return input.replace(pattern, (char: keyof typeof ESCAPED_CHARS) => ESCAPED_CHARS[char]);\n}\n", "import type { AgCartesianAxisOptions, AgCartesianChartOptions } from 'ag-charts-community';\n\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport { CartesianChartProxy } from '../cartesian/cartesianChartProxy';\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\n\nexport abstract class StatisticalChartProxy<\n    TSeries extends 'box-plot' | 'range-area' | 'range-bar',\n> extends CartesianChartProxy<TSeries> {\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams, commonChartOptions: AgCartesianChartOptions): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: this.isHorizontal(commonChartOptions) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: this.isHorizontal(commonChartOptions) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected computeSeriesStatistics(params: UpdateParams, computeStatsFn: (values: number[]) => any): any[] {\n        const { data, fields } = params;\n        const [category] = params.categories;\n        const categoryKey = category.id || ChartDataModel.DEFAULT_CATEGORY;\n        const groupedData = this.groupDataByCategory(categoryKey, data);\n\n        return Array.from(groupedData).map(([categoryValue, categoryData]) => {\n            const categoryResult = { [category.id]: categoryValue };\n\n            fields.forEach((field, seriesIndex) => {\n                // `null` & `NaN` values are omitted from calculations\n                const seriesValues = categoryData\n                    .map((datum) => datum[field.colId])\n                    .filter((value) => typeof value === 'number' && !isNaN(value));\n\n                Object.entries(computeStatsFn(seriesValues)).forEach(([statKey, value]) => {\n                    const propertyKey = `${statKey}:${seriesIndex}`;\n                    // when no data exists, stat properties are added to results with `null` values!\n                    categoryResult[propertyKey] = seriesValues.length > 0 ? value : null;\n                });\n            });\n\n            return categoryResult;\n        });\n    }\n\n    protected groupDataByCategory(categoryKey: string, data: any[]): Map<any, any[]> {\n        const getCategory = (datum: any) => {\n            if (categoryKey === ChartDataModel.DEFAULT_CATEGORY) {\n                return 1;\n            }\n            const categoryValue = datum[categoryKey];\n            if (categoryValue === null || categoryValue === undefined) {\n                return ''; // use a blank category for `null` or `undefined` values\n            }\n            return categoryValue instanceof Date ? categoryValue.getTime() : categoryValue;\n        };\n\n        return data.reduce((acc, datum) => {\n            const category = getCategory(datum);\n            const existingCategoryData = acc.get(category);\n            if (existingCategoryData) {\n                existingCategoryData.push(datum);\n            } else {\n                acc.set(category, [datum]);\n            }\n            return acc;\n        }, new Map<string | null, any[]>());\n    }\n}\n", "import type { AgBoxPlotSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { StatisticalChartProxy } from './statisticalChartProxy';\n\nexport class BoxPlotChartProxy extends StatisticalChartProxy<'box-plot'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgBoxPlotSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map((field, seriesIndex) => ({\n            type: this.standaloneChartType as AgBoxPlotSeriesOptions['type'],\n            // xKey/xName refer to category buckets\n            xKey: category.id,\n            xName: category.name,\n            // yName is used to label the series\n            yName: field.displayName ?? undefined,\n            // custom field labels shown in the tooltip\n            minName: 'Min',\n            q1Name: 'Q1',\n            medianName: 'Median',\n            q3Name: 'Q3',\n            maxName: 'Max',\n            // generated 'synthetic fields' from getData()\n            minKey: `min:${seriesIndex}`,\n            q1Key: `q1:${seriesIndex}`,\n            medianKey: `median:${seriesIndex}`,\n            q3Key: `q3:${seriesIndex}`,\n            maxKey: `max:${seriesIndex}`,\n        }));\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            const sortedValues = seriesValues.sort((a, b) => a - b);\n            return {\n                min: sortedValues[0],\n                q1: this.quantile(sortedValues, 0.25),\n                median: this.quantile(sortedValues, 0.5),\n                q3: this.quantile(sortedValues, 0.75),\n                max: sortedValues[sortedValues.length - 1],\n            };\n        });\n    }\n\n    private quantile(sortedValues: number[], q: number): number {\n        const position = (sortedValues.length - 1) * q;\n        const indexBelow = Math.floor(position);\n        const aboveValue = position - indexBelow;\n        if (sortedValues[indexBelow + 1] !== undefined) {\n            return sortedValues[indexBelow] + aboveValue * (sortedValues[indexBelow + 1] - sortedValues[indexBelow]);\n        }\n        return sortedValues[indexBelow];\n    }\n}\n", "import type { AgRangeAreaSeriesOptions } from 'ag-charts-community';\n\nimport type { ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { StatisticalChartProxy } from './statisticalChartProxy';\n\nexport class RangeChartProxy extends StatisticalChartProxy<'range-bar' | 'range-area'> {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgRangeAreaSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map((field, seriesIndex) => ({\n            type: this.standaloneChartType as AgRangeAreaSeriesOptions['type'],\n            // xKey/xName refer to category buckets\n            xKey: category.id,\n            xName: category.name,\n            // yName is used to label the series\n            yName: field.displayName ?? undefined,\n            // custom field labels shown in the tooltip\n            yLowName: 'Min',\n            yHighName: 'Max',\n            // generated 'synthetic fields' from getData()\n            yLowKey: `min:${seriesIndex}`,\n            yHighKey: `max:${seriesIndex}`,\n        }));\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            return {\n                min: Math.min(...seriesValues),\n                max: Math.max(...seriesValues),\n            };\n        });\n    }\n}\n", "import type {\n    BeanCollection,\n    ChartToolPanelMenuOptions,\n    ChartToolbarMenuItemOptions,\n    Environment,\n} from '@ag-grid-community/core';\nimport { AgPromise, Component, _warnOnce } from '@ag-grid-community/core';\nimport { AgPanel } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../chartController';\nimport type { ExtraPaddingDirection } from '../chartProxies/chartProxy';\nimport type { ChartMenuService } from '../services/chartMenuService';\nimport type { ChartMenuContext } from './chartMenuContext';\nimport type { ChartMenuListFactory } from './chartMenuList';\nimport { ChartToolbar } from './chartToolbar';\nimport { TabbedChartMenu } from './tabbedChartMenu';\n\ntype ChartToolbarButtons = {\n    [key in ChartToolbarMenuItemOptions]: {\n        iconName: string;\n        callback: (eventSource: HTMLElement) => void;\n    };\n};\n\nexport class ChartMenu extends Component {\n    private chartMenuService: ChartMenuService;\n    private chartMenuListFactory: ChartMenuListFactory;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection) {\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n        this.chartMenuListFactory = beans.chartMenuListFactory as ChartMenuListFactory;\n        this.environment = beans.environment;\n    }\n\n    private readonly chartController: ChartController;\n\n    private buttons: ChartToolbarButtons = {\n        chartLink: { iconName: 'linked', callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext) },\n        chartUnlink: {\n            iconName: 'unlinked',\n            callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext),\n        },\n        chartDownload: { iconName: 'save', callback: () => this.chartMenuService.downloadChart(this.chartMenuContext) },\n        chartMenu: { iconName: 'menuAlt', callback: (eventSource: HTMLElement) => this.showMenuList(eventSource) },\n    };\n\n    private panels: ChartToolPanelMenuOptions[] = [];\n    private defaultPanel: ChartToolPanelMenuOptions;\n\n    private chartToolbar: ChartToolbar;\n    private tabbedMenu: TabbedChartMenu;\n    private menuPanel?: AgPanel;\n    private menuVisible = false;\n    private chartToolbarOptions: ChartToolbarMenuItemOptions[];\n\n    constructor(\n        private readonly eChartContainer: HTMLElement,\n        private readonly eMenuPanelContainer: HTMLElement,\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(/* html */ `<div class=\"ag-chart-menu-wrapper\"></div>`);\n        this.chartController = chartMenuContext.chartController;\n    }\n\n    public postConstruct(): void {\n        this.chartToolbar = this.createManagedBean(new ChartToolbar());\n        this.getGui().appendChild(this.chartToolbar.getGui());\n\n        this.refreshToolbarAndPanels();\n\n        this.addManagedEventListeners({\n            chartCreated: (e) => {\n                if (e.chartId === this.chartController.getChartId()) {\n                    const showDefaultToolPanel = Boolean(this.gos.get('chartToolPanelsDef')?.defaultToolPanel);\n                    if (showDefaultToolPanel) {\n                        this.showMenu({ panel: this.defaultPanel, suppressFocus: true });\n                    }\n                }\n            },\n        });\n        this.addManagedListeners(this.chartController, {\n            chartLinkedChanged: this.refreshToolbarAndPanels.bind(this),\n        });\n\n        this.refreshMenuClasses();\n\n        this.addManagedListeners(this.chartController, { chartApiUpdate: this.refreshToolbarAndPanels.bind(this) });\n    }\n\n    public isVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public getExtraPaddingDirections(): ExtraPaddingDirection[] {\n        return (['chartMenu', 'chartLink', 'chartUnlink', 'chartDownload'] as const).some((v) =>\n            this.chartToolbarOptions.includes(v)\n        )\n            ? ['top']\n            : [];\n    }\n\n    private refreshToolbarAndPanels(): void {\n        this.initToolbarOptionsAndPanels();\n        this.updateToolbar();\n    }\n\n    private initToolbarOptionsAndPanels(): void {\n        const { panels, defaultPanel } = this.chartMenuService.getChartToolPanels(this.chartController);\n        this.panels = panels;\n        this.defaultPanel = defaultPanel;\n        this.chartToolbarOptions = this.chartMenuService.getChartToolbarOptions();\n    }\n\n    private updateToolbar(): void {\n        const buttons = this.chartToolbarOptions.map((buttonName) => {\n            const { iconName, callback } = this.buttons[buttonName];\n            return {\n                buttonName,\n                iconName,\n                callback,\n            };\n        });\n        this.chartToolbar.updateParams({ buttons });\n    }\n\n    private createMenuPanel(defaultTab: number): AgPromise<AgPanel> {\n        const menuPanel = (this.menuPanel = this.createBean(\n            new AgPanel({\n                height: '100%',\n                closable: true,\n                hideTitleBar: true,\n                cssIdentifier: 'chart-menu',\n            })\n        ));\n\n        menuPanel.setParentComponent(this);\n        this.eMenuPanelContainer.appendChild(menuPanel.getGui());\n\n        this.tabbedMenu = this.createBean(new TabbedChartMenu(this.panels, this.chartMenuContext));\n\n        this.addManagedListeners(this.tabbedMenu, {\n            closed: () => {\n                this.hideMenu();\n            },\n        });\n\n        this.addManagedListeners(menuPanel, { destroyed: () => this.destroyBean(this.tabbedMenu) });\n\n        return new AgPromise((res: (arg0: any) => void) => {\n            window.setTimeout(() => {\n                menuPanel.setBodyComponent(this.tabbedMenu);\n                this.tabbedMenu.showTab(defaultTab);\n                res(menuPanel);\n            }, 100);\n        });\n    }\n\n    private showContainer(eventSource?: HTMLElement, suppressFocus?: boolean) {\n        if (!this.menuPanel) {\n            return;\n        }\n\n        this.menuVisible = true;\n        this.refreshMenuClasses();\n        this.tabbedMenu.showMenu(eventSource, suppressFocus);\n    }\n\n    public showMenu(params?: {\n        /**\n         * Menu panel to show. If empty, shows the existing menu, or creates the default menu if menu panel has not been created\n         */\n        panel?: ChartToolPanelMenuOptions;\n        eventSource?: HTMLElement;\n        suppressFocus?: boolean;\n    }): void {\n        const { panel, eventSource, suppressFocus } = params ?? {};\n\n        if (this.menuPanel && !panel) {\n            this.showContainer(eventSource, suppressFocus);\n        } else {\n            const menuPanel = panel || this.defaultPanel;\n            let tab = this.panels.indexOf(menuPanel);\n            if (tab < 0) {\n                _warnOnce(`'${panel}' is not a valid Chart Tool Panel name`);\n                tab = this.panels.indexOf(this.defaultPanel);\n            }\n\n            if (this.menuPanel) {\n                this.tabbedMenu.showTab(tab);\n                this.showContainer(eventSource, suppressFocus);\n            } else {\n                this.createMenuPanel(tab).then(() => this.showContainer(eventSource, suppressFocus));\n            }\n        }\n    }\n\n    public hideMenu(): void {\n        this.menuVisible = false;\n        this.refreshMenuClasses();\n    }\n\n    private refreshMenuClasses() {\n        this.eChartContainer.classList.toggle('ag-chart-menu-visible', this.menuVisible);\n        this.eChartContainer.classList.toggle('ag-chart-menu-hidden', !this.menuVisible);\n    }\n\n    private showMenuList(eventSource: HTMLElement): void {\n        this.chartMenuListFactory.showMenuList({\n            eventSource,\n            showMenu: () => this.showMenu({ eventSource }),\n            chartMenuContext: this.chartMenuContext,\n        });\n    }\n\n    public override destroy() {\n        super.destroy();\n\n        if (this.menuPanel && this.menuPanel.isAlive()) {\n            this.destroyBean(this.menuPanel);\n        }\n\n        if (this.tabbedMenu && this.tabbedMenu.isAlive()) {\n            this.destroyBean(this.tabbedMenu);\n        }\n    }\n}\n", "import type { BeanCollection, ChartToolbarMenuItemOptions } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _clearElement, _createIconNoSpan } from '@ag-grid-community/core';\n\nimport type { ChartTranslationKey, ChartTranslationService } from '../services/chartTranslationService';\n\ninterface ChartToolbarButton {\n    buttonName: ChartToolbarMenuItemOptions;\n    iconName: string;\n    callback: (eventSource: HTMLElement) => void;\n}\n\nexport class ChartToolbar extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly eMenu: HTMLButtonElement = RefPlaceholder;\n\n    private buttonListenersDestroyFuncs: ((() => null) | undefined)[] = [];\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-chart-menu\" data-ref=\"eMenu\"></div>`);\n    }\n\n    public updateParams(params: { buttons: ChartToolbarButton[] }): void {\n        const { buttons } = params;\n        this.createButtons(buttons);\n    }\n\n    private createButtons(buttons: ChartToolbarButton[]): void {\n        this.buttonListenersDestroyFuncs.forEach((func) => func?.());\n        this.buttonListenersDestroyFuncs = [];\n\n        const menuEl = this.eMenu;\n        _clearElement(menuEl);\n\n        buttons.forEach((buttonConfig) => {\n            const { buttonName, iconName, callback } = buttonConfig;\n            const buttonEl = this.createButton(iconName);\n\n            const tooltipTitle = this.chartTranslationService.translate(\n                (buttonName + 'ToolbarTooltip') as ChartTranslationKey\n            );\n            if (tooltipTitle && buttonEl instanceof HTMLElement) {\n                buttonEl.title = tooltipTitle;\n            }\n\n            this.buttonListenersDestroyFuncs.push(\n                ...this.addManagedElementListeners(buttonEl, {\n                    click: (event: MouseEvent) => callback(event.currentTarget as HTMLElement),\n                })\n            );\n\n            menuEl.appendChild(buttonEl);\n        });\n    }\n\n    private createButton(iconName: string): Element {\n        const buttonEl = _createIconNoSpan(iconName, this.gos, undefined, true)!;\n        buttonEl.classList.add('ag-chart-menu-icon');\n\n        const wrapperEl = this.gos.getDocument().createElement('button');\n        wrapperEl.appendChild(buttonEl);\n        wrapperEl.classList.add('ag-chart-menu-toolbar-button');\n        return wrapperEl;\n    }\n\n    public override destroy(): void {\n        this.buttonListenersDestroyFuncs = [];\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, ChartToolPanelMenuOptions } from '@ag-grid-community/core';\nimport { AgPromise, Component } from '@ag-grid-community/core';\nimport type { TabbedItem } from '@ag-grid-enterprise/core';\nimport { TabbedLayout } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationKey, ChartTranslationService } from '../services/chartTranslationService';\nimport type { ChartMenuContext } from './chartMenuContext';\nimport { ChartDataPanel } from './data/chartDataPanel';\nimport { FormatPanel } from './format/formatPanel';\nimport { ChartSettingsPanel } from './settings/chartSettingsPanel';\n\nexport type TabbedChartMenuEvent = 'closed';\nexport class TabbedChartMenu extends Component<TabbedChartMenuEvent> {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    public static TAB_DATA = 'data';\n    public static TAB_FORMAT = 'format';\n\n    private tabbedLayout: TabbedLayout;\n    private tabs: TabbedItem[] = [];\n    private eventSource?: HTMLElement;\n\n    constructor(\n        private readonly panels: ChartToolPanelMenuOptions[],\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.panels.forEach((panel) => {\n            const panelType = panel.replace('chart', '').toLowerCase() as 'settings' | 'data' | 'format';\n            const panelComp = this.createPanel(panelType);\n            const tabItem = this.createTab(panel, panelType, panelComp);\n\n            this.tabs.push(tabItem);\n            this.addDestroyFunc(() => this.destroyBean(panelComp));\n        });\n\n        this.tabbedLayout = new TabbedLayout({\n            items: this.tabs,\n            cssClass: 'ag-chart-tabbed-menu',\n            keepScrollPosition: true,\n            suppressFocusBodyOnOpen: true,\n            suppressTrapFocus: true,\n            enableCloseButton: true,\n            closeButtonAriaLabel: this.chartTranslationService.translate('ariaChartMenuClose'),\n            onCloseClicked: () => {\n                this.eventSource?.focus({ preventScroll: true });\n                this.dispatchLocalEvent({ type: 'closed' });\n            },\n        });\n        this.createBean(this.tabbedLayout);\n    }\n\n    private createTab(name: ChartToolPanelMenuOptions, title: ChartTranslationKey, panelComp: Component): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-chart-tab', `ag-chart-${title}`);\n\n        this.createBean(panelComp);\n\n        eWrapperDiv.appendChild(panelComp.getGui());\n\n        const titleEl = document.createElement('div');\n        const translatedTitle = this.chartTranslationService.translate(title);\n        titleEl.innerText = translatedTitle;\n\n        return {\n            title: titleEl,\n            titleLabel: translatedTitle,\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            getScrollableContainer: () => {\n                const scrollableContainer = eWrapperDiv.querySelector('.ag-scrollable-container');\n                return (scrollableContainer || eWrapperDiv) as HTMLElement;\n            },\n            name,\n        };\n    }\n\n    public showTab(tab: number) {\n        const tabItem = this.tabs[tab];\n        this.tabbedLayout.showItem(tabItem);\n    }\n\n    public override getGui(): HTMLElement {\n        return this.tabbedLayout && this.tabbedLayout.getGui();\n    }\n\n    public showMenu(eventSource?: HTMLElement, suppressFocus?: boolean): void {\n        this.eventSource = eventSource;\n        if (!suppressFocus) {\n            this.tabbedLayout?.focusHeader(true);\n        }\n    }\n\n    public override destroy(): void {\n        if (this.parentComponent && this.parentComponent.isAlive()) {\n            this.destroyBean(this.parentComponent);\n        }\n        super.destroy();\n    }\n\n    private createPanel(panelType: string): Component {\n        switch (panelType) {\n            case TabbedChartMenu.TAB_DATA:\n                return new ChartDataPanel(this.chartMenuContext);\n            case TabbedChartMenu.TAB_FORMAT:\n                return new FormatPanel(this.chartMenuContext);\n            default:\n                return new ChartSettingsPanel(this.chartMenuContext.chartController);\n        }\n    }\n}\n", "import type {\n    BeanCollection,\n    ChartDataPanel as ChartDataPanelType,\n    ChartType,\n    IChartService,\n} from '@ag-grid-community/core';\nimport { AgToggleButton, Component, _setDisplayed, _warnOnce } from '@ag-grid-community/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport { getMaxNumCategories, getMaxNumSeries, supportsInvertedCategorySeries } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { CategoriesDataPanel } from './categoriesDataPanel';\nimport { ChartSpecificDataPanel } from './chartSpecificDataPanel';\nimport { SeriesChartTypePanel } from './seriesChartTypePanel';\nimport { SeriesDataPanel } from './seriesDataPanel';\n\nconst DefaultDataPanelDef: ChartDataPanelType = {\n    groups: [\n        { type: 'categories', isOpen: true },\n        { type: 'series', isOpen: true },\n        { type: 'seriesChartType', isOpen: true },\n        { type: 'chartSpecific', isOpen: true },\n    ],\n};\n\nexport class ChartDataPanel extends Component {\n    protected chartTranslationService: ChartTranslationService;\n    private chartService: IChartService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n        this.chartService = beans.chartService!;\n    }\n\n    private readonly chartController: ChartController;\n    private chartType?: ChartType;\n    private isSwitchCategorySeriesToggled = false;\n    private categoriesDataPanel?: CategoriesDataPanel;\n    private seriesDataPanel?: SeriesDataPanel;\n    private seriesChartTypePanel?: SeriesChartTypePanel;\n    private chartSpecificPanel?: ChartSpecificDataPanel;\n    private switchCategorySeriesToggle: AgToggleButton;\n    private restoreSwitchCategorySeriesToggleFocus = false;\n    private panels: Component[] = [];\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-data-wrapper ag-scrollable-container\"></div>`);\n\n        this.chartController = chartMenuContext.chartController;\n    }\n\n    public postConstruct() {\n        this.createSwitchCategorySeriesToggle();\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n\n        this.updatePanels();\n        const listener = this.updatePanels.bind(this);\n        this.addManagedListeners(this.chartController, {\n            chartModelUpdate: listener,\n            chartApiUpdate: listener,\n        });\n    }\n\n    public override destroy(): void {\n        this.clearPanelComponents();\n        super.destroy();\n    }\n\n    private updatePanels() {\n        const currentChartType = this.chartType;\n        const isSwitchCategorySeriesToggledCurrent = this.isSwitchCategorySeriesToggled;\n        const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n\n        this.chartType = this.chartController.getChartType();\n\n        // Determine the state of the category/series toggle\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n        const hasChangedSwitchCategorySeries =\n            this.isSwitchCategorySeriesToggled !== isSwitchCategorySeriesToggledCurrent;\n\n        // Attempt to re-use existing panels where possible in order to maintain keyboard focus\n        if (this.canRefresh(currentChartType, this.chartType) && !hasChangedSwitchCategorySeries) {\n            this.categoriesDataPanel?.refresh(dimensionCols);\n            this.seriesDataPanel?.refresh(valueCols);\n            this.seriesChartTypePanel?.refresh(valueCols);\n            this.chartSpecificPanel?.refresh();\n        } else {\n            this.recreatePanels(dimensionCols, valueCols);\n        }\n\n        // Ensure the category/series toggle UI control is up-to-date\n        const isSwitchCategorySeriesDisplayed =\n            supportsInvertedCategorySeries(this.chartType) &&\n            this.chartService.isEnterprise() &&\n            !this.chartController.isGrouping();\n        _setDisplayed(this.switchCategorySeriesToggle.getGui(), isSwitchCategorySeriesDisplayed);\n        if (hasChangedSwitchCategorySeries) {\n            this.switchCategorySeriesToggle?.setValue(this.chartController.isCategorySeriesSwitched());\n        }\n        if (this.restoreSwitchCategorySeriesToggleFocus) {\n            this.restoreSwitchCategorySeriesToggleFocus = false;\n            if (isSwitchCategorySeriesDisplayed) {\n                this.switchCategorySeriesToggle.getFocusableElement().focus();\n            }\n        }\n    }\n\n    private canRefresh(oldChartType: ChartType | undefined, newChartType: ChartType): boolean {\n        if (oldChartType === undefined) return false;\n        if (oldChartType === newChartType) {\n            return true;\n        }\n        const isCombo = (chartType: ChartType) =>\n            ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(chartType);\n        if (isCombo(oldChartType) && isCombo(newChartType)) {\n            return true;\n        }\n        return false;\n    }\n\n    private recreatePanels(dimensionCols: ColState[], valueCols: ColState[]): void {\n        this.clearPanelComponents();\n\n        const { chartType } = this;\n        if (!chartType) return;\n\n        const isCategorySeriesSwitched = this.chartController.isCategorySeriesSwitched();\n\n        this.getDataPanelDef().groups?.forEach(({ type, isOpen }) => {\n            if (type === (isCategorySeriesSwitched ? 'series' : 'categories')) {\n                this.categoriesDataPanel = this.createBean(\n                    new CategoriesDataPanel(\n                        this.chartController,\n                        this.getCategoryGroupTitle(isCategorySeriesSwitched),\n                        this.getCategoryGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                        dimensionCols,\n                        isOpen\n                    )\n                );\n                this.panels.push(this.categoriesDataPanel);\n            } else if (type === (isCategorySeriesSwitched ? 'categories' : 'series')) {\n                this.seriesDataPanel = this.createBean(\n                    new SeriesDataPanel(\n                        this.chartController,\n                        this.chartMenuContext.chartOptionsService,\n                        this.getSeriesGroupTitle(isCategorySeriesSwitched),\n                        this.getSeriesGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                        this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched),\n                        valueCols,\n                        isOpen\n                    )\n                );\n                this.panels.push(this.seriesDataPanel);\n            } else if (type === 'seriesChartType') {\n                if (this.chartController.isComboChart()) {\n                    this.seriesChartTypePanel = this.createBean(\n                        new SeriesChartTypePanel(this.chartController, valueCols, isOpen)\n                    );\n                    this.panels.push(this.seriesChartTypePanel);\n                }\n            } else if (type === 'chartSpecific') {\n                this.chartSpecificPanel = this.createBean(new ChartSpecificDataPanel(this.chartMenuContext, isOpen));\n                this.panels.push(this.chartSpecificPanel);\n            } else {\n                _warnOnce(`Invalid charts data panel group name supplied: '${type}'`);\n            }\n        });\n\n        (isCategorySeriesSwitched ? this.categoriesDataPanel : this.seriesDataPanel)?.addItem(\n            this.switchCategorySeriesToggle.getGui()\n        );\n\n        this.addPanelComponents();\n    }\n\n    private addPanelComponents(): void {\n        if (!this.panels.length) {\n            return;\n        }\n        const eDocument = this.gos.getDocument();\n        const fragment = eDocument.createDocumentFragment();\n        for (const panel of this.panels) {\n            panel.addCssClass('ag-chart-data-section');\n            fragment.appendChild(panel.getGui());\n        }\n        this.getGui().appendChild(fragment);\n    }\n\n    private clearPanelComponents() {\n        const eGui = this.getGui();\n\n        this.panels.forEach((panel) => {\n            eGui.removeChild(panel.getGui());\n            this.destroyBean(panel);\n        });\n        this.panels = [];\n    }\n\n    private getDataPanelDef() {\n        return this.gos.get('chartToolPanelsDef')?.dataPanel ?? DefaultDataPanelDef;\n    }\n\n    private getCategoryGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('seriesLabels');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'labels' : 'categories');\n    }\n\n    private getCategoryGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        if (isCategorySeriesSwitched) return false;\n        return getMaxNumCategories(chartType) !== 1;\n    }\n\n    private getSeriesGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('categoryValues');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'xyValues' : 'series');\n    }\n\n    private getSeriesGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        return this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched) !== 1;\n    }\n\n    private getSeriesGroupMaxSelection(chartType: ChartType, isCategorySeriesSwitched: boolean): number | undefined {\n        if (isCategorySeriesSwitched) return undefined;\n        return getMaxNumSeries(chartType);\n    }\n\n    private createSwitchCategorySeriesToggle(): void {\n        this.switchCategorySeriesToggle = this.createManagedBean(\n            new AgToggleButton({\n                label: this.chartTranslationService.translate('switchCategorySeries'),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                value: this.chartController.isCategorySeriesSwitched(),\n                onValueChange: (value) => {\n                    this.restoreSwitchCategorySeriesToggleFocus = true;\n                    this.chartController.switchCategorySeries(value);\n                },\n            })\n        );\n    }\n}\n", "import type { IAggFunc } from '@ag-grid-community/core';\nimport { AgSelect, AgToggleButton } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport { DragDataPanel } from './dragDataPanel';\n\ntype AggFuncPreset = 'count' | 'sum' | 'min' | 'max' | 'avg' | 'first' | 'last';\n\nconst DEFAULT_AGG_FUNC: AggFuncPreset = 'sum';\n\nexport class CategoriesDataPanel extends DragDataPanel {\n    private aggFuncToggle?: AgToggleButton;\n    private aggFuncSelect?: AgSelect;\n\n    constructor(\n        chartController: ChartController,\n        private readonly title: string,\n        allowMultipleSelection: boolean,\n        private dimensionCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        const maxSelection = undefined;\n        super(chartController, allowMultipleSelection, maxSelection, /* html */ `<div id=\"categoriesGroup\"></div>`);\n    }\n\n    public postConstruct() {\n        this.groupComp = this.createBean(\n            new AgGroupComponent({\n                title: this.title,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: false,\n                cssIdentifier: 'charts-data',\n                expanded: this.isOpen,\n            })\n        );\n\n        this.createGroup(\n            this.dimensionCols,\n            (col) => col.displayName ?? '',\n            'categoryAdd',\n            'categorySelect',\n            () => !this.chartController.getAggFunc()\n        );\n        this.createAggFuncControls(this.dimensionCols);\n\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(dimensionCols: ColState[]): void {\n        this.valuePillSelect?.setValues(\n            dimensionCols,\n            dimensionCols.filter((col) => col.selected)\n        );\n        this.refreshValueSelect(dimensionCols);\n        this.refreshAggFuncControls(dimensionCols, this.chartController.getAggFunc());\n    }\n\n    private createAggFuncControls(dimensionCols: ColState[]): void {\n        const aggFunc = this.chartController.getAggFunc();\n        this.groupComp.addItem(\n            (this.aggFuncToggle = this.createBean(\n                new AgToggleButton({\n                    label: this.chartTranslationService.translate('aggregate'),\n                    labelAlignment: 'left',\n                    labelWidth: 'flex',\n                    inputWidth: 'flex',\n                    value: aggFunc != undefined,\n                    onValueChange: (value) => {\n                        const aggFunc = value ? DEFAULT_AGG_FUNC : undefined;\n                        this.chartController.setAggFunc(aggFunc);\n                        this.aggFuncSelect?.setValue(aggFunc, true);\n                        this.aggFuncSelect?.setDisplayed(aggFunc != undefined);\n                    },\n                })\n            ))\n        );\n        this.groupComp.addItem(\n            (this.aggFuncSelect = this.createBean(\n                new AgSelect<AggFuncPreset>({\n                    options: [\n                        { value: 'sum', text: this.chartTranslationService.translate('sum') },\n                        { value: 'first', text: this.chartTranslationService.translate('first') },\n                        { value: 'last', text: this.chartTranslationService.translate('last') },\n                        { value: 'min', text: this.chartTranslationService.translate('min') },\n                        { value: 'max', text: this.chartTranslationService.translate('max') },\n                        { value: 'count', text: this.chartTranslationService.translate('count') },\n                        { value: 'avg', text: this.chartTranslationService.translate('avg') },\n                    ],\n                    value: typeof aggFunc === 'string' ? aggFunc : undefined,\n                    onValueChange: (value) => {\n                        this.chartController.setAggFunc(value);\n                    },\n                })\n            ))\n        );\n        this.refreshAggFuncControls(dimensionCols, aggFunc);\n    }\n\n    private refreshAggFuncControls(dimensionCols: ColState[], aggFunc: string | IAggFunc | undefined): void {\n        const selectedDimensions = dimensionCols.filter((col) => col.selected);\n        const supportsAggregation = selectedDimensions.some((col) => col.colId !== ChartDataModel.DEFAULT_CATEGORY);\n        this.aggFuncToggle?.setValue(aggFunc != undefined);\n        this.aggFuncSelect?.setValue(typeof aggFunc === 'string' ? aggFunc : undefined, true);\n        this.aggFuncToggle?.setDisplayed(supportsAggregation);\n        this.aggFuncSelect?.setDisplayed(supportsAggregation && aggFunc != undefined);\n    }\n\n    private clearAggFuncControls(): void {\n        this.aggFuncToggle = this.destroyBean(this.aggFuncToggle);\n        this.aggFuncSelect = this.destroyBean(this.aggFuncSelect);\n    }\n\n    public override destroy(): void {\n        this.clearAggFuncControls();\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import type { AgSelectParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport { AgSelect, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { AgPillSelectChangeParams } from '../../../../widgets/agPillSelect';\nimport { AgPillSelect } from '../../../../widgets/agPillSelect';\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport { ChartDataModel } from '../../model/chartDataModel';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../services/chartTranslationService';\n\nexport abstract class DragDataPanel extends Component {\n    protected chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    protected groupComp: AgGroupComponent;\n    protected valuePillSelect?: AgPillSelect<ColState>;\n    private valueSelect?: AgSelect<ColState>;\n\n    constructor(\n        protected readonly chartController: ChartController,\n        protected readonly allowMultipleSelection: boolean,\n        private readonly maxSelection: number | undefined,\n        template?: string\n    ) {\n        super(template);\n    }\n\n    public addItem(eItem: HTMLElement): void {\n        this.groupComp.addItem(eItem);\n    }\n\n    protected createGroup(\n        columns: ColState[],\n        valueFormatter: (colState: ColState) => string,\n        selectLabelKey: ChartTranslationKey,\n        dragSourceId: string,\n        skipAnimation?: () => boolean\n    ): void {\n        if (this.allowMultipleSelection) {\n            const selectedValueList = columns.filter((col) => col.selected);\n            this.valuePillSelect = this.groupComp.createManagedBean(\n                new AgPillSelect<ColState>({\n                    valueList: columns,\n                    selectedValueList,\n                    valueFormatter,\n                    selectPlaceholder: this.chartTranslationService.translate(selectLabelKey),\n                    dragSourceId,\n                    onValuesChange: (params) => this.onValueChange(params),\n                    maxSelection: this.maxSelection,\n                })\n            );\n            this.groupComp.addItem(this.valuePillSelect);\n        } else {\n            const params: AgSelectParams<ColState> = this.createValueSelectParams(columns);\n            params.onValueChange = (updatedColState: ColState) => {\n                columns.forEach((col) => {\n                    col.selected = false;\n                });\n                updatedColState.selected = true;\n                // Clear the category aggregation function if the default ordinal category is selected\n                if (updatedColState.colId === ChartDataModel.DEFAULT_CATEGORY) {\n                    this.chartController.setAggFunc(undefined, true);\n                }\n                this.chartController.updateForPanelChange({ updatedColState, skipAnimation: skipAnimation?.() });\n            };\n            this.valueSelect = this.groupComp.createManagedBean(new AgSelect<ColState>(params));\n            this.groupComp.addItem(this.valueSelect);\n        }\n    }\n\n    protected refreshValueSelect(columns: ColState[]): void {\n        if (!this.valueSelect) {\n            return;\n        }\n        const { options, value } = this.createValueSelectParams(columns);\n        this.valueSelect.clearOptions().addOptions(options).setValue(value, true);\n    }\n\n    private createValueSelectParams(columns: ColState[]): {\n        options: ListOption<ColState>[];\n        value: ColState;\n    } {\n        let selectedValue: ColState;\n        const options = columns.map((value) => {\n            const text = value.displayName ?? '';\n            if (value.selected) {\n                selectedValue = value;\n            }\n            return {\n                value,\n                text,\n            };\n        });\n        return {\n            options,\n            value: selectedValue!,\n        };\n    }\n\n    private onValueChange({ added, updated, removed, selected }: AgPillSelectChangeParams<ColState>) {\n        let updatedColState: ColState | undefined;\n        let resetOrder: boolean | undefined;\n        const updateOrder = () => {\n            selected.forEach((col, index) => {\n                col.order = index;\n            });\n            resetOrder = true;\n        };\n        if (added.length) {\n            updatedColState = added[0];\n            updatedColState.selected = true;\n            updateOrder();\n        } else if (removed.length) {\n            updatedColState = removed[0];\n            updatedColState.selected = false;\n        } else if (updated.length) {\n            updateOrder();\n            updatedColState = updated[0];\n        }\n        if (updatedColState) {\n            this.chartController.updateForPanelChange({ updatedColState, resetOrder });\n        }\n    }\n\n    public override destroy(): void {\n        this.valuePillSelect = undefined;\n        this.valueSelect = undefined;\n        super.destroy();\n    }\n}\n", "import type { DragItem, DraggingEvent, DropTarget, ListOption } from '@ag-grid-community/core';\nimport { AgSelect, Component, DragSourceType, _escapeString, _removeFromParent } from '@ag-grid-community/core';\nimport { PillDragComp, PillDropZonePanel } from '@ag-grid-enterprise/core';\n\nexport interface AgPillSelectParams<TValue = string | null> {\n    valueList?: TValue[];\n    selectedValueList?: TValue[];\n    valueFormatter?: (value: TValue) => string;\n    ariaLabel?: string;\n    selectPlaceholder?: string;\n    onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n    dragSourceId?: string;\n    maxSelection?: number;\n}\n\nexport interface AgPillSelectChangeParams<TValue> {\n    added: TValue[];\n    removed: TValue[];\n    updated: TValue[];\n    selected: TValue[];\n}\n\nexport class AgPillSelect<TValue = string | null> extends Component {\n    private dropZonePanel: PillSelectDropZonePanel<TValue>;\n    private eSelect?: AgSelect<TValue>;\n\n    private readonly config: AgPillSelectParams<TValue>;\n    private valueList: TValue[];\n    private selectedValues: TValue[];\n    private valueFormatter: (value: TValue) => string;\n    private onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n\n    constructor(config?: AgPillSelectParams<TValue>) {\n        super(/* html */ `<div class=\"ag-pill-select\" role=\"presentation\"></div>`);\n        this.config = config ?? {};\n\n        const { selectedValueList, valueFormatter, valueList } = this.config;\n        this.selectedValues = selectedValueList ?? [];\n        this.valueList = valueList ?? [];\n        this.valueFormatter = valueFormatter ?? ((value) => _escapeString(value as any)!);\n    }\n\n    public postConstruct(): void {\n        const { ariaLabel, onValuesChange, dragSourceId } = this.config;\n        this.dropZonePanel = this.createManagedBean(\n            new PillSelectDropZonePanel(\n                {\n                    getValues: () => this.selectedValues,\n                    setValues: (values) => this.updateValues(values),\n                    isDraggable: () => this.selectedValues.length > 1,\n                },\n                (value) => this.valueFormatter(value),\n                ariaLabel!,\n                dragSourceId\n            )\n        );\n        const eGui = this.getGui();\n        eGui.appendChild(this.dropZonePanel.getGui());\n        this.initSelect();\n        if (onValuesChange != null) {\n            this.onValuesChange = onValuesChange;\n        }\n    }\n\n    public setValues(valueList: TValue[], selectedValues: TValue[]): this {\n        const { added, removed, updated } = this.getChanges(this.valueList, valueList);\n        let refreshSelect = false;\n        if (added.length || removed.length || updated.length) {\n            refreshSelect = true;\n        }\n        this.valueList = valueList;\n        this.updateValues(selectedValues, refreshSelect, true);\n        return this;\n    }\n\n    public setValueFormatter(valueFormatter: (value: TValue) => string): this {\n        this.valueFormatter = valueFormatter;\n        return this;\n    }\n\n    private initSelect(): boolean {\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            return false;\n        }\n        const { selectPlaceholder: placeholder } = this.config;\n        this.eSelect = this.createBean(\n            new AgSelect({\n                options,\n                placeholder,\n                onValueChange: (value) => this.addValue(value),\n                pickerIcon: 'chartsMenuAdd',\n            })\n        );\n        this.getGui().appendChild(this.eSelect.getGui());\n        return true;\n    }\n\n    private createSelectOptions(): ListOption<TValue>[] {\n        const options: ListOption<TValue>[] = [];\n        const { maxSelection } = this.config;\n        if (maxSelection && this.selectedValues.length >= maxSelection) {\n            return options;\n        }\n        this.valueList.forEach((value) => {\n            if (!this.selectedValues.includes(value)) {\n                options.push({ value, text: this.valueFormatter(value) });\n            }\n        });\n        return options;\n    }\n\n    private addValue(value: TValue): void {\n        this.dropZonePanel.addItem(value);\n    }\n\n    private updateValues(values: TValue[], forceRefreshSelect?: boolean, silent?: boolean): void {\n        const previousSelectedValues = this.selectedValues;\n        this.selectedValues = values;\n        const changes = this.getChanges(previousSelectedValues, values);\n        const refreshSelect = forceRefreshSelect || changes.added.length || changes.removed.length;\n        const activeElement = this.gos.getActiveDomElement();\n        const selectHasFocus = this.eSelect?.getGui().contains(activeElement);\n        const dropZoneHasFocus = this.dropZonePanel?.getGui().contains(activeElement);\n        if (!silent) {\n            this.onValuesChange?.(changes);\n        }\n        const emptyRefreshedSelect = refreshSelect ? !this.refreshSelect() : false;\n        this.dropZonePanel.refreshGui();\n        if (refreshSelect && selectHasFocus) {\n            if (emptyRefreshedSelect) {\n                this.dropZonePanel.focusList(true);\n            } else {\n                this.eSelect?.getFocusableElement().focus();\n            }\n        }\n        if (dropZoneHasFocus && !values.length) {\n            this.eSelect?.getFocusableElement().focus();\n        }\n    }\n\n    private getChanges(\n        previousSelectedValues: TValue[],\n        newSelectedValues: TValue[]\n    ): AgPillSelectChangeParams<TValue> {\n        const added = newSelectedValues.filter((value) => !previousSelectedValues.includes(value));\n        const removed = previousSelectedValues.filter((value) => !newSelectedValues.includes(value));\n        const updated = newSelectedValues.filter((value, index) => previousSelectedValues[index] !== value);\n        return { added, removed, updated, selected: newSelectedValues };\n    }\n\n    private refreshSelect(): boolean {\n        if (!this.eSelect) {\n            return this.initSelect();\n        }\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            _removeFromParent(this.eSelect.getGui());\n            this.eSelect = this.destroyBean(this.eSelect);\n            return false;\n        }\n        this.eSelect.clearOptions().addOptions(options).setValue(undefined, true);\n        return true;\n    }\n\n    public override destroy(): void {\n        this.destroyBean(this.eSelect);\n        super.destroy();\n    }\n}\n\nclass PillSelectDragComp<TValue> extends PillDragComp<TValue> {\n    constructor(\n        private readonly value: TValue,\n        dragSourceDropTarget: DropTarget,\n        ghost: boolean,\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly draggable: boolean,\n        private readonly sourceId?: string\n    ) {\n        super(dragSourceDropTarget, ghost, false);\n    }\n\n    public getItem(): TValue {\n        return this.value;\n    }\n\n    protected getDisplayName(): string {\n        return this.valueFormatter(this.value);\n    }\n\n    protected getAriaDisplayName(): string {\n        return this.getDisplayName();\n    }\n\n    protected getTooltip(): string | null | undefined {\n        return undefined;\n    }\n\n    protected createGetDragItem(): () => DragItem<TValue> {\n        return () => ({\n            value: this.value,\n        });\n    }\n\n    protected getDragSourceType(): DragSourceType {\n        return DragSourceType.ChartPanel;\n    }\n\n    protected override getDragSourceId(): string | undefined {\n        return this.sourceId;\n    }\n\n    protected override isDraggable(): boolean {\n        return this.draggable;\n    }\n}\n\nclass PillSelectDropZonePanel<TValue> extends PillDropZonePanel<PillSelectDragComp<TValue>, TValue> {\n    constructor(\n        private readonly model: {\n            getValues: () => TValue[];\n            setValues: (values: TValue[]) => void;\n            isDraggable: () => boolean;\n        },\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly ariaLabel: string,\n        private readonly sourceId?: string\n    ) {\n        super(false);\n    }\n\n    public postConstruct(): void {\n        super.init();\n    }\n\n    protected isItemDroppable(item: TValue, draggingEvent: DraggingEvent): boolean {\n        return (\n            this.isSourceEventFromTarget(draggingEvent) ||\n            (this.sourceId != null && this.sourceId === draggingEvent.dragSource.sourceId)\n        );\n    }\n\n    protected updateItems(items: TValue[]): void {\n        this.model.setValues(items);\n    }\n\n    protected getExistingItems(): TValue[] {\n        return this.model.getValues();\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? 'move' : 'notAllowed';\n    }\n\n    protected getAriaLabel(): string {\n        return this.ariaLabel;\n    }\n\n    protected createPillComponent(item: TValue, dropTarget: DropTarget, ghost: boolean): PillSelectDragComp<TValue> {\n        return new PillSelectDragComp(\n            item,\n            dropTarget,\n            ghost,\n            this.valueFormatter,\n            this.model.isDraggable(),\n            this.sourceId\n        );\n    }\n\n    protected getItems(dragItem: DragItem): TValue[] {\n        return [dragItem.value];\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.ChartPanel;\n    }\n}\n", "import type { BeanCollection, IChartService } from '@ag-grid-community/core';\nimport { AgSelect, ChartMappings, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport { canSwitchDirection, getFullChartNameTranslationKey, getSeriesType } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { ChartMenuParamsFactory } from '../chartMenuParamsFactory';\n\nexport class ChartSpecificDataPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n    private chartService: IChartService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n        this.chartService = beans.chartService!;\n    }\n\n    private readonly chartSpecificGroup: AgGroupComponent = RefPlaceholder;\n\n    private directionSelect?: AgSelect;\n    private groupTypeSelect?: AgSelect;\n    private hasContent = false;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext,\n        private isOpen?: boolean\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        const title = this.getTitle();\n        const chartSpecificGroupParams: AgGroupComponentParams = {\n            title,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen,\n            items: [...this.createDirectionSelect(), this.createGroupTypeSelect()],\n        };\n        this.setTemplate(\n            /* html */ `\n            <div id=\"chartSpecificGroup\">\n                <ag-group-component data-ref=\"chartSpecificGroup\"></ag-group-component>\n            </div>`,\n            [AgGroupComponentSelector],\n            {\n                chartSpecificGroup: chartSpecificGroupParams,\n            }\n        );\n        this.setDisplayed(this.hasContent);\n    }\n\n    public refresh(): void {\n        this.hasContent = false;\n        this.chartSpecificGroup.setTitle(this.getTitle());\n        this.updateDirectionSelect();\n        this.updateGroupTypeSelect();\n        this.setDisplayed(this.hasContent);\n    }\n\n    private getTitle(): string {\n        const chartType = this.chartMenuContext.chartController.getChartType();\n        return this.chartTranslationService.translate(getFullChartNameTranslationKey(chartType));\n    }\n\n    private createDirectionSelect(): AgSelect[] {\n        if (!this.chartService.isEnterprise()) {\n            return [];\n        }\n        const { chartOptionsService, chartController } = this.chartMenuContext;\n        const chartOptionsSeriesProxy = chartOptionsService.getSeriesOptionsProxy(() =>\n            getSeriesType(chartController.getChartType())\n        );\n        const chartSeriesMenuParamsFactory = this.createManagedBean(\n            new ChartMenuParamsFactory(chartOptionsSeriesProxy)\n        );\n        const options = (['horizontal', 'vertical'] as const).map((value) => ({\n            value,\n            text: this.chartTranslationService.translate(value),\n        }));\n        const params = chartSeriesMenuParamsFactory.getDefaultSelectParams('direction', 'direction', options);\n        const onValueChange = params.onValueChange;\n        params.onValueChange = (value) => {\n            onValueChange!(value);\n            // series and axes configuration are based on direction\n            chartController.raiseChartModelUpdateEvent();\n        };\n        this.directionSelect = this.createManagedBean(new AgSelect(params));\n        this.updateDirectionSelect();\n        return [this.directionSelect];\n    }\n\n    private updateDirectionSelect(): void {\n        const isDisplayed = canSwitchDirection(this.chartMenuContext.chartController.getChartType());\n        this.updateDisplayed(this.directionSelect, isDisplayed);\n    }\n\n    private createGroupTypeSelect(): AgSelect {\n        const { chartController, chartMenuParamsFactory } = this.chartMenuContext;\n        this.groupTypeSelect = this.createManagedBean(\n            new AgSelect(\n                chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n                    'seriesGroupType',\n                    ChartMappings.SERIES_GROUP_TYPES.map((value) => ({\n                        value,\n                        text: this.chartTranslationService.translate(`${value}SeriesGroupType`),\n                    })),\n                    chartController.getSeriesGroupType(),\n                    (value) => chartController.setSeriesGroupType(value)\n                )\n            )\n        );\n        this.updateGroupTypeSelect();\n        return this.groupTypeSelect;\n    }\n\n    private updateGroupTypeSelect(): void {\n        const isDisplayed = ['radialColumn', 'radialBar', 'nightingale'].includes(\n            this.chartMenuContext.chartController.getChartType()\n        );\n        this.updateDisplayed(this.groupTypeSelect, isDisplayed);\n    }\n\n    private updateDisplayed(select: AgSelect | undefined, isDisplayed: boolean): void {\n        select?.setDisplayed(isDisplayed);\n        if (select) {\n            this.hasContent = this.hasContent || isDisplayed;\n        }\n    }\n}\n", "import type {\n    AgCheckboxParams,\n    AgFieldParams,\n    AgInputNumberFieldParams,\n    AgSelectParams,\n    BeanCollection,\n    ListOption,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { AgColorPickerParams } from '../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../services/chartTranslationService';\nimport type { FontPanelParams } from './format/fontPanel';\n\nexport class ChartMenuParamsFactory extends BeanStub {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartOptionsProxy: ChartOptionsProxy) {\n        super();\n    }\n\n    public getDefaultColorPickerParams(\n        expression: string,\n        labelKey?: ChartTranslationKey,\n        options?: {\n            parseInputValue: (value: any) => any;\n            formatInputValue: (value: any) => any;\n        }\n    ): AgColorPickerParams {\n        return this.addValueParams(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey ?? 'color'),\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                labelAlignment: 'top',\n                pickerGap: 6,\n            },\n            options\n        );\n    }\n\n    public getDefaultNumberInputParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            precision?: number;\n            step?: number;\n            min?: number;\n            max?: number;\n        }\n    ): AgInputNumberFieldParams {\n        return this.addValueParams<AgInputNumberFieldParams>(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey),\n                labelAlignment: 'top',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                precision: options?.precision,\n                step: options?.step,\n                min: options?.min,\n                max: options?.max,\n            },\n            {\n                parseInputValue: (value) => {\n                    const numberValue = Number(value);\n                    return isNaN(numberValue) ? undefined : numberValue;\n                },\n                formatInputValue: (value) => {\n                    return value == null ? '' : `${value}`;\n                },\n            }\n        );\n    }\n\n    public getDefaultSliderParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number,\n        isArray?: boolean\n    ): AgSliderParams {\n        let value = this.chartOptionsProxy.getValue<number>(expression) ?? 0;\n        if (isArray && Array.isArray(value)) {\n            value = value[0];\n        }\n        const params = this.getDefaultSliderParamsWithoutValueParams(value, labelKey, defaultMaxValue);\n        params.onValueChange = (value) => this.chartOptionsProxy.setValue(expression, isArray ? [value] : value);\n        return params;\n    }\n\n    public getDefaultSliderParamsWithoutValueParams(\n        value: number,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number\n    ): AgSliderParams {\n        return {\n            label: this.chartTranslationService.translate(labelKey),\n            minValue: 0,\n            maxValue: Math.max(value, defaultMaxValue),\n            textFieldWidth: 45,\n            value: `${value}`,\n        };\n    }\n\n    public getDefaultCheckboxParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            readOnly?: boolean;\n            passive?: boolean;\n        }\n    ): AgCheckboxParams {\n        const value = this.chartOptionsProxy.getValue<boolean>(expression);\n        const params: AgCheckboxParams = {\n            label: this.chartTranslationService.translate(labelKey),\n            value,\n            readOnly: options?.readOnly,\n            passive: options?.passive,\n        };\n        params.onValueChange = (value) => {\n            this.chartOptionsProxy.setValue(expression, typeof value === 'boolean' ? value : undefined);\n        };\n        return params;\n    }\n\n    public getDefaultSelectParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        dropdownOptions: Array<ListOption>\n    ): AgSelectParams {\n        return this.getDefaultSelectParamsWithoutValueParams(\n            labelKey,\n            dropdownOptions,\n            this.chartOptionsProxy.getValue(expression),\n            (value) => {\n                this.chartOptionsProxy.setValue(expression, value);\n            }\n        );\n    }\n\n    public getDefaultSelectParamsWithoutValueParams(\n        labelKey: ChartTranslationKey,\n        options: Array<ListOption>,\n        value: any,\n        onValueChange: (value: any) => void\n    ): AgSelectParams {\n        return {\n            label: this.chartTranslationService.translate(labelKey),\n            labelAlignment: 'top',\n            options,\n            pickerGap: 6,\n            value,\n            onValueChange,\n        };\n    }\n\n    public getDefaultFontPanelParams(expression: string, labelKey: ChartTranslationKey): FontPanelParams {\n        const keyMapper = (key: string) => `${expression}.${key}`;\n        return this.addEnableParams<FontPanelParams>(keyMapper('enabled'), {\n            name: this.chartTranslationService.translate(labelKey),\n            suppressEnabledCheckbox: false,\n            chartMenuParamsFactory: this,\n            keyMapper,\n        } as any);\n    }\n\n    public addValueParams<P extends AgFieldParams>(\n        expression: string,\n        params: P,\n        options?: {\n            parseInputValue: (value: any) => any;\n            formatInputValue: (value: any) => any;\n        }\n    ): P {\n        const optionsValue = this.chartOptionsProxy.getValue(expression);\n        params.value = options?.formatInputValue ? options.formatInputValue(optionsValue) : optionsValue;\n        params.onValueChange = (value) => {\n            const optionsValue = options?.parseInputValue ? options.parseInputValue(value) : value;\n            this.chartOptionsProxy.setValue(expression, optionsValue);\n        };\n        return params;\n    }\n\n    public addEnableParams<\n        P extends {\n            enabled?: boolean;\n            onEnableChange?: (value: boolean) => void;\n        },\n    >(expression: string, params: P): P {\n        params.enabled = this.chartOptionsProxy.getValue(expression) ?? false;\n        params.onEnableChange = (value) => this.chartOptionsProxy.setValue(expression, value);\n        return params;\n    }\n\n    public getChartOptions(): ChartOptionsProxy {\n        return this.chartOptionsProxy;\n    }\n}\n", "import type { BeanCollection, ChartType, SeriesChartType } from '@ag-grid-community/core';\nimport { AgCheckbox, AgSelect, Component, _areEqual, _clearElement } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\n\nexport class SeriesChartTypePanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private seriesChartTypeGroupComp: AgGroupComponent;\n    private selectedColIds: string[] = [];\n    private chartTypeComps: Map<string, AgSelect> = new Map();\n    private secondaryAxisComps: Map<string, AgCheckbox> = new Map();\n\n    constructor(\n        private readonly chartController: ChartController,\n        private columns: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(/* html */ `<div id=\"seriesChartTypeGroup\"></div>`);\n    }\n\n    public postConstruct() {\n        this.createSeriesChartTypeGroup(this.columns);\n    }\n\n    public refresh(columns: ColState[]): void {\n        if (!_areEqual(this.getValidColIds(columns), this.selectedColIds)) {\n            this.recreate(columns);\n        } else {\n            this.refreshComps();\n        }\n    }\n\n    private recreate(columns: ColState[]): void {\n        this.isOpen = this.seriesChartTypeGroupComp.isExpanded();\n        _clearElement(this.getGui());\n        this.destroyBean(this.seriesChartTypeGroupComp);\n        this.columns = columns;\n        this.selectedColIds = [];\n        this.clearComps();\n        this.postConstruct();\n    }\n\n    private getValidColIds(columns: ColState[]): string[] {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        return columns\n            .filter((col) => col.selected && !!seriesChartTypes.filter((s) => s.colId === col.colId)[0])\n            .map(({ colId }) => colId);\n    }\n\n    private createSeriesChartTypeGroup(columns: ColState[]): void {\n        this.seriesChartTypeGroupComp = this.createBean(\n            new AgGroupComponent({\n                title: this.chartTranslationService.translate('seriesChartType'),\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: false,\n                cssIdentifier: 'charts-data',\n                expanded: this.isOpen,\n            })\n        );\n\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        columns.forEach((col) => {\n            if (!col.selected) {\n                return;\n            }\n\n            const seriesChartType: SeriesChartType = seriesChartTypes.filter((s) => s.colId === col.colId)[0];\n            if (!seriesChartType) {\n                return;\n            }\n\n            this.selectedColIds.push(col.colId);\n\n            const seriesItemGroup = this.seriesChartTypeGroupComp.createManagedBean(\n                new AgGroupComponent({\n                    title: col.displayName!,\n                    enabled: true,\n                    suppressEnabledCheckbox: true,\n                    suppressOpenCloseIcons: true,\n                    cssIdentifier: 'charts-format-sub-level',\n                })\n            );\n\n            const isSecondaryAxisDisabled = (chartType: ChartType) =>\n                ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n\n            const secondaryAxisComp = this.seriesChartTypeGroupComp.createManagedBean(\n                new AgCheckbox({\n                    label: this.chartTranslationService.translate('secondaryAxis'),\n                    labelWidth: 'flex',\n                    disabled: isSecondaryAxisDisabled(seriesChartType.chartType),\n                    value: !!seriesChartType.secondaryAxis,\n                    onValueChange: (enabled: boolean) =>\n                        this.chartController.updateSeriesChartType(col.colId, undefined, enabled),\n                })\n            );\n\n            seriesItemGroup.addItem(secondaryAxisComp);\n\n            const options = (['line', 'area', 'stackedArea', 'groupedColumn', 'stackedColumn'] as const).map(\n                (value) => ({ value, text: this.chartTranslationService.translate(value) })\n            );\n\n            const chartTypeComp = seriesItemGroup.createManagedBean(\n                new AgSelect({\n                    options,\n                    value: seriesChartType.chartType,\n                    onValueChange: (chartType: ChartType) =>\n                        this.chartController.updateSeriesChartType(col.colId, chartType),\n                })\n            );\n\n            seriesItemGroup.addItem(chartTypeComp);\n\n            this.seriesChartTypeGroupComp.addItem(seriesItemGroup);\n            this.chartTypeComps.set(col.colId, chartTypeComp);\n            this.secondaryAxisComps.set(col.colId, secondaryAxisComp);\n        });\n\n        this.getGui().appendChild(this.seriesChartTypeGroupComp.getGui());\n    }\n\n    private refreshComps(): void {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n        this.selectedColIds.forEach((colId) => {\n            const seriesChartType = seriesChartTypes.find((chartType) => chartType.colId === colId);\n            if (!seriesChartType) {\n                return;\n            }\n            const chartTypeComp = this.chartTypeComps.get(colId);\n            const secondaryAxisComp = this.secondaryAxisComps.get(colId);\n\n            chartTypeComp?.setValue(seriesChartType.chartType);\n            secondaryAxisComp?.setValue(!!seriesChartType.secondaryAxis);\n            secondaryAxisComp?.setDisabled(this.isSecondaryAxisDisabled(seriesChartType.chartType));\n        });\n    }\n\n    private clearComps(): void {\n        this.chartTypeComps.clear();\n        this.secondaryAxisComps.clear();\n    }\n\n    private isSecondaryAxisDisabled(chartType: ChartType): boolean {\n        return ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n    }\n\n    public override destroy(): void {\n        this.clearComps();\n        this.seriesChartTypeGroupComp = this.destroyBean(this.seriesChartTypeGroupComp)!;\n        super.destroy();\n    }\n}\n", "import { AgToggleButton } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ColState } from '../../model/chartDataModel';\nimport type { ChartOptionsService } from '../../services/chartOptionsService';\nimport { DragDataPanel } from './dragDataPanel';\n\nexport class SeriesDataPanel extends DragDataPanel {\n    constructor(\n        chartController: ChartController,\n        private readonly chartOptionsService: ChartOptionsService,\n        private readonly title: string,\n        allowMultipleSelect: boolean,\n        maxSelection: number | undefined,\n        private valueCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(chartController, allowMultipleSelect, maxSelection, /* html */ `<div id=\"seriesGroup\"></div>`);\n    }\n\n    public postConstruct() {\n        this.groupComp = this.createBean(\n            new AgGroupComponent({\n                title: this.title,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: false,\n                cssIdentifier: 'charts-data',\n                expanded: this.isOpen,\n            })\n        );\n        if (this.chartController.isActiveXYChart()) {\n            const pairedModeToggle = this.groupComp.createManagedBean(\n                new AgToggleButton({\n                    label: this.chartTranslationService.translate('paired'),\n                    labelAlignment: 'left',\n                    labelWidth: 'flex',\n                    inputWidth: 'flex',\n                    value: this.chartOptionsService.getPairedMode(),\n                    onValueChange: (newValue) => {\n                        this.chartOptionsService.setPairedMode(!!newValue);\n                        this.chartController.updateForGridChange({ maintainColState: true });\n                    },\n                })\n            );\n            this.groupComp.addItem(pairedModeToggle);\n        }\n\n        this.createGroup(this.valueCols, this.generateGetSeriesLabel(this.valueCols), 'seriesAdd', 'seriesSelect');\n\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(valueCols: ColState[]): void {\n        this.valuePillSelect?.setValueFormatter(this.generateGetSeriesLabel(valueCols));\n        this.valuePillSelect?.setValues(\n            valueCols,\n            valueCols.filter((col) => col.selected)\n        );\n        this.refreshValueSelect(valueCols);\n    }\n\n    private generateGetSeriesLabel(valueCols: ColState[]): (col: ColState) => string {\n        if (!this.chartController.isActiveXYChart()) {\n            return (col) => col.displayName ?? '';\n        }\n\n        const selectedCols = valueCols.filter((col) => col.selected);\n\n        const isBubble = this.chartController.getChartType() === 'bubble';\n        const isInPairedMode = this.chartOptionsService.getPairedMode();\n\n        const indexToAxisLabel = new Map<number, string>();\n        indexToAxisLabel.set(0, 'X');\n        indexToAxisLabel.set(1, 'Y');\n        indexToAxisLabel.set(2, 'size');\n\n        return (col: ColState): string => {\n            const escapedLabel = col.displayName ?? '';\n\n            if (!col.selected) {\n                return escapedLabel;\n            }\n\n            const index = selectedCols.indexOf(col);\n\n            if (index === -1) {\n                return escapedLabel;\n            }\n\n            let axisLabel;\n\n            if (isInPairedMode) {\n                axisLabel = indexToAxisLabel.get(index % (isBubble ? 3 : 2));\n            } else {\n                if (index === 0) {\n                    axisLabel = 'X';\n                } else {\n                    axisLabel = isBubble && index % 2 === 0 ? 'size' : 'Y';\n                }\n            }\n\n            return `${escapedLabel} (${axisLabel})`;\n        };\n    }\n\n    public override destroy(): void {\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import type { ChartFormatPanel, ChartFormatPanelGroup } from '@ag-grid-community/core';\nimport { Component, _warnOnce } from '@ag-grid-community/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartSeriesType } from '../../utils/seriesTypeMapper';\nimport { isCartesian, isPolar } from '../../utils/seriesTypeMapper';\nimport type { ChartMenuContext } from '../chartMenuContext';\nimport { ChartPanelFeature } from '../chartPanelFeature';\nimport { CartesianAxisPanel } from './axis/cartesianAxisPanel';\nimport { PolarAxisPanel } from './axis/polarAxisPanel';\nimport { ChartPanel } from './chart/chartPanel';\nimport { GroupExpansionFeature } from './groupExpansionFeature';\nimport { LegendPanel } from './legend/legendPanel';\nimport { SeriesPanel } from './series/seriesPanel';\nimport { TitlesPanel } from './titles/titlesPanel';\n\nexport interface FormatPanelOptions extends ChartMenuContext {\n    isExpandedOnInit: boolean;\n    seriesType: ChartSeriesType;\n    registerGroupComponent: (groupComponent: AgGroupComponent) => void;\n}\n\nconst DefaultFormatPanelDef: ChartFormatPanel = {\n    groups: [{ type: 'chart' }, { type: 'titles' }, { type: 'legend' }, { type: 'series' }, { type: 'axis' }],\n};\n\nexport class FormatPanel extends Component {\n    private chartPanelFeature: ChartPanelFeature;\n    private groupExpansionFeature: GroupExpansionFeature;\n\n    constructor(private readonly chartMenuContext: ChartMenuContext) {\n        super(/* html */ `<div class=\"ag-chart-format-wrapper\"></div>`);\n    }\n\n    public postConstruct() {\n        this.groupExpansionFeature = this.createManagedBean(new GroupExpansionFeature(this.getGui()));\n        this.chartPanelFeature = this.createManagedBean(\n            new ChartPanelFeature(\n                this.chartMenuContext.chartController,\n                this.getGui(),\n                'ag-chart-format-section',\n                (_chartType, seriesType) => this.createPanels(seriesType)\n            )\n        );\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(seriesType: ChartSeriesType) {\n        let panelExpandedOnInit = false;\n        this.getFormatPanelDef().groups?.forEach(({ type: group, isOpen: isExpandedOnInit = false }) => {\n            // ensure the group should be displayed for the current series type\n            if (!this.isGroupPanelShownInSeries(group, seriesType)) {\n                return;\n            }\n\n            if (isExpandedOnInit) {\n                if (panelExpandedOnInit) {\n                    _warnOnce(\n                        `As of v32, only one charts customize panel group can be expanded at a time. '${group}' will not be expanded.`\n                    );\n                }\n                panelExpandedOnInit = true;\n            }\n\n            const registerGroupComponent = (groupComponent: AgGroupComponent) =>\n                this.groupExpansionFeature.addGroupComponent(groupComponent);\n\n            const opts: FormatPanelOptions = {\n                ...this.chartMenuContext,\n                isExpandedOnInit,\n                seriesType,\n                registerGroupComponent,\n            };\n\n            switch (group) {\n                case 'chart':\n                    this.chartPanelFeature.addComponent(new ChartPanel(opts));\n                    break;\n                case 'titles':\n                    this.chartPanelFeature.addComponent(new TitlesPanel(opts));\n                    break;\n                case 'legend':\n                    this.chartPanelFeature.addComponent(new LegendPanel(opts));\n                    break;\n                case 'axis':\n                    // Polar charts have different axis options from cartesian charts, so choose the appropriate panels\n                    if (isPolar(seriesType)) {\n                        this.chartPanelFeature.addComponent(new PolarAxisPanel(opts));\n                    } else if (isCartesian(seriesType)) {\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    }\n                    break;\n                case 'horizontalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                    break;\n                case 'verticalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    break;\n                case 'series':\n                    this.chartPanelFeature.addComponent(new SeriesPanel(opts));\n                    break;\n                case 'navigator':\n                    _warnOnce(\n                        `'navigator' is now displayed in the charts advanced settings instead of the customize panel, and this setting will be ignored.`\n                    );\n                    break;\n                default:\n                    _warnOnce(`Invalid charts customize panel group name supplied: '${group}'`);\n            }\n        });\n    }\n\n    private getFormatPanelDef() {\n        const userProvidedFormatPanelDef = this.gos.get('chartToolPanelsDef')?.formatPanel;\n        return userProvidedFormatPanelDef ? userProvidedFormatPanelDef : DefaultFormatPanelDef;\n    }\n\n    private isGroupPanelShownInSeries(group: ChartFormatPanelGroup, seriesType: ChartSeriesType): boolean {\n        return (\n            ['chart', 'titles', 'legend', 'series'].includes(group) ||\n            (isCartesian(seriesType) && ['axis', 'horizontalAxis', 'verticalAxis'].includes(group)) ||\n            (isPolar(seriesType) && group === 'axis')\n        );\n    }\n}\n", "import type { AgSelect, AgSelectParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport {\n    AgCheckbox,\n    AgSelectSelector,\n    Component,\n    RefPlaceholder,\n    _removeFromParent,\n    _setDisplayed,\n} from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgCartesianAxisOptions } from 'ag-charts-community';\n\nimport { AgAngleSelect } from '../../../../../widgets/agAngleSelect';\nimport type { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSlider, AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { AxisTicksPanel } from './axisTicksPanel';\nimport { GridLinePanel } from './gridLinePanel';\n\nconst DEFAULT_TIME_AXIS_FORMAT = '%d %B %Y';\n\nexport class CartesianAxisPanel extends Component {\n    private readonly axisGroup: AgGroupComponent = RefPlaceholder;\n    private readonly axisTypeSelect: AgSelect = RefPlaceholder;\n    private readonly axisPositionSelect: AgSelect = RefPlaceholder;\n    private readonly axisTimeFormatSelect: AgSelect = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly chartOptionsSeriesProxy: ChartOptionsProxy;\n\n    private activePanels: Component[] = [];\n    private axisLabelUpdateFuncs: ((...args: any[]) => any)[] = [];\n\n    private prevRotation: number | undefined;\n\n    constructor(\n        private readonly axisType: 'xAxis' | 'yAxis',\n        private readonly options: FormatPanelOptions\n    ) {\n        super();\n\n        const { chartOptionsService, seriesType } = options;\n        this.chartOptionsSeriesProxy = chartOptionsService.getSeriesOptionsProxy(() => seriesType);\n    }\n\n    public postConstruct() {\n        const {\n            isExpandedOnInit: expanded,\n            chartOptionsService,\n            chartController,\n            registerGroupComponent,\n        } = this.options;\n        const labelKey: ChartTranslationKey = this.axisType;\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate(labelKey),\n            expanded,\n            suppressEnabledCheckbox: true,\n        };\n\n        const chartAxisOptionsProxy = chartOptionsService.getCartesianAxisOptionsProxy(this.axisType);\n        const chartAxisOptions = this.createManagedBean(new ChartMenuParamsFactory(chartAxisOptionsProxy));\n        const chartAxisThemeOverrides = this.createManagedBean(\n            new ChartMenuParamsFactory(chartOptionsService.getCartesianAxisThemeOverridesProxy(this.axisType))\n        );\n\n        const axisTypeSelectParams = this.getAxisTypeSelectParams(\n            chartAxisOptions,\n            chartOptionsService.getCartesianAxisAppliedThemeOverridesProxy(this.axisType)\n        );\n        const axisPositionSelectParams = this.getAxisPositionSelectParams(chartAxisOptions);\n        const axisTimeFormatSelectParams = this.getAxisTimeFormatSelectParams(chartAxisOptions);\n        const axisColorInputParams = this.getAxisColorInputParams(chartAxisThemeOverrides);\n        const axisLineWidthSliderParams = this.getAxisLineWidthSliderParams(chartAxisThemeOverrides);\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"axisGroup\">\n                <ag-select data-ref=\"axisTypeSelect\"></ag-select>\n                <ag-select data-ref=\"axisTimeFormatSelect\"></ag-select>\n                <ag-select data-ref=\"axisPositionSelect\"></ag-select>\n                <ag-color-picker data-ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider data-ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSelectSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                axisGroup: axisGroupParams,\n                axisTypeSelect: axisTypeSelectParams ?? undefined,\n                axisPositionSelect: axisPositionSelectParams ?? undefined,\n                axisTimeFormatSelect: axisTimeFormatSelectParams ?? undefined,\n                axisColorInput: axisColorInputParams,\n                axisLineWidthSlider: axisLineWidthSliderParams,\n            }\n        );\n        registerGroupComponent(this.axisGroup);\n\n        this.axisTypeSelect.setDisplayed(!!axisTypeSelectParams.options?.length);\n        if (!axisPositionSelectParams) this.removeTemplateComponent(this.axisPositionSelect);\n        const updateTimeFormatVisibility = () => {\n            const isTimeAxis = chartAxisOptionsProxy.getValue('type') === 'time';\n            _setDisplayed(this.axisTimeFormatSelect.getGui(), isTimeAxis);\n        };\n        if (!axisTimeFormatSelectParams) {\n            this.removeTemplateComponent(this.axisTimeFormatSelect);\n        } else {\n            // Conditionally hide the time format input based on the currently selected axis type\n            updateTimeFormatVisibility();\n            // Update the visibility whenever the axis type changes\n            this.addManagedEventListeners({\n                chartOptionsChanged: () => {\n                    updateTimeFormatVisibility();\n                },\n            });\n        }\n\n        this.initGridLines(chartAxisThemeOverrides);\n        this.initAxisTicks(chartAxisThemeOverrides);\n        this.initAxisLabels(chartAxisThemeOverrides);\n\n        const updateAxisLabelRotations = () => this.axisLabelUpdateFuncs.forEach((func) => func());\n        this.addManagedListeners(chartController, {\n            chartUpdated: updateAxisLabelRotations,\n            chartModelUpdate: () =>\n                setTimeout(() => {\n                    // make sure this runs after the actual chart update has happened\n                    this.refreshAxisTypeSelect(chartAxisOptions);\n                    updateTimeFormatVisibility();\n                }),\n        });\n    }\n\n    private getAxisTypeSelectParams(\n        chartAxisOptions: ChartMenuParamsFactory,\n        chartAxisAppliedThemeOverrides: ChartOptionsProxy\n    ): AgSelectParams {\n        const chartOptions = chartAxisOptions.getChartOptions();\n        const axisTypeSelectOptions = this.getAxisTypeSelectOptions();\n        const params = chartAxisOptions.getDefaultSelectParams('type', 'axisType', axisTypeSelectOptions);\n        params.onValueChange = (value: AgCartesianAxisOptions['type']): void => {\n            const previousAxisType = chartOptions.getValue<AgCartesianAxisOptions['type']>('type');\n            if (value === previousAxisType) return;\n            // If the axis type is changed, we need to carry over all the accumulated theme overrides\n            // that have been applied to the existing axis type so far\n            const previousAxisThemeOverrides = chartAxisAppliedThemeOverrides.getValue<AgCartesianAxisOptions>('*');\n            // Optionally update the axis label format when switching between time and non-time axes\n            const previousAxisIsTimeAxis = previousAxisType === 'time';\n            const updatedAxisIsTimeAxis = value === 'time';\n            const updatedLabelFormat =\n                previousAxisIsTimeAxis !== updatedAxisIsTimeAxis\n                    ? updatedAxisIsTimeAxis\n                        ? DEFAULT_TIME_AXIS_FORMAT\n                        : undefined\n                    : null;\n            // Update the axis type (and label format if necessary)\n            this.options.chartOptionsService.setCartesianCategoryAxisType(this.axisType, value);\n            if (updatedLabelFormat !== null) {\n                const existingLabel = chartOptions.getValue<AgCartesianAxisOptions['label']>('label') ?? {};\n                chartOptions.setValue<AgCartesianAxisOptions['label']>('label', {\n                    ...existingLabel,\n                    format: updatedLabelFormat,\n                });\n            }\n            // Reapply the previous theme overrides to the new axis type\n            chartAxisAppliedThemeOverrides.setValue<AgCartesianAxisOptions>('*', previousAxisThemeOverrides);\n        };\n        return params;\n    }\n\n    private refreshAxisTypeSelect(chartAxisOptions: ChartMenuParamsFactory): void {\n        const options = this.getAxisTypeSelectOptions();\n        const hasOptions = !!options.length;\n        this.axisTypeSelect.setDisplayed(hasOptions);\n\n        if (!hasOptions) {\n            return;\n        }\n\n        this.axisTypeSelect\n            .clearOptions()\n            .addOptions(options)\n            .setValue(chartAxisOptions.getChartOptions().getValue('type'));\n    }\n\n    private getAxisTypeSelectOptions(): ListOption[] {\n        const { chartController } = this.options;\n        const chartType = chartController.getChartType();\n        const supportsNumericalAxis = () => {\n            const testDatum = chartController.getChartData()[0];\n            if (!testDatum) {\n                return false;\n            }\n            return chartController.getSelectedDimensions().every((col) => !isNaN(parseFloat(testDatum[col.colId])));\n        };\n        if (\n            ['heatmap', 'histogram', 'boxPlot', 'rangeBar', 'scatter', 'bubble'].includes(chartType) ||\n            chartController.isGrouping() ||\n            !this.isCategoryAxis() ||\n            chartController.isCategorySeriesSwitched() ||\n            !supportsNumericalAxis()\n        ) {\n            return [];\n        }\n\n        return ['category', 'number', 'time'].map((value: 'category' | 'number' | 'time') => ({\n            value,\n            text: this.translate(value),\n        }));\n    }\n\n    private isCategoryAxis(): boolean {\n        const isHorizontal = this.chartOptionsSeriesProxy.getValue('direction') === 'horizontal';\n        return (isHorizontal && this.axisType === 'yAxis') || (!isHorizontal && this.axisType === 'xAxis');\n    }\n\n    private getAxisPositionSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        const axisPositionSelectOptions = ((chartType, axisType) => {\n            switch (chartType) {\n                // Some chart types do not support configuring the axis position\n                case 'heatmap':\n                    return null;\n                default:\n                    switch (axisType) {\n                        // Horizontal axis position can be changed between top and bottom\n                        case 'xAxis':\n                            return [\n                                { value: 'top', text: this.translate('top') },\n                                { value: 'bottom', text: this.translate('bottom') },\n                            ];\n                        // Vertical axis position can be changed between left and right\n                        case 'yAxis':\n                            return [\n                                { value: 'left', text: this.translate('left') },\n                                { value: 'right', text: this.translate('right') },\n                            ];\n                    }\n            }\n        })(this.options.chartController.getChartType(), this.axisType);\n        if (!axisPositionSelectOptions) return null;\n        return chartAxisOptions.getDefaultSelectParams('position', 'position', axisPositionSelectOptions);\n    }\n\n    private getAxisTimeFormatSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        if (!this.isCategoryAxis()) {\n            return null;\n        }\n\n        const axisTimeFormatSelectOptions = [\n            { value: '%d/%m/%Y', text: this.translate('timeFormatSlashesDDMMYYYY') },\n            { value: '%m/%d/%Y', text: this.translate('timeFormatSlashesMMDDYYYY') },\n            { value: '%d/%m/%y', text: this.translate('timeFormatSlashesDDMMYY') },\n            { value: '%m/%d/%y', text: this.translate('timeFormatSlashesMMDDYY') },\n            { value: '%d.%e.%y', text: this.translate('timeFormatDotsDDMYY') },\n            { value: '%e.%d.%y', text: this.translate('timeFormatDotsMDDYY') },\n            { value: '%Y-%m-%d', text: this.translate('timeFormatDashesYYYYMMDD') },\n            { value: '%d %B %Y', text: this.translate('timeFormatSpacesDDMMMMYYYY') },\n            { value: '%H:%M:%S', text: this.translate('timeFormatHHMMSS') },\n            { value: '%I:%M:%S %p', text: this.translate('timeFormatHHMMSSAmPm') },\n        ];\n\n        return chartAxisOptions.getDefaultSelectParams('label.format', 'timeFormat', axisTimeFormatSelectOptions);\n    }\n\n    private getAxisColorInputParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgColorPickerParams {\n        return chartAxisThemeOverrides.getDefaultColorPickerParams('line.stroke');\n    }\n\n    private getAxisLineWidthSliderParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgSliderParams {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n        // Note that there is no separate checkbox for enabling/disabling the axis line. Whenever the line width is\n        // changed, the value for `line.enabled` is inferred based on the whether the `line.width` value is non-zero.\n        const getAxisLineWidth = (): number | null => {\n            const isAxisLineEnabled = chartOptions.getValue<boolean>('line.enabled');\n            if (!isAxisLineEnabled) return null;\n            return chartOptions.getValue<number>('line.width');\n        };\n        const setAxisLineWidth = (value: number | null): void => {\n            chartOptions.setValues<number | boolean>([\n                { expression: 'line.enabled', value: value != null },\n                { expression: 'line.width', value: value ?? 0 },\n            ]);\n        };\n        const axisLineWidthSliderParams = chartAxisThemeOverrides.getDefaultSliderParamsWithoutValueParams(\n            getAxisLineWidth() ?? 0,\n            'thickness',\n            10\n        );\n        axisLineWidthSliderParams.onValueChange = (newValue) => {\n            setAxisLineWidth(newValue === 0 ? null : newValue);\n        };\n        return axisLineWidthSliderParams;\n    }\n\n    private initGridLines(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartType = this.options.chartController.getChartType();\n\n        // Some chart types do not support configuring grid lines\n        if (chartType === 'heatmap') {\n            return;\n        }\n\n        const gridLineComp = this.createBean(new GridLinePanel(chartAxisThemeOverrides));\n        this.axisGroup.addItem(gridLineComp);\n        this.activePanels.push(gridLineComp);\n    }\n\n    private initAxisTicks(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        if (!this.hasConfigurableAxisTicks()) return;\n        const axisTicksComp = this.createBean(new AxisTicksPanel(chartAxisThemeOverrides));\n        this.axisGroup.addItem(axisTicksComp);\n        this.activePanels.push(axisTicksComp);\n    }\n\n    private hasConfigurableAxisTicks(): boolean {\n        // Axis ticks are disabled for some chart types\n        const chartType = this.options.chartController.getChartType();\n        switch (chartType) {\n            case 'radarLine':\n            case 'radarArea':\n            case 'rangeBar':\n            case 'boxPlot':\n            case 'waterfall':\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    private initAxisLabels(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const params: FontPanelParams = {\n            name: this.translate('labels'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuParamsFactory: chartAxisThemeOverrides,\n            keyMapper: (key) => `label.${key}`,\n        };\n\n        const labelPanelComp = this.createBean(new FontPanel(params));\n        this.axisGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n\n        this.addAdditionalLabelComps(labelPanelComp, chartAxisThemeOverrides);\n    }\n\n    private addAdditionalLabelComps(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        this.addLabelPadding(labelPanelComp, chartAxisThemeOverrides);\n\n        const rotationComp = this.createRotationWidget('labelRotation', chartAxisThemeOverrides);\n        const autoRotateCb = this.initLabelRotation(rotationComp, chartAxisThemeOverrides);\n\n        labelPanelComp.addItem(autoRotateCb);\n        labelPanelComp.addItem(rotationComp);\n    }\n\n    private initLabelRotation(rotationComp: AgAngleSelect, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const getLabelAutoRotateValue = (): boolean => {\n            return chartOptions.getValue<boolean>('label.autoRotate');\n        };\n\n        const updateAutoRotate = (autoRotate: boolean) => {\n            // Remember the existing rotation before we clear it from the options\n            if (autoRotate) this.prevRotation = getLabelRotationValue();\n\n            // For the autoRotate option to take effect, we need to additionally clear the rotation option value\n            chartOptions.setValues<boolean | number | undefined>([\n                { expression: 'label.autoRotate', value: autoRotate },\n                // Clear the rotation option when activating auto-rotate, reinstate the previous value when deactivating\n                { expression: 'label.rotation', value: autoRotate ? undefined : this.prevRotation },\n            ]);\n\n            rotationComp.setDisplayed(!autoRotate);\n        };\n\n        const rotation = getLabelRotationValue();\n        const autoRotate = typeof rotation === 'number' ? false : getLabelAutoRotateValue();\n\n        const autoRotateCheckbox = this.createBean(\n            new AgCheckbox({\n                label: this.translate('autoRotate'),\n                value: autoRotate,\n                onValueChange: updateAutoRotate,\n            })\n        );\n\n        // init rotation comp state\n        rotationComp.setDisplayed(!autoRotate);\n\n        return autoRotateCheckbox;\n    }\n\n    private createRotationWidget(labelKey: ChartTranslationKey, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const setLabelRotationValue = (value: number | undefined): void => {\n            return chartOptions.setValue<number | undefined>('label.rotation', value);\n        };\n\n        const degreesSymbol = String.fromCharCode(176);\n\n        const label = `${this.chartTranslationService.translate(labelKey)} ${degreesSymbol}`;\n        const angleSelect = new AgAngleSelect({\n            label,\n            labelWidth: 'flex',\n            value: getLabelRotationValue() ?? 0,\n            onValueChange: setLabelRotationValue,\n        });\n\n        // the axis label rotation needs to be updated when the default category changes in the data panel\n        this.axisLabelUpdateFuncs.push(() => {\n            angleSelect.setValue(getLabelRotationValue() ?? 0);\n        });\n\n        return this.createBean(angleSelect);\n    }\n\n    private addLabelPadding(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const labelPaddingSlider = this.createBean(\n            new AgSlider(chartAxisThemeOverrides.getDefaultSliderParams('label.padding', 'padding', 30))\n        );\n\n        labelPanelComp.addItem(labelPaddingSlider);\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private removeTemplateComponent(component: Component<any>): void {\n        _removeFromParent(component.getGui());\n        this.destroyBean(component);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import type {\n    AgInputNumberField,\n    AgLabelParams,\n    BeanCollection,\n    DragListenerParams,\n    DragService,\n} from '@ag-grid-community/core';\nimport {\n    AgAbstractLabel,\n    AgInputNumberFieldSelector,\n    RefPlaceholder,\n    _exists,\n    _setFixedWidth,\n} from '@ag-grid-community/core';\n\nexport interface AgAngleSelectParams extends AgLabelParams {\n    value?: number;\n    onValueChange?: (value: number) => void;\n}\n\nexport type AgAngleSelectEvent = 'fieldValueChanged';\nexport class AgAngleSelect extends AgAbstractLabel<AgAngleSelectParams, AgAngleSelectEvent> {\n    protected dragService: DragService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragService = beans.dragService;\n    }\n\n    protected readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly eParentCircle: HTMLElement = RefPlaceholder;\n    private readonly eChildCircle: HTMLElement = RefPlaceholder;\n    private readonly eAngleValue: AgInputNumberField = RefPlaceholder;\n\n    private parentCircleRect: ClientRect | DOMRect;\n    private degrees: number;\n    private radius: number = 0;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private dragListener: DragListenerParams;\n\n    constructor(config?: AgAngleSelectParams) {\n        super(\n            config,\n            /* html */ `<div class=\"ag-angle-select\">\n            <div data-ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div class=\"ag-angle-select-field\">\n                    <div data-ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div data-ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field data-ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>`,\n            [AgInputNumberFieldSelector]\n        );\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n\n        const { value, onValueChange } = this.config;\n\n        if (value != null) {\n            this.setValue(value, undefined, true);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n\n        this.dragListener = {\n            eElement: this.eParentCircle,\n            dragStartPixels: 0,\n            onDragStart: () => {\n                this.parentCircleRect = this.eParentCircle.getBoundingClientRect();\n            },\n            onDragging: (e: MouseEvent | Touch) => this.calculateAngleDrag(e),\n            onDragStop: () => {},\n        };\n\n        this.dragService.addDragSource(this.dragListener);\n\n        this.eAngleValue\n            .setLabel('')\n            .setLabelWidth(5)\n            .setInputWidth(45)\n            .setMin(0)\n            .setMax(360)\n            .setValue(`${this.degrees}`)\n            .onValueChange((value: string) => {\n                if (value == null || value === '') {\n                    value = '0';\n                }\n                value = this.eAngleValue.normalizeValue(value);\n                let floatValue = parseFloat(value);\n                if (floatValue > 180) {\n                    floatValue = floatValue - 360;\n                }\n                this.setValue(floatValue);\n            });\n\n        this.updateNumberInput();\n\n        if (_exists(this.getValue())) {\n            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());\n        }\n\n        this.addManagedListeners(this, {\n            fieldValueChanged: () => {\n                if (this.eAngleValue.getInputElement().contains(this.gos.getActiveDomElement())) {\n                    return;\n                }\n                this.updateNumberInput();\n            },\n        });\n    }\n\n    private updateNumberInput(): void {\n        const normalizedValue = this.normalizeNegativeValue(this.getValue());\n        this.eAngleValue.setValue(normalizedValue.toString());\n    }\n\n    private positionChildCircle(radians: number) {\n        const rect = this.parentCircleRect || { width: 24, height: 24 };\n        const eChildCircle = this.eChildCircle;\n\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        eChildCircle.style.left = `${centerX + Math.cos(radians) * 8}px`;\n        eChildCircle.style.top = `${centerY + Math.sin(radians) * 8}px`;\n    }\n\n    private calculatePolar() {\n        const x = this.offsetX;\n        const y = this.offsetY;\n\n        const radians = Math.atan2(y, x);\n        this.degrees = this.toDegrees(radians);\n        this.radius = Math.sqrt(x * x + y * y);\n\n        this.positionChildCircle(radians);\n    }\n\n    private calculateCartesian() {\n        const radians = this.toRadians(this.getValue());\n        const radius = this.getRadius();\n\n        this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);\n    }\n\n    private setOffsetX(offset: number): this {\n        if (this.offsetX !== offset) {\n            this.offsetX = offset;\n            this.calculatePolar();\n        }\n\n        return this;\n    }\n\n    private setOffsetY(offset: number): this {\n        if (this.offsetY !== offset) {\n            this.offsetY = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n\n    private calculateAngleDrag(e: MouseEvent | Touch) {\n        const rect = this.parentCircleRect;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        const dx = x - centerX;\n        const dy = y - centerY;\n\n        const radians = Math.atan2(dy, dx);\n\n        this.setValue(radians, true);\n    }\n\n    private toDegrees(radians: number): number {\n        return (radians / Math.PI) * 180;\n    }\n\n    private toRadians(degrees: number): number {\n        return (degrees / 180) * Math.PI;\n    }\n\n    private normalizeNegativeValue(degrees: number): number {\n        return degrees < 0 ? 360 + degrees : degrees;\n    }\n\n    private normalizeAngle180(radians: number): number {\n        radians %= Math.PI * 2;\n\n        if (radians < -Math.PI) {\n            radians += Math.PI * 2;\n        } else if (radians >= Math.PI) {\n            radians -= Math.PI * 2;\n        }\n\n        return radians;\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public setRadius(r: number): this {\n        if (this.radius === r) {\n            return this;\n        }\n        this.radius = r;\n        this.calculateCartesian();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void): this {\n        this.addManagedListeners(this, {\n            fieldValueChanged: () => {\n                callbackFn(this.degrees);\n            },\n        });\n        return this;\n    }\n\n    public getValue(radians?: boolean): number {\n        return radians ? this.toRadians(this.degrees) : this.degrees;\n    }\n\n    public setValue(degrees: number, radians?: boolean, silent?: boolean): this {\n        let radiansValue: number;\n        if (!radians) {\n            radiansValue = this.normalizeAngle180(this.toRadians(degrees));\n        } else {\n            radiansValue = degrees;\n        }\n\n        degrees = this.toDegrees(radiansValue);\n\n        if (this.degrees !== degrees) {\n            this.degrees = Math.floor(degrees);\n            this.calculateCartesian();\n            this.positionChildCircle(radiansValue);\n            if (!silent) {\n                this.dispatchLocalEvent({ type: 'fieldValueChanged' });\n            }\n        }\n\n        return this;\n    }\n\n    public setWidth(width: number): this {\n        _setFixedWidth(this.getGui(), width);\n        return this;\n    }\n\n    public override setDisabled(disabled: boolean): this {\n        super.setDisabled(disabled);\n\n        this.eAngleValue.setDisabled(disabled);\n\n        return this;\n    }\n\n    public override destroy(): void {\n        this.dragService.removeDragSource(this.dragListener);\n        super.destroy();\n    }\n}\n", "import type { AgSelectParams, BeanCollection } from '@ag-grid-community/core';\nimport {\n    AgSelectSelector,\n    Component,\n    RefPlaceholder,\n    _capitalise,\n    _includes,\n    _removeFromParent,\n} from '@ag-grid-community/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../widgets/agColorPicker';\nimport type { ChartOptionsProxy } from '../../services/chartOptionsService';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../chartMenuParamsFactory';\n\ninterface Font {\n    fontFamily?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    fontSize?: number;\n    color?: string;\n}\n\nexport interface FontPanelParams {\n    name?: string;\n    enabled: boolean;\n    suppressEnabledCheckbox?: boolean;\n    onEnableChange?: (enabled: boolean) => void;\n    chartMenuParamsFactory: ChartMenuParamsFactory;\n    keyMapper: (key: string) => string;\n    cssIdentifier?: string;\n}\n\nexport class FontPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly fontGroup: AgGroupComponent = RefPlaceholder;\n\n    private readonly chartOptions: ChartOptionsProxy;\n    private activeComps: Component[] = [];\n\n    constructor(private readonly params: FontPanelParams) {\n        super();\n        this.chartOptions = params.chartMenuParamsFactory.getChartOptions();\n    }\n\n    public postConstruct() {\n        const {\n            cssIdentifier = 'charts-format-sub-level',\n            name: title,\n            enabled,\n            onEnableChange,\n            suppressEnabledCheckbox,\n            chartMenuParamsFactory,\n            keyMapper,\n        } = this.params;\n        const fontGroupParams: AgGroupComponentParams = {\n            cssIdentifier,\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title,\n            enabled,\n            suppressEnabledCheckbox: true,\n            onEnableChange: (enabled) => {\n                if (onEnableChange) {\n                    onEnableChange(enabled);\n                }\n            },\n            useToggle: !suppressEnabledCheckbox,\n        };\n        this.setTemplate(\n            /* html */ `<div class=\"ag-font-panel\">\n        <ag-group-component data-ref=\"fontGroup\">\n            <ag-select data-ref=\"familySelect\"></ag-select>\n            <ag-select data-ref=\"weightStyleSelect\"></ag-select>\n            <div class=\"ag-charts-font-size-color\">\n                <ag-select data-ref=\"sizeSelect\"></ag-select>\n                <ag-color-picker data-ref=\"colorPicker\"></ag-color-picker>\n            </div>\n        </ag-group-component>\n    </div>`,\n            [AgGroupComponentSelector, AgSelectSelector, AgColorPickerSelector],\n            {\n                fontGroup: fontGroupParams,\n                familySelect: this.getFamilySelectParams(),\n                weightStyleSelect: this.getWeightStyleSelectParams(),\n                sizeSelect: this.getSizeSelectParams(),\n                colorPicker: chartMenuParamsFactory.getDefaultColorPickerParams(keyMapper('color')),\n            }\n        );\n        this.addOrRemoveCssClass('ag-font-panel-no-header', !title);\n    }\n\n    public addItem(comp: Component<any>, prepend?: boolean) {\n        if (prepend) {\n            this.fontGroup.prependItem(comp);\n        } else {\n            this.fontGroup.addItem(comp);\n        }\n        this.activeComps.push(comp);\n    }\n\n    public setEnabled(enabled: boolean): void {\n        this.fontGroup.setEnabled(enabled);\n    }\n\n    private getFamilySelectParams(): AgSelectParams {\n        const families = [\n            'Arial, sans-serif',\n            'Aria Black, sans-serif',\n            'Book Antiqua,  serif',\n            'Charcoal, sans-serif',\n            'Comic Sans MS, cursive',\n            'Courier, monospace',\n            'Courier New, monospace',\n            'Gadget, sans-serif',\n            'Geneva, sans-serif',\n            'Helvetica, sans-serif',\n            'Impact, sans-serif',\n            'Lucida Console, monospace',\n            'Lucida Grande, sans-serif',\n            'Lucida Sans Unicode,  sans-serif',\n            'Monaco, monospace',\n            'Palatino Linotype, serif',\n            'Palatino, serif',\n            'Times New Roman, serif',\n            'Times, serif',\n            'Verdana, sans-serif',\n        ];\n\n        const family = this.getInitialFontValue('fontFamily');\n        let initialValue = families[0];\n\n        if (family) {\n            // check for known values using lowercase\n            const lowerCaseValues = families.map((f) => f.toLowerCase());\n            const valueIndex = lowerCaseValues.indexOf(family.toLowerCase());\n\n            if (valueIndex >= 0) {\n                initialValue = families[valueIndex];\n            } else {\n                // add user provided value to list\n                const capitalisedFontValue = _capitalise(family);\n\n                families.push(capitalisedFontValue);\n\n                initialValue = capitalisedFontValue;\n            }\n        }\n\n        const options = families.sort().map((value) => ({ value, text: value }));\n\n        return this.params.chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n            'font',\n            options,\n            `${initialValue}`,\n            (newValue) => this.setFont({ fontFamily: newValue! })\n        );\n    }\n\n    private getSizeSelectParams(): AgSelectParams {\n        const sizes = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\n        const size = this.getInitialFontValue('fontSize');\n\n        if (!_includes(sizes, size)) {\n            sizes.push(size!);\n        }\n\n        const options = sizes.sort((a, b) => a - b).map((value) => ({ value: `${value}`, text: `${value}` }));\n\n        return this.params.chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n            'size',\n            options,\n            `${size}`,\n            (newValue) => this.setFont({ fontSize: parseInt(newValue!, 10) })\n        );\n    }\n\n    private getWeightStyleSelectParams(): AgSelectParams {\n        const weight = this.getInitialFontValue('fontWeight') ?? 'normal';\n        const style = this.getInitialFontValue('fontStyle') ?? 'normal';\n\n        const weightStyles: {\n            name: 'normal' | 'bold' | 'italic' | 'boldItalic' | 'predefined';\n            weight: string;\n            style: string;\n        }[] = [\n            { name: 'normal', weight: 'normal', style: 'normal' },\n            { name: 'bold', weight: 'bold', style: 'normal' },\n            { name: 'italic', weight: 'normal', style: 'italic' },\n            { name: 'boldItalic', weight: 'bold', style: 'italic' },\n        ];\n\n        let selectedOption = weightStyles.find((x) => x.weight === weight && x.style === style);\n\n        if (!selectedOption) {\n            selectedOption = { name: 'predefined', weight, style };\n            weightStyles.unshift(selectedOption);\n        }\n\n        const options = weightStyles.map((ws) => ({\n            value: ws.name,\n            text: this.chartTranslationService.translate(ws.name),\n        }));\n\n        return this.params.chartMenuParamsFactory.getDefaultSelectParamsWithoutValueParams(\n            'weight',\n            options,\n            selectedOption.name,\n            (newValue) => {\n                const selectedWeightStyle = weightStyles.find((x) => x.name === newValue);\n\n                this.setFont({ fontWeight: selectedWeightStyle!.weight, fontStyle: selectedWeightStyle!.style });\n            }\n        );\n    }\n\n    private destroyActiveComps(): void {\n        this.activeComps.forEach((comp) => {\n            _removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActiveComps();\n        super.destroy();\n    }\n\n    private setFont(font: Font): void {\n        const { keyMapper } = this.params;\n        Object.entries(font).forEach(([fontKey, value]: [keyof Font, any]) => {\n            if (value) {\n                this.chartOptions.setValue(keyMapper(fontKey), value);\n            }\n        });\n    }\n\n    private getInitialFontValue<K extends keyof Font>(fontKey: K): Font[K] {\n        const { keyMapper } = this.params;\n        return this.chartOptions.getValue(keyMapper(fontKey));\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class AxisTicksPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const { chartMenuUtils } = this;\n        const axisTicksGroupParams = chartMenuUtils.addEnableParams<AgGroupComponentParams>('tick.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('ticks'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n        });\n        const axisTicksColorPickerParams = chartMenuUtils.getDefaultColorPickerParams('tick.stroke');\n        const axisTicksWidthSliderParams = chartMenuUtils.getDefaultSliderParams('tick.width', 'width', 10);\n        const axisTicksSizeSliderParams = chartMenuUtils.getDefaultSliderParams('tick.size', 'length', 30);\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"axisTicksGroup\">\n                <ag-color-picker data-ref=\"axisTicksColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"axisTicksWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"axisTicksSizeSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                axisTicksGroup: axisTicksGroupParams,\n                axisTicksColorPicker: axisTicksColorPickerParams,\n                axisTicksWidthSlider: axisTicksWidthSliderParams,\n                axisTicksSizeSlider: axisTicksSizeSliderParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgAxisGridLineOptions } from 'ag-charts-community';\n\nimport type { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class GridLinePanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly chartOptions: ChartOptionsProxy;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    public postConstruct() {\n        const gridLineGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>('gridLine.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('gridLines'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n        });\n        const gridLineColorPickerParams = this.getGridLineColorPickerParams('color');\n        const gridLineWidthSliderParams = this.getGridLineWidthSliderParams('thickness');\n        const gridLineLineDashSliderParams = this.getGridLineDashSliderParams('lineDash');\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"gridLineGroup\">\n                <ag-color-picker data-ref=\"gridLineColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"gridLineWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"gridLineLineDashSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                gridLineGroup: gridLineGroupParams,\n                gridLineColorPicker: gridLineColorPickerParams,\n                gridLineWidthSlider: gridLineWidthSliderParams,\n                gridLineLineDashSlider: gridLineLineDashSliderParams,\n            }\n        );\n    }\n\n    private getGridLineColorPickerParams(labelKey: ChartTranslationKey): AgColorPickerParams {\n        return this.chartMenuUtils.getDefaultColorPickerParams('gridLine.style', labelKey, {\n            formatInputValue: (value: AgAxisGridLineOptions['style']) => {\n                return value?.[0]?.stroke;\n            },\n            parseInputValue: (value: string) => {\n                const styles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style') ?? [];\n                if (styles.length === 0) return [{ stroke: value, lineDash: [] }];\n                return [{ ...styles[0], stroke: value }];\n            },\n        });\n    }\n\n    private getGridLineWidthSliderParams(labelKey: ChartTranslationKey) {\n        return this.chartMenuUtils.getDefaultSliderParams('gridLine.width', labelKey, 10);\n    }\n\n    private getGridLineDashSliderParams(labelKey: ChartTranslationKey): AgSliderParams {\n        const initialStyles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style');\n        const initialValue = initialStyles?.[0]?.lineDash?.[0];\n        const params = this.chartMenuUtils.getDefaultSliderParamsWithoutValueParams(initialValue ?? 0, labelKey, 30);\n        params.onValueChange = (value: number): void => {\n            const stroke = this.chartOptions.getValue('gridLine.style.0.stroke');\n            this.chartOptions.setValue<AgAxisGridLineOptions['style']>('gridLine.style', [\n                { lineDash: [value], stroke },\n            ]);\n        };\n        return params;\n    }\n}\n", "import type { BeanCollection, ListOption } from '@ag-grid-community/core';\nimport { AgSelect, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponent, AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport { AgSlider, AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport { getSeriesType, isRadial } from '../../../utils/seriesTypeMapper';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\n\nexport class PolarAxisPanel extends Component {\n    private readonly axisGroup: AgGroupComponent = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n    }\n\n    public postConstruct() {\n        const { isExpandedOnInit: expanded, chartAxisMenuParamsFactory, registerGroupComponent } = this.options;\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate('polarAxis'),\n            expanded,\n            suppressEnabledCheckbox: true,\n        };\n        const axisColorInputParams = chartAxisMenuParamsFactory.getDefaultColorPickerParams('line.stroke');\n        const axisLineWidthSliderParams = chartAxisMenuParamsFactory.getDefaultSliderParams(\n            'line.width',\n            'thickness',\n            10\n        );\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"axisGroup\">\n                <ag-color-picker data-ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider data-ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                axisGroup: axisGroupParams,\n                axisColorInput: axisColorInputParams,\n                axisLineWidthSlider: axisLineWidthSliderParams,\n            }\n        );\n        registerGroupComponent(this.axisGroup);\n\n        this.initAxis();\n        this.initAxisLabels();\n        this.initRadiusAxis();\n    }\n\n    private initAxis() {\n        const chartType = this.options.chartController.getChartType();\n        const hasConfigurableAxisShape = ['radarLine', 'radarArea'].includes(chartType);\n        if (hasConfigurableAxisShape) {\n            const options: Array<ListOption> = [\n                { value: 'circle', text: this.translate('circle') },\n                { value: 'polygon', text: this.translate('polygon') },\n            ];\n\n            this.axisGroup.addItem(\n                this.createSelect({\n                    labelKey: 'shape',\n                    options: options,\n                    property: 'shape',\n                })\n            );\n        }\n\n        if (chartType !== 'pie') {\n            this.axisGroup.addItem(\n                this.createSlider({\n                    labelKey: 'innerRadius',\n                    defaultMaxValue: 1,\n                    property: 'innerRadiusRatio',\n                })\n            );\n        }\n    }\n\n    private initAxisLabels() {\n        const params: FontPanelParams = {\n            name: this.translate('labels'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuParamsFactory: this.options.chartAxisMenuParamsFactory,\n            keyMapper: (key) => `label.${key}`,\n        };\n\n        const labelPanelComp = this.createManagedBean(new FontPanel(params));\n        const labelOrientationComp = this.createOrientationWidget();\n        labelPanelComp.addItem(labelOrientationComp);\n\n        this.axisGroup.addItem(labelPanelComp);\n    }\n\n    private createOrientationWidget(): AgSelect {\n        const options: Array<ListOption> = [\n            { value: 'fixed', text: this.translate('fixed') },\n            { value: 'parallel', text: this.translate('parallel') },\n            { value: 'perpendicular', text: this.translate('perpendicular') },\n        ];\n\n        return this.createSelect({\n            labelKey: 'orientation',\n            options,\n            property: 'label.orientation',\n        });\n    }\n\n    private initRadiusAxis() {\n        const chartSeriesType = getSeriesType(this.options.chartController.getChartType());\n        if (!isRadial(chartSeriesType)) return;\n\n        const items = [\n            this.createSlider({\n                labelKey: 'groupPadding',\n                defaultMaxValue: 1,\n                property: 'paddingInner',\n            }),\n            this.createSlider({\n                labelKey: 'seriesPadding',\n                defaultMaxValue: 1,\n                property: 'groupPaddingInner',\n            }),\n        ];\n\n        const paddingPanelComp = this.createManagedBean(\n            new AgGroupComponent({\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                title: this.translate('padding'),\n                items,\n            })\n        )\n            .hideEnabledCheckbox(true)\n            .hideOpenCloseIcons(true);\n\n        this.axisGroup.addItem(paddingPanelComp);\n    }\n\n    private createSlider(config: {\n        labelKey: ChartTranslationKey;\n        defaultMaxValue: number;\n        step?: number;\n        property: string;\n    }): AgSlider {\n        const { labelKey, defaultMaxValue, step = 0.05, property } = config;\n        const params = this.options.chartAxisMenuParamsFactory.getDefaultSliderParams(\n            property,\n            labelKey,\n            defaultMaxValue\n        );\n        params.step = step;\n        return this.createManagedBean(new AgSlider(params));\n    }\n\n    private createSelect(config: {\n        labelKey: ChartTranslationKey;\n        options: Array<ListOption>;\n        property: string;\n    }): AgSelect {\n        const { labelKey, options, property } = config;\n        return this.createManagedBean(\n            new AgSelect(this.options.chartAxisMenuParamsFactory.getDefaultSelectParams(property, labelKey, options))\n        );\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { BackgroundPanel } from './backgroundPanel';\nimport { PaddingPanel } from './paddingPanel';\n\nexport class ChartPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly chartGroup: AgGroupComponent = RefPlaceholder;\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n    }\n\n    public postConstruct() {\n        const {\n            chartController,\n            chartMenuParamsFactory,\n            isExpandedOnInit: expanded,\n            registerGroupComponent,\n        } = this.options;\n\n        const chartGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('chartStyle'),\n            expanded,\n            suppressEnabledCheckbox: true,\n            items: [\n                this.createManagedBean(new PaddingPanel(chartMenuParamsFactory, chartController)),\n                this.createManagedBean(new BackgroundPanel(chartMenuParamsFactory)),\n            ],\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"chartGroup\"></ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { chartGroup: chartGroupParams }\n        );\n        registerGroupComponent(this.chartGroup);\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class BackgroundPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const chartBackgroundGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'background.visible',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('background'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const colorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams('background.fill');\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"chartBackgroundGroup\">\n                <ag-color-picker data-ref=\"colorPicker\"></ag-color-picker>\n            </ag-group-component>\n        <div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector],\n            {\n                chartBackgroundGroup: chartBackgroundGroupParams,\n                colorPicker: colorPickerParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgChartPaddingOptions, AgChartThemeOverrides } from 'ag-charts-community';\n\nimport type { AgSlider } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartController } from '../../../chartController';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartThemeOverridesSeriesType } from '../../../utils/seriesTypeMapper';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class PaddingPanel extends Component {\n    private readonly paddingTopSlider: AgSlider = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private readonly chartController: ChartController\n    ) {\n        super();\n    }\n\n    public postConstruct() {\n        const chartPaddingGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('padding'),\n            suppressEnabledCheckbox: true,\n        };\n        const getSliderParams = (property: keyof AgChartPaddingOptions) =>\n            this.chartMenuUtils.getDefaultSliderParams('padding.' + property, property, 200);\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"chartPaddingGroup\">\n                <ag-slider data-ref=\"paddingTopSlider\"></ag-slider>\n                <ag-slider data-ref=\"paddingRightSlider\"></ag-slider>\n                <ag-slider data-ref=\"paddingBottomSlider\"></ag-slider>\n                <ag-slider data-ref=\"paddingLeftSlider\"></ag-slider>\n            </ag-group-component>\n        <div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                chartPaddingGroup: chartPaddingGroupParams,\n                paddingTopSlider: getSliderParams('top'),\n                paddingRightSlider: getSliderParams('right'),\n                paddingBottomSlider: getSliderParams('bottom'),\n                paddingLeftSlider: getSliderParams('left'),\n            }\n        );\n\n        this.addManagedEventListeners({\n            chartOptionsChanged: (e) => {\n                this.updateTopPadding(e.chartOptions);\n            },\n        });\n    }\n\n    private updateTopPadding(chartOptions: AgChartThemeOverrides) {\n        // keep 'top' padding in sync with chart as toggling chart title on / off change the 'top' padding\n        const topPadding = [...this.chartController.getChartSeriesTypes(), 'common']\n            .map((seriesType: ChartThemeOverridesSeriesType) => chartOptions[seriesType]?.padding?.top)\n            .find((value) => value != null);\n        if (topPadding != null) {\n            this.paddingTopSlider.setValue(`${topPadding}`);\n        }\n    }\n}\n", "import { BeanStub } from '@ag-grid-community/core';\nimport type { AgGroupComponent } from '@ag-grid-enterprise/core';\n\n// handles single group expansion\nexport class GroupExpansionFeature extends BeanStub {\n    private id: number = 0;\n    private groupComponents: Map<number, AgGroupComponent> = new Map();\n    private expandedGroupComponent?: number;\n\n    constructor(private readonly groupContainer: HTMLElement) {\n        super();\n    }\n\n    public addGroupComponent(groupComponent: AgGroupComponent): void {\n        const id = this.id++;\n        this.groupComponents.set(id, groupComponent);\n        if (groupComponent.isExpanded()) {\n            this.expandedGroupComponent = id;\n        }\n        groupComponent.onExpandedChange((expanded) => {\n            if (expanded) {\n                const previouslyExpandedGroupComponent = this.expandedGroupComponent;\n                this.expandedGroupComponent = id;\n                if (previouslyExpandedGroupComponent != null) {\n                    const groupComponentGui = groupComponent.getGui();\n                    const groupPositionInViewport =\n                        groupComponentGui.offsetTop - this.groupContainer.parentElement!.scrollTop;\n\n                    this.groupComponents.get(previouslyExpandedGroupComponent)?.toggleGroupExpand(false, true);\n\n                    // if the group above is collapsed, the expanded component will be in the wrong place, so scroll\n                    let newScrollTop = groupComponentGui.offsetTop - groupPositionInViewport;\n                    if (newScrollTop < 0) {\n                        newScrollTop = 0;\n                    }\n                    if (newScrollTop !== this.groupContainer.parentElement!.scrollTop) {\n                        this.groupContainer.parentElement!.scrollTop = newScrollTop;\n                    }\n                }\n            } else {\n                this.expandedGroupComponent = undefined;\n            }\n        });\n    }\n\n    public override destroy(): void {\n        this.groupComponents.clear();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgCheckbox, AgSelect, Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponent, AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\n\nexport class LegendPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly legendGroup: AgGroupComponent = RefPlaceholder;\n\n    private readonly key: string;\n    private readonly isGradient: boolean;\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n\n        this.isGradient = ['treemap', 'sunburst', 'heatmap'].includes(options.seriesType);\n        this.key = this.isGradient ? 'gradientLegend' : 'legend';\n    }\n\n    public postConstruct() {\n        const { chartMenuParamsFactory, isExpandedOnInit: expanded, registerGroupComponent } = this.options;\n        const positionSelect = this.createManagedBean(\n            new AgSelect(\n                chartMenuParamsFactory.getDefaultSelectParams(\n                    `${this.key}.position`,\n                    'position',\n                    ['top', 'right', 'bottom', 'left'].map((position: ChartTranslationKey) => ({\n                        value: position,\n                        text: this.chartTranslationService.translate(position),\n                    }))\n                )\n            )\n        );\n        const enabledGroup = this.createManagedBean(\n            new AgGroupComponent(\n                chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(`${this.key}.enabled`, {\n                    cssIdentifier: 'charts-format-sub-level',\n                    direction: 'vertical',\n                    suppressOpenCloseIcons: true,\n                    title: this.chartTranslationService.translate('legendEnabled'),\n                    suppressEnabledCheckbox: true,\n                    useToggle: true,\n                    items: [\n                        this.createLabelPanel(chartMenuParamsFactory),\n                        positionSelect,\n                        ...this.getItems(chartMenuParamsFactory),\n                    ],\n                })\n            )\n        );\n        const legendGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('legend'),\n            suppressEnabledCheckbox: true,\n            expanded,\n            items: [enabledGroup],\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"legendGroup\">\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            {\n                legendGroup: legendGroupParams,\n            }\n        );\n        registerGroupComponent(this.legendGroup);\n    }\n\n    private getItems(chartMenuParamsFactory: ChartMenuParamsFactory): Component<any>[] {\n        const createSlider = (expression: string, labelKey: ChartTranslationKey, defaultMaxValue: number) =>\n            this.createManagedBean(\n                new AgSlider(\n                    chartMenuParamsFactory.getDefaultSliderParams(\n                        `${this.key}.${expression}`,\n                        labelKey,\n                        defaultMaxValue\n                    )\n                )\n            );\n        if (this.isGradient) {\n            return [\n                this.createManagedBean(\n                    new AgCheckbox(\n                        chartMenuParamsFactory.addValueParams('gradientLegend.reverseOrder', {\n                            label: this.chartTranslationService.translate('reverseDirection'),\n                            labelWidth: 'flex',\n                        })\n                    )\n                ),\n                createSlider('gradient.thickness', 'thickness', 40),\n                createSlider('gradient.preferredLength', 'preferredLength', 300),\n                createSlider('spacing', 'spacing', 200),\n            ];\n        }\n        return [\n            createSlider('spacing', 'spacing', 200),\n            createSlider('item.marker.size', 'markerSize', 40),\n            createSlider('item.marker.strokeWidth', 'markerStroke', 10),\n            createSlider('item.marker.padding', 'itemSpacing', 20),\n            createSlider('item.paddingX', 'layoutHorizontalSpacing', 50),\n            createSlider('item.paddingY', 'layoutVerticalSpacing', 50),\n        ];\n    }\n\n    private createLabelPanel(chartMenuParamsFactory: ChartMenuParamsFactory): FontPanel {\n        const rootKey = this.isGradient ? 'gradientLegend.scale.label' : 'legend.item.label';\n        const params: FontPanelParams = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuParamsFactory,\n            keyMapper: (key) => `${rootKey}.${key}`,\n            cssIdentifier: 'charts-format-sub-level-no-header',\n        };\n\n        return this.createManagedBean(new FontPanel(params));\n    }\n}\n", "import type { AgToggleButtonParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport {\n    AgSelect,\n    AgToggleButton,\n    Component,\n    RefPlaceholder,\n    _errorOnce,\n    _removeFromParent,\n} from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\nimport type { AgRangeBarSeriesLabelPlacement } from 'ag-charts-community';\n\nimport { AgColorPicker } from '../../../../../widgets/agColorPicker';\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartSeriesType } from '../../../utils/seriesTypeMapper';\nimport { getSeriesType, isPieChartSeries } from '../../../utils/seriesTypeMapper';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { FontPanel } from '../fontPanel';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { CalloutPanel } from './calloutPanel';\nimport { CapsPanel } from './capsPanel';\nimport { ConnectorLinePanel } from './connectorLinePanel';\nimport { MarkersPanel } from './markersPanel';\nimport { SeriesItemsPanel } from './seriesItemsPanel';\nimport { getShapeSelectOptions } from './seriesUtils';\nimport { ShadowPanel } from './shadowPanel';\nimport { TileSpacingPanel } from './tileSpacingPanel';\nimport { WhiskersPanel } from './whiskersPanel';\n\nconst tooltips = 'tooltips';\nconst strokeWidth = 'strokeWidth';\nconst lineDash = 'lineDash';\nconst lineOpacity = 'lineOpacity';\nconst fillOpacity = 'fillOpacity';\nconst labels = 'labels';\nconst shadow = 'shadow';\n\nexport class SeriesPanel extends Component {\n    private readonly seriesGroup: AgGroupComponent = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private chartMenuUtils: ChartMenuParamsFactory;\n\n    private activePanels: Component<any>[] = [];\n    private seriesType: ChartSeriesType;\n\n    private readonly widgetFuncs = {\n        lineWidth: () => this.initStrokeWidth('lineWidth'),\n        [strokeWidth]: () => this.initStrokeWidth('strokeWidth'),\n        lineColor: () => this.initLineColor(),\n        [lineDash]: () => this.initLineDash(),\n        [lineOpacity]: () => this.initOpacity('strokeOpacity'),\n        [fillOpacity]: () => this.initOpacity('fillOpacity'),\n        markers: () => new MarkersPanel(this.chartMenuUtils),\n        [labels]: () => this.initLabels(),\n        sectorLabels: () => this.initSectorLabels(),\n        [shadow]: () => new ShadowPanel(this.chartMenuUtils),\n        [tooltips]: () => this.initTooltips(),\n        bins: () => this.initBins(),\n        whiskers: () => new WhiskersPanel(this.chartMenuUtils),\n        caps: () => new CapsPanel(this.chartMenuUtils),\n        connectorLine: () => new ConnectorLinePanel(this.chartMenuUtils),\n        seriesItems: () => new SeriesItemsPanel(this.chartMenuUtils),\n        tileSpacing: () => new TileSpacingPanel(this.chartMenuUtils),\n        shape: () => this.initShape(),\n        size: () => this.initSize('size', 'size'),\n        minSize: () => this.initSize('size', 'minSize'),\n        maxSize: () => this.initSize('maxSize', 'maxSize'),\n    } as const;\n\n    private readonly seriesWidgetMappings: { [K in ChartSeriesType]?: (keyof typeof this.widgetFuncs)[] } = {\n        bar: [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels, shadow],\n        pie: [tooltips, strokeWidth, lineOpacity, fillOpacity, labels, 'sectorLabels', shadow],\n        donut: [tooltips, strokeWidth, lineOpacity, fillOpacity, labels, 'sectorLabels', shadow],\n        line: [tooltips, 'lineWidth', lineDash, lineOpacity, 'markers', labels],\n        scatter: [tooltips, 'shape', 'size', strokeWidth, labels],\n        bubble: [tooltips, 'shape', 'minSize', 'maxSize', strokeWidth, labels],\n        area: [tooltips, 'lineWidth', lineDash, lineOpacity, fillOpacity, 'markers', labels, shadow],\n        histogram: [tooltips, 'bins', strokeWidth, lineDash, lineOpacity, fillOpacity, labels, shadow],\n        'radial-column': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'radial-bar': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'radar-line': [tooltips, strokeWidth, lineDash, lineOpacity, 'markers', labels],\n        'radar-area': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, 'markers', labels],\n        nightingale: [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'box-plot': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, 'whiskers', 'caps'],\n        'range-bar': [tooltips, strokeWidth, lineDash, lineOpacity, fillOpacity, labels],\n        'range-area': [tooltips, 'lineWidth', lineDash, lineOpacity, fillOpacity, 'markers', labels, shadow],\n        treemap: [tooltips, 'tileSpacing'],\n        sunburst: [tooltips],\n        heatmap: [tooltips, labels, 'lineColor', 'lineWidth', lineOpacity],\n        waterfall: [tooltips, 'connectorLine', 'seriesItems'],\n    };\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n        this.seriesType = options.seriesType;\n    }\n\n    public postConstruct() {\n        const {\n            isExpandedOnInit: expanded,\n            chartOptionsService,\n            chartController,\n            registerGroupComponent,\n        } = this.options;\n        const seriesGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate('series'),\n            expanded,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"seriesGroup\">\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { seriesGroup: seriesGroupParams }\n        );\n\n        registerGroupComponent(this.seriesGroup);\n\n        this.chartMenuUtils = this.createManagedBean(\n            new ChartMenuParamsFactory(chartOptionsService.getSeriesOptionsProxy(() => this.seriesType))\n        );\n\n        this.addManagedListeners(chartController, { chartSeriesChartTypeChanged: this.refreshWidgets.bind(this) });\n\n        this.refreshWidgets();\n    }\n\n    private refreshWidgets(): void {\n        const { chartController } = this.options;\n        this.destroyActivePanels();\n\n        const chart = chartController.getChartProxy().getChart();\n        chart\n            .waitForUpdate()\n            .then(() => {\n                const componentWasRemoved = !this.isAlive();\n                if (componentWasRemoved) {\n                    // It's possible that the component was unmounted during the async delay in updating the chart.\n                    // If this is the case we want to bail out to avoid operating on stale UI components.\n                    return;\n                }\n                if (chartController.isComboChart()) {\n                    this.updateSeriesType();\n                    this.initSeriesSelect();\n                }\n\n                (this.seriesWidgetMappings[this.seriesType] ?? []).forEach((w) => {\n                    const widgetFuncResult = this.widgetFuncs[w]();\n                    let widget: Component<any>;\n                    if (Array.isArray(widgetFuncResult)) {\n                        const comp = this.createBean(widgetFuncResult[0]);\n                        widget = comp;\n                        widgetFuncResult[1](comp);\n                    } else {\n                        widget = this.createBean(widgetFuncResult);\n                    }\n                    this.seriesGroup.addItem(widget);\n                    this.activePanels.push(widget);\n                });\n            })\n            .catch((e) => _errorOnce(`chart rendering failed`, e));\n    }\n\n    private initSeriesSelect() {\n        const seriesSelect = this.createBean(\n            new AgSelect(\n                this.chartMenuUtils.getDefaultSelectParamsWithoutValueParams(\n                    'seriesType',\n                    this.getSeriesSelectOptions(),\n                    `${this.seriesType}`,\n                    (newValue: ChartSeriesType) => {\n                        this.seriesType = newValue;\n                        this.refreshWidgets();\n                    }\n                )\n            )\n        );\n\n        this.seriesGroup.addItem(seriesSelect);\n\n        this.activePanels.push(seriesSelect);\n    }\n\n    private initTooltips(): AgToggleButton {\n        return new AgToggleButton(\n            this.chartMenuUtils.addValueParams<AgToggleButtonParams>('tooltip.enabled', {\n                label: this.translate('tooltips'),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n            })\n        );\n    }\n\n    private initLineColor(): AgColorPicker {\n        return new AgColorPicker(this.chartMenuUtils.getDefaultColorPickerParams('stroke', 'strokeColor'));\n    }\n\n    private initStrokeWidth(labelKey: 'strokeWidth' | 'lineWidth'): AgSlider {\n        return new AgSlider(this.chartMenuUtils.getDefaultSliderParams('strokeWidth', labelKey, 10));\n    }\n\n    private initLineDash(): AgSlider {\n        return new AgSlider(this.chartMenuUtils.getDefaultSliderParams('lineDash', 'lineDash', 30, true));\n    }\n\n    private initOpacity(type: 'strokeOpacity' | 'fillOpacity'): AgSlider {\n        const params = this.chartMenuUtils.getDefaultSliderParams(type, type, 1);\n        params.step = 0.05;\n        return new AgSlider(params);\n    }\n\n    private initLabels(): [FontPanel, (fontPanel: FontPanel) => void] {\n        const isPieChart = isPieChartSeries(this.seriesType);\n        const seriesOptionLabelProperty = isPieChart ? 'calloutLabel' : 'label';\n        const labelKey = isPieChart ? 'calloutLabels' : 'labels';\n        const labelParams = this.chartMenuUtils.getDefaultFontPanelParams(seriesOptionLabelProperty, labelKey);\n        const fontPanel = new FontPanel(labelParams);\n\n        const addItems = (labelPanelComp: FontPanel) => {\n            if (isPieChart) {\n                const calloutPanelComp = labelPanelComp.createManagedBean(new CalloutPanel(this.chartMenuUtils));\n                labelPanelComp.addItem(calloutPanelComp);\n                this.activePanels.push(calloutPanelComp);\n            }\n\n            if (this.seriesType === 'range-bar') {\n                // Add label placement dropdown\n                const options: Array<ListOption<AgRangeBarSeriesLabelPlacement>> = [\n                    { value: 'inside', text: this.translate('inside') },\n                    { value: 'outside', text: this.translate('outside') },\n                ];\n                const placementSelect = labelPanelComp.createManagedBean(\n                    new AgSelect(\n                        this.chartMenuUtils.getDefaultSelectParams('label.placement', 'labelPlacement', options)\n                    )\n                );\n\n                labelPanelComp.addItem(placementSelect);\n                this.activePanels.push(placementSelect);\n\n                // Add padding slider\n                const paddingSlider = labelPanelComp.createManagedBean(\n                    new AgSlider(this.chartMenuUtils.getDefaultSliderParams('label.padding', 'padding', 200))\n                );\n\n                labelPanelComp.addItem(paddingSlider);\n                this.activePanels.push(paddingSlider);\n            }\n        };\n\n        return [fontPanel, addItems];\n    }\n\n    private initSectorLabels(): [FontPanel, (fontPanel: FontPanel) => void] {\n        const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams('sectorLabel', 'sectorLabels');\n        const fontPanel = new FontPanel(sectorParams);\n\n        const addItems = (sectorPanelComp: FontPanel) => {\n            const positionRatioParams = this.chartMenuUtils.getDefaultSliderParams(\n                'sectorLabel.positionRatio',\n                'positionRatio',\n                1\n            );\n            positionRatioParams.step = 0.05;\n            const positionRatioComp = sectorPanelComp.createManagedBean(new AgSlider(positionRatioParams));\n            sectorPanelComp.addItem(positionRatioComp);\n        };\n\n        return [fontPanel, addItems];\n    }\n\n    private initBins(): AgSlider {\n        const params = this.chartMenuUtils.getDefaultSliderParams('binCount', 'histogramBinCount', 20);\n        const chartOptions = this.chartMenuUtils.getChartOptions();\n        // this needs fixing\n        const value = (chartOptions.getValue<any>('bins') ?? chartOptions.getValue<any>('calculatedBins', true)).length;\n        params.value = `${value}`;\n        params.maxValue = Math.max(value, 20);\n        return new AgSlider(params);\n    }\n\n    private initShape(): AgSelect {\n        return new AgSelect(\n            this.chartMenuUtils.getDefaultSelectParams(\n                'shape',\n                'shape',\n                getShapeSelectOptions(this.chartTranslationService)\n            )\n        );\n    }\n\n    private initSize(expression: 'size' | 'maxSize', labelKey: 'size' | 'minSize' | 'maxSize'): AgSlider {\n        return new AgSlider(this.chartMenuUtils.getDefaultSliderParams(expression, labelKey, 60));\n    }\n\n    private getSeriesSelectOptions(): ListOption[] {\n        const activeSeriesTypes = this.getActiveSeriesTypes();\n        return (['area', 'bar', 'line'] as const)\n            .filter((seriesType) => activeSeriesTypes.includes(seriesType))\n            .map((value) => ({ value, text: this.translate(value) }));\n    }\n\n    private updateSeriesType() {\n        const activeSeriesTypes = this.getActiveSeriesTypes();\n        const invalidSeriesType = !activeSeriesTypes.includes(this.seriesType);\n        if (invalidSeriesType && activeSeriesTypes.length > 0) {\n            this.seriesType = activeSeriesTypes[0]; // default to first active series type\n        }\n    }\n\n    private getActiveSeriesTypes(): ChartSeriesType[] {\n        return this.options.chartController.getActiveSeriesChartTypes().map((s) => getSeriesType(s.chartType));\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class CalloutPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const calloutGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('callout'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"calloutGroup\">\n                <ag-slider data-ref=\"calloutLengthSlider\"></ag-slider>\n                <ag-slider data-ref=\"calloutStrokeWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"labelOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                calloutGroup: calloutGroupParams,\n                calloutLengthSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLine.length', 'length', 40),\n                calloutStrokeWidthSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'calloutLine.strokeWidth',\n                    'strokeWidth',\n                    10\n                ),\n                labelOffsetSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLabel.offset', 'offset', 30),\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class CapsPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const capsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('cap'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        const capLengthRatioSliderParams = this.chartMenuUtils.getDefaultSliderParams(\n            'cap.lengthRatio',\n            'capLengthRatio',\n            1\n        );\n        capLengthRatioSliderParams.step = 0.05;\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"capsGroup\">\n                <ag-slider data-ref=\"capLengthRatioSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                capsGroup: capsGroupParams,\n                capLengthRatioSlider: capLengthRatioSliderParams,\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ConnectorLinePanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const lineGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('connectorLine'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"lineGroup\">\n                <ag-color-picker data-ref=\"lineColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"lineStrokeWidthSlider\"></ag-slider>\n                <ag-slider data-ref=\"lineOpacitySlider\"></ag-slider>\n                <ag-slider data-ref=\"lineDashSlider\"></ag-slider>                \n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                lineGroup: lineGroupParams,\n                lineColorPicker: this.chartMenuUtils.getDefaultColorPickerParams('line.stroke'),\n                lineStrokeWidthSlider: this.getSliderParams('strokeWidth', 10, 'line.strokeWidth'),\n                lineDashSlider: this.getSliderParams('lineDash', 30, 'line.lineDash', 1, true),\n                lineOpacitySlider: this.getSliderParams('strokeOpacity', 1, 'line.strokeOpacity', 0.05),\n            }\n        );\n    }\n\n    private getSliderParams(\n        labelKey: ChartTranslationKey,\n        maxValue: number,\n        seriesOptionKey: string,\n        step: number = 1,\n        isArray: boolean = false\n    ): AgSliderParams {\n        const params = this.chartMenuUtils.getDefaultSliderParams(seriesOptionKey, labelKey, maxValue, isArray);\n        params.step = step;\n        return params;\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { AgSelectSelector, Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { getShapeSelectOptions } from './seriesUtils';\n\nexport class MarkersPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const seriesMarkersGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>('marker.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('markers'),\n            suppressEnabledCheckbox: true,\n            useToggle: true,\n            suppressOpenCloseIcons: true,\n        });\n\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"seriesMarkersGroup\">\n                <ag-select data-ref=\"seriesMarkerShapeSelect\"></ag-select>\n                <ag-slider data-ref=\"seriesMarkerSizeSlider\"></ag-slider>\n                <ag-slider data-ref=\"seriesMarkerStrokeWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSelectSelector, AgSliderSelector],\n            {\n                seriesMarkersGroup: seriesMarkersGroupParams,\n                seriesMarkerShapeSelect: this.chartMenuUtils.getDefaultSelectParams(\n                    'marker.shape',\n                    'shape',\n                    getShapeSelectOptions(this.chartTranslationService)\n                ),\n                seriesMarkerSizeSlider: this.chartMenuUtils.getDefaultSliderParams('marker.size', 'size', 60),\n                seriesMarkerStrokeWidthSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'marker.strokeWidth',\n                    'strokeWidth',\n                    10\n                ),\n            }\n        );\n    }\n}\n", "import type { ListOption } from '@ag-grid-community/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\n\nexport function getShapeSelectOptions(chartTranslationService: ChartTranslationService): ListOption[] {\n    return (['square', 'circle', 'cross', 'diamond', 'plus', 'triangle', 'heart'] as const).map((value) => ({\n        value,\n        text: chartTranslationService.translate(value),\n    }));\n}\n", "import type { AgSelectParams, BeanCollection, ListOption } from '@ag-grid-community/core';\nimport { AgSelectSelector, Component, RefPlaceholder, _removeFromParent } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { FontPanel } from '../fontPanel';\n\ntype SeriesItemType = 'positive' | 'negative';\n\nexport class SeriesItemsPanel extends Component {\n    private readonly seriesItemsGroup: AgGroupComponent = RefPlaceholder;\n\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private activePanels: Component<any>[] = [];\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const seriesItemsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('seriesItems'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"seriesItemsGroup\">\n                <ag-select data-ref=\"seriesItemSelect\"></ag-select>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSelectSelector],\n            {\n                seriesItemsGroup: seriesItemsGroupParams,\n                seriesItemSelect: this.getSeriesItemsParams(),\n            }\n        );\n\n        this.initSeriesControls();\n    }\n\n    private getSeriesItemsParams(): AgSelectParams {\n        const options: ListOption<SeriesItemType>[] = [\n            { value: 'positive', text: this.chartTranslationService.translate('seriesItemPositive') },\n            { value: 'negative', text: this.chartTranslationService.translate('seriesItemNegative') },\n        ];\n\n        const seriesItemChangedCallback = (newValue: SeriesItemType) => {\n            this.destroyActivePanels();\n            this.initSeriesControls(newValue as SeriesItemType);\n        };\n\n        return this.chartMenuUtils.getDefaultSelectParamsWithoutValueParams(\n            'seriesItemType',\n            options,\n            'positive',\n            seriesItemChangedCallback\n        );\n    }\n\n    private initSeriesControls(itemType: SeriesItemType = 'positive') {\n        this.initSlider('strokeWidth', 10, `item.${itemType}.strokeWidth`);\n        this.initSlider('lineDash', 30, `item.${itemType}.lineDash`, 1, true);\n        this.initSlider('strokeOpacity', 1, `item.${itemType}.strokeOpacity`, 0.05, false);\n        this.initSlider('fillOpacity', 1, `item.${itemType}.fillOpacity`, 0.05, false);\n        this.initItemLabels(itemType);\n    }\n\n    private initSlider(\n        labelKey: ChartTranslationKey,\n        maxValue: number,\n        seriesOptionKey: string,\n        step: number = 1,\n        isArray: boolean = false\n    ) {\n        const params = this.chartMenuUtils.getDefaultSliderParams(seriesOptionKey, labelKey, maxValue, isArray);\n        params.step = step;\n\n        const itemSlider = this.seriesItemsGroup.createManagedBean(new AgSlider(params));\n\n        this.seriesItemsGroup.addItem(itemSlider);\n        this.activePanels.push(itemSlider);\n    }\n\n    private initItemLabels(itemType: 'positive' | 'negative') {\n        const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams(\n            `item.${itemType}.label`,\n            'seriesItemLabels'\n        );\n\n        const labelPanelComp = this.createBean(new FontPanel(sectorParams));\n        this.seriesItemsGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach((panel) => {\n            _removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ShadowPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private propertyKey: string = 'shadow'\n    ) {\n        super();\n    }\n\n    public postConstruct() {\n        // Determine the path within the series options object to get/set the individual shadow options\n        const propertyNamespace = this.propertyKey;\n        const shadowGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            `${propertyNamespace}.enabled`,\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('shadow'),\n                suppressEnabledCheckbox: true,\n                useToggle: true,\n            }\n        );\n        const shadowColorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams(`${propertyNamespace}.color`);\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"shadowGroup\">\n                <ag-color-picker data-ref=\"shadowColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"shadowBlurSlider\"></ag-slider>\n                <ag-slider data-ref=\"shadowXOffsetSlider\"></ag-slider>\n                <ag-slider data-ref=\"shadowYOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                shadowGroup: shadowGroupParams,\n                shadowColorPicker: shadowColorPickerParams,\n                shadowBlurSlider: this.getSliderParams('blur', 0, 20),\n                shadowXOffsetSlider: this.getSliderParams('xOffset', -10, 10),\n                shadowYOffsetSlider: this.getSliderParams('yOffset', -10, 10),\n            }\n        );\n    }\n\n    private getSliderParams(property: ChartTranslationKey, minValue: number, defaultMaxValue: number): AgSliderParams {\n        const expression = `${this.propertyKey}.${property}`;\n        const params = this.chartMenuUtils.getDefaultSliderParams(expression, property, defaultMaxValue);\n        params.minValue = minValue;\n        return params;\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class TileSpacingPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"groupSpacing\">\n                <ag-slider data-ref=\"groupPaddingSlider\"></ag-slider>\n                <ag-slider data-ref=\"groupSpacingSlider\"></ag-slider>\n            </ag-group-component>\n            <ag-group-component data-ref=\"tileSpacing\">\n                <ag-slider data-ref=\"tilePaddingSlider\"></ag-slider>\n                <ag-slider data-ref=\"tileSpacingSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgSliderSelector],\n            {\n                groupSpacing: { ...groupParams, title: this.chartTranslationService.translate('group') },\n                tileSpacing: { ...groupParams, title: this.chartTranslationService.translate('tile') },\n                groupPaddingSlider: this.getSliderParams('padding', 'group.padding'),\n                groupSpacingSlider: this.getSliderParams('spacing', 'group.gap'),\n                tilePaddingSlider: this.getSliderParams('padding', 'tile.padding'),\n                tileSpacingSlider: this.getSliderParams('spacing', 'tile.gap'),\n            }\n        );\n    }\n\n    private getSliderParams(labelKey: ChartTranslationKey, key: string): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(key, labelKey, 10);\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\nimport type { AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { AgColorPickerSelector } from '../../../../../widgets/agColorPicker';\nimport { AgSliderSelector } from '../../../../../widgets/agSlider';\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class WhiskersPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    public postConstruct() {\n        const whiskersGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('whisker'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"whiskersGroup\">\n                <ag-color-picker data-ref=\"whiskerColorPicker\"></ag-color-picker>\n                <ag-slider data-ref=\"whiskerThicknessSlider\"></ag-slider>\n                <ag-slider data-ref=\"whiskerOpacitySlider\"></ag-slider>\n                <ag-slider data-ref=\"whiskerLineDashSlider\"></ag-slider>\n                <ag-slider data-ref=\"whiskerLineDashOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector, AgColorPickerSelector, AgSliderSelector],\n            {\n                whiskersGroup: whiskersGroupParams,\n                whiskerColorPicker: this.chartMenuUtils.getDefaultColorPickerParams('whisker.stroke'),\n                whiskerThicknessSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.strokeWidth',\n                    'strokeWidth',\n                    10\n                ),\n                whiskerOpacitySlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.strokeOpacity',\n                    'strokeOpacity',\n                    1\n                ),\n                whiskerLineDashSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.lineDash',\n                    'lineDash',\n                    30,\n                    true\n                ),\n                whiskerLineDashOffsetSlider: this.chartMenuUtils.getDefaultSliderParams(\n                    'whisker.lineDashOffset',\n                    'lineDashOffset',\n                    30\n                ),\n            }\n        );\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport type { ChartTranslationService } from '../../../services/chartTranslationService';\nimport { isCartesian, isPolar } from '../../../utils/seriesTypeMapper';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FormatPanelOptions } from '../formatPanel';\nimport { ChartTitlePanel } from './chartTitlePanel';\nimport { TitlePanel } from './titlePanel';\n\nexport class TitlesPanel extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n    private readonly titleGroup: AgGroupComponent = RefPlaceholder;\n\n    constructor(private readonly options: FormatPanelOptions) {\n        super();\n    }\n\n    public postConstruct() {\n        const {\n            chartMenuParamsFactory,\n            chartAxisMenuParamsFactory,\n            chartOptionsService,\n            seriesType,\n            isExpandedOnInit: expanded = false,\n            registerGroupComponent,\n        } = this.options;\n        const axisTitlePanels: TitlePanel[] = [];\n        if (isCartesian(seriesType)) {\n            const createAxisParamsFactory = (axisType: 'xAxis' | 'yAxis') =>\n                this.createManagedBean(\n                    new ChartMenuParamsFactory(chartOptionsService.getCartesianAxisThemeOverridesProxy(axisType))\n                );\n            axisTitlePanels.push(\n                this.createManagedBean(new TitlePanel(createAxisParamsFactory('xAxis'), 'horizontalAxisTitle', 'title'))\n            );\n            axisTitlePanels.push(\n                this.createManagedBean(new TitlePanel(createAxisParamsFactory('yAxis'), 'verticalAxisTitle', 'title'))\n            );\n        } else if (isPolar(seriesType)) {\n            axisTitlePanels.push(\n                this.createManagedBean(new TitlePanel(chartAxisMenuParamsFactory, 'polarAxisTitle', 'title'))\n            );\n        }\n        const titleGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('chartTitles'),\n            expanded,\n            suppressEnabledCheckbox: true,\n            items: [\n                this.createManagedBean(new ChartTitlePanel(chartMenuParamsFactory, 'chartTitle', 'title')),\n                this.createManagedBean(new TitlePanel(chartMenuParamsFactory, 'chartSubtitle', 'subtitle')),\n                ...axisTitlePanels,\n            ],\n        };\n        this.setTemplate(\n            /* html */ `<div>\n            <ag-group-component data-ref=\"titleGroup\"></ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { titleGroup: titleGroupParams }\n        );\n        registerGroupComponent(this.titleGroup);\n    }\n}\n", "import type { AgInputTextFieldParams, BeanCollection } from '@ag-grid-community/core';\nimport { AgInputTextField, Component } from '@ag-grid-community/core';\n\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport { AgSlider } from '../../../../../widgets/agSlider';\nimport type { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport type { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport type { FontPanelParams } from '../fontPanel';\nimport { FontPanel } from '../fontPanel';\n\nexport class TitlePanel extends Component {\n    protected chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    protected readonly chartOptions: ChartOptionsProxy;\n\n    protected fontPanel: FontPanel;\n\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private readonly name: ChartTranslationKey,\n        protected readonly key: string\n    ) {\n        super(/* html */ `<div></div>`);\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    public postConstruct(): void {\n        this.initFontPanel();\n    }\n\n    protected hasTitle(): boolean {\n        const title: any = this.chartOptions.getValue(this.key);\n        return title && title.enabled && title.text && title.text.length > 0;\n    }\n\n    private initFontPanel(): void {\n        const hasTitle = this.hasTitle();\n\n        const fontPanelParams: FontPanelParams = {\n            name: this.chartTranslationService.translate(this.name),\n            enabled: hasTitle,\n            suppressEnabledCheckbox: false,\n            chartMenuParamsFactory: this.chartMenuUtils,\n            keyMapper: (key) => `${this.key}.${key}`,\n            onEnableChange: (enabled) => this.onEnableChange(enabled),\n        };\n\n        this.fontPanel = this.createManagedBean(new FontPanel(fontPanelParams));\n\n        this.fontPanel.addItem(this.createBean(new AgInputTextField(this.getTextInputParams())), true);\n        this.fontPanel.addItem(this.createBean(new AgSlider(this.getSpacingSliderParams())));\n\n        this.getGui().appendChild(this.fontPanel.getGui());\n    }\n\n    protected getTextInputParams(): AgInputTextFieldParams {\n        return this.chartMenuUtils.addValueParams(`${this.key}.text`, {\n            label: this.chartTranslationService.translate('title'),\n            labelAlignment: 'top',\n        });\n    }\n\n    protected getSpacingSliderParams(): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(`${this.key}.spacing`, 'spacing', 100);\n    }\n\n    protected onEnableChange(enabled: boolean): void {\n        this.chartOptions.setValue(`${this.key}.enabled`, enabled);\n    }\n}\n", "import type { AgInputTextFieldParams, BeanCollection } from '@ag-grid-community/core';\n\nimport type { AgSliderParams } from '../../../../../widgets/agSlider';\nimport type { ChartMenuService } from '../../../services/chartMenuService';\nimport { TitlePanel } from './titlePanel';\n\nexport class ChartTitlePanel extends TitlePanel {\n    private chartMenuService: ChartMenuService;\n\n    public override wireBeans(beans: BeanCollection): void {\n        super.wireBeans(beans);\n        this.chartMenuService = beans.chartMenuService as ChartMenuService;\n    }\n\n    private titlePlaceholder: string;\n\n    public override postConstruct(): void {\n        this.titlePlaceholder = this.chartTranslationService.translate('titlePlaceholder');\n        super.postConstruct();\n        // edits to the title can disable it, so keep the checkbox in sync:\n        this.addManagedEventListeners({\n            chartTitleEdit: () => {\n                this.fontPanel.setEnabled(this.hasTitle());\n            },\n        });\n    }\n\n    protected override getTextInputParams(): AgInputTextFieldParams {\n        const params = super.getTextInputParams();\n        if (this.shouldOverrideTextWithPlaceholder(params.value)) {\n            params.value = this.titlePlaceholder;\n        }\n        return params;\n    }\n\n    protected override getSpacingSliderParams(): AgSliderParams {\n        const params = super.getSpacingSliderParams();\n        // Default title spacing is 10, but this isn't reflected in the options - this should really be fixed there.\n        params.value = '10';\n        return params;\n    }\n\n    protected override onEnableChange(enabled: boolean): void {\n        if (this.chartMenuService.doesChartToolbarExist()) {\n            // extra padding is only included when the toolbar is present\n            const topPadding: number = this.chartOptions.getValue('padding.top');\n            this.chartOptions.setValue('padding.top', enabled ? topPadding - 20 : topPadding + 20);\n        }\n\n        this.chartOptions.setValue(`${this.key}.enabled`, enabled);\n        const currentTitleText = this.chartOptions.getValue(`${this.key}.text`);\n        if (enabled && this.shouldOverrideTextWithPlaceholder(currentTitleText)) {\n            this.chartOptions.setValue(`${this.key}.text`, this.titlePlaceholder);\n        }\n    }\n\n    private shouldOverrideTextWithPlaceholder(currentTitleText?: string): boolean {\n        return currentTitleText === 'Title' || currentTitleText?.trim().length === 0;\n    }\n}\n", "import {\n    Component,\n    RefPlaceholder,\n    _clearElement,\n    _createIconNoSpan,\n    _getAbsoluteWidth,\n    _radioCssClass,\n    _setDisplayed,\n    _shallowCompare,\n} from '@ag-grid-community/core';\nimport type { AgChartThemePalette } from 'ag-charts-community';\n\nimport type { ChartController } from '../../chartController';\nimport { isStockTheme } from '../../chartProxies/chartTheme';\nimport { MiniChartsContainer } from './miniChartsContainer';\n\ntype AnimationDirection = 'left' | 'right';\n\nexport class ChartSettingsPanel extends Component {\n    private readonly eMiniChartsContainer: HTMLElement = RefPlaceholder;\n    private readonly eNavBar: HTMLElement = RefPlaceholder;\n    private readonly eCardSelector: HTMLElement = RefPlaceholder;\n    private readonly ePrevBtn: HTMLElement = RefPlaceholder;\n    private readonly eNextBtn: HTMLElement = RefPlaceholder;\n\n    private miniChartsContainers: MiniChartsContainer[] = [];\n    private cardItems: HTMLElement[] = [];\n\n    private activePaletteIndex = 0;\n    private palettes: AgChartThemePalette[] = [];\n    private themes: string[] = [];\n\n    private isAnimating: boolean;\n\n    constructor(private readonly chartController: ChartController) {\n        super(/* html */ `<div class=\"ag-chart-settings-wrapper\">\n            <div data-ref=\"eMiniChartsContainer\" class=\"ag-chart-settings-mini-charts-container ag-scrollable-container\"></div>\n            <div data-ref=\"eNavBar\" class=\"ag-chart-settings-nav-bar\">\n                <div data-ref=\"ePrevBtn\" class=\"ag-chart-settings-prev\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-prev-button\"></button>\n                </div>\n                <div data-ref=\"eCardSelector\" class=\"ag-chart-settings-card-selector\"></div>\n                <div data-ref=\"eNextBtn\" class=\"ag-chart-settings-next\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-next-button\"></button>\n                </div>\n            </div>\n        </div>`);\n    }\n\n    public postConstruct() {\n        this.resetPalettes();\n\n        this.ePrevBtn.insertAdjacentElement('afterbegin', _createIconNoSpan('previous', this.gos)!);\n        this.eNextBtn.insertAdjacentElement('afterbegin', _createIconNoSpan('next', this.gos)!);\n\n        this.addManagedElementListeners(this.ePrevBtn, { click: () => this.setActivePalette(this.getPrev(), 'left') });\n        this.addManagedElementListeners(this.eNextBtn, { click: () => this.setActivePalette(this.getNext(), 'right') });\n\n        // change the selected chart when a combo chart is modified via the data panel, i.e. the custom combo should be selected\n        const reset = () => this.resetPalettes(true);\n        this.addManagedListeners(this.chartController, {\n            chartTypeChanged: reset,\n            chartApiUpdate: reset,\n        });\n\n        this.scrollSelectedIntoView();\n    }\n\n    private scrollSelectedIntoView(): void {\n        // the panel is not immediately visible due to the slide animation, so we add a\n        // setTimeout to wait until the panel animation is over and is able to scroll\n        setTimeout(() => {\n            const isMiniChartsContainerVisible = (miniChartsContainers: MiniChartsContainer) => {\n                return !miniChartsContainers.getGui().classList.contains('ag-hidden');\n            };\n            const currentMiniChartContainer = this.miniChartsContainers.find(isMiniChartsContainerVisible);\n            const currentChart = currentMiniChartContainer!.getGui().querySelector('.ag-selected') as HTMLElement;\n\n            if (currentChart) {\n                const parent = currentChart.offsetParent as HTMLElement;\n                if (parent) {\n                    this.eMiniChartsContainer.scrollTo(0, parent.offsetTop);\n                }\n            }\n        }, 250);\n    }\n\n    private resetPalettes(forceReset?: boolean): void {\n        const palettes = this.chartController.getPalettes();\n        const themeTemplateParameters = this.chartController.getThemeTemplateParameters();\n        const chartGroups = this.gos.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n\n        if ((_shallowCompare(palettes, this.palettes) && !forceReset) || this.isAnimating) {\n            return;\n        }\n\n        this.palettes = palettes;\n        this.themes = this.chartController.getThemeNames();\n        this.activePaletteIndex = this.themes.findIndex((name) => name === this.chartController.getChartThemeName());\n        this.cardItems = [];\n\n        _clearElement(this.eCardSelector);\n\n        this.destroyMiniCharts();\n\n        const { themes } = this;\n\n        this.palettes.forEach((palette, index) => {\n            const isActivePalette = this.activePaletteIndex === index;\n            const { fills = [], strokes = [] } = palette;\n            const themeName = themes[index];\n            const isCustomTheme = !isStockTheme(themeName);\n            const miniChartsContainer = this.createBean(\n                new MiniChartsContainer(\n                    this.chartController,\n                    fills,\n                    strokes,\n                    themeTemplateParameters[index],\n                    isCustomTheme,\n                    chartGroups\n                )\n            );\n\n            this.miniChartsContainers.push(miniChartsContainer);\n            this.eMiniChartsContainer.appendChild(miniChartsContainer.getGui());\n            this.addCardLink(index);\n\n            if (isActivePalette) {\n                miniChartsContainer.updateSelectedMiniChart();\n            } else {\n                miniChartsContainer.setDisplayed(false);\n            }\n        });\n\n        _setDisplayed(this.eNavBar, this.palettes.length > 1);\n        _radioCssClass(this.cardItems[this.activePaletteIndex], 'ag-selected', 'ag-not-selected');\n    }\n\n    private addCardLink(index: number): void {\n        const link = document.createElement('div');\n        link.classList.add('ag-chart-settings-card-item');\n\n        this.addManagedElementListeners(link, {\n            click: () => {\n                this.setActivePalette(index, index < this.activePaletteIndex ? 'left' : 'right');\n            },\n        });\n\n        this.eCardSelector.appendChild(link);\n        this.cardItems.push(link);\n    }\n\n    private getPrev(): number {\n        let prev = this.activePaletteIndex - 1;\n\n        if (prev < 0) {\n            prev = this.palettes.length - 1;\n        }\n\n        return prev;\n    }\n\n    private getNext(): number {\n        let next = this.activePaletteIndex + 1;\n\n        if (next >= this.palettes.length) {\n            next = 0;\n        }\n\n        return next;\n    }\n\n    private setActivePalette(index: number, animationDirection: AnimationDirection) {\n        if (this.isAnimating || this.activePaletteIndex === index) {\n            return;\n        }\n\n        _radioCssClass(this.cardItems[index], 'ag-selected', 'ag-not-selected');\n\n        const currentPalette = this.miniChartsContainers[this.activePaletteIndex];\n        const currentGui = currentPalette.getGui();\n        const futurePalette = this.miniChartsContainers[index];\n        const nextGui = futurePalette.getGui();\n\n        currentPalette.updateSelectedMiniChart();\n        futurePalette.updateSelectedMiniChart();\n\n        const multiplier = animationDirection === 'left' ? -1 : 1;\n        const final = (nextGui.style.left = `${_getAbsoluteWidth(this.getGui()) * multiplier}px`);\n\n        this.activePaletteIndex = index;\n\n        this.isAnimating = true;\n\n        const animatingClass = 'ag-animating';\n\n        futurePalette.setDisplayed(true);\n        currentPalette.addCssClass(animatingClass);\n        futurePalette.addCssClass(animatingClass);\n\n        this.chartController.setChartThemeName(this.themes[index]);\n\n        window.setTimeout(() => {\n            currentGui.style.left = `${-parseFloat(final)}px`;\n            nextGui.style.left = '0px';\n        }, 0);\n\n        window.setTimeout(() => {\n            this.isAnimating = false;\n\n            currentPalette.removeCssClass(animatingClass);\n            futurePalette.removeCssClass(animatingClass);\n            currentPalette.setDisplayed(false);\n        }, 300);\n    }\n\n    private destroyMiniCharts(): void {\n        _clearElement(this.eMiniChartsContainer);\n\n        this.miniChartsContainers = this.destroyBeans(this.miniChartsContainers);\n    }\n\n    public override destroy(): void {\n        this.destroyMiniCharts();\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, ChartGroupsDef, ChartType } from '@ag-grid-community/core';\nimport { Component, KeyCode, _setAriaLabel, _warnOnce } from '@ag-grid-community/core';\nimport { AgGroupComponent } from '@ag-grid-enterprise/core';\n\nimport type { ChartController } from '../../chartController';\nimport type { ChartTranslationService } from '../../services/chartTranslationService';\nimport { getFullChartNameTranslationKey } from '../../utils/seriesTypeMapper';\nimport {\n    MiniArea,\n    MiniAreaColumnCombo,\n    MiniBar,\n    MiniBoxPlot,\n    MiniBubble,\n    MiniColumn,\n    MiniColumnLineCombo,\n    MiniCustomCombo,\n    MiniDonut,\n    MiniHeatmap,\n    MiniHistogram,\n    MiniLine,\n    MiniNightingale,\n    MiniNormalizedArea,\n    MiniNormalizedBar,\n    MiniNormalizedColumn,\n    MiniPie,\n    MiniRadarArea,\n    MiniRadarLine,\n    MiniRadialBar,\n    MiniRadialColumn,\n    MiniRangeArea,\n    MiniRangeBar,\n    MiniScatter,\n    MiniStackedArea,\n    MiniStackedBar,\n    MiniStackedColumn,\n    MiniSunburst,\n    MiniTreemap,\n    MiniWaterfall,\n} from './miniCharts/index';\n// please leave this as is - we want it to be explicit for build reasons\nimport type { MiniChart } from './miniCharts/miniChart';\n\nexport type ThemeTemplateParameters = Map<any, any>;\n\ntype MiniChartMenuMapping = {\n    [K in keyof ChartGroupsDef]-?: MiniChartMenuGroup<K>;\n};\n\ntype MiniChartMenuGroup<K extends keyof ChartGroupsDef> = {\n    [T in NonNullable<ChartGroupsDef[K]>[number]]: MiniChartMenuItem;\n};\n\ninterface MiniChartMenuItem {\n    range: boolean;\n    pivot: boolean;\n    enterprise: boolean;\n    icon: MiniChartConstructor;\n}\n\ntype MiniChartConstructor = {\n    chartType: ChartType;\n    new (...args: any[]): MiniChart;\n};\n\nconst miniChartMapping: MiniChartMenuMapping = {\n    columnGroup: {\n        column: { range: true, pivot: true, enterprise: false, icon: MiniColumn },\n        stackedColumn: { range: true, pivot: true, enterprise: false, icon: MiniStackedColumn },\n        normalizedColumn: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedColumn },\n    },\n    barGroup: {\n        bar: { range: true, pivot: true, enterprise: false, icon: MiniBar },\n        stackedBar: { range: true, pivot: true, enterprise: false, icon: MiniStackedBar },\n        normalizedBar: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedBar },\n    },\n    pieGroup: {\n        pie: { range: true, pivot: true, enterprise: false, icon: MiniPie },\n        donut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n        doughnut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n    },\n    lineGroup: { line: { range: true, pivot: true, enterprise: false, icon: MiniLine } },\n    scatterGroup: {\n        scatter: { range: true, pivot: true, enterprise: false, icon: MiniScatter },\n        bubble: { range: true, pivot: true, enterprise: false, icon: MiniBubble },\n    },\n    areaGroup: {\n        area: { range: true, pivot: true, enterprise: false, icon: MiniArea },\n        stackedArea: { range: true, pivot: true, enterprise: false, icon: MiniStackedArea },\n        normalizedArea: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedArea },\n    },\n    polarGroup: {\n        radarLine: { range: true, pivot: false, enterprise: true, icon: MiniRadarLine },\n        radarArea: { range: true, pivot: false, enterprise: true, icon: MiniRadarArea },\n        nightingale: { range: true, pivot: false, enterprise: true, icon: MiniNightingale },\n        radialColumn: { range: true, pivot: false, enterprise: true, icon: MiniRadialColumn },\n        radialBar: { range: true, pivot: false, enterprise: true, icon: MiniRadialBar },\n    },\n    statisticalGroup: {\n        boxPlot: { range: true, pivot: false, enterprise: true, icon: MiniBoxPlot },\n        histogram: { range: true, pivot: false, enterprise: false, icon: MiniHistogram },\n        rangeBar: { range: true, pivot: false, enterprise: true, icon: MiniRangeBar },\n        rangeArea: { range: true, pivot: false, enterprise: true, icon: MiniRangeArea },\n    },\n    hierarchicalGroup: {\n        treemap: { range: true, pivot: true, enterprise: true, icon: MiniTreemap },\n        sunburst: { range: true, pivot: true, enterprise: true, icon: MiniSunburst },\n    },\n    specializedGroup: {\n        heatmap: { range: true, pivot: false, enterprise: true, icon: MiniHeatmap },\n        waterfall: { range: true, pivot: false, enterprise: true, icon: MiniWaterfall },\n    },\n    combinationGroup: {\n        columnLineCombo: { range: true, pivot: true, enterprise: false, icon: MiniColumnLineCombo },\n        areaColumnCombo: { range: true, pivot: true, enterprise: false, icon: MiniAreaColumnCombo },\n        customCombo: { range: true, pivot: true, enterprise: false, icon: MiniCustomCombo },\n    },\n};\n\nconst DEFAULT_CHART_GROUPS: ChartGroupsDef = {\n    columnGroup: ['column', 'stackedColumn', 'normalizedColumn'],\n    barGroup: ['bar', 'stackedBar', 'normalizedBar'],\n    pieGroup: ['pie', 'donut'],\n    lineGroup: ['line'],\n    scatterGroup: ['scatter', 'bubble'],\n    areaGroup: ['area', 'stackedArea', 'normalizedArea'],\n    polarGroup: ['radarLine', 'radarArea', 'nightingale', 'radialColumn', 'radialBar'],\n    statisticalGroup: ['boxPlot', 'histogram', 'rangeBar', 'rangeArea'],\n    hierarchicalGroup: ['treemap', 'sunburst'],\n    specializedGroup: ['heatmap', 'waterfall'],\n    combinationGroup: ['columnLineCombo', 'areaColumnCombo', 'customCombo'],\n};\n\nexport class MiniChartsContainer extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    private readonly fills: string[];\n    private readonly strokes: string[];\n    private readonly themeTemplateParameters: ThemeTemplateParameters;\n    private readonly isCustomTheme: boolean;\n    private wrappers: Map<ChartType, HTMLElement> = new Map();\n    private chartController: ChartController;\n\n    private chartGroups: ChartGroupsDef;\n\n    constructor(\n        chartController: ChartController,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean,\n        chartGroups: ChartGroupsDef = DEFAULT_CHART_GROUPS\n    ) {\n        super(/* html */ `<div class=\"ag-chart-settings-mini-wrapper\"></div>`);\n\n        this.chartController = chartController;\n        this.fills = fills;\n        this.strokes = strokes;\n        this.themeTemplateParameters = themeTemplateParameters;\n        this.isCustomTheme = isCustomTheme;\n        this.chartGroups = { ...chartGroups };\n    }\n\n    public postConstruct() {\n        // hide MiniCustomCombo if no custom combo exists\n        if (!this.chartController.customComboExists() && this.chartGroups.combinationGroup) {\n            this.chartGroups.combinationGroup = this.chartGroups.combinationGroup.filter(\n                (chartType) => chartType !== 'customCombo'\n            );\n        }\n\n        const eGui = this.getGui();\n        const isEnterprise = this.chartController.isEnterprise();\n        const isPivotChart = this.chartController.isPivotChart();\n        const isRangeChart = !isPivotChart;\n\n        // Determine the set of chart types that are specified by the chartGroupsDef config, filtering out any entries\n        // that are invalid for the current chart configuration (pivot/range) and license type\n        const displayedMenuGroups = Object.keys(this.chartGroups)\n            .map((group: keyof ChartGroupsDef) => {\n                const menuGroup =\n                    group in miniChartMapping ? miniChartMapping[group as keyof typeof miniChartMapping] : undefined;\n                if (!menuGroup) {\n                    // User has specified an invalid chart group in the chartGroupsDef config\n                    _warnOnce(`invalid chartGroupsDef config '${group}'`);\n                    return null;\n                }\n\n                // Determine the valid chart types within this group, based on the chartGroupsDef config\n                const chartGroupValues = this.chartGroups[group as keyof ChartGroupsDef] ?? [];\n                const menuItems = chartGroupValues\n                    .map((chartType) => {\n                        const menuItem =\n                            chartType in menuGroup\n                                ? (menuGroup as Record<typeof chartType, MiniChartMenuItem>)[chartType]\n                                : undefined;\n\n                        if (!menuItem) {\n                            // User has specified an invalid chart type in the chartGroupsDef config\n                            _warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                            return null;\n                        }\n\n                        if (!isEnterprise && menuItem.enterprise) {\n                            return null; // skip enterprise charts if community\n                        }\n                        // Only show the chart if it is valid for the current chart configuration (pivot/range)\n                        if (isRangeChart && menuItem.range) return menuItem;\n                        if (isPivotChart && menuItem.pivot) return menuItem;\n                        return null;\n                    })\n                    .filter((menuItem): menuItem is NonNullable<typeof menuItem> => menuItem != null);\n\n                if (menuItems.length === 0) return null; // don't render empty chart groups\n\n                return {\n                    label: this.chartTranslationService.translate(group),\n                    items: menuItems,\n                };\n            })\n            .filter((menuGroup): menuGroup is NonNullable<typeof menuGroup> => menuGroup != null);\n\n        // Render the filtered menu items\n        for (const { label, items } of displayedMenuGroups) {\n            const groupComponent = this.createBean(\n                new AgGroupComponent({\n                    title: label,\n                    suppressEnabledCheckbox: true,\n                    enabled: true,\n                    suppressOpenCloseIcons: true,\n                    cssIdentifier: 'charts-settings',\n                    direction: 'horizontal',\n                    suppressKeyboardNavigation: true,\n                })\n            );\n\n            for (const menuItem of items) {\n                const MiniClass = menuItem.icon;\n                const miniWrapper = document.createElement('div');\n                miniWrapper.classList.add('ag-chart-mini-thumbnail');\n                miniWrapper.setAttribute('tabindex', '0');\n                miniWrapper.setAttribute('role', 'button');\n\n                const miniClassChartType: ChartType = MiniClass.chartType;\n                const listener = () => {\n                    this.chartController.setChartType(miniClassChartType);\n                    this.updateSelectedMiniChart();\n                };\n                this.addManagedListeners(miniWrapper, {\n                    click: listener,\n                    keydown: (event) => {\n                        if (event.key == KeyCode.ENTER || event.key === KeyCode.SPACE) {\n                            event.preventDefault();\n                            listener();\n                        }\n                    },\n                });\n\n                this.wrappers.set(miniClassChartType, miniWrapper);\n\n                this.createBean(\n                    new MiniClass(\n                        miniWrapper,\n                        this.fills,\n                        this.strokes,\n                        this.themeTemplateParameters,\n                        this.isCustomTheme\n                    )\n                );\n                groupComponent.addItem(miniWrapper);\n            }\n\n            eGui.appendChild(groupComponent.getGui());\n        }\n\n        this.updateSelectedMiniChart();\n    }\n\n    public updateSelectedMiniChart(): void {\n        const selectedChartType = this.chartController.getChartType();\n        this.wrappers.forEach((miniChart, miniChartType) => {\n            const selected = miniChartType === selectedChartType;\n            miniChart.classList.toggle('ag-selected', selected);\n\n            const chartName = this.chartTranslationService.translate(getFullChartNameTranslationKey(miniChartType));\n            const ariaLabel = selected\n                ? `${chartName}. ${this.chartTranslationService.translate('ariaChartSelected')}`\n                : chartName;\n            _setAriaLabel(miniChart, ariaLabel);\n        });\n    }\n\n    public override destroy(): void {\n        this.wrappers.clear();\n        super.destroy();\n    }\n}\n", "import { _Scene } from 'ag-charts-community';\n\nexport interface CreateColumnRectsParams {\n    stacked: boolean;\n    root: _Scene.Group;\n    data: any;\n    size: number;\n    padding: number;\n    xScaleDomain: number[];\n    yScaleDomain: number[];\n    xScalePadding: number;\n}\n\nexport function createColumnRects(params: CreateColumnRectsParams) {\n    const { stacked, size, padding, xScalePadding, xScaleDomain, yScaleDomain } = params;\n\n    const xScale = new _Scene.BandScale<number>();\n    xScale.domain = xScaleDomain;\n    xScale.range = [padding, size - padding];\n    xScale.paddingInner = xScalePadding;\n    xScale.paddingOuter = xScalePadding;\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = yScaleDomain;\n    yScale.range = [size - padding, padding];\n\n    const createBars = (series: number[], xScale: _Scene.BandScale<number>, yScale: _Scene.LinearScale) => {\n        return series.map((datum: number, i: number) => {\n            const top = yScale.convert(datum);\n            const rect = new _Scene.Rect();\n            rect.x = xScale.convert(i);\n            rect.y = top;\n            rect.width = xScale.bandwidth;\n            rect.height = yScale.convert(0) - top;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n    };\n\n    if (stacked) {\n        return params.data.map((d: number[]) => createBars(d, xScale, yScale));\n    }\n\n    return createBars(params.data, xScale, yScale);\n}\n\nexport function createLinePaths(root: _Scene.Group, data: number[][], size: number, padding: number): _Scene.Path[] {\n    const xScale = new _Scene.LinearScale();\n    xScale.domain = [0, 4];\n    xScale.range = [padding, size - padding];\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = [0, 10];\n    yScale.range = [size - padding, padding];\n\n    const lines: _Scene.Path[] = data.map((series) => {\n        const line = new _Scene.Path();\n        line.strokeWidth = 3;\n        line.lineCap = 'round';\n        line.fill = undefined;\n        series.forEach((datum: number, i: number) => {\n            line.path[i > 0 ? 'lineTo' : 'moveTo'](xScale.convert(i), yScale.convert(datum));\n        });\n\n        return line;\n    });\n\n    const linesGroup = new _Scene.Group();\n    linesGroup.setClipRectInGroupCoordinateSpace(\n        new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n    );\n    linesGroup.append(lines);\n    root.append(linesGroup);\n\n    return lines;\n}\n\nexport function createPolarPaths(\n    root: _Scene.Group,\n    data: number[][],\n    size: number,\n    radius: number,\n    innerRadius: number,\n    markerSize: number = 0\n): { paths: _Scene.Path[]; markers: _Scene.Circle[] } {\n    const angleScale = new _Scene.LinearScale();\n    angleScale.domain = [0, 7];\n    angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);\n\n    const radiusScale = new _Scene.LinearScale();\n    radiusScale.domain = [0, 10];\n    radiusScale.range = [radius, innerRadius];\n\n    const markers: _Scene.Circle[] = [];\n\n    const paths: _Scene.Path[] = data.map((series) => {\n        const path = new _Scene.Path();\n        path.strokeWidth = 1;\n        path.strokeOpacity = 0.5;\n        path.lineCap = 'round';\n        path.fill = undefined;\n        path.fillOpacity = 0.8;\n        series.forEach((datum: number, i: number) => {\n            const angle = angleScale.convert(i);\n            const r = radius + innerRadius - radiusScale.convert(datum);\n\n            const x = r * Math.cos(angle);\n            const y = r * Math.sin(angle);\n\n            path.path[i > 0 ? 'lineTo' : 'moveTo'](x, y);\n\n            if (markerSize > 0) {\n                const marker = new _Scene.Circle();\n                marker.x = x;\n                marker.y = y;\n                marker.size = markerSize;\n                markers.push(marker);\n            }\n        });\n\n        path.path.closePath();\n        return path;\n    });\n\n    const group = new _Scene.Group();\n\n    const center = size / 2;\n    group.translationX = center;\n    group.translationY = center;\n\n    group.append([...paths, ...markers]);\n    root.append(group);\n\n    return { paths, markers };\n}\n\nexport function accumulateData(data: number[][]): { processedData: number[][]; min: number; max: number } {\n    let [min, max] = [Infinity, -Infinity];\n    const processedData = data.reduce((acc, curr, currIndex) => {\n        const previous = currIndex > 0 ? acc[currIndex - 1] : undefined;\n        acc[currIndex] ??= [];\n        const current = acc[currIndex];\n        curr.forEach((datum, datumIndex) => {\n            if (previous) {\n                datum += previous[datumIndex];\n            }\n\n            current[datumIndex] = datum;\n\n            if (current[datumIndex] < min) {\n                min = current[datumIndex];\n            }\n\n            if (current[datumIndex] > max) {\n                max = current[datumIndex];\n            }\n        });\n        return acc;\n    }, [] as number[][]);\n\n    return { processedData, min, max };\n}\n", "import { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../services/chartTranslationService';\nimport { MiniChart } from './miniChart';\n\nexport abstract class MiniChartWithAxes extends MiniChart {\n    private readonly stroke = 'gray';\n    private readonly axisOvershoot = 3;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    public override postConstruct() {\n        const size = this.size;\n        const padding = this.padding;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + this.axisOvershoot;\n        leftAxis.stroke = this.stroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - this.axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = this.stroke;\n\n        const root = this.root;\n\n        root.append(leftAxis);\n        root.append(bottomAxis);\n        super.postConstruct();\n    }\n}\n", "import type { BeanCollection } from '@ag-grid-community/core';\nimport { Component, _errorOnce } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\n\nconst CANVAS_CLASS = 'ag-chart-mini-thumbnail-canvas';\nconst ERROR_MESSAGE = 'AG Grid - chart update failed';\n\nexport abstract class MiniChart extends Component {\n    private chartTranslationService: ChartTranslationService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.chartTranslationService = beans.chartTranslationService as ChartTranslationService;\n    }\n\n    protected readonly size: number = 58;\n    protected readonly padding: number = 5;\n    protected readonly root: _Scene.Group = new _Scene.Group();\n    protected readonly scene: _Scene.Scene;\n\n    constructor(\n        container: HTMLElement,\n        protected tooltipName: ChartTranslationKey\n    ) {\n        super();\n\n        const scene = new _Scene.Scene({\n            width: this.size,\n            height: this.size,\n            domManager: {\n                addChild(type, _, child) {\n                    const newEl = child ?? container.ownerDocument.createElement(type);\n                    container.appendChild(newEl);\n                    return newEl;\n                },\n            },\n        });\n\n        scene.canvas.element.classList.add(CANVAS_CLASS);\n        scene.setRoot(this.root);\n\n        this.scene = scene;\n    }\n\n    public postConstruct(): void {\n        this.scene.canvas.element.title = this.chartTranslationService.translate(this.tooltipName);\n\n        // Necessary to force scene graph render as we are not using the standalone factory.\n        this.scene.render().catch((e: Error) => {\n            _errorOnce(`${ERROR_MESSAGE}`, e);\n        });\n    }\n\n    abstract updateColors(fills: string[], strokes: string[]): void;\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedColumn';\n\n    private readonly columns: _Scene.Rect[];\n\n    private columnData = [2, 3, 4];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'groupedColumnTooltip');\n\n        const { root, columnData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.3,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((column: _Scene.Rect, i) => {\n            column.fill = fills[i];\n            column.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniStackedColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedColumn';\n\n    private readonly stackedColumns: _Scene.Rect[][];\n\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedColumn.data,\n        yScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = 'stackedColumnTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const { root, size, padding } = this;\n\n        this.stackedColumns = createColumnRects({\n            stacked: true,\n            root,\n            data,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain,\n            xScalePadding: 0.3,\n        } as CreateColumnRectsParams);\n\n        root.append(([] as _Scene.Rect[]).concat.apply([], this.stackedColumns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.stackedColumns.forEach((series: _Scene.Rect[], i: number) =>\n            series.forEach((column) => {\n                column.fill = fills[i];\n                column.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedColumn } from './miniStackedColumn';\n\nexport class MiniNormalizedColumn extends MiniStackedColumn {\n    static override chartType: ChartType = 'normalizedColumn';\n    static override data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(\n            container,\n            fills,\n            strokes,\n            themeTemplateParameters,\n            isCustomTheme,\n            MiniNormalizedColumn.data,\n            [0, 10],\n            'normalizedColumnTooltip'\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedBar';\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'groupedBarTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n        const data = [2, 3, 4];\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 4];\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map((datum, i) => {\n            const rect = new _Scene.Rect();\n            rect.x = padding;\n            rect.y = yScale.convert(i);\n            rect.width = bottom - xScale.convert(datum);\n            rect.height = height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniStackedBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedBar';\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4],\n    ];\n\n    private readonly bars: _Scene.Rect[][];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedBar.data,\n        xScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = 'stackedBarTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = xScaleDomain;\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map((series) =>\n            series.map((datum, i) => {\n                const rect = new _Scene.Rect();\n                rect.x = padding;\n                rect.y = yScale.convert(i);\n                rect.width = bottom - xScale.convert(datum);\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            })\n        );\n\n        this.updateColors(fills, strokes);\n        this.root.append(([] as _Scene.Rect[]).concat.apply([], this.bars));\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((series, i) =>\n            series.forEach((bar) => {\n                bar.fill = fills[i];\n                bar.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedBar } from './miniStackedBar';\n\nexport class MiniNormalizedBar extends MiniStackedBar {\n    static override chartType: ChartType = 'normalizedBar';\n    static override data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(\n            container,\n            fills,\n            strokes,\n            themeTemplateParameters,\n            isCustomTheme,\n            MiniNormalizedBar.data,\n            [0, 10],\n            'normalizedBarTooltip'\n        );\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChart } from '../miniChart';\n\nconst toRadians = _Scene.toRadians;\nexport class MiniDonut extends MiniChart {\n    static chartType: ChartType = 'donut';\n    private readonly sectors: _Scene.Sector[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        centerRadiusScaler = 0.6,\n        tooltipName: ChartTranslationKey = 'donutTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const center = radius + this.padding;\n        const angles = [\n            [toRadians(-90), toRadians(30)],\n            [toRadians(30), toRadians(120)],\n            [toRadians(120), toRadians(180)],\n            [toRadians(180), toRadians(210)],\n            [toRadians(210), toRadians(240)],\n            [toRadians(240), toRadians(270)],\n        ];\n\n        this.sectors = angles.map(([startAngle, endAngle]) => {\n            const sector = new _Scene.Sector();\n            sector.centerX = center;\n            sector.centerY = center;\n            sector.innerRadius = radius * centerRadiusScaler;\n            sector.outerRadius = radius;\n            sector.startAngle = startAngle;\n            sector.endAngle = endAngle;\n            sector.stroke = undefined;\n            sector.strokeWidth = 0;\n            sector.inset = 0.75;\n            return sector;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.sectors);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.sectors.forEach((sector, i) => {\n            sector.fill = fills[i % fills.length];\n            sector.stroke = strokes[i % strokes.length];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniDonut } from './miniDonut';\n\nexport class MiniPie extends MiniDonut {\n    static override chartType: ChartType = 'pie';\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, 0, 'pieTooltip');\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport { createLinePaths } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniLine extends MiniChartWithAxes {\n    static chartType: ChartType = 'line';\n\n    private readonly lines: _Scene.Path[];\n\n    private data = [\n        [9, 7, 8, 5, 6],\n        [5, 6, 3, 4, 1],\n        [1, 3, 4, 8, 7],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'lineTooltip');\n\n        this.lines = createLinePaths(this.root, this.data, this.size, this.padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniScatter extends MiniChartWithAxes {\n    static chartType: ChartType = 'scatter';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'scatterTooltip');\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y] pairs\n        const data = [\n            [\n                [0.3, 3],\n                [1.1, 0.9],\n                [2, 0.4],\n                [3.4, 2.4],\n            ],\n            [\n                [0, 0.3],\n                [1, 2],\n                [2.4, 1.4],\n                [3, 0],\n            ],\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [-0.5, 4];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [-0.5, 3.5];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach((series) => {\n            series.forEach(([x, y]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = 2.5;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(\n            new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n        );\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniBubble extends MiniChartWithAxes {\n    static chartType: ChartType = 'bubble';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'bubbleTooltip');\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y, radius] triples\n        const data = [\n            [\n                [0.1, 0.3, 5],\n                [0.5, 0.4, 7],\n                [0.2, 0.8, 7],\n            ],\n            [\n                [0.8, 0.7, 5],\n                [0.7, 0.3, 9],\n            ],\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 1];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 1];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach((series) => {\n            series.forEach(([x, y, radius]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = radius;\n                arc.fillOpacity = 0.7;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(\n            new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n        );\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport interface ICoordinate {\n    x: number;\n    y: number;\n}\n\nexport class MiniArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'area';\n    private readonly areas: _Scene.Path[];\n\n    static readonly data = [\n        [1, 3, 5],\n        [2, 6, 4],\n        [5, 3, 1],\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data: number[][] = MiniArea.data\n    ) {\n        super(container, 'groupedAreaTooltip');\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 6];\n        yScale.range = [size - padding + 0.5, padding];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n        const bottomY = yScale.convert(0);\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y,\n                };\n\n                points[last - i] = {\n                    x,\n                    y: bottomY,\n                };\n            });\n        });\n\n        this.areas = pathData.reverse().map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 1;\n            area.strokeOpacity = 0.75;\n            area.fillOpacity = 0.7;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../../services/chartTranslationService';\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\nimport type { ICoordinate } from './miniArea';\n\nexport class MiniStackedArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedArea';\n    static readonly data = [\n        [2, 3, 2],\n        [3, 6, 5],\n        [6, 2, 2],\n    ];\n\n    private readonly areas: _Scene.Path[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data: number[][] = MiniStackedArea.data,\n        tooltipName: ChartTranslationKey = 'stackedAreaTooltip'\n    ) {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 16];\n        yScale.range = [size - padding + 0.5, padding + 0.5];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n            let total = 0;\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(total + yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y,\n                };\n\n                points[last - i] = {\n                    x,\n                    y: yScale.convert(total), // bottom y\n                };\n\n                total += yDatum;\n            });\n        });\n\n        this.areas = pathData.map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedArea } from './miniStackedArea';\n\nexport class MiniNormalizedArea extends MiniStackedArea {\n    static override chartType: ChartType = 'normalizedArea';\n    static override readonly data = MiniStackedArea.data.map((stack) => {\n        const sum = stack.reduce((p, c) => p + c, 0);\n        return stack.map((v) => (v / sum) * 16);\n    });\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean,\n        data: number[][] = MiniNormalizedArea.data\n    ) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, data, 'normalizedAreaTooltip');\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniHistogram extends MiniChartWithAxes {\n    static chartType: ChartType = 'histogram';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'histogramTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n\n        // approx normal curve\n        const data = [2, 5, 11, 13, 10, 6, 1];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, data.length];\n        xScale.range = [padding, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, data.reduce((a, b) => Math.max(a, b), 0)];\n        yScale.range = [size - padding, padding];\n\n        const bottom = yScale.convert(0);\n\n        this.bars = data.map((datum, i) => {\n            const top = yScale.convert(datum);\n            const left = xScale.convert(i);\n            const right = xScale.convert(i + 1);\n\n            const rect = new _Scene.Rect();\n            rect.x = left;\n            rect.y = top;\n            rect.width = right - left;\n            rect.height = bottom - top;\n            rect.strokeWidth = 1;\n            rect.strokeOpacity = 0.75;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors([fill]: string[], [stroke]: string[]) {\n        this.bars.forEach((bar) => {\n            bar.fill = fill;\n            bar.stroke = stroke;\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadialColumn extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialColumn';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10, 2, 6, 5],\n        [4, 4, 3, 6, 4, 4],\n        [5, 4, 2, 9, 8, 9],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialColumnTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const { padding, size, data } = this;\n        const radius = (size - padding * 2) / 2;\n        const innerRadiusRatio = 0.4;\n        const axisInnerRadius = radius * innerRadiusRatio;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = data[0].map((_, index) => index);\n        angleScale.range = [0, 2 * Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n\n        const { processedData, max } = accumulateData(data);\n\n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [axisInnerRadius, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, seriesIndex) => {\n            const firstSeries = seriesIndex === 0;\n            const previousSeries = firstSeries ? undefined : processedData[seriesIndex - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesColumns = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const columnWidth = _Scene.getRadialColumnWidth(startAngle, endAngle, radius, 0.5, 0.5);\n\n                const column = new _Scene.RadialColumnShape();\n\n                column.scalingCenterX = center;\n                column.scalingCenterY = center;\n                column.columnWidth = columnWidth;\n                column.innerRadius = innerRadius;\n                column.outerRadius = outerRadius;\n                column.startAngle = startAngle;\n                column.endAngle = endAngle;\n                column.isBeveled = true;\n                column.axisInnerRadius = axisInnerRadius;\n                column.axisOuterRadius = radius;\n\n                column.stroke = undefined;\n                column.strokeWidth = 0;\n\n                return column;\n            });\n\n            seriesGroup.append(seriesColumns);\n\n            seriesGroup.translationX = center;\n            seriesGroup.translationY = center;\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { _Scene } from 'ag-charts-community';\n\nimport type { ChartTranslationKey } from '../../../services/chartTranslationService';\nimport { MiniChart } from './miniChart';\n\nexport abstract class MiniChartWithPolarAxes extends MiniChart {\n    private readonly stroke = 'gray';\n    private gridLines: _Scene.Path[];\n    protected showRadiusAxisLine: boolean = true;\n    protected showAngleAxisLines: boolean = true;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    public override postConstruct() {\n        const size = this.size;\n        const padding = this.padding;\n        const combinedPadding = padding * 2;\n\n        const axisLineRadius = (size - combinedPadding) / 2;\n        const gridRadii = this.showAngleAxisLines\n            ? [axisLineRadius, axisLineRadius * 0.8, axisLineRadius * 0.6, axisLineRadius * 0.4]\n            : [];\n\n        const radiusAxisLine = new _Scene.Line();\n        radiusAxisLine.x1 = size / 2;\n        radiusAxisLine.y1 = padding;\n        radiusAxisLine.x2 = size / 2;\n        radiusAxisLine.y2 = size - padding - axisLineRadius - gridRadii[gridRadii.length - 1];\n        radiusAxisLine.stroke = this.stroke;\n        radiusAxisLine.strokeOpacity = 0.5;\n        radiusAxisLine.fill = undefined;\n\n        radiusAxisLine.visible = this.showRadiusAxisLine;\n\n        const x = padding + axisLineRadius;\n        this.gridLines = gridRadii.map((radius, index) => {\n            const gridLine = new _Scene.Path();\n            gridLine.path.arc(x, x, radius, 0, 2 * Math.PI);\n            gridLine.strokeWidth = 1;\n            gridLine.stroke = this.stroke;\n            gridLine.strokeOpacity = index === 0 ? 0.5 : 0.2;\n            gridLine.fill = undefined;\n\n            return gridLine;\n        });\n\n        const root = this.root;\n\n        root.append(radiusAxisLine);\n        if (this.gridLines.length > 0) root.append(this.gridLines);\n        super.postConstruct();\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadialBar extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialBar';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10],\n        [4, 4, 3],\n        [5, 4, 2],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialBarTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding) / 2;\n        const innerRadiusRatio = 0.4;\n        const innerRadius = radius * innerRadiusRatio;\n        const totalRadius = radius + innerRadius;\n\n        const radiusScale = new _Scene.BandScale();\n        radiusScale.domain = this.data[0].map((_, index) => index);\n        radiusScale.range = [radius, innerRadius];\n        radiusScale.paddingInner = 0.5;\n        radiusScale.paddingOuter = 0;\n        const bandwidth = radiusScale.bandwidth;\n\n        const { processedData, max } = accumulateData(this.data);\n\n        const angleScale = new _Scene.LinearScale();\n        angleScale.domain = [0, Math.ceil(max * 1.5)];\n        const start = (3 / 2) * Math.PI;\n        const end = start + 2 * Math.PI;\n        angleScale.range = [start, end];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i] ?? 0;\n\n                const innerRadius = totalRadius - radiusScale.convert(i);\n                const outerRadius = innerRadius + bandwidth;\n                const startAngle = angleScale.convert(previousDatum);\n                const endAngle = angleScale.convert(datum);\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport { createPolarPaths } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadarLine extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarLine';\n    private readonly lines: _Scene.Path[];\n    private readonly markers: _Scene.Circle[];\n    private readonly markerSize: number = 4;\n\n    private data = [\n        [8, 7, 8, 7, 8, 8, 7, 8],\n        [6, 8, 5, 10, 6, 7, 4, 6],\n        [0, 3, 3, 5, 4, 4, 2, 0],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radarLineTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = 0;\n\n        const { paths, markers } = createPolarPaths(\n            this.root,\n            this.data,\n            this.size,\n            radius,\n            innerRadius,\n            this.markerSize\n        );\n\n        this.lines = paths;\n        this.markers = markers;\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            const n = this.data[i].length;\n            line.stroke = fills[i];\n            const startIdx = i * n;\n            const endIdx = startIdx + n;\n            const markers = this.markers.slice(startIdx, endIdx);\n            markers.forEach((marker) => {\n                marker.stroke = strokes[i];\n                marker.fill = fills[i];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport { createPolarPaths } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniRadarArea extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarArea';\n    private readonly areas: _Scene.Path[];\n\n    private data = [\n        [8, 10, 5, 7, 4, 1, 5, 8],\n        [1, 1, 2, 7, 7, 8, 10, 1],\n        [4, 5, 9, 9, 4, 2, 3, 4],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radarAreaTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = radius - this.size * 0.3;\n\n        this.areas = createPolarPaths(this.root, this.data, this.size, radius, innerRadius).paths;\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniNightingale extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'nightingale';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 10, 9, 8, 7, 8],\n        [4, 6, 5, 4, 5, 5],\n        [3, 5, 4, 3, 4, 7],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'nightingaleTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = this.data[0].map((_, index) => index);\n        angleScale.range = [-Math.PI, Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n\n        const { processedData, max } = accumulateData(this.data);\n\n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [0, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeBar';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeBarTooltip');\n        const data = [3, 3.5, 3];\n\n        this.bars = this.createRangeBar(this.root, data, this.size, this.padding, 'vertical');\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n\n    createRangeBar(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): _Scene.Rect[] {\n        const barAlongX = direction === 'horizontal';\n        const scalePadding = 2 * padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.3;\n        xScale.paddingOuter = 0.3;\n\n        const lowRatio = 0.7;\n        const highRatio = 1.3;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * lowRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * highRatio,\n        ];\n        yScale.range = [scalePadding, size - scalePadding];\n\n        const width = xScale.bandwidth;\n\n        const bars = data.map((datum, i) => {\n            const [low, high] = [datum * lowRatio, datum * highRatio];\n\n            const x = xScale.convert(i);\n            const y = yScale.convert(low);\n            const height = yScale.convert(high) - y;\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        root.append(bars);\n\n        return bars;\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeArea';\n\n    private readonly lines: _Scene.Path[][];\n    private readonly areas: _Scene.Path[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeAreaTooltip');\n\n        // Create a set of repeating zigzag-shaped data series to use as the chart data\n        const period = 4;\n        const dataSeriesMidpoints = [\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 3, high: 5, period } }),\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 2.25, high: 4.25, period } }),\n            zigzag({ offset: 0.75 * period, length: period, pattern: { low: 2.5, high: 4.5, period } }),\n        ];\n        const dataSeriesWidth = 1.75;\n        const data = dataSeriesMidpoints.map((series) =>\n            series.map(([x, y]) => ({\n                x,\n                low: y - 0.5 * dataSeriesWidth,\n                high: y + 0.5 * dataSeriesWidth,\n            }))\n        );\n\n        const { lines, areas } = this.createRangeArea(this.root, data, this.size, this.padding);\n        this.lines = lines;\n        this.areas = areas;\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        // Swap the secondary and tertiary colors to match the designs\n        fills = swapArrayItems(fills, 1, 2);\n        strokes = swapArrayItems(strokes, 1, 2);\n\n        this.lines.forEach(([highLine, lowLine], i) => {\n            highLine.fill = undefined;\n            highLine.stroke = strokes[i];\n            lowLine.fill = undefined;\n            lowLine.stroke = strokes[i];\n        });\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n        });\n    }\n\n    createRangeArea(\n        root: _Scene.Group,\n        data: Array<Array<{ x: number; low: number; high: number }>>,\n        size: number,\n        padding: number\n    ): { lines: _Scene.Path[][]; areas: _Scene.Path[] } {\n        const xMin = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.min(acc, x), acc), Infinity);\n        const xMax = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.max(acc, x), acc), -Infinity);\n        const yMin = data.reduce((acc, series) => series.reduce((acc, { low }) => Math.min(acc, low), acc), Infinity);\n        const yMax = data.reduce(\n            (acc, series) => series.reduce((acc, { high }) => Math.max(acc, high), acc),\n            -Infinity\n        );\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [xMin, xMax];\n        xScale.range = [padding, size - padding];\n\n        const scalePadding = 2 * padding;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [yMin, yMax];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const lines: _Scene.Path[][] = [];\n        const areas: _Scene.Path[] = [];\n\n        const lowPoints = data.map((series) => {\n            const highLine = new _Scene.Path();\n            const lowLine = new _Scene.Path();\n            const area = new _Scene.Path();\n\n            lines.push([highLine, lowLine]);\n            areas.push(area);\n\n            highLine.strokeWidth = 0;\n            lowLine.strokeWidth = 0;\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            highLine.path.clear();\n            lowLine.path.clear();\n            area.path.clear();\n\n            return series.map((datum, datumIndex) => {\n                const { x, low, high } = datum;\n\n                const scaledX = xScale.convert(x);\n                const yLow = yScale.convert(low);\n                const yHigh = yScale.convert(high);\n\n                const command = datumIndex > 0 ? 'lineTo' : 'moveTo';\n\n                highLine.path[command](scaledX, yHigh);\n                lowLine.path[command](scaledX, yLow);\n                area.path[command](scaledX, yHigh);\n\n                return [scaledX, yLow];\n            });\n        });\n\n        lowPoints.forEach((seriesLowPoints, seriesIndex) => {\n            const n = seriesLowPoints.length - 1;\n            const area = areas[seriesIndex];\n            for (let datumIndex = n; datumIndex >= 0; datumIndex--) {\n                const [x, y] = seriesLowPoints[datumIndex];\n                area.path['lineTo'](x, y);\n            }\n        });\n\n        root.append(areas.concat(...lines));\n\n        return { lines, areas };\n    }\n}\n\ninterface ZigzagPatternOptions {\n    low: number;\n    high: number;\n    period: number;\n}\n\nfunction zigzag(options: { offset: number; length: number; pattern: ZigzagPatternOptions }): Array<[number, number]> {\n    const { offset, length, pattern } = options;\n\n    // Generate [x, y] points for all inflection points of the zigzag pattern that fall within the range\n    const points = getZigzagInflectionPoints(offset, length, pattern);\n\n    // Ensure the first and last points are clamped to the start and end of the range\n    const xMin = 0;\n    const xMax = length;\n    if (points.length === 0 || points[0][0] !== xMin) points.unshift(getZigzagPoint(xMin, offset, pattern));\n    if (points[points.length - 1][0] !== xMax) points.push(getZigzagPoint(xMax, offset, pattern));\n\n    return points;\n\n    function getZigzagInflectionPoints(\n        offset: number,\n        length: number,\n        pattern: ZigzagPatternOptions\n    ): [number, number][] {\n        const { period } = pattern;\n        const scaledOffset = offset / period;\n        const patternInflectionPoints = [0, 0.5];\n        const inflectionPoints = patternInflectionPoints\n            .map((x) => x - scaledOffset)\n            // Clamp offset points to the unit range [0, 1)\n            .map(getRemainderAbs)\n            .sort((a, b) => a - b);\n        const repeatedPoints = Array.from(\n            { length: Math.floor(inflectionPoints.length * (period / length)) },\n            (_, i) => inflectionPoints[i % inflectionPoints.length] + Math.floor(i / inflectionPoints.length)\n        );\n        return repeatedPoints.map((x) => x * period).map((x) => getZigzagPoint(x, offset, pattern));\n    }\n\n    function getZigzagPoint(x: number, offset: number, pattern: ZigzagPatternOptions): [number, number] {\n        return [x, getZigzagValue(offset + x, pattern)];\n    }\n\n    function getZigzagValue(x: number, pattern: ZigzagPatternOptions): number {\n        const { low, high, period } = pattern;\n        const scaledX = getRemainderAbs(x / period);\n        const y = scaledX > 0.5 ? 1 - 2 * (scaledX - 0.5) : 2 * scaledX;\n        return low + (high - low) * y;\n    }\n}\n\nfunction getRemainderAbs(value: number): number {\n    const remainder = value % 1;\n    return remainder < 0 ? remainder + 1 : remainder;\n}\n\nfunction swapArrayItems<T>(items: T[], leftIndex: number, rightIndex: number): T[] {\n    const results = [...items];\n    const temp = results[leftIndex];\n    results[leftIndex] = results[rightIndex];\n    results[rightIndex] = temp;\n    return results;\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme, _Util } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniBoxPlot extends MiniChartWithAxes {\n    static chartType: ChartType = 'boxPlot';\n\n    private readonly boxPlotGroups: _Scene.Group[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'boxPlotTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n\n        const data = [11, 11.5, 10.5];\n\n        const maxRatio = 1.2;\n        const q3Ratio = 1.1;\n        const q1Ratio = 0.9;\n        const minRatio = 0.8;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * minRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * maxRatio,\n        ];\n        yScale.range = [size - 1.5 * padding, padding];\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.4;\n        xScale.paddingOuter = 0.2;\n\n        const bandwidth = Math.round(xScale.bandwidth);\n        const halfBandWidth = Math.round(xScale.bandwidth / 2);\n\n        this.boxPlotGroups = data.map((datum, i) => {\n            const [minValue, q1Value, q3Value, maxValue] = [\n                datum * minRatio,\n                datum * q1Ratio,\n                datum * q3Ratio,\n                datum * maxRatio,\n            ];\n\n            const top = Math.round(yScale.convert(q3Value));\n            const left = Math.round(xScale.convert(i));\n            const right = Math.round(left + bandwidth);\n            const bottom = Math.round(yScale.convert(q1Value));\n            const min = Math.round(yScale.convert(minValue));\n            const mid = Math.round(yScale.convert(datum));\n            const max = Math.round(yScale.convert(maxValue));\n            const whiskerX = left + halfBandWidth;\n\n            const boxPlotGroup = new _Scene.Group();\n\n            const box = new _Scene.Rect();\n            const median = new _Scene.Line();\n            const topWhisker = new _Scene.Line();\n            const bottomWhisker = new _Scene.Line();\n            const topCap = new _Scene.Line();\n            const bottomCap = new _Scene.Line();\n\n            box.x = left;\n            box.y = top;\n            box.width = bandwidth;\n            box.height = bottom - top;\n            box.strokeWidth = 1;\n            box.strokeOpacity = 0.75;\n            box.crisp = true;\n\n            this.setLineProperties(median, left, right, mid, mid);\n            this.setLineProperties(topWhisker, whiskerX, whiskerX, max, top);\n            this.setLineProperties(bottomWhisker, whiskerX, whiskerX, min, bottom);\n            this.setLineProperties(topCap, left, right, max, max);\n            this.setLineProperties(bottomCap, left, right, min, min);\n\n            boxPlotGroup.append([box, median, topWhisker, bottomWhisker, topCap, bottomCap]);\n            return boxPlotGroup;\n        });\n\n        this.updateColors(fills, strokes, themeTemplateParameters, isCustomTheme);\n        this.root.append(this.boxPlotGroups);\n    }\n\n    updateColors(\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters?: ThemeTemplateParameters,\n        isCustomTheme?: boolean\n    ) {\n        const themeBackgroundColor = themeTemplateParameters?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(themeBackgroundColor) ? themeBackgroundColor[0] : themeBackgroundColor) ?? 'white';\n\n        this.boxPlotGroups.forEach((group, i) => {\n            group.children?.forEach((node: _Scene.Rect | _Scene.Line) => {\n                const fill = fills[i % fills.length];\n                node.fill = isCustomTheme ? fill : _Util.interpolateColor(fill, backgroundFill)(0.7);\n                node.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n\n    setLineProperties(line: _Scene.Line, x1: number, x2: number, y1: number, y2: number) {\n        line.x1 = x1;\n        line.x2 = x2;\n        line.y1 = y1;\n        line.y2 = y2;\n        line.strokeOpacity = 0.75;\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChart } from '../miniChart';\n\nexport class MiniTreemap extends MiniChart {\n    static chartType: ChartType = 'treemap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'treemapTooltip');\n\n        const { size, padding } = this;\n\n        const data: number[][] = [\n            [1, 1],\n            [3, 2, 1],\n        ];\n\n        const treeSize = data.length;\n        const treePadding = treeSize % 2 === 0 ? 0.3 : 0.2;\n        const range = [padding, size - padding];\n\n        const columns = data.length;\n        const columnParts = (columns * (columns + 1)) / 2;\n        const columnPadding = treePadding / (columns - 1);\n\n        const availableRange = range[1] - range[0];\n        const availableWidth = availableRange - treePadding;\n\n        let previousX = range[0];\n        this.rects = data.reduce((rects, d, columnIndex) => {\n            rects ??= [];\n\n            const widthRatio = (columns - columnIndex) / columnParts;\n            const width = availableWidth * widthRatio;\n\n            const rows = d.length;\n            const rowParts = d.reduce((parts, ratio) => (parts += ratio), 0);\n            const rowPadding = treePadding / (rows - 1 || 1);\n            const availableHeight = rows > 1 ? availableRange - treePadding : availableRange;\n\n            let previousY = range[0];\n            const xRects = d.map((ratio) => {\n                const rect = new _Scene.Rect();\n\n                const height = (availableHeight * ratio) / rowParts;\n\n                rect.x = previousX;\n                rect.y = previousY;\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0.75;\n                rect.crisp = true;\n\n                previousY += height + rowPadding;\n                return rect;\n            });\n\n            previousX += width + columnPadding;\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const defaultBackgroundColor = themeTemplate?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        this.rects.forEach((rect, i) => {\n            rect.fill = fills[i % strokes.length];\n            rect.stroke = isCustomTheme ? strokes[i % strokes.length] : backgroundFill;\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\n\nexport class MiniSunburst extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'sunburst';\n    private readonly series: _Scene.Group[];\n\n    // Hierarchical data using multidimensional array\n    private data = [\n        [[], []],\n        [[], []],\n        [[], []],\n    ];\n\n    // Rotate the chart by the given angle (-90 degrees)\n    private angleOffset = -Math.PI / 2;\n\n    private innerRadiusRatio = 0;\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'sunburstTooltip');\n\n        this.showRadiusAxisLine = false;\n        this.showAngleAxisLines = false;\n\n        const { data, size, padding, angleOffset, innerRadiusRatio } = this;\n\n        const radius = (size - padding * 2) / 2;\n\n        const angleRange = [angleOffset + 0, angleOffset + 2 * Math.PI];\n        const angleExtent = Math.abs(angleRange[1] - angleRange[0]);\n\n        const radiusRange = [radius * innerRadiusRatio, radius];\n        const radiusExtent = Math.abs(radiusRange[1] - radiusRange[0]);\n\n        let maxDepth = 0;\n        const findMaxDepth = (data: any[], parentDepth: number) => {\n            data.forEach((child) => {\n                const depth = parentDepth + 1;\n                maxDepth = Math.max(maxDepth, depth);\n                findMaxDepth(child, depth);\n            });\n        };\n\n        findMaxDepth(data, 0);\n\n        const radiusRatio = radiusExtent / maxDepth;\n        const center = this.size / 2;\n        const startAngle = angleRange[0];\n\n        this.series = [];\n\n        const createSectors = (\n            data: any[],\n            depth: number,\n            startAngle: number,\n            availableAngle: number,\n            group?: _Scene.Group\n        ) => {\n            const isArray = Array.isArray(data);\n\n            if (!isArray) {\n                return;\n            }\n\n            const childDepth = depth + 1;\n\n            let previousAngle = startAngle;\n\n            data.forEach((child, childIndex, children) => {\n                let childGroup = group;\n                if (!childGroup) {\n                    childGroup = new _Scene.Group();\n                    this.series.push(childGroup);\n                }\n\n                const innerRadius = radiusRange[0] + depth * radiusRatio;\n                const outerRadius = radiusRange[0] + childDepth * radiusRatio;\n\n                const angleRatio = 1 / children.length;\n                const start = previousAngle;\n                const end = start + availableAngle * angleRatio;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = start;\n                sector.endAngle = end;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                sector.inset = 0.75;\n\n                previousAngle = end;\n\n                childGroup.append(sector);\n\n                createSectors(child, childDepth, start, Math.abs(end - start), childGroup);\n            });\n        };\n\n        createSectors(data, 0, startAngle, angleExtent);\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme, _Util } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniChart } from '../miniChart';\n\nexport class MiniHeatmap extends MiniChart {\n    static chartType: ChartType = 'heatmap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'heatmapTooltip');\n\n        const { size, padding } = this;\n\n        const heatmapSize = 3;\n\n        const data = Array.from({ length: heatmapSize }, (_, __) =>\n            Array.from({ length: heatmapSize }, (_, yIndex) => yIndex)\n        );\n        const domain = data.map((_, index) => index);\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = domain;\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.01;\n        xScale.paddingOuter = 0.1;\n\n        const yScale = new _Scene.BandScale();\n        yScale.domain = domain;\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.01;\n        yScale.paddingOuter = 0.1;\n\n        const width = xScale.bandwidth ?? 0;\n        const height = yScale.bandwidth ?? 0;\n\n        this.rects = data.reduce((rects, d: [], index) => {\n            rects ??= [];\n            const xRects = d.map((_, yIndex) => {\n                const rect = new _Scene.Rect();\n                rect.x = xScale.convert(index);\n                rect.y = yScale.convert(yIndex);\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            });\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const defaultColorRange = themeTemplate?.get(_Theme.DEFAULT_DIVERGING_SERIES_COLOUR_RANGE);\n        const defaultBackgroundColor = themeTemplate?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        const colorRange = isCustomTheme ? [fills[0], fills[1]] : defaultColorRange;\n        const stroke = isCustomTheme ? strokes[0] : backgroundFill;\n\n        const fillFn = _Util.interpolateColor(colorRange[0], colorRange[1]);\n        this.rects.forEach((rect, i) => {\n            rect.fill = fillFn(i * 0.2);\n            rect.stroke = stroke;\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme } from 'ag-charts-community';\n\nimport type { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniWaterfall extends MiniChartWithAxes {\n    static chartType: ChartType = 'waterfall';\n\n    private readonly bars: _Scene.Rect[];\n\n    private data = [4, 3, -3, 6, -3];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'waterfallTooltip');\n\n        this.bars = this.createWaterfall(this.root, this.data, this.size, this.padding, 'vertical').bars;\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { data } = this;\n        const palettePositive = {\n            fill: fills[0],\n            stroke: strokes[0],\n        };\n        const paletteNegative = {\n            fill: fills[1],\n            stroke: strokes[1],\n        };\n        const positive = isCustomTheme\n            ? palettePositive\n            : themeTemplate?.get(_Theme.PALETTE_UP_STROKE) ?? palettePositive;\n        const negative = isCustomTheme\n            ? paletteNegative\n            : themeTemplate?.get(_Theme.PALETTE_DOWN_STROKE) ?? paletteNegative;\n        this.bars.forEach((bar, i) => {\n            const isPositive = data[i] >= 0;\n            bar.fill = isPositive ? positive.fill : negative.fill;\n            bar.stroke = isPositive ? positive.stroke : negative.stroke;\n        });\n    }\n\n    createWaterfall(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): { bars: _Scene.Rect[] } {\n        const scalePadding = 2 * padding;\n\n        const { processedData, min, max } = accumulateData(data.map((d) => [d]));\n        const flatData = processedData.reduce((flat, d) => flat.concat(d), []);\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [Math.min(min, 0), max];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.2;\n        xScale.paddingOuter = 0.3;\n\n        const width = xScale.bandwidth;\n\n        const connectorLine = new _Scene.Path();\n        connectorLine.stroke = '#575757';\n        connectorLine.strokeWidth = 0;\n        const pixelAlignmentOffset = (Math.floor(connectorLine.strokeWidth) % 2) / 2;\n\n        const connectorPath = connectorLine.path;\n        connectorPath.clear();\n\n        const barAlongX = direction === 'horizontal';\n\n        const bars = flatData.map((datum, i) => {\n            const previousDatum = i > 0 ? flatData[i - 1] : 0;\n            const rawValue = data[i];\n            const isPositive = rawValue > 0;\n\n            const currY = Math.round(yScale.convert(datum));\n            const trailY = Math.round(yScale.convert(previousDatum));\n            const y = (isPositive ? currY : trailY) - pixelAlignmentOffset;\n            const bottomY = (isPositive ? trailY : currY) + pixelAlignmentOffset;\n            const height = Math.abs(bottomY - y);\n\n            const x = xScale.convert(i);\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            const moveTo = currY + pixelAlignmentOffset;\n            const lineTo = trailY + pixelAlignmentOffset;\n\n            if (i > 0) {\n                const lineToX = barAlongX ? lineTo : rect.x;\n                const lineToY = barAlongX ? rect.y : lineTo;\n                connectorPath.lineTo(lineToX, lineToY);\n            }\n            const moveToX = barAlongX ? moveTo : rect.x;\n            const moveToY = barAlongX ? rect.y : moveTo;\n            connectorPath.moveTo(moveToX, moveToY);\n\n            return rect;\n        });\n\n        root.append([connectorLine, ...bars]);\n\n        return { bars };\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport type { _Scene } from 'ag-charts-community';\n\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects, createLinePaths } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniColumnLineCombo extends MiniChartWithAxes {\n    static chartType: ChartType = 'columnLineCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'columnLineComboTooltip');\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\nexport class MiniAreaColumnCombo extends MiniChartWithAxes {\n    static chartType: ChartType = 'areaColumnCombo';\n\n    private columns: _Scene.Rect[];\n    private areas: _Scene.Path[];\n\n    private columnData = [3, 4.5];\n\n    private areaData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'areaColumnComboTooltip');\n\n        const { root, columnData, areaData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 6],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        // scale for area series\n        const xScale = new _Scene.BandScale<number>();\n        xScale.range = [padding, size - padding];\n        xScale.domain = [0, 1, 2, 3, 4];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.range = [size - padding, padding];\n        yScale.domain = [0, 6];\n\n        const pathData: Coordinate[][] = [];\n        const yZero = yScale.convert(0);\n        const firstX = xScale.convert(0);\n\n        areaData.forEach((series, i) => {\n            const points = pathData[i] || (pathData[i] = []);\n            series.forEach((data, j) => {\n                const yDatum = data;\n                const xDatum = j;\n\n                const x = xScale.convert(xDatum);\n                const y = yScale.convert(yDatum);\n\n                points[j] = { x, y };\n            });\n\n            const lastX = xScale.convert(series.length - 1);\n\n            pathData[i].push(\n                {\n                    x: lastX,\n                    y: yZero,\n                },\n                {\n                    x: firstX,\n                    y: yZero,\n                }\n            );\n        });\n\n        this.areas = pathData.map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            const path = area.path;\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n\n            return area;\n        });\n\n        root.append(this.areas);\n        root.append(([] as _Scene.Rect[]).concat.apply([], this.columns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i + 1];\n            bar.stroke = strokes[i + 1];\n        });\n    }\n}\n", "import type { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\n\nimport { MiniChart } from '../miniChart';\nimport type { CreateColumnRectsParams } from '../miniChartHelpers';\nimport { createColumnRects, createLinePaths } from '../miniChartHelpers';\n\nexport class MiniCustomCombo extends MiniChart {\n    static chartType: ChartType = 'customCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'customComboTooltip');\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        const axisStroke = 'grey';\n        const axisOvershoot = 3;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + axisOvershoot;\n        leftAxis.stroke = axisStroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = axisStroke;\n\n        const penIcon = new _Scene.Path();\n        this.buildPenIconPath(penIcon);\n        penIcon.fill = 'whitesmoke';\n        penIcon.stroke = 'darkslategrey';\n        penIcon.strokeWidth = 1;\n\n        root.append([bottomAxis, leftAxis, penIcon]);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n\n    buildPenIconPath(penIcon: _Scene.Path) {\n        const { path } = penIcon;\n        path.moveTo(25.76, 43.46);\n        path.lineTo(31.27, 48.53);\n        path.moveTo(49.86, 22);\n        path.lineTo(49.86, 22);\n        path.cubicCurveTo(49.01994659053345, 21.317514933510974, 47.89593834348529, 21.09645997825817, 46.86, 21.41);\n        path.lineTo(46.86, 21.41);\n        path.cubicCurveTo(45.55460035985361, 21.77260167850787, 44.38777081121966, 22.517979360321792, 43.51, 23.55);\n        path.lineTo(25.51, 43.8);\n        path.lineTo(25.43, 43.89);\n        path.lineTo(23.01, 51.89);\n        path.lineTo(22.83, 52.46);\n        path.lineTo(31.02, 48.86);\n        path.lineTo(49.02, 28.52);\n        path.lineTo(49.02, 28.52);\n        path.cubicCurveTo(49.940716461596224, 27.521914221246085, 50.54302631059587, 26.2720342455763, 50.75, 24.93);\n        path.lineTo(50.75, 24.93);\n        path.cubicCurveTo(50.95363374988308, 23.866379846512814, 50.62080640232334, 22.77066734274871, 49.86, 22.0);\n        path.closePath();\n        path.moveTo(41.76, 25.5);\n        path.lineTo(47.34, 30.5);\n        path.moveTo(40.74, 26.65);\n        path.lineTo(46.25, 31.71);\n    }\n}\n", "import type { ChartOptionsChangedEvent, ChartType, WithoutGridCommon } from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce } from '@ag-grid-community/core';\nimport type {\n    AgBaseThemeableChartOptions,\n    AgCartesianAxesTheme,\n    AgCartesianAxisOptions,\n    AgCartesianAxisType,\n    AgCartesianChartOptions,\n    AgChartOptions,\n    AgChartThemeOverrides,\n    AgPolarAxesTheme,\n    AgPolarAxisType,\n} from 'ag-charts-community';\n\nimport type { ChartController } from '../chartController';\nimport type { AgChartActual, AgChartAxisType } from '../utils/integration';\nimport { get, set } from '../utils/object';\nimport type { ChartSeriesType, ChartThemeOverridesSeriesType } from '../utils/seriesTypeMapper';\nimport { getSeriesType, isCartesian, isSeriesType } from '../utils/seriesTypeMapper';\n\nexport interface ChartOptionsProxy {\n    getValue<T = string>(expression: string, calculated?: boolean): T;\n    setValue<T = string>(expression: string, value: T): void;\n    setValues<T = string>(properties: { expression: string; value: T }[]): void;\n}\n\ntype ChartAxis = NonNullable<AgChartActual['axes']>[number];\ntype SupportedSeries = AgChartActual['series'][number];\ntype AgPolarAxisThemeOverrides = NonNullable<AgPolarAxesTheme[keyof AgPolarAxesTheme]>;\ntype AgCartesianAxisThemeOverrides = NonNullable<AgCartesianAxesTheme[keyof AgCartesianAxesTheme]>;\ntype AgChartAxisThemeOverrides = AgCartesianAxisThemeOverrides | AgPolarAxisThemeOverrides;\n\ntype AgChartOptionsWithThemeOverrides = AgChartOptions & {\n    theme: NonNullable<Extract<AgChartOptions['theme'], object>> & {\n        overrides: NonNullable<Extract<AgChartOptions['theme'], object>['overrides']>;\n    };\n};\n\nconst CARTESIAN_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'time', 'grouped-category'];\nconst POLAR_AXIS_TYPES: AgPolarAxisType[] = ['angle-category', 'angle-number', 'radius-category', 'radius-number'];\n\nconst VALID_AXIS_TYPES: (AgCartesianAxisType | AgPolarAxisType)[] = [...CARTESIAN_AXIS_TYPES, ...POLAR_AXIS_TYPES];\n\nexport class ChartOptionsService extends BeanStub {\n    private readonly chartController: ChartController;\n\n    constructor(chartController: ChartController) {\n        super();\n        this.chartController = chartController;\n    }\n\n    public getChartThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getChartOption(expression),\n            setValue: (expression, value) => this.setChartThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setChartThemeOverrides(properties),\n        };\n    }\n\n    public getAxisThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getAxisProperty(expression),\n            setValue: (expression, value) => this.setAxisThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setAxisThemeOverrides(properties),\n        };\n    }\n\n    public getCartesianAxisOptionsProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisOptions(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisOptions(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisThemeOverridesProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisThemeOverrides(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisAppliedThemeOverridesProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) =>\n                this.getCartesianAxisThemeOverride(\n                    axisType,\n                    // Allow the caller to specify a wildcard expression to retrieve the whole set of overrides\n                    expression === '*' ? null : expression\n                )!,\n            setValue: (expression, value) =>\n                this.setCartesianAxisThemeOverrides(\n                    axisType,\n                    // Allow the caller to specify a wildcard expression to set the whole set of overrides\n                    [{ expression: expression === '*' ? null : expression, value }]\n                ),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getSeriesOptionsProxy(getSelectedSeries: () => ChartSeriesType): ChartOptionsProxy {\n        return {\n            getValue: (expression, calculated) => this.getSeriesOption(getSelectedSeries(), expression, calculated),\n            setValue: (expression, value) => this.setSeriesOptions(getSelectedSeries(), [{ expression, value }]),\n            setValues: (properties) => this.setSeriesOptions(getSelectedSeries(), properties),\n        };\n    }\n\n    /**\n     * Determine the set of theme overrides that should be retained when transitioning from one chart type to another.\n     */\n    public getPersistedChartThemeOverrides(\n        existingChartOptions: AgChartOptions,\n        existingAxes: ChartAxis[] | undefined,\n        existingChartType: ChartType,\n        targetChartType: ChartType\n    ): AgChartThemeOverrides {\n        // Determine the set of theme override keys that should be retained when transitioning from one chart type to another\n        const retainedThemeOverrideKeys = this.getRetainedChartThemeOverrideKeys(existingChartType, targetChartType);\n        const retainedChartAxisThemeOverrideKeys = this.getRetainedChartAxisThemeOverrideKeys(\n            null,\n            existingChartType,\n            targetChartType\n        );\n\n        // combine the options into a single merged object\n        const targetChartOptions = this.createChartOptions();\n\n        // copy the retained theme overrides from the existing chart options to the target chart options\n        for (const expression of retainedThemeOverrideKeys) {\n            // Locate the value in the existing chart series theme overrides\n            const value = this.retrieveChartOptionsThemeOverride(existingChartOptions, existingChartType, expression);\n            if (value !== undefined) {\n                // Update the value in the target chart series theme overrides\n                this.assignChartOptionsThemeOverride(targetChartOptions, targetChartType, expression, value);\n            }\n        }\n\n        // axis theme overrides are copied to all potential target axis types\n        // (this is necessary because certain chart types auto-instantiate different axis types given the same data)\n        if (existingAxes) {\n            this.assignPersistedAxisOverrides({\n                existingAxes,\n                retainedChartAxisThemeOverrideKeys,\n                existingChartOptions,\n                targetChartOptions,\n                existingChartType,\n                targetChartType,\n            });\n        }\n\n        return targetChartOptions.theme.overrides;\n    }\n\n    public assignPersistedAxisOverrides(params: {\n        existingAxes: ChartAxis[];\n        retainedChartAxisThemeOverrideKeys: {\n            expression: keyof AgChartAxisThemeOverrides | string;\n            targetAxisTypes: AgChartAxisType[];\n        }[];\n        existingChartOptions: AgChartOptions;\n        targetChartOptions: AgChartOptions;\n        existingChartType: ChartType;\n        targetChartType: ChartType;\n    }): void {\n        const {\n            existingAxes,\n            retainedChartAxisThemeOverrideKeys,\n            existingChartOptions,\n            targetChartOptions,\n            existingChartType,\n            targetChartType,\n        } = params;\n        for (const { expression, targetAxisTypes } of retainedChartAxisThemeOverrideKeys) {\n            // Locate the value in the existing chart series theme overrides\n            for (const existingAxisType of existingAxes.map((axis) => axis.type)) {\n                const value = this.retrieveChartOptionsThemeOverride(\n                    existingChartOptions,\n                    existingChartType,\n                    ['axes', existingAxisType, expression].join('.')\n                );\n                if (value !== undefined) {\n                    // Copy the value to all potential target chart axis theme overrides\n                    // (axis theme overrides are currently only persisted across cartesian chart types)\n                    for (const targetAxisType of targetAxisTypes) {\n                        this.assignChartOptionsThemeOverride(\n                            targetChartOptions,\n                            targetChartType,\n                            ['axes', targetAxisType, expression].join('.'),\n                            value\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    private getRetainedChartThemeOverrideKeys(\n        existingChartType: ChartType,\n        targetChartType: ChartType\n    ): (keyof AgBaseThemeableChartOptions | string)[] {\n        // these theme overrides are persisted across all chart types\n        const UNIVERSAL_PERSISTED_THEME_OVERRIDES: (keyof AgBaseThemeableChartOptions)[] = ['animation'];\n\n        // these theme overrides are persisted across all cartesian chart types\n        const PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES: (keyof AgCartesianChartOptions)[] = ['zoom', 'navigator'];\n\n        // other chart options will be retained depending on the specifics of the chart type from/to transition\n        const chartSpecificThemeOverrideKeys = ((previousChartType, updatedChartType) => {\n            const expressions = new Array<string>();\n            if (isCartesian(getSeriesType(previousChartType)) && isCartesian(getSeriesType(updatedChartType))) {\n                expressions.push(...PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES);\n            }\n            return expressions;\n        })(existingChartType, targetChartType);\n\n        return [...UNIVERSAL_PERSISTED_THEME_OVERRIDES, ...chartSpecificThemeOverrideKeys];\n    }\n\n    private getRetainedChartAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null,\n        existingChartType: ChartType,\n        targetChartType: ChartType\n    ): {\n        expression: keyof AgChartAxisThemeOverrides | string;\n        targetAxisTypes: AgChartAxisType[];\n    }[] {\n        // different axis types have different theme overrides\n        if (isCartesian(getSeriesType(existingChartType)) && isCartesian(getSeriesType(targetChartType))) {\n            const retainedKeys = this.getRetainedCartesianAxisThemeOverrideKeys(axisType);\n            return retainedKeys.map((expression) => ({ expression, targetAxisTypes: CARTESIAN_AXIS_TYPES }));\n        }\n        return [];\n    }\n\n    private getRetainedCartesianAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null\n    ): (keyof AgCartesianAxisThemeOverrides | string)[] {\n        const axisPositionSuffixes =\n            axisType === 'xAxis'\n                ? ['', '.top', '.bottom']\n                : axisType === 'yAxis'\n                  ? ['', '.left', '.right']\n                  : ['', '.left', '.right', '.top', '.bottom'];\n\n        // these axis theme overrides are persisted across all cartesian chart axis types\n        const PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES: (keyof AgCartesianAxisThemeOverrides)[] = ['crosshair'];\n\n        const expressions = new Array<keyof AgBaseThemeableChartOptions | string>();\n        for (const expression of PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES) {\n            for (const axisPositionSuffix of axisPositionSuffixes) {\n                expressions.push(`${expression}${axisPositionSuffix}`);\n            }\n        }\n        return expressions;\n    }\n\n    private getChartOption<T = string>(expression: string): T {\n        return get(this.getChart(), expression, undefined) as T;\n    }\n\n    private setChartThemeOverrides<T = string>(properties: { expression: string; value: T }[]): void {\n        const chartType = this.getChartType();\n        // combine the options into a single merged object\n        const chartOptions: AgChartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsThemeOverride(chartOptions, chartType, expression, value);\n        }\n        this.applyChartOptions(chartOptions);\n    }\n\n    private applyChartOptions(chartOptions: AgChartOptions, options?: { silent?: boolean }): void {\n        if (Object.keys(chartOptions).length === 0) return;\n        this.updateChart(chartOptions);\n        const shouldRaiseEvent = !options?.silent;\n        if (shouldRaiseEvent) this.raiseChartOptionsChangedEvent();\n    }\n\n    public awaitChartOptionUpdate(func: () => void) {\n        const chart = this.chartController.getChartProxy().getChart();\n        chart\n            .waitForUpdate()\n            .then(() => func())\n            .catch((e) => _errorOnce(`chart update failed`, e));\n    }\n\n    private getAxisProperty<T = string>(expression: string): T {\n        // Assume the property exists on the first axis\n        return get(this.getChart().axes?.[0], expression, undefined);\n    }\n\n    private setAxisThemeOverrides<T = string>(properties: { expression: string; value: T }[]): void {\n        const chart = this.getChart();\n        const chartType = this.getChartType();\n\n        // combine the options into a single merged object\n        const chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            // Only apply the property to axes that declare the property on their prototype chain\n            const relevantAxes = chart.axes?.filter((axis) => {\n                const parts = expression.split('.');\n                let current: any = axis;\n                for (const part of parts) {\n                    if (!(part in current)) {\n                        return false;\n                    }\n                    current = current[part];\n                }\n                return true;\n            });\n            if (!relevantAxes) continue;\n\n            for (const axis of relevantAxes) {\n                if (!this.isValidAxisType(axis)) continue;\n                this.assignChartAxisThemeOverride(chartOptions, chartType, axis.type, null, expression, value);\n            }\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private getCartesianAxisProperty<T = string | undefined>(axisType: 'xAxis' | 'yAxis', expression: string): T {\n        const axes = this.getChartAxes();\n        const axis = this.getCartesianAxis(axes, axisType);\n        return get(axis, expression, undefined);\n    }\n\n    private getCartesianAxisThemeOverride<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        expression: string | null\n    ): T | undefined {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return undefined;\n        const chartType = this.getChartType();\n        const chartOptions = this.getChart().getOptions();\n\n        return this.retrieveChartAxisThemeOverride(\n            chartOptions,\n            chartType,\n            chartAxis.type,\n            axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n            expression\n        );\n    }\n\n    private setCartesianAxisThemeOverrides<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string | null; value: T }>\n    ): void {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return;\n        const chartType = this.getChartType();\n\n        // combine the axis options into a single merged object\n        const chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartAxisThemeOverride(\n                chartOptions,\n                chartType,\n                chartAxis.type,\n                axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n                expression,\n                value\n            );\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private setCartesianAxisOptions<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string; value: T }>\n    ): void {\n        this.updateCartesianAxisOptions(axisType, (chartOptions, axes, chartAxis) => {\n            // assign the provided axis options onto the combined chart options object\n            const axisIndex = axes.indexOf(chartAxis);\n            for (const { expression, value } of properties) {\n                this.assignChartOption(chartOptions, `axes.${axisIndex}.${expression}`, value);\n            }\n        });\n    }\n\n    private updateCartesianAxisOptions(\n        axisType: 'xAxis' | 'yAxis',\n        updateFunc: (\n            chartOptions: AgChartOptions,\n            axes: ChartAxis[],\n            chartAxis: ChartAxis,\n            existingChartOptions: AgChartOptions\n        ) => void\n    ): void {\n        // get a snapshot of all existing axis options from the chart instance\n        const existingChartOptions = this.getChart().getOptions();\n        const axisOptions = 'axes' in existingChartOptions ? existingChartOptions.axes : undefined;\n        if (!existingChartOptions || !axisOptions) return;\n\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis) return;\n\n        // combine the axis options into a single merged object\n        const chartOptions = this.createChartOptions();\n        (chartOptions as Extract<AgChartOptions, { axes?: any }>).axes = axisOptions;\n\n        updateFunc(chartOptions, axes, chartAxis, existingChartOptions);\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    public setCartesianCategoryAxisType(axisType: 'xAxis' | 'yAxis', value: AgCartesianAxisOptions['type']): void {\n        this.updateCartesianAxisOptions(axisType, (chartOptions, _axes, chartAxis, existingChartOptions) => {\n            const chartType = this.getChartType();\n            this.assignPersistedAxisOverrides({\n                existingAxes: [chartAxis],\n                retainedChartAxisThemeOverrideKeys: this.getRetainedChartAxisThemeOverrideKeys(\n                    axisType,\n                    chartType,\n                    chartType\n                ),\n                existingChartOptions,\n                targetChartOptions: chartOptions,\n                existingChartType: chartType,\n                targetChartType: chartType,\n            });\n            this.assignChartOption(chartOptions, `axes.0.type`, value);\n            this.chartController.setCategoryAxisType(value);\n        });\n    }\n\n    private getCartesianAxis(axes: ChartAxis[], axisType: 'xAxis' | 'yAxis'): ChartAxis | undefined {\n        if (axes.length < 2) {\n            return undefined;\n        }\n        switch (axisType) {\n            case 'xAxis':\n                return axes[0].direction === 'x' ? axes[0] : axes[1];\n            case 'yAxis':\n                return axes[1].direction === 'y' ? axes[1] : axes[0];\n        }\n    }\n\n    private getSeriesOption<T = string>(seriesType: ChartSeriesType, expression: string, calculated?: boolean): T {\n        // N.B. 'calculated' here refers to the fact that the property exists on the internal series object itself,\n        // rather than the properties object. This is due to us needing to reach inside the chart itself to retrieve\n        // the value, and will likely be cleaned up in a future release\n        const series = this.getChart().series.find((s: any) => isMatchingSeries(seriesType, s));\n        return get(calculated ? series : series?.properties.toJson(), expression, undefined) as T;\n    }\n\n    private setSeriesOptions<T = string>(\n        seriesType: ChartSeriesType,\n        properties: { expression: string; value: T }[]\n    ): void {\n        // combine the series options into a single merged object\n        const chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsSeriesThemeOverride(chartOptions, seriesType, `series.${expression}`, value);\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    public getPairedMode(): boolean {\n        return this.chartController.getChartProxy().isPaired();\n    }\n\n    public setPairedMode(paired: boolean): void {\n        this.chartController.getChartProxy().setPaired(paired);\n    }\n\n    private getChartAxes(): Array<ChartAxis> {\n        const chart = this.getChart();\n        return chart.axes ?? [];\n    }\n\n    private retrieveChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null\n    ): T | undefined {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                const value = this.retrieveChartOptionsThemeOverride<T>(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...(expression ? [expression] : [])].join('.')\n                );\n                if (value === undefined) continue;\n                return value;\n            }\n        } else {\n            return this.retrieveChartOptionsThemeOverride<T>(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...(expression ? [expression] : [])].join('.')\n            );\n        }\n    }\n\n    private assignChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null,\n        value: T\n    ): void {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                this.assignChartOptionsThemeOverride(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...(expression ? [expression] : [])].join('.'),\n                    value\n                );\n            }\n        } else {\n            this.assignChartOptionsThemeOverride(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...(expression ? [expression] : [])].join('.'),\n                value\n            );\n        }\n    }\n\n    private isValidAxisType(chartAxis: ChartAxis): boolean {\n        return VALID_AXIS_TYPES.includes(chartAxis.type);\n    }\n\n    public getChartType(): ChartType {\n        return this.chartController.getChartType();\n    }\n\n    private getChart() {\n        return this.chartController.getChartProxy().getChart();\n    }\n\n    private updateChart(chartOptions: AgChartOptions) {\n        const chartRef = this.chartController.getChartProxy().getChartRef();\n        chartRef.skipAnimations();\n        chartRef.updateDelta(chartOptions);\n    }\n\n    private createChartOptions(): AgChartOptionsWithThemeOverrides {\n        const chartOptions = {\n            theme: {\n                overrides: {},\n            },\n        };\n        return chartOptions;\n    }\n\n    private retrieveChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        expression: string | null\n    ): T | undefined {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // Retrieve the first matching value\n        for (const seriesType of chartSeriesTypes) {\n            const value = this.retrieveChartOptionsSeriesThemeOverride<T>(chartOptions, seriesType, expression);\n            if (value === undefined) continue;\n            return value;\n        }\n\n        return undefined;\n    }\n\n    private assignChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        expression: string | null,\n        value: T\n    ): void {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // assign the relevant theme overrides for each series type\n        for (const seriesType of chartSeriesTypes) {\n            this.assignChartOptionsSeriesThemeOverride(chartOptions, seriesType, expression, value);\n        }\n    }\n\n    private retrieveChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        seriesType: ChartThemeOverridesSeriesType,\n        expression: string | null\n    ): T | undefined {\n        return this.retrieveChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...(expression ? [expression] : [])].join('.')\n        );\n    }\n\n    private assignChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions,\n        seriesType: ChartThemeOverridesSeriesType,\n        expression: string | null,\n        value: T\n    ): void {\n        this.assignChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...(expression ? [expression] : [])].join('.'),\n            value\n        );\n    }\n\n    private getChartThemeOverridesSeriesTypeKeys(chartType: ChartType): ChartThemeOverridesSeriesType[] {\n        // In the chart options API, theme overrides are categorized according to series type.\n        // Depending on the chart type, theme overrides may need to be applied to multiple series types.\n        const chartSeriesTypes: ChartThemeOverridesSeriesType[] = this.chartController.getChartSeriesTypes(chartType);\n        if (this.chartController.isComboChart()) {\n            chartSeriesTypes.push('common');\n        }\n        return chartSeriesTypes;\n    }\n\n    private retrieveChartOption<T>(chartOptions: AgChartOptions, expression: string): T | undefined {\n        return get(chartOptions, expression, undefined);\n    }\n\n    private assignChartOption<T>(chartOptions: AgChartOptions, expression: string, value: T): void {\n        set(chartOptions, expression, value);\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const chartModel = this.chartController.getChartModel();\n\n        const event: WithoutGridCommon<ChartOptionsChangedEvent> = {\n            type: 'chartOptionsChanged',\n            chartId: chartModel.chartId,\n            chartType: chartModel.chartType,\n            chartThemeName: this.chartController.getChartThemeName(),\n            chartOptions: chartModel.chartOptions,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n\nfunction isMatchingSeries(seriesType: ChartSeriesType, series: SupportedSeries): boolean {\n    return isSeriesType(seriesType) && series.type === seriesType;\n}\n", "import type { ChartModel } from '@ag-grid-community/core';\nimport type { AgChartThemeName } from 'ag-charts-community';\n\n// @ts-ignore\nimport { VERSION } from '../version';\n// @ts-ignore\nimport { ALL_AXIS_TYPES, getLegacyAxisType } from './chartComp/utils/axisTypeMapper';\n// @ts-ignore\nimport { getCanonicalChartType, getSeriesType, isPieChartSeries } from './chartComp/utils/seriesTypeMapper';\n\nconst DEBUG = false;\n\nexport function upgradeChartModel(model: ChartModel): ChartModel {\n    const originalVersion = model.version;\n    if (model.version == null) {\n        // Try to guess the version so we can apply the right subset of migrations.\n        model.version = heuristicVersionDetection(model);\n    }\n\n    model = migrateIfBefore('23.0.0', model, migrateV23);\n    model = migrateIfBefore('24.0.0', model, migrateV24);\n    model = migrateIfBefore('25.1.0', model, migrateV25_1);\n    model = migrateIfBefore('26.0.0', model, migrateV26);\n    model = migrateIfBefore('26.1.0', model, migrateV26_1);\n    // Switch from iChartOptions to iAgChartOptions....\n    model = migrateIfBefore('26.2.0', model, migrateV26_2);\n    model = migrateIfBefore('28.0.0', model, migrateV28);\n    model = migrateIfBefore('28.2.0', model, migrateV28_2);\n    model = migrateIfBefore('29.0.0', model, migrateV29);\n    model = migrateIfBefore('29.1.0', model, migrateV29_1);\n    model = migrateIfBefore('29.2.0', model, migrateV29_2);\n    model = migrateIfBefore('30.0.0', model, migrateV30);\n    model = migrateIfBefore('31.0.0', model, migrateV31);\n    model = migrateIfBefore('32.0.0', model, migrateV32);\n    model = cleanup(model);\n\n    // Bump version to latest.\n    model = migrateIfBefore(VERSION, model, (m) => m);\n\n    if (DEBUG && originalVersion !== model.version) {\n        console.log('AG Grid: ChartModel migration complete', { model });\n    }\n\n    return model;\n}\n\nfunction migrateV23(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/76c6744ff2b732d298d1ade73c122188854b5bac\n    model = jsonRename('chartOptions.legend.item.marker.type', 'shape', model);\n    model = jsonRename('chartOptions.seriesDefaults.marker.type', 'shape', model);\n\n    // https://github.com/ag-grid/ag-grid/commit/7bdf2cfd666acda758a818733a9f9cb35ac1d7a7\n    model = jsonRename('chartOptions.legend.padding', 'spacing', model);\n\n    return model;\n}\n\nfunction migrateV24(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chartOptions.seriesDefaults.marker.minSize', model);\n\n    const {\n        chartType,\n        chartPalette, // Migrate.\n        chartOptions: { xAxis, yAxis, ...chartOptions },\n        ...chartModel\n    } = model as any;\n    const axesTypes = getLegacyAxisType(chartType);\n    const axes = axesTypes?.map((type, i) => ({\n        type,\n        ...(i === 0 ? xAxis : yAxis),\n    }));\n\n    // Precise legacy palette fills/strokes can be found here for future reference:\n    // https://github.com/ag-grid/ag-grid/blob/b22.1.0/grid-enterprise-modules/charts/src/charts/chart/palettes.ts\n    const LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        borneo: 'ag-default',\n        material: 'ag-material',\n        bright: 'ag-vivid',\n    };\n\n    return {\n        chartType,\n        chartThemeName: LEGACY_PALETTES[chartPalette] ?? 'ag-default',\n        chartOptions: {\n            ...chartOptions,\n            axes,\n            xAxis,\n            yAxis,\n        },\n        ...chartModel,\n    } as ChartModel;\n}\n\nfunction migrateV25_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/61943f9fecbfb5ac1b9a1fd93788f9fdd8687181\n    model = jsonRename('chartOptions.seriesDefaults.label.minRequiredAngle', 'minAngle', model);\n    return model;\n}\n\nfunction migrateV26(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ dimOpacity, ...opts }: any) => ({\n        ...opts,\n        ...(dimOpacity != null ? { series: { dimOpacity } } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chart', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipClass', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipTracking', model);\n\n    // Cleanup label.rotation === 0, which was treated as 'use the default' on reload prior to 26.\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 0, model);\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 335, model);\n    return model;\n}\n\nfunction migrateV26_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ item, series, ...opts }: any) => ({\n        item: { ...opts, ...item },\n        ...(series ? { series } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n    model = jsonMutate('chartOptions.series[].highlightStyle', model, highlightOptUpdate);\n    return model;\n}\n\nfunction migrateV26_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/8b2e223cb1a687cb6c1d70b9f75f52fa29d00341\n    model = jsonMove('chartOptions.seriesDefaults.fill.opacity', 'chartOptions.seriesDefaults.fillOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.opacity', 'chartOptions.seriesDefaults.strokeOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.width', 'chartOptions.seriesDefaults.strokeWidth', model);\n    model = jsonDelete('chartOptions.seriesDefaults.fill', model);\n    model = jsonDelete('chartOptions.seriesDefaults.stroke', model);\n    model = jsonDelete('chartOptions.seriesDefaults.callout.colors', model);\n    model = jsonDelete('chartOptions.xAxis', model);\n    model = jsonDelete('chartOptions.yAxis', model);\n    const {\n        chartType: providedChartType,\n        chartOptions: { axes, series, seriesDefaults, ...otherChartOptions },\n        ...otherModelProps\n    } = model as any;\n\n    // At 26.2.0 combination charts weren't supported, so we can safely assume a single series type.\n    // We can't rely on the `series.type` field as it was incorrect (in v25.0.0 line chart has an\n    // `area` series).\n    // Note that in v31.1.0, the canonical name for the 'doughnut' chart type changed to 'donut'.\n    const chartType = getCanonicalChartType(providedChartType);\n    const seriesType = getSeriesType(chartType);\n    const seriesTypes = [seriesType];\n\n    const chartTypeMixin: any = {};\n    if (!isPieChartSeries(seriesType)) {\n        const minimalAxis = { top: {}, bottom: {}, left: {}, right: {} };\n        const updatedAxes = axes\n            .map(({ type, ...axisProps }: any) => ({\n                [type]: { ...minimalAxis, ...axisProps },\n            }))\n            .reduce(merge, {});\n        ALL_AXIS_TYPES.filter((v) => updatedAxes[v] == null).forEach((v) => {\n            updatedAxes[v] = { ...minimalAxis };\n        });\n        chartTypeMixin.axes = updatedAxes;\n    }\n\n    const updatedChartOptions = seriesTypes\n        .map((t: string) => ({\n            [t]: {\n                ...chartTypeMixin,\n                series: seriesDefaults,\n                ...otherChartOptions,\n            },\n        }))\n        .reduce(merge, {});\n\n    model = {\n        ...otherModelProps,\n        chartType,\n        chartOptions: updatedChartOptions,\n    };\n\n    return model;\n}\n\nfunction migrateV28(model: ChartModel) {\n    model = jsonDelete('chartOptions.*.title.padding', model);\n    model = jsonDelete('chartOptions.*.subtitle.padding', model);\n    model = jsonDelete('chartOptions.*.axes.*.title.padding', model);\n    model = jsonBackfill('chartOptions.*.axes.*.title.enabled', false, model);\n\n    return model;\n}\n\nfunction migrateV28_2(model: ChartModel) {\n    model = jsonRename('chartOptions.pie.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.pie.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n\n    model = jsonRename('chartOptions.donut.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.donut.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.donut.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.donut.series.labelName', 'sectorLabelName', model);\n\n    // series.yKeys => yKey ?\n    // series.yNames => yName ?\n\n    return model;\n}\n\nfunction migrateV29(model: ChartModel) {\n    model = jsonMoveIfMissing('chartOptions.scatter.series.fill', 'chartOptions.scatter.series.marker.fill', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.fillOpacity',\n        'chartOptions.scatter.series.marker.fillOpacity',\n        model\n    );\n    model = jsonMoveIfMissing('chartOptions.scatter.series.stroke', 'chartOptions.scatter.series.marker.stroke', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeOpacity',\n        'chartOptions.scatter.series.marker.strokeOpacity',\n        model\n    );\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeWidth',\n        'chartOptions.scatter.series.marker.strokeWidth',\n        model\n    );\n    model = jsonMove('chartOptions.scatter.series.paired', 'chartOptions.scatter.paired', model);\n\n    return model;\n}\n\nfunction migrateV29_1(model: ChartModel) {\n    model = jsonDelete('chartOptions.axes[].tick.count', model);\n\n    return model;\n}\n\nfunction migrateV29_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/ce11956492e42e845932edb4e05d7b0b21db5c61\n    const tooltipOptUpdate = ({ tracking, ...opts }: any) => {\n        const output = { ...opts };\n        if (tracking === false) {\n            output.position ??= { type: 'pointer' };\n            output.range ??= 'nearest';\n        } else if (tracking === true) {\n            output.position ??= { type: 'node' };\n            output.range ??= 'nearest';\n        }\n        return output;\n    };\n    model = jsonMutate('chartOptions.*.tooltip', model, tooltipOptUpdate);\n\n    return model;\n}\n\nfunction migrateV30(model: ChartModel) {\n    // Repeated from migrateV28_2() as they were applied retrospectively for the v30 release.\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n    // Late-applied migrations for deprecations in the 29.x.y range.\n    model = migrateV29_1(model);\n    model = migrateV29_2(model);\n\n    // Actual v30 changes.\n    model = jsonDelete('chartOptions.*.series.flipXY', model);\n    model = jsonAdd('chartOptions.common.legend.enabled', true, model);\n    model = jsonBackfill('chartOptions.common.legend.position', 'right', model);\n\n    return model;\n}\n\nfunction migrateV31(model: ChartModel) {\n    const V30_LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        'ag-pastel': 'ag-sheets',\n        'ag-solar': 'ag-polychroma',\n    };\n\n    const updatedModel = jsonRename('chartOptions.column', 'bar', model);\n\n    const chartThemeName = V30_LEGACY_PALETTES[updatedModel.chartThemeName] || updatedModel.chartThemeName;\n\n    return {\n        ...updatedModel,\n        chartThemeName,\n    };\n}\n\nfunction migrateV32(model: ChartModel) {\n    model = jsonMutateProperty('chartOptions.*.autoSize', true, model, (parent, targetProp) => {\n        if (parent[targetProp] === true) {\n            // autoSize: true was the OOB default, so just use the new OOB default baked-in.\n        } else if (parent[targetProp] === false) {\n            // Fallback to legacy Charts defaults for autoSize: false.\n            parent['minHeight'] = 600;\n            parent['minWidth'] = 300;\n        }\n\n        delete parent[targetProp];\n    });\n\n    return model;\n}\n\nfunction cleanup(model: ChartModel) {\n    // Remove fixed width/height - this has never been supported via UI configuration.\n    model = jsonDelete('chartOptions.*.width', model);\n    model = jsonDelete('chartOptions.*.height', model);\n    model = jsonBackfill('chartOptions.*.axes.category.label.autoRotate', true, model);\n\n    return model;\n}\n\nexport function heuristicVersionDetection(model: ChartModel) {\n    const modelAny = model as any;\n\n    if (model.version != null) {\n        return model.version;\n    }\n\n    const hasKey = (obj: any, ...keys: string[]) => {\n        return Object.keys(obj || {}).some((k) => keys.includes(k));\n    };\n\n    const chartOptions = modelAny.chartOptions;\n    const seriesOptions = hasKey(chartOptions, 'seriesDefaults')\n        ? chartOptions?.seriesDefaults\n        : chartOptions?.[Object.keys(chartOptions)[0]];\n    const hints = {\n        '27.0.0': hasKey(modelAny, 'seriesChartTypes'),\n        '26.2.0': !hasKey(chartOptions, 'seriesDefaults'),\n        '26.1.0': hasKey(seriesOptions?.highlightStyle, 'item'),\n        '26.0.0': hasKey(seriesOptions?.highlightStyle, 'series'),\n        // '26.0.0': modelAny.chart === undefined,\n        '25.1.0': hasKey(seriesOptions?.label, 'minAngle'),\n        '25.0.0':\n            hasKey(modelAny, 'modelType', 'aggFunc', 'unlinkChart', 'suppressChartRanges') ||\n            hasKey(seriesOptions, 'lineDash', 'lineDashOffset'),\n        '24.0.0': hasKey(modelAny, 'chartThemeName', 'chart') || hasKey(chartOptions, 'series'),\n        '23.2.0': hasKey(chartOptions, 'navigator'),\n        '23.0.0': hasKey(chartOptions?.legend?.item?.marker, 'shape'),\n        '22.1.0': hasKey(modelAny, 'chartPalette', 'chartType'),\n    };\n\n    // Default to 27.1.0, the last version before we added `version`.\n    const defaultVersion = '27.1.0';\n    const matchingHints = Object.entries(hints).filter(([_, match]) => match);\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersionCandidates: matchingHints });\n    const [heuristicVersion = defaultVersion] = matchingHints[0];\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersion });\n    return heuristicVersion;\n}\n\nfunction migrateIfBefore(maxVersion: string, model: ChartModel, migration: (m: ChartModel) => ChartModel): ChartModel {\n    if (versionNumber(maxVersion) > versionNumber(model.version!)) {\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratingTo: maxVersion });\n\n        const result = migration(model);\n        result.version = maxVersion;\n\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratedTo: maxVersion, result });\n        return result;\n    }\n\n    return model;\n}\n\ntype VersionParts = { major: number; minor: number; patch: number };\nfunction versionParts(version: string): VersionParts {\n    const split = typeof version === 'string' ? version.split('.').map((v) => Number(v)) : [];\n    if (split.length !== 3 || split.some((v) => isNaN(v))) {\n        throw new Error('AG Grid - Illegal version string: ' + version);\n    }\n\n    return {\n        major: split[0],\n        minor: split[1],\n        patch: split[2],\n    };\n}\n\nfunction versionNumber(version: string): number {\n    const { major, minor, patch } = versionParts(version);\n\n    // Return a number of the form MMmmPP.\n    return major * 10_000 + minor * 100 + patch;\n}\n\nfunction jsonDeleteDefault(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        if (parent[prop] === defaultValue) {\n            delete parent[prop];\n        }\n    });\n}\n\nfunction jsonBackfill(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, false, json, (parent, prop) => {\n        if (parent[prop] == null) {\n            parent[prop] = defaultValue;\n        }\n    });\n}\n\nfunction jsonAdd(path: string | string[], value: any, json: any): any {\n    if (typeof path === 'string') {\n        path = path.split('.');\n    }\n\n    const nextPath = path[0];\n    if (path.length > 1) {\n        json[nextPath] = jsonAdd(path.slice(1), value, json[nextPath] ?? {});\n    }\n\n    const hasProperty = Object.keys(json).includes(nextPath);\n    if (!hasProperty) {\n        json[nextPath] = value;\n    }\n\n    return json;\n}\n\nfunction jsonMove(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        parent[prop] = valueToMove;\n    });\n}\n\nfunction jsonMoveIfMissing(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        if (parent[prop] === undefined) {\n            parent[prop] = valueToMove;\n        }\n    });\n}\n\nfunction jsonRename(path: string | string[], renameTo: string, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        parent[renameTo] = parent[prop];\n        delete parent[prop];\n    });\n}\n\nfunction jsonDelete(path: string | string[], json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => delete parent[prop]);\n}\n\nfunction jsonMutateProperty(\n    path: string | string[],\n    skipMissing: boolean,\n    json: any,\n    mutator: (parent: any, targetProp: string) => any\n) {\n    const pathElements = path instanceof Array ? path : path.split('.');\n    const parentPathElements = pathElements.slice(0, pathElements.length - 1);\n    const targetName = pathElements[pathElements.length - 1];\n\n    return jsonMutate(parentPathElements, json, (parent) => {\n        const hasProperty = Object.keys(parent).includes(targetName);\n        if (skipMissing && !hasProperty) {\n            return parent;\n        }\n\n        const result = { ...parent };\n        mutator(result, targetName);\n        return result;\n    });\n}\n\nfunction jsonMutate(path: string | string[], json: any, mutator: (v: any) => any): any {\n    const pathElements = path instanceof Array ? path : path.split('.');\n\n    // Clone to avoid mutating original input.\n    json = { ...json };\n\n    if (pathElements.length === 0) {\n        return mutator(json);\n    } else if (pathElements[0].startsWith('{')) {\n        const pathOptions = pathElements[0].substring(1, pathElements[0].lastIndexOf('}')).split(',');\n        for (const pathOption of pathOptions) {\n            if (json[pathOption] != null) {\n                json[pathOption] = jsonMutate(pathElements.slice(1), json[pathOption], mutator);\n            }\n        }\n    } else if (pathElements[0].endsWith('[]')) {\n        const arrayName = pathElements[0].substring(0, path[0].indexOf('['));\n        if (json[arrayName] instanceof Array) {\n            json[arrayName] = json[arrayName].map((v: any) => jsonMutate(pathElements.slice(1), v, mutator));\n        }\n    } else if (pathElements[0] === '*') {\n        for (const jsonProp in json) {\n            json[jsonProp] = jsonMutate(pathElements.slice(1), json[jsonProp], mutator);\n        }\n    } else if (json[pathElements[0]] != null) {\n        json[pathElements[0]] = jsonMutate(pathElements.slice(1), json[pathElements[0]], mutator);\n    }\n\n    return json;\n}\n\nconst merge = (r: {}, n: {}) => ({ ...r, ...n });\n", "import type {\n    BeanCollection,\n    ChartDownloadParams,\n    ChartModel,\n    ChartRef,\n    CloseChartToolPanelParams,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    GetChartImageDataUrlParams,\n    OpenChartToolPanelParams,\n    UpdateChartParams,\n} from '@ag-grid-community/core';\n\nexport function getChartModels(beans: BeanCollection): ChartModel[] | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.getChartModels());\n}\n\nexport function getChartRef(beans: BeanCollection, chartId: string): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.getChartRef(chartId));\n}\n\nexport function getChartImageDataURL(beans: BeanCollection, params: GetChartImageDataUrlParams): string | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.getChartImageDataURL(params));\n}\n\nexport function downloadChart(beans: BeanCollection, params: ChartDownloadParams) {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.downloadChart(params));\n}\n\nexport function openChartToolPanel(beans: BeanCollection, params: OpenChartToolPanelParams) {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.openChartToolPanel(params));\n}\n\nexport function closeChartToolPanel(beans: BeanCollection, params: CloseChartToolPanelParams) {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.closeChartToolPanel(params.chartId));\n}\n\nexport function createRangeChart(beans: BeanCollection, params: CreateRangeChartParams): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.createRangeChart(params, true));\n}\n\nexport function createPivotChart(beans: BeanCollection, params: CreatePivotChartParams): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.createPivotChart(params, true));\n}\n\nexport function createCrossFilterChart(\n    beans: BeanCollection,\n    params: CreateCrossFilterChartParams\n): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.createCrossFilterChart(params, true));\n}\n\nexport function updateChart(beans: BeanCollection, params: UpdateChartParams): void {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.updateChart(params));\n}\n\nexport function restoreChart(\n    beans: BeanCollection,\n    chartModel: ChartModel,\n    chartContainer?: HTMLElement\n): ChartRef | undefined {\n    return beans.frameworkOverrides.wrapIncoming(() => beans.chartService?.restoreChart(chartModel, chartContainer));\n}\n", "import type { ModuleValidationResult } from '@ag-grid-community/core';\n\nconst VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION = 28;\nconst VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION = 6;\n\nfunction isValidVersion(version: string) {\n    return version && version.match(/\\d+\\.\\d+\\.\\d+/);\n}\n\nfunction isValidMajorVersion({\n    gridMajorVersion,\n    chartsMajorVersion,\n}: {\n    gridMajorVersion: string;\n    chartsMajorVersion: string;\n}): boolean {\n    const gridMajor = parseInt(gridMajorVersion, 10);\n    const chartsMajor = parseInt(chartsMajorVersion, 10);\n\n    const gridMajorDifference = gridMajor - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION;\n    const chartsMajorDifference = chartsMajor - VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n    const isFirstOrAfterVersion = gridMajorDifference >= 0;\n\n    return gridMajorDifference === chartsMajorDifference && isFirstOrAfterVersion;\n}\n\nexport function gridChartVersion(gridVersion: string):\n    | {\n          gridMajorMinor: string;\n          chartsMajorMinor: string;\n      }\n    | undefined {\n    if (!gridVersion || !isValidVersion(gridVersion)) {\n        return undefined;\n    }\n\n    const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n    const gridMajorMinor = `${gridMajor}.${gridMinor}.x`;\n\n    const gridMajorNumber = parseInt(gridMajor, 10);\n    const chartsMajor =\n        gridMajorNumber - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION + VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n\n    if (chartsMajor < 0) {\n        return undefined;\n    }\n\n    const chartsMinor = gridMinor;\n    const chartsMajorMinor = `${chartsMajor}.${chartsMinor}.x`;\n\n    return {\n        gridMajorMinor,\n        chartsMajorMinor,\n    };\n}\n\nexport function validGridChartsVersionErrorMessage({\n    type,\n    gridVersion,\n    chartsVersion,\n}: {\n    type: 'incompatible' | 'invalidCharts' | 'invalidGrid' | 'invalid';\n    gridVersion?: string;\n    chartsVersion?: string;\n}): string {\n    const invalidMessage =\n        'AG Grid: AG Grid version is incompatible. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.';\n\n    if (!gridVersion) {\n        return invalidMessage;\n    }\n\n    const version = gridChartVersion(gridVersion);\n    if (!version) {\n        return invalidMessage;\n    }\n\n    const { gridMajorMinor, chartsMajorMinor } = version;\n\n    if (type === 'incompatible') {\n        return `AG Grid version ${gridVersion} and AG Charts version ${chartsVersion} is not supported. AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`;\n    } else if (type === 'invalidCharts') {\n        return `AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`;\n    }\n\n    return invalidMessage;\n}\n\nexport function validGridChartsVersion({\n    gridVersion,\n    chartsVersion,\n}: {\n    gridVersion: string;\n    chartsVersion: string;\n}): ModuleValidationResult {\n    if (!isValidVersion(chartsVersion)) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'invalidCharts', gridVersion, chartsVersion }),\n        };\n    }\n    if (!isValidVersion(gridVersion)) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'invalidGrid', gridVersion, chartsVersion }),\n        };\n    }\n\n    const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n    const [chartsMajor, chartsMinor, chartsPatch] = chartsVersion.split('.') || [];\n    const isValidMajor = isValidMajorVersion({\n        gridMajorVersion: gridMajor,\n        chartsMajorVersion: chartsMajor,\n    });\n\n    if ((isValidMajor && gridMinor === chartsMinor) || chartsPatch.includes('beta')) {\n        return {\n            isValid: true,\n        };\n    } else if (!isValidMajor || gridMinor !== chartsMinor) {\n        return {\n            isValid: false,\n            message: validGridChartsVersionErrorMessage({ type: 'incompatible', gridVersion, chartsVersion }),\n        };\n    }\n\n    return {\n        isValid: false,\n        message: validGridChartsVersionErrorMessage({ type: 'invalid', gridVersion, chartsVersion }),\n    };\n}\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { addCellRange, clearRangeSelection, getCellRanges } from './rangeSelection/rangeSelectionApi';\nimport { RangeService } from './rangeSelection/rangeService';\nimport { SelectionHandleFactory } from './rangeSelection/selectionHandleFactory';\nimport { VERSION } from './version';\n\nexport const RangeSelectionCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.RangeSelectionModule}-core`,\n    beans: [RangeService, SelectionHandleFactory],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const RangeSelectionApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.RangeSelectionModule}-api`,\n    apiFunctions: {\n        getCellRanges,\n        addCellRange,\n        clearRangeSelection,\n    },\n    dependantModules: [RangeSelectionCoreModule],\n};\n\nexport const RangeSelectionModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RangeSelectionModule,\n    dependantModules: [RangeSelectionCoreModule, RangeSelectionApiModule],\n};\n", "import type { BeanCollection, CellRange, CellRangeParams } from '@ag-grid-community/core';\n\nexport function getCellRanges(beans: BeanCollection): CellRange[] | null {\n    return beans.rangeService?.getCellRanges() ?? null;\n}\n\nexport function addCellRange(beans: BeanCollection, params: CellRangeParams): void {\n    beans.rangeService?.addCellRange(params);\n}\n\nexport function clearRangeSelection(beans: BeanCollection): void {\n    beans.rangeService?.removeAllCellRanges();\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellNavigationService,\n    CellPosition,\n    CellPositionUtils,\n    CellRange,\n    CellRangeParams,\n    ClearCellRangeParams,\n    ColumnModel,\n    CtrlsService,\n    DragService,\n    IRangeService,\n    IRowModel,\n    NamedBean,\n    PartialCellRange,\n    PinnedRowModel,\n    RangeDeleteEndEvent,\n    RangeDeleteStartEvent,\n    RangeSelectionChangedEvent,\n    RowPinnedType,\n    RowPosition,\n    RowPositionUtils,\n    ValueService,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AutoScrollService,\n    BeanStub,\n    CellCtrl,\n    _areEqual,\n    _exists,\n    _existsAndNotEmpty,\n    _getCtrlForEventTarget,\n    _includes,\n    _last,\n    _makeNull,\n    _missing,\n    _shallowCompare,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nexport class RangeService extends BeanStub implements NamedBean, IRangeService {\n    beanName = 'rangeService' as const;\n\n    private rowModel: IRowModel;\n    private dragService: DragService;\n    private columnModel: ColumnModel;\n    private visibleColsService: VisibleColsService;\n    private cellNavigationService: CellNavigationService;\n    private pinnedRowModel: PinnedRowModel;\n    private rowPositionUtils: RowPositionUtils;\n    private cellPositionUtils: CellPositionUtils;\n    private ctrlsService: CtrlsService;\n    private valueService: ValueService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n        this.dragService = beans.dragService;\n        this.columnModel = beans.columnModel;\n        this.visibleColsService = beans.visibleColsService;\n        this.cellNavigationService = beans.cellNavigationService;\n        this.pinnedRowModel = beans.pinnedRowModel;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.ctrlsService = beans.ctrlsService;\n        this.valueService = beans.valueService;\n    }\n\n    private cellRanges: CellRange[] = [];\n    private lastMouseEvent: MouseEvent | null;\n    private bodyScrollListener = this.onBodyScroll.bind(this);\n\n    private lastCellHovered: CellPosition | undefined;\n    private cellHasChanged: boolean;\n\n    // when a range is created, we mark the 'start cell' for further processing as follows:\n    // 1) if dragging, then the new range is extended from the start position\n    // 2) if user hits 'shift' click on a cell, the previous range is extended from the start position\n    private newestRangeStartCell?: CellPosition;\n\n    private dragging = false;\n    private draggingRange?: CellRange;\n\n    private intersectionRange = false; // When dragging ends, the current range will be used to intersect all other ranges\n\n    public autoScrollService: AutoScrollService;\n\n    public postConstruct(): void {\n        const onColumnsChanged = this.onColumnsChanged.bind(this);\n        const removeAllCellRanges = () => this.removeAllCellRanges();\n        const refreshLastRangeStart = this.refreshLastRangeStart.bind(this);\n        this.addManagedEventListeners({\n            newColumnsLoaded: onColumnsChanged,\n            columnVisible: onColumnsChanged,\n            columnValueChanged: onColumnsChanged,\n            columnPivotModeChanged: removeAllCellRanges,\n            columnRowGroupChanged: removeAllCellRanges,\n            columnPivotChanged: removeAllCellRanges,\n            columnGroupOpened: refreshLastRangeStart,\n            columnMoved: refreshLastRangeStart,\n            columnPinned: refreshLastRangeStart,\n        });\n\n        this.ctrlsService.whenReady((p) => {\n            const gridBodyCtrl = p.gridBodyCtrl;\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCtrl.getBodyViewportElement()!,\n                scrollAxis: 'xy',\n                getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n                getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n                setHorizontalPosition: (position) =>\n                    gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n                shouldSkipVerticalScroll: () => !this.gos.isDomLayout('normal'),\n                shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing(),\n            });\n        });\n    }\n\n    // Called for both columns loaded & column visibility events\n    public onColumnsChanged(): void {\n        // first move start column in last cell range (i.e. series chart range)\n        this.refreshLastRangeStart();\n\n        const allColumns = this.visibleColsService.getAllCols();\n\n        // check that the columns in each range still exist and are visible\n        this.cellRanges.forEach((cellRange) => {\n            const beforeCols = cellRange.columns;\n\n            // remove hidden or removed cols from cell range\n            cellRange.columns = cellRange.columns.filter(\n                (col: AgColumn) => col.isVisible() && allColumns.indexOf(col) !== -1\n            );\n\n            const colsInRangeChanged = !_areEqual(beforeCols, cellRange.columns);\n\n            if (colsInRangeChanged) {\n                // notify users and other parts of grid (i.e. status panel) that range has changed\n                this.dispatchChangedEvent(false, true, cellRange.id);\n            }\n        });\n        // Remove empty cell ranges\n        const countBefore = this.cellRanges.length;\n        this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n        if (countBefore > this.cellRanges.length) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n\n    public refreshLastRangeStart(): void {\n        const lastRange = _last(this.cellRanges);\n\n        if (!lastRange) {\n            return;\n        }\n\n        this.refreshRangeStart(lastRange);\n    }\n\n    public isContiguousRange(cellRange: CellRange): boolean {\n        const rangeColumns = cellRange.columns as AgColumn[];\n\n        if (!rangeColumns.length) {\n            return false;\n        }\n\n        const allColumns = this.visibleColsService.getAllCols();\n        const allPositions = rangeColumns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n\n        return _last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n    }\n\n    public getRangeStartRow(cellRange: PartialCellRange): RowPosition {\n        if (cellRange.startRow && cellRange.endRow) {\n            return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow)\n                ? cellRange.startRow\n                : cellRange.endRow;\n        }\n\n        const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? 'top' : null;\n\n        return { rowIndex: 0, rowPinned };\n    }\n\n    public getRangeEndRow(cellRange: PartialCellRange): RowPosition {\n        if (cellRange.startRow && cellRange.endRow) {\n            return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow)\n                ? cellRange.endRow\n                : cellRange.startRow;\n        }\n\n        const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedBottom = pinnedBottomRowCount > 0;\n\n        if (pinnedBottom) {\n            return {\n                rowIndex: pinnedBottomRowCount - 1,\n                rowPinned: 'bottom',\n            };\n        }\n\n        return {\n            rowIndex: this.rowModel.getRowCount() - 1,\n            rowPinned: null,\n        };\n    }\n\n    public setRangeToCell(cell: CellPosition, appendRange = false): void {\n        if (!this.gos.get('enableRangeSelection')) {\n            return;\n        }\n\n        const columns = this.calculateColumnsBetween(cell.column as AgColumn, cell.column as AgColumn);\n\n        if (!columns) {\n            return;\n        }\n\n        const suppressMultiRangeSelections = this.gos.get('suppressMultiRangeSelection');\n\n        // if not appending, then clear previous range selections\n        if (suppressMultiRangeSelections || !appendRange || _missing(this.cellRanges)) {\n            this.removeAllCellRanges(true);\n        }\n\n        const rowForCell: RowPosition = {\n            rowIndex: cell.rowIndex,\n            rowPinned: cell.rowPinned,\n        };\n\n        const cellRange = {\n            startRow: rowForCell,\n            endRow: rowForCell,\n            columns,\n            startColumn: cell.column,\n        };\n\n        this.cellRanges.push(cellRange);\n\n        this.setNewestRangeStartCell(cell);\n        this.onDragStop();\n        this.dispatchChangedEvent(true, true);\n    }\n\n    public extendLatestRangeToCell(cellPosition: CellPosition): void {\n        if (this.isEmpty() || !this.newestRangeStartCell) {\n            return;\n        }\n\n        const cellRange = _last(this.cellRanges);\n\n        this.updateRangeEnd(cellRange, cellPosition);\n    }\n\n    public updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent = false): void {\n        const endColumn = cellPosition.column as AgColumn;\n        const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn as AgColumn, endColumn);\n\n        if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n            return;\n        }\n\n        cellRange.columns = colsToAdd;\n        cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n\n        if (!silent) {\n            this.dispatchChangedEvent(true, true, cellRange.id);\n        }\n    }\n\n    private refreshRangeStart(cellRange: CellRange) {\n        const { startColumn, columns } = cellRange;\n\n        const moveColInCellRange = (colToMove: AgColumn, moveToFront: boolean) => {\n            const otherCols = cellRange.columns.filter((col) => col !== colToMove);\n\n            if (colToMove) {\n                cellRange.startColumn = colToMove;\n                cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n            } else {\n                cellRange.columns = otherCols;\n            }\n        };\n\n        const { left, right } = this.getRangeEdgeColumns(cellRange);\n        const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n\n        if (shouldMoveLeftCol) {\n            moveColInCellRange(left, true);\n            return;\n        }\n\n        const shouldMoveRightCol = startColumn === _last(columns) && startColumn === right;\n\n        if (shouldMoveRightCol) {\n            moveColInCellRange(right, false);\n            return;\n        }\n    }\n\n    public getRangeEdgeColumns(cellRange: CellRange): { left: AgColumn; right: AgColumn } {\n        const allColumns = this.visibleColsService.getAllCols();\n        const allIndices = cellRange.columns\n            .map((c: AgColumn) => allColumns.indexOf(c))\n            .filter((i) => i > -1)\n            .sort((a, b) => a - b);\n\n        return {\n            left: allColumns[allIndices[0]],\n            right: allColumns[_last(allIndices)!],\n        };\n    }\n\n    // returns true if successful, false if not successful\n    public extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined {\n        if (this.isEmpty() || !this.newestRangeStartCell) {\n            return;\n        }\n\n        const key = event.key;\n        const ctrlKey = event.ctrlKey || event.metaKey;\n\n        const lastRange = _last(this.cellRanges)!;\n        const startCell = this.newestRangeStartCell;\n        const firstCol = lastRange.columns[0];\n        const lastCol = _last(lastRange.columns)!;\n\n        // find the cell that is at the furthest away corner from the starting cell\n        const endCellIndex = lastRange.endRow!.rowIndex;\n        const endCellFloating = lastRange.endRow!.rowPinned;\n        const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n\n        const endCell: CellPosition = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n        const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n\n        // if user is at end of grid, so no cell to extend to, we return false\n        if (!newEndCell) {\n            return;\n        }\n\n        this.setCellRange({\n            rowStartIndex: startCell.rowIndex,\n            rowStartPinned: startCell.rowPinned,\n            rowEndIndex: newEndCell.rowIndex,\n            rowEndPinned: newEndCell.rowPinned,\n            columnStart: startCell.column,\n            columnEnd: newEndCell.column,\n        });\n\n        return newEndCell;\n    }\n\n    public setCellRange(params: CellRangeParams): void {\n        if (!this.gos.get('enableRangeSelection')) {\n            return;\n        }\n\n        this.removeAllCellRanges(true);\n        this.addCellRange(params);\n    }\n\n    public setCellRanges(cellRanges: CellRange[]): void {\n        if (_shallowCompare(this.cellRanges, cellRanges)) {\n            return;\n        }\n\n        this.removeAllCellRanges(true);\n\n        cellRanges.forEach((newRange) => {\n            if (newRange.columns && newRange.startRow) {\n                this.setNewestRangeStartCell({\n                    rowIndex: newRange.startRow.rowIndex,\n                    rowPinned: newRange.startRow.rowPinned,\n                    column: newRange.columns[0],\n                });\n            }\n\n            this.cellRanges.push(newRange);\n        });\n\n        this.dispatchChangedEvent(false, true);\n    }\n\n    private setNewestRangeStartCell(position: CellPosition) {\n        this.newestRangeStartCell = position;\n    }\n\n    public clearCellRangeCellValues(params: ClearCellRangeParams): void {\n        let { cellRanges } = params;\n        const { cellEventSource = 'rangeService', dispatchWrapperEvents, wrapperEventSource = 'deleteKey' } = params;\n\n        if (dispatchWrapperEvents) {\n            const startEvent: WithoutGridCommon<RangeDeleteStartEvent> = {\n                type: 'rangeDeleteStart',\n                source: wrapperEventSource,\n            };\n            this.eventService.dispatchEvent(startEvent);\n        }\n\n        if (!cellRanges) {\n            cellRanges = this.cellRanges;\n        }\n\n        cellRanges.forEach((cellRange) => {\n            this.forEachRowInRange(cellRange, (rowPosition) => {\n                const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n                if (!rowNode) {\n                    return;\n                }\n                for (let i = 0; i < cellRange.columns.length; i++) {\n                    const column = this.columnModel.getCol(cellRange.columns[i]);\n                    if (!column || !column.isCellEditable(rowNode)) {\n                        continue;\n                    }\n                    const emptyValue =\n                        this.valueService.parseValue(column, rowNode, '', rowNode.getValueFromValueService(column)) ??\n                        null;\n                    rowNode.setDataValue(column, emptyValue, cellEventSource);\n                }\n            });\n        });\n\n        if (dispatchWrapperEvents) {\n            const endEvent: WithoutGridCommon<RangeDeleteEndEvent> = {\n                type: 'rangeDeleteEnd',\n                source: wrapperEventSource,\n            };\n            this.eventService.dispatchEvent(endEvent);\n        }\n    }\n\n    public createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined {\n        return this.createPartialCellRangeFromRangeParams(params, false) as CellRange | undefined;\n    }\n\n    // Range service can't normally support a range without columns, but charts can\n    public createPartialCellRangeFromRangeParams(\n        params: CellRangeParams,\n        allowEmptyColumns: boolean\n    ): PartialCellRange | undefined {\n        let columns: AgColumn[] | undefined;\n        let startsOnTheRight: boolean = false;\n\n        if (params.columns) {\n            columns = params.columns.map((c) => this.columnModel.getCol(c)!).filter((c) => c);\n        } else {\n            const columnStart = this.columnModel.getCol(params.columnStart);\n            const columnEnd = this.columnModel.getCol(params.columnEnd);\n\n            if (!columnStart || !columnEnd) {\n                return;\n            }\n\n            columns = this.calculateColumnsBetween(columnStart, columnEnd);\n\n            if (columns && columns.length) {\n                startsOnTheRight = columns[0] !== columnStart;\n            }\n        }\n\n        if (!columns || (!allowEmptyColumns && columns.length === 0)) {\n            return;\n        }\n\n        const startRow =\n            params.rowStartIndex != null\n                ? {\n                      rowIndex: params.rowStartIndex,\n                      rowPinned: params.rowStartPinned || null,\n                  }\n                : undefined;\n\n        const endRow =\n            params.rowEndIndex != null\n                ? {\n                      rowIndex: params.rowEndIndex,\n                      rowPinned: params.rowEndPinned || null,\n                  }\n                : undefined;\n\n        return {\n            startRow,\n            endRow,\n            columns,\n            startColumn: startsOnTheRight ? _last(columns) : columns[0],\n        };\n    }\n\n    public addCellRange(params: CellRangeParams): void {\n        if (!this.gos.get('enableRangeSelection')) {\n            return;\n        }\n\n        const newRange = this.createCellRangeFromCellRangeParams(params);\n\n        if (newRange) {\n            if (newRange.startRow) {\n                this.setNewestRangeStartCell({\n                    rowIndex: newRange.startRow.rowIndex,\n                    rowPinned: newRange.startRow.rowPinned,\n                    column: newRange.startColumn,\n                });\n            }\n\n            this.cellRanges.push(newRange);\n            this.dispatchChangedEvent(false, true, newRange.id);\n        }\n    }\n\n    public getCellRanges(): CellRange[] {\n        return this.cellRanges;\n    }\n\n    public isEmpty(): boolean {\n        return this.cellRanges.length === 0;\n    }\n\n    public isMoreThanOneCell(): boolean {\n        const len = this.cellRanges.length;\n\n        if (len === 0) {\n            return false;\n        }\n        if (len > 1) {\n            return true; // Assumes a cell range must contain at least one cell\n        }\n\n        // only one range, return true if range has more than one\n        const range = this.cellRanges[0];\n        const startRow = this.getRangeStartRow(range);\n        const endRow = this.getRangeEndRow(range);\n\n        return (\n            startRow.rowPinned !== endRow.rowPinned ||\n            startRow.rowIndex !== endRow.rowIndex ||\n            range.columns.length !== 1\n        );\n    }\n\n    public areAllRangesAbleToMerge(): boolean {\n        const rowToColumnMap: Map<string, string[]> = new Map();\n        const len = this.cellRanges.length;\n\n        if (len <= 1) return true;\n\n        this.cellRanges.forEach((range) => {\n            this.forEachRowInRange(range, (row) => {\n                const rowName = `${row.rowPinned || 'normal'}_${row.rowIndex}`;\n                const columns = rowToColumnMap.get(rowName);\n                const currentRangeColIds = range.columns.map((col) => col.getId());\n                if (columns) {\n                    const filteredColumns = currentRangeColIds.filter((col) => columns.indexOf(col) === -1);\n                    columns.push(...filteredColumns);\n                } else {\n                    rowToColumnMap.set(rowName, currentRangeColIds);\n                }\n            });\n        });\n\n        let columnsString: string | undefined;\n\n        for (const val of rowToColumnMap.values()) {\n            const currentValString = val.sort().join();\n            if (columnsString === undefined) {\n                columnsString = currentValString;\n                continue;\n            }\n            if (columnsString !== currentValString) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private forEachRowInRange(cellRange: CellRange, callback: (row: RowPosition) => void) {\n        const topRow = this.getRangeStartRow(cellRange);\n        const bottomRow = this.getRangeEndRow(cellRange);\n        let currentRow: RowPosition | null = topRow;\n\n        while (currentRow) {\n            callback(currentRow);\n\n            if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) {\n                break;\n            }\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    }\n\n    public removeAllCellRanges(silent?: boolean): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        this.onDragStop();\n        this.cellRanges.length = 0;\n\n        if (!silent) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n\n    // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n    // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n    // the selection my mimicking a new mouse event\n    private onBodyScroll(): void {\n        if (this.dragging && this.lastMouseEvent) {\n            this.onDragging(this.lastMouseEvent);\n        }\n    }\n\n    public isCellInAnyRange(cell: CellPosition): boolean {\n        return this.getCellRangeCount(cell) > 0;\n    }\n\n    public isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean {\n        const columnInRange = range.columns !== null && _includes(range.columns, cell.column);\n        const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n\n        return columnInRange && rowInRange;\n    }\n\n    private isLastCellOfRange(cellRange: CellRange, cell: CellPosition): boolean {\n        const { startRow, endRow } = cellRange;\n        const lastRow = this.rowPositionUtils.before(startRow!, endRow!) ? endRow : startRow;\n        const isLastRow = cell.rowIndex === lastRow!.rowIndex && cell.rowPinned === lastRow!.rowPinned;\n        const rangeFirstIndexColumn = cellRange.columns[0];\n        const rangeLastIndexColumn = _last(cellRange.columns);\n        const lastRangeColumn =\n            cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n        const isLastColumn = cell.column === lastRangeColumn;\n\n        return isLastColumn && isLastRow;\n    }\n\n    public isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean {\n        const allColumns = this.visibleColsService.getAllCols();\n        const allPositions = cellRange.columns.map((c: AgColumn) => allColumns.indexOf(c)).sort((a, b) => a - b);\n        const { startRow, endRow } = cellRange;\n        const lastRow = this.rowPositionUtils.before(startRow!, endRow!) ? endRow : startRow;\n\n        const isRightColumn = allColumns.indexOf(cell.column as AgColumn) === _last(allPositions);\n        const isLastRow =\n            cell.rowIndex === lastRow!.rowIndex && _makeNull(cell.rowPinned) === _makeNull(lastRow!.rowPinned);\n\n        return isRightColumn && isLastRow;\n    }\n\n    // returns the number of ranges this cell is in\n    public getCellRangeCount(cell: CellPosition): number {\n        if (this.isEmpty()) {\n            return 0;\n        }\n\n        return this.cellRanges.filter((cellRange) => this.isCellInSpecificRange(cell, cellRange)).length;\n    }\n\n    private isRowInRange(rowIndex: number, rowPinned: RowPinnedType, cellRange: CellRange): boolean {\n        const firstRow = this.getRangeStartRow(cellRange);\n        const lastRow = this.getRangeEndRow(cellRange);\n        const thisRow: RowPosition = { rowIndex, rowPinned: rowPinned || null };\n\n        // compare rowPinned with == instead of === because it can be `null` or `undefined`\n        const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n        const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n\n        if (equalsFirstRow || equalsLastRow) {\n            return true;\n        }\n\n        const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n        const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n\n        return afterFirstRow && beforeLastRow;\n    }\n\n    public getDraggingRange(): CellRange | undefined {\n        return this.draggingRange;\n    }\n\n    public onDragStart(mouseEvent: MouseEvent): void {\n        if (!this.gos.get('enableRangeSelection')) {\n            return;\n        }\n\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n\n        // ctrlKey for windows, metaKey for Apple\n        const isMultiKey = ctrlKey || metaKey;\n        const allowMulti = !this.gos.get('suppressMultiRangeSelection');\n        const isMultiSelect = allowMulti ? isMultiKey : false;\n        const extendRange = shiftKey && _existsAndNotEmpty(this.cellRanges);\n\n        if (!isMultiSelect && (!extendRange || _exists(_last(this.cellRanges)!.type))) {\n            this.removeAllCellRanges(true);\n        }\n\n        // The browser changes the Event target of cached events when working with the ShadowDOM\n        // so we need to retrieve the initial DragStartTarget.\n        const startTarget = this.dragService.getStartTarget();\n\n        if (startTarget) {\n            this.updateValuesOnMove(startTarget);\n        }\n\n        if (!this.lastCellHovered) {\n            return;\n        }\n\n        this.dragging = true;\n        this.lastMouseEvent = mouseEvent;\n        this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n\n        if (!extendRange) {\n            this.setNewestRangeStartCell(this.lastCellHovered);\n        }\n\n        // if we didn't clear the ranges, then dragging means the user clicked, and when the\n        // user clicks it means a range of one cell was created. we need to extend this range\n        // rather than creating another range. otherwise we end up with two distinct ranges\n        // from a drag operation (one from click, and one from drag).\n        if (this.cellRanges.length > 0) {\n            this.draggingRange = _last(this.cellRanges);\n        } else {\n            const mouseRowPosition: RowPosition = {\n                rowIndex: this.lastCellHovered.rowIndex,\n                rowPinned: this.lastCellHovered.rowPinned,\n            };\n\n            this.draggingRange = {\n                startRow: mouseRowPosition,\n                endRow: mouseRowPosition,\n                columns: [this.lastCellHovered.column],\n                startColumn: this.newestRangeStartCell!.column,\n            };\n\n            this.cellRanges.push(this.draggingRange);\n        }\n\n        this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n\n        this.dispatchChangedEvent(true, false, this.draggingRange.id);\n    }\n\n    public intersectLastRange(fromMouseClick?: boolean) {\n        // when ranges are created due to a mouse click without drag (happens in cellMouseListener)\n        // this method will be called with `fromMouseClick=true`.\n        if (fromMouseClick && this.dragging) {\n            return;\n        }\n        if (this.gos.get('suppressMultiRangeSelection')) {\n            return;\n        }\n        if (this.isEmpty()) {\n            return;\n        }\n        const rowPosUtils = this.rowPositionUtils;\n        const lastRange = _last(this.cellRanges);\n\n        const intersectionStartRow = this.getRangeStartRow(lastRange);\n        const intersectionEndRow = this.getRangeEndRow(lastRange);\n\n        const newRanges: CellRange[] = [];\n\n        this.cellRanges.slice(0, -1).forEach((range) => {\n            const startRow = this.getRangeStartRow(range);\n            const endRow = this.getRangeEndRow(range);\n            const cols = range.columns;\n            const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n            if (intersectCols.length === cols.length) {\n                // No overlapping columns, retain previous range\n                newRanges.push(range);\n                return;\n            }\n            if (rowPosUtils.before(intersectionEndRow, startRow) || rowPosUtils.before(endRow, intersectionStartRow)) {\n                // No overlapping rows, retain previous range\n                newRanges.push(range);\n                return;\n            }\n            const rangeCountBefore = newRanges.length;\n            // Top\n            if (rowPosUtils.before(startRow, intersectionStartRow)) {\n                const top: CellRange = {\n                    columns: [...cols],\n                    startColumn: lastRange.startColumn,\n                    startRow: { ...startRow },\n                    endRow: this.cellNavigationService.getRowAbove(intersectionStartRow)!,\n                };\n                newRanges.push(top);\n            }\n            // Left & Right (not contiguous with columns)\n            if (intersectCols.length > 0) {\n                const middle: CellRange = {\n                    columns: intersectCols,\n                    startColumn: _includes(intersectCols, lastRange.startColumn)\n                        ? lastRange.startColumn\n                        : intersectCols[0],\n                    startRow: this.rowMax([{ ...intersectionStartRow }, { ...startRow }]),\n                    endRow: this.rowMin([{ ...intersectionEndRow }, { ...endRow }]),\n                };\n                newRanges.push(middle);\n            }\n            // Bottom\n            if (rowPosUtils.before(intersectionEndRow, endRow)) {\n                newRanges.push({\n                    columns: [...cols],\n                    startColumn: lastRange.startColumn,\n                    startRow: this.cellNavigationService.getRowBelow(intersectionEndRow)!,\n                    endRow: { ...endRow },\n                });\n            }\n            if (newRanges.length - rangeCountBefore === 1) {\n                // Only one range result from the intersection.\n                // Copy the source range's id, since essentially we just reduced it's size\n                newRanges[newRanges.length - 1].id = range.id;\n            }\n        });\n        this.cellRanges = newRanges;\n\n        // when this is called because of a clickEvent and the ranges were changed\n        // we need to force a dragEnd event to update the UI.\n        if (fromMouseClick) {\n            this.dispatchChangedEvent(false, true);\n        }\n    }\n\n    private rowMax(rows: RowPosition[]): RowPosition | undefined {\n        let max: RowPosition | undefined;\n        rows.forEach((row) => {\n            if (max === undefined || this.rowPositionUtils.before(max, row)) {\n                max = row;\n            }\n        });\n        return max;\n    }\n\n    private rowMin(rows: RowPosition[]): RowPosition | undefined {\n        let min: RowPosition | undefined;\n        rows.forEach((row) => {\n            if (min === undefined || this.rowPositionUtils.before(row, min)) {\n                min = row;\n            }\n        });\n        return min;\n    }\n\n    private updateValuesOnMove(eventTarget: EventTarget | null) {\n        const cellCtrl = _getCtrlForEventTarget<CellCtrl>(this.gos, eventTarget, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const cell = cellCtrl?.getCellPosition();\n\n        this.cellHasChanged = false;\n\n        if (!cell || (this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered))) {\n            return;\n        }\n\n        if (this.lastCellHovered) {\n            this.cellHasChanged = true;\n        }\n\n        this.lastCellHovered = cell;\n    }\n\n    public onDragging(mouseEvent: MouseEvent | null): void {\n        if (!this.dragging || !mouseEvent) {\n            return;\n        }\n\n        this.updateValuesOnMove(mouseEvent.target);\n\n        this.lastMouseEvent = mouseEvent;\n\n        const cellPosition = this.lastCellHovered!;\n        const isMouseAndStartInPinned = (position: string) =>\n            cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell!.rowPinned === position;\n\n        const skipVerticalScroll = isMouseAndStartInPinned('top') || isMouseAndStartInPinned('bottom');\n\n        this.autoScrollService.check(mouseEvent, skipVerticalScroll!);\n\n        if (!this.cellHasChanged) {\n            return;\n        }\n\n        const columns = this.calculateColumnsBetween(\n            this.newestRangeStartCell!.column as AgColumn,\n            cellPosition.column as AgColumn\n        );\n\n        if (!columns) {\n            return;\n        }\n\n        this.draggingRange!.endRow = {\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned,\n        };\n\n        this.draggingRange!.columns = columns;\n\n        this.dispatchChangedEvent(false, false, this.draggingRange!.id);\n    }\n\n    public onDragStop(): void {\n        if (!this.dragging) {\n            return;\n        }\n\n        const { id } = this.draggingRange!;\n\n        this.autoScrollService.ensureCleared();\n\n        this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n        this.lastMouseEvent = null;\n        this.dragging = false;\n        this.draggingRange = undefined;\n        this.lastCellHovered = undefined;\n\n        if (this.intersectionRange) {\n            this.intersectionRange = false;\n            this.intersectLastRange();\n        }\n\n        this.dispatchChangedEvent(false, true, id);\n    }\n\n    private dispatchChangedEvent(started: boolean, finished: boolean, id?: string): void {\n        const event: WithoutGridCommon<RangeSelectionChangedEvent> = {\n            type: 'rangeSelectionChanged',\n            started,\n            finished,\n            id,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private calculateColumnsBetween(columnFrom: AgColumn, columnTo: AgColumn): AgColumn[] | undefined {\n        const allColumns = this.visibleColsService.getAllCols();\n        const isSameColumn = columnFrom === columnTo;\n        const fromIndex = allColumns.indexOf(columnFrom as AgColumn);\n\n        const logMissing = (column: AgColumn) => _warnOnce(`column ${column.getId()} is not visible`);\n        if (fromIndex < 0) {\n            logMissing(columnFrom);\n            return;\n        }\n\n        const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo as AgColumn);\n\n        if (toIndex < 0) {\n            logMissing(columnTo);\n            return;\n        }\n\n        if (isSameColumn) {\n            return [columnFrom];\n        }\n\n        const firstIndex = Math.min(fromIndex, toIndex);\n        const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n        const columns: AgColumn[] = [];\n\n        for (let i = firstIndex; i <= lastIndex; i++) {\n            columns.push(allColumns[i]);\n        }\n\n        return columns;\n    }\n}\n", "import type { ISelectionHandle, ISelectionHandleFactory, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub, SelectionHandleType } from '@ag-grid-community/core';\n\nimport { AgFillHandle } from './agFillHandle';\nimport { AgRangeHandle } from './agRangeHandle';\n\nexport class SelectionHandleFactory extends BeanStub implements NamedBean, ISelectionHandleFactory {\n    beanName = 'selectionHandleFactory' as const;\n\n    public createSelectionHandle(type: SelectionHandleType): ISelectionHandle {\n        return this.createBean(type === SelectionHandleType.RANGE ? new AgRangeHandle() : new AgFillHandle());\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellCtrl,\n    CellNavigationService,\n    CellPosition,\n    CellRange,\n    FillEndEvent,\n    FillOperationParams,\n    FillStartEvent,\n    NavigationService,\n    RowNode,\n    RowPosition,\n    ValueService,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { SelectionHandleType, _last, _toStringOrNull, _warnOnce } from '@ag-grid-community/core';\n\nimport { AbstractSelectionHandle } from './abstractSelectionHandle';\nimport { findLineByLeastSquares } from './utils';\n\ninterface FillValues {\n    position: CellPosition;\n    value: any;\n}\n\ninterface ValueContext {\n    value: any;\n    column: AgColumn;\n    rowNode: RowNode;\n}\n\ntype Direction = 'x' | 'y';\n\nexport class AgFillHandle extends AbstractSelectionHandle {\n    private valueService: ValueService;\n    private navigationService: NavigationService;\n    private cellNavigationService: CellNavigationService;\n    private visibleColsService: VisibleColsService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.valueService = beans.valueService;\n        this.navigationService = beans.navigationService;\n        this.cellNavigationService = beans.cellNavigationService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private initialPosition: CellPosition | undefined;\n    private initialXY: { x: number; y: number } | null;\n    private lastCellMarked: CellPosition | undefined;\n    private markedCells: CellCtrl[] = [];\n    private cellValues: FillValues[][] = [];\n\n    private dragAxis: Direction;\n    private isUp: boolean = false;\n    private isLeft: boolean = false;\n    private isReduce: boolean = false;\n\n    protected type = SelectionHandleType.FILL;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-fill-handle\"></div>`);\n    }\n\n    protected override updateValuesOnMove(e: MouseEvent) {\n        super.updateValuesOnMove(e);\n\n        if (!this.initialXY) {\n            this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n        }\n\n        const { x, y } = this.initialXY;\n        const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n        const diffX = Math.abs(x - newX);\n        const diffY = Math.abs(y - newY);\n        const allowedDirection = this.getFillHandleDirection();\n        let direction: Direction;\n\n        if (allowedDirection === 'xy') {\n            direction = diffX > diffY ? 'x' : 'y';\n        } else {\n            direction = allowedDirection;\n        }\n\n        if (direction !== this.dragAxis) {\n            this.dragAxis = direction;\n            this.changedCalculatedValues = true;\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected onDrag(_e: MouseEvent) {\n        if (!this.initialPosition) {\n            const cellCtrl = this.getCellCtrl();\n            if (!cellCtrl) {\n                return;\n            }\n\n            this.initialPosition = cellCtrl.getCellPosition();\n        }\n\n        const lastCellHovered = this.getLastCellHovered();\n\n        if (lastCellHovered) {\n            this.markPathFrom(this.initialPosition, lastCellHovered);\n        }\n    }\n\n    protected onDragEnd(e: MouseEvent) {\n        this.initialXY = null;\n        if (!this.markedCells.length) {\n            return;\n        }\n\n        const isX = this.dragAxis === 'x';\n        const initialRange = this.getCellRange();\n        const colLen = initialRange.columns.length;\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n\n        let finalRange: CellRange | undefined;\n\n        if (!this.isUp && !this.isLeft) {\n            finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n                rowStartIndex: rangeStartRow.rowIndex,\n                rowStartPinned: rangeStartRow.rowPinned,\n                columnStart: initialRange.columns[0],\n                rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked!.rowIndex,\n                rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked!.rowPinned,\n                columnEnd: isX ? this.lastCellMarked!.column : initialRange.columns[colLen - 1],\n            });\n        } else {\n            const startRow = isX ? rangeStartRow : this.lastCellMarked;\n\n            finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n                rowStartIndex: startRow!.rowIndex,\n                rowStartPinned: startRow!.rowPinned,\n                columnStart: isX ? this.lastCellMarked!.column : initialRange.columns[0],\n                rowEndIndex: rangeEndRow.rowIndex,\n                rowEndPinned: rangeEndRow.rowPinned,\n                columnEnd: initialRange.columns[colLen - 1],\n            });\n        }\n\n        if (finalRange) {\n            // raising fill events for undo / redo\n            this.raiseFillStartEvent();\n\n            this.handleValueChanged(initialRange, finalRange, e);\n            this.rangeService.setCellRanges([finalRange]);\n\n            this.raiseFillEndEvent(initialRange, finalRange);\n        }\n    }\n\n    private getFillHandleDirection(): 'x' | 'y' | 'xy' {\n        const direction = this.gos.get('fillHandleDirection');\n\n        if (!direction) {\n            return 'xy';\n        }\n\n        if (direction !== 'x' && direction !== 'y' && direction !== 'xy') {\n            _warnOnce(`valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`);\n            return 'xy';\n        }\n\n        return direction;\n    }\n\n    private raiseFillStartEvent() {\n        const fillStartEvent: WithoutGridCommon<FillStartEvent> = {\n            type: 'fillStart',\n        };\n        this.eventService.dispatchEvent(fillStartEvent);\n    }\n\n    private raiseFillEndEvent(initialRange: CellRange, finalRange: CellRange) {\n        const fillEndEvent: WithoutGridCommon<FillEndEvent> = {\n            type: 'fillEnd',\n            initialRange: initialRange,\n            finalRange: finalRange,\n        };\n        this.eventService.dispatchEvent(fillEndEvent);\n    }\n\n    private handleValueChanged(initialRange: CellRange, finalRange: CellRange, e: MouseEvent) {\n        const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n        const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n        const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n        const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n        const isVertical = this.dragAxis === 'y';\n\n        // if the range is being reduced in size, all we need to do is\n        // clear the cells that are no longer part of the range\n        if (this.isReduce && !this.gos.get('suppressClearOnFillReduction')) {\n            const columns = (\n                isVertical\n                    ? initialRange.columns\n                    : initialRange.columns.filter((col) => finalRange.columns.indexOf(col) < 0)\n            ) as AgColumn[];\n\n            const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n\n            if (startRow) {\n                this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n            }\n            return;\n        }\n\n        const values: ValueContext[] = [];\n        const initialValues: any[] = [];\n        const initialNonAggregatedValues: any[] = [];\n        const initialFormattedValues: any[] = [];\n\n        let withinInitialRange = true;\n        let idx = 0;\n\n        const resetValues = () => {\n            values.length = 0;\n            initialValues.length = 0;\n            initialNonAggregatedValues.length = 0;\n            initialFormattedValues.length = 0;\n            idx = 0;\n        };\n\n        const iterateAcrossCells = (column?: AgColumn, columns?: AgColumn[]) => {\n            let currentRow: RowPosition | undefined | null = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n            let finished = false;\n\n            if (isVertical) {\n                withinInitialRange = true;\n                resetValues();\n            }\n\n            while (!finished && currentRow) {\n                const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n                if (!rowNode) {\n                    break;\n                }\n\n                if (isVertical && column) {\n                    fillValues(values, column, rowNode, () => {\n                        return !this.rowPositionUtils.sameRow(\n                            currentRow!,\n                            this.isUp ? initialRangeStartRow : initialRangeEndRow\n                        );\n                    });\n                } else if (columns) {\n                    withinInitialRange = true;\n                    resetValues();\n                    columns.forEach((col) =>\n                        fillValues(\n                            values,\n                            col,\n                            rowNode,\n                            () => col !== (this.isLeft ? initialRange.columns[0] : _last(initialRange.columns))\n                        )\n                    );\n                }\n\n                finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n\n                currentRow = this.isUp\n                    ? this.cellNavigationService.getRowAbove(currentRow)\n                    : this.cellNavigationService.getRowBelow(currentRow);\n            }\n        };\n\n        const fillValues = (\n            currentValues: ValueContext[],\n            col: AgColumn,\n            rowNode: RowNode,\n            updateInitialSet: () => boolean\n        ) => {\n            let currentValue: any;\n            let skipValue: boolean = false;\n\n            if (withinInitialRange) {\n                currentValue = this.valueService.getValue(col, rowNode);\n                initialValues.push(currentValue);\n                initialNonAggregatedValues.push(this.valueService.getValue(col, rowNode, undefined, true));\n                initialFormattedValues.push(this.valueService.formatValue(col, rowNode, currentValue));\n                withinInitialRange = updateInitialSet();\n            } else {\n                const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues({\n                    event: e,\n                    values: currentValues,\n                    initialValues,\n                    initialNonAggregatedValues,\n                    initialFormattedValues,\n                    col,\n                    rowNode,\n                    idx: idx++,\n                });\n\n                currentValue = value;\n                if (col.isCellEditable(rowNode)) {\n                    const cellValue = this.valueService.getValue(col, rowNode);\n\n                    if (!fromUserFunction) {\n                        if (sourceCol && sourceCol.getColDef()?.useValueFormatterForExport !== false) {\n                            currentValue =\n                                this.valueService.formatValue(sourceCol, sourceRowNode!, currentValue) ?? currentValue;\n                        }\n                        if (col.getColDef().useValueParserForImport !== false) {\n                            currentValue = this.valueService.parseValue(\n                                col,\n                                rowNode,\n                                // if no sourceCol, then currentValue is a number\n                                sourceCol ? currentValue : _toStringOrNull(currentValue),\n                                cellValue\n                            );\n                        }\n                    }\n                    if (!fromUserFunction || cellValue !== currentValue) {\n                        rowNode.setDataValue(col, currentValue, 'rangeService');\n                    } else {\n                        skipValue = true;\n                    }\n                }\n            }\n\n            if (!skipValue) {\n                currentValues.push({\n                    value: currentValue,\n                    column: col,\n                    rowNode,\n                });\n            }\n        };\n\n        if (isVertical) {\n            initialRange.columns.forEach((col: AgColumn) => {\n                iterateAcrossCells(col);\n            });\n        } else {\n            const columns = (this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns) as AgColumn[];\n            iterateAcrossCells(undefined, columns);\n        }\n    }\n\n    private clearCellsInRange(startRow: RowPosition, endRow: RowPosition, columns: AgColumn[]) {\n        const cellRange: CellRange = {\n            startRow,\n            endRow,\n            columns,\n            startColumn: columns[0],\n        };\n        this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n    }\n\n    private processValues(params: {\n        event: MouseEvent;\n        values: ValueContext[];\n        initialValues: any[];\n        initialNonAggregatedValues: any[];\n        initialFormattedValues: any[];\n        col: AgColumn;\n        rowNode: RowNode;\n        idx: number;\n    }): { value: any; fromUserFunction: boolean; sourceCol?: AgColumn; sourceRowNode?: RowNode } {\n        const { event, values, initialValues, initialNonAggregatedValues, initialFormattedValues, col, rowNode, idx } =\n            params;\n\n        const userFillOperation = this.gos.getCallback('fillOperation');\n        const isVertical = this.dragAxis === 'y';\n        let direction: 'up' | 'down' | 'left' | 'right';\n\n        if (isVertical) {\n            direction = this.isUp ? 'up' : 'down';\n        } else {\n            direction = this.isLeft ? 'left' : 'right';\n        }\n\n        if (userFillOperation) {\n            const params: WithoutGridCommon<FillOperationParams> = {\n                event,\n                values: values.map(({ value }) => value),\n                initialValues,\n                initialNonAggregatedValues,\n                initialFormattedValues,\n                currentIndex: idx,\n                currentCellValue: this.valueService.getValue(col, rowNode),\n                direction,\n                column: col,\n                rowNode: rowNode,\n            };\n            const userResult = userFillOperation(params);\n            if (userResult !== false) {\n                return { value: userResult, fromUserFunction: true };\n            }\n        }\n\n        const allNumbers = !values.some(({ value }) => {\n            const asFloat = parseFloat(value);\n            return isNaN(asFloat) || asFloat.toString() !== value.toString();\n        });\n\n        // values should be copied in order if the alt key is pressed\n        // or if the values contain strings and numbers\n        // However, if we only have one initial value selected, and that\n        // value is a number and we are also pressing alt, then we should\n        // increment or decrement the value by 1 based on direction.\n        if (event.altKey || !allNumbers) {\n            if (allNumbers && initialValues.length === 1) {\n                const multiplier = this.isUp || this.isLeft ? -1 : 1;\n                return { value: parseFloat(_last(values).value) + 1 * multiplier, fromUserFunction: false };\n            }\n            const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n            return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n        }\n\n        return {\n            value: _last(findLineByLeastSquares(values.map(({ value }) => Number(value)))),\n            fromUserFunction: false,\n        };\n    }\n\n    protected override clearValues() {\n        this.clearMarkedPath();\n        this.clearCellValues();\n\n        this.lastCellMarked = undefined;\n\n        super.clearValues();\n    }\n\n    private clearMarkedPath() {\n        this.markedCells.forEach((cell) => {\n            if (!cell.isAlive()) {\n                return;\n            }\n            const comp = cell.getComp();\n            comp.addOrRemoveCssClass('ag-selection-fill-top', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-right', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-bottom', false);\n            comp.addOrRemoveCssClass('ag-selection-fill-left', false);\n        });\n\n        this.markedCells.length = 0;\n\n        this.isUp = false;\n        this.isLeft = false;\n        this.isReduce = false;\n    }\n\n    private clearCellValues() {\n        this.cellValues.length = 0;\n    }\n\n    private markPathFrom(initialPosition: CellPosition, currentPosition: CellPosition) {\n        this.clearMarkedPath();\n        this.clearCellValues();\n\n        if (this.dragAxis === 'y') {\n            if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n                return;\n            }\n\n            const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n            const rangeStartRow = this.getRangeStartRow();\n            const rangeEndRow = this.getRangeEndRow();\n\n            if (\n                isBefore &&\n                ((currentPosition.rowPinned == rangeStartRow.rowPinned &&\n                    currentPosition.rowIndex >= rangeStartRow.rowIndex) ||\n                    (rangeStartRow.rowPinned != rangeEndRow.rowPinned &&\n                        currentPosition.rowPinned == rangeEndRow.rowPinned &&\n                        currentPosition.rowIndex <= rangeEndRow.rowIndex))\n            ) {\n                this.reduceVertical(initialPosition, currentPosition);\n                this.isReduce = true;\n            } else {\n                this.extendVertical(initialPosition, currentPosition, isBefore);\n                this.isReduce = false;\n            }\n        } else {\n            const initialColumn = initialPosition.column as AgColumn;\n            const currentColumn = currentPosition.column as AgColumn;\n\n            if (initialColumn === currentColumn) {\n                return;\n            }\n            const displayedColumns = this.visibleColsService.getAllCols();\n            const initialIndex = displayedColumns.indexOf(initialColumn);\n            const currentIndex = displayedColumns.indexOf(currentColumn);\n\n            if (\n                currentIndex <= initialIndex &&\n                currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0] as AgColumn)\n            ) {\n                this.reduceHorizontal(initialPosition, currentPosition);\n                this.isReduce = true;\n            } else {\n                this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n                this.isReduce = false;\n            }\n        }\n        this.lastCellMarked = currentPosition;\n    }\n\n    private extendVertical(initialPosition: CellPosition, endPosition: CellPosition, isMovingUp?: boolean) {\n        const { navigationService, rangeService } = this;\n\n        let row: RowPosition | null = initialPosition;\n\n        do {\n            const cellRange = this.getCellRange();\n            const colLen = cellRange.columns.length;\n\n            for (let i = 0; i < colLen; i++) {\n                const column = cellRange.columns[i];\n                const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n                const cellPos = { ...rowPos, column };\n                const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n                const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n\n                if (isMovingUp) {\n                    this.isUp = true;\n                }\n\n                if (!isInitialRow) {\n                    const cell = navigationService.getCellByPosition(cellPos);\n\n                    if (cell) {\n                        this.markedCells.push(cell);\n                        const cellCtrl = cell.getComp();\n\n                        if (!cellInRange) {\n                            cellCtrl.addOrRemoveCssClass('ag-selection-fill-left', i === 0);\n                            cellCtrl.addOrRemoveCssClass('ag-selection-fill-right', i === colLen - 1);\n                        }\n\n                        cellCtrl.addOrRemoveCssClass(\n                            isMovingUp ? 'ag-selection-fill-top' : 'ag-selection-fill-bottom',\n                            this.rowPositionUtils.sameRow(row, endPosition)\n                        );\n                    }\n                }\n            }\n\n            if (this.rowPositionUtils.sameRow(row, endPosition)) {\n                break;\n            }\n        } while (\n            // tslint:disable-next-line\n            (row = isMovingUp\n                ? this.cellNavigationService.getRowAbove(row)\n                : this.cellNavigationService.getRowBelow(row))\n        );\n    }\n\n    private reduceVertical(initialPosition: CellPosition, endPosition: CellPosition) {\n        let row: RowPosition | null = initialPosition;\n\n        do {\n            const cellRange = this.getCellRange();\n            const colLen = cellRange.columns.length;\n            const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n\n            for (let i = 0; i < colLen; i++) {\n                const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n                const celPos = { ...rowPos, column: cellRange.columns[i] };\n                const cell = this.navigationService.getCellByPosition(celPos);\n\n                if (cell) {\n                    this.markedCells.push(cell);\n\n                    const cellComp = cell.getComp();\n\n                    cellComp.addOrRemoveCssClass(\n                        'ag-selection-fill-bottom',\n                        this.rowPositionUtils.sameRow(row, endPosition)\n                    );\n                }\n            }\n            if (isLastRow) {\n                break;\n            }\n            // tslint:disable-next-line\n        } while ((row = this.cellNavigationService.getRowAbove(row)));\n    }\n\n    private extendHorizontal(initialPosition: CellPosition, endPosition: CellPosition, isMovingLeft?: boolean) {\n        const allCols = this.visibleColsService.getAllCols();\n        const startCol = allCols.indexOf((isMovingLeft ? endPosition.column : initialPosition.column) as AgColumn);\n        const endCol = allCols.indexOf(\n            (isMovingLeft ? this.getCellRange().columns[0] : endPosition.column) as AgColumn\n        );\n        const offset = isMovingLeft ? 0 : 1;\n\n        const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n\n        colsToMark.forEach((column) => {\n            let row: RowPosition = rangeStartRow;\n            let isLastRow = false;\n\n            do {\n                isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n                const cell = this.navigationService.getCellByPosition({\n                    rowIndex: row.rowIndex,\n                    rowPinned: row.rowPinned,\n                    column: column,\n                });\n\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n\n                    cellComp.addOrRemoveCssClass(\n                        'ag-selection-fill-top',\n                        this.rowPositionUtils.sameRow(row, rangeStartRow)\n                    );\n                    cellComp.addOrRemoveCssClass(\n                        'ag-selection-fill-bottom',\n                        this.rowPositionUtils.sameRow(row, rangeEndRow)\n                    );\n                    if (isMovingLeft) {\n                        this.isLeft = true;\n                        cellComp.addOrRemoveCssClass('ag-selection-fill-left', column === colsToMark[0]);\n                    } else {\n                        cellComp.addOrRemoveCssClass('ag-selection-fill-right', column === _last(colsToMark));\n                    }\n                }\n\n                row = this.cellNavigationService.getRowBelow(row)!;\n            } while (!isLastRow);\n        });\n    }\n\n    private reduceHorizontal(initialPosition: CellPosition, endPosition: CellPosition) {\n        const allCols = this.visibleColsService.getAllCols();\n        const startCol = allCols.indexOf(endPosition.column as AgColumn);\n        const endCol = allCols.indexOf(initialPosition.column as AgColumn);\n\n        const colsToMark = allCols.slice(startCol, endCol);\n        const rangeStartRow = this.getRangeStartRow();\n        const rangeEndRow = this.getRangeEndRow();\n\n        colsToMark.forEach((column) => {\n            let row: RowPosition = rangeStartRow;\n            let isLastRow: boolean = false;\n\n            do {\n                isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n                const cell = this.navigationService.getCellByPosition({\n                    rowIndex: row.rowIndex,\n                    rowPinned: row.rowPinned,\n                    column: column,\n                });\n\n                if (cell) {\n                    this.markedCells.push(cell);\n                    const cellComp = cell.getComp();\n                    cellComp.addOrRemoveCssClass('ag-selection-fill-right', column === colsToMark[0]);\n                }\n\n                row = this.cellNavigationService.getRowBelow(row)!;\n            } while (!isLastRow);\n        });\n    }\n\n    public override refresh(cellCtrl: CellCtrl) {\n        const cellRange = this.rangeService.getCellRanges()[0];\n        const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n\n        if (isColumnRange) {\n            this.destroy();\n            return;\n        }\n\n        super.refresh(cellCtrl);\n    }\n}\n", "import type {\n    BeanCollection,\n    CellCtrl,\n    CellPosition,\n    CellPositionUtils,\n    CellRange,\n    CtrlsService,\n    DragService,\n    ISelectionHandle,\n    MouseEventService,\n    RowPosition,\n    RowPositionUtils,\n} from '@ag-grid-community/core';\nimport { Component, SelectionHandleType, _isVisible, _last, _setDisplayed } from '@ag-grid-community/core';\n\nimport type { RangeService } from './rangeService';\n\nexport abstract class AbstractSelectionHandle extends Component implements ISelectionHandle {\n    protected dragService: DragService;\n    protected rangeService: RangeService;\n    protected mouseEventService: MouseEventService;\n    protected rowPositionUtils: RowPositionUtils;\n    protected cellPositionUtils: CellPositionUtils;\n    protected ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.dragService = beans.dragService;\n        this.rangeService = beans.rangeService as RangeService;\n        this.mouseEventService = beans.mouseEventService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private cellCtrl: CellCtrl;\n    private cellRange: CellRange;\n\n    private rangeStartRow: RowPosition;\n    private rangeEndRow: RowPosition;\n\n    private cellHoverListener: (() => void) | undefined;\n    private lastCellHovered: CellPosition | null | undefined;\n    protected changedCalculatedValues: boolean = false;\n    private dragging: boolean = false;\n\n    protected abstract type: SelectionHandleType;\n    protected shouldDestroyOnEndDragging: boolean = false;\n\n    public postConstruct() {\n        this.dragService.addDragSource({\n            dragStartPixels: 0,\n            eElement: this.getGui(),\n            onDragStart: this.onDragStart.bind(this),\n            onDragging: (e: MouseEvent | Touch) => {\n                this.dragging = true;\n                this.rangeService.autoScrollService.check(e as MouseEvent);\n\n                if (this.changedCalculatedValues) {\n                    this.onDrag(e);\n                    this.changedCalculatedValues = false;\n                }\n            },\n            onDragStop: (e: MouseEvent | Touch) => {\n                this.dragging = false;\n                this.onDragEnd(e);\n                this.clearValues();\n                this.rangeService.autoScrollService.ensureCleared();\n\n                // TODO: this causes a bug where if there are multiple grids in the same page, all of them will\n                // be affected by a drag on any. Move it to the root element.\n                document.body.classList.remove(this.getDraggingCssClass());\n\n                if (this.shouldDestroyOnEndDragging) {\n                    this.destroy();\n                }\n            },\n        });\n\n        this.addManagedElementListeners(this.getGui(), { mousedown: this.preventRangeExtension.bind(this) });\n    }\n\n    protected abstract onDrag(e: MouseEvent | Touch): void;\n    protected abstract onDragEnd(e: MouseEvent | Touch): void;\n\n    protected isDragging(): boolean {\n        return this.dragging;\n    }\n\n    protected getCellCtrl(): CellCtrl | undefined {\n        return this.cellCtrl;\n    }\n\n    protected setCellCtrl(cellComp: CellCtrl) {\n        this.cellCtrl = cellComp;\n    }\n\n    protected getCellRange(): CellRange {\n        return this.cellRange;\n    }\n\n    protected setCellRange(range: CellRange) {\n        this.cellRange = range;\n    }\n\n    protected getRangeStartRow(): RowPosition {\n        return this.rangeStartRow;\n    }\n\n    protected setRangeStartRow(row: RowPosition) {\n        this.rangeStartRow = row;\n    }\n\n    protected getRangeEndRow(): RowPosition {\n        return this.rangeEndRow;\n    }\n\n    protected setRangeEndRow(row: RowPosition) {\n        this.rangeEndRow = row;\n    }\n\n    protected getLastCellHovered(): CellPosition | null | undefined {\n        return this.lastCellHovered;\n    }\n\n    private preventRangeExtension(e: MouseEvent) {\n        e.stopPropagation();\n    }\n\n    protected onDragStart(e: MouseEvent) {\n        [this.cellHoverListener] = this.addManagedElementListeners(this.ctrlsService.get('gridCtrl').getGui(), {\n            mousemove: this.updateValuesOnMove.bind(this),\n        });\n\n        document.body.classList.add(this.getDraggingCssClass());\n    }\n\n    private getDraggingCssClass(): string {\n        return `ag-dragging-${this.type === SelectionHandleType.FILL ? 'fill' : 'range'}-handle`;\n    }\n\n    protected updateValuesOnMove(e: MouseEvent) {\n        const cell = this.mouseEventService.getCellPositionForEvent(e);\n\n        if (!cell || (this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered))) {\n            return;\n        }\n\n        this.lastCellHovered = cell;\n        this.changedCalculatedValues = true;\n    }\n\n    public getType(): SelectionHandleType {\n        return this.type;\n    }\n\n    public refresh(cellCtrl: CellCtrl) {\n        const oldCellComp = this.getCellCtrl();\n        const eGui = this.getGui();\n\n        const cellRange = _last(this.rangeService.getCellRanges());\n\n        const start = cellRange.startRow;\n        const end = cellRange.endRow;\n\n        if (start && end) {\n            const isBefore = this.rowPositionUtils.before(end, start);\n\n            if (isBefore) {\n                this.setRangeStartRow(end);\n                this.setRangeEndRow(start);\n            } else {\n                this.setRangeStartRow(start);\n                this.setRangeEndRow(end);\n            }\n        }\n\n        if (oldCellComp !== cellCtrl || !_isVisible(eGui)) {\n            this.setCellCtrl(cellCtrl);\n            const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n            if (eParentOfValue) {\n                eParentOfValue.appendChild(eGui);\n            }\n        }\n\n        this.setCellRange(cellRange);\n    }\n\n    protected clearValues() {\n        this.lastCellHovered = undefined;\n        this.removeListeners();\n    }\n\n    private removeListeners() {\n        if (this.cellHoverListener) {\n            this.cellHoverListener();\n            this.cellHoverListener = undefined;\n        }\n    }\n\n    public override destroy() {\n        if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n            _setDisplayed(this.getGui(), false);\n            this.shouldDestroyOnEndDragging = true;\n            return;\n        }\n\n        this.shouldDestroyOnEndDragging = false;\n\n        super.destroy();\n        this.removeListeners();\n\n        const eGui = this.getGui();\n\n        if (eGui.parentElement) {\n            eGui.parentElement.removeChild(eGui);\n        }\n    }\n}\n", "export function findLineByLeastSquares(values: number[]) {\n    const len = values.length;\n    let maxDecimals = 0;\n\n    if (len <= 1) {\n        return values;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        const splitExponent = value.toString().split('e-');\n\n        if (splitExponent.length > 1) {\n            maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n            continue;\n        }\n\n        if (Math.floor(value) === value) {\n            continue;\n        }\n\n        maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n    }\n\n    let sum_x = 0;\n    let sum_y = 0;\n    let sum_xy = 0;\n    let sum_xx = 0;\n\n    let y = 0;\n\n    for (let x = 0; x < len; x++) {\n        y = values[x];\n        sum_x += x;\n        sum_y += y;\n        sum_xx += x * x;\n        sum_xy += x * y;\n    }\n\n    const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n    const b = sum_y / len - (m * sum_x) / len;\n\n    const result: number[] = [];\n\n    for (let x = 0; x <= len; x++) {\n        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n    }\n\n    return result;\n}\n", "import type { CellPosition, CellRange } from '@ag-grid-community/core';\nimport { CellRangeType, SelectionHandleType, _last } from '@ag-grid-community/core';\n\nimport { AbstractSelectionHandle } from './abstractSelectionHandle';\n\nexport class AgRangeHandle extends AbstractSelectionHandle {\n    protected type = SelectionHandleType.RANGE;\n    private endPosition: CellPosition;\n    private rangeFixed: boolean = false;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-range-handle\"></div>`);\n    }\n\n    protected onDrag(e: MouseEvent) {\n        const lastCellHovered = this.getLastCellHovered();\n\n        if (!lastCellHovered) {\n            return;\n        }\n\n        const cellRanges = this.rangeService.getCellRanges();\n        const lastRange = _last(cellRanges);\n\n        if (!this.rangeFixed) {\n            this.fixRangeStartEnd(lastRange);\n            this.rangeFixed = true;\n        }\n\n        this.endPosition = {\n            rowIndex: lastCellHovered.rowIndex,\n            rowPinned: lastCellHovered.rowPinned,\n            column: lastCellHovered.column,\n        };\n\n        // check if the cell ranges are for a chart\n        if (\n            cellRanges.length === 2 &&\n            cellRanges[0].type === CellRangeType.DIMENSION &&\n            lastRange.type === CellRangeType.VALUE\n        ) {\n            const rowChanged = !this.rowPositionUtils.sameRow(\n                this.endPosition,\n                this.rangeService.getRangeEndRow(lastRange)\n            );\n\n            if (rowChanged) {\n                // ensure the dimension range is kept in sync with the value range (which has the handle)\n                this.rangeService.updateRangeEnd(\n                    cellRanges[0],\n                    {\n                        ...this.endPosition,\n                        column: cellRanges[0].columns[0],\n                    },\n                    true\n                );\n            }\n        }\n\n        this.rangeService.extendLatestRangeToCell(this.endPosition);\n    }\n\n    protected onDragEnd(e: MouseEvent) {\n        const cellRange = _last(this.rangeService.getCellRanges())!;\n\n        this.fixRangeStartEnd(cellRange);\n        this.rangeFixed = false;\n    }\n\n    private fixRangeStartEnd(cellRange: CellRange): void {\n        const startRow = this.rangeService.getRangeStartRow(cellRange);\n        const endRow = this.rangeService.getRangeEndRow(cellRange);\n        const column = cellRange.columns[0];\n\n        cellRange.startRow = startRow;\n        cellRange.endRow = endRow;\n        cellRange.startColumn = column;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport {\n    copySelectedRangeDown,\n    copySelectedRangeToClipboard,\n    copySelectedRowsToClipboard,\n    copyToClipboard,\n    cutToClipboard,\n    pasteFromClipboard,\n} from './clipboard/clipboardApi';\nimport { ClipboardService } from './clipboard/clipboardService';\nimport { VERSION } from './version';\n\nexport const ClipboardCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ClipboardModule}-core`,\n    beans: [ClipboardService],\n    dependantModules: [EnterpriseCoreModule, CsvExportModule],\n};\n\nexport const ClipboardApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ClipboardModule}-api`,\n    apiFunctions: {\n        copyToClipboard,\n        cutToClipboard,\n        copySelectedRowsToClipboard,\n        copySelectedRangeToClipboard,\n        copySelectedRangeDown,\n        pasteFromClipboard,\n    },\n    dependantModules: [ClipboardCoreModule],\n};\n\nexport const ClipboardModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ClipboardModule,\n    dependantModules: [ClipboardCoreModule, ClipboardApiModule],\n};\n", "import type { BeanCollection, IClipboardCopyParams, IClipboardCopyRowsParams } from '@ag-grid-community/core';\n\nexport function copyToClipboard(beans: BeanCollection, params?: IClipboardCopyParams) {\n    beans.clipboardService?.copyToClipboard(params);\n}\n\nexport function cutToClipboard(beans: BeanCollection, params?: IClipboardCopyParams) {\n    beans.clipboardService?.cutToClipboard(params);\n}\n\nexport function copySelectedRowsToClipboard(beans: BeanCollection, params?: IClipboardCopyRowsParams): void {\n    beans.clipboardService?.copySelectedRowsToClipboard(params);\n}\n\nexport function copySelectedRangeToClipboard(beans: BeanCollection, params?: IClipboardCopyParams): void {\n    beans.clipboardService?.copySelectedRangeToClipboard(params);\n}\n\nexport function copySelectedRangeDown(beans: BeanCollection): void {\n    beans.clipboardService?.copyRangeDown();\n}\n\nexport function pasteFromClipboard(beans: BeanCollection): void {\n    beans.clipboardService?.pasteFromClipboard();\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellNavigationService,\n    CellPosition,\n    CellPositionUtils,\n    CellRange,\n    CsvExportParams,\n    CtrlsService,\n    CutEndEvent,\n    CutStartEvent,\n    FlashCellsEvent,\n    FocusService,\n    FuncColsService,\n    GridCtrl,\n    IClientSideRowModel,\n    IClipboardCopyParams,\n    IClipboardCopyRowsParams,\n    IClipboardService,\n    ICsvCreator,\n    IRangeService,\n    IRowModel,\n    ISelectionService,\n    NamedBean,\n    PasteEndEvent,\n    PasteStartEvent,\n    ProcessCellForExportParams,\n    ProcessRowGroupForExportParams,\n    RowNode,\n    RowPosition,\n    RowPositionUtils,\n    RowRenderer,\n    RowValueChangedEvent,\n    ValueService,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, ChangedPath, _exists, _last, _removeFromArray, _warnOnce } from '@ag-grid-community/core';\n\ninterface RowCallback {\n    (\n        gridRow: RowPosition,\n        rowNode: RowNode | undefined,\n        columns: AgColumn[],\n        rangeIndex: number,\n        isLastRow?: boolean\n    ): void;\n}\n\ninterface ColumnCallback {\n    (columns: AgColumn[]): void;\n}\n\ntype CellsToFlashType = { [key: string]: boolean };\ntype DataForCellRangesType = { data: string; cellsToFlash: CellsToFlashType };\n\n// Matches value in changeDetectionService\nconst SOURCE_PASTE = 'paste';\nconst EXPORT_TYPE_DRAG_COPY = 'dragCopy';\nconst EXPORT_TYPE_CLIPBOARD = 'clipboard';\n\nenum CellClearType {\n    CellRange,\n    SelectedRows,\n    FocusedCell,\n}\n\nconst apiError = (method: string) =>\n    `AG Grid: Unable to use the Clipboard API (navigator.clipboard.${method}()). ` +\n    'The reason why it could not be used has been logged in the previous line. ' +\n    \"For this reason the grid has defaulted to using a workaround which doesn't perform as well. \" +\n    'Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid ' +\n    'property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.';\n\nexport class ClipboardService extends BeanStub implements NamedBean, IClipboardService {\n    beanName = 'clipboardService' as const;\n\n    private csvCreator: ICsvCreator;\n    private selectionService: ISelectionService;\n    private rowModel: IRowModel;\n    private ctrlsService: CtrlsService;\n    private valueService: ValueService;\n    private focusService: FocusService;\n    private rowRenderer: RowRenderer;\n    private visibleColsService: VisibleColsService;\n    private funcColsService: FuncColsService;\n    private cellNavigationService: CellNavigationService;\n    private cellPositionUtils: CellPositionUtils;\n    public rowPositionUtils: RowPositionUtils;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.csvCreator = beans.csvCreator!;\n        this.selectionService = beans.selectionService;\n        this.rowModel = beans.rowModel;\n        this.ctrlsService = beans.ctrlsService;\n        this.valueService = beans.valueService;\n        this.focusService = beans.focusService;\n        this.rowRenderer = beans.rowRenderer;\n        this.visibleColsService = beans.visibleColsService;\n        this.funcColsService = beans.funcColsService;\n        this.cellNavigationService = beans.cellNavigationService;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.rangeService = beans.rangeService;\n    }\n\n    private clientSideRowModel: IClientSideRowModel;\n    private gridCtrl: GridCtrl;\n    private lastPasteOperationTime: number = 0;\n\n    private navigatorApiFailed = false;\n\n    public postConstruct(): void {\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.ctrlsService.whenReady((p) => {\n            this.gridCtrl = p.gridCtrl;\n        });\n    }\n\n    public pasteFromClipboard(): void {\n        // Method 1 - native clipboard API, available in modern chrome browsers\n        const allowNavigator = !this.gos.get('suppressClipboardApi');\n        // Some browsers (Firefox) do not allow Web Applications to read from\n        // the clipboard so verify if not only the ClipboardAPI is available,\n        // but also if the `readText` method is public.\n        if (allowNavigator && !this.navigatorApiFailed && navigator.clipboard && navigator.clipboard.readText) {\n            navigator.clipboard\n                .readText()\n                .then(this.processClipboardData.bind(this))\n                .catch((e) => {\n                    _warnOnce(`${e}\\n${apiError('readText')}`);\n                    this.navigatorApiFailed = true;\n                    this.pasteFromClipboardLegacy();\n                });\n        } else {\n            this.pasteFromClipboardLegacy();\n        }\n    }\n\n    private pasteFromClipboardLegacy(): void {\n        // Method 2 - if modern API fails, the old school hack\n        let defaultPrevented = false;\n        const handlePasteEvent = (e: ClipboardEvent) => {\n            const currentPastOperationTime = new Date().getTime();\n            if (currentPastOperationTime - this.lastPasteOperationTime < 50) {\n                defaultPrevented = true;\n                e.preventDefault();\n            }\n            this.lastPasteOperationTime = currentPastOperationTime;\n        };\n\n        this.executeOnTempElement(\n            (textArea: HTMLTextAreaElement) => {\n                textArea.addEventListener('paste', handlePasteEvent);\n                textArea.focus({ preventScroll: true });\n            },\n            (element: HTMLTextAreaElement) => {\n                const data = element.value;\n                if (!defaultPrevented) {\n                    this.processClipboardData(data);\n                } else {\n                    this.refocusLastFocusedCell();\n                }\n                element.removeEventListener('paste', handlePasteEvent);\n            }\n        );\n    }\n\n    private refocusLastFocusedCell(): void {\n        const focusedCell = this.focusService.getFocusedCell();\n\n        if (focusedCell) {\n            this.focusService.setFocusedCell({\n                rowIndex: focusedCell.rowIndex,\n                column: focusedCell.column,\n                rowPinned: focusedCell.rowPinned,\n                forceBrowserFocus: true,\n            });\n        }\n    }\n\n    private getClipboardDelimiter() {\n        const delimiter = this.gos.get('clipboardDelimiter');\n        return _exists(delimiter) ? delimiter : '\\t';\n    }\n\n    private processClipboardData(data: string): void {\n        if (data == null) {\n            return;\n        }\n\n        let parsedData: string[][] | null = ClipboardService.stringToArray(data, this.getClipboardDelimiter());\n\n        const userFunc = this.gos.getCallback('processDataFromClipboard');\n\n        if (userFunc) {\n            parsedData = userFunc({ data: parsedData });\n        }\n\n        if (parsedData == null) {\n            return;\n        }\n\n        if (this.gos.get('suppressLastEmptyLineOnPaste')) {\n            this.removeLastLineIfBlank(parsedData!);\n        }\n\n        const pasteOperation = (\n            cellsToFlash: any,\n            updatedRowNodes: RowNode[],\n            focusedCell: CellPosition,\n            changedPath: ChangedPath | undefined\n        ) => {\n            const rangeActive = this.rangeService?.isMoreThanOneCell();\n            const pasteIntoRange = rangeActive && !this.hasOnlyOneValueToPaste(parsedData!);\n\n            if (pasteIntoRange) {\n                this.pasteIntoActiveRange(this.rangeService!, parsedData!, cellsToFlash, updatedRowNodes, changedPath);\n            } else {\n                this.pasteStartingFromFocusedCell(parsedData!, cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n            }\n        };\n\n        this.doPasteOperation(pasteOperation);\n    }\n\n    // This will parse a delimited string into an array of arrays.\n    static stringToArray(strData: string, delimiter = ','): string[][] {\n        const data: any[][] = [];\n        const isNewline = (char: string) => char === '\\r' || char === '\\n';\n\n        let insideQuotedField = false;\n\n        if (strData === '') {\n            return [['']];\n        }\n\n        // iterate over each character, keep track of current row and column (of the returned array)\n        for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n            const previousChar = strData[position - 1];\n            const currentChar = strData[position];\n            const nextChar = strData[position + 1];\n            const ensureDataExists = () => {\n                if (!data[row]) {\n                    // create row if it doesn't exist\n                    data[row] = [];\n                }\n\n                if (!data[row][column]) {\n                    // create column if it doesn't exist\n                    data[row][column] = '';\n                }\n            };\n\n            ensureDataExists();\n\n            if (currentChar === '\"') {\n                if (insideQuotedField) {\n                    if (nextChar === '\"') {\n                        // unescape double quote\n                        data[row][column] += '\"';\n                        position++;\n                    } else {\n                        // exit quoted field\n                        insideQuotedField = false;\n                    }\n\n                    // continue;\n                } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                    // enter quoted field\n                    insideQuotedField = true;\n                    // continue;\n                }\n            }\n\n            if (!insideQuotedField && currentChar !== '\"') {\n                if (currentChar === delimiter) {\n                    // move to next column\n                    column++;\n                    ensureDataExists();\n\n                    continue;\n                } else if (isNewline(currentChar)) {\n                    // move to next row\n                    column = 0;\n                    row++;\n                    ensureDataExists();\n\n                    if (currentChar === '\\r' && nextChar === '\\n') {\n                        // skip over second newline character if it exists\n                        position++;\n                    }\n\n                    continue;\n                }\n            }\n\n            // add current character to current column\n            data[row][column] += currentChar;\n        }\n\n        return data;\n    }\n\n    // common code to paste operations, e.g. paste to cell, paste to range, and copy range down\n    private doPasteOperation(\n        pasteOperationFunc: (\n            cellsToFlash: any,\n            updatedRowNodes: RowNode[],\n            focusedCell: CellPosition | null,\n            changedPath: ChangedPath | undefined\n        ) => void\n    ): void {\n        const source = 'clipboard';\n\n        this.eventService.dispatchEvent({\n            type: 'pasteStart',\n            source,\n        } as WithoutGridCommon<PasteStartEvent>);\n\n        let changedPath: ChangedPath | undefined;\n\n        if (this.clientSideRowModel) {\n            const onlyChangedColumns = this.gos.get('aggregateOnlyChangedColumns');\n            changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n        }\n\n        const cellsToFlash = {} as any;\n        const updatedRowNodes: RowNode[] = [];\n        const focusedCell = this.focusService.getFocusedCell();\n\n        pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n\n        const nodesToRefresh: RowNode[] = [...updatedRowNodes];\n        if (changedPath) {\n            this.clientSideRowModel.doAggregate(changedPath);\n\n            // add all nodes impacted by aggregation, as they need refreshed also.\n            changedPath.forEachChangedNodeDepthFirst((rowNode) => {\n                nodesToRefresh.push(rowNode);\n            });\n        }\n\n        // clipboardService has to do changeDetection itself, to prevent repeat logic in favour of batching.\n        // changeDetectionService is disabled for this action.\n        this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\n\n        this.dispatchFlashCells(cellsToFlash);\n        this.fireRowChanged(updatedRowNodes);\n\n        // if using the clipboard hack with a temp element, then the focus has been lost,\n        // so need to put it back. otherwise paste operation loosed focus on cell and keyboard\n        // navigation stops.\n        this.refocusLastFocusedCell();\n        const event: WithoutGridCommon<PasteEndEvent> = {\n            type: 'pasteEnd',\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private pasteIntoActiveRange(\n        rangeService: IRangeService,\n        clipboardData: string[][],\n        cellsToFlash: any,\n        updatedRowNodes: RowNode[],\n        changedPath: ChangedPath | undefined\n    ) {\n        // true if clipboard data can be evenly pasted into range, otherwise false\n        const abortRepeatingPasteIntoRows = this.getRangeSize(rangeService) % clipboardData.length != 0;\n\n        let indexOffset = 0;\n        let dataRowIndex = 0;\n\n        const rowCallback: RowCallback = (\n            currentRow: RowPosition,\n            rowNode: RowNode,\n            columns: AgColumn[],\n            index: number\n        ) => {\n            const atEndOfClipboardData = index - indexOffset >= clipboardData.length;\n\n            if (atEndOfClipboardData) {\n                if (abortRepeatingPasteIntoRows) {\n                    return;\n                }\n\n                // increment offset and reset data index to repeat paste of data\n                indexOffset += dataRowIndex;\n                dataRowIndex = 0;\n            }\n\n            const currentRowData = clipboardData[index - indexOffset];\n\n            // otherwise we are not the first row, so copy\n            updatedRowNodes.push(rowNode);\n\n            const processCellFromClipboardFunc = this.gos.getCallback('processCellFromClipboard');\n\n            columns.forEach((column, idx) => {\n                if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n                    return;\n                }\n\n                // repeat data for columns we don't have data for - happens when to range is bigger than copied data range\n                if (idx >= currentRowData.length) {\n                    idx = idx % currentRowData.length;\n                }\n\n                const newValue = this.processCell(\n                    rowNode,\n                    column,\n                    currentRowData[idx],\n                    EXPORT_TYPE_DRAG_COPY,\n                    processCellFromClipboardFunc,\n                    true\n                );\n\n                rowNode.setDataValue(column, newValue, SOURCE_PASTE);\n\n                if (changedPath) {\n                    changedPath.addParentNode(rowNode.parent, [column]);\n                }\n\n                const { rowIndex, rowPinned } = currentRow;\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            });\n\n            dataRowIndex++;\n        };\n\n        this.iterateActiveRanges(false, rowCallback);\n    }\n\n    private getDisplayedColumnsStartingAt(column: AgColumn): AgColumn[] {\n        let currentColumn: AgColumn | null = column;\n        const columns: AgColumn[] = [];\n\n        while (currentColumn != null) {\n            columns.push(currentColumn);\n            currentColumn = this.visibleColsService.getColAfter(currentColumn);\n        }\n\n        return columns;\n    }\n\n    private pasteStartingFromFocusedCell(\n        parsedData: string[][],\n        cellsToFlash: any,\n        updatedRowNodes: RowNode[],\n        focusedCell: CellPosition,\n        changedPath: ChangedPath | undefined\n    ) {\n        if (!focusedCell) {\n            return;\n        }\n\n        const currentRow: RowPosition = { rowIndex: focusedCell.rowIndex, rowPinned: focusedCell.rowPinned };\n        const columnsToPasteInto = this.getDisplayedColumnsStartingAt(focusedCell.column as AgColumn);\n\n        if (this.isPasteSingleValueIntoRange(parsedData)) {\n            this.pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath);\n        } else {\n            this.pasteMultipleValues(\n                parsedData,\n                currentRow,\n                updatedRowNodes,\n                columnsToPasteInto,\n                cellsToFlash,\n                EXPORT_TYPE_CLIPBOARD,\n                changedPath\n            );\n        }\n    }\n\n    // if range is active, and only one cell, then we paste this cell into all cells in the active range.\n    private isPasteSingleValueIntoRange(parsedData: string[][]): boolean {\n        return this.hasOnlyOneValueToPaste(parsedData) && this.rangeService != null && !this.rangeService.isEmpty();\n    }\n\n    private pasteSingleValueIntoRange(\n        parsedData: string[][],\n        updatedRowNodes: RowNode[],\n        cellsToFlash: any,\n        changedPath: ChangedPath | undefined\n    ) {\n        const value = parsedData[0][0];\n\n        const rowCallback: RowCallback = (currentRow: RowPosition, rowNode: RowNode, columns: AgColumn[]) => {\n            updatedRowNodes.push(rowNode);\n            columns.forEach((column) =>\n                this.updateCellValue(rowNode, column, value, cellsToFlash, EXPORT_TYPE_CLIPBOARD, changedPath)\n            );\n        };\n\n        this.iterateActiveRanges(false, rowCallback);\n    }\n\n    private hasOnlyOneValueToPaste(parsedData: string[][]) {\n        return parsedData.length === 1 && parsedData[0].length === 1;\n    }\n\n    public copyRangeDown(): void {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n\n        const firstRowValues: any[] = [];\n\n        const pasteOperation = (\n            cellsToFlash: any,\n            updatedRowNodes: RowNode[],\n            focusedCell: CellPosition,\n            changedPath: ChangedPath | undefined\n        ) => {\n            const processCellForClipboardFunc = this.gos.getCallback('processCellForClipboard');\n            const processCellFromClipboardFunc = this.gos.getCallback('processCellFromClipboard');\n\n            const rowCallback: RowCallback = (currentRow: RowPosition, rowNode: RowNode, columns: AgColumn[]) => {\n                // take reference of first row, this is the one we will be using to copy from\n                if (!firstRowValues.length) {\n                    // two reasons for looping through columns\n                    columns.forEach((column) => {\n                        // get the initial values to copy down\n                        const value = this.processCell(\n                            rowNode,\n                            column,\n                            this.valueService.getValue(column, rowNode),\n                            EXPORT_TYPE_DRAG_COPY,\n                            processCellForClipboardFunc,\n                            false,\n                            true\n                        );\n\n                        firstRowValues.push(value);\n                    });\n                } else {\n                    // otherwise we are not the first row, so copy\n                    updatedRowNodes.push(rowNode);\n                    columns.forEach((column, index) => {\n                        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n                            return;\n                        }\n\n                        const firstRowValue = this.processCell(\n                            rowNode,\n                            column,\n                            firstRowValues[index],\n                            EXPORT_TYPE_DRAG_COPY,\n                            processCellFromClipboardFunc,\n                            true\n                        );\n\n                        rowNode.setDataValue(column, firstRowValue, SOURCE_PASTE);\n\n                        if (changedPath) {\n                            changedPath.addParentNode(rowNode.parent, [column]);\n                        }\n\n                        const { rowIndex, rowPinned } = currentRow;\n                        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                        cellsToFlash[cellId] = true;\n                    });\n                }\n            };\n\n            this.iterateActiveRanges(true, rowCallback);\n        };\n\n        this.doPasteOperation(pasteOperation);\n    }\n\n    private removeLastLineIfBlank(parsedData: string[][]): void {\n        // remove last row if empty, excel puts empty last row in\n        const lastLine = _last(parsedData);\n        const lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === '';\n\n        if (lastLineIsBlank) {\n            // do not remove the last empty line when that is the only line pasted\n            if (parsedData.length === 1) {\n                return;\n            }\n            _removeFromArray(parsedData, lastLine);\n        }\n    }\n\n    private fireRowChanged(rowNodes: RowNode[]): void {\n        if (this.gos.get('editType') !== 'fullRow') {\n            return;\n        }\n\n        rowNodes.forEach((rowNode) => {\n            const event: WithoutGridCommon<RowValueChangedEvent> = {\n                type: 'rowValueChanged',\n                node: rowNode,\n                data: rowNode.data,\n                rowIndex: rowNode.rowIndex!,\n                rowPinned: rowNode.rowPinned,\n            };\n\n            this.eventService.dispatchEvent(event);\n        });\n    }\n\n    private pasteMultipleValues(\n        clipboardGridData: string[][],\n        currentRow: RowPosition | null,\n        updatedRowNodes: RowNode[],\n        columnsToPasteInto: AgColumn[],\n        cellsToFlash: any,\n        type: string,\n        changedPath: ChangedPath | undefined\n    ): void {\n        let rowPointer = currentRow;\n\n        // if doing CSRM and NOT tree data, then it means groups are aggregates, which are read only,\n        // so we should skip them when doing paste operations.\n        const skipGroupRows =\n            this.clientSideRowModel != null && !this.gos.get('enableGroupEdit') && !this.gos.get('treeData');\n\n        const getNextGoodRowNode = () => {\n            while (true) {\n                if (!rowPointer) {\n                    return null;\n                }\n                const res = this.rowPositionUtils.getRowNode(rowPointer);\n                // move to next row down for next set of values\n                rowPointer = this.cellNavigationService.getRowBelow({\n                    rowPinned: rowPointer.rowPinned,\n                    rowIndex: rowPointer.rowIndex,\n                });\n\n                // if no more rows, return null\n                if (res == null) {\n                    return null;\n                }\n\n                // skip details rows and footer rows, never paste into them as they don't hold data\n                const skipRow = res.detail || res.footer || (skipGroupRows && res.group);\n\n                // skipping row means we go into the next iteration of the while loop\n                if (!skipRow) {\n                    return res;\n                }\n            }\n        };\n\n        clipboardGridData.forEach((clipboardRowData) => {\n            const rowNode = getNextGoodRowNode();\n\n            // if we have come to end of rows in grid, then skip\n            if (!rowNode) {\n                return;\n            }\n\n            clipboardRowData.forEach((value, index) =>\n                this.updateCellValue(rowNode, columnsToPasteInto[index], value, cellsToFlash, type, changedPath)\n            );\n\n            updatedRowNodes.push(rowNode);\n        });\n    }\n\n    private updateCellValue(\n        rowNode: RowNode | null,\n        column: AgColumn,\n        value: string,\n        cellsToFlash: any,\n        type: string,\n        changedPath: ChangedPath | undefined\n    ) {\n        if (!rowNode || !column || !column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n            return;\n        }\n\n        // if the cell is a group and the col is an aggregation, skip the cell.\n        if (rowNode.group && column.isValueActive()) {\n            return;\n        }\n\n        const processedValue = this.processCell(\n            rowNode,\n            column,\n            value,\n            type,\n            this.gos.getCallback('processCellFromClipboard'),\n            true\n        );\n        rowNode.setDataValue(column, processedValue, SOURCE_PASTE);\n\n        const { rowIndex, rowPinned } = rowNode;\n        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex: rowIndex!, column, rowPinned });\n        cellsToFlash[cellId] = true;\n\n        if (changedPath) {\n            changedPath.addParentNode(rowNode.parent, [column]);\n        }\n    }\n\n    public copyToClipboard(params: IClipboardCopyParams = {}): void {\n        this.copyOrCutToClipboard(params);\n    }\n\n    public cutToClipboard(params: IClipboardCopyParams = {}, source: 'api' | 'ui' | 'contextMenu' = 'api'): void {\n        if (this.gos.get('suppressCutToClipboard')) {\n            return;\n        }\n\n        const startEvent: WithoutGridCommon<CutStartEvent> = {\n            type: 'cutStart',\n            source,\n        };\n        this.eventService.dispatchEvent(startEvent);\n\n        this.copyOrCutToClipboard(params, true);\n\n        const endEvent: WithoutGridCommon<CutEndEvent> = {\n            type: 'cutEnd',\n            source,\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n\n    private copyOrCutToClipboard(params: IClipboardCopyParams, cut?: boolean): void {\n        let { includeHeaders, includeGroupHeaders } = params;\n\n        // don't override 'includeHeaders' if it has been explicitly set to 'false'\n        if (includeHeaders == null) {\n            includeHeaders = this.gos.get('copyHeadersToClipboard');\n        }\n\n        if (includeGroupHeaders == null) {\n            includeGroupHeaders = this.gos.get('copyGroupHeadersToClipboard');\n        }\n\n        const copyParams = { includeHeaders, includeGroupHeaders };\n        const shouldCopyRows = !this.gos.get('suppressCopyRowsToClipboard');\n\n        let cellClearType: CellClearType | null = null;\n        // Copy priority is Range > Row > Focus\n        if (this.rangeService && !this.rangeService.isEmpty() && !this.shouldSkipSingleCellRange(this.rangeService)) {\n            this.copySelectedRangeToClipboard(copyParams);\n            cellClearType = CellClearType.CellRange;\n        } else if (shouldCopyRows && !this.selectionService.isEmpty()) {\n            this.copySelectedRowsToClipboard(copyParams);\n            cellClearType = CellClearType.SelectedRows;\n        } else if (this.focusService.isAnyCellFocused()) {\n            this.copyFocusedCellToClipboard(copyParams);\n            cellClearType = CellClearType.FocusedCell;\n        }\n\n        if (cut && cellClearType !== null) {\n            this.clearCellsAfterCopy(cellClearType);\n        }\n    }\n\n    private clearCellsAfterCopy(type: CellClearType) {\n        this.eventService.dispatchEvent({ type: 'keyShortcutChangedCellStart' });\n        if (type === CellClearType.CellRange) {\n            this.rangeService!.clearCellRangeCellValues({ cellEventSource: 'clipboardService' });\n        } else if (type === CellClearType.SelectedRows) {\n            this.clearSelectedRows();\n        } else {\n            const focusedCell = this.focusService.getFocusedCell();\n            if (focusedCell == null) {\n                return;\n            }\n\n            const rowNode = this.rowPositionUtils.getRowNode(focusedCell);\n            if (rowNode) {\n                this.clearCellValue(rowNode, focusedCell.column as AgColumn);\n            }\n        }\n        this.eventService.dispatchEvent({ type: 'keyShortcutChangedCellEnd' });\n    }\n\n    private clearSelectedRows(): void {\n        const selected = this.selectionService.getSelectedNodes();\n        const columns = this.visibleColsService.getAllCols();\n\n        for (const row of selected) {\n            for (const col of columns) {\n                this.clearCellValue(row, col);\n            }\n        }\n    }\n\n    private clearCellValue(rowNode: RowNode, column: AgColumn): void {\n        if (!column.isCellEditable(rowNode)) {\n            return;\n        }\n        const emptyValue =\n            this.valueService.parseValue(column, rowNode, '', rowNode.getValueFromValueService(column)) ?? null;\n        rowNode.setDataValue(column, emptyValue, 'clipboardService');\n    }\n\n    private shouldSkipSingleCellRange(rangeService: IRangeService): boolean {\n        return this.gos.get('suppressCopySingleCellRanges') && !rangeService.isMoreThanOneCell();\n    }\n\n    private iterateActiveRanges(onlyFirst: boolean, rowCallback: RowCallback, columnCallback?: ColumnCallback): void {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n\n        const cellRanges = this.rangeService.getCellRanges();\n\n        if (onlyFirst) {\n            this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);\n        } else {\n            cellRanges.forEach((range, idx) =>\n                this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1)\n            );\n        }\n    }\n\n    private iterateActiveRange(\n        range: CellRange,\n        rowCallback: RowCallback,\n        columnCallback?: ColumnCallback,\n        isLastRange?: boolean\n    ): void {\n        if (!this.rangeService) {\n            return;\n        }\n\n        let currentRow: RowPosition | null = this.rangeService.getRangeStartRow(range);\n        const lastRow = this.rangeService.getRangeEndRow(range);\n\n        if (columnCallback && range.columns) {\n            columnCallback(range.columns as AgColumn[]);\n        }\n\n        let rangeIndex = 0;\n        let isLastRow = false;\n\n        // the currentRow could be missing if the user sets the active range manually, and sets a range\n        // that is outside of the grid (eg. sets range rows 0 to 100, but grid has only 20 rows).\n        while (!isLastRow && currentRow != null) {\n            const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n            isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);\n\n            rowCallback(currentRow, rowNode, range.columns as AgColumn[], rangeIndex++, isLastRow && isLastRange);\n\n            currentRow = this.cellNavigationService.getRowBelow(currentRow);\n        }\n    }\n\n    public copySelectedRangeToClipboard(params: IClipboardCopyParams = {}): void {\n        if (!this.rangeService || this.rangeService.isEmpty()) {\n            return;\n        }\n\n        const allRangesMerge = this.rangeService.areAllRangesAbleToMerge();\n        const { data, cellsToFlash } = allRangesMerge\n            ? this.buildDataFromMergedRanges(this.rangeService, params)\n            : this.buildDataFromRanges(this.rangeService, params);\n\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells(cellsToFlash);\n    }\n\n    private buildDataFromMergedRanges(\n        rangeService: IRangeService,\n        params: IClipboardCopyParams\n    ): DataForCellRangesType {\n        const columnsSet: Set<AgColumn> = new Set();\n        const ranges = rangeService.getCellRanges();\n        const rowPositionsMap: Map<string, boolean> = new Map();\n        const allRowPositions: RowPosition[] = [];\n        const allCellsToFlash: CellsToFlashType = {};\n\n        ranges.forEach((range) => {\n            range.columns.forEach((col: AgColumn) => columnsSet.add(col));\n            const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(rangeService, range);\n            rowPositions.forEach((rowPosition) => {\n                const rowPositionAsString = `${rowPosition.rowIndex}-${rowPosition.rowPinned || 'null'}`;\n                if (!rowPositionsMap.get(rowPositionAsString)) {\n                    rowPositionsMap.set(rowPositionAsString, true);\n                    allRowPositions.push(rowPosition);\n                }\n            });\n            Object.assign(allCellsToFlash, cellsToFlash);\n        });\n\n        const allColumns = this.visibleColsService.getAllCols();\n        const exportedColumns = Array.from(columnsSet) as AgColumn[];\n\n        exportedColumns.sort((a, b) => {\n            const posA = allColumns.indexOf(a);\n            const posB = allColumns.indexOf(b);\n\n            return posA - posB;\n        });\n\n        const data = this.buildExportParams({\n            columns: exportedColumns,\n            rowPositions: allRowPositions,\n            includeHeaders: params.includeHeaders,\n            includeGroupHeaders: params.includeGroupHeaders,\n        });\n\n        return { data, cellsToFlash: allCellsToFlash };\n    }\n\n    private buildDataFromRanges(rangeService: IRangeService, params: IClipboardCopyParams): DataForCellRangesType {\n        const ranges = rangeService.getCellRanges();\n        const data: string[] = [];\n        const allCellsToFlash: CellsToFlashType = {};\n\n        ranges.forEach((range) => {\n            const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(rangeService, range);\n            Object.assign(allCellsToFlash, cellsToFlash);\n            data.push(\n                this.buildExportParams({\n                    columns: range.columns as AgColumn[],\n                    rowPositions: rowPositions,\n                    includeHeaders: params.includeHeaders,\n                    includeGroupHeaders: params.includeGroupHeaders,\n                })\n            );\n        });\n\n        return { data: data.join('\\n'), cellsToFlash: allCellsToFlash };\n    }\n\n    private getRangeRowPositionsAndCellsToFlash(\n        rangeService: IRangeService,\n        range: CellRange\n    ): { rowPositions: RowPosition[]; cellsToFlash: CellsToFlashType } {\n        const rowPositions: RowPosition[] = [];\n        const cellsToFlash: CellsToFlashType = {};\n        const startRow = rangeService.getRangeStartRow(range);\n        const lastRow = rangeService.getRangeEndRow(range);\n\n        let node: RowPosition | null = startRow;\n\n        while (node) {\n            rowPositions.push(node);\n            range.columns.forEach((column) => {\n                const { rowIndex, rowPinned } = node!;\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            });\n            if (this.rowPositionUtils.sameRow(node, lastRow)) {\n                break;\n            }\n            node = this.cellNavigationService.getRowBelow(node);\n        }\n\n        return { rowPositions, cellsToFlash };\n    }\n\n    private getCellsToFlashFromRowNodes(rowNodes: RowNode[]): CellsToFlashType {\n        const allDisplayedColumns = this.visibleColsService.getAllCols();\n        const cellsToFlash: CellsToFlashType = {};\n        for (let i = 0; i < rowNodes.length; i++) {\n            const { rowIndex, rowPinned } = rowNodes[i];\n            if (rowIndex == null) {\n                continue;\n            }\n            for (let j = 0; j < allDisplayedColumns.length; j++) {\n                const column = allDisplayedColumns[j];\n                const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n                cellsToFlash[cellId] = true;\n            }\n        }\n\n        return cellsToFlash;\n    }\n\n    private copyFocusedCellToClipboard(params: IClipboardCopyParams = {}): void {\n        const focusedCell = this.focusService.getFocusedCell();\n\n        if (focusedCell == null) {\n            return;\n        }\n\n        const cellId = this.cellPositionUtils.createId(focusedCell);\n        const currentRow: RowPosition = { rowPinned: focusedCell.rowPinned, rowIndex: focusedCell.rowIndex };\n        const column = focusedCell.column as AgColumn;\n\n        const data = this.buildExportParams({\n            columns: [column],\n            rowPositions: [currentRow],\n            includeHeaders: params.includeHeaders,\n            includeGroupHeaders: params.includeGroupHeaders,\n        });\n\n        this.copyDataToClipboard(data);\n        this.dispatchFlashCells({ [cellId]: true });\n    }\n\n    public copySelectedRowsToClipboard(params: IClipboardCopyRowsParams = {}): void {\n        const { columnKeys, includeHeaders, includeGroupHeaders } = params;\n\n        const data = this.buildExportParams({\n            columns: columnKeys as (string | AgColumn)[] | undefined,\n            includeHeaders,\n            includeGroupHeaders,\n        });\n\n        this.copyDataToClipboard(data);\n        const rowNodes = this.selectionService.getSelectedNodes() || [];\n        this.dispatchFlashCells(this.getCellsToFlashFromRowNodes(rowNodes));\n    }\n\n    private buildExportParams(params: {\n        columns?: (string | AgColumn)[];\n        rowPositions?: RowPosition[];\n        includeHeaders?: boolean;\n        includeGroupHeaders?: boolean;\n    }): string {\n        const { columns, rowPositions, includeHeaders = false, includeGroupHeaders = false } = params;\n\n        const exportParams: CsvExportParams = {\n            columnKeys: columns,\n            rowPositions,\n            skipColumnHeaders: !includeHeaders,\n            skipColumnGroupHeaders: !includeGroupHeaders,\n            suppressQuotes: true,\n            columnSeparator: this.getClipboardDelimiter(),\n            onlySelected: !rowPositions,\n            processCellCallback: this.gos.getCallback('processCellForClipboard'),\n            processRowGroupCallback: (params) => this.processRowGroupCallback(params),\n            processHeaderCallback: this.gos.getCallback('processHeaderForClipboard'),\n            processGroupHeaderCallback: this.gos.getCallback('processGroupHeaderForClipboard'),\n        };\n\n        return this.csvCreator.getDataAsCsv(exportParams, true);\n    }\n\n    private processRowGroupCallback(params: ProcessRowGroupForExportParams) {\n        const { node, column } = params;\n\n        const isTreeData = this.gos.get('treeData');\n        const isSuppressGroupMaintainValueType = this.gos.get('suppressGroupMaintainValueType');\n\n        // if not tree data and not suppressGroupMaintainValueType then we get the value from the group data\n        const getValueFromNode = () => {\n            if (isTreeData || isSuppressGroupMaintainValueType || !column) {\n                return node.key;\n            }\n            const value = node.groupData?.[column.getId()];\n            if (\n                !value ||\n                !node.rowGroupColumn ||\n                node.rowGroupColumn.getColDef().useValueFormatterForExport === false\n            ) {\n                return value;\n            }\n            return this.valueService.formatValue(node.rowGroupColumn as AgColumn, node, value) ?? value;\n        };\n        let value = getValueFromNode();\n\n        if (params.node.footer) {\n            let suffix = '';\n            if (value && value.length) {\n                suffix = ` ${value}`;\n            }\n            value = `Total${suffix}`;\n        }\n        const processCellForClipboard = this.gos.getCallback('processCellForClipboard');\n\n        if (processCellForClipboard) {\n            let column = node.rowGroupColumn as AgColumn;\n\n            if (!column && node.footer && node.level === -1) {\n                column = this.funcColsService.getRowGroupColumns()[0];\n            }\n            return processCellForClipboard({\n                value,\n                node,\n                column,\n                type: 'clipboard',\n                formatValue: (valueToFormat: any) =>\n                    this.valueService.formatValue(column, node, valueToFormat) ?? valueToFormat,\n                parseValue: (valueToParse: string) =>\n                    this.valueService.parseValue(column, node, valueToParse, this.valueService.getValue(column, node)),\n            });\n        }\n        return value;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private dispatchFlashCells(cellsToFlash: {}): void {\n        window.setTimeout(() => {\n            const event: WithoutGridCommon<FlashCellsEvent> = {\n                type: 'flashCells',\n                cells: cellsToFlash,\n            };\n\n            this.eventService.dispatchEvent(event);\n        }, 0);\n    }\n\n    private processCell<T>(\n        rowNode: RowNode | undefined,\n        column: AgColumn,\n        value: T,\n        type: string,\n        func?: (params: WithoutGridCommon<ProcessCellForExportParams>) => T,\n        canParse?: boolean,\n        canFormat?: boolean\n    ): T {\n        if (func) {\n            const params: WithoutGridCommon<ProcessCellForExportParams> = {\n                column,\n                node: rowNode,\n                value,\n                type,\n                formatValue: (valueToFormat: any) =>\n                    this.valueService.formatValue(column, rowNode ?? null, valueToFormat) ?? valueToFormat,\n                parseValue: (valueToParse: string) =>\n                    this.valueService.parseValue(\n                        column,\n                        rowNode ?? null,\n                        valueToParse,\n                        this.valueService.getValue(column, rowNode)\n                    ),\n            };\n\n            return func(params);\n        }\n\n        if (canParse && column.getColDef().useValueParserForImport !== false) {\n            return this.valueService.parseValue(\n                column,\n                rowNode ?? null,\n                value,\n                this.valueService.getValue(column, rowNode)\n            );\n        }\n\n        if (canFormat && column.getColDef().useValueFormatterForExport !== false) {\n            return this.valueService.formatValue(column, rowNode ?? null, value) ?? (value as any);\n        }\n\n        return value;\n    }\n\n    private copyDataToClipboard(data: string): void {\n        const userProvidedFunc = this.gos.getCallback('sendToClipboard');\n\n        // method 1 - user provided func\n        if (userProvidedFunc) {\n            userProvidedFunc({ data });\n            return;\n        }\n\n        // method 2 - native clipboard API, available in modern chrome browsers\n        const allowNavigator = !this.gos.get('suppressClipboardApi');\n        if (allowNavigator && navigator.clipboard) {\n            navigator.clipboard.writeText(data).catch((e) => {\n                _warnOnce(`${e}\\n${apiError('writeText')}`);\n                this.copyDataToClipboardLegacy(data);\n            });\n            return;\n        }\n\n        this.copyDataToClipboardLegacy(data);\n    }\n\n    private copyDataToClipboardLegacy(data: string): void {\n        // method 3 - if all else fails, the old school hack\n        this.executeOnTempElement((element) => {\n            const eDocument = this.gos.getDocument();\n            const focusedElementBefore = this.gos.getActiveDomElement() as HTMLElement;\n\n            element.value = data || ' '; // has to be non-empty value or execCommand will not do anything\n            element.select();\n            element.focus({ preventScroll: true });\n\n            const result = eDocument.execCommand('copy');\n\n            if (!result) {\n                _warnOnce(\n                    \"Browser did not allow document.execCommand('copy'). Ensure \" +\n                        'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise ' +\n                        'the browser will prevent it for security reasons.'\n                );\n            }\n\n            if (focusedElementBefore != null && focusedElementBefore.focus != null) {\n                focusedElementBefore.focus({ preventScroll: true });\n            }\n        });\n    }\n\n    private executeOnTempElement(\n        callbackNow: (element: HTMLTextAreaElement) => void,\n        callbackAfter?: (element: HTMLTextAreaElement) => void\n    ): void {\n        const eDoc = this.gos.getDocument();\n        const eTempInput = eDoc.createElement('textarea');\n        eTempInput.style.width = '1px';\n        eTempInput.style.height = '1px';\n\n        // removing items from the DOM causes the document element to scroll to the\n        // position where the element was positioned. Here we set scrollTop / scrollLeft\n        // to prevent the document element from scrolling when we remove it from the DOM.\n        eTempInput.style.top = eDoc.documentElement.scrollTop + 'px';\n        eTempInput.style.left = eDoc.documentElement.scrollLeft + 'px';\n\n        eTempInput.style.position = 'absolute';\n        eTempInput.style.opacity = '0';\n\n        const guiRoot = this.gridCtrl.getGui();\n\n        guiRoot.appendChild(eTempInput);\n\n        try {\n            callbackNow(eTempInput);\n        } catch (err) {\n            _warnOnce(\"Browser does not support document.execCommand('copy') for clipboard operations\");\n        }\n\n        //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...\n        if (callbackAfter) {\n            window.setTimeout(() => {\n                callbackAfter(eTempInput);\n                guiRoot.removeChild(eTempInput);\n            }, 100);\n        } else {\n            guiRoot.removeChild(eTempInput);\n        }\n    }\n\n    private getRangeSize(rangeService: IRangeService): number {\n        const ranges = rangeService.getCellRanges();\n        let startRangeIndex = 0;\n        let endRangeIndex = 0;\n\n        if (ranges.length > 0) {\n            startRangeIndex = rangeService.getRangeStartRow(ranges[0]).rowIndex;\n            endRangeIndex = rangeService.getRangeEndRow(ranges[0]).rowIndex;\n        }\n\n        return startRangeIndex - endRangeIndex + 1;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { RowGroupingModule } from '@ag-grid-enterprise/row-grouping';\nimport { SideBarModule } from '@ag-grid-enterprise/side-bar';\n\nimport { ColumnToolPanel } from './columnToolPanel/columnToolPanel';\nimport { ModelItemUtils } from './columnToolPanel/modelItemUtils';\nimport { VERSION } from './version';\n\nexport const ColumnsToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ColumnsToolPanelModule,\n    beans: [ModelItemUtils],\n    userComponents: [\n        { name: 'agColumnsToolPanel', classImp: ColumnToolPanel },\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n    dependantModules: [EnterpriseCoreModule, RowGroupingModule, SideBarModule],\n};\n", "import type {\n    ColDef,\n    ColGroupDef,\n    ColumnToolPanelState,\n    IColumnToolPanel,\n    IToolPanelColumnCompParams,\n    IToolPanelComp,\n    IToolPanelParams,\n} from '@ag-grid-community/core';\nimport { Component, ModuleNames, ModuleRegistry, _clearElement, _last } from '@ag-grid-community/core';\nimport { PivotDropZonePanel, RowGroupDropZonePanel, ValuesDropZonePanel } from '@ag-grid-enterprise/row-grouping';\n\nimport { AgPrimaryCols } from './agPrimaryCols';\nimport { PivotModePanel } from './pivotModePanel';\n\nexport interface ToolPanelColumnCompParams<TData = any, TContext = any>\n    extends IToolPanelParams<TData, TContext, ColumnToolPanelState>,\n        IToolPanelColumnCompParams {}\n\nexport class ColumnToolPanel extends Component implements IColumnToolPanel, IToolPanelComp {\n    private initialised = false;\n    private params: ToolPanelColumnCompParams;\n\n    private childDestroyFuncs: (() => void)[] = [];\n\n    private pivotModePanel: PivotModePanel;\n    private primaryColsPanel: AgPrimaryCols;\n    private rowGroupDropZonePanel: RowGroupDropZonePanel;\n    private valuesDropZonePanel: ValuesDropZonePanel;\n    private pivotDropZonePanel: PivotDropZonePanel;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-column-panel\"></div>`);\n    }\n\n    // lazy initialise the panel\n    public override setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        const defaultParams: Partial<ToolPanelColumnCompParams> = this.gos.addGridCommonParams({\n            suppressColumnMove: false,\n            suppressColumnSelectAll: false,\n            suppressColumnFilter: false,\n            suppressColumnExpandAll: false,\n            contractColumnSelection: false,\n            suppressPivotMode: false,\n            suppressRowGroups: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        this.params = {\n            ...defaultParams,\n            ...params,\n        };\n\n        if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {\n            // DO NOT CHANGE TO createManagedBean\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n            this.appendChild(this.pivotModePanel);\n        }\n\n        // DO NOT CHANGE TO createManagedBean\n        this.primaryColsPanel = this.createBean(new AgPrimaryCols());\n        this.childDestroyFuncs.push(() => this.destroyBean(this.primaryColsPanel));\n\n        this.primaryColsPanel.init(true, this.params, 'toolPanelUi');\n        this.primaryColsPanel.addCssClass('ag-column-panel-column-select');\n        this.appendChild(this.primaryColsPanel);\n\n        if (this.isRowGroupingModuleLoaded()) {\n            if (!this.params.suppressRowGroups) {\n                // DO NOT CHANGE TO createManagedBean\n                this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.rowGroupDropZonePanel));\n                this.appendChild(this.rowGroupDropZonePanel);\n            }\n\n            if (!this.params.suppressValues) {\n                // DO NOT CHANGE TO createManagedBean\n                this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.valuesDropZonePanel));\n                this.appendChild(this.valuesDropZonePanel);\n            }\n\n            if (!this.params.suppressPivots) {\n                // DO NOT CHANGE TO createManagedBean\n                this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.pivotDropZonePanel));\n                this.appendChild(this.pivotDropZonePanel);\n            }\n\n            this.setLastVisible();\n            const [pivotModeListener] = this.addManagedEventListeners({\n                columnPivotModeChanged: () => {\n                    this.resetChildrenHeight();\n                    this.setLastVisible();\n                },\n            });\n            this.childDestroyFuncs.push(() => pivotModeListener!());\n        }\n\n        this.initialised = true;\n    }\n\n    public setPivotModeSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.pivotModePanel) {\n            this.pivotModePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n\n            // ensure pivot mode panel is positioned at the top of the columns tool panel\n            this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n        }\n        this.setLastVisible();\n    }\n\n    public setRowGroupsSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.rowGroupDropZonePanel) {\n            this.rowGroupDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));\n            this.appendChild(this.rowGroupDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setValuesSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.valuesDropZonePanel) {\n            this.valuesDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));\n            this.appendChild(this.valuesDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setPivotSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) {\n            return;\n        }\n\n        if (this.pivotDropZonePanel) {\n            this.pivotDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));\n            this.appendChild(this.pivotDropZonePanel);\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        this.setLastVisible();\n    }\n\n    private setResizers(): void {\n        [this.primaryColsPanel, this.rowGroupDropZonePanel, this.valuesDropZonePanel, this.pivotDropZonePanel].forEach(\n            (panel) => {\n                if (!panel) {\n                    return;\n                }\n                const eGui = panel.getGui();\n                panel.toggleResizable(\n                    !eGui.classList.contains('ag-last-column-drop') && !eGui.classList.contains('ag-hidden')\n                );\n            }\n        );\n    }\n\n    private setLastVisible(): void {\n        const eGui = this.getGui();\n\n        const columnDrops: HTMLElement[] = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));\n\n        columnDrops.forEach((columnDrop) => columnDrop.classList.remove('ag-last-column-drop'));\n\n        const columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');\n        const lastVisible = _last(columnDropEls) as HTMLElement;\n\n        if (lastVisible) {\n            lastVisible.classList.add('ag-last-column-drop');\n        }\n\n        this.setResizers();\n    }\n\n    private resetChildrenHeight(): void {\n        const eGui = this.getGui();\n        const children = eGui.children;\n\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i] as HTMLElement;\n            child.style.removeProperty('height');\n            child.style.removeProperty('flex');\n        }\n    }\n\n    private isRowGroupingModuleLoaded(): boolean {\n        return ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Row Grouping', this.gridId);\n    }\n\n    public expandColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.expandGroups(groupIds);\n    }\n\n    public collapseColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.collapseGroups(groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsPanel.setColumnLayout(colDefs);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsPanel.syncLayoutWithGrid();\n    }\n\n    public destroyChildren(): void {\n        this.childDestroyFuncs.forEach((func) => func());\n        this.childDestroyFuncs.length = 0;\n        _clearElement(this.getGui());\n    }\n\n    public refresh(params: ToolPanelColumnCompParams): boolean {\n        this.destroyChildren();\n        this.init(params);\n        return true;\n    }\n\n    public getState(): ColumnToolPanelState {\n        return {\n            expandedGroupIds: this.primaryColsPanel.getExpandedGroups(),\n        };\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so this must be public.\n    public override destroy(): void {\n        this.destroyChildren();\n        super.destroy();\n    }\n}\n", "import type {\n    ColDef,\n    ColGroupDef,\n    ColumnEventType,\n    ComponentSelector,\n    ToolPanelColumnCompParams,\n} from '@ag-grid-community/core';\nimport { Component, PositionableFeature, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { AgPrimaryColsHeader } from './agPrimaryColsHeader';\nimport { AgPrimaryColsHeaderSelector } from './agPrimaryColsHeader';\nimport type { AgPrimaryColsList } from './agPrimaryColsList';\nimport { AgPrimaryColsListSelector } from './agPrimaryColsList';\n\nexport class AgPrimaryCols extends Component {\n    private readonly primaryColsHeaderPanel: AgPrimaryColsHeader = RefPlaceholder;\n    private readonly primaryColsListPanel: AgPrimaryColsList = RefPlaceholder;\n\n    private allowDragging: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n    private positionableFeature: PositionableFeature;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-column-select\">\n            <ag-primary-cols-header data-ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list data-ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>`,\n            [AgPrimaryColsHeaderSelector, AgPrimaryColsListSelector]\n        );\n    }\n\n    // we allow dragging in the toolPanel, but not when this component appears in the column menu\n    public init(allowDragging: boolean, params: ToolPanelColumnCompParams, eventType: ColumnEventType): void {\n        this.allowDragging = allowDragging;\n        this.params = params;\n        this.eventType = eventType;\n\n        this.primaryColsHeaderPanel.init(this.params);\n\n        const hideFilter = this.params.suppressColumnFilter;\n        const hideSelect = this.params.suppressColumnSelectAll;\n        const hideExpand = this.params.suppressColumnExpandAll;\n\n        if (hideExpand && hideFilter && hideSelect) {\n            this.primaryColsHeaderPanel.setDisplayed(false);\n        }\n\n        this.addManagedListeners(this.primaryColsListPanel, {\n            groupExpanded: this.onGroupExpanded.bind(this),\n            selectionChanged: this.onSelectionChange.bind(this),\n        });\n\n        this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);\n\n        this.addManagedListeners(this.primaryColsHeaderPanel, {\n            expandAll: this.onExpandAll.bind(this),\n            collapseAll: this.onCollapseAll.bind(this),\n            selectAll: this.onSelectAll.bind(this),\n            unselectAll: this.onUnselectAll.bind(this),\n            filterChanged: this.onFilterChanged.bind(this),\n        });\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n    }\n\n    public toggleResizable(resizable: boolean) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n    }\n\n    public onExpandAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(true);\n    }\n\n    public onCollapseAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(false);\n    }\n\n    public expandGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(true, groupIds);\n    }\n\n    public collapseGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(false, groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsListPanel.setColumnLayout(colDefs);\n    }\n\n    private onFilterChanged(event: any): void {\n        this.primaryColsListPanel.setFilterText(event.filterText);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsListPanel.onColumnsChanged();\n    }\n\n    private onSelectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(true);\n    }\n\n    private onUnselectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(false);\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.primaryColsHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    private onSelectionChange(event: any): void {\n        this.primaryColsHeaderPanel.setSelectionState(event.state);\n    }\n\n    public getExpandedGroups(): string[] {\n        return this.primaryColsListPanel.getExpandedGroups();\n    }\n}\n\nexport const AgPrimaryColsSelector: ComponentSelector = {\n    selector: 'AG-PRIMARY-COLS',\n    component: AgPrimaryCols,\n};\n", "import type {\n    AgCheckbox,\n    AgInputTextField,\n    BeanCollection,\n    ColumnModel,\n    ComponentSelector,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    AgInputTextFieldSelector,\n    Component,\n    KeyCode,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _debounce,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport type { ToolPanelColumnCompParams } from './columnToolPanel';\n\nexport enum ExpandState {\n    EXPANDED,\n    COLLAPSED,\n    INDETERMINATE,\n}\n\nconst DEBOUNCE_DELAY = 300;\nexport type AgPrimaryColsHeaderEvent = 'unselectAll' | 'selectAll' | 'collapseAll' | 'expandAll' | 'filterChanged';\nexport class AgPrimaryColsHeader extends Component<AgPrimaryColsHeaderEvent> {\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    private readonly eExpand: Element = RefPlaceholder;\n    private readonly eSelect: AgCheckbox = RefPlaceholder;\n    private readonly eFilterTextField: AgInputTextField = RefPlaceholder;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private expandState: ExpandState;\n    private selectState?: boolean;\n\n    private onFilterTextChangedDebounced: () => void;\n\n    private params: ToolPanelColumnCompParams;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-column-select-header\" role=\"presentation\">\n            <div data-ref=\"eExpand\" class=\"ag-column-select-header-icon\"></div>\n            <ag-checkbox data-ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" data-ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>`,\n            [AgCheckboxSelector, AgInputTextFieldSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.createExpandIcons();\n\n        this.addManagedListeners(this.eExpand, {\n            click: this.onExpandClicked.bind(this),\n            keydown: (e: KeyboardEvent) => {\n                if (e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onExpandClicked();\n                }\n            },\n        });\n\n        this.addManagedElementListeners(this.eSelect.getInputElement(), { click: this.onSelectClicked.bind(this) });\n        this.addManagedPropertyListener('functionsReadOnly', () => this.onFunctionsReadOnlyPropChanged());\n\n        this.eFilterTextField.setAutoComplete(false).onValueChange(() => this.onFilterTextChanged());\n\n        this.addManagedElementListeners(this.eFilterTextField.getInputElement(), {\n            keydown: this.onMiniFilterKeyDown.bind(this),\n        });\n\n        this.addManagedEventListeners({ newColumnsLoaded: this.showOrHideOptions.bind(this) });\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n\n        this.activateTabIndex([this.eExpand]);\n    }\n\n    private onFunctionsReadOnlyPropChanged(): void {\n        const readOnly = this.gos.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        this.params = params;\n\n        const readOnly = this.gos.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild((this.eExpandChecked = _createIconNoSpan('columnSelectOpen', this.gos)!));\n\n        this.eExpand.appendChild((this.eExpandUnchecked = _createIconNoSpan('columnSelectClosed', this.gos)!));\n\n        this.eExpand.appendChild(\n            (this.eExpandIndeterminate = _createIconNoSpan('columnSelectIndeterminate', this.gos)!)\n        );\n\n        this.setExpandState(ExpandState.EXPANDED);\n    }\n\n    // we only show expand / collapse if we are showing columns\n    private showOrHideOptions(): void {\n        const showFilter = !this.params.suppressColumnFilter;\n        const showSelect = !this.params.suppressColumnSelectAll;\n        const showExpand = !this.params.suppressColumnExpandAll;\n        const groupsPresent = this.columnModel.isProvidedColGroupsPresent();\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        _setDisplayed(this.eFilterTextField.getGui(), showFilter);\n        _setDisplayed(this.eSelect.getGui(), showSelect);\n        _setDisplayed(this.eExpand, showExpand && groupsPresent);\n    }\n\n    private onFilterTextChanged(): void {\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = _debounce(() => {\n                const filterText = this.eFilterTextField.getValue();\n                this.dispatchLocalEvent({ type: 'filterChanged', filterText: filterText });\n            }, DEBOUNCE_DELAY);\n        }\n\n        this.onFilterTextChangedDebounced();\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ENTER) {\n            // we need to add a delay that corresponds to the filter text debounce delay to ensure\n            // the text filtering has happened, otherwise all columns will be deselected\n            setTimeout(() => this.onSelectClicked(), DEBOUNCE_DELAY);\n        }\n    }\n\n    private onSelectClicked(): void {\n        this.dispatchLocalEvent({ type: this.selectState ? 'unselectAll' : 'selectAll' });\n    }\n\n    private onExpandClicked(): void {\n        this.dispatchLocalEvent({ type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll' });\n    }\n\n    public setExpandState(state: ExpandState): void {\n        this.expandState = state;\n\n        _setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);\n        _setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);\n        _setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);\n    }\n\n    public setSelectionState(state?: boolean): void {\n        this.selectState = state;\n        this.eSelect.setValue(this.selectState);\n    }\n}\n\nexport const AgPrimaryColsHeaderSelector: ComponentSelector = {\n    selector: 'AG-PRIMARY-COLS-HEADER',\n    component: AgPrimaryColsHeader,\n};\n", "import type {\n    AbstractColDef,\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColGroupDef,\n    ColumnEventType,\n    ColumnModel,\n    ColumnNameService,\n    ColumnToolPanelState,\n    ComponentSelector,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    _exists,\n    _includes,\n    _setAriaLabel,\n    _setAriaLevel,\n    _warnOnce,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\nimport type { VirtualListModel } from '@ag-grid-enterprise/core';\nimport type { ToolPanelColDefService } from '@ag-grid-enterprise/side-bar';\n\nimport { ExpandState } from './agPrimaryColsHeader';\nimport { ColumnModelItem } from './columnModelItem';\nimport type { ToolPanelColumnCompParams } from './columnToolPanel';\nimport type { ModelItemUtils } from './modelItemUtils';\nimport { PrimaryColsListPanelItemDragFeature } from './primaryColsListPanelItemDragFeature';\nimport { ToolPanelColumnComp } from './toolPanelColumnComp';\nimport { ToolPanelColumnGroupComp } from './toolPanelColumnGroupComp';\n\nclass UIColumnModel implements VirtualListModel {\n    private readonly items: ColumnModelItem[];\n\n    constructor(items: ColumnModelItem[]) {\n        this.items = items;\n    }\n\n    public getRowCount(): number {\n        return this.items.length;\n    }\n\n    public getRow(index: number): ColumnModelItem {\n        return this.items[index];\n    }\n}\n\nconst PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';\n\nexport type AgPrimaryColsListEvent = 'groupExpanded' | 'selectionChanged';\nexport class AgPrimaryColsList extends Component<AgPrimaryColsListEvent> {\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private colDefService: ToolPanelColDefService;\n    private modelItemUtils: ModelItemUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.colDefService = beans.toolPanelColDefService as ToolPanelColDefService;\n        this.modelItemUtils = beans.modelItemUtils as ModelItemUtils;\n    }\n\n    private allowDragging: boolean;\n    private filterText: string | null;\n    private expandGroupsByDefault: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n\n    private groupsExist: boolean;\n\n    private virtualList: VirtualList;\n\n    private allColsTree: ColumnModelItem[];\n    private displayedColsList: ColumnModelItem[];\n    private destroyColumnItemFuncs: (() => void)[] = [];\n    private hasLoadedInitialState: boolean = false;\n    private isInitialState: boolean = false;\n\n    constructor() {\n        super(/* html */ `<div class=\"${PRIMARY_COLS_LIST_PANEL_CLASS}\" role=\"presentation\"></div>`);\n    }\n\n    public override destroy(): void {\n        this.destroyColumnTree();\n        super.destroy();\n    }\n\n    private destroyColumnTree(): void {\n        this.allColsTree = [];\n        this.destroyColumnItemFuncs.forEach((f) => f());\n        this.destroyColumnItemFuncs = [];\n    }\n\n    public init(params: ToolPanelColumnCompParams, allowDragging: boolean, eventType: ColumnEventType): void {\n        this.params = params;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedEventListeners({ columnMoved: this.onColumnsChanged.bind(this) });\n        }\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: this.onColumnsChanged.bind(this),\n        });\n\n        const listener = this.fireSelectionChangedEvent.bind(this);\n        this.addManagedEventListeners({\n            columnPivotChanged: listener,\n            columnPivotModeChanged: listener,\n            columnRowGroupChanged: listener,\n            columnValueChanged: listener,\n            columnVisible: listener,\n            newColumnsLoaded: listener,\n        });\n\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n\n        this.virtualList = this.createManagedBean(\n            new VirtualList({\n                cssIdentifier: 'column-select',\n                ariaRole: 'tree',\n            })\n        );\n\n        this.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setComponentCreator((item: ColumnModelItem, listItemElement: HTMLElement) => {\n            _setAriaLevel(listItemElement, item.getDept() + 1);\n            return this.createComponentFromItem(item, listItemElement);\n        });\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n\n        if (this.params.suppressColumnMove) {\n            return;\n        }\n\n        this.createManagedBean(new PrimaryColsListPanelItemDragFeature(this, this.virtualList));\n    }\n\n    private createComponentFromItem(item: ColumnModelItem, listItemElement: HTMLElement): Component {\n        if (item.isGroup()) {\n            const renderedGroup = new ToolPanelColumnGroupComp(\n                item,\n                this.allowDragging,\n                this.eventType,\n                listItemElement\n            );\n            this.createBean(renderedGroup);\n\n            return renderedGroup;\n        }\n\n        const columnComp = new ToolPanelColumnComp(item, this.allowDragging, this.groupsExist, listItemElement);\n        this.createBean(columnComp);\n\n        return columnComp;\n    }\n\n    public onColumnsChanged(): void {\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        const expandedStates = this.getExpandedStates();\n\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n\n        if (shouldSyncColumnLayoutWithGrid) {\n            this.buildTreeFromWhatGridIsDisplaying();\n        } else {\n            this.buildTreeFromProvidedColumnDefs();\n        }\n\n        this.setExpandedStates(expandedStates);\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n\n        this.isInitialState = false;\n    }\n\n    public getDisplayedColsList(): ColumnModelItem[] {\n        return this.displayedColsList;\n    }\n\n    private getExpandedStates(): { [key: string]: boolean } {\n        const res: { [id: string]: boolean } = {};\n\n        if (this.isInitialState) {\n            const { expandedGroupIds } = this.params.initialState as ColumnToolPanelState;\n            expandedGroupIds.forEach((id) => {\n                res[id] = true;\n            });\n            return res;\n        }\n\n        if (!this.allColsTree) {\n            return {};\n        }\n\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) {\n                // group should always exist, this is defensive\n                res[colGroup.getId()] = item.isExpanded();\n            }\n        });\n\n        return res;\n    }\n\n    private setExpandedStates(states: { [key: string]: boolean }): void {\n        if (!this.allColsTree) {\n            return;\n        }\n\n        const { isInitialState } = this;\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) {\n                // group should always exist, this is defensive\n                const expanded = states[colGroup.getId()];\n                const groupExistedLastTime = expanded != null;\n                if (groupExistedLastTime || isInitialState) {\n                    item.setExpanded(!!expanded);\n                }\n            }\n        });\n    }\n\n    private buildTreeFromWhatGridIsDisplaying(): void {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    }\n\n    public setColumnLayout(colDefs: AbstractColDef[]): void {\n        const columnTree = this.colDefService.createColumnTree(colDefs);\n        this.buildListModel(columnTree);\n\n        // using col defs to check if groups exist as it could be a custom layout\n        this.groupsExist = colDefs.some((colDef) => {\n            return colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n        });\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        // add column / group comps to tool panel\n        this.buildListModel(this.columnModel.getColDefColTree());\n        this.groupsExist = this.columnModel.isProvidedColGroupsPresent();\n    }\n\n    private buildListModel(columnTree: (AgColumn | AgProvidedColumnGroup)[]): void {\n        const columnExpandedListener = this.onColumnExpanded.bind(this);\n        const addListeners = (item: ColumnModelItem) => {\n            item.addEventListener('expandedChanged', columnExpandedListener);\n            const removeFunc = item.removeEventListener.bind(item, 'expandedChanged', columnExpandedListener);\n            this.destroyColumnItemFuncs.push(removeFunc);\n        };\n\n        const recursivelyBuild = (\n            tree: (AgColumn | AgProvidedColumnGroup)[],\n            dept: number,\n            parentList: ColumnModelItem[]\n        ): void => {\n            tree.forEach((child) => {\n                if (isProvidedColumnGroup(child)) {\n                    createGroupItem(child, dept, parentList);\n                } else {\n                    createColumnItem(child, dept, parentList);\n                }\n            });\n        };\n\n        const createGroupItem = (\n            columnGroup: AgProvidedColumnGroup,\n            dept: number,\n            parentList: ColumnModelItem[]\n        ): void => {\n            const columnGroupDef = columnGroup.getColGroupDef();\n            const skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;\n            if (skipThisGroup) {\n                return;\n            }\n\n            if (columnGroup.isPadding()) {\n                recursivelyBuild(columnGroup.getChildren(), dept, parentList);\n                return;\n            }\n\n            const displayName = this.columnNameService.getDisplayNameForProvidedColumnGroup(\n                null,\n                columnGroup,\n                'columnToolPanel'\n            );\n            const item: ColumnModelItem = new ColumnModelItem(\n                displayName,\n                columnGroup,\n                dept,\n                true,\n                this.expandGroupsByDefault\n            );\n\n            parentList.push(item);\n            addListeners(item);\n\n            recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());\n        };\n\n        const createColumnItem = (column: AgColumn, dept: number, parentList: ColumnModelItem[]): void => {\n            const skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;\n\n            if (skipThisColumn) {\n                return;\n            }\n\n            const displayName = this.columnNameService.getDisplayNameForColumn(column, 'columnToolPanel');\n\n            parentList.push(new ColumnModelItem(displayName, column, dept));\n        };\n\n        this.destroyColumnTree();\n        recursivelyBuild(columnTree, 0, this.allColsTree);\n    }\n\n    private onColumnExpanded(): void {\n        this.flattenAndFilterModel();\n    }\n\n    private flattenAndFilterModel(): void {\n        this.displayedColsList = [];\n\n        const recursiveFunc = (item: ColumnModelItem) => {\n            if (!item.isPassesFilter()) {\n                return;\n            }\n            this.displayedColsList.push(item);\n            if (item.isGroup() && item.isExpanded()) {\n                item.getChildren().forEach(recursiveFunc);\n            }\n        };\n\n        this.allColsTree.forEach(recursiveFunc);\n        this.virtualList.setModel(new UIColumnModel(this.displayedColsList));\n\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.virtualList.refresh();\n\n        if (focusedRow != null) {\n            this.focusRowIfAlive(focusedRow);\n        }\n\n        this.notifyListeners();\n\n        this.refreshAriaLabel();\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnListName = translate('ariaColumnPanelList', 'Column List');\n        const localeColumns = translate('columns', 'Columns');\n        const items = this.displayedColsList.length;\n\n        _setAriaLabel(this.virtualList.getAriaElement(), `${columnListName} ${items} ${localeColumns}`);\n    }\n\n    private focusRowIfAlive(rowIndex: number): void {\n        window.setTimeout(() => {\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private forEachItem(callback: (item: ColumnModelItem) => void): void {\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach((item) => {\n                callback(item);\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n            });\n        };\n\n        if (!this.allColsTree) {\n            return;\n        }\n\n        recursiveFunc(this.allColsTree);\n    }\n\n    public doSetExpandedAll(value: boolean): void {\n        this.forEachItem((item) => {\n            if (item.isGroup()) {\n                item.setExpanded(value);\n            }\n        });\n    }\n\n    public setGroupsExpanded(expand: boolean, groupIds?: string[]): void {\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n\n        const expandedGroupIds: string[] = [];\n\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n\n            const groupId = item.getColumnGroup().getId();\n            if (groupIds.indexOf(groupId) >= 0) {\n                item.setExpanded(expand);\n                expandedGroupIds.push(groupId);\n            }\n        });\n\n        const unrecognisedGroupIds = groupIds.filter((groupId) => !_includes(expandedGroupIds, groupId));\n        if (unrecognisedGroupIds.length > 0) {\n            _warnOnce('unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    }\n\n    private getExpandState(): ExpandState {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        this.forEachItem((item) => {\n            if (!item.isGroup()) {\n                return;\n            }\n            if (item.isExpanded()) {\n                expandedCount++;\n            } else {\n                notExpandedCount++;\n            }\n        });\n\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return ExpandState.INDETERMINATE;\n        }\n\n        if (notExpandedCount > 0) {\n            return ExpandState.COLLAPSED;\n        }\n\n        return ExpandState.EXPANDED;\n    }\n\n    public doSetSelectedAll(selectAllChecked: boolean): void {\n        this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);\n    }\n\n    private getSelectionState(): boolean | undefined {\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.forEachItem((item) => {\n            if (item.isGroup()) {\n                return;\n            }\n            if (!item.isPassesFilter()) {\n                return;\n            }\n\n            const column = item.getColumn();\n            const colDef = column.getColDef();\n\n            let checked: boolean;\n\n            if (pivotMode) {\n                const noPivotModeOptionsAllowed =\n                    !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();\n            } else {\n                if (colDef.lockVisible) {\n                    return;\n                }\n\n                checked = column.isVisible();\n            }\n\n            checked ? checkedCount++ : uncheckedCount++;\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n\n        return !(checkedCount === 0 || uncheckedCount > 0);\n    }\n\n    public setFilterText(filterText: string) {\n        this.filterText = _exists(filterText) ? filterText.toLowerCase() : null;\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private markFilteredColumns(): void {\n        const passesFilter = (item: ColumnModelItem) => {\n            if (!_exists(this.filterText)) {\n                return true;\n            }\n\n            const displayName = item.getDisplayName();\n\n            return displayName == null || displayName.toLowerCase().indexOf(this.filterText) !== -1;\n        };\n\n        const recursivelyCheckFilter = (item: ColumnModelItem, parentPasses: boolean): boolean => {\n            let atLeastOneChildPassed = false;\n            if (item.isGroup()) {\n                const groupPasses = passesFilter(item);\n                item.getChildren().forEach((child) => {\n                    const childPasses = recursivelyCheckFilter(child, groupPasses || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n\n            const filterPasses = parentPasses || atLeastOneChildPassed ? true : passesFilter(item);\n            item.setPassesFilter(filterPasses);\n            return filterPasses;\n        };\n\n        this.allColsTree.forEach((item) => recursivelyCheckFilter(item, false));\n    }\n\n    private notifyListeners(): void {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    }\n\n    private fireGroupExpandedEvent(): void {\n        const expandState = this.getExpandState();\n        this.dispatchLocalEvent({ type: 'groupExpanded', state: expandState });\n    }\n\n    private fireSelectionChangedEvent(): void {\n        if (!this.allColsTree) {\n            return;\n        }\n        const selectionState = this.getSelectionState();\n        this.dispatchLocalEvent({ type: 'selectionChanged', state: selectionState });\n    }\n\n    public getExpandedGroups(): string[] {\n        const expandedGroupIds: string[] = [];\n\n        if (!this.allColsTree) {\n            return expandedGroupIds;\n        }\n\n        this.forEachItem((item) => {\n            if (item.isGroup() && item.isExpanded()) {\n                expandedGroupIds.push(item.getColumnGroup().getId());\n            }\n        });\n\n        return expandedGroupIds;\n    }\n}\n\nexport const AgPrimaryColsListSelector: ComponentSelector = {\n    selector: 'AG-PRIMARY-COLS-LIST',\n    component: AgPrimaryColsList,\n};\n", "import type { AgColumn, AgProvidedColumnGroup, IEventEmitter, IEventListener } from '@ag-grid-community/core';\nimport { LocalEventService } from '@ag-grid-community/core';\n\nexport type ColumnModelItemEvent = 'expandedChanged';\nexport class ColumnModelItem implements IEventEmitter<ColumnModelItemEvent> {\n    private localEventService: LocalEventService<ColumnModelItemEvent> = new LocalEventService();\n\n    private readonly group: boolean;\n    private readonly displayName: string | null;\n    private readonly columnGroup: AgProvidedColumnGroup;\n    private readonly column: AgColumn;\n    private readonly dept: number;\n    private readonly children: ColumnModelItem[];\n\n    private expanded: boolean | undefined;\n    private passesFilter: boolean;\n\n    constructor(\n        displayName: string | null,\n        columnOrGroup: AgColumn | AgProvidedColumnGroup,\n        dept: number,\n        group = false,\n        expanded?: boolean\n    ) {\n        this.displayName = displayName;\n        this.dept = dept;\n        this.group = group;\n\n        if (group) {\n            this.columnGroup = columnOrGroup as AgProvidedColumnGroup;\n            this.expanded = expanded;\n            this.children = [];\n        } else {\n            this.column = columnOrGroup as AgColumn;\n        }\n    }\n\n    public isGroup(): boolean {\n        return this.group;\n    }\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n    public getColumnGroup(): AgProvidedColumnGroup {\n        return this.columnGroup;\n    }\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n    public getDept(): number {\n        return this.dept;\n    }\n    public isExpanded(): boolean {\n        return !!this.expanded;\n    }\n    public getChildren(): ColumnModelItem[] {\n        return this.children;\n    }\n    public isPassesFilter(): boolean {\n        return this.passesFilter;\n    }\n\n    public setExpanded(expanded: boolean): void {\n        if (expanded === this.expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        this.localEventService.dispatchEvent({ type: 'expandedChanged' });\n    }\n\n    public setPassesFilter(passesFilter: boolean): void {\n        this.passesFilter = passesFilter;\n    }\n\n    public addEventListener<T extends ColumnModelItemEvent>(\n        eventType: T,\n        listener: IEventListener<ColumnModelItemEvent>\n    ): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener<T extends ColumnModelItemEvent>(\n        eventType: T,\n        listener: IEventListener<ColumnModelItemEvent>\n    ): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n}\n", "import type {\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnMoveService,\n    ColumnPanelItemDragStartEvent,\n} from '@ag-grid-community/core';\nimport { BeanStub, DragSourceType, isProvidedColumnGroup } from '@ag-grid-community/core';\nimport { VirtualListDragFeature } from '@ag-grid-enterprise/core';\nimport type { VirtualList, VirtualListDragItem } from '@ag-grid-enterprise/core';\n\nimport type { AgPrimaryColsList } from './agPrimaryColsList';\nimport type { ToolPanelColumnComp } from './toolPanelColumnComp';\nimport { ToolPanelColumnGroupComp } from './toolPanelColumnGroupComp';\n\nexport class PrimaryColsListPanelItemDragFeature extends BeanStub {\n    private columnModel: ColumnModel;\n    private columnMoveService: ColumnMoveService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnMoveService = beans.columnMoveService;\n    }\n\n    constructor(\n        private readonly comp: AgPrimaryColsList,\n        private readonly virtualList: VirtualList\n    ) {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.createManagedBean(\n            new VirtualListDragFeature<\n                AgPrimaryColsList,\n                ToolPanelColumnGroupComp | ToolPanelColumnComp,\n                AgColumn | AgProvidedColumnGroup,\n                ColumnPanelItemDragStartEvent\n            >(this.comp, this.virtualList, {\n                dragSourceType: DragSourceType.ToolPanel,\n                listItemDragStartEvent: 'columnPanelItemDragStart',\n                listItemDragEndEvent: 'columnPanelItemDragEnd',\n                eventSource: this.eventService,\n                getCurrentDragValue: (listItemDragStartEvent: ColumnPanelItemDragStartEvent) =>\n                    this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: (currentDragValue: AgColumn | AgProvidedColumnGroup | null) =>\n                    this.isMoveBlocked(currentDragValue),\n                getNumRows: (comp: AgPrimaryColsList) => comp.getDisplayedColsList().length,\n                moveItem: (\n                    currentDragValue: AgColumn | AgProvidedColumnGroup | null,\n                    lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem),\n            })\n        );\n    }\n\n    private getCurrentDragValue(\n        listItemDragStartEvent: ColumnPanelItemDragStartEvent\n    ): AgColumn | AgProvidedColumnGroup {\n        return listItemDragStartEvent.column as AgColumn | AgProvidedColumnGroup;\n    }\n\n    private isMoveBlocked(currentDragValue: AgColumn | AgProvidedColumnGroup | null): boolean {\n        const preventMoving = this.gos.get('suppressMovableColumns');\n        if (preventMoving) {\n            return true;\n        }\n\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const hasNotMovable = currentColumns.find((col) => {\n            const colDef = col.getColDef();\n            return !!colDef.suppressMovable || !!colDef.lockPosition;\n        });\n\n        return !!hasNotMovable;\n    }\n\n    private moveItem(\n        currentDragValue: AgColumn | AgProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): void {\n        const targetIndex: number | null = this.getTargetIndex(currentDragValue, lastHoveredListItem);\n\n        const columnsToMove: AgColumn[] = this.getCurrentColumns(currentDragValue);\n\n        if (targetIndex != null) {\n            this.columnMoveService.moveColumns(columnsToMove, targetIndex, 'toolPanelUi');\n        }\n    }\n\n    private getMoveDiff(currentDragValue: AgColumn | AgProvidedColumnGroup | null, end: number): number {\n        const allColumns = this.columnModel.getCols();\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const currentColumn = currentColumns[0];\n        const span = currentColumns.length;\n\n        const currentIndex = allColumns.indexOf(currentColumn as AgColumn);\n\n        if (currentIndex < end) {\n            return span;\n        }\n\n        return 0;\n    }\n\n    private getCurrentColumns(currentDragValue: AgColumn | AgProvidedColumnGroup | null): AgColumn[] {\n        if (isProvidedColumnGroup(currentDragValue)) {\n            return currentDragValue.getLeafColumns();\n        }\n        return [currentDragValue!];\n    }\n\n    private getTargetIndex(\n        currentDragValue: AgColumn | AgProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): number | null {\n        if (!lastHoveredListItem) {\n            return null;\n        }\n        const columnItemComponent = lastHoveredListItem.component;\n        let isBefore = lastHoveredListItem.position === 'top';\n\n        let targetColumn: AgColumn;\n\n        if (columnItemComponent instanceof ToolPanelColumnGroupComp) {\n            const columns = columnItemComponent.getColumns();\n            targetColumn = columns[0];\n            isBefore = true;\n        } else {\n            targetColumn = columnItemComponent.getColumn();\n        }\n\n        // if the target col is in the cols to be moved, no index to move.\n        const movingCols = this.getCurrentColumns(currentDragValue);\n        if (movingCols.indexOf(targetColumn) !== -1) {\n            return null;\n        }\n\n        const targetColumnIndex = this.columnModel.getCols().indexOf(targetColumn as AgColumn);\n        const adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;\n        const diff = this.getMoveDiff(currentDragValue, adjustedTarget);\n\n        return adjustedTarget - diff;\n    }\n}\n", "import type {\n    AgCheckbox,\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnEventType,\n    ColumnModel,\n    ColumnPanelItemDragEndEvent,\n    ColumnPanelItemDragStartEvent,\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    IAggFunc,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    Component,\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    TouchListener,\n    _createIcon,\n    _createIconNoSpan,\n    _getToolPanelClassesFromColDef,\n    _setAriaDescribedBy,\n    _setAriaExpanded,\n    _setAriaLabel,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport type { ColumnModelItem } from './columnModelItem';\nimport type { ModelItemUtils } from './modelItemUtils';\nimport { ToolPanelContextMenu } from './toolPanelContextMenu';\n\nexport class ToolPanelColumnGroupComp extends Component {\n    private columnModel: ColumnModel;\n    private dragAndDropService: DragAndDropService;\n    private modelItemUtils: ModelItemUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.modelItemUtils = beans.modelItemUtils as ModelItemUtils;\n    }\n\n    private readonly cbSelect: AgCheckbox = RefPlaceholder;\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n\n    private readonly eGroupOpenedIcon: Element = RefPlaceholder;\n    private readonly eGroupClosedIcon: Element = RefPlaceholder;\n    private readonly eColumnGroupIcons: Element = RefPlaceholder;\n\n    private eDragHandle: Element;\n\n    private readonly columnGroup: AgProvidedColumnGroup;\n    private readonly columnDept: number;\n\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        private readonly modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly eventType: ColumnEventType,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.modelItem = modelItem;\n        this.columnGroup = modelItem.getColumnGroup();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n        this.allowDragging = allowDragging;\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(\n            /* html */ `<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" data-ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" data-ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" data-ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox data-ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" data-ref=\"eLabel\"></span>\n        </div>`,\n            [AgCheckboxSelector]\n        );\n\n        this.eDragHandle = _createIconNoSpan('columnDrag', this.gos)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-group-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n        this.setupExpandContract();\n\n        this.addCssClass('ag-column-select-indent-' + this.columnDept);\n        this.getGui().style.setProperty('--ag-indentation-level', String(this.columnDept));\n\n        this.addManagedEventListeners({ columnPivotModeChanged: this.onColumnStateChanged.bind(this) });\n\n        this.addManagedElementListeners(this.eLabel, { click: this.onLabelClicked.bind(this) });\n        this.addManagedListeners(this.cbSelect, { fieldValueChanged: this.onCheckboxChanged.bind(this) });\n        this.addManagedListeners(this.modelItem, { expandedChanged: this.onExpandChanged.bind(this) });\n        this.addManagedListeners(this.focusWrapper, {\n            keydown: this.handleKeyDown.bind(this),\n            contextmenu: this.onContextMenu.bind(this),\n        });\n\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        this.refreshAriaExpanded();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n\n        const classes = _getToolPanelClassesFromColDef(\n            this.columnGroup.getColGroupDef(),\n            this.gos,\n            null,\n            this.columnGroup\n        );\n        classes.forEach((c) => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumns(): AgColumn[] {\n        return this.columnGroup.getLeafColumns();\n    }\n\n    private setupTooltip(): void {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n\n        if (!colGroupDef) {\n            return;\n        }\n\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n\n        const refresh = () => {\n            const newTooltipText = colGroupDef.headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumnGroup';\n        return res;\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.modelItem.setExpanded(false);\n                break;\n            case KeyCode.RIGHT:\n                e.preventDefault();\n                this.modelItem.setExpanded(true);\n                break;\n            case KeyCode.SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n                break;\n        }\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { columnGroup, gos } = this;\n\n        if (gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(columnGroup, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n\n    private addVisibilityListenersToAllChildren(): void {\n        const listener = this.onColumnStateChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach((column) => {\n            this.addManagedListeners(column, {\n                visibleChanged: listener,\n                columnValueChanged: listener,\n                columnPivotChanged: listener,\n                columnRowGroupChanged: listener,\n            });\n        });\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: 'columnPanelItemDragStart',\n                    column: this.columnGroup,\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: 'columnPanelItemDragEnd',\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: this.columnGroup.getLeafColumns(),\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: this.eventType,\n                    });\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            },\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const columns = this.columnGroup.getLeafColumns();\n        const visibleState: { [key: string]: boolean } = {};\n        const pivotState: {\n            [key: string]: {\n                pivot?: boolean;\n                rowGroup?: boolean;\n                aggFunc?: string | IAggFunc | null;\n            };\n        } = {};\n        columns.forEach((col) => {\n            const colId = col.getId();\n            visibleState[colId] = col.isVisible();\n            pivotState[colId] = this.modelItemUtils.createPivotState(col);\n        });\n\n        return {\n            columns,\n            visibleState,\n            pivotState,\n        };\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(_createIcon('columnSelectClosed', this.gos, null));\n        this.eGroupOpenedIcon.appendChild(_createIcon('columnSelectOpen', this.gos, null));\n\n        const listener = this.onExpandOrContractClicked.bind(this);\n        this.addManagedElementListeners(this.eGroupClosedIcon, { click: listener });\n        this.addManagedElementListeners(this.eGroupOpenedIcon, { click: listener });\n\n        const touchListener = new TouchListener(this.eColumnGroupIcons, true);\n        this.addManagedListeners(touchListener, { tap: listener });\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n\n    private onLabelClicked(): void {\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private getVisibleLeafColumns(): AgColumn[] {\n        const childColumns: AgColumn[] = [];\n\n        const extractCols = (children: ColumnModelItem[]) => {\n            children.forEach((child) => {\n                if (!child.isPassesFilter()) {\n                    return;\n                }\n                if (child.isGroup()) {\n                    extractCols(child.getChildren());\n                } else {\n                    childColumns.push(child.getColumn());\n                }\n            });\n        };\n\n        extractCols(this.modelItem.getChildren());\n\n        return childColumns;\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        this.refreshAriaLabel();\n\n        if (this.processingColumnStateChange) {\n            return;\n        }\n\n        this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumnGroup', 'Column Group');\n        const checkboxValue = this.cbSelect.getValue();\n        const state =\n            checkboxValue === undefined\n                ? translate('ariaIndeterminate', 'indeterminate')\n                : checkboxValue\n                  ? translate('ariaVisible', 'visible')\n                  : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    public onColumnStateChanged(): void {\n        const selectedValue = this.workOutSelectedValue();\n        const readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setValue(selectedValue);\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.addOrRemoveCssClass('ag-column-select-column-group-readonly', readOnlyValue);\n        this.processingColumnStateChange = false;\n    }\n\n    private workOutSelectedValue(): boolean | undefined {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        const visibleLeafColumns = this.getVisibleLeafColumns();\n\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        visibleLeafColumns.forEach((column) => {\n            if (!pivotMode && column.getColDef().lockVisible) {\n                return;\n            }\n\n            if (this.isColumnChecked(column, pivotMode)) {\n                checkedCount++;\n            } else {\n                uncheckedCount++;\n            }\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n\n        return checkedCount > 0;\n    }\n\n    private workOutReadOnlyValue(): boolean {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        let colsThatCanAction = 0;\n\n        this.columnGroup.getLeafColumns().forEach((col) => {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            } else {\n                if (!col.getColDef().lockVisible) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n\n        return colsThatCanAction === 0;\n    }\n\n    private isColumnChecked(column: AgColumn, pivotMode: boolean): boolean {\n        if (pivotMode) {\n            const pivoted = column.isPivotActive();\n            const grouped = column.isRowGroupActive();\n            const aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n\n        return column.isVisible();\n    }\n\n    private onExpandOrContractClicked(): void {\n        const oldState = this.modelItem.isExpanded();\n        this.modelItem.setExpanded(!oldState);\n    }\n\n    private onExpandChanged() {\n        this.setOpenClosedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private setOpenClosedIcons(): void {\n        const folderOpen = this.modelItem.isExpanded();\n        _setDisplayed(this.eGroupClosedIcon, !folderOpen);\n        _setDisplayed(this.eGroupOpenedIcon, folderOpen);\n    }\n\n    private refreshAriaExpanded(): void {\n        _setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        const cbValue = this.cbSelect.getValue();\n        const readOnly = this.cbSelect.isReadOnly();\n\n        if (!readOnly && ((value && !cbValue) || (!value && cbValue))) {\n            this.cbSelect.toggle();\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public setSelected(selected: boolean) {\n        this.cbSelect.setValue(selected, true);\n    }\n}\n", "import type {\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    FocusService,\n    FuncColsService,\n    MenuItemDef,\n    PopupService,\n} from '@ag-grid-community/core';\nimport { Component, _createIconNoSpan, isColumn, isProvidedColumnGroup } from '@ag-grid-community/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\ntype MenuItemName = 'rowGroup' | 'value' | 'pivot';\n\ntype MenuItemProperty = {\n    allowedFunction: (col: AgColumn) => boolean;\n    activeFunction: (col: AgColumn) => boolean;\n    activateLabel: (name: string) => string;\n    deactivateLabel: (name: string) => string;\n    activateFunction: () => void;\n    deActivateFunction: () => void;\n    addIcon: string;\n    removeIcon: string;\n};\n\nexport class ToolPanelContextMenu extends Component {\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n    private popupService: PopupService;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n        this.popupService = beans.popupService;\n        this.focusService = beans.focusService;\n    }\n\n    private columns: AgColumn[];\n    private allowGrouping: boolean;\n    private allowValues: boolean;\n    private allowPivoting: boolean;\n    private menuItemMap: Map<MenuItemName, MenuItemProperty>;\n    private displayName: string | null = null;\n\n    constructor(\n        private readonly column: AgColumn | AgProvidedColumnGroup,\n        private readonly mouseEvent: MouseEvent,\n        private readonly parentEl: HTMLElement\n    ) {\n        super(/* html */ `<div class=\"ag-menu\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.initializeProperties(this.column);\n        this.buildMenuItemMap();\n\n        if (isColumn(this.column)) {\n            this.displayName = this.columnNameService.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        } else {\n            this.displayName = this.columnNameService.getDisplayNameForProvidedColumnGroup(\n                null,\n                this.column,\n                'columnToolPanel'\n            );\n        }\n\n        if (this.isActive()) {\n            this.mouseEvent.preventDefault();\n            const menuItemsMapped: MenuItemDef[] = this.getMappedMenuItems();\n            if (menuItemsMapped.length === 0) {\n                return;\n            }\n\n            this.displayContextMenu(menuItemsMapped);\n        }\n    }\n\n    private initializeProperties(column: AgColumn | AgProvidedColumnGroup): void {\n        if (isProvidedColumnGroup(column)) {\n            this.columns = column.getLeafColumns();\n        } else {\n            this.columns = [column];\n        }\n\n        this.allowGrouping = this.columns.some((col) => col.isPrimary() && col.isAllowRowGroup());\n        this.allowValues = this.columns.some((col) => col.isPrimary() && col.isAllowValue());\n        this.allowPivoting =\n            this.columnModel.isPivotMode() && this.columns.some((col) => col.isPrimary() && col.isAllowPivot());\n    }\n\n    private buildMenuItemMap(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        this.menuItemMap = new Map<MenuItemName, MenuItemProperty>();\n        this.menuItemMap.set('rowGroup', {\n            allowedFunction: (col) =>\n                col.isPrimary() && col.isAllowRowGroup() && !this.columnModel.isColGroupLocked(col),\n            activeFunction: (col) => col.isRowGroupActive(),\n            activateLabel: () => `${localeTextFunc('groupBy', 'Group by')} ${this.displayName}`,\n            deactivateLabel: () => `${localeTextFunc('ungroupBy', 'Un-Group by')} ${this.displayName}`,\n            activateFunction: () => {\n                const groupedColumns = this.funcColsService.getRowGroupColumns();\n                this.funcColsService.setRowGroupColumns(this.addColumnsToList(groupedColumns), 'toolPanelUi');\n            },\n            deActivateFunction: () => {\n                const groupedColumns = this.funcColsService.getRowGroupColumns();\n                this.funcColsService.setRowGroupColumns(this.removeColumnsFromList(groupedColumns), 'toolPanelUi');\n            },\n            addIcon: 'menuAddRowGroup',\n            removeIcon: 'menuRemoveRowGroup',\n        });\n\n        this.menuItemMap.set('value', {\n            allowedFunction: (col) => col.isPrimary() && col.isAllowValue(),\n            activeFunction: (col) => col.isValueActive(),\n            activateLabel: () =>\n                localeTextFunc('addToValues', `Add ${this.displayName} to values`, [this.displayName!]),\n            deactivateLabel: () =>\n                localeTextFunc('removeFromValues', `Remove ${this.displayName} from values`, [this.displayName!]),\n            activateFunction: () => {\n                const valueColumns = this.funcColsService.getValueColumns();\n                this.funcColsService.setValueColumns(this.addColumnsToList(valueColumns), 'toolPanelUi');\n            },\n            deActivateFunction: () => {\n                const valueColumns = this.funcColsService.getValueColumns();\n                this.funcColsService.setValueColumns(this.removeColumnsFromList(valueColumns), 'toolPanelUi');\n            },\n            addIcon: 'valuePanel',\n            removeIcon: 'valuePanel',\n        });\n\n        this.menuItemMap.set('pivot', {\n            allowedFunction: (col) => this.columnModel.isPivotMode() && col.isPrimary() && col.isAllowPivot(),\n            activeFunction: (col) => col.isPivotActive(),\n            activateLabel: () =>\n                localeTextFunc('addToLabels', `Add ${this.displayName} to labels`, [this.displayName!]),\n            deactivateLabel: () =>\n                localeTextFunc('removeFromLabels', `Remove ${this.displayName} from labels`, [this.displayName!]),\n            activateFunction: () => {\n                const pivotColumns = this.funcColsService.getPivotColumns();\n                this.funcColsService.setPivotColumns(this.addColumnsToList(pivotColumns), 'toolPanelUi');\n            },\n            deActivateFunction: () => {\n                const pivotColumns = this.funcColsService.getPivotColumns();\n                this.funcColsService.setPivotColumns(this.removeColumnsFromList(pivotColumns), 'toolPanelUi');\n            },\n            addIcon: 'pivotPanel',\n            removeIcon: 'pivotPanel',\n        });\n    }\n\n    private addColumnsToList(columnList: AgColumn[]): AgColumn[] {\n        return [...columnList].concat(this.columns.filter((col) => columnList.indexOf(col) === -1));\n    }\n\n    private removeColumnsFromList(columnList: AgColumn[]): AgColumn[] {\n        return columnList.filter((col) => this.columns.indexOf(col) === -1);\n    }\n\n    private displayContextMenu(menuItemsMapped: MenuItemDef[]): void {\n        const eGui = this.getGui();\n        const menuList = this.createBean(new AgMenuList());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let hideFunc = () => {};\n\n        eGui.appendChild(menuList.getGui());\n        menuList.addMenuItems(menuItemsMapped);\n        menuList.addManagedListeners(menuList, {\n            closeMenu: () => {\n                this.parentEl.focus();\n                hideFunc();\n            },\n        });\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            afterGuiAttached: () => this.focusService.focusInto(menuList.getGui()),\n            ariaLabel: localeTextFunc('ariaLabelContextMenu', 'Context Menu'),\n            closedCallback: (e: KeyboardEvent) => {\n                if (e instanceof KeyboardEvent) {\n                    this.parentEl.focus();\n                }\n                this.destroyBean(menuList);\n            },\n        });\n\n        if (addPopupRes) {\n            hideFunc = addPopupRes.hideFunc;\n        }\n\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'columnContextMenu',\n            mouseEvent: this.mouseEvent,\n            ePopup: eGui,\n        });\n    }\n\n    private isActive(): boolean {\n        return this.allowGrouping || this.allowValues || this.allowPivoting;\n    }\n\n    private getMappedMenuItems(): MenuItemDef[] {\n        const ret: MenuItemDef[] = [];\n        for (const val of this.menuItemMap.values()) {\n            const isInactive = this.columns.some((col) => val.allowedFunction(col) && !val.activeFunction(col));\n            const isActive = this.columns.some((col) => val.allowedFunction(col) && val.activeFunction(col));\n\n            if (isInactive) {\n                ret.push({\n                    name: val.activateLabel(this.displayName!),\n                    icon: _createIconNoSpan(val.addIcon, this.gos, null),\n                    action: () => val.activateFunction(),\n                });\n            }\n\n            if (isActive) {\n                ret.push({\n                    name: val.deactivateLabel(this.displayName!),\n                    icon: _createIconNoSpan(val.removeIcon, this.gos, null),\n                    action: () => val.deActivateFunction(),\n                });\n            }\n        }\n\n        return ret;\n    }\n}\n", "import type {\n    AgCheckbox,\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    ColumnPanelItemDragEndEvent,\n    ColumnPanelItemDragStartEvent,\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    Component,\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _escapeString,\n    _getToolPanelClassesFromColDef,\n    _setAriaDescribedBy,\n    _setAriaLabel,\n    _setDisplayed,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { ColumnModelItem } from './columnModelItem';\nimport type { ModelItemUtils } from './modelItemUtils';\nimport { ToolPanelContextMenu } from './toolPanelContextMenu';\n\nexport class ToolPanelColumnComp extends Component {\n    private columnModel: ColumnModel;\n    private dragAndDropService: DragAndDropService;\n    private modelItemUtils: ModelItemUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.dragAndDropService = beans.dragAndDropService;\n        this.modelItemUtils = beans.modelItemUtils as ModelItemUtils;\n    }\n\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly cbSelect: AgCheckbox = RefPlaceholder;\n\n    private column: AgColumn;\n    private columnDept: number;\n    private eDragHandle: Element;\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly groupsExist: boolean,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.column = modelItem.getColumn();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(\n            /* html */ `<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox data-ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" data-ref=\"eLabel\"></span>\n        </div>`,\n            [AgCheckboxSelector]\n        );\n        this.eDragHandle = _createIconNoSpan('columnDrag', this.gos)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        const displayNameSanitised: any = _escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        const indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(`ag-column-select-indent-${indent}`);\n        this.getGui().style.setProperty('--ag-indentation-level', String(indent));\n\n        this.setupDragging();\n\n        const onColStateChanged = this.onColumnStateChanged.bind(this);\n        this.addManagedEventListeners({ columnPivotModeChanged: onColStateChanged });\n\n        this.addManagedListeners(this.column, {\n            columnValueChanged: onColStateChanged,\n            columnPivotChanged: onColStateChanged,\n            columnRowGroupChanged: onColStateChanged,\n            visibleChanged: onColStateChanged,\n        });\n        this.addManagedListeners(this.focusWrapper, {\n            keydown: this.handleKeyDown.bind(this),\n            contextmenu: this.onContextMenu.bind(this),\n        });\n\n        this.addManagedPropertyListener('functionsReadOnly', this.onColumnStateChanged.bind(this));\n\n        this.addManagedListeners(this.cbSelect, { fieldValueChanged: this.onCheckboxChanged.bind(this) });\n        this.addManagedElementListeners(this.eLabel, { click: this.onLabelClicked.bind(this) });\n\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n\n        this.setupTooltip();\n\n        const classes = _getToolPanelClassesFromColDef(this.column.getColDef(), this.gos, this.column, null);\n        classes.forEach((c) => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n\n    private setupTooltip(): void {\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumn', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { column, gos } = this;\n\n        if (gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(column, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        });\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    }\n\n    private onLabelClicked(): void {\n        if (this.gos.get('functionsReadOnly')) {\n            return;\n        }\n\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) {\n            return;\n        }\n\n        this.refreshAriaLabel();\n\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumn', 'Column');\n        const state = this.cbSelect.getValue()\n            ? translate('ariaVisible', 'visible')\n            : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => (hideColumnOnExit ? 'hide' : 'notAllowed'),\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gos.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: 'columnPanelItemDragStart',\n                    column: this.column,\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: 'columnPanelItemDragEnd',\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: [this.column],\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: 'toolPanelUi',\n                    });\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            },\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const colId = this.column.getColId();\n        const visibleState = { [colId]: this.column.isVisible() };\n        const pivotState = { [colId]: this.modelItemUtils.createPivotState(this.column) };\n        return {\n            columns: [this.column],\n            visibleState,\n            pivotState,\n        };\n    }\n\n    private onColumnStateChanged(): void {\n        this.processingColumnStateChange = true;\n        const isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            const anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        } else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n\n        let canBeToggled = true;\n        let canBeDragged = true;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            const functionsReadOnly = this.gos.get('functionsReadOnly');\n            //  b) column is not allow any functions on it\n            const noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            canBeToggled = !functionsReadOnly && !noFunctionsAllowed;\n            canBeDragged = canBeToggled;\n        } else {\n            const { enableRowGroup, enableValue, lockPosition, suppressMovable, lockVisible } = this.column.getColDef();\n            const forceDraggable = !!enableRowGroup || !!enableValue;\n            const disableDraggable = !!lockPosition || !!suppressMovable;\n            canBeToggled = !lockVisible;\n            canBeDragged = forceDraggable || !disableDraggable;\n        }\n\n        this.cbSelect.setReadOnly(!canBeToggled);\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !canBeDragged);\n        this.addOrRemoveCssClass('ag-column-select-column-readonly', !canBeDragged && !canBeToggled);\n\n        this.cbSelect.setPassive(false);\n\n        this.processingColumnStateChange = false;\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public isExpandable(): boolean {\n        return false;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public setExpanded(_value: boolean): void {\n        _warnOnce('can not expand a column item that does not represent a column group header');\n    }\n}\n", "import type { AgCheckbox, BeanCollection, ColumnModel, CtrlsService } from '@ag-grid-community/core';\nimport { AgToggleButtonSelector, Component, RefPlaceholder } from '@ag-grid-community/core';\n\nexport class PivotModePanel extends Component {\n    private columnModel: ColumnModel;\n    private ctrlsService: CtrlsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.ctrlsService = beans.ctrlsService;\n    }\n\n    private readonly cbPivotMode: AgCheckbox = RefPlaceholder;\n\n    private createTemplate(): string {\n        return /* html */ `<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button data-ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>`;\n    }\n\n    public postConstruct(): void {\n        this.setTemplate(this.createTemplate(), [AgToggleButtonSelector]);\n\n        this.cbPivotMode.setValue(this.columnModel.isPivotMode());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n\n        this.addManagedListeners(this.cbPivotMode, { fieldValueChanged: this.onBtPivotMode.bind(this) });\n        const listener = this.onPivotModeChanged.bind(this);\n        this.addManagedEventListeners({\n            newColumnsLoaded: listener,\n            columnPivotModeChanged: listener,\n        });\n    }\n\n    private onBtPivotMode(): void {\n        const newValue = !!this.cbPivotMode.getValue();\n        if (newValue !== this.columnModel.isPivotMode()) {\n            this.gos.updateGridOptions({ options: { pivotMode: newValue }, source: 'toolPanelUi' as any });\n            this.ctrlsService.getHeaderRowContainerCtrls().forEach((c) => c.refresh());\n        }\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        this.cbPivotMode.setValue(pivotModeActive);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnApplyStateService,\n    ColumnEventType,\n    ColumnModel,\n    ColumnState,\n    IAggFunc,\n    IAggFuncService,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { ColumnModelItem } from './columnModelItem';\n\nexport class ModelItemUtils extends BeanStub implements NamedBean {\n    beanName = 'modelItemUtils' as const;\n\n    private aggFuncService?: IAggFuncService;\n    private columnModel: ColumnModel;\n    private columnApplyStateService: ColumnApplyStateService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.aggFuncService = beans.aggFuncService;\n        this.columnModel = beans.columnModel;\n        this.columnApplyStateService = beans.columnApplyStateService;\n    }\n\n    public selectAllChildren(colTree: ColumnModelItem[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        const cols = this.extractAllLeafColumns(colTree);\n        this.setAllColumns(cols, selectAllChecked, eventType);\n    }\n\n    public setColumn(col: AgColumn, selectAllChecked: boolean, eventType: ColumnEventType): void {\n        this.setAllColumns([col], selectAllChecked, eventType);\n    }\n\n    public setAllColumns(cols: AgColumn[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        if (this.columnModel.isPivotMode()) {\n            this.setAllPivot(cols, selectAllChecked, eventType);\n        } else {\n            this.setAllVisible(cols, selectAllChecked, eventType);\n        }\n    }\n\n    private extractAllLeafColumns(allItems: ColumnModelItem[]): AgColumn[] {\n        const res: AgColumn[] = [];\n\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach((item) => {\n                if (!item.isPassesFilter()) {\n                    return;\n                }\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                } else {\n                    res.push(item.getColumn());\n                }\n            });\n        };\n\n        recursiveFunc(allItems);\n\n        return res;\n    }\n\n    private setAllVisible(columns: AgColumn[], visible: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        columns.forEach((col) => {\n            if (col.getColDef().lockVisible) {\n                return;\n            }\n            if (col.isVisible() != visible) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    hide: !visible,\n                });\n            }\n        });\n\n        if (colStateItems.length > 0) {\n            this.columnApplyStateService.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n\n    private setAllPivot(columns: AgColumn[], value: boolean, eventType: ColumnEventType): void {\n        this.setAllPivotActive(columns, value, eventType);\n    }\n\n    private setAllPivotActive(columns: AgColumn[], value: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        const turnOnAction = (col: AgColumn) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) {\n                return;\n            }\n\n            if (col.isAllowValue()) {\n                const aggFunc =\n                    typeof col.getAggFunc() === 'string'\n                        ? col.getAggFunc()\n                        : this.aggFuncService?.getDefaultAggFunc(col);\n                colStateItems.push({\n                    colId: col.getId(),\n                    aggFunc: aggFunc,\n                });\n            } else if (col.isAllowRowGroup()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    rowGroup: true,\n                });\n            } else if (col.isAllowPivot()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: true,\n                });\n            }\n        };\n\n        const turnOffAction = (col: AgColumn) => {\n            const isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();\n            if (isActive) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: false,\n                    rowGroup: false,\n                    aggFunc: null,\n                });\n            }\n        };\n\n        const action = value ? turnOnAction : turnOffAction;\n\n        columns.forEach(action);\n\n        if (colStateItems.length > 0) {\n            this.columnApplyStateService.applyColumnState({ state: colStateItems }, eventType);\n        }\n    }\n\n    public updateColumns(params: {\n        columns: AgColumn[];\n        visibleState?: { [key: string]: boolean };\n        pivotState?: {\n            [key: string]: {\n                pivot?: boolean;\n                rowGroup?: boolean;\n                aggFunc?: string | IAggFunc | null;\n            };\n        };\n        eventType: ColumnEventType;\n    }): void {\n        const { columns, visibleState, pivotState, eventType } = params;\n        const state: ColumnState[] = columns.map((column) => {\n            const colId = column.getColId();\n            if (this.columnModel.isPivotMode()) {\n                const pivotStateForColumn = pivotState?.[colId];\n                return {\n                    colId,\n                    pivot: pivotStateForColumn?.pivot,\n                    rowGroup: pivotStateForColumn?.rowGroup,\n                    aggFunc: pivotStateForColumn?.aggFunc,\n                };\n            } else {\n                return {\n                    colId,\n                    hide: !visibleState?.[colId],\n                };\n            }\n        });\n        this.columnApplyStateService.applyColumnState({ state }, eventType);\n    }\n\n    public createPivotState(column: AgColumn): {\n        pivot?: boolean;\n        rowGroup?: boolean;\n        aggFunc?: string | IAggFunc | null;\n    } {\n        return {\n            pivot: column.isPivotActive(),\n            rowGroup: column.isRowGroupActive(),\n            aggFunc: column.isValueActive() ? column.getAggFunc() : undefined,\n        };\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule, _FloatingFilterModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule, GroupCellRenderer, GroupCellRendererCtrl } from '@ag-grid-enterprise/core';\n\nimport { AggFuncService } from './rowGrouping/aggFuncService';\nimport { AggregationStage } from './rowGrouping/aggregationStage';\nimport { AutoColService } from './rowGrouping/autoColService';\nimport { ColumnDropZoneService } from './rowGrouping/columnDropZones/columnDropZoneService';\nimport { FilterAggregatesStage } from './rowGrouping/filterAggregatesStage';\nimport { GroupFilter } from './rowGrouping/groupFilter/groupFilter';\nimport { GroupFloatingFilterComp } from './rowGrouping/groupFilter/groupFloatingFilter';\nimport { GroupStage } from './rowGrouping/groupStage';\nimport { PivotColDefService } from './rowGrouping/pivotColDefService';\nimport { PivotStage } from './rowGrouping/pivotStage';\nimport {\n    addAggFunc,\n    addAggFuncs,\n    addPivotColumn,\n    addPivotColumns,\n    addRowGroupColumn,\n    addRowGroupColumns,\n    addValueColumn,\n    addValueColumns,\n    clearAggFuncs,\n    getPivotColumns,\n    getPivotResultColumn,\n    getPivotResultColumns,\n    getRowGroupColumns,\n    getValueColumns,\n    isPivotMode,\n    moveRowGroupColumn,\n    removePivotColumn,\n    removePivotColumns,\n    removeRowGroupColumn,\n    removeRowGroupColumns,\n    removeValueColumn,\n    removeValueColumns,\n    setColumnAggFunc,\n    setPivotColumns,\n    setPivotResultColumns,\n    setRowGroupColumns,\n    setValueColumns,\n} from './rowGrouping/rowGroupingApi';\nimport { ShowRowGroupColsService } from './rowGrouping/showRowGroupColsService';\nimport { VERSION } from './version';\n\nexport const RowGroupingCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.RowGroupingModule}-core`,\n    beans: [\n        AggregationStage,\n        FilterAggregatesStage,\n        GroupStage,\n        PivotColDefService,\n        PivotStage,\n        AggFuncService,\n        AutoColService,\n        ShowRowGroupColsService,\n        ColumnDropZoneService,\n    ],\n    userComponents: [\n        {\n            name: 'agGroupRowRenderer',\n            classImp: GroupCellRenderer,\n        },\n        {\n            name: 'agGroupCellRenderer',\n            classImp: GroupCellRenderer,\n        },\n    ],\n    controllers: [{ name: 'groupCellRendererCtrl', classImp: GroupCellRendererCtrl }],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const RowGroupingApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.RowGroupingModule}-api`,\n    apiFunctions: {\n        addAggFunc,\n        addAggFuncs,\n        clearAggFuncs,\n        setColumnAggFunc,\n        isPivotMode,\n        getPivotResultColumn,\n        setValueColumns,\n        getValueColumns,\n        removeValueColumn,\n        removeValueColumns,\n        addValueColumn,\n        addValueColumns,\n        setRowGroupColumns,\n        removeRowGroupColumn,\n        removeRowGroupColumns,\n        addRowGroupColumn,\n        addRowGroupColumns,\n        getRowGroupColumns,\n        moveRowGroupColumn,\n        setPivotColumns,\n        removePivotColumn,\n        removePivotColumns,\n        addPivotColumn,\n        addPivotColumns,\n        getPivotColumns,\n        setPivotResultColumns,\n        getPivotResultColumns,\n    },\n    dependantModules: [RowGroupingCoreModule],\n};\n\nexport const GroupFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-enterprise/group-filter',\n    userComponents: [{ name: 'agGroupColumnFilter', classImp: GroupFilter }],\n    dependantModules: [RowGroupingCoreModule, _ColumnFilterModule],\n};\n\nexport const GroupFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-enterprise/group-floating-filter',\n    userComponents: [{ name: 'agGroupColumnFloatingFilter', classImp: GroupFloatingFilterComp }],\n    dependantModules: [GroupFilterModule, _FloatingFilterModule],\n};\n\nexport const RowGroupingModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RowGroupingModule,\n    dependantModules: [RowGroupingCoreModule, RowGroupingApiModule, GroupFilterModule, GroupFloatingFilterModule],\n};\n", "import type { AgColumn, IAggFunc, IAggFuncParams, IAggFuncService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub, _exists, _existsAndNotEmpty, _includes, _iterateObject, _last } from '@ag-grid-community/core';\n\nconst defaultAggFuncNames = {\n    sum: 'Sum',\n    first: 'First',\n    last: 'Last',\n    min: 'Min',\n    max: 'Max',\n    count: 'Count',\n    avg: 'Average',\n} as const;\ntype DefaultAggFuncName = keyof typeof defaultAggFuncNames;\n\nexport class AggFuncService extends BeanStub implements NamedBean, IAggFuncService {\n    beanName = 'aggFuncService' as const;\n\n    private aggFuncsMap: { [key in string]: IAggFunc } = {};\n    private initialised = false;\n\n    public postConstruct(): void {\n        this.init();\n    }\n\n    private init() {\n        if (this.initialised) {\n            return;\n        }\n\n        this.initialiseWithDefaultAggregations();\n        this.addAggFuncs(this.gos.get('aggFuncs'));\n    }\n\n    private initialiseWithDefaultAggregations(): void {\n        const aggMap = this.aggFuncsMap as { [key in DefaultAggFuncName]: IAggFunc };\n        aggMap['sum'] = aggSum;\n        aggMap['first'] = aggFirst;\n        aggMap['last'] = aggLast;\n        aggMap['min'] = aggMin;\n        aggMap['max'] = aggMax;\n        aggMap['count'] = aggCount;\n        aggMap['avg'] = aggAvg;\n        this.initialised = true;\n    }\n\n    private isAggFuncPossible(column: AgColumn, func: string): boolean {\n        const allKeys = this.getFuncNames(column);\n        const allowed = _includes(allKeys, func);\n        const funcExists = _exists(this.aggFuncsMap[func]);\n        return allowed && funcExists;\n    }\n\n    public getDefaultFuncLabel(fctName: DefaultAggFuncName): string {\n        return defaultAggFuncNames[fctName] ?? fctName;\n    }\n\n    public getDefaultAggFunc(column: AgColumn): string | null {\n        const defaultAgg = column.getColDef().defaultAggFunc;\n\n        if (_exists(defaultAgg) && this.isAggFuncPossible(column, defaultAgg)) {\n            return defaultAgg;\n        }\n\n        if (this.isAggFuncPossible(column, 'sum')) {\n            return 'sum';\n        }\n\n        const allKeys = this.getFuncNames(column);\n        return _existsAndNotEmpty(allKeys) ? allKeys[0] : null;\n    }\n\n    public addAggFuncs(aggFuncs?: { [key: string]: IAggFunc }): void {\n        this.init();\n        _iterateObject(aggFuncs, (key: string, aggFunc: IAggFunc) => {\n            this.aggFuncsMap[key] = aggFunc;\n        });\n    }\n\n    public getAggFunc(name: string): IAggFunc {\n        this.init();\n        return this.aggFuncsMap[name];\n    }\n\n    public getFuncNames(column: AgColumn): string[] {\n        const userAllowedFuncs = column.getColDef().allowedAggFuncs;\n\n        return userAllowedFuncs == null ? Object.keys(this.aggFuncsMap).sort() : userAllowedFuncs;\n    }\n\n    public clear(): void {\n        this.aggFuncsMap = {};\n    }\n}\n\nfunction aggSum(params: IAggFuncParams): number | bigint {\n    const { values } = params;\n    let result: any = null; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if (typeof value === 'number') {\n            if (result === null) {\n                result = value;\n            } else {\n                result += typeof result === 'number' ? value : BigInt(value);\n            }\n        } else if (typeof value === 'bigint') {\n            if (result === null) {\n                result = value;\n            } else {\n                result = (typeof result === 'bigint' ? result : BigInt(result)) + value;\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction aggFirst(params: IAggFuncParams): any {\n    return params.values.length > 0 ? params.values[0] : null;\n}\n\nfunction aggLast(params: IAggFuncParams): any {\n    return params.values.length > 0 ? _last(params.values) : null;\n}\n\nfunction aggMin(params: IAggFuncParams): number | bigint | null {\n    const { values } = params;\n    let result: number | bigint | null = null;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result > value)) {\n            result = value;\n        }\n    }\n\n    return result;\n}\n\nfunction aggMax(params: IAggFuncParams): number | bigint | null {\n    const { values } = params;\n    let result: number | bigint | null = null;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if ((typeof value === 'number' || typeof value === 'bigint') && (result === null || result < value)) {\n            result = value;\n        }\n    }\n\n    return result;\n}\n\nfunction aggCount(params: IAggFuncParams) {\n    const { values } = params;\n    let result = 0;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        // check if the value is from a group, in which case use the group's count\n        result += value != null && typeof value.value === 'number' ? value.value : 1;\n    }\n\n    // the previous aggregation data\n    const existingAggData = params.rowNode?.aggData?.[params.column.getColId()];\n    if (existingAggData && existingAggData.value === result) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n\n    // it's important to wrap it in the object so we can determine if this is a group level\n    return {\n        value: result,\n        toString: function () {\n            return this.value.toString();\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        },\n    };\n}\n\n// the average function is tricky as the multiple levels require weighted averages\n// for the non-leaf node aggregations.\nfunction aggAvg(params: IAggFuncParams): {\n    value: number | bigint | null;\n    count: number;\n    toString(): string;\n    toNumber(): number;\n} {\n    const { values } = params;\n    let sum: any = 0; // the logic ensures that we never combine bigint arithmetic with numbers, but TS is hard to please\n    let count = 0;\n\n    // for optimum performance, we use a for loop here rather than calling any helper methods or using functional code\n    for (let i = 0; i < values.length; i++) {\n        const currentValue = values[i];\n        let valueToAdd = null;\n\n        if (typeof currentValue === 'number' || typeof currentValue === 'bigint') {\n            valueToAdd = currentValue;\n            count++;\n        } else if (\n            currentValue != null &&\n            (typeof currentValue.value === 'number' || typeof currentValue.value === 'bigint') &&\n            typeof currentValue.count === 'number'\n        ) {\n            // we are aggregating groups, so we take the aggregated values to calculated a weighted average\n            valueToAdd =\n                currentValue.value *\n                (typeof currentValue.value === 'number' ? currentValue.count : BigInt(currentValue.count));\n            count += currentValue.count;\n        }\n\n        if (typeof valueToAdd === 'number') {\n            sum += typeof sum === 'number' ? valueToAdd : BigInt(valueToAdd);\n        } else if (typeof valueToAdd === 'bigint') {\n            sum = (typeof sum === 'bigint' ? sum : BigInt(sum)) + valueToAdd;\n        }\n    }\n\n    let value = null;\n\n    // avoid divide by zero error\n    if (count > 0) {\n        value = sum / ((typeof sum === 'number' ? count : BigInt(count)) as any);\n    }\n\n    // the previous aggregation data\n    const existingAggData = params.rowNode?.aggData?.[params.column?.getColId()];\n    if (existingAggData && existingAggData.count === count && existingAggData.value === value) {\n        // the underlying values haven't changed, return the old object to avoid triggering change detection\n        return existingAggData;\n    }\n\n    // the result will be an object. when this cell is rendered, only the avg is shown.\n    // however when this cell is part of another aggregation, the count is also needed\n    // to create a weighted average for the next level.\n    return {\n        count,\n        value,\n        // the grid by default uses toString to render values for an object, so this\n        // is a trick to get the default cellRenderer to display the avg value\n        toString: function () {\n            return typeof this.value === 'number' || typeof this.value === 'bigint' ? this.value.toString() : '';\n        },\n        // used for sorting\n        toNumber: function () {\n            return this.value;\n        },\n    };\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ChangedPath,\n    ColumnModel,\n    FuncColsService,\n    GetGroupRowAggParams,\n    IAggFunc,\n    IAggFuncParams,\n    IRowNodeStage,\n    NamedBean,\n    PivotResultColsService,\n    RowNode,\n    StageExecuteParams,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce, _missingOrEmpty } from '@ag-grid-community/core';\n\nimport type { AggFuncService } from './aggFuncService';\n\ninterface AggregationDetails {\n    alwaysAggregateAtRootLevel: boolean;\n    groupIncludeTotalFooter: boolean;\n    changedPath: ChangedPath;\n    valueColumns: AgColumn[];\n    pivotColumns: AgColumn[];\n    filteredOnly: boolean;\n    userAggFunc: ((params: WithoutGridCommon<GetGroupRowAggParams<any, any>>) => any) | undefined;\n}\n\nexport class AggregationStage extends BeanStub implements NamedBean, IRowNodeStage {\n    beanName = 'aggregationStage' as const;\n\n    private columnModel: ColumnModel;\n    private valueService: ValueService;\n    private aggFuncService: AggFuncService;\n    private funcColsService: FuncColsService;\n    private pivotResultColsService: PivotResultColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.aggFuncService = beans.aggFuncService as AggFuncService;\n        this.funcColsService = beans.funcColsService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.valueService = beans.valueService;\n    }\n\n    // it's possible to recompute the aggregate without doing the other parts\n    // + api.refreshClientSideRowModel('aggregate')\n    public execute(params: StageExecuteParams): any {\n        // if changed path is active, it means we came from a) change detection or b) transaction update.\n        // for both of these, if no value columns are present, it means there is nothing to aggregate now\n        // and there is no cleanup to be done (as value columns don't change between transactions or change\n        // detections). if no value columns and no changed path, means we have to go through all nodes in\n        // case we need to clean up agg data from before.\n        const noValueColumns = _missingOrEmpty(this.funcColsService.getValueColumns());\n        const noUserAgg = !this.gos.getCallback('getGroupRowAgg');\n        const changedPathActive = params.changedPath && params.changedPath.isActive();\n        if (noValueColumns && noUserAgg && changedPathActive) {\n            return;\n        }\n\n        const aggDetails = this.createAggDetails(params);\n\n        this.recursivelyCreateAggData(aggDetails);\n    }\n\n    private createAggDetails(params: StageExecuteParams): AggregationDetails {\n        const pivotActive = this.columnModel.isPivotActive();\n\n        const measureColumns = this.funcColsService.getValueColumns();\n        const pivotColumns = pivotActive ? this.funcColsService.getPivotColumns() : [];\n\n        const aggDetails: AggregationDetails = {\n            alwaysAggregateAtRootLevel: this.gos.get('alwaysAggregateAtRootLevel'),\n            groupIncludeTotalFooter: !!this.gos.getGrandTotalRow(),\n            changedPath: params.changedPath!,\n            valueColumns: measureColumns,\n            pivotColumns: pivotColumns,\n            filteredOnly: !this.isSuppressAggFilteredOnly(),\n            userAggFunc: this.gos.getCallback('getGroupRowAgg') as any,\n        };\n\n        return aggDetails;\n    }\n\n    private isSuppressAggFilteredOnly() {\n        const isGroupAggFiltering = this.gos.getGroupAggFiltering() !== undefined;\n        return isGroupAggFiltering || this.gos.get('suppressAggFilteredOnly');\n    }\n\n    private recursivelyCreateAggData(aggDetails: AggregationDetails) {\n        const callback = (rowNode: RowNode) => {\n            const hasNoChildren = !rowNode.hasChildren();\n            if (hasNoChildren) {\n                // this check is needed for TreeData, in case the node is no longer a child,\n                // but it was a child previously.\n                if (rowNode.aggData) {\n                    rowNode.setAggData(null);\n                }\n                // never agg data for leaf nodes\n                return;\n            }\n\n            //Optionally enable the aggregation at the root Node\n            const isRootNode = rowNode.level === -1;\n            // if total footer is displayed, the value is in use\n            if (isRootNode && !aggDetails.groupIncludeTotalFooter) {\n                const notPivoting = !this.columnModel.isPivotMode();\n                if (!aggDetails.alwaysAggregateAtRootLevel && notPivoting) {\n                    rowNode.setAggData(null);\n                    return;\n                }\n            }\n\n            this.aggregateRowNode(rowNode, aggDetails);\n        };\n\n        aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);\n    }\n\n    private aggregateRowNode(rowNode: RowNode, aggDetails: AggregationDetails): void {\n        const measureColumnsMissing = aggDetails.valueColumns.length === 0;\n        const pivotColumnsMissing = aggDetails.pivotColumns.length === 0;\n\n        let aggResult: any;\n        if (aggDetails.userAggFunc) {\n            aggResult = aggDetails.userAggFunc({ nodes: rowNode.childrenAfterFilter! });\n        } else if (measureColumnsMissing) {\n            aggResult = null;\n        } else if (pivotColumnsMissing) {\n            aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);\n        } else {\n            aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);\n        }\n\n        rowNode.setAggData(aggResult);\n\n        // if we are grouping, then it's possible there is a sibling footer\n        // to the group, so update the data here also if there is one\n        if (rowNode.sibling) {\n            rowNode.sibling.setAggData(aggResult);\n        }\n    }\n\n    private aggregateRowNodeUsingValuesAndPivot(rowNode: RowNode): any {\n        const result: any = {};\n\n        const secondaryColumns = this.pivotResultColsService.getPivotResultCols()?.list ?? [];\n        let canSkipTotalColumns = true;\n        for (let i = 0; i < secondaryColumns.length; i++) {\n            const secondaryCol = secondaryColumns[i];\n            const colDef = secondaryCol.getColDef();\n\n            if (colDef.pivotTotalColumnIds != null) {\n                canSkipTotalColumns = false;\n                continue;\n            }\n\n            const keys: string[] = colDef.pivotKeys ?? [];\n            let values: any[];\n\n            if (rowNode.leafGroup) {\n                // lowest level group, get the values from the mapped set\n                values = this.getValuesFromMappedSet(rowNode.childrenMapped, keys, colDef.pivotValueColumn as AgColumn);\n            } else {\n                // value columns and pivot columns, non-leaf group\n                values = this.getValuesPivotNonLeaf(rowNode, colDef.colId!);\n            }\n\n            // bit of a memory drain storing null/undefined, but seems to speed up performance.\n            result[colDef.colId!] = this.aggregateValues(\n                values,\n                colDef.pivotValueColumn!.getAggFunc()!,\n                colDef.pivotValueColumn as AgColumn,\n                rowNode,\n                secondaryCol\n            );\n        }\n\n        if (!canSkipTotalColumns) {\n            for (let i = 0; i < secondaryColumns.length; i++) {\n                const secondaryCol = secondaryColumns[i];\n                const colDef = secondaryCol.getColDef();\n\n                if (colDef.pivotTotalColumnIds == null || !colDef.pivotTotalColumnIds.length) {\n                    continue;\n                }\n\n                const aggResults: any[] = colDef.pivotTotalColumnIds.map(\n                    (currentColId: string) => result[currentColId]\n                );\n                // bit of a memory drain storing null/undefined, but seems to speed up performance.\n                result[colDef.colId!] = this.aggregateValues(\n                    aggResults,\n                    colDef.pivotValueColumn!.getAggFunc()!,\n                    colDef.pivotValueColumn as AgColumn,\n                    rowNode,\n                    secondaryCol\n                );\n            }\n        }\n\n        return result;\n    }\n\n    private aggregateRowNodeUsingValuesOnly(rowNode: RowNode, aggDetails: AggregationDetails): any {\n        const result: any = {};\n\n        const changedValueColumns = aggDetails.changedPath.isActive()\n            ? aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : aggDetails.valueColumns;\n\n        const notChangedValueColumns = aggDetails.changedPath.isActive()\n            ? aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns)\n            : null;\n\n        const values2d = this.getValuesNormal(rowNode, changedValueColumns, aggDetails.filteredOnly);\n        const oldValues = rowNode.aggData;\n\n        changedValueColumns.forEach((valueColumn, index) => {\n            result[valueColumn.getId()] = this.aggregateValues(\n                values2d[index],\n                valueColumn.getAggFunc()!,\n                valueColumn,\n                rowNode\n            );\n        });\n\n        if (notChangedValueColumns && oldValues) {\n            notChangedValueColumns.forEach((valueColumn) => {\n                result[valueColumn.getId()] = oldValues[valueColumn.getId()];\n            });\n        }\n\n        return result;\n    }\n\n    private getValuesPivotNonLeaf(rowNode: RowNode, colId: string): any[] {\n        return rowNode.childrenAfterFilter!.map((childNode: RowNode) => childNode.aggData[colId]);\n    }\n\n    private getValuesFromMappedSet(mappedSet: any, keys: string[], valueColumn: AgColumn): any[] {\n        let mapPointer = mappedSet;\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            mapPointer = mapPointer ? mapPointer[key] : null;\n        }\n\n        if (!mapPointer) {\n            return [];\n        }\n\n        return mapPointer.map((rowNode: RowNode) => this.valueService.getValue(valueColumn, rowNode));\n    }\n\n    private getValuesNormal(rowNode: RowNode, valueColumns: AgColumn[], filteredOnly: boolean): any[][] {\n        // create 2d array, of all values for all valueColumns\n        const values: any[][] = [];\n        valueColumns.forEach(() => values.push([]));\n\n        const valueColumnCount = valueColumns.length;\n\n        const nodeList = filteredOnly ? rowNode.childrenAfterFilter : rowNode.childrenAfterGroup;\n        const rowCount = nodeList!.length;\n\n        for (let i = 0; i < rowCount; i++) {\n            const childNode = nodeList![i];\n            for (let j = 0; j < valueColumnCount; j++) {\n                const valueColumn = valueColumns[j];\n                // if the row is a group, then it will only have an agg result value,\n                // which means valueGetter is never used.\n                const value = this.valueService.getValue(valueColumn, childNode);\n                values[j].push(value);\n            }\n        }\n\n        return values;\n    }\n\n    public aggregateValues(\n        values: any[],\n        aggFuncOrString: string | IAggFunc,\n        column?: AgColumn,\n        rowNode?: RowNode,\n        pivotResultColumn?: AgColumn\n    ): any {\n        const aggFunc =\n            typeof aggFuncOrString === 'string' ? this.aggFuncService.getAggFunc(aggFuncOrString) : aggFuncOrString;\n\n        if (typeof aggFunc !== 'function') {\n            _errorOnce(`unrecognised aggregation function ${aggFuncOrString}`);\n            return null;\n        }\n\n        const aggFuncAny = aggFunc;\n        const params: IAggFuncParams = this.gos.addGridCommonParams({\n            values: values,\n            column: column,\n            colDef: column ? column.getColDef() : undefined,\n            pivotResultColumn: pivotResultColumn,\n            rowNode: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n        } as any); // the \"as any\" is needed to allow the deprecation warning messages\n\n        return aggFuncAny(params);\n    }\n}\n", "import { AgColumn, BeanStub, GROUP_AUTO_COLUMN_ID, _mergeDeep, _missing, _warnOnce } from '@ag-grid-community/core';\nimport type {\n    BeanCollection,\n    ColDef,\n    ColumnEventType,\n    ColumnFactory,\n    ColumnModel,\n    ColumnNameService,\n    IAutoColService,\n    NamedBean,\n} from '@ag-grid-community/core';\n\nexport class AutoColService extends BeanStub implements NamedBean, IAutoColService {\n    beanName = 'autoColService' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private columnFactory: ColumnFactory;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.columnFactory = beans.columnFactory;\n    }\n\n    public createAutoCols(rowGroupCols: AgColumn[]): AgColumn[] {\n        const autoCols: AgColumn[] = [];\n\n        const doingTreeData = this.gos.get('treeData');\n        let doingMultiAutoColumn = this.gos.isGroupMultiAutoColumn();\n\n        if (doingTreeData && doingMultiAutoColumn) {\n            _warnOnce(\n                'you cannot mix groupDisplayType = \"multipleColumns\" with treeData, only one column can be used to display groups when doing tree data'\n            );\n            doingMultiAutoColumn = false;\n        }\n\n        // if doing groupDisplayType = \"multipleColumns\", then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupCols.forEach((rowGroupCol: AgColumn, index: number) => {\n                autoCols.push(this.createOneAutoCol(rowGroupCol, index));\n            });\n        } else {\n            autoCols.push(this.createOneAutoCol());\n        }\n\n        return autoCols;\n    }\n\n    public updateAutoCols(autoGroupCols: AgColumn[], source: ColumnEventType) {\n        autoGroupCols.forEach((col: AgColumn, index: number) => this.updateOneAutoCol(col, index, source));\n    }\n\n    // rowGroupCol and index are missing if groupDisplayType != \"multipleColumns\"\n    private createOneAutoCol(rowGroupCol?: AgColumn, index?: number): AgColumn {\n        // if doing multi, set the field\n        let colId: string;\n        if (rowGroupCol) {\n            colId = `${GROUP_AUTO_COLUMN_ID}-${rowGroupCol.getId()}`;\n        } else {\n            colId = GROUP_AUTO_COLUMN_ID;\n        }\n\n        const colDef = this.createAutoColDef(colId, rowGroupCol, index);\n        colDef.colId = colId;\n\n        const newCol = new AgColumn(colDef, null, colId, true);\n        this.createBean(newCol);\n        return newCol;\n    }\n\n    /**\n     * Refreshes an auto group col to load changes from defaultColDef or autoGroupColDef\n     */\n    private updateOneAutoCol(colToUpdate: AgColumn, index: number, source: ColumnEventType) {\n        const oldColDef = colToUpdate.getColDef();\n        const underlyingColId = typeof oldColDef.showRowGroup == 'string' ? oldColDef.showRowGroup : undefined;\n        const underlyingColumn = underlyingColId != null ? this.columnModel.getColDefCol(underlyingColId) : undefined;\n        const colDef = this.createAutoColDef(colToUpdate.getId(), underlyingColumn ?? undefined, index);\n\n        colToUpdate.setColDef(colDef, null, source);\n        this.columnFactory.applyColumnState(colToUpdate, colDef, source);\n    }\n\n    private createAutoColDef(colId: string, underlyingColumn?: AgColumn, index?: number): ColDef {\n        // if one provided by user, use it, otherwise create one\n        let res: ColDef = this.createBaseColDef(underlyingColumn);\n\n        const autoGroupColumnDef = this.gos.get('autoGroupColumnDef');\n        _mergeDeep(res, autoGroupColumnDef);\n\n        res = this.columnFactory.addColumnDefaultAndTypes(res, colId);\n\n        // For tree data the filter is always allowed\n        if (!this.gos.get('treeData')) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            const noFieldOrValueGetter =\n                _missing(res.field) &&\n                _missing(res.valueGetter) &&\n                _missing(res.filterValueGetter) &&\n                res.filter !== 'agGroupColumnFilter';\n            if (noFieldOrValueGetter) {\n                res.filter = false;\n            }\n        }\n\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            res.headerCheckboxSelection = false;\n        }\n\n        const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n        const hasOwnData = res.valueGetter || res.field != null;\n        if (isSortingCoupled && !hasOwnData) {\n            // if col is coupled sorting, and has sort attribute, we want to ignore this\n            // because we only accept the sort on creation of the col\n            res.sortIndex = undefined;\n            res.initialSort = undefined;\n        }\n\n        return res;\n    }\n\n    private createBaseColDef(rowGroupCol?: AgColumn): ColDef {\n        const userDef = this.gos.get('autoGroupColumnDef');\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        const res: ColDef = {\n            headerName: localeTextFunc('group', 'Group'),\n        };\n\n        const userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererSelector);\n\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            res.cellRenderer = 'agGroupCellRenderer';\n        }\n\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n        if (rowGroupCol) {\n            const colDef = rowGroupCol.getColDef();\n            Object.assign(res, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnNameService.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: colDef.headerValueGetter,\n            });\n\n            if (colDef.cellRenderer) {\n                Object.assign(res, {\n                    cellRendererParams: {\n                        innerRenderer: colDef.cellRenderer,\n                        innerRendererParams: colDef.cellRendererParams,\n                    },\n                });\n            }\n            res.showRowGroup = rowGroupCol.getColId();\n        } else {\n            res.showRowGroup = true;\n        }\n\n        return res;\n    }\n}\n", "import type { ComponentSelector, IColumnDropZonesService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport { AgGridHeaderDropZonesSelector } from './agGridHeaderDropZones';\n\nexport class ColumnDropZoneService extends BeanStub implements NamedBean, IColumnDropZonesService {\n    beanName = 'columnDropZonesService' as const;\n\n    getDropZoneSelector(): ComponentSelector {\n        return AgGridHeaderDropZonesSelector;\n    }\n}\n", "import type { BeanCollection, ColumnModel, ComponentSelector, FuncColsService } from '@ag-grid-community/core';\nimport { Component, _setAriaRole } from '@ag-grid-community/core';\n\nimport { PivotDropZonePanel } from './pivotDropZonePanel';\nimport { RowGroupDropZonePanel } from './rowGroupDropZonePanel';\n\nexport class AgGridHeaderDropZones extends Component {\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    private rowGroupComp: Component;\n    private pivotComp: Component;\n\n    constructor() {\n        super();\n    }\n\n    public postConstruct(): void {\n        this.setGui(this.createNorthPanel());\n        const onRowGroupChanged = this.onRowGroupChanged.bind(this);\n        this.addManagedEventListeners({\n            columnRowGroupChanged: onRowGroupChanged,\n            newColumnsLoaded: onRowGroupChanged,\n        });\n        this.addManagedPropertyListener('rowGroupPanelShow', onRowGroupChanged);\n        this.addManagedPropertyListener('pivotPanelShow', () => this.onPivotPanelShow());\n\n        this.onRowGroupChanged();\n    }\n\n    private createNorthPanel(): HTMLElement {\n        const topPanelGui = document.createElement('div');\n\n        topPanelGui.classList.add('ag-column-drop-wrapper');\n        _setAriaRole(topPanelGui, 'presentation');\n\n        this.rowGroupComp = new RowGroupDropZonePanel(true);\n        this.createManagedBean(this.rowGroupComp);\n\n        this.pivotComp = new PivotDropZonePanel(true);\n        this.createManagedBean(this.pivotComp);\n\n        topPanelGui.appendChild(this.rowGroupComp.getGui());\n        topPanelGui.appendChild(this.pivotComp.getGui());\n\n        const listener = this.onDropPanelVisible.bind(this);\n        this.addManagedListeners(this.rowGroupComp, {\n            displayChanged: listener,\n        });\n        this.addManagedListeners(this.pivotComp, {\n            displayChanged: listener,\n        });\n\n        this.onDropPanelVisible();\n\n        return topPanelGui;\n    }\n\n    private onDropPanelVisible(): void {\n        const bothDisplayed = this.rowGroupComp.isDisplayed() && this.pivotComp.isDisplayed();\n        const classStr = 'ag-column-drop-horizontal-half-width';\n        this.rowGroupComp.addOrRemoveCssClass(classStr, bothDisplayed);\n        this.pivotComp.addOrRemoveCssClass(classStr, bothDisplayed);\n    }\n\n    private onRowGroupChanged(): void {\n        if (!this.rowGroupComp) {\n            return;\n        }\n\n        const rowGroupPanelShow = this.gos.get('rowGroupPanelShow');\n\n        if (rowGroupPanelShow === 'always') {\n            this.rowGroupComp.setDisplayed(true);\n        } else if (rowGroupPanelShow === 'onlyWhenGrouping') {\n            const grouping = !this.funcColsService.isRowGroupEmpty();\n            this.rowGroupComp.setDisplayed(grouping);\n        } else {\n            this.rowGroupComp.setDisplayed(false);\n        }\n    }\n\n    private onPivotPanelShow() {\n        if (!this.pivotComp) {\n            return;\n        }\n\n        const pivotPanelShow = this.gos.get('pivotPanelShow');\n\n        if (pivotPanelShow === 'always') {\n            this.pivotComp.setDisplayed(true);\n        } else if (pivotPanelShow === 'onlyWhenPivoting') {\n            const pivoting = this.columnModel.isPivotActive();\n            this.pivotComp.setDisplayed(pivoting);\n        } else {\n            this.pivotComp.setDisplayed(false);\n        }\n    }\n}\n\nexport const AgGridHeaderDropZonesSelector: ComponentSelector = {\n    selector: 'AG-GRID-HEADER-DROP-ZONES',\n    component: AgGridHeaderDropZones,\n};\n", "import type {\n    AgColumn,\n    DragAndDropIcon,\n    DraggingEvent,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { _createIconNoSpan } from '@ag-grid-community/core';\n\nimport { BaseDropZonePanel } from './baseDropZonePanel';\n\nexport class PivotDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal: boolean) {\n        super(horizontal, 'pivot');\n    }\n\n    public postConstruct(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');\n        const title = localeTextFunc('pivots', 'Column Labels');\n\n        super.init({\n            icon: _createIconNoSpan('pivotPanel', this.gos, null)!,\n            emptyMessage: emptyMessage,\n            title: title,\n        });\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: this.refresh.bind(this),\n            columnPivotChanged: this.refresh.bind(this),\n            columnPivotModeChanged: this.checkVisibility.bind(this),\n        });\n\n        this.refresh();\n    }\n\n    protected getAriaLabel(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaPivotDropZonePanelLabel', 'Column Labels');\n\n        return label;\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'pivotColumnsList';\n        return res;\n    }\n\n    private refresh(): void {\n        this.checkVisibility();\n        this.refreshGui();\n    }\n\n    private checkVisibility(): void {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        if (this.isHorizontal()) {\n            // what we do for horizontal (ie the pivot panel at the top) depends\n            // on the user property as well as pivotMode.\n            switch (this.gos.get('pivotPanelShow')) {\n                case 'always':\n                    this.setDisplayed(pivotMode);\n                    break;\n                case 'onlyWhenPivoting': {\n                    const pivotActive = this.columnModel.isPivotActive();\n                    this.setDisplayed(pivotMode && pivotActive);\n                    break;\n                }\n                default:\n                    // never show it\n                    this.setDisplayed(false);\n                    break;\n            }\n        } else {\n            // in toolPanel, the pivot panel is always shown when pivot mode is on\n            this.setDisplayed(pivotMode);\n        }\n    }\n\n    protected isItemDroppable(column: AgColumn, draggingEvent: DraggingEvent): boolean {\n        // we never allow grouping of secondary columns\n        if (this.gos.get('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n\n        return column.isAllowPivot() && (!column.isPivotActive() || this.isSourceEventFromTarget(draggingEvent));\n    }\n\n    protected updateItems(columns: AgColumn[]): void {\n        this.funcColsService.setPivotColumns(columns, 'toolPanelUi');\n    }\n\n    protected getIconName(): DragAndDropIcon {\n        return this.isPotentialDndItems() ? 'pivot' : 'notAllowed';\n    }\n\n    protected getExistingItems(): AgColumn[] {\n        return this.funcColsService.getPivotColumns();\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnEventType,\n    ColumnModel,\n    DragItem,\n    DraggingEvent,\n    DropTarget,\n    FuncColsService,\n} from '@ag-grid-community/core';\nimport { DragSourceType } from '@ag-grid-community/core';\nimport type { PillDropZonePanelParams } from '@ag-grid-enterprise/core';\nimport { PillDropZonePanel } from '@ag-grid-enterprise/core';\n\nimport { DropZoneColumnComp } from './dropZoneColumnComp';\n\nexport type TDropZone = 'rowGroup' | 'pivot' | 'aggregation';\n\nexport abstract class BaseDropZonePanel extends PillDropZonePanel<DropZoneColumnComp, AgColumn> {\n    protected columnModel: ColumnModel;\n    protected funcColsService: FuncColsService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    constructor(\n        horizontal: boolean,\n        private dropZonePurpose: TDropZone\n    ) {\n        super(horizontal);\n    }\n\n    public override init(params: PillDropZonePanelParams): void {\n        super.init(params);\n\n        this.addManagedEventListeners({ newColumnsLoaded: this.refreshGui.bind(this) });\n\n        this.addManagedPropertyListeners(\n            ['functionsReadOnly', 'rowGroupPanelSuppressSort', 'groupLockGroupColumns'],\n            this.refreshGui.bind(this)\n        );\n    }\n\n    protected getItems(dragItem: DragItem): AgColumn[] {\n        return (dragItem.columns as AgColumn[]) ?? [];\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        // not interested in row drags\n        return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel;\n    }\n\n    protected override minimumAllowedNewInsertIndex(): number {\n        const numberOfLockedCols = this.gos.get('groupLockGroupColumns');\n        const numberOfGroupCols = this.funcColsService.getRowGroupColumns().length;\n        if (numberOfLockedCols === -1) {\n            return numberOfGroupCols;\n        }\n        return Math.min(numberOfLockedCols, numberOfGroupCols);\n    }\n\n    private showOrHideColumnOnExit(draggingEvent: DraggingEvent): boolean {\n        return this.isRowGroupPanel() && !this.gos.get('suppressRowGroupHidesColumns') && !draggingEvent.fromNudge;\n    }\n\n    protected override handleDragEnterEnd(draggingEvent: DraggingEvent): void {\n        const hideColumnOnExit = this.showOrHideColumnOnExit(draggingEvent);\n\n        if (hideColumnOnExit) {\n            const dragItem = draggingEvent.dragSource.getDragItem();\n            const columns = dragItem.columns as AgColumn[];\n            this.setColumnsVisible(columns, false, 'uiColumnDragged');\n        }\n    }\n\n    protected override handleDragLeaveEnd(draggingEvent: DraggingEvent): void {\n        const showColumnOnExit = this.showOrHideColumnOnExit(draggingEvent);\n\n        if (showColumnOnExit) {\n            const dragItem = draggingEvent.dragSource.getDragItem();\n\n            this.setColumnsVisible(dragItem.columns as AgColumn[], true, 'uiColumnDragged');\n        }\n    }\n\n    public setColumnsVisible(columns: AgColumn[] | null | undefined, visible: boolean, source: ColumnEventType) {\n        if (columns) {\n            const allowedCols = columns.filter((c) => !c.getColDef().lockVisible);\n            this.columnModel.setColsVisible(allowedCols, visible, source);\n        }\n    }\n\n    private isRowGroupPanel() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n\n    protected createPillComponent(\n        column: AgColumn,\n        dropTarget: DropTarget,\n        ghost: boolean,\n        horizontal: boolean\n    ): DropZoneColumnComp {\n        return new DropZoneColumnComp(column, dropTarget, ghost, this.dropZonePurpose, horizontal);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    DragAndDropIcon,\n    DragItem,\n    DropTarget,\n    FuncColsService,\n    IAggFuncService,\n    PopupService,\n    SortController,\n    SortIndicatorComp,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    DragSourceType,\n    KeyCode,\n    RefPlaceholder,\n    SortIndicatorSelector,\n    _loadTemplate,\n} from '@ag-grid-community/core';\nimport { PillDragComp, VirtualList } from '@ag-grid-enterprise/core';\n\nimport type { TDropZone } from './baseDropZonePanel';\n\nexport class DropZoneColumnComp extends PillDragComp<AgColumn> {\n    private popupService: PopupService;\n    private sortController: SortController;\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n    private aggFuncService?: IAggFuncService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.popupService = beans.popupService;\n        this.sortController = beans.sortController;\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n        this.aggFuncService = beans.aggFuncService;\n    }\n\n    private readonly eSortIndicator: SortIndicatorComp = RefPlaceholder;\n\n    private displayName: string | null;\n    private popupShowing = false;\n\n    constructor(\n        private column: AgColumn,\n        dragSourceDropTarget: DropTarget,\n        ghost: boolean,\n        private dropZonePurpose: TDropZone,\n        horizontal: boolean\n    ) {\n        super(\n            dragSourceDropTarget,\n            ghost,\n            horizontal,\n            /* html */ `\n                <span role=\"option\">\n                    <span data-ref=\"eDragHandle\" class=\"ag-drag-handle ag-column-drop-cell-drag-handle\" role=\"presentation\"></span>\n                    <span data-ref=\"eText\" class=\"ag-column-drop-cell-text\" aria-hidden=\"true\"></span>\n                    <ag-sort-indicator data-ref=\"eSortIndicator\"></ag-sort-indicator>\n                    <span data-ref=\"eButton\" class=\"ag-column-drop-cell-button\" role=\"presentation\"></span>\n                </span>\n            `,\n            [SortIndicatorSelector]\n        );\n    }\n\n    public override postConstruct(): void {\n        this.displayName = this.columnNameService.getDisplayNameForColumn(this.column, 'columnDrop');\n\n        super.postConstruct();\n\n        this.setupSort();\n\n        this.addManagedEventListeners({\n            sortChanged: () => {\n                this.setupAria();\n            },\n        });\n\n        if (this.isGroupingZone()) {\n            this.addManagedPropertyListener('groupLockGroupColumns', () => {\n                this.refreshRemove();\n                this.refreshDraggable();\n                this.setupAria();\n            });\n        }\n    }\n\n    public getItem(): AgColumn {\n        return this.column;\n    }\n\n    protected getDisplayName(): string {\n        return this.displayName!;\n    }\n\n    protected getTooltip(): string | null | undefined {\n        return this.column.getColDef().headerTooltip;\n    }\n\n    protected override addAdditionalAriaInstructions(\n        ariaInstructions: string[],\n        translate: (key: string, defaultValue: string) => string\n    ): void {\n        const isSortSuppressed = this.gos.get('rowGroupPanelSuppressSort');\n        const isFunctionsReadOnly = this.gos.get('functionsReadOnly');\n        if (this.isAggregationZone() && !isFunctionsReadOnly) {\n            const aggregationMenuAria = translate(\n                'ariaDropZoneColumnValueItemDescription',\n                'Press ENTER to change the aggregation type'\n            );\n            ariaInstructions.push(aggregationMenuAria);\n        }\n\n        if (this.isGroupingZone() && this.column.isSortable() && !isSortSuppressed) {\n            const sortProgressAria = translate('ariaDropZoneColumnGroupItemDescription', 'Press ENTER to sort');\n            ariaInstructions.push(sortProgressAria);\n        }\n\n        super.addAdditionalAriaInstructions(ariaInstructions, translate);\n    }\n\n    protected override isDraggable(): boolean {\n        return this.isReadOnly();\n    }\n\n    protected override isRemovable(): boolean {\n        return this.isReadOnly();\n    }\n\n    private isReadOnly(): boolean {\n        return !this.isGroupingAndLocked() && !this.gos.get('functionsReadOnly');\n    }\n\n    protected getAriaDisplayName(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        const aggSeparator = translate('ariaDropZoneColumnComponentAggFuncSeparator', ' of ');\n        const sortDirection = {\n            asc: translate('ariaDropZoneColumnComponentSortAscending', 'ascending'),\n            desc: translate('ariaDropZoneColumnComponentSortDescending', 'descending'),\n        };\n        const columnSort = this.column.getSort();\n        const isSortSuppressed = this.gos.get('rowGroupPanelSuppressSort');\n        return [\n            aggFuncName && `${aggFuncName}${aggSeparator}`,\n            name,\n            this.isGroupingZone() && !isSortSuppressed && columnSort && `, ${sortDirection[columnSort]}`,\n        ]\n            .filter((part) => !!part)\n            .join('');\n    }\n\n    private getColumnAndAggFuncName(): { name: string; aggFuncName: string } {\n        const name = this.displayName as string;\n        let aggFuncName: string = '';\n\n        if (this.isAggregationZone()) {\n            const aggFunc = this.column.getAggFunc();\n            // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'\n            const aggFuncString = typeof aggFunc === 'string' ? aggFunc : 'agg';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            aggFuncName = localeTextFunc(aggFuncString, aggFuncString);\n        }\n\n        return { name, aggFuncName };\n    }\n\n    public setupSort(): void {\n        const canSort = this.column.isSortable();\n        const isGroupingZone = this.isGroupingZone();\n        if (!canSort || !isGroupingZone) {\n            return;\n        }\n\n        if (!this.gos.get('rowGroupPanelSuppressSort')) {\n            this.eSortIndicator.setupSort(this.column, true);\n            const performSort = (event: MouseEvent | KeyboardEvent) => {\n                event.preventDefault();\n                const sortUsingCtrl = this.gos.get('multiSortKey') === 'ctrl';\n                const multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;\n                this.sortController.progressSort(this.column, multiSort, 'uiColumnSorted');\n            };\n\n            this.addGuiEventListener('click', performSort);\n            this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n                const isEnter = e.key === KeyCode.ENTER;\n                if (isEnter && this.isGroupingZone()) {\n                    performSort(e);\n                }\n            });\n        }\n    }\n\n    protected override getDefaultIconName(): DragAndDropIcon {\n        return 'hide';\n    }\n\n    protected createGetDragItem(): () => DragItem {\n        const { column } = this;\n        return () => {\n            const visibleState: { [key: string]: boolean } = {};\n            visibleState[column.getId()] = column.isVisible();\n            return {\n                columns: [column],\n                visibleState: visibleState,\n            };\n        };\n    }\n\n    protected override setupComponents(): void {\n        super.setupComponents();\n\n        if (this.isAggregationZone() && !this.gos.get('functionsReadOnly')) {\n            this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));\n        }\n    }\n\n    protected override onKeyDown(e: KeyboardEvent): void {\n        super.onKeyDown(e);\n\n        const isEnter = e.key === KeyCode.ENTER;\n        if (isEnter && this.isAggregationZone() && !this.gos.get('functionsReadOnly')) {\n            e.preventDefault();\n            this.onShowAggFuncSelection();\n        }\n    }\n\n    protected override getDisplayValue(): string {\n        const { name, aggFuncName } = this.getColumnAndAggFuncName();\n        return this.isAggregationZone() ? `${aggFuncName}(${name})` : name;\n    }\n\n    private onShowAggFuncSelection(): void {\n        if (this.popupShowing) {\n            return;\n        }\n\n        this.popupShowing = true;\n\n        const virtualList = new VirtualList({ cssIdentifier: 'select-agg-func' });\n        const rows = this.aggFuncService!.getFuncNames(this.column);\n        const eGui = this.getGui();\n        const virtualListGui = virtualList.getGui();\n\n        virtualList.setModel({\n            getRow: function (index: number) {\n                return rows[index];\n            },\n            getRowCount: function () {\n                return rows.length;\n            },\n        });\n\n        this.createBean(virtualList);\n\n        const ePopup = _loadTemplate(/* html*/ `<div class=\"ag-select-agg-func-popup\"></div>`);\n        ePopup.style.top = '0px';\n        ePopup.style.left = '0px';\n        ePopup.appendChild(virtualListGui);\n        ePopup.style.width = `${eGui.clientWidth}px`;\n\n        const [focusoutListener] = this.addManagedElementListeners(ePopup, {\n            focusout: (e: FocusEvent) => {\n                if (!ePopup.contains(e.relatedTarget as HTMLElement) && addPopupRes) {\n                    addPopupRes.hideFunc();\n                }\n            },\n        });\n\n        const popupHiddenFunc = (callbackEvent?: KeyboardEvent) => {\n            this.destroyBean(virtualList);\n            this.popupShowing = false;\n\n            if (callbackEvent?.key === 'Escape') {\n                eGui.focus();\n            }\n\n            if (focusoutListener) {\n                focusoutListener();\n            }\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            closeOnEsc: true,\n            closedCallback: popupHiddenFunc,\n            ariaLabel: translate('ariaLabelAggregationFunction', 'Aggregation Function'),\n        });\n\n        if (addPopupRes) {\n            virtualList.setComponentCreator(this.createAggSelect.bind(this, addPopupRes.hideFunc));\n        }\n\n        virtualList.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                const row = virtualList.getLastFocusedRow();\n\n                if (row == null) {\n                    return;\n                }\n\n                const comp = virtualList.getComponentAt(row) as AggItemComp;\n\n                if (comp) {\n                    comp.selectItem();\n                }\n            }\n        });\n\n        this.popupService.positionPopupByComponent({\n            type: 'aggFuncSelect',\n            eventSource: eGui,\n            ePopup: ePopup,\n            keepWithinBounds: true,\n            column: this.column,\n            position: 'under',\n        });\n\n        virtualList.refresh();\n\n        let rowToFocus = rows.findIndex((r) => r === this.column.getAggFunc());\n        if (rowToFocus === -1) {\n            rowToFocus = 0;\n        }\n\n        virtualList.focusRow(rowToFocus);\n    }\n\n    private createAggSelect(hidePopup: () => void, value: any): Component {\n        const itemSelected = () => {\n            hidePopup();\n            this.funcColsService.setColumnAggFunc(this.column, value, 'toolPanelDragAndDrop');\n        };\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const aggFuncString = value.toString();\n        const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n        const comp = new AggItemComp(itemSelected, aggFuncStringTranslated);\n\n        return comp;\n    }\n\n    private isGroupingAndLocked(): boolean {\n        return this.isGroupingZone() && this.columnModel.isColGroupLocked(this.column);\n    }\n\n    private isAggregationZone() {\n        return this.dropZonePurpose === 'aggregation';\n    }\n\n    private isGroupingZone() {\n        return this.dropZonePurpose === 'rowGroup';\n    }\n\n    protected getDragSourceType(): DragSourceType {\n        return DragSourceType.ToolPanel;\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        (this.column as any) = null;\n    }\n}\n\nclass AggItemComp extends Component {\n    public selectItem: () => void;\n\n    constructor(itemSelected: () => void, value: string) {\n        super(/* html */ `<div class=\"ag-select-agg-func-item\"/>`);\n        this.selectItem = itemSelected;\n        this.getGui().innerText = value;\n        this.addGuiEventListener('click', this.selectItem);\n    }\n}\n", "import type {\n    AgColumn,\n    DragAndDropIcon,\n    DraggingEvent,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { _createIconNoSpan } from '@ag-grid-community/core';\n\nimport { BaseDropZonePanel } from './baseDropZonePanel';\n\nexport class RowGroupDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal: boolean) {\n        super(horizontal, 'rowGroup');\n    }\n\n    public postConstruct(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');\n        const title = localeTextFunc('groups', 'Row Groups');\n\n        super.init({\n            icon: _createIconNoSpan('rowGroupPanel', this.gos, null)!,\n            emptyMessage: emptyMessage,\n            title,\n        });\n\n        this.addManagedEventListeners({ columnRowGroupChanged: this.refreshGui.bind(this) });\n    }\n\n    protected getAriaLabel(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaRowGroupDropZonePanelLabel', 'Row Groups');\n\n        return label;\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'rowGroupColumnsList';\n\n        return res;\n    }\n\n    protected isItemDroppable(column: AgColumn, draggingEvent: DraggingEvent): boolean {\n        // we never allow grouping of secondary columns\n        if (this.gos.get('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n\n        return column.isAllowRowGroup() && (!column.isRowGroupActive() || this.isSourceEventFromTarget(draggingEvent));\n    }\n\n    protected updateItems(columns: AgColumn[]) {\n        this.funcColsService.setRowGroupColumns(columns, 'toolPanelUi');\n    }\n\n    protected getIconName(): DragAndDropIcon {\n        return this.isPotentialDndItems() ? 'group' : 'notAllowed';\n    }\n\n    protected getExistingItems(): AgColumn[] {\n        return this.funcColsService.getRowGroupColumns();\n    }\n}\n", "import type {\n    BeanCollection,\n    ColumnModel,\n    FilterManager,\n    IRowNodeStage,\n    NamedBean,\n    RowNode,\n    StageExecuteParams,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nexport class FilterAggregatesStage extends BeanStub implements NamedBean, IRowNodeStage {\n    beanName = 'filterAggregatesStage' as const;\n\n    private filterManager?: FilterManager;\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.columnModel = beans.columnModel;\n    }\n\n    public execute(params: StageExecuteParams): void {\n        const isPivotMode = this.columnModel.isPivotMode();\n        const isAggFilterActive =\n            this.filterManager?.isAggregateFilterPresent() || this.filterManager?.isAggregateQuickFilterPresent();\n\n        // This is the default filter for applying only to leaf nodes, realistically this should not apply as primary agg columns,\n        // should not be applied by the filterManager if getGroupAggFiltering is missing. Predicate will apply filters to leaf level.\n        const defaultPrimaryColumnPredicate = (params: { node: RowNode }) => !params.node.group;\n\n        // Default secondary column predicate, selecting only leaf level groups.\n        const defaultSecondaryColumnPredicate = (params: { node: RowNode }) => params.node.leafGroup;\n\n        // The predicate to determine whether filters should apply to this row. Either defined by the user in groupAggFiltering or a default depending\n        // on current pivot mode status.\n        const applyFilterToNode =\n            this.gos.getGroupAggFiltering() ||\n            (isPivotMode ? defaultSecondaryColumnPredicate : defaultPrimaryColumnPredicate);\n\n        const { changedPath } = params;\n\n        const preserveChildren = (node: RowNode, recursive = false) => {\n            if (node.childrenAfterFilter) {\n                node.childrenAfterAggFilter = node.childrenAfterFilter;\n                if (recursive) {\n                    node.childrenAfterAggFilter.forEach((child) => preserveChildren(child, recursive));\n                }\n                this.setAllChildrenCount(node);\n            }\n\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n\n        const filterChildren = (node: RowNode) => {\n            node.childrenAfterAggFilter =\n                node.childrenAfterFilter?.filter((child: RowNode) => {\n                    const shouldFilterRow = applyFilterToNode({ node: child });\n                    if (shouldFilterRow) {\n                        const doesNodePassFilter = this.filterManager!.doesRowPassAggregateFilters({ rowNode: child });\n                        if (doesNodePassFilter) {\n                            // Node has passed, so preserve children\n                            preserveChildren(child, true);\n                            return true;\n                        }\n                    }\n                    const hasChildPassed = child.childrenAfterAggFilter?.length;\n                    return hasChildPassed;\n                }) || null;\n\n            this.setAllChildrenCount(node);\n            if (node.sibling) {\n                node.sibling.childrenAfterAggFilter = node.childrenAfterAggFilter;\n            }\n        };\n\n        changedPath!.forEachChangedNodeDepthFirst(isAggFilterActive ? filterChildren : preserveChildren, true);\n    }\n\n    private setAllChildrenCountTreeData(rowNode: RowNode) {\n        // for tree data, we include all children, groups and leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter!.forEach((child: RowNode) => {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount as any;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n\n    private setAllChildrenCountGridGrouping(rowNode: RowNode) {\n        // for grid data, we only count the leafs\n        let allChildrenCount = 0;\n        rowNode.childrenAfterAggFilter!.forEach((child: RowNode) => {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount as any;\n            } else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    }\n\n    private setAllChildrenCount(rowNode: RowNode) {\n        if (!rowNode.hasChildren()) {\n            rowNode.setAllChildrenCount(null);\n            return;\n        }\n\n        if (this.gos.get('treeData')) {\n            this.setAllChildrenCountTreeData(rowNode);\n        } else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnNameService,\n    FilterManager,\n    FuncColsService,\n    IAfterGuiAttachedParams,\n    IFilterComp,\n    IFilterParams,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    AgSelect,\n    FilterWrapperComp,\n    RefPlaceholder,\n    TabGuardComp,\n    _clearElement,\n    _loadTemplate,\n    _setDisplayed,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\ninterface FilterColumnPair {\n    filter: IFilterComp;\n    column: AgColumn;\n}\n\nexport type GroupFilterEvent = 'columnRowGroupChanged' | 'selectedColumnChanged';\nexport class GroupFilter extends TabGuardComp<GroupFilterEvent> implements IFilterComp {\n    private filterManager?: FilterManager;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.filterManager = beans.filterManager;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    private readonly eGroupField: HTMLElement = RefPlaceholder;\n    private readonly eUnderlyingFilter: HTMLElement = RefPlaceholder;\n\n    private params: IFilterParams;\n    private groupColumn: AgColumn;\n    private selectedColumn: AgColumn | undefined;\n    private selectedFilter: IFilterComp | undefined;\n    private filterColumnPairs: FilterColumnPair[] | undefined;\n    private eGroupFieldSelect: AgSelect;\n    private afterGuiAttachedParams: IAfterGuiAttachedParams | undefined;\n    private filterWrapperComp?: FilterWrapperComp;\n\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-group-filter\">\n                <div data-ref=\"eGroupField\"></div>\n                <div data-ref=\"eUnderlyingFilter\"></div>\n            </div>\n        `);\n    }\n\n    public postConstruct() {\n        this.initialiseTabGuard({});\n    }\n\n    public init(params: IFilterParams): AgPromise<void> {\n        this.params = params;\n        this.validateParams();\n        return this.updateGroups().then(() => {\n            this.addManagedEventListeners({ columnRowGroupChanged: () => this.onColumnRowGroupChanged() });\n        });\n    }\n\n    private validateParams(): void {\n        const { colDef } = this.params;\n        if (colDef.field) {\n            _warnOnce(\n                'Group Column Filter does not work with the colDef property \"field\". This property will be ignored.'\n            );\n        }\n        if (colDef.filterValueGetter) {\n            _warnOnce(\n                'Group Column Filter does not work with the colDef property \"filterValueGetter\". This property will be ignored.'\n            );\n        }\n        if (colDef.filterParams) {\n            _warnOnce(\n                'Group Column Filter does not work with the colDef property \"filterParams\". This property will be ignored.'\n            );\n        }\n    }\n\n    private updateGroups(): AgPromise<void> {\n        const sourceColumns = this.updateGroupField();\n        return this.getUnderlyingFilters(sourceColumns);\n    }\n\n    private getSourceColumns(): AgColumn[] {\n        this.groupColumn = this.params.column as AgColumn;\n        if (this.gos.get('treeData')) {\n            _warnOnce(\n                'Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.'\n            );\n            return [];\n        }\n        const sourceColumns = this.funcColsService.getSourceColumnsForGroupColumn(this.groupColumn);\n        if (!sourceColumns) {\n            _warnOnce('Group Column Filter only works on group columns. Please use a different filter.');\n            return [];\n        }\n        return sourceColumns;\n    }\n\n    private updateGroupField(): AgColumn[] | null {\n        _clearElement(this.eGroupField);\n        if (this.eGroupFieldSelect) {\n            this.destroyBean(this.eGroupFieldSelect);\n        }\n        const allSourceColumns = this.getSourceColumns();\n        const sourceColumns = allSourceColumns.filter((sourceColumn) => sourceColumn.isFilterAllowed());\n        if (!sourceColumns.length) {\n            this.selectedColumn = undefined;\n            _setDisplayed(this.eGroupField, false);\n            return null;\n        }\n        if (allSourceColumns.length === 1) {\n            // we only want to hide the group field element if there's only one group column.\n            // If there's one group column that has a filter, but multiple columns in total,\n            // we should still show the select so the user knows which column it's for.\n            this.selectedColumn = sourceColumns[0];\n            _setDisplayed(this.eGroupField, false);\n        } else {\n            // keep the old selected column if it's still valid\n            if (\n                !this.selectedColumn ||\n                !sourceColumns.some((column) => column.getId() === this.selectedColumn!.getId())\n            ) {\n                this.selectedColumn = sourceColumns[0];\n            }\n            this.createGroupFieldSelectElement(sourceColumns);\n            this.eGroupField.appendChild(this.eGroupFieldSelect.getGui());\n            this.eGroupField.appendChild(_loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n            _setDisplayed(this.eGroupField, true);\n        }\n\n        return sourceColumns;\n    }\n\n    private createGroupFieldSelectElement(sourceColumns: AgColumn[]): void {\n        this.eGroupFieldSelect = this.createManagedBean(new AgSelect());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eGroupFieldSelect.setLabel(localeTextFunc('groupFilterSelect', 'Select field:'));\n        this.eGroupFieldSelect.setLabelAlignment('top');\n        this.eGroupFieldSelect.addOptions(\n            sourceColumns.map((sourceColumn) => ({\n                value: sourceColumn.getId(),\n                text: this.columnNameService.getDisplayNameForColumn(sourceColumn, 'groupFilter', false) ?? undefined,\n            }))\n        );\n        this.eGroupFieldSelect.setValue(this.selectedColumn!.getId());\n        this.eGroupFieldSelect.onValueChange((newValue) => this.updateSelectedColumn(newValue));\n        this.eGroupFieldSelect.addCssClass('ag-group-filter-field-select-wrapper');\n        if (sourceColumns.length === 1) {\n            this.eGroupFieldSelect.setDisabled(true);\n        }\n    }\n\n    private getUnderlyingFilters(sourceColumns: AgColumn[] | null): AgPromise<void> {\n        if (!sourceColumns) {\n            this.filterColumnPairs = undefined;\n            this.selectedFilter = undefined;\n            this.groupColumn.setFilterActive(false, 'columnRowGroupChanged');\n            return AgPromise.resolve();\n        }\n        const filterPromises: AgPromise<IFilterComp>[] = [];\n        const filterColumnPairs: FilterColumnPair[] = [];\n        sourceColumns.forEach((column) => {\n            const filterWrapper = this.filterManager!.getOrCreateFilterWrapper(column);\n            if (filterWrapper?.filterPromise) {\n                filterPromises.push(\n                    filterWrapper.filterPromise.then((filter) => {\n                        if (filter) {\n                            filterColumnPairs.push({\n                                filter,\n                                column,\n                            });\n                        }\n                        if (column.getId() === this.selectedColumn!.getId()) {\n                            this.selectedFilter = filter ?? undefined;\n                        }\n                        return filter!;\n                    })\n                );\n            }\n        });\n        return AgPromise.all(filterPromises).then(() => {\n            this.filterColumnPairs = filterColumnPairs;\n            this.groupColumn.setFilterActive(this.isFilterActive(), 'columnRowGroupChanged');\n        });\n    }\n\n    private addUnderlyingFilterElement(): AgPromise<void> {\n        _clearElement(this.eUnderlyingFilter);\n        if (!this.selectedColumn) {\n            return AgPromise.resolve();\n        }\n        const comp = this.createManagedBean(new FilterWrapperComp(this.selectedColumn, 'COLUMN_MENU'));\n        this.filterWrapperComp = comp;\n        if (!comp.hasFilter()) {\n            return AgPromise.resolve();\n        }\n        this.eUnderlyingFilter.appendChild(comp.getGui());\n\n        return (\n            comp.getFilter()?.then(() => {\n                comp.afterGuiAttached?.(this.afterGuiAttachedParams);\n                if (\n                    !this.afterGuiAttachedParams?.suppressFocus &&\n                    this.eGroupFieldSelect &&\n                    !this.eGroupFieldSelect.isDisabled()\n                ) {\n                    this.eGroupFieldSelect.getFocusableElement().focus();\n                }\n            }) ?? AgPromise.resolve()\n        );\n    }\n\n    private updateSelectedColumn(columnId: string | null | undefined): void {\n        if (!columnId) {\n            return;\n        }\n        this.filterWrapperComp?.afterGuiDetached();\n        this.destroyBean(this.filterWrapperComp);\n        const selectedFilterColumnPair = this.getFilterColumnPair(columnId);\n        this.selectedColumn = selectedFilterColumnPair?.column;\n        this.selectedFilter = selectedFilterColumnPair?.filter;\n\n        this.dispatchLocalEvent({\n            type: 'selectedColumnChanged',\n        });\n        this.addUnderlyingFilterElement();\n    }\n\n    public isFilterActive(): boolean {\n        return !!this.filterColumnPairs?.some(({ filter }) => filter.isFilterActive());\n    }\n\n    public doesFilterPass(): boolean {\n        return true;\n    }\n\n    public getModel(): null {\n        return null;\n    }\n\n    public setModel(): AgPromise<void> {\n        return AgPromise.resolve();\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        this.afterGuiAttachedParams = params;\n        this.addUnderlyingFilterElement();\n    }\n\n    public afterGuiDetached(): void {\n        _clearElement(this.eUnderlyingFilter);\n        this.selectedFilter?.afterGuiDetached?.();\n    }\n\n    private onColumnRowGroupChanged(): void {\n        this.updateGroups().then(() => {\n            this.dispatchLocalEvent({\n                type: 'columnRowGroupChanged',\n            });\n        });\n    }\n\n    private getFilterColumnPair(columnId: string | undefined): FilterColumnPair | undefined {\n        if (!columnId) {\n            return undefined;\n        }\n        return this.filterColumnPairs?.find(({ column }) => column.getId() === columnId);\n    }\n\n    public getSelectedFilter(): IFilterComp | undefined {\n        return this.selectedFilter;\n    }\n\n    public getSelectedColumn(): AgColumn | undefined {\n        return this.selectedColumn;\n    }\n\n    public isFilterAllowed(): boolean {\n        return !!this.selectedColumn;\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnEvent,\n    ColumnNameService,\n    FilterChangedEvent,\n    FilterManager,\n    IFloatingFilterComp,\n    IFloatingFilterParams,\n} from '@ag-grid-community/core';\nimport { AgInputTextField, AgPromise, Component, RefPlaceholder, _clearElement } from '@ag-grid-community/core';\n\nimport type { GroupFilter } from './groupFilter';\n\nexport class GroupFloatingFilterComp extends Component implements IFloatingFilterComp<GroupFilter> {\n    private columnNameService: ColumnNameService;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnNameService = beans.columnNameService;\n        this.filterManager = beans.filterManager;\n    }\n\n    private readonly eFloatingFilter: HTMLElement = RefPlaceholder;\n\n    private params: IFloatingFilterParams<GroupFilter>;\n    private eFloatingFilterText: AgInputTextField;\n    private parentFilterInstance: GroupFilter;\n    private underlyingFloatingFilter: IFloatingFilterComp | undefined;\n    private showingUnderlyingFloatingFilter: boolean;\n    private haveAddedColumnListeners: boolean = false;\n\n    constructor() {\n        super(/* html */ `\n            <div data-ref=\"eFloatingFilter\" class=\"ag-group-floating-filter ag-floating-filter-input\" role=\"presentation\"></div>\n        `);\n    }\n\n    public init(params: IFloatingFilterParams<GroupFilter>): AgPromise<void> {\n        this.params = params;\n\n        // we only support showing the underlying floating filter for multiple group columns\n        const canShowUnderlyingFloatingFilter = this.gos.get('groupDisplayType') === 'multipleColumns';\n\n        return new AgPromise<void>((resolve) => {\n            this.params.parentFilterInstance((parentFilterInstance) => {\n                this.parentFilterInstance = parentFilterInstance;\n\n                if (canShowUnderlyingFloatingFilter) {\n                    this.setupUnderlyingFloatingFilterElement().then(() => resolve());\n                } else {\n                    this.setupReadOnlyFloatingFilterElement();\n                    resolve();\n                }\n            });\n        }).then(() => {\n            this.addManagedListeners(this.parentFilterInstance, {\n                selectedColumnChanged: this.onSelectedColumnChanged.bind(this),\n                columnRowGroupChanged: this.onColumnRowGroupChanged.bind(this),\n            });\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams<GroupFilter>): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams<GroupFilter>): void {\n        this.params = params;\n        this.setParams();\n    }\n\n    private setParams(): void {\n        const displayName = this.columnNameService.getDisplayNameForColumn(\n            this.params.column as AgColumn,\n            'header',\n            true\n        );\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFloatingFilterText?.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    private setupReadOnlyFloatingFilterElement(): void {\n        if (!this.eFloatingFilterText) {\n            this.eFloatingFilterText = this.createManagedBean(new AgInputTextField());\n\n            this.eFloatingFilterText\n                .setDisabled(true)\n                .addGuiEventListener('click', () => this.params.showParentFilter());\n\n            this.setParams();\n        }\n\n        this.updateDisplayedValue();\n\n        this.eFloatingFilter.appendChild(this.eFloatingFilterText.getGui());\n    }\n\n    private setupUnderlyingFloatingFilterElement(): AgPromise<void> {\n        this.showingUnderlyingFloatingFilter = false;\n        this.underlyingFloatingFilter = undefined;\n        _clearElement(this.eFloatingFilter);\n        const column = this.parentFilterInstance.getSelectedColumn();\n        // we can only show the underlying filter if there is one instance (e.g. the underlying column is not visible)\n        if (column && !column.isVisible()) {\n            const compDetails = this.filterManager!.getFloatingFilterCompDetails(column, this.params.showParentFilter);\n            if (compDetails) {\n                if (!this.haveAddedColumnListeners) {\n                    this.haveAddedColumnListeners = true;\n                    this.addManagedListeners(column, {\n                        visibleChanged: this.onColumnVisibleChanged.bind(this),\n                        colDefChanged: this.onColDefChanged.bind(this),\n                    });\n                }\n                return compDetails.newAgStackInstance().then((floatingFilter) => {\n                    this.underlyingFloatingFilter = floatingFilter;\n                    this.underlyingFloatingFilter?.onParentModelChanged(\n                        this.parentFilterInstance.getSelectedFilter()?.getModel()\n                    );\n                    this.appendChild(floatingFilter.getGui());\n                    this.showingUnderlyingFloatingFilter = true;\n                });\n            }\n        }\n        // fallback to the read-only version\n        this.setupReadOnlyFloatingFilterElement();\n        return AgPromise.resolve();\n    }\n\n    private onColumnVisibleChanged(): void {\n        this.setupUnderlyingFloatingFilterElement();\n    }\n\n    private onColDefChanged(event: ColumnEvent): void {\n        if (!event.column) {\n            return;\n        }\n        const compDetails = this.filterManager!.getFloatingFilterCompDetails(\n            event.column as AgColumn,\n            this.params.showParentFilter\n        );\n        if (compDetails) {\n            if (this.underlyingFloatingFilter?.refresh) {\n                this.underlyingFloatingFilter.refresh(compDetails.params);\n            } else {\n                this.underlyingFloatingFilter?.onParamsUpdated?.(compDetails.params);\n            }\n        }\n    }\n\n    public onParentModelChanged(_model: null, event: FilterChangedEvent): void {\n        if (this.showingUnderlyingFloatingFilter) {\n            this.underlyingFloatingFilter?.onParentModelChanged(\n                this.parentFilterInstance.getSelectedFilter()?.getModel(),\n                event\n            );\n        } else {\n            this.updateDisplayedValue();\n        }\n    }\n\n    private updateDisplayedValue(): void {\n        if (!this.parentFilterInstance || !this.eFloatingFilterText) {\n            return;\n        }\n        const selectedFilter = this.parentFilterInstance.getSelectedFilter();\n        if (!selectedFilter) {\n            this.eFloatingFilterText.setValue('');\n            this.eFloatingFilterText.setDisplayed(false);\n            return;\n        }\n        this.eFloatingFilterText.setDisplayed(true);\n        if (selectedFilter.getModelAsString) {\n            const filterModel = selectedFilter.getModel();\n            this.eFloatingFilterText.setValue(filterModel == null ? '' : selectedFilter.getModelAsString(filterModel));\n        } else {\n            this.eFloatingFilterText.setValue('');\n        }\n    }\n\n    private onSelectedColumnChanged(): void {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n\n    private onColumnRowGroupChanged(): void {\n        if (!this.showingUnderlyingFloatingFilter) {\n            this.updateDisplayedValue();\n        }\n    }\n\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ChangedPath,\n    ColumnModel,\n    FuncColsService,\n    GetDataPath,\n    IRowNodeStage,\n    ISelectionService,\n    IShowRowGroupColsService,\n    InitialGroupOrderComparatorParams,\n    IsGroupOpenByDefaultParams,\n    KeyCreatorParams,\n    NamedBean,\n    RowNodeTransaction,\n    SelectableService,\n    StageExecuteParams,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    RowNode,\n    _areEqual,\n    _exists,\n    _existsAndNotEmpty,\n    _last,\n    _removeFromArray,\n    _sortRowNodesByOrder,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport { BatchRemover } from './batchRemover';\n\ninterface GroupInfo {\n    key: string; // e.g. 'Ireland'\n    field: string | null; // e.g. 'country'\n    rowGroupColumn: AgColumn | null;\n    leafNode?: RowNode;\n}\n\ninterface GroupingDetails {\n    pivotMode: boolean;\n    expandByDefault: number;\n    changedPath: ChangedPath;\n    rootNode: RowNode;\n    groupedCols: AgColumn[];\n    groupedColCount: number;\n    transactions: RowNodeTransaction[];\n    rowNodeOrder: { [id: string]: number };\n\n    groupAllowUnbalanced: boolean;\n    isGroupOpenByDefault: (params: WithoutGridCommon<IsGroupOpenByDefaultParams>) => boolean;\n    initialGroupOrderComparator: (params: WithoutGridCommon<InitialGroupOrderComparatorParams>) => number;\n\n    usingTreeData: boolean;\n    suppressGroupMaintainValueType: boolean;\n    getDataPath: GetDataPath | undefined;\n    keyCreators: (((params: KeyCreatorParams) => string) | undefined)[];\n}\n\nexport class GroupStage extends BeanStub implements NamedBean, IRowNodeStage {\n    beanName = 'groupStage' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private selectableService: SelectableService;\n    private valueService: ValueService;\n    private beans: BeanCollection;\n    private selectionService: ISelectionService;\n    private showRowGroupColsService: IShowRowGroupColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.beans = beans;\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.selectableService = beans.selectableService;\n        this.valueService = beans.valueService;\n        this.selectionService = beans.selectionService;\n        this.showRowGroupColsService = beans.showRowGroupColsService!;\n    }\n\n    // when grouping, these items are of note:\n    // rowNode.parent: RowNode: set to the parent\n    // rowNode.childrenAfterGroup: RowNode[] = the direct children of this group\n    // rowNode.childrenMapped: string=>RowNode = children mapped by group key (when groups) or an empty map if leaf group (this is then used by pivot)\n    // for leaf groups, rowNode.childrenAfterGroup = rowNode.allLeafChildren;\n\n    private oldGroupingDetails: GroupingDetails;\n    private oldGroupDisplayColIds: string;\n    /** Hierarchical node cache to speed up tree data node insertion */\n    private treeNodeCache = new TreeDataNodeCache();\n\n    public execute(params: StageExecuteParams): void {\n        const details = this.createGroupingDetails(params);\n\n        if (details.transactions) {\n            this.handleTransaction(details);\n        } else {\n            const afterColsChanged = params.afterColumnsChanged === true;\n            this.shotgunResetEverything(details, afterColsChanged);\n        }\n\n        if (!details.usingTreeData) {\n            // we don't do group sorting for tree data\n            this.positionLeafsAndGroups(params.changedPath!);\n            this.orderGroups(details);\n        }\n\n        this.selectableService.updateSelectableAfterGrouping();\n    }\n\n    private positionLeafsAndGroups(changedPath: ChangedPath) {\n        changedPath.forEachChangedNodeDepthFirst((group) => {\n            if (group.childrenAfterGroup) {\n                const leafNodes: RowNode[] = [];\n                const groupNodes: RowNode[] = [];\n                let unbalancedNode: RowNode | undefined;\n\n                group.childrenAfterGroup.forEach((row) => {\n                    if (!row.childrenAfterGroup?.length) {\n                        leafNodes.push(row);\n                    } else {\n                        if (row.key === '' && !unbalancedNode) {\n                            unbalancedNode = row;\n                        } else {\n                            groupNodes.push(row);\n                        }\n                    }\n                });\n\n                if (unbalancedNode) {\n                    groupNodes.push(unbalancedNode);\n                }\n\n                group.childrenAfterGroup = [...leafNodes, ...groupNodes];\n            }\n        }, false);\n    }\n\n    private createGroupingDetails(params: StageExecuteParams): GroupingDetails {\n        const { rowNode, changedPath, rowNodeTransactions, rowNodeOrder } = params;\n\n        const usingTreeData = this.gos.get('treeData');\n\n        const groupedCols = usingTreeData ? null : this.funcColsService.getRowGroupColumns();\n\n        const details: GroupingDetails = {\n            expandByDefault: this.gos.get('groupDefaultExpanded'),\n            groupedCols: groupedCols!,\n            rootNode: rowNode,\n            pivotMode: this.columnModel.isPivotMode(),\n            groupedColCount: usingTreeData || !groupedCols ? 0 : groupedCols.length,\n            rowNodeOrder: rowNodeOrder!,\n            transactions: rowNodeTransactions!,\n            // if no transaction, then it's shotgun, changed path would be 'not active' at this point anyway\n            changedPath: changedPath!,\n            groupAllowUnbalanced: this.gos.get('groupAllowUnbalanced'),\n            isGroupOpenByDefault: this.gos.getCallback('isGroupOpenByDefault') as any,\n            initialGroupOrderComparator: this.gos.getCallback('initialGroupOrderComparator') as any,\n            usingTreeData: usingTreeData,\n            suppressGroupMaintainValueType: this.gos.get('suppressGroupMaintainValueType'),\n            getDataPath: usingTreeData ? this.gos.get('getDataPath') : undefined,\n            keyCreators: groupedCols?.map((column) => column.getColDef().keyCreator) ?? [],\n        };\n\n        return details;\n    }\n\n    private handleTransaction(details: GroupingDetails): void {\n        details.transactions.forEach((tran) => {\n            // we don't allow batch remover for tree data as tree data uses Filler Nodes,\n            // and creating/deleting filler nodes needs to be done alongside the node deleting\n            // and moving. if we want to Batch Remover working with tree data then would need\n            // to consider how Filler Nodes would be impacted (it's possible that it can be easily\n            // modified to work, however for now I don't have the brain energy to work it all out).\n            const batchRemover = !details.usingTreeData ? new BatchRemover() : undefined;\n\n            // the order here of [add, remove, update] needs to be the same as in ClientSideNodeManager,\n            // as the order is important when a record with the same id is added and removed in the same\n            // transaction.\n            if (_existsAndNotEmpty(tran.remove)) {\n                this.removeNodes(tran.remove as RowNode[], details, batchRemover);\n            }\n            if (_existsAndNotEmpty(tran.update)) {\n                this.moveNodesInWrongPath(tran.update as RowNode[], details, batchRemover);\n            }\n            if (_existsAndNotEmpty(tran.add)) {\n                this.insertNodes(tran.add as RowNode[], details, false);\n            }\n            // must flush here, and not allow another transaction to be applied,\n            // as each transaction must finish leaving the data in a consistent state.\n            if (batchRemover) {\n                const parentsWithChildrenRemoved = batchRemover.getAllParents().slice();\n                batchRemover.flush();\n                this.removeEmptyGroups(parentsWithChildrenRemoved, details);\n            }\n        });\n\n        if (details.rowNodeOrder) {\n            this.sortChildren(details);\n        }\n    }\n\n    // this is used when doing delta updates, eg Redux, keeps nodes in right order\n    private sortChildren(details: GroupingDetails): void {\n        details.changedPath.forEachChangedNodeDepthFirst(\n            (node) => {\n                const didSort = _sortRowNodesByOrder(node.childrenAfterGroup, details.rowNodeOrder);\n                if (didSort) {\n                    details.changedPath.addParentNode(node);\n                }\n            },\n            false,\n            true\n        );\n    }\n\n    private orderGroups(details: GroupingDetails): void {\n        const comparator = details.initialGroupOrderComparator;\n        if (_exists(comparator)) {\n            recursiveSort(details.rootNode);\n        }\n\n        function recursiveSort(rowNode: RowNode): void {\n            const doSort =\n                _exists(rowNode.childrenAfterGroup) &&\n                // we only want to sort groups, so we do not sort leafs (a leaf group has leafs as children)\n                !rowNode.leafGroup;\n\n            if (doSort) {\n                rowNode.childrenAfterGroup!.sort((nodeA, nodeB) => comparator!({ nodeA, nodeB }));\n                rowNode.childrenAfterGroup!.forEach((childNode: RowNode) => recursiveSort(childNode));\n            }\n        }\n    }\n\n    private getExistingPathForNode(node: RowNode, details: GroupingDetails): GroupInfo[] {\n        const res: GroupInfo[] = [];\n\n        // when doing tree data, the node is part of the path,\n        // but when doing grid grouping, the node is not part of the path so we start with the parent.\n        let pointer = details.usingTreeData ? node : node.parent;\n        while (pointer && pointer !== details.rootNode) {\n            res.push({\n                key: pointer.key!,\n                rowGroupColumn: pointer.rowGroupColumn,\n                field: pointer.field,\n            });\n            pointer = pointer.parent;\n        }\n        res.reverse();\n        return res;\n    }\n\n    /**\n     * Topological sort of the given row nodes based on the grouping hierarchy, where parents come before children.\n     * Used to ensure tree data is moved in the correct order (see AG-11678)\n     */\n    private topoSort(rowNodes: RowNode[], details: GroupingDetails): RowNode[] {\n        const sortedNodes: RowNode[] = [];\n        // performance: create a cache of ids to make lookups during the search faster\n        const idLookup = Object.fromEntries(rowNodes.map<[string, number]>((node, i) => [node.id!, i]));\n        // performance: keep track of the nodes we haven't found yet so we can return early\n        const stillToFind = new Set(Object.keys(idLookup));\n\n        const queue = [details.rootNode];\n        let i = 0;\n\n        // BFS for nodes in the hierarchy that match IDs of the given nodes\n        while (i < queue.length) {\n            // performance: indexing into the array instead of using e.g. `.shift` is _much_ faster\n            const node = queue[i];\n            i++;\n            if (node === undefined) {\n                continue;\n            }\n\n            if (node.id && node.id in idLookup) {\n                sortedNodes.push(rowNodes[idLookup[node.id]]);\n                stillToFind.delete(node.id);\n            }\n\n            // we can stop early if we've already found all the nodes\n            if (stillToFind.size === 0) {\n                return sortedNodes;\n            }\n\n            const children = node.childrenAfterGroup ?? [];\n            for (let i = 0; i < children.length; i++) {\n                queue.push(children[i]);\n            }\n        }\n\n        return sortedNodes;\n    }\n\n    private moveNodesInWrongPath(\n        childNodes: RowNode[],\n        details: GroupingDetails,\n        batchRemover: BatchRemover | undefined\n    ): void {\n        // AG-11678 avoid unnecessary sorting when using normal row grouping\n        const sorted = details.usingTreeData ? this.topoSort(childNodes, details) : childNodes;\n\n        sorted.forEach((childNode) => {\n            // we add node, even if parent has not changed, as the data could have\n            // changed, hence aggregations will be wrong\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(childNode.parent);\n            }\n\n            const infoToKeyMapper = (item: GroupInfo) => item.key;\n            const oldPath: string[] = this.getExistingPathForNode(childNode, details).map(infoToKeyMapper);\n            const newPath: string[] = this.getGroupInfo(childNode, details).map(infoToKeyMapper);\n\n            const nodeInCorrectPath = _areEqual(oldPath, newPath);\n\n            if (!nodeInCorrectPath) {\n                this.moveNode(childNode, details, batchRemover);\n            }\n        });\n    }\n\n    private moveNode(childNode: RowNode, details: GroupingDetails, batchRemover: BatchRemover | undefined): void {\n        this.removeNodesInStages([childNode], details, batchRemover);\n        this.insertOneNode(childNode, details, true, batchRemover);\n\n        // hack - if we didn't do this, then renaming a tree item (ie changing rowNode.key) wouldn't get\n        // refreshed into the gui.\n        // this is needed to kick off the event that rowComp listens to for refresh. this in turn\n        // then will get each cell in the row to refresh - which is what we need as we don't know which\n        // columns will be displaying the rowNode.key info.\n        childNode.setData(childNode.data);\n\n        // we add both old and new parents to changed path, as both will need to be refreshed.\n        // we already added the old parent (in calling method), so just add the new parent here\n        if (details.changedPath.isActive()) {\n            const newParent = childNode.parent;\n            details.changedPath.addParentNode(newParent);\n        }\n    }\n\n    private removeNodes(\n        leafRowNodes: RowNode[],\n        details: GroupingDetails,\n        batchRemover: BatchRemover | undefined\n    ): void {\n        this.removeNodesInStages(leafRowNodes, details, batchRemover);\n        if (details.changedPath.isActive()) {\n            leafRowNodes.forEach((rowNode) => details.changedPath.addParentNode(rowNode.parent));\n        }\n    }\n\n    private removeNodesInStages(\n        leafRowNodes: RowNode[],\n        details: GroupingDetails,\n        batchRemover: BatchRemover | undefined\n    ): void {\n        this.removeNodesFromParents(leafRowNodes, details, batchRemover);\n        if (details.usingTreeData) {\n            // When not TreeData, then removeEmptyGroups is called just before the BatchRemover is flushed.\n            // However for TreeData, there is no BatchRemover, so we have to call removeEmptyGroups here.\n            const nodeParents = leafRowNodes.map((n) => n.parent!);\n            this.removeEmptyGroups(nodeParents, details);\n        }\n    }\n\n    private forEachParentGroup(details: GroupingDetails, group: RowNode, callback: (parent: RowNode) => void): void {\n        let pointer: RowNode | null = group;\n        while (pointer && pointer !== details.rootNode) {\n            callback(pointer);\n            pointer = pointer.parent;\n        }\n    }\n\n    private removeNodesFromParents(\n        nodesToRemove: RowNode[],\n        details: GroupingDetails,\n        provided: BatchRemover | undefined\n    ): void {\n        // this method can be called with BatchRemover as optional. if it is missed, we created a local version\n        // and flush it at the end. if one is provided, we add to the provided one and it gets flushed elsewhere.\n        const batchRemoverIsLocal = provided == null;\n        const batchRemoverToUse = provided ? provided : new BatchRemover();\n\n        nodesToRemove.forEach((nodeToRemove) => {\n            this.removeFromParent(nodeToRemove, batchRemoverToUse);\n\n            // remove from allLeafChildren. we clear down all parents EXCEPT the Root Node, as\n            // the ClientSideNodeManager is responsible for the Root Node.\n            this.forEachParentGroup(details, nodeToRemove.parent!, (parentNode) => {\n                batchRemoverToUse.removeFromAllLeafChildren(parentNode, nodeToRemove);\n            });\n        });\n\n        if (batchRemoverIsLocal) {\n            batchRemoverToUse.flush();\n        }\n    }\n\n    private removeEmptyGroups(possibleEmptyGroups: RowNode[], details: GroupingDetails): void {\n        // we do this multiple times, as when we remove groups, that means the parent of just removed\n        // group can then be empty. to get around this, if we remove, then we check everything again for\n        // newly emptied groups. the max number of times this will execute is the depth of the group tree.\n        let checkAgain = true;\n\n        const groupShouldBeRemoved = (rowNode: RowNode): boolean => {\n            // because of the while loop below, it's possible we already moved the node,\n            // so double check before trying to remove again.\n            const mapKey = this.getChildrenMappedKey(rowNode.key!, rowNode.rowGroupColumn);\n            const parentRowNode = rowNode.parent;\n            const groupAlreadyRemoved = parentRowNode?.childrenMapped ? !parentRowNode.childrenMapped[mapKey] : true;\n\n            if (groupAlreadyRemoved) {\n                // if not linked, then group was already removed\n                return false;\n            }\n            // if still not removed, then we remove if this group is empty\n            return rowNode.isEmptyRowGroupNode();\n        };\n\n        while (checkAgain) {\n            checkAgain = false;\n            const batchRemover = new BatchRemover();\n            possibleEmptyGroups.forEach((possibleEmptyGroup) => {\n                // remove empty groups\n                this.forEachParentGroup(details, possibleEmptyGroup, (rowNode) => {\n                    const shouldBeRemoved = groupShouldBeRemoved(rowNode);\n                    if (shouldBeRemoved && details.usingTreeData && details.getDataPath?.(rowNode.data)) {\n                        // This node has associated tree data so shouldn't be removed, but should no longer be\n                        // marked as a group if it has no children.\n                        rowNode.setGroup(\n                            (rowNode.childrenAfterGroup && rowNode.childrenAfterGroup.length > 0) ?? false\n                        );\n                    } else if (shouldBeRemoved) {\n                        checkAgain = true;\n\n                        this.removeFromParent(rowNode, batchRemover);\n                        // we remove selection on filler nodes here, as the selection would not be removed\n                        // from the RowNodeManager, as filler nodes don't exist on the RowNodeManager\n                        rowNode.setSelectedParams({ newValue: false, source: 'rowGroupChanged' });\n                    }\n                });\n            });\n            batchRemover.flush();\n        }\n    }\n\n    // removes the node from the parent by:\n    // a) removing from childrenAfterGroup (using batchRemover if present, otherwise immediately)\n    // b) removing from childrenMapped (immediately)\n    // c) setRowTop(null) - as the rowRenderer uses this to know the RowNode is no longer needed\n    // d) setRowIndex(null) - as the rowNode will no longer be displayed.\n    private removeFromParent(child: RowNode, batchRemover?: BatchRemover) {\n        if (child.parent) {\n            if (batchRemover) {\n                batchRemover.removeFromChildrenAfterGroup(child.parent, child);\n            } else {\n                _removeFromArray(child.parent.childrenAfterGroup!, child);\n                child.parent.updateHasChildren();\n            }\n        }\n        const mapKey = this.getChildrenMappedKey(child.key!, child.rowGroupColumn);\n        if (child.parent?.childrenMapped != undefined) {\n            delete child.parent.childrenMapped[mapKey];\n        }\n        // this is important for transition, see rowComp removeFirstPassFuncs. when doing animation and\n        // remove, if rowTop is still present, the rowComp thinks it's just moved position.\n        child.setRowTop(null);\n        child.setRowIndex(null);\n    }\n\n    /**\n     * This is idempotent, but relies on the `key` field being the same throughout a RowNode's lifetime\n     */\n    private addToParent(child: RowNode, parent: RowNode | null) {\n        const mapKey = this.getChildrenMappedKey(child.key!, child.rowGroupColumn);\n        if (parent?.childrenMapped != null) {\n            if (parent?.childrenMapped?.[mapKey] !== child) {\n                parent.childrenMapped[mapKey] = child;\n                parent.childrenAfterGroup!.push(child);\n                parent.setGroup(true); // calls `.updateHasChildren` internally\n            }\n        }\n    }\n\n    private areGroupColsEqual(d1: GroupingDetails, d2: GroupingDetails): boolean {\n        if (d1 == null || d2 == null || d1.pivotMode !== d2.pivotMode) {\n            return false;\n        }\n\n        return _areEqual(d1.groupedCols, d2.groupedCols) && _areEqual(d1.keyCreators, d2.keyCreators);\n    }\n\n    private checkAllGroupDataAfterColsChanged(details: GroupingDetails): void {\n        const recurse = (rowNodes: RowNode[] | null) => {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach((rowNode) => {\n                const isLeafNode = !details.usingTreeData && !rowNode.group;\n                if (isLeafNode) {\n                    return;\n                }\n                const groupInfo: GroupInfo = {\n                    field: rowNode.field,\n                    key: rowNode.key!,\n                    rowGroupColumn: rowNode.rowGroupColumn,\n                    leafNode: rowNode.allLeafChildren?.[0],\n                };\n                this.setGroupData(rowNode, groupInfo, details);\n                recurse(rowNode.childrenAfterGroup);\n            });\n        };\n\n        recurse(details.rootNode.childrenAfterGroup);\n    }\n\n    private shotgunResetEverything(details: GroupingDetails, afterColumnsChanged: boolean): void {\n        if (this.noChangeInGroupingColumns(details, afterColumnsChanged)) {\n            return;\n        }\n\n        // groups are about to get disposed, so need to deselect any that are selected\n        this.selectionService.filterFromSelection((node: RowNode) => node && !node.group);\n\n        const { rootNode, groupedCols } = details;\n        // because we are not creating the root node each time, we have the logic\n        // here to change leafGroup once.\n        // we set .leafGroup to false for tree data, as .leafGroup is only used when pivoting, and pivoting\n        // isn't allowed with treeData, so the grid never actually use .leafGroup when doing treeData.\n        rootNode.leafGroup = details.usingTreeData ? false : groupedCols.length === 0;\n\n        // we are doing everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode\n        rootNode.childrenAfterGroup = [];\n        rootNode.childrenMapped = {};\n        rootNode.updateHasChildren();\n\n        const sibling = rootNode.sibling;\n        if (sibling) {\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenMapped = rootNode.childrenMapped;\n        }\n\n        this.insertNodes(rootNode.allLeafChildren!, details, false);\n    }\n\n    private noChangeInGroupingColumns(details: GroupingDetails, afterColumnsChanged: boolean): boolean {\n        let noFurtherProcessingNeeded = false;\n\n        const groupDisplayColumns = this.showRowGroupColsService.getShowRowGroupCols();\n        const newGroupDisplayColIds = groupDisplayColumns ? groupDisplayColumns.map((c) => c.getId()).join('-') : '';\n\n        if (afterColumnsChanged) {\n            // we only need to redo grouping if doing normal grouping (ie not tree data)\n            // and the group cols have changed.\n            noFurtherProcessingNeeded =\n                details.usingTreeData || this.areGroupColsEqual(details, this.oldGroupingDetails);\n\n            // if the group display cols have changed, then we need to update rowNode.groupData\n            // (regardless of tree data or row grouping)\n            if (this.oldGroupDisplayColIds !== newGroupDisplayColIds) {\n                this.checkAllGroupDataAfterColsChanged(details);\n            }\n        }\n\n        this.oldGroupingDetails = details;\n        this.oldGroupDisplayColIds = newGroupDisplayColIds;\n\n        return noFurtherProcessingNeeded;\n    }\n\n    private insertNodes(newRowNodes: RowNode[], details: GroupingDetails, isMove: boolean): void {\n        if (details.usingTreeData) {\n            this.buildNodeCacheFromRows(newRowNodes, details);\n        } else {\n            this.treeNodeCache.clear();\n        }\n\n        newRowNodes.forEach((rowNode) => {\n            this.insertOneNode(rowNode, details, isMove);\n            if (details.changedPath.isActive()) {\n                details.changedPath.addParentNode(rowNode.parent);\n            }\n        });\n    }\n\n    private insertOneNode(\n        childNode: RowNode,\n        details: GroupingDetails,\n        isMove: boolean,\n        batchRemover?: BatchRemover\n    ): void {\n        const path: GroupInfo[] = this.getGroupInfo(childNode, details);\n        const level = details.usingTreeData ? path.length - 1 : undefined;\n\n        const parentGroup = this.findParentForNode(childNode, path, details, batchRemover, level);\n\n        if (details.usingTreeData) {\n            const info = _last(path);\n            childNode.parent = parentGroup;\n            childNode.level = path.length;\n            this.ensureRowNodeFields(childNode, this.getChildrenMappedKey(info.key, info.rowGroupColumn));\n            this.setGroupData(childNode, info, details);\n            // AG-3441 - only set initial value if node is not being moved\n            if (!isMove) {\n                this.setExpandedInitialValue(details, childNode);\n            }\n            this.addToParent(childNode, parentGroup);\n        } else {\n            if (!parentGroup.group) {\n                _warnOnce(`duplicate group keys for row data, keys should be unique`, [\n                    parentGroup.data,\n                    childNode.data,\n                ]);\n            }\n            childNode.parent = parentGroup;\n            childNode.level = path.length;\n            parentGroup.childrenAfterGroup!.push(childNode);\n            parentGroup.updateHasChildren();\n        }\n    }\n\n    private findParentForNode(\n        childNode: RowNode,\n        path: GroupInfo[],\n        details: GroupingDetails,\n        batchRemover?: BatchRemover,\n        stopLevel?: number\n    ): RowNode {\n        let nextNode: RowNode = details.rootNode;\n\n        path.forEach((groupInfo, level) => {\n            // in some cases (i.e. tree data) the given path includes the child node, so we need to exclude it\n            if (stopLevel !== undefined && level >= stopLevel) {\n                return;\n            }\n\n            nextNode = this.getOrCreateNextNode(nextNode, path, groupInfo, level, details);\n            // node gets added to all group nodes.\n            // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes\n\n            if (!batchRemover?.isRemoveFromAllLeafChildren(nextNode, childNode)) {\n                nextNode.allLeafChildren!.push(childNode);\n            } else {\n                // if this node is about to be removed, prevent that\n                batchRemover?.preventRemoveFromAllLeafChildren(nextNode, childNode);\n            }\n        });\n\n        return nextNode;\n    }\n\n    private getOrCreateNextNode(\n        parentGroup: RowNode,\n        path: GroupInfo[],\n        groupInfo: GroupInfo,\n        level: number,\n        details: GroupingDetails\n    ): RowNode {\n        const key = this.getChildrenMappedKey(groupInfo.key, groupInfo.rowGroupColumn);\n        let nextNode = parentGroup?.childrenMapped?.[key];\n\n        if (!nextNode) {\n            if (details.usingTreeData && this.treeNodeCache.has(path, level, key)) {\n                nextNode = this.treeNodeCache.get(path, level, key);\n                nextNode.parent = parentGroup;\n            } else {\n                nextNode = this.createGroup(groupInfo, parentGroup, level, details);\n            }\n            // attach the new group to the parent\n            this.addToParent(nextNode, parentGroup);\n        }\n\n        return nextNode;\n    }\n\n    /**\n     * Directly re-initialises the `TreeDataNodeCache`\n     */\n    private buildNodeCacheFromRows(rowNodes: RowNode[], details: GroupingDetails): void {\n        let width = 0;\n        const paths = rowNodes.map((node) => {\n            const info = this.getGroupInfo(node, details);\n            width = Math.max(width, info.length);\n            return info;\n        });\n\n        this.treeNodeCache.clear();\n\n        // Iterate through the paths level-by-level, populating the cache with RowNode\n        // instances for all leaves of the hierarchy, and nulls otherwise (to be backfilled\n        // with filler nodes in the subsequent step)\n        for (let level = 0; level < width; level++) {\n            for (const [rowIdx, path] of paths.entries()) {\n                const isDefined = path[level] !== undefined;\n                const isLeaf = path[level + 1] === undefined;\n\n                if (!isDefined) {\n                    continue;\n                }\n\n                const info = path[level];\n\n                const currentValue = this.treeNodeCache.get(path, level, info.key);\n                if (currentValue != null) {\n                    continue;\n                }\n\n                this.treeNodeCache.set(\n                    path,\n                    level,\n                    info.key,\n                    isLeaf ? this.ensureRowNodeFields(rowNodes[rowIdx], info.key) : null\n                );\n            }\n        }\n\n        this.backfillGroups(this.treeNodeCache.inner(), details.rootNode, 0, details);\n    }\n\n    private ensureRowNodeFields(rowNode: RowNode, key?: string): RowNode {\n        if (key !== undefined) {\n            rowNode.key = key;\n        }\n        rowNode.childrenMapped ??= {};\n        rowNode.allLeafChildren ??= [];\n        rowNode.childrenAfterGroup ??= [];\n        return rowNode;\n    }\n\n    /** Walks the TreeDataNodeCache recursively and backfills `null` entries with filler group nodes */\n    private backfillGroups(\n        cache: InnerTreeDataNodeCache,\n        parent: RowNode,\n        level: number,\n        details: GroupingDetails\n    ): void {\n        for (const [key, value] of Object.entries(cache)) {\n            if (value.node === null) {\n                value.node = this.createGroup({ key, rowGroupColumn: null, field: null }, parent, level, details);\n            }\n            this.backfillGroups(value.subtree, value.node, level + 1, details);\n        }\n    }\n\n    private createGroup(groupInfo: GroupInfo, parent: RowNode, level: number, details: GroupingDetails): RowNode {\n        const groupNode = new RowNode(this.beans);\n\n        groupNode.group = true;\n        groupNode.field = groupInfo.field;\n        groupNode.rowGroupColumn = groupInfo.rowGroupColumn;\n\n        this.setGroupData(groupNode, groupInfo, details);\n\n        groupNode.key = groupInfo.key;\n        groupNode.id = this.createGroupId(groupNode, parent, details.usingTreeData, level);\n\n        groupNode.level = level;\n        groupNode.leafGroup = details.usingTreeData ? false : level === details.groupedColCount - 1;\n\n        groupNode.allLeafChildren = [];\n\n        // why is this done here? we are not updating the children count as we go,\n        // i suspect this is updated in the filter stage\n        groupNode.setAllChildrenCount(0);\n\n        groupNode.rowGroupIndex = details.usingTreeData ? null : level;\n\n        groupNode.childrenAfterGroup = [];\n        groupNode.childrenMapped = {};\n        groupNode.updateHasChildren();\n\n        groupNode.parent = parent;\n\n        this.setExpandedInitialValue(details, groupNode);\n\n        return groupNode;\n    }\n\n    private createGroupId(node: RowNode, parent: RowNode, usingTreeData: boolean, level: number): string {\n        let createGroupId: (node: RowNode, parent: RowNode | null, level: number) => string | null;\n        if (usingTreeData) {\n            createGroupId = (node, parent, level) => {\n                if (level < 0) {\n                    return null;\n                } // root node\n                const parentId = parent ? createGroupId(parent, parent.parent, level - 1) : null;\n                return `${parentId == null ? '' : parentId + '-'}${level}-${node.key}`;\n            };\n        } else {\n            createGroupId = (node, parent) => {\n                if (!node.rowGroupColumn) {\n                    return null;\n                } // root node\n                const parentId = parent ? createGroupId(parent, parent.parent, 0) : null;\n                return `${parentId == null ? '' : parentId + '-'}${node.rowGroupColumn.getColId()}-${node.key}`;\n            };\n        }\n\n        // we put 'row-group-' before the group id, so it doesn't clash with standard row id's. we also use 't-' and 'b-'\n        // for top pinned and bottom pinned rows.\n        return RowNode.ID_PREFIX_ROW_GROUP + createGroupId(node, parent, level);\n    }\n\n    private setGroupData(groupNode: RowNode, groupInfo: GroupInfo, details: GroupingDetails): void {\n        groupNode.groupData = {};\n        const groupDisplayCols = this.showRowGroupColsService.getShowRowGroupCols();\n        groupDisplayCols.forEach((col) => {\n            // newGroup.rowGroupColumn=null when working off GroupInfo, and we always display the group in the group column\n            // if rowGroupColumn is present, then it's grid row grouping and we only include if configuration says so\n            const isTreeData = details.usingTreeData;\n            if (isTreeData) {\n                groupNode.groupData![col.getColId()] = groupInfo.key;\n                return;\n            }\n\n            const groupColumn = groupNode.rowGroupColumn;\n            const isRowGroupDisplayed = groupColumn !== null && col.isRowGroupDisplayed(groupColumn.getId());\n            if (isRowGroupDisplayed) {\n                if (details.suppressGroupMaintainValueType) {\n                    groupNode.groupData![col.getColId()] = groupInfo.key;\n                } else {\n                    // if maintain group value type, get the value from any leaf node.\n                    groupNode.groupData![col.getColId()] = this.valueService.getValue(groupColumn, groupInfo.leafNode);\n                }\n            }\n        });\n    }\n\n    private getChildrenMappedKey(key: string, rowGroupColumn: AgColumn | null): string {\n        if (rowGroupColumn) {\n            // grouping by columns\n            return rowGroupColumn.getId() + '-' + key;\n        }\n        // tree data - we don't have rowGroupColumns\n        return key;\n    }\n\n    private setExpandedInitialValue(details: GroupingDetails, groupNode: RowNode): void {\n        // if pivoting the leaf group is never expanded as we do not show leaf rows\n        if (details.pivotMode && groupNode.leafGroup) {\n            groupNode.expanded = false;\n            return;\n        }\n\n        // use callback if exists\n        const userCallback = details.isGroupOpenByDefault;\n        if (userCallback) {\n            const params: WithoutGridCommon<IsGroupOpenByDefaultParams> = {\n                rowNode: groupNode,\n                field: groupNode.field!,\n                key: groupNode.key!,\n                level: groupNode.level,\n                rowGroupColumn: groupNode.rowGroupColumn!,\n            };\n            groupNode.expanded = userCallback(params) == true;\n            return;\n        }\n\n        // use expandByDefault if exists\n        if (details.expandByDefault === -1) {\n            groupNode.expanded = true;\n            return;\n        }\n\n        // otherwise\n        groupNode.expanded = groupNode.level < details.expandByDefault;\n    }\n\n    private getGroupInfo(rowNode: RowNode, details: GroupingDetails): GroupInfo[] {\n        if (details.usingTreeData) {\n            return this.getGroupInfoFromCallback(rowNode, details);\n        }\n        return this.getGroupInfoFromGroupColumns(rowNode, details);\n    }\n\n    private getGroupInfoFromCallback(rowNode: RowNode, details: GroupingDetails): GroupInfo[] {\n        const keys = details.getDataPath?.(rowNode.data);\n\n        if (keys === undefined || keys.length === 0) {\n            _warnOnce(`getDataPath() should not return an empty path for data ${rowNode.data}`);\n        }\n        return keys?.map((key) => ({ key, field: null, rowGroupColumn: null })) ?? [];\n    }\n\n    private getGroupInfoFromGroupColumns(rowNode: RowNode, details: GroupingDetails) {\n        const res: GroupInfo[] = [];\n        details.groupedCols.forEach((groupCol) => {\n            let key: string = this.valueService.getKeyForNode(groupCol, rowNode);\n            let keyExists = key !== null && key !== undefined && key !== '';\n\n            // unbalanced tree and pivot mode don't work together - not because of the grid, it doesn't make\n            // mathematical sense as you are building up a cube. so if pivot mode, we put in a blank key where missing.\n            // this keeps the tree balanced and hence can be represented as a group.\n            const createGroupForEmpty = details.pivotMode || !details.groupAllowUnbalanced;\n            if (createGroupForEmpty && !keyExists) {\n                key = '';\n                keyExists = true;\n            }\n\n            if (keyExists) {\n                const item = {\n                    key: key,\n                    field: groupCol.getColDef().field,\n                    rowGroupColumn: groupCol,\n                    leafNode: rowNode,\n                } as GroupInfo;\n                res.push(item);\n            }\n        });\n        return res;\n    }\n}\n\n/** Hierarchical cache of RowNode or sentinel value indicating a filler group node is necessary */\ntype InnerTreeDataNodeCache = Record<string, { node: null | RowNode; subtree: InnerTreeDataNodeCache }>;\n\nclass TreeDataNodeCache {\n    private cache: InnerTreeDataNodeCache = {};\n\n    private traverse(path: GroupInfo[], level: number): InnerTreeDataNodeCache {\n        let cache = this.cache;\n        let i = 0;\n\n        while (i <= level) {\n            const key = path[i].key;\n\n            if (!(key in cache)) {\n                cache[key] = { node: null, subtree: {} };\n            }\n            cache = cache[key].subtree;\n\n            i++;\n        }\n\n        return cache;\n    }\n\n    public set(path: GroupInfo[], level: number, key: string, value: null | RowNode) {\n        const cache = this.traverse(path, level - 1);\n        cache[key] = { node: value, subtree: {} };\n    }\n\n    public has(path: GroupInfo[], level: number, key: string): boolean {\n        const cache = this.traverse(path, level - 1);\n        return key in cache;\n    }\n\n    public get(path: GroupInfo[], level: number, key: string): RowNode | null | undefined {\n        const cache = this.traverse(path, level - 1);\n        return cache[key]?.node;\n    }\n\n    public clear(): void {\n        this.cache = {};\n    }\n\n    public inner(): InnerTreeDataNodeCache {\n        return this.cache;\n    }\n}\n", "import type { RowNode } from '@ag-grid-community/core';\n\n// doing _removeFromArray() multiple times on a large list can be a bottleneck.\n// when doing large deletes (eg removing 1,000 rows) then we would be calling _removeFromArray()\n// a thousands of times, in particular RootNode.allGroupChildren could be a large list, and\n// 1,000 removes is time consuming as each one requires traversing the full list.\n// to get around this, we do all the removes in a batch. this class manages the batch.\n//\n// This problem was brought to light by a client (AG-2879), with dataset of 20,000\n// in 10,000 groups (2 items per group), then deleting all rows with transaction,\n// it took about 20 seconds to delete. with the BathRemoved, the reduced to less than 1 second.\n\ninterface RemoveDetails {\n    removeFromChildrenAfterGroup: { [id: string]: boolean };\n    removeFromAllLeafChildren: { [id: string]: boolean };\n}\n\nexport class BatchRemover {\n    private allSets: { [parentId: string]: RemoveDetails } = {};\n    private allParents: RowNode[] = [];\n\n    public removeFromChildrenAfterGroup(parent: RowNode, child: RowNode): void {\n        const set = this.getSet(parent);\n        set.removeFromChildrenAfterGroup[child.id!] = true;\n    }\n\n    public isRemoveFromAllLeafChildren(parent: RowNode, child: RowNode): boolean {\n        const set = this.getSet(parent);\n        return !!set.removeFromAllLeafChildren[child.id!];\n    }\n\n    public preventRemoveFromAllLeafChildren(parent: RowNode, child: RowNode): void {\n        const set = this.getSet(parent);\n        delete set.removeFromAllLeafChildren[child.id!];\n    }\n\n    public removeFromAllLeafChildren(parent: RowNode, child: RowNode): void {\n        const set = this.getSet(parent);\n        set.removeFromAllLeafChildren[child.id!] = true;\n    }\n\n    private getSet(parent: RowNode): RemoveDetails {\n        if (!this.allSets[parent.id!]) {\n            this.allSets[parent.id!] = {\n                removeFromAllLeafChildren: {},\n                removeFromChildrenAfterGroup: {},\n            };\n            this.allParents.push(parent);\n        }\n        return this.allSets[parent.id!];\n    }\n\n    public getAllParents(): RowNode[] {\n        return this.allParents;\n    }\n\n    public flush(): void {\n        this.allParents.forEach((parent) => {\n            const nodeDetails = this.allSets[parent.id!];\n\n            parent.childrenAfterGroup = parent.childrenAfterGroup!.filter(\n                (child) => !nodeDetails.removeFromChildrenAfterGroup[child.id!]\n            );\n            parent.allLeafChildren =\n                parent.allLeafChildren?.filter((child) => !nodeDetails.removeFromAllLeafChildren[child.id!]) ?? null;\n            parent.updateHasChildren();\n\n            if (parent.sibling) {\n                parent.sibling.childrenAfterGroup = parent.childrenAfterGroup;\n                parent.sibling.allLeafChildren = parent.allLeafChildren;\n            }\n        });\n        this.allSets = {};\n        this.allParents.length = 0;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColDef,\n    ColGroupDef,\n    ColumnModel,\n    ColumnNameService,\n    FuncColsService,\n    IPivotColDefService,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub, _cloneObject, _iterateObject } from '@ag-grid-community/core';\n\nexport interface PivotColDefServiceResult {\n    pivotColumnGroupDefs: (ColDef | ColGroupDef)[];\n    pivotColumnDefs: ColDef[];\n}\n\nconst PIVOT_ROW_TOTAL_PREFIX = 'PivotRowTotal_';\nexport class PivotColDefService extends BeanStub implements NamedBean, IPivotColDefService {\n    beanName = 'pivotColDefService' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private fieldSeparator: string;\n    private pivotDefaultExpanded: number;\n\n    public postConstruct(): void {\n        const getFieldSeparator = () => this.gos.get('serverSidePivotResultFieldSeparator') ?? '_';\n        this.fieldSeparator = getFieldSeparator();\n        this.addManagedPropertyListener('serverSidePivotResultFieldSeparator', () => {\n            this.fieldSeparator = getFieldSeparator();\n        });\n\n        const getPivotDefaultExpanded = () => this.gos.get('pivotDefaultExpanded');\n        this.pivotDefaultExpanded = getPivotDefaultExpanded();\n        this.addManagedPropertyListener('pivotDefaultExpanded', () => {\n            this.pivotDefaultExpanded = getPivotDefaultExpanded();\n        });\n    }\n\n    public createPivotColumnDefs(uniqueValues: any): PivotColDefServiceResult {\n        // this is passed to the columnModel, to configure the columns and groups we show\n\n        const pivotColumnGroupDefs: (ColDef | ColGroupDef)[] = this.createPivotColumnsFromUniqueValues(uniqueValues);\n\n        function extractColDefs(input: (ColDef | ColGroupDef)[], arr: ColDef[] = []): ColDef[] {\n            input.forEach((def: any) => {\n                if (def.children !== undefined) {\n                    extractColDefs(def.children, arr);\n                } else {\n                    arr.push(def);\n                }\n            });\n            return arr;\n        }\n        const pivotColumnDefs = extractColDefs(pivotColumnGroupDefs);\n\n        // additional columns that contain the aggregated total for each value column per row\n        this.addRowGroupTotals(pivotColumnGroupDefs, pivotColumnDefs);\n\n        // additional group columns that contain child totals for each collapsed child column / group\n        this.addExpandablePivotGroups(pivotColumnGroupDefs, pivotColumnDefs);\n\n        // additional group columns that contain an aggregated total across all child columns\n        this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs);\n\n        // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that\n        // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,\n        // as these use the col defs also\n        const pivotColumnDefsClone: ColDef[] = pivotColumnDefs.map((colDef) => _cloneObject(colDef));\n\n        return {\n            pivotColumnGroupDefs: pivotColumnGroupDefs,\n            pivotColumnDefs: pivotColumnDefsClone,\n        };\n    }\n\n    private createPivotColumnsFromUniqueValues(uniqueValues: any): (ColDef | ColGroupDef)[] {\n        const pivotColumns = this.funcColsService.getPivotColumns();\n        const maxDepth = pivotColumns.length;\n\n        const pivotColumnGroupDefs: (ColDef | ColGroupDef)[] = this.recursivelyBuildGroup(\n            0,\n            uniqueValues,\n            [],\n            maxDepth,\n            pivotColumns\n        );\n        return pivotColumnGroupDefs;\n    }\n\n    private recursivelyBuildGroup(\n        index: number,\n        uniqueValue: any,\n        pivotKeys: string[],\n        maxDepth: number,\n        primaryPivotColumns: AgColumn[]\n    ): ColGroupDef[] | ColDef[] {\n        const measureColumns = this.funcColsService.getValueColumns();\n        if (index >= maxDepth) {\n            // Base case - build the measure columns\n            return this.buildMeasureCols(pivotKeys);\n        }\n\n        // sort by either user provided comparator, or our own one\n        const primaryPivotColumnDefs = primaryPivotColumns[index].getColDef();\n        const comparator = this.headerNameComparator.bind(this, primaryPivotColumnDefs.pivotComparator);\n\n        // Base case for the compact layout, instead of recursing build the last layer of groups as measure columns instead\n        if (\n            measureColumns.length === 1 &&\n            this.gos.get('removePivotHeaderRowWhenSingleValueColumn') &&\n            index === maxDepth - 1\n        ) {\n            const leafCols: ColDef[] = [];\n\n            _iterateObject(uniqueValue, (key) => {\n                const newPivotKeys = [...pivotKeys, key];\n                const colDef = this.createColDef(measureColumns[0], key, newPivotKeys);\n                colDef.columnGroupShow = 'open';\n                leafCols.push(colDef);\n            });\n            leafCols.sort(comparator);\n            return leafCols;\n        }\n        // Recursive case\n        const groups: ColGroupDef[] = [];\n        _iterateObject(uniqueValue, (key, value) => {\n            // expand group by default based on depth of group. (pivotDefaultExpanded provides desired level of depth for expanding group by default)\n            const openByDefault = this.pivotDefaultExpanded === -1 || index < this.pivotDefaultExpanded;\n\n            const newPivotKeys = [...pivotKeys, key];\n            groups.push({\n                children: this.recursivelyBuildGroup(index + 1, value, newPivotKeys, maxDepth, primaryPivotColumns),\n                headerName: key,\n                pivotKeys: newPivotKeys,\n                columnGroupShow: 'open',\n                openByDefault: openByDefault,\n                groupId: this.generateColumnGroupId(newPivotKeys),\n            });\n        });\n        groups.sort(comparator);\n        return groups;\n    }\n\n    private buildMeasureCols(pivotKeys: string[]): ColDef[] {\n        const measureColumns = this.funcColsService.getValueColumns();\n        if (measureColumns.length === 0) {\n            // if no value columns selected, then we insert one blank column, so the user at least sees columns\n            // rendered. otherwise the grid would render with no columns (just empty groups) which would give the\n            // impression that the grid is broken\n            return [this.createColDef(null, '-', pivotKeys)];\n        }\n        return measureColumns.map((measureCol) => {\n            const columnName = this.columnNameService.getDisplayNameForColumn(measureCol, 'header');\n            return {\n                ...this.createColDef(measureCol, columnName, pivotKeys),\n                columnGroupShow: 'open',\n            };\n        });\n    }\n\n    private addExpandablePivotGroups(pivotColumnGroupDefs: (ColDef | ColGroupDef)[], pivotColumnDefs: ColDef[]) {\n        if (this.gos.get('suppressExpandablePivotGroups') || this.gos.get('pivotColumnGroupTotals')) {\n            return;\n        }\n\n        const recursivelyAddSubTotals = (\n            groupDef: ColGroupDef | ColDef,\n            currentPivotColumnDefs: ColDef[],\n            acc: Map<string, string[]>\n        ) => {\n            const group = groupDef as ColGroupDef;\n\n            if (group.children) {\n                const childAcc = new Map();\n\n                group.children.forEach((grp: ColDef | ColGroupDef) => {\n                    recursivelyAddSubTotals(grp, currentPivotColumnDefs, childAcc);\n                });\n\n                const firstGroup = !group.children.some((child) => (child as ColGroupDef).children);\n\n                this.funcColsService.getValueColumns().forEach((valueColumn) => {\n                    const columnName: string | null = this.columnNameService.getDisplayNameForColumn(\n                        valueColumn,\n                        'header'\n                    );\n                    const totalColDef = this.createColDef(valueColumn, columnName, groupDef.pivotKeys);\n                    totalColDef.pivotTotalColumnIds = childAcc.get(valueColumn.getColId());\n\n                    totalColDef.columnGroupShow = 'closed';\n\n                    totalColDef.aggFunc = valueColumn.getAggFunc();\n\n                    if (!firstGroup) {\n                        // add total colDef to group and pivot colDefs array\n                        const children = (groupDef as ColGroupDef).children;\n                        children.push(totalColDef);\n                        currentPivotColumnDefs.push(totalColDef);\n                    }\n                });\n\n                this.merge(acc, childAcc);\n            } else {\n                const def: ColDef = groupDef as ColDef;\n\n                // check that value column exists, i.e. aggFunc is supplied\n                if (!def.pivotValueColumn) {\n                    return;\n                }\n\n                const pivotValueColId = def.pivotValueColumn.getColId();\n\n                const arr = acc.has(pivotValueColId) ? acc.get(pivotValueColId) : [];\n                arr!.push(def.colId!);\n                acc.set(pivotValueColId, arr!);\n            }\n        };\n\n        pivotColumnGroupDefs.forEach((groupDef: ColGroupDef | ColDef) => {\n            recursivelyAddSubTotals(groupDef, pivotColumnDefs, new Map());\n        });\n    }\n\n    private addPivotTotalsToGroups(pivotColumnGroupDefs: (ColDef | ColGroupDef)[], pivotColumnDefs: ColDef[]) {\n        if (!this.gos.get('pivotColumnGroupTotals')) {\n            return;\n        }\n\n        const insertAfter = this.gos.get('pivotColumnGroupTotals') === 'after';\n\n        const valueCols = this.funcColsService.getValueColumns();\n        const aggFuncs = valueCols.map((valueCol) => valueCol.getAggFunc());\n\n        // don't add pivot totals if there is less than 1 aggFunc or they are not all the same\n        if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {\n            // console.warn('AG Grid: aborting adding pivot total columns - value columns require same aggFunc');\n            return;\n        }\n\n        // arbitrarily select a value column to use as a template for pivot columns\n        const valueColumn = valueCols[0];\n\n        pivotColumnGroupDefs.forEach((groupDef: ColGroupDef | ColDef) => {\n            this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, valueColumn, insertAfter);\n        });\n    }\n\n    private recursivelyAddPivotTotal(\n        groupDef: ColGroupDef | ColDef,\n        pivotColumnDefs: ColDef[],\n        valueColumn: AgColumn,\n        insertAfter: boolean\n    ): string[] | null {\n        const group = groupDef as ColGroupDef;\n        if (!group.children) {\n            const def: ColDef = groupDef as ColDef;\n            return def.colId ? [def.colId] : null;\n        }\n\n        let colIds: string[] = [];\n\n        // need to recurse children first to obtain colIds used in the aggregation stage\n        group.children.forEach((grp: ColDef | ColGroupDef) => {\n            const childColIds = this.recursivelyAddPivotTotal(grp, pivotColumnDefs, valueColumn, insertAfter);\n            if (childColIds) {\n                colIds = colIds.concat(childColIds);\n            }\n        });\n\n        // only add total colDef if there is more than 1 child node\n        if (group.children.length > 1) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const headerName = localeTextFunc('pivotColumnGroupTotals', 'Total');\n\n            //create total colDef using an arbitrary value column as a template\n            const totalColDef = this.createColDef(valueColumn, headerName, groupDef.pivotKeys, true);\n            totalColDef.pivotTotalColumnIds = colIds;\n            totalColDef.aggFunc = valueColumn.getAggFunc();\n\n            // add total colDef to group and pivot colDefs array\n            const children = (groupDef as ColGroupDef).children;\n            insertAfter ? children.push(totalColDef) : children.unshift(totalColDef);\n            pivotColumnDefs.push(totalColDef);\n        }\n\n        return colIds;\n    }\n\n    private addRowGroupTotals(pivotColumnGroupDefs: (ColDef | ColGroupDef)[], pivotColumnDefs: ColDef[]) {\n        if (!this.gos.get('pivotRowTotals')) {\n            return;\n        }\n\n        const insertAfter = this.gos.get('pivotRowTotals') === 'after';\n\n        const valueColumns = this.funcColsService.getValueColumns();\n        // order of row group totals depends on position\n        const valueCols = insertAfter ? valueColumns.slice() : valueColumns.slice().reverse();\n\n        for (let i = 0; i < valueCols.length; i++) {\n            const valueCol = valueCols[i];\n\n            let colIds: any[] = [];\n            pivotColumnGroupDefs.forEach((groupDef: ColGroupDef | ColDef) => {\n                colIds = colIds.concat(this.extractColIdsForValueColumn(groupDef, valueCol));\n            });\n\n            const withGroup = valueCols.length > 1 || !this.gos.get('removePivotHeaderRowWhenSingleValueColumn');\n            this.createRowGroupTotal(pivotColumnGroupDefs, pivotColumnDefs, valueCol, colIds, insertAfter, withGroup);\n        }\n    }\n\n    private extractColIdsForValueColumn(groupDef: ColGroupDef | ColDef, valueColumn: AgColumn): string[] {\n        const group = groupDef as ColGroupDef;\n        if (!group.children) {\n            const colDef = group as ColDef;\n            return colDef.pivotValueColumn === valueColumn && colDef.colId ? [colDef.colId] : [];\n        }\n\n        let colIds: string[] = [];\n        group.children.forEach((grp: ColDef | ColGroupDef) => {\n            this.extractColIdsForValueColumn(grp, valueColumn);\n            const childColIds = this.extractColIdsForValueColumn(grp, valueColumn);\n            colIds = colIds.concat(childColIds);\n        });\n\n        return colIds;\n    }\n\n    private createRowGroupTotal(\n        parentChildren: (ColGroupDef | ColDef)[],\n        pivotColumnDefs: ColDef[],\n        valueColumn: AgColumn,\n        colIds: string[],\n        insertAfter: boolean,\n        addGroup: boolean\n    ): void {\n        const measureColumns = this.funcColsService.getValueColumns();\n\n        let colDef: ColDef;\n\n        if (measureColumns.length === 0) {\n            colDef = this.createColDef(null, '-', []);\n        } else {\n            const columnName: string | null = this.columnNameService.getDisplayNameForColumn(valueColumn, 'header');\n            colDef = this.createColDef(valueColumn, columnName, []);\n            colDef.pivotTotalColumnIds = colIds;\n        }\n\n        colDef.colId = PIVOT_ROW_TOTAL_PREFIX + colDef.colId;\n        pivotColumnDefs.push(colDef);\n\n        const valueGroup: ColGroupDef | ColDef = addGroup\n            ? {\n                  children: [colDef],\n                  pivotKeys: [],\n                  groupId: `${PIVOT_ROW_TOTAL_PREFIX}_pivotGroup_${valueColumn.getColId()}`,\n              }\n            : colDef;\n\n        insertAfter ? parentChildren.push(valueGroup) : parentChildren.unshift(valueGroup);\n    }\n\n    private createColDef(\n        valueColumn: AgColumn | null,\n        headerName: any,\n        pivotKeys: string[] | undefined,\n        totalColumn: boolean = false\n    ): ColDef {\n        const colDef: ColDef = {};\n\n        // This is null when there are no measure columns and we're creating placeholder columns\n        if (valueColumn) {\n            const colDefToCopy = valueColumn.getColDef();\n            Object.assign(colDef, colDefToCopy);\n            // even if original column was hidden, we always show the pivot value column, otherwise it would be\n            // very confusing for people thinking the pivot is broken\n            colDef.hide = false;\n        }\n\n        colDef.headerName = headerName;\n        colDef.colId = this.generateColumnId(\n            pivotKeys || [],\n            valueColumn && !totalColumn ? valueColumn.getColId() : ''\n        );\n\n        // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to\n        // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.\n        colDef.field = colDef.colId;\n        // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n        // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n        colDef.valueGetter = (params) => params.data?.[params.colDef.field!];\n\n        colDef.pivotKeys = pivotKeys;\n        colDef.pivotValueColumn = valueColumn;\n        if (colDef.filter === true) {\n            colDef.filter = 'agNumberColumnFilter';\n        }\n\n        return colDef;\n    }\n\n    private sameAggFuncs(aggFuncs: any[]) {\n        if (aggFuncs.length == 1) {\n            return true;\n        }\n        //check if all aggFunc's match\n        for (let i = 1; i < aggFuncs.length; i++) {\n            if (aggFuncs[i] !== aggFuncs[0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private headerNameComparator(\n        userComparator: (a: string | undefined, b: string | undefined) => number,\n        a: ColGroupDef | ColDef,\n        b: ColGroupDef | ColDef\n    ): number {\n        if (userComparator) {\n            return userComparator(a.headerName, b.headerName);\n        } else {\n            if (a.headerName && !b.headerName) {\n                return 1;\n            } else if (!a.headerName && b.headerName) {\n                return -1;\n            }\n\n            // slightly naff here - just to satify typescript\n            // really should be &&, but if so ts complains\n            // the above if/else checks would deal with either being falsy, so at this stage if either are falsy, both are\n            // ..still naff though\n            if (!a.headerName || !b.headerName) {\n                return 0;\n            }\n\n            if (a.headerName < b.headerName) {\n                return -1;\n            }\n\n            if (a.headerName > b.headerName) {\n                return 1;\n            }\n\n            return 0;\n        }\n    }\n\n    private merge(m1: Map<string, string[]>, m2: Map<any, any>) {\n        m2.forEach((value, key) => {\n            const existingList = m1.has(key) ? m1.get(key) : [];\n            const updatedList = [...existingList!, ...value];\n            m1.set(key, updatedList);\n        });\n    }\n\n    private generateColumnGroupId(pivotKeys: string[]): string {\n        const pivotCols = this.funcColsService.getPivotColumns().map((col) => col.getColId());\n        return `pivotGroup_${pivotCols.join('-')}_${pivotKeys.join('-')}`;\n    }\n\n    private generateColumnId(pivotKeys: string[], measureColumnId: string) {\n        const pivotCols = this.funcColsService.getPivotColumns().map((col) => col.getColId());\n        return `pivot_${pivotCols.join('-')}_${pivotKeys.join('-')}_${measureColumnId}`;\n    }\n\n    /**\n     * Used by the SSRM to create secondary columns from provided fields\n     * @param fields\n     */\n    public createColDefsFromFields(fields: string[]): (ColDef | ColGroupDef)[] {\n        interface UniqueValue {\n            [key: string]: UniqueValue;\n        }\n        // tear the ids down into groups, while this could be done in-step with the next stage, the lookup is faster\n        // than searching col group children array for the right group\n        const uniqueValues: UniqueValue = {};\n        for (let i = 0; i < fields.length; i++) {\n            const field = fields[i];\n            const parts = field.split(this.fieldSeparator);\n\n            let level: UniqueValue = uniqueValues;\n            for (let p = 0; p < parts.length; p++) {\n                const part = parts[p];\n                if (level[part] == null) {\n                    level[part] = {};\n                }\n                level = level[part];\n            }\n        }\n\n        const uniqueValuesToGroups = (\n            id: string,\n            key: string,\n            uniqueValues: UniqueValue,\n            depth: number\n        ): ColDef | ColGroupDef => {\n            const children: (ColDef | ColGroupDef)[] = [];\n            for (const key in uniqueValues) {\n                const item = uniqueValues[key];\n                const child = uniqueValuesToGroups(`${id}${this.fieldSeparator}${key}`, key, item, depth + 1);\n                children.push(child);\n            }\n\n            if (children.length === 0) {\n                const potentialAggCol = this.columnModel.getColDefCol(key);\n                if (potentialAggCol) {\n                    const headerName = this.columnNameService.getDisplayNameForColumn(potentialAggCol, 'header') ?? key;\n                    const colDef = this.createColDef(potentialAggCol, headerName, undefined, false);\n                    colDef.colId = id;\n                    colDef.aggFunc = potentialAggCol.getAggFunc();\n                    colDef.valueGetter = (params) => params.data?.[id];\n                    return colDef;\n                }\n\n                const col: ColDef = {\n                    colId: id,\n                    headerName: key,\n                    // this is to support using pinned rows, normally the data will be extracted from the aggData object using the colId\n                    // however pinned rows still access the data object by field, this prevents values with dots from being treated as complex objects\n                    valueGetter: (params) => params.data?.[id],\n                };\n                return col;\n            }\n\n            // this is a bit sketchy. As the fields can be anything we just build groups as deep as the fields go.\n            // nothing says user has to give us groups the same depth.\n            const collapseSingleChildren = this.gos.get('removePivotHeaderRowWhenSingleValueColumn');\n            if (collapseSingleChildren && children.length === 1 && 'colId' in children[0]) {\n                children[0].headerName = key;\n                return children[0];\n            }\n\n            const group: ColGroupDef = {\n                openByDefault: this.pivotDefaultExpanded === -1 || depth < this.pivotDefaultExpanded,\n                groupId: id,\n                headerName: key,\n                children,\n            };\n            return group;\n        };\n\n        const res: (ColDef | ColGroupDef)[] = [];\n        for (const key in uniqueValues) {\n            const item = uniqueValues[key];\n            const col = uniqueValuesToGroups(key, key, item, 0);\n            res.push(col);\n        }\n        return res;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ChangedPath,\n    ColDef,\n    ColumnModel,\n    FuncColsService,\n    GridOptions,\n    IRowNodeStage,\n    NamedBean,\n    PivotMaxColumnsExceededEvent,\n    PivotResultColsService,\n    RowNode,\n    StageExecuteParams,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _iterateObject, _missing } from '@ag-grid-community/core';\n\nimport type { PivotColDefService } from './pivotColDefService';\n\nconst EXCEEDED_MAX_UNIQUE_VALUES = 'Exceeded maximum allowed pivot column count.';\n\nexport class PivotStage extends BeanStub implements NamedBean, IRowNodeStage {\n    beanName = 'pivotStage' as const;\n\n    private valueService: ValueService;\n    private columnModel: ColumnModel;\n    private pivotResultColsService: PivotResultColsService;\n    private funcColsService: FuncColsService;\n    private pivotColDefService: PivotColDefService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.valueService = beans.valueService;\n        this.columnModel = beans.columnModel;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.funcColsService = beans.funcColsService;\n        this.pivotColDefService = beans.pivotColDefService as PivotColDefService;\n    }\n\n    private uniqueValues: any = {};\n\n    private pivotColumnDefs: ColDef[];\n\n    private aggregationColumnsHashLastTime: string | null;\n    private aggregationFuncsHashLastTime: string;\n\n    private groupColumnsHashLastTime: string | null;\n\n    private pivotRowTotalsLastTime: GridOptions['pivotRowTotals'];\n    private pivotColumnGroupTotalsLastTime: GridOptions['pivotColumnGroupTotals'];\n    private suppressExpandablePivotGroupsLastTime: GridOptions['suppressExpandablePivotGroups'];\n    private removePivotHeaderRowWhenSingleValueColumnLastTime: GridOptions['removePivotHeaderRowWhenSingleValueColumn'];\n\n    private lastTimeFailed = false;\n\n    private maxUniqueValues: number = -1;\n\n    public execute(params: StageExecuteParams): void {\n        const changedPath = params.changedPath;\n        if (this.columnModel.isPivotActive()) {\n            this.executePivotOn(changedPath!);\n        } else {\n            this.executePivotOff(changedPath!);\n        }\n    }\n\n    private executePivotOff(changedPath: ChangedPath): void {\n        this.aggregationColumnsHashLastTime = null;\n        this.uniqueValues = {};\n        if (this.pivotResultColsService.isPivotResultColsPresent()) {\n            this.pivotResultColsService.setPivotResultCols(null, 'rowModelUpdated');\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n    }\n\n    private executePivotOn(changedPath: ChangedPath): void {\n        const numberOfAggregationColumns = this.funcColsService.getValueColumns().length ?? 1;\n\n        // As unique values creates one column per aggregation column, divide max columns by number of aggregation columns\n        // to get the max number of unique values.\n        const configuredMaxCols = this.gos.get('pivotMaxGeneratedColumns');\n        this.maxUniqueValues = configuredMaxCols === -1 ? -1 : configuredMaxCols / numberOfAggregationColumns;\n        let uniqueValues;\n        try {\n            // try catch is used to force execution to stop when the max count is exceeded.\n            uniqueValues = this.bucketUpRowNodes(changedPath);\n        } catch (e) {\n            // message is checked rather than inheritance as the build seems to break instanceof\n            if (e.message === EXCEEDED_MAX_UNIQUE_VALUES) {\n                this.pivotResultColsService.setPivotResultCols([], 'rowModelUpdated');\n                const event: WithoutGridCommon<PivotMaxColumnsExceededEvent> = {\n                    type: 'pivotMaxColumnsExceeded',\n                    message: e.message,\n                };\n                this.eventService.dispatchEvent(event);\n                this.lastTimeFailed = true;\n                return;\n            }\n            throw e;\n        }\n\n        const uniqueValuesChanged = this.setUniqueValues(uniqueValues);\n\n        const aggregationColumns = this.funcColsService.getValueColumns();\n        const aggregationColumnsHash = aggregationColumns\n            .map((column) => `${column.getId()}-${column.getColDef().headerName}`)\n            .join('#');\n        const aggregationFuncsHash = aggregationColumns.map((column) => column.getAggFunc()!.toString()).join('#');\n\n        const aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;\n        const aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;\n        this.aggregationColumnsHashLastTime = aggregationColumnsHash;\n        this.aggregationFuncsHashLastTime = aggregationFuncsHash;\n\n        const groupColumnsHash = this.funcColsService\n            .getRowGroupColumns()\n            .map((column) => column.getId())\n            .join('#');\n        const groupColumnsChanged = groupColumnsHash !== this.groupColumnsHashLastTime;\n        this.groupColumnsHashLastTime = groupColumnsHash;\n\n        const pivotRowTotals = this.gos.get('pivotRowTotals');\n        const pivotColumnGroupTotals = this.gos.get('pivotColumnGroupTotals');\n        const suppressExpandablePivotGroups = this.gos.get('suppressExpandablePivotGroups');\n        const removePivotHeaderRowWhenSingleValueColumn = this.gos.get('removePivotHeaderRowWhenSingleValueColumn');\n\n        const anyGridOptionsChanged =\n            pivotRowTotals !== this.pivotRowTotalsLastTime ||\n            pivotColumnGroupTotals !== this.pivotColumnGroupTotalsLastTime ||\n            suppressExpandablePivotGroups !== this.suppressExpandablePivotGroupsLastTime ||\n            removePivotHeaderRowWhenSingleValueColumn !== this.removePivotHeaderRowWhenSingleValueColumnLastTime;\n\n        this.pivotRowTotalsLastTime = pivotRowTotals;\n        this.pivotColumnGroupTotalsLastTime = pivotColumnGroupTotals;\n        this.suppressExpandablePivotGroupsLastTime = suppressExpandablePivotGroups;\n        this.removePivotHeaderRowWhenSingleValueColumnLastTime = removePivotHeaderRowWhenSingleValueColumn;\n\n        if (\n            this.lastTimeFailed ||\n            uniqueValuesChanged ||\n            aggregationColumnsChanged ||\n            groupColumnsChanged ||\n            aggregationFuncsChanged ||\n            anyGridOptionsChanged\n        ) {\n            const { pivotColumnGroupDefs, pivotColumnDefs } = this.pivotColDefService.createPivotColumnDefs(\n                this.uniqueValues\n            );\n            this.pivotColumnDefs = pivotColumnDefs;\n            this.pivotResultColsService.setPivotResultCols(pivotColumnGroupDefs, 'rowModelUpdated');\n            // because the secondary columns have changed, then the aggregation needs to visit the whole\n            // tree again, so we make the changedPath not active, to force aggregation to visit all paths.\n            if (changedPath) {\n                changedPath.setInactive();\n            }\n        }\n        this.lastTimeFailed = false;\n    }\n\n    private setUniqueValues(newValues: any): boolean {\n        const json1 = JSON.stringify(newValues);\n        const json2 = JSON.stringify(this.uniqueValues);\n\n        const uniqueValuesChanged = json1 !== json2;\n\n        // we only continue the below if the unique values are different, as otherwise\n        // the result will be the same as the last time we did it\n        if (uniqueValuesChanged) {\n            this.uniqueValues = newValues;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private currentUniqueCount = 0;\n    private bucketUpRowNodes(changedPath: ChangedPath): any {\n        this.currentUniqueCount = 0;\n        // accessed from inside inner function\n        const uniqueValues: any = {};\n\n        // ensure childrenMapped is cleared, as if a node has been filtered out it should not have mapped children.\n        changedPath.forEachChangedNodeDepthFirst((node) => {\n            if (node.leafGroup) {\n                node.childrenMapped = null;\n            }\n        });\n\n        const recursivelyBucketFilteredChildren = (node: RowNode) => {\n            if (node.leafGroup) {\n                this.bucketRowNode(node, uniqueValues);\n            } else {\n                node.childrenAfterFilter?.forEach(recursivelyBucketFilteredChildren);\n            }\n        };\n\n        changedPath.executeFromRootNode(recursivelyBucketFilteredChildren);\n\n        return uniqueValues;\n    }\n\n    private bucketRowNode(rowNode: RowNode, uniqueValues: any): void {\n        const pivotColumns = this.funcColsService.getPivotColumns();\n\n        if (pivotColumns.length === 0) {\n            rowNode.childrenMapped = null;\n        } else {\n            rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter!, pivotColumns, 0, uniqueValues);\n        }\n\n        if (rowNode.sibling) {\n            rowNode.sibling.childrenMapped = rowNode.childrenMapped;\n        }\n    }\n\n    private bucketChildren(\n        children: RowNode[],\n        pivotColumns: AgColumn[],\n        pivotIndex: number,\n        uniqueValues: any\n    ): Record<string, any> {\n        const mappedChildren: Record<string, any> = {};\n        const pivotColumn = pivotColumns[pivotIndex];\n\n        // map the children out based on the pivot column\n        children.forEach((child: RowNode) => {\n            let key: string = this.valueService.getKeyForNode(pivotColumn, child);\n\n            if (_missing(key)) {\n                key = '';\n            }\n\n            if (!uniqueValues[key]) {\n                this.currentUniqueCount += 1;\n                uniqueValues[key] = {};\n\n                const doesGeneratedColMaxExist = this.maxUniqueValues !== -1;\n                const hasExceededColMax = this.currentUniqueCount > this.maxUniqueValues;\n                if (doesGeneratedColMaxExist && hasExceededColMax) {\n                    // throw an error to prevent all additional execution and escape the loops.\n                    throw Error(EXCEEDED_MAX_UNIQUE_VALUES);\n                }\n            }\n\n            if (!mappedChildren[key]) {\n                mappedChildren[key] = [];\n            }\n            mappedChildren[key].push(child);\n        });\n\n        // if it's the last pivot column, return as is, otherwise go one level further in the map\n        if (pivotIndex === pivotColumns.length - 1) {\n            return mappedChildren;\n        } else {\n            const result: Record<string, any> = {};\n\n            _iterateObject(mappedChildren, (key: string, value: RowNode[]) => {\n                result[key] = this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);\n            });\n\n            return result;\n        }\n    }\n\n    public getPivotColumnDefs(): ColDef[] {\n        return this.pivotColumnDefs;\n    }\n}\n", "import type { BeanCollection, ColDef, ColGroupDef, Column, IAggFunc } from '@ag-grid-community/core';\n\n/** @deprecated v31.1 */\nexport function addAggFunc(beans: BeanCollection, key: string, aggFunc: IAggFunc): void {\n    if (beans.aggFuncService) {\n        beans.aggFuncService.addAggFuncs({ key: aggFunc });\n    }\n}\n\nexport function addAggFuncs(beans: BeanCollection, aggFuncs: { [key: string]: IAggFunc }): void {\n    if (beans.aggFuncService) {\n        beans.aggFuncService.addAggFuncs(aggFuncs);\n    }\n}\n\nexport function clearAggFuncs(beans: BeanCollection): void {\n    if (beans.aggFuncService) {\n        beans.aggFuncService.clear();\n    }\n}\n\nexport function setColumnAggFunc(\n    beans: BeanCollection,\n    key: string | ColDef | Column,\n    aggFunc: string | IAggFunc | null | undefined\n): void {\n    beans.funcColsService.setColumnAggFunc(key, aggFunc, 'api');\n}\n\nexport function isPivotMode(beans: BeanCollection): boolean {\n    return beans.columnModel.isPivotMode();\n}\n\nexport function getPivotResultColumn<TValue = any, TData = any>(\n    beans: BeanCollection,\n    pivotKeys: string[],\n    valueColKey: string | ColDef<TData, TValue> | Column<TValue>\n): Column<TValue> | null {\n    return beans.pivotResultColsService.lookupPivotResultCol(pivotKeys, valueColKey);\n}\n\nexport function setValueColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.setValueColumns(colKeys, 'api');\n}\n\nexport function getValueColumns(beans: BeanCollection): Column[] {\n    return beans.funcColsService.getValueColumns();\n}\n\n/** @deprecated v31.1 */\nexport function removeValueColumn(beans: BeanCollection, colKey: string | ColDef | Column): void {\n    beans.funcColsService.removeValueColumns([colKey], 'api');\n}\n\nexport function removeValueColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.removeValueColumns(colKeys, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function addValueColumn(beans: BeanCollection, colKey: string | ColDef | Column): void {\n    beans.funcColsService.addValueColumns([colKey], 'api');\n}\n\nexport function addValueColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.addValueColumns(colKeys, 'api');\n}\n\nexport function setRowGroupColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.setRowGroupColumns(colKeys, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function removeRowGroupColumn(beans: BeanCollection, colKey: string | ColDef | Column): void {\n    beans.funcColsService.removeRowGroupColumns([colKey], 'api');\n}\n\nexport function removeRowGroupColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.removeRowGroupColumns(colKeys, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function addRowGroupColumn(beans: BeanCollection, colKey: string | ColDef | Column): void {\n    beans.funcColsService.addRowGroupColumns([colKey], 'api');\n}\n\nexport function addRowGroupColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.addRowGroupColumns(colKeys, 'api');\n}\n\nexport function moveRowGroupColumn(beans: BeanCollection, fromIndex: number, toIndex: number): void {\n    beans.funcColsService.moveRowGroupColumn(fromIndex, toIndex, 'api');\n}\n\nexport function getRowGroupColumns(beans: BeanCollection): Column[] {\n    return beans.funcColsService.getRowGroupColumns();\n}\n\nexport function setPivotColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.setPivotColumns(colKeys, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function removePivotColumn(beans: BeanCollection, colKey: string | ColDef | Column): void {\n    beans.funcColsService.removePivotColumns([colKey], 'api');\n}\n\nexport function removePivotColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.removePivotColumns(colKeys, 'api');\n}\n\n/** @deprecated v31.1 */\nexport function addPivotColumn(beans: BeanCollection, colKey: string | ColDef | Column): void {\n    beans.funcColsService.addPivotColumns([colKey], 'api');\n}\n\nexport function addPivotColumns(beans: BeanCollection, colKeys: (string | ColDef | Column)[]): void {\n    beans.funcColsService.addPivotColumns(colKeys, 'api');\n}\n\nexport function getPivotColumns(beans: BeanCollection): Column[] {\n    return beans.funcColsService.getPivotColumns();\n}\n\nexport function setPivotResultColumns(beans: BeanCollection, colDefs: (ColDef | ColGroupDef)[] | null): void {\n    beans.pivotResultColsService.setPivotResultCols(colDefs, 'api');\n}\n\nexport function getPivotResultColumns(beans: BeanCollection): Column[] | null {\n    const pivotResultCols = beans.pivotResultColsService.getPivotResultCols();\n    return pivotResultCols ? pivotResultCols.list : null;\n}\n", "import { BeanStub } from '@ag-grid-community/core';\nimport type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    FuncColsService,\n    IShowRowGroupColsService,\n    NamedBean,\n} from '@ag-grid-community/core';\n\nexport class ShowRowGroupColsService extends BeanStub implements NamedBean, IShowRowGroupColsService {\n    beanName = 'showRowGroupColsService' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    private showRowGroupCols: AgColumn[];\n    private showRowGroupColsMap: { [originalColumnId: string]: AgColumn };\n\n    public refresh(): void {\n        this.showRowGroupCols = [];\n        this.showRowGroupColsMap = {};\n\n        this.columnModel.getCols().forEach((col) => {\n            const colDef = col.getColDef();\n            const showRowGroup = colDef.showRowGroup;\n\n            const isString = typeof showRowGroup === 'string';\n            const isTrue = showRowGroup === true;\n\n            if (!isString && !isTrue) {\n                return;\n            }\n\n            this.showRowGroupCols.push(col);\n\n            if (isString) {\n                this.showRowGroupColsMap[showRowGroup] = col;\n            } else {\n                const rowGroupCols = this.funcColsService.getRowGroupColumns();\n                rowGroupCols.forEach((rowGroupCol) => {\n                    this.showRowGroupColsMap[rowGroupCol.getId()] = col;\n                });\n            }\n        });\n    }\n\n    public getShowRowGroupCols(): AgColumn[] {\n        return this.showRowGroupCols;\n    }\n\n    public getShowRowGroupCol(id: string): AgColumn | undefined {\n        return this.showRowGroupColsMap[id];\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type {\n    AgColumn,\n    DragAndDropIcon,\n    DraggingEvent,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { _createIconNoSpan } from '@ag-grid-community/core';\n\nimport { BaseDropZonePanel } from './baseDropZonePanel';\n\nexport class ValuesDropZonePanel extends BaseDropZonePanel {\n    constructor(horizontal: boolean) {\n        super(horizontal, 'aggregation');\n    }\n\n    public postConstruct(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');\n        const title = localeTextFunc('values', 'Values');\n\n        super.init({\n            icon: _createIconNoSpan('valuePanel', this.gos, null)!,\n            emptyMessage: emptyMessage,\n            title: title,\n        });\n\n        this.addManagedEventListeners({ columnValueChanged: this.refreshGui.bind(this) });\n    }\n\n    protected getAriaLabel(): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const label = translate('ariaValuesDropZonePanelLabel', 'Values');\n\n        return label;\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'valueColumnsList';\n        return res;\n    }\n\n    protected getIconName(): DragAndDropIcon {\n        return this.isPotentialDndItems() ? 'aggregate' : 'notAllowed';\n    }\n\n    protected isItemDroppable(column: AgColumn, draggingEvent: DraggingEvent): boolean {\n        // we never allow grouping of secondary columns\n        if (this.gos.get('functionsReadOnly') || !column.isPrimary()) {\n            return false;\n        }\n\n        return column.isAllowValue() && (!column.isValueActive() || this.isSourceEventFromTarget(draggingEvent));\n    }\n\n    protected updateItems(columns: AgColumn[]): void {\n        this.funcColsService.setValueColumns(columns, 'toolPanelUi');\n    }\n\n    protected getExistingItems(): AgColumn[] {\n        return this.funcColsService.getValueColumns();\n    }\n}\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { ToolPanelColDefService } from './sideBar/common/toolPanelColDefService';\nimport {\n    closeToolPanel,\n    getOpenedToolPanel,\n    getSideBar,\n    getToolPanelInstance,\n    isSideBarVisible,\n    isToolPanelShowing,\n    openToolPanel,\n    refreshToolPanel,\n    setSideBarPosition,\n    setSideBarVisible,\n} from './sideBar/sideBarApi';\nimport { SideBarService } from './sideBar/sideBarService';\nimport { VERSION } from './version';\n\nexport const SideBarCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.SideBarModule}-core`,\n    beans: [ToolPanelColDefService, SideBarService],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const SideBarApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.SideBarModule}-api`,\n    apiFunctions: {\n        isSideBarVisible,\n        setSideBarVisible,\n        setSideBarPosition,\n        openToolPanel,\n        closeToolPanel,\n        getOpenedToolPanel,\n        refreshToolPanel,\n        isToolPanelShowing,\n        getToolPanelInstance,\n        getSideBar,\n    },\n    dependantModules: [SideBarCoreModule],\n};\n\nexport const SideBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SideBarModule,\n    dependantModules: [SideBarCoreModule, SideBarApiModule],\n};\n", "import type {\n    AbstractColDef,\n    AgColumn,\n    BeanCollection,\n    ColDef,\n    ColGroupDef,\n    ColumnModel,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport {\n    AgProvidedColumnGroup,\n    BeanStub,\n    _includes,\n    _last,\n    _warnOnce,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\n\nexport class ToolPanelColDefService extends BeanStub implements NamedBean {\n    beanName = 'toolPanelColDefService' as const;\n\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    public createColumnTree(colDefs: AbstractColDef[]): (AgColumn | AgProvidedColumnGroup)[] {\n        const invalidColIds: AbstractColDef[] = [];\n\n        const createDummyColGroup = (\n            abstractColDef: AbstractColDef,\n            depth: number\n        ): AgColumn | AgProvidedColumnGroup => {\n            if (this.isColGroupDef(abstractColDef)) {\n                // creating 'dummy' group which is not associated with grid column group\n                const groupDef = abstractColDef as ColGroupDef;\n                const groupId = typeof groupDef.groupId !== 'undefined' ? groupDef.groupId : groupDef.headerName;\n                const group = new AgProvidedColumnGroup(groupDef, groupId!, false, depth);\n                const children: (AgColumn | AgProvidedColumnGroup)[] = [];\n                groupDef.children.forEach((def) => {\n                    const child = createDummyColGroup(def, depth + 1);\n                    // check column exists in case invalid colDef is supplied for primary column\n                    if (child) {\n                        children.push(child);\n                    }\n                });\n                group.setChildren(children);\n\n                return group;\n            } else {\n                const colDef = abstractColDef as ColDef;\n                const key = colDef.colId ? colDef.colId : colDef.field;\n                const column = this.columnModel.getColDefCol(key!)!;\n\n                if (!column) {\n                    invalidColIds.push(colDef);\n                }\n\n                return column;\n            }\n        };\n\n        const mappedResults: (AgColumn | AgProvidedColumnGroup)[] = [];\n        colDefs.forEach((colDef) => {\n            const result = createDummyColGroup(colDef, 0);\n            if (result) {\n                // only return correctly mapped colDef results\n                mappedResults.push(result);\n            }\n        });\n\n        if (invalidColIds.length > 0) {\n            _warnOnce('unable to find grid columns for the supplied colDef(s):', invalidColIds);\n        }\n\n        return mappedResults;\n    }\n\n    public syncLayoutWithGrid(syncLayoutCallback: (colDefs: AbstractColDef[]) => void): void {\n        // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)\n        const leafPathTrees: AbstractColDef[] = this.getLeafPathTrees();\n\n        // merge leaf path tree taking split column groups into account\n        const mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);\n\n        // sync layout with merged column trees\n        syncLayoutCallback(mergedColumnTrees);\n    }\n\n    private getLeafPathTrees(): AbstractColDef[] {\n        // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.\n        const getLeafPathTree = (node: AgColumn | AgProvidedColumnGroup, childDef: AbstractColDef): AbstractColDef => {\n            let leafPathTree: AbstractColDef;\n\n            // build up tree in reverse order\n            if (isProvidedColumnGroup(node)) {\n                if (node.isPadding()) {\n                    // skip over padding groups\n                    leafPathTree = childDef;\n                } else {\n                    const groupDef = Object.assign({}, node.getColGroupDef());\n                    // ensure group contains groupId\n                    groupDef.groupId = node.getGroupId();\n                    groupDef.children = [childDef];\n                    leafPathTree = groupDef;\n                }\n            } else {\n                const colDef = Object.assign({}, node.getColDef());\n                // ensure col contains colId\n                colDef.colId = node.getColId();\n                leafPathTree = colDef;\n            }\n\n            // walk tree\n            const parent = node.getOriginalParent();\n            if (parent) {\n                // keep walking up the tree until we reach the root\n                return getLeafPathTree(parent, leafPathTree);\n            } else {\n                // we have reached the root - exit with resulting leaf path tree\n                return leafPathTree;\n            }\n        };\n\n        // obtain a sorted list of all grid columns\n        const allGridColumns = this.columnModel.getCols();\n\n        // only primary columns and non row group columns should appear in the tool panel\n        const allPrimaryGridColumns = allGridColumns.filter((column) => {\n            const colDef = column.getColDef();\n            return column.isPrimary() && !colDef.showRowGroup;\n        });\n\n        // construct a leaf path tree for each column\n        return allPrimaryGridColumns.map((col) => getLeafPathTree(col, col.getColDef()));\n    }\n\n    private mergeLeafPathTrees(leafPathTrees: AbstractColDef[]) {\n        const matchingRootGroupIds = (pathA: AbstractColDef, pathB: AbstractColDef) => {\n            const bothPathsAreGroups = this.isColGroupDef(pathA) && this.isColGroupDef(pathB);\n            return bothPathsAreGroups && this.getId(pathA) === this.getId(pathB);\n        };\n\n        const mergeTrees = (treeA: AbstractColDef, treeB: AbstractColDef): AbstractColDef => {\n            if (!this.isColGroupDef(treeB)) {\n                return treeA;\n            }\n\n            const mergeResult = treeA;\n            const groupToMerge = treeB as ColGroupDef;\n\n            if (groupToMerge.children && groupToMerge.groupId) {\n                const added = this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);\n                if (added) {\n                    return mergeResult;\n                }\n            }\n\n            groupToMerge.children.forEach((child) => mergeTrees(mergeResult, child));\n\n            return mergeResult;\n        };\n\n        // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf\n        // path groups with the same root group id are contiguous.\n        const mergeColDefs: AbstractColDef[] = [];\n        for (let i = 1; i <= leafPathTrees.length; i++) {\n            const first = leafPathTrees[i - 1];\n            const second = leafPathTrees[i];\n\n            if (matchingRootGroupIds(first, second)) {\n                leafPathTrees[i] = mergeTrees(first, second);\n            } else {\n                mergeColDefs.push(first);\n            }\n        }\n\n        return mergeColDefs;\n    }\n\n    private addChildrenToGroup(tree: AbstractColDef, groupId: string, colDef: AbstractColDef): boolean {\n        const subGroupIsSplit = (currentSubGroup: ColGroupDef, currentSubGroupToAdd: ColGroupDef) => {\n            const existingChildIds = currentSubGroup.children.map(this.getId);\n            const childGroupAlreadyExists = _includes(existingChildIds, this.getId(currentSubGroupToAdd));\n            const lastChild = _last(currentSubGroup.children);\n            const lastChildIsDifferent = lastChild && this.getId(lastChild) !== this.getId(currentSubGroupToAdd);\n            return childGroupAlreadyExists && lastChildIsDifferent;\n        };\n\n        if (!this.isColGroupDef(tree)) {\n            return true;\n        }\n\n        const currentGroup = tree as ColGroupDef;\n        const groupToAdd = colDef as ColGroupDef;\n\n        if (subGroupIsSplit(currentGroup, groupToAdd)) {\n            currentGroup.children.push(groupToAdd);\n            return true;\n        }\n\n        if (currentGroup.groupId === groupId) {\n            // add children that don't already exist to group\n            const existingChildIds = currentGroup.children.map(this.getId);\n            const colDefAlreadyPresent = _includes(existingChildIds, this.getId(groupToAdd));\n            if (!colDefAlreadyPresent) {\n                currentGroup.children.push(groupToAdd);\n                return true;\n            }\n        }\n\n        // recurse until correct group is found to add children\n        currentGroup.children.forEach((subGroup) => this.addChildrenToGroup(subGroup, groupId, colDef));\n        return false;\n    }\n\n    private isColGroupDef = (colDef: AbstractColDef) =>\n        colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n\n    private getId = (colDef: AbstractColDef): string | undefined => {\n        return this.isColGroupDef(colDef) ? (colDef as ColGroupDef).groupId : (colDef as ColDef).colId;\n    };\n}\n", "import type { BeanCollection, IToolPanel, SideBarDef } from '@ag-grid-community/core';\nimport { _unwrapUserComp } from '@ag-grid-community/core';\n\nexport function isSideBarVisible(beans: BeanCollection): boolean {\n    return beans.sideBarService?.getSideBarComp().isDisplayed() ?? false;\n}\n\nexport function setSideBarVisible(beans: BeanCollection, show: boolean) {\n    beans.sideBarService?.getSideBarComp().setDisplayed(show);\n}\n\nexport function setSideBarPosition(beans: BeanCollection, position: 'left' | 'right') {\n    beans.sideBarService?.getSideBarComp().setSideBarPosition(position);\n}\n\nexport function openToolPanel(beans: BeanCollection, key: string) {\n    beans.sideBarService?.getSideBarComp().openToolPanel(key, 'api');\n}\n\nexport function closeToolPanel(beans: BeanCollection) {\n    beans.sideBarService?.getSideBarComp().close('api');\n}\n\nexport function getOpenedToolPanel(beans: BeanCollection): string | null {\n    return beans.sideBarService?.getSideBarComp().openedItem() ?? null;\n}\n\nexport function refreshToolPanel(beans: BeanCollection): void {\n    beans.sideBarService?.getSideBarComp().refresh();\n}\n\nexport function isToolPanelShowing(beans: BeanCollection): boolean {\n    return beans.sideBarService?.getSideBarComp().isToolPanelShowing() ?? false;\n}\n\nexport function getToolPanelInstance<TToolPanel = IToolPanel>(\n    beans: BeanCollection,\n    id: string\n): TToolPanel | undefined {\n    const comp = beans.sideBarService?.getSideBarComp().getToolPanelInstance(id);\n    return _unwrapUserComp(comp) as any;\n}\n\nexport function getSideBar(beans: BeanCollection): SideBarDef | undefined {\n    return beans.sideBarService?.getSideBarComp().getDef();\n}\n", "import type { ComponentSelector, ISideBar, ISideBarService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport { AgSideBarSelector } from './agSideBar';\n\nexport class SideBarService extends BeanStub implements NamedBean, ISideBarService {\n    beanName = 'sideBarService' as const;\n\n    private sideBarComp: ISideBar;\n\n    public registerSideBarComp(sideBarComp: ISideBar): void {\n        this.sideBarComp = sideBarComp;\n    }\n\n    public getSideBarComp(): ISideBar {\n        return this.sideBarComp;\n    }\n\n    public getSideBarSelector(): ComponentSelector {\n        return AgSideBarSelector;\n    }\n}\n", "import type {\n    BeanCollection,\n    ComponentSelector,\n    FilterManager,\n    FocusService,\n    ISideBar,\n    IToolPanel,\n    IToolPanelParams,\n    SideBarDef,\n    SideBarState,\n    ToolPanelDef,\n    ToolPanelVisibleChangedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    KeyCode,\n    ManagedFocusFeature,\n    ModuleNames,\n    ModuleRegistry,\n    RefPlaceholder,\n    _addFocusableContainerListener,\n    _removeFromParent,\n    _setAriaControls,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport { AgSideBarButtonsSelector } from './agSideBarButtons';\nimport type { SideBarButtonClickedEvent } from './agSideBarButtons';\nimport type { AgSideBarButtons } from './agSideBarButtons';\nimport { parseSideBarDef } from './sideBarDefParser';\nimport type { SideBarService } from './sideBarService';\nimport { ToolPanelWrapper } from './toolPanelWrapper';\n\nexport class AgSideBar extends Component implements ISideBar {\n    private focusService: FocusService;\n    private filterManager?: FilterManager;\n    private sideBarService: SideBarService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.filterManager = beans.filterManager;\n        this.sideBarService = beans.sideBarService as SideBarService;\n    }\n\n    private readonly sideBarButtons: AgSideBarButtons = RefPlaceholder;\n\n    private toolPanelWrappers: ToolPanelWrapper[] = [];\n    private sideBar: SideBarDef | undefined;\n    private position: 'left' | 'right';\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons data-ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>`,\n            [AgSideBarButtonsSelector]\n        );\n    }\n\n    public postConstruct(): void {\n        this.sideBarButtons.addEventListener('sideBarButtonClicked', this.onToolPanelButtonClicked.bind(this));\n        const { sideBar: sideBarState } = this.gos.get('initialState') ?? {};\n        this.setSideBarDef({\n            sideBarDef: parseSideBarDef(this.gos.get('sideBar')),\n            sideBarState,\n        });\n\n        this.addManagedPropertyListener('sideBar', this.onSideBarUpdated.bind(this));\n\n        this.sideBarService.registerSideBarComp(this);\n        const eGui = this.getFocusableElement();\n        this.createManagedBean(\n            new ManagedFocusFeature(eGui, {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n            })\n        );\n\n        _addFocusableContainerListener(this, eGui, this.focusService);\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        const { focusService, sideBarButtons } = this;\n        const eGui = this.getGui();\n        const sideBarGui = sideBarButtons.getGui();\n        const activeElement = this.gos.getActiveDomElement() as HTMLElement;\n        const openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)') as HTMLElement;\n        const target = e.target as HTMLElement;\n\n        if (!openPanel) {\n            return;\n        }\n\n        if (sideBarGui.contains(activeElement)) {\n            if (focusService.focusInto(openPanel, e.shiftKey)) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        // only handle backwards focus to target the sideBar buttons\n        if (!e.shiftKey) {\n            return;\n        }\n\n        let nextEl: HTMLElement | null = null;\n\n        if (openPanel.contains(activeElement)) {\n            nextEl = this.focusService.findNextFocusableElement(openPanel, undefined, true);\n        } else if (focusService.isTargetUnderManagedComponent(openPanel, target) && e.shiftKey) {\n            nextEl = this.focusService.findFocusableElementBeforeTabGuard(openPanel, target);\n        }\n\n        if (!nextEl) {\n            nextEl = sideBarGui.querySelector('.ag-selected button') as HTMLElement;\n        }\n\n        if (nextEl && nextEl !== e.target) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const currentButton = this.gos.getActiveDomElement();\n\n        if (!this.sideBarButtons.getGui().contains(currentButton)) {\n            return;\n        }\n\n        const sideBarGui = this.sideBarButtons.getGui();\n        const buttons: HTMLElement[] = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));\n\n        const currentPos = buttons.findIndex((button) => button.contains(currentButton));\n        let nextPos: number | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n            case KeyCode.UP:\n                nextPos = Math.max(0, currentPos - 1);\n                break;\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n                nextPos = Math.min(currentPos + 1, buttons.length - 1);\n                break;\n        }\n\n        if (nextPos === null) {\n            return;\n        }\n\n        const innerButton = buttons[nextPos].querySelector('button');\n\n        if (innerButton) {\n            innerButton.focus();\n            e.preventDefault();\n        }\n    }\n\n    private onToolPanelButtonClicked(event: SideBarButtonClickedEvent): void {\n        const id = event.toolPanelId;\n        const openedItem = this.openedItem();\n\n        // if item was already open, we close it\n        if (openedItem === id) {\n            this.openToolPanel(undefined, 'sideBarButtonClicked'); // passing undefined closes\n        } else {\n            this.openToolPanel(id, 'sideBarButtonClicked');\n        }\n    }\n\n    private clearDownUi(): void {\n        this.sideBarButtons.clearButtons();\n        this.destroyToolPanelWrappers();\n    }\n\n    private setSideBarDef({\n        sideBarDef,\n        sideBarState,\n        existingToolPanelWrappers,\n    }: {\n        sideBarDef?: SideBarDef;\n        sideBarState?: SideBarState;\n        existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper };\n    }): void {\n        // initially hide side bar\n        this.setDisplayed(false);\n\n        this.sideBar = sideBarDef;\n\n        if (!!this.sideBar && !!this.sideBar.toolPanels) {\n            const toolPanelDefs = this.sideBar.toolPanels as ToolPanelDef[];\n            this.createToolPanelsAndSideButtons(toolPanelDefs, sideBarState, existingToolPanelWrappers);\n            if (!this.toolPanelWrappers.length) {\n                return;\n            }\n\n            const shouldDisplaySideBar = sideBarState ? sideBarState.visible : !this.sideBar.hiddenByDefault;\n            this.setDisplayed(shouldDisplaySideBar);\n\n            this.setSideBarPosition(sideBarState ? sideBarState.position : this.sideBar.position);\n\n            if (shouldDisplaySideBar) {\n                if (sideBarState) {\n                    const { openToolPanel } = sideBarState;\n                    if (openToolPanel) {\n                        this.openToolPanel(openToolPanel, 'sideBarInitializing');\n                    }\n                } else {\n                    this.openToolPanel(this.sideBar.defaultToolPanel, 'sideBarInitializing');\n                }\n            }\n        }\n    }\n\n    public getDef() {\n        return this.sideBar;\n    }\n\n    public setSideBarPosition(position?: 'left' | 'right'): this {\n        if (!position) {\n            position = 'right';\n        }\n\n        this.position = position;\n\n        const isLeft = position === 'left';\n        const resizerSide = isLeft ? 'right' : 'left';\n\n        this.addOrRemoveCssClass('ag-side-bar-left', isLeft);\n        this.addOrRemoveCssClass('ag-side-bar-right', !isLeft);\n\n        this.toolPanelWrappers.forEach((wrapper) => {\n            wrapper.setResizerSizerSide(resizerSide);\n        });\n\n        this.eventService.dispatchEvent({ type: 'sideBarUpdated' });\n\n        return this;\n    }\n\n    public override setDisplayed(\n        displayed: boolean,\n        options?: { skipAriaHidden?: boolean | undefined } | undefined\n    ): void {\n        super.setDisplayed(displayed, options);\n        this.eventService.dispatchEvent({ type: 'sideBarUpdated' });\n    }\n\n    public getState(): SideBarState {\n        const toolPanels: { [id: string]: any } = {};\n        this.toolPanelWrappers.forEach((wrapper) => {\n            toolPanels[wrapper.getToolPanelId()] = wrapper.getToolPanelInstance()?.getState?.();\n        });\n        return {\n            visible: this.isDisplayed(),\n            position: this.position,\n            openToolPanel: this.openedItem(),\n            toolPanels,\n        };\n    }\n\n    private createToolPanelsAndSideButtons(\n        defs: ToolPanelDef[],\n        sideBarState?: SideBarState,\n        existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper }\n    ): void {\n        for (const def of defs) {\n            this.createToolPanelAndSideButton(\n                def,\n                sideBarState?.toolPanels?.[def.id],\n                existingToolPanelWrappers?.[def.id]\n            );\n        }\n    }\n\n    private validateDef(def: ToolPanelDef): boolean {\n        if (def.id == null) {\n            _warnOnce(\n                `please review all your toolPanel components, it seems like at least one of them doesn't have an id`\n            );\n            return false;\n        }\n\n        // helpers, in case user doesn't have the right module loaded\n        if (def.toolPanel === 'agColumnsToolPanel') {\n            const moduleMissing = !ModuleRegistry.__assertRegistered(\n                ModuleNames.ColumnsToolPanelModule,\n                'Column Tool Panel',\n                this.gridId\n            );\n            if (moduleMissing) {\n                return false;\n            }\n        }\n\n        if (def.toolPanel === 'agFiltersToolPanel') {\n            const moduleMissing = !ModuleRegistry.__assertRegistered(\n                ModuleNames.FiltersToolPanelModule,\n                'Filters Tool Panel',\n                this.gridId\n            );\n            if (moduleMissing) {\n                return false;\n            }\n            if (this.filterManager?.isAdvancedFilterEnabled()) {\n                _warnOnce(\n                    'Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.'\n                );\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private createToolPanelAndSideButton(\n        def: ToolPanelDef,\n        initialState?: any,\n        existingToolPanelWrapper?: ToolPanelWrapper\n    ): void {\n        if (!this.validateDef(def)) {\n            return;\n        }\n        const button = this.sideBarButtons.addButtonComp(def);\n        let wrapper: ToolPanelWrapper;\n        if (existingToolPanelWrapper) {\n            wrapper = existingToolPanelWrapper;\n        } else {\n            wrapper = this.createBean(new ToolPanelWrapper());\n\n            wrapper.setToolPanelDef(def, {\n                initialState,\n                onStateUpdated: () => this.eventService.dispatchEvent({ type: 'sideBarUpdated' }),\n            });\n        }\n        wrapper.setDisplayed(false);\n\n        const wrapperGui = wrapper.getGui();\n        this.appendChild(wrapperGui);\n\n        this.toolPanelWrappers.push(wrapper);\n\n        _setAriaControls(button.getButtonElement(), wrapperGui);\n    }\n\n    public refresh(): void {\n        this.toolPanelWrappers.forEach((wrapper) => wrapper.refresh());\n    }\n\n    public openToolPanel(\n        key: string | undefined,\n        source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'\n    ): void {\n        const currentlyOpenedKey = this.openedItem();\n        if (currentlyOpenedKey === key) {\n            return;\n        }\n\n        this.toolPanelWrappers.forEach((wrapper) => {\n            const show = key === wrapper.getToolPanelId();\n            wrapper.setDisplayed(show);\n        });\n\n        const newlyOpenedKey = this.openedItem();\n        const openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;\n        if (openToolPanelChanged) {\n            this.sideBarButtons.setActiveButton(key);\n            this.raiseToolPanelVisibleEvent(key, currentlyOpenedKey ?? undefined, source);\n        }\n    }\n\n    public getToolPanelInstance(key: string): IToolPanel | undefined {\n        const toolPanelWrapper = this.toolPanelWrappers.filter((toolPanel) => toolPanel.getToolPanelId() === key)[0];\n\n        if (!toolPanelWrapper) {\n            _warnOnce(`unable to lookup Tool Panel as invalid key supplied: ${key}`);\n            return;\n        }\n\n        return toolPanelWrapper.getToolPanelInstance();\n    }\n\n    private raiseToolPanelVisibleEvent(\n        key: string | undefined,\n        previousKey: string | undefined,\n        source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api'\n    ): void {\n        const switchingToolPanel = !!key && !!previousKey;\n        if (previousKey) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: 'toolPanelVisibleChanged',\n                source,\n                key: previousKey,\n                visible: false,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (key) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: 'toolPanelVisibleChanged',\n                source,\n                key,\n                visible: true,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public close(source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'): void {\n        this.openToolPanel(undefined, source);\n    }\n\n    public isToolPanelShowing(): boolean {\n        return !!this.openedItem();\n    }\n\n    public openedItem(): string | null {\n        let activeToolPanel: string | null = null;\n        this.toolPanelWrappers.forEach((wrapper) => {\n            if (wrapper.isDisplayed()) {\n                activeToolPanel = wrapper.getToolPanelId();\n            }\n        });\n        return activeToolPanel;\n    }\n\n    private onSideBarUpdated(): void {\n        const sideBarDef = parseSideBarDef(this.gos.get('sideBar'));\n\n        const existingToolPanelWrappers: { [id: string]: ToolPanelWrapper } = {};\n        if (sideBarDef && this.sideBar) {\n            sideBarDef.toolPanels?.forEach((toolPanelDef: ToolPanelDef) => {\n                const { id } = toolPanelDef;\n                if (!id) {\n                    return;\n                }\n                const existingToolPanelDef = this.sideBar!.toolPanels?.find(\n                    (toolPanelDefToCheck: ToolPanelDef) => toolPanelDefToCheck.id === id\n                ) as ToolPanelDef | undefined;\n                if (!existingToolPanelDef || toolPanelDef.toolPanel !== existingToolPanelDef.toolPanel) {\n                    return;\n                }\n                const toolPanelWrapper = this.toolPanelWrappers.find((toolPanel) => toolPanel.getToolPanelId() === id);\n                if (!toolPanelWrapper) {\n                    return;\n                }\n                const params = this.gos.addGridCommonParams<IToolPanelParams>({\n                    ...(toolPanelDef.toolPanelParams ?? {}),\n                    onStateUpdated: () => this.eventService.dispatchEvent({ type: 'sideBarUpdated' }),\n                });\n                const hasRefreshed = toolPanelWrapper.getToolPanelInstance()?.refresh(params);\n                if (hasRefreshed !== true) {\n                    return;\n                }\n                this.toolPanelWrappers = this.toolPanelWrappers.filter((toolPanel) => toolPanel !== toolPanelWrapper);\n                _removeFromParent(toolPanelWrapper.getGui());\n                existingToolPanelWrappers[id] = toolPanelWrapper;\n            });\n        }\n\n        this.clearDownUi();\n\n        // don't re-assign initial state\n        this.setSideBarDef({ sideBarDef, existingToolPanelWrappers });\n    }\n\n    private destroyToolPanelWrappers(): void {\n        this.toolPanelWrappers.forEach((wrapper) => {\n            _removeFromParent(wrapper.getGui());\n            this.destroyBean(wrapper);\n        });\n        this.toolPanelWrappers.length = 0;\n    }\n\n    public override destroy(): void {\n        this.destroyToolPanelWrappers();\n        super.destroy();\n    }\n}\n\nexport const AgSideBarSelector: ComponentSelector = {\n    selector: 'AG-SIDE-BAR',\n    component: AgSideBar,\n};\n", "import type {\n    AgEvent,\n    BeanCollection,\n    ComponentSelector,\n    FocusService,\n    ToolPanelDef,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { Component, KeyCode, _clearElement, _last } from '@ag-grid-community/core';\n\nimport { SideBarButtonComp } from './sideBarButtonComp';\n\nexport interface SideBarButtonClickedEvent extends AgEvent<'sideBarButtonClicked'> {\n    toolPanelId: string;\n}\n\nexport type AgSideBarButtonsEvent = 'sideBarButtonClicked';\nexport class AgSideBarButtons extends Component<AgSideBarButtonsEvent> {\n    private focusService: FocusService;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private buttonComps: SideBarButtonComp[] = [];\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-side-buttons\" role=\"tablist\"></div>`);\n    }\n\n    public postConstruct(): void {\n        this.addManagedElementListeners(this.getFocusableElement(), { keydown: this.handleKeyDown.bind(this) });\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key !== KeyCode.TAB || !e.shiftKey) {\n            return;\n        }\n\n        const lastColumn = _last(this.visibleColsService.getAllCols());\n\n        if (this.focusService.focusGridView(lastColumn, true)) {\n            e.preventDefault();\n        }\n    }\n\n    public setActiveButton(id: string | undefined): void {\n        this.buttonComps.forEach((comp) => {\n            comp.setSelected(id === comp.getToolPanelId());\n        });\n    }\n\n    public addButtonComp(def: ToolPanelDef): SideBarButtonComp {\n        const buttonComp = this.createBean(new SideBarButtonComp(def));\n        this.buttonComps.push(buttonComp);\n        this.appendChild(buttonComp);\n\n        buttonComp.addEventListener('toggleButtonClicked', () => {\n            this.dispatchLocalEvent({\n                type: 'sideBarButtonClicked',\n                toolPanelId: def.id,\n            });\n        });\n\n        return buttonComp;\n    }\n\n    public clearButtons(): void {\n        this.buttonComps = this.destroyBeans(this.buttonComps);\n        _clearElement(this.getGui());\n        super.destroy();\n    }\n\n    public override destroy(): void {\n        this.clearButtons();\n        super.destroy();\n    }\n}\n\nexport const AgSideBarButtonsSelector: ComponentSelector = {\n    selector: 'AG-SIDE-BAR-BUTTONS',\n    component: AgSideBarButtons,\n};\n", "import type { ToolPanelDef } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder, _createIconNoSpan, _setAriaExpanded } from '@ag-grid-community/core';\n\nexport type SideBarButtonCompEvent = 'toggleButtonClicked';\nexport class SideBarButtonComp extends Component<SideBarButtonCompEvent> {\n    private readonly eToggleButton: HTMLButtonElement = RefPlaceholder;\n    private readonly eIconWrapper: HTMLElement = RefPlaceholder;\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n\n    private readonly toolPanelDef: ToolPanelDef;\n\n    constructor(toolPanelDef: ToolPanelDef) {\n        super();\n        this.toolPanelDef = toolPanelDef;\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelDef.id;\n    }\n\n    public postConstruct(): void {\n        const template = this.createTemplate();\n        this.setTemplate(template, []);\n        this.setLabel();\n        this.setIcon();\n        this.addManagedElementListeners(this.eToggleButton, { click: this.onButtonPressed.bind(this) });\n        this.eToggleButton.setAttribute('id', `ag-${this.getCompId()}-button`);\n    }\n\n    private createTemplate(): string {\n        const res =\n            /* html */\n            `<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" data-ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" aria-expanded=\"false\" class=\"ag-button ag-side-button-button\">\n                    <div data-ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span data-ref=\"eLabel\" class=\"ag-side-button-label\"></span>\n                </button>\n            </div>`;\n        return res;\n    }\n\n    private setLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const def = this.toolPanelDef;\n        const label = translate(def.labelKey, def.labelDefault);\n\n        this.eLabel.innerText = label;\n    }\n\n    private setIcon(): void {\n        this.eIconWrapper.insertAdjacentElement('afterbegin', _createIconNoSpan(this.toolPanelDef.iconKey, this.gos)!);\n    }\n\n    private onButtonPressed(): void {\n        this.dispatchLocalEvent({ type: 'toggleButtonClicked' });\n    }\n\n    public setSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-selected', selected);\n        _setAriaExpanded(this.eToggleButton, selected);\n    }\n\n    public getButtonElement(): Element {\n        return this.eToggleButton;\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\nimport type { SideBarDef, ToolPanelDef } from '@ag-grid-community/core';\n\nconst DEFAULT_COLUMN_COMP: ToolPanelDef = {\n    id: 'columns',\n    labelDefault: 'Columns',\n    labelKey: 'columns',\n    iconKey: 'columns',\n    toolPanel: 'agColumnsToolPanel',\n};\n\nconst DEFAULT_FILTER_COMP: ToolPanelDef = {\n    id: 'filters',\n    labelDefault: 'Filters',\n    labelKey: 'filters',\n    iconKey: 'filter',\n    toolPanel: 'agFiltersToolPanel',\n};\n\nconst DEFAULT_BY_KEY: { [p: string]: ToolPanelDef } = {\n    columns: DEFAULT_COLUMN_COMP,\n    filters: DEFAULT_FILTER_COMP,\n};\n\nexport function parseSideBarDef(\n    toParse: SideBarDef | string | string[] | boolean | null | undefined\n): SideBarDef | undefined {\n    if (!toParse) {\n        return undefined;\n    }\n    if (toParse === true) {\n        return {\n            toolPanels: [DEFAULT_COLUMN_COMP, DEFAULT_FILTER_COMP],\n            defaultToolPanel: 'columns',\n        };\n    }\n\n    if (typeof toParse === 'string') {\n        return parseSideBarDef([toParse]);\n    }\n\n    if (Array.isArray(toParse)) {\n        const comps: ToolPanelDef[] = [];\n        toParse.forEach((key) => {\n            const lookupResult = DEFAULT_BY_KEY[key];\n            if (!lookupResult) {\n                logMissingKey(key);\n                return;\n            }\n\n            comps.push(lookupResult);\n        });\n\n        if (comps.length === 0) {\n            return undefined;\n        }\n\n        return {\n            toolPanels: comps,\n            defaultToolPanel: comps[0].id,\n        };\n    }\n\n    const result: SideBarDef = {\n        toolPanels: parseComponents(toParse.toolPanels),\n        defaultToolPanel: toParse.defaultToolPanel,\n        hiddenByDefault: toParse.hiddenByDefault,\n        position: toParse.position,\n    };\n\n    return result;\n}\n\nfunction logMissingKey(key: string) {\n    _warnOnce(\n        `the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(DEFAULT_BY_KEY).join(',')}`\n    );\n}\n\nfunction parseComponents(from?: (ToolPanelDef | string)[]): ToolPanelDef[] {\n    const result: ToolPanelDef[] = [];\n\n    if (!from) {\n        return result;\n    }\n\n    from.forEach((it: ToolPanelDef | string) => {\n        let toAdd: ToolPanelDef | null = null;\n        if (typeof it === 'string') {\n            const lookupResult = DEFAULT_BY_KEY[it];\n            if (!lookupResult) {\n                logMissingKey(it);\n                return;\n            }\n\n            toAdd = lookupResult;\n        } else {\n            toAdd = it;\n        }\n\n        result.push(toAdd);\n    });\n\n    return result;\n}\n", "import type {\n    BeanCollection,\n    IToolPanelComp,\n    IToolPanelParams,\n    ToolPanelDef,\n    UserComponentFactory,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { Component, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgHorizontalResize } from './agHorizontalResize';\n\nexport class ToolPanelWrapper extends Component {\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private toolPanelCompInstance: IToolPanelComp | undefined;\n    private toolPanelId: string;\n    private resizeBar: AgHorizontalResize;\n    private width: number | undefined;\n    private params: IToolPanelParams;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-wrapper\" role=\"tabpanel\"/>`);\n    }\n\n    public postConstruct(): void {\n        const eGui = this.getGui();\n        const resizeBar = (this.resizeBar = this.createManagedBean(new AgHorizontalResize()));\n\n        eGui.setAttribute('id', `ag-${this.getCompId()}`);\n\n        resizeBar.setElementToResize(eGui);\n        this.appendChild(resizeBar);\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelId;\n    }\n\n    public setToolPanelDef(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): void {\n        const { id, minWidth, maxWidth, width } = toolPanelDef;\n\n        this.toolPanelId = id;\n        this.width = width;\n\n        const compDetails = this.userComponentFactory.getToolPanelCompDetails(toolPanelDef, params);\n        const componentPromise = compDetails.newAgStackInstance();\n\n        this.params = compDetails.params;\n\n        if (componentPromise == null) {\n            _warnOnce(`error processing tool panel component ${id}. You need to specify 'toolPanel'`);\n            return;\n        }\n        componentPromise.then(this.setToolPanelComponent.bind(this));\n\n        if (minWidth != null) {\n            this.resizeBar.setMinWidth(minWidth);\n        }\n\n        if (maxWidth != null) {\n            this.resizeBar.setMaxWidth(maxWidth);\n        }\n    }\n\n    private setToolPanelComponent(compInstance: IToolPanelComp): void {\n        this.toolPanelCompInstance = compInstance;\n\n        this.appendChild(compInstance.getGui());\n        this.addDestroyFunc(() => {\n            this.destroyBean(compInstance);\n        });\n\n        if (this.width) {\n            this.getGui().style.width = `${this.width}px`;\n        }\n    }\n\n    public getToolPanelInstance(): IToolPanelComp | undefined {\n        return this.toolPanelCompInstance;\n    }\n\n    public setResizerSizerSide(side: 'right' | 'left') {\n        const isRtl = this.gos.get('enableRtl');\n        const isLeft = side === 'left';\n        const inverted = isRtl ? isLeft : !isLeft;\n\n        this.resizeBar.setInverted(inverted);\n    }\n\n    public refresh(): void {\n        this.toolPanelCompInstance?.refresh(this.params);\n    }\n}\n", "import type {\n    BeanCollection,\n    HorizontalResizeService,\n    ToolPanelSizeChangedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { Component } from '@ag-grid-community/core';\n\nexport class AgHorizontalResize extends Component {\n    private horizontalResizeService: HorizontalResizeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.horizontalResizeService = beans.horizontalResizeService;\n    }\n\n    private startingWidth: number;\n    private elementToResize: HTMLElement;\n    private inverted: boolean;\n    private minWidth: number = 100;\n    private maxWidth: number | null = null;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-horizontal-resize\"></div>`);\n    }\n\n    public setElementToResize(elementToResize: HTMLElement): void {\n        this.elementToResize = elementToResize;\n    }\n\n    public postConstruct(): void {\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.getGui(),\n            dragStartPixels: 1,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this),\n            onResizeEnd: this.onResizeEnd.bind(this),\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n        this.setInverted(this.gos.get('enableRtl'));\n    }\n\n    private dispatchResizeEvent(start: boolean, end: boolean, width: number) {\n        const event: WithoutGridCommon<ToolPanelSizeChangedEvent> = {\n            type: 'toolPanelSizeChanged',\n            width: width,\n            started: start,\n            ended: end,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private onResizeStart(): void {\n        this.startingWidth = this.elementToResize.offsetWidth;\n        this.dispatchResizeEvent(true, false, this.startingWidth);\n    }\n\n    private onResizeEnd(delta: number): void {\n        return this.onResizing(delta, true);\n    }\n\n    private onResizing(delta: number, isEnd: boolean = false): void {\n        const direction = this.inverted ? -1 : 1;\n        let newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - delta * direction));\n\n        if (this.maxWidth != null) {\n            newWidth = Math.min(this.maxWidth, newWidth);\n        }\n        this.elementToResize.style.width = `${newWidth}px`;\n        this.dispatchResizeEvent(false, isEnd, newWidth);\n    }\n\n    public setInverted(inverted: boolean) {\n        this.inverted = inverted;\n    }\n\n    public setMaxWidth(value: number | null) {\n        this.maxWidth = value;\n    }\n\n    public setMinWidth(value: number | null) {\n        if (value != null) {\n            this.minWidth = value;\n        } else {\n            this.minWidth = 100;\n        }\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { _CsvExportCoreModule } from '@ag-grid-community/csv-export';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { ExcelCreator } from './excelExport/excelCreator';\nimport {\n    exportDataAsExcel,\n    exportMultipleSheetsAsExcel,\n    getDataAsExcel,\n    getMultipleSheetsAsExcel,\n    getSheetDataForExcel,\n} from './excelExport/excelExportApi';\nimport { VERSION } from './version';\n\nexport const _ExcelExportCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ExcelExportModule}-core`,\n    beans: [ExcelCreator],\n    dependantModules: [_CsvExportCoreModule, EnterpriseCoreModule],\n};\n\nexport const _ExcelExportApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ExcelExportModule}-api`,\n    apiFunctions: {\n        getDataAsExcel,\n        exportDataAsExcel,\n        getSheetDataForExcel,\n        getMultipleSheetsAsExcel,\n        exportMultipleSheetsAsExcel,\n    },\n    dependantModules: [_ExcelExportCoreModule],\n};\n\nexport const ExcelExportModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ExcelExportModule,\n    dependantModules: [_ExcelExportCoreModule, _ExcelExportApiModule],\n};\n", "import type {\n    AgColumn,\n    AgColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    ExcelExportMultipleSheetParams,\n    ExcelExportParams,\n    ExcelFactoryMode,\n    ExcelRow,\n    ExcelStyle,\n    FuncColsService,\n    IExcelCreator,\n    NamedBean,\n    StylingService,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { _getHeaderClassesFromColDef, _warnOnce } from '@ag-grid-community/core';\nimport type { GridSerializer } from '@ag-grid-community/csv-export';\nimport { BaseCreator, Downloader, RowType, ZipContainer } from '@ag-grid-community/csv-export';\n\nimport type { ExcelGridSerializingParams, StyleLinkerInterface } from './excelSerializingSession';\nimport { ExcelSerializingSession } from './excelSerializingSession';\nimport { ExcelXlsxFactory } from './excelXlsxFactory';\n\nconst createExcelXMLCoreFolderStructure = (): void => {\n    ZipContainer.addFolders(['_rels/', 'docProps/', 'xl/', 'xl/theme/', 'xl/_rels/', 'xl/worksheets/']);\n\n    const { images } = ExcelXlsxFactory;\n\n    if (!images.size) {\n        return;\n    }\n\n    ZipContainer.addFolders(['xl/worksheets/_rels', 'xl/drawings/', 'xl/drawings/_rels', 'xl/media/']);\n\n    let imgCounter = 0;\n\n    images.forEach((value) => {\n        const firstImage = value[0].image[0];\n        const { base64, imageType } = firstImage;\n        const ext = imageType === 'jpg' ? 'jpeg' : imageType;\n\n        ZipContainer.addFile(`xl/media/image${++imgCounter}.${ext}`, base64, true);\n    });\n};\n\nconst createExcelXmlWorksheets = (data: string[]): void => {\n    let imageRelationCounter = 0;\n    let headerFooterImageCounter = 0;\n    let tableRelationCounter = 0;\n\n    const { images, worksheetDataTables, worksheetImages, worksheetHeaderFooterImages } = ExcelXlsxFactory;\n\n    for (let i = 0; i < data.length; i++) {\n        const value = data[i];\n        ZipContainer.addFile(`xl/worksheets/sheet${i + 1}.xml`, value, false);\n\n        const hasImages = images.size > 0 && worksheetImages.has(i);\n        const hasTables = worksheetDataTables.size > 0 && worksheetDataTables.has(i);\n        const hasHeaderFooterImages = images.size && worksheetHeaderFooterImages.has(i);\n\n        if (!hasImages && !hasTables && !hasHeaderFooterImages) {\n            continue;\n        }\n\n        let tableIndex: number | undefined;\n        let drawingIndex: number | undefined;\n        let vmlDrawingIndex: number | undefined;\n\n        if (hasImages) {\n            createExcelXmlDrawings(i, imageRelationCounter);\n            drawingIndex = imageRelationCounter;\n            imageRelationCounter++;\n        }\n\n        if (hasHeaderFooterImages) {\n            createExcelVmlDrawings(i, headerFooterImageCounter);\n            vmlDrawingIndex = headerFooterImageCounter;\n            headerFooterImageCounter++;\n        }\n\n        if (hasTables) {\n            tableIndex = tableRelationCounter++;\n        }\n\n        const worksheetRelFile = `xl/worksheets/_rels/sheet${i + 1}.xml.rels`;\n\n        ZipContainer.addFile(\n            worksheetRelFile,\n            ExcelXlsxFactory.createRelationships({\n                tableIndex,\n                drawingIndex,\n                vmlDrawingIndex,\n            })\n        );\n    }\n};\n\nconst createExcelXmlDrawings = (sheetIndex: number, drawingIndex: number): void => {\n    const drawingFolder = 'xl/drawings';\n    const drawingFileName = `${drawingFolder}/drawing${drawingIndex + 1}.xml`;\n    const relFileName = `${drawingFolder}/_rels/drawing${drawingIndex + 1}.xml.rels`;\n\n    ZipContainer.addFile(relFileName, ExcelXlsxFactory.createDrawingRel(sheetIndex));\n    ZipContainer.addFile(drawingFileName, ExcelXlsxFactory.createDrawing(sheetIndex));\n};\n\nconst createExcelVmlDrawings = (sheetIndex: number, drawingIndex: number): void => {\n    const drawingFolder = 'xl/drawings';\n    const drawingFileName = `${drawingFolder}/vmlDrawing${drawingIndex + 1}.vml`;\n    const relFileName = `${drawingFolder}/_rels/vmlDrawing${drawingIndex + 1}.vml.rels`;\n\n    ZipContainer.addFile(drawingFileName, ExcelXlsxFactory.createVmlDrawing(sheetIndex));\n    ZipContainer.addFile(relFileName, ExcelXlsxFactory.createVmlDrawingRel(sheetIndex));\n};\n\nconst createExcelXmlTables = (): void => {\n    const { worksheetDataTables } = ExcelXlsxFactory;\n\n    const tablesDataByWorksheet = worksheetDataTables;\n    const worksheetKeys = Array.from(tablesDataByWorksheet.keys());\n\n    for (let i = 0; i < worksheetKeys.length; i++) {\n        const sheetIndex = worksheetKeys[i];\n        const dataTable = tablesDataByWorksheet.get(sheetIndex);\n\n        if (!dataTable) {\n            continue;\n        }\n\n        ZipContainer.addFile(`xl/tables/${dataTable.name}.xml`, ExcelXlsxFactory.createTable(dataTable, i));\n    }\n};\n\nconst createExcelXmlCoreSheets = (fontSize: number, author: string, sheetLen: number): void => {\n    ZipContainer.addFile('xl/workbook.xml', ExcelXlsxFactory.createWorkbook());\n    ZipContainer.addFile('xl/styles.xml', ExcelXlsxFactory.createStylesheet(fontSize));\n    ZipContainer.addFile('xl/sharedStrings.xml', ExcelXlsxFactory.createSharedStrings());\n    ZipContainer.addFile('xl/theme/theme1.xml', ExcelXlsxFactory.createTheme());\n    ZipContainer.addFile('xl/_rels/workbook.xml.rels', ExcelXlsxFactory.createWorkbookRels(sheetLen));\n    ZipContainer.addFile('docProps/core.xml', ExcelXlsxFactory.createCore(author));\n    ZipContainer.addFile('[Content_Types].xml', ExcelXlsxFactory.createContentTypes(sheetLen));\n    ZipContainer.addFile('_rels/.rels', ExcelXlsxFactory.createRels());\n};\n\nconst createExcelFileForExcel = (\n    data: string[],\n    options: {\n        columns?: string[];\n        rowCount?: number;\n        fontSize?: number;\n        author?: string;\n    } = {}\n): boolean => {\n    if (!data || data.length === 0) {\n        _warnOnce('Invalid params supplied to createExcelFileForExcel() - `ExcelExportParams.data` is empty.');\n        ExcelXlsxFactory.resetFactory();\n        return false;\n    }\n\n    const { fontSize = 11, author = 'AG Grid' } = options;\n\n    createExcelXMLCoreFolderStructure();\n    createExcelXmlTables();\n    createExcelXmlWorksheets(data);\n    createExcelXmlCoreSheets(fontSize, author, data.length);\n\n    ExcelXlsxFactory.resetFactory();\n\n    return true;\n};\n\nconst getMultipleSheetsAsExcelCompressed = (params: ExcelExportMultipleSheetParams): Promise<Blob | undefined> => {\n    const { data, fontSize, author } = params;\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n    if (\n        !createExcelFileForExcel(data, {\n            author,\n            fontSize,\n        })\n    ) {\n        return Promise.resolve(undefined);\n    }\n\n    return ZipContainer.getZipFile(mimeType);\n};\n\nexport const getMultipleSheetsAsExcel = (params: ExcelExportMultipleSheetParams): Blob | undefined => {\n    const { data, fontSize, author } = params;\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n    if (\n        !createExcelFileForExcel(data, {\n            author,\n            fontSize,\n        })\n    ) {\n        return;\n    }\n\n    return ZipContainer.getUncompressedZipFile(mimeType);\n};\n\nexport const exportMultipleSheetsAsExcel = (params: ExcelExportMultipleSheetParams) => {\n    const { fileName = 'export.xlsx' } = params;\n\n    getMultipleSheetsAsExcelCompressed(params).then((contents) => {\n        if (contents) {\n            const downloadFileName = typeof fileName === 'function' ? fileName() : fileName;\n\n            Downloader.download(downloadFileName, contents);\n        }\n    });\n};\n\nexport class ExcelCreator\n    extends BaseCreator<ExcelRow[], ExcelSerializingSession, ExcelExportParams>\n    implements NamedBean, IExcelCreator\n{\n    beanName = 'excelCreator' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private stylingService: StylingService;\n\n    private gridSerializer: GridSerializer;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.stylingService = beans.stylingService;\n        this.gridSerializer = beans.gridSerializer as GridSerializer;\n        this.gos = beans.gos;\n    }\n\n    public postConstruct(): void {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gos: this.gos,\n        });\n    }\n\n    protected getMergedParams(params?: ExcelExportParams): ExcelExportParams {\n        const baseParams = this.gos.get('defaultExcelExportParams');\n        return Object.assign({}, baseParams, params);\n    }\n\n    protected export(userParams?: ExcelExportParams): void {\n        if (this.isExportSuppressed()) {\n            _warnOnce(`Export cancelled. Export is not allowed as per your configuration.`);\n            return;\n        }\n\n        const mergedParams = this.getMergedParams(userParams);\n        const data = this.getData(mergedParams);\n\n        const exportParams: ExcelExportMultipleSheetParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType,\n        };\n\n        this.packageCompressedFile(exportParams).then((packageFile) => {\n            if (packageFile) {\n                const { fileName } = mergedParams;\n                const providedFileName =\n                    typeof fileName === 'function' ? fileName(this.gos.getGridCommonParams()) : fileName;\n\n                Downloader.download(this.getFileName(providedFileName), packageFile);\n            }\n        });\n    }\n\n    public exportDataAsExcel(params?: ExcelExportParams): void {\n        this.export(params);\n    }\n\n    public getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined {\n        const mergedParams = this.getMergedParams(params);\n        const data = this.getData(mergedParams);\n\n        const exportParams: ExcelExportMultipleSheetParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType,\n        };\n\n        return this.packageFile(exportParams);\n    }\n\n    public setFactoryMode(factoryMode: ExcelFactoryMode): void {\n        ExcelXlsxFactory.factoryMode = factoryMode;\n    }\n\n    public getFactoryMode(): ExcelFactoryMode {\n        return ExcelXlsxFactory.factoryMode;\n    }\n\n    public getSheetDataForExcel(params: ExcelExportParams): string {\n        const mergedParams = this.getMergedParams(params);\n        return this.getData(mergedParams);\n    }\n\n    public getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        return getMultipleSheetsAsExcel(params);\n    }\n\n    public exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void {\n        exportMultipleSheetsAsExcel(params);\n    }\n\n    public getDefaultFileExtension(): 'xlsx' {\n        return 'xlsx';\n    }\n\n    public createSerializingSession(params: ExcelExportParams): ExcelSerializingSession {\n        const { columnModel, columnNameService, funcColsService, valueService, gos } = this;\n\n        let sheetName: string;\n        if (params.sheetName != null) {\n            const { sheetName: sheetNameParam } = params;\n            const sheetNameValue =\n                typeof sheetNameParam === 'function' ? sheetNameParam(this.gos.getGridCommonParams()) : sheetNameParam;\n\n            sheetName = String(sheetNameValue).substring(0, 31);\n        } else {\n            sheetName = 'ag-grid';\n        }\n\n        const config: ExcelGridSerializingParams = {\n            ...params,\n            sheetName,\n            columnModel,\n            columnNameService,\n            funcColsService,\n            valueService,\n            gos,\n            suppressRowOutline: params.suppressRowOutline || params.skipRowGroups,\n            headerRowHeight: params.headerRowHeight || params.rowHeight,\n            baseExcelStyles: this.gos.get('excelStyles') || [],\n            styleLinker: this.styleLinker.bind(this),\n        };\n\n        return new ExcelSerializingSession(config);\n    }\n\n    private styleLinker(params: StyleLinkerInterface): string[] {\n        const { rowType, rowIndex, value, column, columnGroup, node } = params;\n        const isHeader = rowType === RowType.HEADER;\n        const isGroupHeader = rowType === RowType.HEADER_GROUPING;\n        const col = (isHeader ? column : columnGroup) as AgColumn | AgColumnGroup | null;\n        let headerClasses: string[] = [];\n\n        if (isHeader || isGroupHeader) {\n            headerClasses.push('header');\n            if (isGroupHeader) {\n                headerClasses.push('headerGroup');\n            }\n\n            if (col) {\n                headerClasses = headerClasses.concat(\n                    _getHeaderClassesFromColDef(\n                        col.getDefinition(),\n                        this.gos,\n                        (column as AgColumn) || null,\n                        (columnGroup as AgColumnGroup) || null\n                    )\n                );\n            }\n\n            return headerClasses;\n        }\n\n        const styles = this.gos.get('excelStyles');\n\n        const applicableStyles: string[] = ['cell'];\n\n        if (!styles || !styles.length) {\n            return applicableStyles;\n        }\n\n        const styleIds: string[] = styles.map((it: ExcelStyle) => {\n            return it.id;\n        });\n\n        const colDef = (column as AgColumn).getDefinition();\n        this.stylingService.processAllCellClasses(\n            colDef,\n            this.gos.addGridCommonParams({\n                value,\n                data: node!.data,\n                node: node!,\n                colDef,\n                column: column!,\n                rowIndex: rowIndex,\n            }),\n            (className: string) => {\n                if (styleIds.indexOf(className) > -1) {\n                    applicableStyles.push(className);\n                }\n            }\n        );\n\n        return applicableStyles.sort((left: string, right: string): number => {\n            return styleIds.indexOf(left) < styleIds.indexOf(right) ? -1 : 1;\n        });\n    }\n\n    public isExportSuppressed(): boolean {\n        return this.gos.get('suppressExcelExport');\n    }\n\n    private packageCompressedFile(params: ExcelExportMultipleSheetParams): Promise<Blob | undefined> {\n        return getMultipleSheetsAsExcelCompressed(params);\n    }\n\n    private packageFile(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        return getMultipleSheetsAsExcel(params);\n    }\n}\n", "import type {\n    AgColumn,\n    AgColumnGroup,\n    Column,\n    ColumnGroup,\n    ColumnWidthCallbackParams,\n    ExcelCell,\n    ExcelColumn,\n    ExcelHeaderFooterConfig,\n    ExcelImage,\n    ExcelOOXMLDataType,\n    ExcelRow,\n    ExcelSheetMargin,\n    ExcelSheetPageSetup,\n    ExcelStyle,\n    ExcelTableConfig,\n    ExcelWorksheet,\n    RowHeightCallbackParams,\n    RowNode,\n} from '@ag-grid-community/core';\nimport { _last, _mergeDeep, _warnOnce } from '@ag-grid-community/core';\nimport type { GridSerializingParams, RowAccumulator, RowSpanningAccumulator } from '@ag-grid-community/csv-export';\nimport { BaseGridSerializingSession, RowType } from '@ag-grid-community/csv-export';\n\nimport { getHeightFromProperty } from './assets/excelUtils';\nimport { ExcelXlsxFactory } from './excelXlsxFactory';\n\nexport interface StyleLinkerInterface {\n    rowType: RowType;\n    rowIndex: number;\n    value: string;\n    column?: Column;\n    columnGroup?: ColumnGroup;\n    node?: RowNode;\n}\n\ninterface ExcelMixedStyle {\n    key: string;\n    excelID: string;\n    result: ExcelStyle;\n}\n\nexport interface ExcelGridSerializingParams extends GridSerializingParams {\n    autoConvertFormulas?: boolean;\n    baseExcelStyles: ExcelStyle[];\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    margins?: ExcelSheetMargin;\n    pageSetup?: ExcelSheetPageSetup;\n    exportAsExcelTable?: boolean | ExcelTableConfig;\n    sheetName: string;\n    suppressColumnOutline?: boolean;\n    suppressRowOutline?: boolean;\n    rowGroupExpandState?: 'expanded' | 'collapsed' | 'match';\n    styleLinker: (params: StyleLinkerInterface) => string[];\n    addImageToCell?: (\n        rowIndex: number,\n        column: Column,\n        value: string\n    ) => { image: ExcelImage; value?: string } | undefined;\n}\n\nexport class ExcelSerializingSession extends BaseGridSerializingSession<ExcelRow[]> {\n    private readonly config: ExcelGridSerializingParams;\n    private readonly stylesByIds: { [key: string]: ExcelStyle };\n\n    private mixedStyles: { [key: string]: ExcelMixedStyle } = {};\n    private mixedStyleCounter: number = 0;\n\n    private readonly excelStyles: (ExcelStyle & { quotePrefix?: 1 })[];\n\n    private rows: ExcelRow[] = [];\n    private cols: ExcelColumn[];\n    private columnsToExport: AgColumn[];\n\n    constructor(config: ExcelGridSerializingParams) {\n        super(config);\n        this.config = Object.assign({}, config);\n        this.stylesByIds = {};\n        this.config.baseExcelStyles.forEach((style) => {\n            this.stylesByIds[style.id] = style;\n        });\n        this.excelStyles = [...this.config.baseExcelStyles, { id: '_quotePrefix', quotePrefix: 1 }];\n    }\n\n    public addCustomContent(customContent: ExcelRow[]): void {\n        customContent.forEach((row) => {\n            const rowLen = this.rows.length + 1;\n            let outlineLevel: number | undefined;\n\n            if (!this.config.suppressRowOutline && row.outlineLevel != null) {\n                outlineLevel = row.outlineLevel;\n            }\n\n            const rowObj: ExcelRow = {\n                height: getHeightFromProperty(rowLen, row.height || this.config.rowHeight),\n                cells: (row.cells || []).map((cell, idx) => {\n                    const image = this.addImage(rowLen, this.columnsToExport[idx], cell.data?.value as string);\n\n                    let excelStyles: string[] | null = null;\n\n                    if (cell.styleId) {\n                        excelStyles = typeof cell.styleId === 'string' ? [cell.styleId] : cell.styleId;\n                    }\n\n                    const excelStyleId = this.getStyleId(excelStyles);\n\n                    if (image) {\n                        return this.createCell(\n                            excelStyleId,\n                            this.getDataTypeForValue(image.value),\n                            image.value == null ? '' : image.value\n                        );\n                    }\n\n                    const value = cell.data?.value ?? '';\n                    const type = this.getDataTypeForValue(value);\n\n                    if (cell.mergeAcross) {\n                        return this.createMergedCell(excelStyleId, type, value, cell.mergeAcross);\n                    }\n\n                    return this.createCell(excelStyleId, type, value);\n                }),\n                outlineLevel,\n            };\n\n            if (row.collapsed != null) {\n                rowObj.collapsed = row.collapsed;\n            }\n            if (row.hidden != null) {\n                rowObj.hidden = row.hidden;\n            }\n\n            this.rows.push(rowObj);\n        });\n    }\n\n    public onNewHeaderGroupingRow(): RowSpanningAccumulator {\n        const currentCells: ExcelCell[] = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight),\n        });\n        return {\n            onColumn: (\n                columnGroup: AgColumnGroup,\n                header: string,\n                index: number,\n                span: number,\n                collapsibleRanges: number[][]\n            ) => {\n                const styleIds: string[] = this.config.styleLinker({\n                    rowType: RowType.HEADER_GROUPING,\n                    rowIndex: 1,\n                    value: `grouping-${header}`,\n                    columnGroup,\n                });\n                currentCells.push({\n                    ...this.createMergedCell(\n                        this.getStyleId(styleIds),\n                        this.getDataTypeForValue('string'),\n                        header,\n                        span\n                    ),\n                    collapsibleRanges,\n                });\n            },\n        };\n    }\n\n    public onNewHeaderRow(): RowAccumulator {\n        return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n    }\n\n    public onNewBodyRow(node?: RowNode): RowAccumulator {\n        const rowAccumulator = this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n\n        if (node) {\n            this.addRowOutlineIfNecessary(node);\n        }\n\n        return rowAccumulator;\n    }\n\n    public override prepare(columnsToExport: AgColumn[]): void {\n        super.prepare(columnsToExport);\n        this.columnsToExport = [...columnsToExport];\n        this.cols = columnsToExport.map((col, i) => this.convertColumnToExcel(col, i));\n    }\n\n    public parse(): string {\n        // adding custom content might have made some rows wider than the grid, so add new columns\n        const longestRow = this.rows.reduce((a, b) => Math.max(a, b.cells.length), 0);\n        while (this.cols.length < longestRow) {\n            this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n        }\n\n        const data: ExcelWorksheet = {\n            name: this.config.sheetName,\n            table: {\n                columns: this.cols,\n                rows: this.rows,\n            },\n        };\n\n        return this.createExcel(data);\n    }\n\n    private addRowOutlineIfNecessary(node: RowNode): void {\n        const { gos, suppressRowOutline, rowGroupExpandState = 'expanded' } = this.config;\n        const isGroupHideOpenParents = gos.get('groupHideOpenParents');\n\n        if (isGroupHideOpenParents || suppressRowOutline || node.level == null) {\n            return;\n        }\n\n        const padding = node.footer ? 1 : 0;\n        const currentRow = _last(this.rows);\n\n        currentRow.outlineLevel = node.level + padding;\n\n        if (rowGroupExpandState === 'expanded') {\n            return;\n        }\n\n        const collapseAll = rowGroupExpandState === 'collapsed';\n\n        if (node.isExpandable()) {\n            const isExpanded = !collapseAll && node.expanded;\n            currentRow.collapsed = !isExpanded;\n        }\n\n        currentRow.hidden =\n            // always show the node if there is no parent to be expanded\n            !!node.parent &&\n            // or if it is a child of the root node\n            node.parent.level !== -1 &&\n            (collapseAll || this.isAnyParentCollapsed(node.parent));\n    }\n\n    private isAnyParentCollapsed(node?: RowNode | null): boolean {\n        while (node && node.level !== -1) {\n            if (!node.expanded) {\n                return true;\n            }\n\n            node = node.parent;\n        }\n\n        return false;\n    }\n\n    private convertColumnToExcel(column: AgColumn | null, index: number): ExcelColumn {\n        const columnWidth = this.config.columnWidth;\n        const headerValue = column ? this.extractHeaderValue(column) : undefined;\n        const displayName = headerValue ?? '';\n        const filterAllowed = column ? column.isFilterAllowed() : false;\n        if (columnWidth) {\n            if (typeof columnWidth === 'number') {\n                return { width: columnWidth, displayName, filterAllowed };\n            }\n\n            return { width: columnWidth({ column, index }), displayName, filterAllowed };\n        }\n\n        if (column) {\n            const smallestUsefulWidth = 75;\n            return { width: Math.max(column.getActualWidth(), smallestUsefulWidth), displayName, filterAllowed };\n        }\n\n        return {\n            displayName,\n            filterAllowed,\n        };\n    }\n\n    private onNewHeaderColumn(\n        rowIndex: number,\n        currentCells: ExcelCell[]\n    ): (column: AgColumn, index: number, node: RowNode) => void {\n        return (column) => {\n            const nameForCol = this.extractHeaderValue(column);\n            const styleIds: string[] = this.config.styleLinker({\n                rowType: RowType.HEADER,\n                rowIndex,\n                value: nameForCol,\n                column,\n            });\n            currentCells.push(\n                this.createCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), nameForCol)\n            );\n        };\n    }\n\n    private onNewBodyColumn(\n        rowIndex: number,\n        currentCells: ExcelCell[]\n    ): (column: AgColumn, index: number, node: RowNode) => void {\n        let skipCols = 0;\n\n        return (column, index, node) => {\n            if (skipCols > 0) {\n                skipCols -= 1;\n                return;\n            }\n\n            const { value: valueForCell, valueFormatted } = this.extractRowCellValue(\n                column,\n                index,\n                rowIndex,\n                'excel',\n                node\n            );\n            const styleIds: string[] = this.config.styleLinker({\n                rowType: RowType.BODY,\n                rowIndex,\n                value: valueForCell,\n                column,\n                node,\n            });\n            const excelStyleId: string | null = this.getStyleId(styleIds);\n            const colSpan = column.getColSpan(node);\n            const addedImage = this.addImage(rowIndex, column, valueForCell);\n\n            if (addedImage) {\n                currentCells.push(\n                    this.createCell(\n                        excelStyleId,\n                        this.getDataTypeForValue(addedImage.value),\n                        addedImage.value == null ? '' : addedImage.value\n                    )\n                );\n            } else if (colSpan > 1) {\n                skipCols = colSpan - 1;\n                currentCells.push(\n                    this.createMergedCell(\n                        excelStyleId,\n                        this.getDataTypeForValue(valueForCell),\n                        valueForCell,\n                        colSpan - 1\n                    )\n                );\n            } else {\n                currentCells.push(\n                    this.createCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, valueFormatted)\n                );\n            }\n        };\n    }\n\n    private onNewRow(\n        onNewColumnAccumulator: (\n            rowIndex: number,\n            currentCells: ExcelCell[]\n        ) => (column: AgColumn, index: number, node: RowNode) => void,\n        height?: number | ((params: RowHeightCallbackParams) => number)\n    ): RowAccumulator {\n        const currentCells: ExcelCell[] = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, height),\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)(),\n        };\n    }\n\n    private createExcel(data: ExcelWorksheet): string {\n        const { excelStyles, config } = this;\n\n        return ExcelXlsxFactory.createExcel(excelStyles, data, config);\n    }\n\n    private getDataTypeForValue(valueForCell?: string): ExcelOOXMLDataType {\n        if (valueForCell === undefined) {\n            return 'empty';\n        }\n        return this.isNumerical(valueForCell) ? 'n' : 's';\n    }\n\n    private getTypeFromStyle(style: ExcelStyle | null, value: string | null): ExcelOOXMLDataType | null {\n        if (this.isFormula(value)) {\n            return 'f';\n        }\n\n        if (style && style.dataType) {\n            switch (style.dataType.toLocaleLowerCase()) {\n                case 'formula':\n                    return 'f';\n                case 'string':\n                    return 's';\n                case 'number':\n                    return 'n';\n                case 'datetime':\n                    return 'd';\n                case 'error':\n                    return 'e';\n                case 'boolean':\n                    return 'b';\n                default:\n                    _warnOnce(`Unrecognized data type for excel export [${style.id}.dataType=${style.dataType}]`);\n            }\n        }\n\n        return null;\n    }\n\n    private addImage(\n        rowIndex: number,\n        column: AgColumn,\n        value: string\n    ): { image: ExcelImage; value?: string } | undefined {\n        if (!this.config.addImageToCell) {\n            return;\n        }\n\n        const addedImage = this.config.addImageToCell(rowIndex, column, value);\n\n        if (!addedImage) {\n            return;\n        }\n\n        ExcelXlsxFactory.addBodyImageToMap(\n            addedImage.image,\n            rowIndex,\n            column,\n            this.columnsToExport,\n            this.config.rowHeight\n        );\n\n        return addedImage;\n    }\n\n    private createCell(\n        styleId: string | null | undefined,\n        type: ExcelOOXMLDataType,\n        value: string,\n        valueFormatted?: string | null\n    ): ExcelCell {\n        const actualStyle: ExcelStyle | null = this.getStyleById(styleId);\n        if (!actualStyle?.dataType && type === 's' && valueFormatted) {\n            value = valueFormatted;\n        }\n        const processedType = this.getTypeFromStyle(actualStyle, value) || type;\n\n        const { value: processedValue, escaped } = this.getCellValue(processedType, value);\n        const styles: string[] = [];\n\n        if (actualStyle) {\n            styles.push(styleId!);\n        }\n\n        if (escaped) {\n            styles.push('_quotePrefix');\n        }\n\n        styleId = this.getStyleId(styles) || undefined;\n\n        return {\n            styleId,\n            data: {\n                type: processedType,\n                value: processedValue,\n            },\n        };\n    }\n\n    private createMergedCell(\n        styleId: string | null,\n        type: ExcelOOXMLDataType,\n        value: string,\n        numOfCells: number\n    ): ExcelCell {\n        const valueToUse = value == null ? '' : value;\n        return {\n            styleId: this.getStyleById(styleId) ? styleId! : undefined,\n            data: {\n                type: type,\n                value: type === 's' ? ExcelXlsxFactory.getStringPosition(valueToUse).toString() : value,\n            },\n            mergeAcross: numOfCells,\n        };\n    }\n\n    private getCellValue(type: ExcelOOXMLDataType, value: string | null): { value: string | null; escaped?: boolean } {\n        let escaped = false;\n\n        if (value == null || (type === 's' && value === '')) {\n            return { value: '', escaped: false };\n        }\n\n        if (type === 's') {\n            if (value && value[0] === \"'\") {\n                escaped = true;\n                value = value.slice(1);\n            }\n\n            value = ExcelXlsxFactory.getStringPosition(value).toString();\n        } else if (type === 'f') {\n            value = value.slice(1);\n        } else if (type === 'n') {\n            const numberValue = Number(value);\n\n            if (isNaN(numberValue)) {\n                value = '';\n            } else if (value !== '') {\n                value = numberValue.toString();\n            }\n        }\n\n        return { value, escaped };\n    }\n\n    private getStyleId(styleIds?: string[] | null): string | null {\n        if (!styleIds || !styleIds.length) {\n            return null;\n        }\n        if (styleIds.length === 1) {\n            return styleIds[0];\n        }\n\n        const key: string = styleIds.join('-');\n        if (!this.mixedStyles[key]) {\n            this.addNewMixedStyle(styleIds);\n        }\n        return this.mixedStyles[key].excelID;\n    }\n\n    private deepCloneObject<T>(object: T): T {\n        return JSON.parse(JSON.stringify(object));\n    }\n\n    private addNewMixedStyle(styleIds: string[]): void {\n        this.mixedStyleCounter += 1;\n        const excelId = `mixedStyle${this.mixedStyleCounter}`;\n        const resultantStyle: ExcelStyle = {} as ExcelStyle;\n\n        for (const styleId of styleIds) {\n            for (const excelStyle of this.excelStyles) {\n                if (excelStyle.id === styleId) {\n                    _mergeDeep(resultantStyle, this.deepCloneObject(excelStyle));\n                }\n            }\n        }\n\n        resultantStyle.id = excelId;\n        resultantStyle.name = excelId;\n        const key: string = styleIds.join('-');\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle,\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    }\n\n    private isFormula(value: string | null) {\n        if (value == null) {\n            return false;\n        }\n        return this.config.autoConvertFormulas && value.toString().startsWith('=');\n    }\n\n    private isNumerical(value: any): boolean {\n        if (typeof value === 'bigint') {\n            return true;\n        }\n        return isFinite(value) && value !== '' && !isNaN(parseFloat(value));\n    }\n\n    private getStyleById(styleId?: string | null): ExcelStyle | null {\n        if (styleId == null) {\n            return null;\n        }\n        return this.stylesByIds[styleId] || null;\n    }\n}\n", "import type { AgColumn, RowHeightCallbackParams, XmlElement } from '@ag-grid-community/core';\nimport { _escapeString } from '@ag-grid-community/core';\nimport { XmlFactory } from '@ag-grid-community/csv-export';\n\nimport { INCH_TO_EMU } from './excelConstants';\nimport type { ExcelCalculatedImage } from './excelInterfaces';\n\nexport const pixelsToPoint = (pixels: number): number => {\n    return Math.round((pixels * 72) / 96);\n};\n\nexport const pointsToPixel = (points: number): number => {\n    return Math.round((points * 96) / 72);\n};\n\nexport const pixelsToEMU = (value: number): number => {\n    return Math.ceil(value * INCH_TO_EMU);\n};\n\nexport const getFontFamilyId = (name?: string): number | undefined => {\n    if (name === undefined) {\n        return;\n    }\n\n    const families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];\n    const pos = families.indexOf(name || 'Automatic');\n\n    return Math.max(pos, 0);\n};\n\nexport const getHeightFromProperty = (\n    rowIndex: number,\n    height?: number | ((params: RowHeightCallbackParams) => number)\n): number | undefined => {\n    if (!height) {\n        return;\n    }\n\n    let finalHeight: number;\n\n    if (typeof height === 'number') {\n        finalHeight = height;\n    } else {\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const heightFunc = height as Function;\n        finalHeight = heightFunc({ rowIndex });\n    }\n\n    return pixelsToPoint(finalHeight);\n};\n\nexport const setExcelImageTotalWidth = (image: ExcelCalculatedImage, columnsToExport: AgColumn[]): void => {\n    const { colSpan, column } = image.position!;\n\n    if (!image.width) {\n        return;\n    }\n\n    if (colSpan) {\n        const columnsInSpan = columnsToExport.slice(column! - 1, column! + colSpan - 1);\n        let totalWidth = 0;\n        for (let i = 0; i < columnsInSpan.length; i++) {\n            const colWidth = columnsInSpan[i].getActualWidth();\n            if (image.width < totalWidth + colWidth) {\n                image.position!.colSpan = i + 1;\n                image.totalWidth = image.width;\n                image.width = image.totalWidth - totalWidth;\n                break;\n            }\n            totalWidth += colWidth;\n        }\n    } else {\n        image.totalWidth = image.width;\n    }\n};\n\nexport const setExcelImageTotalHeight = (\n    image: ExcelCalculatedImage,\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number)\n): void => {\n    const { rowSpan, row } = image.position!;\n\n    if (!image.height) {\n        return;\n    }\n\n    if (rowSpan) {\n        let totalHeight = 0;\n        let counter = 0;\n        for (let i = row!; i < row! + rowSpan; i++) {\n            const nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);\n            if (image.height < totalHeight + nextRowHeight) {\n                image.position!.rowSpan = counter + 1;\n                image.totalHeight = image.height;\n                image.height = image.totalHeight - totalHeight;\n                break;\n            }\n            totalHeight += nextRowHeight;\n            counter++;\n        }\n    } else {\n        image.totalHeight = image.height;\n    }\n};\n\nexport const createXmlPart = (body: XmlElement, skipHeader?: boolean): string => {\n    const header = XmlFactory.createHeader({\n        encoding: 'UTF-8',\n        standalone: 'yes',\n    });\n\n    const xmlBody = XmlFactory.createXml(body);\n\n    if (skipHeader) {\n        return xmlBody;\n    }\n\n    return `${header}${xmlBody}`;\n};\n\nexport const getExcelColumnName = (colIdx: number): string => {\n    const startCode = 65;\n    const tableWidth = 26;\n    const fromCharCode = String.fromCharCode;\n\n    const pos = Math.floor(colIdx / tableWidth);\n    const tableIdx = colIdx % tableWidth;\n\n    if (!pos || colIdx === tableWidth) {\n        return fromCharCode(startCode + colIdx - 1);\n    }\n    if (!tableIdx) {\n        return getExcelColumnName(pos - 1) + 'Z';\n    }\n    if (pos < tableWidth) {\n        return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n    }\n\n    return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};\n\nexport const replaceInvisibleCharacters = (str: string | null): string | null => {\n    if (str == null) {\n        return null;\n    }\n    // Excel breaks when characters with code below 30 are exported\n    // we use the loop below to wrap these characters between _x(code)_\n    let newString = '';\n    for (let i = 0; i < str.length; i++) {\n        const point = str.charCodeAt(i);\n\n        if (point >= 0 && point <= 31 && point !== 10) {\n            const convertedCode = point.toString(16).toUpperCase();\n            const paddedCode = convertedCode.padStart(4, '0');\n            const newValue = `_x${paddedCode}_`;\n\n            newString += newValue;\n        } else {\n            newString += str[i];\n        }\n    }\n    return newString;\n};\n\nexport const buildSharedString = (strMap: Map<string, number>): XmlElement[] => {\n    const ret: XmlElement[] = [];\n\n    for (const key of strMap.keys()) {\n        const textNode = key.toString();\n\n        const child: XmlElement = {\n            name: 't',\n            textNode: _escapeString(replaceInvisibleCharacters(textNode), false),\n        };\n\n        // if we have leading or trailing spaces, instruct Excel not to trim them\n        const preserveSpaces = textNode.trim().length !== textNode.length;\n\n        if (preserveSpaces) {\n            child.properties = {\n                rawMap: {\n                    'xml:space': 'preserve',\n                },\n            };\n        }\n        ret.push({\n            name: 'si',\n            children: [child],\n        });\n    }\n\n    return ret;\n};\n", "export const INCH_TO_EMU = 9525;\n\nexport const numberFormatMap: { [key: string]: number } = {\n    '0': 1,\n    '0.00': 2,\n    '#,##0': 3,\n    '#,##0.00': 4,\n    '0%': 9,\n    '0.00%': 10,\n    '0.00E+00': 11,\n    '# ?/?': 12,\n    '# ??/??': 13,\n    'mm-dd-yy': 14,\n    'd-mmm-yy': 15,\n    'd-mmm': 16,\n    'mmm-yy': 17,\n    'h:mm AM/PM': 18,\n    'h:mm:ss AM/PM': 19,\n    'h:mm': 20,\n    'h:mm:ss': 21,\n    'm/d/yy h:mm': 22,\n    '#,##0 ;(#,##0)': 37,\n    '#,##0 ;[Red](#,##0)': 38,\n    '#,##0.00;(#,##0.00)': 39,\n    '#,##0.00;[Red](#,##0.00)': 40,\n    'mm:ss': 45,\n    '[h]:mm:ss': 46,\n    'mmss.0': 47,\n    '##0.0E+0': 48,\n    '@': 49,\n};\n", "import type {\n    AgColumn,\n    ExcelHeaderFooterImage,\n    ExcelImage,\n    ExcelRelationship,\n    ExcelStyle,\n    ExcelTableConfig,\n    ExcelWorksheet,\n    RowHeightCallbackParams,\n} from '@ag-grid-community/core';\nimport { ExcelFactoryMode, _escapeString, _warnOnce } from '@ag-grid-community/core';\n\nimport type {\n    ExcelCalculatedImage,\n    ExcelDataTable,\n    ExcelHeaderFooterCalculatedImage,\n    ExcelHeaderFooterPosition,\n    ImageIdMap,\n} from './assets/excelInterfaces';\nimport { createXmlPart, setExcelImageTotalHeight, setExcelImageTotalWidth } from './assets/excelUtils';\nimport type { ExcelGridSerializingParams } from './excelSerializingSession';\nimport contentTypesFactory from './files/ooxml/contentTypes';\nimport coreFactory from './files/ooxml/core';\nimport drawingFactory from './files/ooxml/drawing';\nimport relationshipsFactory from './files/ooxml/relationships';\nimport sharedStringsFactory from './files/ooxml/sharedStrings';\nimport stylesheetFactory, { registerStyles } from './files/ooxml/styles/stylesheet';\nimport tableFactory from './files/ooxml/table';\nimport officeThemeFactory from './files/ooxml/themes/office';\nimport vmlDrawingFactory from './files/ooxml/vmlDrawing';\nimport workbookFactory from './files/ooxml/workbook';\nimport worksheetFactory from './files/ooxml/worksheet';\n\n/**\n * See links for more info on the Office Open XML format being used:\n * https://www.ecma-international.org/wp-content/uploads/Office-Open-XML-White-Paper.pdf\n * https://ecma-international.org/publications-and-standards/standards/ecma-376/\n */\nexport class ExcelXlsxFactory {\n    private static sharedStrings: Map<string, number> = new Map();\n    private static sheetNames: string[] = [];\n\n    /** Maps images to sheet */\n    public static images: Map<\n        string,\n        { sheetId: number; image: (ExcelCalculatedImage | ExcelHeaderFooterCalculatedImage)[] }[]\n    > = new Map();\n    /** Maps sheets to images */\n    public static worksheetImages: Map<number, ExcelCalculatedImage[]> = new Map();\n    /** Maps sheets to header/footer images */\n    public static worksheetHeaderFooterImages: Map<number, ExcelHeaderFooterCalculatedImage[]> = new Map();\n    /** Maps all workbook images to a global Id */\n    public static workbookImageIds: ImageIdMap = new Map();\n    /** Maps all sheet images to unique Ids */\n    public static worksheetImageIds: Map<number, ImageIdMap> = new Map();\n    /** Maps all sheet tables to unique Ids */\n    public static worksheetDataTables: Map<number, ExcelDataTable> = new Map();\n    /** Default name to be used for tables when no name is provided */\n    public static defaultTableDisplayName = 'AG-GRID-TABLE';\n\n    public static factoryMode: ExcelFactoryMode = ExcelFactoryMode.SINGLE_SHEET;\n\n    public static createExcel(\n        styles: ExcelStyle[],\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ): string {\n        this.addSheetName(worksheet);\n        registerStyles(styles, this.sheetNames.length);\n\n        const newConfig = Object.assign({}, config);\n\n        // Table export is not compatible with pivot mode nor master/detail features\n        if (config.exportAsExcelTable) {\n            if (config.columnModel.isPivotActive()) {\n                this.showExcelTableNonCompatibleFeaturesWarning('pivot mode');\n                newConfig.exportAsExcelTable = false;\n            }\n\n            if (config.gos.get('masterDetail')) {\n                this.showExcelTableNonCompatibleFeaturesWarning('master/detail');\n                newConfig.exportAsExcelTable = false;\n            }\n        }\n\n        this.processTableConfig(worksheet, newConfig);\n        return this.createWorksheet(worksheet, newConfig);\n    }\n\n    private static showExcelTableNonCompatibleFeaturesWarning(featureName: string) {\n        _warnOnce(\n            `Excel table export does not work with ${featureName}. ` +\n                `The exported Excel file will not contain any Excel tables.\\n` +\n                `Please turn off ${featureName} to enable Excel table exports.`\n        );\n    }\n\n    public static getTableNameFromIndex(idx: number) {\n        return `table${idx + 1}`;\n    }\n\n    public static getSanitizedTableName(name: string) {\n        return name\n            .replace(/^[^a-zA-Z_]+/, '_')\n            .replace(/\\s/g, '_')\n            .replace(/[^a-zA-Z0-9_]/g, '_');\n    }\n\n    public static addTableToSheet(sheetIndex: number, table: ExcelDataTable): void {\n        if (this.worksheetDataTables.has(sheetIndex)) {\n            _warnOnce('Unable to add data table to Excel sheet: A table already exists.');\n            return;\n        }\n\n        this.worksheetDataTables.set(sheetIndex, table);\n    }\n\n    private static processTableConfig(worksheet: ExcelWorksheet, config: ExcelGridSerializingParams) {\n        if (!config.exportAsExcelTable) {\n            return;\n        }\n\n        const tableConfig: Partial<ExcelTableConfig> =\n            typeof config.exportAsExcelTable === 'boolean' ? {} : config.exportAsExcelTable;\n\n        const {\n            name: nameFromConfig,\n            showColumnStripes,\n            showRowStripes,\n            showFilterButton,\n            highlightFirstColumn,\n            highlightLastColumn,\n        } = tableConfig;\n\n        const tableName = this.getSanitizedTableName(nameFromConfig || ExcelXlsxFactory.defaultTableDisplayName);\n\n        const sheetIndex = this.sheetNames.length - 1;\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const headerRowCount = config.columnModel.getHeaderRowCount();\n        const tableHeaderRowIndex: number = headerRowCount - 1; // Assuming that header starts at row 0\n        const tableRowCount = rows.length;\n        const tableColCount = columns.length;\n\n        const tableColumns: string[] = [];\n        const showFilterButtons: boolean[] = [];\n\n        for (let i = 0; i < tableColCount; i++) {\n            const col = columns[i];\n            tableColumns.push(col.displayName || '');\n            showFilterButtons.push(\n                showFilterButton === 'match' || showFilterButton === undefined\n                    ? col.filterAllowed ?? false // We fall back to the column's filterAllowed property on match\n                    : showFilterButton\n            );\n        }\n\n        if (!tableColumns || !tableColumns.length || !tableRowCount || !tableName) {\n            _warnOnce('Unable to add data table to Excel sheet: Missing required parameters.');\n            return;\n        }\n\n        this.addTableToSheet(sheetIndex, {\n            name: this.getTableNameFromIndex(sheetIndex),\n            displayName: tableName,\n            columns: tableColumns,\n            showFilterButtons: showFilterButtons,\n            headerRowIndex: tableHeaderRowIndex,\n            rowCount: tableRowCount - headerRowCount,\n            showRowStripes: showRowStripes ?? true,\n            showColumnStripes: showColumnStripes ?? false,\n            highlightFirstColumn: highlightFirstColumn ?? false,\n            highlightLastColumn: highlightLastColumn ?? false,\n        });\n    }\n\n    public static addHeaderFooterImageToMap(image: ExcelHeaderFooterImage, position: ExcelHeaderFooterPosition): void {\n        const sheetIndex = this.sheetNames.length - 1;\n        const headerFooterImage = image as ExcelHeaderFooterCalculatedImage;\n\n        headerFooterImage.headerFooterPosition = position;\n\n        this.buildImageMap({ imageToAdd: headerFooterImage, idx: sheetIndex });\n\n        let headerFooterImagesForSheet = this.worksheetHeaderFooterImages.get(sheetIndex);\n\n        if (!headerFooterImagesForSheet) {\n            headerFooterImagesForSheet = [];\n            this.worksheetHeaderFooterImages.set(sheetIndex, headerFooterImagesForSheet);\n        }\n\n        if (!headerFooterImagesForSheet.find((img) => img.id === image.id)) {\n            headerFooterImagesForSheet.push(image as ExcelHeaderFooterCalculatedImage);\n        }\n    }\n\n    public static addBodyImageToMap(\n        image: ExcelImage,\n        rowIndex: number,\n        col: AgColumn,\n        columnsToExport?: AgColumn[],\n        rowHeight?: number | ((params: RowHeightCallbackParams) => number)\n    ): void {\n        const sheetIndex = this.sheetNames.length;\n        const { row, column } = image.position || {};\n        const calculatedImage = image as ExcelCalculatedImage;\n\n        if (columnsToExport) {\n            if (rowIndex != null && col != null && (!row || !column)) {\n                if (!image.position) {\n                    image.position = {};\n                }\n\n                image.position = Object.assign({}, image.position, {\n                    row: rowIndex,\n                    column: columnsToExport.indexOf(col) + 1,\n                });\n            }\n            setExcelImageTotalWidth(calculatedImage, columnsToExport);\n            setExcelImageTotalHeight(calculatedImage, rowHeight);\n        }\n\n        this.buildImageMap({ imageToAdd: calculatedImage, idx: sheetIndex });\n\n        let worksheetImageIdMap = this.worksheetImageIds.get(sheetIndex);\n\n        if (!worksheetImageIdMap) {\n            worksheetImageIdMap = new Map();\n            this.worksheetImageIds.set(sheetIndex, worksheetImageIdMap);\n        }\n\n        const sheetImages = this.worksheetImages.get(sheetIndex);\n\n        if (!sheetImages) {\n            this.worksheetImages.set(sheetIndex, [calculatedImage]);\n        } else {\n            sheetImages.push(calculatedImage);\n        }\n\n        if (!worksheetImageIdMap.get(image.id)) {\n            worksheetImageIdMap.set(image.id, { index: worksheetImageIdMap.size, type: image.imageType });\n        }\n    }\n\n    private static buildImageMap(params: {\n        imageToAdd: ExcelCalculatedImage | ExcelHeaderFooterCalculatedImage;\n        idx: number;\n    }): void {\n        const { imageToAdd, idx } = params;\n        const mappedImagesToSheet = this.images.get(imageToAdd.id);\n\n        if (mappedImagesToSheet) {\n            const currentSheetImages = mappedImagesToSheet.find((currentImage) => currentImage.sheetId === idx);\n            if (currentSheetImages) {\n                currentSheetImages.image.push(imageToAdd);\n            } else {\n                mappedImagesToSheet.push({\n                    sheetId: idx,\n                    image: [imageToAdd],\n                });\n            }\n        } else {\n            this.images.set(imageToAdd.id, [{ sheetId: idx, image: [imageToAdd] }]);\n            this.workbookImageIds.set(imageToAdd.id, { type: imageToAdd.imageType, index: this.workbookImageIds.size });\n        }\n    }\n\n    private static addSheetName(worksheet: ExcelWorksheet): void {\n        const name = _escapeString(worksheet.name) || '';\n        let append = '';\n\n        while (this.sheetNames.indexOf(`${name}${append}`) !== -1) {\n            if (append === '') {\n                append = '_1';\n            } else {\n                const curr = parseInt(append.slice(1), 10);\n                append = `_${curr + 1}`;\n            }\n        }\n\n        worksheet.name = `${name}${append}`;\n        this.sheetNames.push(worksheet.name);\n    }\n\n    public static getStringPosition(str: string): number {\n        if (this.sharedStrings.has(str)) {\n            return this.sharedStrings.get(str)!;\n        }\n\n        this.sharedStrings.set(str, this.sharedStrings.size);\n        return this.sharedStrings.size - 1;\n    }\n\n    public static resetFactory(): void {\n        this.sharedStrings = new Map();\n\n        this.images = new Map();\n        this.worksheetImages = new Map();\n        this.worksheetHeaderFooterImages = new Map();\n\n        this.workbookImageIds = new Map();\n        this.worksheetImageIds = new Map();\n        this.worksheetDataTables = new Map();\n\n        this.sheetNames = [];\n        this.factoryMode = ExcelFactoryMode.SINGLE_SHEET;\n    }\n\n    public static createWorkbook(): string {\n        return createXmlPart(workbookFactory.getTemplate(this.sheetNames));\n    }\n\n    public static createStylesheet(defaultFontSize: number): string {\n        return createXmlPart(stylesheetFactory.getTemplate(defaultFontSize));\n    }\n\n    public static createSharedStrings(): string {\n        return createXmlPart(sharedStringsFactory.getTemplate(this.sharedStrings));\n    }\n\n    public static createCore(author: string): string {\n        return createXmlPart(coreFactory.getTemplate(author));\n    }\n\n    public static createContentTypes(sheetLen: number): string {\n        return createXmlPart(contentTypesFactory.getTemplate(sheetLen));\n    }\n\n    public static createRels(): string {\n        const rs = relationshipsFactory.getTemplate([\n            {\n                Id: 'rId1',\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',\n                Target: 'xl/workbook.xml',\n            },\n            {\n                Id: 'rId2',\n                Type: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',\n                Target: 'docProps/core.xml',\n            },\n        ]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createTheme(): string {\n        return createXmlPart(officeThemeFactory.getTemplate());\n    }\n\n    public static createTable(dataTable: ExcelDataTable, index?: number): string {\n        return createXmlPart(tableFactory.getTemplate(dataTable, index));\n    }\n\n    public static createWorkbookRels(sheetLen: number): string {\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            Id: `rId${i + 1}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n            Target: `worksheets/sheet${i + 1}.xml`,\n        }));\n\n        const rs = relationshipsFactory.getTemplate([\n            ...worksheets,\n            {\n                Id: `rId${sheetLen + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n                Target: 'theme/theme1.xml',\n            },\n            {\n                Id: `rId${sheetLen + 2}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n                Target: 'styles.xml',\n            },\n            {\n                Id: `rId${sheetLen + 3}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n                Target: 'sharedStrings.xml',\n            },\n        ]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createDrawing(sheetIndex: number) {\n        return createXmlPart(drawingFactory.getTemplate({ sheetIndex }));\n    }\n\n    public static createDrawingRel(sheetIndex: number) {\n        const worksheetImageIds = this.worksheetImageIds.get(sheetIndex) || [];\n        const XMLArr: ExcelRelationship[] = [];\n\n        for (const [key, value] of worksheetImageIds) {\n            XMLArr.push({\n                Id: `rId${value.index + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n                Target: `../media/image${this.workbookImageIds.get(key)!.index + 1}.${value.type}`,\n            });\n        }\n\n        return createXmlPart(relationshipsFactory.getTemplate(XMLArr));\n    }\n\n    public static createVmlDrawing(sheetIndex: number) {\n        return createXmlPart(vmlDrawingFactory.getTemplate({ sheetIndex }), true);\n    }\n\n    public static createVmlDrawingRel(sheetIndex: number) {\n        const worksheetHeaderFooterImages = this.worksheetHeaderFooterImages.get(sheetIndex) || [];\n        const XMLArr: ExcelRelationship[] = [];\n\n        for (let i = 0; i < worksheetHeaderFooterImages.length; i++) {\n            const headerFooterImage = worksheetHeaderFooterImages[i];\n            const workbookImage = this.workbookImageIds.get(headerFooterImage.id);\n\n            if (!workbookImage) {\n                continue;\n            }\n\n            const { index, type } = workbookImage;\n            const imageType = type === 'jpg' ? 'jpeg' : type;\n\n            XMLArr.push({\n                Id: `rId${i + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n                Target: `../media/image${index + 1}.${imageType}`,\n            });\n        }\n\n        return createXmlPart(relationshipsFactory.getTemplate(XMLArr));\n    }\n\n    public static createRelationships({\n        drawingIndex,\n        vmlDrawingIndex,\n        tableIndex,\n    }: {\n        drawingIndex?: number;\n        vmlDrawingIndex?: number;\n        tableIndex?: number;\n    } = {}) {\n        if (drawingIndex === undefined && vmlDrawingIndex === undefined && tableIndex === undefined) {\n            return '';\n        }\n\n        const config = [];\n        if (drawingIndex != null) {\n            config.push({\n                Id: `rId${config.length + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n                Target: `../drawings/drawing${drawingIndex + 1}.xml`,\n            });\n        }\n\n        if (vmlDrawingIndex != null) {\n            config.push({\n                Id: `rId${config.length + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing',\n                Target: `../drawings/vmlDrawing${vmlDrawingIndex + 1}.vml`,\n            });\n        }\n\n        if (tableIndex != null) {\n            config.push({\n                Id: `rId${config.length + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',\n                Target: `../tables/${this.getTableNameFromIndex(tableIndex)}.xml`,\n            });\n        }\n\n        const rs = relationshipsFactory.getTemplate(config);\n        return createXmlPart(rs);\n    }\n\n    private static createWorksheet(worksheet: ExcelWorksheet, config: ExcelGridSerializingParams): string {\n        return createXmlPart(\n            worksheetFactory.getTemplate({\n                worksheet,\n                currentSheet: this.sheetNames.length - 1,\n                config,\n            })\n        );\n    }\n}\n", "import type { ExcelContentType, ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst contentTypeFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelContentType) {\n        const { name, ContentType, Extension, PartName } = config;\n\n        return {\n            name,\n            properties: {\n                rawMap: {\n                    Extension,\n                    PartName,\n                    ContentType,\n                },\n            },\n        };\n    },\n};\n\nexport default contentTypeFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport type { XmlElement } from '@ag-grid-community/core';\n\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport contentTypeFactory from './contentType';\n\nconst contentTypesFactory: ExcelOOXMLTemplate = {\n    getTemplate(sheetLen: number) {\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n            PartName: `/xl/worksheets/sheet${i + 1}.xml`,\n        }));\n\n        const sheetsWithImages = ExcelXlsxFactory.worksheetImages.size;\n        const headerFooterImages = ExcelXlsxFactory.worksheetHeaderFooterImages.size;\n        const sheetsWithTables = ExcelXlsxFactory.worksheetDataTables.size;\n        const imageTypesObject: { [key: string]: boolean } = {};\n\n        ExcelXlsxFactory.workbookImageIds.forEach((v) => {\n            const type = v.type === 'jpg' ? 'jpeg' : v.type;\n            imageTypesObject[type] = true;\n        });\n\n        const imageDocs = new Array(sheetsWithImages).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\n            PartName: `/xl/drawings/drawing${i + 1}.xml`,\n        }));\n\n        const tableDocs = new Array(sheetsWithTables).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',\n            PartName: `/xl/tables/${ExcelXlsxFactory.getTableNameFromIndex(i)}.xml`,\n        }));\n\n        const imageTypes = Object.keys(imageTypesObject).map((ext) => ({\n            name: 'Default',\n            ContentType: `image/${ext}`,\n            Extension: ext,\n        }));\n\n        if (headerFooterImages) {\n            imageTypes.push({\n                name: 'Default',\n                Extension: 'vml',\n                ContentType: 'application/vnd.openxmlformats-officedocument.vmlDrawing',\n            });\n        }\n\n        const children: XmlElement[] = [\n            ...imageTypes,\n            {\n                name: 'Default',\n                Extension: 'rels',\n                ContentType: 'application/vnd.openxmlformats-package.relationships+xml',\n            },\n            {\n                name: 'Default',\n                ContentType: 'application/xml',\n                Extension: 'xml',\n            },\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n                PartName: '/xl/workbook.xml',\n            },\n            ...worksheets,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',\n                PartName: '/xl/theme/theme1.xml',\n            },\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n                PartName: '/xl/styles.xml',\n            },\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n                PartName: '/xl/sharedStrings.xml',\n            },\n            ...imageDocs,\n            ...tableDocs,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',\n                PartName: '/docProps/core.xml',\n            },\n        ].map((contentType) => contentTypeFactory.getTemplate(contentType));\n\n        return {\n            name: 'Types',\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types',\n                },\n            },\n            children,\n        };\n    },\n};\n\nexport default contentTypesFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst coreFactory: ExcelOOXMLTemplate = {\n    getTemplate(author: string) {\n        const dt = new Date();\n        const jsonDate = dt.toJSON();\n\n        return {\n            name: 'cp:coreProperties',\n            properties: {\n                prefixedAttributes: [\n                    {\n                        prefix: 'xmlns:',\n                        map: {\n                            cp: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n                            dc: 'http://purl.org/dc/elements/1.1/',\n                            dcterms: 'http://purl.org/dc/terms/',\n                            dcmitype: 'http://purl.org/dc/dcmitype/',\n                            xsi: 'http://www.w3.org/2001/XMLSchema-instance',\n                        },\n                    },\n                ],\n            },\n            children: [\n                {\n                    name: 'dc:creator',\n                    textNode: author,\n                },\n                {\n                    name: 'dc:title',\n                    textNode: 'Workbook',\n                },\n                {\n                    name: 'dcterms:created',\n                    properties: {\n                        rawMap: {\n                            'xsi:type': 'dcterms:W3CDTF',\n                        },\n                    },\n                    textNode: jsonDate,\n                },\n                {\n                    name: 'dcterms:modified',\n                    properties: {\n                        rawMap: {\n                            'xsi:type': 'dcterms:W3CDTF',\n                        },\n                    },\n                    textNode: jsonDate,\n                },\n            ],\n        };\n    },\n};\n\nexport default coreFactory;\n", "import type { ExcelImage, ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nimport type { ExcelCalculatedImage, ImageAnchor, ImageBoxSize, ImageColor } from '../../assets/excelInterfaces';\nimport { pixelsToEMU } from '../../assets/excelUtils';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\n\nconst getAnchor = (name: string, imageAnchor: ImageAnchor): XmlElement => ({\n    name: `xdr:${name}`,\n    children: [\n        {\n            name: 'xdr:col',\n            textNode: imageAnchor.col.toString(),\n        },\n        {\n            name: 'xdr:colOff',\n            textNode: imageAnchor.offsetX.toString(),\n        },\n        {\n            name: 'xdr:row',\n            textNode: imageAnchor.row.toString(),\n        },\n        {\n            name: 'xdr:rowOff',\n            textNode: imageAnchor.offsetY.toString(),\n        },\n    ],\n});\n\nconst getExt = (image: ExcelImage): XmlElement => {\n    const children: XmlElement[] = [\n        {\n            name: 'a:ext',\n            properties: {\n                rawMap: {\n                    uri: '{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}',\n                },\n            },\n            children: [\n                {\n                    name: 'a16:creationId',\n                    properties: {\n                        rawMap: {\n                            id: '{822E6D20-D7BC-2841-A643-D49A6EF008A2}',\n                            'xmlns:a16': 'http://schemas.microsoft.com/office/drawing/2014/main',\n                        },\n                    },\n                },\n            ],\n        },\n    ];\n    const recolor = image.recolor && image.recolor.toLowerCase();\n\n    switch (recolor) {\n        case 'grayscale':\n        case 'sepia':\n        case 'washout':\n            children.push({\n                name: 'a:ext',\n                properties: {\n                    rawMap: {\n                        uri: '{C183D7F6-B498-43B3-948B-1728B52AA6E4}',\n                    },\n                },\n                children: [\n                    {\n                        name: 'adec:decorative',\n                        properties: {\n                            rawMap: {\n                                val: '0',\n                                'xmlns:adec': 'http://schemas.microsoft.com/office/drawing/2017/decorative',\n                            },\n                        },\n                    },\n                ],\n            });\n    }\n\n    return {\n        name: 'a:extLst',\n        children,\n    };\n};\n\nconst getNvPicPr = (image: ExcelImage, index: number) => ({\n    name: 'xdr:nvPicPr',\n    children: [\n        {\n            name: 'xdr:cNvPr',\n            properties: {\n                rawMap: {\n                    id: index,\n                    name: image.id,\n                    descr: image.altText != null ? image.altText : undefined,\n                },\n            },\n            children: [getExt(image)],\n        },\n        {\n            name: 'xdr:cNvPicPr',\n            properties: {\n                rawMap: {\n                    preferRelativeResize: '0',\n                },\n            },\n            children: [\n                {\n                    name: 'a:picLocks',\n                },\n            ],\n        },\n    ],\n});\n\nconst getColorDetails = (color: ImageColor): XmlElement[] | undefined => {\n    if (!color.saturation && !color.tint) {\n        return;\n    }\n    const ret: XmlElement[] = [];\n\n    if (color.saturation) {\n        ret.push({\n            name: 'a:satMod',\n            properties: {\n                rawMap: {\n                    val: color.saturation * 1000,\n                },\n            },\n        });\n    }\n\n    if (color.tint) {\n        ret.push({\n            name: 'a:tint',\n            properties: {\n                rawMap: {\n                    val: color.tint * 1000,\n                },\n            },\n        });\n    }\n\n    return ret;\n};\n\nconst getDuoTone = (primaryColor: ImageColor, secondaryColor: ImageColor): XmlElement => {\n    return {\n        name: 'a:duotone',\n        children: [\n            {\n                name: 'a:prstClr',\n                properties: {\n                    rawMap: {\n                        val: primaryColor.color,\n                    },\n                },\n                children: getColorDetails(primaryColor),\n            },\n            {\n                name: 'a:srgbClr',\n                properties: {\n                    rawMap: {\n                        val: secondaryColor.color,\n                    },\n                },\n                children: getColorDetails(secondaryColor),\n            },\n        ],\n    };\n};\n\nconst getBlipFill = (image: ExcelImage, index: number) => {\n    let blipChildren: XmlElement[] | undefined;\n\n    if (image.transparency) {\n        const transparency = Math.min(Math.max(image.transparency, 0), 100);\n        blipChildren = [\n            {\n                name: 'a:alphaModFix',\n                properties: {\n                    rawMap: {\n                        amt: 100000 - Math.round(transparency * 1000),\n                    },\n                },\n            },\n        ];\n    }\n\n    if (image.recolor) {\n        if (!blipChildren) {\n            blipChildren = [];\n        }\n        switch (image.recolor.toLocaleLowerCase()) {\n            case 'grayscale':\n                blipChildren.push({ name: 'a:grayscl' });\n                break;\n            case 'sepia':\n                blipChildren.push(getDuoTone({ color: 'black' }, { color: 'D9C3A5', tint: 50, saturation: 180 }));\n                break;\n            case 'washout':\n                blipChildren.push({\n                    name: 'a:lum',\n                    properties: {\n                        rawMap: {\n                            bright: '70000',\n                            contrast: '-70000',\n                        },\n                    },\n                });\n                break;\n            default:\n        }\n    }\n\n    return {\n        name: 'xdr:blipFill',\n        children: [\n            {\n                name: 'a:blip',\n                properties: {\n                    rawMap: {\n                        cstate: 'print',\n                        'r:embed': `rId${index}`,\n                        'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n                    },\n                },\n                children: blipChildren,\n            },\n            {\n                name: 'a:stretch',\n                children: [\n                    {\n                        name: 'a:fillRect',\n                    },\n                ],\n            },\n        ],\n    };\n};\n\nconst getSpPr = (image: ExcelImage, imageBoxSize: ImageBoxSize) => {\n    const xfrm: XmlElement = {\n        name: 'a:xfrm',\n        children: [\n            {\n                name: 'a:off',\n                properties: {\n                    rawMap: {\n                        x: 0,\n                        y: 0,\n                    },\n                },\n            },\n            {\n                name: 'a:ext',\n                properties: {\n                    rawMap: {\n                        cx: imageBoxSize.width,\n                        cy: imageBoxSize.height,\n                    },\n                },\n            },\n        ],\n    };\n\n    if (image.rotation) {\n        const rotation = image.rotation;\n        xfrm.properties = {\n            rawMap: {\n                rot: Math.min(Math.max(rotation, 0), 360) * 60000,\n            },\n        };\n    }\n\n    const prstGeom: XmlElement = {\n        name: 'a:prstGeom',\n        properties: {\n            rawMap: {\n                prst: 'rect',\n            },\n        },\n        children: [{ name: 'a:avLst' }],\n    };\n\n    const ret = {\n        name: 'xdr:spPr',\n        children: [xfrm, prstGeom],\n    };\n\n    return ret;\n};\n\nconst getImageBoxSize = (image: ExcelCalculatedImage): ImageBoxSize => {\n    image.fitCell = !!image.fitCell || !image.width || !image.height;\n\n    const { position = {}, fitCell, width = 0, height = 0, totalHeight, totalWidth } = image;\n    const { offsetX = 0, offsetY = 0, row = 1, rowSpan = 1, column = 1, colSpan = 1 } = position;\n\n    return {\n        from: {\n            row: row - 1,\n            col: column - 1,\n            offsetX: pixelsToEMU(offsetX),\n            offsetY: pixelsToEMU(offsetY),\n        },\n        to: {\n            row: row - 1 + (fitCell ? 1 : rowSpan - 1),\n            col: column - 1 + (fitCell ? 1 : colSpan - 1),\n            offsetX: pixelsToEMU(width + offsetX),\n            offsetY: pixelsToEMU(height + offsetY),\n        },\n        height: pixelsToEMU(totalHeight || height),\n        width: pixelsToEMU(totalWidth || width),\n    };\n};\n\nconst getPicture = (\n    image: ExcelImage,\n    currentIndex: number,\n    worksheetImageIndex: number,\n    imageBoxSize: ImageBoxSize\n): XmlElement => {\n    return {\n        name: 'xdr:pic',\n        children: [\n            getNvPicPr(image, currentIndex + 1),\n            getBlipFill(image, worksheetImageIndex + 1),\n            getSpPr(image, imageBoxSize),\n        ],\n    };\n};\n\nconst drawingFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: { sheetIndex: number }) {\n        const { sheetIndex } = config;\n        const sheetImages = ExcelXlsxFactory.worksheetImages.get(sheetIndex);\n        const sheetImageIds = ExcelXlsxFactory.worksheetImageIds.get(sheetIndex);\n\n        const children = sheetImages!.map((image, idx) => {\n            const boxSize = getImageBoxSize(image);\n            return {\n                name: 'xdr:twoCellAnchor',\n                properties: {\n                    rawMap: {\n                        editAs: 'absolute',\n                    },\n                },\n                children: [\n                    getAnchor('from', boxSize.from),\n                    getAnchor('to', boxSize.to),\n                    getPicture(image, idx, sheetImageIds!.get(image.id)!.index, boxSize),\n                    { name: 'xdr:clientData' },\n                ],\n            };\n        });\n\n        return {\n            name: 'xdr:wsDr',\n            properties: {\n                rawMap: {\n                    'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                    'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',\n                },\n            },\n            children,\n        };\n    },\n};\n\nexport default drawingFactory;\n", "import type { ExcelOOXMLTemplate, ExcelRelationship } from '@ag-grid-community/core';\n\nconst relationshipFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelRelationship) {\n        const { Id, Type, Target } = config;\n        return {\n            name: 'Relationship',\n            properties: {\n                rawMap: {\n                    Id,\n                    Type,\n                    Target,\n                },\n            },\n        };\n    },\n};\n\nexport default relationshipFactory;\n", "import type { ExcelOOXMLTemplate, ExcelRelationship } from '@ag-grid-community/core';\n\nimport relationshipFactory from './relationship';\n\nconst relationshipsFactory: ExcelOOXMLTemplate = {\n    getTemplate(c: ExcelRelationship[]) {\n        const children = c.map((relationship) => relationshipFactory.getTemplate(relationship));\n\n        return {\n            name: 'Relationships',\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/package/2006/relationships',\n                },\n            },\n            children,\n        };\n    },\n};\n\nexport default relationshipsFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport { buildSharedString } from '../../assets/excelUtils';\n\nconst sharedStrings: ExcelOOXMLTemplate = {\n    getTemplate(strings: Map<string, number>) {\n        return {\n            name: 'sst',\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    count: strings.size,\n                    uniqueCount: strings.size,\n                },\n            },\n            children: buildSharedString(strings),\n        };\n    },\n};\n\nexport default sharedStrings;\n", "const getWeightName = (value?: number): 'thin' | 'medium' | 'thick' | 'hair' => {\n    switch (value) {\n        case 1:\n            return 'thin';\n        case 2:\n            return 'medium';\n        case 3:\n            return 'thick';\n        default:\n            return 'hair';\n    }\n};\n\ntype ColorKeyType =\n    | 'None'\n    | 'Solid'\n    | 'Gray50'\n    | 'Gray75'\n    | 'Gray25'\n    | 'Gray125'\n    | 'Gray0625'\n    | 'HorzStripe'\n    | 'VertStripe'\n    | 'ReverseDiagStripe'\n    | 'DiagStripe'\n    | 'DiagCross'\n    | 'ThickDiagCross'\n    | 'ThickDiagCross'\n    | 'ThinHorzStripe'\n    | 'ThinVertStripe'\n    | 'ThinReverseDiagStripe'\n    | 'ThinDiagStripe'\n    | 'ThinHorzCross'\n    | 'ThinDiagCross';\n\ntype ColorValueType =\n    | 'none'\n    | 'solid'\n    | 'mediumGray'\n    | 'darkGray'\n    | 'lightGray'\n    | 'gray125'\n    | 'gray0625'\n    | 'darkHorizontal'\n    | 'darkVertical'\n    | 'darkDown'\n    | 'darkUp'\n    | 'darkGrid'\n    | 'darkTrellis'\n    | 'lightHorizontal'\n    | 'lightVertical'\n    | 'lightDown'\n    | 'lightUp'\n    | 'lightGrid'\n    | 'lightTrellis';\n\ntype BorderKeyType = 'Dot' | 'Dash';\ntype BorderTransformedKeyType = 'Dotted' | 'Dashed';\ntype BorderFixedNames = 'None' | 'Double' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Continuous';\ntype LegacyBorderType = BorderKeyType | BorderFixedNames;\ntype MediumBordersType = 'Dashed' | 'DashDot' | 'DashDotDot';\ntype BorderType =\n    | 'none'\n    | 'thin'\n    | 'medium'\n    | 'dashed'\n    | 'dotted'\n    | 'thick'\n    | 'double'\n    | 'hair'\n    | 'mediumDashed'\n    | 'dashDot'\n    | 'mediumDashDot'\n    | 'dashDotDot'\n    | 'mediumDashDotDot'\n    | 'slantDashDot';\n\ntype BaseAlignmentKeyType = 'Automatic' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed';\ntype HorizontalAlignmentKeyType = BaseAlignmentKeyType | 'Left' | 'Right' | 'Fill' | 'CenterAcrossSelection';\ntype VerticalAlignmentKeyType = BaseAlignmentKeyType | 'Top' | 'Bottom';\n\ntype BaseAlignmentType = 'center' | 'justify' | 'distributed';\ntype HorizontalAlignmentType = BaseAlignmentType | 'general' | 'left' | 'right' | 'fill' | 'centerContinuous';\ntype VerticalAlignmentType = BaseAlignmentType | 'top' | 'bottom' | undefined;\n\nconst mappedBorderNames: { [key in BorderKeyType | BorderFixedNames]: BorderTransformedKeyType | BorderFixedNames } = {\n    None: 'None',\n    Dot: 'Dotted',\n    Dash: 'Dashed',\n    Double: 'Double',\n    DashDot: 'DashDot',\n    DashDotDot: 'DashDotDot',\n    SlantDashDot: 'SlantDashDot',\n    Continuous: 'Continuous',\n};\n\nconst mediumBorders: MediumBordersType[] = ['Dashed', 'DashDot', 'DashDotDot'];\n\nconst colorMap: { [key in ColorKeyType]: ColorValueType } = {\n    None: 'none',\n    Solid: 'solid',\n    Gray50: 'mediumGray',\n    Gray75: 'darkGray',\n    Gray25: 'lightGray',\n    HorzStripe: 'darkHorizontal',\n    VertStripe: 'darkVertical',\n    ReverseDiagStripe: 'darkDown',\n    DiagStripe: 'darkUp',\n    DiagCross: 'darkGrid',\n    ThickDiagCross: 'darkTrellis',\n    ThinHorzStripe: 'lightHorizontal',\n    ThinVertStripe: 'lightVertical',\n    ThinReverseDiagStripe: 'lightDown',\n    ThinDiagStripe: 'lightUp',\n    ThinHorzCross: 'lightGrid',\n    ThinDiagCross: 'lightTrellis',\n    Gray125: 'gray125',\n    Gray0625: 'gray0625',\n};\n\nconst horizontalAlignmentMap: { [key in HorizontalAlignmentKeyType]: HorizontalAlignmentType } = {\n    Automatic: 'general',\n    Left: 'left',\n    Center: 'center',\n    Right: 'right',\n    Fill: 'fill',\n    Justify: 'justify',\n    CenterAcrossSelection: 'centerContinuous',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify',\n};\n\nconst verticalAlignmentMap: { [key in VerticalAlignmentKeyType]: VerticalAlignmentType } = {\n    Automatic: undefined,\n    Top: 'top',\n    Bottom: 'bottom',\n    Center: 'center',\n    Justify: 'justify',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify',\n};\n\nexport const convertLegacyPattern = (name: ColorKeyType | undefined): (typeof colorMap)[keyof typeof colorMap] => {\n    if (!name) {\n        return 'none';\n    }\n\n    return colorMap[name] || name;\n};\n\nexport const convertLegacyColor = (color?: string): string | undefined => {\n    if (color == undefined) {\n        return color;\n    }\n\n    if (color.charAt(0) === '#') {\n        color = color.substring(1);\n    }\n\n    return color.length === 6 ? 'FF' + color : color;\n};\n\nexport const convertLegacyBorder = (type?: LegacyBorderType, weight?: number): BorderType => {\n    if (!type) {\n        return 'thin';\n    }\n\n    // Legacy Types are: None, Continuous, Dash, Dot, DashDot, DashDotDot, SlantDashDot, and Double\n    // Weight represents: 0\u2014Hairline, 1\u2014Thin , 2\u2014Medium, 3\u2014Thick\n\n    // New types: none, thin, medium, dashed, dotted, thick, double, hair, mediumDashed, dashDot, mediumDashDot,\n    // dashDotDot, mediumDashDotDot, slantDashDot\n    const namedWeight = getWeightName(weight);\n\n    if (type === 'Continuous') {\n        return namedWeight;\n    }\n\n    const mappedName = mappedBorderNames[type];\n    if (namedWeight === 'medium' && mediumBorders.some((type) => type === mappedName)) {\n        return `medium${mappedName as 'Dashed' | 'DashDot' | 'DashDotDot'}`;\n    }\n\n    return `${mappedName.charAt(0).toLowerCase()}${mappedName.substring(1)}` as BorderType;\n};\n\nexport const convertLegacyHorizontalAlignment = (alignment: HorizontalAlignmentKeyType): HorizontalAlignmentType => {\n    return horizontalAlignmentMap[alignment] || 'general';\n};\n\nexport const convertLegacyVerticalAlignment = (alignment: VerticalAlignmentKeyType): VerticalAlignmentType => {\n    return verticalAlignmentMap[alignment] || undefined;\n};\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nimport type { BorderSet } from '../../../assets/excelInterfaces';\nimport { convertLegacyColor } from '../../../assets/excelLegacyConvert';\n\nconst getBorderColor = (color?: string): XmlElement => {\n    return {\n        name: 'color',\n        properties: {\n            rawMap: {\n                rgb: convertLegacyColor(color || '#000000'),\n            },\n        },\n    };\n};\n\nconst borderFactory: ExcelOOXMLTemplate = {\n    getTemplate(border: BorderSet) {\n        const { left, right, top, bottom, diagonal } = border;\n        const leftChildren = left ? [getBorderColor(left.color)] : undefined;\n        const rightChildren = right ? [getBorderColor(right.color)] : undefined;\n        const topChildren = top ? [getBorderColor(top.color)] : undefined;\n        const bottomChildren = bottom ? [getBorderColor(bottom.color)] : undefined;\n        const diagonalChildren = diagonal ? [getBorderColor(diagonal.color)] : undefined;\n        return {\n            name: 'border',\n            children: [\n                {\n                    name: 'left',\n                    properties: { rawMap: { style: left && left.style } },\n                    children: leftChildren,\n                },\n                {\n                    name: 'right',\n                    properties: { rawMap: { style: right && right.style } },\n                    children: rightChildren,\n                },\n                {\n                    name: 'top',\n                    properties: { rawMap: { style: top && top.style } },\n                    children: topChildren,\n                },\n                {\n                    name: 'bottom',\n                    properties: { rawMap: { style: bottom && bottom.style } },\n                    children: bottomChildren,\n                },\n                {\n                    name: 'diagonal',\n                    properties: { rawMap: { style: diagonal && diagonal.style } },\n                    children: diagonalChildren,\n                },\n            ],\n        };\n    },\n};\n\nexport default borderFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { BorderSet } from '../../../assets/excelInterfaces';\nimport borderFactory from './border';\n\nconst bordersFactory: ExcelOOXMLTemplate = {\n    getTemplate(borders: BorderSet[]) {\n        return {\n            name: 'borders',\n            properties: {\n                rawMap: {\n                    count: borders.length,\n                },\n            },\n            children: borders.map((border) => borderFactory.getTemplate(border)),\n        };\n    },\n};\n\nexport default bordersFactory;\n", "import type { ExcelAlignment, ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport { convertLegacyHorizontalAlignment, convertLegacyVerticalAlignment } from '../../../assets/excelLegacyConvert';\n\nconst getReadingOrderId = (readingOrder: string): number => {\n    const order = ['Context', 'LeftToRight', 'RightToLeft'];\n    const pos = order.indexOf(readingOrder);\n    return Math.max(pos, 0);\n};\n\nconst alignmentFactory: ExcelOOXMLTemplate = {\n    getTemplate(alignment: ExcelAlignment) {\n        const { horizontal, indent, readingOrder, rotate, shrinkToFit, vertical, wrapText } = alignment;\n\n        return {\n            name: 'alignment',\n            properties: {\n                rawMap: {\n                    horizontal: horizontal && convertLegacyHorizontalAlignment(horizontal),\n                    indent,\n                    readingOrder: readingOrder && getReadingOrderId(readingOrder),\n                    textRotation: rotate,\n                    shrinkToFit,\n                    vertical: vertical && convertLegacyVerticalAlignment(vertical),\n                    wrapText,\n                },\n            },\n        };\n    },\n};\n\nexport default alignmentFactory;\n", "import type { ExcelOOXMLTemplate, ExcelProtection } from '@ag-grid-community/core';\n\nconst protectionFactory: ExcelOOXMLTemplate = {\n    getTemplate(protection: ExcelProtection) {\n        const locked = protection.protected === false ? 0 : 1;\n        const hidden = protection.hideFormula === true ? 1 : 0;\n        return {\n            name: 'protection',\n            properties: {\n                rawMap: {\n                    hidden,\n                    locked,\n                },\n            },\n        };\n    },\n};\n\nexport default protectionFactory;\n", "import type { ExcelAlignment, ExcelOOXMLTemplate, ExcelProtection, XmlElement } from '@ag-grid-community/core';\n\nimport alignmentFactory from './alignment';\nimport protectionFactory from './protection';\n\nconst xfFactory: ExcelOOXMLTemplate = {\n    getTemplate(xf: Xf) {\n        const { alignment, borderId, fillId, fontId, numFmtId, protection, quotePrefix, xfId } = xf;\n        const children: XmlElement[] = [];\n        if (alignment) {\n            children.push(alignmentFactory.getTemplate(alignment));\n        }\n\n        if (protection) {\n            children.push(protectionFactory.getTemplate(protection));\n        }\n\n        return {\n            name: 'xf',\n            properties: {\n                rawMap: {\n                    applyAlignment: alignment ? 1 : undefined,\n                    applyProtection: protection ? 1 : undefined,\n                    applyBorder: borderId ? 1 : undefined,\n                    applyFill: fillId ? 1 : undefined,\n                    borderId,\n                    fillId,\n                    applyFont: fontId ? 1 : undefined,\n                    fontId,\n                    applyNumberFormat: numFmtId ? 1 : undefined,\n                    numFmtId,\n                    quotePrefix: quotePrefix ? 1 : undefined,\n                    xfId,\n                },\n            },\n            children: children.length ? children : undefined,\n        };\n    },\n};\n\nexport default xfFactory;\n\nexport interface Xf {\n    alignment?: ExcelAlignment;\n    borderId: number;\n    fillId: number;\n    fontId: number;\n    numFmtId: number;\n    quotePrefix?: number;\n    xfId?: number;\n    protection?: ExcelProtection;\n}\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { Xf } from './xf';\nimport xfFactory from './xf';\n\nconst cellStylesXfsFactory: ExcelOOXMLTemplate = {\n    getTemplate(xfs: Xf[]) {\n        return {\n            name: 'cellStyleXfs',\n            properties: {\n                rawMap: {\n                    count: xfs.length,\n                },\n            },\n            children: xfs.map((xf) => xfFactory.getTemplate(xf)),\n        };\n    },\n};\n\nexport default cellStylesXfsFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst borderFactory: ExcelOOXMLTemplate = {\n    getTemplate(cellStyle: CellStyle) {\n        const { builtinId, name, xfId } = cellStyle;\n\n        return {\n            name: 'cellStyle',\n            properties: {\n                rawMap: {\n                    builtinId,\n                    name,\n                    xfId,\n                },\n            },\n        };\n    },\n};\n\nexport default borderFactory;\n\nexport interface CellStyle {\n    builtinId: number;\n    name: string;\n    xfId: number;\n}\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { CellStyle } from './cellStyle';\nimport cellStyleFactory from './cellStyle';\n\nconst cellStylesFactory: ExcelOOXMLTemplate = {\n    getTemplate(cellStyles: CellStyle[]) {\n        return {\n            name: 'cellStyles',\n            properties: {\n                rawMap: {\n                    count: cellStyles.length,\n                },\n            },\n            children: cellStyles.map((cellStyle) => cellStyleFactory.getTemplate(cellStyle)),\n        };\n    },\n};\n\nexport default cellStylesFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { Xf } from './xf';\nimport xfFactory from './xf';\n\nconst cellXfsFactory: ExcelOOXMLTemplate = {\n    getTemplate(xfs: Xf[]) {\n        return {\n            name: 'cellXfs',\n            properties: {\n                rawMap: {\n                    count: xfs.length,\n                },\n            },\n            children: xfs.map((xf) => xfFactory.getTemplate(xf)),\n        };\n    },\n};\n\nexport default cellXfsFactory;\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nimport type { Fill } from '../../../assets/excelInterfaces';\n\nconst fillFactory: ExcelOOXMLTemplate = {\n    getTemplate(fill: Fill) {\n        const { patternType, fgTheme, fgTint, fgRgb, bgRgb, bgIndexed } = fill;\n        const pf: XmlElement = {\n            name: 'patternFill',\n            properties: {\n                rawMap: {\n                    patternType,\n                },\n            },\n        };\n\n        if (fgTheme || fgTint || fgRgb) {\n            pf.children = [\n                {\n                    name: 'fgColor',\n                    properties: {\n                        rawMap: {\n                            theme: fgTheme,\n                            tint: fgTint,\n                            rgb: fgRgb,\n                        },\n                    },\n                },\n            ];\n        }\n\n        if (bgIndexed || bgRgb) {\n            if (!pf.children) {\n                pf.children = [];\n            }\n            pf.children.push({\n                name: 'bgColor',\n                properties: {\n                    rawMap: {\n                        indexed: bgIndexed,\n                        rgb: bgRgb,\n                    },\n                },\n            });\n        }\n\n        return {\n            name: 'fill',\n            children: [pf],\n        };\n    },\n};\n\nexport default fillFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { Fill } from '../../../assets/excelInterfaces';\nimport fillFactory from './fill';\n\nconst fillsFactory: ExcelOOXMLTemplate = {\n    getTemplate(fills: Fill[]) {\n        return {\n            name: 'fills',\n            properties: {\n                rawMap: {\n                    count: fills.length,\n                },\n            },\n            children: fills.map((fill) => fillFactory.getTemplate(fill)),\n        };\n    },\n};\n\nexport default fillsFactory;\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nimport type { ExcelThemeFont } from '../../../assets/excelInterfaces';\n\nconst fontFactory: ExcelOOXMLTemplate = {\n    getTemplate(font: ExcelThemeFont) {\n        const {\n            size,\n            colorTheme,\n            color = 'FF000000',\n            fontName = 'Calibri',\n            family,\n            scheme,\n            italic,\n            bold,\n            strikeThrough,\n            outline,\n            shadow,\n            underline,\n            verticalAlign,\n        } = font;\n\n        const children: XmlElement[] = [\n            { name: 'sz', properties: { rawMap: { val: size } } },\n            { name: 'color', properties: { rawMap: { theme: colorTheme, rgb: color } } },\n            { name: 'name', properties: { rawMap: { val: fontName } } },\n        ];\n\n        if (family) {\n            children.push({ name: 'family', properties: { rawMap: { val: family } } });\n        }\n\n        if (scheme) {\n            children.push({ name: 'scheme', properties: { rawMap: { val: scheme } } });\n        }\n\n        if (italic) {\n            children.push({ name: 'i' });\n        }\n        if (bold) {\n            children.push({ name: 'b' });\n        }\n        if (strikeThrough) {\n            children.push({ name: 'strike' });\n        }\n        if (outline) {\n            children.push({ name: 'outline' });\n        }\n        if (shadow) {\n            children.push({ name: 'shadow' });\n        }\n        if (underline) {\n            children.push({ name: 'u', properties: { rawMap: { val: underline } } });\n        }\n        if (verticalAlign) {\n            children.push({ name: 'vertAlign', properties: { rawMap: { val: verticalAlign } } });\n        }\n\n        return { name: 'font', children };\n    },\n};\n\nexport default fontFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { ExcelThemeFont } from '../../../assets/excelInterfaces';\nimport fontFactory from './font';\n\nconst fontsFactory: ExcelOOXMLTemplate = {\n    getTemplate(fonts: ExcelThemeFont[]) {\n        return {\n            name: 'fonts',\n            properties: {\n                rawMap: {\n                    count: fonts.length,\n                },\n            },\n            children: fonts.map((font) => fontFactory.getTemplate(font)),\n        };\n    },\n};\n\nexport default fontsFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { _escapeString } from '@ag-grid-community/core';\n\nimport type { NumberFormat } from '../../../assets/excelInterfaces';\n\nfunction prepareString(str: string): string {\n    const split = str.split(/(\\[[^\\]]*\\])/);\n\n    for (let i = 0; i < split.length; i++) {\n        // excel formulas require symbols to be escaped. Excel also requires $ to be\n        // placed in quotes but only when the $ is not wrapped inside of square brackets.\n        let currentString = split[i];\n        if (!currentString.length) {\n            continue;\n        }\n        if (!currentString.startsWith('[')) {\n            currentString = currentString.replace(/\\$/g, '\"$\"');\n        }\n\n        split[i] = _escapeString(currentString) as string;\n    }\n\n    return split.join('');\n}\n\nconst numberFormatFactory: ExcelOOXMLTemplate = {\n    getTemplate(numberFormat: NumberFormat) {\n        let { formatCode, numFmtId } = numberFormat;\n\n        if (formatCode.length) {\n            formatCode = prepareString(formatCode);\n        }\n\n        return {\n            name: 'numFmt',\n            properties: {\n                rawMap: {\n                    formatCode,\n                    numFmtId,\n                },\n            },\n        };\n    },\n};\n\nexport default numberFormatFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { NumberFormat } from '../../../assets/excelInterfaces';\nimport numberFormatFactory from './numberFormat';\n\nconst numberFormatsFactory: ExcelOOXMLTemplate = {\n    getTemplate(numberFormats: NumberFormat[]) {\n        return {\n            name: 'numFmts',\n            properties: {\n                rawMap: {\n                    count: numberFormats.length,\n                },\n            },\n            children: numberFormats.map((numberFormat) => numberFormatFactory.getTemplate(numberFormat)),\n        };\n    },\n};\n\nexport default numberFormatsFactory;\n", "import type { ExcelBorders, ExcelFont, ExcelInterior, ExcelOOXMLTemplate, ExcelStyle } from '@ag-grid-community/core';\n\nimport { numberFormatMap } from '../../../assets/excelConstants';\nimport type {\n    Border,\n    BorderProperty,\n    BorderSet,\n    ExcelThemeFont,\n    Fill,\n    NumberFormat,\n} from '../../../assets/excelInterfaces';\nimport { convertLegacyBorder, convertLegacyColor, convertLegacyPattern } from '../../../assets/excelLegacyConvert';\nimport { getFontFamilyId } from '../../../assets/excelUtils';\nimport bordersFactory from './borders';\nimport type { CellStyle } from './cellStyle';\nimport cellStylesXfsFactory from './cellStyleXfs';\nimport cellStylesFactory from './cellStyles';\nimport cellXfsFactory from './cellXfs';\nimport fillsFactory from './fills';\nimport fontsFactory from './fonts';\nimport numberFormatsFactory from './numberFormats';\nimport type { Xf } from './xf';\n\nlet stylesMap: { [key: string]: number };\nlet registeredNumberFmts: NumberFormat[];\nlet registeredFonts: ExcelThemeFont[];\nlet registeredFills: Fill[];\nlet registeredBorders: BorderSet[];\nlet registeredCellStyleXfs: Xf[];\nlet registeredCellXfs: Xf[];\nlet registeredCellStyles: CellStyle[];\nlet currentSheet: number;\n\nconst getStyleName = (name: string, currentSheet: number): string => {\n    if (name.indexOf('mixedStyle') !== -1 && currentSheet > 1) {\n        name += `_${currentSheet}`;\n    }\n    return name;\n};\n\nconst resetStylesheetValues = (): void => {\n    stylesMap = { base: 0 };\n    registeredNumberFmts = [];\n    registeredFonts = [{ fontName: 'Calibri', colorTheme: '1', family: '2', scheme: 'minor' }];\n    registeredFills = [{ patternType: 'none' }, { patternType: 'gray125' }];\n    registeredBorders = [{ left: undefined, right: undefined, top: undefined, bottom: undefined, diagonal: undefined }];\n    registeredCellStyleXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0 }];\n    registeredCellXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0, xfId: 0 }];\n    registeredCellStyles = [{ builtinId: 0, name: 'Normal', xfId: 0 }];\n};\n\nconst registerFill = (fill: ExcelInterior): number => {\n    const convertedPattern = convertLegacyPattern(fill.pattern);\n    const convertedFillColor = convertLegacyColor(fill.color);\n    const convertedPatternColor = convertLegacyColor(fill.patternColor);\n\n    let pos = registeredFills.findIndex((currentFill) => {\n        const { patternType, fgRgb, bgRgb } = currentFill;\n\n        if (patternType != convertedPattern || fgRgb != convertedFillColor || bgRgb != convertedPatternColor) {\n            return false;\n        }\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredFills.length;\n        registeredFills.push({\n            patternType: convertedPattern,\n            fgRgb: convertedFillColor,\n            bgRgb: convertedPatternColor,\n        });\n    }\n\n    return pos;\n};\n\nconst registerNumberFmt = (format: string): number => {\n    if (numberFormatMap[format]) {\n        return numberFormatMap[format];\n    }\n\n    let pos = registeredNumberFmts.findIndex((currentFormat) => currentFormat.formatCode === format);\n\n    if (pos === -1) {\n        pos = registeredNumberFmts.length + 164;\n        registeredNumberFmts.push({ formatCode: format, numFmtId: pos });\n    } else {\n        pos = registeredNumberFmts[pos].numFmtId;\n    }\n\n    return pos;\n};\n\nconst registerBorders = (borders: ExcelBorders): number => {\n    const { borderBottom, borderTop, borderLeft, borderRight } = borders;\n    let bottomStyle: BorderProperty;\n    let topStyle: BorderProperty;\n    let leftStyle: BorderProperty;\n    let rightStyle: BorderProperty;\n    let bottomColor: BorderProperty;\n    let topColor: BorderProperty;\n    let leftColor: BorderProperty;\n    let rightColor: BorderProperty;\n\n    if (borderLeft) {\n        leftStyle = convertLegacyBorder(borderLeft.lineStyle, borderLeft.weight);\n        leftColor = convertLegacyColor(borderLeft.color);\n    }\n\n    if (borderRight) {\n        rightStyle = convertLegacyBorder(borderRight.lineStyle, borderRight.weight);\n        rightColor = convertLegacyColor(borderRight.color);\n    }\n\n    if (borderBottom) {\n        bottomStyle = convertLegacyBorder(borderBottom.lineStyle, borderBottom.weight);\n        bottomColor = convertLegacyColor(borderBottom.color);\n    }\n    if (borderTop) {\n        topStyle = convertLegacyBorder(borderTop.lineStyle, borderTop.weight);\n        topColor = convertLegacyColor(borderTop.color);\n    }\n\n    let pos = registeredBorders.findIndex((currentBorder) => {\n        const { left, right, top, bottom } = currentBorder;\n        if (!left && (leftStyle || leftColor)) {\n            return false;\n        }\n        if (!right && (rightStyle || rightColor)) {\n            return false;\n        }\n        if (!top && (topStyle || topColor)) {\n            return false;\n        }\n        if (!bottom && (bottomStyle || bottomColor)) {\n            return false;\n        }\n\n        const { style: clS, color: clC } = left || ({} as Border);\n        const { style: crS, color: crC } = right || ({} as Border);\n        const { style: ctS, color: ctC } = top || ({} as Border);\n        const { style: cbS, color: cbC } = bottom || ({} as Border);\n\n        if (clS != leftStyle || clC != leftColor) {\n            return false;\n        }\n        if (crS != rightStyle || crC != rightColor) {\n            return false;\n        }\n        if (ctS != topStyle || ctC != topColor) {\n            return false;\n        }\n        if (cbS != bottomStyle || cbC != bottomColor) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredBorders.length;\n        registeredBorders.push({\n            left: {\n                style: leftStyle,\n                color: leftColor,\n            },\n            right: {\n                style: rightStyle,\n                color: rightColor,\n            },\n            top: {\n                style: topStyle,\n                color: topColor,\n            },\n            bottom: {\n                style: bottomStyle,\n                color: bottomColor,\n            },\n            diagonal: {\n                style: undefined,\n                color: undefined,\n            },\n        });\n    }\n\n    return pos;\n};\n\nconst registerFont = (font: ExcelFont): number => {\n    const {\n        fontName: name = 'Calibri',\n        color,\n        size,\n        bold,\n        italic,\n        outline,\n        shadow,\n        strikeThrough,\n        underline,\n        family,\n        verticalAlign,\n    } = font;\n    const convertedColor = convertLegacyColor(color);\n    const familyId = getFontFamilyId(family);\n    const convertedUnderline = underline ? underline.toLocaleLowerCase() : undefined;\n    const convertedVerticalAlign = verticalAlign ? verticalAlign.toLocaleLowerCase() : undefined;\n\n    let pos = registeredFonts.findIndex((currentFont) => {\n        if (\n            currentFont.fontName != name ||\n            currentFont.color != convertedColor ||\n            currentFont.size != size ||\n            currentFont.bold != bold ||\n            currentFont.italic != italic ||\n            currentFont.outline != outline ||\n            currentFont.shadow != shadow ||\n            currentFont.strikeThrough != strikeThrough ||\n            currentFont.underline != convertedUnderline ||\n            currentFont.verticalAlign != convertedVerticalAlign ||\n            // @ts-ignore\n            currentFont.family != familyId\n        ) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredFonts.length;\n        registeredFonts.push({\n            fontName: name,\n            color: convertedColor,\n            size,\n            bold,\n            italic,\n            outline,\n            shadow,\n            strikeThrough,\n            underline: convertedUnderline as any,\n            verticalAlign: convertedVerticalAlign as any,\n            family: familyId != null ? familyId.toString() : undefined,\n        });\n    }\n\n    return pos;\n};\n\nconst registerStyle = (config: ExcelStyle & { quotePrefix?: 1 }): void => {\n    const { alignment, borders, font, interior, numberFormat, protection, quotePrefix } = config;\n    let { id } = config;\n    let currentFill = 0;\n    let currentBorder = 0;\n    let currentFont = 0;\n    let currentNumberFmt = 0;\n\n    if (!id) {\n        return;\n    }\n\n    id = getStyleName(id, currentSheet);\n\n    if (stylesMap[id] != undefined) {\n        return;\n    }\n\n    if (interior) {\n        currentFill = registerFill(interior);\n    }\n\n    if (borders) {\n        currentBorder = registerBorders(borders);\n    }\n\n    if (font) {\n        currentFont = registerFont(font);\n    }\n\n    if (numberFormat) {\n        currentNumberFmt = registerNumberFmt(numberFormat.format);\n    }\n\n    stylesMap[id] = registeredCellXfs.length;\n\n    registeredCellXfs.push({\n        alignment,\n        borderId: currentBorder || 0,\n        fillId: currentFill || 0,\n        fontId: currentFont || 0,\n        numFmtId: currentNumberFmt || 0,\n        protection,\n        quotePrefix: quotePrefix,\n        xfId: 0,\n    });\n};\n\nconst stylesheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(defaultFontSize: number) {\n        const numberFormats = numberFormatsFactory.getTemplate(registeredNumberFmts);\n        const fonts = fontsFactory.getTemplate(\n            registeredFonts.map((font) => ({ ...font, size: font.size != null ? font.size : defaultFontSize }))\n        );\n        const fills = fillsFactory.getTemplate(registeredFills);\n        const borders = bordersFactory.getTemplate(registeredBorders);\n        const cellStylesXfs = cellStylesXfsFactory.getTemplate(registeredCellStyleXfs);\n        const cellXfs = cellXfsFactory.getTemplate(registeredCellXfs);\n        const cellStyles = cellStylesFactory.getTemplate(registeredCellStyles);\n\n        resetStylesheetValues();\n\n        return {\n            name: 'styleSheet',\n            properties: {\n                rawMap: {\n                    'mc:Ignorable': 'x14ac x16r2 xr',\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n                    'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n                    'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',\n                    'xmlns:xr': 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision',\n                },\n            },\n            children: [\n                numberFormats,\n                fonts,\n                fills,\n                borders,\n                cellStylesXfs,\n                cellXfs,\n                cellStyles,\n                {\n                    name: 'tableStyles',\n                    properties: {\n                        rawMap: {\n                            count: 0,\n                            defaultPivotStyle: 'PivotStyleLight16',\n                            defaultTableStyle: 'TableStyleMedium2',\n                        },\n                    },\n                },\n            ],\n        };\n    },\n};\n\nexport const getStyleId = (name: string, currentSheet: number): number => {\n    return stylesMap[getStyleName(name, currentSheet)] || 0;\n};\n\nexport const registerStyles = (styles: ExcelStyle[], _currentSheet: number): void => {\n    currentSheet = _currentSheet;\n\n    if (currentSheet === 1) {\n        resetStylesheetValues();\n    }\n\n    styles.forEach(registerStyle);\n};\n\nexport default stylesheetFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport type { ExcelDataTable } from '../../assets/excelInterfaces';\n\nconst tableFactory: ExcelOOXMLTemplate = {\n    getTemplate(dataTable: ExcelDataTable, idx: number) {\n        const {\n            name,\n            columns,\n            rowCount,\n            displayName,\n            headerRowIndex,\n            showRowStripes,\n            showColumnStripes,\n            showFilterButtons,\n            highlightFirstColumn,\n            highlightLastColumn,\n        } = dataTable || {};\n\n        if (!dataTable || !name || !Array.isArray(columns) || !columns.length || !rowCount) {\n            return { name: 'table' };\n        }\n\n        const filterColumns = columns.map((col: string, idx: number) => ({\n            name: 'filterColumn',\n            properties: {\n                rawMap: {\n                    colId: idx.toString(), // For filters, this should start with 0\n                    hiddenButton: showFilterButtons[idx] ? 0 : 1,\n                },\n            },\n        }));\n\n        const firstRow = headerRowIndex + 1;\n        const id: string = (idx + 1).toString();\n        const firstCell = `A${firstRow}`;\n        const lastCell = `${String.fromCharCode(64 + columns.length)}${firstRow + rowCount}`;\n        const ref = `${firstCell}:${lastCell}`;\n        const displayNameToUse = idx ? `${displayName}_${idx + 1}` : displayName;\n\n        return {\n            name: 'table',\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n                    'mc:Ignorable': 'xr xr3',\n                    'xmlns:xr': 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision',\n                    'xmlns:xr3': 'http://schemas.microsoft.com/office/spreadsheetml/2016/revision3',\n                    name: name,\n                    displayName: displayNameToUse,\n                    ref: ref,\n                    totalsRowShown: 0,\n                    id: id,\n                },\n            },\n            children: [\n                {\n                    name: 'autoFilter',\n                    properties: {\n                        rawMap: {\n                            ref,\n                        },\n                    },\n                    children: filterColumns,\n                },\n                {\n                    name: 'tableColumns',\n                    properties: {\n                        rawMap: {\n                            count: columns.length,\n                        },\n                    },\n                    children: columns.map((col: string, idx: number) => ({\n                        name: 'tableColumn',\n                        properties: {\n                            rawMap: {\n                                id: (idx + 1).toString(),\n                                name: col,\n                                dataCellStyle: 'Normal',\n                            },\n                        },\n                    })),\n                },\n                {\n                    name: 'tableStyleInfo',\n                    properties: {\n                        rawMap: {\n                            name: 'TableStyleLight1',\n                            showFirstColumn: highlightFirstColumn ? 1 : 0,\n                            showLastColumn: highlightLastColumn ? 1 : 0,\n                            showRowStripes: showRowStripes ? 1 : 0,\n                            showColumnStripes: showColumnStripes ? 1 : 0,\n                        },\n                    },\n                },\n            ],\n        };\n    },\n};\n\nexport default tableFactory;\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nconst getColorChildren = (props: [string, string, string, string?]): XmlElement => {\n    const [type, innerType, val, lastClr] = props;\n\n    return {\n        name: `a:${type}`,\n        children: [\n            {\n                name: `a:${innerType}`,\n                properties: {\n                    rawMap: {\n                        val,\n                        lastClr,\n                    },\n                },\n            },\n        ],\n    };\n};\n\nconst colorScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: 'a:clrScheme',\n            properties: {\n                rawMap: {\n                    name: 'Office',\n                },\n            },\n            children: [\n                getColorChildren(['dk1', 'sysClr', 'windowText', '000000']),\n                getColorChildren(['lt1', 'sysClr', 'window', 'FFFFFF']),\n                getColorChildren(['dk2', 'srgbClr', '44546A']),\n                getColorChildren(['lt2', 'srgbClr', 'E7E6E6']),\n                getColorChildren(['accent1', 'srgbClr', '4472C4']),\n                getColorChildren(['accent2', 'srgbClr', 'ED7D31']),\n                getColorChildren(['accent3', 'srgbClr', 'A5A5A5']),\n                getColorChildren(['accent4', 'srgbClr', 'FFC000']),\n                getColorChildren(['accent5', 'srgbClr', '5B9BD5']),\n                getColorChildren(['accent6', 'srgbClr', '70AD47']),\n                getColorChildren(['hlink', 'srgbClr', '0563C1']),\n                getColorChildren(['folHlink', 'srgbClr', '954F72']),\n            ],\n        };\n    },\n};\n\nexport default colorScheme;\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nconst getFont = (props: [string, string, string?, string?]): XmlElement => {\n    const [type, typeface, script, panose] = props;\n    return {\n        name: `a:${type}`,\n        properties: {\n            rawMap: {\n                script,\n                typeface,\n                panose,\n            },\n        },\n    };\n};\n\nconst fontScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: 'a:fontScheme',\n            properties: {\n                rawMap: {\n                    name: 'Office',\n                },\n            },\n            children: [\n                {\n                    name: 'a:majorFont',\n                    children: [\n                        getFont(['latin', 'Calibri Light', undefined, '020F0302020204030204']),\n                        getFont(['ea', '']),\n                        getFont(['cs', '']),\n                        getFont(['font', '\u6E38\u30B4\u30B7\u30C3\u30AF Light', 'Jpan']),\n                        getFont(['font', '\uB9D1\uC740 \uACE0\uB515', 'Hang']),\n                        getFont(['font', '\u7B49\u7EBF Light', 'Hans']),\n                        getFont(['font', '\u65B0\u7D30\u660E\u9AD4', 'Hant']),\n                        getFont(['font', 'Times New Roman', 'Arab']),\n                        getFont(['font', 'Times New Roman', 'Hebr']),\n                        getFont(['font', 'Tahoma', 'Thai']),\n                        getFont(['font', 'Nyala', 'Ethi']),\n                        getFont(['font', 'Vrinda', 'Beng']),\n                        getFont(['font', 'Shruti', 'Gujr']),\n                        getFont(['font', 'MoolBoran', 'Khmr']),\n                        getFont(['font', 'Tunga', 'Knda']),\n                        getFont(['font', 'Raavi', 'Guru']),\n                        getFont(['font', 'Euphemia', 'Cans']),\n                        getFont(['font', 'Plantagenet Cherokee', 'Cher']),\n                        getFont(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                        getFont(['font', 'Microsoft Himalaya', 'Tibt']),\n                        getFont(['font', 'MV Boli', 'Thaa']),\n                        getFont(['font', 'Mangal', 'Deva']),\n                        getFont(['font', 'Gautami', 'Telu']),\n                        getFont(['font', 'Latha', 'Taml']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syrc']),\n                        getFont(['font', 'Kalinga', 'Orya']),\n                        getFont(['font', 'Kartika', 'Mlym']),\n                        getFont(['font', 'DokChampa', 'Laoo']),\n                        getFont(['font', 'Iskoola Pota', 'Sinh']),\n                        getFont(['font', 'Mongolian Baiti', 'Mong']),\n                        getFont(['font', 'Times New Roman', 'Viet']),\n                        getFont(['font', 'Microsoft Uighur', 'Uigh']),\n                        getFont(['font', 'Sylfaen', 'Geor']),\n                        getFont(['font', 'Arial', 'Armn']),\n                        getFont(['font', 'Leelawadee UI', 'Bugi']),\n                        getFont(['font', 'Microsoft JhengHei', 'Bopo']),\n                        getFont(['font', 'Javanese Text', 'Java']),\n                        getFont(['font', 'Segoe UI', 'Lisu']),\n                        getFont(['font', 'Myanmar Text', 'Mymr']),\n                        getFont(['font', 'Ebrima', 'Nkoo']),\n                        getFont(['font', 'Nirmala UI', 'Olck']),\n                        getFont(['font', 'Ebrima', 'Osma']),\n                        getFont(['font', 'Phagspa', 'Phag']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syrn']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syrj']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syre']),\n                        getFont(['font', 'Nirmala UI', 'Sora']),\n                        getFont(['font', 'Microsoft Tai Le', 'Tale']),\n                        getFont(['font', 'Microsoft New Tai Lue', 'Talu']),\n                        getFont(['font', 'Ebrima', 'Tfng']),\n                    ],\n                },\n                {\n                    name: 'a:minorFont',\n                    children: [\n                        getFont(['latin', 'Calibri', undefined, '020F0502020204030204']),\n                        getFont(['ea', '']),\n                        getFont(['cs', '']),\n                        getFont(['font', '\u6E38\u30B4\u30B7\u30C3\u30AF', 'Jpan']),\n                        getFont(['font', '\uB9D1\uC740 \uACE0\uB515', 'Hang']),\n                        getFont(['font', '\u7B49\u7EBF', 'Hans']),\n                        getFont(['font', '\u65B0\u7D30\u660E\u9AD4', 'Hant']),\n                        getFont(['font', 'Arial', 'Arab']),\n                        getFont(['font', 'Arial', 'Hebr']),\n                        getFont(['font', 'Tahoma', 'Thai']),\n                        getFont(['font', 'Nyala', 'Ethi']),\n                        getFont(['font', 'Vrinda', 'Beng']),\n                        getFont(['font', 'Shruti', 'Gujr']),\n                        getFont(['font', 'DaunPenh', 'Khmr']),\n                        getFont(['font', 'Tunga', 'Knda']),\n                        getFont(['font', 'Raavi', 'Guru']),\n                        getFont(['font', 'Euphemia', 'Cans']),\n                        getFont(['font', 'Plantagenet Cherokee', 'Cher']),\n                        getFont(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                        getFont(['font', 'Microsoft Himalaya', 'Tibt']),\n                        getFont(['font', 'MV Boli', 'Thaa']),\n                        getFont(['font', 'Mangal', 'Deva']),\n                        getFont(['font', 'Gautami', 'Telu']),\n                        getFont(['font', 'Latha', 'Taml']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syrc']),\n                        getFont(['font', 'Kalinga', 'Orya']),\n                        getFont(['font', 'Kartika', 'Mlym']),\n                        getFont(['font', 'DokChampa', 'Laoo']),\n                        getFont(['font', 'Iskoola Pota', 'Sinh']),\n                        getFont(['font', 'Mongolian Baiti', 'Mong']),\n                        getFont(['font', 'Arial', 'Viet']),\n                        getFont(['font', 'Microsoft Uighur', 'Uigh']),\n                        getFont(['font', 'Sylfaen', 'Geor']),\n                        getFont(['font', 'Arial', 'Armn']),\n                        getFont(['font', 'Leelawadee UI', 'Bugi']),\n                        getFont(['font', 'Microsoft JhengHei', 'Bopo']),\n                        getFont(['font', 'Javanese Text', 'Java']),\n                        getFont(['font', 'Segoe UI', 'Lisu']),\n                        getFont(['font', 'Myanmar Text', 'Mymr']),\n                        getFont(['font', 'Ebrima', 'Nkoo']),\n                        getFont(['font', 'Nirmala UI', 'Olck']),\n                        getFont(['font', 'Ebrima', 'Osma']),\n                        getFont(['font', 'Phagspa', 'Phag']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syrn']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syrj']),\n                        getFont(['font', 'Estrangelo Edessa', 'Syre']),\n                        getFont(['font', 'Nirmala UI', 'Sora']),\n                        getFont(['font', 'Microsoft Tai Le', 'Tale']),\n                        getFont(['font', 'Microsoft New Tai Lue', 'Talu']),\n                        getFont(['font', 'Ebrima', 'Tfng']),\n                    ],\n                },\n            ],\n        };\n    },\n};\n\nexport default fontScheme;\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\ntype GsType = [string, string, string, string?, string?, string?];\ntype LinType = [string, string];\n\nconst getPropertyVal = (name: string, val: string, children?: XmlElement[]): XmlElement => ({\n    name: `a:${name}`,\n    properties: {\n        rawMap: {\n            val,\n        },\n    },\n    children,\n});\n\nconst getGs = (props: GsType): XmlElement => {\n    const [pos, schemeColor, satMod, lumMod, tint, shade] = props;\n    const children: XmlElement[] = [];\n\n    children.push(getPropertyVal('satMod', satMod));\n    if (lumMod) {\n        children.push(getPropertyVal('lumMod', lumMod));\n    }\n    if (tint) {\n        children.push(getPropertyVal('tint', tint));\n    }\n    if (shade) {\n        children.push(getPropertyVal('shade', shade));\n    }\n\n    return {\n        name: 'a:gs',\n        properties: {\n            rawMap: {\n                pos,\n            },\n        },\n        children: [\n            {\n                name: 'a:schemeClr',\n                properties: {\n                    rawMap: {\n                        val: schemeColor,\n                    },\n                },\n                children,\n            },\n        ],\n    };\n};\n\nconst getSolidFill = (val: string, children?: XmlElement[]): XmlElement => ({\n    name: 'a:solidFill',\n    children: [getPropertyVal('schemeClr', val, children)],\n});\n\nconst getGradFill = (props: [string, GsType, GsType, GsType, LinType]): XmlElement => {\n    const [rotWithShape, gs1, gs2, gs3, lin] = props;\n    const [ang, scaled] = lin;\n    return {\n        name: 'a:gradFill',\n        properties: {\n            rawMap: {\n                rotWithShape,\n            },\n        },\n        children: [\n            {\n                name: 'a:gsLst',\n                children: [getGs(gs1), getGs(gs2), getGs(gs3)],\n            },\n            {\n                name: 'a:lin',\n                properties: {\n                    rawMap: {\n                        ang: ang,\n                        scaled: scaled,\n                    },\n                },\n            },\n        ],\n    };\n};\n\nconst getLine = (props: [string, string, string, string]): XmlElement => {\n    const [w, cap, cmpd, algn] = props;\n\n    return {\n        name: 'a:ln',\n        properties: {\n            rawMap: { w, cap, cmpd, algn },\n        },\n        children: [\n            getSolidFill('phClr'),\n            getPropertyVal('prstDash', 'solid'),\n            {\n                name: 'a:miter',\n                properties: {\n                    rawMap: {\n                        lim: '800000',\n                    },\n                },\n            },\n        ],\n    };\n};\n\nconst getEffectStyle = (shadow?: [string, string, string, string, string]): XmlElement => {\n    const children: XmlElement[] = [];\n\n    if (shadow) {\n        const [blurRad, dist, dir, algn, rotWithShape] = shadow;\n        children.push({\n            name: 'a:outerShdw',\n            properties: {\n                rawMap: { blurRad, dist, dir, algn, rotWithShape },\n            },\n            children: [getPropertyVal('srgbClr', '000000', [getPropertyVal('alpha', '63000')])],\n        });\n    }\n\n    return {\n        name: 'a:effectStyle',\n        children: [\n            Object.assign(\n                {},\n                {\n                    name: 'a:effectLst',\n                },\n                children.length ? { children } : {}\n            ),\n        ],\n    };\n};\n\nconst getFillStyleList = (): XmlElement => ({\n    name: 'a:fillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '105000', '110000', '67000'],\n            ['50000', 'phClr', '103000', '105000', '73000'],\n            ['100000', 'phClr', '109000', '105000', '81000'],\n            ['5400000', '0'],\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '103000', '102000', '94000'],\n            ['50000', 'phClr', '110000', '100000', undefined, '100000'],\n            ['100000', 'phClr', '120000', '99000', undefined, '78000'],\n            ['5400000', '0'],\n        ]),\n    ],\n});\n\nconst getLineStyleList = (): XmlElement => ({\n    name: 'a:lnStyleLst',\n    children: [\n        getLine(['6350', 'flat', 'sng', 'ctr']),\n        getLine(['12700', 'flat', 'sng', 'ctr']),\n        getLine(['19050', 'flat', 'sng', 'ctr']),\n    ],\n});\n\nconst getEffectStyleList = (): XmlElement => ({\n    name: 'a:effectStyleLst',\n    children: [getEffectStyle(), getEffectStyle(), getEffectStyle(['57150', '19050', '5400000', 'ctr', '0'])],\n});\n\nconst getBgFillStyleList = (): XmlElement => ({\n    name: 'a:bgFillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getSolidFill('phClr', [getPropertyVal('tint', '95000'), getPropertyVal('satMod', '170000')]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '150000', '102000', '93000', '98000'],\n            ['50000', 'phClr', '130000', '103000', '98000', '90000'],\n            ['100000', 'phClr', '120000', undefined, undefined, '63000'],\n            ['5400000', '0'],\n        ]),\n    ],\n});\n\nconst formatScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: 'a:fmtScheme',\n            properties: {\n                rawMap: {\n                    name: 'Office',\n                },\n            },\n            children: [getFillStyleList(), getLineStyleList(), getEffectStyleList(), getBgFillStyleList()],\n        };\n    },\n};\n\nexport default formatScheme;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport colorScheme from './colorScheme';\nimport fontScheme from './fontScheme';\nimport formatScheme from './formatScheme';\n\nconst themeElements: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: 'a:themeElements',\n            children: [colorScheme.getTemplate(), fontScheme.getTemplate(), formatScheme.getTemplate()],\n        };\n    },\n};\n\nexport default themeElements;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport themeElements from './office/themeElements';\n\nconst officeTheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: 'a:theme',\n            properties: {\n                prefixedAttributes: [\n                    {\n                        prefix: 'xmlns:',\n                        map: {\n                            a: 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                        },\n                    },\n                ],\n                rawMap: {\n                    name: 'Office Theme',\n                },\n            },\n            children: [\n                themeElements.getTemplate(),\n                {\n                    name: 'a:objectDefaults',\n                },\n                {\n                    name: 'a:extraClrSchemeLst',\n                },\n            ],\n        };\n    },\n};\n\nexport default officeTheme;\n", "import type { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nimport type { ExcelHeaderFooterCalculatedImage } from '../../assets/excelInterfaces';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\n\nconst getShapeLayout = (): XmlElement => ({\n    name: 'o:shapelayout',\n    properties: {\n        prefixedAttributes: [\n            {\n                prefix: 'v:',\n                map: {\n                    ext: 'edit',\n                },\n            },\n        ],\n    },\n    children: [\n        {\n            name: 'o:idmap',\n            properties: {\n                prefixedAttributes: [\n                    {\n                        prefix: 'v:',\n                        map: {\n                            ext: 'edit',\n                        },\n                    },\n                ],\n                rawMap: {\n                    data: '1',\n                },\n            },\n        },\n    ],\n});\n\nconst getStroke = (): XmlElement => ({\n    name: 'v:stroke',\n    properties: {\n        rawMap: {\n            joinstyle: 'miter',\n        },\n    },\n});\n\nconst getFormulas = (formulas: string[]): XmlElement => ({\n    name: 'v:formulas',\n    children: formulas.map<XmlElement>((formula) => ({\n        name: 'v:f',\n        properties: {\n            rawMap: {\n                eqn: formula,\n            },\n        },\n    })),\n});\n\nconst getPath = (): XmlElement => ({\n    name: 'v:path',\n    properties: {\n        prefixedAttributes: [\n            {\n                prefix: 'o:',\n                map: {\n                    connecttype: 'rect',\n                    extrusionok: 'f',\n                },\n            },\n        ],\n        rawMap: {\n            gradientshapeok: 't',\n        },\n    },\n});\n\nconst getLock = (params?: { aspectratio?: boolean; rotation?: boolean }): XmlElement => {\n    const { aspectratio, rotation } = params || {};\n    const rawMap: { aspectratio?: 't'; rotation?: 't' } = {};\n\n    if (aspectratio) {\n        rawMap.aspectratio = 't';\n    }\n\n    if (rotation) {\n        rawMap.rotation = 't';\n    }\n\n    return {\n        name: 'o:lock',\n        properties: {\n            prefixedAttributes: [\n                {\n                    prefix: 'v:',\n                    map: {\n                        ext: 'edit',\n                    },\n                },\n            ],\n            rawMap,\n        },\n    };\n};\n\nfunction mapNumber(\n    value: number,\n    startSource: number,\n    endSource: number,\n    startTarget: number,\n    endTarget: number\n): number {\n    return ((value - startSource) / (endSource - startSource)) * (endTarget - startTarget) + startTarget;\n}\n\nconst getImageData = (image: ExcelHeaderFooterCalculatedImage, idx: number): XmlElement => {\n    let rawMap: any;\n\n    const { recolor, brightness, contrast, id } = image;\n\n    if (recolor) {\n        rawMap = {};\n        if (recolor === 'Washout' || recolor === 'Grayscale') {\n            rawMap.gain = '19661f';\n            rawMap.blacklevel = '22938f';\n        }\n\n        if (recolor === 'Black & White' || recolor === 'Grayscale') {\n            rawMap.grayscale = 't';\n            if (recolor === 'Black & White') {\n                rawMap.bilevel = 't';\n            }\n        }\n    }\n\n    if (!recolor || recolor === 'Grayscale') {\n        if (!rawMap) {\n            rawMap = {};\n        }\n\n        if (contrast != null && contrast !== 50) {\n            let gain = '1';\n\n            if (contrast >= 0) {\n                if (contrast < 50) {\n                    gain = String(contrast / 50);\n                } else if (contrast < 100) {\n                    gain = String(50 / (100 - contrast));\n                } else if (contrast === 100) {\n                    gain = '2147483647f';\n                }\n            }\n\n            rawMap.gain = gain;\n        }\n\n        if (brightness != null && brightness !== 50) {\n            rawMap.blacklevel = mapNumber(brightness, 0, 100, -0.5, 0.5).toString();\n        }\n    }\n\n    return {\n        name: 'v:imagedata',\n        properties: {\n            prefixedAttributes: [\n                {\n                    prefix: 'o:',\n                    map: {\n                        relid: `rId${idx}`,\n                        title: id,\n                    },\n                },\n            ],\n            rawMap,\n        },\n    };\n};\n\nconst getShapeType = (): XmlElement => {\n    const formulas = [\n        'if lineDrawn pixelLineWidth 0',\n        'sum @0 1 0',\n        'sum 0 0 @1',\n        'prod @2 1 2',\n        'prod @3 21600 pixelWidth',\n        'prod @3 21600 pixelHeight',\n        'sum @0 0 1',\n        'prod @6 1 2',\n        'prod @7 21600 pixelWidth',\n        'sum @8 21600 0',\n        'prod @7 21600 pixelHeight',\n        'sum @10 21600 0',\n    ];\n\n    return {\n        name: 'v:shapetype',\n        properties: {\n            prefixedAttributes: [\n                {\n                    prefix: 'o:',\n                    map: {\n                        spt: '75',\n                        preferrelative: 't',\n                    },\n                },\n            ],\n            rawMap: {\n                coordsize: '21600,21600',\n                filled: 'f',\n                id: '_x0000_t75',\n                path: 'm@4@5l@4@11@9@11@9@5xe',\n                stroked: 'f',\n            },\n        },\n        children: [getStroke(), getFormulas(formulas), getPath(), getLock({ aspectratio: true })],\n    };\n};\n\nconst pixelToPoint = (value?: number) => Math.floor((value ?? 0) * 0.74999943307122);\n\nconst getShape = (image: ExcelHeaderFooterCalculatedImage, idx: number): XmlElement => {\n    const { width = 0, height = 0, altText } = image;\n\n    const imageWidth = pixelToPoint(width);\n    const imageHeight = pixelToPoint(height);\n\n    return {\n        name: 'v:shape',\n        properties: {\n            rawMap: {\n                id: image.headerFooterPosition,\n                'o:spid': '_x0000_s1025',\n                style: `position: absolute; margin-left: 0; margin-top: 10in; margin-bottom: 0; margin-right: 0; width: ${imageWidth}pt; height: ${imageHeight}pt; z-index: ${idx + 1}`,\n                type: '#_x0000_t75',\n                alt: altText,\n            },\n        },\n        children: [getImageData(image, idx + 1), getLock({ rotation: true })],\n    };\n};\n\nconst vmlDrawingFactory: ExcelOOXMLTemplate = {\n    getTemplate(params: { sheetIndex: number }) {\n        const headerFooterImages = ExcelXlsxFactory.worksheetHeaderFooterImages.get(params.sheetIndex) || [];\n        const children: XmlElement[] = [\n            getShapeLayout(),\n            getShapeType(),\n            ...headerFooterImages.map((img, idx) => getShape(img, idx)),\n        ];\n\n        return {\n            name: 'xml',\n            properties: {\n                prefixedAttributes: [\n                    {\n                        prefix: 'xmlns:',\n                        map: {\n                            v: 'urn:schemas-microsoft-com:vml',\n                            o: 'urn:schemas-microsoft-com:office:office',\n                            x: 'urn:schemas-microsoft-com:office:excel',\n                        },\n                    },\n                ],\n            },\n            children,\n        };\n    },\n};\n\nexport default vmlDrawingFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst sheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(name: string, idx: number) {\n        const sheetId = (idx + 1).toString();\n        return {\n            name: 'sheet',\n            properties: {\n                rawMap: {\n                    name: name,\n                    sheetId: sheetId,\n                    'r:id': `rId${sheetId}`,\n                },\n            },\n        };\n    },\n};\n\nexport default sheetFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport sheetFactory from './sheet';\n\nconst sheetsFactory: ExcelOOXMLTemplate = {\n    getTemplate(names: string[]) {\n        return {\n            name: 'sheets',\n            children: names.map((sheet, idx) => sheetFactory.getTemplate(sheet, idx)),\n        };\n    },\n};\n\nexport default sheetsFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nimport sheetsFactory from './sheets';\n\nconst workbookFactory: ExcelOOXMLTemplate = {\n    getTemplate(names: string[]) {\n        return {\n            name: 'workbook',\n            properties: {\n                prefixedAttributes: [\n                    {\n                        prefix: 'xmlns:',\n                        map: {\n                            r: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n                        },\n                    },\n                ],\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                },\n            },\n            children: [sheetsFactory.getTemplate(names)],\n        };\n    },\n};\n\nexport default workbookFactory;\n", "import type {\n    ExcelCell,\n    ExcelColumn,\n    ExcelFont,\n    ExcelHeaderFooterConfig,\n    ExcelHeaderFooterContent,\n    ExcelOOXMLTemplate,\n    ExcelRow,\n    ExcelSheetMargin,\n    ExcelSheetPageSetup,\n    ExcelWorksheet,\n    XmlElement,\n} from '@ag-grid-community/core';\nimport { _compose, _escapeString, _iterateObject } from '@ag-grid-community/core';\n\nimport type { ExcelDataTable, ExcelHeaderFooterPosition } from '../../assets/excelInterfaces';\nimport { getExcelColumnName } from '../../assets/excelUtils';\nimport type { ExcelGridSerializingParams } from '../../excelSerializingSession';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport columnFactory from './column';\nimport mergeCellFactory from './mergeCell';\nimport rowFactory from './row';\n\nconst getMergedCellsAndAddColumnGroups = (\n    rows: ExcelRow[],\n    cols: ExcelColumn[],\n    suppressColumnOutline: boolean\n): string[] => {\n    const mergedCells: string[] = [];\n    const cellsWithCollapsibleGroups: number[][] = [];\n\n    rows.forEach((currentRow, rowIdx) => {\n        const cells = currentRow.cells;\n        let merges = 0;\n        let lastCol: ExcelColumn;\n\n        cells.forEach((currentCell: ExcelCell, cellIdx: number) => {\n            const min = cellIdx + merges + 1;\n            const start = getExcelColumnName(min);\n            const outputRow = rowIdx + 1;\n\n            if (currentCell.mergeAcross) {\n                merges += currentCell.mergeAcross;\n                const end = getExcelColumnName(cellIdx + merges + 1);\n\n                mergedCells.push(`${start}${outputRow}:${end}${outputRow}`);\n            }\n\n            if (!cols[min - 1]) {\n                cols[min - 1] = {} as ExcelColumn;\n            }\n\n            const { collapsibleRanges } = currentCell;\n\n            if (collapsibleRanges) {\n                collapsibleRanges.forEach((range) => {\n                    cellsWithCollapsibleGroups.push([min + range[0], min + range[1]]);\n                });\n            }\n\n            lastCol = cols[min - 1];\n            lastCol.min = min;\n            lastCol.max = min;\n            currentCell.ref = `${start}${outputRow}`;\n        });\n    });\n\n    cellsWithCollapsibleGroups.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n        }\n        return b[1] - a[1];\n    });\n\n    const rangeMap = new Map<string, boolean>();\n    const outlineLevel = new Map<number, number>();\n\n    cellsWithCollapsibleGroups\n        .filter((currentRange) => {\n            const rangeString = currentRange.toString();\n            const inMap = rangeMap.get(rangeString);\n\n            if (inMap) {\n                return false;\n            }\n            rangeMap.set(rangeString, true);\n\n            return true;\n        })\n        .forEach((range) => {\n            const refCol = cols.find((col) => col.min == range[0] && col.max == range[1]);\n            const currentOutlineLevel = outlineLevel.get(range[0]);\n            cols.push({\n                min: range[0],\n                max: range[1],\n                outlineLevel: suppressColumnOutline ? undefined : currentOutlineLevel || 1,\n                width: (refCol || { width: 100 }).width,\n            });\n\n            outlineLevel.set(range[0], (currentOutlineLevel || 0) + 1);\n        });\n\n    return mergedCells;\n};\n\nconst getPageOrientation = (orientation?: 'Portrait' | 'Landscape'): 'portrait' | 'landscape' => {\n    if (!orientation || (orientation !== 'Portrait' && orientation !== 'Landscape')) {\n        return 'portrait';\n    }\n\n    return orientation.toLocaleLowerCase() as 'portrait' | 'landscape';\n};\n\nconst getPageSize = (pageSize?: string): number => {\n    if (pageSize == null) {\n        return 1;\n    }\n\n    const positions = [\n        'Letter',\n        'Letter Small',\n        'Tabloid',\n        'Ledger',\n        'Legal',\n        'Statement',\n        'Executive',\n        'A3',\n        'A4',\n        'A4 Small',\n        'A5',\n        'A6',\n        'B4',\n        'B5',\n        'Folio',\n        'Envelope',\n        'Envelope DL',\n        'Envelope C5',\n        'Envelope B5',\n        'Envelope C3',\n        'Envelope C4',\n        'Envelope C6',\n        'Envelope Monarch',\n        'Japanese Postcard',\n        'Japanese Double Postcard',\n    ];\n    const pos = positions.indexOf(pageSize);\n\n    return pos === -1 ? 1 : pos + 1;\n};\n\nconst addColumns = (columns: ExcelColumn[]) => {\n    return (params: ComposedWorksheetParams) => {\n        if (columns.length) {\n            params.children.push({\n                name: 'cols',\n                children: columns.map((column) => columnFactory.getTemplate(column)),\n            });\n        }\n        return params;\n    };\n};\n\nconst addSheetData = (rows: ExcelRow[], sheetNumber: number) => {\n    return (params: ComposedWorksheetParams) => {\n        if (rows.length) {\n            params.children.push({\n                name: 'sheetData',\n                children: rows.map((row, idx) => rowFactory.getTemplate(row, idx, sheetNumber)),\n            });\n        }\n        return params;\n    };\n};\n\nconst addMergeCells = (mergeCells: string[]) => {\n    return (params: ComposedWorksheetParams) => {\n        if (mergeCells.length) {\n            params.children.push({\n                name: 'mergeCells',\n                properties: {\n                    rawMap: {\n                        count: mergeCells.length,\n                    },\n                },\n                children: mergeCells.map((mergedCell) => mergeCellFactory.getTemplate(mergedCell)),\n            });\n        }\n        return params;\n    };\n};\n\nconst addPageMargins = (margins: ExcelSheetMargin) => {\n    return (params: ComposedWorksheetParams) => {\n        const { top = 0.75, right = 0.7, bottom = 0.75, left = 0.7, header = 0.3, footer = 0.3 } = margins;\n\n        params.children.push({\n            name: 'pageMargins',\n            properties: {\n                rawMap: { bottom, footer, header, left, right, top },\n            },\n        });\n\n        return params;\n    };\n};\n\nconst addPageSetup = (pageSetup?: ExcelSheetPageSetup) => {\n    return (params: ComposedWorksheetParams) => {\n        if (pageSetup) {\n            params.children.push({\n                name: 'pageSetup',\n                properties: {\n                    rawMap: {\n                        horizontalDpi: 0,\n                        verticalDpi: 0,\n                        orientation: getPageOrientation(pageSetup.orientation),\n                        paperSize: getPageSize(pageSetup.pageSize),\n                    },\n                },\n            });\n        }\n        return params;\n    };\n};\n\nconst replaceHeaderFooterTokens = (value: string): string => {\n    const map = {\n        '&[Page]': '&P',\n        '&[Pages]': '&N',\n        '&[Date]': '&D',\n        '&[Time]': '&T',\n        '&[Tab]': '&A',\n        '&[Path]': '&Z',\n        '&[File]': '&F',\n        '&[Picture]': '&G',\n    };\n\n    _iterateObject<string>(map, (key, val) => {\n        value = value.replace(key, val);\n    });\n\n    return value;\n};\n\nconst getHeaderPosition = (position?: string): 'L' | 'C' | 'R' => {\n    if (position === 'Center') {\n        return 'C';\n    }\n    if (position === 'Right') {\n        return 'R';\n    }\n\n    return 'L';\n};\n\nconst applyHeaderFontStyle = (headerString: string, font?: ExcelFont): string => {\n    if (!font) {\n        return headerString;\n    }\n\n    headerString += '&amp;&quot;';\n    headerString += font.fontName || 'Calibri';\n\n    if (font.bold !== font.italic) {\n        headerString += font.bold ? ',Bold' : ',Italic';\n    } else if (font.bold) {\n        headerString += ',Bold Italic';\n    } else {\n        headerString += ',Regular';\n    }\n    headerString += '&quot;';\n\n    if (font.size) {\n        headerString += `&amp;${font.size}`;\n    }\n    if (font.strikeThrough) {\n        headerString += '&amp;S';\n    }\n    if (font.underline) {\n        headerString += `&amp;${font.underline === 'Double' ? 'E' : 'U'}`;\n    }\n    if (font.color) {\n        headerString += `&amp;K${font.color.replace('#', '').toUpperCase()}`;\n    }\n\n    return headerString;\n};\n\nconst processHeaderFooterContent = (\n    content: ExcelHeaderFooterContent[],\n    location: 'H' | 'F',\n    rule: 'EVEN' | 'FIRST' | ''\n): string =>\n    content.reduce((prev, curr, idx) => {\n        const pos = getHeaderPosition(curr.position);\n        const output = applyHeaderFontStyle(`${prev}&amp;${pos}`, curr.font);\n        const PositionMap: ['Left', 'Center', 'Right'] = ['Left', 'Center', 'Right'];\n\n        if (!curr.position) {\n            curr.position = PositionMap[idx];\n        }\n\n        const { image } = curr;\n        if (curr.value === '&[Picture]' && image) {\n            const imagePosition: ExcelHeaderFooterPosition = `${pos}${location}${rule}`;\n            ExcelXlsxFactory.addHeaderFooterImageToMap(image, imagePosition);\n        }\n\n        return `${output}${_escapeString(replaceHeaderFooterTokens(curr.value))}`;\n    }, '');\n\nconst buildHeaderFooter = (headerFooterConfig: ExcelHeaderFooterConfig): XmlElement[] => {\n    const rules: ['all', 'first', 'even'] = ['all', 'first', 'even'];\n    const headersAndFooters = [] as XmlElement[];\n\n    rules.forEach((rule) => {\n        const headerFooter = headerFooterConfig[rule];\n        const namePrefix = rule === 'all' ? 'odd' : rule;\n\n        if (!headerFooter) {\n            return;\n        }\n\n        for (const [key, value] of Object.entries<ExcelHeaderFooterContent[]>(headerFooter)) {\n            const nameSuffix = `${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n            const location: 'H' | 'F' = key[0].toUpperCase() as 'H' | 'F';\n\n            if (value) {\n                const normalizedRule: 'FIRST' | 'EVEN' | '' =\n                    rule === 'all' ? '' : (rule.toUpperCase() as 'FIRST' | 'EVEN');\n                headersAndFooters.push({\n                    name: `${namePrefix}${nameSuffix}`,\n                    properties: {\n                        rawMap: { 'xml:space': 'preserve' },\n                    },\n                    textNode: processHeaderFooterContent(value, location, normalizedRule),\n                });\n            }\n        }\n    });\n\n    return headersAndFooters;\n};\n\nconst addHeaderFooter = (headerFooterConfig?: ExcelHeaderFooterConfig) => {\n    return (params: ComposedWorksheetParams) => {\n        if (!headerFooterConfig) {\n            return params;\n        }\n\n        const differentFirst = headerFooterConfig.first != null ? 1 : 0;\n        const differentOddEven = headerFooterConfig.even != null ? 1 : 0;\n\n        params.children.push({\n            name: 'headerFooter',\n            properties: {\n                rawMap: {\n                    differentFirst,\n                    differentOddEven,\n                },\n            },\n            children: buildHeaderFooter(headerFooterConfig),\n        });\n        return params;\n    };\n};\n\nconst addExcelTableRel = (excelTable?: ExcelDataTable) => {\n    return (params: ComposedWorksheetParams) => {\n        if (excelTable) {\n            params.children.push({\n                name: 'tableParts',\n                properties: {\n                    rawMap: {\n                        count: '1',\n                    },\n                },\n                children: [\n                    {\n                        name: 'tablePart',\n                        properties: {\n                            rawMap: {\n                                'r:id': `rId${++params.rIdCounter}`,\n                            },\n                        },\n                    },\n                ],\n            });\n        }\n\n        return params;\n    };\n};\n\nconst addDrawingRel = (currentSheet: number) => {\n    return (params: ComposedWorksheetParams) => {\n        const worksheetImages = ExcelXlsxFactory.worksheetImages.get(currentSheet);\n        if (worksheetImages?.length) {\n            params.children.push({\n                name: 'drawing',\n                properties: {\n                    rawMap: {\n                        'r:id': `rId${++params.rIdCounter}`,\n                    },\n                },\n            });\n        }\n\n        return params;\n    };\n};\n\nconst addVmlDrawingRel = (currentSheet: number) => {\n    return (params: ComposedWorksheetParams) => {\n        if (ExcelXlsxFactory.worksheetHeaderFooterImages.get(currentSheet)) {\n            params.children.push({\n                name: 'legacyDrawingHF',\n                properties: {\n                    rawMap: {\n                        'r:id': `rId${++params.rIdCounter}`,\n                    },\n                },\n            });\n        }\n\n        return params;\n    };\n};\n\nconst addSheetPr = () => {\n    return (params: { children: XmlElement[] }) => {\n        params.children.push({\n            name: 'sheetPr',\n            children: [\n                {\n                    name: 'outlinePr',\n                    properties: {\n                        rawMap: {\n                            summaryBelow: 0,\n                        },\n                    },\n                },\n            ],\n        });\n        return params;\n    };\n};\n\nconst addSheetFormatPr = (rows: ExcelRow[]) => {\n    return (params: ComposedWorksheetParams) => {\n        const maxOutline = rows.reduce((prev: number, row: ExcelRow) => {\n            if (row.outlineLevel && row.outlineLevel > prev) {\n                return row.outlineLevel;\n            }\n            return prev;\n        }, 0);\n\n        params.children.push({\n            name: 'sheetFormatPr',\n            properties: {\n                rawMap: {\n                    baseColWidth: 10,\n                    defaultRowHeight: 16,\n                    outlineLevelRow: maxOutline ? maxOutline : undefined,\n                },\n            },\n        });\n        return params;\n    };\n};\n\ntype ComposedWorksheetParams = {\n    children: XmlElement[];\n    rIdCounter: number;\n};\n\nconst worksheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(params: { worksheet: ExcelWorksheet; currentSheet: number; config: ExcelGridSerializingParams }) {\n        const { worksheet, currentSheet, config } = params;\n        const { margins = {}, pageSetup, headerFooterConfig, suppressColumnOutline } = config;\n\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const mergedCells =\n            columns && columns.length ? getMergedCellsAndAddColumnGroups(rows, columns, !!suppressColumnOutline) : [];\n\n        const { worksheetDataTables } = ExcelXlsxFactory;\n        const worksheetExcelTables = worksheetDataTables.get(currentSheet);\n\n        const createWorksheetChildren = _compose<ComposedWorksheetParams>(\n            addSheetPr(),\n            addSheetFormatPr(rows),\n            addColumns(columns),\n            addSheetData(rows, currentSheet + 1),\n            addMergeCells(mergedCells),\n            addPageMargins(margins),\n            addPageSetup(pageSetup),\n            addHeaderFooter(headerFooterConfig),\n            addDrawingRel(currentSheet),\n            addVmlDrawingRel(currentSheet),\n            addExcelTableRel(worksheetExcelTables)\n        );\n\n        const { children } = createWorksheetChildren({ children: [], rIdCounter: 0 });\n\n        return {\n            name: 'worksheet',\n            properties: {\n                prefixedAttributes: [\n                    {\n                        prefix: 'xmlns:',\n                        map: {\n                            r: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n                        },\n                    },\n                ],\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                },\n            },\n            children,\n        };\n    },\n};\n\nexport default worksheetFactory;\n", "import type { ExcelColumn, ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\n// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-column-widths\nconst getExcelCellWidth = (width: number): number => Math.ceil((width - 12) / 7 + 1);\n\nconst columnFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelColumn) {\n        const { min, max, outlineLevel, s, width, hidden, bestFit } = config;\n        let excelWidth = 1;\n        let customWidth = '0';\n\n        if (width! > 1) {\n            excelWidth = getExcelCellWidth(width!);\n            customWidth = '1';\n        }\n\n        return {\n            name: 'col',\n            properties: {\n                rawMap: {\n                    min: min,\n                    max: max,\n                    outlineLevel: outlineLevel != null ? outlineLevel : undefined,\n                    width: excelWidth,\n                    style: s,\n                    hidden: hidden ? '1' : '0',\n                    bestFit: bestFit ? '1' : '0',\n                    customWidth: customWidth,\n                },\n            },\n        };\n    },\n};\n\nexport default columnFactory;\n", "import type { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst mergeCellFactory: ExcelOOXMLTemplate = {\n    getTemplate(ref: string) {\n        return {\n            name: 'mergeCell',\n            properties: {\n                rawMap: {\n                    ref: ref,\n                },\n            },\n        };\n    },\n};\n\nexport default mergeCellFactory;\n", "import type { ExcelCell, ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { _escapeString } from '@ag-grid-community/core';\n\nimport { replaceInvisibleCharacters } from '../../assets/excelUtils';\nimport { getStyleId } from './styles/stylesheet';\n\nconst convertLegacyType = (type: string): string => {\n    const t = type.charAt(0).toLowerCase();\n\n    return t === 's' ? 'inlineStr' : t;\n};\n\nconst cellFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelCell, idx: number, currentSheet: number) {\n        const { ref, data, styleId } = config;\n        const { type, value } = data || { type: 'empty', value: null };\n        let convertedType: string = type;\n\n        if (type === 'f') {\n            convertedType = 'str';\n        } else if (type.charAt(0) === type.charAt(0).toUpperCase()) {\n            convertedType = convertLegacyType(type);\n        }\n\n        const obj = {\n            name: 'c',\n            properties: {\n                rawMap: {\n                    r: ref,\n                    t: convertedType === 'empty' ? undefined : convertedType,\n                    s: styleId ? getStyleId(styleId as string, currentSheet) : undefined,\n                },\n            },\n        };\n\n        if (convertedType === 'empty') {\n            return obj;\n        }\n\n        let children;\n\n        if (convertedType === 'str' && type === 'f') {\n            children = [\n                {\n                    name: 'f',\n                    textNode: _escapeString(replaceInvisibleCharacters(value), false),\n                },\n            ];\n        } else if (convertedType === 'inlineStr') {\n            children = [\n                {\n                    name: 'is',\n                    children: [\n                        {\n                            name: 't',\n                            textNode: _escapeString(replaceInvisibleCharacters(value), false),\n                        },\n                    ],\n                },\n            ];\n        } else {\n            children = [\n                {\n                    name: 'v',\n                    textNode: value,\n                },\n            ];\n        }\n\n        return Object.assign({}, obj, { children });\n    },\n};\n\nexport default cellFactory;\n", "import type { ExcelCell, ExcelOOXMLTemplate, ExcelRow } from '@ag-grid-community/core';\n\nimport { getExcelColumnName } from '../../assets/excelUtils';\nimport cellFactory from './cell';\n\nconst addEmptyCells = (cells: ExcelCell[], rowIdx: number): void => {\n    const mergeMap: { pos: number; excelPos: number }[] = [];\n    let posCounter = 0;\n    for (let i = 0; i < cells.length; i++) {\n        const cell = cells[i];\n        if (cell.mergeAcross) {\n            mergeMap.push({\n                pos: i,\n                excelPos: posCounter,\n            });\n            posCounter += cell.mergeAcross;\n        }\n        posCounter++;\n    }\n\n    if (mergeMap.length) {\n        for (let i = mergeMap.length - 1; i >= 0; i--) {\n            const mergedCells: ExcelCell[] = [];\n            const cell = cells[mergeMap[i].pos];\n            for (let j = 1; j <= cell.mergeAcross!; j++) {\n                mergedCells.push({\n                    ref: `${getExcelColumnName(mergeMap[i].excelPos + 1 + j)}${rowIdx + 1}`,\n                    styleId: cell.styleId,\n                    data: { type: 'empty', value: null },\n                });\n            }\n            if (mergedCells.length) {\n                cells.splice(mergeMap[i].pos + 1, 0, ...mergedCells);\n            }\n        }\n    }\n};\n\nconst shouldDisplayCell = (cell: ExcelCell) => cell.data?.value !== '' || cell.styleId !== undefined;\n\nconst rowFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelRow, idx: number, currentSheet: number) {\n        const { collapsed, hidden, height, outlineLevel, cells = [] } = config;\n        addEmptyCells(cells, idx);\n        const children = cells\n            .filter(shouldDisplayCell)\n            .map((cell, idx) => cellFactory.getTemplate(cell, idx, currentSheet));\n\n        return {\n            name: 'row',\n            properties: {\n                rawMap: {\n                    r: idx + 1,\n                    collapsed: collapsed ? '1' : '0',\n                    hidden: hidden ? '1' : '0',\n                    ht: height,\n                    customHeight: height != null ? '1' : '0',\n                    spans: '1:1',\n                    outlineLevel: outlineLevel || undefined,\n                },\n            },\n            children,\n        };\n    },\n};\n\nexport default rowFactory;\n", "import type { BeanCollection, ExcelExportMultipleSheetParams, ExcelExportParams } from '@ag-grid-community/core';\nimport { ExcelFactoryMode, _warnOnce } from '@ag-grid-community/core';\n\nfunction assertNotExcelMultiSheet(beans: BeanCollection): boolean {\n    if (beans.excelCreator?.getFactoryMode() === ExcelFactoryMode.MULTI_SHEET) {\n        _warnOnce(\n            \"The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'\"\n        );\n        return false;\n    }\n    return true;\n}\n\nexport function getDataAsExcel(beans: BeanCollection, params?: ExcelExportParams): string | Blob | undefined {\n    if (assertNotExcelMultiSheet(beans)) {\n        return beans.excelCreator?.getDataAsExcel(params);\n    }\n    return undefined;\n}\n\nexport function exportDataAsExcel(beans: BeanCollection, params?: ExcelExportParams): void {\n    if (assertNotExcelMultiSheet(beans)) {\n        beans.excelCreator?.exportDataAsExcel(params);\n    }\n}\nexport function getSheetDataForExcel(beans: BeanCollection, params?: ExcelExportParams): string | undefined {\n    beans.excelCreator?.setFactoryMode(ExcelFactoryMode.MULTI_SHEET);\n\n    return beans.excelCreator?.getSheetDataForExcel(params);\n}\n\nexport function getMultipleSheetsAsExcel(\n    beans: BeanCollection,\n    params: ExcelExportMultipleSheetParams\n): Blob | undefined {\n    return beans.excelCreator?.getMultipleSheetsAsExcel(params);\n}\n\nexport function exportMultipleSheetsAsExcel(beans: BeanCollection, params: ExcelExportMultipleSheetParams): void {\n    beans.excelCreator?.exportMultipleSheetsAsExcel(params);\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\nimport { SideBarModule } from '@ag-grid-enterprise/side-bar';\n\nimport { FiltersToolPanel } from './filterToolPanel/filtersToolPanel';\nimport { VERSION } from './version';\n\nexport const FiltersToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.FiltersToolPanelModule,\n    beans: [],\n    userComponents: [{ name: 'agFiltersToolPanel', classImp: FiltersToolPanel }],\n    dependantModules: [SideBarModule, EnterpriseCoreModule, _ColumnFilterModule],\n};\n", "import type {\n    ColDef,\n    ColGroupDef,\n    FiltersToolPanelState,\n    IFiltersToolPanel,\n    IToolPanelComp,\n    IToolPanelFiltersCompParams,\n    IToolPanelParams,\n} from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { AgFiltersToolPanelHeader } from './agFiltersToolPanelHeader';\nimport { AgFiltersToolPanelHeaderSelector } from './agFiltersToolPanelHeader';\nimport type { AgFiltersToolPanelList } from './agFiltersToolPanelList';\nimport { AgFiltersToolPanelListSelector } from './agFiltersToolPanelList';\n\nexport interface ToolPanelFiltersCompParams<TData = any, TContext = any>\n    extends IToolPanelParams<TData, TContext, FiltersToolPanelState>,\n        IToolPanelFiltersCompParams {}\n\nexport class FiltersToolPanel extends Component implements IFiltersToolPanel, IToolPanelComp {\n    private readonly filtersToolPanelHeaderPanel: AgFiltersToolPanelHeader = RefPlaceholder;\n    private readonly filtersToolPanelListPanel: AgFiltersToolPanelList = RefPlaceholder;\n\n    private initialised = false;\n    private params: ToolPanelFiltersCompParams;\n    private listenerDestroyFuncs: (() => void)[] = [];\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-filter-toolpanel\">\n            <ag-filters-tool-panel-header data-ref=\"filtersToolPanelHeaderPanel\"></ag-filters-tool-panel-header>\n            <ag-filters-tool-panel-list data-ref=\"filtersToolPanelListPanel\"></ag-filters-tool-panel-list>\n         </div>`,\n            [AgFiltersToolPanelHeaderSelector, AgFiltersToolPanelListSelector]\n        );\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        // if initialised is true, means this is a refresh\n        if (this.initialised) {\n            this.listenerDestroyFuncs.forEach((func) => func());\n            this.listenerDestroyFuncs = [];\n        }\n\n        this.initialised = true;\n\n        const defaultParams: Partial<ToolPanelFiltersCompParams> = this.gos.addGridCommonParams({\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        this.params = {\n            ...defaultParams,\n            ...params,\n        };\n\n        this.filtersToolPanelHeaderPanel.init(this.params);\n        this.filtersToolPanelListPanel.init(this.params);\n\n        const hideExpand = this.params.suppressExpandAll;\n        const hideSearch = this.params.suppressFilterSearch;\n\n        if (hideExpand && hideSearch) {\n            this.filtersToolPanelHeaderPanel.setDisplayed(false);\n        }\n\n        // this is necessary to prevent a memory leak while refreshing the tool panel\n        this.listenerDestroyFuncs.push(\n            ...this.addManagedListeners(this.filtersToolPanelHeaderPanel, {\n                expandAll: this.onExpandAll.bind(this),\n                collapseAll: this.onCollapseAll.bind(this),\n                searchChanged: this.onSearchChanged.bind(this),\n            }),\n            ...this.addManagedListeners(this.filtersToolPanelListPanel, {\n                filterExpanded: this.onFilterExpanded.bind(this),\n                groupExpanded: this.onGroupExpanded.bind(this),\n            })\n        );\n    }\n\n    // lazy initialise the panel\n    public override setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public onExpandAll(): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(true);\n    }\n\n    public onCollapseAll(): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(false);\n    }\n\n    private onSearchChanged(event: any): void {\n        this.filtersToolPanelListPanel.performFilterSearch(event.searchText);\n    }\n\n    public setFilterLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.filtersToolPanelListPanel.setFiltersLayout(colDefs);\n    }\n\n    private onFilterExpanded(): void {\n        this.params.onStateUpdated();\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.filtersToolPanelHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    public expandFilterGroups(groupIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(true, groupIds);\n    }\n\n    public collapseFilterGroups(groupIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilterGroups(false, groupIds);\n    }\n\n    public expandFilters(colIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilters(true, colIds);\n    }\n\n    public collapseFilters(colIds?: string[]): void {\n        this.filtersToolPanelListPanel.expandFilters(false, colIds);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.filtersToolPanelListPanel.syncFilterLayout();\n    }\n\n    public refresh(params: ToolPanelFiltersCompParams): boolean {\n        this.init(params);\n        return true;\n    }\n\n    public getState(): FiltersToolPanelState {\n        return this.filtersToolPanelListPanel.getExpandedFiltersAndGroups();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    AgEvent,\n    AgInputTextField,\n    BeanCollection,\n    ColumnModel,\n    ComponentSelector,\n} from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    Component,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _debounce,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nimport type { ToolPanelFiltersCompParams } from './filtersToolPanel';\n\nexport enum EXPAND_STATE {\n    EXPANDED,\n    COLLAPSED,\n    INDETERMINATE,\n}\nexport type AgFiltersToolPanelHeaderEvent = 'collapseAll' | 'expandAll' | 'searchChanged';\nexport class AgFiltersToolPanelHeader extends Component<AgFiltersToolPanelHeaderEvent> {\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n    }\n\n    private readonly eExpand: Element = RefPlaceholder;\n    private readonly eFilterTextField: AgInputTextField = RefPlaceholder;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private onSearchTextChangedDebounced: () => void;\n\n    private currentExpandState: EXPAND_STATE;\n\n    private params: ToolPanelFiltersCompParams;\n\n    public postConstruct(): void {\n        this.setTemplate(\n            /* html */\n            `<div class=\"ag-filter-toolpanel-search\" role=\"presentation\">\n                <div data-ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                <ag-input-text-field data-ref=\"eFilterTextField\" class=\"ag-filter-toolpanel-search-input\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField\n            .setAutoComplete(false)\n            .setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'))\n            .onValueChange(this.onSearchTextChanged.bind(this));\n\n        this.createExpandIcons();\n        this.setExpandState(EXPAND_STATE.EXPANDED);\n        this.addManagedElementListeners(this.eExpand, { click: this.onExpandClicked.bind(this) });\n        this.addManagedEventListeners({ newColumnsLoaded: this.showOrHideOptions.bind(this) });\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        this.params = params;\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild((this.eExpandChecked = _createIconNoSpan('columnSelectOpen', this.gos)!));\n        this.eExpand.appendChild((this.eExpandUnchecked = _createIconNoSpan('columnSelectClosed', this.gos)!));\n        this.eExpand.appendChild(\n            (this.eExpandIndeterminate = _createIconNoSpan('columnSelectIndeterminate', this.gos)!)\n        );\n    }\n\n    // we only show expand / collapse if we are showing filters\n    private showOrHideOptions(): void {\n        const showFilterSearch = !this.params.suppressFilterSearch;\n        const showExpand = !this.params.suppressExpandAll;\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        const isFilterGroupPresent = (col: AgColumn) => col.getOriginalParent() && col.isFilterAllowed();\n        const filterGroupsPresent = this.columnModel.getCols().some(isFilterGroupPresent);\n\n        _setDisplayed(this.eFilterTextField.getGui(), showFilterSearch);\n        _setDisplayed(this.eExpand, showExpand && filterGroupsPresent);\n    }\n\n    private onSearchTextChanged(): void {\n        if (!this.onSearchTextChangedDebounced) {\n            this.onSearchTextChangedDebounced = _debounce(() => {\n                this.dispatchLocalEvent({ type: 'searchChanged', searchText: this.eFilterTextField.getValue() });\n            }, 300);\n        }\n\n        this.onSearchTextChangedDebounced();\n    }\n\n    private onExpandClicked(): void {\n        const event: AgEvent<AgFiltersToolPanelHeaderEvent> =\n            this.currentExpandState === EXPAND_STATE.EXPANDED ? { type: 'collapseAll' } : { type: 'expandAll' };\n        this.dispatchLocalEvent(event);\n    }\n\n    public setExpandState(state: EXPAND_STATE): void {\n        this.currentExpandState = state;\n\n        _setDisplayed(this.eExpandChecked, this.currentExpandState === EXPAND_STATE.EXPANDED);\n        _setDisplayed(this.eExpandUnchecked, this.currentExpandState === EXPAND_STATE.COLLAPSED);\n        _setDisplayed(this.eExpandIndeterminate, this.currentExpandState === EXPAND_STATE.INDETERMINATE);\n    }\n}\n\nexport const AgFiltersToolPanelHeaderSelector: ComponentSelector = {\n    selector: 'AG-FILTERS-TOOL-PANEL-HEADER',\n    component: AgFiltersToolPanelHeader,\n};\n", "import type {\n    AbstractColDef,\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnModel,\n    ComponentSelector,\n    FiltersToolPanelState,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    _clearElement,\n    _exists,\n    _flatten,\n    _includes,\n    _mergeDeep,\n    _setAriaLabel,\n    _warnOnce,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\nimport type { ToolPanelColDefService } from '@ag-grid-enterprise/side-bar';\n\nimport { EXPAND_STATE } from './agFiltersToolPanelHeader';\nimport type { ToolPanelFiltersCompParams } from './filtersToolPanel';\nimport { ToolPanelFilterComp } from './toolPanelFilterComp';\nimport type { ToolPanelFilterItem } from './toolPanelFilterGroupComp';\nimport { ToolPanelFilterGroupComp } from './toolPanelFilterGroupComp';\n\nexport type AgFiltersToolPanelListEvent = 'filterExpanded' | 'groupExpanded';\nexport class AgFiltersToolPanelList extends Component<AgFiltersToolPanelListEvent> {\n    private toolPanelColDefService: ToolPanelColDefService;\n    private columnModel: ColumnModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.toolPanelColDefService = beans.toolPanelColDefService as ToolPanelColDefService;\n        this.columnModel = beans.columnModel;\n    }\n\n    private initialised = false;\n    private hasLoadedInitialState = false;\n    private isInitialState = false;\n\n    private params: ToolPanelFiltersCompParams;\n    private filterGroupComps: ToolPanelFilterGroupComp[] = [];\n\n    // null is used to check if we should search filters when new cols are loaded\n    private searchFilterText: string | null;\n\n    // If a column drag is happening, we suppress handling the event until it has completed\n    private suppressOnColumnsChanged: boolean = false;\n    private onColumnsChangedPending: boolean = false;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-filter-list-panel\"></div>`);\n    }\n\n    public init(params: ToolPanelFiltersCompParams): void {\n        this.initialised = true;\n\n        const defaultParams: Partial<ToolPanelFiltersCompParams> = this.gos.addGridCommonParams({\n            suppressExpandAll: false,\n            suppressFilterSearch: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        _mergeDeep(defaultParams, params);\n        this.params = defaultParams as ToolPanelFiltersCompParams;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedEventListeners({ columnMoved: () => this.onColumnsChanged() });\n        }\n\n        this.addManagedEventListeners({\n            newColumnsLoaded: () => this.onColumnsChanged(),\n            toolPanelVisibleChanged: (event) => {\n                // when re-entering the filters tool panel we need to refresh the virtual lists in the set filters in case\n                // filters have been changed elsewhere, i.e. via an api call.\n                if (event.key === 'filters') {\n                    this.refreshFilters(event.visible);\n                }\n            },\n            dragStarted: () => {\n                this.suppressOnColumnsChanged = true;\n            },\n            dragStopped: () => {\n                this.suppressOnColumnsChanged = false;\n                if (this.onColumnsChangedPending) {\n                    this.onColumnsChangedPending = false;\n                    this.onColumnsChanged();\n                }\n            },\n        });\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n    }\n\n    public onColumnsChanged(): void {\n        if (this.suppressOnColumnsChanged) {\n            this.onColumnsChangedPending = true;\n            return;\n        }\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n        shouldSyncColumnLayoutWithGrid ? this.syncFilterLayout() : this.buildTreeFromProvidedColumnDefs();\n        this.refreshAriaLabel();\n    }\n\n    public syncFilterLayout(): void {\n        this.toolPanelColDefService.syncLayoutWithGrid(this.setFiltersLayout.bind(this));\n        this.refreshAriaLabel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        const columnTree = this.columnModel.getColDefColTree();\n        this.recreateFilters(columnTree);\n    }\n\n    public setFiltersLayout(colDefs: AbstractColDef[]): void {\n        const columnTree = this.toolPanelColDefService.createColumnTree(colDefs);\n        this.recreateFilters(columnTree);\n    }\n\n    private recreateFilters(columnTree: (AgColumn | AgProvidedColumnGroup)[]): void {\n        // Underlying filter comp/element won't get recreated if the column still exists (the element just gets detached/re-attached).\n        // We can therefore restore focus if an element in the filter tool panel was focused.\n        const activeElement = this.gos.getActiveDomElement() as HTMLElement;\n\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        // Want to restore the expansion state where possible.\n        const expansionState = this.getExpansionState();\n\n        this.destroyFilters();\n\n        this.filterGroupComps = this.recursivelyAddComps(columnTree, 0, expansionState) as ToolPanelFilterGroupComp[];\n\n        const len = this.filterGroupComps.length;\n\n        if (len) {\n            // skip the destroy function because this will be managed\n            // by the `destroyFilters` function\n            this.filterGroupComps.forEach((comp) => this.appendChild(comp));\n            this.setFirstAndLastVisible(0, len - 1);\n        }\n\n        // perform search if searchFilterText exists\n        if (_exists(this.searchFilterText)) {\n            this.searchFilters(this.searchFilterText);\n        }\n\n        // notify header of expand\n        this.fireExpandedEvent();\n\n        // We only care about restoring focus if the originally focused element was in the filter tool panel.\n        if (this.getGui().contains(activeElement)) {\n            activeElement.focus();\n        }\n\n        this.isInitialState = false;\n        this.refreshAriaLabel();\n    }\n\n    private recursivelyAddComps(\n        tree: (AgColumn | AgProvidedColumnGroup)[],\n        depth: number,\n        expansionState: Map<string, boolean>\n    ): (ToolPanelFilterGroupComp | ToolPanelFilterComp)[] {\n        return _flatten(\n            tree.map((child) => {\n                if (isProvidedColumnGroup(child)) {\n                    return _flatten(this.recursivelyAddFilterGroupComps(child, depth, expansionState)!);\n                }\n\n                const column = child;\n\n                if (!this.shouldDisplayFilter(column)) {\n                    return [];\n                }\n\n                const hideFilterCompHeader = depth === 0;\n                const filterComp = new ToolPanelFilterComp(hideFilterCompHeader, () => this.onFilterExpanded());\n                this.createBean(filterComp);\n\n                filterComp.setColumn(column);\n                if (expansionState.get(column.getId())) {\n                    // Default state on creation and desired state are both collapsed. Expand if expanded before.\n                    filterComp.expand();\n                }\n\n                if (depth > 0) {\n                    return filterComp;\n                }\n\n                const filterGroupComp = this.createBean(\n                    new ToolPanelFilterGroupComp(column, [filterComp], this.onGroupExpanded.bind(this), depth, true)\n                );\n                filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n                if (!expansionState.get(filterGroupComp.getFilterGroupId())) {\n                    // Default state on creation is expanded. Desired initial state is collapsed. Always collapse unless expanded before.\n                    filterGroupComp.collapse();\n                }\n                return filterGroupComp;\n            })\n        );\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterPanelList', 'Filter List');\n        const localeFilters = translate('filters', 'Filters');\n\n        const eGui = this.getGui();\n        const groupSelector = '.ag-filter-toolpanel-group-wrapper';\n        const itemSelector = '.ag-filter-toolpanel-group-item';\n        const hiddenSelector = '.ag-hidden';\n        const visibleItems = eGui.querySelectorAll(`${itemSelector}:not(${groupSelector}, ${hiddenSelector})`);\n\n        const totalVisibleItems = visibleItems.length;\n\n        _setAriaLabel(this.getAriaElement(), `${filterListName} ${totalVisibleItems} ${localeFilters}`);\n    }\n\n    private recursivelyAddFilterGroupComps(\n        columnGroup: AgProvidedColumnGroup,\n        depth: number,\n        expansionState: Map<string, boolean>\n    ): (ToolPanelFilterGroupComp | ToolPanelFilterComp)[] | undefined {\n        if (!this.filtersExistInChildren(columnGroup.getChildren())) {\n            return;\n        }\n\n        const colGroupDef = columnGroup.getColGroupDef();\n        if (colGroupDef && colGroupDef.suppressFiltersToolPanel) {\n            return [];\n        }\n\n        const newDepth = columnGroup.isPadding() ? depth : depth + 1;\n        const childFilterComps = _flatten(\n            this.recursivelyAddComps(columnGroup.getChildren(), newDepth, expansionState)\n        );\n\n        if (columnGroup.isPadding()) {\n            return childFilterComps;\n        }\n\n        const filterGroupComp = new ToolPanelFilterGroupComp(\n            columnGroup,\n            childFilterComps,\n            this.onGroupExpanded.bind(this),\n            depth,\n            false\n        );\n\n        this.createBean(filterGroupComp);\n        filterGroupComp.addCssClassToTitleBar('ag-filter-toolpanel-header');\n        const expansionStateValue = expansionState.get(filterGroupComp.getFilterGroupId());\n        if ((this.isInitialState && !expansionStateValue) || expansionStateValue === false) {\n            // Default state on creation is expanded. Desired initial state is expanded. Only collapse if collapsed before or using initial state.\n            filterGroupComp.collapse();\n        }\n        return [filterGroupComp];\n    }\n\n    private filtersExistInChildren(tree: (AgColumn | AgProvidedColumnGroup)[]): boolean {\n        return tree.some((child) => {\n            if (isProvidedColumnGroup(child)) {\n                return this.filtersExistInChildren(child.getChildren());\n            }\n\n            return this.shouldDisplayFilter(child);\n        });\n    }\n\n    private shouldDisplayFilter(column: AgColumn) {\n        const suppressFiltersToolPanel = column.getColDef() && column.getColDef().suppressFiltersToolPanel;\n        return column.isFilterAllowed() && !suppressFiltersToolPanel;\n    }\n\n    private getExpansionState(): Map<string, boolean> {\n        const expansionState: Map<string, boolean> = new Map();\n\n        if (this.isInitialState) {\n            const { expandedColIds, expandedGroupIds } = this.params.initialState as FiltersToolPanelState;\n            expandedColIds.forEach((id) => expansionState.set(id, true));\n            expandedGroupIds.forEach((id) => expansionState.set(id, true));\n            return expansionState;\n        }\n\n        const recursiveGetExpansionState = (filterGroupComp: ToolPanelFilterGroupComp) => {\n            expansionState.set(filterGroupComp.getFilterGroupId(), filterGroupComp.isExpanded());\n            filterGroupComp.getChildren().forEach((child) => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    recursiveGetExpansionState(child);\n                } else {\n                    expansionState.set(child.getColumn().getId(), child.isExpanded());\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(recursiveGetExpansionState);\n\n        return expansionState;\n    }\n\n    // we don't support refreshing, but must implement because it's on the tool panel interface\n    public refresh(): void {}\n\n    // lazy initialise the panel\n    public override setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public expandFilterGroups(expand: boolean, groupIds?: string[]): void {\n        const updatedGroupIds: string[] = [];\n\n        const updateGroupExpandState = (filterGroup: ToolPanelFilterGroupComp) => {\n            const groupId = filterGroup.getFilterGroupId();\n            const shouldExpandOrCollapse = !groupIds || _includes(groupIds, groupId);\n            if (shouldExpandOrCollapse) {\n                // don't expand 'column groups', i.e. top level columns wrapped in a group\n                if (expand && filterGroup.isColumnGroup()) {\n                    filterGroup.expand();\n                } else {\n                    filterGroup.collapse();\n                }\n                updatedGroupIds.push(groupId);\n            }\n\n            // recursively look for more groups to expand / collapse\n            filterGroup.getChildren().forEach((child) => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateGroupExpandState(child);\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(updateGroupExpandState);\n\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n\n        if (groupIds) {\n            const unrecognisedGroupIds = groupIds.filter((groupId) => updatedGroupIds.indexOf(groupId) < 0);\n            if (unrecognisedGroupIds.length > 0) {\n                _warnOnce('unable to find groups for these supplied groupIds:', unrecognisedGroupIds);\n            }\n        }\n    }\n\n    public expandFilters(expand: boolean, colIds?: string[]): void {\n        const updatedColIds: string[] = [];\n\n        const updateGroupExpandState = (filterComp: ToolPanelFilterGroupComp | ToolPanelFilterComp): boolean => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                let anyChildrenChanged = false;\n                filterComp.getChildren().forEach((child) => {\n                    const childUpdated = updateGroupExpandState(child);\n                    if (childUpdated) {\n                        if (expand) {\n                            filterComp.expand();\n                            anyChildrenChanged = true;\n                        } else if (!filterComp.isColumnGroup()) {\n                            // we only collapse columns wrapped in groups\n                            filterComp.collapse();\n                        }\n                    }\n                });\n                return anyChildrenChanged;\n            }\n\n            const colId = filterComp.getColumn().getColId();\n            const updateFilterExpandState = !colIds || _includes(colIds, colId);\n\n            if (updateFilterExpandState) {\n                expand ? filterComp.expand() : filterComp.collapse();\n                updatedColIds.push(colId);\n            }\n\n            return updateFilterExpandState;\n        };\n\n        this.filterGroupComps.forEach(updateGroupExpandState);\n\n        // update header expand / collapse icon\n        this.onGroupExpanded();\n\n        if (colIds) {\n            const unrecognisedColIds = colIds.filter((colId) => updatedColIds.indexOf(colId) < 0);\n            if (unrecognisedColIds.length > 0) {\n                _warnOnce('unable to find columns for these supplied colIds:' + unrecognisedColIds);\n            }\n        }\n    }\n\n    private onGroupExpanded(): void {\n        this.fireExpandedEvent();\n    }\n\n    private onFilterExpanded(): void {\n        this.dispatchLocalEvent({ type: 'filterExpanded' });\n    }\n\n    private fireExpandedEvent(): void {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        const updateExpandCounts = (filterGroup: ToolPanelFilterGroupComp) => {\n            if (!filterGroup.isColumnGroup()) {\n                return;\n            }\n\n            filterGroup.isExpanded() ? expandedCount++ : notExpandedCount++;\n\n            filterGroup.getChildren().forEach((child) => {\n                if (child instanceof ToolPanelFilterGroupComp) {\n                    updateExpandCounts(child);\n                }\n            });\n        };\n\n        this.filterGroupComps.forEach(updateExpandCounts);\n\n        let state: EXPAND_STATE;\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            state = EXPAND_STATE.INDETERMINATE;\n        } else if (notExpandedCount > 0) {\n            state = EXPAND_STATE.COLLAPSED;\n        } else {\n            state = EXPAND_STATE.EXPANDED;\n        }\n\n        this.dispatchLocalEvent({ type: 'groupExpanded', state: state });\n    }\n\n    public performFilterSearch(searchText: string) {\n        this.searchFilterText = _exists(searchText) ? searchText.toLowerCase() : null;\n        this.searchFilters(this.searchFilterText);\n    }\n\n    private searchFilters(searchFilter: string | null) {\n        const passesFilter = (groupName: string) => {\n            return !_exists(searchFilter) || groupName.toLowerCase().indexOf(searchFilter) !== -1;\n        };\n\n        const recursivelySearch = (filterItem: ToolPanelFilterItem, parentPasses: boolean): boolean => {\n            if (!(filterItem instanceof ToolPanelFilterGroupComp)) {\n                return passesFilter(filterItem.getColumnFilterName() || '');\n            }\n\n            const children = filterItem.getChildren();\n            const groupNamePasses = passesFilter(filterItem.getFilterGroupName());\n\n            // if group or parent already passed - ensure this group and all children are visible\n            const alreadyPassed = parentPasses || groupNamePasses;\n            if (alreadyPassed) {\n                // ensure group visible\n                filterItem.hideGroup(false);\n\n                // ensure all children are visible\n                for (let i = 0; i < children.length; i++) {\n                    recursivelySearch(children[i], alreadyPassed);\n                    filterItem.hideGroupItem(false, i);\n                }\n                return true;\n            }\n\n            // hide group item filters\n            let anyChildPasses = false;\n            children.forEach((child: ToolPanelFilterItem, index: number) => {\n                const childPasses = recursivelySearch(child, parentPasses);\n                filterItem.hideGroupItem(!childPasses, index);\n                if (childPasses) {\n                    anyChildPasses = true;\n                }\n            });\n\n            // hide group if no children pass\n            filterItem.hideGroup(!anyChildPasses);\n\n            return anyChildPasses;\n        };\n\n        let firstVisible: number | undefined;\n        let lastVisible: number | undefined;\n\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            recursivelySearch(filterGroup, false);\n\n            if (firstVisible === undefined) {\n                if (!filterGroup.containsCssClass('ag-hidden')) {\n                    firstVisible = idx;\n                    lastVisible = idx;\n                }\n            } else if (!filterGroup.containsCssClass('ag-hidden') && lastVisible !== idx) {\n                lastVisible = idx;\n            }\n        });\n\n        this.setFirstAndLastVisible(firstVisible, lastVisible);\n        this.refreshAriaLabel();\n    }\n\n    private setFirstAndLastVisible(firstIdx?: number, lastIdx?: number) {\n        this.filterGroupComps.forEach((filterGroup, idx) => {\n            filterGroup.removeCssClass('ag-first-group-visible');\n            filterGroup.removeCssClass('ag-last-group-visible');\n\n            if (idx === firstIdx) {\n                filterGroup.addCssClass('ag-first-group-visible');\n            }\n            if (idx === lastIdx) {\n                filterGroup.addCssClass('ag-last-group-visible');\n            }\n        });\n    }\n\n    private refreshFilters(isDisplayed: boolean) {\n        this.filterGroupComps.forEach((filterGroupComp) => filterGroupComp.refreshFilters(isDisplayed));\n    }\n\n    public getExpandedFiltersAndGroups(): { expandedGroupIds: string[]; expandedColIds: string[] } {\n        const expandedGroupIds: string[] = [];\n        const expandedColIds: Set<string> = new Set();\n\n        const getExpandedFiltersAndGroups = (filterComp: ToolPanelFilterGroupComp | ToolPanelFilterComp) => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.getChildren().forEach((child) => getExpandedFiltersAndGroups(child));\n                const groupId = filterComp.getFilterGroupId();\n                if (filterComp.isExpanded() && !expandedColIds.has(groupId)) {\n                    expandedGroupIds.push(groupId);\n                }\n            } else {\n                if (filterComp.isExpanded()) {\n                    expandedColIds.add(filterComp.getColumn().getColId());\n                }\n            }\n        };\n\n        this.filterGroupComps.forEach(getExpandedFiltersAndGroups);\n\n        return { expandedGroupIds, expandedColIds: Array.from(expandedColIds) };\n    }\n\n    private destroyFilters() {\n        this.filterGroupComps = this.destroyBeans(this.filterGroupComps);\n        _clearElement(this.getGui());\n    }\n\n    public override destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\n\nexport const AgFiltersToolPanelListSelector: ComponentSelector = {\n    selector: 'AG-FILTERS-TOOL-PANEL-LIST',\n    component: AgFiltersToolPanelList,\n};\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnNameService,\n    FilterManager,\n    FilterOpenedEvent,\n    IFilterComp,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    FilterWrapperComp,\n    KeyCode,\n    RefPlaceholder,\n    _clearElement,\n    _createIconNoSpan,\n    _loadTemplate,\n    _setAriaExpanded,\n    _setDisplayed,\n} from '@ag-grid-community/core';\n\nexport type ToolPanelFilterCompEvent = 'filterChanged';\nexport class ToolPanelFilterComp extends Component<ToolPanelFilterCompEvent> {\n    private filterManager?: FilterManager;\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.filterManager = beans.filterManager;\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private readonly eFilterToolPanelHeader: HTMLElement = RefPlaceholder;\n    private readonly eFilterName: HTMLElement = RefPlaceholder;\n    private readonly agFilterToolPanelBody: HTMLElement = RefPlaceholder;\n    private readonly eFilterIcon: Element = RefPlaceholder;\n    private readonly eExpand: Element = RefPlaceholder;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private hideHeader: boolean;\n    private column: AgColumn;\n    private expanded: boolean = false;\n    private underlyingFilter: IFilterComp | null;\n    private filterWrapperComp?: FilterWrapperComp;\n\n    constructor(\n        hideHeader: boolean,\n        private readonly expandedCallback: () => void\n    ) {\n        super(/* html */ `\n            <div class=\"ag-filter-toolpanel-instance\">\n                <div class=\"ag-filter-toolpanel-header ag-filter-toolpanel-instance-header\" data-ref=\"eFilterToolPanelHeader\" role=\"button\" aria-expanded=\"false\">\n                    <div data-ref=\"eExpand\" class=\"ag-filter-toolpanel-expand\"></div>\n                    <span data-ref=\"eFilterName\" class=\"ag-header-cell-text\"></span>\n                    <span data-ref=\"eFilterIcon\" class=\"ag-header-icon ag-filter-icon ag-filter-toolpanel-instance-header-icon\" aria-hidden=\"true\"></span>\n                </div>\n                <div class=\"ag-filter-toolpanel-instance-body ag-filter\" data-ref=\"agFilterToolPanelBody\"></div>\n            </div>`);\n        this.hideHeader = hideHeader;\n    }\n\n    public postConstruct() {\n        this.eExpandChecked = _createIconNoSpan('columnSelectOpen', this.gos)!;\n        this.eExpandUnchecked = _createIconNoSpan('columnSelectClosed', this.gos)!;\n        this.eExpand.appendChild(this.eExpandChecked);\n        this.eExpand.appendChild(this.eExpandUnchecked);\n    }\n\n    public setColumn(column: AgColumn): void {\n        this.column = column;\n        this.eFilterName.innerText =\n            this.columnNameService.getDisplayNameForColumn(this.column, 'filterToolPanel', false) || '';\n        this.addManagedListeners(this.eFilterToolPanelHeader, {\n            click: this.toggleExpanded.bind(this),\n            keydown: this.onKeyDown.bind(this),\n        });\n        this.addManagedEventListeners({ filterOpened: this.onFilterOpened.bind(this) });\n        this.addInIcon('filter', this.eFilterIcon, this.column);\n\n        _setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        _setDisplayed(this.eExpandChecked, false);\n\n        if (this.hideHeader) {\n            _setDisplayed(this.eFilterToolPanelHeader, false);\n            this.eFilterToolPanelHeader.removeAttribute('tabindex');\n        } else {\n            this.eFilterToolPanelHeader.setAttribute('tabindex', '0');\n        }\n\n        this.addManagedListeners(this.column, { filterChanged: this.onFilterChanged.bind(this) });\n    }\n\n    private onKeyDown(e: KeyboardEvent): void {\n        const { key } = e;\n        const { ENTER, SPACE, LEFT, RIGHT } = KeyCode;\n\n        if (key !== ENTER && key !== SPACE && key !== LEFT && key !== RIGHT) {\n            return;\n        }\n\n        e.preventDefault();\n\n        if (key === ENTER || key === SPACE) {\n            this.toggleExpanded();\n        } else if (key === KeyCode.LEFT) {\n            this.collapse();\n        } else {\n            this.expand();\n        }\n    }\n\n    public getColumn(): AgColumn {\n        return this.column;\n    }\n\n    public getColumnFilterName(): string | null {\n        return this.columnNameService.getDisplayNameForColumn(this.column, 'filterToolPanel', false);\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.eFilterToolPanelHeader.classList.add(cssClass);\n    }\n\n    private addInIcon(iconName: string, eParent: Element, column: AgColumn): void {\n        if (eParent == null) {\n            return;\n        }\n\n        const eIcon = _createIconNoSpan(iconName, this.gos, column)!;\n        eParent.appendChild(eIcon);\n    }\n\n    public isFilterActive(): boolean {\n        return !!this.filterManager?.isFilterActive(this.column);\n    }\n\n    private onFilterChanged(): void {\n        _setDisplayed(this.eFilterIcon, this.isFilterActive(), { skipAriaHidden: true });\n        this.dispatchLocalEvent({ type: 'filterChanged' });\n    }\n\n    public toggleExpanded(): void {\n        this.expanded ? this.collapse() : this.expand();\n    }\n\n    public expand(): void {\n        if (this.expanded) {\n            return;\n        }\n\n        this.expanded = true;\n        _setAriaExpanded(this.eFilterToolPanelHeader, true);\n\n        _setDisplayed(this.eExpandChecked, true);\n        _setDisplayed(this.eExpandUnchecked, false);\n\n        this.addFilterElement();\n\n        this.expandedCallback();\n    }\n\n    private addFilterElement(suppressFocus?: boolean): void {\n        const filterPanelWrapper = _loadTemplate(/* html */ `<div class=\"ag-filter-toolpanel-instance-filter\"></div>`);\n        const comp = this.createManagedBean(new FilterWrapperComp(this.column, 'TOOLBAR'));\n        this.filterWrapperComp = comp;\n\n        if (!comp.hasFilter()) {\n            return;\n        }\n\n        comp.getFilter()?.then((filter) => {\n            this.underlyingFilter = filter;\n\n            if (!filter) {\n                return;\n            }\n            filterPanelWrapper.appendChild(comp.getGui());\n\n            this.agFilterToolPanelBody.appendChild(filterPanelWrapper);\n\n            comp.afterGuiAttached({ container: 'toolPanel', suppressFocus });\n        });\n    }\n\n    public collapse(): void {\n        if (!this.expanded) {\n            return;\n        }\n\n        this.expanded = false;\n        _setAriaExpanded(this.eFilterToolPanelHeader, false);\n        this.removeFilterElement();\n\n        _setDisplayed(this.eExpandChecked, false);\n        _setDisplayed(this.eExpandUnchecked, true);\n\n        this.filterWrapperComp?.afterGuiDetached();\n        this.destroyBean(this.filterWrapperComp);\n\n        this.expandedCallback();\n    }\n\n    private removeFilterElement(): void {\n        _clearElement(this.agFilterToolPanelBody);\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public refreshFilter(isDisplayed: boolean): void {\n        if (!this.expanded) {\n            return;\n        }\n\n        const filter = this.underlyingFilter as any;\n\n        if (!filter) {\n            return;\n        }\n\n        if (isDisplayed) {\n            // set filters should be updated when the filter has been changed elsewhere, i.e. via api. Note that we can't\n            // use 'afterGuiAttached' to refresh the virtual list as it also focuses on the mini filter which changes the\n            // scroll position in the filter list panel\n            if (typeof filter.refreshVirtualList === 'function') {\n                filter.refreshVirtualList();\n            }\n        } else {\n            filter.afterGuiDetached?.();\n        }\n    }\n\n    private onFilterOpened(event: FilterOpenedEvent): void {\n        if (event.source !== 'COLUMN_MENU') {\n            return;\n        }\n        if (event.column !== this.column) {\n            return;\n        }\n        if (!this.expanded) {\n            return;\n        }\n\n        this.collapse();\n    }\n}\n", "import type {\n    AgColumn,\n    AgProvidedColumnGroup,\n    BeanCollection,\n    ColumnNameService,\n    FilterOpenedEvent,\n    ITooltipParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    RefPlaceholder,\n    _clearElement,\n    _createIconNoSpan,\n    isProvidedColumnGroup,\n} from '@ag-grid-community/core';\nimport type { AgGroupComponent, AgGroupComponentParams } from '@ag-grid-enterprise/core';\nimport { AgGroupComponentSelector } from '@ag-grid-enterprise/core';\n\nimport { ToolPanelFilterComp } from './toolPanelFilterComp';\n\nexport type ToolPanelFilterItem = ToolPanelFilterGroupComp | ToolPanelFilterComp;\n\nexport class ToolPanelFilterGroupComp extends Component {\n    private columnNameService: ColumnNameService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private filterGroupComp: AgGroupComponent = RefPlaceholder;\n\n    private readonly depth: number;\n    private readonly columnGroup: AgColumn | AgProvidedColumnGroup;\n    private readonly showingColumn: boolean;\n    private childFilterComps: (ToolPanelFilterGroupComp | ToolPanelFilterComp)[];\n    private expandedCallback: () => void;\n    private filterGroupName: string | null;\n\n    constructor(\n        columnGroup: AgColumn | AgProvidedColumnGroup,\n        childFilterComps: (ToolPanelFilterGroupComp | ToolPanelFilterComp)[],\n        expandedCallback: () => void,\n        depth: number,\n        showingColumn: boolean\n    ) {\n        super();\n        this.columnGroup = columnGroup;\n        this.childFilterComps = childFilterComps;\n        this.depth = depth;\n        this.expandedCallback = expandedCallback;\n        this.showingColumn = showingColumn;\n    }\n\n    public postConstruct(): void {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'filter-toolpanel',\n            direction: 'vertical',\n        };\n        this.setTemplate(\n            /* html */ `<div class=\"ag-filter-toolpanel-group-wrapper\">\n            <ag-group-component data-ref=\"filterGroupComp\"></ag-group-component>\n        </div>`,\n            [AgGroupComponentSelector],\n            { filterGroupComp: groupParams }\n        );\n\n        this.setGroupTitle();\n        this.filterGroupComp.setAlignItems('stretch');\n\n        this.filterGroupComp.addCssClass(`ag-filter-toolpanel-group-level-${this.depth}`);\n        this.filterGroupComp.getGui().style.setProperty('--ag-indentation-level', String(this.depth));\n        this.filterGroupComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth}-header`);\n\n        this.childFilterComps.forEach((filterComp) => {\n            this.filterGroupComp.addItem(filterComp as Component);\n            filterComp.addCssClassToTitleBar(`ag-filter-toolpanel-group-level-${this.depth + 1}-header`);\n            filterComp.getGui().style.setProperty('--ag-indentation-level', String(this.depth + 1));\n        });\n\n        this.refreshFilterClass();\n        this.addExpandCollapseListeners();\n        this.addFilterChangedListeners();\n        this.setupTooltip();\n        this.addInIcon('filter');\n    }\n\n    private setupTooltip(): void {\n        // we don't show tooltips for groups, as when the group expands, it's div contains the columns which also\n        // have tooltips, so the tooltips would clash. Eg mouse over group, tooltip shows, mouse over column, another\n        // tooltip shows but cos we didn't leave the group the group tooltip remains. this should be fixed in the future,\n        // maybe the group shouldn't contain the children form a DOM perspective.\n        if (!this.showingColumn) {\n            return;\n        }\n\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => {\n                const eGui = this.filterGroupComp.getGui();\n                const eTitle = eGui.querySelector('.ag-group-title');\n\n                if (!eTitle) {\n                    return true;\n                } // show tooltip by default\n                return eTitle.scrollWidth > eTitle.clientWidth;\n            };\n        }\n\n        const refresh = () => {\n            const newTooltipText = (this.columnGroup as AgColumn).getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'filterToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedEventListeners({ newColumnsLoaded: refresh });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'filterToolPanelColumnGroup';\n        return res;\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.filterGroupComp.addCssClassToTitleBar(cssClass);\n    }\n\n    public refreshFilters(isDisplayed: boolean) {\n        this.childFilterComps.forEach((filterComp) => {\n            if (filterComp instanceof ToolPanelFilterGroupComp) {\n                filterComp.refreshFilters(isDisplayed);\n            } else {\n                filterComp.refreshFilter(isDisplayed);\n            }\n        });\n    }\n\n    public isColumnGroup(): boolean {\n        return isProvidedColumnGroup(this.columnGroup);\n    }\n\n    public isExpanded(): boolean {\n        return this.filterGroupComp.isExpanded();\n    }\n\n    public getChildren(): ToolPanelFilterItem[] {\n        return this.childFilterComps;\n    }\n\n    public getFilterGroupName(): string {\n        return this.filterGroupName ? this.filterGroupName : '';\n    }\n\n    public getFilterGroupId(): string {\n        return this.columnGroup.getId();\n    }\n\n    public hideGroupItem(hide: boolean, index: number) {\n        this.filterGroupComp.hideItem(hide, index);\n    }\n\n    public hideGroup(hide: boolean) {\n        this.setDisplayed(!hide);\n    }\n\n    private addInIcon(iconName: string): void {\n        const eIcon = _createIconNoSpan(iconName, this.gos)!;\n        if (eIcon) {\n            eIcon.classList.add('ag-filter-toolpanel-group-instance-header-icon');\n        }\n        this.filterGroupComp.addTitleBarWidget(eIcon);\n    }\n\n    private forEachToolPanelFilterChild(action: (filterComp: ToolPanelFilterItem) => void) {\n        this.childFilterComps.forEach((filterComp) => {\n            if (filterComp instanceof ToolPanelFilterComp) {\n                action(filterComp);\n            }\n        });\n    }\n\n    private addExpandCollapseListeners() {\n        const expandListener = this.isColumnGroup()\n            ? () => this.expandedCallback()\n            : () => this.forEachToolPanelFilterChild((filterComp) => filterComp.expand());\n\n        const collapseListener = this.isColumnGroup()\n            ? () => this.expandedCallback()\n            : () => this.forEachToolPanelFilterChild((filterComp) => filterComp.collapse());\n\n        this.addManagedListeners(this.filterGroupComp, {\n            expanded: expandListener,\n            collapsed: collapseListener,\n        });\n    }\n\n    private getColumns(): AgColumn[] {\n        if (isProvidedColumnGroup(this.columnGroup)) {\n            return this.columnGroup.getLeafColumns();\n        }\n\n        return [this.columnGroup];\n    }\n\n    private addFilterChangedListeners() {\n        this.getColumns().forEach((column) => {\n            this.addManagedListeners(column, { filterChanged: () => this.refreshFilterClass() });\n        });\n\n        if (!isProvidedColumnGroup(this.columnGroup)) {\n            this.addManagedEventListeners({ filterOpened: this.onFilterOpened.bind(this) });\n        }\n    }\n\n    private refreshFilterClass(): void {\n        const columns = this.getColumns();\n\n        const anyChildFiltersActive = () => columns.some((col) => col.isFilterActive());\n        this.filterGroupComp.addOrRemoveCssClass('ag-has-filter', anyChildFiltersActive());\n    }\n\n    private onFilterOpened(event: FilterOpenedEvent): void {\n        // when a filter is opened elsewhere, i.e. column menu we close the filter comp so we also need to collapse\n        // the column group. This approach means we don't need to try and sync filter models on the same column.\n\n        if (event.source !== 'COLUMN_MENU') {\n            return;\n        }\n        if (event.column !== this.columnGroup) {\n            return;\n        }\n        if (!this.isExpanded()) {\n            return;\n        }\n\n        this.collapse();\n    }\n\n    public expand() {\n        this.filterGroupComp.toggleGroupExpand(true);\n    }\n\n    public collapse() {\n        this.filterGroupComp.toggleGroupExpand(false);\n    }\n\n    private setGroupTitle() {\n        this.filterGroupName = isProvidedColumnGroup(this.columnGroup)\n            ? this.getColumnGroupName(this.columnGroup)\n            : this.getColumnName(this.columnGroup);\n\n        this.filterGroupComp.setTitle(this.filterGroupName || '');\n    }\n\n    private getColumnGroupName(columnGroup: AgProvidedColumnGroup): string | null {\n        return this.columnNameService.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'filterToolPanel');\n    }\n\n    private getColumnName(column: AgColumn): string | null {\n        return this.columnNameService.getDisplayNameForColumn(column, 'filterToolPanel', false);\n    }\n\n    private destroyFilters() {\n        this.childFilterComps = this.destroyBeans(this.childFilterComps);\n        _clearElement(this.getGui());\n    }\n\n    public override destroy() {\n        this.destroyFilters();\n        super.destroy();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule, GroupCellRenderer, GroupCellRendererCtrl } from '@ag-grid-enterprise/core';\n\nimport { DetailCellRenderer } from './masterDetail/detailCellRenderer';\nimport { DetailCellRendererCtrl } from './masterDetail/detailCellRendererCtrl';\nimport { DetailGridApiService } from './masterDetail/detailGridApiService';\nimport {\n    addDetailGridInfo,\n    forEachDetailGridInfo,\n    getDetailGridInfo,\n    removeDetailGridInfo,\n} from './masterDetail/masterDetailApi';\nimport { VERSION } from './version';\n\nexport const MasterDetailCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MasterDetailModule}-core`,\n    userComponents: [\n        {\n            name: 'agGroupRowRenderer',\n            classImp: GroupCellRenderer,\n        },\n        {\n            name: 'agGroupCellRenderer',\n            classImp: GroupCellRenderer,\n        },\n        { name: 'agDetailCellRenderer', classImp: DetailCellRenderer },\n    ],\n    controllers: [\n        { name: 'detailCellRenderer', classImp: DetailCellRendererCtrl },\n        { name: 'groupCellRendererCtrl', classImp: GroupCellRendererCtrl },\n    ],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const MasterDetailApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MasterDetailModule}-api`,\n    beans: [DetailGridApiService],\n    apiFunctions: {\n        addDetailGridInfo,\n        removeDetailGridInfo,\n        getDetailGridInfo,\n        forEachDetailGridInfo,\n    },\n    dependantModules: [MasterDetailCoreModule],\n};\n\nexport const MasterDetailModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MasterDetailModule,\n    dependantModules: [MasterDetailCoreModule],\n};\n", "import type {\n    BeanCollection,\n    Context,\n    GridApi,\n    GridOptions,\n    GridParams,\n    ICellRenderer,\n    IDetailCellRenderer,\n    IDetailCellRendererParams,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    ModuleRegistry,\n    RefPlaceholder,\n    _cloneObject,\n    _missing,\n    _warnOnce,\n    createGrid,\n} from '@ag-grid-community/core';\n\nimport { DetailCellRendererCtrl } from './detailCellRendererCtrl';\n\nexport class DetailCellRenderer extends Component implements ICellRenderer {\n    private eDetailGrid: HTMLElement = RefPlaceholder;\n\n    private detailApi: GridApi;\n    private params: IDetailCellRendererParams;\n    private ctrl: DetailCellRendererCtrl;\n    private context: Context;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.context = beans.context;\n    }\n\n    public init(params: IDetailCellRendererParams): void {\n        this.params = params;\n        this.selectAndSetTemplate();\n\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (cssClassName: string, on: boolean) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveDetailGridCssClass: (cssClassName: string, on: boolean) =>\n                this.eDetailGrid.classList.toggle(cssClassName, on),\n            setDetailGrid: (gridOptions) => this.setDetailGrid(gridOptions),\n            setRowData: (rowData) => this.setRowData(rowData),\n            getGui: () => this.eDetailGrid,\n        };\n\n        this.ctrl = this.createManagedBean(new DetailCellRendererCtrl());\n        this.ctrl.init(compProxy, params);\n    }\n\n    public refresh(): boolean {\n        return this.ctrl && this.ctrl.refresh();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    private selectAndSetTemplate(): void {\n        if (this.params.pinned) {\n            this.setTemplate(/* html*/ `<div class=\"ag-details-row\"></div>`);\n            return;\n        }\n\n        const setDefaultTemplate = () => {\n            this.setTemplate(/* html */ `<div class=\"ag-details-row\" role=\"gridcell\">\n                <div data-ref=\"eDetailGrid\" class=\"ag-details-grid\" role=\"presentation\"></div>\n            </div>`);\n        };\n\n        if (_missing(this.params.template)) {\n            // use default template\n            setDefaultTemplate();\n        } else {\n            // use user provided template\n            if (typeof this.params.template === 'string') {\n                this.setTemplate(this.params.template, []);\n            } else if (typeof this.params.template === 'function') {\n                const templateFunc = this.params.template;\n                const template = templateFunc(this.params);\n                this.setTemplate(template, []);\n            } else {\n                _warnOnce('detailCellRendererParams.template should be function or string');\n                setDefaultTemplate();\n            }\n        }\n\n        if (this.eDetailGrid == null) {\n            _warnOnce(\n                'Reference to eDetailGrid was missing from the details template. ' +\n                    'Please add data-ref=\"eDetailGrid\" to the template.'\n            );\n        }\n    }\n\n    private setDetailGrid(gridOptions: GridOptions): void {\n        if (!this.eDetailGrid) {\n            return;\n        }\n\n        // AG-1715\n        // this is only needed when suppressReactUi=true, once we remove the old way\n        // of doing react, and Master / Details is all native React, then we\n        // can remove this code.\n        const agGridReact = this.context.getBean('agGridReact');\n        const agGridReactCloned = agGridReact ? _cloneObject(agGridReact) : undefined;\n\n        // when we create detail grid, the detail grid needs frameworkComponentWrapper so that\n        // it created child components correctly, ie  Angular detail grid can have Angular cell renderer.\n        // this is only used by Angular and Vue, as React uses native React AG Grid detail grids\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n        const frameworkOverrides = this.getFrameworkOverrides();\n\n        const api = createGrid(this.eDetailGrid, gridOptions, {\n            frameworkOverrides,\n            providedBeanInstances: {\n                agGridReact: agGridReactCloned,\n                frameworkComponentWrapper: frameworkComponentWrapper,\n            },\n            modules: ModuleRegistry.__getGridRegisteredModules(this.params.api.getGridId()),\n        } as GridParams);\n\n        this.detailApi = api;\n        this.ctrl.registerDetailWithMaster(api);\n\n        this.addDestroyFunc(() => {\n            api?.destroy();\n        });\n    }\n\n    private setRowData(rowData: any[]): void {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        this.detailApi && this.detailApi.setGridOption('rowData', rowData);\n    }\n}\n", "import type {\n    BeanCollection,\n    DetailGridInfo,\n    Environment,\n    FocusService,\n    FullWidthRowFocusedEvent,\n    GridApi,\n    IDetailCellRenderer,\n    IDetailCellRendererCtrl,\n    IDetailCellRendererParams,\n    RowNode,\n    RowPositionUtils,\n} from '@ag-grid-community/core';\nimport { BeanStub, _missing, _warnOnce } from '@ag-grid-community/core';\n\nexport class DetailCellRendererCtrl extends BeanStub implements IDetailCellRendererCtrl {\n    private rowPositionUtils: RowPositionUtils;\n    private focusService: FocusService;\n    private environment: Environment;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.environment = beans.environment;\n    }\n\n    private params: IDetailCellRendererParams;\n\n    private comp: IDetailCellRenderer;\n\n    private loadRowDataVersion = 0;\n\n    private refreshStrategy: 'rows' | 'everything' | 'nothing';\n\n    public init(comp: IDetailCellRenderer, params: IDetailCellRendererParams): void {\n        this.params = params;\n        this.comp = comp;\n\n        const doNothingBecauseInsidePinnedSection = params.pinned != null;\n        if (doNothingBecauseInsidePinnedSection) {\n            return;\n        }\n\n        this.setAutoHeightClasses();\n        this.setupRefreshStrategy();\n        this.addThemeToDetailGrid();\n        this.createDetailGrid();\n        this.loadRowData();\n\n        this.addManagedEventListeners({ fullWidthRowFocused: this.onFullWidthRowFocused.bind(this) });\n    }\n\n    private onFullWidthRowFocused(e: FullWidthRowFocusedEvent): void {\n        const params = this.params;\n        const row = { rowIndex: params.node.rowIndex!, rowPinned: params.node.rowPinned! };\n        const eventRow = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned! };\n        const isSameRow = this.rowPositionUtils.sameRow(row, eventRow);\n\n        if (!isSameRow) {\n            return;\n        }\n\n        this.focusService.focusInto(this.comp.getGui(), e.fromBelow);\n    }\n\n    private setAutoHeightClasses(): void {\n        const autoHeight = this.gos.get('detailRowAutoHeight');\n\n        const parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n        const detailClass = autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n\n        this.comp.addOrRemoveCssClass(parentClass, true);\n        this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n    }\n\n    private setupRefreshStrategy(): void {\n        const providedStrategy = this.params.refreshStrategy;\n\n        const validSelection =\n            providedStrategy == 'everything' || providedStrategy == 'nothing' || providedStrategy == 'rows';\n        if (validSelection) {\n            this.refreshStrategy = providedStrategy;\n            return;\n        }\n\n        if (providedStrategy != null) {\n            _warnOnce(\n                \"invalid cellRendererParams.refreshStrategy = '\" +\n                    providedStrategy +\n                    \"' supplied, defaulting to refreshStrategy = 'rows'.\"\n            );\n        }\n\n        this.refreshStrategy = 'rows';\n    }\n\n    private addThemeToDetailGrid(): void {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        for (const themeClass of this.environment.getThemeClasses()) {\n            this.comp.addOrRemoveDetailGridCssClass(themeClass, true);\n        }\n    }\n\n    private createDetailGrid(): void {\n        if (_missing(this.params.detailGridOptions)) {\n            _warnOnce(\n                'could not find detail grid options for master detail, ' +\n                    'please set gridOptions.detailCellRendererParams.detailGridOptions'\n            );\n            return;\n        }\n\n        const autoHeight = this.gos.get('detailRowAutoHeight');\n\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api into gridOptions\n        const gridOptions = { ...this.params.detailGridOptions };\n\n        if (autoHeight) {\n            gridOptions.domLayout = 'autoHeight';\n        }\n\n        this.comp.setDetailGrid(gridOptions);\n    }\n\n    public registerDetailWithMaster(api: GridApi): void {\n        const rowId = this.params.node.id!;\n        const masterGridApi = this.params.api;\n\n        const gridInfo: DetailGridInfo = {\n            id: rowId,\n            api: api,\n        };\n\n        const rowNode = this.params.node as RowNode;\n\n        // register with api if the master api is still alive\n        if (masterGridApi.isDestroyed()) {\n            return;\n        }\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n\n        this.addDestroyFunc(() => {\n            // the gridInfo can be stale if a refresh happens and\n            // a new row is created before the old one is destroyed.\n            if (rowNode.detailGridInfo !== gridInfo) {\n                return;\n            }\n            if (!masterGridApi.isDestroyed()) {\n                masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            }\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    }\n\n    private loadRowData(): void {\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        const versionThisCall = this.loadRowDataVersion;\n\n        if (this.params.detailGridOptions?.rowModelType === 'serverSide') {\n            const node = this.params.node as RowNode;\n            node.detailGridInfo?.api?.refreshServerSide({ purge: true });\n            return;\n        }\n\n        const userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            _warnOnce(\n                'could not find getDetailRowData for master / detail, ' +\n                    'please set gridOptions.detailCellRendererParams.getDetailRowData'\n            );\n            return;\n        }\n\n        const successCallback = (rowData: any[]) => {\n            const mostRecentCall = this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                this.comp.setRowData(rowData);\n            }\n        };\n\n        const funcParams: any = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback,\n            context: this.gos.getGridCommonParams().context,\n        };\n        userFunc(funcParams);\n    }\n\n    public refresh(): boolean {\n        const GET_GRID_TO_REFRESH = false;\n        const GET_GRID_TO_DO_NOTHING = true;\n\n        switch (this.refreshStrategy) {\n            // ignore this refresh, make grid think we've refreshed but do nothing\n            case 'nothing':\n                return GET_GRID_TO_DO_NOTHING;\n            // grid will destroy and recreate the cell\n            case 'everything':\n                return GET_GRID_TO_REFRESH;\n        }\n\n        // do the refresh here, and tell the grid to do nothing\n        this.loadRowData();\n        return GET_GRID_TO_DO_NOTHING;\n    }\n}\n", "import type { DetailGridInfo, IDetailGridApiService, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub, _exists, _iterateObject } from '@ag-grid-community/core';\n\nexport class DetailGridApiService extends BeanStub implements NamedBean, IDetailGridApiService {\n    beanName = 'detailGridApiService' as const;\n\n    private detailGridInfoMap: { [id: string]: DetailGridInfo | undefined } = {};\n\n    public addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void {\n        this.detailGridInfoMap[id] = gridInfo;\n    }\n\n    public removeDetailGridInfo(id: string): void {\n        delete this.detailGridInfoMap[id];\n    }\n\n    public getDetailGridInfo(id: string): DetailGridInfo | undefined {\n        return this.detailGridInfoMap[id];\n    }\n\n    public forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void) {\n        let index = 0;\n        _iterateObject(this.detailGridInfoMap, (id: string, gridInfo: DetailGridInfo) => {\n            // check for undefined, as old references will still be lying around\n            if (_exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    }\n\n    public override destroy(): void {\n        this.detailGridInfoMap = {};\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, DetailGridInfo } from '@ag-grid-community/core';\n\nexport function addDetailGridInfo(beans: BeanCollection, id: string, gridInfo: DetailGridInfo): void {\n    beans.detailGridApiService?.addDetailGridInfo(id, gridInfo);\n}\n\nexport function removeDetailGridInfo(beans: BeanCollection, id: string): void {\n    beans.detailGridApiService?.removeDetailGridInfo(id);\n}\n\nexport function getDetailGridInfo(beans: BeanCollection, id: string): DetailGridInfo | undefined {\n    return beans.detailGridApiService?.getDetailGridInfo(id);\n}\n\nexport function forEachDetailGridInfo(\n    beans: BeanCollection,\n    callback: (gridInfo: DetailGridInfo, index: number) => void\n) {\n    beans.detailGridApiService?.forEachDetailGridInfo(callback);\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _CommunityMenuApiModule } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { ChartMenuItemMapper } from './menu/chartMenuItemMapper';\nimport { ColumnChooserFactory } from './menu/columnChooserFactory';\nimport { ColumnMenuFactory } from './menu/columnMenuFactory';\nimport { ContextMenuFactory } from './menu/contextMenu';\nimport { EnterpriseMenuFactory } from './menu/enterpriseMenu';\nimport { hideColumnChooser, showColumnChooser, showContextMenu } from './menu/menuApi';\nimport { MenuItemMapper } from './menu/menuItemMapper';\nimport { MenuUtils } from './menu/menuUtils';\nimport { VERSION } from './version';\n\nexport const MenuCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MenuModule}-core`,\n    beans: [\n        EnterpriseMenuFactory,\n        ContextMenuFactory,\n        MenuItemMapper,\n        ChartMenuItemMapper,\n        ColumnChooserFactory,\n        ColumnMenuFactory,\n        MenuUtils,\n    ],\n    dependantModules: [EnterpriseCoreModule],\n    userComponents: [\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n};\n\nexport const MenuApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MenuModule}-api`,\n    apiFunctions: {\n        showContextMenu,\n        showColumnChooser,\n        hideColumnChooser,\n    },\n    dependantModules: [MenuCoreModule, _CommunityMenuApiModule],\n};\n\nexport const MenuModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MenuModule,\n    dependantModules: [MenuCoreModule, MenuApiModule],\n};\n", "import type {\n    BeanCollection,\n    ChartGroupsDef,\n    ChartType,\n    GridOptionsService,\n    IChartService,\n    LocaleService,\n    MenuItemDef,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub, ModuleNames, ModuleRegistry, _createIconNoSpan, _warnOnce } from '@ag-grid-community/core';\n\nexport class ChartMenuItemMapper extends BeanStub implements NamedBean {\n    beanName = 'chartMenuItemMapper' as const;\n\n    private chartService?: IChartService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.chartService = beans.chartService;\n    }\n\n    public getChartItems(key: 'pivotChart' | 'chartRange'): MenuItemDef | undefined {\n        if (!this.chartService) {\n            ModuleRegistry.__assertRegistered(\n                ModuleNames.GridChartsModule,\n                `the Context Menu key \"${key}\"`,\n                this.gridId\n            );\n            return undefined;\n        }\n\n        const builder =\n            key === 'pivotChart'\n                ? new PivotMenuItemMapper(this.gos, this.chartService, this.localeService)\n                : new RangeMenuItemMapper(this.gos, this.chartService, this.localeService);\n\n        const isEnterprise = this.chartService.isEnterprise();\n\n        let topLevelMenuItem: MenuItemDefWithKey | undefined = builder.getMenuItem();\n\n        if (topLevelMenuItem && topLevelMenuItem.subMenu && !isEnterprise) {\n            // Filter out enterprise-only menu items if 'Community Integrated'\n            const filterEnterpriseItems = (m: MenuItemDefWithKey): MenuItemDefWithKey => ({\n                ...m,\n                subMenu: m.subMenu?.filter((menu) => !menu._enterprise).map((menu) => filterEnterpriseItems(menu)),\n            });\n            topLevelMenuItem = filterEnterpriseItems(topLevelMenuItem);\n        }\n\n        const chartGroupsDef = this.gos.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n        if (chartGroupsDef) {\n            topLevelMenuItem = ChartMenuItemMapper.filterAndOrderChartMenu(\n                topLevelMenuItem,\n                chartGroupsDef,\n                builder.getConfigLookup()\n            );\n        }\n        return this.cleanInternals(topLevelMenuItem);\n    }\n\n    // Remove our internal _key and _enterprise properties so this does not leak out of the class on the menu items.\n    private cleanInternals(menuItem: MenuItemDefWithKey | undefined): MenuItemDef | undefined {\n        if (!menuItem) {\n            return menuItem;\n        }\n\n        const removeKeys = (m: MenuItemDefWithKey | undefined) => {\n            delete m?._key;\n            delete m?._enterprise;\n            m?.subMenu?.forEach((s) => removeKeys(s));\n            return m;\n        };\n\n        return removeKeys(menuItem);\n    }\n\n    private static buildLookup<T extends MenuItemDefWithKey<any>>(menuItem: T) {\n        const itemLookup: Record<any, T> = {} as any;\n        const addItem = (item: T) => {\n            itemLookup[item._key] = item;\n            if (item.subMenu) {\n                item.subMenu.forEach((s) => addItem(s as T));\n            }\n        };\n        addItem(menuItem);\n        return itemLookup;\n    }\n\n    /**\n     * Make the MenuItem match the charts provided and their ordering on the ChartGroupsDef config object as provided by the user.\n     */\n    private static filterAndOrderChartMenu<TKeys extends string>(\n        topLevelMenuItem: MenuItemDefWithKey<TKeys>,\n        chartGroupsDef: ChartGroupsDef,\n        configLookup: ChartDefToMenuItems<TKeys>\n    ): MenuItemDefWithKey<TKeys> | undefined {\n        const menuItemLookup = this.buildLookup(topLevelMenuItem);\n        const orderedAndFiltered: MenuItemDefWithKey = { ...topLevelMenuItem, subMenu: [] };\n\n        Object.entries(chartGroupsDef).forEach(([group, chartTypes]: [keyof ChartGroupsDef, ChartType[]]) => {\n            const chartConfigGroup = configLookup[group];\n\n            // Skip any context panels that are not enabled for the current chart type\n            if (chartConfigGroup === null) return;\n\n            if (chartConfigGroup == undefined) {\n                _warnOnce(`invalid chartGroupsDef config '${group}'`);\n                return undefined;\n            }\n\n            const menuItem = menuItemLookup[chartConfigGroup._key];\n            if (menuItem) {\n                if (menuItem.subMenu) {\n                    const subMenus = chartTypes\n                        .map((chartType) => {\n                            const itemKey = (chartConfigGroup as any)[chartType];\n                            if (itemKey == undefined) {\n                                _warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                                return undefined;\n                            }\n                            return menuItemLookup[itemKey];\n                        })\n                        .filter((s) => s !== undefined) as MenuItemDefWithKey[];\n\n                    if (subMenus.length > 0) {\n                        menuItem.subMenu = subMenus;\n                        orderedAndFiltered.subMenu?.push(menuItem);\n                    }\n                } else {\n                    // Handles line case which is not actually a sub subMenu\n                    orderedAndFiltered.subMenu?.push(menuItem);\n                }\n            }\n        });\n        if (orderedAndFiltered.subMenu?.length == 0) {\n            return undefined;\n        }\n        return orderedAndFiltered;\n    }\n}\n\ninterface MenuItemBuilder<MenuItemKeys extends string> {\n    getMenuItem(): MenuItemDefWithKey<MenuItemKeys>;\n    getConfigLookup(): ChartDefToMenuItems<MenuItemKeys>;\n}\n\n/** Utility type to keep chart menu item lookups in sync with ChartGroupsDef */\ntype ChartDefToMenuItems<MenuItemKeys extends string> = {\n    [K in keyof ChartGroupsDef]-?: ChartGroupsDef[K] extends (infer P)[] | undefined\n        ? [P] extends [ChartType]\n            ? ({ [T in P]-?: MenuItemKeys | null } & { _key: MenuItemKeys }) | null\n            : never\n        : never;\n};\n\ninterface MenuItemDefWithKey<MenuItemKey extends string = any> extends MenuItemDef {\n    _key: MenuItemKey;\n    _enterprise?: boolean;\n    subMenu?: MenuItemDefWithKey<MenuItemKey>[];\n}\n\nexport type PivotMenuOptionName =\n    | 'pivotChart'\n    | 'pivotColumnChart'\n    | 'pivotGroupedColumn'\n    | 'pivotStackedColumn'\n    | 'pivotNormalizedColumn'\n    | 'pivotBarChart'\n    | 'pivotGroupedBar'\n    | 'pivotStackedBar'\n    | 'pivotNormalizedBar'\n    | 'pivotPieChart'\n    | 'pivotPie'\n    | 'pivotDonut'\n    | 'pivotLineChart'\n    | 'pivotXYChart'\n    | 'pivotScatter'\n    | 'pivotBubble'\n    | 'pivotAreaChart'\n    | 'pivotArea'\n    | 'pivotStackedArea'\n    | 'pivotNormalizedArea'\n    | 'pivotStatisticalChart'\n    | 'pivotHistogram'\n    | 'pivotHierarchicalChart'\n    | 'pivotTreemap'\n    | 'pivotSunburst'\n    | 'pivotCombinationChart'\n    | 'pivotColumnLineCombo'\n    | 'pivotAreaColumnCombo';\n\nclass PivotMenuItemMapper implements MenuItemBuilder<PivotMenuOptionName> {\n    constructor(\n        private gos: GridOptionsService,\n        private chartService: IChartService,\n        private localeService: LocaleService\n    ) {}\n\n    getMenuItem(): MenuItemDefWithKey<PivotMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (\n            localeKey: string,\n            defaultText: string,\n            chartType: ChartType,\n            key: PivotMenuOptionName,\n            enterprise = false\n        ) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createPivotChart({ chartType }),\n                _key: key,\n                _enterprise: enterprise,\n            };\n        };\n        return {\n            name: localeTextFunc('pivotChart', 'Pivot Chart'),\n            _key: 'pivotChart',\n            subMenu: [\n                {\n                    _key: 'pivotColumnChart',\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'pivotGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'pivotStackedColumn'),\n                        getMenuItem(\n                            'normalizedColumn',\n                            '100% Stacked&lrm;',\n                            'normalizedColumn',\n                            'pivotNormalizedColumn'\n                        ),\n                    ],\n                },\n                {\n                    _key: 'pivotBarChart',\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'pivotGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'pivotStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'pivotNormalizedBar'),\n                    ],\n                },\n                {\n                    _key: 'pivotPieChart',\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'pivotPie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'pivotDonut'),\n                    ],\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'pivotLineChart'),\n                {\n                    _key: 'pivotXYChart',\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'pivotScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'pivotBubble'),\n                    ],\n                },\n                {\n                    _key: 'pivotAreaChart',\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu: [\n                        getMenuItem('area', 'Area&lrm;', 'area', 'pivotArea'),\n                        getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'pivotStackedArea'),\n                        getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'pivotNormalizedArea'),\n                    ],\n                },\n                {\n                    _key: 'pivotStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu: [getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'pivotHistogram', false)],\n                },\n                {\n                    _key: 'pivotHierarchicalChart',\n                    _enterprise: true,\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu: [\n                        getMenuItem('treemapChart', 'Treemap&lrm;', 'treemap', 'pivotTreemap', true),\n                        getMenuItem('sunburstChart', 'Sunburst&lrm;', 'sunburst', 'pivotSunburst', true),\n                    ],\n                },\n                {\n                    _key: 'pivotCombinationChart',\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'pivotColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'pivotAreaColumnCombo'),\n                    ],\n                },\n            ],\n            icon: _createIconNoSpan('chart', this.gos, undefined),\n        };\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<PivotMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'pivotColumnChart',\n                column: 'pivotGroupedColumn',\n                stackedColumn: 'pivotStackedColumn',\n                normalizedColumn: 'pivotNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'pivotBarChart',\n                bar: 'pivotGroupedBar',\n                stackedBar: 'pivotStackedBar',\n                normalizedBar: 'pivotNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'pivotPieChart',\n                pie: 'pivotPie',\n                donut: 'pivotDonut',\n                doughnut: 'pivotDonut',\n            },\n            lineGroup: {\n                _key: 'pivotLineChart',\n                line: 'pivotLineChart',\n            },\n            scatterGroup: {\n                _key: 'pivotXYChart',\n                bubble: 'pivotBubble',\n                scatter: 'pivotScatter',\n            },\n            areaGroup: {\n                _key: 'pivotAreaChart',\n                area: 'pivotArea',\n                stackedArea: 'pivotStackedArea',\n                normalizedArea: 'pivotNormalizedArea',\n            },\n            combinationGroup: {\n                _key: 'pivotCombinationChart',\n                columnLineCombo: 'pivotColumnLineCombo',\n                areaColumnCombo: 'pivotAreaColumnCombo',\n                customCombo: null, // Not currently supported\n            },\n            hierarchicalGroup: {\n                _key: 'pivotHierarchicalChart',\n                treemap: 'pivotTreemap',\n                sunburst: 'pivotSunburst',\n            },\n            statisticalGroup: {\n                _key: 'pivotStatisticalChart',\n                histogram: 'pivotHistogram',\n                // Some statistical charts do not currently support pivot mode\n                rangeBar: null,\n                rangeArea: null,\n                boxPlot: null,\n            },\n            // Polar charts do not support pivot mode\n            polarGroup: null,\n            // Specialized charts do not currently support pivot mode\n            specializedGroup: null,\n        };\n    }\n}\n\nexport type RangeMenuOptionName =\n    | 'chartRange'\n    | 'rangeColumnChart'\n    | 'rangeGroupedColumn'\n    | 'rangeStackedColumn'\n    | 'rangeNormalizedColumn'\n    | 'rangeBarChart'\n    | 'rangeGroupedBar'\n    | 'rangeStackedBar'\n    | 'rangeNormalizedBar'\n    | 'rangePieChart'\n    | 'rangePie'\n    | 'rangeDonut'\n    | 'rangeLineChart'\n    | 'rangeXYChart'\n    | 'rangeScatter'\n    | 'rangeBubble'\n    | 'rangeAreaChart'\n    | 'rangeArea'\n    | 'rangeStackedArea'\n    | 'rangeNormalizedArea'\n    | 'rangePolarChart'\n    | 'rangeRadarLine'\n    | 'rangeRadarArea'\n    | 'rangeNightingale'\n    | 'rangeRadialColumn'\n    | 'rangeRadialBar'\n    | 'rangeStatisticalChart'\n    | 'rangeBoxPlot'\n    | 'rangeHistogram'\n    | 'rangeRangeBar'\n    | 'rangeRangeArea'\n    | 'rangeHierarchicalChart'\n    | 'rangeTreemap'\n    | 'rangeSunburst'\n    | 'rangeSpecializedChart'\n    | 'rangeWaterfall'\n    | 'rangeHeatmap'\n    | 'rangeCombinationChart'\n    | 'rangeColumnLineCombo'\n    | 'rangeAreaColumnCombo';\n\nclass RangeMenuItemMapper implements MenuItemBuilder<RangeMenuOptionName> {\n    constructor(\n        private gos: GridOptionsService,\n        private chartService: IChartService,\n        private localeService: LocaleService\n    ) {}\n\n    getMenuItem(): MenuItemDefWithKey<RangeMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (\n            localeKey: string,\n            defaultText: string,\n            chartType: ChartType,\n            key: RangeMenuOptionName,\n            enterprise = false\n        ) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createChartFromCurrentRange(chartType),\n                _key: key,\n                _enterprise: enterprise,\n            };\n        };\n\n        return {\n            name: localeTextFunc('chartRange', 'Chart Range'),\n            _key: 'chartRange',\n            subMenu: [\n                {\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'rangeGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'rangeStackedColumn'),\n                        getMenuItem(\n                            'normalizedColumn',\n                            '100% Stacked&lrm;',\n                            'normalizedColumn',\n                            'rangeNormalizedColumn'\n                        ),\n                    ],\n                    _key: 'rangeColumnChart',\n                },\n                {\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'rangeGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'rangeStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'rangeNormalizedBar'),\n                    ],\n                    _key: 'rangeBarChart',\n                },\n                {\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'rangePie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'rangeDonut'),\n                    ],\n                    _key: 'rangePieChart',\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'rangeLineChart'),\n                {\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'rangeScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'rangeBubble'),\n                    ],\n                    _key: 'rangeXYChart',\n                },\n                {\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu: [\n                        getMenuItem('area', 'Area&lrm;', 'area', 'rangeArea'),\n                        getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'rangeStackedArea'),\n                        getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'rangeNormalizedArea'),\n                    ],\n                    _key: 'rangeAreaChart',\n                },\n                {\n                    name: localeTextFunc('polarChart', 'Polar'),\n                    subMenu: [\n                        getMenuItem('radarLine', 'Radar Line&lrm;', 'radarLine', 'rangeRadarLine'),\n                        getMenuItem('radarArea', 'Radar Area&lrm;', 'radarArea', 'rangeRadarArea'),\n                        getMenuItem('nightingale', 'Nightingale&lrm;', 'nightingale', 'rangeNightingale'),\n                        getMenuItem('radialColumn', 'Radial Column&lrm;', 'radialColumn', 'rangeRadialColumn'),\n                        getMenuItem('radialBar', 'Radial Bar&lrm;', 'radialBar', 'rangeRadialBar'),\n                    ],\n                    _key: 'rangePolarChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu: [\n                        getMenuItem('boxPlot', 'Box Plot&lrm;', 'boxPlot', 'rangeBoxPlot', true),\n                        getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'rangeHistogram', false),\n                        getMenuItem('rangeBar', 'Range Bar&lrm;', 'rangeBar', 'rangeRangeBar', true),\n                        getMenuItem('rangeArea', 'Range Area&lrm;', 'rangeArea', 'rangeRangeArea', true),\n                    ],\n                    _key: 'rangeStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                },\n                {\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu: [\n                        getMenuItem('treemap', 'Treemap&lrm;', 'treemap', 'rangeTreemap'),\n                        getMenuItem('sunburst', 'Sunburst&lrm;', 'sunburst', 'rangeSunburst'),\n                    ],\n                    _key: 'rangeHierarchicalChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('specializedChart', 'Specialized'),\n                    subMenu: [\n                        getMenuItem('heatmap', 'Heatmap&lrm;', 'heatmap', 'rangeHeatmap'),\n                        getMenuItem('waterfall', 'Waterfall&lrm;', 'waterfall', 'rangeWaterfall'),\n                    ],\n                    _key: 'rangeSpecializedChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'rangeColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'rangeAreaColumnCombo'),\n                    ],\n                    _key: 'rangeCombinationChart',\n                },\n            ],\n            icon: _createIconNoSpan('chart', this.gos, undefined),\n        };\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<RangeMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'rangeColumnChart',\n                column: 'rangeGroupedColumn',\n                stackedColumn: 'rangeStackedColumn',\n                normalizedColumn: 'rangeNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'rangeBarChart',\n                bar: 'rangeGroupedBar',\n                stackedBar: 'rangeStackedBar',\n                normalizedBar: 'rangeNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'rangePieChart',\n                pie: 'rangePie',\n                donut: 'rangeDonut',\n                doughnut: 'rangeDonut',\n            },\n            lineGroup: {\n                _key: 'rangeLineChart',\n                line: 'rangeLineChart',\n            },\n            scatterGroup: {\n                _key: 'rangeXYChart',\n                bubble: 'rangeBubble',\n                scatter: 'rangeScatter',\n            },\n            areaGroup: {\n                _key: 'rangeAreaChart',\n                area: 'rangeArea',\n                stackedArea: 'rangeStackedArea',\n                normalizedArea: 'rangeNormalizedArea',\n            },\n            polarGroup: {\n                _key: 'rangePolarChart',\n                radarLine: 'rangeRadarLine',\n                radarArea: 'rangeRadarArea',\n                nightingale: 'rangeNightingale',\n                radialColumn: 'rangeRadialColumn',\n                radialBar: 'rangeRadialBar',\n            },\n            statisticalGroup: {\n                _key: 'rangeStatisticalChart',\n                boxPlot: 'rangeBoxPlot',\n                histogram: 'rangeHistogram',\n                rangeBar: 'rangeRangeBar',\n                rangeArea: 'rangeRangeArea',\n            },\n            hierarchicalGroup: {\n                _key: 'rangeHierarchicalChart',\n                treemap: 'rangeTreemap',\n                sunburst: 'rangeSunburst',\n            },\n            specializedGroup: {\n                _key: 'rangeSpecializedChart',\n                heatmap: 'rangeHeatmap',\n                waterfall: 'rangeWaterfall',\n            },\n            combinationGroup: {\n                _key: 'rangeCombinationChart',\n                columnLineCombo: 'rangeColumnLineCombo',\n                areaColumnCombo: 'rangeAreaColumnCombo',\n                customCombo: null, // Not currently supported\n            },\n        };\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnChooserParams,\n    ColumnMenuVisibleChangedEvent,\n    FocusService,\n    IColumnChooserFactory,\n    NamedBean,\n    ShowColumnChooserParams,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\nimport { AgPrimaryCols } from '@ag-grid-enterprise/column-tool-panel';\nimport { AgDialog } from '@ag-grid-enterprise/core';\n\nimport type { MenuUtils } from './menuUtils';\n\nexport class ColumnChooserFactory extends BeanStub implements NamedBean, IColumnChooserFactory {\n    beanName = 'columnChooserFactory' as const;\n\n    private focusService: FocusService;\n    private menuUtils: MenuUtils;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    private activeColumnChooser: AgPrimaryCols | undefined;\n    private activeColumnChooserDialog: AgDialog | undefined;\n\n    public createColumnSelectPanel(\n        parent: BeanStub<any>,\n        column?: AgColumn | null,\n        draggable?: boolean,\n        params?: ColumnChooserParams\n    ): AgPrimaryCols {\n        const columnSelectPanel = parent.createManagedBean(new AgPrimaryCols());\n\n        const columnChooserParams =\n            params ?? column?.getColDef().columnChooserParams ?? column?.getColDef().columnsMenuParams ?? {};\n\n        const {\n            contractColumnSelection,\n            suppressColumnExpandAll,\n            suppressColumnFilter,\n            suppressColumnSelectAll,\n            suppressSyncLayoutWithGrid,\n            columnLayout,\n        } = columnChooserParams;\n\n        columnSelectPanel.init(\n            !!draggable,\n            this.gos.addGridCommonParams({\n                suppressColumnMove: false,\n                suppressValues: false,\n                suppressPivots: false,\n                suppressRowGroups: false,\n                suppressPivotMode: false,\n                contractColumnSelection: !!contractColumnSelection,\n                suppressColumnExpandAll: !!suppressColumnExpandAll,\n                suppressColumnFilter: !!suppressColumnFilter,\n                suppressColumnSelectAll: !!suppressColumnSelectAll,\n                suppressSyncLayoutWithGrid: !!columnLayout || !!suppressSyncLayoutWithGrid,\n                onStateUpdated: () => {},\n            }),\n            'columnMenu'\n        );\n\n        if (columnLayout) {\n            columnSelectPanel.setColumnLayout(columnLayout);\n        }\n\n        return columnSelectPanel;\n    }\n\n    public showColumnChooser({ column, chooserParams, eventSource }: ShowColumnChooserParams): void {\n        this.hideActiveColumnChooser();\n\n        const columnSelectPanel = this.createColumnSelectPanel(this, column, true, chooserParams);\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnIndex = this.visibleColsService.getAllCols().indexOf(column as AgColumn);\n        const headerPosition = column ? this.focusService.getFocusedHeader() : null;\n\n        this.activeColumnChooserDialog = this.createBean(\n            new AgDialog({\n                title: translate('chooseColumns', 'Choose Columns'),\n                component: columnSelectPanel,\n                width: 300,\n                height: 300,\n                resizable: true,\n                movable: true,\n                centered: true,\n                closable: true,\n                afterGuiAttached: () => {\n                    this.focusService.findNextFocusableElement(columnSelectPanel.getGui())?.focus();\n                    this.dispatchVisibleChangedEvent(true, column);\n                },\n                closedCallback: (event) => {\n                    const eComp = this.activeColumnChooser!.getGui();\n                    this.destroyBean(this.activeColumnChooser);\n                    this.activeColumnChooser = undefined;\n                    this.activeColumnChooserDialog = undefined;\n                    this.dispatchVisibleChangedEvent(false, column);\n                    if (column) {\n                        this.menuUtils.restoreFocusOnClose(\n                            { column, headerPosition, columnIndex, eventSource },\n                            eComp,\n                            event,\n                            true\n                        );\n                    }\n                },\n            })\n        );\n\n        this.activeColumnChooser = columnSelectPanel;\n    }\n\n    public hideActiveColumnChooser(): void {\n        if (this.activeColumnChooserDialog) {\n            this.destroyBean(this.activeColumnChooserDialog);\n        }\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, column?: AgColumn | null): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: 'columnMenuVisibleChanged',\n            visible,\n            switchingTab: false,\n            key: 'columnChooser',\n            column: column ?? null,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    FuncColsService,\n    IRowModel,\n    MenuItemDef,\n    MenuService,\n    NamedBean,\n} from '@ag-grid-community/core';\nimport { BeanStub, _removeRepeatsFromArray } from '@ag-grid-community/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\nimport type { MenuItemMapper } from './menuItemMapper';\n\nconst MENU_ITEM_SEPARATOR = 'separator';\n\nexport class ColumnMenuFactory extends BeanStub implements NamedBean {\n    beanName = 'columnMenuFactory' as const;\n\n    private menuItemMapper: MenuItemMapper;\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n    private rowModel: IRowModel;\n    private menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.menuItemMapper = beans.menuItemMapper as MenuItemMapper;\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n        this.rowModel = beans.rowModel;\n        this.menuService = beans.menuService;\n    }\n\n    public createMenu(\n        parent: BeanStub<any>,\n        column: AgColumn | undefined,\n        sourceElement: () => HTMLElement\n    ): AgMenuList {\n        const menuList = parent.createManagedBean(\n            new AgMenuList(0, {\n                column: column ?? null,\n                node: null,\n                value: null,\n            })\n        );\n\n        const menuItems = this.getMenuItems(column);\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(\n            menuItems,\n            column ?? null,\n            sourceElement,\n            'columnMenu'\n        );\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        return menuList;\n    }\n\n    private getMenuItems(column?: AgColumn): (string | MenuItemDef)[] {\n        const defaultItems = this.getDefaultMenuOptions(column);\n        let result: (string | MenuItemDef)[];\n\n        const columnMainMenuItems = column?.getColDef().mainMenuItems;\n        if (Array.isArray(columnMainMenuItems)) {\n            result = columnMainMenuItems;\n        } else if (typeof columnMainMenuItems === 'function') {\n            result = columnMainMenuItems(\n                this.gos.addGridCommonParams({\n                    column: column!,\n                    defaultItems,\n                })\n            );\n        } else {\n            const userFunc = this.gos.getCallback('getMainMenuItems');\n            if (userFunc && column) {\n                result = userFunc({\n                    column,\n                    defaultItems,\n                });\n            } else {\n                result = defaultItems;\n            }\n        }\n\n        // GUI looks weird when two separators are side by side. this can happen accidentally\n        // if we remove items from the menu then two separators can edit up adjacent.\n        _removeRepeatsFromArray(result, MENU_ITEM_SEPARATOR);\n\n        return result;\n    }\n\n    private getDefaultMenuOptions(column?: AgColumn): string[] {\n        const result: string[] = [];\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n\n        if (!column) {\n            if (!isLegacyMenuEnabled) {\n                result.push('columnChooser');\n            }\n            result.push('resetColumns');\n            return result;\n        }\n\n        const allowPinning = !column.getColDef().lockPinned;\n\n        const rowGroupCount = this.funcColsService.getRowGroupColumns().length;\n        const doingGrouping = rowGroupCount > 0;\n\n        const allowValue = column.isAllowValue();\n        const allowRowGroup = column.isAllowRowGroup();\n        const isPrimary = column.isPrimary();\n        const pivotModeOn = this.columnModel.isPivotMode();\n\n        const isInMemoryRowModel = this.rowModel.getType() === 'clientSide';\n\n        const usingTreeData = this.gos.get('treeData');\n\n        const allowValueAgg =\n            // if primary, then only allow aggValue if grouping and it's a value columns\n            (isPrimary && doingGrouping && allowValue) ||\n            // secondary columns can always have aggValue, as it means it's a pivot value column\n            !isPrimary;\n\n        if (!isLegacyMenuEnabled && column.isSortable()) {\n            const sort = column.getSort();\n            if (sort !== 'asc') {\n                result.push('sortAscending');\n            }\n            if (sort !== 'desc') {\n                result.push('sortDescending');\n            }\n            if (sort) {\n                result.push('sortUnSort');\n            }\n            result.push(MENU_ITEM_SEPARATOR);\n        }\n\n        if (this.menuService.isFilterMenuItemEnabled(column)) {\n            result.push('columnFilter');\n            result.push(MENU_ITEM_SEPARATOR);\n        }\n\n        if (allowPinning) {\n            result.push('pinSubMenu');\n        }\n\n        if (allowValueAgg) {\n            result.push('valueAggSubMenu');\n        }\n\n        if (allowPinning || allowValueAgg) {\n            result.push(MENU_ITEM_SEPARATOR);\n        }\n\n        result.push('autoSizeThis');\n        result.push('autoSizeAll');\n        result.push(MENU_ITEM_SEPARATOR);\n\n        const showRowGroup = column.getColDef().showRowGroup;\n        if (showRowGroup) {\n            result.push('rowUnGroup');\n        } else if (allowRowGroup && column.isPrimary()) {\n            if (column.isRowGroupActive()) {\n                const groupLocked = this.columnModel.isColGroupLocked(column);\n                if (!groupLocked) {\n                    result.push('rowUnGroup');\n                }\n            } else {\n                result.push('rowGroup');\n            }\n        }\n        result.push(MENU_ITEM_SEPARATOR);\n        if (!isLegacyMenuEnabled) {\n            result.push('columnChooser');\n        }\n        result.push('resetColumns');\n\n        // only add grouping expand/collapse if grouping in the InMemoryRowModel\n        // if pivoting, we only have expandable groups if grouping by 2 or more columns\n        // as the lowest level group is not expandable while pivoting.\n        // if not pivoting, then any active row group can be expanded.\n        const allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));\n\n        if (allowExpandAndContract) {\n            result.push('expandAll');\n            result.push('contractAll');\n        }\n\n        return result;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    CellPosition,\n    CellPositionUtils,\n    ColumnModel,\n    ContextMenuVisibleChangedEvent,\n    CtrlsService,\n    FocusService,\n    IAfterGuiAttachedParams,\n    IContextMenuFactory,\n    IRangeService,\n    MenuItemDef,\n    NamedBean,\n    PopupService,\n    RowNode,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    Component,\n    ModuleNames,\n    ModuleRegistry,\n    _exists,\n    _isIOSUserAgent,\n    _missingOrEmpty,\n} from '@ag-grid-community/core';\nimport type { CloseMenuEvent } from '@ag-grid-enterprise/core';\nimport { AgMenuList } from '@ag-grid-enterprise/core';\n\nimport type { MenuItemMapper } from './menuItemMapper';\nimport type { MenuUtils } from './menuUtils';\n\nconst CSS_MENU = 'ag-menu';\nconst CSS_CONTEXT_MENU_OPEN = 'ag-context-menu-open';\n\nexport class ContextMenuFactory extends BeanStub implements NamedBean, IContextMenuFactory {\n    beanName = 'contextMenuFactory' as const;\n\n    private popupService: PopupService;\n    private ctrlsService: CtrlsService;\n    private columnModel: ColumnModel;\n    private menuUtils: MenuUtils;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.popupService = beans.popupService;\n        this.ctrlsService = beans.ctrlsService;\n        this.columnModel = beans.columnModel;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.rangeService = beans.rangeService;\n    }\n\n    private activeMenu: ContextMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    private getMenuItems(\n        node: RowNode | null,\n        column: AgColumn | null,\n        value: any\n    ): (MenuItemDef | string)[] | undefined {\n        const defaultMenuOptions: string[] = [];\n\n        if (_exists(node) && ModuleRegistry.__isRegistered(ModuleNames.ClipboardModule, this.gridId)) {\n            if (column) {\n                // only makes sense if column exists, could have originated from a row\n                if (!this.gos.get('suppressCutToClipboard')) {\n                    defaultMenuOptions.push('cut');\n                }\n                defaultMenuOptions.push('copy', 'copyWithHeaders', 'copyWithGroupHeaders', 'paste', 'separator');\n            }\n        }\n\n        if (this.gos.get('enableCharts') && ModuleRegistry.__isRegistered(ModuleNames.GridChartsModule, this.gridId)) {\n            if (this.columnModel.isPivotMode()) {\n                defaultMenuOptions.push('pivotChart');\n            }\n\n            if (this.rangeService && !this.rangeService.isEmpty()) {\n                defaultMenuOptions.push('chartRange');\n            }\n        }\n\n        if (_exists(node)) {\n            // if user clicks a cell\n            const csvModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.gridId);\n            const excelModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.gridId);\n            const suppressExcel = this.gos.get('suppressExcelExport') || excelModuleMissing;\n            const suppressCsv = this.gos.get('suppressCsvExport') || csvModuleMissing;\n            const onIPad = _isIOSUserAgent();\n            const anyExport: boolean = !onIPad && (!suppressExcel || !suppressCsv);\n            if (anyExport) {\n                defaultMenuOptions.push('export');\n            }\n        }\n\n        const defaultItems = defaultMenuOptions.length ? defaultMenuOptions : undefined;\n        const columnContextMenuItems = column?.getColDef().contextMenuItems;\n\n        if (Array.isArray(columnContextMenuItems)) {\n            return columnContextMenuItems;\n        }\n\n        if (typeof columnContextMenuItems === 'function') {\n            return columnContextMenuItems(\n                this.gos.addGridCommonParams({\n                    column,\n                    node,\n                    value,\n                    defaultItems,\n                })\n            );\n        }\n\n        const userFunc = this.gos.getCallback('getContextMenuItems');\n        if (userFunc) {\n            return userFunc({ column, node, value, defaultItems });\n        }\n\n        return defaultMenuOptions;\n    }\n\n    public onContextMenu(\n        mouseEvent: MouseEvent | null,\n        touchEvent: TouchEvent | null,\n        rowNode: RowNode | null,\n        column: AgColumn | null,\n        value: any,\n        anchorToElement: HTMLElement\n    ): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) =>\n            this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement)\n        );\n    }\n\n    public showMenu(\n        node: RowNode | null,\n        column: AgColumn | null,\n        value: any,\n        mouseEvent: MouseEvent | Touch,\n        anchorToElement: HTMLElement\n    ): boolean {\n        const menuItems = this.getMenuItems(node, column, value);\n        const eGridBodyGui = this.ctrlsService.getGridBodyCtrl().getGui();\n\n        if (menuItems === undefined || _missingOrEmpty(menuItems)) {\n            return false;\n        }\n\n        const menu = new ContextMenu(menuItems, column, node, value);\n        this.createBean(menu);\n\n        const eMenuGui = menu.getGui();\n\n        const positionParams = {\n            column: column,\n            rowNode: node,\n            type: 'contextMenu',\n            mouseEvent: mouseEvent,\n            ePopup: eMenuGui,\n            // move one pixel away so that accidentally double clicking\n            // won't show the browser's contextmenu\n            nudgeY: 1,\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e) => {\n                eGridBodyGui.classList.remove(CSS_CONTEXT_MENU_OPEN);\n                this.destroyBean(menu);\n                this.dispatchVisibleChangedEvent(false, e === undefined ? 'api' : 'ui');\n            },\n            click: mouseEvent,\n            positionCallback: () => {\n                const isRtl = this.gos.get('enableRtl');\n                this.popupService.positionPopupUnderMouseEvent({\n                    ...positionParams,\n                    nudgeX: isRtl ? (eMenuGui.offsetWidth + 1) * -1 : 1,\n                });\n            },\n            // so when browser is scrolled down, or grid is scrolled, context menu stays with cell\n            anchorToElement: anchorToElement,\n            ariaLabel: translate('ariaLabelContextMenu', 'Context Menu'),\n        });\n\n        if (addPopupRes) {\n            eGridBodyGui.classList.add(CSS_CONTEXT_MENU_OPEN);\n            menu.afterGuiAttached({ container: 'contextMenu', hidePopup: addPopupRes.hideFunc });\n        }\n\n        // there should never be an active menu at this point, however it was found\n        // that you could right click a second time just 1 or 2 pixels from the first\n        // click, and another menu would pop up. so somehow the logic for closing the\n        // first menu (clicking outside should close it) was glitchy somehow. an easy\n        // way to avoid this is just remove the old context menu here if it exists.\n        if (this.activeMenu) {\n            this.hideActiveMenu();\n        }\n\n        this.activeMenu = menu;\n\n        menu.addEventListener('destroyed', () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n\n        // hide the popup if something gets selected\n        if (addPopupRes) {\n            menu.addEventListener('closeMenu', (e: CloseMenuEvent) =>\n                addPopupRes.hideFunc({\n                    mouseEvent: e.mouseEvent ?? undefined,\n                    keyboardEvent: e.keyboardEvent ?? undefined,\n                    forceHide: true,\n                })\n            );\n        }\n\n        // we check for a mousedown event because `gridApi.showContextMenu`\n        // generates a `mousedown` event to display the context menu.\n        const isApi = mouseEvent && mouseEvent instanceof MouseEvent && mouseEvent.type === 'mousedown';\n        this.dispatchVisibleChangedEvent(true, isApi ? 'api' : 'ui');\n\n        return true;\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, source: 'api' | 'ui' = 'ui'): void {\n        const displayedEvent: WithoutGridCommon<ContextMenuVisibleChangedEvent> = {\n            type: 'contextMenuVisibleChanged',\n            visible,\n            source,\n        };\n        this.eventService.dispatchEvent(displayedEvent);\n    }\n}\n\nexport type ContextMenuEvent = 'closeMenu';\n\nclass ContextMenu extends Component<ContextMenuEvent> {\n    private focusService: FocusService;\n    private menuItemMapper: MenuItemMapper;\n    private cellPositionUtils: CellPositionUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.focusService = beans.focusService;\n        this.menuItemMapper = beans.menuItemMapper as MenuItemMapper;\n        this.cellPositionUtils = beans.cellPositionUtils;\n    }\n\n    private menuList: AgMenuList | null = null;\n    private focusedCell: CellPosition | null = null;\n\n    constructor(\n        private readonly menuItems: (MenuItemDef | string)[],\n        private readonly column: AgColumn | null,\n        private readonly node: RowNode | null,\n        private readonly value: any\n    ) {\n        super(/* html */ `<div class=\"${CSS_MENU}\" role=\"presentation\"></div>`);\n    }\n\n    public postConstruct(): void {\n        const menuList = this.createManagedBean(\n            new AgMenuList(0, {\n                column: this.column,\n                node: this.node,\n                value: this.value,\n            })\n        );\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(\n            this.menuItems,\n            null,\n            () => this.getGui(),\n            'contextMenu'\n        );\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        this.appendChild(menuList);\n        this.menuList = menuList;\n\n        menuList.addEventListener('closeMenu', (e) => this.dispatchLocalEvent(e));\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        if (params.hidePopup) {\n            this.addDestroyFunc(params.hidePopup);\n        }\n\n        this.focusedCell = this.focusService.getFocusedCell();\n\n        if (this.menuList) {\n            this.focusService.focusInto(this.menuList.getGui());\n        }\n    }\n\n    private restoreFocusedCell(): void {\n        const currentFocusedCell = this.focusService.getFocusedCell();\n\n        if (\n            currentFocusedCell &&\n            this.focusedCell &&\n            this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)\n        ) {\n            const { rowIndex, rowPinned, column } = this.focusedCell;\n            const doc = this.gos.getDocument();\n            const activeEl = this.gos.getActiveDomElement();\n\n            if (!activeEl || activeEl === doc.body) {\n                this.focusService.setFocusedCell({\n                    rowIndex,\n                    column,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: !this.focusService.isKeyboardMode(),\n                });\n            }\n        }\n    }\n\n    public override destroy(): void {\n        this.restoreFocusedCell();\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    AgEvent,\n    Bean,\n    BeanCollection,\n    ColumnMenuTab,\n    ColumnMenuVisibleChangedEvent,\n    ComponentEvent,\n    ContainerType,\n    CtrlsService,\n    FilterManager,\n    FocusService,\n    IAfterGuiAttachedParams,\n    IMenuFactory,\n    MenuService,\n    NamedBean,\n    PopupEventParams,\n    PopupService,\n    VisibleColsService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    BeanStub,\n    Component,\n    FilterWrapperComp,\n    ModuleNames,\n    ModuleRegistry,\n    RefPlaceholder,\n    _createIconNoSpan,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport type { AgMenuList, CloseMenuEvent, TabbedItem } from '@ag-grid-enterprise/core';\nimport { TabbedLayout } from '@ag-grid-enterprise/core';\n\nimport type { ColumnChooserFactory } from './columnChooserFactory';\nimport type { ColumnMenuFactory } from './columnMenuFactory';\nimport type { MenuRestoreFocusParams, MenuUtils } from './menuUtils';\n\nexport interface TabSelectedEvent extends AgEvent<'tabSelected'> {\n    key: string;\n}\n\ninterface EnterpriseColumnMenu extends Bean {\n    getGui(): HTMLElement;\n    showTab?(tab: string): void;\n    afterGuiAttached(params?: IAfterGuiAttachedParams): void;\n    showTabBasedOnPreviousSelection?(): void;\n}\n\nconst TAB_FILTER = 'filterMenuTab' as const;\nconst TAB_GENERAL = 'generalMenuTab' as const;\nconst TAB_COLUMNS = 'columnsMenuTab' as const;\nconst TABS_DEFAULT: ColumnMenuTab[] = [TAB_GENERAL, TAB_FILTER, TAB_COLUMNS];\n\nexport class EnterpriseMenuFactory extends BeanStub implements NamedBean, IMenuFactory {\n    beanName = 'enterpriseMenuFactory' as const;\n\n    private popupService: PopupService;\n    private focusService: FocusService;\n    private ctrlsService: CtrlsService;\n    private visibleColsService: VisibleColsService;\n    private filterManager?: FilterManager;\n    private menuUtils: MenuUtils;\n    private menuService: MenuService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.popupService = beans.popupService;\n        this.focusService = beans.focusService;\n        this.ctrlsService = beans.ctrlsService;\n        this.visibleColsService = beans.visibleColsService;\n        this.filterManager = beans.filterManager;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.menuService = beans.menuService;\n    }\n\n    private lastSelectedTab: string;\n    private activeMenu: EnterpriseColumnMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    public showMenuAfterMouseEvent(\n        column: AgColumn | undefined,\n        mouseEvent: MouseEvent | Touch,\n        containerType: ContainerType,\n        filtersOnly?: boolean\n    ): void {\n        const defaultTab = filtersOnly ? 'filterMenuTab' : undefined;\n        this.showMenu(\n            column,\n            (menu: EnterpriseColumnMenu) => {\n                const ePopup = menu.getGui();\n\n                this.popupService.positionPopupUnderMouseEvent({\n                    type: containerType,\n                    column,\n                    mouseEvent,\n                    ePopup,\n                });\n\n                if (defaultTab) {\n                    menu.showTab?.(defaultTab);\n                }\n                this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n            },\n            containerType,\n            defaultTab,\n            undefined,\n            mouseEvent.target as HTMLElement\n        );\n    }\n\n    public showMenuAfterButtonClick(\n        column: AgColumn | undefined,\n        eventSource: HTMLElement,\n        containerType: ContainerType,\n        filtersOnly?: boolean\n    ): void {\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gos.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const defaultTab: ColumnMenuTab | undefined = filtersOnly ? 'filterMenuTab' : undefined;\n        const restrictToTabs = defaultTab ? [defaultTab] : undefined;\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        const nudgeX = (isLegacyMenuEnabled ? 9 : 4) * multiplier;\n        const nudgeY = isLegacyMenuEnabled ? -23 : 4;\n\n        this.showMenu(\n            column,\n            (menu: EnterpriseColumnMenu) => {\n                const ePopup = menu.getGui();\n\n                this.popupService.positionPopupByComponent({\n                    type: containerType,\n                    column,\n                    eventSource,\n                    ePopup,\n                    alignSide,\n                    nudgeX,\n                    nudgeY,\n                    position: 'under',\n                    keepWithinBounds: true,\n                });\n\n                if (defaultTab) {\n                    menu.showTab?.(defaultTab);\n                }\n                this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n            },\n            containerType,\n            defaultTab,\n            restrictToTabs,\n            eventSource\n        );\n    }\n\n    private showMenu(\n        column: AgColumn | undefined,\n        positionCallback: (menu: EnterpriseColumnMenu) => void,\n        containerType: ContainerType,\n        defaultTab?: string,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): void {\n        const { menu, eMenuGui, anchorToElement, restoreFocusParams } = this.getMenuParams(\n            column,\n            restrictToTabs,\n            eventSource\n        );\n        const closedFuncs: ((e?: Event) => void)[] = [];\n\n        closedFuncs.push((e) => {\n            const eComp = menu.getGui();\n            this.destroyBean(menu);\n            if (column) {\n                column.setMenuVisible(false, 'contextMenu');\n                // if we don't have a column, then the menu wasn't launched via keyboard navigation\n                this.menuUtils.restoreFocusOnClose(restoreFocusParams, eComp, e);\n            }\n        });\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        // need to show filter before positioning, as only after filter\n        // is visible can we find out what the width of it is\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e?: Event) => {\n                // menu closed callback\n                closedFuncs.forEach((f) => f(e));\n                this.dispatchVisibleChangedEvent(false, false, column, defaultTab);\n            },\n            afterGuiAttached: (params) =>\n                menu.afterGuiAttached(Object.assign({}, { container: containerType }, params)),\n            // if defaultTab is not present, positionCallback will be called\n            // after `showTabBasedOnPreviousSelection` is called.\n            positionCallback: defaultTab ? () => positionCallback(menu) : undefined,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu'),\n        });\n\n        if (!defaultTab) {\n            menu.showTabBasedOnPreviousSelection?.();\n            // reposition the menu because the method above could load\n            // an element that is bigger than enterpriseMenu header.\n            positionCallback(menu);\n        }\n\n        if (this.menuService.isColumnMenuAnchoringEnabled()) {\n            // if user starts showing / hiding columns, or otherwise move the underlying column\n            // for this menu, we want to stop tracking the menu with the column position. otherwise\n            // the menu would move as the user is using the columns tab inside the menu.\n            const stopAnchoringPromise = this.popupService.setPopupPositionRelatedToElement(eMenuGui, anchorToElement);\n\n            if (stopAnchoringPromise && column) {\n                this.addStopAnchoring(stopAnchoringPromise, column, closedFuncs);\n            }\n        }\n\n        menu.addEventListener('tabSelected', (event: any) => {\n            this.dispatchVisibleChangedEvent(false, true, column);\n            this.lastSelectedTab = event.key;\n            this.dispatchVisibleChangedEvent(true, true, column);\n        });\n\n        column?.setMenuVisible(true, 'contextMenu');\n\n        this.activeMenu = menu;\n\n        menu.addEventListener('destroyed', () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n    }\n\n    private addStopAnchoring(\n        stopAnchoringPromise: AgPromise<() => void>,\n        column: AgColumn,\n        closedFuncsArr: (() => void)[]\n    ) {\n        stopAnchoringPromise.then((stopAnchoringFunc: () => void) => {\n            column.addEventListener('leftChanged', stopAnchoringFunc);\n            column.addEventListener('visibleChanged', stopAnchoringFunc);\n\n            closedFuncsArr.push(() => {\n                column.removeEventListener('leftChanged', stopAnchoringFunc);\n                column.removeEventListener('visibleChanged', stopAnchoringFunc);\n            });\n        });\n    }\n\n    private getMenuParams(column: AgColumn | undefined, restrictToTabs?: ColumnMenuTab[], eventSource?: HTMLElement) {\n        const restoreFocusParams = {\n            column,\n            headerPosition: this.focusService.getFocusedHeader(),\n            columnIndex: this.visibleColsService.getAllCols().indexOf(column as AgColumn),\n            eventSource,\n        };\n        const menu = this.createMenu(column, restoreFocusParams, restrictToTabs, eventSource);\n        return {\n            menu,\n            eMenuGui: menu.getGui(),\n            anchorToElement: eventSource || this.ctrlsService.getGridBodyCtrl().getGui(),\n            restoreFocusParams,\n        };\n    }\n\n    private createMenu(\n        column: AgColumn | undefined,\n        restoreFocusParams: MenuRestoreFocusParams,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): EnterpriseColumnMenu & BeanStub<TabbedColumnMenuEvent | ComponentEvent> {\n        if (this.menuService.isLegacyMenuEnabled()) {\n            return this.createBean(\n                new TabbedColumnMenu(column, restoreFocusParams, this.lastSelectedTab, restrictToTabs, eventSource)\n            );\n        } else {\n            return this.createBean(new ColumnContextMenu(column, restoreFocusParams, eventSource));\n        }\n    }\n\n    private dispatchVisibleChangedEvent(\n        visible: boolean,\n        switchingTab: boolean,\n        column?: AgColumn,\n        defaultTab?: string\n    ): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: 'columnMenuVisibleChanged',\n            visible,\n            switchingTab,\n            key: (this.lastSelectedTab ??\n                defaultTab ??\n                (this.menuService.isLegacyMenuEnabled() ? TAB_GENERAL : 'columnMenu')) as any,\n            column: column ?? null,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isMenuEnabled(column: AgColumn): boolean {\n        if (!this.menuService.isLegacyMenuEnabled()) {\n            return true;\n        }\n        // Determine whether there are any tabs to show in the menu, given that the filter tab may be hidden\n        const isFilterDisabled = !this.filterManager?.isFilterAllowed(column);\n        const tabs = column.getColDef().menuTabs ?? TABS_DEFAULT;\n        const numActiveTabs = isFilterDisabled && tabs.includes(TAB_FILTER) ? tabs.length - 1 : tabs.length;\n        return numActiveTabs > 0;\n    }\n\n    public showMenuAfterContextMenuEvent(\n        column: AgColumn<any> | undefined,\n        mouseEvent?: MouseEvent | null,\n        touchEvent?: TouchEvent | null\n    ): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) => {\n            this.showMenuAfterMouseEvent(column, eventOrTouch, 'columnMenu');\n            return true;\n        });\n    }\n}\n\ntype TabbedColumnMenuEvent = 'tabSelected' | 'and';\nclass TabbedColumnMenu extends BeanStub<TabbedColumnMenuEvent> implements EnterpriseColumnMenu {\n    private filterManager?: FilterManager;\n    private columnChooserFactory: ColumnChooserFactory;\n    private columnMenuFactory: ColumnMenuFactory;\n    private menuUtils: MenuUtils;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.filterManager = beans.filterManager;\n        this.columnChooserFactory = beans.columnChooserFactory as ColumnChooserFactory;\n        this.columnMenuFactory = beans.columnMenuFactory as ColumnMenuFactory;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n    }\n\n    private tabbedLayout: TabbedLayout;\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    private tabItemFilter: TabbedItem;\n    private tabItemGeneral: TabbedItem;\n    private tabItemColumns: TabbedItem;\n\n    private tabFactories: { [p: string]: () => TabbedItem } = {};\n    private includeChecks: { [p: string]: () => boolean } = {};\n\n    private filterComp?: FilterWrapperComp | null;\n\n    constructor(\n        private readonly column: AgColumn | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly initialSelection: string,\n        private readonly restrictTo?: ColumnMenuTab[],\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super();\n        this.tabFactories[TAB_GENERAL] = this.createMainPanel.bind(this);\n        this.tabFactories[TAB_FILTER] = this.createFilterPanel.bind(this);\n        this.tabFactories[TAB_COLUMNS] = this.createColumnsPanel.bind(this);\n\n        this.includeChecks[TAB_GENERAL] = () => true;\n        this.includeChecks[TAB_FILTER] = () => (column ? !!this.filterManager?.isFilterAllowed(column) : false);\n        this.includeChecks[TAB_COLUMNS] = () => true;\n    }\n\n    public postConstruct(): void {\n        const tabs = this.getTabsToCreate().map((name) => this.createTab(name));\n\n        this.tabbedLayout = new TabbedLayout({\n            items: tabs,\n            cssClass: 'ag-menu',\n            onActiveItemClicked: this.onHidePopup.bind(this),\n            onItemClicked: this.onTabItemClicked.bind(this),\n        });\n\n        this.createBean(this.tabbedLayout);\n\n        if (this.mainMenuList) {\n            this.mainMenuList.setParentComponent(this.tabbedLayout);\n        }\n\n        this.addDestroyFunc(() => this.destroyBean(this.tabbedLayout));\n    }\n\n    private getTabsToCreate() {\n        if (this.restrictTo) {\n            return this.restrictTo;\n        }\n\n        return (this.column?.getColDef().menuTabs ?? TABS_DEFAULT)\n            .filter((tabName) => this.isValidMenuTabItem(tabName))\n            .filter((tabName) => this.isNotSuppressed(tabName))\n            .filter((tabName) => this.isModuleLoaded(tabName));\n    }\n\n    private isModuleLoaded(menuTabName: string): boolean {\n        if (menuTabName === TAB_COLUMNS) {\n            return ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.gridId);\n        }\n\n        return true;\n    }\n\n    private isValidMenuTabItem(menuTabName: ColumnMenuTab): boolean {\n        let isValid: boolean = true;\n        let itemsToConsider = TABS_DEFAULT;\n\n        if (this.restrictTo != null) {\n            isValid = this.restrictTo.indexOf(menuTabName) > -1;\n            itemsToConsider = this.restrictTo;\n        }\n\n        isValid = isValid && TABS_DEFAULT.indexOf(menuTabName) > -1;\n\n        if (!isValid) {\n            _warnOnce(\n                `Trying to render an invalid menu item '${menuTabName}'. Check that your 'menuTabs' contains one of [${itemsToConsider}]`\n            );\n        }\n\n        return isValid;\n    }\n\n    private isNotSuppressed(menuTabName: string): boolean {\n        return this.includeChecks[menuTabName]();\n    }\n\n    private createTab(name: string): TabbedItem {\n        return this.tabFactories[name]();\n    }\n\n    public showTabBasedOnPreviousSelection(): void {\n        // show the tab the user was on last time they had a menu open\n        this.showTab(this.initialSelection);\n    }\n\n    public showTab(toShow: string) {\n        if (this.tabItemColumns && toShow === TAB_COLUMNS) {\n            this.tabbedLayout.showItem(this.tabItemColumns);\n        } else if (this.tabItemFilter && toShow === TAB_FILTER) {\n            this.tabbedLayout.showItem(this.tabItemFilter);\n        } else if (this.tabItemGeneral && toShow === TAB_GENERAL) {\n            this.tabbedLayout.showItem(this.tabItemGeneral);\n        } else {\n            this.tabbedLayout.showFirstItem();\n        }\n    }\n\n    private onTabItemClicked(event: { item: TabbedItem }): void {\n        let key: string | null = null;\n\n        switch (event.item) {\n            case this.tabItemColumns:\n                key = TAB_COLUMNS;\n                break;\n            case this.tabItemFilter:\n                key = TAB_FILTER;\n                break;\n            case this.tabItemGeneral:\n                key = TAB_GENERAL;\n                break;\n        }\n\n        if (key) {\n            this.activateTab(key);\n        }\n    }\n\n    private activateTab(tab: string): void {\n        const ev: TabSelectedEvent = {\n            type: 'tabSelected',\n            key: tab,\n        };\n        this.dispatchLocalEvent(ev);\n    }\n\n    private createMainPanel(): TabbedItem {\n        this.mainMenuList = this.columnMenuFactory.createMenu(\n            this,\n            this.column,\n            () => this.sourceElement ?? this.getGui()\n        );\n        this.mainMenuList.addEventListener('closeMenu', this.onHidePopup.bind(this));\n\n        this.tabItemGeneral = {\n            title: _createIconNoSpan('menu', this.gos, this.column)!,\n            titleLabel: TAB_GENERAL.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(this.mainMenuList.getGui()),\n            name: TAB_GENERAL,\n        };\n\n        return this.tabItemGeneral;\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    private createFilterPanel(): TabbedItem {\n        const comp = this.column ? this.createBean(new FilterWrapperComp(this.column, 'COLUMN_MENU')) : null;\n        this.filterComp = comp;\n        if (!comp?.hasFilter()) {\n            throw new Error('AG Grid - Unable to instantiate filter');\n        }\n\n        const afterAttachedCallback = (params: IAfterGuiAttachedParams) => comp.afterGuiAttached(params);\n\n        const afterDetachedCallback = () => comp.afterGuiDetached();\n\n        this.tabItemFilter = {\n            title: _createIconNoSpan('filter', this.gos, this.column)!,\n            titleLabel: TAB_FILTER.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(comp?.getGui()) as AgPromise<HTMLElement>,\n            afterAttachedCallback,\n            afterDetachedCallback,\n            name: TAB_FILTER,\n        };\n\n        return this.tabItemFilter;\n    }\n\n    private createColumnsPanel(): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-menu-column-select-wrapper');\n\n        const columnSelectPanel = this.columnChooserFactory.createColumnSelectPanel(this, this.column);\n\n        const columnSelectPanelGui = columnSelectPanel.getGui();\n        columnSelectPanelGui.classList.add('ag-menu-column-select');\n        eWrapperDiv.appendChild(columnSelectPanelGui);\n\n        this.tabItemColumns = {\n            title: _createIconNoSpan('columns', this.gos, this.column)!, //createColumnsIcon(),\n            titleLabel: TAB_COLUMNS.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            name: TAB_COLUMNS,\n        };\n\n        return this.tabItemColumns;\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        const { container, hidePopup } = params;\n\n        this.tabbedLayout.setAfterAttachedParams({ container, hidePopup });\n\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.tabbedLayout.getGui();\n    }\n\n    public override destroy(): void {\n        super.destroy();\n        // Needs to be destroyed last to ensure that `afterGuiDetached` runs\n        this.destroyBean(this.filterComp);\n    }\n}\n\nclass ColumnContextMenu extends Component implements EnterpriseColumnMenu {\n    private columnMenuFactory: ColumnMenuFactory;\n    private menuUtils: MenuUtils;\n    private focusService: FocusService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnMenuFactory = beans.columnMenuFactory as ColumnMenuFactory;\n        this.menuUtils = beans.menuUtils as MenuUtils;\n        this.focusService = beans.focusService;\n    }\n\n    private readonly eColumnMenu: HTMLElement = RefPlaceholder;\n\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(\n        private readonly column: AgColumn | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super(/* html */ `\n            <div data-ref=\"eColumnMenu\" role=\"presentation\" class=\"ag-menu ag-column-menu\"></div>\n        `);\n    }\n\n    public postConstruct(): void {\n        this.mainMenuList = this.columnMenuFactory.createMenu(\n            this,\n            this.column,\n            () => this.sourceElement ?? this.getGui()\n        );\n        this.mainMenuList.addEventListener('closeMenu', this.onHidePopup.bind(this));\n        this.eColumnMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}\n", "import type { AgColumn, BeanCollection, ColumnChooserParams, IContextMenuParams } from '@ag-grid-community/core';\n\nexport function showContextMenu(beans: BeanCollection, params?: IContextMenuParams) {\n    const { rowNode, column, value, x, y } = params || {};\n    let { x: clientX, y: clientY } = beans.menuService.getContextMenuPosition(rowNode, column as AgColumn);\n\n    if (x != null) {\n        clientX = x;\n    }\n\n    if (y != null) {\n        clientY = y;\n    }\n\n    beans.menuService.showContextMenu({\n        mouseEvent: new MouseEvent('mousedown', { clientX, clientY }),\n        rowNode,\n        column,\n        value,\n    });\n}\n\nexport function showColumnChooser(beans: BeanCollection, params?: ColumnChooserParams): void {\n    beans.menuService.showColumnChooser({ chooserParams: params });\n}\n\nexport function hideColumnChooser(beans: BeanCollection): void {\n    beans.menuService.hideColumnChooser();\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ColumnApplyStateService,\n    ColumnAutosizeService,\n    ColumnEventType,\n    ColumnModel,\n    ColumnNameService,\n    FocusService,\n    FuncColsService,\n    IAggFuncService,\n    IClipboardService,\n    ICsvCreator,\n    IExcelCreator,\n    IExpansionService,\n    MenuItemDef,\n    MenuService,\n    NamedBean,\n    RowPositionUtils,\n    SortController,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    ModuleNames,\n    ModuleRegistry,\n    _createIconNoSpan,\n    _escapeString,\n    _exists,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { ChartMenuItemMapper } from './chartMenuItemMapper';\n\nexport class MenuItemMapper extends BeanStub implements NamedBean {\n    beanName = 'menuItemMapper' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private columnApplyStateService: ColumnApplyStateService;\n    private funcColsService: FuncColsService;\n    private focusService: FocusService;\n    private rowPositionUtils: RowPositionUtils;\n    private chartMenuItemMapper: ChartMenuItemMapper;\n    private menuService: MenuService;\n    private sortController: SortController;\n    private columnAutosizeService: ColumnAutosizeService;\n    private expansionService: IExpansionService;\n    private clipboardService?: IClipboardService;\n    private aggFuncService?: IAggFuncService;\n    private csvCreator?: ICsvCreator;\n    private excelCreator?: IExcelCreator;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.columnApplyStateService = beans.columnApplyStateService;\n        this.funcColsService = beans.funcColsService;\n        this.focusService = beans.focusService;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.chartMenuItemMapper = beans.chartMenuItemMapper as ChartMenuItemMapper;\n        this.menuService = beans.menuService;\n        this.sortController = beans.sortController;\n        this.columnAutosizeService = beans.columnAutosizeService;\n        this.expansionService = beans.expansionService;\n        this.clipboardService = beans.clipboardService;\n        this.aggFuncService = beans.aggFuncService;\n        this.csvCreator = beans.csvCreator;\n        this.excelCreator = beans.excelCreator;\n    }\n\n    public mapWithStockItems(\n        originalList: (MenuItemDef | string)[],\n        column: AgColumn | null,\n        sourceElement: () => HTMLElement,\n        source: ColumnEventType\n    ): (MenuItemDef | string)[] {\n        if (!originalList) {\n            return [];\n        }\n\n        const resultList: (MenuItemDef | string)[] = [];\n\n        originalList.forEach((menuItemOrString) => {\n            let result: MenuItemDef | string | null;\n\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, column, sourceElement, source);\n            } else {\n                // Spread to prevent leaking mapped subMenus back into the original menuItem\n                result = { ...menuItemOrString };\n            }\n            // if no mapping, can happen when module is not loaded but user tries to use module anyway\n            if (!result) {\n                return;\n            }\n\n            const resultDef = result as MenuItemDef;\n            const { subMenu } = resultDef;\n\n            if (subMenu && subMenu instanceof Array) {\n                resultDef.subMenu = this.mapWithStockItems(subMenu, column, sourceElement, source);\n            }\n\n            if (result != null) {\n                resultList.push(result);\n            }\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(\n        key: string,\n        column: AgColumn | null,\n        sourceElement: () => HTMLElement,\n        source: ColumnEventType\n    ): MenuItemDef | string | null {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const skipHeaderOnAutoSize = this.gos.get('skipHeaderOnAutoSize');\n\n        switch (key) {\n            case 'pinSubMenu':\n                return {\n                    name: localeTextFunc('pinColumn', 'Pin Column'),\n                    icon: _createIconNoSpan('menuPin', this.gos, null),\n                    subMenu: ['clearPinned', 'pinLeft', 'pinRight'],\n                };\n            case 'pinLeft':\n                return {\n                    name: localeTextFunc('pinLeft', 'Pin Left'),\n                    action: () => this.columnModel.setColsPinned([column], 'left', source),\n                    checked: !!column && column.isPinnedLeft(),\n                };\n            case 'pinRight':\n                return {\n                    name: localeTextFunc('pinRight', 'Pin Right'),\n                    action: () => this.columnModel.setColsPinned([column], 'right', source),\n                    checked: !!column && column.isPinnedRight(),\n                };\n            case 'clearPinned':\n                return {\n                    name: localeTextFunc('noPin', 'No Pin'),\n                    action: () => this.columnModel.setColsPinned([column], null, source),\n                    checked: !!column && !column.isPinned(),\n                };\n            case 'valueAggSubMenu':\n                if (\n                    ModuleRegistry.__assertRegistered(\n                        ModuleNames.RowGroupingModule,\n                        'Aggregation from Menu',\n                        this.gridId\n                    )\n                ) {\n                    if (!column?.isPrimary() && !column?.getColDef().pivotValueColumn) {\n                        return null;\n                    }\n\n                    return {\n                        name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n                        icon: _createIconNoSpan('menuValue', this.gos, null),\n                        subMenu: this.createAggregationSubMenu(column!, this.aggFuncService!),\n                    };\n                } else {\n                    return null;\n                }\n            case 'autoSizeThis':\n                return {\n                    name: localeTextFunc('autosizeThisColumn', 'Autosize This Column'),\n                    action: () => this.columnAutosizeService.autoSizeColumn(column, source, skipHeaderOnAutoSize),\n                };\n            case 'autoSizeAll':\n                return {\n                    name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n                    action: () => this.columnAutosizeService.autoSizeAllColumns(source, skipHeaderOnAutoSize),\n                };\n            case 'rowGroup':\n                return {\n                    name:\n                        localeTextFunc('groupBy', 'Group by') +\n                        ' ' +\n                        _escapeString(this.columnNameService.getDisplayNameForColumn(column, 'header')),\n                    disabled:\n                        this.gos.get('functionsReadOnly') ||\n                        column?.isRowGroupActive() ||\n                        !column?.getColDef().enableRowGroup,\n                    action: () => this.funcColsService.addRowGroupColumns([column], source),\n                    icon: _createIconNoSpan('menuAddRowGroup', this.gos, null),\n                };\n            case 'rowUnGroup': {\n                const icon = _createIconNoSpan('menuRemoveRowGroup', this.gos, null);\n                const showRowGroup = column?.getColDef().showRowGroup;\n                const lockedGroups = this.gos.get('groupLockGroupColumns');\n                // Handle single auto group column\n                if (showRowGroup === true) {\n                    return {\n                        name: localeTextFunc('ungroupAll', 'Un-Group All'),\n                        disabled:\n                            this.gos.get('functionsReadOnly') ||\n                            lockedGroups === -1 ||\n                            lockedGroups >= this.funcColsService.getRowGroupColumns().length,\n                        action: () =>\n                            this.funcColsService.setRowGroupColumns(\n                                this.funcColsService.getRowGroupColumns().slice(0, lockedGroups),\n                                source\n                            ),\n                        icon: icon,\n                    };\n                }\n                // Handle multiple auto group columns\n                if (typeof showRowGroup === 'string') {\n                    const underlyingColumn = this.columnModel.getColDefCol(showRowGroup);\n                    const ungroupByName =\n                        underlyingColumn != null\n                            ? _escapeString(this.columnNameService.getDisplayNameForColumn(underlyingColumn, 'header'))\n                            : showRowGroup;\n                    return {\n                        name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + ungroupByName,\n                        disabled:\n                            this.gos.get('functionsReadOnly') ||\n                            (underlyingColumn != null && this.columnModel.isColGroupLocked(underlyingColumn)),\n                        action: () => this.funcColsService.removeRowGroupColumns([showRowGroup], source),\n                        icon: icon,\n                    };\n                }\n                // Handle primary column\n                return {\n                    name:\n                        localeTextFunc('ungroupBy', 'Un-Group by') +\n                        ' ' +\n                        _escapeString(this.columnNameService.getDisplayNameForColumn(column, 'header')),\n                    disabled:\n                        this.gos.get('functionsReadOnly') ||\n                        !column?.isRowGroupActive() ||\n                        !column?.getColDef().enableRowGroup ||\n                        this.columnModel.isColGroupLocked(column),\n                    action: () => this.funcColsService.removeRowGroupColumns([column], source),\n                    icon: icon,\n                };\n            }\n            case 'resetColumns':\n                return {\n                    name: localeTextFunc('resetColumns', 'Reset Columns'),\n                    action: () => this.columnApplyStateService.resetColumnState(source),\n                };\n            case 'expandAll':\n                return {\n                    name: localeTextFunc('expandAll', 'Expand All Row Groups'),\n                    action: () => this.expansionService.expandAll(true),\n                };\n            case 'contractAll':\n                return {\n                    name: localeTextFunc('collapseAll', 'Collapse All Row Groups'),\n                    action: () => this.expansionService.expandAll(false),\n                };\n            case 'copy':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy from Menu', this.gridId)) {\n                    return {\n                        name: localeTextFunc('copy', 'Copy'),\n                        shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n                        icon: _createIconNoSpan('clipboardCopy', this.gos, null),\n                        action: () => this.clipboardService!.copyToClipboard(),\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithHeaders':\n                if (\n                    ModuleRegistry.__assertRegistered(\n                        ModuleNames.ClipboardModule,\n                        'Copy with Headers from Menu',\n                        this.gridId\n                    )\n                ) {\n                    return {\n                        name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _createIconNoSpan('clipboardCopy', this.gos, null),\n                        action: () => this.clipboardService!.copyToClipboard({ includeHeaders: true }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithGroupHeaders':\n                if (\n                    ModuleRegistry.__assertRegistered(\n                        ModuleNames.ClipboardModule,\n                        'Copy with Group Headers from Menu',\n                        this.gridId\n                    )\n                ) {\n                    return {\n                        name: localeTextFunc('copyWithGroupHeaders', 'Copy with Group Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _createIconNoSpan('clipboardCopy', this.gos, null),\n                        action: () =>\n                            this.clipboardService!.copyToClipboard({ includeHeaders: true, includeGroupHeaders: true }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'cut':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Cut from Menu', this.gridId)) {\n                    const focusedCell = this.focusService.getFocusedCell();\n                    const rowNode = focusedCell ? this.rowPositionUtils.getRowNode(focusedCell) : null;\n                    const isEditable = rowNode ? focusedCell?.column.isCellEditable(rowNode) : false;\n                    return {\n                        name: localeTextFunc('cut', 'Cut'),\n                        shortcut: localeTextFunc('ctrlX', 'Ctrl+X'),\n                        icon: _createIconNoSpan('clipboardCut', this.gos, null),\n                        disabled: !isEditable || this.gos.get('suppressCutToClipboard'),\n                        action: () => this.clipboardService!.cutToClipboard(undefined, 'contextMenu'),\n                    };\n                } else {\n                    return null;\n                }\n            case 'paste':\n                if (\n                    ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Paste from Clipboard', this.gridId)\n                ) {\n                    return {\n                        name: localeTextFunc('paste', 'Paste'),\n                        shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n                        disabled: true,\n                        icon: _createIconNoSpan('clipboardPaste', this.gos, null),\n                        action: () => this.clipboardService!.pasteFromClipboard(),\n                    };\n                } else {\n                    return null;\n                }\n            case 'export': {\n                const exportSubMenuItems: string[] = [];\n\n                const csvModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.gridId);\n                const excelModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.gridId);\n\n                if (!this.gos.get('suppressCsvExport') && csvModuleLoaded) {\n                    exportSubMenuItems.push('csvExport');\n                }\n                if (!this.gos.get('suppressExcelExport') && excelModuleLoaded) {\n                    exportSubMenuItems.push('excelExport');\n                }\n                return {\n                    name: localeTextFunc('export', 'Export'),\n                    subMenu: exportSubMenuItems,\n                    icon: _createIconNoSpan('save', this.gos, null),\n                };\n            }\n            case 'csvExport':\n                return {\n                    name: localeTextFunc('csvExport', 'CSV Export'),\n                    icon: _createIconNoSpan('csvExport', this.gos, null),\n                    action: () => this.csvCreator?.exportDataAsCsv(),\n                };\n            case 'excelExport':\n                return {\n                    name: localeTextFunc('excelExport', 'Excel Export'),\n                    icon: _createIconNoSpan('excelExport', this.gos, null),\n                    action: () => this.excelCreator?.exportDataAsExcel(),\n                };\n            case 'separator':\n                return 'separator';\n            case 'pivotChart':\n            case 'chartRange':\n                return this.chartMenuItemMapper.getChartItems(key) ?? null;\n            case 'columnFilter':\n                if (column) {\n                    return {\n                        name: localeTextFunc('columnFilter', 'Column Filter'),\n                        icon: _createIconNoSpan('filter', this.gos, null),\n                        action: () =>\n                            this.menuService.showFilterMenu({\n                                column,\n                                buttonElement: sourceElement(),\n                                containerType: 'columnFilter',\n                                positionBy: 'button',\n                            }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'columnChooser':\n                if (ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.gridId)) {\n                    return {\n                        name: localeTextFunc('columnChooser', 'Choose Columns'),\n                        icon: _createIconNoSpan('columns', this.gos, null),\n                        action: () => this.menuService.showColumnChooser({ column, eventSource: sourceElement() }),\n                    };\n                } else {\n                    return null;\n                }\n            case 'sortAscending':\n                return {\n                    name: localeTextFunc('sortAscending', 'Sort Ascending'),\n                    icon: _createIconNoSpan('sortAscending', this.gos, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'asc', false, source),\n                };\n            case 'sortDescending':\n                return {\n                    name: localeTextFunc('sortDescending', 'Sort Descending'),\n                    icon: _createIconNoSpan('sortDescending', this.gos, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'desc', false, source),\n                };\n            case 'sortUnSort':\n                return {\n                    name: localeTextFunc('sortUnSort', 'Clear Sort'),\n                    icon: _createIconNoSpan('sortUnSort', this.gos, null),\n                    action: () => this.sortController.setSortForColumn(column!, null, false, source),\n                };\n            default: {\n                _warnOnce(`unknown menu item type ${key}`);\n                return null;\n            }\n        }\n    }\n\n    private createAggregationSubMenu(column: AgColumn, aggFuncService: IAggFuncService): MenuItemDef[] {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let columnToUse: AgColumn | undefined;\n        if (column.isPrimary()) {\n            columnToUse = column;\n        } else {\n            const pivotValueColumn = column.getColDef().pivotValueColumn as AgColumn;\n            columnToUse = _exists(pivotValueColumn) ? pivotValueColumn : undefined;\n        }\n\n        const result: MenuItemDef[] = [];\n        if (columnToUse) {\n            const columnIsAlreadyAggValue = columnToUse.isValueActive();\n            const funcNames = aggFuncService.getFuncNames(columnToUse);\n\n            result.push({\n                name: localeTextFunc('noAggregation', 'None'),\n                action: () => {\n                    this.funcColsService.removeValueColumns([columnToUse!], 'contextMenu');\n                    this.funcColsService.setColumnAggFunc(columnToUse, undefined, 'contextMenu');\n                },\n                checked: !columnIsAlreadyAggValue,\n            });\n\n            funcNames.forEach((funcName) => {\n                result.push({\n                    name: localeTextFunc(funcName, aggFuncService.getDefaultFuncLabel(funcName)),\n                    action: () => {\n                        this.funcColsService.setColumnAggFunc(columnToUse, funcName, 'contextMenu');\n                        this.funcColsService.addValueColumns([columnToUse!], 'contextMenu');\n                    },\n                    checked: columnIsAlreadyAggValue && columnToUse!.getAggFunc() === funcName,\n                });\n            });\n        }\n\n        return result;\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    FocusService,\n    HeaderNavigationService,\n    HeaderPosition,\n    NamedBean,\n    PopupEventParams,\n    VisibleColsService,\n} from '@ag-grid-community/core';\nimport { BeanStub, _isVisible, _last } from '@ag-grid-community/core';\nimport type { CloseMenuEvent } from '@ag-grid-enterprise/core';\n\nexport interface MenuRestoreFocusParams {\n    column: AgColumn | undefined;\n    headerPosition: HeaderPosition | null;\n    columnIndex: number;\n    eventSource?: HTMLElement;\n}\n\nexport class MenuUtils extends BeanStub implements NamedBean {\n    beanName = 'menuUtils' as const;\n\n    private focusService: FocusService;\n    private headerNavigationService: HeaderNavigationService;\n    private visibleColsService: VisibleColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.focusService = beans.focusService;\n        this.headerNavigationService = beans.headerNavigationService;\n        this.visibleColsService = beans.visibleColsService;\n    }\n\n    public restoreFocusOnClose(\n        restoreFocusParams: MenuRestoreFocusParams,\n        eComp: HTMLElement,\n        e?: Event,\n        restoreIfMouseEvent?: boolean\n    ): void {\n        const { eventSource } = restoreFocusParams;\n        const isKeyboardEvent = e instanceof KeyboardEvent;\n        if ((!restoreIfMouseEvent && !isKeyboardEvent) || !eventSource) {\n            return;\n        }\n\n        const eDocument = this.gos.getDocument();\n        const activeEl = this.gos.getActiveDomElement();\n        if (!eComp.contains(activeEl) && activeEl !== eDocument.body) {\n            // something else has focus, so don't return focus to the header\n            return;\n        }\n\n        this.focusHeaderCell(restoreFocusParams);\n    }\n\n    public closePopupAndRestoreFocusOnSelect(\n        hidePopupFunc: (popupParams?: PopupEventParams) => void,\n        restoreFocusParams: MenuRestoreFocusParams,\n        event?: CloseMenuEvent\n    ): void {\n        let keyboardEvent: KeyboardEvent | undefined;\n\n        if (event && event.keyboardEvent) {\n            keyboardEvent = event.keyboardEvent;\n        }\n\n        hidePopupFunc(keyboardEvent && { keyboardEvent });\n\n        // this method only gets called when the menu was closed by selecting an option\n        // in this case we focus the cell that was previously focused, otherwise the header\n        const focusedCell = this.focusService.getFocusedCell();\n        const eDocument = this.gos.getDocument();\n        const activeEl = this.gos.getActiveDomElement();\n\n        if (!activeEl || activeEl === eDocument.body) {\n            if (focusedCell) {\n                const { rowIndex, rowPinned, column } = focusedCell;\n                this.focusService.setFocusedCell({\n                    rowIndex,\n                    column,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: true,\n                });\n            } else {\n                this.focusHeaderCell(restoreFocusParams);\n            }\n        }\n    }\n\n    public onContextMenu(\n        mouseEvent: MouseEvent | null | undefined,\n        touchEvent: TouchEvent | null | undefined,\n        showMenuCallback: (eventOrTouch: MouseEvent | Touch) => boolean\n    ): void {\n        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.\n        // not everyone wants this, so first 'if' below allows to turn this hack off.\n        if (!this.gos.get('allowContextMenuWithControlKey')) {\n            // then do the check\n            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {\n                return;\n            }\n        }\n\n        // need to do this regardless of context menu showing or not, so doing\n        // before the isSuppressContextMenu() check\n        if (mouseEvent) {\n            this.blockMiddleClickScrollsIfNeeded(mouseEvent);\n        }\n\n        if (this.gos.get('suppressContextMenu')) {\n            return;\n        }\n\n        const eventOrTouch: MouseEvent | Touch = mouseEvent ?? touchEvent!.touches[0];\n        if (showMenuCallback(eventOrTouch)) {\n            const event = mouseEvent ?? touchEvent;\n\n            if (event && event.cancelable) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    private focusHeaderCell(restoreFocusParams: MenuRestoreFocusParams): void {\n        const { column, columnIndex, headerPosition, eventSource } = restoreFocusParams;\n\n        const isColumnStillVisible = this.visibleColsService.getAllCols().some((col) => col === column);\n\n        if (isColumnStillVisible && eventSource && _isVisible(eventSource)) {\n            const focusableEl = this.focusService.findTabbableParent(eventSource);\n            if (focusableEl) {\n                if (column) {\n                    this.headerNavigationService.scrollToColumn(column);\n                }\n                focusableEl.focus();\n            }\n        }\n        // if the focusEl is no longer in the DOM, we try to focus\n        // the header that is closest to the previous header position\n        else if (headerPosition && columnIndex !== -1) {\n            const allColumns = this.visibleColsService.getAllCols();\n            const columnToFocus = allColumns[columnIndex] || _last(allColumns);\n\n            if (columnToFocus) {\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerPosition.headerRowIndex,\n                        column: columnToFocus,\n                    },\n                });\n            }\n        }\n    }\n\n    private blockMiddleClickScrollsIfNeeded(mouseEvent: MouseEvent): void {\n        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'\n        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse\n        // button in the browser). so this property allows the user to receive middle button clicks if\n        // they want.\n        if (this.gos.get('suppressMiddleClickScrolls') && mouseEvent.which === 2) {\n            mouseEvent.preventDefault();\n        }\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule, _ReadOnlyFloatingFilterModule } from '@ag-grid-community/core';\nimport { AgMenuItemRenderer, EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { MultiFilter } from './multiFilter/multiFilter';\nimport { MultiFloatingFilterComp } from './multiFilter/multiFloatingFilter';\nimport { VERSION } from './version';\n\nexport const MultiFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.MultiFilterModule}-core`,\n    userComponents: [\n        { name: 'agMultiColumnFilter', classImp: MultiFilter },\n        {\n            name: 'agMenuItem',\n            classImp: AgMenuItemRenderer,\n        },\n    ],\n    dependantModules: [EnterpriseCoreModule, _ColumnFilterModule],\n};\n\nconst MultiFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-enterprise/multi-floating-filter',\n    userComponents: [{ name: 'agMultiColumnFloatingFilter', classImp: MultiFloatingFilterComp }],\n    dependantModules: [MultiFilterCoreModule, _ReadOnlyFloatingFilterModule],\n};\n\nexport const MultiFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MultiFilterModule,\n    dependantModules: [MultiFilterCoreModule, MultiFloatingFilterModule],\n};\n", "import type {\n    AgColumn,\n    BeanCollection,\n    ContainerType,\n    FilterManager,\n    IAfterGuiAttachedParams,\n    IDoesFilterPassParams,\n    IFilterComp,\n    IFilterDef,\n    IFilterParams,\n    IMultiFilter,\n    IMultiFilterDef,\n    IMultiFilterModel,\n    MultiFilterParams,\n    ProvidedFilterModel,\n    RowNode,\n    UserComponentFactory,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    KeyCode,\n    ProvidedFilter,\n    TabGuardComp,\n    _forEachReverse,\n    _loadTemplate,\n    _removeFromArray,\n} from '@ag-grid-community/core';\nimport type { MenuItemActivatedEvent } from '@ag-grid-enterprise/core';\nimport { AgGroupComponent, AgMenuItemComponent, AgMenuItemRenderer } from '@ag-grid-enterprise/core';\n\nexport class MultiFilter extends TabGuardComp implements IFilterComp, IMultiFilter {\n    private filterManager?: FilterManager;\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.filterManager = beans.filterManager;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private params: MultiFilterParams;\n    private filterDefs: IMultiFilterDef[] = [];\n    private filters: IFilterComp[] | null = [];\n    private guiDestroyFuncs: (() => void)[] = [];\n    // this could be the accordion/sub menu element depending on the display type\n    private filterGuis: HTMLElement[] = [];\n    private column: AgColumn;\n    private filterChangedCallback: ((additionalEventAttributes?: any) => void) | null;\n    private lastOpenedInContainer?: ContainerType;\n    private activeFilterIndices: number[] = [];\n    private lastActivatedMenuItem: AgMenuItemComponent | null = null;\n    private hidePopup?: () => void;\n\n    private afterFiltersReadyFuncs: (() => void)[] = [];\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-multi-filter ag-menu-list-compact\"></div>`);\n    }\n\n    public postConstruct() {\n        this.initialiseTabGuard({\n            onFocusIn: (e) => this.onFocusIn(e),\n        });\n    }\n\n    public static getFilterDefs(params: MultiFilterParams): IMultiFilterDef[] {\n        const { filters } = params;\n\n        return filters && filters.length > 0\n            ? filters\n            : [{ filter: 'agTextColumnFilter' }, { filter: 'agSetColumnFilter' }];\n    }\n\n    public init(params: MultiFilterParams): AgPromise<void> {\n        this.params = params;\n        this.filterDefs = MultiFilter.getFilterDefs(params);\n\n        const { column, filterChangedCallback } = params;\n\n        this.column = column as AgColumn;\n        this.filterChangedCallback = filterChangedCallback;\n\n        const filterPromises: AgPromise<IFilterComp>[] = [];\n\n        this.filterDefs.forEach((filterDef, index) => {\n            const filterPromise = this.createFilter(filterDef, index);\n\n            if (filterPromise != null) {\n                filterPromises.push(filterPromise);\n            }\n        });\n\n        // we have to refresh the GUI here to ensure that Angular components are not rendered in odd places\n        return new AgPromise<void>((resolve) => {\n            AgPromise.all(filterPromises).then((filters) => {\n                this.filters = filters as IFilterComp[];\n                this.refreshGui('columnMenu').then(() => {\n                    resolve();\n                });\n            });\n        }).then(() => {\n            this.afterFiltersReadyFuncs.forEach((f) => f());\n            this.afterFiltersReadyFuncs.length = 0;\n        });\n    }\n\n    private refreshGui(container: ContainerType): AgPromise<void> {\n        if (container === this.lastOpenedInContainer) {\n            return AgPromise.resolve();\n        }\n\n        this.tabGuardFeature.removeAllChildrenExceptTabGuards();\n        this.destroyChildren();\n\n        return AgPromise.all(\n            this.filters!.map((filter, index) => {\n                const filterDef = this.filterDefs[index];\n                const filterTitle = this.getFilterTitle(filter, filterDef);\n                let filterGuiPromise: AgPromise<HTMLElement>;\n\n                if (filterDef.display === 'subMenu' && container !== 'toolPanel') {\n                    // prevent sub-menu being used in tool panel\n                    filterGuiPromise = this.insertFilterMenu(filter, filterTitle).then((menuItem) =>\n                        menuItem!.getGui()\n                    );\n                } else if (filterDef.display === 'subMenu' || filterDef.display === 'accordion') {\n                    // sub-menus should appear as groups in the tool panel\n                    const group = this.insertFilterGroup(filter, filterTitle);\n\n                    filterGuiPromise = AgPromise.resolve(group.getGui());\n                } else {\n                    // display inline\n                    filterGuiPromise = AgPromise.resolve(filter.getGui());\n                }\n\n                return filterGuiPromise;\n            })\n        ).then((filterGuis) => {\n            filterGuis!.forEach((filterGui, index) => {\n                if (index > 0) {\n                    this.appendChild(_loadTemplate(/* html */ `<div class=\"ag-filter-separator\"></div>`));\n                }\n                this.appendChild(filterGui!);\n            });\n            this.filterGuis = filterGuis as HTMLElement[];\n            this.lastOpenedInContainer = container;\n        });\n    }\n\n    private getFilterTitle(filter: IFilterComp, filterDef: IMultiFilterDef): string {\n        if (filterDef.title != null) {\n            return filterDef.title;\n        }\n\n        return filter instanceof ProvidedFilter ? filter.getFilterTitle() : 'Filter';\n    }\n\n    private destroyChildren() {\n        this.guiDestroyFuncs.forEach((func) => func());\n        this.guiDestroyFuncs.length = 0;\n        this.filterGuis.length = 0;\n    }\n\n    private insertFilterMenu(filter: IFilterComp, name: string): AgPromise<AgMenuItemComponent> {\n        const menuItem = this.createBean(new AgMenuItemComponent());\n        return menuItem\n            .init({\n                menuItemDef: {\n                    name,\n                    subMenu: [],\n                    cssClasses: ['ag-multi-filter-menu-item'],\n                    menuItem: AgMenuItemRenderer,\n                    menuItemParams: {\n                        cssClassPrefix: 'ag-compact-menu-option',\n                        isCompact: true,\n                    },\n                },\n                level: 0,\n                isAnotherSubMenuOpen: () => false,\n                childComponent: filter,\n                contextParams: {\n                    column: null,\n                    node: null,\n                    value: null,\n                },\n            })\n            .then(() => {\n                menuItem.setParentComponent(this);\n\n                this.guiDestroyFuncs.push(() => this.destroyBean(menuItem));\n\n                this.addManagedListeners(menuItem, {\n                    menuItemActivated: (event: MenuItemActivatedEvent) => {\n                        if (this.lastActivatedMenuItem && this.lastActivatedMenuItem !== event.menuItem) {\n                            this.lastActivatedMenuItem.deactivate();\n                        }\n\n                        this.lastActivatedMenuItem = event.menuItem;\n                    },\n                });\n\n                const menuItemGui = menuItem.getGui();\n                menuItem.addManagedElementListeners(menuItemGui, {\n                    // `AgMenuList` normally handles keyboard navigation, so need to do here\n                    keydown: (e: KeyboardEvent) => {\n                        const { key } = e;\n                        switch (key) {\n                            case KeyCode.UP:\n                            case KeyCode.RIGHT:\n                            case KeyCode.DOWN:\n                            case KeyCode.LEFT:\n                                e.preventDefault();\n                                if (key === KeyCode.RIGHT) {\n                                    menuItem.openSubMenu(true);\n                                }\n                                break;\n                        }\n                    },\n                    focusin: () => menuItem.activate(),\n                    focusout: () => {\n                        if (!menuItem.isSubMenuOpen() && !menuItem.isSubMenuOpening()) {\n                            menuItem.deactivate();\n                        }\n                    },\n                });\n\n                return menuItem;\n            });\n    }\n\n    private insertFilterGroup(filter: IFilterComp, title: string): AgGroupComponent {\n        const group = this.createBean(\n            new AgGroupComponent({\n                title,\n                cssIdentifier: 'multi-filter',\n            })\n        );\n\n        this.guiDestroyFuncs.push(() => this.destroyBean(group));\n\n        group.addItem(filter.getGui());\n        group.toggleGroupExpand(false);\n\n        if (filter.afterGuiAttached) {\n            group.addManagedListeners(group, {\n                expanded: () =>\n                    filter.afterGuiAttached!({\n                        container: this.lastOpenedInContainer!,\n                        suppressFocus: true,\n                        hidePopup: this.hidePopup,\n                    }),\n            });\n        }\n\n        return group;\n    }\n\n    public isFilterActive(): boolean {\n        return this.filters!.some((filter) => filter.isFilterActive());\n    }\n\n    public getLastActiveFilterIndex(): number | null {\n        return this.activeFilterIndices.length > 0\n            ? this.activeFilterIndices[this.activeFilterIndices.length - 1]\n            : null;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams, filterToSkip?: IFilterComp): boolean {\n        let rowPasses = true;\n\n        this.filters!.forEach((filter) => {\n            if (!rowPasses || filter === filterToSkip || !filter.isFilterActive()) {\n                return;\n            }\n\n            rowPasses = filter.doesFilterPass(params);\n        });\n\n        return rowPasses;\n    }\n\n    private getFilterType(): 'multi' {\n        return 'multi';\n    }\n\n    public getModelFromUi(): IMultiFilterModel | null {\n        const model: IMultiFilterModel = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters!.map((filter) => {\n                const providedFilter = filter as ProvidedFilter<IMultiFilterModel, unknown>;\n\n                if (typeof providedFilter.getModelFromUi === 'function') {\n                    return providedFilter.getModelFromUi();\n                }\n\n                return null;\n            }),\n        };\n\n        return model;\n    }\n\n    public getModel(): ProvidedFilterModel | null {\n        if (!this.isFilterActive()) {\n            return null;\n        }\n\n        const model: IMultiFilterModel = {\n            filterType: this.getFilterType(),\n            filterModels: this.filters!.map((filter) => {\n                if (filter.isFilterActive()) {\n                    return filter.getModel();\n                }\n\n                return null;\n            }),\n        };\n\n        return model;\n    }\n\n    public setModel(model: IMultiFilterModel | null): AgPromise<void> {\n        const setFilterModel = (filter: IFilterComp, filterModel: any) => {\n            return new AgPromise<void>((resolve) => {\n                const promise = filter.setModel(filterModel);\n                promise ? promise.then(() => resolve()) : resolve();\n            });\n        };\n\n        let promises: AgPromise<void>[] = [];\n\n        if (model == null) {\n            promises = this.filters!.map((filter: IFilterComp, index: number) => {\n                const res = setFilterModel(filter, null).then(() => {\n                    this.updateActiveList(index);\n                });\n                return res;\n            })!;\n        } else {\n            this.filters!.forEach((filter, index) => {\n                const filterModel = model.filterModels!.length > index ? model.filterModels![index] : null;\n                const res = setFilterModel(filter, filterModel).then(() => {\n                    this.updateActiveList(index);\n                });\n                promises.push(res);\n            });\n        }\n\n        return AgPromise.all(promises).then(() => {});\n    }\n\n    public applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        let result = false;\n\n        this.filters!.forEach((filter) => {\n            if (filter instanceof ProvidedFilter) {\n                result = filter.applyModel(source) || result;\n            }\n        });\n\n        return result;\n    }\n\n    public getChildFilterInstance(index: number): IFilterComp | undefined {\n        return this.filters![index];\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        let refreshPromise: AgPromise<void>;\n        if (params) {\n            this.hidePopup = params.hidePopup;\n            refreshPromise = this.refreshGui(params.container!);\n        } else {\n            this.hidePopup = undefined;\n            refreshPromise = AgPromise.resolve();\n        }\n\n        refreshPromise.then(() => {\n            const { filterDefs } = this;\n            let hasFocused = false;\n            if (filterDefs) {\n                _forEachReverse(filterDefs!, (filterDef, index) => {\n                    const isFirst = index === 0;\n                    const suppressFocus =\n                        params?.suppressFocus || !isFirst || (filterDef.display && filterDef.display !== 'inline');\n                    const afterGuiAttachedParams = { ...(params ?? {}), suppressFocus };\n                    const filter = this.filters?.[index];\n                    if (filter) {\n                        this.executeFunctionIfExistsOnFilter(filter, 'afterGuiAttached', afterGuiAttachedParams);\n                        if (isFirst) {\n                            hasFocused = true;\n                        }\n                    }\n                    if (isFirst && suppressFocus) {\n                        // focus the first filter container instead (accordion/sub menu)\n                        const filterGui = this.filterGuis[index];\n                        if (filterGui) {\n                            filterGui.focus();\n                            hasFocused = true;\n                        }\n                    }\n                });\n            }\n\n            const eDocument = this.gos.getDocument();\n            const activeEl = this.gos.getActiveDomElement();\n\n            // if we haven't focused the first item in the filter, we might run into two scenarios:\n            // 1 - we are loading the filter for the first time and the component isn't ready,\n            //     which means the document will have focus.\n            // 2 - The focus will be somewhere inside the component due to auto focus\n            // In both cases we need to force the focus somewhere valid but outside the filter.\n            if (!hasFocused && (!activeEl || activeEl === eDocument.body || this.getGui().contains(activeEl))) {\n                // reset focus to the top of the container, and blur\n                this.forceFocusOutOfContainer(true);\n            }\n        });\n    }\n\n    public afterGuiDetached(): void {\n        this.executeFunctionIfExists('afterGuiDetached');\n    }\n\n    public onAnyFilterChanged(): void {\n        this.executeFunctionIfExists('onAnyFilterChanged');\n    }\n\n    public onNewRowsLoaded(): void {\n        this.executeFunctionIfExists('onNewRowsLoaded');\n    }\n\n    public override destroy(): void {\n        this.filters!.forEach((filter) => this.destroyBean(filter));\n\n        this.filters!.length = 0;\n        this.destroyChildren();\n        this.hidePopup = undefined;\n\n        super.destroy();\n    }\n\n    private executeFunctionIfExists<T extends IFilterComp>(name: keyof T, ...params: any[]): void {\n        // The first filter is always the \"dominant\" one. By iterating in reverse order we ensure the first filter\n        // always gets the last say\n        _forEachReverse(this.filters!, (filter) => {\n            this.executeFunctionIfExistsOnFilter(filter as T, name, params);\n        });\n    }\n\n    private executeFunctionIfExistsOnFilter<T extends IFilterComp>(filter: T, name: keyof T, ...params: any[]): void {\n        const func = filter[name];\n\n        if (typeof func === 'function') {\n            func.apply(filter, params);\n        }\n    }\n\n    private createFilter(filterDef: IFilterDef, index: number): AgPromise<IFilterComp> | null {\n        const { filterModifiedCallback, doesRowPassOtherFilter } = this.params;\n\n        let filterInstance: IFilterComp;\n\n        const filterParams: IFilterParams = {\n            ...this.filterManager!.createFilterParams(this.column, this.column.getColDef()),\n            filterModifiedCallback,\n            filterChangedCallback: (additionalEventAttributes) => {\n                this.executeWhenAllFiltersReady(() => this.filterChanged(index, additionalEventAttributes));\n            },\n            doesRowPassOtherFilter: (node: RowNode) =>\n                doesRowPassOtherFilter(node) && this.doesFilterPass({ node, data: node.data }, filterInstance),\n        };\n\n        const compDetails = this.userComponentFactory.getFilterDetails(filterDef, filterParams, 'agTextColumnFilter');\n        if (!compDetails) {\n            return null;\n        }\n        const filterPromise = compDetails.newAgStackInstance();\n\n        if (filterPromise) {\n            filterPromise.then((filter) => (filterInstance = filter!));\n        }\n\n        return filterPromise;\n    }\n\n    private executeWhenAllFiltersReady(action: () => void): void {\n        if (this.filters && this.filters.length > 0) {\n            action();\n        } else {\n            this.afterFiltersReadyFuncs.push(action);\n        }\n    }\n\n    private updateActiveList(index: number): void {\n        const changedFilter = this.filters![index];\n\n        _removeFromArray(this.activeFilterIndices, index);\n\n        if (changedFilter.isFilterActive()) {\n            this.activeFilterIndices.push(index);\n        }\n    }\n\n    private filterChanged(index: number, additionalEventAttributes: any): void {\n        this.updateActiveList(index);\n\n        this.filterChangedCallback!(additionalEventAttributes);\n        const changedFilter = this.filters![index];\n\n        this.filters!.forEach((filter) => {\n            if (filter === changedFilter) {\n                return;\n            }\n\n            if (typeof filter.onAnyFilterChanged === 'function') {\n                filter.onAnyFilterChanged();\n            }\n        });\n    }\n\n    protected onFocusIn(e: FocusEvent): void {\n        if (\n            this.lastActivatedMenuItem != null &&\n            !this.lastActivatedMenuItem.getGui().contains(e.target as HTMLElement)\n        ) {\n            this.lastActivatedMenuItem.deactivate();\n            this.lastActivatedMenuItem = null;\n        }\n    }\n\n    getModelAsString(model: IMultiFilterModel): string {\n        if (!this.filters || !model?.filterModels?.length) {\n            return '';\n        }\n        const lastActiveIndex = this.getLastActiveFilterIndex() ?? 0;\n        const activeFilter = this.filters[lastActiveIndex];\n        return activeFilter.getModelAsString?.(model.filterModels[lastActiveIndex]) ?? '';\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    FilterChangedEvent,\n    FilterManager,\n    IFilter,\n    IFilterDef,\n    IFloatingFilterComp,\n    IFloatingFilterParams,\n    IMultiFilterModel,\n    MultiFilterParams,\n    UserCompDetails,\n    UserComponentFactory,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    Component,\n    _clearElement,\n    _mergeDeep,\n    _setDisplayed,\n    getDefaultFloatingFilterType,\n} from '@ag-grid-community/core';\n\nimport { MultiFilter } from './multiFilter';\n\nexport class MultiFloatingFilterComp extends Component implements IFloatingFilterComp<MultiFilter> {\n    private userComponentFactory: UserComponentFactory;\n    private filterManager?: FilterManager;\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n        this.filterManager = beans.filterManager;\n    }\n\n    private floatingFilters: IFloatingFilterComp[] = [];\n    private compDetailsList: UserCompDetails[] = [];\n    private params: IFloatingFilterParams<MultiFilter>;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-multi-floating-filter ag-floating-filter-input\"></div>`);\n    }\n\n    public init(params: IFloatingFilterParams<MultiFilter>): AgPromise<void> {\n        this.params = params;\n\n        const { compDetailsList } = this.getCompDetailsList(params);\n        return this.setParams(compDetailsList);\n    }\n\n    private setParams(compDetailsList: UserCompDetails[]): AgPromise<void> {\n        const floatingFilterPromises: AgPromise<IFloatingFilterComp>[] = [];\n\n        compDetailsList.forEach((compDetails) => {\n            const floatingFilterPromise = compDetails?.newAgStackInstance();\n\n            if (floatingFilterPromise != null) {\n                this.compDetailsList.push(compDetails!);\n                floatingFilterPromises.push(floatingFilterPromise);\n            }\n        });\n\n        return AgPromise.all(floatingFilterPromises).then((floatingFilters) => {\n            floatingFilters!.forEach((floatingFilter, index) => {\n                this.floatingFilters.push(floatingFilter!);\n\n                const gui = floatingFilter!.getGui();\n\n                this.appendChild(gui);\n\n                if (index > 0) {\n                    _setDisplayed(gui, false);\n                }\n            });\n        });\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams<MultiFilter>): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams<MultiFilter>): void {\n        this.params = params;\n        const { compDetailsList: newCompDetailsList, floatingFilterParamsList } = this.getCompDetailsList(params);\n        const allFloatingFilterCompsUnchanged =\n            newCompDetailsList.length === this.compDetailsList.length &&\n            newCompDetailsList.every(\n                (newCompDetails, index) =>\n                    !this.filterManager?.areFilterCompsDifferent(this.compDetailsList[index], newCompDetails)\n            );\n\n        if (allFloatingFilterCompsUnchanged) {\n            floatingFilterParamsList.forEach((floatingFilterParams, index) => {\n                const floatingFilter = this.floatingFilters[index] as IFloatingFilterComp<IFilter>;\n                let hasRefreshed = false;\n                if (floatingFilter.refresh) {\n                    const result = floatingFilter.refresh(floatingFilterParams);\n                    // framework wrapper always implements optional methods, but returns null if no underlying method\n                    if (result !== null) {\n                        hasRefreshed = true;\n                    }\n                }\n                if (!hasRefreshed) {\n                    floatingFilter.onParamsUpdated?.(floatingFilterParams);\n                }\n            });\n        } else {\n            _clearElement(this.getGui());\n            this.destroyBeans(this.floatingFilters);\n            this.floatingFilters = [];\n            this.compDetailsList = [];\n            this.setParams(newCompDetailsList);\n        }\n    }\n\n    private getCompDetailsList(params: IFloatingFilterParams<MultiFilter>): {\n        compDetailsList: UserCompDetails[];\n        floatingFilterParamsList: IFloatingFilterParams<IFilter>[];\n    } {\n        const compDetailsList: UserCompDetails[] = [];\n        const floatingFilterParamsList: IFloatingFilterParams<IFilter>[] = [];\n        const filterParams = params.filterParams as MultiFilterParams;\n\n        MultiFilter.getFilterDefs(filterParams).forEach((filterDef, index) => {\n            const floatingFilterParams: IFloatingFilterParams<IFilter> = {\n                ...params,\n                // set the parent filter instance for each floating filter to the relevant child filter instance\n                parentFilterInstance: (callback) => {\n                    this.parentMultiFilterInstance((parent) => {\n                        const child = parent.getChildFilterInstance(index);\n                        if (child == null) {\n                            return;\n                        }\n\n                        callback(child);\n                    });\n                },\n            };\n            _mergeDeep(floatingFilterParams.filterParams, filterDef.filterParams);\n\n            const compDetails = this.getCompDetails(filterDef, floatingFilterParams);\n            if (compDetails) {\n                compDetailsList.push(compDetails);\n                floatingFilterParamsList.push(floatingFilterParams);\n            }\n        });\n        return { compDetailsList, floatingFilterParamsList };\n    }\n\n    public onParentModelChanged(model: IMultiFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing\n        if (event && event.afterFloatingFilter) {\n            return;\n        }\n\n        this.parentMultiFilterInstance((parent) => {\n            if (model == null) {\n                this.floatingFilters.forEach((filter, i) => {\n                    filter.onParentModelChanged(null, event);\n                    _setDisplayed(filter.getGui(), i === 0);\n                });\n            } else {\n                const lastActiveFloatingFilterIndex = parent.getLastActiveFilterIndex();\n\n                this.floatingFilters.forEach((filter, i) => {\n                    const filterModel = model.filterModels!.length > i ? model.filterModels![i] : null;\n\n                    filter.onParentModelChanged(filterModel, event);\n\n                    const shouldShow =\n                        lastActiveFloatingFilterIndex == null ? i === 0 : i === lastActiveFloatingFilterIndex;\n\n                    _setDisplayed(filter.getGui(), shouldShow);\n                });\n            }\n        });\n    }\n\n    public override destroy(): void {\n        this.destroyBeans(this.floatingFilters);\n        this.floatingFilters.length = 0;\n\n        super.destroy();\n    }\n\n    private getCompDetails(filterDef: IFilterDef, params: IFloatingFilterParams<IFilter>): UserCompDetails | undefined {\n        const defaultComponentName =\n            getDefaultFloatingFilterType(this.frameworkOverrides, filterDef, () =>\n                this.filterManager!.getDefaultFloatingFilter(this.params.column as AgColumn)\n            ) ?? 'agReadOnlyFloatingFilter';\n\n        return this.userComponentFactory.getFloatingFilterCompDetails(filterDef, params, defaultComponentName);\n    }\n\n    private parentMultiFilterInstance(cb: (instance: MultiFilter) => void): void {\n        this.params.parentFilterInstance((parent) => {\n            if (!(parent instanceof MultiFilter)) {\n                throw new Error('AG Grid - MultiFloatingFilterComp expects MultiFilter as its parent');\n            }\n\n            cb(parent);\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _EditCoreModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { RichSelectCellEditor } from './richSelect/richSelectCellEditor';\nimport { VERSION } from './version';\n\nexport const RichSelectModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RichSelectModule,\n    beans: [],\n    userComponents: [\n        { name: 'agRichSelect', classImp: RichSelectCellEditor },\n        { name: 'agRichSelectCellEditor', classImp: RichSelectCellEditor },\n    ],\n    dependantModules: [EnterpriseCoreModule, _EditCoreModule],\n};\n", "import type {\n    FieldPickerValueSelectedEvent,\n    ICellEditor,\n    ICellEditorParams,\n    KeyCreatorParams,\n    RichCellEditorParams,\n    RichSelectParams,\n} from '@ag-grid-community/core';\nimport { PopupComponent, _missing, _warnOnce } from '@ag-grid-community/core';\nimport { AgRichSelect } from '@ag-grid-enterprise/core';\n\nexport class RichSelectCellEditor<TData = any, TValue = any> extends PopupComponent implements ICellEditor<TValue> {\n    private params: RichCellEditorParams<TData, TValue>;\n    private focusAfterAttached: boolean;\n    private richSelect: AgRichSelect<TValue>;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-cell-edit-wrapper\"></div>`);\n    }\n\n    public init(params: RichCellEditorParams<TData, TValue>): void {\n        this.params = params;\n\n        const { cellStartedEdit, values } = params;\n\n        if (_missing(values)) {\n            _warnOnce('agRichSelectCellEditor requires cellEditorParams.values to be set');\n        }\n\n        const { params: richSelectParams, valuesPromise } = this.buildRichSelectParams();\n\n        this.richSelect = this.createManagedBean(new AgRichSelect<TValue>(richSelectParams));\n        this.richSelect.addCssClass('ag-cell-editor');\n        this.appendChild(this.richSelect);\n\n        if (valuesPromise) {\n            valuesPromise.then((values: TValue[]) => {\n                this.richSelect.setValueList({ valueList: values, refresh: true });\n                const searchStringCallback = this.getSearchStringCallback(values);\n                if (searchStringCallback) {\n                    this.richSelect.setSearchStringCreator(searchStringCallback);\n                }\n            });\n        }\n\n        this.addManagedListeners(this.richSelect, {\n            fieldPickerValueSelected: this.onEditorPickerValueSelected.bind(this),\n        });\n        this.focusAfterAttached = cellStartedEdit;\n    }\n\n    private onEditorPickerValueSelected(e: FieldPickerValueSelectedEvent): void {\n        this.params.stopEditing(!e.fromEnterKey);\n    }\n\n    private buildRichSelectParams(): { params: RichSelectParams<TValue>; valuesPromise?: Promise<TValue[]> } {\n        const {\n            cellRenderer,\n            cellHeight,\n            value,\n            values,\n            formatValue,\n            searchDebounceDelay,\n            valueListGap,\n            valueListMaxHeight,\n            valueListMaxWidth,\n            allowTyping,\n            filterList,\n            searchType,\n            highlightMatch,\n            valuePlaceholder,\n            eventKey,\n            multiSelect,\n            suppressDeselectAll,\n            suppressMultiSelectPillRenderer,\n        } = this.params;\n\n        const ret: RichSelectParams = {\n            value: value,\n            cellRenderer,\n            cellRowHeight: cellHeight,\n            searchDebounceDelay,\n            valueFormatter: formatValue,\n            pickerAriaLabelKey: 'ariaLabelRichSelectField',\n            pickerAriaLabelValue: 'Rich Select Field',\n            pickerType: 'virtual-list',\n            pickerGap: valueListGap,\n            allowTyping,\n            filterList,\n            searchType,\n            highlightMatch,\n            maxPickerHeight: valueListMaxHeight,\n            maxPickerWidth: valueListMaxWidth,\n            placeholder: valuePlaceholder,\n            initialInputValue: eventKey?.length === 1 ? eventKey : undefined,\n            multiSelect,\n            suppressDeselectAll,\n            suppressMultiSelectPillRenderer,\n        };\n\n        let valuesResult;\n        let valuesPromise;\n\n        if (typeof values === 'function') {\n            valuesResult = values(this.params as ICellEditorParams);\n        } else {\n            valuesResult = values ?? [];\n        }\n\n        if (Array.isArray(valuesResult)) {\n            ret.valueList = valuesResult;\n            ret.searchStringCreator = this.getSearchStringCallback(valuesResult);\n        } else {\n            valuesPromise = valuesResult;\n        }\n\n        if (multiSelect && allowTyping) {\n            this.params.allowTyping = ret.allowTyping = false;\n            _warnOnce(\n                'agRichSelectCellEditor cannot have `multiSelect` and `allowTyping` set to `true`. AllowTyping has been turned off.'\n            );\n        }\n\n        return { params: ret, valuesPromise };\n    }\n\n    private getSearchStringCallback(values: TValue[]): ((values: TValue[]) => string[]) | undefined {\n        const { colDef } = this.params;\n\n        if (typeof values[0] !== 'object' || !colDef.keyCreator) {\n            return;\n        }\n\n        return (values: TValue[]) =>\n            values.map((value: TValue) => {\n                const keyParams: KeyCreatorParams = this.gos.addGridCommonParams({\n                    value: value,\n                    colDef: this.params.colDef,\n                    column: this.params.column,\n                    node: this.params.node,\n                    data: this.params.data,\n                });\n                return colDef.keyCreator!(keyParams);\n            });\n    }\n\n    // we need to have the gui attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the gui state\n    public afterGuiAttached(): void {\n        const { focusAfterAttached, params } = this;\n\n        setTimeout(() => {\n            if (!this.isAlive()) {\n                return;\n            }\n\n            if (focusAfterAttached) {\n                const focusableEl = this.richSelect.getFocusableElement() as HTMLInputElement;\n                focusableEl.focus();\n                const { allowTyping, eventKey } = this.params;\n                if (allowTyping && (!eventKey || eventKey.length !== 1)) {\n                    focusableEl.select();\n                }\n            }\n\n            this.richSelect.showPicker();\n\n            const { eventKey } = params;\n            if (eventKey) {\n                if (eventKey?.length === 1) {\n                    this.richSelect.searchTextFromString(eventKey);\n                }\n            }\n        });\n    }\n\n    public focusIn(): void {\n        this.richSelect.getFocusableElement().focus();\n    }\n\n    public getValue(): any {\n        return this.richSelect.getValue();\n    }\n\n    public override isPopup(): boolean {\n        return false;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport {\n    ModuleNames,\n    RowModelHelperService,\n    _CsrmSsrmSharedApiModule,\n    _RowNodeBlockModule,\n    _SsrmInfiniteSharedApiModule,\n} from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { BlockUtils } from './serverSideRowModel/blocks/blockUtils';\nimport { ExpandListener } from './serverSideRowModel/listeners/expandListener';\nimport { FilterListener } from './serverSideRowModel/listeners/filterListener';\nimport { ListenerUtils } from './serverSideRowModel/listeners/listenerUtils';\nimport { SortListener } from './serverSideRowModel/listeners/sortListener';\nimport { NodeManager } from './serverSideRowModel/nodeManager';\nimport { ServerSideRowModel } from './serverSideRowModel/serverSideRowModel';\nimport {\n    applyServerSideRowData,\n    applyServerSideTransaction,\n    applyServerSideTransactionAsync,\n    flushServerSideAsyncTransactions,\n    getServerSideGroupLevelState,\n    getServerSideSelectionState,\n    refreshServerSide,\n    retryServerSideLoads,\n    setServerSideSelectionState,\n} from './serverSideRowModel/serverSideRowModelApi';\nimport { ServerSideExpansionService } from './serverSideRowModel/services/serverSideExpansionService';\nimport { ServerSideSelectionService } from './serverSideRowModel/services/serverSideSelectionService';\nimport { LazyBlockLoadingService } from './serverSideRowModel/stores/lazy/lazyBlockLoadingService';\nimport { StoreFactory } from './serverSideRowModel/stores/storeFactory';\nimport { StoreUtils } from './serverSideRowModel/stores/storeUtils';\nimport { TransactionManager } from './serverSideRowModel/transactionManager';\nimport { VERSION } from './version';\n\nexport const ServerSideRowModelCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ServerSideRowModelModule}-core`,\n    rowModel: 'serverSide',\n    beans: [\n        ServerSideRowModel,\n        ExpandListener,\n        SortListener,\n        StoreUtils,\n        BlockUtils,\n        NodeManager,\n        TransactionManager,\n        FilterListener,\n        StoreFactory,\n        ListenerUtils,\n        ServerSideSelectionService,\n        ServerSideExpansionService,\n        LazyBlockLoadingService,\n    ],\n    dependantModules: [EnterpriseCoreModule, _RowNodeBlockModule],\n};\n\nexport const ServerSideRowModelApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.ServerSideRowModelModule}-api`,\n    beans: [RowModelHelperService],\n    apiFunctions: {\n        getServerSideSelectionState,\n        setServerSideSelectionState,\n        applyServerSideTransaction,\n        applyServerSideTransactionAsync,\n        applyServerSideRowData,\n        retryServerSideLoads,\n        flushServerSideAsyncTransactions,\n        refreshServerSide,\n        getServerSideGroupLevelState,\n    },\n    dependantModules: [ServerSideRowModelCoreModule, _CsrmSsrmSharedApiModule, _SsrmInfiniteSharedApiModule],\n};\n\nexport const ServerSideRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ServerSideRowModelModule,\n    dependantModules: [ServerSideRowModelCoreModule, ServerSideRowModelApiModule],\n};\n", "import type {\n    AgColumn,\n    BeanCollection,\n    IRowNode,\n    IShowRowGroupColsService,\n    NamedBean,\n    NumberSequence,\n    RowBounds,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { BeanStub, RowNode, _doOnce, _exists, _missing, _warnOnce } from '@ag-grid-community/core';\n\nimport type { NodeManager } from '../nodeManager';\nimport type { ServerSideExpansionService } from '../services/serverSideExpansionService';\n\nexport const GROUP_MISSING_KEY_ID = 'ag-Grid-MissingKey' as const;\n\nexport class BlockUtils extends BeanStub implements NamedBean {\n    beanName = 'ssrmBlockUtils' as const;\n\n    private valueService: ValueService;\n    private showRowGroupColsService?: IShowRowGroupColsService;\n    private nodeManager: NodeManager;\n    private beans: BeanCollection;\n    private expansionService: ServerSideExpansionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.valueService = beans.valueService;\n        this.showRowGroupColsService = beans.showRowGroupColsService;\n        this.nodeManager = beans.ssrmNodeManager as NodeManager;\n        this.beans = beans;\n        this.expansionService = beans.expansionService as ServerSideExpansionService;\n    }\n\n    public createRowNode(params: {\n        group: boolean;\n        leafGroup: boolean;\n        level: number;\n        parent: RowNode;\n        field: string;\n        rowGroupColumn: AgColumn;\n        rowHeight?: number;\n    }): RowNode {\n        const rowNode = new RowNode(this.beans);\n\n        const rowHeight = params.rowHeight != null ? params.rowHeight : this.gos.getRowHeightAsNumber();\n        rowNode.setRowHeight(rowHeight);\n\n        rowNode.group = params.group;\n        rowNode.leafGroup = params.leafGroup;\n        rowNode.level = params.level;\n        rowNode.uiLevel = params.level;\n        rowNode.parent = params.parent;\n\n        // stub gets set to true here, and then false when this rowNode gets it's data\n        rowNode.stub = true;\n        rowNode.__needsRefreshWhenVisible = false;\n\n        if (rowNode.group) {\n            rowNode.expanded = false;\n            rowNode.field = params.field;\n            rowNode.rowGroupColumn = params.rowGroupColumn;\n        }\n\n        return rowNode;\n    }\n\n    public destroyRowNodes(rowNodes: RowNode[]): void {\n        if (rowNodes) {\n            rowNodes.forEach((row) => this.destroyRowNode(row));\n        }\n    }\n\n    public destroyRowNode(rowNode: RowNode, preserveStore: boolean = false): void {\n        if (rowNode.childStore && !preserveStore) {\n            this.destroyBean(rowNode.childStore);\n            rowNode.childStore = null;\n        }\n\n        // if this has a footer, destroy that too\n        if (rowNode.sibling && !rowNode.footer) {\n            this.destroyRowNode(rowNode.sibling, false);\n        }\n\n        // this is needed, so row render knows to fade out the row, otherwise it\n        // sees row top is present, and thinks the row should be shown. maybe\n        // rowNode should have a flag on whether it is visible???\n        rowNode.clearRowTopAndRowIndex();\n        if (rowNode.id != null) {\n            this.nodeManager.removeNode(rowNode);\n        }\n    }\n\n    private setTreeGroupInfo(rowNode: RowNode): void {\n        rowNode.updateHasChildren();\n\n        const getKeyFunc = this.gos.get('getServerSideGroupKey');\n        if (rowNode.hasChildren() && getKeyFunc != null) {\n            rowNode.key = getKeyFunc(rowNode.data);\n        }\n\n        if (!rowNode.hasChildren() && rowNode.childStore != null) {\n            this.destroyBean(rowNode.childStore);\n            rowNode.childStore = null;\n            rowNode.expanded = false;\n        }\n    }\n\n    private setRowGroupInfo(rowNode: RowNode): void {\n        rowNode.key = this.valueService.getValue(rowNode.rowGroupColumn!, rowNode);\n        if (rowNode.key === null || rowNode.key === undefined) {\n            _doOnce(() => {\n                _warnOnce(`null and undefined values are not allowed for server side row model keys`);\n                if (rowNode.rowGroupColumn) {\n                    _warnOnce(`column = ${rowNode.rowGroupColumn.getId()}`);\n                }\n                _warnOnce(`data is ` + rowNode.data);\n            }, 'ServerSideBlock-CannotHaveNullOrUndefinedForKey');\n        }\n\n        const getGroupIncludeFooter = this.beans.gos.getGroupTotalRowCallback();\n        const doesRowShowFooter = getGroupIncludeFooter({ node: rowNode });\n        if (doesRowShowFooter) {\n            rowNode.createFooter();\n            if (rowNode.sibling) {\n                rowNode.sibling.uiLevel = rowNode.uiLevel + 1;\n            }\n        }\n    }\n\n    private setMasterDetailInfo(rowNode: RowNode): void {\n        const isMasterFunc = this.gos.get('isRowMaster');\n        if (isMasterFunc != null) {\n            rowNode.master = isMasterFunc(rowNode.data);\n        } else {\n            rowNode.master = true;\n        }\n    }\n\n    public updateDataIntoRowNode(rowNode: RowNode, data: any): void {\n        rowNode.updateData(data);\n\n        if (this.gos.get('treeData')) {\n            this.setTreeGroupInfo(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        } else if (rowNode.group) {\n            this.setChildCountIntoRowNode(rowNode);\n\n            if (!rowNode.footer) {\n                const getGroupIncludeFooter = this.beans.gos.getGroupTotalRowCallback();\n                const doesRowShowFooter = getGroupIncludeFooter({ node: rowNode });\n                if (doesRowShowFooter) {\n                    if (rowNode.sibling) {\n                        rowNode.sibling.updateData(data);\n                    } else {\n                        rowNode.createFooter();\n                    }\n                } else if (rowNode.sibling) {\n                    rowNode.destroyFooter();\n                }\n            }\n\n            // it's not possible for a node to change whether it's a group or not\n            // when doing row grouping (as only rows at certain levels are groups),\n            // so nothing to do here\n        } else if (this.gos.get('masterDetail')) {\n            // this should be implemented, however it's not the use case i'm currently\n            // programming, so leaving for another day. to test this, create an example\n            // where whether a master row is expandable or not is dynamic\n        }\n    }\n\n    public setDataIntoRowNode(\n        rowNode: RowNode,\n        data: any,\n        defaultId: string,\n        cachedRowHeight: number | undefined\n    ): void {\n        rowNode.stub = false;\n        const treeData = this.gos.get('treeData');\n\n        if (_exists(data)) {\n            rowNode.setDataAndId(data, defaultId);\n\n            if (treeData) {\n                this.setTreeGroupInfo(rowNode);\n            } else if (rowNode.group) {\n                this.setRowGroupInfo(rowNode);\n            } else if (this.gos.get('masterDetail')) {\n                this.setMasterDetailInfo(rowNode);\n            }\n        } else {\n            rowNode.setDataAndId(undefined, undefined);\n            rowNode.key = null;\n        }\n\n        if (treeData || rowNode.group) {\n            this.setGroupDataIntoRowNode(rowNode);\n            this.setChildCountIntoRowNode(rowNode);\n        }\n\n        // this needs to be done AFTER setGroupDataIntoRowNode(), as the height can depend on the group data\n        // getting set, if it's a group node and colDef.autoHeight=true\n        if (_exists(data)) {\n            rowNode.setRowHeight(this.gos.getRowHeightForNode(rowNode, false, cachedRowHeight).height);\n            rowNode.sibling?.setRowHeight(this.gos.getRowHeightForNode(rowNode.sibling, false, cachedRowHeight).height);\n        }\n    }\n\n    private setChildCountIntoRowNode(rowNode: RowNode): void {\n        const getChildCount = this.gos.get('getChildCount');\n        if (getChildCount) {\n            rowNode.setAllChildrenCount(getChildCount(rowNode.data));\n        }\n    }\n\n    private setGroupDataIntoRowNode(rowNode: RowNode): void {\n        const groupDisplayCols = this.showRowGroupColsService?.getShowRowGroupCols() ?? [];\n\n        const usingTreeData = this.gos.get('treeData');\n\n        groupDisplayCols.forEach((col) => {\n            if (rowNode.groupData == null) {\n                rowNode.groupData = {};\n            }\n            if (usingTreeData) {\n                rowNode.groupData[col.getColId()] = rowNode.key;\n            } else if (col.isRowGroupDisplayed(rowNode.rowGroupColumn!.getId())) {\n                const groupValue = this.valueService.getValue(rowNode.rowGroupColumn!, rowNode);\n                rowNode.groupData[col.getColId()] = groupValue;\n            }\n        });\n    }\n\n    public clearDisplayIndex(rowNode: RowNode): void {\n        rowNode.clearRowTopAndRowIndex();\n\n        const hasChildStore = rowNode.hasChildren() && _exists(rowNode.childStore);\n        if (hasChildStore) {\n            const childStore = rowNode.childStore;\n            childStore!.clearDisplayIndexes();\n        }\n\n        const hasDetailNode = rowNode.master && rowNode.detailNode;\n        if (hasDetailNode) {\n            rowNode.detailNode.clearRowTopAndRowIndex();\n        }\n    }\n\n    public setDisplayIndex(rowNode: RowNode, displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void {\n        // set this row\n        rowNode.setRowIndex(displayIndexSeq.next());\n        rowNode.setRowTop(nextRowTop.value);\n        nextRowTop.value += rowNode.rowHeight!;\n\n        if (rowNode.footer) {\n            return;\n        }\n\n        // set child for master / detail\n        const hasDetailRow = rowNode.master;\n        if (hasDetailRow) {\n            if (rowNode.expanded && rowNode.detailNode) {\n                rowNode.detailNode.setRowIndex(displayIndexSeq.next());\n                rowNode.detailNode.setRowTop(nextRowTop.value);\n                nextRowTop.value += rowNode.detailNode.rowHeight!;\n            } else if (rowNode.detailNode) {\n                rowNode.detailNode.clearRowTopAndRowIndex();\n            }\n        }\n\n        // set children for SSRM child rows\n        const hasChildStore = rowNode.hasChildren() && _exists(rowNode.childStore);\n        if (hasChildStore) {\n            const childStore = rowNode.childStore;\n            if (rowNode.expanded) {\n                childStore!.setDisplayIndexes(displayIndexSeq, nextRowTop);\n            } else {\n                // we need to clear the row tops, as the row renderer depends on\n                // this to know if the row should be faded out\n                childStore!.clearDisplayIndexes();\n            }\n        }\n    }\n\n    public binarySearchForDisplayIndex(displayRowIndex: number, rowNodes: RowNode[]): IRowNode | undefined {\n        let bottomPointer = 0;\n        let topPointer = rowNodes.length - 1;\n\n        if (_missing(topPointer) || _missing(bottomPointer)) {\n            _warnOnce(`error: topPointer = ${topPointer}, bottomPointer = ${bottomPointer}`);\n            return undefined;\n        }\n\n        while (true) {\n            const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            const currentRowNode = rowNodes[midPointer];\n\n            // first check current row for index\n            if (currentRowNode.rowIndex === displayRowIndex) {\n                return currentRowNode;\n            }\n\n            // then check if current row contains a detail row with the index\n            const expandedMasterRow = currentRowNode.master && currentRowNode.expanded;\n            const detailNode = currentRowNode.detailNode;\n\n            if (expandedMasterRow && detailNode && detailNode.rowIndex === displayRowIndex) {\n                return currentRowNode.detailNode;\n            }\n\n            // then check if child cache contains index\n            const childStore = currentRowNode.childStore;\n            if (currentRowNode.expanded && childStore && childStore.isDisplayIndexInStore(displayRowIndex)) {\n                return childStore.getRowUsingDisplayIndex(displayRowIndex);\n            }\n\n            // otherwise adjust pointers to continue searching for index\n            if (currentRowNode.rowIndex! < displayRowIndex) {\n                bottomPointer = midPointer + 1;\n            } else if (currentRowNode.rowIndex! > displayRowIndex) {\n                topPointer = midPointer - 1;\n            } else {\n                _warnOnce(`error: unable to locate rowIndex = ${displayRowIndex} in cache`);\n                return undefined;\n            }\n        }\n    }\n\n    public extractRowBounds(rowNode: RowNode, index: number): RowBounds | undefined {\n        const extractRowBounds = (currentRowNode: RowNode): RowBounds => ({\n            rowHeight: currentRowNode.rowHeight!,\n            rowTop: currentRowNode.rowTop!,\n        });\n\n        if (rowNode.rowIndex === index) {\n            return extractRowBounds(rowNode);\n        }\n\n        if (rowNode.hasChildren() && rowNode.expanded && _exists(rowNode.childStore)) {\n            const childStore = rowNode.childStore;\n            if (childStore.isDisplayIndexInStore(index)) {\n                return childStore.getRowBounds(index)!;\n            }\n        } else if (rowNode.master && rowNode.expanded && _exists(rowNode.detailNode)) {\n            if (rowNode.detailNode.rowIndex === index) {\n                return extractRowBounds(rowNode.detailNode);\n            }\n        }\n    }\n\n    public getIndexAtPixel(rowNode: RowNode, pixel: number): number | null {\n        // first check if pixel is in range of current row\n        if (rowNode.isPixelInRange(pixel)) {\n            return rowNode.rowIndex;\n        }\n\n        // then check if current row contains a detail row with pixel in range\n        const expandedMasterRow = rowNode.master && rowNode.expanded;\n        const detailNode = rowNode.detailNode;\n\n        if (expandedMasterRow && detailNode && detailNode.isPixelInRange(pixel)) {\n            return rowNode.detailNode.rowIndex;\n        }\n\n        // then check if it's a group row with a child cache with pixel in range\n        if (rowNode.hasChildren() && rowNode.expanded && _exists(rowNode.childStore)) {\n            const childStore = rowNode.childStore;\n            if (childStore.isPixelInRange(pixel)) {\n                return childStore.getRowIndexAtPixel(pixel);\n            }\n        }\n\n        return null;\n        // pixel is not within this row node or it's children / detail, so return undefined\n    }\n\n    public createNodeIdPrefix(parentRowNode: RowNode): string | undefined {\n        const parts: string[] = [];\n        let rowNode: RowNode | null = parentRowNode;\n        // pull keys from all parent nodes, but do not include the root node\n        while (rowNode && rowNode.level >= 0) {\n            if (rowNode.key === '') {\n                parts.push(GROUP_MISSING_KEY_ID);\n            } else {\n                parts.push(rowNode.key!);\n            }\n            rowNode = rowNode.parent;\n        }\n\n        if (parts.length > 0) {\n            return parts.reverse().join('-');\n        }\n        // no prefix, so node id's are left as they are\n        return undefined;\n    }\n\n    public checkOpenByDefault(rowNode: RowNode): void {\n        return this.expansionService.checkOpenByDefault(rowNode);\n    }\n}\n", "import type {\n    BeanCollection,\n    NamedBean,\n    RowGroupOpenedEvent,\n    StoreUpdatedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, RowNode, _exists, _missing } from '@ag-grid-community/core';\n\nimport type { ServerSideRowModel } from '../serverSideRowModel';\nimport type { StoreFactory } from '../stores/storeFactory';\n\nexport class ExpandListener extends BeanStub implements NamedBean {\n    beanName = 'ssrmExpandListener' as const;\n\n    private serverSideRowModel: ServerSideRowModel;\n    private storeFactory: StoreFactory;\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection) {\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n        this.storeFactory = beans.ssrmStoreFactory as StoreFactory;\n        this.beans = beans;\n    }\n\n    public postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gos.isRowModelType('serverSide')) {\n            return;\n        }\n\n        this.addManagedEventListeners({ rowGroupOpened: this.onRowGroupOpened.bind(this) });\n    }\n\n    private onRowGroupOpened(event: RowGroupOpenedEvent): void {\n        const rowNode = event.node as RowNode;\n\n        if (rowNode.expanded) {\n            if (rowNode.master) {\n                this.createDetailNode(rowNode);\n            } else if (_missing(rowNode.childStore)) {\n                const storeParams = this.serverSideRowModel.getParams();\n                rowNode.childStore = this.createBean(this.storeFactory.createStore(storeParams, rowNode));\n            }\n        } else if (this.gos.get('purgeClosedRowNodes') && _exists(rowNode.childStore)) {\n            rowNode.childStore = this.destroyBean(rowNode.childStore)!;\n        }\n\n        const storeUpdatedEvent: WithoutGridCommon<StoreUpdatedEvent> = { type: 'storeUpdated' };\n        this.eventService.dispatchEvent(storeUpdatedEvent);\n    }\n\n    private createDetailNode(masterNode: RowNode): RowNode {\n        if (_exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n\n        const detailNode = new RowNode(this.beans);\n\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n\n        if (_exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n\n        const defaultDetailRowHeight = 200;\n        const rowHeight = this.gos.getRowHeightForNode(detailNode).height;\n\n        detailNode.rowHeight = rowHeight ? rowHeight : defaultDetailRowHeight;\n        masterNode.detailNode = detailNode;\n\n        return detailNode;\n    }\n}\n", "import type {\n    AdvancedFilterModel,\n    BeanCollection,\n    FilterManager,\n    FilterModel,\n    NamedBean,\n    StoreRefreshAfterParams,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { ServerSideRowModel } from '../serverSideRowModel';\nimport type { ListenerUtils } from './listenerUtils';\n\nexport class FilterListener extends BeanStub implements NamedBean {\n    beanName = 'ssrmFilterListener' as const;\n\n    private serverSideRowModel: ServerSideRowModel;\n    private filterManager?: FilterManager;\n    private listenerUtils: ListenerUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n        this.filterManager = beans.filterManager;\n        this.listenerUtils = beans.ssrmListenerUtils as ListenerUtils;\n    }\n\n    public postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gos.isRowModelType('serverSide')) {\n            return;\n        }\n\n        this.addManagedEventListeners({\n            advancedFilterEnabledChanged: () => this.onFilterChanged(true),\n            filterChanged: () => this.onFilterChanged(),\n        });\n    }\n\n    private onFilterChanged(advancedFilterEnabledChanged?: boolean): void {\n        const storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) {\n            return;\n        } // params is undefined if no datasource set\n\n        const oldModel = storeParams.filterModel;\n        let newModel: FilterModel | AdvancedFilterModel | null;\n        let changedColumns: string[];\n\n        if (this.filterManager?.isAdvancedFilterEnabled()) {\n            newModel = this.filterManager.getAdvancedFilterModel();\n            // if advancedFilterEnabledChanged, old model is of type `FilterModel`\n            const oldColumns = advancedFilterEnabledChanged\n                ? Object.keys(oldModel ?? {})\n                : this.getAdvancedFilterColumns(oldModel as AdvancedFilterModel | null);\n            const newColumns = this.getAdvancedFilterColumns(newModel as AdvancedFilterModel | null);\n            oldColumns.forEach((column) => newColumns.add(column));\n            changedColumns = Array.from(newColumns);\n        } else {\n            newModel = this.filterManager?.getFilterModel() ?? {};\n            if (advancedFilterEnabledChanged) {\n                // old model is of type `AdvancedFilterModel | null`\n                const oldColumns = this.getAdvancedFilterColumns(oldModel as AdvancedFilterModel | null);\n                Object.keys(newModel).forEach((column) => oldColumns.add(column));\n                changedColumns = Array.from(oldColumns);\n            } else {\n                changedColumns = this.findChangedColumns(oldModel as FilterModel, newModel as FilterModel);\n            }\n        }\n\n        const valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        const secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n\n        const params: StoreRefreshAfterParams = {\n            valueColChanged,\n            secondaryColChanged,\n            changedColumns,\n        };\n\n        this.serverSideRowModel.refreshAfterFilter(newModel, params);\n    }\n\n    private findChangedColumns(oldModel: FilterModel, newModel: FilterModel): string[] {\n        const allColKeysMap: { [key: string]: boolean } = {};\n\n        Object.keys(oldModel).forEach((key) => (allColKeysMap[key] = true));\n        Object.keys(newModel).forEach((key) => (allColKeysMap[key] = true));\n\n        const res: string[] = [];\n\n        Object.keys(allColKeysMap).forEach((key) => {\n            const oldJson = JSON.stringify(oldModel[key]);\n            const newJson = JSON.stringify(newModel[key]);\n            const filterChanged = oldJson != newJson;\n            if (filterChanged) {\n                res.push(key);\n            }\n        });\n\n        return res;\n    }\n\n    private getAdvancedFilterColumns(model: AdvancedFilterModel | null): Set<string> {\n        const columns = new Set<string>();\n        if (!model) {\n            return columns;\n        }\n\n        const processAdvancedFilterModel = (filterModel: AdvancedFilterModel) => {\n            if (filterModel.filterType === 'join') {\n                filterModel.conditions.forEach((condition) => processAdvancedFilterModel(condition));\n            } else {\n                columns.add(filterModel.colId);\n            }\n        };\n\n        processAdvancedFilterModel(model);\n\n        return columns;\n    }\n}\n", "import type { BeanCollection, FuncColsService, NamedBean, PivotResultColsService } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nexport class ListenerUtils extends BeanStub implements NamedBean {\n    beanName = 'ssrmListenerUtils' as const;\n\n    private pivotResultColsService: PivotResultColsService;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    public isSortingWithValueColumn(changedColumnsInSort: string[]): boolean {\n        const valueColIds = this.funcColsService.getValueColumns().map((col) => col.getColId());\n\n        for (let i = 0; i < changedColumnsInSort.length; i++) {\n            if (valueColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public isSortingWithSecondaryColumn(changedColumnsInSort: string[]): boolean {\n        const pivotResultCols = this.pivotResultColsService.getPivotResultCols();\n        if (!pivotResultCols) {\n            return false;\n        }\n\n        const secondaryColIds = pivotResultCols.list.map((col) => col.getColId());\n\n        for (let i = 0; i < changedColumnsInSort.length; i++) {\n            if (secondaryColIds.indexOf(changedColumnsInSort[i]) > -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "import type {\n    BeanCollection,\n    NamedBean,\n    SortController,\n    SortModelItem,\n    StoreRefreshAfterParams,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { ServerSideRowModel } from '../serverSideRowModel';\nimport type { ListenerUtils } from './listenerUtils';\n\nexport class SortListener extends BeanStub implements NamedBean {\n    beanName = 'ssrmSortService' as const;\n\n    private sortController: SortController;\n    private serverSideRowModel: ServerSideRowModel;\n    private listenerUtils: ListenerUtils;\n\n    public wireBeans(beans: BeanCollection) {\n        this.sortController = beans.sortController;\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n        this.listenerUtils = beans.ssrmListenerUtils as ListenerUtils;\n    }\n\n    public postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gos.isRowModelType('serverSide')) {\n            return;\n        }\n\n        this.addManagedEventListeners({ sortChanged: this.onSortChanged.bind(this) });\n    }\n\n    private onSortChanged(): void {\n        const storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) {\n            return;\n        } // params is undefined if no datasource set\n\n        const newSortModel = this.sortController.getSortModel();\n        const oldSortModel = storeParams.sortModel;\n\n        const changedColumns = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n        const valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        const secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n\n        const params: StoreRefreshAfterParams = {\n            valueColChanged,\n            secondaryColChanged,\n            changedColumns,\n        };\n\n        this.serverSideRowModel.refreshAfterSort(newSortModel, params);\n    }\n\n    // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n    // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n    // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n    // was previously sorted by A and then the A sort now needs to be cleared.\n    private findChangedColumnsInSort(newSortModel: SortModelItem[], oldSortModel: SortModelItem[]): string[] {\n        let allColsInBothSorts: string[] = [];\n\n        [newSortModel, oldSortModel].forEach((sortModel) => {\n            if (sortModel) {\n                const ids = sortModel.map((sm) => sm.colId);\n                allColsInBothSorts = allColsInBothSorts.concat(ids);\n            }\n        });\n\n        const differentSorts = (oldSortItem: SortModelItem | undefined, newSortItem: SortModelItem | undefined) => {\n            const oldSort = oldSortItem ? oldSortItem.sort : null;\n            const newSort = newSortItem ? newSortItem.sort : null;\n            return oldSort !== newSort;\n        };\n\n        const differentIndexes = (oldSortItem: SortModelItem | undefined, newSortItem: SortModelItem | undefined) => {\n            const oldIndex = oldSortItem ? oldSortModel.indexOf(oldSortItem) : -1;\n            const newIndex = newSortItem ? newSortModel.indexOf(newSortItem) : -1;\n            return oldIndex !== newIndex;\n        };\n\n        return allColsInBothSorts.filter((colId) => {\n            const oldSortItem = oldSortModel.find((sm) => sm.colId === colId);\n            const newSortItem = newSortModel.find((sm) => sm.colId === colId);\n            return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n        });\n    }\n}\n", "import type { NamedBean, RowNode } from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nexport class NodeManager extends BeanStub implements NamedBean {\n    beanName = 'ssrmNodeManager' as const;\n\n    private rowNodes: { [id: string]: RowNode | undefined } = {};\n\n    public addRowNode(rowNode: RowNode): void {\n        const id = rowNode.id!;\n        if (this.rowNodes[id]) {\n            _warnOnce(\n                `Duplicate node id ${rowNode.id}. Row ID's are provided via the getRowId() callback. Please modify the getRowId() callback code to provide unique row id values.`\n            );\n            _warnOnce('first instance', this.rowNodes[id]!.data);\n            _warnOnce('second instance', rowNode.data);\n        }\n\n        this.rowNodes[id] = rowNode;\n    }\n\n    public removeNode(rowNode: RowNode): void {\n        const id = rowNode.id!;\n        if (this.rowNodes[id]) {\n            this.rowNodes[id] = undefined;\n        }\n    }\n\n    public override destroy(): void {\n        this.clear();\n        super.destroy();\n    }\n\n    public clear(): void {\n        this.rowNodes = {};\n        super.destroy();\n    }\n}\n", "import type {\n    AdvancedFilterModel,\n    AgColumn,\n    BeanCollection,\n    ColumnModel,\n    ColumnNameService,\n    ColumnVO,\n    FilterManager,\n    FilterModel,\n    FuncColsService,\n    IPivotColDefService,\n    IServerSideDatasource,\n    IServerSideRowModel,\n    IServerSideStore,\n    LoadSuccessParams,\n    ModelUpdatedEvent,\n    NamedBean,\n    PivotResultColsService,\n    RefreshServerSideParams,\n    RowBounds,\n    RowModelType,\n    RowRenderer,\n    ServerSideGroupLevelState,\n    SortController,\n    SortModelItem,\n    StoreRefreshAfterParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    BeanStub,\n    ModuleNames,\n    ModuleRegistry,\n    NumberSequence,\n    RowNode,\n    _debounce,\n    _errorOnce,\n    _jsonEquals,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { NodeManager } from './nodeManager';\nimport { FullStore } from './stores/fullStore';\nimport { LazyStore } from './stores/lazy/lazyStore';\nimport type { StoreFactory } from './stores/storeFactory';\n\nexport interface SSRMParams {\n    sortModel: SortModelItem[];\n    filterModel: FilterModel | AdvancedFilterModel | null;\n    lastAccessedSequence: NumberSequence;\n    dynamicRowHeight: boolean;\n    rowGroupCols: ColumnVO[];\n    valueCols: ColumnVO[];\n    pivotCols: ColumnVO[];\n    pivotMode: boolean;\n    datasource?: IServerSideDatasource;\n}\n\nexport class ServerSideRowModel extends BeanStub implements NamedBean, IServerSideRowModel {\n    beanName = 'rowModel' as const;\n\n    private columnModel: ColumnModel;\n    private columnNameService: ColumnNameService;\n    private pivotResultColsService: PivotResultColsService;\n    private funcColsService: FuncColsService;\n    private filterManager?: FilterManager;\n    private sortController: SortController;\n    private rowRenderer: RowRenderer;\n    private nodeManager: NodeManager;\n    private storeFactory: StoreFactory;\n    private beans: BeanCollection;\n    private pivotColDefService?: IPivotColDefService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.columnNameService = beans.columnNameService;\n        this.pivotResultColsService = beans.pivotResultColsService;\n        this.funcColsService = beans.funcColsService;\n        this.filterManager = beans.filterManager;\n        this.sortController = beans.sortController;\n        this.rowRenderer = beans.rowRenderer;\n        this.nodeManager = beans.ssrmNodeManager as NodeManager;\n        this.storeFactory = beans.ssrmStoreFactory as StoreFactory;\n        this.beans = beans;\n        this.pivotColDefService = beans.pivotColDefService;\n    }\n\n    private onRowHeightChanged_debounced = _debounce(this.onRowHeightChanged.bind(this), 100);\n\n    private rootNode: RowNode;\n    private datasource: IServerSideDatasource | undefined;\n\n    private storeParams: SSRMParams;\n\n    private pauseStoreUpdateListening = false;\n\n    private started = false;\n\n    private managingPivotResultColumns = false;\n\n    // we don't implement as lazy row heights is not supported in this row model\n    public ensureRowHeightsValid(): boolean {\n        return false;\n    }\n\n    public start(): void {\n        this.started = true;\n        this.updateDatasource();\n    }\n\n    private destroyDatasource(): void {\n        if (!this.datasource) {\n            return;\n        }\n\n        if (this.datasource.destroy) {\n            this.datasource.destroy();\n        }\n\n        this.rowRenderer.datasourceChanged();\n        this.datasource = undefined;\n    }\n\n    public postConstruct(): void {\n        const resetListener = this.resetRootStore.bind(this);\n        this.addManagedEventListeners({\n            newColumnsLoaded: this.onColumnEverything.bind(this),\n            storeUpdated: this.onStoreUpdated.bind(this),\n            columnValueChanged: resetListener,\n            columnPivotChanged: resetListener,\n            columnRowGroupChanged: resetListener,\n            columnPivotModeChanged: resetListener,\n        });\n\n        this.addManagedPropertyListeners(\n            [\n                /**\n                 * Following properties omitted as they are likely to come with undesired  side effects.\n                 * 'getRowId', 'isRowMaster', 'getRowHeight', 'isServerSideGroup', 'getServerSideGroupKey',\n                 * */\n                'masterDetail',\n                'treeData',\n                'removePivotHeaderRowWhenSingleValueColumn',\n                'suppressServerSideInfiniteScroll',\n                'cacheBlockSize',\n            ],\n            resetListener\n        );\n        this.addManagedPropertyListener('rowHeight', () => this.resetRowHeights());\n        this.verifyProps();\n\n        this.addManagedPropertyListener('serverSideDatasource', () => this.updateDatasource());\n    }\n\n    private updateDatasource(): void {\n        const datasource = this.gos.get('serverSideDatasource');\n\n        if (datasource) {\n            this.setDatasource(datasource);\n        }\n    }\n\n    private verifyProps(): void {\n        if (this.gos.exists('initialGroupOrderComparator')) {\n            _warnOnce(`initialGroupOrderComparator cannot be used with Server Side Row Model.`);\n        }\n        if (this.gos.isRowSelection() && !this.gos.exists('getRowId')) {\n            _warnOnce(`getRowId callback must be provided for Server Side Row Model selection to work correctly.`);\n        }\n    }\n\n    public setDatasource(datasource: IServerSideDatasource): void {\n        // sometimes React, due to async, can call gridApi.setDatasource() before we have started.\n        // this happens when React app does this:\n        //      useEffect(() => setDatasource(ds), []);\n        // thus if we set the datasource before the grid UI has finished initialising, we do not set it,\n        // and the ssrm.start() method will set the datasoure when the grid is ready.\n        if (!this.started) {\n            return;\n        }\n\n        this.destroyDatasource();\n        this.datasource = datasource;\n        this.resetRootStore();\n    }\n\n    public applyRowData(rowDataParams: LoadSuccessParams, startRow: number, route: string[]) {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n\n        const storeToExecuteOn = rootStore.getChildStore(route);\n\n        if (!storeToExecuteOn) {\n            return;\n        }\n\n        if (storeToExecuteOn instanceof LazyStore) {\n            storeToExecuteOn.applyRowData(rowDataParams, startRow, rowDataParams.rowData.length);\n        } else if (storeToExecuteOn instanceof FullStore) {\n            storeToExecuteOn.processServerResult(rowDataParams);\n        }\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        const cache = this.getRootStore();\n        if (!cache) {\n            return false;\n        }\n        return cache.isLastRowIndexKnown();\n    }\n\n    private onColumnEverything(): void {\n        // if first time, always reset\n        if (!this.storeParams) {\n            this.resetRootStore();\n            return;\n        }\n\n        // check if anything pertaining to fetching data has changed, and if it has, reset, but if\n        // it has not, don't reset\n        const rowGroupColumnVos = this.columnsToValueObjects(this.funcColsService.getRowGroupColumns());\n        const valueColumnVos = this.columnsToValueObjects(this.funcColsService.getValueColumns());\n        const pivotColumnVos = this.columnsToValueObjects(this.funcColsService.getPivotColumns());\n\n        // compares two sets of columns, ensuring no columns have been added or removed (unless specified via allowRemovedColumns)\n        // if the columns are found, also ensures the field and aggFunc properties have not been changed.\n        const areColsSame = (params: { oldCols: ColumnVO[]; newCols: ColumnVO[]; allowRemovedColumns?: boolean }) => {\n            const oldColsMap: { [key: string]: ColumnVO } = {};\n            params.oldCols.forEach((col) => (oldColsMap[col.id] = col));\n\n            const allColsUnchanged = params.newCols.every((col) => {\n                const equivalentCol = oldColsMap[col.id];\n                if (equivalentCol) {\n                    delete oldColsMap[col.id];\n                }\n                return equivalentCol && equivalentCol.field === col.field && equivalentCol.aggFunc === col.aggFunc;\n            });\n\n            const missingCols = !params.allowRemovedColumns && !!Object.values(oldColsMap).length;\n            return allColsUnchanged && !missingCols;\n        };\n\n        const sortModelDifferent = !_jsonEquals(this.storeParams.sortModel, this.sortController.getSortModel());\n        const rowGroupDifferent = !areColsSame({\n            oldCols: this.storeParams.rowGroupCols,\n            newCols: rowGroupColumnVos,\n        });\n        const pivotDifferent = !areColsSame({\n            oldCols: this.storeParams.pivotCols,\n            newCols: pivotColumnVos,\n        });\n        const valuesDifferent =\n            !!rowGroupColumnVos?.length &&\n            !areColsSame({\n                oldCols: this.storeParams.valueCols,\n                newCols: valueColumnVos,\n                allowRemovedColumns: true,\n            });\n\n        const resetRequired = sortModelDifferent || rowGroupDifferent || pivotDifferent || valuesDifferent;\n\n        if (resetRequired) {\n            this.resetRootStore();\n        } else {\n            // cols may have changed even if we didn't do a reset. storeParams ref will be provided when getRows\n            // is called, so it's important to keep it up to date.\n            const newParams = this.createStoreParams();\n            this.storeParams.rowGroupCols = newParams.rowGroupCols;\n            this.storeParams.pivotCols = newParams.pivotCols;\n            this.storeParams.valueCols = newParams.valueCols;\n        }\n    }\n\n    private destroyRootStore(): void {\n        if (!this.rootNode || !this.rootNode.childStore) {\n            return;\n        }\n        this.rootNode.childStore = this.destroyBean(this.rootNode.childStore)!;\n        this.nodeManager.clear();\n    }\n\n    public refreshAfterSort(newSortModel: SortModelItem[], params: StoreRefreshAfterParams): void {\n        if (this.storeParams) {\n            this.storeParams.sortModel = newSortModel;\n        }\n\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n\n        rootStore.refreshAfterSort(params);\n\n        this.onStoreUpdated();\n    }\n\n    public generateSecondaryColumns(pivotFields: string[]) {\n        if (!this.pivotColDefService) {\n            ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'pivotResultFields', this.gridId);\n            return;\n        }\n\n        const pivotColumnGroupDefs = this.pivotColDefService.createColDefsFromFields(pivotFields);\n        this.managingPivotResultColumns = true;\n        this.pivotResultColsService.setPivotResultCols(pivotColumnGroupDefs, 'rowModelUpdated');\n    }\n\n    public resetRowHeights(): void {\n        const atLeastOne = this.resetRowHeightsForAllRowNodes();\n\n        const rootNodeHeight = this.gos.getRowHeightForNode(this.rootNode);\n        this.rootNode.setRowHeight(rootNodeHeight.height, rootNodeHeight.estimated);\n        if (this.rootNode.sibling) {\n            const rootNodeSibling = this.gos.getRowHeightForNode(this.rootNode.sibling);\n            this.rootNode.sibling.setRowHeight(rootNodeSibling.height, rootNodeSibling.estimated);\n        }\n\n        // when pivotMode but pivot not active, root node is displayed on its own\n        // because it's only ever displayed alone, refreshing the model (onRowHeightChanged) is not required\n        if (atLeastOne) {\n            this.onRowHeightChanged();\n        }\n    }\n\n    private resetRowHeightsForAllRowNodes(): boolean {\n        let atLeastOne = false;\n        this.forEachNode((rowNode) => {\n            const rowHeightForNode = this.gos.getRowHeightForNode(rowNode);\n            rowNode.setRowHeight(rowHeightForNode.height, rowHeightForNode.estimated);\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\n            const detailNode = rowNode.detailNode;\n            if (detailNode) {\n                const detailRowHeight = this.gos.getRowHeightForNode(detailNode);\n                detailNode.setRowHeight(detailRowHeight.height, detailRowHeight.estimated);\n            }\n\n            if (rowNode.sibling) {\n                const siblingRowHeight = this.gos.getRowHeightForNode(rowNode.sibling);\n                detailNode.setRowHeight(siblingRowHeight.height, siblingRowHeight.estimated);\n            }\n            atLeastOne = true;\n        });\n\n        return atLeastOne;\n    }\n\n    public resetRootStore(): void {\n        this.destroyRootStore();\n\n        this.rootNode = new RowNode(this.beans);\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n\n        if (this.datasource) {\n            this.storeParams = this.createStoreParams();\n            this.rootNode.childStore = this.createBean(this.storeFactory.createStore(this.storeParams, this.rootNode));\n            this.updateRowIndexesAndBounds();\n        }\n\n        if (this.managingPivotResultColumns) {\n            // if managing pivot columns, also reset secondary columns.\n            this.pivotResultColsService.setPivotResultCols(null, 'api');\n            this.managingPivotResultColumns = false;\n        }\n\n        // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).\n        // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer\n        // to treat the rows as new rows, as it's all new data\n        this.dispatchModelUpdated(true);\n    }\n\n    public columnsToValueObjects(columns: AgColumn[]): ColumnVO[] {\n        return columns.map(\n            (col) =>\n                ({\n                    id: col.getId(),\n                    aggFunc: col.getAggFunc(),\n                    displayName: this.columnNameService.getDisplayNameForColumn(col, 'model'),\n                    field: col.getColDef().field,\n                }) as ColumnVO\n        );\n    }\n\n    private createStoreParams(): SSRMParams {\n        const rowGroupColumnVos = this.columnsToValueObjects(this.funcColsService.getRowGroupColumns());\n        const valueColumnVos = this.columnsToValueObjects(this.funcColsService.getValueColumns());\n        const pivotColumnVos = this.columnsToValueObjects(this.funcColsService.getPivotColumns());\n\n        const dynamicRowHeight = this.gos.isGetRowHeightFunction();\n\n        const params: SSRMParams = {\n            // the columns the user has grouped and aggregated by\n            valueCols: valueColumnVos,\n            rowGroupCols: rowGroupColumnVos,\n            pivotCols: pivotColumnVos,\n            pivotMode: this.columnModel.isPivotMode(),\n\n            // sort and filter model\n            filterModel: this.filterManager?.isAdvancedFilterEnabled()\n                ? this.filterManager?.getAdvancedFilterModel()\n                : this.filterManager?.getFilterModel() ?? {},\n            sortModel: this.sortController.getSortModel(),\n\n            datasource: this.datasource,\n            lastAccessedSequence: new NumberSequence(),\n            // blockSize: blockSize == null ? 100 : blockSize,\n            dynamicRowHeight: dynamicRowHeight,\n        };\n\n        return params;\n    }\n\n    public getParams(): SSRMParams {\n        return this.storeParams;\n    }\n\n    private dispatchModelUpdated(reset = false): void {\n        const modelUpdatedEvent: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: 'modelUpdated',\n            animate: !reset,\n            keepRenderedRows: !reset,\n            newPage: false,\n            newData: false,\n        };\n        this.eventService.dispatchEvent(modelUpdatedEvent);\n    }\n\n    private onStoreUpdated(): void {\n        // sometimes if doing a batch update, we do the batch first,\n        // then call onStoreUpdated manually. eg expandAll() method.\n        if (this.pauseStoreUpdateListening) {\n            return;\n        }\n\n        this.updateRowIndexesAndBounds();\n        this.dispatchModelUpdated();\n    }\n\n    /** This method is debounced. It is used for row auto-height. If we don't debounce,\n     * then the Row Models will end up recalculating each row position\n     * for each row height change and result in the Row Renderer laying out rows.\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\n     * each row will change it's height, causing Row Model to update 1,000 times.\n     */\n    public onRowHeightChangedDebounced(): void {\n        this.onRowHeightChanged_debounced();\n    }\n\n    public onRowHeightChanged(): void {\n        this.updateRowIndexesAndBounds();\n        this.dispatchModelUpdated();\n    }\n\n    public updateRowIndexesAndBounds(): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.setDisplayIndexes(new NumberSequence(), { value: 0 });\n    }\n\n    public retryLoads(): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.retryLoads();\n        this.onStoreUpdated();\n    }\n\n    public getRow(index: number): RowNode | undefined {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return undefined;\n        }\n        return rootStore.getRowUsingDisplayIndex(index) as RowNode;\n    }\n\n    /**\n     * Pauses the store, to prevent it updating the UI. This is used when doing batch updates to the store.\n     */\n    public setPaused(paused: boolean): void {\n        this.pauseStoreUpdateListening = paused;\n    }\n\n    public expandAll(value: boolean): void {\n        // if we don't pause store updating, we are needlessly\n        // recalculating row-indexes etc, and also getting rendering\n        // engine to re-render (listens on ModelUpdated event)\n        this.pauseStoreUpdateListening = true;\n        this.forEachNode((node) => {\n            if (node.stub) {\n                return;\n            }\n\n            if (node.hasChildren()) {\n                node.setExpanded(value);\n            }\n        });\n        this.pauseStoreUpdateListening = false;\n        this.onStoreUpdated();\n    }\n\n    public refreshAfterFilter(\n        newFilterModel: FilterModel | AdvancedFilterModel | null,\n        params: StoreRefreshAfterParams\n    ): void {\n        if (this.storeParams) {\n            this.storeParams.filterModel = newFilterModel;\n        }\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.refreshAfterFilter(params);\n\n        this.onStoreUpdated();\n    }\n\n    public getRootStore(): IServerSideStore | undefined {\n        if (this.rootNode && this.rootNode.childStore) {\n            return this.rootNode.childStore;\n        }\n    }\n\n    public getRowCount(): number {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return 0;\n        }\n\n        return rootStore.getDisplayIndexEnd()!;\n    }\n\n    public getTopLevelRowCount(): number {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return 1;\n        }\n        return rootStore.getRowCount();\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return topLevelIndex;\n        }\n        return rootStore.getTopLevelRowDisplayedIndex(topLevelIndex);\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            const rowHeight = this.gos.getRowHeightAsNumber();\n            return {\n                rowTop: 0,\n                rowHeight: rowHeight,\n            };\n        }\n        return rootStore.getRowBounds(index)!;\n    }\n\n    public getBlockStates() {\n        const root = this.getRootStore();\n        if (!root) {\n            return undefined;\n        }\n\n        const states: any = {};\n        root.forEachStoreDeep((store) => {\n            if (store instanceof FullStore) {\n                const { id, state } = store.getBlockStateJson();\n                states[id] = state;\n            } else if (store instanceof LazyStore) {\n                Object.entries(store.getBlockStates()).forEach(([block, state]) => {\n                    states[block] = state;\n                });\n            } else {\n                throw new Error('AG Grid: Unsupported store type');\n            }\n        });\n        return states;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        const rootStore = this.getRootStore();\n        if (pixel <= 0 || !rootStore) {\n            return 0;\n        }\n\n        return rootStore.getRowIndexAtPixel(pixel)!;\n    }\n\n    public isEmpty(): boolean {\n        return false;\n    }\n\n    public isRowsToRender(): boolean {\n        return this.getRootStore() != null && this.getRowCount() > 0;\n    }\n\n    public getType(): RowModelType {\n        return 'serverSide';\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.forEachNodeDeep(callback);\n    }\n\n    public forEachNodeAfterFilterAndSort(\n        callback: (node: RowNode, index: number) => void,\n        includeFooterNodes = false\n    ): void {\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return;\n        }\n        rootStore.forEachNodeDeepAfterFilterAndSort(callback, undefined, includeFooterNodes);\n    }\n\n    /** @return false if store hasn't started */\n    public executeOnStore(route: string[], callback: (cache: IServerSideStore) => void): boolean {\n        if (!this.started) {\n            return false;\n        }\n        const rootStore = this.getRootStore();\n        if (!rootStore) {\n            return true;\n        }\n\n        const storeToExecuteOn = rootStore.getChildStore(route);\n\n        if (storeToExecuteOn) {\n            callback(storeToExecuteOn);\n        }\n        return true;\n    }\n\n    public refreshStore(params: RefreshServerSideParams = {}): void {\n        const route = params.route ? params.route : [];\n        this.executeOnStore(route, (store) => store.refreshStore(params.purge == true));\n    }\n\n    public getStoreState(): ServerSideGroupLevelState[] {\n        const res: ServerSideGroupLevelState[] = [];\n        const rootStore = this.getRootStore();\n        if (rootStore) {\n            rootStore.addStoreStates(res);\n        }\n        return res;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const startIndex = firstInRange.rowIndex;\n        const endIndex = lastInRange.rowIndex;\n\n        if (startIndex === null && endIndex === null) {\n            return [];\n        }\n\n        if (endIndex === null) {\n            return firstInRange ? [firstInRange] : [];\n        }\n\n        if (startIndex === null) {\n            return [lastInRange];\n        }\n\n        const nodeRange: RowNode[] = [];\n        const [firstIndex, lastIndex] = [startIndex, endIndex].sort((a, b) => a - b);\n        this.forEachNode((node) => {\n            const thisRowIndex = node.rowIndex;\n            if (thisRowIndex == null || node.stub) {\n                return;\n            }\n\n            if (thisRowIndex >= firstIndex && thisRowIndex <= lastIndex) {\n                nodeRange.push(node);\n            }\n        });\n\n        // don't allow range selection if we don't have the full range of rows\n        if (nodeRange.length !== lastIndex - firstIndex + 1) {\n            return firstInRange ? [firstInRange, lastInRange] : [];\n        }\n\n        return nodeRange;\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        let result: RowNode | undefined;\n        this.forEachNode((rowNode) => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n            if (rowNode.detailNode && rowNode.detailNode.id === id) {\n                result = rowNode.detailNode;\n            }\n        });\n        return result;\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const foundRowNode = this.getRowNode(rowNode.id!);\n        return !!foundRowNode;\n    }\n\n    public setRowCount(rowCount: number, lastRowIndexKnown?: boolean): void {\n        const rootStore = this.getRootStore();\n        if (rootStore) {\n            if (rootStore instanceof LazyStore) {\n                rootStore.setRowCount(rowCount, lastRowIndexKnown);\n                return;\n            }\n            _errorOnce('Infinite scrolling must be enabled in order to set the row count.');\n        }\n    }\n\n    public override destroy(): void {\n        this.destroyDatasource();\n        this.destroyRootStore();\n        super.destroy();\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    FilterManager,\n    FuncColsService,\n    IRowNode,\n    ISelectionService,\n    IServerSideStore,\n    IServerSideTransactionManager,\n    IsApplyServerSideTransactionParams,\n    LoadSuccessParams,\n    PostSortRowsParams,\n    RowBounds,\n    RowNode,\n    RowNodeBlockLoader,\n    RowNodeSorter,\n    SelectionChangedEvent,\n    ServerSideGroupLevelParams,\n    ServerSideGroupLevelState,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    SortController,\n    StoreRefreshAfterParams,\n    StoreUpdatedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    NumberSequence,\n    RowNodeBlock,\n    ServerSideTransactionResultStatus,\n    _errorOnce,\n    _getAllValuesInObject,\n    _insertIntoArray,\n    _missing,\n    _missingOrEmpty,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { BlockUtils } from '../blocks/blockUtils';\nimport type { NodeManager } from '../nodeManager';\nimport type { SSRMParams, ServerSideRowModel } from '../serverSideRowModel';\nimport type { StoreUtils } from './storeUtils';\n\nexport class FullStore extends RowNodeBlock implements IServerSideStore {\n    private storeUtils: StoreUtils;\n    private blockUtils: BlockUtils;\n    private funcColsService: FuncColsService;\n    private rowNodeBlockLoader: RowNodeBlockLoader;\n    private rowNodeSorter: RowNodeSorter;\n    private sortController: SortController;\n    private selectionService: ISelectionService;\n    private nodeManager: NodeManager;\n    private filterManager?: FilterManager;\n    private transactionManager: IServerSideTransactionManager;\n    private serverSideRowModel: ServerSideRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.storeUtils = beans.ssrmStoreUtils as StoreUtils;\n        this.blockUtils = beans.ssrmBlockUtils as BlockUtils;\n        this.funcColsService = beans.funcColsService;\n        this.rowNodeBlockLoader = beans.rowNodeBlockLoader!;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.sortController = beans.sortController;\n        this.selectionService = beans.selectionService;\n        this.nodeManager = beans.ssrmNodeManager as NodeManager;\n        this.filterManager = beans.filterManager;\n        this.transactionManager = beans.ssrmTransactionManager!;\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n    }\n\n    private readonly level: number;\n    private readonly groupLevel: boolean | undefined;\n    private readonly leafGroup: boolean;\n    private readonly ssrmParams: SSRMParams;\n    private readonly parentRowNode: RowNode;\n\n    private nodeIdSequence: NumberSequence = new NumberSequence();\n\n    private usingTreeData: boolean;\n\n    private allRowNodes: RowNode[];\n    private nodesAfterFilter: RowNode[];\n    private nodesAfterSort: RowNode[];\n\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    private allNodesMap: { [id: string]: RowNode };\n\n    private groupField: string;\n    private rowGroupColumn: AgColumn;\n    private nodeIdPrefix: string | undefined;\n\n    private displayIndexStart: number | undefined;\n    private displayIndexEnd: number | undefined;\n\n    private topPx: number;\n    private heightPx: number;\n\n    private info: any = {};\n\n    private postSortFunc: ((params: WithoutGridCommon<PostSortRowsParams>) => void) | undefined;\n\n    constructor(ssrmParams: SSRMParams, storeParams: ServerSideGroupLevelParams, parentRowNode: RowNode) {\n        // finite block represents a cache with just one block, thus 0 is the id, it's the first block\n        super(0);\n        this.ssrmParams = ssrmParams;\n        this.parentRowNode = parentRowNode;\n        this.level = parentRowNode.level + 1;\n        this.groupLevel = ssrmParams.rowGroupCols ? this.level < ssrmParams.rowGroupCols.length : undefined;\n        this.leafGroup = ssrmParams.rowGroupCols ? this.level === ssrmParams.rowGroupCols.length - 1 : false;\n    }\n\n    public postConstruct(): void {\n        this.usingTreeData = this.gos.get('treeData');\n        this.nodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.parentRowNode);\n\n        if (!this.usingTreeData && this.groupLevel) {\n            const groupColVo = this.ssrmParams.rowGroupCols[this.level];\n            this.groupField = groupColVo.field!;\n            this.rowGroupColumn = this.funcColsService.getRowGroupColumns()[this.level];\n        }\n\n        let initialRowCount = 1;\n        const isRootStore = this.parentRowNode.level === -1;\n        const userInitialRowCount = this.storeUtils.getServerSideInitialRowCount();\n        if (isRootStore && userInitialRowCount != null) {\n            initialRowCount = userInitialRowCount;\n        }\n        this.initialiseRowNodes(initialRowCount);\n\n        this.rowNodeBlockLoader.addBlock(this);\n        this.addDestroyFunc(() => this.rowNodeBlockLoader.removeBlock(this));\n\n        this.postSortFunc = this.gos.getCallback('postSortRows');\n\n        if (userInitialRowCount != null) {\n            this.eventService.dispatchEventOnce({\n                type: 'rowCountReady',\n            });\n        }\n    }\n\n    public override destroy(): void {\n        this.destroyRowNodes();\n        super.destroy();\n    }\n\n    private destroyRowNodes(): void {\n        this.blockUtils.destroyRowNodes(this.allRowNodes);\n\n        this.allRowNodes = [];\n        this.nodesAfterSort = [];\n        this.nodesAfterFilter = [];\n        this.allNodesMap = {};\n    }\n\n    private initialiseRowNodes(loadingRowsCount: number, failedLoad = false): void {\n        this.destroyRowNodes();\n        for (let i = 0; i < loadingRowsCount; i++) {\n            const loadingRowNode = this.blockUtils.createRowNode({\n                field: this.groupField,\n                group: this.groupLevel!,\n                leafGroup: this.leafGroup,\n                level: this.level,\n                parent: this.parentRowNode,\n                rowGroupColumn: this.rowGroupColumn,\n            });\n            if (failedLoad) {\n                loadingRowNode.failedLoad = true;\n            }\n            this.allRowNodes.push(loadingRowNode);\n            this.nodesAfterFilter.push(loadingRowNode);\n            this.nodesAfterSort.push(loadingRowNode);\n        }\n    }\n\n    public getBlockStateJson(): { id: string; state: any } {\n        return {\n            id: this.nodeIdPrefix ? this.nodeIdPrefix : '',\n            state: this.getState(),\n        };\n    }\n\n    protected loadFromDatasource(): void {\n        this.storeUtils.loadFromDatasource({\n            startRow: undefined,\n            endRow: undefined,\n            parentBlock: this,\n            parentNode: this.parentRowNode,\n            storeParams: this.ssrmParams,\n            success: this.success.bind(this, this.getVersion()),\n            fail: this.pageLoadFailed.bind(this, this.getVersion()),\n        });\n    }\n\n    public getStartRow(): number {\n        return 0; // always zero as not in a cache\n    }\n\n    public getEndRow(): number {\n        return this.nodesAfterSort.length;\n    }\n\n    private createDataNode(data: any, index?: number): RowNode {\n        const rowNode = this.blockUtils.createRowNode({\n            field: this.groupField,\n            group: this.groupLevel!,\n            leafGroup: this.leafGroup,\n            level: this.level,\n            parent: this.parentRowNode,\n            rowGroupColumn: this.rowGroupColumn,\n        });\n\n        if (index != null) {\n            _insertIntoArray(this.allRowNodes, rowNode, index);\n        } else {\n            this.allRowNodes.push(rowNode);\n        }\n\n        const defaultId = this.prefixId(this.nodeIdSequence.next());\n        this.blockUtils.setDataIntoRowNode(rowNode, data, defaultId, undefined);\n        this.nodeManager.addRowNode(rowNode);\n\n        this.blockUtils.checkOpenByDefault(rowNode);\n\n        this.allNodesMap[rowNode.id!] = rowNode;\n\n        return rowNode;\n    }\n\n    private prefixId(id: number): string {\n        if (this.nodeIdPrefix) {\n            return this.nodeIdPrefix + '-' + id;\n        } else {\n            return id.toString();\n        }\n    }\n\n    protected processServerFail(): void {\n        this.initialiseRowNodes(1, true);\n        this.fireStoreUpdatedEvent();\n        this.flushAsyncTransactions();\n    }\n\n    public processServerResult(params: LoadSuccessParams): void {\n        if (!this.isAlive()) {\n            return;\n        }\n\n        const info = params.groupLevelInfo;\n        if (info) {\n            Object.assign(this.info, info);\n        }\n\n        if (params.pivotResultFields) {\n            this.serverSideRowModel.generateSecondaryColumns(params.pivotResultFields);\n        }\n\n        const nodesToRecycle = this.allRowNodes.length > 0 ? this.allNodesMap : undefined;\n\n        this.allRowNodes = [];\n        this.nodesAfterSort = [];\n        this.nodesAfterFilter = [];\n        this.allNodesMap = {};\n\n        if (!params.rowData) {\n            _warnOnce(\n                '\"params.data\" is missing from Server-Side Row Model success() callback. Please use the \"data\" attribute. If no data is returned, set an empty list.'\n            );\n        }\n\n        this.createOrRecycleNodes(nodesToRecycle, params.rowData);\n\n        if (nodesToRecycle) {\n            this.blockUtils.destroyRowNodes(_getAllValuesInObject(nodesToRecycle));\n        }\n\n        if (this.level === 0) {\n            this.eventService.dispatchEventOnce({\n                type: 'rowCountReady',\n            });\n        }\n\n        this.filterAndSortNodes();\n        this.fireStoreUpdatedEvent();\n        this.flushAsyncTransactions();\n    }\n\n    private createOrRecycleNodes(nodesToRecycle?: { [id: string]: RowNode }, rowData?: any[]): void {\n        if (!rowData) {\n            return;\n        }\n\n        const lookupNodeToRecycle = (data: any): RowNode | undefined => {\n            if (!nodesToRecycle) {\n                return undefined;\n            }\n\n            const getRowIdFunc = this.gos.getRowIdCallback();\n            if (!getRowIdFunc) {\n                return undefined;\n            }\n\n            const parentKeys = this.parentRowNode.getGroupKeys();\n            const level = this.level;\n            const id = getRowIdFunc({\n                data,\n                parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                level,\n            });\n            const foundNode = nodesToRecycle[id];\n            if (!foundNode) {\n                return undefined;\n            }\n\n            delete nodesToRecycle[id];\n            return foundNode;\n        };\n\n        const recycleNode = (rowNode: RowNode, dataItem: any) => {\n            this.allNodesMap[rowNode.id!] = rowNode;\n            this.blockUtils.updateDataIntoRowNode(rowNode, dataItem);\n            this.allRowNodes.push(rowNode);\n        };\n\n        rowData.forEach((dataItem) => {\n            const nodeToRecycle = lookupNodeToRecycle(dataItem);\n            if (nodeToRecycle) {\n                recycleNode(nodeToRecycle, dataItem);\n            } else {\n                this.createDataNode(dataItem);\n            }\n        });\n    }\n\n    private flushAsyncTransactions(): void {\n        // we want to update the store with any outstanding transactions straight away,\n        // as otherwise if waitTimeMillis is large (eg 5s), then the user could be looking\n        // at old data for a few seconds before the transactions is applied, which isn't what\n        // you would expect when we advertise 'transaction is applied when data is loaded'.\n        // we do this in a timeout as flushAsyncTransactions expects the grid to be in a settled\n        // state, not in the middle of loading rows! keeps the VM Turns more simple and deterministic.\n        window.setTimeout(() => this.transactionManager.flushAsyncTransactions(), 0);\n    }\n\n    private filterAndSortNodes(): void {\n        this.filterRowNodes();\n        this.sortRowNodes();\n    }\n\n    private sortRowNodes(): void {\n        const serverIsSorting =\n            this.storeUtils.isServerSideSortAllLevels() || this.storeUtils.isServerSideSortOnServer();\n        const sortOptions = this.sortController.getSortOptions();\n        const noSortApplied = !sortOptions || sortOptions.length == 0;\n        if (serverIsSorting || noSortApplied) {\n            this.nodesAfterSort = this.nodesAfterFilter;\n            return;\n        }\n\n        this.nodesAfterSort = this.rowNodeSorter.doFullSort(this.nodesAfterFilter, sortOptions);\n        if (this.postSortFunc) {\n            const params: WithoutGridCommon<PostSortRowsParams> = { nodes: this.nodesAfterSort };\n            this.postSortFunc(params);\n        }\n    }\n\n    private filterRowNodes(): void {\n        const serverIsFiltering =\n            !this.storeUtils.isServerSideOnlyRefreshFilteredGroups() || this.storeUtils.isServerSideFilterOnServer();\n        // filtering for InFullStore only works at lowest level details.\n        // reason is the logic for group filtering was to difficult to work out how it should work at time of writing.\n        const groupLevel = this.groupLevel;\n\n        if (serverIsFiltering || groupLevel) {\n            this.nodesAfterFilter = this.allRowNodes;\n            return;\n        }\n\n        this.nodesAfterFilter = this.filterManager\n            ? this.allRowNodes.filter((rowNode) => this.filterManager!.doesRowPassFilter({ rowNode: rowNode }))\n            : this.allRowNodes;\n    }\n\n    public clearDisplayIndexes(): void {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.allRowNodes.forEach((rowNode) => this.blockUtils.clearDisplayIndex(rowNode));\n    }\n\n    public getDisplayIndexEnd(): number | undefined {\n        return this.displayIndexEnd;\n    }\n\n    public isDisplayIndexInStore(displayIndex: number): boolean {\n        if (this.getRowCount() === 0) {\n            return false;\n        }\n        return displayIndex >= this.displayIndexStart! && displayIndex < this.displayIndexEnd!;\n    }\n\n    public setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.topPx = nextRowTop.value;\n\n        const visibleNodeIds: { [id: string]: boolean } = {};\n\n        // set on all visible nodes\n        this.nodesAfterSort.forEach((rowNode) => {\n            this.blockUtils.setDisplayIndex(rowNode, displayIndexSeq, nextRowTop);\n            visibleNodeIds[rowNode.id!] = true;\n        });\n\n        // and clear on all non-visible nodes\n        this.allRowNodes.forEach((rowNode) => {\n            if (!visibleNodeIds[rowNode.id!]) {\n                this.blockUtils.clearDisplayIndex(rowNode);\n            }\n        });\n\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.heightPx = nextRowTop.value - this.topPx;\n    }\n\n    public forEachStoreDeep(\n        callback: (store: IServerSideStore, index: number) => void,\n        sequence = new NumberSequence()\n    ): void {\n        callback(this, sequence.next());\n        this.allRowNodes.forEach((rowNode) => {\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachStoreDeep(callback, sequence);\n            }\n        });\n    }\n\n    public forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence = new NumberSequence()): void {\n        this.allRowNodes.forEach((rowNode) => {\n            callback(rowNode, sequence.next());\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeep(callback, sequence);\n            }\n        });\n    }\n\n    public forEachNodeDeepAfterFilterAndSort(\n        callback: (rowNode: RowNode, index: number) => void,\n        sequence = new NumberSequence(),\n        includeFooterNodes = false\n    ): void {\n        this.nodesAfterSort.forEach((rowNode) => {\n            callback(rowNode, sequence.next());\n            const childCache = rowNode.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence, includeFooterNodes);\n            }\n        });\n\n        if (includeFooterNodes && this.parentRowNode.sibling) {\n            callback(this.parentRowNode.sibling, sequence.next());\n        }\n    }\n\n    public getRowUsingDisplayIndex(displayRowIndex: number): IRowNode | undefined {\n        // this can happen if asking for a row that doesn't exist in the model,\n        // eg if a cell range is selected, and the user filters so rows no longer exists\n        if (!this.isDisplayIndexInStore(displayRowIndex)) {\n            return undefined;\n        }\n\n        const res = this.blockUtils.binarySearchForDisplayIndex(displayRowIndex, this.nodesAfterSort);\n        return res;\n    }\n\n    public getRowBounds(index: number): RowBounds | null {\n        for (let i = 0; i < this.nodesAfterSort.length; i++) {\n            const rowNode = this.nodesAfterSort[i];\n            const res = this.blockUtils.extractRowBounds(rowNode, index);\n            if (res) {\n                return res;\n            }\n        }\n\n        return null;\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        return pixel >= this.topPx && pixel < this.topPx + this.heightPx;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number | null {\n        // if pixel before block, return first row\n        const pixelBeforeThisStore = pixel <= this.topPx;\n        if (pixelBeforeThisStore) {\n            const firstNode = this.nodesAfterSort[0];\n            return firstNode.rowIndex!;\n        }\n        // if pixel after store, return last row, however the last\n        // row could be a child store\n        const pixelAfterThisStore = pixel >= this.topPx + this.heightPx;\n        if (pixelAfterThisStore) {\n            const lastRowNode = this.nodesAfterSort[this.nodesAfterSort.length - 1];\n            const lastRowNodeBottomPx = lastRowNode.rowTop! + lastRowNode.rowHeight!;\n\n            if (pixel >= lastRowNodeBottomPx && lastRowNode.expanded) {\n                if (lastRowNode.childStore && lastRowNode.childStore.getRowCount() > 0) {\n                    return lastRowNode.childStore.getRowIndexAtPixel(pixel);\n                }\n                if (lastRowNode.detailNode) {\n                    return lastRowNode.detailNode.rowIndex;\n                }\n            }\n\n            return lastRowNode.rowIndex;\n        }\n\n        let res: number | null = null;\n        this.nodesAfterSort.forEach((rowNode) => {\n            const res2 = this.blockUtils.getIndexAtPixel(rowNode, pixel);\n            if (res2 != null) {\n                res = res2;\n            }\n        });\n\n        const pixelIsPastLastRow = res == null;\n\n        if (pixelIsPastLastRow) {\n            return this.displayIndexEnd! - 1;\n        }\n\n        return res;\n    }\n\n    public getChildStore(keys: string[]): IServerSideStore | null {\n        return this.storeUtils.getChildStore(keys, this, (key: string) => {\n            const rowNode = this.allRowNodes.find((currentRowNode) => {\n                return currentRowNode.key == key;\n            });\n\n            return rowNode!;\n        });\n    }\n\n    private forEachChildStoreShallow(callback: (childStore: IServerSideStore) => void): void {\n        this.allRowNodes.forEach((rowNode) => {\n            const childStore = rowNode.childStore;\n            if (childStore) {\n                callback(childStore);\n            }\n        });\n    }\n\n    public refreshAfterFilter(params: StoreRefreshAfterParams): void {\n        const serverIsFiltering = this.storeUtils.isServerSideFilterOnServer();\n        const storeIsImpacted = this.storeUtils.isServerRefreshNeeded(\n            this.parentRowNode,\n            this.ssrmParams.rowGroupCols,\n            params\n        );\n        const serverIsFilteringAllLevels = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups();\n        if (serverIsFilteringAllLevels || (serverIsFiltering && storeIsImpacted)) {\n            this.refreshStore(true);\n            this.sortRowNodes();\n            return;\n        }\n\n        this.filterRowNodes();\n        this.sortRowNodes();\n        this.forEachChildStoreShallow((store) => store.refreshAfterFilter(params));\n    }\n\n    public refreshAfterSort(params: StoreRefreshAfterParams): void {\n        const serverIsSorting = this.storeUtils.isServerSideSortOnServer();\n        const storeIsImpacted = this.storeUtils.isServerRefreshNeeded(\n            this.parentRowNode,\n            this.ssrmParams.rowGroupCols,\n            params\n        );\n        const serverIsSortingAllLevels = this.storeUtils.isServerSideSortAllLevels();\n        if (serverIsSortingAllLevels || (serverIsSorting && storeIsImpacted)) {\n            this.refreshStore(true);\n            this.filterRowNodes();\n            return;\n        }\n\n        this.filterRowNodes();\n        this.sortRowNodes();\n        this.forEachChildStoreShallow((store) => store.refreshAfterSort(params));\n    }\n\n    public applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult {\n        // we only apply transactions to loaded state\n        switch (this.getState()) {\n            case 'failed':\n                return { status: ServerSideTransactionResultStatus.StoreLoadingFailed };\n            case 'loading':\n                return { status: ServerSideTransactionResultStatus.StoreLoading };\n            case 'needsLoading':\n                return { status: ServerSideTransactionResultStatus.StoreWaitingToLoad };\n        }\n\n        const applyCallback = this.gos.getCallback('isApplyServerSideTransaction');\n        if (applyCallback) {\n            const params: WithoutGridCommon<IsApplyServerSideTransactionParams> = {\n                transaction: transaction,\n                parentNode: this.parentRowNode,\n                groupLevelInfo: this.info,\n            };\n            const apply = applyCallback(params);\n            if (!apply) {\n                return { status: ServerSideTransactionResultStatus.Cancelled };\n            }\n        }\n\n        const res: ServerSideTransactionResult = {\n            status: ServerSideTransactionResultStatus.Applied,\n            remove: [],\n            update: [],\n            add: [],\n        };\n\n        const nodesToUnselect: RowNode[] = [];\n\n        this.executeAdd(transaction, res);\n        this.executeRemove(transaction, res, nodesToUnselect);\n        this.executeUpdate(transaction, res, nodesToUnselect);\n\n        this.filterAndSortNodes();\n\n        this.updateSelection(nodesToUnselect);\n\n        return res;\n    }\n\n    private updateSelection(nodesToUnselect: RowNode[]): void {\n        const selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                nodes: nodesToUnselect,\n                suppressFinishActions: true,\n                clearSelection: false,\n                source: 'rowDataChanged',\n            });\n\n            const event: WithoutGridCommon<SelectionChangedEvent> = {\n                type: 'selectionChanged',\n                source: 'rowDataChanged',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private executeAdd(rowDataTran: ServerSideTransaction, rowNodeTransaction: ServerSideTransactionResult): void {\n        const { add, addIndex } = rowDataTran;\n        if (_missingOrEmpty(add)) {\n            return;\n        }\n\n        const useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // items get inserted in reverse order for index insertion\n            add!.reverse().forEach((item) => {\n                const newRowNode: RowNode = this.createDataNode(item, addIndex);\n                rowNodeTransaction.add!.push(newRowNode);\n            });\n        } else {\n            add!.forEach((item) => {\n                const newRowNode: RowNode = this.createDataNode(item);\n                rowNodeTransaction.add!.push(newRowNode);\n            });\n        }\n    }\n\n    private executeRemove(\n        rowDataTran: ServerSideTransaction,\n        rowNodeTransaction: ServerSideTransactionResult,\n        nodesToUnselect: RowNode[]\n    ): void {\n        const { remove } = rowDataTran;\n\n        if (remove == null) {\n            return;\n        }\n\n        const rowIdsRemoved: { [key: string]: boolean } = {};\n\n        remove.forEach((item) => {\n            const rowNode = this.lookupRowNode(item);\n\n            if (!rowNode) {\n                return;\n            }\n\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n\n            // NOTE: were we could remove from allLeaveChildren, however _removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id!] = true;\n            // _removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete this.allNodesMap[rowNode.id!];\n\n            rowNodeTransaction.remove!.push(rowNode);\n\n            this.nodeManager.removeNode(rowNode);\n        });\n\n        this.allRowNodes = this.allRowNodes.filter((rowNode) => !rowIdsRemoved[rowNode.id!]);\n    }\n\n    private executeUpdate(\n        rowDataTran: ServerSideTransaction,\n        rowNodeTransaction: ServerSideTransactionResult,\n        nodesToUnselect: RowNode[]\n    ): void {\n        const { update } = rowDataTran;\n        if (update == null) {\n            return;\n        }\n\n        update.forEach((item) => {\n            const rowNode = this.lookupRowNode(item);\n\n            if (!rowNode) {\n                return;\n            }\n\n            this.blockUtils.updateDataIntoRowNode(rowNode, item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n\n            rowNodeTransaction.update!.push(rowNode);\n        });\n    }\n\n    private lookupRowNode(data: any): RowNode | null {\n        const getRowIdFunc = this.gos.getRowIdCallback();\n\n        if (getRowIdFunc != null) {\n            // find rowNode using id\n            const parentKeys = this.parentRowNode.getGroupKeys();\n            const id = getRowIdFunc({\n                data,\n                parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                level: this.level,\n            });\n            const rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                _errorOnce(`could not find row id=${id}, data item was not found for this id`);\n                return null;\n            }\n            return rowNode;\n        } else {\n            // find rowNode using object references\n            const rowNode = this.allRowNodes.find((currentRowNode) => currentRowNode.data === data)!;\n            if (!rowNode) {\n                _errorOnce(`could not find data item as object was not found`, data);\n                return null;\n            }\n            return rowNode;\n        }\n    }\n\n    public addStoreStates(result: ServerSideGroupLevelState[]): void {\n        result.push({\n            suppressInfiniteScroll: true,\n            route: this.parentRowNode.getGroupKeys(),\n            rowCount: this.allRowNodes.length,\n            info: this.info,\n        });\n        this.forEachChildStoreShallow((childStore) => childStore.addStoreStates(result));\n    }\n\n    public refreshStore(purge: boolean): void {\n        if (purge) {\n            const loadingRowsToShow = this.nodesAfterSort ? this.nodesAfterSort.length : 1;\n            this.initialiseRowNodes(loadingRowsToShow);\n        }\n        this.scheduleLoad();\n        this.fireStoreUpdatedEvent();\n    }\n\n    public retryLoads(): void {\n        if (this.getState() === 'failed') {\n            this.initialiseRowNodes(1);\n            this.scheduleLoad();\n        }\n\n        this.forEachChildStoreShallow((store) => store.retryLoads());\n    }\n\n    private scheduleLoad(): void {\n        this.setStateWaitingToLoad();\n        this.rowNodeBlockLoader.checkBlockToLoad();\n    }\n\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    private fireStoreUpdatedEvent(): void {\n        // this results in row model firing ModelUpdated.\n        // server side row model also updates the row indexes first\n        const event: WithoutGridCommon<StoreUpdatedEvent> = {\n            type: 'storeUpdated',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getRowCount(): number {\n        return this.nodesAfterSort.length;\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const rowNode = this.nodesAfterSort[topLevelIndex];\n        return rowNode.rowIndex!;\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return this.getState() == 'loaded';\n    }\n\n    public getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const result: RowNode[] = [];\n\n        let inActiveRange = false;\n\n        // if only one node passed, we start the selection at the top\n        if (_missing(firstInRange)) {\n            inActiveRange = true;\n        }\n\n        this.nodesAfterSort.forEach((rowNode) => {\n            const hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\n            if (inActiveRange || hitFirstOrLast) {\n                result.push(rowNode);\n            }\n\n            if (hitFirstOrLast) {\n                inActiveRange = !inActiveRange;\n            }\n        });\n\n        // inActiveRange will be still true if we never hit the second rowNode\n        const invalidRange = inActiveRange;\n        return invalidRange ? [] : result;\n    }\n\n    public getStoreBounds() {\n        return {\n            topPx: this.topPx,\n            heightPx: this.heightPx,\n        };\n    }\n}\n", "import type {\n    AgColumn,\n    BeanCollection,\n    FuncColsService,\n    IRowNode,\n    ISelectionService,\n    IServerSideStore,\n    IsApplyServerSideTransactionParams,\n    LoadSuccessParams,\n    RowBounds,\n    RowNode,\n    ServerSideGroupLevelParams,\n    ServerSideGroupLevelState,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    StoreRefreshAfterParams,\n    StoreRefreshedEvent,\n    StoreUpdatedEvent,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, NumberSequence, ServerSideTransactionResultStatus, _warnOnce } from '@ag-grid-community/core';\n\nimport type { BlockUtils } from '../../blocks/blockUtils';\nimport type { SSRMParams } from '../../serverSideRowModel';\nimport type { StoreUtils } from '../storeUtils';\nimport { LazyCache } from './lazyCache';\n\nexport class LazyStore extends BeanStub implements IServerSideStore {\n    private blockUtils: BlockUtils;\n    private storeUtils: StoreUtils;\n    private selectionService: ISelectionService;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.blockUtils = beans.ssrmBlockUtils as BlockUtils;\n        this.storeUtils = beans.ssrmStoreUtils as StoreUtils;\n        this.selectionService = beans.selectionService;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    // display indexes\n    private displayIndexStart: number | undefined;\n    private displayIndexEnd: number | undefined;\n\n    // group positioning\n    private topPx: number;\n    private heightPx: number;\n\n    // group details\n    private readonly level: number;\n    private readonly group: boolean;\n    private readonly leafGroup: boolean;\n    private readonly ssrmParams: SSRMParams;\n    private readonly storeParams: ServerSideGroupLevelParams;\n    private readonly parentRowNode: RowNode;\n    private groupField: string | undefined;\n    private rowGroupColumn: AgColumn;\n\n    private idSequence = new NumberSequence();\n    private cache: LazyCache;\n    private info: any;\n\n    constructor(ssrmParams: SSRMParams, storeParams: ServerSideGroupLevelParams, parentRowNode: RowNode) {\n        super();\n        this.ssrmParams = ssrmParams;\n        this.parentRowNode = parentRowNode;\n        this.storeParams = storeParams;\n        this.level = parentRowNode.level + 1;\n        this.group = ssrmParams.rowGroupCols ? this.level < ssrmParams.rowGroupCols.length : false;\n        this.leafGroup = ssrmParams.rowGroupCols ? this.level === ssrmParams.rowGroupCols.length - 1 : false;\n        this.info = {};\n    }\n\n    public postConstruct() {\n        let numberOfRows = 1;\n        if (this.level === 0) {\n            numberOfRows = this.storeUtils.getServerSideInitialRowCount() ?? 1;\n\n            this.eventService.dispatchEventOnce({\n                type: 'rowCountReady',\n            });\n        }\n        this.cache = this.createManagedBean(new LazyCache(this, numberOfRows, this.storeParams));\n\n        const usingTreeData = this.gos.get('treeData');\n\n        if (!usingTreeData && this.group) {\n            const groupColVo = this.ssrmParams.rowGroupCols[this.level];\n            this.groupField = groupColVo.field!;\n            this.rowGroupColumn = this.funcColsService.getRowGroupColumns()[this.level];\n        }\n    }\n\n    public override destroy(): void {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.destroyBean(this.cache);\n        super.destroy();\n    }\n\n    /**\n     * Given a server response, ingest the rows outside of the data source lifecycle.\n     *\n     * @param rowDataParams the server response containing the rows to ingest\n     * @param startRow the index to start ingesting rows\n     * @param expectedRows the expected number of rows in the response (used to determine if the last row index is known)\n     */\n    applyRowData(rowDataParams: LoadSuccessParams, startRow: number, expectedRows: number) {\n        this.cache.onLoadSuccess(startRow, expectedRows, rowDataParams);\n    }\n\n    /**\n     * Applies a given transaction to the data set within this store\n     *\n     * @param transaction an object containing delta instructions determining the changes to apply to this store\n     * @returns an object determining the status of this transaction and effected nodes\n     */\n    applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult {\n        const idFunc = this.gos.getRowIdCallback();\n        if (!idFunc) {\n            _warnOnce('getRowId callback must be implemented for transactions to work. Transaction was ignored.');\n            return {\n                status: ServerSideTransactionResultStatus.Cancelled,\n            };\n        }\n\n        const applyCallback = this.gos.getCallback('isApplyServerSideTransaction');\n        if (applyCallback) {\n            const params: WithoutGridCommon<IsApplyServerSideTransactionParams> = {\n                transaction: transaction,\n                parentNode: this.parentRowNode,\n                groupLevelInfo: this.info,\n            };\n            const apply = applyCallback(params);\n            if (!apply) {\n                return { status: ServerSideTransactionResultStatus.Cancelled };\n            }\n        }\n\n        // needs checked before transactions are applied, as rows won't be contiguous immediately\n        // after\n        const allRowsLoaded = this.cache.isStoreFullyLoaded();\n\n        let updatedNodes: RowNode[] | undefined = undefined;\n        if (transaction.update?.length) {\n            updatedNodes = this.cache.updateRowNodes(transaction.update);\n        }\n\n        let insertedNodes: RowNode[] | undefined = undefined;\n        if (transaction.add?.length) {\n            let addIndex = transaction.addIndex;\n            if (addIndex != null && addIndex < 0) {\n                addIndex = undefined;\n            }\n            insertedNodes = this.cache.insertRowNodes(transaction.add, addIndex);\n        }\n\n        let removedNodes: RowNode[] | undefined = undefined;\n        if (transaction.remove?.length) {\n            const allIdsToRemove = transaction.remove.map((data) =>\n                idFunc({ level: this.level, parentKeys: this.parentRowNode.getGroupKeys(), data })\n            );\n            const allUniqueIdsToRemove = [...new Set(allIdsToRemove)];\n            removedNodes = this.cache.removeRowNodes(allUniqueIdsToRemove);\n        }\n\n        const isClientSideSortingEnabled = this.gos.get('serverSideEnableClientSideSort');\n\n        const isUpdateOrAdd = updatedNodes?.length || insertedNodes?.length;\n        const isClientSideSort = allRowsLoaded && isClientSideSortingEnabled;\n        if (isClientSideSort && isUpdateOrAdd) {\n            // if client side sorting, we need to sort the rows after the transaction\n            this.cache.clientSideSortRows();\n        }\n\n        this.updateSelectionAfterTransaction(updatedNodes, removedNodes);\n        return {\n            status: ServerSideTransactionResultStatus.Applied,\n            update: updatedNodes,\n            add: insertedNodes,\n            remove: removedNodes,\n        };\n    }\n\n    private updateSelectionAfterTransaction(updatedNodes?: RowNode[], removedNodes?: RowNode[]) {\n        const nodesToDeselect: RowNode[] = [];\n        updatedNodes?.forEach((node) => {\n            if (node.isSelected() && !node.selectable) {\n                nodesToDeselect.push(node);\n            }\n        });\n\n        removedNodes?.forEach((node) => {\n            if (node.isSelected()) {\n                nodesToDeselect.push(node);\n            }\n        });\n\n        if (nodesToDeselect.length) {\n            this.selectionService.setNodesSelected({\n                newValue: false,\n                clearSelection: false,\n                nodes: nodesToDeselect,\n                source: 'rowDataChanged',\n            });\n        }\n    }\n\n    /**\n     * Clear the display indexes, used for fading rows out when stores are not being destroyed\n     */\n    clearDisplayIndexes(): void {\n        this.displayIndexStart = undefined;\n        this.displayIndexEnd = undefined;\n        this.cache.getNodes().forEach((lazyNode) => this.blockUtils.clearDisplayIndex(lazyNode.node));\n\n        if (this.parentRowNode.sibling) {\n            this.blockUtils.clearDisplayIndex(this.parentRowNode.sibling);\n        }\n        this.cache.clearDisplayIndexes();\n    }\n\n    /**\n     * @returns an index representing the last sequentially displayed row in the grid for this store\n     */\n    getDisplayIndexStart(): number | undefined {\n        return this.displayIndexStart;\n    }\n\n    /**\n     * @returns the index representing one after the last sequentially displayed row in the grid for this store\n     */\n    getDisplayIndexEnd(): number | undefined {\n        return this.displayIndexEnd;\n    }\n\n    /**\n     * @returns the virtual size of this store\n     */\n    getRowCount(): number {\n        if (this.parentRowNode.sibling) {\n            return this.cache.getRowCount() + 1;\n        }\n        return this.cache.getRowCount();\n    }\n\n    /**\n     * Sets the current row count of the store, and whether the last row index is known\n     */\n    setRowCount(rowCount: number, isLastRowIndexKnown?: boolean): void {\n        this.cache.setRowCount(rowCount, isLastRowIndexKnown);\n    }\n\n    /**\n     * Given a display index, returns whether that row is within this store or a child store of this store\n     *\n     * @param displayIndex the visible index of a row\n     * @returns whether or not the row exists within this store\n     */\n    isDisplayIndexInStore(displayIndex: number): boolean {\n        if (this.cache.getRowCount() === 0) return false;\n\n        return this.displayIndexStart! <= displayIndex && displayIndex < this.getDisplayIndexEnd()!;\n    }\n\n    /**\n     * Recursively sets up the display indexes and top position of every node belonging to this store.\n     *\n     * Called after a row height changes, or a store updated event.\n     *\n     * @param displayIndexSeq the number sequence for generating the display index of each row\n     * @param nextRowTop an object containing the next row top value intended to be modified by ref per row\n     */\n    setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void {\n        this.displayIndexStart = displayIndexSeq.peek();\n        this.topPx = nextRowTop.value;\n\n        const footerNode =\n            this.parentRowNode.level > -1 && this.gos.getGroupTotalRowCallback()({ node: this.parentRowNode });\n        if (!footerNode) {\n            this.parentRowNode.destroyFooter();\n        }\n\n        if (footerNode === 'top') {\n            this.parentRowNode.createFooter();\n            this.blockUtils.setDisplayIndex(this.parentRowNode.sibling, displayIndexSeq, nextRowTop);\n        }\n\n        // delegate to the store to set the row display indexes\n        this.cache.setDisplayIndexes(displayIndexSeq, nextRowTop);\n\n        if (footerNode === 'bottom') {\n            this.parentRowNode.createFooter();\n            this.blockUtils.setDisplayIndex(this.parentRowNode.sibling, displayIndexSeq, nextRowTop);\n        }\n\n        this.displayIndexEnd = displayIndexSeq.peek();\n        this.heightPx = nextRowTop.value - this.topPx;\n    }\n\n    /**\n     * Recursively applies a provided function to every node\n     *\n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeepAfterFilterAndSort\n     */\n    forEachStoreDeep(\n        callback: (store: IServerSideStore, index: number) => void,\n        sequence = new NumberSequence()\n    ): void {\n        callback(this, sequence.next());\n        this.cache.getNodes().forEach((lazyNode) => {\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachStoreDeep(callback, sequence);\n            }\n        });\n    }\n\n    /**\n     * Recursively applies a provided function to every node\n     *\n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeepAfterFilterAndSort\n     */\n    forEachNodeDeep(callback: (rowNode: RowNode<any>, index: number) => void, sequence = new NumberSequence()): void {\n        this.cache.getNodes().forEach((lazyNode) => {\n            callback(lazyNode.node, sequence.next());\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeep(callback, sequence);\n            }\n        });\n    }\n\n    /**\n     * Recursively applies a provided function to every node\n     *\n     * For the purpose of exclusively server side filtered stores, this is the same as getNodes().forEachDeep\n     */\n    forEachNodeDeepAfterFilterAndSort(\n        callback: (rowNode: RowNode<any>, index: number) => void,\n        sequence = new NumberSequence(),\n        includeFooterNodes = false\n    ): void {\n        const footerNode =\n            this.parentRowNode.level > -1 && this.gos.getGroupTotalRowCallback()({ node: this.parentRowNode });\n        if (footerNode === 'top') {\n            callback(this.parentRowNode.sibling, sequence.next());\n        }\n\n        const orderedNodes = this.cache.getOrderedNodeMap();\n        for (const key in orderedNodes) {\n            const lazyNode = orderedNodes[key];\n            callback(lazyNode.node, sequence.next());\n            const childCache = lazyNode.node.childStore;\n            if (childCache) {\n                childCache.forEachNodeDeepAfterFilterAndSort(callback, sequence, includeFooterNodes);\n            }\n        }\n\n        if (footerNode === 'bottom') {\n            callback(this.parentRowNode.sibling, sequence.next());\n        }\n    }\n\n    /**\n     * Removes the failed status from all nodes, and marks them as stub to encourage reloading\n     */\n    retryLoads(): void {\n        this.cache.getNodes().forEach(({ node }) => {\n            if (node.failedLoad) {\n                node.failedLoad = false;\n                node.__needsRefreshWhenVisible = true;\n                node.stub = true;\n            }\n        });\n        this.forEachChildStoreShallow((store) => store.retryLoads());\n        this.fireStoreUpdatedEvent();\n    }\n\n    /**\n     * Given a display index, returns the row at that location.\n     *\n     * @param displayRowIndex the displayed index within the grid to search for\n     * @returns the row node if the display index falls within the store, if it didn't exist this will create a new stub to return\n     */\n    getRowUsingDisplayIndex(displayRowIndex: number): IRowNode<any> | undefined {\n        if (this.parentRowNode.sibling && displayRowIndex === this.parentRowNode.sibling.rowIndex) {\n            return this.parentRowNode.sibling;\n        }\n        return this.cache.getRowByDisplayIndex(displayRowIndex);\n    }\n\n    /**\n     * Given a display index, returns the row top and height for the row at that index.\n     *\n     * @param displayIndex the display index of the node\n     * @returns an object containing the rowTop and rowHeight of the node at the given displayIndex\n     */\n    getRowBounds(displayIndex: number): RowBounds | null {\n        if (!this.isDisplayIndexInStore(displayIndex)) {\n            return null;\n        }\n\n        const thisNode = this.cache.getNodeCachedByDisplayIndex(displayIndex);\n        if (thisNode) {\n            const boundsFromRow = this.blockUtils.extractRowBounds(thisNode, displayIndex);\n            if (boundsFromRow) {\n                return boundsFromRow;\n            }\n        }\n\n        const { previousNode, nextNode } = this.cache.getSurroundingNodesByDisplayIndex(displayIndex) ?? {};\n\n        // previous node may equal, or catch via detail node or child of group\n        if (previousNode) {\n            const boundsFromRow = this.blockUtils.extractRowBounds(previousNode.node, displayIndex);\n            if (boundsFromRow != null) {\n                return boundsFromRow;\n            }\n        }\n\n        const defaultRowHeight = this.gos.getRowHeightAsNumber();\n        // if node after this, can calculate backwards (and ignore detail/grouping)\n        if (nextNode) {\n            const numberOfRowDiff = (nextNode.node.rowIndex! - displayIndex) * defaultRowHeight;\n            return {\n                rowTop: nextNode.node.rowTop! - numberOfRowDiff,\n                rowHeight: defaultRowHeight,\n            };\n        }\n\n        // otherwise calculate from end of store\n        const lastTop = this.topPx + this.heightPx;\n        const numberOfRowDiff = (this.getDisplayIndexEnd()! - displayIndex) * defaultRowHeight;\n        return {\n            rowTop: lastTop - numberOfRowDiff,\n            rowHeight: defaultRowHeight,\n        };\n    }\n\n    /**\n     * Given a vertical pixel, determines whether this store contains a row at that pixel\n     *\n     * @param pixel a vertical pixel position from the grid\n     * @returns whether that pixel points to a virtual space belonging to this store\n     */\n    isPixelInRange(pixel: number): boolean {\n        return pixel >= this.topPx && pixel < this.topPx + this.heightPx;\n    }\n\n    /**\n     * Given a vertical pixel, returns the row existing at that pixel location\n     *\n     * @param pixel a vertical pixel position from the grid\n     * @returns the display index at the given pixel location\n     */\n    getRowIndexAtPixel(pixel: number): number | null {\n        if (pixel < this.topPx) {\n            return this.getDisplayIndexStart()!;\n        }\n\n        if (pixel >= this.topPx + this.heightPx) {\n            return this.getDisplayIndexEnd()! - 1;\n        }\n\n        if (\n            this.parentRowNode.sibling &&\n            pixel > this.parentRowNode.sibling.rowTop! &&\n            pixel < this.parentRowNode.sibling.rowTop! + this.parentRowNode.sibling.rowHeight!\n        ) {\n            return this.parentRowNode.sibling.rowIndex!;\n        }\n\n        let distToPreviousNodeTop: number = Number.MAX_SAFE_INTEGER;\n        let previousNode: RowNode | null = null;\n        let distToNextNodeTop: number = Number.MAX_SAFE_INTEGER;\n        let nextNode: RowNode | null = null;\n\n        this.cache.getNodes().forEach(({ node }) => {\n            const distBetween = Math.abs(pixel - node.rowTop!);\n\n            // previous node\n            if (node.rowTop! < pixel) {\n                if (distBetween < distToPreviousNodeTop) {\n                    distToPreviousNodeTop = distBetween;\n                    previousNode = node;\n                }\n                return;\n            }\n            // next node\n            if (distBetween < distToNextNodeTop) {\n                distToNextNodeTop = distBetween;\n                nextNode = node;\n            }\n        });\n\n        // cast these back as typescript doesn't understand the forEach above\n        previousNode = previousNode as RowNode | null;\n        nextNode = nextNode as RowNode | null;\n\n        // previous node may equal, or catch via detail node or child of group\n        if (previousNode) {\n            const indexOfRow = this.blockUtils.getIndexAtPixel(previousNode, pixel);\n            if (indexOfRow != null) {\n                return indexOfRow;\n            }\n        }\n\n        const defaultRowHeight = this.gos.getRowHeightAsNumber();\n        // if node after this, can calculate backwards (and ignore detail/grouping)\n        if (nextNode) {\n            const nextTop = nextNode.rowTop!;\n            const numberOfRowDiff = Math.ceil((nextTop - pixel) / defaultRowHeight);\n            return nextNode.rowIndex! - numberOfRowDiff;\n        }\n\n        // otherwise calculate from end of store\n        const nextTop = this.topPx + this.heightPx;\n        const numberOfRowDiff = Math.floor((nextTop - pixel) / defaultRowHeight);\n        return this.getDisplayIndexEnd()! - numberOfRowDiff;\n    }\n\n    /**\n     * Given a path of group keys, returns the child store for that group.\n     *\n     * @param keys the grouping path to the desired store\n     * @returns the child store for the given keys, or null if not found\n     */\n    getChildStore(keys: string[]): IServerSideStore | null {\n        return this.storeUtils.getChildStore(keys, this, (key: string) => {\n            const lazyNode = this.cache.getNodes().find((lazyNode) => lazyNode.node.key == key);\n            if (!lazyNode) {\n                return null;\n            }\n            return lazyNode.node;\n        });\n    }\n\n    /**\n     * Executes a provided callback on each child store belonging to this store\n     *\n     * @param cb the callback to execute\n     */\n    private forEachChildStoreShallow(cb: (store: IServerSideStore) => void) {\n        this.cache.getNodes().forEach(({ node }) => {\n            if (node.childStore) {\n                cb(node.childStore);\n            }\n        });\n    }\n\n    /**\n     * Executes after a change to sorting, determines recursively whether this store or a child requires refreshed.\n     *\n     * If a purge refresh occurs, the row count is preserved.\n     *\n     * @param params a set of properties pertaining to the sort changes\n     */\n    refreshAfterSort(params: StoreRefreshAfterParams) {\n        const serverSortsAllLevels = this.storeUtils.isServerSideSortAllLevels();\n        if (\n            serverSortsAllLevels ||\n            this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)\n        ) {\n            const allRowsLoaded = this.cache.isStoreFullyLoaded();\n            const isClientSideSortingEnabled = this.gos.get('serverSideEnableClientSideSort');\n\n            const isClientSideSort = allRowsLoaded && isClientSideSortingEnabled;\n            if (!isClientSideSort) {\n                const oldCount = this.cache.getRowCount();\n                this.destroyBean(this.cache);\n                this.cache = this.createManagedBean(new LazyCache(this, oldCount, this.storeParams));\n                return;\n            }\n\n            // client side sorting only handles one level, so allow it to pass through\n            // to recursive sort.\n            this.cache.clientSideSortRows();\n        }\n\n        // call refreshAfterSort on children, as we did not purge.\n        // if we did purge, no need to do this as all children were destroyed\n        this.forEachChildStoreShallow((store) => store.refreshAfterSort(params));\n    }\n\n    /**\n     * Executes after a change to filtering, determines recursively whether this store or a child requires refreshed.\n     *\n     * If a refresh occurs, the row count is reset.\n     *\n     * @param params a set of properties pertaining to the filter changes\n     */\n    refreshAfterFilter(params: StoreRefreshAfterParams) {\n        const serverFiltersAllLevels = !this.storeUtils.isServerSideOnlyRefreshFilteredGroups();\n        if (\n            serverFiltersAllLevels ||\n            this.storeUtils.isServerRefreshNeeded(this.parentRowNode, this.ssrmParams.rowGroupCols, params)\n        ) {\n            this.refreshStore(true);\n            return;\n        }\n\n        // call refreshAfterFilter on children, as we did not purge.\n        // if we did purge, no need to do this as all children were destroyed\n        this.forEachChildStoreShallow((store) => store.refreshAfterFilter(params));\n    }\n\n    /**\n     * Marks all existing nodes as requiring reloaded, and triggers a load check\n     *\n     * @param purge whether to remove all nodes and data in favour of stub nodes\n     */\n    refreshStore(purge: boolean) {\n        if (purge) {\n            this.destroyBean(this.cache);\n            this.cache = this.createManagedBean(new LazyCache(this, 1, this.storeParams));\n            this.fireStoreUpdatedEvent();\n            return;\n        }\n\n        this.cache.markNodesForRefresh();\n    }\n\n    /**\n     * Used for pagination, given a local/store index, returns the display index of that row\n     *\n     * @param topLevelIndex the store index of a row\n     * @returns the display index for the given store index\n     */\n    getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        const displayIndex = this.cache.getDisplayIndexFromStoreIndex(topLevelIndex);\n        return displayIndex ?? topLevelIndex;\n    }\n\n    /**\n     * Used for pagination to determine if the last page is known, and for aria to determine if the last grid row is known\n     *\n     * @returns whether the last index of this store is known, or if lazy loading still required\n     */\n    isLastRowIndexKnown(): boolean {\n        return this.cache.isLastRowIndexKnown();\n    }\n\n    /**\n     * Used by the selection service to select a range of nodes\n     *\n     * @param firstInRange the first node in the range to find\n     * @param lastInRange the last node in the range to find\n     * @returns a range of nodes between firstInRange and lastInRange inclusive\n     */\n    getRowNodesInRange(firstInRange: RowNode<any>, lastInRange: RowNode<any>): RowNode<any>[] {\n        return this.cache\n            .getNodes()\n            .filter(({ node }) => {\n                return node.rowIndex! >= firstInRange.rowIndex! && node.rowIndex! <= lastInRange.rowIndex!;\n            })\n            .map(({ node }) => node);\n    }\n\n    /**\n     * Mutates a given array to add this stores state, and recursively add all the children store states.\n     *\n     * @param result a mutable results array\n     */\n    addStoreStates(result: ServerSideGroupLevelState[]) {\n        result.push({\n            suppressInfiniteScroll: false,\n            route: this.parentRowNode.getGroupKeys(),\n            rowCount: this.getRowCount(),\n            lastRowIndexKnown: this.isLastRowIndexKnown(),\n            info: this.info,\n            maxBlocksInCache: this.storeParams.maxBlocksInCache,\n            cacheBlockSize: this.storeParams.cacheBlockSize,\n        });\n        this.forEachChildStoreShallow((childStore) => childStore.addStoreStates(result));\n    }\n\n    public getIdSequence() {\n        return this.idSequence;\n    }\n\n    public getParentNode() {\n        return this.parentRowNode;\n    }\n\n    public getRowDetails() {\n        return {\n            field: this.groupField!,\n            group: this.group,\n            leafGroup: this.leafGroup,\n            level: this.level,\n            parent: this.parentRowNode,\n            rowGroupColumn: this.rowGroupColumn,\n        };\n    }\n\n    public getSsrmParams() {\n        return this.ssrmParams;\n    }\n\n    public setStoreInfo(info: any) {\n        if (info) {\n            Object.assign(this.info, info);\n        }\n    }\n\n    // gets called 1) row count changed 2) cache purged\n    public fireStoreUpdatedEvent(): void {\n        // this results in row model firing ModelUpdated.\n        // server side row model also updates the row indexes first\n        const event: WithoutGridCommon<StoreUpdatedEvent> = {\n            type: 'storeUpdated',\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    // gets called when row data updated, and no more refreshing needed\n    public fireRefreshFinishedEvent(): void {\n        const event: WithoutGridCommon<StoreRefreshedEvent> = {\n            type: 'storeRefreshed',\n            route: this.parentRowNode.getRoute(),\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getBlockStates() {\n        return this.cache.getBlockStates();\n    }\n\n    public getStoreBounds() {\n        return {\n            topPx: this.topPx,\n            heightPx: this.heightPx,\n        };\n    }\n\n    public getCache() {\n        return this.cache;\n    }\n}\n", "import { BeanStub, _warnOnce } from '@ag-grid-community/core';\nimport type {\n    BeanCollection,\n    FocusService,\n    GetRowIdParams,\n    IRowNode,\n    LoadSuccessParams,\n    NumberSequence,\n    RowNode,\n    RowNodeSorter,\n    RowRenderer,\n    ServerSideGroupLevelParams,\n    SortController,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\n\nimport type { BlockUtils } from '../../blocks/blockUtils';\nimport type { NodeManager } from '../../nodeManager';\nimport type { ServerSideRowModel } from '../../serverSideRowModel';\nimport { LazyBlockLoadingService } from './lazyBlockLoadingService';\nimport type { LazyStore } from './lazyStore';\nimport { MultiIndexMap } from './multiIndexMap';\n\ninterface LazyStoreNode {\n    id: string;\n    index: number;\n    node: RowNode;\n}\n\nexport class LazyCache extends BeanStub {\n    private rowRenderer: RowRenderer;\n    private blockUtils: BlockUtils;\n    private focusService: FocusService;\n    private nodeManager: NodeManager;\n    private serverSideRowModel: ServerSideRowModel;\n    private rowNodeSorter: RowNodeSorter;\n    private sortController: SortController;\n    private lazyBlockLoadingService: LazyBlockLoadingService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowRenderer = beans.rowRenderer;\n        this.blockUtils = beans.ssrmBlockUtils as BlockUtils;\n        this.focusService = beans.focusService;\n        this.nodeManager = beans.ssrmNodeManager as NodeManager;\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n        this.rowNodeSorter = beans.rowNodeSorter;\n        this.sortController = beans.sortController;\n        this.lazyBlockLoadingService = beans.lazyBlockLoadingService as LazyBlockLoadingService;\n    }\n\n    /**\n     * Indicates whether this is still the live dataset for this store (used for ignoring old requests after purge)\n     */\n    private live = true;\n\n    /**\n     * A node map indexed by the node's id, index, and node.\n     */\n    private nodeMap: MultiIndexMap<LazyStoreNode>;\n\n    /**\n     * A map of nodes indexed by the display index.\n     */\n    private nodeDisplayIndexMap: Map<number, RowNode>;\n\n    /**\n     * A set of nodes waiting to be refreshed\n     */\n    private nodesToRefresh: Set<RowNode>;\n\n    /**\n     * End of store properties\n     */\n    private numberOfRows: number;\n    private isLastRowKnown: boolean;\n\n    /**\n     * The prefix to use for node ids, this is used to ensure that node ids are unique across stores\n     */\n    private defaultNodeIdPrefix: string | undefined;\n\n    /**\n     * Sibling services - 1-1 relationships.\n     */\n    private store: LazyStore;\n    private storeParams: ServerSideGroupLevelParams;\n\n    /**\n     * Grid options properties - stored locally for access speed.\n     */\n    private getRowIdFunc?: (params: WithoutGridCommon<GetRowIdParams>) => string;\n    private isMasterDetail: boolean;\n\n    /**\n     * A cache of removed group nodes, this is retained for preserving group\n     * state when the node moves in and out of the cache. Generally caused by\n     * rows moving blocks.\n     */\n    private removedNodeCache = new Map<string, RowNode>();\n\n    constructor(store: LazyStore, numberOfRows: number, storeParams: ServerSideGroupLevelParams) {\n        super();\n        this.store = store;\n        this.numberOfRows = numberOfRows;\n        this.isLastRowKnown = false;\n        this.storeParams = storeParams;\n    }\n\n    public postConstruct() {\n        this.lazyBlockLoadingService.subscribe(this);\n        // initiate the node map to be indexed at 'index', 'id' and 'node' for quick look-up.\n        // it's important id isn't first, as stub nodes overwrite each-other, and the first index is\n        // used for iteration.\n        this.nodeMap = new MultiIndexMap('index', 'id', 'node');\n\n        this.nodeDisplayIndexMap = new Map();\n        this.nodesToRefresh = new Set();\n\n        this.defaultNodeIdPrefix = this.blockUtils.createNodeIdPrefix(this.store.getParentNode());\n        this.getRowIdFunc = this.gos.getRowIdCallback();\n        this.isMasterDetail = this.gos.get('masterDetail');\n    }\n\n    public override destroy() {\n        this.lazyBlockLoadingService.unsubscribe(this);\n        this.numberOfRows = 0;\n        this.nodeMap.forEach((node) => this.blockUtils.destroyRowNode(node.node));\n        this.nodeMap.clear();\n        this.nodeDisplayIndexMap.clear();\n        this.nodesToRefresh.clear();\n        this.live = false;\n        super.destroy();\n    }\n\n    /**\n     * Get the row node for a specific display index from this store\n     * @param displayIndex the display index of the node to find\n     * @returns undefined if the node is not in the store bounds, otherwise will always return a node\n     */\n    public getRowByDisplayIndex(displayIndex: number): IRowNode | undefined {\n        // if index isn't in store, nothing to return\n        if (!this.store.isDisplayIndexInStore(displayIndex)) {\n            return undefined;\n        }\n\n        // first try to directly look this node up in the display index map\n        const node = this.nodeDisplayIndexMap.get(displayIndex);\n        if (node) {\n            // if we have the node, check if it needs refreshed when rendered\n            if (node.stub || node.__needsRefreshWhenVisible) {\n                this.lazyBlockLoadingService.queueLoadCheck();\n            }\n            return node;\n        }\n\n        // next check if this is the first row, if so return a stub node\n        // this is a performance optimisation, as it is the most common scenario\n        // and enables the node - 1 check to kick in more often.\n        if (displayIndex === this.store.getDisplayIndexStart()) {\n            return this.createStubNode(0, displayIndex);\n        }\n\n        // check if the row immediately prior is available in the store\n        const contiguouslyPreviousNode = this.nodeDisplayIndexMap.get(displayIndex - 1);\n        if (contiguouslyPreviousNode) {\n            // if previous row is master detail, and expanded, this node must be detail\n            if (this.isMasterDetail && contiguouslyPreviousNode.master && contiguouslyPreviousNode.expanded) {\n                return contiguouslyPreviousNode.detailNode;\n            }\n\n            // if previous row is expanded group, this node will belong to that group.\n            if (\n                contiguouslyPreviousNode.expanded &&\n                contiguouslyPreviousNode.childStore?.isDisplayIndexInStore(displayIndex)\n            ) {\n                return contiguouslyPreviousNode.childStore?.getRowUsingDisplayIndex(displayIndex);\n            }\n\n            // otherwise, row must be a stub node\n            const lazyCacheNode = this.nodeMap.getBy('node', contiguouslyPreviousNode)!;\n            return this.createStubNode(lazyCacheNode.index + 1, displayIndex);\n        }\n\n        const adjacentNodes = this.getSurroundingNodesByDisplayIndex(displayIndex);\n\n        // if no bounds skipped includes this, calculate from end index\n        if (adjacentNodes == null) {\n            const storeIndexFromEndIndex = this.store.getRowCount() - (this.store.getDisplayIndexEnd()! - displayIndex);\n            return this.createStubNode(storeIndexFromEndIndex, displayIndex);\n        }\n\n        const { previousNode, nextNode } = adjacentNodes;\n\n        // if the node before this node is expanded, this node might be a child of that node\n        if (\n            previousNode &&\n            previousNode.node.expanded &&\n            previousNode.node.childStore?.isDisplayIndexInStore(displayIndex)\n        ) {\n            return previousNode.node.childStore?.getRowUsingDisplayIndex(displayIndex);\n        }\n\n        // if we have the node after this node, we can calculate the store index of this node by the difference\n        // in display indexes between the two nodes.\n        if (nextNode) {\n            const displayIndexDiff = nextNode.node.rowIndex! - displayIndex;\n            const newStoreIndex = nextNode.index - displayIndexDiff;\n            return this.createStubNode(newStoreIndex, displayIndex);\n        }\n\n        // if no next node, calculate from end index of this store\n        const storeIndexFromEndIndex = this.store.getRowCount() - (this.store.getDisplayIndexEnd()! - displayIndex);\n        return this.createStubNode(storeIndexFromEndIndex, displayIndex);\n    }\n\n    /**\n     * Used for creating and positioning a stub node without firing a store updated event\n     */\n    private createStubNode(storeIndex: number, displayIndex: number): RowNode {\n        // bounds are acquired before creating the node, as otherwise it'll use it's own empty self to calculate\n        const rowBounds = this.store.getRowBounds(displayIndex!);\n        const newNode = this.createRowAtIndex(storeIndex, null, (node) => {\n            node.setRowIndex(displayIndex);\n            node.setRowTop(rowBounds!.rowTop);\n            this.nodeDisplayIndexMap.set(displayIndex, node);\n        });\n        this.lazyBlockLoadingService.queueLoadCheck();\n        return newNode;\n    }\n\n    /**\n     * @param index The row index relative to this store\n     * @returns A rowNode at the given store index\n     */\n    public getRowByStoreIndex(index: number) {\n        return this.nodeMap.getBy('index', index)?.node;\n    }\n\n    /**\n     * Given a number of rows, skips through the given sequence & row top reference (using default row height)\n     * @param numberOfRowsToSkip number of rows to skip over in the given sequence\n     * @param displayIndexSeq the sequence in which to skip\n     * @param nextRowTop the row top reference in which to skip\n     */\n    private skipDisplayIndexes(\n        numberOfRowsToSkip: number,\n        displayIndexSeq: NumberSequence,\n        nextRowTop: { value: number }\n    ) {\n        if (numberOfRowsToSkip === 0) {\n            return;\n        }\n        const defaultRowHeight = this.gos.getRowHeightAsNumber();\n\n        displayIndexSeq.skip(numberOfRowsToSkip);\n        nextRowTop.value += numberOfRowsToSkip * defaultRowHeight;\n    }\n\n    /**\n     * @param displayIndexSeq the number sequence for generating the display index of each row\n     * @param nextRowTop an object containing the next row top value intended to be modified by ref per row\n     */\n    public setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number }): void {\n        // Create a map of display index nodes for access speed\n        this.nodeDisplayIndexMap.clear();\n\n        // create an object indexed by store index, as this will sort all of the nodes when we iterate\n        // the object\n        const orderedMap: { [key: number]: RowNode } = {};\n        this.nodeMap.forEach((lazyNode) => {\n            orderedMap[lazyNode.index] = lazyNode.node;\n        });\n\n        let lastIndex = -1;\n        // iterate over the nodes in order, setting the display index on each node.\n        for (const stringIndex in orderedMap) {\n            const node = orderedMap[stringIndex];\n            const numericIndex = Number(stringIndex);\n\n            // if any nodes aren't currently in the store, skip the display indexes too\n            const numberOfRowsToSkip = numericIndex - 1 - lastIndex;\n            this.skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop);\n\n            // set this nodes index and row top\n            this.blockUtils.setDisplayIndex(node, displayIndexSeq, nextRowTop);\n            this.nodeDisplayIndexMap.set(node.rowIndex!, node);\n\n            // store this index for skipping after this\n            lastIndex = numericIndex;\n        }\n\n        // need to skip rows until the end of this store\n        const numberOfRowsToSkip = this.numberOfRows - 1 - lastIndex;\n        this.skipDisplayIndexes(numberOfRowsToSkip, displayIndexSeq, nextRowTop);\n\n        // this is not terribly efficient, and could probs be improved\n        this.purgeExcessRows();\n    }\n\n    public getRowCount(): number {\n        return this.numberOfRows;\n    }\n\n    setRowCount(rowCount: number, isLastRowIndexKnown?: boolean): void {\n        if (rowCount < 0) {\n            throw new Error('AG Grid: setRowCount can only accept a positive row count.');\n        }\n\n        this.numberOfRows = rowCount;\n\n        if (isLastRowIndexKnown != null) {\n            this.isLastRowKnown = isLastRowIndexKnown;\n\n            if (isLastRowIndexKnown === false) {\n                this.numberOfRows += 1;\n            }\n        }\n\n        this.fireStoreUpdatedEvent();\n    }\n\n    public getNodes() {\n        return this.nodeMap;\n    }\n\n    public getNodeCachedByDisplayIndex(displayIndex: number): RowNode | null {\n        return this.nodeDisplayIndexMap.get(displayIndex) ?? null;\n    }\n\n    public getNodesToRefresh(): Set<RowNode> {\n        return this.nodesToRefresh;\n    }\n\n    /**\n     * @returns the previous and next loaded row nodes surrounding the given display index\n     */\n    public getSurroundingNodesByDisplayIndex(displayIndex: number) {\n        let nextNode: LazyStoreNode | undefined;\n        let previousNode: LazyStoreNode | undefined;\n        this.nodeMap.forEach((lazyNode) => {\n            // previous node\n            if (displayIndex > lazyNode.node.rowIndex!) {\n                // get the largest previous node\n                if (previousNode == null || previousNode.node.rowIndex! < lazyNode.node.rowIndex!) {\n                    previousNode = lazyNode;\n                }\n                return;\n            }\n            // next node\n            // get the smallest next node\n            if (nextNode == null || nextNode.node.rowIndex! > lazyNode.node.rowIndex!) {\n                nextNode = lazyNode;\n                return;\n            }\n        });\n        if (!previousNode && !nextNode) return null;\n        return { previousNode, nextNode };\n    }\n\n    /**\n     * Get or calculate the display index for a given store index\n     * @param storeIndex the rows index within this store\n     * @returns the rows visible display index relative to the grid\n     */\n    public getDisplayIndexFromStoreIndex(storeIndex: number): number | null {\n        const nodeAtIndex = this.nodeMap.getBy('index', storeIndex);\n        if (nodeAtIndex) {\n            return nodeAtIndex.node.rowIndex!;\n        }\n\n        let nextNode: LazyStoreNode | undefined;\n        let previousNode: LazyStoreNode | undefined;\n        this.nodeMap.forEach((lazyNode) => {\n            // previous node\n            if (storeIndex > lazyNode.index) {\n                // get the largest previous node\n                if (previousNode == null || previousNode.index < lazyNode.index) {\n                    previousNode = lazyNode;\n                }\n                return;\n            }\n            // next node\n            // get the smallest next node\n            if (nextNode == null || nextNode.index > lazyNode.index) {\n                nextNode = lazyNode;\n                return;\n            }\n        });\n\n        if (!nextNode) {\n            return this.store.getDisplayIndexEnd()! - (this.numberOfRows - storeIndex);\n        }\n\n        if (!previousNode) {\n            return this.store.getDisplayIndexStart()! + storeIndex;\n        }\n\n        const storeIndexDiff = storeIndex - previousNode.index;\n        const previousDisplayIndex = previousNode.node.childStore?.getDisplayIndexEnd() ?? previousNode.node.rowIndex!;\n        return previousDisplayIndex + storeIndexDiff;\n    }\n\n    /**\n     * Creates a new row and inserts it at the given index\n     * @param atStoreIndex the node index relative to this store\n     * @param data the data object to populate the node with\n     * @returns the new row node\n     */\n    private createRowAtIndex(atStoreIndex: number, data?: any, createNodeCallback?: (node: RowNode) => void): RowNode {\n        // make sure an existing node isn't being overwritten\n        const lazyNode = this.nodeMap.getBy('index', atStoreIndex);\n\n        // if node already exists, update it or destroy it\n        if (lazyNode) {\n            const { node } = lazyNode;\n            node.__needsRefreshWhenVisible = false;\n\n            // if the node is the same, just update the content\n            if (this.doesNodeMatch(data, node)) {\n                this.blockUtils.updateDataIntoRowNode(node, data);\n                this.nodesToRefresh.delete(node);\n                return node;\n            }\n\n            // if there's no id and this is an open group, protect this node from changes\n            // hasChildren also checks for tree data and master detail\n            if (this.getRowIdFunc == null && node.hasChildren() && node.expanded) {\n                this.nodesToRefresh.delete(node);\n                return node;\n            }\n\n            // destroy the old node, might be worth caching state here\n            this.destroyRowAtIndex(atStoreIndex);\n        }\n\n        // if the node already exists elsewhere, update it and move it to the new location\n        if (data && this.getRowIdFunc != null) {\n            const id = this.getRowId(data);\n\n            // the node was deleted at some point, but as we're refreshing\n            // it's been cached and we can retrieve it for reuse.\n            const deletedNode = id && this.removedNodeCache?.get(id);\n            if (deletedNode) {\n                this.removedNodeCache?.delete(id!);\n                this.blockUtils.updateDataIntoRowNode(deletedNode, data);\n                this.nodeMap.set({\n                    id: deletedNode.id!,\n                    node: deletedNode,\n                    index: atStoreIndex,\n                });\n                this.nodesToRefresh.delete(deletedNode);\n                deletedNode.__needsRefreshWhenVisible = false;\n                return deletedNode;\n            }\n\n            const lazyNode = this.nodeMap.getBy('id', id);\n            if (lazyNode) {\n                // delete old lazy node so we can insert it at different location\n                this.nodeMap.delete(lazyNode);\n\n                const { node, index } = lazyNode;\n                this.blockUtils.updateDataIntoRowNode(node, data);\n                this.nodeMap.set({\n                    id: node.id!,\n                    node,\n                    index: atStoreIndex,\n                });\n                this.nodesToRefresh.delete(node);\n                node.__needsRefreshWhenVisible = false;\n\n                if (this.getBlockStartIndex(index) === this.getBlockStartIndex(atStoreIndex)) {\n                    // if the block hasn't changed and we have a nodes map, we don't need to refresh the original block, as this block\n                    // has just been refreshed.\n                    return node;\n                }\n\n                // mark all of the old block as needsVerify to trigger it for a refresh, as nodes\n                // should not be out of place\n                this.markBlockForVerify(index);\n\n                return node;\n            }\n        }\n\n        // node doesn't exist, create a new one\n        const newNode = this.blockUtils.createRowNode(this.store.getRowDetails());\n        if (data != null) {\n            const defaultId = this.getPrefixedId(this.store.getIdSequence().next());\n            this.blockUtils.setDataIntoRowNode(newNode, data, defaultId, undefined);\n\n            // don't allow the SSRM to listen to the dispatched row event, as it will\n            // compute extra unnecessary row updates\n            this.serverSideRowModel.setPaused(true);\n            this.blockUtils.checkOpenByDefault(newNode);\n            this.serverSideRowModel.setPaused(false);\n            this.nodeManager.addRowNode(newNode);\n        }\n\n        // add the new node to the store, has to be done after the display index is calculated so it doesn't take itself into account\n        this.nodeMap.set({\n            id: newNode.id!,\n            node: newNode,\n            index: atStoreIndex,\n        });\n\n        if (createNodeCallback) {\n            createNodeCallback(newNode);\n        }\n\n        return newNode;\n    }\n\n    public getBlockStates() {\n        const blockCounts: { [key: string]: number } = {};\n        const blockStates: { [key: string]: Set<string> } = {};\n\n        this.nodeMap.forEach(({ node, index }) => {\n            const blockStart = this.getBlockStartIndex(index);\n\n            if (!node.stub && !node.failedLoad) {\n                blockCounts[blockStart] = (blockCounts[blockStart] ?? 0) + 1;\n            }\n\n            let rowState = 'loaded';\n            if (node.failedLoad) {\n                rowState = 'failed';\n            } else if (this.lazyBlockLoadingService.isRowLoading(this, blockStart)) {\n                rowState = 'loading';\n            } else if (this.nodesToRefresh.has(node) || node.stub) {\n                rowState = 'needsLoading';\n            }\n\n            if (!blockStates[blockStart]) {\n                blockStates[blockStart] = new Set<string>();\n            }\n            blockStates[blockStart].add(rowState);\n        });\n\n        const statePriorityMap: { [key: string]: number } = {\n            loading: 4,\n            failed: 3,\n            needsLoading: 2,\n            loaded: 1,\n        };\n\n        const blockPrefix = this.blockUtils.createNodeIdPrefix(this.store.getParentNode());\n\n        const results: { [key: string]: any } = {};\n        Object.entries(blockStates).forEach(([blockStart, uniqueStates]) => {\n            const sortedStates = [...uniqueStates].sort(\n                (a, b) => (statePriorityMap[a] ?? 0) - (statePriorityMap[b] ?? 0)\n            );\n            const priorityState = sortedStates[0];\n\n            const blockNumber = Number(blockStart) / this.getBlockSize();\n\n            const blockId = blockPrefix ? `${blockPrefix}-${blockNumber}` : String(blockNumber);\n            results[blockId] = {\n                blockNumber,\n                startRow: Number(blockStart),\n                endRow: Number(blockStart) + this.getBlockSize(),\n                pageStatus: priorityState,\n                loadedRowCount: blockCounts[blockStart] ?? 0,\n            };\n        });\n        return results;\n    }\n\n    public destroyRowAtIndex(atStoreIndex: number) {\n        const lazyNode = this.nodeMap.getBy('index', atStoreIndex);\n        if (!lazyNode) {\n            return;\n        }\n\n        this.nodeMap.delete(lazyNode);\n\n        this.nodeDisplayIndexMap.delete(lazyNode.node.rowIndex!);\n\n        if (this.nodesToRefresh.size > 0) {\n            // while refreshing, we retain the group nodes so they can be moved\n            // without losing state\n            this.removedNodeCache.set(lazyNode.node.id!, lazyNode.node);\n        } else {\n            this.blockUtils.destroyRowNode(lazyNode.node);\n        }\n\n        this.nodesToRefresh.delete(lazyNode.node);\n    }\n\n    public getSsrmParams() {\n        return this.store.getSsrmParams();\n    }\n\n    /**\n     * @param id the base id to be prefixed\n     * @returns a node id with prefix if required\n     */\n    private getPrefixedId(id: number): string {\n        if (this.defaultNodeIdPrefix) {\n            return this.defaultNodeIdPrefix + '-' + id;\n        } else {\n            return id.toString();\n        }\n    }\n\n    private markBlockForVerify(rowIndex: number) {\n        const [start, end] = this.getBlockBounds(rowIndex);\n        const lazyNodesInRange = this.nodeMap.filter((lazyNode) => lazyNode.index >= start && lazyNode.index < end);\n        lazyNodesInRange.forEach(({ node }) => {\n            node.__needsRefreshWhenVisible = true;\n        });\n    }\n\n    private doesNodeMatch(data: any, node: RowNode): boolean {\n        if (node.stub) {\n            return false;\n        }\n        const id = this.getRowId(data);\n        return id === null ? node.data === data : node.id === id;\n    }\n\n    /**\n     * Deletes any stub nodes not within the given range\n     */\n    public purgeStubsOutsideOfViewport() {\n        const firstRow = this.rowRenderer.getFirstVirtualRenderedRow();\n        const lastRow = this.rowRenderer.getLastVirtualRenderedRow();\n        const firstRowBlockStart = this.getBlockStartIndex(firstRow);\n        const [, lastRowBlockEnd] = this.getBlockBounds(lastRow);\n\n        this.nodeMap.forEach((lazyNode) => {\n            // failed loads are still useful, so we don't purge them\n            if (this.lazyBlockLoadingService.isRowLoading(this, lazyNode.index) || lazyNode.node.failedLoad) {\n                return;\n            }\n            if (lazyNode.node.stub && (lazyNode.index < firstRowBlockStart || lazyNode.index > lastRowBlockEnd)) {\n                this.destroyRowAtIndex(lazyNode.index);\n            }\n        });\n    }\n\n    private getBlocksDistanceFromRow(nodes: LazyStoreNode[], otherDisplayIndex: number) {\n        const blockDistanceToMiddle: { [key: number]: number } = {};\n        nodes.forEach(({ node, index }) => {\n            const [blockStart, blockEnd] = this.getBlockBounds(index);\n            if (blockStart in blockDistanceToMiddle) {\n                return;\n            }\n            const distStart = Math.abs(node.rowIndex! - otherDisplayIndex);\n            let distEnd;\n            // may not have an end node if the block came back small\n            const lastLazyNode = this.nodeMap.getBy('index', [blockEnd - 1]);\n            if (lastLazyNode) distEnd = Math.abs(lastLazyNode.node.rowIndex! - otherDisplayIndex);\n            const farthest = distEnd == null || distStart < distEnd ? distStart : distEnd;\n\n            blockDistanceToMiddle[blockStart] = farthest;\n        });\n        return Object.entries(blockDistanceToMiddle);\n    }\n\n    private purgeExcessRows() {\n        // Delete all stub nodes which aren't in the viewport or already loading\n        this.purgeStubsOutsideOfViewport();\n\n        if (this.store.getDisplayIndexEnd() == null || this.storeParams.maxBlocksInCache == null) {\n            // if group is collapsed, or max blocks missing, ignore the event\n            return;\n        }\n\n        const firstRowInViewport = this.rowRenderer.getFirstVirtualRenderedRow();\n        const lastRowInViewport = this.rowRenderer.getLastVirtualRenderedRow();\n\n        // the start storeIndex of every block in this store\n        const allLoadedBlocks: Set<number> = new Set();\n        // the start storeIndex of every displayed block in this store\n        const blocksInViewport: Set<number> = new Set();\n        this.nodeMap.forEach(({ index, node }) => {\n            const blockStart = this.getBlockStartIndex(index);\n            allLoadedBlocks.add(blockStart);\n\n            const isInViewport = node.rowIndex! >= firstRowInViewport && node.rowIndex! <= lastRowInViewport;\n            if (isInViewport) {\n                blocksInViewport.add(blockStart);\n            }\n        });\n\n        // if the viewport is larger than the max blocks, then the viewport size is minimum cache size\n        const numberOfBlocksToRetain = Math.max(blocksInViewport.size, this.storeParams.maxBlocksInCache ?? 0);\n\n        // ensure there is blocks that can be removed\n        const loadedBlockCount = allLoadedBlocks.size;\n        const blocksToRemove = loadedBlockCount - numberOfBlocksToRetain;\n        if (blocksToRemove <= 0) {\n            return;\n        }\n\n        // the first and last block in the viewport\n        let firstRowBlockStart = Number.MAX_SAFE_INTEGER;\n        let lastRowBlockStart = Number.MIN_SAFE_INTEGER;\n        blocksInViewport.forEach((blockStart) => {\n            if (firstRowBlockStart > blockStart) {\n                firstRowBlockStart = blockStart;\n            }\n\n            if (lastRowBlockStart < blockStart) {\n                lastRowBlockStart = blockStart;\n            }\n        });\n\n        // all nodes which aren't cached or in the viewport, and so can be removed\n        const disposableNodes = this.nodeMap.filter(({ node, index }) => {\n            const rowBlockStart = this.getBlockStartIndex(index);\n            const rowBlockInViewport = rowBlockStart >= firstRowBlockStart && rowBlockStart <= lastRowBlockStart;\n\n            return !rowBlockInViewport && !this.isNodeCached(node);\n        });\n\n        if (disposableNodes.length === 0) {\n            return;\n        }\n\n        const midViewportRow = firstRowInViewport + (lastRowInViewport - firstRowInViewport) / 2;\n        const blockDistanceArray = this.getBlocksDistanceFromRow(disposableNodes, midViewportRow);\n        const blockSize = this.getBlockSize();\n\n        // sort the blocks by distance from middle of viewport\n        blockDistanceArray.sort((a, b) => Math.sign(b[1] - a[1]));\n\n        // remove excess blocks, starting from furthest from viewport\n        for (let i = 0; i < Math.min(blocksToRemove, blockDistanceArray.length); i++) {\n            const blockStart = Number(blockDistanceArray[i][0]);\n            for (let x = blockStart; x < blockStart + blockSize; x++) {\n                const lazyNode = this.nodeMap.getBy('index', x);\n                if (!lazyNode || this.isNodeCached(lazyNode.node)) {\n                    continue;\n                }\n                this.destroyRowAtIndex(x);\n            }\n        }\n    }\n\n    private isNodeFocused(node: RowNode): boolean {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n\n        const hasFocus = focusedCell.rowIndex === node.rowIndex;\n        return hasFocus;\n    }\n\n    private isNodeCached(node: RowNode): boolean {\n        return (node.isExpandable() && node.expanded) || this.isNodeFocused(node);\n    }\n\n    private extractDuplicateIds(rows: any[]) {\n        if (this.getRowIdFunc == null) {\n            return [];\n        }\n\n        const newIds = new Set();\n        const duplicates = new Set();\n        rows.forEach((data) => {\n            const id = this.getRowId(data);\n            if (newIds.has(id)) {\n                duplicates.add(id);\n                return;\n            }\n            newIds.add(id);\n        });\n\n        return [...duplicates];\n    }\n\n    public onLoadSuccess(firstRowIndex: number, numberOfRowsExpected: number, response: LoadSuccessParams) {\n        if (!this.live) return;\n\n        const info = response.groupLevelInfo;\n        this.store.setStoreInfo(info);\n\n        if (this.getRowIdFunc != null) {\n            const duplicates = this.extractDuplicateIds(response.rowData);\n            if (duplicates.length > 0) {\n                const duplicateIdText = duplicates.join(', ');\n                _warnOnce(\n                    `Unable to display rows as duplicate row ids (${duplicateIdText}) were returned by the getRowId callback. Please modify the getRowId callback to provide unique ids.`\n                );\n                this.onLoadFailed(firstRowIndex, numberOfRowsExpected);\n                return;\n            }\n        }\n\n        if (response.pivotResultFields) {\n            this.serverSideRowModel.generateSecondaryColumns(response.pivotResultFields);\n        }\n\n        const wasRefreshing = this.nodesToRefresh.size > 0;\n        response.rowData.forEach((data, responseRowIndex) => {\n            const rowIndex = firstRowIndex + responseRowIndex;\n            const nodeFromCache = this.nodeMap.getBy('index', rowIndex);\n\n            // if stub, overwrite\n            if (nodeFromCache?.node?.stub) {\n                this.createRowAtIndex(rowIndex, data);\n                return;\n            }\n\n            // node already exists, and same as node at designated position, update data\n            if (nodeFromCache && this.doesNodeMatch(data, nodeFromCache.node)) {\n                this.blockUtils.updateDataIntoRowNode(nodeFromCache.node, data);\n                this.nodesToRefresh.delete(nodeFromCache.node);\n                nodeFromCache.node.__needsRefreshWhenVisible = false;\n                return;\n            }\n            // create row will handle deleting the overwritten row\n            this.createRowAtIndex(rowIndex, data);\n        });\n\n        if (response.rowCount != undefined && response.rowCount !== -1) {\n            // if the rowCount has been provided, set the row count\n            this.numberOfRows = response.rowCount;\n            this.isLastRowKnown = true;\n        } else if (numberOfRowsExpected > response.rowData.length) {\n            // infer the last row as the response came back short\n            this.numberOfRows = firstRowIndex + response.rowData.length;\n            this.isLastRowKnown = true;\n        } else if (!this.isLastRowKnown) {\n            // add 1 for loading row, as we don't know the last row\n            const lastInferredRow = firstRowIndex + response.rowData.length + 1;\n            if (lastInferredRow > this.numberOfRows) {\n                this.numberOfRows = lastInferredRow;\n            }\n        }\n\n        if (this.isLastRowKnown) {\n            // delete any rows after the last index\n            const lazyNodesAfterStoreEnd = this.nodeMap.filter((lazyNode) => lazyNode.index >= this.numberOfRows);\n            lazyNodesAfterStoreEnd.forEach((lazyNode) => this.destroyRowAtIndex(lazyNode.index));\n        }\n\n        this.fireStoreUpdatedEvent();\n\n        // Happens after store updated, as store updating can clear our excess rows.\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        if (wasRefreshing && finishedRefreshing) {\n            this.fireRefreshFinishedEvent();\n        }\n    }\n\n    public fireRefreshFinishedEvent() {\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        // if anything refreshing currently, skip.\n        if (!finishedRefreshing) {\n            return;\n        }\n\n        // any nodes left in the map need to be cleaned up, this prevents us preserving nodes\n        // indefinitely\n        this.removedNodeCache.forEach((node) => {\n            this.blockUtils.destroyRowNode(node);\n        });\n        this.removedNodeCache = new Map();\n\n        this.store.fireRefreshFinishedEvent();\n    }\n\n    /**\n     * @returns true if all rows are loaded\n     */\n    public isStoreFullyLoaded() {\n        const knowsSize = this.isLastRowKnown;\n        const hasCorrectRowCount = this.nodeMap.getSize() === this.numberOfRows;\n        if (!knowsSize || !hasCorrectRowCount) {\n            return;\n        }\n\n        if (this.nodesToRefresh.size > 0) {\n            return;\n        }\n\n        // nodeMap find cancels early when it finds a matching record.\n        // better to use this than forEach\n        let index = -1;\n        const firstOutOfPlaceNode = this.nodeMap.find((lazyNode) => {\n            index += 1;\n            // node not contiguous, nodes must be missing\n            if (lazyNode.index !== index) {\n                return true;\n            }\n            // node data is out of date\n            if (lazyNode.node.__needsRefreshWhenVisible) {\n                return true;\n            }\n            // node not yet loaded\n            if (lazyNode.node.stub) {\n                return true;\n            }\n            return false;\n        });\n        return firstOutOfPlaceNode == null;\n    }\n\n    public isLastRowIndexKnown() {\n        return this.isLastRowKnown;\n    }\n\n    public onLoadFailed(firstRowIndex: number, numberOfRowsExpected: number) {\n        if (!this.live) return;\n        const wasRefreshing = this.nodesToRefresh.size > 0;\n\n        for (let i = firstRowIndex; i < firstRowIndex + numberOfRowsExpected && i < this.getRowCount(); i++) {\n            let { node }: { node?: RowNode } = this.nodeMap.getBy('index', i) ?? {};\n            if (node) {\n                this.nodesToRefresh.delete(node);\n            }\n            if (!node || !node.stub) {\n                if (node && !node.stub) {\n                    // if node is not a stub, we destroy it and recreate as nodes can't go from data to stub\n                    this.destroyRowAtIndex(i);\n                }\n                node = this.createRowAtIndex(i);\n            }\n            // this node has been refreshed, even if it wasn't successful\n            node.__needsRefreshWhenVisible = false;\n            node.failedLoad = true;\n        }\n\n        const finishedRefreshing = this.nodesToRefresh.size === 0;\n        if (wasRefreshing && finishedRefreshing) {\n            this.fireRefreshFinishedEvent();\n        }\n\n        this.fireStoreUpdatedEvent();\n    }\n\n    public markNodesForRefresh() {\n        this.nodeMap.forEach((lazyNode) => {\n            if (lazyNode.node.stub && !lazyNode.node.failedLoad) {\n                return;\n            }\n            this.nodesToRefresh.add(lazyNode.node);\n        });\n        this.lazyBlockLoadingService.queueLoadCheck();\n\n        if (this.isLastRowKnown && this.numberOfRows === 0) {\n            this.numberOfRows = 1;\n            this.isLastRowKnown = false;\n            this.fireStoreUpdatedEvent();\n        }\n    }\n\n    public isNodeInCache(id: string): boolean {\n        return !!this.nodeMap.getBy('id', id);\n    }\n\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    private fireStoreUpdatedEvent(): void {\n        if (!this.live) {\n            return;\n        }\n\n        this.store.fireStoreUpdatedEvent();\n    }\n\n    private getRowId(data: any): string | null {\n        if (this.getRowIdFunc == null) {\n            return null;\n        }\n\n        // find rowNode using id\n        const { level } = this.store.getRowDetails();\n        const parentKeys = this.store.getParentNode().getGroupKeys();\n        return this.getRowIdFunc({\n            data,\n            parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n            level,\n        });\n    }\n\n    public getOrderedNodeMap() {\n        const obj: { [key: number]: LazyStoreNode } = {};\n        this.nodeMap.forEach((node) => (obj[node.index] = node));\n        return obj;\n    }\n\n    public clearDisplayIndexes() {\n        this.nodeDisplayIndexMap.clear();\n    }\n\n    /**\n     * Client side sorting\n     */\n    public clientSideSortRows() {\n        const sortOptions = this.sortController.getSortOptions();\n        const isAnySort = sortOptions.some((opt) => opt.sort != null);\n        if (!isAnySort) {\n            return;\n        }\n\n        // the node map does not need entirely recreated, only the indexes need updated.\n        const allNodes = new Array(this.nodeMap.getSize());\n        this.nodeMap.forEach((lazyNode) => (allNodes[lazyNode.index] = lazyNode.node));\n        this.nodeMap.clear();\n\n        const sortedNodes = this.rowNodeSorter.doFullSort(allNodes, sortOptions);\n        sortedNodes.forEach((node, index) => {\n            this.nodeMap.set({\n                id: node.id!,\n                node,\n                index,\n            });\n        });\n    }\n\n    /**\n     * Transaction Support here\n     */\n    public updateRowNodes(updates: any[]): RowNode[] {\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Transactions can only be applied when row ids are supplied.');\n        }\n\n        const updatedNodes: RowNode[] = [];\n        updates.forEach((data) => {\n            const id = this.getRowId(data);\n            const lazyNode = this.nodeMap.getBy('id', id);\n            if (lazyNode) {\n                this.blockUtils.updateDataIntoRowNode(lazyNode.node, data);\n                updatedNodes.push(lazyNode.node);\n            }\n        });\n        return updatedNodes;\n    }\n\n    public insertRowNodes(inserts: any[], indexToAdd?: number): RowNode[] {\n        // adjust row count to allow for footer row\n        const realRowCount = this.store.getRowCount() - (this.store.getParentNode().sibling ? 1 : 0);\n\n        // if missing and we know the last row, we're inserting at the end\n        const addIndex = indexToAdd == null && this.isLastRowKnown ? realRowCount : indexToAdd;\n\n        // can't insert nodes past the end of the store\n        if (addIndex == null || realRowCount < addIndex) {\n            return [];\n        }\n\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Transactions can only be applied when row ids are supplied.');\n        }\n\n        const uniqueInsertsMap: { [id: string]: any } = {};\n\n        inserts.forEach((data) => {\n            const dataId = this.getRowId(data)!;\n            if (dataId && this.isNodeInCache(dataId)) {\n                return;\n            }\n\n            uniqueInsertsMap[dataId] = data;\n        });\n\n        const uniqueInserts = Object.values(uniqueInsertsMap);\n\n        const numberOfInserts = uniqueInserts.length;\n        if (numberOfInserts === 0) {\n            return [];\n        }\n\n        const nodesToMove = this.nodeMap.filter((node) => node.index >= addIndex);\n        // delete all nodes which need moved first, so they don't get overwritten\n        nodesToMove.forEach((lazyNode) => this.nodeMap.delete(lazyNode));\n        // then move the nodes to their new locations\n        nodesToMove.forEach((lazyNode) => {\n            this.nodeMap.set({\n                node: lazyNode.node,\n                index: lazyNode.index + numberOfInserts,\n                id: lazyNode.id,\n            });\n        });\n\n        // increase the store size to accommodate\n        this.numberOfRows += numberOfInserts;\n\n        // finally insert the new rows\n        return uniqueInserts.map((data, uniqueInsertOffset) =>\n            this.createRowAtIndex(addIndex + uniqueInsertOffset, data)\n        );\n    }\n\n    public removeRowNodes(idsToRemove: string[]): RowNode[] {\n        if (this.getRowIdFunc == null) {\n            // throw error, as this is type checked in the store. User likely abusing internal apis if here.\n            throw new Error('AG Grid: Transactions can only be applied when row ids are supplied.');\n        }\n\n        const removedNodes: RowNode[] = [];\n        const nodesToVerify: RowNode[] = [];\n\n        // track how many nodes have been deleted, as when we pass other nodes we need to shift them up\n        let deletedNodeCount = 0;\n\n        const remainingIdsToRemove = [...idsToRemove];\n\n        const allNodes = this.getOrderedNodeMap();\n        let contiguousIndex = -1;\n        for (const stringIndex in allNodes) {\n            contiguousIndex += 1;\n            const node = allNodes[stringIndex];\n\n            // finding the index allows the use of splice which should be slightly faster than both a check and filter\n            const matchIndex = remainingIdsToRemove.findIndex((idToRemove) => idToRemove === node.id);\n            if (matchIndex !== -1) {\n                // found node, remove it from nodes to remove\n                remainingIdsToRemove.splice(matchIndex, 1);\n\n                this.destroyRowAtIndex(Number(stringIndex));\n                removedNodes.push(node.node);\n                deletedNodeCount += 1;\n                continue;\n            }\n\n            // no nodes removed and this node doesn't match, so no need to shift\n            if (deletedNodeCount === 0) {\n                continue;\n            }\n\n            const numericStoreIndex = Number(stringIndex);\n            if (contiguousIndex !== numericStoreIndex) {\n                nodesToVerify.push(node.node);\n            }\n\n            // shift normal node up by number of deleted prior to this point\n            this.nodeMap.delete(allNodes[stringIndex]);\n            this.nodeMap.set({\n                id: node.id!,\n                node: node.node,\n                index: numericStoreIndex - deletedNodeCount,\n            });\n        }\n\n        this.numberOfRows -= this.isLastRowIndexKnown() ? idsToRemove.length : deletedNodeCount;\n\n        if (remainingIdsToRemove.length > 0 && nodesToVerify.length > 0) {\n            nodesToVerify.forEach((node) => (node.__needsRefreshWhenVisible = true));\n            this.lazyBlockLoadingService.queueLoadCheck();\n        }\n\n        return removedNodes;\n    }\n\n    /**\n     * Return the block size configured for this cache\n     */\n    public getBlockSize() {\n        return this.storeParams.cacheBlockSize || LazyBlockLoadingService.DEFAULT_BLOCK_SIZE;\n    }\n\n    /**\n     * Get the start index of the loading block for a given index\n     */\n    public getBlockStartIndex(storeIndex: number): number {\n        const blockSize = this.getBlockSize();\n        return storeIndex - (storeIndex % blockSize);\n    }\n\n    /**\n     * Get the start and end index of a block, given a row store index\n     */\n    public getBlockBounds(storeIndex: number): [number, number] {\n        const startOfBlock = this.getBlockStartIndex(storeIndex);\n        const blockSize = this.getBlockSize();\n        return [startOfBlock, startOfBlock + blockSize];\n    }\n}\n", "import type {\n    BeanCollection,\n    IServerSideGetRowsParams,\n    IServerSideGetRowsRequest,\n    LoadSuccessParams,\n    NamedBean,\n    RowNode,\n    RowNodeBlockLoader,\n    RowRenderer,\n} from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport type { ServerSideRowModel } from '../../serverSideRowModel';\nimport type { LazyCache } from './lazyCache';\nimport { LazyStore } from './lazyStore';\n\nexport class LazyBlockLoadingService extends BeanStub implements NamedBean {\n    beanName = 'lazyBlockLoadingService' as const;\n\n    private rowNodeBlockLoader: RowNodeBlockLoader;\n    private rowRenderer: RowRenderer;\n    private rowModel: ServerSideRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowNodeBlockLoader = beans.rowNodeBlockLoader!;\n        this.rowRenderer = beans.rowRenderer;\n        this.rowModel = beans.rowModel as ServerSideRowModel;\n    }\n\n    public static DEFAULT_BLOCK_SIZE = 100;\n\n    // a map of caches to loading nodes\n    private cacheLoadingNodesMap: Map<LazyCache, Set<number>> = new Map();\n\n    // if a check is queued to happen this cycle\n    private isCheckQueued = false;\n\n    // this is cached for blockLoadDebounce\n    private nextBlockToLoad?: { cache: LazyCache; index: number } = undefined;\n    private loaderTimeout?: number;\n\n    public postConstruct() {\n        // after a block is loaded, check if we have a block to load now that\n        // `maxConcurrentDatasourceRequests` has changed\n        this.addManagedListeners(this.rowNodeBlockLoader, { blockLoaded: () => this.queueLoadCheck() });\n    }\n\n    public subscribe(cache: LazyCache) {\n        this.cacheLoadingNodesMap.set(cache, new Set());\n    }\n\n    public unsubscribe(cache: LazyCache) {\n        this.cacheLoadingNodesMap.delete(cache);\n    }\n\n    /**\n     * Queues a microtask to check if any blocks need to be loaded.\n     */\n    public queueLoadCheck() {\n        if (this.isCheckQueued) {\n            return;\n        }\n        this.isCheckQueued = true;\n        window.queueMicrotask(() => {\n            this.queueLoadAction();\n            this.isCheckQueued = false;\n        });\n    }\n\n    private queueLoadAction() {\n        const nextBlockToLoad = this.getBlockToLoad();\n        if (!nextBlockToLoad) {\n            return;\n        }\n\n        // for blockLoadDebounceMillis, if the next block to load is the same as the last block to load, ignore\n        // otherwise cancel existing timeout and requeue\n        const isSameBlock =\n            this.nextBlockToLoad &&\n            this.nextBlockToLoad.cache === nextBlockToLoad.cache &&\n            this.nextBlockToLoad.index === nextBlockToLoad.index;\n        if (isSameBlock) {\n            return;\n        }\n\n        if (!this.nextBlockToLoad || !isSameBlock) {\n            this.nextBlockToLoad = nextBlockToLoad;\n            window.clearTimeout(this.loaderTimeout);\n\n            const startRow = Number(this.nextBlockToLoad.index);\n            const cache = this.nextBlockToLoad.cache;\n            const endRow = nextBlockToLoad.index + nextBlockToLoad.cache.getBlockSize();\n            this.loaderTimeout = window.setTimeout(() => {\n                if (!cache.isAlive()) {\n                    return;\n                }\n                this.loaderTimeout = undefined;\n                this.attemptLoad(cache, startRow, endRow);\n                this.nextBlockToLoad = undefined;\n            }, this.gos.get('blockLoadDebounceMillis'));\n        }\n    }\n\n    private attemptLoad(cache: LazyCache, start: number, end: number) {\n        const availableLoadingCount = this.rowNodeBlockLoader.getAvailableLoadingCount();\n        // too many loads already, ignore the request as a successful request will requeue itself anyway\n        if (availableLoadingCount != null && availableLoadingCount === 0) {\n            return;\n        }\n\n        this.rowNodeBlockLoader.registerLoads(1);\n        this.executeLoad(cache, start, end);\n\n        // requeue a load action before waiting for a response, this is to enable\n        // more than one block to load simultaneously due to maxConcurrentDatasourceRequests\n        this.queueLoadCheck();\n    }\n\n    private executeLoad(cache: LazyCache, startRow: number, endRow: number) {\n        const ssrmParams = cache.getSsrmParams();\n        const request: IServerSideGetRowsRequest = {\n            startRow,\n            endRow,\n            rowGroupCols: ssrmParams.rowGroupCols,\n            valueCols: ssrmParams.valueCols,\n            pivotCols: ssrmParams.pivotCols,\n            pivotMode: ssrmParams.pivotMode,\n            groupKeys: (cache as any).store.getParentNode().getGroupKeys(),\n            filterModel: ssrmParams.filterModel,\n            sortModel: ssrmParams.sortModel,\n        };\n\n        const loadingNodes = this.cacheLoadingNodesMap.get(cache)!;\n        const removeNodesFromLoadingMap = () => {\n            for (let i = 0; i < endRow - startRow; i++) {\n                loadingNodes.delete(startRow + i);\n            }\n        };\n\n        const addNodesToLoadingMap = () => {\n            for (let i = 0; i < endRow - startRow; i++) {\n                loadingNodes.add(startRow + i);\n            }\n        };\n\n        const success = (params: LoadSuccessParams) => {\n            this.rowNodeBlockLoader.loadComplete();\n            cache.onLoadSuccess(startRow, endRow - startRow, params);\n            removeNodesFromLoadingMap();\n        };\n\n        const fail = () => {\n            this.rowNodeBlockLoader.loadComplete();\n            cache.onLoadFailed(startRow, endRow - startRow);\n            removeNodesFromLoadingMap();\n        };\n\n        const params: IServerSideGetRowsParams = this.gos.addGridCommonParams({\n            request,\n            success,\n            fail,\n            parentNode: (cache as any).store.getParentNode(),\n        });\n\n        addNodesToLoadingMap();\n        cache.getSsrmParams().datasource?.getRows(params);\n    }\n\n    private getBlockToLoad() {\n        const firstRowInViewport = this.rowRenderer.getFirstVirtualRenderedRow();\n        const lastRowInViewport = this.rowRenderer.getLastVirtualRenderedRow();\n\n        // quick look-up for priority rows needing loading in viewport.\n        for (let i = firstRowInViewport; i <= lastRowInViewport; i++) {\n            const row = this.rowModel.getRow(i);\n            if (!row) {\n                continue;\n            }\n\n            const store = row.parent && row.parent.childStore;\n            if (!store || !(store instanceof LazyStore)) {\n                continue;\n            }\n\n            const cache: LazyCache = store.getCache();\n            const lazyNode = cache.getNodes().getBy('node', row);\n            if (!lazyNode) {\n                continue;\n            }\n\n            const loadingNodes = this.cacheLoadingNodesMap.get(cache);\n            if (loadingNodes?.has(lazyNode.index)) {\n                continue;\n            }\n\n            if (row.__needsRefreshWhenVisible || (row.stub && !row.failedLoad)) {\n                return {\n                    cache: cache,\n                    index: cache.getBlockStartIndex(lazyNode.index),\n                };\n            }\n        }\n\n        let cacheToRefresh: LazyCache | null = null;\n        let nodeToRefresh: RowNode | null = null;\n        let nodeToRefreshDist: number = Number.MAX_SAFE_INTEGER;\n\n        for (const cache of this.cacheLoadingNodesMap.keys()) {\n            const nodesToRefresh = cache.getNodesToRefresh();\n            nodesToRefresh.forEach((node) => {\n                if (node.rowIndex == null) {\n                    nodeToRefresh = node;\n                    cacheToRefresh = cache;\n                    return;\n                }\n\n                const lazyNode = cache.getNodes().getBy('node', node);\n                if (!lazyNode) {\n                    return;\n                }\n\n                const loadingNodes = this.cacheLoadingNodesMap.get(cache);\n                if (loadingNodes?.has(lazyNode.index)) {\n                    return;\n                }\n\n                const distToViewportTop = Math.abs(firstRowInViewport - node.rowIndex);\n                const distToViewportBottom = Math.abs(node.rowIndex - lastRowInViewport);\n                if (distToViewportTop < nodeToRefreshDist) {\n                    nodeToRefresh = node;\n                    nodeToRefreshDist = distToViewportTop;\n                    cacheToRefresh = cache;\n                }\n\n                if (distToViewportBottom < nodeToRefreshDist) {\n                    nodeToRefresh = node;\n                    nodeToRefreshDist = distToViewportBottom;\n                    cacheToRefresh = cache;\n                }\n            });\n        }\n\n        if (!cacheToRefresh) {\n            return undefined;\n        }\n\n        const lazyCache = cacheToRefresh as LazyCache;\n\n        const lazyIndex = lazyCache.getNodes().getBy('node', nodeToRefresh)?.index;\n        return lazyIndex == null\n            ? undefined\n            : {\n                  cache: lazyCache,\n                  index: lazyCache.getBlockStartIndex(lazyIndex),\n              };\n    }\n\n    public isRowLoading(cache: LazyCache, index: number) {\n        return this.cacheLoadingNodesMap.get(cache)?.has(index) ?? false;\n    }\n}\n", "export class MultiIndexMap<K> {\n    private indexes: (keyof K)[];\n    private maps: Map<keyof K, Map<any, K>>;\n\n    constructor(...indexes: (keyof K)[]) {\n        if (indexes.length < 1) {\n            throw new Error('AG Grid: At least one index must be provided.');\n        }\n        this.indexes = indexes;\n        this.maps = new Map(this.indexes.map((index) => [index, new Map()]));\n    }\n\n    public getSize(): number {\n        return this.maps.get(this.indexes[0])!.size;\n    }\n\n    public getBy(index: keyof K, key: any): K | undefined {\n        const map = this.maps.get(index);\n        if (!map) {\n            throw new Error(`AG Grid: ${String(index)} not found`);\n        }\n        return map.get(key);\n    }\n\n    public set(item: K) {\n        this.indexes.forEach((index) => {\n            const map = this.maps.get(index);\n            if (!map) {\n                throw new Error(`AG Grid: ${String(index)} not found`);\n            }\n            map.set(item[index], item);\n        });\n    }\n\n    public delete(item: K) {\n        this.indexes.forEach((index) => {\n            const map = this.maps.get(index);\n            if (!map) {\n                throw new Error(`AG Grid: ${String(index)} not found`);\n            }\n            map.delete(item[index]);\n        });\n    }\n\n    public clear() {\n        this.maps.forEach((map) => map.clear());\n    }\n\n    private getIterator(index: keyof K) {\n        const map = this.maps.get(index);\n        if (!map) {\n            throw new Error(`AG Grid: ${String(index)} not found`);\n        }\n        return map.values();\n    }\n\n    public forEach(callback: (item: K) => void) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer: IteratorResult<K, any>;\n        while ((pointer = iterator.next())) {\n            if (pointer.done) break;\n            callback(pointer.value);\n        }\n    }\n\n    public find(callback: (item: K) => boolean) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer: IteratorResult<K, any>;\n        while ((pointer = iterator.next())) {\n            if (pointer.done) break;\n            if (callback(pointer.value)) {\n                return pointer.value;\n            }\n        }\n    }\n\n    public filter(predicate: (item: K) => boolean) {\n        const iterator = this.getIterator(this.indexes[0]);\n        let pointer: IteratorResult<K, any>;\n        const result: K[] = [];\n        while ((pointer = iterator.next())) {\n            if (pointer.done) break;\n            if (predicate(pointer.value)) {\n                result.push(pointer.value);\n            }\n        }\n        return result;\n    }\n}\n", "import type {\n    BeanCollection,\n    IServerSideGroupSelectionState,\n    IServerSideSelectionState,\n    LoadSuccessParams,\n    RefreshServerSideParams,\n    ServerSideGroupLevelState,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\n\nexport function getServerSideSelectionState(\n    beans: BeanCollection\n): IServerSideSelectionState | IServerSideGroupSelectionState | null {\n    return beans.selectionService.getSelectionState() as\n        | IServerSideSelectionState\n        | IServerSideGroupSelectionState\n        | null;\n}\n\nexport function setServerSideSelectionState(\n    beans: BeanCollection,\n    state: IServerSideSelectionState | IServerSideGroupSelectionState\n) {\n    beans.selectionService.setSelectionState(state, 'api');\n}\n\nexport function applyServerSideTransaction(\n    beans: BeanCollection,\n    transaction: ServerSideTransaction\n): ServerSideTransactionResult | undefined {\n    return beans.ssrmTransactionManager?.applyTransaction(transaction);\n}\n\nexport function applyServerSideRowData(\n    beans: BeanCollection,\n    params: { successParams: LoadSuccessParams; route?: string[]; startRow?: number }\n): void {\n    const startRow = params.startRow ?? 0;\n    const route = params.route ?? [];\n    if (startRow < 0) {\n        _warnOnce(`invalid value ${params.startRow} for startRow, the value should be >= 0`);\n        return;\n    }\n\n    beans.rowModelHelperService?.getServerSideRowModel()?.applyRowData(params.successParams, startRow, route);\n}\n\nexport function applyServerSideTransactionAsync(\n    beans: BeanCollection,\n    transaction: ServerSideTransaction,\n    callback?: (res: ServerSideTransactionResult) => void\n): void {\n    return beans.ssrmTransactionManager?.applyTransactionAsync(transaction, callback);\n}\n\nexport function retryServerSideLoads(beans: BeanCollection): void {\n    beans.rowModelHelperService?.getServerSideRowModel()?.retryLoads();\n}\n\nexport function flushServerSideAsyncTransactions(beans: BeanCollection): void {\n    return beans.ssrmTransactionManager?.flushAsyncTransactions();\n}\n\nexport function refreshServerSide(beans: BeanCollection, params?: RefreshServerSideParams): void {\n    beans.rowModelHelperService?.getServerSideRowModel()?.refreshStore(params);\n}\n\nexport function getServerSideGroupLevelState(beans: BeanCollection): ServerSideGroupLevelState[] {\n    return beans.rowModelHelperService?.getServerSideRowModel()?.getStoreState() ?? [];\n}\n", "import type {\n    BeanCollection,\n    IExpansionService,\n    IsServerSideGroupOpenByDefaultParams,\n    NamedBean,\n    RowNode,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { ExpansionService } from '@ag-grid-community/core';\n\nimport type { ServerSideRowModel } from '../serverSideRowModel';\n\nexport class ServerSideExpansionService extends ExpansionService implements NamedBean, IExpansionService {\n    override beanName = 'expansionService' as const;\n\n    private serverSideRowModel: ServerSideRowModel;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n    }\n\n    private queuedRowIds: Set<string> = new Set();\n\n    public override postConstruct(): void {\n        super.postConstruct();\n        this.addManagedEventListeners({\n            columnRowGroupChanged: () => {\n                this.queuedRowIds.clear();\n            },\n        });\n    }\n\n    public checkOpenByDefault(rowNode: RowNode): void {\n        if (!rowNode.isExpandable()) {\n            return;\n        }\n\n        if (this.queuedRowIds.has(rowNode.id!)) {\n            this.queuedRowIds.delete(rowNode.id!);\n            rowNode.setExpanded(true);\n            return;\n        }\n\n        const userFunc = this.gos.getCallback('isServerSideGroupOpenByDefault');\n        if (!userFunc) {\n            return;\n        }\n\n        const params: WithoutGridCommon<IsServerSideGroupOpenByDefaultParams> = {\n            data: rowNode.data,\n            rowNode,\n        };\n\n        const userFuncRes = userFunc(params);\n\n        if (userFuncRes) {\n            rowNode.setExpanded(true);\n        }\n    }\n\n    public override expandRows(rowIds: string[]): void {\n        rowIds.forEach((rowId) => {\n            const rowNode = this.serverSideRowModel.getRowNode(rowId);\n            if (rowNode) {\n                rowNode.setExpanded(true);\n            } else {\n                this.queuedRowIds.add(rowId);\n            }\n        });\n    }\n\n    public override expandAll(value: boolean): void {\n        this.serverSideRowModel.expandAll(value);\n    }\n\n    public override onGroupExpandedOrCollapsed(): void {\n        // do nothing\n    }\n}\n", "import type {\n    BeanCollection,\n    IRowModel,\n    ISelectionService,\n    ISetNodesSelectedParams,\n    NamedBean,\n    RowNode,\n    SelectionChangedEvent,\n    SelectionEventSourceType,\n    ServerSideRowGroupSelectionState,\n    ServerSideRowSelectionState,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nimport { DefaultStrategy } from './selection/strategies/defaultStrategy';\nimport { GroupSelectsChildrenStrategy } from './selection/strategies/groupSelectsChildrenStrategy';\nimport type { ISelectionStrategy } from './selection/strategies/iSelectionStrategy';\n\nexport class ServerSideSelectionService extends BeanStub implements NamedBean, ISelectionService {\n    beanName = 'selectionService' as const;\n\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    private selectionStrategy: ISelectionStrategy;\n\n    public postConstruct(): void {\n        const groupSelectsChildren = this.gos.get('groupSelectsChildren');\n        this.addManagedPropertyListener('groupSelectsChildren', (propChange) => {\n            this.destroyBean(this.selectionStrategy);\n\n            const Strategy = !propChange.currentValue ? DefaultStrategy : GroupSelectsChildrenStrategy;\n            this.selectionStrategy = this.createManagedBean(new Strategy());\n\n            this.shotgunResetNodeSelectionState();\n            this.dispatchSelectionChanged('api');\n        });\n\n        this.addManagedPropertyListener('rowSelection', () => this.deselectAllRowNodes({ source: 'api' }));\n\n        const Strategy = !groupSelectsChildren ? DefaultStrategy : GroupSelectsChildrenStrategy;\n        this.selectionStrategy = this.createManagedBean(new Strategy());\n    }\n\n    public getSelectionState(): string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState | null {\n        return this.selectionStrategy.getSelectedState();\n    }\n\n    public setSelectionState(\n        state: string[] | ServerSideRowSelectionState | ServerSideRowGroupSelectionState,\n        source: SelectionEventSourceType\n    ): void {\n        if (Array.isArray(state)) {\n            return;\n        }\n        this.selectionStrategy.setSelectedState(state);\n        this.shotgunResetNodeSelectionState();\n\n        this.dispatchSelectionChanged(source);\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        const { nodes, ...otherParams } = params;\n\n        const rowSelection = this.gos.get('rowSelection');\n        if (nodes.length > 1 && rowSelection !== 'multiple') {\n            _warnOnce(`cannot multi select while rowSelection='single'`);\n            return 0;\n        }\n\n        if (nodes.length > 1 && params.rangeSelect) {\n            _warnOnce(`cannot use range selection when multi selecting rows`);\n            return 0;\n        }\n\n        const adjustedParams = {\n            nodes: nodes.filter((node) => node.selectable),\n            ...otherParams,\n        };\n\n        // if no selectable nodes, then return 0\n        if (!adjustedParams.nodes.length) {\n            return 0;\n        }\n\n        const changedNodes = this.selectionStrategy.setNodesSelected(adjustedParams);\n        this.shotgunResetNodeSelectionState(adjustedParams.source);\n        this.dispatchSelectionChanged(adjustedParams.source);\n        return changedNodes;\n    }\n\n    /**\n     * Deletes the selection state for a set of nodes, for use after deleting nodes via\n     * transaction. As this is designed for transactions, all nodes should belong to the same group.\n     */\n    public deleteSelectionStateFromParent(storeRoute: string[], removedNodeIds: string[]) {\n        const stateChanged = this.selectionStrategy.deleteSelectionStateFromParent(storeRoute, removedNodeIds);\n        if (!stateChanged) {\n            return;\n        }\n\n        this.shotgunResetNodeSelectionState();\n        this.dispatchSelectionChanged('api');\n    }\n\n    private shotgunResetNodeSelectionState(source?: SelectionEventSourceType) {\n        this.rowModel.forEachNode((node) => {\n            if (node.stub) {\n                return;\n            }\n\n            const isNodeSelected = this.selectionStrategy.isNodeSelected(node);\n            if (isNodeSelected !== node.isSelected()) {\n                node.selectThisNode(isNodeSelected, undefined, source);\n            }\n        });\n    }\n\n    public getSelectedNodes(): RowNode<any>[] {\n        return this.selectionStrategy.getSelectedNodes();\n    }\n\n    public getSelectedRows(): any[] {\n        return this.selectionStrategy.getSelectedRows();\n    }\n\n    public getSelectionCount(): number {\n        return this.selectionStrategy.getSelectionCount();\n    }\n\n    public syncInRowNode(rowNode: RowNode<any>): void {\n        // update any refs being held in the strategies\n        this.selectionStrategy.processNewRow(rowNode);\n\n        const isNodeSelected = this.selectionStrategy.isNodeSelected(rowNode);\n\n        // if the node was selected but node is not selectable, we deselect the node.\n        // (could be due to user applying selected state directly, or a change in selectable)\n        if (isNodeSelected != false && !rowNode.selectable) {\n            this.selectionStrategy.setNodesSelected({\n                nodes: [rowNode],\n                newValue: false,\n                source: 'api',\n            });\n\n            // we need to shotgun reset here as if this was hierarchical, some group nodes\n            // may be changing from indeterminate to unchecked.\n            this.shotgunResetNodeSelectionState();\n            this.dispatchSelectionChanged('api');\n            return;\n        }\n        rowNode.setSelectedInitialValue(isNodeSelected);\n    }\n\n    public reset(): void {\n        this.selectionStrategy.deselectAllRowNodes({ source: 'api' });\n    }\n\n    public isEmpty(): boolean {\n        return this.selectionStrategy.isEmpty();\n    }\n\n    public hasNodesToSelect() {\n        return true;\n    }\n\n    public selectAllRowNodes(params: {\n        source: SelectionEventSourceType;\n        justFiltered?: boolean | undefined;\n        justCurrentPage?: boolean | undefined;\n    }): void {\n        validateSelectionParameters(params);\n\n        this.selectionStrategy.selectAllRowNodes(params);\n\n        this.rowModel.forEachNode((node) => {\n            if (node.stub) {\n                return;\n            }\n\n            node.selectThisNode(true, undefined, params.source);\n        });\n\n        this.dispatchSelectionChanged(params.source);\n    }\n\n    public deselectAllRowNodes(params: {\n        source: SelectionEventSourceType;\n        justFiltered?: boolean | undefined;\n        justCurrentPage?: boolean | undefined;\n    }): void {\n        validateSelectionParameters(params);\n\n        this.selectionStrategy.deselectAllRowNodes(params);\n\n        this.rowModel.forEachNode((node) => {\n            if (node.stub) {\n                return;\n            }\n\n            node.selectThisNode(false, undefined, params.source);\n        });\n\n        this.dispatchSelectionChanged(params.source);\n    }\n\n    public getSelectAllState(justFiltered?: boolean, justCurrentPage?: boolean): boolean | null {\n        return this.selectionStrategy.getSelectAllState(justFiltered, justCurrentPage);\n    }\n\n    // used by CSRM\n    public updateGroupsFromChildrenSelections(): boolean {\n        return false;\n    }\n\n    // used by CSRM\n    public getBestCostNodeSelection(): RowNode<any>[] | undefined {\n        _warnOnce('calling gridApi.getBestCostNodeSelection() is only possible when using rowModelType=`clientSide`.');\n        return undefined;\n    }\n\n    // used by CSRM\n    public filterFromSelection(): void {\n        return;\n    }\n\n    private dispatchSelectionChanged(source: SelectionEventSourceType): void {\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: 'selectionChanged',\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n}\nfunction validateSelectionParameters(params: {\n    source: SelectionEventSourceType;\n    justFiltered?: boolean | undefined;\n    justCurrentPage?: boolean | undefined;\n}) {\n    if (params.justCurrentPage || params.justFiltered) {\n        _warnOnce(`selecting just filtered only works when gridOptions.rowModelType='clientSide'`);\n    }\n}\n", "import type {\n    BeanCollection,\n    IRowModel,\n    IServerSideSelectionState,\n    ISetNodesSelectedParams,\n    RowNode,\n    SelectionChangedEvent,\n    SelectionEventSourceType,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce, _last, _warnOnce, isSelectionUIEvent } from '@ag-grid-community/core';\n\nimport { ServerSideRowRangeSelectionContext } from '../serverSideRowRangeSelectionContext';\nimport type { ISelectionStrategy } from './iSelectionStrategy';\n\ninterface SelectedState {\n    selectAll: boolean;\n    toggledNodes: Set<string>;\n}\n\nexport class DefaultStrategy extends BeanStub implements ISelectionStrategy {\n    private rowModel: IRowModel;\n    private selectionCtx = new ServerSideRowRangeSelectionContext();\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    private selectedState: SelectedState = { selectAll: false, toggledNodes: new Set() };\n\n    private selectAllUsed: boolean = false;\n    // this is to prevent regressions, default selectionService retains reference of clicked nodes.\n    private selectedNodes: { [key: string]: RowNode } = {};\n\n    private rowSelection?: 'single' | 'multiple';\n\n    public postConstruct(): void {\n        this.selectionCtx.init(this.rowModel);\n        this.rowSelection = this.gos.get('rowSelection');\n        this.addManagedPropertyListener('rowSelection', (propChange) => {\n            this.rowSelection = propChange.currentValue;\n        });\n    }\n\n    public getSelectedState(): IServerSideSelectionState {\n        return {\n            selectAll: this.selectedState.selectAll,\n            toggledNodes: [...this.selectedState.toggledNodes],\n        };\n    }\n\n    public setSelectedState(state: any) {\n        // fire selection changed event\n        const newState: SelectedState = {\n            selectAll: false,\n            toggledNodes: new Set(),\n        };\n\n        if (typeof state !== 'object') {\n            _errorOnce('The provided selection state should be an object.');\n            return;\n        }\n\n        if ('selectAll' in state && typeof state.selectAll === 'boolean') {\n            newState.selectAll = state.selectAll;\n        } else {\n            _errorOnce('Select all status should be of boolean type.');\n            return;\n        }\n\n        if ('toggledNodes' in state && Array.isArray(state.toggledNodes)) {\n            state.toggledNodes.forEach((key: any) => {\n                if (typeof key === 'string') {\n                    newState.toggledNodes.add(key);\n                } else {\n                    _warnOnce(`Provided ids must be of string type. Invalid id provided: ${key}`);\n                }\n            });\n        } else {\n            _warnOnce('`toggledNodes` must be an array of string ids.');\n            return;\n        }\n\n        this.selectedState = newState;\n    }\n\n    public deleteSelectionStateFromParent(parentPath: string[], removedNodeIds: string[]): boolean {\n        if (this.selectedState.toggledNodes.size === 0) {\n            return false;\n        }\n\n        let anyNodesToggled = false;\n\n        removedNodeIds.forEach((id) => {\n            if (this.selectedState.toggledNodes.delete(id)) {\n                anyNodesToggled = true;\n            }\n        });\n\n        return anyNodesToggled;\n    }\n\n    private overrideSelectionValue(newValue: boolean, source: SelectionEventSourceType): boolean {\n        if (!isSelectionUIEvent(source)) {\n            return newValue;\n        }\n\n        const root = this.selectionCtx.getRoot();\n        const node = root ? this.rowModel.getRowNode(root) : null;\n\n        return node ? node.isSelected() ?? false : true;\n    }\n\n    public setNodesSelected(params: ISetNodesSelectedParams): number {\n        const { nodes, clearSelection, newValue, rangeSelect, source } = params;\n        if (nodes.length === 0) return 0;\n\n        const onlyThisNode = clearSelection && newValue && !rangeSelect;\n        if (this.rowSelection !== 'multiple' || onlyThisNode) {\n            if (nodes.length > 1) {\n                throw new Error(\"AG Grid: cannot select multiple rows when rowSelection is set to 'single'\");\n            }\n            const node = nodes[0];\n            if (newValue && node.selectable) {\n                this.selectedNodes = { [node.id!]: node };\n                this.selectedState = {\n                    selectAll: false,\n                    toggledNodes: new Set([node.id!]),\n                };\n            } else {\n                this.selectedNodes = {};\n                this.selectedState = {\n                    selectAll: false,\n                    toggledNodes: new Set(),\n                };\n            }\n            if (node.selectable) {\n                this.selectionCtx.setRoot(node.id!);\n            }\n            return 1;\n        }\n\n        const updateNodeState = (node: RowNode, value = newValue) => {\n            if (value && node.selectable) {\n                this.selectedNodes[node.id!] = node;\n            } else {\n                delete this.selectedNodes[node.id!];\n            }\n\n            const doesNodeConform = value === this.selectedState.selectAll;\n            if (doesNodeConform || !node.selectable) {\n                this.selectedState.toggledNodes.delete(node.id!);\n            } else {\n                this.selectedState.toggledNodes.add(node.id!);\n            }\n        };\n\n        if (rangeSelect) {\n            if (nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when using rangeSelect');\n            }\n            const node = nodes[0];\n            const newSelectionValue = this.overrideSelectionValue(newValue, source);\n\n            if (this.selectionCtx.isInRange(node.id!)) {\n                const partition = this.selectionCtx.truncate(node.id!);\n\n                // When we are selecting a range, we may need to de-select part of the previously\n                // selected range (see AG-9620)\n                // When we are de-selecting a range, we can/should leave the other nodes unchanged\n                // (i.e. selected nodes outside the current range should remain selected - see AG-10215)\n                if (newSelectionValue) {\n                    partition.discard.forEach((node) => updateNodeState(node, false));\n                }\n                partition.keep.forEach((node) => updateNodeState(node, newSelectionValue));\n            } else {\n                const fromNode = this.selectionCtx.getRoot();\n                const toNode = node;\n                if (fromNode !== toNode.id) {\n                    const partition = this.selectionCtx.extend(node.id!);\n                    if (newSelectionValue) {\n                        partition.discard.forEach((node) => updateNodeState(node, false));\n                    }\n                    partition.keep.forEach((node) => updateNodeState(node, newSelectionValue));\n                }\n            }\n            return 1;\n        }\n\n        nodes.forEach((node) => updateNodeState(node));\n        this.selectionCtx.setRoot(_last(nodes).id!);\n        return 1;\n    }\n\n    public processNewRow(node: RowNode<any>): void {\n        if (this.selectedNodes[node.id!]) {\n            this.selectedNodes[node.id!] = node;\n        }\n    }\n\n    public isNodeSelected(node: RowNode): boolean | undefined {\n        const isToggled = this.selectedState.toggledNodes.has(node.id!);\n        return this.selectedState.selectAll ? !isToggled : isToggled;\n    }\n\n    public getSelectedNodes(): RowNode<any>[] {\n        if (this.selectAllUsed) {\n            _warnOnce(\n                `getSelectedNodes and getSelectedRows functions cannot be used with select all functionality with the server-side row model.\n                Use \\`api.getServerSideSelectionState()\\` instead.`\n            );\n        }\n        return Object.values(this.selectedNodes);\n    }\n\n    public getSelectedRows(): any[] {\n        return this.getSelectedNodes().map((node) => node.data);\n    }\n\n    public getSelectionCount(): number {\n        if (this.selectedState.selectAll) {\n            return -1;\n        }\n        return this.selectedState.toggledNodes.size;\n    }\n\n    public clearOtherNodes(rowNodeToKeepSelected: RowNode<any>, source: SelectionEventSourceType): number {\n        const clearedRows = this.selectedState.selectAll ? 1 : this.selectedState.toggledNodes.size - 1;\n        this.selectedState = {\n            selectAll: false,\n            toggledNodes: new Set([rowNodeToKeepSelected.id!]),\n        };\n\n        this.rowModel.forEachNode((node) => {\n            if (node !== rowNodeToKeepSelected) {\n                node.selectThisNode(false, undefined, source);\n            }\n        });\n\n        const event: WithoutGridCommon<SelectionChangedEvent> = {\n            type: 'selectionChanged',\n            source,\n        };\n        this.eventService.dispatchEvent(event);\n\n        return clearedRows;\n    }\n\n    public isEmpty(): boolean {\n        return !this.selectedState.selectAll && !this.selectedState.toggledNodes?.size;\n    }\n\n    public selectAllRowNodes(): void {\n        this.selectedState = { selectAll: true, toggledNodes: new Set() };\n        this.selectedNodes = {};\n        this.selectAllUsed = true;\n        this.selectionCtx.reset();\n    }\n\n    public deselectAllRowNodes(): void {\n        this.selectedState = { selectAll: false, toggledNodes: new Set() };\n        this.selectedNodes = {};\n        this.selectionCtx.reset();\n    }\n\n    public getSelectAllState(): boolean | null {\n        if (this.selectedState.selectAll) {\n            if (this.selectedState.toggledNodes.size > 0) {\n                return null;\n            }\n            return true;\n        }\n\n        if (this.selectedState.toggledNodes.size > 0) {\n            return null;\n        }\n        return false;\n    }\n}\n", "import type { IRowModel, ISelectionContext, RowNode } from '@ag-grid-community/core';\n\n/**\n * This is the same as RowRangeSelectionContext in core, except that we store RowNode IDs\n * instead of RowNode instances directly, because RowNodes can be dropped when scrolled out\n * of view\n */\nexport class ServerSideRowRangeSelectionContext implements ISelectionContext<string> {\n    private rowModel: IRowModel;\n    private root: string | null = null;\n    /**\n     * Note that the \"end\" `RowNode` may come before or after the \"root\" `RowNode` in the\n     * actual grid.\n     */\n    private end: string | null = null;\n    private cachedRange: RowNode[] = [];\n\n    public init(rowModel: IRowModel): void {\n        this.rowModel = rowModel;\n    }\n\n    public reset(): void {\n        this.root = null;\n        this.end = null;\n        this.cachedRange.length = 0;\n    }\n\n    public setRoot(node: string): void {\n        this.root = node;\n        this.end = null;\n        this.cachedRange.length = 0;\n    }\n\n    public setEndRange(end: string): void {\n        this.end = end;\n        this.cachedRange.length = 0;\n    }\n\n    getRoot(): string | null {\n        return this.root;\n    }\n\n    public getRange(): RowNode[] {\n        if (this.cachedRange.length === 0) {\n            const root = this.root ? this.rowModel.getRowNode(this.root) : undefined;\n            const end = this.end ? this.rowModel.getRowNode(this.end) : undefined;\n\n            if (root == null || end == null) {\n                return this.cachedRange;\n            }\n\n            this.cachedRange = this.rowModel.getNodesInRangeForSelection(root, end);\n        }\n\n        return this.cachedRange;\n    }\n\n    public isInRange(node: string): boolean {\n        if (this.root === null) {\n            return false;\n        }\n\n        return this.getRange().some((nodeInRange) => nodeInRange.id === node);\n    }\n\n    /**\n     * Truncates the range to the given node (assumed to be within the current range).\n     * Returns nodes that remain in the current range and those that should be removed\n     *\n     * @param node - Node at which to truncate the range\n     * @returns Object of nodes to either keep or discard (i.e. deselect) from the range\n     */\n    public truncate(node: string): { keep: RowNode[]; discard: RowNode[] } {\n        const range = this.getRange();\n\n        if (range.length === 0) {\n            return { keep: [], discard: [] };\n        }\n\n        // if root is first, then selection range goes \"down\" the table\n        // so we should be unselecting the range _after_ the given `node`\n        const discardAfter = range[0].id === this.root!;\n\n        const idx = range.findIndex((rowNode) => rowNode.id === node);\n        if (idx > -1) {\n            const above = range.slice(0, idx);\n            const below = range.slice(idx + 1);\n            this.setEndRange(node);\n            return discardAfter ? { keep: above, discard: below } : { keep: below, discard: above };\n        } else {\n            return { keep: range, discard: [] };\n        }\n    }\n\n    /**\n     * Extends the range to the given node. Returns nodes that remain in the current range\n     * and those that should be removed.\n     *\n     * @param node - Node marking the new end of the range\n     * @returns Object of nodes to either keep or discard (i.e. deselect) from the range\n     */\n    public extend(node: string, groupSelectsChildren = false): { keep: RowNode[]; discard: RowNode[] } {\n        // If the root ID is null, this is the first selection.\n        // That means we add the given `node` plus any leaf children to the selection\n        if (this.root == null) {\n            const keep = this.getRange().slice(); // current range should be empty but include it anyway\n            const rowNode = this.rowModel.getRowNode(node);\n            if (rowNode) {\n                if (groupSelectsChildren) {\n                    rowNode.depthFirstSearch((node) => !node.group && keep.push(node));\n                }\n                keep.push(rowNode);\n            }\n\n            // We now have a node we can use as the root of the selection\n            this.setRoot(node);\n\n            return { keep, discard: [] };\n        }\n\n        const rowNode = this.rowModel.getRowNode(node);\n        const rootNode = this.rowModel.getRowNode(this.root);\n\n        if (rowNode == null) {\n            return { keep: this.getRange(), discard: [] };\n        }\n\n        // If the root node is no longer retrievable, we cannot iterate from the root\n        // to the given `node`. So we keep the existing selection, plus the given `node`\n        if (rootNode == null) {\n            return { keep: this.getRange().concat(rowNode), discard: [] };\n        }\n\n        const newRange = this.rowModel.getNodesInRangeForSelection(rootNode, rowNode);\n\n        if (newRange.find((newRangeNode) => newRangeNode.id === this.end)) {\n            // Range between root and given node contains the current \"end\"\n            // so this is an extension of the current range direction\n            this.setEndRange(node);\n            return { keep: this.getRange(), discard: [] };\n        } else {\n            // otherwise, this is an inversion\n            const discard = this.getRange().slice();\n            this.setEndRange(node);\n            return { keep: this.getRange(), discard };\n        }\n    }\n}\n", "import type {\n    BeanCollection,\n    FilterManager,\n    FuncColsService,\n    IRowModel,\n    IRowNode,\n    ISelectionService,\n    IServerSideGroupSelectionState,\n    ISetNodesSelectedParams,\n    RowNode,\n    SelectionEventSourceType,\n} from '@ag-grid-community/core';\nimport { BeanStub, _errorOnce, _last, _warnOnce, isSelectionUIEvent } from '@ag-grid-community/core';\n\nimport { ServerSideRowRangeSelectionContext } from '../serverSideRowRangeSelectionContext';\nimport type { ISelectionStrategy } from './iSelectionStrategy';\n\ninterface SelectionState {\n    selectAllChildren: boolean;\n    toggledNodes: Map<string, SelectionState>;\n}\n\nexport class GroupSelectsChildrenStrategy extends BeanStub implements ISelectionStrategy {\n    private rowModel: IRowModel;\n    private funcColsService: FuncColsService;\n    private filterManager?: FilterManager;\n    private selectionService: ISelectionService;\n    private selectionCtx = new ServerSideRowRangeSelectionContext();\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n        this.funcColsService = beans.funcColsService;\n        this.filterManager = beans.filterManager;\n        this.selectionService = beans.selectionService;\n    }\n\n    private selectedState: SelectionState = { selectAllChildren: false, toggledNodes: new Map() };\n\n    public postConstruct(): void {\n        this.addManagedEventListeners({\n            // if model has updated, a store may now be fully loaded to clean up indeterminate states\n            modelUpdated: () => this.removeRedundantState(),\n            // when the grouping changes, the state no longer makes sense, so reset the state.\n            columnRowGroupChanged: () => this.selectionService.reset('rowGroupChanged'),\n        });\n\n        this.selectionCtx.init(this.rowModel);\n    }\n\n    public getSelectedState() {\n        const treeData = this.gos.get('treeData');\n        const recursivelySerializeState = (state: SelectionState, level: number, nodeId?: string) => {\n            const normalisedState: IServerSideGroupSelectionState = {\n                nodeId,\n            };\n\n            if (treeData || level <= this.funcColsService.getRowGroupColumns().length) {\n                normalisedState.selectAllChildren = state.selectAllChildren;\n            }\n\n            // omit toggledNodes if empty\n            if (state.toggledNodes.size) {\n                const toggledNodes: IServerSideGroupSelectionState[] = [];\n                state.toggledNodes.forEach((value, key) => {\n                    const newState = recursivelySerializeState(value, level + 1, key);\n                    toggledNodes.push(newState);\n                });\n                normalisedState.toggledNodes = toggledNodes;\n            }\n\n            return normalisedState;\n        };\n        return recursivelySerializeState(this.selectedState, 0);\n    }\n\n    public setSelectedState(state: IServerSideGroupSelectionState) {\n        const recursivelyDeserializeState = (\n            normalisedState: IServerSideGroupSelectionState,\n            parentSelected: boolean\n        ): SelectionState => {\n            if (typeof normalisedState !== 'object') {\n                throw new Error('AG Grid: Each provided state object must be an object.');\n            }\n            if ('selectAllChildren' in normalisedState && typeof normalisedState.selectAllChildren !== 'boolean') {\n                throw new Error('AG Grid: `selectAllChildren` must be a boolean value or undefined.');\n            }\n            if ('toggledNodes' in normalisedState) {\n                if (!Array.isArray(normalisedState.toggledNodes)) {\n                    throw new Error('AG Grid: `toggledNodes` must be an array.');\n                }\n                const allHaveIds = normalisedState.toggledNodes.every(\n                    (innerState) =>\n                        typeof innerState === 'object' &&\n                        'nodeId' in innerState &&\n                        typeof innerState.nodeId === 'string'\n                );\n                if (!allHaveIds) {\n                    throw new Error('AG Grid: Every `toggledNode` requires an associated string id.');\n                }\n            }\n            const isThisNodeSelected = normalisedState.selectAllChildren ?? !parentSelected;\n            const convertedChildren = normalisedState.toggledNodes?.map<[string, SelectionState]>((innerState) => [\n                innerState.nodeId!,\n                recursivelyDeserializeState(innerState, isThisNodeSelected),\n            ]);\n            const doesRedundantStateExist = convertedChildren?.some(\n                ([, innerState]) =>\n                    isThisNodeSelected === innerState.selectAllChildren && innerState.toggledNodes.size === 0\n            );\n            if (doesRedundantStateExist) {\n                throw new Error(`\n                    AG Grid: AG Grid: Row selection state could not be parsed due to invalid data. Ensure all child state has toggledNodes or does not conform with the parent rule.\n                    Please rebuild the selection state and reapply it.\n                `);\n            }\n            return {\n                selectAllChildren: isThisNodeSelected,\n                toggledNodes: new Map(convertedChildren),\n            };\n        };\n\n        try {\n            this.selectedState = recursivelyDeserializeState(state, !!state.selectAllChildren);\n        } catch (e) {\n            _errorOnce(e.message);\n        }\n    }\n\n    public deleteSelectionStateFromParent(parentRoute: string[], removedNodeIds: string[]): boolean {\n        let parentState: SelectionState | undefined = this.selectedState;\n        const remainingRoute = [...parentRoute];\n        while (parentState && remainingRoute.length) {\n            parentState = parentState.toggledNodes.get(remainingRoute.pop()!);\n        }\n\n        // parent has no explicit state, nothing to remove\n        if (!parentState) {\n            return false;\n        }\n\n        let anyStateChanged = false;\n        removedNodeIds.forEach((id) => {\n            if (parentState?.toggledNodes.delete(id)) {\n                anyStateChanged = true;\n            }\n        });\n\n        if (anyStateChanged) {\n            this.removeRedundantState();\n        }\n        return anyStateChanged;\n    }\n\n    private overrideSelectionValue(newValue: boolean, source: SelectionEventSourceType): boolean {\n        if (!isSelectionUIEvent(source)) {\n            return newValue;\n        }\n\n        const root = this.selectionCtx.getRoot();\n        const node = root ? this.rowModel.getRowNode(root) : null;\n\n        return node ? node.isSelected() ?? false : true;\n    }\n\n    public setNodesSelected({ nodes, newValue, rangeSelect, clearSelection, source }: ISetNodesSelectedParams): number {\n        if (nodes.length === 0) return 0;\n\n        if (rangeSelect) {\n            if (nodes.length > 1) {\n                throw new Error('AG Grid: cannot select multiple rows when using rangeSelect');\n            }\n            const node = nodes[0];\n            const newSelectionValue = this.overrideSelectionValue(newValue, source);\n\n            if (this.selectionCtx.isInRange(node.id!)) {\n                const partition = this.selectionCtx.truncate(node.id!);\n\n                // When we are selecting a range, we may need to de-select part of the previously\n                // selected range (see AG-9620)\n                // When we are de-selecting a range, we can/should leave the other nodes unchanged\n                // (i.e. selected nodes outside the current range should remain selected - see AG-10215)\n                if (newSelectionValue) {\n                    this.selectRange(partition.discard, false);\n                }\n                this.selectRange(partition.keep, newSelectionValue);\n                return 1;\n            } else {\n                const fromNode = this.selectionCtx.getRoot();\n                const toNode = node;\n                if (fromNode !== toNode.id) {\n                    const partition = this.selectionCtx.extend(node.id!, true);\n                    if (newSelectionValue) {\n                        this.selectRange(partition.discard, false);\n                    }\n                    this.selectRange(partition.keep, newSelectionValue);\n                    return 1;\n                }\n            }\n            return 1;\n        }\n\n        const onlyThisNode = clearSelection && newValue && !rangeSelect;\n        if (this.gos.get('rowSelection') !== 'multiple' || onlyThisNode) {\n            if (nodes.length > 1) {\n                throw new Error(\"AG Grid: cannot select multiple rows when rowSelection is set to 'single'\");\n            }\n            this.deselectAllRowNodes();\n        }\n\n        nodes.forEach((node) => {\n            const idPathToNode = this.getRouteToNode(node);\n            this.recursivelySelectNode(idPathToNode, this.selectedState, newValue);\n        });\n        this.removeRedundantState();\n        this.selectionCtx.setRoot(_last(nodes).id!);\n        return 1;\n    }\n\n    private selectRange(nodes: RowNode[], newValue: boolean) {\n        // sort routes longest to shortest, meaning we can do the lowest level children first\n        const routes = nodes.map(this.getRouteToNode).sort((a, b) => b.length - a.length);\n\n        // keep track of nodes we've seen so we can skip branches we've visited already\n        const seen = new Set<RowNode>();\n        routes.forEach((route) => {\n            if (seen.has(_last(route))) {\n                return;\n            }\n            route.forEach((part) => seen.add(part));\n\n            this.recursivelySelectNode(route, this.selectedState, newValue);\n        });\n\n        this.removeRedundantState();\n    }\n\n    public isNodeSelected(node: RowNode): boolean | undefined {\n        const path = this.getRouteToNode(node);\n        return this.isNodePathSelected(path, this.selectedState);\n    }\n\n    private isNodePathSelected([nextNode, ...nodes]: RowNode[], state: SelectionState): boolean | undefined {\n        if (nodes.length === 0) {\n            const isToggled = state.toggledNodes.has(nextNode.id!);\n            if (nextNode.hasChildren()) {\n                const groupState = state.toggledNodes.get(nextNode.id!);\n                if (groupState && groupState.toggledNodes.size) {\n                    return undefined;\n                }\n            }\n            return state.selectAllChildren ? !isToggled : isToggled;\n        }\n\n        // if there's a deeper level, check recursively\n        if (state.toggledNodes.has(nextNode.id!)) {\n            const nextState = state.toggledNodes.get(nextNode.id!);\n            if (nextState) {\n                return this.isNodePathSelected(nodes, nextState);\n            }\n        }\n\n        // no deeper custom state, respect the closest default\n        return state.selectAllChildren;\n    }\n\n    private getRouteToNode(node: RowNode) {\n        const pathToNode = [];\n        let tempNode = node;\n        while (tempNode.parent) {\n            pathToNode.push(tempNode);\n            tempNode = tempNode.parent;\n        }\n        return pathToNode.reverse();\n    }\n\n    private removeRedundantState() {\n        if (this.filterManager?.isAnyFilterPresent()) {\n            return;\n        }\n\n        const forEachNodeStateDepthFirst = (\n            state = this.selectedState,\n            thisKey?: string,\n            parentState?: SelectionState\n        ) => {\n            // clean up lowest level state first in order to calculate this levels state\n            // from updated child state\n            state.toggledNodes.forEach((value, key) => {\n                forEachNodeStateDepthFirst(value, key, state);\n            });\n\n            if (thisKey) {\n                const thisRow = this.rowModel.getRowNode(thisKey);\n                const thisRowStore = thisRow?.childStore;\n                const isStoreSizeKnown = thisRowStore?.isLastRowIndexKnown();\n                if (isStoreSizeKnown) {\n                    // have to check greater than, as we may have stale state still, if so all visible rows may not be\n                    // toggled\n                    const possibleAllNodesToggled = state.toggledNodes.size >= thisRowStore!.getRowCount();\n                    if (possibleAllNodesToggled) {\n                        // more complex checks nested for performance\n                        for (const childState of state.toggledNodes.entries()) {\n                            const [key, value] = childState;\n                            // if any child has toggled rows, then this row is indeterminate\n                            // and the state is relevant.\n                            if (value.toggledNodes.size > 0) {\n                                return;\n                            }\n\n                            const rowDoesNotExist = !this.rowModel.getRowNode(key);\n                            if (rowDoesNotExist) {\n                                // if row doesn't exist, it's not toggled.\n                                return;\n                            }\n                        }\n\n                        // no indeterminate rows, and all rows are toggled, flip this row state\n                        // and clear child states.\n                        state.selectAllChildren = !state.selectAllChildren;\n                        state.toggledNodes.clear();\n                    }\n                }\n            }\n\n            // if this has no toggled rows, and is identical to parent state, it's redundant and can be removed.\n            const hasNoToggledRows = state.toggledNodes.size === 0;\n            const isIdenticalToParent = parentState?.selectAllChildren === state.selectAllChildren;\n            if (hasNoToggledRows && isIdenticalToParent) {\n                parentState?.toggledNodes.delete(thisKey!);\n            }\n        };\n        forEachNodeStateDepthFirst();\n    }\n\n    private recursivelySelectNode([nextNode, ...nodes]: IRowNode[], selectedState: SelectionState, newValue: boolean) {\n        if (!nextNode) {\n            return;\n        }\n\n        // if this is the last node, hard add/remove based on its selectAllChildren state\n        const isLastNode = !nodes.length;\n        if (isLastNode) {\n            // if the node is not selectable, we should never have it in selection state\n            const isNodeSelectable = nextNode.selectable;\n            const doesNodeConform = selectedState.selectAllChildren === newValue;\n            if (doesNodeConform || !isNodeSelectable) {\n                selectedState.toggledNodes.delete(nextNode.id!);\n                return;\n            }\n            const newState: SelectionState = {\n                selectAllChildren: newValue,\n                toggledNodes: new Map(),\n            };\n            selectedState.toggledNodes.set(nextNode.id!, newState);\n            return;\n        }\n\n        const doesStateAlreadyExist = selectedState.toggledNodes.has(nextNode.id!);\n        const childState: SelectionState = selectedState.toggledNodes.get(nextNode.id!) ?? {\n            selectAllChildren: selectedState.selectAllChildren,\n            toggledNodes: new Map(),\n        };\n\n        if (!doesStateAlreadyExist) {\n            selectedState.toggledNodes.set(nextNode.id!, childState);\n        }\n\n        this.recursivelySelectNode(nodes, childState, newValue);\n\n        // cleans out groups which have no toggled nodes and an equivalent default to its parent\n        if (selectedState.selectAllChildren === childState.selectAllChildren && childState.toggledNodes.size === 0) {\n            selectedState.toggledNodes.delete(nextNode.id!);\n        }\n    }\n\n    public getSelectedNodes(): RowNode<any>[] {\n        _warnOnce(\n            `\\`getSelectedNodes\\` and \\`getSelectedRows\\` functions cannot be used with \\`groupSelectsChildren\\` and the server-side row model.\n            Use \\`api.getServerSideSelectionState()\\` instead.`\n        );\n\n        const selectedNodes: RowNode[] = [];\n        this.rowModel.forEachNode((node) => {\n            if (node.isSelected()) {\n                selectedNodes.push(node);\n            }\n        });\n        return selectedNodes;\n    }\n\n    public processNewRow(): void {\n        // This is used for updating outdated node refs, as this model entirely uses ids it's irrelevant\n    }\n\n    public getSelectedRows(): any[] {\n        return this.getSelectedNodes().map((node) => node.data);\n    }\n\n    public getSelectionCount(): number {\n        return -1;\n    }\n\n    public isEmpty(): boolean {\n        return !this.selectedState.selectAllChildren && !this.selectedState.toggledNodes?.size;\n    }\n\n    public selectAllRowNodes(): void {\n        this.selectedState = { selectAllChildren: true, toggledNodes: new Map() };\n        this.selectionCtx.reset();\n    }\n\n    public deselectAllRowNodes(): void {\n        this.selectedState = { selectAllChildren: false, toggledNodes: new Map() };\n        this.selectionCtx.reset();\n    }\n\n    public getSelectAllState(): boolean | null {\n        if (this.selectedState.selectAllChildren) {\n            if (this.selectedState.toggledNodes.size > 0) {\n                return null;\n            }\n            return true;\n        }\n\n        if (this.selectedState.toggledNodes.size > 0) {\n            return null;\n        }\n        return false;\n    }\n}\n", "import type {\n    BeanCollection,\n    ColumnModel,\n    FuncColsService,\n    GetServerSideGroupLevelParamsParams,\n    IServerSideStore,\n    NamedBean,\n    RowNode,\n    ServerSideGroupLevelParams,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, _warnOnce } from '@ag-grid-community/core';\n\nimport type { SSRMParams } from '../serverSideRowModel';\nimport { FullStore } from './fullStore';\nimport { LazyStore } from './lazy/lazyStore';\n\nexport class StoreFactory extends BeanStub implements NamedBean {\n    beanName = 'ssrmStoreFactory' as const;\n\n    private columnModel: ColumnModel;\n    private funcColsService: FuncColsService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.funcColsService = beans.funcColsService;\n    }\n\n    public createStore(ssrmParams: SSRMParams, parentNode: RowNode): IServerSideStore {\n        const storeParams = this.getStoreParams(ssrmParams, parentNode);\n\n        const CacheClass = storeParams.suppressInfiniteScroll ? FullStore : LazyStore;\n\n        return new CacheClass(ssrmParams, storeParams, parentNode);\n    }\n\n    private getStoreParams(ssrmParams: SSRMParams, parentNode: RowNode): ServerSideGroupLevelParams {\n        const userStoreParams = this.getLevelSpecificParams(parentNode);\n\n        // if user provided overrideParams, we take infiniteScroll from there if it exists\n        const infiniteScroll = this.isInfiniteScroll(userStoreParams);\n        const cacheBlockSize = this.getBlockSize(infiniteScroll, userStoreParams);\n        const maxBlocksInCache = this.getMaxBlocksInCache(infiniteScroll, ssrmParams, userStoreParams);\n\n        const storeParams: ServerSideGroupLevelParams = {\n            suppressInfiniteScroll: !infiniteScroll,\n            cacheBlockSize,\n            maxBlocksInCache,\n        };\n\n        return storeParams;\n    }\n\n    private getMaxBlocksInCache(\n        infiniteScroll: boolean,\n        ssrmParams: SSRMParams,\n        userStoreParams?: ServerSideGroupLevelParams\n    ): number | undefined {\n        if (!infiniteScroll) {\n            return undefined;\n        }\n\n        const maxBlocksInCache =\n            userStoreParams && userStoreParams.maxBlocksInCache != null\n                ? userStoreParams.maxBlocksInCache\n                : this.gos.get('maxBlocksInCache');\n\n        const maxBlocksActive = maxBlocksInCache != null && maxBlocksInCache >= 0;\n\n        if (!maxBlocksActive) {\n            return undefined;\n        }\n\n        if (ssrmParams.dynamicRowHeight) {\n            const message =\n                'Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' +\n                'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.';\n            _warnOnce(message);\n            return undefined;\n        }\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            const message =\n                'Server Side Row Model does not support Auto Row Height and Cache Purging. ' +\n                'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.';\n            _warnOnce(message);\n            return undefined;\n        }\n\n        return maxBlocksInCache;\n    }\n\n    private getBlockSize(infiniteScroll: boolean, userStoreParams?: ServerSideGroupLevelParams): number | undefined {\n        if (!infiniteScroll) {\n            return undefined;\n        }\n\n        const blockSize =\n            userStoreParams && userStoreParams.cacheBlockSize != null\n                ? userStoreParams.cacheBlockSize\n                : this.gos.get('cacheBlockSize');\n\n        if (blockSize != null && blockSize > 0) {\n            return blockSize;\n        } else {\n            return 100;\n        }\n    }\n\n    private getLevelSpecificParams(parentNode: RowNode): ServerSideGroupLevelParams | undefined {\n        const callback = this.gos.getCallback('getServerSideGroupLevelParams');\n        if (!callback) {\n            return undefined;\n        }\n\n        const params: WithoutGridCommon<GetServerSideGroupLevelParamsParams> = {\n            level: parentNode.level + 1,\n            parentRowNode: parentNode.level >= 0 ? parentNode : undefined,\n            rowGroupColumns: this.funcColsService.getRowGroupColumns(),\n            pivotColumns: this.funcColsService.getPivotColumns(),\n            pivotMode: this.columnModel.isPivotMode(),\n        };\n\n        const res = callback(params);\n\n        return res;\n    }\n\n    private isInfiniteScroll(storeParams?: ServerSideGroupLevelParams): boolean {\n        const res =\n            storeParams && storeParams.suppressInfiniteScroll != null\n                ? storeParams.suppressInfiniteScroll\n                : this.isSuppressServerSideInfiniteScroll();\n        return !res;\n    }\n\n    private isSuppressServerSideInfiniteScroll(): boolean {\n        return this.gos.get('suppressServerSideInfiniteScroll');\n    }\n}\n", "import type {\n    BeanCollection,\n    ColumnModel,\n    ColumnVO,\n    GridOptions,\n    IServerSideGetRowsParams,\n    IServerSideGetRowsRequest,\n    IServerSideStore,\n    NamedBean,\n    RowNode,\n    RowNodeBlock,\n    StoreRefreshAfterParams,\n} from '@ag-grid-community/core';\nimport { BeanStub, _missingOrEmpty, _warnOnce } from '@ag-grid-community/core';\n\nimport type { SSRMParams, ServerSideRowModel } from '../serverSideRowModel';\nimport type { StoreFactory } from './storeFactory';\n\nexport class StoreUtils extends BeanStub implements NamedBean {\n    beanName = 'ssrmStoreUtils' as const;\n\n    private columnModel: ColumnModel;\n    private serverSideRowModel: ServerSideRowModel;\n    private storeFactory: StoreFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnModel = beans.columnModel;\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n        this.storeFactory = beans.ssrmStoreFactory as StoreFactory;\n    }\n\n    public loadFromDatasource(p: {\n        storeParams: SSRMParams;\n        parentNode: RowNode;\n        parentBlock: RowNodeBlock;\n        success: () => void;\n        fail: () => void;\n        startRow?: number;\n        endRow?: number;\n    }): void {\n        const { storeParams, parentBlock, parentNode } = p;\n        const groupKeys = parentNode.getGroupKeys();\n\n        if (!storeParams.datasource) {\n            return;\n        }\n\n        const request: IServerSideGetRowsRequest = {\n            startRow: p.startRow,\n            endRow: p.endRow,\n            rowGroupCols: storeParams.rowGroupCols,\n            valueCols: storeParams.valueCols,\n            pivotCols: storeParams.pivotCols,\n            pivotMode: storeParams.pivotMode,\n            groupKeys: groupKeys,\n            filterModel: storeParams.filterModel,\n            sortModel: storeParams.sortModel,\n        };\n\n        const getRowsParams: IServerSideGetRowsParams = this.gos.addGridCommonParams({\n            success: p.success,\n            fail: p.fail,\n            request: request,\n            parentNode: p.parentNode,\n        });\n\n        window.setTimeout(() => {\n            if (!storeParams.datasource || !parentBlock.isAlive()) {\n                // failCallback() is important, to reduce the 'RowNodeBlockLoader.activeBlockLoadsCount' count\n                p.fail();\n                return;\n            }\n            storeParams.datasource.getRows(getRowsParams);\n        }, 0);\n    }\n\n    public getChildStore(\n        keys: string[],\n        currentCache: IServerSideStore,\n        findNodeFunc: (key: string) => RowNode | null\n    ): IServerSideStore | null {\n        if (_missingOrEmpty(keys)) {\n            return currentCache;\n        }\n\n        const nextKey = keys[0];\n        const nextNode = findNodeFunc(nextKey);\n\n        if (nextNode) {\n            // if we have the final node, but not the final store, we create it to allow\n            // early population of data\n            if (keys.length === 1 && !nextNode.childStore) {\n                const storeParams = this.serverSideRowModel.getParams();\n                nextNode.childStore = this.createBean(this.storeFactory.createStore(storeParams, nextNode));\n            }\n\n            const keyListForNextLevel = keys.slice(1, keys.length);\n            const nextStore = nextNode.childStore;\n            return nextStore ? nextStore.getChildStore(keyListForNextLevel) : null;\n        }\n\n        return null;\n    }\n\n    public isServerRefreshNeeded(\n        parentRowNode: RowNode,\n        rowGroupCols: ColumnVO[],\n        params: StoreRefreshAfterParams\n    ): boolean {\n        if (params.valueColChanged || params.secondaryColChanged) {\n            return true;\n        }\n\n        const level = parentRowNode.level + 1;\n        const grouping = level < rowGroupCols.length;\n        const leafNodes = !grouping;\n\n        if (leafNodes) {\n            return true;\n        }\n\n        const colIdThisGroup = rowGroupCols[level].id;\n        const actionOnThisGroup = params.changedColumns.indexOf(colIdThisGroup) > -1;\n\n        if (actionOnThisGroup) {\n            return true;\n        }\n\n        const allCols = this.columnModel.getCols();\n        const affectedGroupCols = allCols\n            // find all impacted cols which also a group display column\n            .filter((col) => col.getColDef().showRowGroup && params.changedColumns.includes(col.getId()))\n            .map((col) => col.getColDef().showRowGroup)\n            // if displaying all groups, or displaying the effected col for this group, refresh\n            .some((group) => group === true || group === colIdThisGroup);\n\n        return affectedGroupCols;\n    }\n\n    public getServerSideInitialRowCount(): number | null {\n        return this.gos.get('serverSideInitialRowCount');\n    }\n\n    private assertRowModelIsServerSide(key: keyof GridOptions) {\n        if (!this.gos.isRowModelType('serverSide')) {\n            _warnOnce(`The '${key}' property can only be used with the Server Side Row Model.`);\n            return false;\n        }\n        return true;\n    }\n    private assertNotTreeData(key: keyof GridOptions) {\n        if (this.gos.get('treeData')) {\n            _warnOnce(`The '${key}' property cannot be used while using tree data.`);\n            return false;\n        }\n        return true;\n    }\n\n    public isServerSideSortAllLevels() {\n        return this.gos.get('serverSideSortAllLevels') && this.assertRowModelIsServerSide('serverSideSortAllLevels');\n    }\n    public isServerSideOnlyRefreshFilteredGroups() {\n        return (\n            this.gos.get('serverSideOnlyRefreshFilteredGroups') &&\n            this.assertRowModelIsServerSide('serverSideOnlyRefreshFilteredGroups')\n        );\n    }\n    public isServerSideSortOnServer() {\n        return (\n            this.gos.get('serverSideSortOnServer') &&\n            this.assertRowModelIsServerSide('serverSideSortOnServer') &&\n            this.assertNotTreeData('serverSideSortOnServer')\n        );\n    }\n    public isServerSideFilterOnServer() {\n        return (\n            this.gos.get('serverSideFilterOnServer') &&\n            this.assertRowModelIsServerSide('serverSideFilterOnServer') &&\n            this.assertNotTreeData('serverSideFilterOnServer')\n        );\n    }\n}\n", "import type {\n    AsyncTransactionsFlushed,\n    BeanCollection,\n    IServerSideTransactionManager,\n    NamedBean,\n    ServerSideTransaction,\n    ServerSideTransactionResult,\n    ValueCache,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, ServerSideTransactionResultStatus } from '@ag-grid-community/core';\n\nimport type { ServerSideRowModel } from './serverSideRowModel';\nimport type { ServerSideSelectionService } from './services/serverSideSelectionService';\n\ninterface AsyncTransactionWrapper {\n    transaction: ServerSideTransaction;\n    callback?: (result: ServerSideTransactionResult) => void;\n}\n\nexport class TransactionManager extends BeanStub implements NamedBean, IServerSideTransactionManager {\n    beanName = 'ssrmTransactionManager' as const;\n\n    private valueCache: ValueCache;\n    private serverSideRowModel: ServerSideRowModel;\n    private selectionService: ServerSideSelectionService;\n\n    public wireBeans(beans: BeanCollection): void {\n        this.valueCache = beans.valueCache;\n        this.serverSideRowModel = beans.rowModel as ServerSideRowModel;\n        this.selectionService = beans.selectionService as ServerSideSelectionService;\n    }\n\n    private asyncTransactionsTimeout: number | undefined;\n    private asyncTransactions: AsyncTransactionWrapper[] = [];\n\n    public postConstruct(): void {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gos.isRowModelType('serverSide')) {\n            return;\n        }\n    }\n\n    public applyTransactionAsync(\n        transaction: ServerSideTransaction,\n        callback?: (res: ServerSideTransactionResult) => void\n    ): void {\n        if (this.asyncTransactionsTimeout == null) {\n            this.scheduleExecuteAsync();\n        }\n        this.asyncTransactions.push({ transaction: transaction, callback: callback });\n    }\n\n    private scheduleExecuteAsync(): void {\n        const waitMillis = this.gos.getAsyncTransactionWaitMillis();\n        this.asyncTransactionsTimeout = window.setTimeout(() => {\n            this.executeAsyncTransactions();\n        }, waitMillis);\n    }\n\n    private executeAsyncTransactions(): void {\n        if (!this.asyncTransactions) {\n            return;\n        }\n\n        const resultFuncs: (() => void)[] = [];\n        const resultsForEvent: ServerSideTransactionResult[] = [];\n\n        const transactionsToRetry: AsyncTransactionWrapper[] = [];\n        let atLeastOneTransactionApplied = false;\n\n        this.asyncTransactions.forEach((txWrapper) => {\n            let result: ServerSideTransactionResult | undefined;\n            const hasStarted = this.serverSideRowModel.executeOnStore(txWrapper.transaction.route!, (cache) => {\n                result = cache.applyTransaction(txWrapper.transaction);\n            });\n\n            if (!hasStarted) {\n                result = { status: ServerSideTransactionResultStatus.StoreNotStarted };\n            } else if (result == undefined) {\n                result = { status: ServerSideTransactionResultStatus.StoreNotFound };\n            }\n\n            resultsForEvent.push(result);\n\n            const retryTransaction = result.status == ServerSideTransactionResultStatus.StoreLoading;\n\n            if (retryTransaction) {\n                transactionsToRetry.push(txWrapper);\n                return;\n            }\n\n            if (txWrapper.callback) {\n                resultFuncs.push(() => txWrapper.callback!(result!));\n            }\n            if (result.status === ServerSideTransactionResultStatus.Applied) {\n                atLeastOneTransactionApplied = true;\n            }\n        });\n\n        // do callbacks in next VM turn so it's async\n        if (resultFuncs.length > 0) {\n            window.setTimeout(() => {\n                resultFuncs.forEach((func) => func());\n            }, 0);\n        }\n\n        this.asyncTransactionsTimeout = undefined;\n\n        // this will be empty list if nothing to retry\n        this.asyncTransactions = transactionsToRetry;\n\n        if (atLeastOneTransactionApplied) {\n            this.valueCache.onDataChanged();\n            this.eventService.dispatchEvent({ type: 'storeUpdated' });\n        }\n\n        if (resultsForEvent.length > 0) {\n            const event: WithoutGridCommon<AsyncTransactionsFlushed> = {\n                type: 'asyncTransactionsFlushed',\n                results: resultsForEvent,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public flushAsyncTransactions(): void {\n        // the timeout could be missing, if we are flushing due to row data loaded\n        if (this.asyncTransactionsTimeout != null) {\n            clearTimeout(this.asyncTransactionsTimeout);\n        }\n        this.executeAsyncTransactions();\n    }\n\n    public applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult | undefined {\n        let res: ServerSideTransactionResult | undefined;\n\n        const hasStarted = this.serverSideRowModel.executeOnStore(transaction.route!, (store) => {\n            res = store.applyTransaction(transaction);\n        });\n\n        if (!hasStarted) {\n            return { status: ServerSideTransactionResultStatus.StoreNotStarted };\n        } else if (res) {\n            this.valueCache.onDataChanged();\n            if (res.remove) {\n                const removedRowIds = res.remove.map((row) => row.id!);\n                this.selectionService.deleteSelectionStateFromParent(transaction.route || [], removedRowIds);\n            }\n\n            this.eventService.dispatchEvent({ type: 'storeUpdated' });\n            return res;\n        } else {\n            return { status: ServerSideTransactionResultStatus.StoreNotFound };\n        }\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames, _ColumnFilterModule, _FloatingFilterModule } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { SetFilter } from './setFilter/setFilter';\nimport { SetFloatingFilterComp } from './setFilter/setFloatingFilter';\nimport { VERSION } from './version';\n\nexport const SetFilterCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.SetFilterModule}-core`,\n    userComponents: [{ name: 'agSetColumnFilter', classImp: SetFilter }],\n    dependantModules: [EnterpriseCoreModule, _ColumnFilterModule],\n};\n\nconst SetFloatingFilterModule: Module = {\n    version: VERSION,\n    moduleName: '@ag-grid-enterprise/set-floating-filter',\n    userComponents: [{ name: 'agSetColumnFloatingFilter', classImp: SetFloatingFilterComp }],\n    dependantModules: [SetFilterCoreModule, _FloatingFilterModule],\n};\n\nexport const SetFilterModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SetFilterModule,\n    dependantModules: [SetFilterCoreModule, SetFloatingFilterModule],\n};\n", "import type {\n    AgColumn,\n    AgInputTextField,\n    BeanCollection,\n    ComponentSelector,\n    DataTypeService,\n    FuncColsService,\n    GetDataPath,\n    IAfterGuiAttachedParams,\n    IDoesFilterPassParams,\n    IRowNode,\n    ISetFilter,\n    KeyCreatorParams,\n    SetFilterModel,\n    SetFilterModelValue,\n    SetFilterParams,\n    ValueFormatterParams,\n    ValueService,\n} from '@ag-grid-community/core';\nimport {\n    AgInputTextFieldSelector,\n    AgPromise,\n    GROUP_AUTO_COLUMN_ID,\n    KeyCode,\n    ProvidedFilter,\n    RefPlaceholder,\n    _areEqual,\n    _last,\n    _makeNull,\n    _setDisplayed,\n    _toStringOrNull,\n    _warnOnce,\n} from '@ag-grid-community/core';\nimport { VirtualList } from '@ag-grid-enterprise/core';\nimport type { VirtualListModel } from '@ag-grid-enterprise/core';\n\nimport type { SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { SetFilterDisplayValue } from './iSetDisplayValueModel';\nimport type { ISetFilterLocaleText } from './localeText';\nimport { DEFAULT_LOCALE_TEXT } from './localeText';\nimport type {\n    SetFilterListItemExpandedChangedEvent,\n    SetFilterListItemParams,\n    SetFilterListItemSelectionChangedEvent,\n} from './setFilterListItem';\nimport { SetFilterListItem } from './setFilterListItem';\nimport { SetFilterModelFormatter } from './setFilterModelFormatter';\nimport { SetFilterModelValuesType, SetValueModel } from './setValueModel';\n\n/** @param V type of value in the Set Filter */\nexport class SetFilter<V = string> extends ProvidedFilter<SetFilterModel, V> implements ISetFilter<V> {\n    private funcColsService: FuncColsService;\n    private valueService: ValueService;\n    private dataTypeService?: DataTypeService;\n\n    public override wireBeans(beans: BeanCollection) {\n        super.wireBeans(beans);\n        this.funcColsService = beans.funcColsService;\n        this.valueService = beans.valueService;\n        this.dataTypeService = beans.dataTypeService;\n    }\n\n    private readonly eMiniFilter: AgInputTextField = RefPlaceholder;\n    private readonly eFilterLoading: HTMLElement = RefPlaceholder;\n    private readonly eSetFilterList: HTMLElement = RefPlaceholder;\n    private readonly eFilterNoMatches: HTMLElement = RefPlaceholder;\n\n    private valueModel: SetValueModel<V> | null = null;\n    private setFilterParams: SetFilterParams<any, V> | null = null;\n    private virtualList: VirtualList<any> | null = null;\n    private caseSensitive: boolean = false;\n    private treeDataTreeList = false;\n    private getDataPath?: GetDataPath<any>;\n    private groupingTreeList = false;\n    private hardRefreshVirtualList = false;\n    private noValueFormatterSupplied = false;\n\n    private createKey: (value: V | null | undefined, node?: IRowNode | null) => string | null;\n\n    private valueFormatter?: (params: ValueFormatterParams) => string;\n    private readonly filterModelFormatter = new SetFilterModelFormatter();\n\n    constructor() {\n        super('setFilter');\n    }\n\n    public override postConstruct() {\n        super.postConstruct();\n    }\n\n    // unlike the simple filters, nothing in the set filter UI shows/hides.\n    // maybe this method belongs in abstractSimpleFilter???\n    protected updateUiVisibility(): void {}\n\n    protected createBodyTemplate(): string {\n        return /* html */ `\n            <div class=\"ag-set-filter\">\n                <div data-ref=\"eFilterLoading\" class=\"ag-filter-loading ag-hidden\">${this.translateForSetFilter('loadingOoo')}</div>\n                <ag-input-text-field class=\"ag-mini-filter\" data-ref=\"eMiniFilter\"></ag-input-text-field>\n                <div data-ref=\"eFilterNoMatches\" class=\"ag-filter-no-matches ag-hidden\">${this.translateForSetFilter('noMatches')}</div>\n                <div data-ref=\"eSetFilterList\" class=\"ag-set-filter-list\" role=\"presentation\"></div>\n            </div>`;\n    }\n    protected getAgComponents(): ComponentSelector[] {\n        return [AgInputTextFieldSelector];\n    }\n\n    protected override handleKeyDown(e: KeyboardEvent): void {\n        super.handleKeyDown(e);\n\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        switch (e.key) {\n            case KeyCode.SPACE:\n                this.handleKeySpace(e);\n                break;\n            case KeyCode.ENTER:\n                this.handleKeyEnter(e);\n                break;\n            case KeyCode.LEFT:\n                this.handleKeyLeft(e);\n                break;\n            case KeyCode.RIGHT:\n                this.handleKeyRight(e);\n                break;\n        }\n    }\n\n    private handleKeySpace(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.toggleSelected();\n    }\n\n    private handleKeyEnter(e: KeyboardEvent): void {\n        if (!this.setFilterParams) {\n            return;\n        }\n\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (!excelMode || !!readOnly) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // in Excel Mode, hitting Enter is the same as pressing the Apply button\n        this.onBtApply(false, false, e);\n\n        if (this.setFilterParams.excelMode === 'mac') {\n            // in Mac version, select all the input text\n            this.eMiniFilter.getInputElement().select();\n        }\n    }\n\n    private handleKeyLeft(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.setExpanded(false);\n    }\n\n    private handleKeyRight(e: KeyboardEvent): void {\n        this.getComponentForKeyEvent(e)?.setExpanded(true);\n    }\n\n    private getComponentForKeyEvent(e: KeyboardEvent): SetFilterListItem<V> | undefined {\n        if (!this.eSetFilterList.contains(this.gos.getActiveDomElement()) || !this.virtualList) {\n            return;\n        }\n\n        const currentItem = this.virtualList.getLastFocusedRow();\n        if (currentItem == null) {\n            return;\n        }\n\n        const component = this.virtualList.getComponentAt(currentItem) as SetFilterListItem<V>;\n        if (component == null) {\n            return;\n        }\n\n        e.preventDefault();\n\n        const { readOnly } = this.setFilterParams ?? {};\n        if (readOnly) {\n            return;\n        }\n        return component;\n    }\n\n    protected getCssIdentifier(): string {\n        return 'set-filter';\n    }\n\n    public override setModel(model: SetFilterModel | null): AgPromise<void> {\n        if (model == null && this.valueModel?.getModel() == null) {\n            // refreshing is expensive. if new and old model are both null (e.g. nothing set), skip.\n            // mini filter isn't contained within the model, so always reset\n            this.setMiniFilter(null);\n            return AgPromise.resolve();\n        }\n        return super.setModel(model);\n    }\n\n    override refresh(params: SetFilterParams<any, V>): boolean {\n        this.applyExcelModeOptions(params);\n\n        if (!super.refresh(params)) {\n            return false;\n        }\n\n        // Those params have a large impact and should trigger a reload when they change.\n        const paramsThatForceReload: (keyof SetFilterParams<any, V>)[] = [\n            'treeList',\n            'treeListFormatter',\n            'treeListPathGetter',\n            'caseSensitive',\n            'comparator',\n            'suppressSelectAll',\n            'excelMode',\n        ];\n\n        if (paramsThatForceReload.some((param) => params[param] !== this.setFilterParams?.[param])) {\n            return false;\n        }\n\n        if (this.haveColDefParamsChanged(params)) {\n            return false;\n        }\n\n        super.updateParams(params);\n        this.updateSetFilterOnParamsChange(params);\n        this.updateMiniFilter();\n\n        if (\n            params.cellRenderer !== this.setFilterParams?.cellRenderer ||\n            params.valueFormatter !== this.setFilterParams?.valueFormatter\n        ) {\n            this.checkAndRefreshVirtualList();\n        }\n\n        this.valueModel?.updateOnParamsChange(params).then(() => {\n            if (this.valueModel?.hasSelections()) {\n                this.refreshFilterValues();\n            }\n        });\n\n        return true;\n    }\n\n    private haveColDefParamsChanged(params: SetFilterParams<any, V>): boolean {\n        const { colDef, keyCreator } = params;\n        const { colDef: existingColDef, keyCreator: existingKeyCreator } = this.setFilterParams ?? {};\n        const processedKeyCreator = keyCreator ?? colDef.keyCreator;\n        return (\n            colDef.filterValueGetter !== existingColDef?.filterValueGetter ||\n            processedKeyCreator !== (existingKeyCreator ?? existingColDef?.keyCreator) ||\n            (!!this.dataTypeService &&\n                this.dataTypeService.getFormatValue(colDef.cellDataType as string) === processedKeyCreator &&\n                colDef.valueFormatter !== existingColDef?.valueFormatter)\n        );\n    }\n\n    private setModelAndRefresh(values: SetFilterModelValue | null): AgPromise<void> {\n        return this.valueModel\n            ? this.valueModel.setModel(values).then(() => this.checkAndRefreshVirtualList())\n            : AgPromise.resolve();\n    }\n\n    protected resetUiToDefaults(): AgPromise<void> {\n        this.setMiniFilter(null);\n\n        return this.setModelAndRefresh(null);\n    }\n\n    protected setModelIntoUi(model: SetFilterModel | null): AgPromise<void> {\n        this.setMiniFilter(null);\n\n        const values = model == null ? null : model.values;\n        return this.setModelAndRefresh(values);\n    }\n\n    public getModelFromUi(): SetFilterModel | null {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const values = this.valueModel.getModel();\n\n        if (!values) {\n            return null;\n        }\n\n        return { values, filterType: this.getFilterType() };\n    }\n\n    public getFilterType(): 'set' {\n        return 'set';\n    }\n\n    public getValueModel(): SetValueModel<V> | null {\n        return this.valueModel;\n    }\n\n    protected areModelsEqual(a: SetFilterModel, b: SetFilterModel): boolean {\n        // both are missing\n        if (a == null && b == null) {\n            return true;\n        }\n\n        return a != null && b != null && _areEqual(a.values, b.values);\n    }\n\n    private updateSetFilterOnParamsChange = (newParams: SetFilterParams<any, V>) => {\n        this.setFilterParams = newParams;\n        this.caseSensitive = !!newParams.caseSensitive;\n        const keyCreator = newParams.keyCreator ?? newParams.colDef.keyCreator;\n        this.setValueFormatter(newParams.valueFormatter, keyCreator, !!newParams.treeList, !!newParams.colDef.refData);\n        const isGroupCol = newParams.column.getId().startsWith(GROUP_AUTO_COLUMN_ID);\n        this.treeDataTreeList = this.gos.get('treeData') && !!newParams.treeList && isGroupCol;\n        this.getDataPath = this.gos.get('getDataPath');\n        this.groupingTreeList =\n            !!this.funcColsService.getRowGroupColumns().length && !!newParams.treeList && isGroupCol;\n        this.createKey = this.generateCreateKey(keyCreator, this.treeDataTreeList || this.groupingTreeList);\n    };\n\n    public override setParams(params: SetFilterParams<any, V>): void {\n        this.applyExcelModeOptions(params);\n\n        super.setParams(params);\n\n        this.updateSetFilterOnParamsChange(params);\n\n        const keyCreator = params.keyCreator ?? params.colDef.keyCreator;\n\n        this.valueModel = new SetValueModel({\n            filterParams: params,\n            setIsLoading: (loading) => this.setIsLoading(loading),\n            translate: (key) => this.translateForSetFilter(key),\n            caseFormat: (v) => this.caseFormat(v),\n            createKey: this.createKey,\n            valueFormatter: this.valueFormatter,\n            usingComplexObjects: !!keyCreator,\n            gos: this.gos,\n            funcColsService: this.funcColsService,\n            valueService: this.valueService,\n            treeDataTreeList: this.treeDataTreeList,\n            groupingTreeList: this.groupingTreeList,\n            addManagedEventListeners: (handlers) => this.addManagedEventListeners(handlers),\n        });\n\n        this.initialiseFilterBodyUi();\n\n        this.addEventListenersForDataChanges();\n    }\n\n    private onAddCurrentSelectionToFilterChange(newValue: boolean) {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        this.valueModel.setAddCurrentSelectionToFilter(newValue);\n    }\n\n    private setValueFormatter(\n        providedValueFormatter: ((params: ValueFormatterParams) => string) | undefined,\n        keyCreator: ((params: KeyCreatorParams<any, any>) => string) | undefined,\n        treeList: boolean,\n        isRefData: boolean\n    ) {\n        let valueFormatter = providedValueFormatter;\n        if (!valueFormatter) {\n            if (keyCreator && !treeList) {\n                throw new Error('AG Grid: Must supply a Value Formatter in Set Filter params when using a Key Creator');\n            }\n            this.noValueFormatterSupplied = true;\n            // ref data is handled by ValueService\n            if (!isRefData) {\n                valueFormatter = (params) => _toStringOrNull(params.value)!;\n            }\n        }\n        this.valueFormatter = valueFormatter;\n    }\n\n    private generateCreateKey(\n        keyCreator: ((params: KeyCreatorParams<any, any>) => string) | undefined,\n        treeDataOrGrouping: boolean\n    ): (value: V | null | undefined, node?: IRowNode | null) => string | null {\n        if (treeDataOrGrouping && !keyCreator) {\n            throw new Error(\n                'AG Grid: Must supply a Key Creator in Set Filter params when `treeList = true` on a group column, and Tree Data or Row Grouping is enabled.'\n            );\n        }\n        if (keyCreator) {\n            return (value, node = null) => {\n                const params = this.getKeyCreatorParams(value, node);\n                return _makeNull(keyCreator!(params));\n            };\n        }\n        return (value) => _makeNull(_toStringOrNull(value));\n    }\n\n    public getFormattedValue(key: string | null): string | null {\n        let value: V | string | null = this.valueModel!.getValue(key);\n        if (this.noValueFormatterSupplied && (this.treeDataTreeList || this.groupingTreeList) && Array.isArray(value)) {\n            // essentially get back the cell value\n            value = _last(value) as string;\n        }\n\n        const formattedValue = this.valueService.formatValue(\n            this.setFilterParams!.column as AgColumn,\n            null,\n            value,\n            this.valueFormatter,\n            false\n        );\n\n        return (\n            (formattedValue == null ? _toStringOrNull(value) : formattedValue) ?? this.translateForSetFilter('blanks')\n        );\n    }\n\n    private applyExcelModeOptions(params: SetFilterParams<any, V>): void {\n        // apply default options to match Excel behaviour, unless they have already been specified\n        if (params.excelMode === 'windows') {\n            if (!params.buttons) {\n                params.buttons = ['apply', 'cancel'];\n            }\n\n            if (params.closeOnApply == null) {\n                params.closeOnApply = true;\n            }\n        } else if (params.excelMode === 'mac') {\n            if (!params.buttons) {\n                params.buttons = ['reset'];\n            }\n\n            if (params.applyMiniFilterWhileTyping == null) {\n                params.applyMiniFilterWhileTyping = true;\n            }\n\n            if (params.debounceMs == null) {\n                params.debounceMs = 500;\n            }\n        }\n        if (params.excelMode && params.defaultToNothingSelected) {\n            params.defaultToNothingSelected = false;\n            _warnOnce(\n                'The Set Filter Parameter \"defaultToNothingSelected\" value was ignored because it does not work when \"excelMode\" is used.'\n            );\n        }\n    }\n\n    private addEventListenersForDataChanges(): void {\n        if (!this.isValuesTakenFromGrid()) {\n            return;\n        }\n\n        this.addManagedEventListeners({\n            cellValueChanged: (event) => {\n                // only interested in changes to do with this column\n                if (this.setFilterParams && event.column === this.setFilterParams.column) {\n                    this.syncAfterDataChange();\n                }\n            },\n        });\n\n        this.addManagedPropertyListeners(['treeData', 'getDataPath', 'groupAllowUnbalanced'], () => {\n            this.syncAfterDataChange();\n        });\n    }\n\n    private syncAfterDataChange(): AgPromise<void> {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const promise = this.valueModel.refreshValues();\n\n        return promise.then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onBtApply(false, true);\n        });\n    }\n\n    private setIsLoading(isLoading: boolean): void {\n        _setDisplayed(this.eFilterLoading, isLoading);\n        if (!isLoading) {\n            // hard refresh when async data received\n            this.hardRefreshVirtualList = true;\n        }\n    }\n\n    private initialiseFilterBodyUi(): void {\n        this.initVirtualList();\n        this.initMiniFilter();\n    }\n\n    private initVirtualList(): void {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const translate = this.localeService.getLocaleTextFunc();\n        const filterListName = translate('ariaFilterList', 'Filter List');\n        const isTree = !!this.setFilterParams.treeList;\n\n        const virtualList = (this.virtualList = this.createBean(\n            new VirtualList({\n                cssIdentifier: 'filter',\n                ariaRole: isTree ? 'tree' : 'listbox',\n                listName: filterListName,\n            })\n        ));\n        const eSetFilterList = this.eSetFilterList;\n\n        if (isTree) {\n            eSetFilterList.classList.add('ag-set-filter-tree-list');\n        }\n\n        if (eSetFilterList) {\n            eSetFilterList.appendChild(virtualList.getGui());\n        }\n\n        const { cellHeight } = this.setFilterParams;\n\n        if (cellHeight != null) {\n            virtualList.setRowHeight(cellHeight);\n        }\n\n        const componentCreator = (item: SetFilterModelTreeItem | string | null, listItemElement: HTMLElement) =>\n            this.createSetListItem(item, isTree, listItemElement);\n        virtualList.setComponentCreator(componentCreator);\n\n        const componentUpdater = (\n            item: SetFilterModelTreeItem | string | null,\n            component: SetFilterListItem<V | string | null>\n        ) => this.updateSetListItem(item, component);\n        virtualList.setComponentUpdater(componentUpdater);\n\n        let model: VirtualListModel;\n\n        if (this.setFilterParams.suppressSelectAll) {\n            model = new ModelWrapper(this.valueModel);\n        } else {\n            model = new ModelWrapperWithSelectAll(this.valueModel, () => this.isSelectAllSelected());\n        }\n        if (isTree) {\n            model = new TreeModelWrapper(model);\n        }\n\n        virtualList.setModel(model);\n    }\n\n    private getSelectAllLabel(): string {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const key =\n            this.valueModel.getMiniFilter() == null || !this.setFilterParams.excelMode\n                ? 'selectAll'\n                : 'selectAllSearchResults';\n\n        return this.translateForSetFilter(key);\n    }\n\n    private getAddSelectionToFilterLabel(): string {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        return this.translateForSetFilter('addCurrentSelectionToFilter');\n    }\n\n    private createSetListItem(\n        item: SetFilterModelTreeItem | string | null,\n        isTree: boolean,\n        focusWrapper: HTMLElement\n    ): SetFilterListItem<V | string | null> {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const groupsExist = this.valueModel.hasGroups();\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n\n        const { value, depth, isGroup, hasIndeterminateExpandState, selectedListener, expandedListener } =\n            this.newSetListItemAttributes(item);\n\n        const itemParams: SetFilterListItemParams<V | string | null> = {\n            focusWrapper,\n            value,\n            params: this.setFilterParams,\n            translate: (translateKey: any) => this.translateForSetFilter(translateKey),\n            valueFormatter: this.valueFormatter,\n            item,\n            isSelected,\n            isTree,\n            depth,\n            groupsExist,\n            isGroup,\n            isExpanded,\n            hasIndeterminateExpandState,\n        };\n        const listItem = this.createBean(new SetFilterListItem<V | string | null>(itemParams));\n\n        listItem.addEventListener('selectionChanged', selectedListener as any);\n        if (expandedListener) {\n            listItem.addEventListener('expandedChanged', expandedListener as any);\n        }\n\n        return listItem;\n    }\n\n    private newSetTreeItemAttributes(item: SetFilterModelTreeItem): {\n        value: V | string | (() => string) | null;\n        depth?: number | undefined;\n        isGroup?: boolean | undefined;\n        hasIndeterminateExpandState?: boolean | undefined;\n        selectedListener: (e: SetFilterListItemSelectionChangedEvent) => void;\n        expandedListener?: (e: SetFilterListItemExpandedChangedEvent) => void;\n    } {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const groupsExist = this.valueModel.hasGroups();\n\n        // Select all option\n        if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n            return {\n                value: () => this.getSelectAllLabel(),\n                isGroup: groupsExist,\n                depth: item.depth,\n                hasIndeterminateExpandState: true,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent) => this.onSelectAll(e.isSelected),\n                expandedListener: (e: SetFilterListItemExpandedChangedEvent<SetFilterModelTreeItem>) =>\n                    this.onExpandAll(e.item, e.isExpanded),\n            };\n        }\n\n        // Add selection to filter option\n        if (item.key === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n            return {\n                value: () => this.getAddSelectionToFilterLabel(),\n                depth: item.depth,\n                isGroup: false,\n                hasIndeterminateExpandState: false,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent) => {\n                    this.onAddCurrentSelectionToFilterChange(e.isSelected);\n                },\n            };\n        }\n\n        // Group\n        if (item.children) {\n            return {\n                value:\n                    this.setFilterParams.treeListFormatter?.(item.treeKey, item.depth, item.parentTreeKeys) ??\n                    item.treeKey,\n                depth: item.depth,\n                isGroup: true,\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<SetFilterModelTreeItem>) =>\n                    this.onGroupItemSelected(e.item, e.isSelected),\n                expandedListener: (e: SetFilterListItemExpandedChangedEvent<SetFilterModelTreeItem>) =>\n                    this.onExpandedChanged(e.item, e.isExpanded),\n            };\n        }\n\n        // Leaf\n        return {\n            value:\n                this.setFilterParams.treeListFormatter?.(item.treeKey, item.depth, item.parentTreeKeys) ?? item.treeKey,\n            depth: item.depth,\n            selectedListener: (e: SetFilterListItemSelectionChangedEvent<SetFilterModelTreeItem>) =>\n                this.onItemSelected(e.item.key!, e.isSelected),\n        };\n    }\n\n    private newSetListItemAttributes(item: SetFilterModelTreeItem | string | null): {\n        value: V | string | (() => string) | null;\n        depth?: number | undefined;\n        isGroup?: boolean | undefined;\n        hasIndeterminateExpandState?: boolean | undefined;\n        selectedListener: (e: SetFilterListItemSelectionChangedEvent) => void;\n        expandedListener?: (e: SetFilterListItemExpandedChangedEvent) => void;\n    } {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        // Tree item\n        if (this.isSetFilterModelTreeItem(item)) {\n            return this.newSetTreeItemAttributes(item);\n        }\n\n        // List item - 'Select All'\n        if (item === SetFilterDisplayValue.SELECT_ALL) {\n            return {\n                value: () => this.getSelectAllLabel(),\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<string>) => this.onSelectAll(e.isSelected),\n            };\n        }\n\n        // List item - 'Add selection to filter'\n        if (item === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n            return {\n                value: () => this.getAddSelectionToFilterLabel(),\n                selectedListener: (e: SetFilterListItemSelectionChangedEvent<string | null>) => {\n                    this.onAddCurrentSelectionToFilterChange(e.isSelected);\n                },\n            };\n        }\n\n        // List item\n        return {\n            value: this.valueModel.getValue(item),\n            selectedListener: (e: SetFilterListItemSelectionChangedEvent<string | null>) =>\n                this.onItemSelected(e.item, e.isSelected),\n        };\n    }\n\n    private updateSetListItem(\n        item: SetFilterModelTreeItem | string | null,\n        component: SetFilterListItem<V | string | null>\n    ): void {\n        const { isSelected, isExpanded } = this.isSelectedExpanded(item);\n        component.refresh(item, isSelected, isExpanded);\n    }\n\n    private isSelectedExpanded(item: SetFilterModelTreeItem | string | null): {\n        isSelected: boolean | undefined;\n        isExpanded: boolean | undefined;\n    } {\n        let isSelected: boolean | undefined;\n        let isExpanded: boolean | undefined;\n        if (this.isSetFilterModelTreeItem(item)) {\n            isExpanded = item.expanded;\n            if (item.key === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            } else if (item.key === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n                isSelected = this.valueModel!.isAddCurrentSelectionToFilterChecked();\n            } else if (item.children) {\n                isSelected = this.areAllChildrenSelected(item);\n            } else {\n                isSelected = this.valueModel!.isKeySelected(item.key!);\n            }\n        } else {\n            if (item === SetFilterDisplayValue.SELECT_ALL) {\n                isSelected = this.isSelectAllSelected();\n            } else if (item === SetFilterDisplayValue.ADD_SELECTION_TO_FILTER) {\n                isSelected = this.valueModel!.isAddCurrentSelectionToFilterChecked();\n            } else {\n                isSelected = this.valueModel!.isKeySelected(item);\n            }\n        }\n        return { isSelected, isExpanded };\n    }\n\n    private isSetFilterModelTreeItem(item: any): item is SetFilterModelTreeItem {\n        return item?.treeKey !== undefined;\n    }\n\n    private initMiniFilter() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const { eMiniFilter, localeService } = this;\n        const translate = localeService.getLocaleTextFunc();\n\n        eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        eMiniFilter.setValue(this.valueModel.getMiniFilter());\n        eMiniFilter.onValueChange(() => this.onMiniFilterInput());\n        eMiniFilter.setInputAriaLabel(translate('ariaSearchFilterValues', 'Search filter values'));\n\n        this.addManagedElementListeners(eMiniFilter.getInputElement(), {\n            keydown: (e) => this.onMiniFilterKeyDown(e!),\n        });\n    }\n\n    private updateMiniFilter() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const { eMiniFilter } = this;\n\n        if (eMiniFilter.isDisplayed() !== !this.setFilterParams.suppressMiniFilter) {\n            eMiniFilter.setDisplayed(!this.setFilterParams.suppressMiniFilter);\n        }\n\n        const miniFilterValue = this.valueModel.getMiniFilter();\n        if (eMiniFilter.getValue() !== miniFilterValue) {\n            eMiniFilter.setValue(miniFilterValue);\n        }\n    }\n\n    // we need to have the GUI attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the GUI state\n    public override afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n\n        super.afterGuiAttached(params);\n\n        // collapse all tree list items (if tree list)\n        this.resetExpansion();\n\n        this.refreshVirtualList();\n\n        const { eMiniFilter } = this;\n\n        eMiniFilter.setInputPlaceholder(this.translateForSetFilter('searchOoo'));\n\n        if (!params || !params.suppressFocus) {\n            eMiniFilter.getFocusableElement().focus();\n        }\n    }\n\n    public override afterGuiDetached(): void {\n        super.afterGuiDetached();\n\n        // discard any unapplied UI state (reset to model)\n        if (this.setFilterParams?.excelMode) {\n            this.resetMiniFilter();\n        }\n        const appliedModel = this.getModel();\n        if (this.setFilterParams?.excelMode || !this.areModelsEqual(appliedModel!, this.getModelFromUi()!)) {\n            this.resetUiToActiveModel(appliedModel);\n            this.showOrHideResults();\n        }\n    }\n\n    public override applyModel(source: 'api' | 'ui' | 'rowDataUpdated' = 'api'): boolean {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        if (\n            this.setFilterParams.excelMode &&\n            source !== 'rowDataUpdated' &&\n            this.valueModel.isEverythingVisibleSelected()\n        ) {\n            // In Excel, if the filter is applied with all visible values selected, then any active filter on the\n            // column is removed. This ensures the filter is removed in this situation.\n            this.valueModel.selectAllMatchingMiniFilter();\n        }\n\n        // Here we implement AG-9090 TC2\n        // When 'Add current selection to filter' is visible and checked, but no filter is applied:\n        // Do NOT apply the current selection as filter.\n        const shouldKeepCurrentSelection =\n            this.valueModel!.showAddCurrentSelectionToFilter() &&\n            this.valueModel!.isAddCurrentSelectionToFilterChecked();\n        if (shouldKeepCurrentSelection && !this.getModel()) {\n            return false;\n        }\n\n        const result = super.applyModel(source);\n\n        // keep appliedModelKeys in sync with the applied model\n        const appliedModel = this.getModel();\n\n        if (appliedModel) {\n            if (!shouldKeepCurrentSelection) {\n                this.valueModel.setAppliedModelKeys(new Set());\n            }\n\n            appliedModel.values.forEach((key) => {\n                this.valueModel!.addToAppliedModelKeys(key);\n            });\n        } else {\n            if (!shouldKeepCurrentSelection) {\n                this.valueModel.setAppliedModelKeys(null);\n            }\n        }\n\n        return result;\n    }\n\n    protected override isModelValid(model: SetFilterModel): boolean {\n        return this.setFilterParams && this.setFilterParams.excelMode ? model == null || model.values.length > 0 : true;\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        if (!this.setFilterParams || !this.valueModel || !this.valueModel.getCaseFormattedAppliedModelKeys()) {\n            return true;\n        }\n\n        // if nothing selected, don't need to check value\n        if (!this.valueModel.hasAnyAppliedModelKey()) {\n            return false;\n        }\n\n        const { node, data } = params;\n        if (this.treeDataTreeList) {\n            return this.doesFilterPassForTreeData(node, data);\n        }\n        if (this.groupingTreeList) {\n            return this.doesFilterPassForGrouping(node);\n        }\n\n        const value = this.getValueFromNode(node);\n\n        if (value != null && Array.isArray(value)) {\n            if (value.length === 0) {\n                return this.valueModel!.hasAppliedModelKey(null);\n            }\n            return value.some((v) => this.isInAppliedModel(this.createKey(v, node)));\n        }\n\n        return this.isInAppliedModel(this.createKey(value, node));\n    }\n\n    private doesFilterPassForTreeData(node: IRowNode, data: any): boolean {\n        if (node.childrenAfterGroup?.length) {\n            // only perform checking on leaves. The core filtering logic for tree data won't work properly otherwise\n            return false;\n        }\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(this.getDataPath!(data)) as any) as any);\n    }\n\n    private doesFilterPassForGrouping(node: IRowNode): boolean {\n        const dataPath = this.funcColsService\n            .getRowGroupColumns()\n            .map((groupCol) => this.valueService.getKeyForNode(groupCol, node));\n        dataPath.push(this.getValueFromNode(node));\n        return this.isInAppliedModel(this.createKey(this.checkMakeNullDataPath(dataPath) as any) as any);\n    }\n\n    private checkMakeNullDataPath(dataPath: string[] | null): string[] | null {\n        if (dataPath) {\n            dataPath = dataPath.map((treeKey) => _toStringOrNull(_makeNull(treeKey))) as any;\n        }\n        if (dataPath?.some((treeKey) => treeKey == null)) {\n            if (this.gos.get('groupAllowUnbalanced') && _last(dataPath) != null) {\n                return dataPath.filter((treeKey) => treeKey != null);\n            }\n            return null;\n        }\n        return dataPath;\n    }\n\n    private isInAppliedModel(key: string | null): boolean {\n        return this.valueModel!.hasAppliedModelKey(key);\n    }\n\n    private getValueFromNode(node: IRowNode): V | null | undefined {\n        return this.setFilterParams!.getValue(node);\n    }\n\n    private getKeyCreatorParams(value: V | null | undefined, node: IRowNode | null = null): KeyCreatorParams {\n        return {\n            value,\n            colDef: this.setFilterParams!.colDef,\n            column: this.setFilterParams!.column,\n            node: node,\n            data: node?.data,\n            api: this.setFilterParams!.api,\n            context: this.setFilterParams!.context,\n        };\n    }\n\n    public override onNewRowsLoaded(): void {\n        if (!this.isValuesTakenFromGrid()) {\n            return;\n        }\n        this.syncAfterDataChange();\n    }\n\n    private isValuesTakenFromGrid(): boolean {\n        if (!this.valueModel) {\n            return false;\n        }\n        const valuesType = this.valueModel.getValuesType();\n        return valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can change the value of the filter once\n     * the filter has been already started\n     * @param values The values to use.\n     */\n    public setFilterValues(values: (V | null)[]): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        this.valueModel.overrideValues(values).then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        });\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Public method provided so the user can reset the values of the filter once that it has started.\n     */\n    public resetFilterValues(): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        this.valueModel.setValuesType(SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES);\n        this.syncAfterDataChange();\n    }\n\n    public refreshFilterValues(): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        // the model is still being initialised\n        if (!this.valueModel.isInitialised()) {\n            return;\n        }\n\n        this.valueModel.refreshValues().then(() => {\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        });\n    }\n\n    public onAnyFilterChanged(): void {\n        // don't block the current action when updating the values for this filter\n        setTimeout(() => {\n            if (!this.isAlive()) {\n                return;\n            }\n\n            if (!this.valueModel) {\n                throw new Error('Value model has not been created.');\n            }\n\n            this.valueModel.refreshAfterAnyFilterChanged().then((refresh) => {\n                if (refresh) {\n                    this.checkAndRefreshVirtualList();\n                    this.showOrHideResults();\n                }\n            });\n        }, 0);\n    }\n\n    private onMiniFilterInput() {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        if (!this.valueModel.setMiniFilter(this.eMiniFilter.getValue())) {\n            return;\n        }\n\n        const { applyMiniFilterWhileTyping, readOnly } = this.setFilterParams || {};\n        if (!readOnly && applyMiniFilterWhileTyping) {\n            this.filterOnAllVisibleValues(false);\n        } else {\n            this.updateUiAfterMiniFilterChange();\n        }\n    }\n\n    private updateUiAfterMiniFilterChange(): void {\n        if (!this.setFilterParams) {\n            throw new Error('Set filter params have not been provided.');\n        }\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (excelMode == null || !!readOnly) {\n            this.checkAndRefreshVirtualList();\n        } else if (this.valueModel.getMiniFilter() == null) {\n            this.resetUiToActiveModel(this.getModel());\n        } else {\n            this.valueModel.selectAllMatchingMiniFilter(true);\n            this.checkAndRefreshVirtualList();\n            this.onUiChanged();\n        }\n\n        this.showOrHideResults();\n    }\n\n    private showOrHideResults(): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n\n        const hideResults = this.valueModel.getMiniFilter() != null && this.valueModel.getDisplayedValueCount() < 1;\n\n        _setDisplayed(this.eFilterNoMatches, hideResults);\n        _setDisplayed(this.eSetFilterList, !hideResults);\n    }\n\n    private resetMiniFilter(): void {\n        this.eMiniFilter.setValue(null, true);\n        this.valueModel?.setMiniFilter(null);\n    }\n\n    protected override resetUiToActiveModel(\n        currentModel: SetFilterModel | null,\n        afterUiUpdatedFunc?: () => void\n    ): void {\n        // override the default behaviour as we don't always want to clear the mini filter\n        this.setModelAndRefresh(currentModel == null ? null : currentModel.values).then(() => {\n            this.onUiChanged(false, 'prevent');\n\n            afterUiUpdatedFunc?.();\n        });\n    }\n\n    protected override handleCancelEnd(e: Event): void {\n        this.setMiniFilter(null);\n        super.handleCancelEnd(e);\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        const { excelMode, readOnly } = this.setFilterParams || {};\n        if (e.key === KeyCode.ENTER && !excelMode && !readOnly) {\n            this.filterOnAllVisibleValues();\n        }\n    }\n\n    private filterOnAllVisibleValues(applyImmediately = true): void {\n        const { readOnly } = this.setFilterParams || {};\n\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (readOnly) {\n            throw new Error('Unable to filter in readOnly mode.');\n        }\n\n        this.valueModel.selectAllMatchingMiniFilter(true);\n        this.checkAndRefreshVirtualList();\n        this.onUiChanged(false, applyImmediately ? 'immediately' : 'debounce');\n        this.showOrHideResults();\n    }\n\n    private focusRowIfAlive(rowIndex: number | null): void {\n        if (rowIndex == null) {\n            return;\n        }\n\n        window.setTimeout(() => {\n            if (!this.virtualList) {\n                throw new Error('Virtual list has not been created.');\n            }\n\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private onSelectAll(isSelected: boolean): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n\n        if (isSelected) {\n            this.valueModel.selectAllMatchingMiniFilter();\n        } else {\n            this.valueModel.deselectAllMatchingMiniFilter();\n        }\n\n        this.refreshAfterSelection();\n    }\n\n    private onGroupItemSelected(item: SetFilterModelTreeItem, isSelected: boolean): void {\n        const recursiveGroupSelection = (i: SetFilterModelTreeItem) => {\n            if (i.children) {\n                i.children.forEach((childItem) => recursiveGroupSelection(childItem));\n            } else {\n                this.selectItem(i.key!, isSelected);\n            }\n        };\n\n        recursiveGroupSelection(item);\n\n        this.refreshAfterSelection();\n    }\n\n    private onItemSelected(key: string | null, isSelected: boolean): void {\n        if (!this.valueModel) {\n            throw new Error('Value model has not been created.');\n        }\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n\n        this.selectItem(key, isSelected);\n\n        this.refreshAfterSelection();\n    }\n\n    private selectItem(key: string | null, isSelected: boolean): void {\n        if (isSelected) {\n            this.valueModel!.selectKey(key);\n        } else {\n            this.valueModel!.deselectKey(key);\n        }\n    }\n\n    private onExpandAll(item: SetFilterModelTreeItem, isExpanded: boolean): void {\n        const recursiveExpansion = (i: SetFilterModelTreeItem) => {\n            if (i.filterPasses && i.available && i.children) {\n                i.children.forEach((childItem) => recursiveExpansion(childItem));\n                i.expanded = isExpanded;\n            }\n        };\n\n        recursiveExpansion(item);\n\n        this.refreshAfterExpansion();\n    }\n\n    private onExpandedChanged(item: SetFilterModelTreeItem, isExpanded: boolean): void {\n        item.expanded = isExpanded;\n\n        this.refreshAfterExpansion();\n    }\n\n    private refreshAfterExpansion(): void {\n        const focusedRow = this.virtualList!.getLastFocusedRow();\n\n        this.valueModel!.updateDisplayedValues('expansion');\n\n        this.checkAndRefreshVirtualList();\n        this.focusRowIfAlive(focusedRow);\n    }\n\n    private refreshAfterSelection(): void {\n        const focusedRow = this.virtualList!.getLastFocusedRow();\n\n        this.checkAndRefreshVirtualList();\n        this.onUiChanged();\n        this.focusRowIfAlive(focusedRow);\n    }\n\n    public setMiniFilter(newMiniFilter: string | null): void {\n        this.eMiniFilter.setValue(newMiniFilter);\n        this.onMiniFilterInput();\n    }\n\n    public getMiniFilter(): string | null {\n        return this.valueModel ? this.valueModel.getMiniFilter() : null;\n    }\n\n    private checkAndRefreshVirtualList() {\n        if (!this.virtualList) {\n            throw new Error('Virtual list has not been created.');\n        }\n\n        this.virtualList.refresh(!this.hardRefreshVirtualList);\n\n        if (this.hardRefreshVirtualList) {\n            this.hardRefreshVirtualList = false;\n        }\n    }\n\n    public getFilterKeys(): SetFilterModelValue {\n        return this.valueModel ? this.valueModel.getKeys() : [];\n    }\n\n    public getFilterValues(): (V | null)[] {\n        return this.valueModel ? this.valueModel.getValues() : [];\n    }\n\n    public getValues(): SetFilterModelValue {\n        return this.getFilterKeys();\n    }\n\n    public refreshVirtualList(): void {\n        if (this.setFilterParams && this.setFilterParams.refreshValuesOnOpen) {\n            this.refreshFilterValues();\n        } else {\n            this.checkAndRefreshVirtualList();\n        }\n    }\n\n    private translateForSetFilter(key: keyof ISetFilterLocaleText): string {\n        const translate = this.localeService.getLocaleTextFunc();\n\n        return translate(key, DEFAULT_LOCALE_TEXT[key]);\n    }\n\n    private isSelectAllSelected(): boolean | undefined {\n        if (!this.setFilterParams || !this.valueModel) {\n            return false;\n        }\n\n        if (!this.setFilterParams.defaultToNothingSelected) {\n            // everything selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n\n            if (this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n        } else {\n            // nothing selected by default\n            if (this.valueModel.hasSelections() && this.valueModel.isEverythingVisibleSelected()) {\n                return true;\n            }\n\n            if (this.valueModel.isNothingVisibleSelected()) {\n                return false;\n            }\n        }\n        // returning `undefined` means the checkbox status is indeterminate.\n        return undefined;\n    }\n\n    private areAllChildrenSelected(item: SetFilterModelTreeItem): boolean | undefined {\n        const recursiveChildSelectionCheck = (i: SetFilterModelTreeItem): boolean | undefined => {\n            if (i.children) {\n                let someTrue = false;\n                let someFalse = false;\n                const mixed = i.children.some((child) => {\n                    if (!child.filterPasses || !child.available) {\n                        return false;\n                    }\n                    const childSelected = recursiveChildSelectionCheck(child);\n                    if (childSelected === undefined) {\n                        return true;\n                    }\n                    if (childSelected) {\n                        someTrue = true;\n                    } else {\n                        someFalse = true;\n                    }\n                    return someTrue && someFalse;\n                });\n                // returning `undefined` means the checkbox status is indeterminate.\n                // if not mixed and some true, all must be true\n                return mixed ? undefined : someTrue;\n            } else {\n                return this.valueModel!.isKeySelected(i.key!);\n            }\n        };\n\n        if (!this.setFilterParams!.defaultToNothingSelected) {\n            // everything selected by default\n            return recursiveChildSelectionCheck(item);\n        } else {\n            // nothing selected by default\n            return this.valueModel!.hasSelections() && recursiveChildSelectionCheck(item);\n        }\n    }\n\n    public override destroy(): void {\n        if (this.virtualList != null) {\n            this.virtualList.destroy();\n            this.virtualList = null;\n        }\n\n        super.destroy();\n    }\n\n    private caseFormat<T extends string | number | null>(valueToFormat: T): typeof valueToFormat {\n        if (valueToFormat == null || typeof valueToFormat !== 'string') {\n            return valueToFormat;\n        }\n        return this.caseSensitive ? valueToFormat : (valueToFormat.toUpperCase() as T);\n    }\n\n    private resetExpansion(): void {\n        if (!this.setFilterParams?.treeList) {\n            return;\n        }\n\n        const selectAllItem = this.valueModel?.getSelectAllItem();\n\n        if (this.isSetFilterModelTreeItem(selectAllItem)) {\n            const recursiveCollapse = (i: SetFilterModelTreeItem) => {\n                if (i.children) {\n                    i.children.forEach((childItem) => recursiveCollapse(childItem));\n                    i.expanded = false;\n                }\n            };\n            recursiveCollapse(selectAllItem);\n            this.valueModel!.updateDisplayedValues('expansion');\n        }\n    }\n\n    public getModelAsString(model: SetFilterModel): string {\n        return this.filterModelFormatter.getModelAsString(model, this);\n    }\n\n    protected override getPositionableElement(): HTMLElement {\n        return this.eSetFilterList;\n    }\n}\n\nclass ModelWrapper<V> implements VirtualListModel {\n    constructor(private readonly model: SetValueModel<V>) {}\n\n    public getRowCount(): number {\n        return this.model.getDisplayedValueCount();\n    }\n\n    public getRow(index: number): string | null {\n        return this.model.getDisplayedItem(index) as any;\n    }\n\n    public areRowsEqual(oldRow: string | null, newRow: string | null): boolean {\n        return oldRow === newRow;\n    }\n}\n\nclass ModelWrapperWithSelectAll<V> implements VirtualListModel {\n    constructor(\n        private readonly model: SetValueModel<V>,\n        private readonly isSelectAllSelected: () => boolean | undefined\n    ) {}\n\n    public getRowCount(): number {\n        const showAddCurrentSelectionToFilter = this.model.showAddCurrentSelectionToFilter();\n        const outboundItems = showAddCurrentSelectionToFilter ? 2 : 1;\n        return this.model.getDisplayedValueCount() + outboundItems;\n    }\n\n    public getRow(index: number): string | null {\n        if (index === 0) {\n            return this.model.getSelectAllItem() as any;\n        }\n\n        const showAddCurrentSelectionToFilter = this.model.showAddCurrentSelectionToFilter();\n        const outboundItems = showAddCurrentSelectionToFilter ? 2 : 1;\n        if (index === 1 && showAddCurrentSelectionToFilter) {\n            return this.model.getAddSelectionToFilterItem() as any;\n        }\n\n        return this.model.getDisplayedItem(index - outboundItems) as any;\n    }\n\n    public areRowsEqual(oldRow: string | null, newRow: string | null): boolean {\n        return oldRow === newRow;\n    }\n}\n\n// isRowSelected is used by VirtualList to add aria tags for flat lists. We want to suppress this when using trees\nclass TreeModelWrapper implements VirtualListModel {\n    constructor(private readonly model: VirtualListModel) {}\n\n    public getRowCount(): number {\n        return this.model.getRowCount();\n    }\n\n    public getRow(index: number): SetFilterModelTreeItem | null {\n        return this.model.getRow(index);\n    }\n\n    public areRowsEqual(oldRow: SetFilterModelTreeItem | null, newRow: SetFilterModelTreeItem | null): boolean {\n        if (oldRow == null && newRow == null) {\n            return true;\n        }\n        return oldRow != null && newRow != null && oldRow.treeKey === newRow.treeKey && oldRow.depth === newRow.depth;\n    }\n}\n", "export interface ISetDisplayValueModel<V> {\n    updateDisplayedValuesToAllAvailable(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void;\n\n    updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void;\n\n    getDisplayedValueCount(): number;\n\n    getDisplayedItem(index: number): string | SetFilterModelTreeItem | null;\n\n    getSelectAllItem(): string | SetFilterModelTreeItem;\n\n    getAddSelectionToFilterItem(): string | SetFilterModelTreeItem;\n\n    getDisplayedKeys(): (string | null)[];\n\n    forEachDisplayedKey(func: (key: string | null) => void): void;\n\n    someDisplayedKey(func: (key: string | null) => boolean): boolean;\n\n    hasGroups(): boolean;\n\n    refresh(): void;\n}\n\nexport class SetFilterDisplayValue {\n    public static readonly SELECT_ALL = '__AG_SELECT_ALL__';\n    public static readonly ADD_SELECTION_TO_FILTER = '__AG_ADD_SELECTION_TO_FILTER__';\n}\n\nexport interface SetFilterModelTreeItem {\n    treeKey: string | null;\n    depth: number;\n    filterPasses: boolean;\n    available: boolean;\n    expanded?: boolean;\n    children?: SetFilterModelTreeItem[];\n    key?: string | null;\n    parentTreeKeys: (string | null)[];\n}\n", "export interface ISetFilterLocaleText {\n    loadingOoo: string;\n    blanks: string;\n    searchOoo: string;\n    selectAll: string;\n    selectAllSearchResults: string;\n    addCurrentSelectionToFilter: string;\n    noMatches: string;\n}\n\nexport const DEFAULT_LOCALE_TEXT: ISetFilterLocaleText = {\n    loadingOoo: 'Loading...',\n    blanks: '(Blanks)',\n    searchOoo: 'Search...',\n    selectAll: '(Select All)',\n    selectAllSearchResults: '(Select All Search Results)',\n    addCurrentSelectionToFilter: 'Add current selection to filter',\n    noMatches: 'No matches.',\n};\n", "import type {\n    AgCheckbox,\n    AgColumn,\n    AgEvent,\n    BeanCollection,\n    ColDef,\n    ICellRendererComp,\n    ISetFilterCellRendererParams,\n    ISetFilterTreeListTooltipParams,\n    ITooltipParams,\n    SetFilterParams,\n    UserComponentFactory,\n    ValueFormatterParams,\n    ValueService,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport {\n    AgCheckboxSelector,\n    Component,\n    RefPlaceholder,\n    _createIcon,\n    _setAriaChecked,\n    _setAriaDescribedBy,\n    _setAriaExpanded,\n    _setAriaLabel,\n    _setAriaLabelledBy,\n    _setAriaLevel,\n    _setDisplayed,\n    _toStringOrNull,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport type { ISetFilterLocaleText } from './localeText';\n\nexport interface SetFilterListItemSelectionChangedEvent<\n    I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null,\n> extends AgEvent<'selectionChanged'> {\n    isSelected: boolean;\n    item: I;\n}\n\nexport interface SetFilterListItemExpandedChangedEvent<\n    I extends SetFilterModelTreeItem | string | null = SetFilterModelTreeItem | string | null,\n> extends AgEvent<'expandedChanged'> {\n    isExpanded: boolean;\n    item: I;\n}\n\nexport interface SetFilterListItemParams<V> {\n    focusWrapper: HTMLElement;\n    value: V | null | (() => string);\n    params: SetFilterParams<any, V>;\n    translate: (key: keyof ISetFilterLocaleText) => string;\n    valueFormatter?: (params: ValueFormatterParams) => string;\n    item: SetFilterModelTreeItem | string | null;\n    isSelected: boolean | undefined;\n    isTree?: boolean;\n    depth?: number;\n    groupsExist?: boolean;\n    isGroup?: boolean;\n    isExpanded?: boolean;\n    hasIndeterminateExpandState?: boolean;\n}\n\nexport type SetFilterListItemEvent = 'selectionChanged' | 'expandedChanged';\n/** @param V type of value in the Set Filter */\nexport class SetFilterListItem<V> extends Component<SetFilterListItemEvent> {\n    private valueService: ValueService;\n    private userComponentFactory: UserComponentFactory;\n\n    public wireBeans(beans: BeanCollection) {\n        this.valueService = beans.valueService;\n        this.userComponentFactory = beans.userComponentFactory;\n    }\n\n    private readonly eCheckbox: AgCheckbox = RefPlaceholder;\n\n    private readonly eGroupOpenedIcon: HTMLElement = RefPlaceholder;\n    private readonly eGroupClosedIcon: HTMLElement = RefPlaceholder;\n    private readonly eGroupIndeterminateIcon: HTMLElement = RefPlaceholder;\n\n    private readonly focusWrapper: HTMLElement;\n    private readonly value: V | null | (() => string);\n    private readonly params: SetFilterParams<any, V>;\n    private readonly translate: (key: keyof ISetFilterLocaleText) => string;\n    private readonly valueFormatter?: (params: ValueFormatterParams) => string;\n    private readonly isTree?: boolean;\n    private readonly depth: number;\n    private readonly isGroup?: boolean;\n    private readonly groupsExist?: boolean;\n    private readonly hasIndeterminateExpandState?: boolean;\n\n    private item: SetFilterModelTreeItem | string | null;\n    private isSelected: boolean | undefined;\n    private isExpanded: boolean | undefined;\n    // only used for select all\n    private valueFunction?: () => string;\n\n    private cellRendererParams: ISetFilterCellRendererParams;\n    private cellRendererComponent?: ICellRendererComp;\n    private destroyCellRendererComponent?: () => void;\n\n    constructor(params: SetFilterListItemParams<V>) {\n        super(\n            params.isGroup\n                ? /* html */ `\n            <div class=\"ag-set-filter-item\" aria-hidden=\"true\">\n                <span class=\"ag-set-filter-group-icons\">\n                    <span class=\"ag-set-filter-group-closed-icon\" data-ref=\"eGroupClosedIcon\"></span>\n                    <span class=\"ag-set-filter-group-opened-icon\" data-ref=\"eGroupOpenedIcon\"></span>\n                    <span class=\"ag-set-filter-group-indeterminate-icon\" data-ref=\"eGroupIndeterminateIcon\"></span>\n                </span>\n                <ag-checkbox data-ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n            </div>`\n                : /* html */ `\n            <div class=\"ag-set-filter-item\">\n                <ag-checkbox data-ref=\"eCheckbox\" class=\"ag-set-filter-item-checkbox\"></ag-checkbox>\n            </div>`,\n            [AgCheckboxSelector]\n        );\n        this.focusWrapper = params.focusWrapper;\n        this.value = params.value;\n        this.params = params.params;\n        this.translate = params.translate;\n        this.valueFormatter = params.valueFormatter;\n        this.item = params.item;\n        this.isSelected = params.isSelected;\n        this.isTree = params.isTree;\n        this.depth = params.depth ?? 0;\n        this.isGroup = params.isGroup;\n        this.groupsExist = params.groupsExist;\n        this.isExpanded = params.isExpanded;\n        this.hasIndeterminateExpandState = params.hasIndeterminateExpandState;\n    }\n\n    public postConstruct(): void {\n        this.addDestroyFunc(() => this.destroyCellRendererComponent?.());\n\n        this.render();\n\n        this.eCheckbox\n            .setLabelEllipsis(true)\n            .setValue(this.isSelected, true)\n            .setDisabled(!!this.params.readOnly)\n            .getInputElement()\n            .setAttribute('tabindex', '-1');\n\n        this.refreshVariableAriaLabels();\n\n        if (this.isTree) {\n            if (this.depth > 0) {\n                this.addCssClass('ag-set-filter-indent-' + this.depth);\n                this.getGui().style.setProperty('--ag-indentation-level', String(this.depth));\n            }\n            if (this.isGroup) {\n                this.setupExpansion();\n            } else {\n                if (this.groupsExist) {\n                    this.addCssClass('ag-set-filter-add-group-indent');\n                }\n            }\n\n            _setAriaLevel(this.getAriaElement(), this.depth + 1);\n        }\n\n        this.refreshAriaChecked();\n\n        if (this.params.readOnly) {\n            // Don't add event listeners if we're read-only.\n            return;\n        }\n\n        this.eCheckbox.onValueChange((value) => this.onCheckboxChanged(!!value));\n    }\n\n    public override getFocusableElement(): HTMLElement {\n        return this.focusWrapper;\n    }\n\n    private setupExpansion(): void {\n        this.eGroupClosedIcon.appendChild(_createIcon('setFilterGroupClosed', this.gos, null));\n        this.eGroupOpenedIcon.appendChild(_createIcon('setFilterGroupOpen', this.gos, null));\n        const listener = this.onExpandOrContractClicked.bind(this);\n        this.addManagedElementListeners(this.eGroupClosedIcon, { click: listener });\n        this.addManagedElementListeners(this.eGroupOpenedIcon, { click: listener });\n\n        if (this.hasIndeterminateExpandState) {\n            this.eGroupIndeterminateIcon.appendChild(_createIcon('setFilterGroupIndeterminate', this.gos, null));\n            this.addManagedElementListeners(this.eGroupIndeterminateIcon, {\n                click: listener,\n            });\n        }\n\n        this.setExpandedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private onExpandOrContractClicked(): void {\n        this.setExpanded(!this.isExpanded);\n    }\n\n    public setExpanded(isExpanded: boolean | undefined, silent?: boolean): void {\n        if (this.isGroup && isExpanded !== this.isExpanded) {\n            this.isExpanded = isExpanded;\n\n            const event: SetFilterListItemExpandedChangedEvent = {\n                type: 'expandedChanged',\n                isExpanded: !!isExpanded,\n                item: this.item,\n            };\n\n            if (!silent) {\n                this.dispatchLocalEvent(event);\n            }\n\n            this.setExpandedIcons();\n            this.refreshAriaExpanded();\n        }\n    }\n\n    private setExpandedIcons(): void {\n        _setDisplayed(\n            this.eGroupClosedIcon,\n            this.hasIndeterminateExpandState ? this.isExpanded === false : !this.isExpanded\n        );\n        _setDisplayed(this.eGroupOpenedIcon, this.isExpanded === true);\n        if (this.hasIndeterminateExpandState) {\n            _setDisplayed(this.eGroupIndeterminateIcon, this.isExpanded === undefined);\n        }\n    }\n\n    private onCheckboxChanged(isSelected: boolean): void {\n        this.isSelected = isSelected;\n\n        const event: SetFilterListItemSelectionChangedEvent = {\n            type: 'selectionChanged',\n            isSelected,\n            item: this.item,\n        };\n\n        this.dispatchLocalEvent(event);\n        this.refreshVariableAriaLabels();\n        this.refreshAriaChecked();\n    }\n\n    public toggleSelected(): void {\n        if (this.params.readOnly) {\n            return;\n        }\n\n        this.setSelected(!this.isSelected);\n    }\n\n    private setSelected(isSelected: boolean | undefined, silent?: boolean) {\n        this.isSelected = isSelected;\n        this.eCheckbox.setValue(isSelected, silent);\n        this.refreshAriaChecked();\n    }\n\n    private refreshVariableAriaLabels(): void {\n        if (!this.isTree) {\n            return;\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const checkboxValue = this.eCheckbox.getValue();\n        const state =\n            checkboxValue === undefined\n                ? translate('ariaIndeterminate', 'indeterminate')\n                : checkboxValue\n                  ? translate('ariaVisible', 'visible')\n                  : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n        _setAriaLabelledBy(this.eCheckbox.getInputElement(), undefined as any);\n        this.eCheckbox.setInputAriaLabel(`${visibilityLabel} (${state})`);\n    }\n\n    private setupFixedAriaLabels(value: any): void {\n        if (!this.isTree) {\n            return;\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const itemLabel = translate('ariaFilterValue', 'Filter Value');\n        const ariaEl = this.getAriaElement();\n        _setAriaLabel(ariaEl, `${value} ${itemLabel}`);\n        _setAriaDescribedBy(ariaEl, this.eCheckbox.getInputElement().id);\n    }\n\n    private refreshAriaChecked(): void {\n        const ariaEl = this.getAriaElement();\n\n        _setAriaChecked(ariaEl, this.eCheckbox.getValue());\n    }\n\n    private refreshAriaExpanded(): void {\n        _setAriaExpanded(this.getAriaElement(), !!this.isExpanded);\n    }\n\n    public refresh(\n        item: SetFilterModelTreeItem | string | null,\n        isSelected: boolean | undefined,\n        isExpanded: boolean | undefined\n    ): void {\n        this.item = item;\n        // setExpanded checks if value has changed, setSelected does not\n        if (isSelected !== this.isSelected) {\n            this.setSelected(isSelected, true);\n        }\n        this.setExpanded(isExpanded, true);\n        if (this.valueFunction) {\n            // underlying value might have changed, so call again and re-render\n            const value = this.valueFunction();\n            this.setTooltipAndCellRendererParams(value as any, value);\n            if (!this.cellRendererComponent) {\n                this.renderCellWithoutCellRenderer();\n            }\n        }\n        if (this.cellRendererComponent) {\n            const success = this.cellRendererComponent.refresh?.(this.cellRendererParams as any);\n            if (!success) {\n                const oldComponent = this.cellRendererComponent;\n                this.renderCell();\n                this.destroyBean(oldComponent);\n            }\n        }\n    }\n\n    public render(): void {\n        const {\n            params: { column },\n        } = this;\n\n        let { value } = this;\n        let formattedValue: string | null = null;\n\n        if (typeof value === 'function') {\n            this.valueFunction = value as () => string;\n            formattedValue = this.valueFunction();\n            // backwards compatibility for select all in value\n            value = formattedValue as any;\n        } else if (this.isTree) {\n            // tree values are already formatted via treeListFormatter\n            formattedValue = _toStringOrNull(value);\n        } else {\n            formattedValue = this.getFormattedValue(column as AgColumn, value);\n        }\n\n        this.setTooltipAndCellRendererParams(value, formattedValue);\n\n        this.renderCell();\n    }\n\n    private setTooltipAndCellRendererParams(value: V | null | (() => string), formattedValue: string | null): void {\n        const isTooltipWhenTruncated = this.gos.get('tooltipShowMode') === 'whenTruncated';\n\n        if (this.params.showTooltips && (!isTooltipWhenTruncated || !this.params.cellRenderer)) {\n            const newTooltipText = formattedValue != null ? formattedValue : _toStringOrNull(value);\n            let shouldDisplayTooltip: (() => boolean) | undefined;\n\n            if (isTooltipWhenTruncated) {\n                shouldDisplayTooltip = () => {\n                    const el = this.eCheckbox.getGui().querySelector('.ag-label');\n                    if (!el) {\n                        return true;\n                    } // show label by default\n                    return el.scrollWidth > el.clientWidth;\n                };\n            }\n            this.setTooltip({\n                newTooltipText,\n                location: 'setFilterValue',\n                getColDef: () => this.params.colDef,\n                getColumn: () => this.params.column as AgColumn,\n                shouldDisplayTooltip,\n            });\n        }\n\n        this.cellRendererParams = this.gos.addGridCommonParams({\n            value,\n            valueFormatted: formattedValue,\n            colDef: this.params.colDef,\n            column: this.params.column,\n            setTooltip: (value: string, shouldDisplayTooltip: () => boolean) => {\n                this.setTooltip({\n                    newTooltipText: value,\n                    getColDef: () => this.params.colDef,\n                    getColumn: () => this.params.column as AgColumn,\n                    location: 'setFilterValue',\n                    shouldDisplayTooltip,\n                });\n            },\n        });\n    }\n\n    public override getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'setFilterValue';\n        res.colDef = this.getComponentHolder();\n        if (this.isTree) {\n            (res as ISetFilterTreeListTooltipParams).level = this.depth;\n        }\n        return res;\n    }\n\n    private getFormattedValue(column: AgColumn, value: any) {\n        return this.valueService.formatValue(column, null, value, this.valueFormatter, false);\n    }\n\n    private renderCell(): void {\n        const compDetails = this.userComponentFactory.getSetFilterCellRendererDetails(\n            this.params,\n            this.cellRendererParams\n        );\n        const cellRendererPromise = compDetails ? compDetails.newAgStackInstance() : undefined;\n\n        if (cellRendererPromise == null) {\n            this.renderCellWithoutCellRenderer();\n            return;\n        }\n\n        cellRendererPromise.then((component) => {\n            if (component) {\n                this.cellRendererComponent = component;\n                this.eCheckbox.setLabel(component.getGui());\n                this.destroyCellRendererComponent = () => this.destroyBean(component);\n            }\n        });\n    }\n\n    private renderCellWithoutCellRenderer(): void {\n        let valueToRender =\n            (this.cellRendererParams.valueFormatted == null\n                ? this.cellRendererParams.value\n                : this.cellRendererParams.valueFormatted) ?? this.translate('blanks');\n        if (typeof valueToRender !== 'string') {\n            _warnOnce(\n                `Set Filter Value Formatter must return string values. Please ensure the Set Filter Value Formatter returns string values for complex objects. See ${this.getFrameworkOverrides().getDocLink('filter-set-filter-list/#filter-value-types')}`\n            );\n            valueToRender = '';\n        }\n\n        this.eCheckbox.setLabel(valueToRender);\n        this.setupFixedAriaLabels(valueToRender);\n    }\n\n    public getComponentHolder(): ColDef {\n        return this.params.column.getColDef();\n    }\n}\n", "import type { SetFilterModel } from '@ag-grid-community/core';\n\nimport type { SetFilter } from './setFilter';\n\nexport class SetFilterModelFormatter {\n    public getModelAsString<V>(model: SetFilterModel | null | undefined, setFilter: SetFilter<V>): string {\n        const { values } = model || setFilter.getModel() || {};\n        const valueModel = setFilter.getValueModel();\n\n        if (values == null || valueModel == null) {\n            return '';\n        }\n\n        const availableKeys = values.filter((v) => valueModel.isKeyAvailable(v));\n        const numValues = availableKeys.length;\n\n        const formattedValues = availableKeys.slice(0, 10).map((key) => setFilter.getFormattedValue(key));\n\n        return `(${numValues}) ${formattedValues.join(',')}${numValues > 10 ? ',...' : ''}`;\n    }\n}\n", "import type {\n    AgColumn,\n    AgEventType,\n    FuncColsService,\n    GridOptionsService,\n    IClientSideRowModel,\n    IEventEmitter,\n    IEventListener,\n    RowNode,\n    SetFilterModelValue,\n    SetFilterParams,\n    SetFilterValues,\n    SetFilterValuesFunc,\n    SetFilterValuesFuncParams,\n    TextFormatter,\n    ValueFormatterParams,\n    ValueService,\n} from '@ag-grid-community/core';\nimport {\n    AgPromise,\n    LocalEventService,\n    _defaultComparator,\n    _errorOnce,\n    _exists,\n    _makeNull,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport { ClientSideValuesExtractor } from '../clientSideValueExtractor';\nimport { SetValueModelFilteringKeys } from './filteringKeys';\nimport { FlatSetDisplayValueModel } from './flatSetDisplayValueModel';\nimport type { ISetDisplayValueModel, SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport type { ISetFilterLocaleText } from './localeText';\nimport { TreeSetDisplayValueModel } from './treeSetDisplayValueModel';\n\nexport enum SetFilterModelValuesType {\n    PROVIDED_LIST,\n    PROVIDED_CALLBACK,\n    TAKEN_FROM_GRID_VALUES,\n}\n\nexport interface SetValueModelParams<V> {\n    gos: GridOptionsService;\n    funcColsService: FuncColsService;\n    valueService: ValueService;\n    filterParams: SetFilterParams<any, V>;\n    setIsLoading: (loading: boolean) => void;\n    translate: (key: keyof ISetFilterLocaleText) => string;\n    caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n    createKey: (value: V | null | undefined, node?: RowNode) => string | null;\n    valueFormatter?: (params: ValueFormatterParams) => string;\n    usingComplexObjects?: boolean;\n    treeDataTreeList?: boolean;\n    groupingTreeList?: boolean;\n    addManagedEventListeners: (handlers: Partial<Record<AgEventType, (event?: any) => void>>) => (() => null)[];\n}\n\nexport type SetValueModelEvent = 'availableValuesChanged';\n/** @param V type of value in the Set Filter */\nexport class SetValueModel<V> implements IEventEmitter<SetValueModelEvent> {\n    private readonly gos: GridOptionsService;\n    private readonly localEventService = new LocalEventService<SetValueModelEvent>();\n    private formatter: TextFormatter;\n    private suppressSorting: boolean;\n    private readonly clientSideValuesExtractor: ClientSideValuesExtractor<V>;\n    private readonly doesRowPassOtherFilters: (node: RowNode) => boolean;\n    private readonly keyComparator: (a: string | null, b: string | null) => number;\n    private readonly entryComparator: (a: [string | null, V | null], b: [string | null, V | null]) => number;\n    private readonly compareByValue: boolean;\n    private readonly caseSensitive: boolean;\n    private displayValueModel: ISetDisplayValueModel<V>;\n    private filterParams: SetFilterParams<any, V>;\n    private readonly setIsLoading: (loading: boolean) => void;\n    private readonly translate: (key: keyof ISetFilterLocaleText) => string;\n    private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n    private readonly createKey: (value: V | null | undefined, node?: RowNode) => string | null;\n    private readonly usingComplexObjects: boolean;\n\n    private valuesType: SetFilterModelValuesType;\n    private miniFilterText: string | null = null;\n\n    /** When true, in excelMode = 'windows', it adds previously selected filter items to newly checked filter selection */\n    private addCurrentSelectionToFilter: boolean = false;\n\n    /** Values provided to the filter for use. */\n    private providedValues: SetFilterValues<any, V> | null = null;\n\n    /** Values can be loaded asynchronously, so wait on this promise if you need to ensure values have been loaded. */\n    private allValuesPromise: AgPromise<(string | null)[]>;\n\n    /** All possible values for the filter, sorted if required. */\n    private allValues: Map<string | null, V | null> = new Map();\n\n    /** Remaining keys when filters from other columns have been applied. */\n    private availableKeys = new Set<string | null>();\n\n    /** Keys that have been selected for this filter. */\n    private selectedKeys = new Set<string | null>();\n\n    /**\n     * Here we keep track of the keys that are currently being used for filtering.\n     * In most cases, the filtering keys are the same as the selected keys,\n     * but for the specific case when excelMode = 'windows' and the user has ticked 'Add current selection to filter',\n     * the filtering keys can be different from the selected keys.\n     */\n    private filteringKeys: SetValueModelFilteringKeys;\n\n    private initialised: boolean = false;\n\n    constructor(params: SetValueModelParams<V>) {\n        const {\n            usingComplexObjects,\n            funcColsService,\n            valueService,\n            treeDataTreeList,\n            groupingTreeList,\n            filterParams,\n            gos,\n            valueFormatter,\n            addManagedEventListeners,\n        } = params;\n        const {\n            column,\n            colDef,\n            textFormatter,\n            doesRowPassOtherFilter,\n            suppressSorting,\n            comparator,\n            rowModel,\n            values,\n            caseSensitive,\n            treeList,\n            treeListPathGetter,\n            treeListFormatter,\n        } = filterParams;\n\n        this.filterParams = filterParams;\n        this.gos = gos;\n        this.setIsLoading = params.setIsLoading;\n        this.translate = params.translate;\n        this.caseFormat = params.caseFormat;\n        this.createKey = params.createKey;\n        this.usingComplexObjects = !!params.usingComplexObjects;\n        this.formatter = textFormatter ?? ((value) => value ?? null);\n        this.doesRowPassOtherFilters = doesRowPassOtherFilter;\n        this.suppressSorting = suppressSorting || false;\n        this.filteringKeys = new SetValueModelFilteringKeys({ caseFormat: this.caseFormat });\n        const keyComparator = comparator ?? (colDef.comparator as (a: any, b: any) => number);\n        const treeDataOrGrouping = !!treeDataTreeList || !!groupingTreeList;\n        // If using complex objects and a comparator is provided, sort by values, otherwise need to sort by the string keys.\n        // Also if tree data, grouping, or date with tree list, then need to do value sort\n        this.compareByValue = !!(\n            (usingComplexObjects && keyComparator) ||\n            treeDataOrGrouping ||\n            (treeList && !treeListPathGetter)\n        );\n        if (treeDataOrGrouping && !keyComparator) {\n            this.entryComparator = this.createTreeDataOrGroupingComparator() as any;\n        } else if (treeList && !treeListPathGetter && !keyComparator) {\n            this.entryComparator = (\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_aKey, aValue]: [string | null, V | null],\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_bKey, bValue]: [string | null, V | null]\n            ) => _defaultComparator(aValue, bValue);\n        } else {\n            this.entryComparator = (\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_aKey, aValue]: [string | null, V | null],\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                [_bKey, bValue]: [string | null, V | null]\n            ) => keyComparator(aValue, bValue);\n        }\n        this.keyComparator = (keyComparator as any) ?? _defaultComparator;\n        this.caseSensitive = !!caseSensitive;\n        const getDataPath = gos.get('getDataPath');\n        const groupAllowUnbalanced = gos.get('groupAllowUnbalanced');\n\n        if (rowModel.getType() === 'clientSide') {\n            this.clientSideValuesExtractor = new ClientSideValuesExtractor(\n                rowModel as IClientSideRowModel,\n                this.filterParams,\n                this.createKey,\n                this.caseFormat,\n                funcColsService,\n                valueService,\n                treeDataOrGrouping,\n                !!treeDataTreeList,\n                getDataPath,\n                groupAllowUnbalanced,\n                addManagedEventListeners\n            );\n        }\n\n        if (values == null) {\n            this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n        } else {\n            this.valuesType = Array.isArray(values)\n                ? SetFilterModelValuesType.PROVIDED_LIST\n                : SetFilterModelValuesType.PROVIDED_CALLBACK;\n\n            this.providedValues = values;\n        }\n\n        this.displayValueModel = treeList\n            ? new TreeSetDisplayValueModel(\n                  this.formatter,\n                  treeListPathGetter,\n                  treeListFormatter,\n                  treeDataTreeList || groupingTreeList\n              )\n            : (new FlatSetDisplayValueModel<V>(\n                  valueService,\n                  valueFormatter,\n                  this.formatter,\n                  column as AgColumn\n              ) as any);\n\n        this.updateAllValues().then((updatedKeys) => this.resetSelectionState(updatedKeys || []));\n    }\n\n    public addEventListener<T extends SetValueModelEvent>(\n        eventType: T,\n        listener: IEventListener<T>,\n        async?: boolean\n    ): void {\n        this.localEventService.addEventListener(eventType, listener, async);\n    }\n\n    public removeEventListener<T extends SetValueModelEvent>(\n        eventType: T,\n        listener: IEventListener<T>,\n        async?: boolean\n    ): void {\n        this.localEventService.removeEventListener(eventType, listener, async);\n    }\n\n    public updateOnParamsChange(filterParams: SetFilterParams<any, V>): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            const { values, textFormatter, suppressSorting } = filterParams;\n\n            const currentProvidedValues = this.providedValues;\n            const currentSuppressSorting = this.suppressSorting;\n\n            this.filterParams = filterParams;\n            this.formatter = textFormatter ?? ((value) => value ?? null);\n\n            this.suppressSorting = suppressSorting || false;\n            this.providedValues = values ?? null;\n\n            // Rebuild values when values or their sort order changes\n            if (this.providedValues !== currentProvidedValues || this.suppressSorting !== currentSuppressSorting) {\n                if (!values || values.length === 0) {\n                    this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n                    this.providedValues = null;\n                } else {\n                    this.valuesType = Array.isArray(values)\n                        ? SetFilterModelValuesType.PROVIDED_LIST\n                        : SetFilterModelValuesType.PROVIDED_CALLBACK;\n                }\n\n                const currentModel = this.getModel();\n                this.updateAllValues().then(() => {\n                    this.setModel(currentModel).then(() => resolve());\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Re-fetches the values used in the filter from the value source.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    public refreshValues(): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            // don't get the model until values are resolved, as there could be queued setModel calls\n            this.allValuesPromise.then(() => {\n                const currentModel = this.getModel();\n\n                this.updateAllValues();\n\n                // ensure model is updated for new values\n                this.setModel(currentModel).then(() => resolve());\n            });\n        });\n    }\n\n    /**\n     * Overrides the current values being used for the set filter.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    public overrideValues(valuesToUse: (V | null)[]): AgPromise<void> {\n        return new AgPromise<void>((resolve) => {\n            // wait for any existing values to be populated before overriding\n            this.allValuesPromise.then(() => {\n                this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n                this.providedValues = valuesToUse;\n                this.refreshValues().then(() => resolve());\n            });\n        });\n    }\n\n    /** @return has anything been updated */\n    public refreshAfterAnyFilterChanged(): AgPromise<boolean> {\n        if (this.showAvailableOnly()) {\n            return this.allValuesPromise.then((keys) => {\n                this.updateAvailableKeys(keys ?? [], 'otherFilter');\n                return true;\n            });\n        }\n        return AgPromise.resolve(false);\n    }\n\n    public isInitialised(): boolean {\n        return this.initialised;\n    }\n\n    private updateAllValues(): AgPromise<(string | null)[]> {\n        this.allValuesPromise = new AgPromise<(string | null)[]>((resolve) => {\n            switch (this.valuesType) {\n                case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n                    this.getValuesFromRowsAsync(false).then((values) => resolve(this.processAllValues(values)));\n\n                    break;\n                case SetFilterModelValuesType.PROVIDED_LIST: {\n                    resolve(\n                        this.processAllValues(\n                            this.uniqueValues(this.validateProvidedValues(this.providedValues as (V | null)[]))\n                        )\n                    );\n\n                    break;\n                }\n\n                case SetFilterModelValuesType.PROVIDED_CALLBACK: {\n                    this.setIsLoading(true);\n\n                    const callback = this.providedValues as SetFilterValuesFunc<any, V>;\n                    const { column, colDef } = this.filterParams;\n                    const params: SetFilterValuesFuncParams<any, V> = this.gos.addGridCommonParams({\n                        success: (values) => {\n                            this.setIsLoading(false);\n\n                            resolve(this.processAllValues(this.uniqueValues(this.validateProvidedValues(values))));\n                        },\n                        colDef,\n                        column,\n                    });\n\n                    window.setTimeout(() => callback(params), 0);\n\n                    break;\n                }\n\n                default:\n                    throw new Error('Unrecognised valuesType');\n            }\n        });\n\n        this.allValuesPromise\n            .then((values) => this.updateAvailableKeys(values || [], 'reload'))\n            .then(() => (this.initialised = true));\n\n        return this.allValuesPromise;\n    }\n\n    private processAllValues(values: Map<string | null, V | null> | null): (string | null)[] {\n        const sortedKeys = this.sortKeys(values);\n\n        this.allValues = values ?? new Map();\n\n        return sortedKeys;\n    }\n\n    private validateProvidedValues(values: (V | null)[]): (V | null)[] {\n        if (this.usingComplexObjects && values?.length) {\n            const firstValue = values[0];\n            if (firstValue && typeof firstValue !== 'object' && typeof firstValue !== 'function') {\n                const firstKey = this.createKey(firstValue);\n                if (firstKey == null) {\n                    _warnOnce(\n                        'Set Filter Key Creator is returning null for provided values and provided values are primitives. Please provide complex objects. See https://www.ag-grid.com/javascript-data-grid/filter-set-filter-list/#filter-value-types'\n                    );\n                } else {\n                    _warnOnce(\n                        'Set Filter has a Key Creator, but provided values are primitives. Did you mean to provide complex objects?'\n                    );\n                }\n            }\n        }\n        return values;\n    }\n\n    public setValuesType(value: SetFilterModelValuesType) {\n        this.valuesType = value;\n    }\n\n    public getValuesType(): SetFilterModelValuesType {\n        return this.valuesType;\n    }\n\n    public isKeyAvailable(key: string | null): boolean {\n        return this.availableKeys.has(key);\n    }\n\n    private showAvailableOnly(): boolean {\n        return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    }\n\n    private updateAvailableKeys(allKeys: (string | null)[], source: 'reload' | 'otherFilter'): void {\n        const availableKeys = this.showAvailableOnly() ? this.sortKeys(this.getValuesFromRows(true)) : allKeys;\n\n        this.availableKeys = new Set(availableKeys);\n        this.localEventService.dispatchEvent({ type: 'availableValuesChanged' });\n\n        this.updateDisplayedValues(source, allKeys);\n    }\n\n    public sortKeys(nullableValues: Map<string | null, V | null> | null): (string | null)[] {\n        const values = nullableValues ?? new Map();\n\n        if (this.suppressSorting) {\n            return Array.from(values.keys());\n        }\n\n        let sortedKeys;\n        if (this.compareByValue) {\n            sortedKeys = Array.from(values.entries())\n                .sort(this.entryComparator)\n                .map(([key]) => key);\n        } else {\n            sortedKeys = Array.from(values.keys()).sort(this.keyComparator);\n        }\n\n        if (this.filterParams.excelMode && values.has(null)) {\n            // ensure the blank value always appears last\n            sortedKeys = sortedKeys.filter((v) => v != null);\n            sortedKeys.push(null);\n        }\n\n        return sortedKeys;\n    }\n\n    private getParamsForValuesFromRows(removeUnavailableValues = false): {\n        predicate: (node: RowNode) => boolean;\n        existingValues?: Map<string | null, V | null>;\n    } | null {\n        if (!this.clientSideValuesExtractor) {\n            _errorOnce(\n                'Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values'\n            );\n            return null;\n        }\n\n        const predicate = (node: RowNode) => !removeUnavailableValues || this.doesRowPassOtherFilters(node);\n\n        const existingValues = removeUnavailableValues && !this.caseSensitive ? this.allValues : undefined;\n\n        return { predicate, existingValues };\n    }\n\n    private getValuesFromRows(removeUnavailableValues = false): Map<string | null, V | null> | null {\n        const params = this.getParamsForValuesFromRows(removeUnavailableValues);\n        if (!params) {\n            return null;\n        }\n\n        return this.clientSideValuesExtractor.extractUniqueValues(params.predicate, params.existingValues);\n    }\n\n    private getValuesFromRowsAsync(removeUnavailableValues = false): AgPromise<Map<string | null, V | null> | null> {\n        const params = this.getParamsForValuesFromRows(removeUnavailableValues);\n        if (!params) {\n            return AgPromise.resolve(null);\n        }\n\n        return this.clientSideValuesExtractor.extractUniqueValuesAsync(params.predicate, params.existingValues);\n    }\n\n    /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n    public setMiniFilter(value?: string | null): boolean {\n        value = _makeNull(value);\n\n        if (this.miniFilterText === value) {\n            //do nothing if filter has not changed\n            return false;\n        }\n\n        if (value === null) {\n            // Reset 'Add current selection to filter' checkbox when clearing mini filter\n            this.setAddCurrentSelectionToFilter(false);\n        }\n\n        this.miniFilterText = value;\n        this.updateDisplayedValues('miniFilter');\n\n        return true;\n    }\n\n    public getMiniFilter(): string | null {\n        return this.miniFilterText;\n    }\n\n    public updateDisplayedValues(\n        source: 'reload' | 'otherFilter' | 'miniFilter' | 'expansion',\n        allKeys?: (string | null)[]\n    ): void {\n        if (source === 'expansion') {\n            this.displayValueModel.refresh();\n            return;\n        }\n\n        // if no filter, just display all available values\n        if (this.miniFilterText == null) {\n            this.displayValueModel.updateDisplayedValuesToAllAvailable(\n                (key: string | null) => this.getValue(key),\n                allKeys,\n                this.availableKeys,\n                source\n            );\n            return;\n        }\n\n        // if filter present, we filter down the list\n        // to allow for case insensitive searches, upper-case both filter text and value\n        const formattedFilterText = this.caseFormat(this.formatter(this.miniFilterText) || '');\n\n        const matchesFilter = (valueToCheck: string | null): boolean =>\n            valueToCheck != null && this.caseFormat(valueToCheck).indexOf(formattedFilterText) >= 0;\n\n        const nullMatchesFilter = !!this.filterParams.excelMode && matchesFilter(this.translate('blanks'));\n\n        this.displayValueModel.updateDisplayedValuesToMatchMiniFilter(\n            (key: string | null) => this.getValue(key),\n            allKeys,\n            this.availableKeys,\n            matchesFilter,\n            nullMatchesFilter,\n            source\n        );\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.displayValueModel.getDisplayedValueCount();\n    }\n\n    public getDisplayedItem(index: number): string | SetFilterModelTreeItem | null {\n        return this.displayValueModel.getDisplayedItem(index);\n    }\n\n    public getSelectAllItem(): string | SetFilterModelTreeItem {\n        return this.displayValueModel.getSelectAllItem();\n    }\n\n    public getAddSelectionToFilterItem(): string | SetFilterModelTreeItem {\n        return this.displayValueModel.getAddSelectionToFilterItem();\n    }\n\n    public hasSelections(): boolean {\n        return this.filterParams.defaultToNothingSelected\n            ? this.selectedKeys.size > 0\n            : this.allValues.size !== this.selectedKeys.size;\n    }\n\n    public getKeys(): SetFilterModelValue {\n        return Array.from(this.allValues.keys());\n    }\n\n    public getValues(): (V | null)[] {\n        return Array.from(this.allValues.values());\n    }\n\n    public getValue(key: string | null): V | null {\n        return this.allValues.get(key)!;\n    }\n\n    public setAddCurrentSelectionToFilter(value: boolean) {\n        this.addCurrentSelectionToFilter = value;\n    }\n\n    private isInWindowsExcelMode(): boolean {\n        return this.filterParams.excelMode === 'windows';\n    }\n\n    public isAddCurrentSelectionToFilterChecked(): boolean {\n        return this.isInWindowsExcelMode() && this.addCurrentSelectionToFilter;\n    }\n\n    public showAddCurrentSelectionToFilter(): boolean {\n        // We only show the 'Add current selection to filter' option\n        // when excel mode is enabled with 'windows' mode\n        // and when the users types a value in the mini filter.\n        return this.isInWindowsExcelMode() && _exists(this.miniFilterText) && this.miniFilterText.length > 0;\n    }\n\n    public selectAllMatchingMiniFilter(clearExistingSelection = false): void {\n        if (this.miniFilterText == null) {\n            // ensure everything is selected\n            this.selectedKeys = new Set(this.allValues.keys());\n        } else {\n            // ensure everything that matches the mini filter is selected\n            if (clearExistingSelection) {\n                this.selectedKeys.clear();\n            }\n\n            this.displayValueModel.forEachDisplayedKey((key) => this.selectedKeys.add(key));\n        }\n    }\n\n    public deselectAllMatchingMiniFilter(): void {\n        if (this.miniFilterText == null) {\n            // ensure everything is deselected\n            this.selectedKeys.clear();\n        } else {\n            // ensure everything that matches the mini filter is deselected\n            this.displayValueModel.forEachDisplayedKey((key) => this.selectedKeys.delete(key));\n        }\n    }\n\n    public selectKey(key: string | null): void {\n        this.selectedKeys.add(key);\n    }\n\n    public deselectKey(key: string | null): void {\n        if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n            // ensure we're starting from the correct \"everything selected\" state\n            this.resetSelectionState(this.displayValueModel.getDisplayedKeys());\n        }\n\n        this.selectedKeys.delete(key);\n    }\n\n    public isKeySelected(key: string | null): boolean {\n        return this.selectedKeys.has(key);\n    }\n\n    public isEverythingVisibleSelected(): boolean {\n        return !this.displayValueModel.someDisplayedKey((it) => !this.isKeySelected(it));\n    }\n\n    public isNothingVisibleSelected(): boolean {\n        return !this.displayValueModel.someDisplayedKey((it) => this.isKeySelected(it));\n    }\n\n    public getModel(): SetFilterModelValue | null {\n        if (!this.hasSelections()) {\n            return null;\n        }\n\n        // When excelMode = 'windows' and the user has ticked 'Add current selection to filter'\n        // the filtering keys can be different from the selected keys, and they should be included\n        // in the model.\n        const filteringKeys = this.isAddCurrentSelectionToFilterChecked()\n            ? this.filteringKeys.allFilteringKeys()\n            : null;\n\n        if (filteringKeys && filteringKeys.size > 0) {\n            if (this.selectedKeys) {\n                // When existing filtering keys are present along with selected keys,\n                // we combine them and return the result.\n                // We use a set structure to avoid duplicates\n                const modelKeys = new Set<string | null>([\n                    ...Array.from(filteringKeys),\n                    ...Array.from(this.selectedKeys).filter((key) => !filteringKeys.has(key)),\n                ]);\n                return Array.from(modelKeys);\n            }\n\n            return Array.from(filteringKeys);\n        }\n\n        // No extra filtering keys are present - so just return the selected keys\n        return Array.from(this.selectedKeys);\n    }\n\n    public setModel(model: SetFilterModelValue | null): AgPromise<void> {\n        return this.allValuesPromise.then((keys) => {\n            if (model == null) {\n                this.resetSelectionState(keys ?? []);\n            } else {\n                // select all values from the model that exist in the filter\n                this.selectedKeys.clear();\n\n                const existingFormattedKeys: Map<string | null, string | null> = new Map();\n                this.allValues.forEach((_value, key) => {\n                    existingFormattedKeys.set(this.caseFormat(key), key);\n                });\n\n                model.forEach((unformattedKey) => {\n                    const formattedKey = this.caseFormat(_makeNull(unformattedKey));\n                    const existingUnformattedKey = existingFormattedKeys.get(formattedKey);\n                    if (existingUnformattedKey !== undefined) {\n                        this.selectKey(existingUnformattedKey);\n                    }\n                });\n            }\n        });\n    }\n\n    private uniqueValues(values: (V | null)[] | null): Map<string | null, V | null> {\n        const uniqueValues: Map<string | null, V | null> = new Map();\n        const formattedKeys: Set<string | null> = new Set();\n        (values ?? []).forEach((value) => {\n            const valueToUse = _makeNull(value);\n            const unformattedKey = this.createKey(valueToUse);\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                uniqueValues.set(unformattedKey, valueToUse);\n            }\n        });\n\n        return uniqueValues;\n    }\n\n    private resetSelectionState(keys: (string | null)[]): void {\n        if (this.filterParams.defaultToNothingSelected) {\n            this.selectedKeys.clear();\n        } else {\n            this.selectedKeys = new Set(keys);\n        }\n    }\n\n    public hasGroups(): boolean {\n        return this.displayValueModel.hasGroups();\n    }\n\n    private createTreeDataOrGroupingComparator(): (\n        a: [string | null, string[] | null],\n        b: [string | null, string[] | null]\n    ) => number {\n        return (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            [_aKey, aValue]: [string | null, string[] | null],\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            [_bKey, bValue]: [string | null, string[] | null]\n        ) => {\n            if (aValue == null) {\n                return bValue == null ? 0 : -1;\n            } else if (bValue == null) {\n                return 1;\n            }\n            for (let i = 0; i < aValue.length; i++) {\n                if (i >= bValue.length) {\n                    return 1;\n                }\n                const diff = _defaultComparator(aValue[i], bValue[i]);\n                if (diff !== 0) {\n                    return diff;\n                }\n            }\n            return 0;\n        };\n    }\n\n    public setAppliedModelKeys(appliedModelKeys: Set<string | null> | null): void {\n        this.filteringKeys.setFilteringKeys(appliedModelKeys);\n    }\n\n    public addToAppliedModelKeys(appliedModelKey: string | null): void {\n        this.filteringKeys.addFilteringKey(appliedModelKey);\n    }\n\n    public getAppliedModelKeys(): Set<string | null> | null {\n        return this.filteringKeys.allFilteringKeys();\n    }\n\n    public getCaseFormattedAppliedModelKeys(): Set<string | null> | null {\n        return this.filteringKeys.allFilteringKeysCaseFormatted();\n    }\n\n    public hasAppliedModelKey(appliedModelKey: string | null): boolean {\n        return this.filteringKeys.hasCaseFormattedFilteringKey(appliedModelKey);\n    }\n\n    public hasAnyAppliedModelKey(): boolean {\n        return !this.filteringKeys.noAppliedFilteringKeys();\n    }\n}\n", "import type {\n    AgColumn,\n    AgEventType,\n    FuncColsService,\n    GetDataPath,\n    IClientSideRowModel,\n    RowNode,\n    SetFilterParams,\n    ValueService,\n} from '@ag-grid-community/core';\nimport { AgPromise, _makeNull, _toStringOrNull } from '@ag-grid-community/core';\n\n/** @param V type of value in the Set Filter */\nexport class ClientSideValuesExtractor<V> {\n    constructor(\n        private readonly rowModel: IClientSideRowModel,\n        private readonly filterParams: SetFilterParams<any, V>,\n        private readonly createKey: (value: V | null | undefined, node?: RowNode) => string | null,\n        private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat,\n        private readonly funcColsService: FuncColsService,\n        private readonly valueService: ValueService,\n        private readonly treeDataOrGrouping: boolean,\n        private readonly treeData: boolean,\n        private readonly getDataPath: GetDataPath | undefined,\n        private readonly groupAllowUnbalanced: boolean,\n        private readonly addManagedEventListeners: (\n            handlers: Partial<Record<AgEventType, (event?: any) => void>>\n        ) => (() => null)[]\n    ) {}\n\n    public extractUniqueValuesAsync(\n        predicate: (node: RowNode) => boolean,\n        existingValues?: Map<string | null, V | null>\n    ): AgPromise<Map<string | null, V | null>> {\n        return new AgPromise((resolve) => {\n            if (this.rowModel.isRowDataLoaded()) {\n                resolve(this.extractUniqueValues(predicate, existingValues));\n            } else {\n                const [destroyFunc] = this.addManagedEventListeners({\n                    rowCountReady: () => {\n                        destroyFunc?.();\n                        resolve(this.extractUniqueValues(predicate, existingValues));\n                    },\n                });\n            }\n        });\n    }\n\n    public extractUniqueValues(\n        predicate: (node: RowNode) => boolean,\n        existingValues?: Map<string | null, V | null>\n    ): Map<string | null, V | null> {\n        const values: Map<string | null, V | null> = new Map();\n        const existingFormattedKeys = this.extractExistingFormattedKeys(existingValues);\n        const formattedKeys: Set<string | null> = new Set();\n        const treeData = this.treeData && !!this.getDataPath;\n        const groupedCols = this.funcColsService.getRowGroupColumns();\n\n        const addValue = (unformattedKey: string | null, value: V | null | undefined) => {\n            const formattedKey = this.caseFormat(unformattedKey);\n            if (!formattedKeys.has(formattedKey)) {\n                formattedKeys.add(formattedKey);\n                let keyToAdd = unformattedKey;\n                let valueToAdd = _makeNull(value);\n                // when case insensitive, we pick the first value to use. if this is later filtered out,\n                // we still want to use the original value and not one with a different case\n                const existingUnformattedKey = existingFormattedKeys?.get(formattedKey);\n                if (existingUnformattedKey != null) {\n                    keyToAdd = existingUnformattedKey;\n                    valueToAdd = existingValues!.get(existingUnformattedKey)!;\n                }\n                values.set(keyToAdd, valueToAdd);\n            }\n        };\n\n        this.rowModel.forEachLeafNode((node) => {\n            // only pull values from rows that have data. this means we skip filler group nodes.\n            if (!node.data || !predicate(node)) {\n                return;\n            }\n            if (this.treeDataOrGrouping) {\n                this.addValueForTreeDataOrGrouping(node, treeData, groupedCols, addValue);\n                return;\n            }\n\n            const value = this.getValue(node);\n\n            if (value != null && Array.isArray(value)) {\n                value.forEach((x) => {\n                    addValue(this.createKey(x, node), x);\n                });\n                if (value.length === 0) {\n                    addValue(null, null);\n                }\n            } else {\n                addValue(this.createKey(value, node), value);\n            }\n        });\n\n        return values;\n    }\n\n    private addValueForTreeDataOrGrouping(\n        node: RowNode,\n        treeData: boolean,\n        groupedCols: AgColumn[],\n        addValue: (unformattedKey: string | null, value: V | null) => void\n    ): void {\n        let dataPath: string[] | null;\n        if (treeData) {\n            if (node.childrenAfterGroup?.length) {\n                return;\n            }\n            dataPath = this.getDataPath!(node.data);\n        } else {\n            dataPath = groupedCols.map((groupCol) => this.valueService.getKeyForNode(groupCol, node));\n            dataPath.push(this.getValue(node) as any);\n        }\n        if (dataPath) {\n            dataPath = dataPath.map((treeKey) => _toStringOrNull(_makeNull(treeKey))) as any;\n        }\n        if (!treeData && this.groupAllowUnbalanced && dataPath?.some((treeKey) => treeKey == null)) {\n            dataPath = dataPath.filter((treeKey) => treeKey != null);\n        }\n        addValue(this.createKey(dataPath as any), dataPath as any);\n    }\n\n    private getValue(node: RowNode): V | null | undefined {\n        return this.filterParams.getValue(node);\n    }\n\n    private extractExistingFormattedKeys(\n        existingValues?: Map<string | null, V | null>\n    ): Map<string | null, string | null> | null {\n        if (!existingValues) {\n            return null;\n        }\n        const existingFormattedKeys: Map<string | null, string | null> = new Map();\n        existingValues.forEach((_value, key) => {\n            existingFormattedKeys.set(this.caseFormat(key), key);\n        });\n        return existingFormattedKeys;\n    }\n}\n", "export class SetValueModelFilteringKeys {\n    // To make the filtering fast, we store the keys in a Set rather than using the default array.\n    private filteringKeys: Set<string | null> | null = null;\n\n    // This attribute contains keys that are actually used for filtering.\n    // These keys take into account case sensitivity:\n    // - When filtering is case-insensitive, all filtering keys are converted to upper case and stored here.\n    // - When filtering is case-sensitive, this is the same as filteringKeys.\n    private filteringKeysCaseFormatted: Set<string | null> | null = null;\n\n    private hasNoAppliedFilteringKeys: boolean = false;\n\n    // Function responsible for formatting the filtering keys.\n    private readonly caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat;\n\n    constructor({ caseFormat }: { caseFormat: <T extends string | null>(valueToFormat: T) => typeof valueToFormat }) {\n        this.caseFormat = caseFormat;\n    }\n\n    public allFilteringKeys(): Set<string | null> | null {\n        return this.filteringKeys;\n    }\n\n    public allFilteringKeysCaseFormatted(): Set<string | null> | null {\n        return this.filteringKeysCaseFormatted;\n    }\n\n    public noAppliedFilteringKeys(): boolean {\n        return this.hasNoAppliedFilteringKeys;\n    }\n\n    public setFilteringKeys(filteringKeys: Set<string | null> | null): void {\n        this.filteringKeys = new Set(filteringKeys);\n        this.hasNoAppliedFilteringKeys = !this.filteringKeys || this.filteringKeys.size === 0;\n\n        this.filteringKeysCaseFormatted = new Set<string | null>();\n        this.filteringKeys.forEach((key) => this.filteringKeysCaseFormatted!.add(this.caseFormat(key)));\n    }\n\n    public addFilteringKey(key: string | null): void {\n        if (this.filteringKeys == null) {\n            this.filteringKeys = new Set<string | null>();\n            this.filteringKeysCaseFormatted = new Set<string | null>();\n        }\n\n        this.filteringKeys.add(key);\n        this.filteringKeysCaseFormatted!.add(this.caseFormat(key));\n\n        if (this.hasNoAppliedFilteringKeys) {\n            this.hasNoAppliedFilteringKeys = false;\n        }\n    }\n\n    public hasCaseFormattedFilteringKey(key: string | null): boolean {\n        return this.filteringKeysCaseFormatted!.has(this.caseFormat(key));\n    }\n\n    public hasFilteringKey(key: string | null): boolean {\n        return this.filteringKeys!.has(key);\n    }\n\n    public reset() {\n        this.filteringKeys = null;\n        this.filteringKeysCaseFormatted = null;\n        this.hasNoAppliedFilteringKeys = false;\n    }\n}\n", "import type { AgColumn, TextFormatter, ValueFormatterParams, ValueService } from '@ag-grid-community/core';\n\nimport type { ISetDisplayValueModel } from './iSetDisplayValueModel';\nimport { SetFilterDisplayValue } from './iSetDisplayValueModel';\n\nexport class FlatSetDisplayValueModel<V> implements ISetDisplayValueModel<V> {\n    /** All keys that are currently displayed, after the mini-filter has been applied. */\n    private displayedKeys: (string | null)[] = [];\n\n    constructor(\n        private readonly valueService: ValueService,\n        private readonly valueFormatter: ((params: ValueFormatterParams) => string) | undefined,\n        private readonly formatter: TextFormatter,\n        private readonly column: AgColumn\n    ) {}\n\n    public updateDisplayedValuesToAllAvailable(\n        _getValue: (key: string | null) => V | null,\n        _allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>\n    ): void {\n        this.displayedKeys = Array.from(availableKeys);\n    }\n\n    public updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        _allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean\n    ): void {\n        this.displayedKeys = [];\n\n        for (const key of availableKeys) {\n            if (key == null) {\n                if (nullMatchesFilter) {\n                    this.displayedKeys.push(key);\n                }\n            } else {\n                const value = getValue(key);\n                const valueFormatterValue = this.valueService.formatValue(\n                    this.column,\n                    null,\n                    value,\n                    this.valueFormatter,\n                    false\n                );\n\n                const textFormatterValue = this.formatter(valueFormatterValue);\n\n                if (matchesFilter(textFormatterValue)) {\n                    this.displayedKeys.push(key);\n                }\n            }\n        }\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.displayedKeys.length;\n    }\n\n    public getDisplayedItem(index: number): string | null {\n        return this.displayedKeys[index];\n    }\n\n    getSelectAllItem(): string {\n        return SetFilterDisplayValue.SELECT_ALL;\n    }\n\n    getAddSelectionToFilterItem(): string {\n        return SetFilterDisplayValue.ADD_SELECTION_TO_FILTER;\n    }\n\n    public getDisplayedKeys(): (string | null)[] {\n        return this.displayedKeys;\n    }\n\n    public forEachDisplayedKey(func: (key: string | null) => void): void {\n        this.displayedKeys.forEach(func);\n    }\n\n    public someDisplayedKey(func: (key: string | null) => boolean): boolean {\n        return this.displayedKeys.some(func);\n    }\n\n    public hasGroups(): boolean {\n        return false;\n    }\n\n    public refresh(): void {\n        // not used\n    }\n}\n", "import type { TextFormatter } from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\n\nimport type { ISetDisplayValueModel, SetFilterModelTreeItem } from './iSetDisplayValueModel';\nimport { SetFilterDisplayValue } from './iSetDisplayValueModel';\n\nconst DATE_TREE_LIST_PATH_GETTER = (date: Date | null) =>\n    date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;\nexport class TreeSetDisplayValueModel<V> implements ISetDisplayValueModel<V> {\n    /** all displayed items in a tree structure */\n    private allDisplayedItemsTree: SetFilterModelTreeItem[] = [];\n    /** all displayed items flattened and filtered */\n    private activeDisplayedItemsFlat: SetFilterModelTreeItem[] = [];\n\n    private groupsExist: boolean;\n\n    private readonly selectAllItem: SetFilterModelTreeItem = {\n        depth: 0,\n        filterPasses: true,\n        available: true,\n        treeKey: SetFilterDisplayValue.SELECT_ALL,\n        children: this.allDisplayedItemsTree,\n        expanded: true,\n        key: SetFilterDisplayValue.SELECT_ALL,\n        parentTreeKeys: [],\n    };\n\n    private readonly addSelectionToFilterItem: SetFilterModelTreeItem = {\n        depth: 0,\n        filterPasses: true,\n        available: true,\n        treeKey: SetFilterDisplayValue.ADD_SELECTION_TO_FILTER,\n        expanded: true,\n        key: SetFilterDisplayValue.ADD_SELECTION_TO_FILTER,\n        parentTreeKeys: [],\n    };\n\n    constructor(\n        private readonly formatter: TextFormatter,\n        private readonly treeListPathGetter?: (value: V | null) => string[] | null,\n        private readonly treeListFormatter?: (\n            pathKey: string | null,\n            level: number,\n            parentPathKeys: (string | null)[]\n        ) => string,\n        private readonly treeDataOrGrouping?: boolean\n    ) {}\n\n    public updateDisplayedValuesToAllAvailable(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys!, availableKeys);\n        } else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n            this.updateExpandAll();\n        } else if (source === 'miniFilter') {\n            this.resetFilter();\n            this.updateExpandAll();\n        }\n\n        this.flattenItems();\n    }\n\n    public updateDisplayedValuesToMatchMiniFilter(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null> | undefined,\n        availableKeys: Set<string | null>,\n        matchesFilter: (valueToCheck: string | null) => boolean,\n        nullMatchesFilter: boolean,\n        source: 'reload' | 'otherFilter' | 'miniFilter'\n    ): void {\n        if (source === 'reload') {\n            this.generateItemTree(getValue, allKeys!, availableKeys);\n        } else if (source === 'otherFilter') {\n            this.updateAvailable(availableKeys);\n        }\n\n        this.updateFilter(matchesFilter, nullMatchesFilter);\n        this.updateExpandAll();\n\n        this.flattenItems();\n    }\n\n    private generateItemTree(\n        getValue: (key: string | null) => V | null,\n        allKeys: Iterable<string | null>,\n        availableKeys: Set<string | null>\n    ): void {\n        this.allDisplayedItemsTree = [];\n        this.groupsExist = false;\n\n        const treeListPathGetter = this.getTreeListPathGetter(getValue, availableKeys);\n        for (const key of allKeys) {\n            const value = getValue(key)!;\n            const dataPath = treeListPathGetter(value) ?? [null];\n            if (dataPath.length > 1) {\n                this.groupsExist = true;\n            }\n            const available = availableKeys.has(key);\n            let children: SetFilterModelTreeItem[] | undefined = this.allDisplayedItemsTree;\n            let item: SetFilterModelTreeItem | undefined;\n            let parentTreeKeys: (string | null)[] = [];\n            dataPath.forEach((treeKey: string | null, depth: number) => {\n                if (!children) {\n                    children = [];\n                    item!.children = children;\n                }\n                item = children.find((child) => child.treeKey?.toUpperCase() === treeKey?.toUpperCase());\n                if (!item) {\n                    item = { treeKey, depth, filterPasses: true, expanded: false, available, parentTreeKeys };\n                    if (depth === dataPath.length - 1) {\n                        item.key = key;\n                    }\n                    children.push(item);\n                }\n                children = item.children;\n                parentTreeKeys = [...parentTreeKeys, treeKey];\n            });\n        }\n        // update the parent availability based on the children\n        this.updateAvailable(availableKeys);\n\n        this.selectAllItem.children = this.allDisplayedItemsTree;\n        this.selectAllItem.expanded = false;\n    }\n\n    private getTreeListPathGetter(\n        getValue: (key: string | null) => V | null,\n        availableKeys: Set<string | null>\n    ): (value: V | null) => string[] | null {\n        if (this.treeListPathGetter) {\n            return this.treeListPathGetter;\n        }\n        if (this.treeDataOrGrouping) {\n            return (value) => value as any;\n        }\n        // infer from data\n        let isDate = false;\n        for (const availableKey of availableKeys) {\n            // find the first non-null value\n            const value = getValue(availableKey);\n            if (value instanceof Date) {\n                isDate = true;\n                break;\n            } else if (value != null) {\n                break;\n            }\n        }\n        if (isDate) {\n            return DATE_TREE_LIST_PATH_GETTER as any;\n        }\n        _warnOnce(\n            'property treeList=true for Set Filter params, but you did not provide a treeListPathGetter or values of type Date.'\n        );\n        return (value) => [String(value)];\n    }\n\n    private flattenItems(): void {\n        this.activeDisplayedItemsFlat = [];\n        const recursivelyFlattenDisplayedItems = (items: SetFilterModelTreeItem[]) => {\n            items.forEach((item) => {\n                if (!item.filterPasses || !item.available) {\n                    return;\n                }\n                this.activeDisplayedItemsFlat.push(item);\n                if (item.children && item.expanded) {\n                    recursivelyFlattenDisplayedItems(item.children);\n                }\n            });\n        };\n        recursivelyFlattenDisplayedItems(this.allDisplayedItemsTree);\n    }\n\n    private resetFilter(): void {\n        const recursiveFilterReset = (item: SetFilterModelTreeItem) => {\n            if (item.children) {\n                item.children.forEach((child) => {\n                    recursiveFilterReset(child);\n                });\n            }\n\n            item.filterPasses = true;\n        };\n\n        this.allDisplayedItemsTree.forEach((item) => recursiveFilterReset(item));\n    }\n\n    private updateFilter(matchesFilter: (valueToCheck: string | null) => boolean, nullMatchesFilter: boolean): void {\n        const passesFilter = (item: SetFilterModelTreeItem) => {\n            if (!item.available) {\n                return false;\n            }\n            if (item.treeKey == null) {\n                return nullMatchesFilter;\n            }\n\n            return matchesFilter(\n                this.formatter(\n                    this.treeListFormatter\n                        ? this.treeListFormatter(item.treeKey, item.depth, item.parentTreeKeys)\n                        : item.treeKey\n                )\n            );\n        };\n\n        this.allDisplayedItemsTree.forEach((item) =>\n            this.recursiveItemCheck(item, false, passesFilter, 'filterPasses')\n        );\n    }\n\n    public getDisplayedValueCount(): number {\n        return this.activeDisplayedItemsFlat.length;\n    }\n\n    public getDisplayedItem(index: number): SetFilterModelTreeItem | null {\n        return this.activeDisplayedItemsFlat[index];\n    }\n\n    public getSelectAllItem(): SetFilterModelTreeItem {\n        return this.selectAllItem;\n    }\n\n    public getAddSelectionToFilterItem(): string | SetFilterModelTreeItem {\n        return this.addSelectionToFilterItem;\n    }\n\n    public getDisplayedKeys(): (string | null)[] {\n        const displayedKeys: (string | null)[] = [];\n        this.forEachDisplayedKey((key) => displayedKeys.push(key));\n        return displayedKeys;\n    }\n\n    public forEachDisplayedKey(func: (key: string | null) => void): void {\n        const recursiveForEachItem = (item: SetFilterModelTreeItem, topParentExpanded: boolean) => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    item.children.forEach((child) => {\n                        if (child.filterPasses) {\n                            recursiveForEachItem(child, false);\n                        }\n                    });\n                }\n            } else {\n                func(item.key!);\n            }\n        };\n\n        this.activeDisplayedItemsFlat.forEach((item) => recursiveForEachItem(item, true));\n    }\n\n    public someDisplayedKey(func: (key: string | null) => boolean): boolean {\n        const recursiveSomeItem = (item: SetFilterModelTreeItem, topParentExpanded: boolean): boolean => {\n            if (item.children) {\n                if (!item.expanded || !topParentExpanded) {\n                    // if the parent is not expanded, we need to iterate the entire tree\n                    return item.children.some((child) => {\n                        if (child.filterPasses) {\n                            return recursiveSomeItem(child, false);\n                        }\n                        return false;\n                    });\n                }\n            } else {\n                return func(item.key!);\n            }\n            return false;\n        };\n\n        return this.activeDisplayedItemsFlat.some((item) => recursiveSomeItem(item, true));\n    }\n\n    public hasGroups(): boolean {\n        return this.groupsExist;\n    }\n\n    public refresh(): void {\n        this.updateExpandAll();\n        this.flattenItems();\n    }\n\n    private updateExpandAll(): void {\n        const recursiveExpansionCheck = (\n            items: SetFilterModelTreeItem[],\n            someTrue: boolean,\n            someFalse: boolean\n        ): boolean | undefined => {\n            for (const item of items) {\n                if (!item.filterPasses || !item.available || !item.children) {\n                    continue;\n                }\n                // indeterminate state only exists for expand all, so don't need to check for the current item\n                someTrue = someTrue || !!item.expanded;\n                someFalse = someFalse || !item.expanded;\n                if (someTrue && someFalse) {\n                    // already indeterminate. No need to check the children\n                    return undefined;\n                }\n                const childExpanded = recursiveExpansionCheck(item.children, someTrue, someFalse);\n                if (childExpanded === undefined) {\n                    return undefined;\n                } else if (childExpanded) {\n                    someTrue = true;\n                } else {\n                    someFalse = true;\n                }\n            }\n            return someTrue && someFalse ? undefined : someTrue;\n        };\n\n        const item = this.getSelectAllItem();\n        item.expanded = recursiveExpansionCheck(item.children!, false, false);\n    }\n\n    private recursiveItemCheck(\n        item: SetFilterModelTreeItem,\n        parentPasses: boolean,\n        checkFunction: (item: SetFilterModelTreeItem) => boolean,\n        itemProp: 'filterPasses' | 'available'\n    ): boolean {\n        let atLeastOneChildPassed = false;\n        if (item.children) {\n            item.children.forEach((child) => {\n                const childPasses = this.recursiveItemCheck(\n                    child,\n                    parentPasses || checkFunction(item),\n                    checkFunction,\n                    itemProp\n                );\n                atLeastOneChildPassed = atLeastOneChildPassed || childPasses;\n            });\n        }\n\n        const itemPasses = parentPasses || atLeastOneChildPassed || checkFunction(item);\n        item[itemProp] = itemPasses;\n        return itemPasses;\n    }\n\n    private updateAvailable(availableKeys: Set<string | null>) {\n        const isAvailable = (item: SetFilterModelTreeItem) => availableKeys.has(item.key!);\n\n        this.allDisplayedItemsTree.forEach((item) => this.recursiveItemCheck(item, false, isAvailable, 'available'));\n    }\n}\n", "import type {\n    AgColumn,\n    AgInputTextField,\n    BeanCollection,\n    ColumnNameService,\n    IFloatingFilter,\n    IFloatingFilterParams,\n    SetFilterModel,\n} from '@ag-grid-community/core';\nimport { AgInputTextFieldSelector, Component, RefPlaceholder } from '@ag-grid-community/core';\n\nimport { SetFilter } from './setFilter';\nimport { SetFilterModelFormatter } from './setFilterModelFormatter';\n\nexport class SetFloatingFilterComp<V = string> extends Component implements IFloatingFilter {\n    private columnNameService: ColumnNameService;\n    private readonly eFloatingFilterText: AgInputTextField = RefPlaceholder;\n\n    public wireBeans(beans: BeanCollection) {\n        this.columnNameService = beans.columnNameService;\n    }\n\n    private params: IFloatingFilterParams;\n    private availableValuesListenerAdded = false;\n    private readonly filterModelFormatter = new SetFilterModelFormatter();\n\n    constructor() {\n        super(\n            /* html */ `\n            <div class=\"ag-floating-filter-input ag-set-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field data-ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`,\n            [AgInputTextFieldSelector]\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n\n        this.eFloatingFilterText.setDisabled(true).addGuiEventListener('click', () => this.params.showParentFilter());\n\n        this.setParams(params);\n    }\n\n    private setParams(params: IFloatingFilterParams): void {\n        const displayName = this.columnNameService.getDisplayNameForColumn(params.column as AgColumn, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFloatingFilterText.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    public onParamsUpdated(params: IFloatingFilterParams): void {\n        this.refresh(params);\n    }\n\n    public refresh(params: IFloatingFilterParams): void {\n        this.params = params;\n        this.setParams(params);\n    }\n\n    public onParentModelChanged(parentModel: SetFilterModel): void {\n        this.updateFloatingFilterText(parentModel);\n    }\n\n    private parentSetFilterInstance(cb: (instance: SetFilter<V>) => void): void {\n        this.params.parentFilterInstance((filter) => {\n            if (!(filter instanceof SetFilter)) {\n                throw new Error('AG Grid - SetFloatingFilter expects SetFilter as its parent');\n            }\n\n            cb(filter);\n        });\n    }\n\n    private addAvailableValuesListener(): void {\n        this.parentSetFilterInstance((setFilter) => {\n            const setValueModel = setFilter.getValueModel();\n\n            if (!setValueModel) {\n                return;\n            }\n\n            // unlike other filters, what we show in the floating filter can be different, even\n            // if another filter changes. this is due to how set filter restricts its values based\n            // on selections in other filters, e.g. if you filter Language to English, then the set filter\n            // on Country will only show English speaking countries. Thus the list of items to show\n            // in the floating filter can change.\n            this.addManagedListeners(setValueModel, { availableValuesChanged: () => this.updateFloatingFilterText() });\n        });\n\n        this.availableValuesListenerAdded = true;\n    }\n\n    private updateFloatingFilterText(parentModel?: SetFilterModel | null): void {\n        if (!this.availableValuesListenerAdded) {\n            this.addAvailableValuesListener();\n        }\n\n        this.parentSetFilterInstance((setFilter) => {\n            this.eFloatingFilterText.setValue(this.filterModelFormatter.getModelAsString(parentModel, setFilter));\n        });\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { SparklineCellRenderer } from './sparklineCellRenderer';\nimport { SparklineTooltipSingleton } from './tooltip/sparklineTooltipSingleton';\nimport { VERSION } from './version';\n\nexport const SparklinesModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SparklinesModule,\n    beans: [SparklineTooltipSingleton],\n    userComponents: [{ name: 'agSparklineCellRenderer', classImp: SparklineCellRenderer }],\n    dependantModules: [EnterpriseCoreModule],\n};\n", "import type {\n    BeanCollection,\n    ICellRenderer,\n    ISparklineCellRendererParams,\n    ResizeObserverService,\n} from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\n\nimport type { SparklineFactoryOptions } from './sparkline/agSparkline';\nimport { AgSparkline } from './sparkline/agSparkline';\nimport type { SparklineTooltipSingleton } from './tooltip/sparklineTooltipSingleton';\n\nexport class SparklineCellRenderer extends Component implements ICellRenderer {\n    private resizeObserverService!: ResizeObserverService;\n    private sparklineTooltipSingleton!: SparklineTooltipSingleton;\n\n    public wireBeans(beans: BeanCollection) {\n        this.resizeObserverService = beans.resizeObserverService;\n        this.sparklineTooltipSingleton = beans.sparklineTooltipSingleton as SparklineTooltipSingleton;\n    }\n\n    private readonly eSparkline: HTMLElement = RefPlaceholder;\n\n    private sparkline?: any;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-sparkline-wrapper\">\n            <span data-ref=\"eSparkline\"></span>\n        </div>`);\n    }\n\n    public init(params: ISparklineCellRendererParams): void {\n        let firstTimeIn = true;\n        const updateSparkline = () => {\n            const { clientWidth, clientHeight } = this.getGui();\n            if (clientWidth === 0 || clientHeight === 0) {\n                return;\n            }\n\n            if (firstTimeIn) {\n                const options: SparklineFactoryOptions = {\n                    data: params.value,\n                    width: clientWidth,\n                    height: clientHeight,\n                    context: {\n                        data: params.data,\n                    },\n                    ...params.sparklineOptions,\n                };\n\n                // create new instance of sparkline\n                this.sparkline = AgSparkline.create(options, this.sparklineTooltipSingleton.getSparklineTooltip());\n\n                // append sparkline canvas to cell renderer element\n                this.eSparkline!.appendChild(this.sparkline.canvasElement);\n\n                firstTimeIn = false;\n            } else {\n                this.sparkline.width = clientWidth;\n                this.sparkline.height = clientHeight;\n            }\n        };\n\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.getGui(), updateSparkline);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public refresh(params: ISparklineCellRendererParams): boolean {\n        if (this.sparkline) {\n            this.sparkline.data = params.value;\n            return true;\n        }\n        return false;\n    }\n\n    public override destroy() {\n        if (this.sparkline) {\n            this.sparkline.destroy();\n        }\n        super.destroy();\n    }\n}\n", "import type {\n    CrosshairLineOptions,\n    HighlightStyleOptions,\n    PaddingOptions,\n    SparklineCrosshairsOptions,\n    SparklineLineOptions,\n    SparklineMarkerOptions,\n    SparklineOptions,\n} from '@ag-grid-community/core';\nimport { _warnOnce } from '@ag-grid-community/core';\nimport { _Util } from 'ag-charts-community';\n\nimport { AreaSparkline } from './area/areaSparkline';\nimport type { BarColumnLabel } from './bar-column/barColumnSparkline';\nimport { BarSparkline } from './bar-column/barSparkline';\nimport { ColumnSparkline } from './bar-column/columnSparkline';\nimport { LineSparkline } from './line/lineSparkline';\nimport type { SparklineAxis } from './sparkline';\nimport type { SparklineTooltip } from './tooltip/sparklineTooltip';\n\nconst { isNumber } = _Util;\n\nexport type SparklineFactoryOptions = SparklineOptions & {\n    data: any[];\n    width: number;\n    height: number;\n    context?: any;\n    container?: HTMLElement;\n};\n\ntype SparklineType = LineSparkline | AreaSparkline | ColumnSparkline | BarSparkline;\n\ntype Validators = {\n    [property: string]: ValidatorFunc;\n};\n\ntype ValidatorFunc = (property: string, value: any, defaultValue?: any) => boolean;\n\nexport abstract class AgSparkline {\n    static create(options: SparklineFactoryOptions, tooltip: SparklineTooltip) {\n        // avoid mutating user provided options\n        options = _Util.deepClone(options);\n\n        const sparkline = getSparklineInstance(options.type);\n\n        if (tooltip) {\n            sparkline.tooltip = tooltip;\n        }\n\n        initSparkline(sparkline, options);\n        initSparklineByType(sparkline, options);\n\n        if (options.data) {\n            sparkline.data = options.data;\n        }\n\n        sparkline.processedOptions = options;\n\n        return sparkline;\n    }\n}\n\nfunction getSparklineInstance(type: string = 'line'): any {\n    switch (type) {\n        case 'column':\n            return new ColumnSparkline();\n        case 'bar':\n            return new BarSparkline();\n        case 'area':\n            return new AreaSparkline();\n        case 'line':\n        default:\n            return new LineSparkline();\n    }\n}\n\nfunction initSparklineByType(sparkline: SparklineType, options: any): void {\n    switch (options.type) {\n        case 'bar':\n            initBarColumnSparkline(sparkline as BarSparkline, options);\n            break;\n        case 'column':\n            initBarColumnSparkline(sparkline as ColumnSparkline, options);\n            break;\n        case 'area':\n            initAreaSparkline(sparkline as AreaSparkline, options);\n            break;\n        case 'line':\n        default:\n            initLineSparkline(sparkline as LineSparkline, options);\n            break;\n    }\n}\n\nfunction initSparkline(sparkline: SparklineType, options: any) {\n    setValueIfPropertyExists(sparkline, 'context', options.context, options);\n    setValueIfPropertyExists(sparkline, 'width', options.width, options);\n    setValueIfPropertyExists(sparkline, 'height', options.height, options);\n    setValueIfPropertyExists(sparkline, 'container', options.container, options);\n    setValueIfPropertyExists(sparkline, 'xKey', options.xKey, options);\n    setValueIfPropertyExists(sparkline, 'yKey', options.yKey, options);\n\n    if (options.padding) {\n        initPaddingOptions(sparkline.padding, options.padding);\n    }\n\n    if (options.axis) {\n        initAxisOptions(sparkline.axis, options.axis);\n    }\n\n    if (options.highlightStyle) {\n        initHighlightStyleOptions(sparkline.highlightStyle, options.highlightStyle);\n    }\n}\n\nfunction initLineSparkline(sparkline: LineSparkline, options: any) {\n    if (options.marker) {\n        initMarkerOptions(sparkline.marker, options.marker);\n    }\n\n    if (options.line) {\n        initLineOptions(sparkline.line, options.line);\n    }\n\n    if (options.crosshairs) {\n        initCrosshairsOptions(sparkline.crosshairs, options.crosshairs);\n    }\n}\n\nfunction initAreaSparkline(sparkline: AreaSparkline, options: any) {\n    setValueIfPropertyExists(sparkline, 'fill', options.fill, options);\n\n    if (options.marker) {\n        initMarkerOptions(sparkline.marker, options.marker);\n    }\n\n    if (options.line) {\n        initLineOptions(sparkline.line, options.line);\n    }\n\n    if (options.crosshairs) {\n        initCrosshairsOptions(sparkline.crosshairs, options.crosshairs);\n    }\n}\n\nfunction initBarColumnSparkline(sparkline: ColumnSparkline | BarSparkline, options: any) {\n    setValueIfPropertyExists(sparkline, 'valueAxisDomain', options.valueAxisDomain, options);\n    setValueIfPropertyExists(sparkline, 'fill', options.fill, options);\n    setValueIfPropertyExists(sparkline, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(sparkline, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(sparkline, 'paddingInner', options.paddingInner, options);\n    setValueIfPropertyExists(sparkline, 'paddingOuter', options.paddingOuter, options);\n    setValueIfPropertyExists(sparkline, 'formatter', options.formatter, options);\n\n    if (options.label) {\n        initLabelOptions(sparkline.label, options.label);\n    }\n}\n\nfunction initPaddingOptions(target: PaddingOptions, options: any) {\n    setValueIfPropertyExists(target, 'top', options.top, options);\n    setValueIfPropertyExists(target, 'right', options.right, options);\n    setValueIfPropertyExists(target, 'bottom', options.bottom, options);\n    setValueIfPropertyExists(target, 'left', options.left, options);\n}\n\nfunction initMarkerOptions(target: SparklineMarkerOptions, options: any) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'size', options.size, options);\n    setValueIfPropertyExists(target, 'shape', options.shape, options);\n    setValueIfPropertyExists(target, 'fill', options.fill, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(target, 'formatter', options.formatter, options);\n}\n\nfunction initLabelOptions(target: BarColumnLabel, options: any) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'fontStyle', options.fontStyle, options);\n    setValueIfPropertyExists(target, 'fontWeight', options.fontWeight, options);\n    setValueIfPropertyExists(target, 'fontSize', options.fontSize, options);\n    setValueIfPropertyExists(target, 'fontFamily', options.fontFamily, options);\n    setValueIfPropertyExists(target, 'textAlign', options.textAlign, options);\n    setValueIfPropertyExists(target, 'textBaseline', options.textBaseline, options);\n    setValueIfPropertyExists(target, 'color', options.color, options);\n    setValueIfPropertyExists(target, 'formatter', options.formatter, options);\n    setValueIfPropertyExists(target, 'placement', options.placement, options);\n}\n\nfunction initLineOptions(target: SparklineLineOptions, options: any) {\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\n\nfunction initAxisOptions(target: SparklineAxis, options: any) {\n    setValueIfPropertyExists(target, 'type', options.type, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\n\nfunction initHighlightStyleOptions(target: HighlightStyleOptions, options: any) {\n    setValueIfPropertyExists(target, 'fill', options.fill, options);\n    setValueIfPropertyExists(target, 'size', options.size, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n}\n\nfunction initCrosshairsOptions(target: SparklineCrosshairsOptions, options: any) {\n    if (target.xLine && options.xLine) {\n        initCrosshairLineOptions(target.xLine, options.xLine);\n    }\n\n    if (target.yLine && options.yLine) {\n        initCrosshairLineOptions(target.yLine, options.yLine);\n    }\n}\n\nfunction initCrosshairLineOptions(target: CrosshairLineOptions, options: any) {\n    setValueIfPropertyExists(target, 'enabled', options.enabled, options);\n    setValueIfPropertyExists(target, 'stroke', options.stroke, options);\n    setValueIfPropertyExists(target, 'strokeWidth', options.strokeWidth, options);\n    setValueIfPropertyExists(target, 'lineDash', options.lineDash, options);\n    setValueIfPropertyExists(target, 'lineCap', options.lineCap, options);\n}\n\nconst offsetValidator = (property: string, value: number, defaultOffset?: number): boolean => {\n    if (isNumber(value)) {\n        return true;\n    }\n\n    _warnOnce(\n        `${property} must be a number, the value you provided is not a valid number. Using the default of ${defaultOffset}px.`\n    );\n    return false;\n};\n\nconst validators: Validators = {\n    xOffset: offsetValidator,\n    yOffset: offsetValidator,\n};\n\nfunction setValueIfPropertyExists(target: any, property: string, value: any, options: any): void {\n    if (property in options) {\n        if (property in target) {\n            const validator = validators[property];\n            const isValid = validator ? validator(property, value, target[property]) : true;\n\n            if (isValid && target[property] !== value) {\n                // only set property if the value is different to new value\n                target[property] = value;\n            }\n        } else {\n            _warnOnce(`Property ${property} does not exist on the target object.`);\n        }\n    }\n}\n", "import type { CrosshairLineOptions, MarkerFormat, MarkerFormatterParams } from '@ag-grid-community/core';\nimport { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport { getLineDash } from '../../util/lineDash';\nimport { getMarker } from '../marker/markerFactory';\nimport type { Point, SeriesNodeDatum } from '../sparkline';\nimport { Sparkline, ZINDICIES } from '../sparkline';\nimport { toTooltipHtml } from '../tooltip/sparklineTooltip';\n\nconst { extent } = _Util;\nconst { BandScale } = _Scale;\n\ninterface AreaNodeDatum extends SeriesNodeDatum {}\n\ninterface PathDatum extends SeriesNodeDatum {\n    point: Point;\n}\n\nclass SparklineMarker {\n    enabled: boolean = true;\n    shape: string = 'circle';\n    size: number = 0;\n    fill?: string = 'rgb(124, 181, 236)';\n    stroke?: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n    formatter?: (params: MarkerFormatterParams) => MarkerFormat = undefined;\n}\n\nclass SparklineLine {\n    stroke: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n}\n\nclass SparklineCrosshairs {\n    xLine: CrosshairLineOptions = {\n        enabled: true,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n    yLine: CrosshairLineOptions = {\n        enabled: false,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n}\nexport class AreaSparkline extends Sparkline {\n    fill: string = 'rgba(124, 181, 236, 0.25)';\n\n    protected strokePath: _Scene.Path = new _Scene.Path();\n    protected fillPath: _Scene.Path = new _Scene.Path();\n    protected xCrosshairLine: _Scene.Line = new _Scene.Line();\n    protected yCrosshairLine: _Scene.Line = new _Scene.Line();\n\n    private areaSparklineGroup: _Scene.Group = new _Scene.Group();\n    private xAxisLine: _Scene.Line = new _Scene.Line();\n    private markers: _Scene.Group = new _Scene.Group();\n    private markerSelection: _Scene.Selection<_Scene.Marker, AreaNodeDatum> = _Scene.Selection.select(\n        this.markers,\n        () => this.markerFactory()\n    );\n    private markerSelectionData: AreaNodeDatum[] = [];\n\n    readonly marker = new SparklineMarker();\n    readonly line = new SparklineLine();\n    readonly crosshairs = new SparklineCrosshairs();\n\n    constructor() {\n        super();\n        this.rootGroup.append(this.areaSparklineGroup);\n\n        this.xAxisLine.zIndex = ZINDICIES.AXIS_LINE_ZINDEX;\n        this.fillPath.zIndex = ZINDICIES.SERIES_FILL_ZINDEX;\n        this.strokePath.zIndex = ZINDICIES.SERIES_STROKE_ZINDEX;\n        this.xCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.yCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.markers.zIndex = ZINDICIES.SERIES_MARKERS_ZINDEX;\n\n        this.areaSparklineGroup.append([\n            this.fillPath,\n            this.xAxisLine,\n            this.strokePath,\n            this.xCrosshairLine,\n            this.yCrosshairLine,\n            this.markers,\n        ]);\n    }\n\n    protected markerFactory(): _Scene.Marker {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker(shape);\n        return new MarkerShape();\n    }\n\n    protected override getNodeData(): AreaNodeDatum[] {\n        return this.markerSelectionData;\n    }\n\n    protected override update(): void {\n        const data = this.generateNodeData();\n\n        if (!data) {\n            return;\n        }\n\n        const { nodeData, fillData, strokeData } = data;\n\n        this.markerSelectionData = nodeData;\n\n        this.updateSelection(nodeData);\n        this.updateNodes();\n\n        this.updateStroke(strokeData);\n        this.updateFill(fillData);\n    }\n\n    protected override updateYScaleDomain(): void {\n        const { yData, yScale } = this;\n        const yMinMax = extent(yData as number[]);\n\n        let yMin = 0;\n        let yMax = 1;\n\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0] as number;\n            yMax = this.max = yMinMax[1] as number;\n        }\n\n        // if yMin is positive, set yMin to 0\n        yMin = yMin < 0 ? yMin : 0;\n\n        // if yMax is negative, set yMax to 0\n        yMax = yMax < 0 ? 0 : yMax;\n\n        yScale.domain = [yMin, yMax];\n    }\n\n    protected override generateNodeData():\n        | { nodeData: AreaNodeDatum[]; fillData: PathDatum[]; strokeData: PathDatum[] }\n        | undefined {\n        const { data, yData, xData, xScale, yScale } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const continuous = !(xScale instanceof BandScale);\n\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        const n = yData.length;\n\n        const nodeData: AreaNodeDatum[] = [];\n        const fillData: PathDatum[] = [];\n        const strokeData: PathDatum[] = [];\n\n        let firstValidX;\n        let lastValidX;\n\n        let previousX;\n        let nextX;\n\n        const yZero = yScale.convert(0);\n\n        for (let i = 0; i < n; i++) {\n            const yDatum = yData[i];\n            const xDatum = xData[i];\n\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n\n            // if this iteration is not the last, set nextX using the next value in the data array\n            if (i + 1 < n) {\n                nextX = xScale.convert(continuous ? xScale.toDomain(xData[i + 1]) : xData[i + 1]) + offsetX;\n            }\n\n            // set stroke data regardless of missing/ undefined values. Undefined values will be handled in the updateStroke() method\n            strokeData.push({\n                seriesDatum: { x: xDatum, y: yDatum },\n                point: { x, y },\n            });\n\n            if (yDatum === undefined && previousX !== undefined) {\n                // if yDatum is undefined and there is a valid previous data point, add a phantom point at yZero\n                // if a next data point exists, add a phantom point at yZero at the next X\n                fillData.push({ seriesDatum: undefined, point: { x: previousX, y: yZero } });\n                if (nextX !== undefined) {\n                    fillData.push({ seriesDatum: undefined, point: { x: nextX, y: yZero } });\n                }\n            } else if (yDatum !== undefined) {\n                fillData.push({\n                    seriesDatum: { x: xDatum, y: yDatum },\n                    point: { x, y },\n                });\n\n                // set node data only if yDatum is not undefined. These values are used in the updateSelection() method to update markers\n                nodeData.push({\n                    seriesDatum: { x: xDatum, y: yDatum },\n                    point: { x, y },\n                });\n\n                firstValidX = firstValidX !== undefined ? firstValidX : x;\n                lastValidX = x;\n            }\n            previousX = x;\n        }\n\n        // phantom points for creating closed area\n        fillData.push(\n            { seriesDatum: undefined, point: { x: lastValidX, y: yZero } },\n            { seriesDatum: undefined, point: { x: firstValidX, y: yZero } }\n        );\n\n        return { nodeData, fillData, strokeData };\n    }\n\n    protected override updateAxisLine() {\n        const { xScale, yScale, axis, xAxisLine } = this;\n\n        xAxisLine.x1 = xScale.range[0];\n        xAxisLine.x2 = xScale.range[1];\n        xAxisLine.y1 = xAxisLine.y2 = 0;\n        xAxisLine.stroke = axis.stroke;\n        xAxisLine.strokeWidth = axis.strokeWidth;\n\n        const yZero: number = yScale.convert(0);\n        xAxisLine.translationY = yZero;\n    }\n\n    private updateSelection(selectionData: AreaNodeDatum[]): void {\n        this.markerSelection.update(selectionData);\n    }\n\n    protected override updateNodes(): void {\n        const { highlightedDatum, highlightStyle, marker } = this;\n        const {\n            size: highlightSize,\n            fill: highlightFill,\n            stroke: highlightStroke,\n            strokeWidth: highlightStrokeWidth,\n        } = highlightStyle;\n        const markerFormatter = marker.formatter;\n\n        this.markerSelection.each((node, datum, index) => {\n            const { point, seriesDatum } = datum;\n\n            if (!point) {\n                return;\n            }\n\n            const highlighted = datum === highlightedDatum;\n            const markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;\n            const markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke;\n            const markerStrokeWidth =\n                highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : marker.strokeWidth;\n            const markerSize = highlighted && highlightSize !== undefined ? highlightSize : marker.size;\n\n            let markerFormat: MarkerFormat | undefined;\n\n            if (markerFormatter) {\n                const first = index === 0;\n                const last = index === this.markerSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n\n                markerFormat = markerFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: markerFill,\n                    stroke: markerStroke,\n                    strokeWidth: markerStrokeWidth,\n                    size: markerSize,\n                    highlighted,\n                });\n            }\n\n            node.size = markerFormat && markerFormat.size != undefined ? markerFormat.size : markerSize;\n            node.fill = markerFormat && markerFormat.fill != undefined ? markerFormat.fill : markerFill;\n            node.stroke = markerFormat && markerFormat.stroke != undefined ? markerFormat.stroke : markerStroke;\n            node.strokeWidth =\n                markerFormat && markerFormat.strokeWidth != undefined ? markerFormat.strokeWidth : markerStrokeWidth;\n\n            node.translationX = point.x;\n            node.translationY = point.y;\n            node.visible =\n                markerFormat && markerFormat.enabled != undefined\n                    ? markerFormat.enabled\n                    : marker.enabled && node.size > 0;\n        });\n    }\n\n    updateStroke(strokeData: PathDatum[]) {\n        const { strokePath, yData, line } = this;\n\n        const path = strokePath.path;\n        path.clear();\n\n        if (yData.length < 2) {\n            return;\n        }\n\n        const n = strokeData.length;\n        let moveTo = true;\n\n        for (let i = 0; i < n; i++) {\n            const { point, seriesDatum } = strokeData[i];\n\n            const x = point.x;\n            const y = point.y;\n\n            if (seriesDatum.y == undefined) {\n                moveTo = true;\n            } else {\n                if (moveTo) {\n                    path.moveTo(x, y);\n                    moveTo = false;\n                } else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n\n        strokePath.lineJoin = strokePath.lineCap = 'round';\n        strokePath.fill = undefined;\n        strokePath.stroke = line.stroke;\n        strokePath.strokeWidth = line.strokeWidth;\n    }\n\n    updateFill(areaData: PathDatum[]) {\n        const { fillPath, yData, fill } = this;\n\n        const path = fillPath.path;\n        const n = areaData.length;\n\n        path.clear();\n\n        if (yData.length < 2) {\n            return;\n        }\n\n        for (let i = 0; i < n; i++) {\n            const { point } = areaData[i];\n\n            const x = point.x;\n            const y = point.y;\n\n            if (i > 0) {\n                path.lineTo(x, y);\n            } else {\n                path.moveTo(x, y);\n            }\n        }\n\n        path.closePath();\n\n        fillPath.lineJoin = 'round';\n        fillPath.stroke = undefined;\n        fillPath.fill = fill;\n    }\n\n    protected override updateXCrosshairLine(): void {\n        const {\n            yScale,\n            xCrosshairLine,\n            highlightedDatum,\n            crosshairs: { xLine },\n        } = this;\n\n        if (!xLine.enabled || highlightedDatum == undefined) {\n            xCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        xCrosshairLine.y1 = yScale.range[0];\n        xCrosshairLine.y2 = yScale.range[1];\n        xCrosshairLine.x1 = xCrosshairLine.x2 = 0;\n        xCrosshairLine.stroke = xLine.stroke;\n        xCrosshairLine.strokeWidth = xLine.strokeWidth ?? 1;\n\n        xCrosshairLine.lineCap = xLine.lineCap === 'round' || xLine.lineCap === 'square' ? xLine.lineCap : undefined;\n\n        const { lineDash } = xLine;\n        xCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(xCrosshairLine.lineCap, xLine.lineDash as string);\n\n        xCrosshairLine.translationX = highlightedDatum.point!.x;\n    }\n\n    protected override updateYCrosshairLine() {\n        const {\n            xScale,\n            yCrosshairLine,\n            highlightedDatum,\n            crosshairs: { yLine },\n        } = this;\n\n        if (!yLine.enabled || highlightedDatum == undefined) {\n            yCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        yCrosshairLine.x1 = xScale.range[0];\n        yCrosshairLine.x2 = xScale.range[1];\n        yCrosshairLine.y1 = yCrosshairLine.y2 = 0;\n        yCrosshairLine.stroke = yLine.stroke;\n        yCrosshairLine.strokeWidth = yLine.strokeWidth ?? 1;\n\n        yCrosshairLine.lineCap = yLine.lineCap === 'round' || yLine.lineCap === 'square' ? yLine.lineCap : undefined;\n\n        const { lineDash } = yLine;\n        yCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(yCrosshairLine.lineCap, yLine.lineDash as string);\n\n        yCrosshairLine.translationY = highlightedDatum.point!.y;\n    }\n\n    getTooltipHtml(datum: SeriesNodeDatum): string | undefined {\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n\n        const defaults = {\n            content,\n            title,\n        };\n\n        const tooltipRenderer = this.processedOptions?.tooltip?.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(\n                tooltipRenderer({\n                    context: this.context,\n                    datum: seriesDatum,\n                    yValue,\n                    xValue,\n                }),\n                defaults\n            );\n        }\n\n        return toTooltipHtml(defaults);\n    }\n}\n", "import { _warnOnce } from '@ag-grid-community/core';\n\nexport function getLineDash(lineCap: 'butt' | 'square' | 'round' | undefined, lineDash: string = 'solid'): number[] {\n    const buttOrNull: { [key: string]: number[] } = {\n        solid: [],\n        dash: [4, 3],\n        dot: [1, 3],\n        dashDot: [4, 3, 1, 3],\n        dashDotDot: [4, 3, 1, 3, 1, 3],\n        shortDot: [1, 1],\n        shortDash: [3, 1],\n        shortDashDot: [3, 1, 1, 1],\n        shortDashDotDot: [3, 1, 1, 1, 1, 1],\n        longDash: [8, 3],\n        longDashDot: [8, 3, 1, 3],\n        longDashDotDot: [8, 3, 1, 3, 1, 3],\n    };\n\n    const roundOrSquare: { [key: string]: number[] } = {\n        solid: [],\n        dash: [3, 3],\n        dot: [0, 3],\n        dashDot: [3, 3, 0, 3],\n        dashDotDot: [3, 3, 0, 3, 0, 3],\n        shortDot: [0, 2],\n        shortDash: [2, 2],\n        shortDashDot: [2, 2, 0, 2],\n        shortDashDotDot: [2, 2, 0, 2, 0, 2],\n        longDash: [7, 3],\n        longDashDot: [7, 3, 0, 3],\n        longDashDotDot: [7, 3, 0, 3, 0, 3],\n    };\n\n    if (lineCap === 'round' || lineCap === 'square') {\n        if (roundOrSquare[lineDash] == undefined) {\n            warnInvalid(lineDash);\n            return roundOrSquare.solid;\n        }\n\n        return roundOrSquare[lineDash];\n    }\n\n    if (buttOrNull[lineDash] == undefined) {\n        warnInvalid(lineDash);\n        return buttOrNull.solid;\n    }\n\n    return buttOrNull[lineDash];\n}\n\nfunction warnInvalid(lineDash: string) {\n    _warnOnce(`'${lineDash}' is not a valid 'lineDash' option.`);\n}\n", "import { _Scene } from 'ag-charts-community';\n\nexport function getMarker(shape: string) {\n    switch (shape) {\n        case 'circle':\n            return _Scene.Circle;\n        case 'square':\n            return _Scene.Square;\n        case 'diamond':\n            return _Scene.Diamond;\n        default:\n            return _Scene.Circle;\n    }\n}\n", "import { _errorOnce } from '@ag-grid-community/core';\nimport type { HighlightStyleOptions } from '@ag-grid-community/core';\nimport { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport type { SparklineFactoryOptions } from './agSparkline';\nimport { defaultTooltipCss } from './tooltip/defaultTooltipCss';\nimport type { SparklineTooltip, SparklineTooltipMeta } from './tooltip/sparklineTooltip';\n\nconst { extent, isNumber, isString, isStringObject, isDate, createId, Padding } = _Util;\nconst { LinearScale, BandScale, TimeScale } = _Scale;\n\n/**\n * Constants to declare the expected nominal zIndex for nodes in a sparkline rendering.\n */\nexport enum ZINDICIES {\n    SERIES_FILL_ZINDEX = 50,\n    AXIS_LINE_ZINDEX = 500,\n    SERIES_STROKE_ZINDEX = 1000,\n    SERIES_LABEL_ZINDEX = 1500,\n    CROSSHAIR_ZINDEX = 2000,\n    SERIES_MARKERS_ZINDEX = 2500,\n}\n\nexport interface SeriesNodeDatum {\n    readonly seriesDatum: any;\n    readonly point?: Point;\n}\n\nexport interface Point {\n    readonly x: number;\n    readonly y: number;\n}\n\ninterface SeriesRect {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\ntype Container = HTMLElement | undefined | null;\ntype Data = any[] | undefined | null;\ntype DataType = 'number' | 'array' | 'object' | undefined;\ntype AxisType = 'number' | 'category' | 'time';\ntype ScaleType = _Scale.LinearScale | _Scale.TimeScale | _Scale.BandScale<string>;\n\nexport class SparklineAxis {\n    type?: AxisType = 'category';\n    stroke: string = 'rgb(204, 214, 235)';\n    strokeWidth: number = 1;\n}\nexport abstract class Sparkline {\n    readonly id: string = createId(this);\n\n    processedOptions?: SparklineFactoryOptions;\n\n    readonly scene: _Scene.Scene;\n    readonly canvasElement: HTMLCanvasElement;\n    readonly rootGroup: _Scene.Group;\n\n    // Only one tooltip instance for all sparkline instances.\n    tooltip!: SparklineTooltip;\n    private static tooltipDocuments: Document[] = [];\n\n    private mouseMoveEvent: MouseEvent;\n\n    protected seriesRect: SeriesRect = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n\n    private _context: { data: any } | undefined = undefined;\n    set context(value: { data: any } | undefined) {\n        if (this._context !== value) {\n            this._context = value;\n        }\n    }\n    get context(): { data: any } | undefined {\n        return this._context;\n    }\n\n    private _container: Container = undefined;\n    set container(value: Container) {\n        if (this._container !== value) {\n            const { parentNode } = this.canvasElement;\n\n            if (parentNode != null) {\n                parentNode.removeChild(this.canvasElement);\n            }\n\n            if (value) {\n                value.appendChild(this.canvasElement);\n            }\n\n            this._container = value;\n        }\n    }\n    get container(): Container {\n        return this._container;\n    }\n\n    private _data: Data = undefined;\n    set data(value: Data) {\n        if (this._data !== value) {\n            this._data = value;\n            this.processData();\n            if (this.mouseMoveEvent && this.highlightedDatum) {\n                this.updateHitPoint(this.mouseMoveEvent);\n            }\n        }\n    }\n    get data() {\n        return this._data;\n    }\n\n    padding: _Util.Padding = new Padding(3);\n\n    xKey: string = 'x';\n    yKey: string = 'y';\n\n    protected dataType: DataType = undefined;\n    protected xData: any[] = [];\n    protected yData: (number | undefined)[] = [];\n\n    // Minimum y value in provided data.\n    protected min: number | undefined = undefined;\n    // Maximum y value in provided data.\n    protected max: number | undefined = undefined;\n\n    protected xScale!: any;\n    protected yScale: _Scale.LinearScale = new LinearScale();\n\n    readonly axis = new SparklineAxis();\n    readonly highlightStyle: HighlightStyleOptions = {\n        size: 6,\n        fill: 'yellow',\n        stroke: 'silver',\n        strokeWidth: 1,\n    };\n\n    protected constructor() {\n        const root = new _Scene.Group();\n        this.rootGroup = root;\n\n        const element = document.createElement('div');\n        element.setAttribute('class', 'ag-sparkline-wrapper');\n\n        // initialise scene\n        const scene = new _Scene.Scene({});\n        this.scene = scene;\n        this.canvasElement = scene.canvas.element;\n\n        // set scene properties\n        scene.setRoot(root);\n        scene.setContainer(element);\n\n        this.resizeAndSetDimensions(this.width, this.height);\n\n        // one style element for tooltip styles per document\n        if (!Sparkline.tooltipDocuments.includes(document)) {\n            this.initialiseTooltipStyles();\n        }\n\n        this.setupDomEventListeners(this.canvasElement);\n    }\n\n    private resizeAndSetDimensions(width: number, height: number): void {\n        this.scene.resize(width, height);\n        this.seriesRect.width = width;\n        this.seriesRect.height = height;\n    }\n\n    private initialiseTooltipStyles(): void {\n        const styleElement = document.createElement('style');\n        styleElement.innerHTML = defaultTooltipCss;\n        document.head.insertBefore(styleElement, document.head.querySelector('style'));\n        Sparkline.tooltipDocuments.push(document);\n    }\n\n    private _width: number = 100;\n    set width(value: number) {\n        if (this._width !== value) {\n            this._width = value;\n            this.scene.resize(value, this.height);\n            this.scheduleLayout();\n        }\n    }\n    get width(): number {\n        return this._width;\n    }\n\n    private _height: number = 100;\n    set height(value: number) {\n        if (this._height !== value) {\n            this._height = value;\n            this.scene.resize(this.width, value);\n            this.scheduleLayout();\n        }\n    }\n    get height(): number {\n        return this._height;\n    }\n\n    /**\n     * Generate node data from processed data.\n     * Produce data joins.\n     * Update selection's nodes using node data.\n     */\n    protected update() {}\n\n    // Update y scale based on processed data.\n    protected updateYScale(): void {\n        this.updateYScaleRange();\n        this.updateYScaleDomain();\n    }\n\n    // Update y scale domain based on processed data.\n    protected updateYScaleDomain() {}\n\n    // Update y scale range based on height and padding (seriesRect).\n    protected updateYScaleRange(): void {\n        const { yScale, seriesRect } = this;\n        yScale.range = [seriesRect.height, 0];\n    }\n\n    // Update x scale based on processed data.\n    protected updateXScale(): void {\n        const { type } = this.axis;\n\n        this.xScale = this.getXScale(type);\n\n        this.updateXScaleRange();\n        this.updateXScaleDomain();\n    }\n\n    // Update x scale range based on width and padding (seriesRect).\n    protected updateXScaleRange(): void {\n        this.xScale.range = [0, this.seriesRect.width];\n    }\n\n    // Update x scale domain based on processed data and type of scale.\n    protected updateXScaleDomain(): void {\n        const { xData, xScale } = this;\n\n        let xMinMax;\n        if (xScale instanceof LinearScale || xScale instanceof TimeScale) {\n            xMinMax = extent(xData);\n        }\n\n        this.xScale.domain = xMinMax ? xMinMax.slice() : xData;\n    }\n\n    /**\n     * Return xScale instance based on the provided type or return a `BandScale` by default.\n     * The default type is `category`.\n     * @param type\n     */\n    protected getXScale(type: AxisType = 'category'): ScaleType {\n        switch (type) {\n            case 'number':\n                return new LinearScale();\n            case 'time':\n                return new TimeScale();\n            case 'category':\n            default:\n                return new BandScale();\n        }\n    }\n\n    // Update axis line.\n    protected updateAxisLine(): void {}\n\n    // Update X and Y scales and the axis line.\n    protected updateAxes(): void {\n        this.updateYScale();\n        this.updateXScale();\n        this.updateAxisLine();\n    }\n\n    // Update horizontal and vertical crosshair lines.\n    protected updateCrosshairs(): void {\n        this.updateXCrosshairLine();\n        this.updateYCrosshairLine();\n    }\n\n    // Using processed data, generate data that backs visible nodes.\n    protected generateNodeData():\n        | { nodeData: SeriesNodeDatum[]; fillData: SeriesNodeDatum[]; strokeData: SeriesNodeDatum[] }\n        | SeriesNodeDatum[]\n        | undefined {\n        return [];\n    }\n\n    // Returns persisted node data associated with the sparkline's data.\n    protected getNodeData(): readonly SeriesNodeDatum[] {\n        return [];\n    }\n\n    // Update the selection's nodes.\n    protected updateNodes(): void {}\n\n    // Update the vertical crosshair line.\n    protected updateXCrosshairLine(): void {}\n\n    // Update the horizontal crosshair line.\n    protected updateYCrosshairLine(): void {}\n\n    // Efficiently update sparkline nodes on hightlight changes.\n    protected highlightedDatum?: SeriesNodeDatum;\n    protected highlightDatum(closestDatum: SeriesNodeDatum): void {\n        this.updateNodes();\n    }\n\n    protected dehighlightDatum(): void {\n        this.highlightedDatum = undefined;\n        this.updateNodes();\n        this.updateCrosshairs();\n    }\n\n    abstract getTooltipHtml(datum: SeriesNodeDatum): string | undefined;\n\n    /**\n     * Highlight closest datum and display tooltip if enabled.\n     * Only update if necessary, i.e. only update if the highlighted datum is different from previously highlighted datum,\n     * or if there is no previously highlighted datum.\n     * @param event\n     */\n    private onMouseMove(event: MouseEvent) {\n        this.mouseMoveEvent = event;\n        this.updateHitPoint(event);\n    }\n\n    private renderScene() {\n        this.scene.render().catch((e) => _errorOnce(`chart rendering failed`, e));\n    }\n\n    private updateHitPoint(event: MouseEvent) {\n        const closestDatum: SeriesNodeDatum | undefined = this.pickClosestSeriesNodeDatum(event.offsetX, event.offsetY);\n\n        if (!closestDatum) {\n            return;\n        }\n\n        const oldHighlightedDatum = this.highlightedDatum;\n        this.highlightedDatum = closestDatum;\n\n        if (\n            (this.highlightedDatum && !oldHighlightedDatum) ||\n            (this.highlightedDatum && oldHighlightedDatum && this.highlightedDatum !== oldHighlightedDatum)\n        ) {\n            this.highlightDatum(closestDatum);\n            this.updateCrosshairs();\n            this.renderScene();\n        }\n\n        const tooltipEnabled = this.processedOptions?.tooltip?.enabled ?? true;\n        if (tooltipEnabled) {\n            this.handleTooltip(event, closestDatum);\n        }\n    }\n\n    /**\n     * Dehighlight all nodes and remove tooltip.\n     * @param event\n     */\n    private onMouseOut(event: MouseEvent) {\n        this.dehighlightDatum();\n        this.tooltip.toggle(false);\n        this.renderScene();\n    }\n\n    protected smallestInterval?: { x: number; y: number } = undefined;\n    // Fetch required values from the data object and process them.\n    private processData() {\n        const { data, yData, xData } = this;\n\n        if (!data || this.invalidData(this.data)) {\n            return;\n        }\n\n        yData.length = 0;\n        xData.length = 0;\n\n        const n = data.length;\n\n        const dataType = this.getDataType(data);\n        this.dataType = dataType;\n\n        const { type: xValueType } = this.axis;\n        const xType = xValueType !== 'number' && xValueType !== 'time' ? 'category' : xValueType;\n\n        const isContinuousX = xType === 'number' || xType === 'time';\n\n        const setSmallestXInterval = (curr: number, prev: number) => {\n            if (this.smallestInterval == undefined) {\n                this.smallestInterval = { x: Infinity, y: Infinity };\n            }\n            const { x } = this.smallestInterval;\n\n            const interval = Math.abs(curr - prev);\n            if (interval > 0 && interval < x) {\n                this.smallestInterval.x = interval;\n            }\n        };\n\n        let prevX;\n\n        if (dataType === 'number') {\n            for (let i = 0; i < n; i++) {\n                const xDatum = i;\n                const yDatum = data[i];\n\n                const x = this.getDatum(xDatum, xType);\n                const y = this.getDatum(yDatum, 'number');\n\n                if (isContinuousX) {\n                    setSmallestXInterval(x, prevX);\n                }\n\n                xData.push(x);\n                yData.push(y);\n\n                prevX = x;\n            }\n        } else if (dataType === 'array') {\n            for (let i = 0; i < n; i++) {\n                const datum = data[i];\n                if (Array.isArray(datum)) {\n                    const xDatum = datum[0];\n                    const yDatum = datum[1];\n\n                    const x = this.getDatum(xDatum, xType);\n                    const y = this.getDatum(yDatum, 'number');\n\n                    if (x == undefined) {\n                        continue;\n                    }\n\n                    if (isContinuousX) {\n                        setSmallestXInterval(x, prevX);\n                    }\n\n                    xData.push(x);\n                    yData.push(y);\n\n                    prevX = x;\n                }\n            }\n        } else if (dataType === 'object') {\n            const { yKey, xKey } = this;\n\n            for (let i = 0; i < n; i++) {\n                const datum = data[i];\n\n                if (typeof datum === 'object' && !Array.isArray(datum)) {\n                    const xDatum = datum[xKey];\n                    const yDatum = datum[yKey];\n\n                    const x = this.getDatum(xDatum, xType);\n                    const y = this.getDatum(yDatum, 'number');\n\n                    if (x == undefined) {\n                        continue;\n                    }\n\n                    if (isContinuousX) {\n                        setSmallestXInterval(x, prevX);\n                    }\n\n                    xData.push(x);\n                    yData.push(y);\n\n                    prevX = x;\n                }\n            }\n        }\n\n        this.updateAxes();\n        this.immediateLayout();\n    }\n\n    /**\n     * Return the type of data provided to the sparkline based on the first truthy value in the data array.\n     * If the value is not a number, array or object, return `undefined`.\n     * @param data\n     */\n    private getDataType(data: any): DataType {\n        for (const datum of data) {\n            if (datum != undefined) {\n                if (isNumber(datum)) {\n                    return 'number';\n                } else if (Array.isArray(datum)) {\n                    return 'array';\n                } else if (typeof datum === 'object') {\n                    return 'object';\n                }\n            }\n        }\n    }\n\n    /**\n     * Return the given value depending on the type of axis.\n     * Return `undefined` if the value is invalid for the given axis type.\n     * @param value\n     */\n    private getDatum(value: any, type: AxisType): any {\n        if ((type === 'number' && isNumber(value)) || (type === 'time' && (isNumber(value) || isDate(value)))) {\n            return value;\n        } else if (type === 'category') {\n            if (isString(value) || isDate(value) || isNumber(value)) {\n                return { toString: () => String(value) };\n            } else if (isStringObject(value)) {\n                return value;\n            }\n        }\n    }\n\n    private layoutId: number = 0;\n\n    /**\n     * Only `true` while we are waiting for the layout to start.\n     * This will be `false` if the layout has already started and is ongoing.\n     */\n    get layoutScheduled(): boolean {\n        return !!this.layoutId;\n    }\n\n    /**\n     * Execute update method on the next available screen repaint to make changes to the canvas.\n     * If we are waiting for a layout to start and a new layout is requested,\n     * cancel the previous layout using the non 0 integer (this.layoutId) returned from requestAnimationFrame.\n     */\n    protected scheduleLayout() {\n        if (this.layoutId) {\n            cancelAnimationFrame(this.layoutId);\n        }\n        this.layoutId = requestAnimationFrame(() => {\n            this.immediateLayout();\n\n            this.layoutId = 0;\n        });\n    }\n\n    private immediateLayout() {\n        this.setSparklineDimensions();\n\n        if (this.invalidData(this.data)) {\n            return;\n        }\n\n        // update axes ranges\n        this.updateXScaleRange();\n        this.updateYScaleRange();\n\n        // update axis line\n        this.updateAxisLine();\n\n        // produce data joins and update selection's nodes\n        this.update();\n\n        this.renderScene();\n    }\n\n    private setSparklineDimensions() {\n        const { width, height, padding, seriesRect, rootGroup } = this;\n        const shrunkWidth = width - padding.left - padding.right;\n        const shrunkHeight = height - padding.top - padding.bottom;\n\n        seriesRect.width = shrunkWidth;\n        seriesRect.height = shrunkHeight;\n        seriesRect.x = padding.left;\n        seriesRect.y = padding.top;\n\n        rootGroup.translationX = seriesRect.x;\n        rootGroup.translationY = seriesRect.y;\n    }\n\n    /**\n     * Return the closest data point to x/y canvas coordinates.\n     * @param x\n     * @param y\n     */\n    private pickClosestSeriesNodeDatum(x: number, y: number): SeriesNodeDatum | undefined {\n        let minDistance = Infinity;\n        let closestDatum: SeriesNodeDatum | undefined;\n        const hitPoint = this.rootGroup.transformPoint(x, y);\n        const nodeData = this.getNodeData();\n\n        for (let i = 0; i < nodeData.length; i++) {\n            const datum = nodeData[i];\n\n            if (!datum.point) {\n                return;\n            }\n            const distance = this.getDistance(hitPoint, datum.point);\n            if (distance <= minDistance) {\n                minDistance = distance;\n                closestDatum = datum;\n            }\n        }\n\n        return closestDatum;\n    }\n\n    /**\n     * Return the relevant distance between two points.\n     * The distance will be calculated based on the x value of the points for all sparklines except bar sparkline, where the distance is based on the y values.\n     * @param x\n     * @param y\n     */\n    protected getDistance(p1: Point, p2: Point): number {\n        return Math.abs(p1.x - p2.x);\n    }\n\n    /**\n     * calculate x/y coordinates for tooltip based on coordinates of highlighted datum, position of canvas and page offset.\n     * @param datum\n     */\n    private handleTooltip(event: MouseEvent, datum: SeriesNodeDatum): void {\n        const { seriesDatum } = datum;\n        const { canvasElement } = this;\n        const { clientX, clientY } = event;\n\n        const tooltipOptions = this.processedOptions?.tooltip;\n        const meta: SparklineTooltipMeta = {\n            pageX: clientX,\n            pageY: clientY,\n            position: {\n                xOffset: tooltipOptions?.xOffset,\n                yOffset: tooltipOptions?.yOffset,\n            },\n            container: tooltipOptions?.container,\n        };\n\n        // confine tooltip to sparkline width if tooltip container not provided.\n        if (meta.container == undefined) {\n            meta.container = canvasElement;\n        }\n\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n\n        // check if tooltip is enabled for this specific data point\n        let enabled = tooltipOptions?.enabled ?? true;\n\n        const tooltipRenderer = tooltipOptions?.renderer;\n        if (tooltipRenderer) {\n            const tooltipRendererResult = tooltipRenderer({\n                context: this.context,\n                datum: seriesDatum,\n                yValue,\n                xValue,\n            });\n            enabled =\n                typeof tooltipRendererResult !== 'string' && tooltipRendererResult.enabled !== undefined\n                    ? tooltipRendererResult.enabled\n                    : enabled;\n        }\n\n        const html = enabled && seriesDatum.y !== undefined && this.getTooltipHtml(datum);\n\n        if (html) {\n            this.tooltip.show(meta, html);\n        }\n    }\n\n    protected formatNumericDatum(datum: number): string {\n        return String(Math.round(datum * 10) / 10);\n    }\n\n    private defaultDateFormatter = new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n    } as any);\n\n    // locale.format('%m/%d/%y, %H:%M:%S');\n\n    protected formatDatum(datum: any): string {\n        const type = this.axis.type || 'category';\n\n        if (type === 'number' && typeof datum === 'number') {\n            return this.formatNumericDatum(datum);\n        } else if (type === 'time' && (datum instanceof Date || isNumber(datum))) {\n            return this.defaultDateFormatter.format(datum);\n        } else {\n            return String(datum);\n        }\n    }\n\n    private _onMouseMove = this.onMouseMove.bind(this);\n    private _onMouseOut = this.onMouseOut.bind(this);\n\n    private setupDomEventListeners(chartElement: HTMLCanvasElement): void {\n        chartElement.addEventListener('mousemove', this._onMouseMove);\n        chartElement.addEventListener('mouseout', this._onMouseOut);\n    }\n\n    private cleanupDomEventListeners(chartElement: HTMLCanvasElement): void {\n        chartElement.removeEventListener('mousemove', this._onMouseMove);\n        chartElement.removeEventListener('mouseout', this._onMouseOut);\n    }\n\n    private invalidData(data: any) {\n        return !data || !Array.isArray(data);\n    }\n\n    /**\n     * Cleanup and remove canvas element from the DOM.\n     */\n    public destroy(): void {\n        this.cleanupDomEventListeners(this.canvasElement);\n        this.scene.destroy();\n        // remove canvas element from the DOM\n        this.container = undefined;\n    }\n}\n", "export const defaultTooltipCss = `\n.ag-sparkline-tooltip-wrapper {\n    position: absolute;\n    user-select: none;\n    pointer-events: none;\n}\n\n.ag-sparkline-tooltip {\n    position: relative;\n    font: 12px arial,sans-serif;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px rgb(0 0 0 / 20%), 0 1px 1px rgb(0 0 0 / 14%);\n    line-height: 1.7em;\n    overflow: hidden;\n    white-space: nowrap;\n    z-index: 99999;\n    background-color: rgb(255, 255, 255);\n    color: rgba(0,0,0, 0.67);\n}\n\n.ag-sparkline-tooltip-content {\n    padding: 0 7px;\n    opacity: 1;\n}\n\n.ag-sparkline-tooltip-title {\n    padding-left: 7px;\n    opacity: 1;\n}\n\n.ag-sparkline-tooltip-wrapper-hidden {\n    top: -10000px !important;\n}\n\n.ag-sparkline-wrapper {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n`;\n", "import type { TooltipRendererResult } from '@ag-grid-community/core';\n\nexport interface SparklineTooltipMeta {\n    pageX: number;\n    pageY: number;\n    position?: {\n        xOffset?: number;\n        yOffset?: number;\n    };\n    container?: HTMLElement;\n}\n\nexport function toTooltipHtml(input: string | TooltipRendererResult, defaults?: TooltipRendererResult): string {\n    if (typeof input === 'string') {\n        return input;\n    }\n\n    defaults = defaults ?? {};\n\n    const {\n        content = defaults.content ?? '',\n        title = defaults.title ?? undefined,\n        color = defaults.color,\n        backgroundColor = defaults.backgroundColor,\n        opacity = defaults.opacity ?? 1,\n    } = input;\n\n    let titleHtml;\n    let contentHtml;\n\n    if (color) {\n        titleHtml = title ? `<span class=\"${TooltipClass}-title\"; style=\"color: ${color}\">${title}</span>` : '';\n        contentHtml = `<span class=\"${TooltipClass}-content\" style=\"color: ${color}\">${content}</span>`;\n    } else {\n        titleHtml = title ? `<span class=\"${TooltipClass}-title\">${title}</span>` : '';\n        contentHtml = `<span class=\"${TooltipClass}-content\">${content}</span>`;\n    }\n\n    let style = `opacity: ${opacity}`;\n    if (backgroundColor) {\n        style += `; background-color: ${backgroundColor.toLowerCase()}`;\n    }\n\n    return `<div class=\"${TooltipClass}\" style=\"${style}\">\n                ${titleHtml}\n                ${contentHtml}\n            </div>`;\n}\n\nconst TooltipClass = 'ag-sparkline-tooltip';\nexport class SparklineTooltip {\n    element: HTMLElement = document.createElement('div');\n\n    constructor() {\n        const tooltipRoot = document.body;\n        tooltipRoot.appendChild(this.element);\n    }\n\n    isVisible(): boolean {\n        const { element } = this;\n        if (element.classList) {\n            return !element.classList.contains(`${TooltipClass}-wrapper-hidden`);\n        }\n\n        // IE11\n        const classes = element.getAttribute('class');\n        if (classes) {\n            return classes.split(' ').indexOf(`${TooltipClass}-wrapper-hidden`) < 0;\n        }\n\n        return false;\n    }\n\n    updateClass(visible?: boolean) {\n        const classList = [`${TooltipClass}-wrapper`];\n\n        if (visible !== true) {\n            classList.push(`${TooltipClass}-wrapper-hidden`);\n        }\n\n        this.element.setAttribute('class', classList.join(' '));\n    }\n\n    show(meta: SparklineTooltipMeta, html?: string) {\n        this.toggle(false);\n\n        const { element } = this;\n\n        if (html !== undefined) {\n            element.innerHTML = html;\n        } else if (!element.innerHTML) {\n            return;\n        }\n\n        const xOffset = meta.position?.xOffset ?? 10;\n        const yOffset = meta.position?.yOffset ?? 0;\n\n        let left = meta.pageX + xOffset;\n        let top = meta.pageY + yOffset;\n\n        const tooltipRect = element.getBoundingClientRect();\n\n        let maxLeft = window.innerWidth - tooltipRect.width;\n\n        if (meta.container) {\n            const containerRect = meta.container.getBoundingClientRect();\n\n            maxLeft = containerRect.left + (containerRect.width - tooltipRect.width);\n        }\n\n        if (left > maxLeft) {\n            left = meta.pageX - element.clientWidth - xOffset;\n        }\n\n        if (typeof scrollX !== 'undefined') {\n            left += scrollX;\n        }\n        if (typeof scrollY !== 'undefined') {\n            top += scrollY;\n        }\n\n        element.style.left = `${Math.round(left)}px`;\n        element.style.top = `${Math.round(top)}px`;\n\n        this.toggle(true);\n    }\n\n    toggle(visible?: boolean) {\n        this.updateClass(visible);\n    }\n\n    destroy() {\n        const { parentNode } = this.element;\n\n        if (parentNode) {\n            parentNode.removeChild(this.element);\n        }\n    }\n}\n", "import { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport type { Point } from '../sparkline';\nimport type { RectNodeDatum } from './barColumnSparkline';\nimport { BarColumnLabelPlacement, BarColumnSparkline } from './barColumnSparkline';\n\nconst { isNumber } = _Util;\nconst { BandScale } = _Scale;\n\ninterface BarNodeDatum extends RectNodeDatum {}\nexport class BarSparkline extends BarColumnSparkline {\n    protected updateYScaleRange() {\n        const { seriesRect, yScale } = this;\n        yScale.range = [0, seriesRect.width];\n    }\n\n    protected updateXScaleRange() {\n        const { xScale, seriesRect, paddingOuter, paddingInner } = this;\n        if (xScale instanceof BandScale) {\n            xScale.range = [0, seriesRect.height];\n            xScale.paddingInner = paddingInner;\n            xScale.paddingOuter = paddingOuter;\n        } else {\n            // last node will be clipped if the scale is not a band scale\n            // subtract last band width from the range so that the last band is not clipped\n\n            const step = this.calculateStep(seriesRect.height);\n\n            // PaddingOuter and paddingInner are fractions of the step with values between 0 and 1\n            const padding = step * paddingOuter; // left and right outer padding\n            this.bandWidth = step * (1 - paddingInner);\n\n            xScale.range = [padding, seriesRect.height - padding - this.bandWidth];\n        }\n    }\n\n    protected override updateAxisLine() {\n        const { yScale, axis, axisLine, seriesRect } = this;\n        const { strokeWidth } = axis;\n\n        axisLine.x1 = 0;\n        axisLine.x2 = 0;\n        axisLine.y1 = 0;\n        axisLine.y2 = seriesRect.height;\n        axisLine.stroke = axis.stroke;\n        axisLine.strokeWidth = strokeWidth + (strokeWidth % 2 === 1 ? 1 : 0);\n\n        const yZero: number = yScale.convert(0);\n        axisLine.translationX = yZero;\n    }\n\n    protected generateNodeData(): BarNodeDatum[] | undefined {\n        const { data, yData, xData, xScale, yScale, fill, stroke, strokeWidth, label } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const {\n            fontStyle: labelFontStyle,\n            fontWeight: labelFontWeight,\n            fontSize: labelFontSize,\n            fontFamily: labelFontFamily,\n            color: labelColor,\n            formatter: labelFormatter,\n            placement: labelPlacement,\n        } = label;\n\n        const nodeData: BarNodeDatum[] = [];\n\n        const yZero = yScale.convert(0);\n        const continuous = !(xScale instanceof BandScale);\n\n        for (let i = 0, n = yData.length; i < n; i++) {\n            let yDatum = yData[i];\n            const xDatum = xData[i];\n            const invalidDatum = yDatum === undefined;\n\n            if (invalidDatum) {\n                yDatum = 0;\n            }\n\n            const y = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum);\n            const x = Math.min(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n\n            const bottom: number = Math.max(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n\n            // if the scale is a band scale, the width of the rects will be the bandwidth, otherwise the width of the rects will be the range / number of items in the data\n            const height = !continuous ? xScale.bandwidth : this.bandWidth;\n\n            const width = bottom - x;\n\n            const midPoint = {\n                x: yZero,\n                y: y,\n            };\n\n            let labelText: string;\n            if (labelFormatter) {\n                labelText = labelFormatter({ value: yDatum });\n            } else {\n                labelText = yDatum !== undefined && isNumber(yDatum) ? this.formatLabelValue(yDatum) : '';\n            }\n\n            const labelY: number = y + height / 2;\n            let labelX: number;\n\n            const labelTextBaseline: CanvasTextBaseline = 'middle';\n            let labelTextAlign: CanvasTextAlign;\n\n            const isPositiveY = yDatum !== undefined && yDatum >= 0;\n            const labelPadding = 4;\n\n            if (labelPlacement === BarColumnLabelPlacement.Center) {\n                labelX = x + width / 2;\n                labelTextAlign = 'center';\n            } else if (labelPlacement === BarColumnLabelPlacement.OutsideEnd) {\n                labelX = x + (isPositiveY ? width + labelPadding : -labelPadding);\n                labelTextAlign = isPositiveY ? 'start' : 'end';\n            } else if (labelPlacement === BarColumnLabelPlacement.InsideEnd) {\n                labelX = x + (isPositiveY ? width - labelPadding : labelPadding);\n                labelTextAlign = isPositiveY ? 'end' : 'start';\n\n                const textSize = _Scene.Text.getTextSize(labelText, labelFontFamily);\n                const textWidth = textSize.width || 20;\n                const positiveBoundary = yZero + textWidth;\n                const negativeBoundary = yZero - textWidth;\n                const exceedsBoundaries =\n                    (isPositiveY && labelX < positiveBoundary) || (!isPositiveY && labelX > negativeBoundary);\n\n                if (exceedsBoundaries) {\n                    // if labelX exceeds the boundary, labels should be positioned at `insideBase`.\n                    labelX = yZero + labelPadding * (isPositiveY ? 1 : -1);\n                    labelTextAlign = isPositiveY ? 'start' : 'end';\n                }\n            } else {\n                // if labelPlacement === BarColumnLabelPlacement.InsideBase\n                labelX = yZero + labelPadding * (isPositiveY ? 1 : -1);\n                labelTextAlign = isPositiveY ? 'start' : 'end';\n            }\n\n            nodeData.push({\n                x,\n                y,\n                width,\n                height,\n                fill,\n                stroke,\n                strokeWidth,\n                seriesDatum: { x: xDatum, y: invalidDatum ? undefined : yDatum },\n                point: midPoint,\n                label: {\n                    x: labelX,\n                    y: labelY,\n                    text: labelText,\n                    fontStyle: labelFontStyle,\n                    fontWeight: labelFontWeight,\n                    fontSize: labelFontSize,\n                    fontFamily: labelFontFamily,\n                    textAlign: labelTextAlign,\n                    textBaseline: labelTextBaseline,\n                    fill: labelColor,\n                },\n            });\n        }\n        return nodeData;\n    }\n\n    protected override getDistance(p1: Point, p2: Point): number {\n        return Math.abs(p1.y - p2.y);\n    }\n}\n", "import type { ColumnFormat, ColumnFormatterParams } from '@ag-grid-community/core';\nimport type { FontStyle, FontWeight } from 'ag-charts-community';\nimport { _Scene, _Util } from 'ag-charts-community';\n\nimport { Label } from '../label/label';\nimport type { SeriesNodeDatum } from '../sparkline';\nimport { Sparkline, ZINDICIES } from '../sparkline';\nimport { toTooltipHtml } from '../tooltip/sparklineTooltip';\n\nconst { extent } = _Util;\n\nexport interface RectNodeDatum extends SeriesNodeDatum {\n    readonly x: number;\n    readonly y: number;\n    readonly width: number;\n    readonly height: number;\n    readonly fill?: string;\n    readonly stroke?: string;\n    readonly strokeWidth: number;\n    readonly label?: {\n        readonly x: number;\n        readonly y: number;\n        readonly text: string;\n        readonly fontStyle?: FontStyle;\n        readonly fontWeight?: FontWeight;\n        readonly fontSize: number;\n        readonly fontFamily: string;\n        readonly textAlign: CanvasTextAlign;\n        readonly textBaseline: CanvasTextBaseline;\n        readonly fill: string;\n    };\n}\n\nenum BarColumnNodeTag {\n    Rect,\n    Label,\n}\n\nexport enum BarColumnLabelPlacement {\n    InsideBase = 'insideBase',\n    InsideEnd = 'insideEnd',\n    Center = 'center',\n    OutsideEnd = 'outsideEnd',\n}\n\nexport class BarColumnLabel extends Label {\n    formatter?: (params: { value: number | undefined }) => string = undefined;\n    placement = BarColumnLabelPlacement.InsideEnd;\n}\n\nexport abstract class BarColumnSparkline extends Sparkline {\n    fill: string = 'rgb(124, 181, 236)';\n    stroke: string = 'silver';\n    strokeWidth: number = 0;\n    paddingInner: number = 0.1;\n    paddingOuter: number = 0.2;\n    valueAxisDomain: [number, number] | undefined = undefined;\n    formatter?: (params: ColumnFormatterParams) => ColumnFormat = undefined;\n\n    protected axisLine: _Scene.Line = new _Scene.Line();\n    protected bandWidth: number = 0;\n\n    private sparklineGroup: _Scene.Group = new _Scene.Group();\n    private rectGroup: _Scene.Group = new _Scene.Group();\n    private labelGroup: _Scene.Group = new _Scene.Group();\n\n    private rectSelection: _Scene.Selection<_Scene.Rect, RectNodeDatum> = _Scene.Selection.select(\n        this.rectGroup,\n        _Scene.Rect\n    );\n    private labelSelection: _Scene.Selection<_Scene.Text, RectNodeDatum> = _Scene.Selection.select(\n        this.labelGroup,\n        _Scene.Text\n    );\n\n    private nodeSelectionData: RectNodeDatum[] = [];\n\n    readonly label = new BarColumnLabel();\n\n    constructor() {\n        super();\n\n        this.rootGroup.append(this.sparklineGroup);\n\n        this.rectGroup.zIndex = ZINDICIES.SERIES_FILL_ZINDEX;\n        this.axisLine.zIndex = ZINDICIES.AXIS_LINE_ZINDEX;\n        this.labelGroup.zIndex = ZINDICIES.SERIES_LABEL_ZINDEX;\n\n        this.sparklineGroup.append([this.rectGroup, this.axisLine, this.labelGroup]);\n\n        this.axisLine.lineCap = 'round';\n\n        this.label.enabled = false;\n    }\n\n    protected abstract override generateNodeData(): RectNodeDatum[] | undefined;\n    protected abstract override updateYScaleRange(): void;\n    protected abstract override updateXScaleRange(): void;\n\n    protected override getNodeData(): RectNodeDatum[] {\n        return this.nodeSelectionData;\n    }\n\n    protected override update(): void {\n        this.updateSelections();\n        this.updateNodes();\n    }\n\n    protected updateSelections(): void {\n        const nodeData = this.generateNodeData();\n\n        if (!nodeData) {\n            return;\n        }\n\n        this.nodeSelectionData = nodeData;\n        this.updateRectSelection(nodeData);\n        this.updateLabelSelection(nodeData);\n    }\n\n    protected override updateNodes(): void {\n        this.updateRectNodes();\n        this.updateLabelNodes();\n    }\n\n    protected calculateStep(range: number): number {\n        const { xScale, paddingInner, paddingOuter, smallestInterval } = this;\n\n        // calculate step\n        const domainLength = xScale.domain[1] - xScale.domain[0];\n        const intervals = domainLength / (smallestInterval?.x ?? 1) + 1;\n\n        // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.\n        // Allow a maximum of 50 bands to ensure the step (width of individual bands + padding) does not fall below a certain number of pixels.\n        // If the number of intervals exceeds 50, calculate the step for 50 bands within the given range.\n        // This means there could be some overlap of the bands in the sparkline.\n        const maxBands = 50;\n        const bands = Math.min(intervals, maxBands);\n        const gaps = bands - 1; // number of gaps (padding between bands)\n\n        const step = range / Math.max(1, 2 * paddingOuter + gaps * paddingInner + bands); // step width is a combination of band width and gap width\n\n        return step;\n    }\n\n    protected override updateYScaleDomain(): void {\n        const { yScale, yData, valueAxisDomain } = this;\n\n        const yMinMax = extent(yData as number[]);\n\n        let yMin = 0;\n        let yMax = 1;\n\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0] as number;\n            yMax = this.max = yMinMax[1] as number;\n        }\n\n        // if yMin is positive, set yMin to 0\n        yMin = yMin < 0 ? yMin : 0;\n\n        // if yMax is negative, set yMax to 0\n        yMax = yMax < 0 ? 0 : yMax;\n\n        if (valueAxisDomain) {\n            if (valueAxisDomain[1] < yMax) {\n                valueAxisDomain[1] = yMax;\n            }\n            if (valueAxisDomain[0] > yMin) {\n                valueAxisDomain[0] = yMin;\n            }\n        }\n\n        yScale.domain = valueAxisDomain ? valueAxisDomain : [yMin, yMax];\n    }\n\n    private updateRectSelection(selectionData: RectNodeDatum[]): void {\n        this.rectSelection.update(selectionData);\n    }\n\n    protected updateRectNodes(): void {\n        const { highlightedDatum, formatter: nodeFormatter, fill, stroke, strokeWidth } = this;\n        const { fill: highlightFill, stroke: highlightStroke, strokeWidth: highlightStrokeWidth } = this.highlightStyle;\n\n        this.rectSelection.each((node, datum, index) => {\n            const highlighted = datum === highlightedDatum;\n            const nodeFill = highlighted && highlightFill !== undefined ? highlightFill : fill;\n            const nodeStroke = highlighted && highlightStroke !== undefined ? highlightStroke : stroke;\n            const nodeStrokeWidth =\n                highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : strokeWidth;\n\n            let nodeFormat: ColumnFormat | undefined;\n\n            const { x, y, width, height, seriesDatum } = datum;\n\n            if (nodeFormatter) {\n                const first = index === 0;\n                const last = index === this.nodeSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n\n                nodeFormat = nodeFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    width: width,\n                    height: height,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: nodeFill,\n                    stroke: nodeStroke,\n                    strokeWidth: nodeStrokeWidth,\n                    highlighted,\n                });\n            }\n\n            node.fill = (nodeFormat && nodeFormat.fill) || nodeFill;\n            node.stroke = (nodeFormat && nodeFormat.stroke) || nodeStroke;\n            node.strokeWidth = (nodeFormat && nodeFormat.strokeWidth) || nodeStrokeWidth;\n\n            node.x = node.y = 0;\n            node.width = width;\n            node.height = height;\n            node.visible = node.height > 0;\n\n            node.translationX = x;\n            node.translationY = y;\n\n            // shifts bars upwards?\n            // node.crisp = true;\n        });\n    }\n\n    private updateLabelSelection(selectionData: RectNodeDatum[]): void {\n        this.labelSelection.update(selectionData, (text) => {\n            text.tag = BarColumnNodeTag.Label;\n            text.pointerEvents = _Scene.PointerEvents.None;\n        });\n    }\n\n    private updateLabelNodes(): void {\n        const {\n            label: { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color },\n        } = this;\n        this.labelSelection.each((text, datum) => {\n            const label = datum.label;\n\n            if (label && labelEnabled) {\n                text.fontStyle = fontStyle;\n                text.fontWeight = fontWeight;\n                text.fontSize = fontSize;\n                text.fontFamily = fontFamily;\n                text.textAlign = label.textAlign;\n                text.textBaseline = label.textBaseline;\n                text.text = label.text;\n                text.x = label.x;\n                text.y = label.y;\n                text.fill = color;\n                text.visible = true;\n            } else {\n                text.visible = false;\n            }\n        });\n    }\n\n    getTooltipHtml(datum: SeriesNodeDatum): string | undefined {\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n\n        const defaults = {\n            content,\n            title,\n        };\n\n        const tooltipRenderer = this.processedOptions?.tooltip?.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(\n                tooltipRenderer({\n                    context: this.context,\n                    datum: seriesDatum,\n                    yValue,\n                    xValue,\n                }),\n                defaults\n            );\n        }\n\n        return toTooltipHtml(defaults);\n    }\n\n    protected formatLabelValue(value: number): string {\n        return value % 1 !== 0 ? value.toFixed(1) : value.toFixed(0);\n    }\n}\n", "import type { FontStyle, FontWeight } from 'ag-charts-community';\n\nexport class Label {\n    enabled = true;\n    fontSize = 8;\n    fontFamily = 'Verdana, sans-serif';\n    fontStyle?: FontStyle = undefined;\n    fontWeight?: FontWeight = undefined;\n    color = 'rgba(70, 70, 70, 1)';\n}\n", "import { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport type { RectNodeDatum } from './barColumnSparkline';\nimport { BarColumnLabelPlacement, BarColumnSparkline } from './barColumnSparkline';\n\nconst { isNumber } = _Util;\nconst { BandScale } = _Scale;\n\ninterface ColumnNodeDatum extends RectNodeDatum {}\nexport class ColumnSparkline extends BarColumnSparkline {\n    protected updateYScaleRange() {\n        const { seriesRect, yScale } = this;\n        yScale.range = [seriesRect.height, 0];\n    }\n\n    protected updateXScaleRange() {\n        const { xScale, seriesRect, paddingOuter, paddingInner } = this;\n        if (xScale instanceof BandScale) {\n            xScale.range = [0, seriesRect.width];\n            xScale.paddingInner = paddingInner;\n            xScale.paddingOuter = paddingOuter;\n        } else {\n            // last node will be clipped if the scale is not a band scale\n            // subtract last band width from the range so that the last band is not clipped\n\n            const step = this.calculateStep(seriesRect.width);\n\n            // PaddingOuter and paddingInner are fractions of the step with values between 0 and 1\n            const padding = step * paddingOuter; // left and right outer padding\n            this.bandWidth = step * (1 - paddingInner);\n\n            xScale.range = [padding, seriesRect.width - padding - this.bandWidth];\n        }\n    }\n\n    protected override updateAxisLine() {\n        const { yScale, axis, axisLine, seriesRect } = this;\n        const { strokeWidth } = axis;\n\n        axisLine.x1 = 0;\n        axisLine.x2 = seriesRect.width;\n        axisLine.y1 = 0;\n        axisLine.y2 = 0;\n        axisLine.stroke = axis.stroke;\n        axisLine.strokeWidth = strokeWidth + (strokeWidth % 2 === 1 ? 1 : 0);\n\n        const yZero: number = yScale.convert(0);\n        axisLine.translationY = yZero;\n    }\n\n    protected generateNodeData(): ColumnNodeDatum[] | undefined {\n        const { data, yData, xData, xScale, yScale, fill, stroke, strokeWidth, label } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const {\n            fontStyle: labelFontStyle,\n            fontWeight: labelFontWeight,\n            fontSize: labelFontSize,\n            fontFamily: labelFontFamily,\n            color: labelColor,\n            formatter: labelFormatter,\n            placement: labelPlacement,\n        } = label;\n\n        const nodeData: ColumnNodeDatum[] = [];\n\n        const yZero = yScale.convert(0);\n        const continuous = !(xScale instanceof BandScale);\n\n        for (let i = 0, n = yData.length; i < n; i++) {\n            let yDatum = yData[i];\n            const xDatum = xData[i];\n            const invalidDatum = yDatum === undefined;\n\n            if (invalidDatum) {\n                yDatum = 0;\n            }\n\n            const y = Math.min(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum);\n\n            const bottom: number = Math.max(yDatum === undefined ? NaN : yScale.convert(yDatum), yZero);\n\n            // if the scale is a band scale, the width of the rects will be the bandwidth, otherwise the width of the rects will be the range / number of items in the data\n            const width = !continuous ? xScale.bandwidth : this.bandWidth;\n\n            const height = bottom - y;\n\n            const midPoint = {\n                x: x + width / 2,\n                y: yZero,\n            };\n\n            let labelText: string;\n            if (labelFormatter) {\n                labelText = labelFormatter({ value: yDatum });\n            } else {\n                labelText = yDatum !== undefined && isNumber(yDatum) ? this.formatLabelValue(yDatum) : '';\n            }\n\n            const labelX: number = x + width / 2;\n            let labelY: number;\n\n            const labelTextAlign: CanvasTextAlign = 'center';\n            let labelTextBaseline: CanvasTextBaseline;\n\n            const isPositiveY = yDatum !== undefined && yDatum >= 0;\n            const labelPadding = 2;\n\n            if (labelPlacement === BarColumnLabelPlacement.Center) {\n                labelY = y + height / 2;\n                labelTextBaseline = 'middle';\n            } else if (labelPlacement === BarColumnLabelPlacement.OutsideEnd) {\n                labelY = y + (isPositiveY ? -labelPadding : height + labelPadding);\n                labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n            } else if (labelPlacement === BarColumnLabelPlacement.InsideEnd) {\n                labelY = y + (isPositiveY ? labelPadding : height - labelPadding);\n                labelTextBaseline = isPositiveY ? 'top' : 'bottom';\n\n                const textSize = _Scene.Text.getTextSize(labelText, labelFontFamily);\n                const textHeight = textSize.height || 10;\n                const positiveBoundary = yZero - textHeight;\n                const negativeBoundary = yZero + textHeight;\n                const exceedsBoundaries =\n                    (isPositiveY && labelY > positiveBoundary) || (!isPositiveY && labelY < negativeBoundary);\n\n                if (exceedsBoundaries) {\n                    // if labelY exceeds the y boundary, labels should be positioned at the insideBase\n                    labelY = yZero + labelPadding * (isPositiveY ? -1 : 1);\n                    labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n                }\n            } else {\n                // if labelPlacement === BarColumnLabelPlacement.InsideBase\n                labelY = yZero + labelPadding * (isPositiveY ? -1 : 1);\n                labelTextBaseline = isPositiveY ? 'bottom' : 'top';\n            }\n\n            nodeData.push({\n                x,\n                y,\n                width,\n                height,\n                fill,\n                stroke,\n                strokeWidth,\n                seriesDatum: { x: xDatum, y: invalidDatum ? undefined : yDatum },\n                point: midPoint,\n                label: {\n                    x: labelX,\n                    y: labelY,\n                    text: labelText,\n                    fontStyle: labelFontStyle,\n                    fontWeight: labelFontWeight,\n                    fontSize: labelFontSize,\n                    fontFamily: labelFontFamily,\n                    textAlign: labelTextAlign,\n                    textBaseline: labelTextBaseline,\n                    fill: labelColor,\n                },\n            });\n        }\n        return nodeData;\n    }\n}\n", "import type { CrosshairLineOptions, MarkerFormat, MarkerFormatterParams } from '@ag-grid-community/core';\nimport { _Scale, _Scene, _Util } from 'ag-charts-community';\n\nimport { getLineDash } from '../../util/lineDash';\nimport { getMarker } from '../marker/markerFactory';\nimport type { Point, SeriesNodeDatum } from '../sparkline';\nimport { Sparkline, ZINDICIES } from '../sparkline';\nimport { toTooltipHtml } from '../tooltip/sparklineTooltip';\n\nconst { extent } = _Util;\nconst { BandScale } = _Scale;\n\ninterface LineNodeDatum extends SeriesNodeDatum {\n    readonly point: Point;\n}\n\nclass SparklineMarker {\n    enabled: boolean = true;\n    shape: string = 'circle';\n    size: number = 0;\n    fill?: string = 'rgb(124, 181, 236)';\n    stroke?: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n    formatter?: (params: MarkerFormatterParams) => MarkerFormat = undefined;\n}\n\nclass SparklineLine {\n    stroke: string = 'rgb(124, 181, 236)';\n    strokeWidth: number = 1;\n}\n\nclass SparklineCrosshairs {\n    xLine: CrosshairLineOptions = {\n        enabled: true,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n    yLine: CrosshairLineOptions = {\n        enabled: false,\n        stroke: 'rgba(0,0,0, 0.54)',\n        strokeWidth: 1,\n        lineDash: 'solid',\n        lineCap: undefined,\n    };\n}\n\nexport class LineSparkline extends Sparkline {\n    protected linePath: _Scene.Path = new _Scene.Path();\n    protected xCrosshairLine: _Scene.Line = new _Scene.Line();\n    protected yCrosshairLine: _Scene.Line = new _Scene.Line();\n\n    private lineSparklineGroup: _Scene.Group = new _Scene.Group();\n    private markers: _Scene.Group = new _Scene.Group();\n    private markerSelection: _Scene.Selection<_Scene.Marker, LineNodeDatum> = _Scene.Selection.select(\n        this.markers,\n        () => this.markerFactory()\n    );\n    private markerSelectionData: LineNodeDatum[] = [];\n\n    readonly marker = new SparklineMarker();\n    readonly line = new SparklineLine();\n    readonly crosshairs = new SparklineCrosshairs();\n\n    constructor() {\n        super();\n        this.rootGroup.append(this.lineSparklineGroup);\n\n        this.linePath.zIndex = ZINDICIES.SERIES_STROKE_ZINDEX;\n        this.xCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.yCrosshairLine.zIndex = ZINDICIES.CROSSHAIR_ZINDEX;\n        this.markers.zIndex = ZINDICIES.SERIES_MARKERS_ZINDEX;\n\n        this.lineSparklineGroup.append([this.linePath, this.xCrosshairLine, this.yCrosshairLine, this.markers]);\n    }\n\n    protected override getNodeData(): LineNodeDatum[] {\n        return this.markerSelectionData;\n    }\n\n    protected markerFactory(): _Scene.Marker {\n        const { shape } = this.marker;\n        const MarkerShape = getMarker(shape);\n        return new MarkerShape();\n    }\n\n    /**\n     * If marker shape is changed, this method should be called to remove the previous marker nodes selection.\n     */\n    private onMarkerShapeChange() {\n        this.markerSelection = this.markerSelection.clear();\n        this.scheduleLayout();\n    }\n\n    protected override update(): void {\n        const nodeData = this.generateNodeData();\n\n        if (!nodeData) {\n            return;\n        }\n\n        this.markerSelectionData = nodeData;\n\n        this.updateSelection(nodeData);\n        this.updateNodes();\n\n        this.updateLine();\n    }\n\n    protected override updateYScaleDomain(): void {\n        const { yData, yScale } = this;\n\n        const yMinMax = extent(yData as number[]);\n\n        let yMin = 0;\n        let yMax = 1;\n\n        if (yMinMax !== undefined) {\n            yMin = this.min = yMinMax[0] as number;\n            yMax = this.max = yMinMax[1] as number;\n        }\n\n        if (yMin === yMax) {\n            // if all values in the data are the same, yMin and yMax will be equal, need to adjust the domain with some padding\n            const padding = Math.abs(yMin * 0.01);\n            yMin -= padding;\n            yMax += padding;\n        }\n\n        yScale.domain = [yMin, yMax];\n    }\n\n    protected override generateNodeData(): LineNodeDatum[] | undefined {\n        const { data, yData, xData, xScale, yScale } = this;\n\n        if (!data) {\n            return;\n        }\n\n        const continuous = !(xScale instanceof BandScale);\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n\n        const nodeData: LineNodeDatum[] = [];\n\n        for (let i = 0; i < yData.length; i++) {\n            const yDatum = yData[i];\n            const xDatum = xData[i];\n\n            if (yDatum == undefined) {\n                continue;\n            }\n\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n\n            nodeData.push({\n                seriesDatum: { x: xDatum, y: yDatum },\n                point: { x, y },\n            });\n        }\n        return nodeData;\n    }\n\n    private updateSelection(selectionData: LineNodeDatum[]): void {\n        this.markerSelection.update(selectionData);\n    }\n\n    protected override updateNodes(): void {\n        const { highlightedDatum, highlightStyle, marker } = this;\n        const {\n            size: highlightSize,\n            fill: highlightFill,\n            stroke: highlightStroke,\n            strokeWidth: highlightStrokeWidth,\n        } = highlightStyle;\n        const markerFormatter = marker.formatter;\n\n        this.markerSelection.each((node, datum, index) => {\n            const highlighted = datum === highlightedDatum;\n            const markerFill = highlighted && highlightFill !== undefined ? highlightFill : marker.fill;\n            const markerStroke = highlighted && highlightStroke !== undefined ? highlightStroke : marker.stroke;\n            const markerStrokeWidth =\n                highlighted && highlightStrokeWidth !== undefined ? highlightStrokeWidth : marker.strokeWidth;\n            const markerSize = highlighted && highlightSize !== undefined ? highlightSize : marker.size;\n\n            let markerFormat: MarkerFormat | undefined;\n\n            const { seriesDatum, point } = datum;\n\n            if (markerFormatter) {\n                const first = index === 0;\n                const last = index === this.markerSelectionData.length - 1;\n                const min = seriesDatum.y === this.min;\n                const max = seriesDatum.y === this.max;\n\n                markerFormat = markerFormatter({\n                    datum,\n                    xValue: seriesDatum.x,\n                    yValue: seriesDatum.y,\n                    min,\n                    max,\n                    first,\n                    last,\n                    fill: markerFill,\n                    stroke: markerStroke,\n                    strokeWidth: markerStrokeWidth,\n                    size: markerSize,\n                    highlighted,\n                });\n            }\n\n            node.size = markerFormat && markerFormat.size != undefined ? markerFormat.size : markerSize;\n            node.fill = markerFormat && markerFormat.fill != undefined ? markerFormat.fill : markerFill;\n            node.stroke = markerFormat && markerFormat.stroke != undefined ? markerFormat.stroke : markerStroke;\n            node.strokeWidth =\n                markerFormat && markerFormat.strokeWidth != undefined ? markerFormat.strokeWidth : markerStrokeWidth;\n\n            node.translationX = point.x;\n            node.translationY = point.y;\n            node.visible =\n                markerFormat && markerFormat.enabled != undefined\n                    ? markerFormat.enabled\n                    : marker.enabled && node.size > 0;\n        });\n    }\n\n    protected updateLine(): void {\n        const { linePath, yData, xData, xScale, yScale, line } = this;\n\n        const path = linePath.path;\n        path.clear();\n\n        if (yData.length < 2) {\n            return;\n        }\n\n        const continuous = !(xScale instanceof BandScale);\n        const n = yData.length;\n        const offsetX = !continuous ? xScale.bandwidth / 2 : 0;\n        let moveTo = true;\n\n        for (let i = 0; i < n; i++) {\n            const xDatum = xData[i];\n            const yDatum = yData[i];\n\n            const x = xScale.convert(continuous ? xScale.toDomain(xDatum) : xDatum) + offsetX;\n            const y = yDatum === undefined ? NaN : yScale.convert(yDatum);\n\n            if (yDatum == undefined) {\n                moveTo = true;\n            } else {\n                if (moveTo) {\n                    path.moveTo(x, y);\n                    moveTo = false;\n                } else {\n                    path.lineTo(x, y);\n                }\n            }\n        }\n\n        linePath.fill = undefined;\n        linePath.stroke = line.stroke;\n        linePath.strokeWidth = line.strokeWidth;\n    }\n\n    protected override updateXCrosshairLine(): void {\n        const {\n            yScale,\n            xCrosshairLine,\n            highlightedDatum,\n            crosshairs: { xLine },\n        } = this;\n\n        if (!xLine.enabled || highlightedDatum == undefined) {\n            xCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        xCrosshairLine.y1 = yScale.range[0];\n        xCrosshairLine.y2 = yScale.range[1];\n        xCrosshairLine.x1 = xCrosshairLine.x2 = 0;\n        xCrosshairLine.stroke = xLine.stroke;\n        xCrosshairLine.strokeWidth = xLine.strokeWidth ?? 1;\n\n        xCrosshairLine.lineCap = xLine.lineCap === 'round' || xLine.lineCap === 'square' ? xLine.lineCap : undefined;\n\n        const { lineDash } = xLine;\n        xCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(xCrosshairLine.lineCap, xLine.lineDash as string);\n\n        xCrosshairLine.translationX = highlightedDatum.point!.x;\n    }\n\n    protected override updateYCrosshairLine() {\n        const {\n            xScale,\n            yCrosshairLine,\n            highlightedDatum,\n            crosshairs: { yLine },\n        } = this;\n\n        if (!yLine.enabled || highlightedDatum == undefined) {\n            yCrosshairLine.strokeWidth = 0;\n            return;\n        }\n\n        yCrosshairLine.x1 = xScale.range[0];\n        yCrosshairLine.x2 = xScale.range[1];\n        yCrosshairLine.y1 = yCrosshairLine.y2 = 0;\n        yCrosshairLine.stroke = yLine.stroke;\n        yCrosshairLine.strokeWidth = yLine.strokeWidth ?? 1;\n\n        yCrosshairLine.lineCap = yLine.lineCap === 'round' || yLine.lineCap === 'square' ? yLine.lineCap : undefined;\n\n        const { lineDash } = yLine;\n        yCrosshairLine.lineDash = Array.isArray(lineDash)\n            ? lineDash\n            : getLineDash(yCrosshairLine.lineCap, yLine.lineDash as string);\n\n        yCrosshairLine.translationY = highlightedDatum.point!.y;\n    }\n\n    getTooltipHtml(datum: SeriesNodeDatum): string | undefined {\n        const { dataType } = this;\n        const { seriesDatum } = datum;\n        const yValue = seriesDatum.y;\n        const xValue = seriesDatum.x;\n        const content = this.formatNumericDatum(yValue);\n        const title = dataType === 'array' || dataType === 'object' ? this.formatDatum(xValue) : undefined;\n\n        const defaults = {\n            content,\n            title,\n        };\n\n        const tooltipRenderer = this.processedOptions?.tooltip?.renderer;\n        if (tooltipRenderer) {\n            return toTooltipHtml(\n                tooltipRenderer({\n                    context: this.context,\n                    datum: seriesDatum,\n                    yValue,\n                    xValue,\n                }),\n                defaults\n            );\n        }\n\n        return toTooltipHtml(defaults);\n    }\n}\n", "import type { NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport { SparklineTooltip } from '../sparkline/tooltip/sparklineTooltip';\n\n/**\n * This 'bean' creates a single sparkline tooltip that is bound to the grid lifecycle.\n */\nexport class SparklineTooltipSingleton extends BeanStub implements NamedBean {\n    beanName = 'sparklineTooltipSingleton' as const;\n\n    private tooltip!: SparklineTooltip;\n\n    public postConstruct(): void {\n        this.tooltip = new SparklineTooltip();\n    }\n\n    public getSparklineTooltip() {\n        return this.tooltip;\n    }\n\n    public override destroy(): void {\n        if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n        super.destroy();\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { AggregationComp } from './statusBar/providedPanels/aggregationComp';\nimport { FilteredRowsComp } from './statusBar/providedPanels/filteredRowsComp';\nimport { SelectedRowsComp } from './statusBar/providedPanels/selectedRowsComp';\nimport { TotalAndFilteredRowsComp } from './statusBar/providedPanels/totalAndFilteredRowsComp';\nimport { TotalRowsComp } from './statusBar/providedPanels/totalRowsComp';\nimport { getStatusPanel } from './statusBar/statusBarApi';\nimport { StatusBarService } from './statusBar/statusBarService';\nimport { VERSION } from './version';\n\nexport const StatusBarCoreModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.StatusBarModule}-core`,\n    beans: [StatusBarService],\n    userComponents: [\n        { name: 'agAggregationComponent', classImp: AggregationComp },\n        { name: 'agSelectedRowCountComponent', classImp: SelectedRowsComp },\n        { name: 'agTotalRowCountComponent', classImp: TotalRowsComp },\n        { name: 'agFilteredRowCountComponent', classImp: FilteredRowsComp },\n        { name: 'agTotalAndFilteredRowCountComponent', classImp: TotalAndFilteredRowsComp },\n    ],\n    dependantModules: [EnterpriseCoreModule],\n};\n\nexport const StatusBarApiModule: Module = {\n    version: VERSION,\n    moduleName: `${ModuleNames.StatusBarModule}-api`,\n    apiFunctions: {\n        getStatusPanel,\n    },\n    dependantModules: [StatusBarCoreModule],\n};\n\nexport const StatusBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.StatusBarModule,\n    dependantModules: [StatusBarCoreModule, StatusBarApiModule],\n};\n", "import type {\n    AgColumn,\n    AggregationStatusPanelAggFunc,\n    AggregationStatusPanelParams,\n    BeanCollection,\n    CellNavigationService,\n    CellPositionUtils,\n    IRangeService,\n    IRowModel,\n    IStatusPanelComp,\n    RowPosition,\n    RowPositionUtils,\n    ValueService,\n} from '@ag-grid-community/core';\nimport {\n    Component,\n    RefPlaceholder,\n    _exists,\n    _formatNumberTwoDecimalPlacesAndCommas,\n    _missing,\n    _missingOrEmpty,\n    _warnOnce,\n} from '@ag-grid-community/core';\n\nimport type { AgNameValue } from './agNameValue';\nimport { AgNameValueSelector } from './agNameValue';\n\nexport class AggregationComp extends Component implements IStatusPanelComp {\n    private valueService: ValueService;\n    private cellNavigationService: CellNavigationService;\n    private rowModel: IRowModel;\n    private cellPositionUtils: CellPositionUtils;\n    private rowPositionUtils: RowPositionUtils;\n    private rangeService?: IRangeService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.valueService = beans.valueService;\n        this.cellNavigationService = beans.cellNavigationService;\n        this.rowModel = beans.rowModel;\n        this.cellPositionUtils = beans.cellPositionUtils;\n        this.rowPositionUtils = beans.rowPositionUtils;\n        this.rangeService = beans.rangeService;\n    }\n\n    private readonly sumAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly countAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly minAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly maxAggregationComp: AgNameValue = RefPlaceholder;\n    private readonly avgAggregationComp: AgNameValue = RefPlaceholder;\n\n    private params!: AggregationStatusPanelParams;\n\n    constructor() {\n        super(\n            /* html */ `<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value data-ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value data-ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`,\n            [AgNameValueSelector]\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n\n    public postConstruct(): void {\n        if (!this.isValidRowModel()) {\n            _warnOnce(`agAggregationComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.avgAggregationComp.setLabel('avg', 'Average');\n        this.countAggregationComp.setLabel('count', 'Count');\n        this.minAggregationComp.setLabel('min', 'Min');\n        this.maxAggregationComp.setLabel('max', 'Max');\n        this.sumAggregationComp.setLabel('sum', 'Sum');\n\n        this.addManagedEventListeners({\n            rangeSelectionChanged: this.onRangeSelectionChanged.bind(this),\n            modelUpdated: this.onRangeSelectionChanged.bind(this),\n        });\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.rowModel.getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    public init(params: AggregationStatusPanelParams) {\n        this.params = params;\n    }\n\n    public refresh(params: AggregationStatusPanelParams): boolean {\n        this.params = params;\n        this.onRangeSelectionChanged();\n        return true;\n    }\n\n    private setAggregationComponentValue(\n        aggFuncName: AggregationStatusPanelAggFunc,\n        value: number | null,\n        visible: boolean\n    ) {\n        const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n        if (_exists(statusBarValueComponent) && statusBarValueComponent) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n            const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n            statusBarValueComponent.setValue(\n                _formatNumberTwoDecimalPlacesAndCommas(value!, thousandSeparator, decimalSeparator)\n            );\n            statusBarValueComponent.setDisplayed(visible);\n        } else {\n            // might have previously been visible, so hide now\n            this.getAggregationValueComponent(aggFuncName)?.setDisplayed(false);\n        }\n    }\n\n    private getAllowedAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): AgNameValue | null {\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        const { aggFuncs } = this.params;\n        if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n            return this.getAggregationValueComponent(aggFuncName);\n        }\n\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return null;\n    }\n\n    private getAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): AgNameValue {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        const refComponentName = `${aggFuncName}AggregationComp`;\n        return (this as any)[refComponentName];\n    }\n\n    private onRangeSelectionChanged(): void {\n        const cellRanges = this.rangeService?.getCellRanges();\n\n        let sum = 0;\n        let count = 0;\n        let numberCount = 0;\n        let min: number | null = null;\n        let max: number | null = null;\n\n        const cellsSoFar: any = {};\n\n        if (cellRanges && !_missingOrEmpty(cellRanges) && this.rangeService) {\n            for (let i = 0; i < cellRanges.length; i++) {\n                const cellRange = cellRanges[i];\n\n                let currentRow: RowPosition | null = this.rangeService.getRangeStartRow(cellRange);\n                const lastRow = this.rangeService.getRangeEndRow(cellRange);\n\n                while (true) {\n                    const finishedAllRows =\n                        _missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n                    if (finishedAllRows || !currentRow || !cellRange.columns) {\n                        break;\n                    }\n\n                    cellRange.columns.forEach((col: AgColumn) => {\n                        if (currentRow === null) {\n                            return;\n                        }\n\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        const cellId = this.cellPositionUtils.createId({\n                            rowPinned: currentRow.rowPinned,\n                            column: col,\n                            rowIndex: currentRow.rowIndex,\n                        });\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n\n                        const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n                        if (_missing(rowNode)) {\n                            return;\n                        }\n\n                        let value = this.valueService.getValue(col, rowNode);\n\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (_missing(value) || value === '') {\n                            return;\n                        }\n\n                        count++;\n\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (typeof value === 'object' && 'value' in value) {\n                            value = value.value;\n\n                            // ensure that the new value wouldn't have been skipped by the previous check\n                            if (value === '') {\n                                return;\n                            }\n                        }\n\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n\n                        if (typeof value === 'number' && !isNaN(value)) {\n                            sum += value;\n\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n\n                            numberCount++;\n                        }\n                    });\n\n                    currentRow = this.cellNavigationService.getRowBelow(currentRow);\n                }\n            }\n        }\n\n        const gotResult = count > 1;\n        const gotNumberResult = numberCount > 1;\n\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', sum / numberCount, gotNumberResult);\n    }\n}\n", "import type { ComponentSelector } from '@ag-grid-community/core';\nimport { Component, RefPlaceholder } from '@ag-grid-community/core';\n\nexport class AgNameValue extends Component {\n    private readonly eLabel: HTMLElement = RefPlaceholder;\n    private readonly eValue: HTMLElement = RefPlaceholder;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-status-name-value\">\n            <span data-ref=\"eLabel\"></span>:&nbsp;\n            <span data-ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`);\n    }\n\n    public setLabel(key: string, defaultValue: string): void {\n        // we want to hide until the first value comes in\n        this.setDisplayed(false);\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n    }\n\n    public setValue(value: any): void {\n        this.eValue.innerHTML = value;\n    }\n}\nexport const AgNameValueSelector: ComponentSelector = {\n    selector: 'AG-NAME-VALUE',\n    component: AgNameValue,\n};\n", "import type { BeanCollection, IClientSideRowModel, IRowModel, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class FilteredRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        this.setLabel('filteredRows', 'Filtered');\n\n        // this component is only really useful with client side row model\n        if (this.rowModel.getType() !== 'clientSide') {\n            _warnOnce(`agFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        const listener = this.onDataChanged.bind(this);\n        this.addManagedEventListeners({ modelUpdated: listener });\n        listener();\n    }\n\n    private onDataChanged() {\n        const totalRowCountValue = this.getTotalRowCountValue();\n        const filteredRowCountValue = this.getFilteredRowCountValue();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        this.setValue(_formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n        this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n    }\n\n    private getTotalRowCountValue(): number {\n        let totalRowCount = 0;\n        this.rowModel.forEachNode(() => (totalRowCount += 1));\n        return totalRowCount;\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n\n        (this.rowModel as IClientSideRowModel).forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount += 1;\n            }\n        });\n        return filteredRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IRowModel, ISelectionService, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class SelectedRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n    private selectionService: ISelectionService;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n        this.selectionService = beans.selectionService;\n    }\n\n    public postConstruct(): void {\n        if (!this.isValidRowModel()) {\n            _warnOnce(`agSelectedRowCountComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.setLabel('selectedRows', 'Selected');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-selected-row-count');\n\n        this.onRowSelectionChanged();\n\n        const eventListener = this.onRowSelectionChanged.bind(this);\n        this.addManagedEventListeners({ modelUpdated: eventListener, selectionChanged: eventListener });\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.rowModel.getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    private onRowSelectionChanged() {\n        const selectedRowCount = this.selectionService.getSelectionCount();\n        if (selectedRowCount < 0) {\n            this.setValue('?');\n            this.setDisplayed(true);\n            return;\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n        this.setDisplayed(selectedRowCount > 0);\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IClientSideRowModel, IRowModel, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class TotalAndFilteredRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        // this component is only really useful with client side row model\n        if (this.rowModel.getType() !== 'clientSide') {\n            _warnOnce(`agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.setLabel('totalAndFilteredRows', 'Rows');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-and-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedEventListeners({ modelUpdated: this.onDataChanged.bind(this) });\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        const rowCount = _formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n        const totalRowCount = _formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n\n        if (rowCount === totalRowCount) {\n            this.setValue(rowCount);\n        } else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            this.setValue(`${rowCount} ${localeTextFunc('of', 'of')} ${totalRowCount}`);\n        }\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n        (this.rowModel as IClientSideRowModel).forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount++;\n            }\n        });\n        return filteredRowCount;\n    }\n\n    private getTotalRowCount(): number {\n        let totalRowCount = 0;\n        this.rowModel.forEachNode((node) => {\n            if (!node.group) {\n                totalRowCount++;\n            }\n        });\n        return totalRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IClientSideRowModel, IRowModel, IStatusPanelComp } from '@ag-grid-community/core';\nimport { _formatNumberCommas, _warnOnce } from '@ag-grid-community/core';\n\nimport { AgNameValue } from './agNameValue';\n\nexport class TotalRowsComp extends AgNameValue implements IStatusPanelComp {\n    private rowModel: IRowModel;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowModel = beans.rowModel;\n    }\n\n    public postConstruct(): void {\n        this.setLabel('totalRows', 'Total Rows');\n\n        // this component is only really useful with client side row model\n        if (this.rowModel.getType() !== 'clientSide') {\n            _warnOnce('agTotalRowCountComponent should only be used with the client side row model.');\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedEventListeners({ modelUpdated: this.onDataChanged.bind(this) });\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n    }\n\n    private getRowCountValue(): number {\n        let totalRowCount = 0;\n        (this.rowModel as IClientSideRowModel).forEachLeafNode(() => (totalRowCount += 1));\n        return totalRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public override destroy(): void {\n        super.destroy();\n    }\n}\n", "import type { BeanCollection, IStatusPanel } from '@ag-grid-community/core';\nimport { _unwrapUserComp } from '@ag-grid-community/core';\n\nexport function getStatusPanel<TStatusPanel = IStatusPanel>(\n    beans: BeanCollection,\n    key: string\n): TStatusPanel | undefined {\n    const comp = beans.statusBarService!.getStatusPanel(key);\n    return _unwrapUserComp(comp) as any;\n}\n", "import type { ComponentSelector, IStatusBarService, IStatusPanelComp, NamedBean } from '@ag-grid-community/core';\nimport { BeanStub } from '@ag-grid-community/core';\n\nimport { AgStatusBarSelector } from './agStatusBar';\n\nexport class StatusBarService extends BeanStub implements NamedBean, IStatusBarService {\n    beanName = 'statusBarService' as const;\n\n    private allComponents: Map<string, IStatusPanelComp> = new Map();\n\n    // tslint:disable-next-line\n    constructor() {\n        super();\n    }\n\n    public registerStatusPanel(key: string, component: IStatusPanelComp): void {\n        this.allComponents.set(key, component);\n    }\n\n    public unregisterStatusPanel(key: string): void {\n        this.allComponents.delete(key);\n    }\n\n    public unregisterAllComponents(): void {\n        this.allComponents.clear();\n    }\n\n    public getStatusPanel(key: string): IStatusPanelComp {\n        return this.allComponents.get(key)!;\n    }\n\n    public getStatusPanelSelector(): ComponentSelector {\n        return AgStatusBarSelector;\n    }\n\n    public override destroy(): void {\n        this.unregisterAllComponents();\n        super.destroy();\n    }\n}\n", "import type {\n    BeanCollection,\n    ComponentSelector,\n    IStatusPanelComp,\n    IStatusPanelParams,\n    StatusPanelDef,\n    UserComponentFactory,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { AgPromise, Component, RefPlaceholder, _removeFromParent } from '@ag-grid-community/core';\n\nimport type { StatusBarService } from './statusBarService';\n\nexport class AgStatusBar extends Component {\n    private userComponentFactory: UserComponentFactory;\n    private statusBarService: StatusBarService;\n    private updateQueued: boolean = false;\n    private panelsPromise: AgPromise<(void | null)[]> = AgPromise.resolve();\n\n    public wireBeans(beans: BeanCollection) {\n        this.userComponentFactory = beans.userComponentFactory;\n        this.statusBarService = beans.statusBarService as StatusBarService;\n    }\n\n    private readonly eStatusBarLeft: HTMLElement = RefPlaceholder;\n    private readonly eStatusBarCenter: HTMLElement = RefPlaceholder;\n    private readonly eStatusBarRight: HTMLElement = RefPlaceholder;\n\n    private compDestroyFunctions: { [key: string]: () => void } = {};\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-status-bar\">\n            <div data-ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div data-ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div data-ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`);\n    }\n\n    public postConstruct(): void {\n        this.processStatusPanels(new Map());\n        this.addManagedPropertyListeners(['statusBar'], this.handleStatusBarChanged.bind(this));\n    }\n\n    private processStatusPanels(existingStatusPanelsToReuse: Map<string, IStatusPanelComp>): void {\n        const statusPanels = this.gos.get('statusBar')?.statusPanels;\n        if (statusPanels) {\n            const leftStatusPanelComponents = statusPanels.filter(\n                (componentConfig) => componentConfig.align === 'left'\n            );\n            const centerStatusPanelComponents = statusPanels.filter(\n                (componentConfig) => componentConfig.align === 'center'\n            );\n            const rightStatusPanelComponents = statusPanels.filter(\n                (componentConfig) => !componentConfig.align || componentConfig.align === 'right'\n            );\n            this.panelsPromise = AgPromise.all([\n                this.createAndRenderComponents(\n                    leftStatusPanelComponents,\n                    this.eStatusBarLeft,\n                    existingStatusPanelsToReuse\n                ),\n                this.createAndRenderComponents(\n                    centerStatusPanelComponents,\n                    this.eStatusBarCenter,\n                    existingStatusPanelsToReuse\n                ),\n                this.createAndRenderComponents(\n                    rightStatusPanelComponents,\n                    this.eStatusBarRight,\n                    existingStatusPanelsToReuse\n                ),\n            ]);\n        } else {\n            this.setDisplayed(false);\n        }\n    }\n\n    private handleStatusBarChanged(): void {\n        if (this.updateQueued) {\n            return;\n        }\n        this.updateQueued = true;\n        this.panelsPromise.then(() => {\n            this.updateStatusBar();\n            this.updateQueued = false;\n        });\n    }\n\n    private updateStatusBar(): void {\n        const statusPanels = this.gos.get('statusBar')?.statusPanels;\n        const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n        this.setDisplayed(validStatusBarPanelsProvided);\n\n        const existingStatusPanelsToReuse: Map<string, IStatusPanelComp> = new Map();\n\n        if (validStatusBarPanelsProvided) {\n            statusPanels.forEach((statusPanelConfig) => {\n                const key = statusPanelConfig.key ?? statusPanelConfig.statusPanel;\n                const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n                if (existingStatusPanel?.refresh) {\n                    const newParams = this.gos.addGridCommonParams(statusPanelConfig.statusPanelParams ?? {});\n                    const hasRefreshed = existingStatusPanel.refresh(newParams);\n                    if (hasRefreshed) {\n                        existingStatusPanelsToReuse.set(key, existingStatusPanel);\n                        delete this.compDestroyFunctions[key];\n                        _removeFromParent(existingStatusPanel.getGui());\n                    }\n                }\n            });\n        }\n\n        this.resetStatusBar();\n        if (validStatusBarPanelsProvided) {\n            this.processStatusPanels(existingStatusPanelsToReuse);\n        }\n    }\n\n    resetStatusBar(): void {\n        this.eStatusBarLeft.innerHTML = '';\n        this.eStatusBarCenter.innerHTML = '';\n        this.eStatusBarRight.innerHTML = '';\n\n        this.destroyComponents();\n        this.statusBarService.unregisterAllComponents();\n    }\n\n    public override destroy(): void {\n        this.destroyComponents();\n        super.destroy();\n    }\n\n    private destroyComponents(): void {\n        Object.values(this.compDestroyFunctions).forEach((func) => func());\n        this.compDestroyFunctions = {};\n    }\n\n    private createAndRenderComponents(\n        statusBarComponents: StatusPanelDef[],\n        ePanelComponent: HTMLElement,\n        existingStatusPanelsToReuse: Map<string, IStatusPanelComp>\n    ): AgPromise<void> {\n        const componentDetails: { key: string; promise: AgPromise<IStatusPanelComp> }[] = [];\n\n        statusBarComponents.forEach((componentConfig) => {\n            // default to the component name if no key supplied\n            const key = componentConfig.key || componentConfig.statusPanel;\n            const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n            let promise: AgPromise<IStatusPanelComp>;\n            if (existingStatusPanel) {\n                promise = AgPromise.resolve(existingStatusPanel);\n            } else {\n                const params: WithoutGridCommon<IStatusPanelParams> = {};\n\n                const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n                promise = compDetails.newAgStackInstance();\n\n                if (promise == null) {\n                    return;\n                }\n            }\n\n            componentDetails.push({\n                key,\n                promise,\n            });\n        });\n\n        return AgPromise.all(componentDetails.map((details) => details.promise)).then(() => {\n            componentDetails.forEach((componentDetail) => {\n                componentDetail.promise.then((component: IStatusPanelComp) => {\n                    const destroyFunc = () => {\n                        this.destroyBean(component);\n                    };\n\n                    if (this.isAlive()) {\n                        this.statusBarService.registerStatusPanel(componentDetail.key, component);\n                        ePanelComponent.appendChild(component.getGui());\n                        this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n                    } else {\n                        destroyFunc();\n                    }\n                });\n            });\n        });\n    }\n}\n\nexport const AgStatusBarSelector: ComponentSelector = {\n    selector: 'AG-STATUS-BAR',\n    component: AgStatusBar,\n};\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type { Module } from '@ag-grid-community/core';\nimport { ModuleNames } from '@ag-grid-community/core';\nimport { EnterpriseCoreModule } from '@ag-grid-enterprise/core';\n\nimport { VERSION } from './version';\nimport { ViewportRowModel } from './viewportRowModel/viewportRowModel';\n\nexport const ViewportRowModelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ViewportRowModelModule,\n    rowModel: 'viewport',\n    beans: [ViewportRowModel],\n    dependantModules: [EnterpriseCoreModule],\n};\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '32.0.0';\n", "import type {\n    BeanCollection,\n    FocusService,\n    IRowModel,\n    IViewportDatasource,\n    ModelUpdatedEvent,\n    NamedBean,\n    RowBounds,\n    RowModelType,\n    RowRenderer,\n    WithoutGridCommon,\n} from '@ag-grid-community/core';\nimport { BeanStub, RowNode, _iterateObject, _missing, _warnOnce } from '@ag-grid-community/core';\n\nexport class ViewportRowModel extends BeanStub implements NamedBean, IRowModel {\n    beanName = 'rowModel' as const;\n\n    private rowRenderer: RowRenderer;\n    private focusService: FocusService;\n    private beans: BeanCollection;\n\n    public wireBeans(beans: BeanCollection) {\n        this.rowRenderer = beans.rowRenderer;\n        this.focusService = beans.focusService;\n        this.beans = beans;\n    }\n\n    // rowRenderer tells us these\n    private firstRow = -1;\n    private lastRow = -1;\n\n    // datasource tells us this\n    private rowCount = -1;\n    private rowNodesByIndex: { [index: number]: RowNode } = {};\n    private rowHeight: number;\n    private viewportDatasource: IViewportDatasource;\n\n    // we don't implement as lazy row heights is not supported in this row model\n    public ensureRowHeightsValid(\n        startPixel: number,\n        endPixel: number,\n        startLimitIndex: number,\n        endLimitIndex: number\n    ): boolean {\n        return false;\n    }\n\n    public postConstruct(): void {\n        this.rowHeight = this.gos.getRowHeightAsNumber();\n        this.addManagedEventListeners({ viewportChanged: this.onViewportChanged.bind(this) });\n        this.addManagedPropertyListener('viewportDatasource', () => this.updateDatasource());\n        this.addManagedPropertyListener('rowHeight', () => {\n            this.rowHeight = this.gos.getRowHeightAsNumber();\n            this.updateRowHeights();\n        });\n    }\n\n    public start(): void {\n        this.updateDatasource();\n    }\n\n    public isLastRowIndexKnown(): boolean {\n        return true;\n    }\n\n    public override destroy(): void {\n        this.destroyDatasource();\n        super.destroy();\n    }\n\n    private destroyDatasource(): void {\n        if (!this.viewportDatasource) {\n            return;\n        }\n\n        if (this.viewportDatasource.destroy) {\n            this.viewportDatasource.destroy();\n        }\n\n        this.rowRenderer.datasourceChanged();\n        this.firstRow = -1;\n        this.lastRow = -1;\n    }\n\n    private updateDatasource(): void {\n        const datasource = this.gos.get('viewportDatasource');\n        if (datasource) {\n            this.setViewportDatasource(datasource);\n        }\n    }\n\n    private getViewportRowModelPageSize(): number | undefined {\n        return this.gos.get('viewportRowModelPageSize');\n    }\n\n    private getViewportRowModelBufferSize(): number {\n        return this.gos.get('viewportRowModelBufferSize');\n    }\n\n    private calculateFirstRow(firstRenderedRow: number): number {\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize()!;\n        const afterBuffer = firstRenderedRow - bufferSize;\n\n        if (afterBuffer < 0) {\n            return 0;\n        }\n\n        return Math.floor(afterBuffer / pageSize) * pageSize;\n    }\n\n    private calculateLastRow(lastRenderedRow: number): number {\n        if (lastRenderedRow === -1) {\n            return lastRenderedRow;\n        }\n\n        const bufferSize = this.getViewportRowModelBufferSize();\n        const pageSize = this.getViewportRowModelPageSize()!;\n        const afterBuffer = lastRenderedRow + bufferSize;\n        const result = Math.ceil(afterBuffer / pageSize) * pageSize;\n        const lastRowIndex = this.rowCount - 1;\n\n        return Math.min(result, lastRowIndex);\n    }\n\n    private onViewportChanged(event: any): void {\n        const newFirst = this.calculateFirstRow(event.firstRow);\n        const newLast = this.calculateLastRow(event.lastRow);\n\n        if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n            this.firstRow = newFirst;\n            this.lastRow = newLast;\n            this.purgeRowsNotInViewport();\n            if (this.viewportDatasource) {\n                this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n            }\n        }\n    }\n\n    public purgeRowsNotInViewport(): void {\n        Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n            const index = parseInt(indexStr, 10);\n            if (index < this.firstRow || index > this.lastRow) {\n                if (this.isRowFocused(index)) {\n                    return;\n                }\n\n                delete this.rowNodesByIndex[index];\n            }\n        });\n    }\n\n    private isRowFocused(rowIndex: number): boolean {\n        const focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n\n        const hasFocus = focusedCell.rowIndex === rowIndex;\n        return hasFocus;\n    }\n\n    public setViewportDatasource(viewportDatasource: IViewportDatasource): void {\n        this.destroyDatasource();\n\n        this.viewportDatasource = viewportDatasource;\n        this.rowCount = -1;\n\n        if (!viewportDatasource.init) {\n            _warnOnce('viewport is missing init method.');\n        } else {\n            viewportDatasource.init({\n                setRowCount: this.setRowCount.bind(this),\n                setRowData: this.setRowData.bind(this),\n                getRow: this.getRow.bind(this),\n            });\n        }\n    }\n\n    public getType(): RowModelType {\n        return 'viewport';\n    }\n\n    public getRow(rowIndex: number): RowNode {\n        if (!this.rowNodesByIndex[rowIndex]) {\n            this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n        }\n\n        return this.rowNodesByIndex[rowIndex];\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        let result: RowNode | undefined;\n        this.forEachNode((rowNode) => {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    }\n\n    public getRowCount(): number {\n        return this.rowCount === -1 ? 0 : this.rowCount;\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        if (this.rowHeight !== 0) {\n            // avoid divide by zero error\n            return Math.floor(pixel / this.rowHeight);\n        }\n\n        return 0;\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index,\n        };\n    }\n\n    private updateRowHeights() {\n        this.forEachNode((node) => {\n            node.setRowHeight(this.rowHeight);\n            node.setRowTop(this.rowHeight * node.rowIndex!);\n        });\n\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: 'modelUpdated',\n            newData: false,\n            newPage: false,\n            keepRenderedRows: true,\n            animate: false,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getTopLevelRowCount(): number {\n        return this.getRowCount();\n    }\n\n    public getTopLevelRowDisplayedIndex(topLevelIndex: number): number {\n        return topLevelIndex;\n    }\n\n    public isEmpty(): boolean {\n        return this.rowCount > 0;\n    }\n\n    public isRowsToRender(): boolean {\n        return this.rowCount > 0;\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        const firstIndex = firstInRange.rowIndex!;\n        const lastIndex = lastInRange.rowIndex!;\n\n        const firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n        const lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n\n        if (firstNodeOutOfRange || lastNodeOutOfRange) {\n            return [];\n        }\n\n        const result: RowNode[] = [];\n\n        const startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n        const endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n\n        for (let i = startIndex; i <= endIndex; i++) {\n            result.push(this.rowNodesByIndex[i]);\n        }\n\n        return result;\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        let callbackCount = 0;\n\n        Object.keys(this.rowNodesByIndex).forEach((indexStr) => {\n            const index = parseInt(indexStr, 10);\n            const rowNode: RowNode = this.rowNodesByIndex[index];\n            callback(rowNode, callbackCount);\n            callbackCount++;\n        });\n    }\n\n    private setRowData(rowData: { [key: number]: any }): void {\n        _iterateObject(rowData, (indexStr: string, dataItem: any) => {\n            const index = parseInt(indexStr, 10);\n            // we should never keep rows that we didn't specifically ask for, this\n            // guarantees the contract we have with the server.\n            if (index >= this.firstRow && index <= this.lastRow) {\n                let rowNode = this.rowNodesByIndex[index];\n\n                // the abnormal case is we requested a row even though the grid didn't need it\n                // as a result of the paging and buffer (ie the row is off screen), in which\n                // case we need to create a new node now\n                if (_missing(rowNode)) {\n                    rowNode = this.createBlankRowNode(index);\n                    this.rowNodesByIndex[index] = rowNode;\n                }\n\n                // now we deffo have a row node, so set in the details\n                // if the grid already asked for this row (the normal case), then we would\n                // of put a placeholder node in place.\n                rowNode.setDataAndId(dataItem, index.toString());\n            }\n        });\n    }\n\n    private createBlankRowNode(rowIndex: number): RowNode {\n        const rowNode = new RowNode(this.beans);\n\n        rowNode.setRowHeight(this.rowHeight);\n        rowNode.setRowTop(this.rowHeight * rowIndex);\n        rowNode.setRowIndex(rowIndex);\n\n        return rowNode;\n    }\n\n    public setRowCount(rowCount: number, keepRenderedRows = false): void {\n        if (rowCount === this.rowCount) {\n            return;\n        }\n\n        this.rowCount = rowCount;\n\n        this.eventService.dispatchEventOnce({\n            type: 'rowCountReady',\n        });\n\n        const event: WithoutGridCommon<ModelUpdatedEvent> = {\n            type: 'modelUpdated',\n            newData: false,\n            newPage: false,\n            keepRenderedRows: keepRenderedRows,\n            animate: false,\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        const foundRowNode = this.getRowNode(rowNode.id!);\n        return !!foundRowNode;\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_core", "import_csv_export", "import_core", "import_core", "import_core", "document", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "pill", "import_core", "import_core", "value", "import_core", "getSearchString", "value", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "displayValue", "_exists", "Component", "RefPlaceholder", "KeyCode", "_makeNull", "BeanStub", "AgInputTextFieldSelector", "_setDisplayed", "_stopPropagationForAgGrid", "_setAriaLabel", "key", "AgRichSelect", "_setAriaLabelledBy", "value", "_createIconNoSpan", "_setAriaLevel", "eTreeLine", "TooltipFeature", "DragSourceType", "VirtualList", "filterModel", "treeLines", "item", "destinationIndex", "_setDisabled", "_removeFromParent", "OperatorParser", "model", "expression", "VERSION", "import_ag_charts_enterprise", "import_core", "import_core", "import_core", "_last", "SelectionHandleType", "_warnOnce", "params", "BeanStub", "VERSION", "import_core", "import_core", "import_core", "import_core", "import_ag_charts_community", "import_core", "import_core", "import_core", "import_core", "import_ag_charts_community", "import_core", "import_ag_charts_community", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_ag_charts_community", "import_core", "_AgColorPanel", "Component", "RefPlaceholder", "_Util", "AgGroupComponentSelector", "AgInputNumberFieldSelector", "AgCheckboxSelector", "BeanStub", "AgDialog", "params", "_warnOnce", "_ChartTranslationService", "VERSION", "isTitleEnabled", "_includes", "labels", "isNumber", "_ComboChartModel", "_ChartDataModel", "_ChartParamsValidator", "_ModuleSupport", "_Theme", "theme", "opts", "data", "series", "getItemGroupKey", "hierarchy", "angleKey", "_createIconNoSpan", "_removeFromParent", "AgSelect", "aggFunc", "value", "optionsValue", "ChartMappings", "_clearElement", "AgGroupComponent", "AgToggleButton", "_setDisplayed", "AgAbstractLabel", "_exists", "enabled", "AgSelectSelector", "autoRotate", "AgCheckbox", "AgInputTextField", "xScale", "yScale", "_Scene", "_errorOnce", "_MiniStackedColumn", "_MiniNormalizedColumn", "_MiniStackedBar", "_MiniNormalizedBar", "_MiniArea", "_MiniStackedArea", "_MiniNormalizedArea", "innerRadius", "acc", "offset", "length", "pattern", "startAngle", "_", "KeyCode", "_TabbedChartMenu", "AgPromise", "_getAbsoluteWidth", "updatedChartType", "chartComp", "CHARTS_VERSION", "ModuleNames", "AgCharts", "main_esm_exports", "import_core", "import_core", "params", "value", "column", "VERSION", "import_core", "import_core", "import_core", "import_core", "import_core", "BeanStub", "DragSourceType", "_createIconNoSpan", "Component", "isPivotMode", "params", "RefPlaceholder", "_warnOnce", "_loadTemplate", "AgPromise", "_clearElement", "set", "_existsAndNotEmpty", "_exists", "i", "_last", "node", "parent", "level", "_iterateObject", "uniqueValues", "key", "_missing", "isString", "VERSION", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "openToolPanel", "VERSION", "VERSION", "import_core", "import_core", "import_core", "import_core", "import_core", "Component", "_createIconNoSpan", "RefPlaceholder", "AgCheckboxSelector", "KeyCode", "_setDisplayed", "DragSourceType", "isProvidedColumnGroup", "_getToolPanelClassesFromColDef", "_setAriaLabel", "_setAriaDescribedBy", "isPivotMode", "_warnOnce", "BeanStub", "VERSION", "ModuleNames", "import_core", "import_csv_export", "import_core", "import_csv_export", "type", "borderFactory", "shadow", "_escapeString", "currentSheet", "idx", "_ExcelXlsxFactory", "_warnOnce", "RowType", "ExcelFactoryMode", "getMultipleSheetsAsExcel", "exportMultipleSheetsAsExcel", "VERSION", "import_core", "import_core", "Component", "RefPlaceholder", "_createIconNoSpan", "_setDisplayed", "_clearElement", "isProvidedColumnGroup", "VERSION", "import_core", "import_core", "_missing", "_warnOnce", "BeanStub", "VERSION", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "BeanStub", "ModuleRegistry", "ModuleNames", "AgMenuList", "_warnOnce", "_createIconNoSpan", "Component", "_exists", "VERSION", "import_core", "import_core", "import_core", "AgPromise", "VERSION", "AgMenuItemRenderer", "import_core", "import_core", "values", "eventKey", "VERSION", "import_core", "import_core", "BeanStub", "_missing", "_exists", "RowNode", "_warnOnce", "params", "storeIndexFromEndIndex", "numberOfRowsToSkip", "lazyNode", "NumberSequence", "ServerSideTransactionResultStatus", "numberOfRowDiff", "nextTop", "_errorOnce", "rowNode", "node", "isSelectionUIEvent", "_last", "Strategy", "_missingOrEmpty", "VERSION", "ModuleNames", "import_core", "import_core", "import_core", "value", "_toStringOrNull", "isDate", "_warnOnce", "item", "AgPromise", "_makeNull", "RefPlaceholder", "_setDisplayed", "Component", "AgInputTextFieldSelector", "VERSION", "import_core", "import_core", "import_ag_charts_community", "lineDash", "isString", "_Sparkline", "_Scene", "extent", "_Util", "BandScale", "_Scale", "strokeWidth", "isNumber", "SparklineMarker", "SparklineLine", "SparklineCrosshairs", "_warnOnce", "VERSION", "import_core", "import_core", "import_core", "import_core", "import_core", "import_core", "localeTextFunc", "import_core", "import_core", "import_core", "import_core", "VERSION", "VERSION", "import_core", "import_core", "VERSION", "main_esm_exports"]
}
