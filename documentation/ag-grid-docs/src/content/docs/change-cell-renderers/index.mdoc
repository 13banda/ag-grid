---
title: "Highlighting Changes"
---

Highlight changes by flashing or animating cells.

{% gridExampleRunner title="Animated Flashing Cells" name="animated-flashing-cells" /%}

In the example above, to show changing values:

* Columns A and B use [Flashing Cells](./change-cell-renderers#flashing-cells).
* Columns C and D use the [Animate Show Change](./change-cell-renderers#animate-show-changed-cells) cell renderer.
* Columns E and F use the [Animate Slide Cell](./change-cell-renderers#animate-slide-cells) cell renderer.

## Flashing Cells

You can trigger cells to flash either though the grid API or by enabling cells to flash when the data changes. Each time the call value is changed, the grid adds the CSS class `ag-cell-data-changed` for 500ms by default, and then then CSS class `ag-cell-data-changed-animation` for 1,000ms by default. The grid provided themes use this to apply a background color.

### Enable Flashing on Data Change

Set Column attribute `enableCellChangeFlash=true` to flash the cells when data changes.

{% gridExampleRunner title="Flashing Data Changes" name="flashing-data-changes-coldef" /%}

In the example above:

* All columns have `enableCellChangeFlash=true` so changes to the columns values will flash the cell.
* Clicking **Update Some Data** will update some data randomly. The grid will then flash the cells where data has changed.

To change the length of the effect, use the grid options `cellFlashDuration` and `cellFadeDuration`.

One exception to the above is changes due to filtering. If you are [Row Grouping](./grouping/) the data with [Aggregations](./aggregation/), then the aggregated values will change as filtering adds and removes rows contained within the groups. It typically doesn't make sense to flash these changes when it's due to a filter change, as filtering would impact many (possibly all) cells at once, thus not usefully bringing the users attention to any particular cell. If you do not like this exception and would like to flash changes even when it's the result of a filter change, then set grid property `allowShowChangeAfterFilter=true`.

### Flash Cells using the API

Alternatively flash cells using the grid API `flashCells(params)`. The params object takes a list of columns and rows to flash, together with the `flashDuration` and the `fadeDuration` values.

{% apiDocumentation source="grid-api/api.json" section="refresh" names=["flashCells"] /%}

When calling `flashCells()`, pass the `flashDuration` and `fadeDuration` values (in milliseconds) as params to change the duration of cell flashing.

{% gridExampleRunner title="Flashing Data Changes" name="flashing-data-changes" /%}

In the example above, all three buttons use the `flashCells(params)` API. Note the following:

* Clicking **Flash One Cell** uses parameters with one column and one row to flash the intersecting cell.
* Clicking **Flash Two Rows** uses parameters consisting of two row nodes, causing those rows to flash.
* Clicking **Flash Two Columns** uses parameters consisting of two columns, causing those columns to flash.

### Customising Flashing Colours

Each time the call value is changed, the grid adds the CSS class `ag-cell-data-changed` for 500ms by default, and then then CSS class `ag-cell-data-changed-animation` for 1,000ms by default. The grid provided themes use this to apply a background color.

If you want to override the flash background color, this has to be done by overriding the relevant CSS class.

The example below demonstrates flashing duration changes. The following can be noted:

* Clicking **Update Some Data** will update some data to demonstrate the changes mentioned above.
* Clicking **Flash Two Rows** will pass a custom `flashDuration` of 3000ms and a custom `fadeDuration` delay of 2000ms to demonstrate default values can be overridden.
* The example demonstrates how to change the default colour of the flash using the `--ag-value-change-value-highlight-background-color` CSS variable.

{% gridExampleRunner title="Customising Flashing" name="customising-flashing" /%}

## Animated Cell Renderers

Interesting animations for data changes can be achieved using [Cell Components](./component-cell-renderer/). You can create your own or use one of the provided Show Change Cell Components. The grid provides two such components out of the box.

### Animate Show Changed Cells

The previous value is temporarily shown beside the old value with a directional arrow showing increase or decrease in value. The old value is then faded out.

{% gridExampleRunner title="Animate Show Change Renderer" name="animate-show-change-renderer"  exampleHeight=530 /%}

The example above demonstrates this.

* Columns A, B are editable.
* Columns C and D are updated via clicking the button.
* Changes to any of the first 4 columns results in animations in the Total and Average column.
* This can be set as a cell renderer in the column definitions:

```js {% frameworkTransform=true spaceBetweenProperties=true %}
const gridOptions = {
    columnDefs: [
        // set the cell renderer in the column definition
        { cellRenderer: "agAnimateShowChangeCellRenderer" },
    ]
}
```

### Animate Slide Cells

The previous value shown in a faded fashion and slides, giving a ghosting effect as the old value fades and slides away.

{% gridExampleRunner title="Animate Slide Renderer" name="animate-slide-renderer"  exampleHeight=530 /%}

The example above demonstrates this.

* Columns A, B are editable.
* Columns C and D are updated via clicking the button.
* Changes to any of the first 4 columns results in animations in the Total and Average column.
* This can be set as a cell renderer in the column definitions:

```js {% frameworkTransform=true spaceBetweenProperties=true %}
const gridOptions = {
    columnDefs: [
        // set the cell renderer in the column definition
        { cellRenderer: "agAnimateSlideCellRenderer" },
    ]
}
```
