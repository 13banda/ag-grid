---
title: "Configuration"
---

Columns are initially configured using Column Definitions, can be manipulated with Column State and referenced using the Column Object.

## Column definitions

Each column in the grid is defined using a [Column Definition](./column-definitions/). The column definitions are configured using [Column Properties](./column-properties/) and implement the `ColDef<TData, TValue>` or `ColGroupDef<TData>` interfaces.

```{% frameworkTransform=true %}
const gridOptions = {
    columnDefs: [
        { field: 'athlete' },
        { field: 'sport' },
        { field: 'age' }
    ]
}
```

If you want to [Update Column Definitions](./column-updating-definitions/) simply provide a new list of Column Definitions to the grid.

## Column IDs

Each column generated by the grid is given a unique Column ID, which is used in parts of the Grid API. Column IDs are generated by the grid if not supplied.

If you wish to provide a column ID, use the `colId` [Column Property](./column-properties/#reference-columns-colId) in the column definition. This is useful when you don't have a unique field name for each column.

## Column State

column state (mapped to a col object at runtime etc)

Build the picture of how the columns work and clarify when to update col defs and when to set column state.

## Column Object

Each column in the grid is represented by a `Column` instance - the column object. This has a reference to the underlying column definition. If the column definition is updated, the column objects are destroyed and regenerated.

The [Column Object](./column-object/) has attributes, methods and events for interacting with the specific column.
