// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snippet Component given a mix of grid options it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    [defaultColDef]=\\"defaultColDef\\"
    [rowHeight]=\\"rowHeight\\"
    [rowDragManaged]=\\"rowDragManaged\\"
    [rowSelection]=\\"rowSelection\\"
    [postSort]=\\"postSort\\"
    // other grid options ...>
</ag-grid-angular>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'angular' snippets without framework context 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // columnDefs property (special)
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],
    // object property
    defaultColDef: {
        // set every column width
        width: 100,
    },
    // numeric property
    rowHeight: 50,
    // boolean property
    rowDragManaged: true,
    // string property
    rowSelection: 'single',
    // function property
    postSort: rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    },

    // other grid options here...
}"
`;

exports[`Snippet Component given a mix of grid options it should create 'javascript' snippets without framework context 1`] = `
"// columnDefs property (special)
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],
// object property
defaultColDef: {
    // set every column width
    width: 100,
},
// numeric property
rowHeight: 50,
// boolean property
rowDragManaged: true,
// string property
rowSelection: 'single',
// function property
postSort: rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
},"
`;

exports[`Snippet Component given a mix of grid options it should create 'react' snippets 1`] = `
"<AgGridReact
    // object property
    defaultColDef={{
        // set every column width
        width: 100,
    }}
    // numeric property
    rowHeight={50}
    // boolean property
    rowDragManaged={true}
    // string property
    rowSelection=\\"single\\"
    // function property
    postSort={rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    }}
    // other grid options ...
>
    // columnDefs property (special)
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given a mix of grid options it should create 'react' snippets without framework context 1`] = `
"<AgGridReact
    // object property
    defaultColDef={{
        // set every column width
        width: 100,
    }}
    // numeric property
    rowHeight={50}
    // boolean property
    rowDragManaged={true}
    // string property
    rowSelection=\\"single\\"
    // function property
    postSort={rowNodes => {
        // here we put Ireland rows on top while preserving the sort order  
        let nextInsertPos = 0;
        for (let i = 0; i < rowNodes.length; i++) {
            const country = rowNodes[i].data.country;      
            if (country === 'Ireland') {        
                rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
                nextInsertPos++;
            }
        }
    }}
    // other grid options ...
>
    // columnDefs property (special)
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given a mix of grid options it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    [defaultColDef]=\\"defaultColDef\\"
    [rowHeight]=\\"rowHeight\\"
    [rowDragManaged]=\\"rowDragManaged\\"
    [rowSelection]=\\"rowSelection\\"
    [postSort]=\\"postSort\\"
    // other grid options ...>
</ag-grid-vue>

// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given a mix of grid options it should create 'vue' snippets without framework context 1`] = `
"// columnDefs property (special)
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];
// object property
this.defaultColDef = {
    // set every column width
    width: 100,
};
// numeric property
this.rowHeight = 50;
// boolean property
this.rowDragManaged = true;
// string property
this.rowSelection = 'single';
// function property
this.postSort = rowNodes => {
    // here we put Ireland rows on top while preserving the sort order  
    let nextInsertPos = 0;
    for (let i = 0; i < rowNodes.length; i++) {
        const country = rowNodes[i].data.country;      
        if (country === 'Ireland') {        
            rowNodes.splice(nextInsertPos, 0, rowNodes.splice(i, 1)[0]);
            nextInsertPos++;
        }
    }
};"
`;

exports[`Snippet Component given column definitions with group columns it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    // other grid options ...>
</ag-grid-angular>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'angular' snippets without framework context 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // 2 levels of grouping
    columnDefs: [
        {
            headerName: 'G1',
            children: [
                { headerName: 'C1', field: 'c1' },
                {
                    headerName: 'G2',
                    children: [
                        { headerName: 'C2', field: 'c2' },
                        { headerName: 'C3', field: 'c3' },
                    ],
                },
                { headerName: 'C4', field: 'c4' },
            ],
        },
    ],

    // other grid options here...
}"
`;

exports[`Snippet Component given column definitions with group columns it should create 'javascript' snippets without framework context 1`] = `
"// 2 levels of grouping
columnDefs: [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
],"
`;

exports[`Snippet Component given column definitions with group columns it should create 'react' snippets 1`] = `
"<AgGridReact>
    // 2 levels of grouping
    <AgGridColumn headerName=\\"G1\\">
        <AgGridColumn headerName=\\"C1\\" field=\\"c1\\" />
        <AgGridColumn headerName=\\"G2\\">
            <AgGridColumn headerName=\\"C2\\" field=\\"c2\\" />
            <AgGridColumn headerName=\\"C3\\" field=\\"c3\\" />
        </AgGridColumn>
        <AgGridColumn headerName=\\"C4\\" field=\\"c4\\" />
    </AgGridColumn>
</AgGridReact>"
`;

exports[`Snippet Component given column definitions with group columns it should create 'react' snippets without framework context 1`] = `
"// 2 levels of grouping
<AgGridColumn headerName=\\"G1\\">
    <AgGridColumn headerName=\\"C1\\" field=\\"c1\\" />
    <AgGridColumn headerName=\\"G2\\">
        <AgGridColumn headerName=\\"C2\\" field=\\"c2\\" />
        <AgGridColumn headerName=\\"C3\\" field=\\"c3\\" />
    </AgGridColumn>
    <AgGridColumn headerName=\\"C4\\" field=\\"c4\\" />
</AgGridColumn>"
`;

exports[`Snippet Component given column definitions with group columns it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    // other grid options ...>
</ag-grid-vue>

// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given column definitions with group columns it should create 'vue' snippets without framework context 1`] = `
"// 2 levels of grouping
this.columnDefs = [
    {
        headerName: 'G1',
        children: [
            { headerName: 'C1', field: 'c1' },
            {
                headerName: 'G2',
                children: [
                    { headerName: 'C2', field: 'c2' },
                    { headerName: 'C3', field: 'c3' },
                ],
            },
            { headerName: 'C4', field: 'c4' },
        ],
    },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'angular' snippets 1`] = `
"<ag-grid-angular
    [columnDefs]=\\"columnDefs\\"
    // other grid options ...>
</ag-grid-angular>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'angular' snippets without framework context 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'javascript' snippets 1`] = `
"const gridOptions = {
    // define 3 columns
    columnDefs: [
        { headerName: 'A', field: 'a' },
        { headerName: 'B', field: 'b' },
        { headerName: 'C', field: 'c' },
    ],

    // other grid options here...
}"
`;

exports[`Snippet Component given simple column definitions it should create 'javascript' snippets without framework context 1`] = `
"// define 3 columns
columnDefs: [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
],"
`;

exports[`Snippet Component given simple column definitions it should create 'react' snippets 1`] = `
"<AgGridReact>
    // define 3 columns
    <AgGridColumn headerName=\\"A\\" field=\\"a\\" />
    <AgGridColumn headerName=\\"B\\" field=\\"b\\" />
    <AgGridColumn headerName=\\"C\\" field=\\"c\\" />
</AgGridReact>"
`;

exports[`Snippet Component given simple column definitions it should create 'react' snippets without framework context 1`] = `
"// define 3 columns
<AgGridColumn headerName=\\"A\\" field=\\"a\\" />
<AgGridColumn headerName=\\"B\\" field=\\"b\\" />
<AgGridColumn headerName=\\"C\\" field=\\"c\\" />"
`;

exports[`Snippet Component given simple column definitions it should create 'vue' snippets 1`] = `
"<ag-grid-vue
    [columnDefs]=\\"columnDefs\\"
    // other grid options ...>
</ag-grid-vue>

// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;

exports[`Snippet Component given simple column definitions it should create 'vue' snippets without framework context 1`] = `
"// define 3 columns
this.columnDefs = [
    { headerName: 'A', field: 'a' },
    { headerName: 'B', field: 'b' },
    { headerName: 'C', field: 'c' },
];"
`;
