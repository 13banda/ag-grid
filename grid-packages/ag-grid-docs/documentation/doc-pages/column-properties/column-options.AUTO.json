{
  "headerName": {
    "description": "/** The name to render in the column header */",
    "type": { "returnType": "string" }
  },
  "columnGroupShow": {
    "description": "/** Whether to show the column when the group is open / closed. */",
    "type": { "returnType": "string" }
  },
  "headerClass": {
    "description": "/** CSS class for the header */",
    "type": { "returnType": "HeaderClass" }
  },
  "toolPanelClass": {
    "description": "/** CSS class for the toolPanel */",
    "type": { "returnType": "ToolPanelClass" }
  },
  "headerValueGetter": {
    "description": "/** Expression or function to get the value for display in the header. */",
    "type": { "returnType": "string | HeaderValueGetterFunc" }
  },
  "pivotKeys": {
    "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
    "type": { "returnType": "string[]" }
  },
  "suppressColumnsToolPanel": {
    "description": "/** Set to true to not include this column in the Columns Tool Panel */",
    "type": { "returnType": "boolean" }
  },
  "suppressFiltersToolPanel": {
    "description": "/** Set to true to not include this column / filter in the Filters Tool Panel */",
    "type": { "returnType": "boolean" }
  },
  "headerTooltip": {
    "description": "/** Tooltip for the column header */",
    "type": { "returnType": "string" }
  },
  "tooltipComponent": {
    "type": { "returnType": "{ new(): ITooltipComp; } | string" }
  },
  "tooltipComponentFramework": { "type": { "returnType": "any" } },
  "tooltipComponentParams": { "type": { "returnType": "any" } },
  "suppressHeaderKeyboardEvent": {
    "description": "/** Allows the user to suppress certain keyboard events in the grid header */",
    "type": {
      "arguments": { "params": "SuppressHeaderKeyboardEventParams" },
      "returnType": "boolean"
    }
  },
  "children": {
    "description": "/** Columns in this group */",
    "type": { "returnType": "(ColDef | ColGroupDef)[]" }
  },
  "groupId": {
    "description": "/** Group ID */",
    "type": { "returnType": "string" }
  },
  "openByDefault": {
    "description": "/** Open by Default */",
    "type": { "returnType": "boolean" }
  },
  "marryChildren": {
    "description": "/** If true, group cannot be broken up by column moving, child columns will always appear side by side, however you can rearrange child columns within the group */",
    "type": { "returnType": "boolean" }
  },
  "headerGroupComponent": {
    "description": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used* */",
    "type": { "returnType": "string | { new(): IHeaderGroupComp; }" }
  },
  "headerGroupComponentFramework": {
    "description": "/** The custom header group component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default AG Grid is used* */",
    "type": { "returnType": "any" }
  },
  "headerGroupComponentParams": {
    "description": "/** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used* */",
    "type": { "returnType": "any" }
  },
  "colId": {
    "description": "/** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n * If both field and colId are missing, a unique ID will be generated.\n * This ID is used to identify the column in the API for sorting, filtering etc. */",
    "type": { "returnType": "string" }
  },
  "sort": {
    "description": "/** If sorting by default, set it here. Set to 'asc' or 'desc' */",
    "type": { "returnType": "string | null" }
  },
  "initialSort": { "type": { "returnType": "string" } },
  "sortIndex": {
    "description": "/** If sorting more than one column by default, specifies order in which the sorting should be applied. */",
    "type": { "returnType": "number | null" }
  },
  "initialSortIndex": { "type": { "returnType": "number" } },
  "sortedAt": {
    "description": "/** @deprecated since v24 - use sortIndex instead\n */",
    "type": { "returnType": "number" }
  },
  "sortingOrder": {
    "description": "/** The sort order, provide an array with any of the following in any order ['asc','desc',null] */",
    "type": { "returnType": "(string | null)[]" }
  },
  "field": {
    "description": "/** The field of the row to get the cells data from */",
    "type": { "returnType": "string" }
  },
  "type": {
    "description": "/** A comma separated string or array of strings containing ColumnType keys which can be used as a template for a column.\n * This helps to reduce duplication of properties when you have a lot of common column properties. */",
    "type": { "returnType": "string | string[]" }
  },
  "hide": {
    "description": "/** Set to true for this column to be hidden. Naturally you might think, it would make more sense to call this field 'visible' and mark it false to hide,\n * however we want all default values to be false and we want columns to be visible by default. */",
    "type": { "returnType": "boolean" }
  },
  "initialHide": { "type": { "returnType": "boolean" } },
  "pinned": {
    "description": "/** Whether this column is pinned or not. */",
    "type": { "returnType": "boolean | string | null" }
  },
  "initialPinned": { "type": { "returnType": "boolean | string" } },
  "tooltipField": {
    "description": "/** The field where we get the tooltip on the object */",
    "type": { "returnType": "string" }
  },
  "tooltipValueGetter": {
    "description": "/** The function used to calculate the tooltip of the object, tooltipField takes precedence */",
    "type": {
      "arguments": { "params": "ITooltipParams" },
      "returnType": "string"
    }
  },
  "valueGetter": {
    "description": "/** Expression or function to get the cells value. */",
    "type": { "returnType": "string | ValueGetterFunc" }
  },
  "filterValueGetter": {
    "description": "/** Expression or function to get the cells value for filtering. */",
    "type": { "returnType": "string | ValueGetterFunc" }
  },
  "valueSetter": {
    "description": "/** If not using a field, then this puts the value into the cell */",
    "type": { "returnType": "string | ValueSetterFunc" }
  },
  "keyCreator": {
    "description": "/** Function to return the key for a value - use this if the value is an object (not a primitive type) and you\n * want to a) group by this field or b) use set filter on this field. */",
    "type": { "arguments": { "value": "any" }, "returnType": "string" }
  },
  "width": {
    "description": "/** Actual width, in pixels, of the cell */",
    "type": { "returnType": "number" }
  },
  "initialWidth": {
    "description": "/** Default width, in pixels, of the cell */",
    "type": { "returnType": "number" }
  },
  "minWidth": {
    "description": "/** Min width, in pixels, of the cell */",
    "type": { "returnType": "number" }
  },
  "maxWidth": {
    "description": "/** Max width, in pixels, of the cell */",
    "type": { "returnType": "number" }
  },
  "flex": {
    "description": "/** Sets the grow factor of a column. It specifies how much of the remaining\n * space should be assigned to the column. */",
    "type": { "returnType": "number" }
  },
  "initialFlex": { "type": { "returnType": "number" } },
  "autoHeight": {
    "description": "/** True if this column should stretch rows height to fit contents */",
    "type": { "returnType": "boolean" }
  },
  "wrapText": {
    "description": "/** True if this column should wrap cell contents - typically used with autoHeight */",
    "type": { "returnType": "boolean" }
  },
  "cellClass": {
    "description": "/** Class to use for the cell. Can be string, array of strings, or function. */",
    "type": { "returnType": "string | string[] | CellClassFunc" }
  },
  "cellStyle": {
    "description": "/** An object of css values. Or a function returning an object of css values. */",
    "type": {
      "returnType": "{ [cssProperty: string]: string } | CellStyleFunc"
    }
  },
  "cellRenderer": {
    "description": "/** A function for rendering a cell. */",
    "type": {
      "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
    }
  },
  "cellRendererFramework": { "type": { "returnType": "any" } },
  "cellRendererParams": { "type": { "returnType": "any" } },
  "cellRendererSelector": {
    "type": { "returnType": "CellRendererSelectorFunc" }
  },
  "cellEditor": {
    "description": "/** Cell editor */",
    "type": { "returnType": "string | { new(): ICellEditorComp; }" }
  },
  "cellEditorFramework": { "type": { "returnType": "any" } },
  "cellEditorParams": { "type": { "returnType": "any" } },
  "cellEditorSelector": { "type": { "returnType": "CellEditorSelectorFunc" } },
  "cellEditorPopup": { "type": { "returnType": "boolean" } },
  "cellEditorPopupPosition": { "type": { "returnType": "string" } },
  "pinnedRowCellRenderer": {
    "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
    "type": {
      "returnType": "{ new(): ICellRendererComp; } | ICellRendererFunc | string"
    }
  },
  "pinnedRowCellRendererFramework": {
    "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
    "type": { "returnType": "any" }
  },
  "pinnedRowCellRendererParams": {
    "description": "/** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n */",
    "type": { "returnType": "any" }
  },
  "valueFormatter": {
    "description": "/** A function to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */",
    "type": { "returnType": "string | ValueFormatterFunc" }
  },
  "pinnedRowValueFormatter": {
    "description": "/** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned.\n */",
    "type": { "returnType": "string | ValueFormatterFunc" }
  },
  "valueParser": {
    "description": "/** Gets called after editing, converts the value in the cell. */",
    "type": { "returnType": "string | ValueParserFunc" }
  },
  "aggFunc": {
    "description": "/** Name of function to use for aggregation. One of [sum,min,max,first,last] or a function. */",
    "type": { "returnType": "string | IAggFunc | null" }
  },
  "initialAggFunc": { "type": { "returnType": "string | IAggFunc" } },
  "allowedAggFuncs": {
    "description": "/** Agg funcs allowed on this column. If missing, all installed agg funcs are allowed.\n * Can be eg ['sum','avg']. This will restrict what the GUI allows to select only. */",
    "type": { "returnType": "string[]" }
  },
  "rowGroupIndex": {
    "description": "/** To group by this column by default, either provide an index (eg rowGroupIndex=1), or set rowGroup=true. */",
    "type": { "returnType": "number | null" }
  },
  "rowGroup": { "type": { "returnType": "boolean" } },
  "initialRowGroupIndex": { "type": { "returnType": "number" } },
  "initialRowGroup": { "type": { "returnType": "boolean" } },
  "showRowGroup": {
    "description": "/** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */",
    "type": { "returnType": "string | boolean" }
  },
  "pivotIndex": {
    "description": "/** To pivot by this column by default, either provide an index (eg pivotIndex=1), or set pivot=true. */",
    "type": { "returnType": "number | null" }
  },
  "pivot": { "type": { "returnType": "boolean" } },
  "initialPivotIndex": { "type": { "returnType": "number" } },
  "initialPivot": { "type": { "returnType": "boolean" } },
  "comparator": {
    "description": "/** Comparator function for custom sorting. */",
    "type": {
      "arguments": {
        "valueA": "any",
        "valueB": "any",
        "nodeA": "RowNode",
        "nodeB": "RowNode",
        "isInverted": "boolean"
      },
      "returnType": "number"
    }
  },
  "equals": {
    "description": "/** Comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed. */",
    "type": {
      "arguments": { "valueA": "any", "valueB": "any" },
      "returnType": "boolean"
    }
  },
  "pivotComparator": {
    "description": "/** Comparator for ordering the pivot columns */",
    "type": {
      "arguments": { "valueA": "string", "valueB": "string" },
      "returnType": "number"
    }
  },
  "checkboxSelection": {
    "description": "/** Set to true to render a selection checkbox in the column. */",
    "type": { "returnType": "boolean | CheckboxSelectionCallback" }
  },
  "headerCheckboxSelection": {
    "description": "/** If true, a 'select all' checkbox will be put into the header */",
    "type": { "returnType": "boolean | HeaderCheckboxSelectionCallback" }
  },
  "headerCheckboxSelectionFilteredOnly": {
    "description": "/** If true, the header checkbox selection will work on filtered items */",
    "type": { "returnType": "boolean" }
  },
  "rowDrag": {
    "description": "/** For grid row dragging, set to true to enable row dragging within the grid */",
    "type": { "returnType": "boolean | RowDragCallback" }
  },
  "rowDragText": {
    "description": "/** To configure the text to be displayed in the floating div while dragging a row when rowDrag is true */",
    "type": {
      "arguments": { "params": "IRowDragItem", "dragItemCount": "number" },
      "returnType": "string"
    }
  },
  "dndSource": {
    "description": "/** For native drag and drop, set to true to enable drag source */",
    "type": { "returnType": "boolean | DndSourceCallback" }
  },
  "dndSourceOnRowDrag": {
    "description": "/** For native drag and drop, set to true to allow custom onRowDrag processing */",
    "type": {
      "arguments": { "params": "{ rowNode: RowNode; dragEvent: DragEvent; }" },
      "returnType": "void"
    }
  },
  "suppressMenu": {
    "description": "/** Set to true if no menu should be shown for this column header. */",
    "type": { "returnType": "boolean" }
  },
  "menuTabs": {
    "description": "/** The menu tabs to show, and in which order, the valid values for this property are:\n * filterMenuTab, generalMenuTab, columnsMenuTab * */",
    "type": { "returnType": "string[]" }
  },
  "sortable": {
    "description": "/** Set to true if sorting allowed for this column. */",
    "type": { "returnType": "boolean" }
  },
  "suppressMovable": {
    "description": "/** Set to true to not allow moving this column via dragging it's header */",
    "type": { "returnType": "boolean" }
  },
  "suppressCellFlash": {
    "description": "/** Set to true to not flash this column for value changes */",
    "type": { "returnType": "boolean" }
  },
  "lockPosition": {
    "description": "/** Set to true to make sure this column is always first. Other columns, if movable, cannot move before this column. */",
    "type": { "returnType": "boolean" }
  },
  "lockVisible": {
    "description": "/** Set to true to block the user showing / hiding the column, the column can only be shown / hidden via definitions or API */",
    "type": { "returnType": "boolean" }
  },
  "lockPinned": {
    "description": "/** Set to true to block the user pinning the column, the column can only be pinned via definitions or API */",
    "type": { "returnType": "boolean" }
  },
  "unSortIcon": {
    "description": "/** Set to true if you want the unsorted icon to be shown when no sort is applied to this column. */",
    "type": { "returnType": "boolean" }
  },
  "suppressSizeToFit": {
    "description": "/** Set to true if you want this columns width to be fixed during 'size to fit' operation. */",
    "type": { "returnType": "boolean" }
  },
  "resizable": {
    "description": "/** Set to true if this column should be resizable */",
    "type": { "returnType": "boolean" }
  },
  "suppressAutoSize": {
    "description": "/** Set to true if you do not want this column to be auto-resizable by double clicking it's edge. */",
    "type": { "returnType": "boolean" }
  },
  "suppressKeyboardEvent": {
    "description": "/** Allows the user to suppress certain keyboard events in the grid cell */",
    "type": {
      "arguments": { "params": "SuppressKeyboardEventParams" },
      "returnType": "boolean"
    }
  },
  "enableRowGroup": {
    "description": "/** If true, GUI will allow adding this columns as a row group */",
    "type": { "returnType": "boolean" }
  },
  "enablePivot": {
    "description": "/** If true, GUI will allow adding this columns as a pivot */",
    "type": { "returnType": "boolean" }
  },
  "enableValue": {
    "description": "/** If true, GUI will allow adding this columns as a value */",
    "type": { "returnType": "boolean" }
  },
  "editable": {
    "description": "/** Set to true if this col is editable, otherwise false. Can also be a function to have different rows editable. */",
    "type": { "returnType": "boolean | EditableCallback" }
  },
  "colSpan": {
    "type": {
      "arguments": { "params": "ColSpanParams" },
      "returnType": "number"
    }
  },
  "rowSpan": {
    "type": {
      "arguments": { "params": "RowSpanParams" },
      "returnType": "number"
    }
  },
  "suppressPaste": {
    "description": "/** Set to true if this col should not be allowed take new values from the clipboard . */",
    "type": { "returnType": "boolean | SuppressPasteCallback" }
  },
  "suppressNavigable": {
    "description": "/** Set to true if this col should not be navigable with the tab key. Can also be a function to have different rows editable. */",
    "type": { "returnType": "boolean | SuppressNavigableCallback" }
  },
  "getQuickFilterText": {
    "description": "/** To create the quick filter text for this column, if toString is not good enough on the value. */",
    "type": {
      "arguments": { "params": "GetQuickFilterTextParams" },
      "returnType": "string"
    }
  },
  "newValueHandler": {
    "description": "/** Callbacks for editing. See editing section for further details.\n * Return true if the update was successful, or false if not.\n * If false, then skips the UI refresh and no events are emitted.\n * Return false if the values are the same (ie no update). */",
    "type": {
      "arguments": { "params": "NewValueParams" },
      "returnType": "boolean"
    }
  },
  "singleClickEdit": {
    "description": "/** If true, this cell will be in editing mode after first click. */",
    "type": { "returnType": "boolean" }
  },
  "template": {
    "description": "/** Cell template to use for cell. Useful for AngularJS cells. */",
    "type": { "returnType": "string" }
  },
  "templateUrl": {
    "description": "/** Cell template URL to load template from to use for cell. Useful for AngularJS cells. */",
    "type": { "returnType": "string" }
  },
  "cellClassRules": {
    "description": "/** Rules for applying css classes */",
    "type": { "returnType": "CellClassRules" }
  },
  "onCellValueChanged": {
    "description": "/** Callbacks for editing.See editing section for further details. */",
    "type": { "arguments": { "event": "NewValueParams" }, "returnType": "void" }
  },
  "onCellClicked": {
    "description": "/** Function callback, gets called when a cell is clicked. */",
    "type": {
      "arguments": { "event": "CellClickedEvent" },
      "returnType": "void"
    }
  },
  "onCellDoubleClicked": {
    "description": "/** Function callback, gets called when a cell is double clicked. */",
    "type": {
      "arguments": { "event": "CellDoubleClickedEvent" },
      "returnType": "void"
    }
  },
  "onCellContextMenu": {
    "description": "/** Function callback, gets called when a cell is right clicked. */",
    "type": {
      "arguments": { "event": "CellContextMenuEvent" },
      "returnType": "void"
    }
  },
  "icons": {
    "description": "/** Icons for this column. Leave blank to use default. */",
    "type": { "returnType": "{ [key: string]: Function | string; }" }
  },
  "enableCellChangeFlash": {
    "description": "/** If true, grid will flash cell after cell is refreshed */",
    "type": { "returnType": "boolean" }
  },
  "pivotValueColumn": {
    "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
    "type": { "returnType": "Column | null" }
  },
  "pivotTotalColumnIds": {
    "description": "/** Never set this, it is used internally by grid when doing in-grid pivoting */",
    "type": { "returnType": "string[]" }
  },
  "headerComponent": {
    "description": "/** The custom header component to be used for rendering the component header. If none specified the default AG Grid is used* */",
    "type": { "returnType": "string | { new(): any; }" }
  },
  "headerComponentFramework": {
    "description": "/** The custom header component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default AG Grid is used* */",
    "type": { "returnType": "any" }
  },
  "headerComponentParams": {
    "description": "/** The custom header component parameters* */",
    "type": { "returnType": "any" }
  },
  "suppressFillHandle": {
    "description": "/** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */",
    "type": { "returnType": "boolean" }
  },
  "floatingFilter": {
    "description": "/** Whether to display a floating filter for this column. */",
    "type": { "returnType": "boolean" }
  },
  "refData": { "type": { "returnType": "{ [key: string]: string; }" } },
  "chartDataType": {
    "description": "/** Defines the column data type used when charting */",
    "type": { "returnType": "'category' | 'series' | 'time' | 'excluded'" }
  },
  "columnsMenuParams": {
    "description": "/** Params to customise the columns menu behaviour and appearance */",
    "type": { "returnType": "ColumnsMenuParams" }
  },
  "filter": {
    "description": "/** One of the built in filter names: [set, number, text, date], or a filter function */",
    "type": { "returnType": "IFilterType" }
  },
  "filterFramework": { "type": { "returnType": "any" } },
  "filterParams": {
    "description": "/** The filter params are specific to each filter! */",
    "type": { "returnType": "any" }
  },
  "floatingFilterComponent": {
    "description": "/** The custom component to be used for rendering the floating filter. If none is specified the default AG Grid is used. * */",
    "type": { "returnType": "IFloatingFilterType" }
  },
  "floatingFilterComponentParams": { "type": { "returnType": "any" } },
  "floatingFilterComponentFramework": { "type": { "returnType": "any" } }
}
