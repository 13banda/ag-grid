{
    "_config_": {
        "codeSrc": "ColumnOptions"
    },
    "columns": {
        "meta": {
            "displayName": "Columns"
        },
        "field": {
            "description": "The field of the row to get the cells data from."
        },
        "colId": {
            "description": "The unique ID to give the column. This is optional. If missing, the ID will default to the field. If both field and `colId` are missing, a unique ID will be generated. This ID is used to identify the column in the API for sorting, filtering etc."
        },
        "type": {
            "description": "A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column. This helps to reduce duplication of properties when you have a lot of common column properties.",
            "more": {
                "name": "Column Types",
                "url": "/column-definitions/#default-column-definitions"
            }
        },
        "valueGetter": {
            "description": "Function or [expression](/cell-expressions/#column-definition-expressions). Gets the value from your data for display.",
            "more": {
                "name": "Value Getters",
                "url": "/value-getters/"
            }
        },
        "valueFormatter": {
            "description": "Function or [expression](/cell-expressions/#column-definition-expressions). Formats the value for display.",
            "more": {
                "name": "Value Formatters",
                "url": "/value-formatters/"
            }
        },
        "keyCreator": {
            "description": "Function to return a string key for a value. This string is used for grouping, Set filtering, and searching within cell editor dropdowns. When filtering and searching the string is exposed to the user, so make sure to return a human-readable value."
        },
        "tooltipField": {
            "description": "The field of the tooltip to apply to the cell."
        },
        "tooltipValueGetter": {
            "description": "Callback that should return the string used for a tooltip."
        },
        "checkboxSelection": {
            "default": false,
            "description": "`boolean` or `Function`. Set to `true` (or return `true` from function) to render a selection checkbox in the column."
        },
        "toolPanelClass": {
            "description": "Class to use for the tool panel cell. Can be a string, array of strings, or function."
        },
        "suppressColumnsToolPanel": {
            "default": false,
            "description": "Set to `true` if you do not want this column or group to appear in the Columns Tool Panel."
        },
        "columnGroupShow": {
            "description": "Whether to show the column when the group is open / closed."
        },
        "chartDataType": {
            "description": "Defines the chart data type that should be used for a column."
        },
        "icons": {
            "description": "Icons to use inside the column instead of the grid's default icons.",
            "more": {
                "name": "Custom Icons",
                "url": "/custom-icons/#set-the-icons-through-gridoptions-javascript"
            }
        },
        "suppressNavigable": {
            "default": false,
            "description": "Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`. Can also be a callback function to have different rows navigable."
        },
        "suppressKeyboardEvent": {
            "default": false,
            "description": "Suppress the grid taking action for the relevant keyboard event when a cell is focused.",
            "more": {
                "name": "Suppress Keyboard Events",
                "url": "/keyboard-navigation/#suppresskeyboardevent"
            }
        },
        "suppressPaste": {
            "description": "Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation). Set to `true` turn paste operations off."
        }
    },
    "header": {
        "meta": {
            "displayName": "Columns:  Header"
        },
        "headerName": {
            "description": "The name to render in the column header. If not specified and field is specified, the field name will be used as the header name."
        },
        "headerValueGetter": {
            "description": "Function or [expression](/cell-expressions/#column-definition-expressions). Gets the value for display in the header."
        },
        "headerTooltip": {
            "description": "Tooltip for the column header"
        },
        "headerClass": {
            "description": "Class to use for the header cell. Can be a string, array of strings, or function."
        },
        "headerComponent": {
            "description": "Header component to use for this column.",
            "more": {
                "name": "Header Component",
                "url": "/component-header/"
            }
        },
        "headerComponentFramework": {
            "description": "Header framework component to use for this column.",
            "more": {
                "name": "Header Component",
                "url": "/component-header/"
            }
        },
        "headerComponentParams": {
            "description": "Params to be passed to header component."
        },
        "menuTabs": {
            "description": "Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`. This is used to figure out which menu tabs are present and in which order the tabs are shown."
        },
        "columnsMenuParams": {
            "description": "Params used to change the behaviour and appearance of the Columns Menu tab.",
            "more": {
                "name": "Customising the Columns Menu Tab",
                "url": "/column-menu/#customising-the-columns-menu-tab"
            }
        },
        "suppressMenu": {
            "default": false,
            "description": "Set to `true` if no menu should be shown for this column header."
        },
        "suppressHeaderKeyboardEvent": {
            "default": false,
            "description": "Suppress the grid taking action for the relevant keyboard event when a header is focused.",
            "more": {
                "name": "Suppress Keyboard Events",
                "url": "/keyboard-navigation/#suppressheaderkeyboardevent"
            }
        },
        "headerCheckboxSelection": {
            "description": "If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header.",
            "more": {
                "name": "Header Checkbox Selection",
                "url": "/row-selection/#header-checkbox-selection"
            }
        },
        "headerCheckboxSelectionFilteredOnly": {
            "description": "If true, the header checkbox selection will only select filtered items.",
            "more": {
                "name": "Select Everything or Just Filtered",
                "url": "/row-selection/#select-everything-or-just-filtered"
            }
        }
    },
    "display": {
        "meta": {
            "displayName": "Columns:  Display"
        },
        "hide": {
            "default": false,
            "description": "Set to `true` for this column to be hidden. You might think it would make more sense to call this field `visible` and mark it `false` to hide, but we want all default values to be `false` and we want columns to be visible by default."
        },
        "initialHide": {
            "description": "Same as 'hide', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "lockVisible": {
            "default": false,
            "description": "Set to `true` to block making column visible / hidden via the UI (API will still work)."
        },
        "lockPosition": {
            "default": false,
            "description": "Set to `true` to always have this column displayed first."
        },
        "suppressMovable": {
            "default": false,
            "description": "Set to `true` if you do not want this column to be movable via dragging."
        }
    },
    "width": {
        "meta": {
            "displayName": "Columns:  Width"
        },
        "width": {
            "description": "Initial width in pixels for the cell."
        },
        "initialWidth": {
            "description": "Same as 'width', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "minWidth": {
            "description": "Minimum width in pixels for the cell."
        },
        "maxWidth": {
            "description": "Maximum width in pixels for the cell."
        },
        "flex": {
            "description": "Used instead of `width` when the goal is to fill the remaining empty space of the grid.",
            "more": {
                "name": "Column Flex",
                "url": "/column-sizing/#column-flex"
            }
        },
        "initialFlex": {
            "description": "Same as 'flex', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "resizable": {
            "default": false,
            "description": "Set to `true` to allow column to be resized."
        },
        "suppressSizeToFit": {
            "default": false,
            "description": "Set to `true` if you want this column's width to be fixed during 'size to fit' operations."
        }
    },
    "pinned": {
        "meta": {
            "displayName": "Columns:  Pinned"
        },
        "pinned": {
            "options": [
                "left",
                "right"
            ],
            "description": "Pin a column to one side. A value of `true` is converted to `'left'`"
        },
        "initialPinned": {
            "description": "Same as 'pinned', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "lockPinned": {
            "default": false,
            "description": "Set to `true` to block pinning column via the UI (API will still work)."
        }
    },
    "spanning": {
        "meta": {
            "displayName": "Columns:  Spanning",
            "description": "See [Column](/column-spanning/) / [Row](/row-spanning/) Spanning"
        },
        "colSpan": {
            "description": "By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns."
        },
        "rowSpan": {
            "description": "By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows."
        }
    },
    "styling": {
        "meta": {
            "displayName": "Columns:  Rendering and Styling"
        },
        "cellStyle": {
            "description": "The style to give a particular cell.",
            "more": {
                "name": "Cell Style",
                "url": "/cell-styles/#cell-style"
            }
        },
        "cellClass": {
            "description": "The class to give a particular cell.",
            "more": {
                "name": "Cell Class",
                "url": "/cell-styles/#cell-class"
            }
        },
        "cellClassRules": {
            "description": "Rules which can be applied to include certain CSS classes.",
            "more": {
                "name": "Cell Class Rules",
                "url": "/cell-styles/#cell-class-rules"
            }
        },
        "cellRenderer": {
            "description": "`cellRenderer` to use for this column.",
            "more": {
                "name": "Cell Renderer",
                "url": "/cell-rendering/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ICellRendererComp"
                ],
                "include": []
            }
        },
        "cellRendererFramework": {
            "description": "Framework `cellRenderer` to use for this column.",
            "more": {
                "name": "Cell Renderer",
                "url": "/cell-rendering/"
            }
        },
        "cellRendererParams": {
            "description": "Params to be passed to cell renderer component.",
            "more": {
                "name": "Cell Renderer Params",
                "url": "/component-cell-renderer/#reference-ICellRendererParams"
            }
        },
        "cellRendererSelector": {
            "description": "Callback to select which cell renderer to be used for a given row within the same column.",
            "more": {
                "name": "Many Renderers One Column",
                "url": "/cell-rendering/#many-renderers-one-column"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ICellRendererComp"
                ],
                "include": [
                    "ICellRendererParams"
                ]
            }
        },
        "autoHeight": {
            "default": false,
            "description": "Set to `true` to have the grid calculate the height of a row based on contents of this column."
        },
        "wrapText": {
            "default": false,
            "description": "Set to `true` to have the text wrap inside the cell."
        },
        "enableCellChangeFlash": {
            "default": false,
            "description": "Set to `true` to flash a cell when it's refreshed."
        },
        "suppressCellFlash": {
            "default": false,
            "description": "Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid."
        }
    },
    "sort": {
        "meta": {
            "displayName": "Columns:  Sort"
        },
        "sortable": {
            "default": false,
            "description": "Set to `true` to allow sorting on this column."
        },
        "sort": {
            "options": [
                null,
                "asc",
                "desc"
            ],
            "description": "Set to sort this column."
        },
        "initialSort": {
            "description": "Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions."
        },
        "sortIndex": {
            "description": "If doing multi-sort by default, the order which column sorts are applied."
        },
        "initialSortIndex": {
            "description": "Same as 'sortIndex', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "sortingOrder": {
            "options": [
                null,
                "asc",
                "desc"
            ],
            "description": "Array defining the order in which sorting occurs (if sorting is enabled)."
        },
        "comparator": {
            "description": "Comparator function for custom sorting."
        },
        "unSortIcon": {
            "default": false,
            "description": "Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column."
        }
    },
    "filtering": {
        "meta": {
            "displayName": "Columns:  Filter"
        },
        "filter": {
            "description": "Filter component to use for this column. <br/>Set to `true` to use the default filter. <br/>Set to the name of a [provided filter](/filtering/#provided-filters) or set to a `IFilterComp`",
            "more": {
                "name": "Configuring Filters",
                "url": "/filtering/#configuring-filters-on-columns"
            }
        },
        "filterValueGetter": {
            "description": "Function or [expression](/cell-expressions/#column-definition-expressions). Gets the value for filtering purposes."
        },
        "getQuickFilterText": {
            "description": "A function to tell the grid what quick filter text to use for this column if you don't want to use the default (which is calling `toString` on the value)."
        },
        "filterFramework": {
            "description": "Provided a custom framework filter to use for this column.",
            "more": {
                "name": "Custom Filter",
                "url": "/component-filter"
            }
        },
        "filterParams": {
            "description": "Custom params to be passed to the filter component specified in `filter` or `filterFramework`.",
            "more": {
                "name": "Filter Parameters",
                "url": "/filtering/#filter-parameters"
            }
        },
        "floatingFilter": {
            "default": false,
            "description": "Whether to show a floating filter for this column.",
            "more": {
                "name": "Floating Filter",
                "url": "/floating-filters"
            }
        },
        "floatingFilterComponent": {
            "description": "Floating filter component to use for this column.",
            "more": {
                "name": "Floating Filter Component",
                "url": "/component-floating-filter/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "IFloatingFilterComp"
                ],
                "include": []
            }
        },
        "floatingFilterComponentFramework": {
            "description": "Floating filter framework component to use for this column.",
            "more": {
                "name": "Floating Filter Component",
                "url": "/component-floating-filter/"
            }
        },
        "floatingFilterComponentParams": {
            "description": "Custom params to be passed to `floatingFilterComponent` or `floatingFilterComponentFramework`.",
            "more": {
                "name": "Floating Filter Parameters",
                "url": "/component-floating-filter/#custom-filter-parameters"
            }
        },
        "suppressFiltersToolPanel": {
            "default": false,
            "description": "Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel."
        }
    },
    "editing": {
        "meta": {
            "displayName": "Columns:  Editing"
        },
        "editable": {
            "default": false,
            "description": "Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable."
        },
        "valueSetter": {
            "description": "Function or [expression](/cell-expressions/#column-definition-expressions). Sets the value into your data for saving. Return `true` if the data changed."
        },
        "valueParser": {
            "description": "Function or [expression](/cell-expressions/#column-definition-expressions). Parses the value for saving."
        },
        "cellEditor": {
            "description": "`cellEditor` to use for this column.",
            "more": {
                "name": "Cell Editors",
                "url": "/component-cell-editor/"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ICellEditorComp"
                ],
                "include": []
            }
        },
        "cellEditorFramework": {
            "description": "Framework `cellEditor` to use for this column.",
            "more": {
                "name": "Cell Editors",
                "url": "/component-cell-editor/"
            }
        },
        "cellEditorParams": {
            "description": "Params to be passed to cell editor component."
        },
        "cellEditorSelector": {
            "description": "Callback to select which cell editor to be used for a given row within the same column.",
            "more": {
                "name": "Many Editors One Column",
                "url": "/cell-editing/#many-editors-one-column"
            },
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "ICellEditorComp"
                ],
                "include": []
            }
        },
        "singleClickEdit": {
            "default": false,
            "description": "Set to `true` to have cells under this column enter edit mode after single click."
        }
    },
    "grouping": {
        "meta": {
            "displayName": "Columns:  Row Grouping",
            "description": "(Enterprise only) See [Row Grouping](/grouping/)"
        },
        "rowGroup": {
            "description": "Set to true to row group by this column"
        },
        "initialRowGroup": {
            "description": "Same as 'rowGroup', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "rowGroupIndex": {
            "description": "Set this in columns you want to group by. If only grouping by one column, set this to any number (e.g. `0`). If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on)."
        },
        "initialRowGroupIndex": {
            "description": "Same as 'rowGroupIndex', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "enableRowGroup": {
            "default": false,
            "description": "(Enterprise only) Set to `true` if you want to be able to row group by this column via the GUI. This will not block the API or properties being used to achieve row grouping."
        },
        "enableValue": {
            "default": false,
            "description": "(Enterprise only) Set to `true` if you want to be able to aggregate by this column via the GUI. This will not block the API or properties being used to achieve aggregation."
        },
        "aggFunc": {
            "options": [
                "sum",
                "min",
                "max",
                "first",
                "last"
            ],
            "description": "Name of function to use for aggregation. You can also provide your own agg function."
        },
        "initialAggFunc": {
            "description": "Same as 'aggFunc', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "allowedAggFuncs": {
            "description": "Aggregation functions allowed on this column e.g. `['sum', 'avg']`. If missing, all installed functions are allowed. This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API."
        }
    },
    "pivoting": {
        "meta": {
            "displayName": "Columns:  Pivoting",
            "description": "(Enterprise only) See [Pivoting](/pivoting/)"
        },
        "pivot": {
            "description": "Set to true to pivot by this column"
        },
        "initialPivot": {
            "description": "Same as 'pivot', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "pivotIndex": {
            "description": "Set this in columns you want to pivot by. If only pivoting by one column, set this to any number (e.g. `0`). If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on)."
        },
        "initialPivotIndex": {
            "description": "Same as 'pivotIndex', except only applied when creating a new column. Not applied when updating column definitions."
        },
        "pivotComparator": {
            "description": "Comparator to use when ordering the pivot columns, when this column is used to pivot on. The values will always be strings, as the pivot service uses strings as keys for the pivot groups."
        },
        "enablePivot": {
            "default": false,
            "description": "Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot."
        }
    },
    "row dragging": {
        "meta": {
            "displayName": "Columns:  Row Dragging",
            "description": "See [Row Dragging](/row-dragging/)"
        },
        "rowDrag": {
            "default": false,
            "description": "`boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging."
        },
        "rowDragText": {
            "description": "A callback that should return a string to be displayed by the `rowDragComp` while dragging a row. If this callback is not set, the current cell value will be used."
        },
        "dndSource": {
            "default": false,
            "description": "`boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop."
        },
        "dndSourceOnRowDrag": {
            "description": "Function to allow custom drag functionality for native drag and drop."
        }
    },
    "events": {
        "meta": {
            "displayName": "Columns:  Events",
            "isEvent": true
        },
        "onCellValueChanged": {
            "description": "Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`."
        },
        "onCellClicked": {
            "description": "Callback called when a cell is clicked."
        },
        "onCellDoubleClicked": {
            "description": "Callback called when a cell is double clicked."
        },
        "onCellContextMenu": {
            "description": "Callback called when a cell is right clicked."
        }
    },
    "columnGroups": {
        "meta": {
            "displayName": "Groups",
            "description": "For column groups, the property `children` is mandatory. When the grid sees `children` it knows it's a column group."
        },
        "children": {
            "description": "A list containing a mix of columns and column groups.",
            "isRequired": true
        },
        "groupId": {
            "description": "The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API."
        },
        "marryChildren": {
            "default": false,
            "description": "Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed."
        },
        "openByDefault": {
            "default": false,
            "description": "Set to `true` if this group should be opened by default."
        },
        "columnGroupShow": {
            "description": "Whether to show the column when the group is open / closed."
        },
        "toolPanelClass": {
            "description": "Class to use for the tool panel cell. Can be a string, array of strings, or function."
        },
        "suppressColumnsToolPanel": {
            "default": false,
            "description": "Set to `true` if you do not want this column or group to appear in the Columns Tool Panel."
        },
        "suppressFiltersToolPanel": {
            "default": false,
            "description": "Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel."
        }
    },
    "groupsHeader": {
        "meta": {
            "displayName": "Groups:  Header"
        },
        "headerName": {
            "description": "The name to render in the column header. If not specified and field is specified, the field name will be used as the header name."
        },
        "headerClass": {
            "description": "Class to use for the header cell. Can be a string, array of strings, or function."
        },
        "headerGroupComponent": {
            "description": "Component to use header group.",
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "IHeaderGroupComp"
                ],
                "include": []
            }
        },
        "headerGroupComponentFramework": {
            "description": "Framework component to use header group."
        },
        "headerGroupComponentParams": {
            "description": "Params for the header group component."
        }
    }
}