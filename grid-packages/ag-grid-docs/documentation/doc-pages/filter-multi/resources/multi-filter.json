{
    "_config_": {},
    "IMultiFilterParams": {
        "filters": {
            "interfaceHierarchyOverrides": {
                "exclude": [
                    "IFilterType",
                    "IFloatingFilterType",
                    "IFloatingFilterComp"
                ],
                "include": []
            }
        }
    },
    "IMultiFilterDef": {
        "filter": {
            "description": "Child filter component to use inside the Multi Filter."
        },
        "filterFramework": {
            "description": "Child framework filter component to use inside the Multi Filter."
        },
        "filterParams": {
            "description": "Custom parameters to be passed to the child filter component."
        },
        "floatingFilterComponent": {
            "description": "Floating filter component to use for the child filter."
        },
        "floatingFilterComponentFramework": {
            "description": "Floating framework filter component to use for the child filter."
        },
        "floatingFilterComponentParams": {
            "description": "Custom parameters to be passed to the floating filter component."
        },
        "display": {
            "more": {
                "url": "/filter-multi/#display-style",
                "name": "Display Style"
            }
        }
    },
    "api": {
        "isFilterActive()": {
            "description": "Returns `true` if the filter is currently active, otherwise `false`.",
            "type": {
                "arguments": {},
                "returnType": "boolean"
            }
        },
        "getModel()": {
            "description": "Returns a model representing the current state of the filter, or `null` if the filter is not active.",
            "type": {
                "arguments": {},
                "returnType": "IMultiFilterModel"
            }
        },
        "setModel()": {
            "description": "Sets the state of the child filters using the supplied models. Providing `null` will de-activate all child filters.<br /><br />**Note:** if you are [providing values asynchronously](/filter-set-filter-list/#asynchronous-values) to a child [Set Filter](/filter-set/), you need to wait for these changes to be applied before performing any further actions by waiting on the returned grid promise, e.g. `filter.setModel([null, { values: ['a', 'b'] }]).then(function() { gridApi.onFilterChanged(); });`",
            "type": {
                "arguments": {
                    "model": [
                        "IMultiFilterModel",
                        "null"
                    ]
                }
            }
        },
        "getChildFilterInstance()": {
            "description": "Returns the child filter instance at the specified index.",
            "type": {
                "arguments": {
                    "index": "number"
                },
                "returnType": "IFilterComp"
            },
            "more": {
                "url": "/filter-multi/#accessing-child-filters",
                "name": "Accessing Child Filters"
            }
        }
    }
}