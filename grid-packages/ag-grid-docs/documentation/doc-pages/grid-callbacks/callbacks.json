{
    "_config_": {
        "codeSrc": "GridOptions"
    },
    "callbacks": {
        "meta": {
            "displayName": "Rows"
        },
        "getBusinessKeyForNode": {
            "description": "Return a business key for the node. If implemented, each row in the DOM will have an attribute `row-id='abc'` where `abc` is what you return as the business key. This is useful for automated testing, as it provides a way for your tool to identify rows based on unique business keys."
        },
        "getRowNodeId": {
            "description": "Allows you to set the ID for a particular row node based on the data. Useful for selection and server side sorting and filtering for paging and virtual pagination."
        },
        "processRowPostCreate": {
            "description": "Allows you to process rows after they are created, so you can do final adding of custom attributes etc."
        },
        "isRowSelectable": {
            "description": "Callback to be used to determine which rows are selectable. By default rows are selectable, so return `false` to make a row un-selectable.",
            "more": {
                "name": "Specify Selectable Rows",
                "url": "/row-selection/#specify-selectable-rows"
            }
        },
        "isRowMaster": {
            "description": "Callback to be used with [Master Detail](/master-detail/) to determine if a row should be a master row. If `false` is returned no detail row will exist for this row."
        },
        "fillOperation": {
            "description": "Callback to fill values instead of simply copying values or increasing number values using linear progression."
        }
    },
    "styling": {
        "meta": {
            "displayName": "Styling"
        },
        "getRowClass": {
            "description": "Callback version of property `rowClass` to set class(es) for each row individually. Function should return either a string (class name), array of strings (array of class names) or undefined for no class.",
            "more": {
                "name": "Row Class",
                "url": "/row-styles/#row-class"
            }
        },
        "getRowStyle": {
            "description": "Callback version of property `rowStyle` to set style for each row individually. Function should return an object of CSS values.",
            "more": {
                "name": "Row Style",
                "url": "/row-styles/#row-style"
            }
        },
        "getRowHeight": {
            "description": "Callback version of property `rowHeight` to set height for each row individually. Function should return a positive number of pixels, or return `null`/`undefined` to use the default row height.",
            "more": {
                "name": "Row Height",
                "url": "/row-height/"
            }
        },
        "isFullWidthCell": {
            "description": "Tells the grid if this row should be rendered as full width.",
            "more": {
                "name": "Full Width Rows",
                "url": "/full-width-rows/"
            }
        }
    },
    "Filter": {
        "meta": {
            "displayName": "Filtering",
            "page": {
                "name": "Filtering",
                "url": "/filtering-overview/"
            }
        },
        "isExternalFilterPresent": {
            "description": "Grid calls this method to know if an external filter is present.",
            "more": {
                "name": "External Filter",
                "url": "/filter-external/"
            }
        },
        "doesExternalFilterPass": {
            "description": "Should return `true` if external filter passes, otherwise `false`.",
            "more": {
                "name": "External Filter",
                "url": "/filter-external/"
            }
        }
    },
    "groupPivot": {
        "meta": {
            "displayName": "Row Grouping and Pivoting",
            "description": "See [Pivot](/pivoting/) and [Aggregation](/aggregation/) for more information"
        },
        "groupRowAggNodes": {
            "description": "Callback for grouping.",
            "more": {
                "name": "Row Grouping",
                "url": "/grouping/#reference-callbacks"
            }
        },
        "isGroupOpenByDefault": {
            "description": "([Client-side Row Model](/client-side-model/) only) Allows groups to be open by default."
        },
        "defaultGroupOrderComparator": {
            "description": "Allows default sorting of groups.",
            "more": {
                "name": "Default Group Order",
                "url": "/grouping-group-order/#default-group-order"
            }
        },
        "processSecondaryColDef": {
            "description": "Callback to be used with pivoting, to allow changing the second column definition."
        },
        "processSecondaryColGroupDef": {
            "description": "Callback to be used with pivoting, to allow changing the second column group definition."
        }
    },
    "menus": {
        "meta": {
            "displayName": "Accessories"
        },
        "getContextMenuItems": {
            "description": "For customising the context menu.",
            "more": {
                "name": "Context Menu",
                "url": "/context-menu/"
            }
        },
        "getMainMenuItems": {
            "description": "For customising the main 'column header' menu.",
            "more": {
                "name": "Column Menu",
                "url": "/column-menu/#customising-the-general-menu-tab"
            }
        },
        "postProcessPopup": {
            "description": "Allows user to process popups after they are created. Applications can use this if they want to, for example, reposition the popup."
        }
    },
    "clipboard": {
        "meta": {
            "displayName": "Clipboard",
            "page": {
                "name": "Clipboard",
                "url": "/clipboard/"
            }
        },
        "processCellForClipboard": {
            "description": "Allows you to process cells for the clipboard. Handy if for example you have `Date` objects that need to have a particular format if importing into Excel."
        },
        "processHeaderForClipboard": {
            "description": "Allows you to process header values for the clipboard."
        },
        "processCellFromClipboard": {
            "description": "Allows you to process cells from the clipboard. Handy if for example you have number fields, and want to block non-numbers from getting into the grid."
        },
        "sendToClipboard": {
            "description": "Allows you to get the data that would otherwise go to the clipboard. To be used when you want to control the 'copy to clipboard' operation yourself."
        },
        "processDataFromClipboard": {
            "description": "Allows complete control of the paste operation, including cancelling the operation (so nothing happens) or replacing the data with other data."
        }
    },
    "nav": {
        "meta": {
            "displayName": "Keyboard Navigation",
            "page": {
                "name": "Keyboard Navigation",
                "url": "/keyboard-navigation/"
            }
        },
        "navigateToNextHeader": {
            "description": "Allows overriding the default behaviour for when user hits navigation (arrow) key when a header is focused."
        },
        "tabToNextHeader": {
            "description": "Allows overriding the default behaviour for when user hits <kbd>Tab</kbd> key when a header is focused."
        },
        "navigateToNextCell": {
            "description": "Allows overriding the default behaviour for when user hits navigation (arrow) key when a cell is focused."
        },
        "tabToNextCell": {
            "description": "Allows overriding the default behaviour for when user hits <kbd>Tab</kbd> key when a cell is focused."
        }
    },
    "pagination": {
        "meta": {
            "displayName": "Pagination",
            "page": {
                "name": "Row Pagination",
                "url": "/row-pagination"
            }
        },
        "paginationNumberFormatter": {
            "description": "Allows user to format the numbers in the pagination panel, i.e. 'row count' and 'page number' labels. This is for pagination panel only, to format numbers inside the grid's cells (i.e. your data), then use `valueFormatter` in the column definitions."
        }
    },
    "ServerSide": {
        "meta": {
            "displayName": "RowModel: Server-Side",
            "page": {
                "name": "Server-Side Row Model",
                "url": "/server-side-model/"
            }
        },
        "getChildCount": {
            "description": "Allows setting the child count for a group row."
        },
        "getServerSideStoreParams": {
            "description": "Allows providing different params for different levels of grouping."
        },
        "isServerSideGroupOpenByDefault": {
            "description": "Allows groups to be open by default."
        },
        "isApplyServerSideTransaction": {
            "description": "Allows cancelling transactions."
        },
        "isServerSideGroup": {
            "description": "([SSRM Tree Data](/server-side-model-tree-data/)) Allows specifying which rows are expandable."
        },
        "getServerSideGroupKey": {
            "description": "([SSRM Tree Data](/server-side-model-tree-data/)) Allows specifying group keys."
        }
    },
    "charts": {
        "meta": {
            "displayName": "Integrated Charts",
            "page": {
                "name": "Integrated Charts",
                "url": "/integrated-charts/"
            }
        },
        "getChartToolbarItems": {
            "description": "Callback to be used to customise the chart toolbar items.",
            "more": {
                "name": "Configuring Toolbar Items",
                "url": "/integrated-charts-toolbar/#configuring-toolbar-items-and-menu-panels"
            }
        }
    },
    "misc": {
        "meta": {
            "displayName": "Miscellaneous"
        },
        "getDocument": {
            "description": "Allows overriding what `document` is used. Currently used by Drag and Drop (may extend to other places in the future). Use this when you want the grid to use a different `document` than the one available on the global scope. This can happen if docking out components (something which Electron supports)."
        }
    },
    "sort": {
        "meta": {
            "displayName": "Sorting",
            "page": {
                "name": "Row Sorting",
                "url": "/row-sorting/"
            }
        },
        "postSort": {
            "description": "Callback to perform additional sorting after the grid has sorted the rows.",
            "more": {
                "name": "Post Sort",
                "url": "/row-sorting/#post-sort"
            }
        }
    }
}