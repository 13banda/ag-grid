{
    "filterParams": {
        "applyButton<br />clearButton<br />resetButton<br />debounceMs<br />newRowsAction": {
            "description": "",
            "more": {
                "name": "Provided Filter Params",
                "url": "../javascript-grid-filter-provided/#providedFilterParams"
            }
        },
        "cellHeight": {
            "description": "The height of the cell in pixels."
        },
        "cellRenderer": {
            "description": "Similar to the cell renderer for the grid (you can use the same one in both locations). Setting it separately here allows for the value to be rendered differently in the filter. Note that the cell renderer for the set filter only receives the value as a parameter, as opposed to the cell renderer in the <code>colDef</code> that receives more information."
        },
        "values": {
            "description": "The values to display in the filter. If this is not set, the filter will takes its values from what is loaded in the table. Setting it allows you to set values where a) the value may not be present in the list (for example, if you want to show all states in America so that the user is not confused by missing states, even though states are missing from the data set in the grid) and b) the list is not available (happens when using server-side filtering in pagination and infinite scrolling)."
        },
        "suppressSyncValuesAfterDataChange": {
            "default": false,
            "description": "Set to <code>true</code> to have the values inside the set filter <strong>not</strong> refresh after values are changed inside the grid."
        },
        "suppressRemoveEntries": {
            "default": false,
            "description": "Set to <code>true</code> to stop the filter from removing values that are no longer available (like Excel does)."
        },
        "comparator(a, b)": {
            "description": "<p>Comparator for sorting. If not provided, the <code>colDef</code> comparator is used. If <code>colDef</code> is also not provided, the default (ag-Grid provided) comparator is used.</p><p>The comparator for a set filter is only provided the values as the first two parameters, whereas the comparator for the <code>colDef</code> is also provided the row data as additional parameters. This is because when sorting rows, row data exists. For example, take 100 rows split across the color values <code>[white, black]</code>. The <code>colDef</code> comparator will be sorting 100 rows, however the filter will be only sorting two values.</p><p>If you are providing a comparator that depends on the row data, and you are using set filter, be sure to provide the set filter with an alternative comparator that doesn't depend on the row data."
        },
        "suppressSorting": {
            "default": false,
            "description": "If <code>true</code>, the set filter values will not be sorted. Use this if you are providing your own values and don't want them sorted as you are providing in the order you want."
        },
        "suppressMiniFilter": {
            "default": false,
            "description": "Set to <code>true</code> to hide the mini filter."
        },
        "suppressSelectAll": {
            "default": false,
            "description": "Set to <code>true</code> to remove the \"select all\" checkbox."
        },
        "textFormatter": {
            "description": "If specified, this formats the text before applying the mini filter compare logic, useful for instance if substituting accented characters or if you want to perform case-sensitive mini filtering. This matches the <a href='../javascript-grid-filter-text/#text-formatter'>text formatter used for text filters</a>."
        }
    },
    "api": {
        "setMiniFilter(newMiniFilter)": {
            "description": "Sets the filter at the top of the filter (the 'quick search' in the popup)."
        },
        "getMiniFilter()": {
            "description": "Gets the mini filter text."
        },
        "selectEverything()": {
            "description": "Selects everything."
        },
        "selectNothing()": {
            "description": "Clears the selection."
        },
        "isFilterActive()": {
            "description": "Returns <code>true</code> if anything except 'everything selected'."
        },
        "unselectValue(value)": {
            "description": "Unselects a value."
        },
        "selectValue(value)": {
            "description": "Selects a value."
        },
        "isValueSelected(value)": {
            "description": "Returns <code>true</code> if a value is selected."
        },
        "isEverythingSelected()": {
            "description": "Returns <code>true</code> if everything selected (inverse of <code>isFilterActive()</code>)."
        },
        "isNothingSelected()": {
            "description": "Returns <code>true</code> if nothing is selected."
        },
        "getUniqueValueCount()": {
            "description": "Returns number of unique values. Useful for iterating with <code>getUniqueValue(index)</code>."
        },
        "getUniqueValue(index)": {
            "description": "Returns the unique value at the given <code>index</code>."
        },
        "setFilterValues(arrayOfStringOptions)": {
            "description": "Useful if you want to change the available options on the fly."
        },
        "resetFilterValues()": {
            "description": "Useful if you want to rebuild the filter options based on the underlying data."
        },
        "setLoading(loading)": {
            "description": "Useful if you want to show/hide the loading overlay in the set filter."
        },
        "applyModel()": {
            "description": "Applies the model from the UI."
        }
    }
}