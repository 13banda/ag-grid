<?php
$pageTitle = "Pivot Tables: Enterprise Grade Feature of our Datagrid";
$pageDescription = "Pivoting: Make columns out of values by Pivoting on the data, similar to Pivot Tables in Excel. Pivoting allows you to take a columns values and turn them into columns. Enterprise feature of ag-Grid supporting Angular, React, Javascript and many more.";
$pageKeywords = "ag-Grid JavaScript Grid Pivot";
$pageGroup = "feature";
include '../documentation-main/documentation_header.php';
?>

    <h1 class="heading-enterprise">Pivoting - Secondary Columns</h1>

    <p class="lead">
        Pivoting allows you to take a columns values and turn them into columns. For example you can pivot on Country
        to make columns for Ireland, United Kingdom, USA etc.
    </p>


    <h2 id="secondary-columns">Primary vs Secondary Columns</h2>

    <p>
        When pivot mode is off, the columns in the grid correspond to the column definitions provided in the
        grid configuration. When pivot mode is on and pivot is active, the columns in the grid are composed
        by a matrix of the pivot columns and the aggregated value columns.
    </p>

    <p>For example, consider the columns from the examples {Year and Gold}. If a pivot is placed on Year
        and an aggregation of <code>sum</code> is placed on gold, then the secondary columns that actually get displayed
        in the grid will be {2002 sum(Gold), 2004 sum(Gold), 2006 sum(Gold), 2008 sum(Gold), 2010 sum(Gold),
        2012 sum(Gold)}.
    </p>

    <p>
        The primary and secondary columns behave in different ways in the following scenarios:
    </p>
    <p>
        <b>Tool Panel</b><br>
        The toolPanel always displays primary columns.
    </p>
    <p>
        <b>Filtering</b><br>
        Filters are always set on primary columns.
    </p>
    <p>
        <b>Sorting</b><br>
        Sorting can be on primary or secondary columns, depending on what is displayed inside the grid.
    </p>
    <p>
        <b>Column State</b><br>
        Storing and restoring column state view the <code>columnApi.getColumnState()</code> and
        <code>columnApi.setColumnState()</code> methods work solely on primary columns.
    </p>

    <h2>Looking up Secondary Columns</h2>

    <p>
        As mentioned above, the secondary columns in the grid are created by the grid by cross referencing
        pivot columns with value columns. The result of which are new columns that have column ID's generated by
        the grid. If you want to use the column API to manage the generated columns (eg to set their width,
        apply a sort etc) you need to look up the column. The grid provides a utility function to look up
        such columns called <code>getSecondaryPivotColumn(pivotCols, valueCol)</code>
    </p>

    <snippet>
// look up the column that pivots on country Ireland and aggregates gold
var irelandGoldColumn = columnApi.getSecondaryPivotColumn(['Ireland'],'gold');
columnApi.setColumnWidth(irelandGoldColumn, newWidth);

// look up the column that pivots on country SausageKingdom and year 2002 and aggregates silver
var sausageKingdomColumn = columnApi.getSecondaryPivotColumn(['SausageKingdom','2002'],'gold');
console.log('found column with id ' + sausageKingdomColumn.getId());</snippet>


    <h2 id="orderingPivotColumns">Ordering Pivot Columns</h2>

    <p>
        The user is free to drag columns to reorder them and you are able to reorder columns via the columnApi
        in the normal way. However you may want to change the default order of the pivot columns.
    </p>

    <p>
        <b>Order of Pivot Value Column Groups</b><br/>
        Pivot value columns are the column groups created by the pivot values - eg if 'Country' is a pivot
        column, thn the Pivot Value Column Groups are 'Ireland', 'UK', etc. These columns are ordered alphabetically
        by default. To override this, provide <code>pivotComparator(a,b)</code> function in the column definition.
        See the example below for a demonstration.
    </p>

    <p>
        <b>Order of Pivot Value Columns</b><br/>
        Pivot value columns are the lowest level column and correspond to the values selected in your pivot.
        For example, if value columns are the months of the year, then the values will be 'Jan', 'Feb', 'Mar'
        etc, one for each value column added. The order of these will either be a) the order the value columns
        appear in the original column definitions if you provide 'aggFunc' as part of the columns or
        b) the order you add the columns as value columns.
    </p>

    <h2 id="manipulatingSecondaryColumns">Manipulating Secondary Columns</h2>

    <p>
        If you are not happy with the secondary columns provided by the grid, you have the opportunity to change
        any detail inside them. This is done by providing callbacks <code>processSecondaryColDef</code> and
        <code>processSecondaryColGroupDef</code>. The example below shows using these callbacks to modify the labels
        for the headers. You are free to change any of the items you can define on a column except <code>field</code>
        as the field attribute is needed by the grid to pull out the value.
    </p>

    <?= grid_example('Secondary Columns', 'secondary-columns', 'generated', ['enterprise' => true, 'exampleHeight' => 650, 'modules' => ['clientside', 'rowgrouping', 'menu', 'columnpanel', 'filterpanel']]) ?>


<?php include '../documentation-main/documentation_footer.php';?>
