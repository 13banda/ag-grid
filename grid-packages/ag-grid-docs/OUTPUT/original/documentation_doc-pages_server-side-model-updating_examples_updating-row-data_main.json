{
    "eventHandlers": [],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n        {\n            field: \"id\",\n            hide: true\n        },\n        { field: \"athlete\" },\n        {\n            field: \"country\",\n            rowGroup: true,\n            hide: true\n        },\n        { field: \"gold\" },\n        { field: \"silver\" },\n        { field: \"bronze\" }\n    ]"
        },
        { "name": "defaultColDef", "value": "{\n        width: 250,\n        resizable: true\n    }" },
        { "name": "rowSelection", "value": "\"multiple\"" },
        { "name": "rowModelType", "value": "\"serverSide\"" },
        { "name": "serverSideStoreType", "value": "\"partial\"" },
        { "name": "cacheBlockSize", "value": "75" },
        { "name": "animateRows", "value": "true" },
        { "name": "isRowSelectable", "value": null }
    ],
    "components": [],
    "defaultColDef": "{\n    width: 250,\n    resizable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n        {\n            field: \"id\",\n            hide: true\n        },\n        { field: \"athlete\" },\n        {\n            field: \"country\",\n            rowGroup: true,\n            hide: true\n        },\n        { field: \"gold\" },\n        { field: \"silver\" },\n        { field: \"bronze\" }\n    ]",
    "instanceMethods": ["function isRowSelectable(rowNode) {\n        return !rowNode.group;\n    }"],
    "externalEventHandlers": [
        {
            "name": "refreshStore",
            "params": "",
            "body": "function refreshStore() {\n    this.gridApi.refreshServerSideStore({ purge: true });\n}"
        },
        {
            "name": "updateSelectedRows",
            "params": "",
            "body": "function updateSelectedRows() {\n    var idsToUpdate = this.gridApi.getSelectedNodes().map(function (node) {\n        return node.data.id;\n    });\n    var updatedRows = [];\n    this.gridApi.forEachNode(function (rowNode) {\n        if (idsToUpdate.indexOf(rowNode.data.id) >= 0) {\n            var updated = JSON.parse(JSON.stringify(rowNode.data));\n            updated.gold += 1;\n            updated.silver += 2;\n            updated.bronze += 3;\n            rowNode.setData(updated);\n            updatedRows.push(updated);\n        }\n    });\n    updateServerRows(updatedRows);\n}"
        }
    ],
    "utils": [
        "var idSequence = 0;",
        "var allData = [];",
        "function getMockServerResponse(request) {\n    var groupKeys = request.groupKeys;\n    var rowGroupColIds = request.rowGroupCols.map(function (x) {\n        return x.id;\n    });\n    var parentId = groupKeys.length > 0 ? groupKeys.join('') : '';\n    var rows = group(allData, rowGroupColIds, groupKeys, parentId);\n    var rowsThisBlock = rows.slice(request.startRow, request.endRow);\n    rowsThisBlock.sort();\n    var lastRow = rows.length <= (request.endRow || 0) ? rows.length : -1;\n    return {\n        rowsThisBlock: rowsThisBlock,\n        lastRow: lastRow\n    };\n}",
        "function group(data, rowGroupColIds, groupKeys, parentId) {\n    var groupColId = rowGroupColIds.shift();\n    if (!groupColId)\n        return data;\n    var groupedData = _(data).groupBy(function (x) {\n        return x[groupColId];\n    }).value();\n    if (groupKeys.length === 0) {\n        return Object.keys(groupedData).map(function (key) {\n            var res = {};\n            res['id'] = getGroupId(parentId, key);\n            res[groupColId] = key;\n            return res;\n        });\n    }\n    return group(groupedData[groupKeys.shift()], rowGroupColIds, groupKeys, parentId);\n}",
        "function updateServerRows(rowsToUpdate) {\n    var updatedDataIds = rowsToUpdate.map(function (data) {\n        return data.id;\n    });\n    for (var i = 0; i < allData.length; i++) {\n        var updatedDataIndex = updatedDataIds.indexOf(allData[i].id);\n        if (updatedDataIndex >= 0) {\n            allData[i] = rowsToUpdate[updatedDataIndex];\n        }\n    }\n}",
        "function getGroupId(parentId, key) {\n    return parentId ? parentId + '-' + key : key;\n}"
    ],
    "data": {
        "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
        "callback": "{\n    allData = data;\n    allData.forEach(function (item) {\n        item.id = idSequence++;\n    });\n    var dataSource = {\n        getRows: function (params) {\n            setTimeout(function () {\n                var response = getMockServerResponse(params.request);\n                params.success({\n                    rowData: response.rowsThisBlock,\n                    rowCount: response.lastRow\n                });\n            }, 500);\n        }\n    };\n    params.api.setServerSideDatasource(dataSource);\n}"
    },
    "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"updateSelectedRows()\">Update Selected Rows</button>\n        <button onclick=\"refreshStore()\">Refresh Store</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine-dark",
        "enterprise": true,
        "extras": ["lodash"],
        "modules": ["serverside", "rowgrouping"]
    }
}
