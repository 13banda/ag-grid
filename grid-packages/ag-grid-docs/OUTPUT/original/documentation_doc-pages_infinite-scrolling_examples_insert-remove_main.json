{
    "eventHandlers": [],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n        {\n            headerName: \"Item ID\",\n            field: \"id\",\n            valueGetter: \"node.id\",\n            cellRenderer: \"loadingRenderer\"\n        },\n        { field: \"make\" },\n        { field: \"model\" },\n        {\n            field: \"price\",\n            valueFormatter: valueFormatter\n        }\n    ]"
        },
        {
            "name": "datasource",
            "value": "{\n        rowCount: undefined,\n        getRows: function (params) {\n            console.log(\"asking for \" + params.startRow + \" to \" + params.endRow);\n            setTimeout(function () {\n                var rowsThisPage = allOfTheData.slice(params.startRow, params.endRow);\n                for (var i = 0; i < rowsThisPage.length; i++) {\n                    var item = rowsThisPage[i];\n                    var itemCopy = JSON.parse(JSON.stringify(item));\n                    rowsThisPage[i] = itemCopy;\n                }\n                var lastRow = -1;\n                if (allOfTheData.length <= params.endRow) {\n                    lastRow = allOfTheData.length;\n                }\n                params.successCallback(rowsThisPage, lastRow);\n            }, 500);\n        }\n    }"
        },
        {
            "name": "components",
            "value": "{\n        loadingRenderer: function (params) {\n            if (params.value !== undefined) {\n                return params.value;\n            } else {\n                return \"<img src=\\\"https://www.ag-grid.com/example-assets/loading.gif\\\">\";\n            }\n        }\n    }"
        },
        { "name": "defaultColDef", "value": "{ resizable: true }" },
        { "name": "rowSelection", "value": "\"multiple\"" },
        { "name": "rowModelType", "value": "\"infinite\"" },
        { "name": "maxBlocksInCache", "value": "2" },
        { "name": "infiniteInitialRowCount", "value": "500" },
        { "name": "maxConcurrentDatasourceRequests", "value": "2" },
        { "name": "getRowNodeId", "value": "function (item) {\n        return item.id.toString();\n    }" },
        {
            "name": "getRowStyle",
            "value": "function (params) {\n        if (params.data && params.data.make === \"Honda\") {\n            return { fontWeight: \"bold\" };\n        } else {\n            return undefined;\n        }\n    }"
        }
    ],
    "components": [],
    "defaultColDef": "{ resizable: true }",
    "globalComponents": [],
    "parsedColDefs": "[\n        {\n            headerName: \"Item ID\",\n            field: \"id\",\n            valueGetter: \"node.id\",\n            cellRenderer: \"loadingRenderer\"\n        },\n        { field: \"make\" },\n        { field: \"model\" },\n        {\n            field: \"price\",\n            valueFormatter: \"AG_LITERAL_valueFormatter\"\n        }\n    ]",
    "instanceMethods": [],
    "externalEventHandlers": [
        {
            "name": "insertItemsAt2AndRefresh",
            "params": "5",
            "body": "function insertItemsAt2AndRefresh(count) {\n    insertItemsAt2(count);\n    var maxRowFound = this.gridApi.isLastRowIndexKnown();\n    if (maxRowFound) {\n        var rowCount = this.gridApi.getInfiniteRowCount() || 0;\n        this.gridApi.setRowCount(rowCount + count);\n    }\n    this.gridApi.refreshInfiniteCache();\n}"
        },
        {
            "name": "removeItem",
            "params": "3, 10",
            "body": "function removeItem(start, limit) {\n    allOfTheData.splice(start, limit);\n    this.gridApi.refreshInfiniteCache();\n}"
        },
        {
            "name": "refreshCache",
            "params": "",
            "body": "function refreshCache() {\n    this.gridApi.refreshInfiniteCache();\n}"
        },
        {
            "name": "purgeCache",
            "params": "",
            "body": "function purgeCache() {\n    this.gridApi.purgeInfiniteCache();\n}"
        },
        {
            "name": "setRowCountTo200",
            "params": "",
            "body": "function setRowCountTo200() {\n    this.gridApi.setRowCount(200, false);\n}"
        },
        {
            "name": "rowsAndMaxFound",
            "params": "",
            "body": "function rowsAndMaxFound() {\n    console.log('getInfiniteRowCount() => ' + this.gridApi.getInfiniteRowCount());\n    console.log('isLastRowIndexKnown() => ' + this.gridApi.isLastRowIndexKnown());\n}"
        },
        {
            "name": "setPricesHigh",
            "params": "",
            "body": "function setPricesHigh() {\n    allOfTheData.forEach(function (dataItem) {\n        dataItem.price = Math.round(55500 + 400 * (0.5 + Math.random()));\n    });\n}"
        },
        {
            "name": "setPricesLow",
            "params": "",
            "body": "function setPricesLow() {\n    allOfTheData.forEach(function (dataItem) {\n        dataItem.price = Math.round(1000 + 100 * (0.5 + Math.random()));\n    });\n}"
        },
        {
            "name": "printCacheState",
            "params": "",
            "body": "function printCacheState() {\n    console.log('*** Cache State ***');\n    console.log(this.gridApi.getCacheBlockState());\n}"
        },
        {
            "name": "jumpTo500",
            "params": "",
            "body": "function jumpTo500() {\n    if ((this.gridApi.getInfiniteRowCount() || 0) < 501) {\n        this.gridApi.setRowCount(501, false);\n    }\n    this.gridApi.ensureIndexVisible(500);\n}"
        }
    ],
    "utils": [
        "var valueFormatter = function (params) {\n    if (typeof params.value === 'number') {\n        return '\\xA3' + params.value.toLocaleString();\n    } else {\n        return params.value;\n    }\n};",
        "var sequenceId = 0;",
        "var allOfTheData = [];",
        "function createRowData(id) {\n    var makes = [\n        'Toyota',\n        'Ford',\n        'Porsche',\n        'Chevy',\n        'Honda',\n        'Nissan'\n    ];\n    var models = [\n        'Cruze',\n        'Celica',\n        'Mondeo',\n        'Boxter',\n        'Genesis',\n        'Accord',\n        'Taurus'\n    ];\n    return {\n        id: id,\n        make: makes[id % makes.length],\n        model: models[id % models.length],\n        price: 72000\n    };\n}",
        "function insertItemsAt2(count) {\n    var newDataItems = [];\n    for (var i = 0; i < count; i++) {\n        var newItem = createRowData(sequenceId++);\n        allOfTheData.splice(2, 0, newItem);\n        newDataItems.push(newItem);\n    }\n    return newDataItems;\n}"
    ],
    "onGridReady": "{\n    sequenceId = 1;\n    allOfTheData = [];\n    for (var i = 0; i < 1000; i++) {\n        allOfTheData.push(createRowData(sequenceId++));\n    }\n}",
    "template": "<div style=\"display: flex; flex-direction: column; height: 100%;\">\n    <div style=\"margin-bottom: 10px;\">\n        <button onclick=\"insertItemsAt2AndRefresh(5)\">Insert Rows</button>\n        <button onclick=\"removeItem(3, 10)\">Delete Rows</button>\n        <button onclick=\"setRowCountTo200()\">Set Row Count</button>\n        <button onclick=\"rowsAndMaxFound()\">Print Info</button>\n        <button onclick=\"jumpTo500()\">Jump to 500</button>\n        <button onclick=\"printCacheState()\">Print Cache State</button>\n    </div>\n    <div style=\"margin-bottom: 10px;\">\n        <button onclick=\"setPricesHigh()\">Set Prices High</button>\n        <button onclick=\"setPricesLow()\">Set Prices Low</button>\n        <button onclick=\"refreshCache()\">Refresh Cache</button>\n        <button onclick=\"purgeCache()\">Purge Cache</button>\n    </div>\n    <div style=\"flex-grow: 1;\">\n        GRID_TEMPLATE_PLACEHOLDER\n    </div>\n</div>\n",
    "gridSettings": { "width": "100%", "height": "100%", "theme": "ag-theme-alpine", "modules": ["infinite"] }
}
