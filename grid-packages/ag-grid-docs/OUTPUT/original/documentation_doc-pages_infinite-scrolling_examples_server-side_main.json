{
    "eventHandlers": [],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n        {\n            headerName: \"ID\",\n            maxWidth: 100,\n            valueGetter: \"node.id\",\n            cellRenderer: \"loadingCellRenderer\",\n            sortable: false,\n            suppressMenu: true\n        },\n        {\n            field: \"athlete\",\n            suppressMenu: true\n        },\n        {\n            field: \"age\",\n            filter: \"agNumberColumnFilter\",\n            filterParams: {\n                filterOptions: [\n                    \"equals\",\n                    \"lessThan\",\n                    \"greaterThan\"\n                ],\n                suppressAndOrCondition: true\n            }\n        },\n        {\n            field: \"country\",\n            filter: \"agSetColumnFilter\",\n            filterParams: filterParams\n        },\n        {\n            field: \"year\",\n            filter: \"agSetColumnFilter\",\n            filterParams: {\n                values: [\n                    \"2000\",\n                    \"2004\",\n                    \"2008\",\n                    \"2012\"\n                ]\n            }\n        },\n        { field: \"date\" },\n        {\n            field: \"sport\",\n            suppressMenu: true\n        },\n        {\n            field: \"gold\",\n            suppressMenu: true\n        },\n        {\n            field: \"silver\",\n            suppressMenu: true\n        },\n        {\n            field: \"bronze\",\n            suppressMenu: true\n        },\n        {\n            field: \"total\",\n            suppressMenu: true\n        }\n    ]"
        },
        {
            "name": "defaultColDef",
            "value": "{\n        flex: 1,\n        minWidth: 150,\n        sortable: true,\n        resizable: true,\n        floatingFilter: true\n    }"
        },
        { "name": "rowSelection", "value": "\"multiple\"" },
        { "name": "rowModelType", "value": "\"infinite\"" },
        { "name": "cacheBlockSize", "value": "100" },
        { "name": "cacheOverflowSize", "value": "2" },
        { "name": "maxConcurrentDatasourceRequests", "value": "2" },
        { "name": "infiniteInitialRowCount", "value": "1" },
        { "name": "maxBlocksInCache", "value": "2" },
        { "name": "getRowNodeId", "value": "function (item) {\n        return item.id;\n    }" },
        {
            "name": "components",
            "value": "{\n        loadingCellRenderer: function (params) {\n            if (params.value !== undefined) {\n                return params.value;\n            } else {\n                return \"<img src=\\\"https://www.ag-grid.com/example-assets/loading.gif\\\">\";\n            }\n        }\n    }"
        }
    ],
    "components": [],
    "defaultColDef": "{\n    flex: 1,\n    minWidth: 150,\n    sortable: true,\n    resizable: true,\n    floatingFilter: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n        {\n            headerName: \"ID\",\n            maxWidth: 100,\n            valueGetter: \"node.id\",\n            cellRenderer: \"loadingCellRenderer\",\n            sortable: false,\n            suppressMenu: true\n        },\n        {\n            field: \"athlete\",\n            suppressMenu: true\n        },\n        {\n            field: \"age\",\n            filter: \"agNumberColumnFilter\",\n            filterParams: {\n                filterOptions: [\n                    \"equals\",\n                    \"lessThan\",\n                    \"greaterThan\"\n                ],\n                suppressAndOrCondition: true\n            }\n        },\n        {\n            field: \"country\",\n            filter: \"agSetColumnFilter\",\n            filterParams: \"AG_LITERAL_filterParams\"\n        },\n        {\n            field: \"year\",\n            filter: \"agSetColumnFilter\",\n            filterParams: {\n                values: [\n                    \"2000\",\n                    \"2004\",\n                    \"2008\",\n                    \"2012\"\n                ]\n            }\n        },\n        { field: \"date\" },\n        {\n            field: \"sport\",\n            suppressMenu: true\n        },\n        {\n            field: \"gold\",\n            suppressMenu: true\n        },\n        {\n            field: \"silver\",\n            suppressMenu: true\n        },\n        {\n            field: \"bronze\",\n            suppressMenu: true\n        },\n        {\n            field: \"total\",\n            suppressMenu: true\n        }\n    ]",
    "instanceMethods": [],
    "externalEventHandlers": [],
    "utils": [
        "var filterParams = { values: getCountries() };",
        "function sortAndFilter(allOfTheData, sortModel, filterModel) {\n    return sortData(sortModel, filterData(filterModel, allOfTheData));\n}",
        "function sortData(sortModel, data) {\n    var sortPresent = sortModel && sortModel.length > 0;\n    if (!sortPresent) {\n        return data;\n    }\n    var resultOfSort = data.slice();\n    resultOfSort.sort(function (a, b) {\n        for (var k = 0; k < sortModel.length; k++) {\n            var sortColModel = sortModel[k];\n            var valueA = a[sortColModel.colId];\n            var valueB = b[sortColModel.colId];\n            if (valueA == valueB) {\n                continue;\n            }\n            var sortDirection = sortColModel.sort === 'asc' ? 1 : -1;\n            if (valueA > valueB) {\n                return sortDirection;\n            } else {\n                return sortDirection * -1;\n            }\n        }\n        return 0;\n    });\n    return resultOfSort;\n}",
        "function filterData(filterModel, data) {\n    var filterPresent = filterModel && Object.keys(filterModel).length > 0;\n    if (!filterPresent) {\n        return data;\n    }\n    var resultOfFilter = [];\n    for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        if (filterModel.age) {\n            var age = item.age;\n            var allowedAge = parseInt(filterModel.age.filter);\n            if (filterModel.age.type == 'equals') {\n                if (age !== allowedAge) {\n                    continue;\n                }\n            } else if (filterModel.age.type == 'lessThan') {\n                if (age >= allowedAge) {\n                    continue;\n                }\n            } else {\n                if (age <= allowedAge) {\n                    continue;\n                }\n            }\n        }\n        if (filterModel.year) {\n            if (filterModel.year.values.indexOf(item.year.toString()) < 0) {\n                continue;\n            }\n        }\n        if (filterModel.country) {\n            if (filterModel.country.values.indexOf(item.country) < 0) {\n                continue;\n            }\n        }\n        resultOfFilter.push(item);\n    }\n    return resultOfFilter;\n}"
    ],
    "data": {
        "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
        "callback": "{\n    data.forEach(function (d, index) {\n        d.id = 'R' + (index + 1);\n    });\n    var dataSource = {\n        rowCount: undefined,\n        getRows: function (params) {\n            console.log('asking for ' + params.startRow + ' to ' + params.endRow);\n            setTimeout(function () {\n                var dataAfterSortingAndFiltering = sortAndFilter(data, params.sortModel, params.filterModel);\n                var rowsThisPage = dataAfterSortingAndFiltering.slice(params.startRow, params.endRow);\n                var lastRow = -1;\n                if (dataAfterSortingAndFiltering.length <= params.endRow) {\n                    lastRow = dataAfterSortingAndFiltering.length;\n                }\n                params.successCallback(rowsThisPage, lastRow);\n            }, 500);\n        }\n    };\n    params.api.setDatasource(dataSource);\n}"
    },
    "template": "GRID_TEMPLATE_PLACEHOLDER\n",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine",
        "enterprise": true,
        "modules": ["infinite", "setfilter", "menu", "columnpanel"]
    }
}
