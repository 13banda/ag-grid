{
    "eventHandlers": [],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n        {\n            field: \"country\",\n            enableRowGroup: true,\n            rowGroup: true,\n            hide: true\n        },\n        {\n            field: \"sport\",\n            enableRowGroup: true,\n            rowGroup: true,\n            hide: true\n        },\n        {\n            field: \"year\",\n            minWidth: 100\n        },\n        {\n            field: \"gold\",\n            aggFunc: \"sum\"\n        },\n        {\n            field: \"silver\",\n            aggFunc: \"sum\"\n        },\n        {\n            field: \"bronze\",\n            aggFunc: \"sum\"\n        }\n    ]"
        },
        {
            "name": "defaultColDef",
            "value": "{\n        flex: 1,\n        minWidth: 120,\n        resizable: true,\n        sortable: true\n    }"
        },
        { "name": "autoGroupColumnDef", "value": "{\n        flex: 1,\n        minWidth: 280\n    }" },
        {
            "name": "getServerSideStoreParams",
            "value": "function (params) {\n        var res = { storeType: params.level == 0 ? \"partial\" : \"full\" };\n        return res;\n    }"
        },
        { "name": "rowModelType", "value": "\"serverSide\"" },
        { "name": "rowSelection", "value": "\"multiple\"" },
        { "name": "suppressAggFuncInHeader", "value": "true" },
        { "name": "animateRows", "value": "true" },
        { "name": "isServerSideGroupOpenByDefault", "value": null }
    ],
    "components": [],
    "defaultColDef": "{\n    flex: 1,\n    minWidth: 120,\n    resizable: true,\n    sortable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n        {\n            field: \"country\",\n            enableRowGroup: true,\n            rowGroup: true,\n            hide: true\n        },\n        {\n            field: \"sport\",\n            enableRowGroup: true,\n            rowGroup: true,\n            hide: true\n        },\n        {\n            field: \"year\",\n            minWidth: 100\n        },\n        {\n            field: \"gold\",\n            aggFunc: \"sum\"\n        },\n        {\n            field: \"silver\",\n            aggFunc: \"sum\"\n        },\n        {\n            field: \"bronze\",\n            aggFunc: \"sum\"\n        }\n    ]",
    "instanceMethods": [
        "function isServerSideGroupOpenByDefault(params) {\n        var route = params.rowNode.getRoute();\n        if (!route) {\n            return false;\n        }\n        var routeAsString = route.join(\",\");\n        var routesToOpenByDefault = [\n            \"Zimbabwe\",\n            \"Zimbabwe,Swimming\",\n            \"United States,Swimming\"\n        ];\n        return routesToOpenByDefault.indexOf(routeAsString) >= 0;\n    }"
    ],
    "externalEventHandlers": [
        {
            "name": "onBtRouteOfSelected",
            "params": "",
            "body": "function onBtRouteOfSelected() {\n    var selectedNodes = this.gridApi.getSelectedNodes();\n    selectedNodes.forEach(function (rowNode, index) {\n        var route = rowNode.getRoute();\n        var routeString = route ? route.join(',') : undefined;\n        console.log('#' + index + ', route = [' + routeString + ']');\n    });\n}"
        }
    ],
    "utils": [
        "function getServerSideDatasource(server) {\n    return {\n        getRows: function (params) {\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            var response = server.getData(params.request);\n            setTimeout(function () {\n                if (response.success) {\n                    params.success({\n                        rowData: response.rows,\n                        rowCount: response.lastRow\n                    });\n                } else {\n                    params.fail();\n                }\n            }, 400);\n        }\n    };\n}"
    ],
    "data": {
        "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
        "callback": "{\n    var fakeServer = new FakeServer(data);\n    var datasource = getServerSideDatasource(fakeServer);\n    params.api.setServerSideDatasource(datasource);\n}"
    },
    "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onBtRouteOfSelected()\">Route of Selected</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>\n",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine-dark",
        "enterprise": true,
        "extras": ["alasql"],
        "modules": ["serverside"]
    }
}
