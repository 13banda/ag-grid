{
    "eventHandlers": [
        {
            "name": "rowDragEnd",
            "handlerName": "onRowDragEnd",
            "handler": "function onRowDragEnd(event) {\n    var overNode = event.overNode;\n    if (!overNode) {\n        return;\n    }\n    var folderToDropInto = overNode.data.type === 'folder' ? overNode : overNode.parent;\n    var movingData = event.node.data;\n    var newParentPath = folderToDropInto.data ? folderToDropInto.data.filePath : [];\n    var needToChangeParent = !arePathsEqual(newParentPath, movingData.filePath);\n    var invalidMode = isSelectionParentOfTarget(event.node, folderToDropInto);\n    if (invalidMode) {\n        console.log('invalid move');\n    }\n    if (needToChangeParent && !invalidMode) {\n        var updatedRows = [];\n        moveToPath(newParentPath, event.node, updatedRows);\n        this.gridApi.applyTransaction({ update: updatedRows });\n        this.gridApi.clearFocusedCell();\n    }\n}"
        }
    ],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n    { field: 'dateModified' },\n    {\n        field: 'size',\n        valueFormatter: valueFormatter\n    }\n]"
        },
        { "name": "defaultColDef", "value": "{\n    flex: 1,\n    resizable: true\n}" },
        { "name": "rowData", "value": "getData()" },
        { "name": "components", "value": "{ fileCellRenderer: getFileCellRenderer() }" },
        { "name": "treeData", "value": "true" },
        { "name": "animateRows", "value": "true" },
        { "name": "groupDefaultExpanded", "value": "-1" },
        { "name": "getDataPath", "value": "function (data) {\n    return data.filePath;\n}" },
        { "name": "getRowNodeId", "value": "function (data) {\n    return data.id;\n}" },
        {
            "name": "autoGroupColumnDef",
            "value": "{\n    rowDrag: true,\n    headerName: 'Files',\n    minWidth: 300,\n    cellRendererParams: {\n        suppressCount: true,\n        innerRenderer: 'fileCellRenderer'\n    }\n}"
        }
    ],
    "components": [],
    "defaultColDef": "{\n    flex: 1,\n    resizable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n    { field: 'dateModified' },\n    {\n        field: 'size',\n        valueFormatter: 'AG_LITERAL_valueFormatter'\n    }\n]",
    "instanceMethods": [],
    "externalEventHandlers": [],
    "utils": [
        "var valueFormatter = function (params) {\n    return params.value ? params.value + ' MB' : '';\n};",
        "function moveToPath(newParentPath, node, allUpdatedNodes) {\n    var oldPath = node.data.filePath;\n    var fileName = oldPath[oldPath.length - 1];\n    var newChildPath = newParentPath.slice();\n    newChildPath.push(fileName);\n    node.data.filePath = newChildPath;\n    allUpdatedNodes.push(node.data);\n    if (node.childrenAfterGroup) {\n        node.childrenAfterGroup.forEach(function (childNode) {\n            moveToPath(newChildPath, childNode, allUpdatedNodes);\n        });\n    }\n}",
        "function isSelectionParentOfTarget(selectedNode, targetNode) {\n    var children = selectedNode.childrenAfterGroup;\n    for (var i = 0; i < children.length; i++) {\n        if (targetNode && children[i].key === targetNode.key)\n            return true;\n        isSelectionParentOfTarget(children[i], targetNode);\n    }\n    return false;\n}",
        "function arePathsEqual(path1, path2) {\n    if (path1.length !== path2.length) {\n        return false;\n    }\n    var equal = true;\n    path1.forEach(function (item, index) {\n        if (path2[index] !== item) {\n            equal = false;\n        }\n    });\n    return equal;\n}"
    ],
    "template": "GRID_TEMPLATE_PLACEHOLDER",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine",
        "enterprise": true,
        "exampleHeight": 545,
        "extras": ["fontawesome"],
        "modules": ["clientside", "rowgrouping"]
    }
}
