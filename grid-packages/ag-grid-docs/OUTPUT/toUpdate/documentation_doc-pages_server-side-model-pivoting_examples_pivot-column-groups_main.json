{
    "eventHandlers": [],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n    {\n        field: 'country',\n        rowGroup: true\n    },\n    {\n        field: 'sport',\n        rowGroup: true\n    },\n    {\n        field: 'year',\n        pivot: true\n    },\n    {\n        field: 'gold',\n        aggFunc: 'sum'\n    },\n    {\n        field: 'silver',\n        aggFunc: 'sum'\n    },\n    {\n        field: 'bronze',\n        aggFunc: 'sum'\n    }\n]"
        },
        { "name": "defaultColDef", "value": "{\n    width: 150,\n    resizable: true,\n    sortable: true\n}" },
        { "name": "autoGroupColumnDef", "value": "{ minWidth: 200 }" },
        { "name": "rowModelType", "value": "'serverSide'" },
        { "name": "serverSideStoreType", "value": "'partial'" },
        { "name": "pivotMode", "value": "true" },
        { "name": "animateRows", "value": "true" }
    ],
    "components": [],
    "defaultColDef": "{\n    width: 150,\n    resizable: true,\n    sortable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n    {\n        field: 'country',\n        rowGroup: true\n    },\n    {\n        field: 'sport',\n        rowGroup: true\n    },\n    {\n        field: 'year',\n        pivot: true\n    },\n    {\n        field: 'gold',\n        aggFunc: 'sum'\n    },\n    {\n        field: 'silver',\n        aggFunc: 'sum'\n    },\n    {\n        field: 'bronze',\n        aggFunc: 'sum'\n    }\n]",
    "instanceMethods": [],
    "externalEventHandlers": [],
    "utils": [
        "function getServerSideDatasource(server) {\n    return {\n        getRows: function (params) {\n            var request = params.request;\n            console.log('[Datasource] - rows requested by grid: ', params.request);\n            var response = server.getData(request);\n            addPivotColDefs(request, response, params.columnApi);\n            setTimeout(function () {\n                if (response.success) {\n                    params.success({\n                        rowData: response.rows,\n                        rowCount: response.lastRow\n                    });\n                } else {\n                    params.fail();\n                }\n            }, 500);\n        }\n    };\n}",
        "function addPivotColDefs(request, response, columnApi) {\n    var existingPivotColDefs = columnApi.getSecondaryColumns();\n    if (existingPivotColDefs && existingPivotColDefs.length > 0) {\n        return;\n    }\n    var pivotColDefs = createPivotColDefs(request, response.pivotFields);\n    columnApi.setSecondaryColumns(pivotColDefs);\n}",
        "function createPivotColDefs(request, pivotFields) {\n    function addColDef(colId, parts, res) {\n        if (parts.length === 0)\n            return [];\n        var first = parts.shift();\n        var existing = res.filter(function (r) {\n            return 'groupId' in r && r.groupId === first;\n        })[0];\n        if (existing) {\n            existing['children'] = addColDef(colId, parts, existing.children);\n        } else {\n            var colDef = {};\n            var isGroup = parts.length > 0;\n            if (isGroup) {\n                colDef['groupId'] = first;\n                colDef['headerName'] = first;\n            } else {\n                var valueCol = request.valueCols.filter(function (r) {\n                    return r.field === first;\n                })[0];\n                colDef['colId'] = colId;\n                colDef['headerName'] = valueCol.displayName;\n                colDef['field'] = colId;\n            }\n            var children = addColDef(colId, parts, []);\n            children.length > 0 ? colDef['children'] = children : null;\n            res.push(colDef);\n        }\n        return res;\n    }\n    if (request.pivotMode && request.pivotCols.length > 0) {\n        var secondaryCols = [];\n        pivotFields.forEach(function (field) {\n            addColDef(field, field.split('_'), secondaryCols);\n        });\n        return secondaryCols;\n    }\n    return [];\n}"
    ],
    "data": {
        "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
        "callback": "{\n    var fakeServer = new FakeServer(data);\n    var datasource = getServerSideDatasource(fakeServer);\n    params.api.setServerSideDatasource(datasource);\n}"
    },
    "template": "GRID_TEMPLATE_PLACEHOLDER\n",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine-dark",
        "enterprise": true,
        "exampleHeight": 610,
        "extras": ["alasql"],
        "modules": ["serverside", "rowgrouping", "menu", "columnpanel"]
    }
}
