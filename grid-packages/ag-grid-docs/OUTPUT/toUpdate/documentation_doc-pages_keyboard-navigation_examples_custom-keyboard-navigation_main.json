{
    "eventHandlers": [],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n    {\n        headerName: 'Athlete',\n        children: [\n            {\n                field: 'athlete',\n                headerName: 'Name',\n                minWidth: 170\n            },\n            { field: 'age' },\n            { field: 'country' }\n        ]\n    },\n    { field: 'year' },\n    { field: 'sport' },\n    {\n        headerName: 'Medals',\n        children: [\n            { field: 'gold' },\n            { field: 'silver' },\n            { field: 'bronze' },\n            { field: 'total' }\n        ]\n    }\n]"
        },
        { "name": "rowData", "value": "null" },
        {
            "name": "defaultColDef",
            "value": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true\n}"
        },
        { "name": "navigateToNextHeader", "value": null },
        { "name": "tabToNextHeader", "value": null },
        { "name": "tabToNextCell", "value": null },
        { "name": "navigateToNextCell", "value": null }
    ],
    "components": [],
    "defaultColDef": "{\n    editable: true,\n    sortable: true,\n    flex: 1,\n    minWidth: 100,\n    filter: true,\n    resizable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n    {\n        headerName: 'Athlete',\n        children: [\n            {\n                field: 'athlete',\n                headerName: 'Name',\n                minWidth: 170\n            },\n            { field: 'age' },\n            { field: 'country' }\n        ]\n    },\n    { field: 'year' },\n    { field: 'sport' },\n    {\n        headerName: 'Medals',\n        children: [\n            { field: 'gold' },\n            { field: 'silver' },\n            { field: 'bronze' },\n            { field: 'total' }\n        ]\n    }\n]",
    "instanceMethods": [
        "function navigateToNextHeader(params) {\n    var nextHeader = params.nextHeaderPosition;\n    var processedNextHeader;\n    if (params.key !== 'ArrowDown' && params.key !== 'ArrowUp') {\n        return nextHeader;\n    }\n    processedNextHeader = moveHeaderFocusUpDown(params.previousHeaderPosition, params.headerRowCount, params.key === 'ArrowDown');\n    return processedNextHeader === nextHeader ? null : processedNextHeader;\n}",
        "function tabToNextHeader(params) {\n    return moveHeaderFocusUpDown(params.previousHeaderPosition, params.headerRowCount, params.backwards);\n}",
        "function tabToNextCell(params) {\n    var previousCell = params.previousCellPosition, lastRowIndex = previousCell.rowIndex, nextRowIndex = params.backwards ? lastRowIndex - 1 : lastRowIndex + 1, renderedRowCount = this.gridApi.getModel().getRowCount(), result;\n    if (nextRowIndex < 0) {\n        nextRowIndex = -1;\n    }\n    if (nextRowIndex >= renderedRowCount) {\n        nextRowIndex = renderedRowCount - 1;\n    }\n    result = {\n        rowIndex: nextRowIndex,\n        column: previousCell.column,\n        rowPinned: previousCell.rowPinned\n    };\n    return result;\n}",
        "function navigateToNextCell(params) {\n    var previousCell = params.previousCellPosition, suggestedNextCell = params.nextCellPosition, nextRowIndex, renderedRowCount;\n    switch (params.key) {\n    case KEY_DOWN:\n        nextRowIndex = previousCell.rowIndex - 1;\n        if (nextRowIndex < -1) {\n            return null;\n        }\n        return {\n            rowIndex: nextRowIndex,\n            column: previousCell.column,\n            rowPinned: previousCell.rowPinned\n        };\n    case KEY_UP:\n        nextRowIndex = previousCell.rowIndex + 1;\n        renderedRowCount = this.gridApi.getModel().getRowCount();\n        if (nextRowIndex >= renderedRowCount) {\n            return null;\n        }\n        return {\n            rowIndex: nextRowIndex,\n            column: previousCell.column,\n            rowPinned: previousCell.rowPinned\n        };\n    case KEY_LEFT:\n    case KEY_RIGHT:\n        return suggestedNextCell;\n    default:\n        throw 'this will never happen, navigation is always one of the 4 keys above';\n    }\n}"
    ],
    "externalEventHandlers": [],
    "utils": [
        "var KEY_LEFT = 'ArrowLeft';",
        "var KEY_UP = 'ArrowUp';",
        "var KEY_RIGHT = 'ArrowRight';",
        "var KEY_DOWN = 'ArrowDown';",
        "function moveHeaderFocusUpDown(previousHeader, headerRowCount, isUp) {\n    var previousColumn = previousHeader.column, lastRowIndex = previousHeader.headerRowIndex, nextRowIndex = isUp ? lastRowIndex - 1 : lastRowIndex + 1, nextColumn, parentColumn;\n    if (nextRowIndex === -1) {\n        return previousHeader;\n    }\n    if (nextRowIndex === headerRowCount) {\n        nextRowIndex = -1;\n    }\n    parentColumn = previousColumn.getParent();\n    if (isUp) {\n        nextColumn = parentColumn || previousColumn;\n    } else {\n        nextColumn = previousColumn.children ? previousColumn.children[0] : previousColumn;\n    }\n    return {\n        headerRowIndex: nextRowIndex,\n        column: nextColumn\n    };\n}"
    ],
    "data": {
        "url": "'https://www.ag-grid.com/example-assets/olympic-winners.json'",
        "callback": "params.api.setRowData(data)"
    },
    "template": "GRID_TEMPLATE_PLACEHOLDER",
    "gridSettings": { "width": "100%", "height": "100%", "theme": "ag-theme-alpine" }
}
