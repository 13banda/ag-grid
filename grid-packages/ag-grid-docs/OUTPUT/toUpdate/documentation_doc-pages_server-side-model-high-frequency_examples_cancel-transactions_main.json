{
    "eventHandlers": [],
    "properties": [
        { "name": "columnDefs", "value": "[\n        { field: \"product\" },\n        { field: \"value\" }\n    ]" },
        { "name": "defaultColDef", "value": "{\n        width: 250,\n        resizable: true\n    }" },
        {
            "name": "isApplyServerSideTransaction",
            "value": "function (params) {\n        var tx = params.transaction;\n        var storeInfo = params.storeInfo;\n        var txCreatedSinceRowDataRead = tx.serverVersion > storeInfo.serverVersion;\n        console.log(\"tx.serverVersion = \" + tx.serverVersion + \", storeInfo.serverVersion = \" + storeInfo.serverVersion);\n        if (txCreatedSinceRowDataRead) {\n            console.log(\"Applying transaction\");\n            return true;\n        } else {\n            console.log(\"Cancelling transaction\");\n            return false;\n        }\n    }"
        },
        { "name": "getRowNodeId", "value": "function (data) {\n        return data.product;\n    }" },
        { "name": "rowModelType", "value": "\"serverSide\"" },
        { "name": "serverSideStoreType", "value": "\"full\"" }
    ],
    "components": [],
    "defaultColDef": "{\n    width: 250,\n    resizable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n        { field: \"product\" },\n        { field: \"value\" }\n    ]",
    "instanceMethods": [],
    "externalEventHandlers": [
        {
            "name": "onBtAdd",
            "params": "",
            "body": "function onBtAdd() {\n    var newProductName = all_products[Math.floor(all_products.length * Math.random())];\n    var newItem = {\n        product: newProductName + ' ' + newProductSequence++,\n        value: Math.floor(Math.random() * 10000)\n    };\n    allServerSideData.push(newItem);\n    serverVersion++;\n    var tx = {\n        add: [newItem],\n        serverVersion: serverVersion\n    };\n    this.gridApi.applyServerSideTransactionAsync(tx);\n}"
        },
        {
            "name": "onBtRefresh",
            "params": "",
            "body": "function onBtRefresh() {\n    this.gridApi.refreshServerSideStore({ purge: true });\n}"
        }
    ],
    "utils": [
        "var products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper'\n];",
        "var newProductSequence = 0;",
        "var all_products = [\n    'Palm Oil',\n    'Rubber',\n    'Wool',\n    'Amber',\n    'Copper',\n    'Lead',\n    'Zinc',\n    'Tin',\n    'Aluminium',\n    'Aluminium Alloy',\n    'Nickel',\n    'Cobalt',\n    'Molybdenum',\n    'Recycled Steel',\n    'Corn',\n    'Oats',\n    'Rough Rice',\n    'Soybeans',\n    'Rapeseed',\n    'Soybean Meal',\n    'Soybean Oil',\n    'Wheat',\n    'Milk',\n    'Coca',\n    'Coffee C',\n    'Cotton No.2',\n    'Sugar No.11',\n    'Sugar No.14'\n];",
        "var allServerSideData = [];",
        "function setupData() {\n    products.forEach(function (product, index) {\n        allServerSideData.push({\n            product: product,\n            value: Math.floor(Math.random() * 10000)\n        });\n    });\n}",
        "var serverVersion = 0;"
    ],
    "onGridReady": "{\n    setupData();\n    var dataSource = {\n        getRows: function (params2) {\n            setTimeout(function () {\n                var rowData = allServerSideData.slice();\n                console.log('getRows: found ' + rowData.length + ' records on server.');\n                params2.success({\n                    rowData: rowData,\n                    storeInfo: { serverVersion: serverVersion }\n                });\n            }, 2000);\n        }\n    };\n    params.api.setServerSideDatasource(dataSource);\n}",
    "template": "<div class=\"example-wrapper\">\n    <div style=\"margin-bottom: 5px;\">\n        <button onclick=\"onBtAdd()\">Add</button>\n        <button onclick=\"onBtRefresh()\">Refresh</button>\n    </div>\n    GRID_TEMPLATE_PLACEHOLDER\n</div>",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine-dark",
        "enterprise": true,
        "modules": ["serverside"]
    }
}
