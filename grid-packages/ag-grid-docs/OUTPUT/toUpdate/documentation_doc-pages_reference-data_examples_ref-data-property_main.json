{
    "eventHandlers": [
        {
            "name": "cellValueChanged",
            "handlerName": "onCellValueChanged",
            "handler": "function onCellValueChanged(params) {\n    console.log('onCellValueChanged: ', params);\n}"
        }
    ],
    "properties": [
        {
            "name": "columnDefs",
            "value": "[\n        {\n            field: \"make\",\n            cellEditor: \"select\",\n            cellEditorParams: { values: carBrands },\n            filter: \"agSetColumnFilter\",\n            refData: carMappings\n        },\n        {\n            field: \"exteriorColour\",\n            minWidth: 150,\n            cellEditor: \"agRichSelectCellEditor\",\n            cellEditorPopup: true,\n            cellEditorParams: {\n                values: colours,\n                cellRenderer: colourCellRenderer\n            },\n            filter: \"agSetColumnFilter\",\n            filterParams: { cellRenderer: colourCellRenderer },\n            refData: colourMappings,\n            cellRenderer: colourCellRenderer\n        },\n        {\n            field: \"interiorColour\",\n            minWidth: 150,\n            filter: \"agSetColumnFilter\",\n            filterParams: { cellRenderer: colourCellRenderer },\n            refData: colourMappings,\n            cellRenderer: colourCellRenderer\n        },\n        {\n            headerName: \"Retail Price\",\n            field: \"price\",\n            minWidth: 140,\n            colId: \"retailPrice\",\n            valueGetter: function (params) {\n                return params.data.price;\n            },\n            valueFormatter: currencyFormatter,\n            valueSetter: numberValueSetter\n        },\n        {\n            headerName: \"Retail Price (incl Taxes)\",\n            minWidth: 205,\n            editable: false,\n            valueGetter: function (params) {\n                return params.getValue(\"retailPrice\") * 1.2;\n            },\n            valueFormatter: currencyFormatter\n        }\n    ]"
        },
        {
            "name": "defaultColDef",
            "value": "{\n        flex: 1,\n        filter: true,\n        editable: true\n    }"
        },
        { "name": "rowData", "value": "getData()" }
    ],
    "components": [],
    "defaultColDef": "{\n    flex: 1,\n    filter: true,\n    editable: true\n}",
    "globalComponents": [],
    "parsedColDefs": "[\n        {\n            field: \"make\",\n            cellEditor: \"select\",\n            cellEditorParams: { values: \"AG_LITERAL_carBrands\" },\n            filter: \"agSetColumnFilter\",\n            refData: \"AG_LITERAL_carMappings\"\n        },\n        {\n            field: \"exteriorColour\",\n            minWidth: 150,\n            cellEditor: \"agRichSelectCellEditor\",\n            cellEditorPopup: true,\n            cellEditorParams: {\n                values: \"AG_LITERAL_colours\",\n                cellRenderer: \"AG_LITERAL_colourCellRenderer\"\n            },\n            filter: \"agSetColumnFilter\",\n            filterParams: { cellRenderer: \"AG_LITERAL_colourCellRenderer\" },\n            refData: \"AG_LITERAL_colourMappings\",\n            cellRenderer: \"AG_LITERAL_colourCellRenderer\"\n        },\n        {\n            field: \"interiorColour\",\n            minWidth: 150,\n            filter: \"agSetColumnFilter\",\n            filterParams: { cellRenderer: \"AG_LITERAL_colourCellRenderer\" },\n            refData: \"AG_LITERAL_colourMappings\",\n            cellRenderer: \"AG_LITERAL_colourCellRenderer\"\n        },\n        {\n            headerName: \"Retail Price\",\n            field: \"price\",\n            minWidth: 140,\n            colId: \"retailPrice\",\n            valueGetter: \"AG_FUNCTION_function (params) {\\n    return params.data.price;\\n}\",\n            valueFormatter: \"AG_LITERAL_currencyFormatter\",\n            valueSetter: \"AG_LITERAL_numberValueSetter\"\n        },\n        {\n            headerName: \"Retail Price (incl Taxes)\",\n            minWidth: 205,\n            editable: false,\n            valueGetter: \"AG_FUNCTION_function (params) {\\n    return params.getValue('retailPrice') * 1.2;\\n}\",\n            valueFormatter: \"AG_LITERAL_currencyFormatter\"\n        }\n    ]",
    "instanceMethods": [],
    "externalEventHandlers": [],
    "utils": [
        "var carMappings = {\n    tyt: 'Toyota',\n    frd: 'Ford',\n    prs: 'Porsche',\n    nss: 'Nissan'\n};",
        "var colourMappings = {\n    cb: 'Cadet Blue',\n    bw: 'Burlywood',\n    fg: 'Forest Green'\n};",
        "var carBrands = extractValues(carMappings);",
        "var colours = extractValues(colourMappings);",
        "function extractValues(mappings) {\n    return Object.keys(mappings);\n}",
        "function colourCellRenderer(params) {\n    if (params.value === '(Select All)') {\n        return params.value;\n    }\n    return '<span style=\"color: ' + removeSpaces(params.valueFormatted) + '\">' + params.valueFormatted + '</span>';\n}",
        "function currencyFormatter(params) {\n    var value = Math.floor(params.value);\n    if (isNaN(value)) {\n        return '';\n    }\n    return '\\xA3' + value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}",
        "function numberValueSetter(params) {\n    if (isNaN(parseFloat(params.newValue)) || !isFinite(params.newValue)) {\n        return false;\n    }\n    params.data.price = params.newValue;\n    return true;\n}",
        "function removeSpaces(str) {\n    return str ? str.replace(/\\s/g, '') : str;\n}"
    ],
    "template": "GRID_TEMPLATE_PLACEHOLDER",
    "gridSettings": {
        "width": "100%",
        "height": "100%",
        "theme": "ag-theme-alpine-dark",
        "enterprise": true,
        "modules": ["clientside", "richselect", "setfilter", "menu", "columnpanel"]
    }
}
