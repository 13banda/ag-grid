{"version":3,"sources":["shared/customComp/customComponentWrapper.ts"],"names":[],"mappings":";AACA,OAAO,iBAAiB,MAAM,4CAA4C,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AASnD,MAAM,UAAU,kBAAkB,CAAO,mBAA6B,EAAE,eAAkB,EAAE,SAAY;IACpG,mBAAmB,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QACrC,MAAM,cAAc,GAAI,eAAuB,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,cAAc,EAAE;YACf,SAAiB,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC;SACnD;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,OAAO,sBAA8D,SAAQ,cAAc;IAAjG;;QAKc,qBAAgB,GAAQ,iBAAiB,CAAC;IA+CxD,CAAC;IA3CU,IAAI,CAAC,MAAoB;QAC5B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,SAAS;QACZ,aAAa;IACjB,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACnE,CAAC;IAEM,6BAA6B;QAChC,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,aAAa,CAAC,cAAmB,EAAE,KAAoB;QAC7D,OAAO,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC9C,YAAY,EAAE,KAAK;YACnB,oBAAoB,EAAE,cAAc;YACpC,UAAU,EAAE,CAAC,OAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC3D,iBAAiB,EAAE,CAAC,QAAwC,EAAE,EAAE;gBAC5D,IAAI,CAAC,YAAY,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACxD,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAES,UAAU,CAAC,OAAiB;QAClC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QAC/B,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC;IAES,kBAAkB;QACxB,OAAO,EAAE,CAAC;IACd,CAAC;IAES,QAAQ;QACd,OAAO,gCACA,IAAI,CAAC,YAAY,KACpB,GAAG,EAAE,IAAI,CAAC,GAAG,GACR,CAAC;IACd,CAAC;CACJ","file":"customComponentWrapper.mjs","sourcesContent":["import { AgPromise } from \"@ag-grid-community/core\";\nimport customWrapperComp from \"../../reactUi/customComp/customWrapperComp\";\nimport { ReactComponent } from \"../reactComponent\";\n\nexport type WrapperParams<P, M> = {\n    initialProps: P;\n    CustomComponentClass: any;\n    setMethods: (methods: M) => void;\n    addUpdateCallback: (callback: (props: P) => void) => void;\n}\n\nexport function addOptionalMethods<M, C>(optionalMethodNames: string[], providedMethods: M, component: C): void {\n    optionalMethodNames.forEach(methodName => {\n        const providedMethod = (providedMethods as any)[methodName];\n        if (providedMethod) {\n            (component as any)[methodName] = providedMethod;\n        }\n    });\n}\n\nexport class CustomComponentWrapper<TInputParams, TOutputParams, TMethods> extends ReactComponent {\n    protected refreshProps!: () => void;\n\n    protected providedMethods!: TMethods;\n\n    protected wrapperComponent: any = customWrapperComp;\n\n    protected sourceParams!: TInputParams;\n\n    public init(params: TInputParams): AgPromise<void> {\n        this.sourceParams = params;\n        return super.init(this.getProps());\n    }\n\n    public addMethod(): void {\n        // do nothing\n    }\n\n    public getInstance(): AgPromise<any> {\n        return this.instanceCreated.then(() => this.componentInstance);\n    }\n\n    public getFrameworkComponentInstance(): any {\n        return this;\n    }\n\n    protected createElement(reactComponent: any, props: TOutputParams): any {\n        return super.createElement(this.wrapperComponent, {\n            initialProps: props,\n            CustomComponentClass: reactComponent,\n            setMethods: (methods: TMethods) => this.setMethods(methods),\n            addUpdateCallback: (callback: (props: TOutputParams) => void) => {\n                this.refreshProps = () => callback(this.getProps());\n            }\n        });\n    }\n\n    protected setMethods(methods: TMethods): void {\n        this.providedMethods = methods;\n        addOptionalMethods(this.getOptionalMethods(), this.providedMethods, this);\n    }\n\n    protected getOptionalMethods(): string[] {\n        return [];\n    }\n\n    protected getProps(): TOutputParams {\n        return {\n            ...this.sourceParams,\n            key: this.key\n         } as any;\n    }\n}\n"]}