{"version":3,"sources":["webpack://@ag-grid-community/vue/webpack/universalModuleDefinition","webpack://@ag-grid-community/vue/webpack/bootstrap","webpack://@ag-grid-community/vue/external {\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"root\":\"Vue\"}","webpack://@ag-grid-community/vue/./node_modules/current-script-polyfill/currentScript.js","webpack://@ag-grid-community/vue/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://@ag-grid-community/vue/./node_modules/tslib/tslib.es6.js","webpack://@ag-grid-community/vue/./node_modules/vue-class-component/dist/vue-class-component.esm.js","webpack://@ag-grid-community/vue/./node_modules/vue-property-decorator/lib/helpers/metadata.js","webpack://@ag-grid-community/vue/./node_modules/vue-property-decorator/lib/decorators/Prop.js","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/generic.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/columnKeyCreator.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/object.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/function.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/modules/moduleNames.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/modules/moduleRegistry.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/context/context.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/eventService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/column.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/providedColumnGroup.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/defaultColumnTypes.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/array.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/event.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/context/beanStub.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/columnFactory.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/columnGroup.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/eventKeys.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/groupInstanceIdCreator.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/autoGroupColService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/string.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/map.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/columnModel.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/columnUtils.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/displayedGroupCreator.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/propertyKeys.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/componentUtil.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/agStackComponentsRegistry.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/browser.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/aria.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/number.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/date.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/dom.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/fuzzyMatch.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/icon.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/constants/keyCode.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/keyboard.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/mouse.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/rowNode.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/set.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/utils.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/numberSequence.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/promise.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/customTooltipFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cssClassManager.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/component.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/componentAnnotations.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/floating/provided/readOnlyFloatingFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/date/dateCompWrapper.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/optionsFactory.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/filterLocaleText.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/managedFocusFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/features/positionableFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/providedFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agAbstractLabel.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agAbstractField.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agPickerField.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agList.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agSelect.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agAbstractInputField.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agCheckbox.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agRadioButton.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/simpleFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/scalarFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/date/dateFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/floating/provided/simpleFloatingFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/date/dateFloatingFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/date/defaultDateComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agInputTextField.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agInputNumberField.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/number/numberFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/text/textFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/floating/provided/textInputFloatingFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/number/numberFloatingFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/provided/text/textFloatingFilter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/touchListener.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/sortIndicatorComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/headerComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/columnGroup/headerGroupComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/popupComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/largeTextCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/selectCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/simpleCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/textCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellRenderers/animateShowChangeCellRenderer.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellRenderers/animateSlideCellRenderer.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/rowNode.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/checkboxSelectionComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/constants/direction.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/dragAndDrop/dragAndDropService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/row/rowDragComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellRenderers/groupCellRendererCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellRenderers/groupCellRenderer.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellRenderers/loadingCellRenderer.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/overlays/loadingOverlayComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/overlays/noRowsOverlayComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/tooltipComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/numberCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/dateCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/dateStringCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellRenderers/checkboxCellRenderer.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/checkboxCellEditor.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/framework/userComponentRegistry.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/framework/componentTypes.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/floating/floatingFilterMapper.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/framework/userComponentFactory.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/colDefUtil.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/interfaces/iExcelCreator.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/dragAndDrop/dragService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/autoScrollService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/dragAndDrop/virtualListDragFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/interfaces/iRowNode.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridApi.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/quickFilterService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/filter/filterManager.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/abstractCell/abstractHeaderCellComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/floatingFilter/headerFilterCellComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/styling/layoutFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/gridBodyScrollFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowDragFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/gridBodyCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/interfaces/IRangeService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellRangeFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellPositionFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellCustomStyleFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/tooltipFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/beans.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellMouseListenerFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellKeyboardListenerFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/dndSourceComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/cssClassApplier.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/row/rowCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/rowContainerEventsFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/viewportSizeFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/setPinnedLeftWidthFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/setPinnedRightWidthFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/setHeightFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/dragListenerFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/centerWidthFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/rowContainerCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/gridBodyComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/scrollVisibleService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/mouseEventService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/navigationService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cellEditors/popupEditorWrapper.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/cell/cellComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/row/rowComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/rowContainer/rowContainerComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/columnDrag/bodyDropPivotTarget.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/columnMoveHelper.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/columnDrag/moveColumnFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/columnDrag/bodyDropTarget.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/headerCellComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/columnGroup/headerGroupCellComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/row/headerRowComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/abstractCell/abstractHeaderCellCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/features/setLeftFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/hoverFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/floatingFilter/headerFilterCellCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/resizeFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/selectAllFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/headerCellCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/columnGroup/groupResizeFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/columnGroup/groupWidthFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/columnGroup/headerGroupCellCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/row/headerRowCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/rowContainer/headerRowContainerCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/rowContainer/headerRowContainerComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/common/headerNavigationService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/gridHeaderCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/gridHeaderComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/common/horizontalResizeService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/cells/column/standardMenu.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/layout/tabbedLayout.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/misc/resizeObserverService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/misc/animationFrameService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/interfaces/iClientSideRowModel.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/misc/expansionService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/autoWidthCalculator.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/features/stickyRowFeature.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/rowRenderer.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/valueFormatterService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/pinnedRowModel/pinnedRowModel.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/interfaces/serverSideTransaction.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/utils/changedPath.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rowNodeCache/rowNodeBlock.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rowNodeCache/rowNodeBlockLoader.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/pagination/paginationProxy.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/styling/stylingService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agToggleButton.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agInputTextArea.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agInputDateField.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agInputRange.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agRichSelectRow.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/tabGuardCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/tabGuardComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/virtualList.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agRichSelect.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agSlider.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agGroupComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agMenuList.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agMenuPanel.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agMenuItemComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agPanel.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agDialog.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/popupService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agAutocompleteRow.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agAutocompleteList.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/widgets/agAutocomplete.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/vanillaFrameworkOverrides.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/cellNavigationService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/alignedGridsService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/selectionService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/columnApi.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/valueService/valueService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/valueService/expressionService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/templateService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/logger.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridComp/gridCtrl.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridComp/gridComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/sortController.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/focusService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/columnHoverService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/columnAnimationService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/pagination/paginationAutoPageSizeService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/valueService/valueCache.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/valueService/changeDetectionService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/framework/agComponentUtils.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/framework/componentMetadataProvider.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/environment.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/rowContainerHeightService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rowNodes/selectableService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/pagination/paginationComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/overlays/overlayWrapperComponent.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/rowPositionUtils.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/cellPositionUtils.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/undoRedo/undoRedoStack.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/undoRedo/undoRedoService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/headerRendering/common/headerPosition.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/columnDefFactory.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/row/rowCssClassCalculator.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rowNodes/rowNodeSorter.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/ctrlsService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/ctrlsFactory.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/abstractFakeScrollComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/fakeHScrollComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/pinnedWidthService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/entities/rowNodeEventThrottle.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/validation/rules/colDefValidations.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/validation/rules/gridOptionsValidations.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridOptionsService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/localeService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/gridBodyComp/fakeVScrollComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/columns/dataTypeService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/valueService/valueParserService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/syncService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/rendering/overlays/overlayService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/misc/stateService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/validation/validationService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/misc/apiEventService.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/pagination/pageSizeSelector/pageSizeSelectorComp.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/grid.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/components/framework/frameworkComponentWrapper.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/interfaces/iSparklineCellRendererParams.mjs","webpack://@ag-grid-community/vue/../core/dist/esm/es6/main.mjs","webpack://@ag-grid-community/vue/./src/VueComponentFactory.ts","webpack://@ag-grid-community/vue/./src/VueFrameworkComponentWrapper.ts","webpack://@ag-grid-community/vue/./src/Utils.ts","webpack://@ag-grid-community/vue/./src/VueFrameworkOverrides.ts","webpack://@ag-grid-community/vue/./src/AgGridVue.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__8bbf__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","document","currentScript","scripts","getElementsByTagName","Error","err","res","exec","stack","src","readyState","window","match","__decorate","decorators","target","desc","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","_typeof","obj","iterator","constructor","_defineProperty","configurable","writable","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","Array","isArray","arr2","iter","toString","from","TypeError","reflectionIsSupported","defineMetadata","getOwnMetadataKeys","copyReflectionMetadata","to","forwardMetadata","getOwnPropertyNames","forEach","propertyKey","metaKeys","metaKey","metadata","getOwnMetadata","fakeArray","__proto__","hasProto","createDecorator","index","Ctor","__decorators__","undefined","push","options","isPrimitive","type","collectDataFromConstructor","vm","Component","originalInit","_init","_this","keys","$options","props","set","data","plainData","$internalHooks","componentFactory","_componentTag","proto","indexOf","descriptor","methods","mixins","computed","fn","superProto","getPrototypeOf","Super","Extended","extend","forwardStaticMembers","shouldIgnore","callee","caller","Original","extendedDescriptor","superDescriptor","registerHooks","apply","reflectMetadataIsSupported","getMetadata","applyMetadata","Prop","componentOptions","k","makeNull","exists","allowEmptyString","missing","missingOrEmpty","toStringOrNull","attrToNumber","isNaN","valueParsed","parseInt","attrToBoolean","test","attrToString","jsonEquals","val1","val2","val1Json","JSON","stringify","val2Json","defaultComparator","valueA","valueB","accentedCompare","valueAMissing","valueBMissing","toNumber","doQuickCompare","a","b","localeCompare","e","Set","Map","values","existingKeys","colId","colField","count","idToTry","String","iterateObject","callback","entries","cloneObject","copy","deepCloneObject","parse","deepCloneDefinition","keysToSkip","sourceIsSimpleObject","isNonNullObject","getProperty","setProperty","copyPropertiesIfPresent","source","properties","copyPropertyIfPresent","transform","getAllKeysInObjects","objects","allValues","filter","getAllValuesInObject","anyObject","ret","propertyIsEnumerable","mergeDeep","dest","copyUndefined","makeCopyOfSimpleObjects","sourceValue","destValue","objectIsDueToBeCopied","dontCopy","missingOrEmptyObject","expression","defaultValue","split","objectToRead","shift","objectToUpdate","getValueUsingField","field","fieldContainsDots","fields","currentObject","removeAllReferences","preserveKeys","preDestroyLink","includes","msgFunc","func","console","warn","defineProperties","doOnceFlags","doOnce","warnOnce","msg","errorOnce","error","getFunctionName","funcConstructor","matches","trim","isFunction","val","executeInAWhile","funcs","executeAfter","executeNextVMTurnFuncs","executeNextVMTurnPending","executeNextVMTurn","setTimeout","funcsCopy","slice","milliseconds","debounce","delay","timeout","args","context","clearTimeout","throttle","wait","previousCall","currentCall","Date","getTime","waitUntil","condition","timeoutMessage","timeStamp","interval","executed","internalCallback","reachedTimeout","clearInterval","setInterval","compose","fns","arg","reduce","composed","f","callIfPresent","noop","ModuleNames","__register","__registerModules","moduleBased","gridId","runVersionChecks","areGridScopedModules","gridModulesMap","moduleName","globalModulesMap","setModuleBased","moduleMajor","moduleMinor","version","currentModuleMajor","currentModuleMinor","currentModuleVersion","isValidModuleVersion","validate","result","isValid","errorResult","message","isBundled","reason","_a","__isRegistered","warningKey","warningMessage","modName","find","v","params","logger","beanWrappers","destroyed","beanClasses","contextParams","log","createBeans","beanInstances","getBeanInstances","wireBeans","map","beanEntry","beanInstance","bean","afterPreCreateCallback","autoWireBeans","methodWireBeans","callLifeCycleMethods","createBeanWrapper","constructorParamsMeta","__agBeanMetaData","autowireMethods","agConstructor","constructorParams","getBeansForParameters","newInstance","createdBeanNames","join","BeanClass","metaData","beanName","forEachMetaDataInHierarchy","attributes","agClassAttributes","attribute","otherBean","lookupBeanInstance","optional","attributeName","methodName","wireParams","initParams","getBeanName","constructorString","substring","parameters","beansList","paramIndex","otherBeanName","Number","wiringBean","providedBeanInstances","lifeCycleMethod","callLifeCycleMethodsOnBean","methodToIgnore","allMethods","allMethodsList","destroyBeans","__unRegisterGridModules","beans","beanAny","destroy","PreConstruct","getOrCreateProps","preConstructMethods","PostConstruct","postConstructMethods","PreDestroy","preDestroyMethods","Bean","classConstructor","Autowired","autowiredFunc","Optional","classPrototype","methodOrAttributeName","Qualifier","decorator","EventService","allSyncListeners","allAsyncListeners","globalSyncListeners","globalAsyncListeners","asyncFunctionsQueue","scheduled","firedEvents","loggerFactory","gridOptionsService","frameworkOverrides","globalEventListener","globalSyncEventListener","async","useAsyncEvents","addGlobalListener","eventType","autoCreateListenerCollection","listenerMap","listeners","size","listener","getListeners","add","delete","event","agEvent","api","columnApi","dispatchToListeners","dispatchEvent","browserEvent","Event","eventPath","composedPath","processEventListeners","originalListeners","has","dispatchAsync","globalListeners","flushAsyncQueue","queueCopy","COL_DEF_DEFAULTS","resizable","sortable","instanceIdSequence","getNextColInstanceId","colDef","userProvidedColDef","primary","instanceId","autoHeaderHeight","moving","menuVisible","lastLeftPinned","firstRightPinned","filterActive","eventService","tooltipEnabled","rowGroupActive","pivotActive","aggregationActive","setState","sort","initialSort","sortIndex","initialSortIndex","hide","initialHide","visible","pinned","setPinned","initialPinned","flex","initialFlex","initMinAndMaxWidths","initDotNotation","initTooltip","createColumnEvent","parent","originalParent","resetActualWidth","suppressDotNotation","tooltipFieldContainsDots","tooltipField","minWidth","columnUtils","calculateColMinWidth","maxWidth","calculateColMaxWidth","tooltipValueGetter","tooltipComponent","initialWidth","calculateColInitialWidth","setActualWidth","showRowGroup","showingAllGroups","showingThisGroup","filterDefined","addEventListener","removeEventListener","rowNode","node","column","suppressNavigable","createColumnFunctionCallbackParams","userFunc","group","isColumnFunc","editable","suppressFillHandle","autoHeight","rowDrag","dndSource","checkboxSelection","suppressPaste","getColDefValue","editableFunc","columns","dispatchStateUpdatedEvent","sortOrder","aggFunc","left","oldLeft","actualWidth","active","additionalEventAttributes","filterChangedEvent","columnHoverService","isHovered","newValue","getColDef","suppressSpanHeaderHeight","columnGroupShow","height","changed","colSpan","createBaseColDefParams","Math","max","rowSpan","silent","min","fireColumnWidthChangedEvent","width","rowGroup","pivot","isPivotActive","isRowGroupActive","isValueActive","isAllowPivot","isAllowRowGroup","isAllowValue","enablePivot","enableValue","enableRowGroup","defaultValues","menuTabs","EVENT_STATE_UPDATED","EVENT_MOVING_CHANGED","EVENT_LEFT_CHANGED","EVENT_WIDTH_CHANGED","EVENT_LAST_LEFT_PINNED_CHANGED","EVENT_FIRST_RIGHT_PINNED_CHANGED","EVENT_VISIBLE_CHANGED","EVENT_FILTER_CHANGED","EVENT_FILTER_ACTIVE_CHANGED","EVENT_SORT_CHANGED","EVENT_COL_DEF_CHANGED","EVENT_MENU_VISIBLE_CHANGED","EVENT_ROW_GROUP_CHANGED","EVENT_PIVOT_CHANGED","EVENT_VALUE_CHANGED","colGroupDef","groupId","padding","level","localEventService","expandable","expandableListenerRemoveCallback","expanded","openByDefault","reset","children","some","child","isVisible","EVENT_EXPANDED_CHANGED","getGroupId","addLeafColumns","leafColumns","setExpandable","onColumnVisibilityChanged","getLeafColumns","col","isPadding","atLeastOneShowingWhenOpen","atLeastOneShowingWhenClosed","atLeastOneChangeable","findChildrenRemovingPadding","j","abstractColumn","headerGroupShow","getColumnGroupShow","EVENT_EXPANDABLE_CHANGED","process","items","item","skipBecausePadding","DefaultColumnTypes","numericColumn","headerClass","cellClass","rightAligned","firstExistingValue","existsAndNotEmpty","last","areEqual","comparator","every","shallowCompare","arr1","sortNumerically","array","removeRepeatsFromArray","thisOneMatches","nextOneMatches","splice","removeFromUnorderedArray","pop","removeFromArray","removeAllFromUnorderedArray","toRemove","removeAllFromArray","insertIntoArray","toIndex","insertArrayIntoArray","moveInArray","objectsToMove","reverse","flatten","arrayOfArrays","concat","pushAll","toStrings","forEachReverse","list","action","AG_GRID_STOP_PROPAGATION","PASSIVE_EVENTS","supports","stopPropagationForAgGrid","isStopPropagationForAgGrid","isEventSupported","tags","select","change","submit","load","abort","eventChecker","eventName","el","createElement","getCtrlForEventTarget","eventTarget","sourceElement","renderedComp","getDomData","parentElement","isElementInEventPath","element","getEventPath","createEventPath","pointer","eventNoType","path","addSafePassiveEventListener","eElement","isPassive","passive","destroyFunctions","__v_skip","lastChangeSetIdLookup","propertyListenerId","isAlive","EVENT_DESTROYED","HTMLElement","getFrameworkOverrides","destroyFunc","setupGridOptionListener","events","eventsKey","wrappedListener","changeSet","id","propertiesChangeEvent","createBean","addDestroyFunc","destroyBean","getContext","defs","primaryColumns","existingTree","columnKeyCreator","existingCols","existingGroups","existingColKeys","extractExistingTreeData","addExistingKeys","unbalancedTree","recursivelyCreateColumns","treeDept","findMaxDept","columnTree","balanceColumnTree","deptFirstCallback","setupExpandable","setOriginalParent","depthFirstOriginalTreeSearch","getId","autoGroupCols","gridBalancedTree","createAutoGroupTreeItem","balancedColumnTree","dept","findDepth","nextChild","autoGroup","setChildren","getChildren","currentDept","columnDept","originalGroup","newChildren","firstPaddedGroup","currentPaddedGroup","newColId","getUniqueKey","colGroupDefMerged","createMergedColGroupDef","paddedGroup","hasGroups","leaf","treeChildren","maxDeptThisLevel","newDept","existingColsCopy","def","isColumnGroup","createColumnGroup","createColumn","existingColumns","providedGroup","existingGroupAndIndex","findExistingGroup","idx","existingGroup","setExpanded","isExpanded","assign","existingColAndIndex","findExistingColumn","colDefMerged","addColumnDefaultAndTypes","getColId","setColDef","applyColumnState","dataTypeService","addColumnListeners","setFlex","noFlexThisCol","getFlex","widthBeforeUpdate","getActualWidth","setSort","setSortIndex","setVisible","newColDef","getUserProvidedColDef","newHasId","newHasField","newGroupDef","existingDef","getColGroupDef","defaultColDef","columnType","updateColDefAndGetColumnType","assignColumnTypes","autoGroupColDef","isSortingCoupled","isColumnsSortingCoupledToGroup","validateColDef","typeKeys","allColumnTypes","userTypes","colType","typeColDef","abstractColDef","providedColumnGroup","partId","displayedChildren","createUniqueId","allLeafColumns","getProvidedColumnGroup","isMoving","checkLeft","lastChild","lastChildLeft","getLeft","setLeft","firstChildLeft","createAgEvent","wantedChild","foundChild","isChildInThisGroupDeepSearch","groupActualWidth","isResizable","groupChild","getMinWidth","addDisplayedLeafColumns","isExpandable","getParent","getPaddingLevel","parentWithExpansion","EVENT_DISPLAYED_CHILDREN_CHANGED","emptyGroup","Events","EVENT_COLUMN_EVERYTHING_CHANGED","EVENT_NEW_COLUMNS_LOADED","EVENT_COLUMN_PIVOT_MODE_CHANGED","EVENT_COLUMN_ROW_GROUP_CHANGED","EVENT_EXPAND_COLLAPSE_ALL","EVENT_COLUMN_PIVOT_CHANGED","EVENT_GRID_COLUMNS_CHANGED","EVENT_COLUMN_VALUE_CHANGED","EVENT_COLUMN_MOVED","EVENT_COLUMN_VISIBLE","EVENT_COLUMN_PINNED","EVENT_COLUMN_GROUP_OPENED","EVENT_COLUMN_RESIZED","EVENT_DISPLAYED_COLUMNS_CHANGED","EVENT_SUPPRESS_COLUMN_MOVE_CHANGED","EVENT_SUPPRESS_MENU_HIDE_CHANGED","EVENT_SUPPRESS_FIELD_DOT_NOTATION","EVENT_VIRTUAL_COLUMNS_CHANGED","EVENT_ASYNC_TRANSACTIONS_FLUSHED","EVENT_ROW_GROUP_OPENED","EVENT_ROW_DATA_UPDATED","EVENT_PINNED_ROW_DATA_CHANGED","EVENT_RANGE_SELECTION_CHANGED","EVENT_CHART_CREATED","EVENT_CHART_RANGE_SELECTION_CHANGED","EVENT_CHART_OPTIONS_CHANGED","EVENT_CHART_DESTROYED","EVENT_TOOL_PANEL_VISIBLE_CHANGED","EVENT_TOOL_PANEL_SIZE_CHANGED","EVENT_COLUMN_PANEL_ITEM_DRAG_START","EVENT_COLUMN_PANEL_ITEM_DRAG_END","EVENT_MODEL_UPDATED","EVENT_CUT_START","EVENT_CUT_END","EVENT_PASTE_START","EVENT_PASTE_END","EVENT_FILL_START","EVENT_FILL_END","EVENT_RANGE_DELETE_START","EVENT_RANGE_DELETE_END","EVENT_UNDO_STARTED","EVENT_UNDO_ENDED","EVENT_REDO_STARTED","EVENT_REDO_ENDED","EVENT_KEY_SHORTCUT_CHANGED_CELL_START","EVENT_KEY_SHORTCUT_CHANGED_CELL_END","EVENT_CELL_CLICKED","EVENT_CELL_DOUBLE_CLICKED","EVENT_CELL_MOUSE_DOWN","EVENT_CELL_CONTEXT_MENU","EVENT_CELL_VALUE_CHANGED","EVENT_CELL_EDIT_REQUEST","EVENT_ROW_VALUE_CHANGED","EVENT_CELL_FOCUSED","EVENT_CELL_FOCUS_CLEARED","EVENT_FULL_WIDTH_ROW_FOCUSED","EVENT_ROW_SELECTED","EVENT_SELECTION_CHANGED","EVENT_TOOLTIP_SHOW","EVENT_TOOLTIP_HIDE","EVENT_CELL_KEY_DOWN","EVENT_CELL_MOUSE_OVER","EVENT_CELL_MOUSE_OUT","EVENT_FILTER_MODIFIED","EVENT_FILTER_OPENED","EVENT_ADVANCED_FILTER_BUILDER_VISIBLE_CHANGED","EVENT_VIRTUAL_ROW_REMOVED","EVENT_ROW_CLICKED","EVENT_ROW_DOUBLE_CLICKED","EVENT_GRID_READY","EVENT_GRID_PRE_DESTROYED","EVENT_GRID_SIZE_CHANGED","EVENT_VIEWPORT_CHANGED","EVENT_SCROLLBAR_WIDTH_CHANGED","EVENT_FIRST_DATA_RENDERED","EVENT_DRAG_STARTED","EVENT_DRAG_STOPPED","EVENT_CHECKBOX_CHANGED","EVENT_ROW_EDITING_STARTED","EVENT_ROW_EDITING_STOPPED","EVENT_CELL_EDITING_STARTED","EVENT_CELL_EDITING_STOPPED","EVENT_BODY_SCROLL","EVENT_BODY_SCROLL_END","EVENT_HEIGHT_SCALE_CHANGED","EVENT_PAGINATION_CHANGED","EVENT_COMPONENT_STATE_CHANGED","EVENT_STORE_REFRESHED","EVENT_BODY_HEIGHT_CHANGED","EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED","EVENT_SCROLL_VISIBILITY_CHANGED","EVENT_COLUMN_HOVER_CHANGED","EVENT_FLASH_CELLS","EVENT_PAGINATION_PIXEL_OFFSET_CHANGED","EVENT_DISPLAYED_ROWS_CHANGED","EVENT_LEFT_PINNED_WIDTH_CHANGED","EVENT_RIGHT_PINNED_WIDTH_CHANGED","EVENT_ROW_CONTAINER_HEIGHT_CHANGED","EVENT_HEADER_HEIGHT_CHANGED","EVENT_COLUMN_HEADER_HEIGHT_CHANGED","EVENT_ROW_DRAG_ENTER","EVENT_ROW_DRAG_MOVE","EVENT_ROW_DRAG_LEAVE","EVENT_ROW_DRAG_END","EVENT_GRID_STYLES_CHANGED","EVENT_POPUP_TO_FRONT","EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST","EVENT_COLUMN_PIVOT_CHANGE_REQUEST","EVENT_COLUMN_VALUE_CHANGE_REQUEST","EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST","EVENT_STORE_UPDATED","EVENT_FILTER_DESTROYED","EVENT_ROW_DATA_UPDATE_STARTED","EVENT_ROW_COUNT_READY","EVENT_ADVANCED_FILTER_ENABLED_CHANGED","EVENT_DATA_TYPES_INFERRED","EVENT_FIELD_VALUE_CHANGED","EVENT_FIELD_PICKER_VALUE_SELECTED","EVENT_SIDE_BAR_UPDATED","GroupInstanceIdCreator","existingIds","lastResult","GROUP_AUTO_COLUMN_ID","rowGroupColumns","groupAutoColumns","doingTreeData","doingMultiAutoColumn","isGroupMultiAutoColumn","rowGroupCol","createOneAutoGroupColumn","autoGroupColumns","updateOneAutoGroupColumn","createAutoGroupColDef","newCol","colToUpdate","oldColDef","underlyingColId","underlyingColumn","columnModel","getPrimaryColumn","columnFactory","createBaseColDef","autoGroupColumnDef","noFieldOrValueGetter","valueGetter","filterValueGetter","headerCheckboxSelection","hasOwnData","userDef","localeTextFunc","localeService","getLocaleTextFunc","headerName","userHasProvidedGroupCellRenderer","cellRenderer","cellRendererSelector","getDisplayNameForColumn","headerValueGetter","cellRendererParams","innerRenderer","innerRendererParams","reUnescapedHtml","HTML_ESCAPES","utf8_encode","stringFromCharCode","fromCharCode","ucs2decode","string","output","len","extra","counter","charCodeAt","checkScalarValue","point","toUpperCase","createByte","encodeCodePoint","convertedCode","paddedCode","padStart","symbol","codePoints","codePoint","byteString","capitalise","str","toLowerCase","escapeString","toEscape","skipEscapingHtmlChars","stringResult","replace","chr","camelCaseToHumanText","camelCase","rex","rexCaps","words","word","camelCaseToHyphenated","toLocaleLowerCase","convertToMap","pair","mapById","_","getOwnPropertySymbols","super","primaryHeaderRowCount","secondaryHeaderRowCount","gridHeaderRowCount","displayedColumnsLeft","displayedColumnsRight","displayedColumnsCenter","displayedColumns","displayedColumnsAndGroupsMap","viewportColumns","viewportColumnsHash","headerViewportColumns","viewportColumnsCenter","headerViewportColumnsCenter","autoHeightActiveAtLeastOnce","valueColumns","pivotColumns","ready","autoGroupsNeedBuilding","forceRecreateAutoGroups","pivotMode","bodyWidth","leftWidth","rightWidth","bodyWidthDirty","shouldQueueResizeOperations","resizeOperationQueue","suppressColumnVirtualisation","isPivotSettingAllowed","addManagedPropertyListeners","buildAutoGroupColumns","addManagedPropertyListener","onAutoGroupColumnDefChanged","onSharedColDefChanged","setPivotMode","addManagedListener","onFirstDataRendered","columnDefs","updateGridColumns","updateDisplayedColumns","autoGroupColService","updateAutoGroupColumns","gridColumns","createColumnsFromColumnDefs","colsPreviouslyExisted","oldTree","newTree","oldObjectsById","getInstanceId","colsToDestroy","destroyOldColumns","primaryColumnTree","secondaryBalancedTree","groupAutoColsBalancedTree","dispatchEventsFunc","compareColumnStatesAndDispatchEvents","valueCache","expire","oldPrimaryColumns","oldPrimaryTree","balancedTreeResult","createColumnTree","getColumnsFromTree","primaryColumnsMap","extractRowGroupColumns","extractPivotColumns","extractValueColumns","gridColsNotProcessed","gridColsArePrimary","processGridCols","orderGridColumnsLikePrimary","checkViewportColumns","dispatchEverythingChanged","dispatchNewColumnsLoaded","newColumnsLoadedEvent","onColumnsReady","eventEverythingChanged","primaryColsOrdered","otherCols","placeLockedColumns","displayedAutoHeightCols","viewportLeft","scrollPosition","scrollWidth","viewportRight","currentColumn","getDisplayedColAfter","afterScroll","viewportColumnsChanged","extractViewport","setViewport","pivotKeys","valueColKey","secondaryColumns","valueColumnToFind","foundColumn","thisPivotKeys","pivotValueColumn","pivotKeyMatches","pivotValueMatches","lastLeft","firstRight","setLastLeftPinned","setFirstRightPinned","autoSizeColumns","skipHeader","skipHeaderGroups","stopAtGroup","animationFrameService","flushAllFrames","columnsAutosized","changesThisTimeAround","shouldSkipHeader","shouldSkipHeaderGroups","actionOnGridColumns","preferredWidth","autoWidthCalculator","getPreferredWidthForColumn","newWidth","normaliseColumnWidth","autoSizeColumnGroupsByColumns","dispatchColumnResizedEvent","finished","flexColumns","movedColumns","changedColumns","getCommonValue","getPinned","columnGroups","getGridColumns","headerGroupCtrl","resizedColumns","columnGroup","headerContainerCtrl","ctrlsService","getHeaderRowContainerCtrls","getHeaderCtrlForColumn","resizeLeafColumnsToFit","autoSizeAllColumns","allDisplayedColumns","getAllDisplayedColumns","rootColumns","recursiveFindColumns","childColumns","displayedTreeLeft","displayedTreeRight","displayedTreeCentre","colSpanActive","getDisplayedColumnsForRow","filterCallback","emptySpaceBeforeColumn","lastConsideredCol","maxAllowedColSpan","getColSpan","columnsToCheckFilter","colsToRemove","filterPasses","colForFilter","gapBeforeColumn","isColumnInRowViewport","edge","allColumns","isFirst","columnToCompare","getDisplayedLeafColumns","targetColumn","getAllGridColumns","isAutoHeaderHeight","isAutoHeight","columnLeft","columnRight","leftBounds","rightBounds","columnToMuchLeft","columnToMuchRight","getWidthOfColsInList","masterList","actionIsAdd","columnCallback","atLeastOne","columnToAdd","colKeys","setPrimaryColumnList","setRowGroupActive","setColumnVisible","addRowGroupColumns","updatePrimaryColumnList","removeRowGroupColumns","setPivotActive","added","addPivotColumns","removePivotColumns","detectOrderChange","changes","oldIndex","dispatchColumnChangedEvent","setValueActive","getAggFunc","initialAggFunc","aggFuncService","getDefaultAggFunc","setAggFunc","colKey","addValueColumns","removeValueColumns","getMaxWidth","isGreaterThanMax","getGridColumn","columnWidths","shiftKey","sets","columnWidth","getPrimaryOrGridColumn","ratios","defaultIsShift","otherCol","widthDiff","otherColWidth","resizeColumnSets","resizeSets","columnResizeSet","minWidthAccumulated","maxWidthAccumulated","maxWidthActive","minWidthPasses","maxWidthPasses","passMinMaxCheck","checkMinAndMaxWidthsForSet","changedCols","allResizedCols","newWidths","finishedCols","finishedColsGrew","loopCount","subsetCols","subsetRatioTotal","pixelsToDistribute","thisColFinished","ratioThisCol","ratioScale","lastCol","colNewWidth","round","atLeastOneColChanged","flexedCols","refreshFlexedColumns","resizingCols","skipSetLeft","setLeftValues","updateBodyWidths","colsForEvent","fromIndex","isRowGroupEmpty","impactedColumns","columnsToMoveKeys","columnAnimationService","start","failedRules","doesMovePassRules","dispatchColumnMovedEvent","finish","columnsToMove","proposedColumnOrder","getProposedColumnOrder","doesOrderPassRules","gridOrder","doesMovePassMarryChildren","doesMovePassLockedPositions","cols","notAllColsInGridColumns","indexA","indexB","lastPlacement","rulePassed","lockPositionToPlacement","position","placement","lockPosition","allColumnsCopy","marryChildren","newIndexes","newColIndex","maxIndex","minIndex","spread","maxSpread","moveColumns","moveColumn","lastPrimaryOrder","columnDefFactory","buildColumnDefs","newBodyWidth","newLeftWidth","newRightWidth","atLeastOneChanged","getDisplayedLeftColumns","getDisplayedRightColumns","getDisplayedCenterColumns","columnsForQuickFilter","setColumnsVisible","state","setColumnsPinned","isDomLayout","actualPinned","createEvent","updatedColumns","resultOfAction","getDisplayedGroupAtDirection","direction","requiredLevel","getLevel","colGroupLeafColumns","getDisplayColMethod","groupPointer","getColumnGroupAtLevel","originalGroupLevel","groupPointerLevel","groupPointerProvidedColumnGroup","rowGroupIndex","pivotIndex","getSort","getSortIndex","colsForState","getPrimaryAndSecondaryAndAutoColumns","createStateItemFromColumn","orderColumnStateList","columnStateList","colIdToGridIndexMap","itemA","itemB","posA","posB","columnStates","letRowGroupIndex","letPivotIndex","colsToProcess","stateItem","getColumnStateFromColDef","applyOrder","getValueOrNull","initialRowGroupIndex","initialRowGroup","initialPivotIndex","initialPivot","applyStates","states","getById","columnsWithNoState","rowGroupIndexes","pivotIndexes","autoGroupColumnStates","unmatchedAndAutoStates","unmatchedCount","previousRowGroupCols","previousPivotCols","isAutoGroupColumn","startsWith","syncColumnWithStateItem","defaultState","applyDefaultsFunc","indexes","oldList","colA","colB","aHasIndex","bHasIndex","oldIndexA","oldIndexB","aHasOldIndex","bHasOldIndex","autoGroupColsCopy","autoCol","getAutoColumn","applyOrderAfterApplyState","getSecondaryColumn","newOrder","processedColIds","gridColumnsMap","autoGroupInsertIndex","alreadyProcessed","isAutoGroupCol","startState","columnStateBefore","getColumnState","columnStateBeforeMap","dispatchWhenListsDifferent","colsBefore","colsAfter","idMapper","beforeList","afterList","unchanged","changesArr","getChangedColumns","changedPredicate","colStateBefore","columnIdMapper","valueChangePredicate","cs","oldActive","activeChanged","aggFuncChanged","changedValues","resizeChangePredicate","pinnedChangePredicate","dispatchColumnPinnedEvent","visibilityChangePredicate","dispatchColumnVisibleEvent","sortChangePredicate","sortController","dispatchSortChangedEvents","normaliseColumnMovedEventForColumnState","firstValue","colStateAfter","colStateAfterMapped","colsIntersectIds","beforeFiltered","afterFiltered","csAfter","csBefore","gridCol","getValue","key1","key2","value1","value2","calculated","minColWidth","isPrimary","getColumns","columnLookupCallback","foundColumns","getColumn","secondaryColumnsMap","columnList","columnMap","columnsMatch","groupCol","sourceColumnId","columnMatches","colDefMatches","idMatches","location","includeAggFunc","getHeaderName","wrapHeaderNameWithAggFunc","getDisplayNameForProvidedColumnGroup","expressionService","evaluate","pivotActiveOnThisColumn","aggFuncFound","isCollapsedHeaderEnabled","isTotalColumn","pivotTotalColumnIds","measureActive","aggregationPresent","aggFuncString","aggFuncStringTranslated","allColumnGroups","getAllDisplayedTrees","checkPartId","depthFirstAllColumnTreeSearch","matched","getPartId","extractColumns","flag","previousCols","setFlagFunc","getIndexFunc","getInitialIndexFunc","getValueFunc","getInitialValueFunc","colsWithIndex","colsWithValue","colIsNew","initialValue","initialIndex","include","valuePresent","indexPresent","initialValuePresent","initialIndexPresent","useIndex","getIndexForCol","defaultIndex","stateItems","groupState","open","setColumnGroupState","columnGroupState","impactedGroups","groupKey","updateGroupsAndDisplayedColumns","setFirstRightAndLastLeftPinned","keyAsString","columnsForDisplay","isValueCol","groupDisplayColumns","groupDisplayColumnsMap","checkFunc","getRowGroupColumns","rowGroupColumnId","calculateColumnsForDisplay","buildDisplayedTrees","colDefs","newColsPresent","processSecondaryColumnDefinitions","previousSecondaryColumns","groupCallback","searchForColDefs","colDefs2","isGroup","prevGridCols","sortOrderToRecover","lastSecondaryOrder","hasSameColumns","areAutoColsChanged","createGroupAutoColumnsIfNeeded","groupAutoColsMap","addAutoGroupToGridColumns","orderGridColsLike","calculateColumnsForGroupDisplay","refreshQuickFilterColumns","clearDisplayedAndViewportColumns","checkColSpanActiveInCols","setAutoHeightActive","autoHeightActive","supportedRowModel","isRowModelType","colsOrder","lastOrderMapped","noColsFound","gridColsMap","oldColsOrdered","oldColsMap","newColsOrdered","newGridColumns","getOriginalParent","siblings","leafCols","leafCol","presentInNewGriColumns","noYetInSiblings","lastIndex","isPivotMode","normal","right","newAutoColsTree","createForAutoGroups","viewportRowLeft","viewportRowRight","viewportRowCenter","updateOpenClosedVisibilityInColumnGroups","deriveDisplayedColumns","derivedDisplayedColumnsFromDisplayedTree","joinDisplayedColumns","setLeftValuesOfColumns","setLeftValuesOfGroups","doingRtl","tree","depthFirstDisplayedColumnTreeSearch","isColumnInHeaderViewport","virtualColIds","testGroup","returnValue","addThisItem","getDisplayedChildren","hashColumn","extractViewportColumns","newHash","calculateHeaderRows","viewportWidth","flexViewportWidth","flexAfterDisplayIndex","allResizingCols","displayedCols","knownColumnsWidth","flexingColumns","minimumFlexedWidth","totalFlex","isFlex","flexingColumnSizes","spaceForFlexingColumns","outer","spacePerFlex","widthByFlexRule","constrainedWidth","remainingSpace","fireResizedEvent","gridWidth","_b","_c","_d","_e","sizeColumnsToFit","limitsMap","columnLimits","dimensions","doColumnsAlreadyFit","colsToSpread","colsToNotSpread","suppressSizeToFit","colsToDispatchEventFor","finishedResizing","moveToNotSpread","widthOverride","minOverride","defaultMinWidth","maxOverride","defaultMaxWidth","colWidth","availablePixels","setMinimum","scale","pixelsForLastCol","colMinWidth","colMaxWidth","MAX_VALUE","visibleColumns","leftVisibleColumns","rightVisibleColumns","centerVisibleColumns","groupInstanceIdCreator","displayedGroupCreator","createDisplayedGroups","updateDisplayedMap","getUniqueId","fromMap","calculateDisplayedColumns","groupFullWidthRow","isGroupUseEntireRow","suppressAutoColumn","isGroupSuppressAutoColumn","groupingActive","needAutoColumns","newAutoGroupCols","createAutoGroupColumns","autoColsDifferent","autoColsEqual","groupDisplayType","isCustomRowGroups","treeDataDisplayType","colsA","colsB","isRtl","queryOrder","container","setAutoHeaderHeight","getPivotGroupHeaderHeight","getGroupHeaderHeight","defaultHeight","getPivotHeaderHeight","getHeaderHeight","displayedHeights","getAutoHeaderHeight","environment","getFromTheme","resizeOperation","userColDef","groupLockGroupColumns","colIndex","findIndex","updatedRowGroupColumnState","updatedPivotColumnState","existingColumnStateUpdates","orderColumns","updatedColumnState","colList","enableProp","initialEnableProp","indexProp","initialIndexProp","updatedColIdArray","updatedColIds","newColIds","allColIds","colIdsInOriginalOrder","originalOrderMap","orderIndex","hasAddedNewCols","processPrecedingNewCols","originalOrderIndex","missingIndex","propEnabled","autoSizeStrategy","propColumnLimits","getGridBodyCtrl","colIds","getMinColWidth","MAX_SAFE_INTEGER","maxColWidth","colDefWidth","colDefInitialWidth","originalBalancedTree","found","recursePath","nextNode","sortedVisibleColumns","oldDisplayedGroups","oldColumnsMapped","mapOldGroupsById","topLevelResultCols","groupsOrColsAtCurrentLevel","currentlyIterating","lastGroupedColIdx","createGroupToIndex","previousNode","previousNodeProvided","previousNodeParent","newGroup","addChild","thisNode","thisNodeProvided","thisNodeParent","setupParentsIntoColumns","getInstanceIdForKey","uniqueId","displayedGroups","recursive","columnsOrGroups","columnOrGroup","columnsOrGroup","setParent","INITIAL_GRID_OPTION_KEYS","statusBar","enableBrowserTooltips","tooltipTrigger","tooltipMouseTrack","tooltipInteraction","defaultColGroupDef","suppressAutoSize","skipHeaderOnAutoSize","components","stopEditingWhenCellsLoseFocus","undoRedoCellEditing","undoRedoCellEditingLimit","excelStyles","cacheQuickFilter","excludeHiddenColumnsFromQuickFilter","advancedFilterModel","customChartThemes","chartThemeOverrides","enableChartToolPanelsButton","suppressChartToolPanelsButton","chartToolPanelsDef","loadingCellRendererSelector","localeText","keepDetailRows","keepDetailRowsCount","detailRowHeight","detailRowAutoHeight","alignedGrids","tabIndex","valueCacheNeverExpires","enableCellExpressions","suppressParentsInRowNodes","suppressTouch","suppressAsyncEvents","suppressBrowserResizeObserver","suppressPropertyNamesCheck","debug","loadingOverlayComponent","loadingOverlayComponentParams","suppressLoadingOverlay","noRowsOverlayComponent","noRowsOverlayComponentParams","paginationPageSizeSelector","paginateChildRows","pivotPanelShow","pivotSuppressAutoColumn","suppressExpandablePivotGroups","aggFuncs","suppressAggFuncInHeader","suppressAggAtRootLevel","removePivotHeaderRowWhenSingleValueColumn","allowShowChangeAfterFilter","ensureDomOrder","enableRtl","suppressMaxRenderedRowRestriction","suppressRowVirtualisation","rowDragText","suppressGroupMaintainValueType","rowGroupPanelSuppressSort","suppressGroupRowsSticky","rowModelType","cacheOverflowSize","infiniteInitialRowCount","serverSideInitialRowCount","suppressServerSideInfiniteScroll","maxBlocksInCache","maxConcurrentDatasourceRequests","blockLoadDebounceMillis","serverSideOnlyRefreshFilteredGroups","serverSidePivotResultFieldSeparator","viewportRowModelPageSize","viewportRowModelBufferSize","debounceVerticalScrollbar","suppressAnimationFrame","suppressPreventDefaultOnMouseWheel","scrollbarWidth","icons","suppressRowTransform","functionsPassive","enableGroupEdit","initialState","processUnpinnedColumns","createChartContainer","getLocaleText","getRowId","PropertyKeys","STRING_PROPERTIES","OBJECT_PROPERTIES","ARRAY_PROPERTIES","NUMBER_PROPERTIES","BOOLEAN_PROPERTIES","FUNCTIONAL_PROPERTIES","CALLBACK_PROPERTIES","FUNCTION_PROPERTIES","ALL_PROPERTIES","ALL_PROPERTIES_AND_CALLBACKS","gridOptions","component","mergedOptions","getGridOptionKeys","VUE_OMITTED_PROPERTY","gridChanges","hasChanges","ALL_PROPERTIES_AND_CALLBACKS_SET","__internalUpdateGridOptions","EVENTS","EXCLUDED_INTERNAL_EVENTS","PUBLIC_EVENTS","EVENT_CALLBACKS","getCallbackForEvent","isSafari","safariVersion","isChrome","isFirefox","isMacOs","isIOS","browserScrollbarWidth","componentsMappedByName","componentMeta","addComponent","classEscaped","componentName","classUpperCase","componentClass","htmlTag","toggleAriaAttribute","removeAriaAttribute","setAriaAttribute","setAttribute","ariaAttributeName","removeAttribute","setAriaRole","role","getAriaSortState","sortDirection","getAriaLevel","getAttribute","getAriaPosInSet","getAriaLabel","setAriaLabel","label","setAriaLabelledBy","labelledBy","setAriaDescription","description","setAriaDescribedBy","describedby","setAriaLive","live","setAriaAtomic","atomic","setAriaRelevant","relevant","setAriaLevel","setAriaDisabled","disabled","setAriaHidden","hidden","setAriaActiveDescendant","descendantId","setAriaExpanded","removeAriaExpanded","setAriaSetSize","setsize","setAriaPosInSet","setAriaMultiSelectable","multiSelectable","setAriaRowCount","rowCount","setAriaRowIndex","rowIndex","setAriaColCount","colCount","setAriaColIndex","setAriaColSpan","setAriaSort","removeAriaSort","setAriaSelected","selected","setAriaChecked","checked","setAriaControls","controllerElement","controlledElement","getAriaCheckboxStateName","translate","isBrowserSafari","navigator","userAgent","getSafariVersion","versionMatch","parseFloat","isBrowserChrome","win","chrome","webstore","runtime","vendor","isBrowserFirefox","isMacOsUserAgent","platform","isIOSUserAgent","maxTouchPoints","browserSupportsPreventScroll","getTabIndex","numberTabIndex","getMaxDivHeight","body","testUpTo","div","appendChild","style","clientHeight","removeChild","getBodyWidth","clientWidth","innerHeight","documentElement","getBodyHeight","getScrollbarWidth","initScrollbarWidthAndVisibility","opacity","overflow","msOverflowStyle","offsetWidth","parentNode","isInvisibleScrollbar","padStartWidthZeros","totalStringSize","createArrayOfNumbers","first","cleanNumber","floor","decToHex","number","bytes","hex","formatNumberTwoDecimalPlacesAndCommas","thousandSeparator","decimalSeparator","formatNumberCommas","sum","total","serialiseDate","date","includeTime","separator","serialised","getFullYear","getMonth","getDate","part","getHours","getMinutes","getSeconds","calculateOrdinal","remainder","dateToFormattedString","format","fullYear","months","days","YYYY","YY","Y","MMMM","MMM","MM","Mo","M","Do","DD","D","dddd","getDay","ddd","dd","do","regexp","RegExp","parseDateTimeFromString","dateStr","timeStr","year","month","day","hours","minutes","seconds","setHours","setMinutes","setSeconds","rtlNegativeScroll","radioCssClass","elementClass","otherElementClass","sibling","firstChild","classList","toggle","nextSibling","FOCUSABLE_SELECTOR","FOCUSABLE_EXCLUDE","isFocusableFormField","Element","msMatchesSelector","inputSelector","isFocusable","isNotFocusable","isElementVisible","focusable","setDisplayed","displayed","skipAriaHidden","setDisabled","addOrRemoveDisabledAttribute","nodeListForEach","querySelectorAll","input","isElementChildOfClass","cls","maxNest","contains","getElementSize","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","paddingTop","paddingRight","paddingBottom","paddingLeft","marginTop","marginRight","marginBottom","marginLeft","boxSizing","getComputedStyle","getInnerHeight","getInnerWidth","getAbsoluteHeight","ceil","offsetHeight","getAbsoluteWidth","marginWidth","getElementRectWithOffset","offsetElementRect","getBoundingClientRect","top","bottom","isRtlNegativeScroll","template","dir","innerHTML","scrollLeft","getScrollLeft","rtl","abs","setScrollLeft","clearElement","removeFromParent","checkVisibility","checkVisibilityCSS","isHidden","offsetParent","visibility","loadTemplate","tempDiv","appendHtml","eContainer","htmlTemplate","insertAdjacentHTML","eChild","eChildBefore","focusedEl","activeElement","eChildHasFocus","insertBefore","insertAdjacentElement","focus","preventScroll","setDomChildOrder","orderedChildren","correctCellAtIndex","actualCellAtIndex","insertWithDomOrder","eToInsert","addStylesToElement","styles","parsedKey","valueAsString","parsedValue","priority","isHorizontalScrollShowing","scrollHeight","setElementWidth","removeProperty","setFixedWidth","formatSize","setElementHeight","setFixedHeight","maxHeight","minHeight","isNodeOrElement","Node","copyNodeList","nodeList","iterateNamedNodeMap","attr","addOrRemoveAttribute","bindCellRendererToHtmlElement","cellRendererPromise","eTarget","then","gui","getGui","fuzzyCheckStrings","inputValues","validValues","allSuggestions","fuzzyMatches","invalidInputs","inputValue","validValue","invalidInput","fuzzySuggestions","hideIrrelevant","filterByPercentageOfBestMatch","thisSuggestions","text","relevance","stringWeightedDistances","suggestion","bestMatch","limit","indices","str1","str2","weight","iconNameClassMap","columnGroupOpened","columnGroupClosed","columnSelectClosed","columnSelectOpen","columnSelectIndeterminate","columnMovePin","columnMoveHide","columnMoveMove","columnMoveLeft","columnMoveRight","columnMoveGroup","columnMoveValue","columnMovePivot","dropNotAllowed","groupContracted","groupExpanded","setFilterGroupClosed","setFilterGroupOpen","setFilterGroupIndeterminate","chart","close","cancel","check","previous","next","linked","unlinked","colorPicker","groupLoading","menu","maximize","minimize","menuPin","menuValue","menuAddRowGroup","menuRemoveRowGroup","clipboardCopy","clipboardCut","clipboardPaste","pivotPanel","rowGroupPanel","valuePanel","columnDrag","save","csvExport","excelExport","smallDown","smallLeft","smallRight","smallUp","sortAscending","sortDescending","sortUnSort","advancedFilterBuilder","advancedFilterBuilderDrag","advancedFilterBuilderInvalid","advancedFilterBuilderMoveUp","advancedFilterBuilderMoveDown","advancedFilterBuilderAdd","advancedFilterBuilderRemove","createIcon","iconName","iconContents","createIconNoSpan","className","eResult","forceCreate","userProvidedIcon","optionsIcons","span","cssClass","rendererResult","KeyCode","BACKSPACE","TAB","ENTER","ESCAPE","SPACE","LEFT","UP","RIGHT","DOWN","DELETE","F2","PAGE_UP","PAGE_DOWN","PAGE_HOME","PAGE_END","A","C","V","X","Z","A_KEYCODE","C_KEYCODE","V_KEYCODE","D_KEYCODE","Z_KEYCODE","Y_KEYCODE","isEventFromPrintableCharacter","altKey","ctrlKey","printableCharacter","isUserSuppressingKeyboardEvent","keyboardEvent","editing","colDefFunc","suppressKeyboardEvent","colDefFuncResult","isUserSuppressingHeaderKeyboardEvent","headerRowIndex","getDefinition","suppressHeaderKeyboardEvent","normaliseQwertyAzerty","keyCode","code","isDeleteKey","alwaysReturnFalseOnBackspace","areEventsNear","e1","e2","pixelCount","diffX","clientX","diffY","clientY","sortRowNodesByOrder","rowNodes","rowNodeOrder","nodeA","nodeB","positionA","positionB","bothNodesAreUserNodes","bothNodesAreFillerNodes","__objectId","rowNodeA","rowNodeB","atLeastOneOutOfOrder","convertToSet","x","utils","NumberSequence","initValue","step","nextValue","valToReturn","AgPromiseStatus","AgPromise","status","IN_PROGRESS","resolution","waiters","onDone","onReject","promises","resolve","remainingToResolve","combinedValues","promise","RESOLVED","ifNotResolvedValue","ifResolved","waiter","TooltipStates","TooltipTrigger","parentComp","tooltipShowDelayOverride","tooltipHideDelayOverride","SHOW_QUICK_TOOLTIP_DIFF","FADE_OUT_TOOLTIP_TIMEOUT","INTERACTIVE_HIDE_DELAY","interactionEnabled","isInteractingWithTooltip","NOTHING","tooltipInstanceCount","getTooltipTrigger","HOVER","onMouseEnter","onMouseLeave","FOCUS","onFocusIn","onFocusOut","onMouseMove","onMouseDown","onKeyDown","delayOption","getGridOptionsTooltipDelay","setToDoNothing","trigger","interactiveTooltipTimeoutId","unlockService","startHideTimeout","isLocked","showTooltipTimeoutId","prepareToShowTooltip","lastMouseEvent","SHOWING","tooltipComp","positionTooltip","lockService","relatedTarget","parentCompGui","tooltipGui","mouseEvent","isLastTooltipHiddenRecently","getTooltipDelay","showTooltip","WAITING_TO_SHOW","now","lastTooltipHideTime","hideTooltip","onBodyScrollEventCallback","onColumnMovedEventCallback","clearTimeouts","getTooltipParams","newTooltipComponentCallback","userDetails","userComponentFactory","getTooltipCompDetails","newAgStackInstance","forceHide","destroyTooltipComp","parentGui","tooltipInstanceCopy","compNoLongerNeeded","eGui","addPopupRes","popupService","addPopup","ariaLabel","tooltipPopupDestroyFunc","hideFunc","tooltipMouseEnterListener","onTooltipMouseEnter","tooltipMouseLeaveListener","onTooltipMouseLeave","tooltipFocusInListener","onTooltipFocusIn","tooltipFocusOutListener","onTooltipFocusOut","ePopup","nudgeY","skipObserver","positionPopupUnderMouseEvent","positionPopupByComponent","eventSource","keepWithinBounds","clearTooltipListeners","clearInteractiveTimeout","clearHideTimeout","hideTooltipTimeoutId","clearShowTimeout","CssClassManager","cssClassStates","addCssClass","updateNeeded","removeCssClass","remove","addOrRemove","addOrRemoveCssClass","compIdSequence","compId","cssClassManager","setTemplate","usingBrowserTooltips","tooltipText","newTooltipText","showDelayOverride","hideDelayOverride","removeTooltip","tooltipFeature","addTooltip","paramsMap","childNodeList","childNodes","childNode","childComp","createComponentFromElement","childGui","copyAttributesFromNode","addItems","createChildComponentsFromTags","swapComponentForNode","nodeName","componentParams","ComponentClass","agStackComponentsRegistry","getComponentClass","elementGettingCreated","newComponent","setParentComponent","eComponent","replaceChild","createComment","swapInComponentForQuerySelectors","thisNoType","iterateOverQuerySelectors","querySelector","thisPrototype","__agComponentMetaData","currentProtoName","querySelectors","elements","setTemplateFromElement","__agComponent","wireQuerySelectors","setResult","topLevelRefMatch","refSelector","resultOfQuery","getFocusableElement","parentComponent","cssSelector","newChild","childComponent","EVENT_DISPLAYED_CHANGED","containsCssClass","refName","queryForHtmlElement","RefSelector","ref","querySelectorFunc","selector","addToObjectProps","instanceName","displayName","eFloatingFilterText","setInputAriaLabel","parentModel","parentFilterInstance","filterInstance","getModelAsString","modelAsString","setValue","init","dateComponentParams","eParent","alive","compDetails","getDateCompDetails","dateComp","afterGuiAttached","tempValue","setDate","setDateCompDisabled","placeholder","setInputPlaceholder","onParamsUpdated","OptionsFactory","customFilterOptions","defaultOptions","filterOptions","mapCustomOptions","selectDefaultItem","filterOption","requiredProperties","propertyCheck","displayKey","defaultOption","firstFilterOption","FILTER_LOCALE_TEXT","applyFilter","clearFilter","resetFilter","cancelFilter","textFilter","numberFilter","dateFilter","setFilter","filterOoo","empty","equals","notEqual","lessThan","greaterThan","inRange","inRangeStart","inRangeEnd","lessThanOrEqual","greaterThanOrEqual","notContains","endsWith","blank","notBlank","before","after","andCondition","orCondition","dateFormatOoo","eFocusableElement","callbacks","shouldStopEventPropagation","onTabKeyDown","defaultPrevented","nextRoot","focusService","findNextFocusableElement","preventDefault","FOCUS_MANAGED_CLASS","addKeyDownListeners","handleKeyDown","RESIZE_CONTAINER_STYLE","RESIZE_TEMPLATE","config","dragStartPosition","y","lastSize","positioned","resizersAdded","resizeListeners","boundaryEl","isResizing","movable","currentResizer","popup","getWidth","getHeight","offsetElement","centered","forcePopupParentAsOffsetParent","setOffsetParent","computedMinHeight","computedMinWidth","findBoundaryElement","offsetParentComputedStyles","paddingWidth","paddingHeight","setWidth","setHeight","refreshSize","center","initialisedDuringPositioning","setPosition","moveElement","moveElementDragListener","onDragStart","onMoveStart","onDragging","onMove","onDragStop","onMoveEnd","dragService","addDragSource","removeDragSource","clearResizeListeners","addResizers","removeResizers","topLeft","topRight","bottomRight","bottomLeft","side","resizableStructure","isSideResizable","resizerEl","getResizerElement","dragStartPixels","onResizeStart","onResize","onResizeEnd","pointerEvents","isPercent","availableHeight","getAvailableHeight","initialisePosition","elRect","offsetParentRect","yPosition","parentTop","additionalHeight","parentEl","xPosition","positionPopup","updatePosition","constrain","applyMaxHeightToElement","resizeObserverSubscriber","resizeObserverService","observeResize","getPopupParent","isLeft","isTop","anywhereWithin","topBuffer","xDiff","yDiff","movementX","shouldSkipX","movementY","shouldSkipY","diff","parentRect","boundaryElRect","skipX","skipY","resizerMap","parser","DOMParser","resizers","parseFromString","createResizeMap","isRight","isBottom","applySizeToSiblings","updateDragStartPosition","getSiblings","currentEl","nextHeight","nextWidth","computedStyle","vertical","containerToFlex","isHorizontal","isVertical","calculateMouseMovement","offsetLeft","offsetTop","oldWidth","skipWidth","oldHeight","newHeight","skipHeight","getMinSizeOfSiblings","calculateTopBuffer","constrainSizeToAvailableHeight","filterNameKey","applyActive","hidePopup","debouncePending","appliedModel","buttonListeners","resetTemplate","createManagedBean","positionableFeature","getPositionableElement","onFormSubmit","templateString","getCssIdentifier","createBodyTemplate","providedFilterParams","readOnly","setParams","resetUiToDefaults","updateUiVisibility","setupOnBtApplyDebounce","isUseApplyButton","resetButtonsPanel","resetUiToActiveModel","getModel","buttons","hasButtons","isReadOnly","eButtonsPanel","fragment","createDocumentFragment","addButton","clickListener","onBtApply","onBtClear","onBtReset","onBtCancel","buttonType","button","append","debounceMs","getDebounceMs","getDefaultDebounceMs","debounceFunc","checkApplyDebounce","onBtApplyDebounce","model","setModelIntoUi","applyModel","handleCancelEnd","closeOnApply","currentModel","afterUiUpdatedFunc","afterAppliedFunc","onUiChanged","newModel","getModelFromUi","isModelValid","previousModel","areModelsEqual","afterFloatingFilter","afterDataChange","filterChangedCallback","fromFloatingFilter","filterModifiedCallback","applyFilterButton","getRefElement","refreshFilterResizer","containerType","isFloatingFilter","restoreLastSize","setResizable","removeSizeFromEl","debounceDefault","newParams","eFilterBody","labelSeparator","labelAlignment","eLabel","labelWidth","setLabelSeparator","setLabel","setLabelWidth","setLabelAlignment","refreshLabel","innerText","getCompId","alignment","eGuiClassList","hasEllipsis","postConstruct","refreshAriaLabelledBy","ariaEl","getAriaElement","labelId","getLabelId","callbackFn","previousValue","TEMPLATE","isPickerDisplayed","skipClick","pickerGap","hideCurrentPicker","ariaRole","onPickerFocusIn","onPickerFocusOut","maxPickerHeight","variableWidth","minPickerWidth","maxPickerWidth","setPickerMaxHeight","setPickerMinWidth","setPickerMaxWidth","setupAria","displayId","eDisplayField","onLabelOrWrapperMouseDown","eWrapper","pickerIcon","icon","eIcon","focusableEl","isDisabled","hidePicker","showPicker","stopPropagation","pickerComponent","createPickerComponent","pickerGui","renderAndPositionPicker","toggleExpandedStyles","eDocument","getDocument","ePicker","destroyMouseWheelFunc","pickerAriaLabelKey","pickerAriaLabelValue","modalPicker","popupParams","modal","closeOnEsc","closedCallback","shouldRestoreFocus","beforeHidePicker","alignPickerToComponent","pickerType","alignSide","togglePickerHasFocus","focused","gap","cssIdentifier","itemEls","highlightedEl","pos","setValueByIndex","isDown","itemToHighlight","currentIdx","nextPos","highlightItem","listOptions","listOption","addOption","sanitisedText","renderOption","updateIndices","option","itemEl","clearHighlighted","fireItemSelected","displayValue","fireChangeEvent","ACTIVE_CLASS","EVENT_ITEM_SELECTED","createListComponent","listComponent","eListAriaEl","listId","addGuiEventListener","stopImmediatePropagation","KeyboardEvent","bubbles","refreshHighlighted","fromPicker","getDisplayValue","inputType","displayFieldTag","setInputType","eInput","addInputListeners","activateTabIndex","getInputElement","maxLength","autoCompleteValue","onCheckboxClick","isSelected","getNextValue","dispatchChange","refreshSelectedClass","setSelected","indeterminate","checkboxChangedEvent","onChange","optionsFactory","valueFormatter","isCombined","operator","combinedModel","conditions","condition1","condition2","customOptions","joinOperatorTranslateKey","BLANK","NOT_BLANK","customOption","getCustomOption","numberOfInputs","conditionToString","eTypes","eJoinOperatorPanels","eJoinOperatorsAnd","eJoinOperatorsOr","eConditionBodies","lastUiCompletePosition","joinOperatorId","customOpts","zeroInputTypes","EMPTY","IN_RANGE","setTypeFromFloatingFilter","setValueFromFloatingFilter","eType","getDefaultOption","getUiCompleteConditions","maxNumConditions","filterType","getFilterType","getJoinOperator","defaultJoinOperator","aIsSimple","bIsSimple","oneSimpleOneCombined","aSimple","bSimple","areSimpleModelsEqual","aCombined","bCombined","aModel","bModel","newOptionsList","getDefaultFilterOptions","allConditionsExistInNewOptionsList","shouldRefresh","parentRefreshed","refresh","removeConditionsAndOperators","createOption","setModel","numConditions","validateAndUpdateConditions","numPrevConditions","getNumConditions","createJoinOperatorPanel","orChecked","eJoinOperatorAnd","eJoinOperatorOr","setConditionIntoUi","simpleModel","createMissingConditionsAndOperators","models","combineFunction","individualConditionPasses","setNumConditions","getDefaultJoinOperator","filterPlaceholder","createFilterListOptions","suppressAndOrCondition","alwaysShowBothConditions","numAlwaysVisibleConditions","eConditionBody","createValueElement","putOptionsIntoDropdown","resetType","forEachPositionInput","resetInput","addChangedListeners","eJoinOperatorPanel","createJoinOperator","uniqueGroupId","resetJoinOperatorAnd","resetJoinOperatorOr","onValueChange","eJoinOperators","andOr","eJoinOperator","getFilterOptions","filterListOptions","createBoilerplateListOption","createCustomListOption","joinOperator","updateNumConditions","updateConditionStatusesAndValues","areAllConditionsUiComplete","isConditionUiComplete","shouldAddNewConditionAtEnd","activePosition","removeStartPosition","numConditionsToRemove","isConditionDisabled","isConditionBodyVisible","forEachInput","setElementDisplayed","setElementDisabled","resetPlaceholder","startPosition","deleteCount","removeComponents","removeElements","removeValueElements","joinOperatorIndex","removedElements","removeItems","removedComponents","comp","suppressFocus","firstInput","getInputs","afterGuiDetached","updatedLastUiCompletePosition","conditionsRemoved","shouldRemovePositionAtEnd","positionBeforeLastUiCompletePosition","shouldUpdateConditionStatusesAndValues","updateJoinOperatorsDisabled","defaultPlaceholder","filterPlaceholderFn","filterOptionKey","globalTranslate","getPlaceholderText","cb","getConditionTypes","forEachPositionTypeInput","getConditionType","getNumberOfInputs","inputs","getValues","createCondition","filteringLabel","resetJoinOperator","isDefaultOperator","updateJoinOperatorDisabled","setName","setElementValue","mapValuesFromModel","elPosition","attachElementOnChange","filterModel","cellValue","getCellValue","customFilterOption","customFilterResult","evaluateCustomFilter","evaluateNullValue","evaluateNonNullValue","predicate","EQUALS","NOT_EQUAL","LESS_THAN","LESS_THAN_OR_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUAL","CONTAINS","NOT_CONTAINS","STARTS_WITH","ENDS_WITH","scalarFilterParams","includeBlanksInEquals","includeBlanksInGreaterThan","includeBlanksInLessThan","includeBlanksInRange","compareResult","compareToResult","inRangeInclusive","isBlank","DEFAULT_MIN_YEAR","DEFAULT_MAX_YEAR","Infinity","dateFilterParams","isRange","dateFrom","dateTo","inRangeFloatingFilterDateFormat","formattedFrom","formattedTo","updateParams","eConditionPanelsFrom","eConditionPanelsTo","dateConditionFromComps","dateConditionToComps","minValidYear","maxValidYear","minValidDate","maxValidDate","filterDate","cellAsDate","yearParser","param","fallback","filterModelFormatter","dateCompWrapper","onDateChanged","filterParams","DEFAULT_FILTER_OPTIONS","eCondition","createFromToElement","eConditionPanels","dateConditionComps","fromTo","eConditionPanel","createDateCompWrapper","removeDateComps","getUTCFullYear","valid","isValidDateValue","_elPosition","lastType","isTypeEditable","setSimpleParams","update","setEditable","uneditableTypes","doesFilterHaveSingleInput","createDateComponent","eReadOnlyText","updateDateComponent","updateCompOnModelChange","currentParentModel","allowEditing","canWeEditAfterModelFromParentFilter","dateModel","eDateWrapper","isEventFromFloatingFilter","isEventFromDataChange","setLastTypeFromModel","filterValueDate","filterValueText","onFloatingFilterChanged","getLastType","getDateComponentParams","inputElement","eDateInput","usingSafariDatePicker","shouldUseBrowserDatePicker","parsedMinValidDate","parsedMaxValidDate","browserDatePicker","allowedCharPattern","preventDisallowedCharacters","pattern","preventCharacters","clipboardData","getData","floatedValue","normalizeValue","onWheel","precision","adjustPrecision","isScientificNotation","floatString","toFixed","parts","setValueOrInputValue","setValueFunc","setInputValueOnlyFunc","setInputValueOnly","validity","normalizedValue","formatValue","filterTo","getAllowedCharPattern","eValuesFrom","eValuesTo","numberFilterParams","processValue","numberFormatter","valueToSet","eValues","eValue","stringToFloat","filterText","numberParser","trimmedInput","textFilterParams","matcher","getTextMatcher","formatter","textFormatter","caseSensitive","DEFAULT_FORMATTER","DEFAULT_LOWERCASE_FORMATTER","legacyComparator","textCustomComparator","textMatcher","DEFAULT_MATCHER","getValuesWithSideEffects","applySideEffects","trimInput","filterTypesAllowNulls","formattedValues","cellValueFormatted","matcherParams","lastIndexOf","valueChangedListener","eFloatingFilterTextInput","autoComplete","setAutoComplete","floatingFilterInputService","getFilterModelFormatter","setupFloatingFilterInputService","setTextInputParams","createFloatingFilterInputService","setupGui","eFloatingFilterInputContainer","browserAutoComplete","toDebounce","syncUpWithParentFilter","setValueChangedListener","isEnterKey","numberInputActive","eFloatingFilterNumberInput","eNumberInput","eTextInput","setupListeners","getActiveInputElement","recreateFloatingFilterInputService","preventMouseClick","destroyFuncs","touching","startListener","onTouchStart","moveListener","onTouchMove","endListener","onTouchEnd","touchList","identifier","touchStart","touchEvent","touches","moved","touchStartCopy","touchesMatch","EVENT_LONG_TAP","touch","getActiveTouch","eventIsFarAway","EVENT_TAP","checkForDoubleTap","cancelable","lastTapTime","DOUBLE_TAP_MILLIS","EVENT_DOUBLE_TAP","skipTemplate","eSortOrder","eSortAsc","eSortDesc","eSortMixed","eSortNone","suppressOrder","setupMultiSortIndicator","isSortable","addInIcon","updateIcons","onSortChanged","updateSortOrder","getDisplaySortForColumn","isAscending","isDescending","alwaysHideNoSort","unSortIcon","isNone","isColumnShowingRowGroup","areGroupsCoupled","updateMultiSortIndicator","isMixedSort","allColumnsWithSorting","getColumnsWithSortingOrdered","indexThisCol","getDisplaySortIndexForColumn","moreThanOneColSorting","showIndex","lastMovingChanged","workOutTemplate","currentTemplate","workOutShowMenu","currentShowMenu","workOutSort","currentSort","shouldSuppressMenuHide","currentSuppressMenuHide","setDisplayName","setupTap","setupIcons","setMenu","setupSort","setupFilterIcon","currentDisplayName","displayNameSanitised","eText","eMenu","eFilter","touchListener","suppressMenuHide","tapMenuButton","menuTouchListener","enableMenu","showMenuFn","showColumnMenuAfterMouseClick","enableSorting","tapListener","progressSort","menuHides","onIpadAndMenuHides","showMenu","menuFactory","showMenuAfterButtonClick","eSortIndicator","attachCustomElements","nowTime","movedRecently","columnMoving","sortUsingCtrl","multiSort","onSortingChanged","isSortAscending","isSortDescending","isSortNone","sourceColumns","getSourceColumnsForGroupColumn","sortDirectionsMatch","sourceCol","isMultiSorting","onFilterChanged","filterPresent","isFilterActive","checkWarnings","setupLabel","addGroupExpandIcon","setupExpandIcons","paramsAny","expandAction","newExpandedValue","setColumnGroupOpened","addTouchAndClickListeners","eCloseIcon","eOpenIcon","stopPropagationAction","updateIconVisibility","suppressStickyLabel","hasParent","focusAfterAttached","cellStartedEdit","eTextArea","setMaxLength","setCols","setRows","rows","parseValue","startedByEnter","eSelect","valueFormatterService","eventKey","hasValue","currentValue","valueFormatted","valueFormattedExits","valueListGap","valueListMaxWidth","valueListMaxHeight","setPickerGap","stopEditing","cellEditorInput","getTemplate","startValue","getStartValue","highlightAllOnFocus","setStartValue","inputEl","setCaret","focusEl","useFormatter","refData","setSelectionRange","ARROW_UP","ARROW_DOWN","refreshCount","eDelta","delta","absDelta","valueToUse","deltaUp","refreshCountCopy","hideDeltaValue","lastValue","filterManager","isSuppressFlashingCellsBecauseFiltering","showDelta","setTimerToRemoveDelta","eCurrent","ePrevious","addSlideAnimation","childrenMapped","rowTop","oldRowTop","selectable","OBJECT_ID_SEQUENCE","__autoHeights","alreadyRendered","highlighted","hovered","setDataCommon","oldData","onDataChanged","updateDataOnDetailNode","checkRowSelectable","resetQuickFilterAggregateText","createDataChangedEvent","dispatchLocalEvent","detailNode","newData","EVENT_DATA_CHANGED","rowPinned","oldNode","__daemon","createDaemonNode","setId","selectionService","syncInRowNode","isRowSelectableFunc","setRowSelectable","newVal","suppressSelectionUpdate","createLocalRowEvent","EVENT_SELECTABLE_CHANGED","isGroupSelectsChildren","calculateSelectedFromChildren","setSelectedParams","getRowIdFunc","getCallback","parentKeys","getGroupKeys","ID_PREFIX_ROW_GROUP","excludeSelf","pixel","rowHeight","EVENT_FIRST_CHILD_CHANGED","EVENT_LAST_CHILD_CHANGED","childIndex","EVENT_CHILD_INDEX_CHANGED","EVENT_TOP_CHANGED","setRowTop","setRowIndex","dragging","EVENT_DRAGGING_CHANGED","EVENT_HIGHLIGHT_CHANGED","allChildrenCount","EVENT_ALL_CHILDREN_COUNT_CHANGED","master","EVENT_MASTER_CHANGED","updateHasChildren","EVENT_GROUP_CHANGED","estimated","rowHeightEstimated","EVENT_HEIGHT_CHANGED","cellHeight","checkAutoHeightsDebounced","checkAutoHeights","notAllPresent","nonePresent","newRowHeight","autoHeights","getAllDisplayedAutoHeightCols","isColSpanActive","activeColsForRow","getDisplayedLeftColumnsForRow","getDisplayedRightColumnsForRow","getViewportCenterColumnsForRow","getRowHeightForNode","setRowHeight","rowModel","onRowHeightChangedDebounced","EVENT_ROW_INDEX_CHANGED","uiLevel","EVENT_UI_LEVEL_CHANGED","createGlobalRowEvent","rowNodeEventThrottle","dispatchExpanded","rowRenderer","refreshCells","getColumnFromKey","oldValue","getValueFromValueService","dispatchEventForSaveValueReadOnly","valueChanged","valueService","dispatchCellChangedEvent","lockedClosedGroup","leafGroup","isOpenGroup","footer","getGroupIncludeFooter","groupFootersEnabled","groupAlwaysShowAggData","ignoreAggData","groupData","columnId","newAggData","aggData","oldAggData","lookupGridColumn","childrenAfterGroup","isSsrm","isTreeData","isGroupFunc","stub","__hasChildren","EVENT_HAS_CHILDREN_CHANGED","cellChangedEvent","EVENT_CELL_CHANGED","quickFilterAggregateText","hasChildren","depthFirstSearch","atLeastOneSelected","atLeastOneDeSelected","atLeastOneMixed","childState","selectionNotAllowed","selectionNotChanged","clearSelection","rangeSelect","setNodesSelected","nodes","potentialParent","noRegisteredListenersExist","EVENT_MOUSE_ENTER","EVENT_MOUSE_LEAVE","rowGroupColumn","currentRowNode","isCandidate","foundFirstChildPath","nodeToSwapIn","parentRowNode","detail","isFullWidthCellFunc","ignoredProperties","footerNode","ID_PREFIX_TOP_PINNED","ID_PREFIX_BOTTOM_PINNED","VerticalDirection","HorizontalDirection","eCheckbox","setPassive","onSelectionChanged","showOrHideSelect","stateName","groupSelectsFiltered","overrides","shouldHandleIndeterminateState","onClicked","onSelectableChanged","checkboxVisibleIsDynamic","getIsVisible","showOrHideSelectListener","getPreviousValue","extraParams","callbackParams","disableInsteadOfHide","showDisabledCheckboxes","removeHidden","DragAndDropService_1","DragSourceType","dragSourceAndParamsList","dropTargets","ePinnedIcon","eHideIcon","eMoveIcon","eLeftIcon","eRightIcon","eGroupIcon","eAggregateIcon","ePivotIcon","eDropNotAllowedIcon","dragSource","allowTouch","includeTouch","sourceAndParams","eventLastTime","dragItem","getDragItem","lastDropTarget","dragSourceDropTarget","onDragStarted","createGhost","onDragStopped","draggingEvent","createDropTargetEvent","removeGhost","fromNudge","hDirection","getHorizontalDirection","vDirection","getVerticalDirection","positionGhost","validDropTargets","isMouseOnDropTarget","dropTarget","findCurrentDropTarget","leaveLastTargetIfExists","onGridExit","onGridEnter","enterDragTargetIfExists","secondaryContainers","getSecondaryContainers","containers","getContainer","rect","horizontalFit","verticalFit","allContainersFromDropTarget","getAllContainersFromDropTarget","mouseOverTarget","currentContainers","allContainersIntersect","targetContainsSource","isInterestedIn","rootNode","getRootNode","elementStack","elementsFromPoint","onDragEnter","dragEnterEvent","setGhostIcon","getIconName","onDragLeave","dragLeaveEvent","zones","external","externalTargets","zone","eClientX","Left","Right","eClientY","Up","Down","dropZoneTarget","gridApi","ghost","eGhost","ghostRect","ghostHeight","browserWidth","browserHeight","offsetParentSize","defaultView","windowScrollY","pageYOffset","scrollTop","windowScrollX","pageXOffset","eGhostParent","GHOST_TEMPLATE","mouseEventService","stampTopLevelGridCompWithGridInstance","theme","getTheme","eGhostIcon","dragItemName","targetEl","fullscreenElement","ShadowRoot","Document","shake","getDefaultIconName","ICON_NOT_ALLOWED","ICON_PINNED","ICON_MOVE","ICON_LEFT","ICON_RIGHT","ICON_GROUP","ICON_AGGREGATE","ICON_PIVOT","ICON_HIDE","cellValueFn","customGui","suppressVisibilityChange","setDragElement","checkCompatibility","strategy","dragElement","isRowDragMultiRow","selection","getSelectedNodes","managed","treeData","defaultTextValue","RowDrag","dragItemCount","getRowDragText","dragSourceDomDataKey","getDomDataKey","dragAndDropService","neverDisplayed","displayedOptions","shown","isShownSometimes","isRowDrag","isCustomGui","onSuppressRowDrag","workOutVisibility","setDisplayedOrVisible","gridBodyCon","rowDragFeature","getRowDragFeature","shouldPreventRowMove","suppressRowDrag","hasExternalDropZones","eExpanded","eContracted","compClass","topLevelFooter","isTopLevelFooter","embeddedRowMismatch","isEmbeddedRowMismatch","setupShowingValueForOpenedParent","findDisplayedGroupNode","showingFooterTotal","isAlwaysShowing","showOpenGroupValue","leafWithValues","canSkipRenderingCell","showingValueForOpenedParent","addExpandAndContract","addFullWidthRowDraggerIfNeeded","addCheckboxIfNeeded","addValueElement","setupIndent","refreshAriaExpanded","colDefAriaRole","cellAriaRole","columnColDefAriaRole","expandListener","eParentOfValue","doingFullWidth","rowGroupCols","firstRowGroupCol","fullWidth","pinnedLeftCell","pinnedRightCell","bodyCell","isPinningLeft","isRowGroupDisplayed","displayedGroupNode","showingGroupNode","keyOfGroupingColumn","configuredToShowThisGroupLevel","valPresent","addFooterValue","addGroupValue","addChildCount","paramsAdjusted","adjustParamsWithDetailsFromRelatedColumn","innerCompDetails","getInnerCompDetails","valueWhenNoRenderer","isGroupColForNode","setInnerRenderer","relatedColumn","notFullWidth","showingThisRowGroup","footerValueGetter","footerValue","paramsClone","getFullWidthGroupRowInnerCellRenderer","getInnerRendererDetails","isGroupRowRenderer","details","relatedColDef","relatedCompDetails","getCellRendererDetails","suppressCount","updateChildCount","showingGroupForThisNode","isShowRowGroupForThisRow","showCount","countString","setChildCount","thisColumnIsInterested","eExpandedIcon","eContractedIcon","eGroupCell","eGridCell","isDoubleClickEdit","isCellEditable","suppressDoubleClickExpand","onCellDblClicked","onExpandClicked","showExpandAndContractIcons","expandableChangedListener","onRowNodeIsExpandableChanged","onExpandOrContract","nextExpandState","sticky","scrollToStickyNode","gridBodyCtrl","scrollFeature","getScrollFeature","setVerticalScrollPosition","stickyRowTop","reducedLeafNode","expandableGroup","displayingForOneColumnOnly","showing","displayedGroup","setExpandedDisplayed","setContractedDisplayed","pivotModeAndLeafGroup","addExpandableCss","isTotalFooterNode","setIndent","suppressPadding","fullWithRow","manyDimensionThisColumn","paddingCount","indentClass","rowDragComp","paramsCheckbox","checkbox","checkboxNeeded","isUserWantsSelected","cbSelectionComponent","setCheckboxVisible","suppressEnterExpand","cellEditable","targetIsExpandIcon","compProxy","valueToDisplay","setRenderDetails","eChildCount","ctrl","getCellAriaRole","componentPromise","destroyComp","innerCellRenderer","failedLoad","setupFailed","setupLoading","eLoadingText","eLoadingIcon","DEFAULT_LOADING_OVERLAY_TEMPLATE","localisedTemplate","DEFAULT_NO_ROWS_TEMPLATE","setMax","setMin","setPrecision","setStep","preventStepping","showStepperButtons","getDataTypeService","formatDate","parseDate","getDateParserFunction","getDateFormatterFunction","updateCheckbox","onCheckboxChanged","eventStarted","setDataValue","eventStopped","focusIn","agGridDefaults","agDateInput","agColumnHeader","agColumnGroupHeader","agSortIndicator","agTextColumnFloatingFilter","agNumberColumnFloatingFilter","agDateColumnFloatingFilter","agReadOnlyFloatingFilter","agAnimateShowChangeCellRenderer","agAnimateSlideCellRenderer","agGroupCellRenderer","agGroupRowRenderer","agLoadingCellRenderer","agCheckboxCellRenderer","agCellEditor","agTextCellEditor","agNumberCellEditor","agDateCellEditor","agDateStringCellEditor","agSelectCellEditor","agLargeTextCellEditor","agCheckboxCellEditor","agTextColumnFilter","agNumberColumnFilter","agDateColumnFilter","agLoadingOverlay","agNoRowsOverlay","agTooltipComponent","enterpriseAgDefaultCompsModule","agSetColumnFilter","SetFilterModule","agSetColumnFloatingFilter","agMultiColumnFilter","MultiFilterModule","agMultiColumnFloatingFilter","agGroupColumnFilter","RowGroupingModule","agGroupColumnFloatingFilter","agRichSelect","RichSelectModule","agRichSelectCellEditor","agDetailCellRenderer","MasterDetailModule","agSparklineCellRenderer","SparklinesModule","jsComps","registerJsComponent","propertyName","createResult","componentFromFramework","registeredViaFrameworkComp","frameworkComponent","jsComponent","isFwkComp","isFrameworkComponent","defaultComponent","moduleForComponent","__assertRegistered","getGridId","warnAboutMissingComponent","validComponents","suggestions","getDocLink","DateComponent","HeaderComponent","HeaderGroupComponent","CellRendererComponent","CellEditorComponent","InnerRendererComponent","FilterComponent","FloatingFilterComponent","ToolPanelComponent","StatusPanelComponent","FullWidth","FullWidthLoading","FullWidthGroup","FullWidthDetail","FloatingFilterMapper","filterToFloatingFilterMapping","multi","getCompDetails","defaultFilter","defaultFloatingFilter","toolPanelDef","defObject","defaultName","mandatory","compName","jsComp","fwComp","paramsFromSelector","popupFromSelector","popupPositionFromSelector","getCompKeys","lookupFromRegistry","userComponentRegistry","retrieve","agComponentUtils","doesImplementIComponent","adaptFunction","paramsMerged","mergeParamsWithApplicationProvidedParams","defObjectAny","selectorFunc","selectorRes","assignComp","providedJsComp","popupPosition","instance","thisComponentConfig","componentMetadataProvider","frameworkComponentWrapper","wrap","mandatoryMethodList","optionalMethodList","deferredInit","initComponent","paramsFromGrid","userParams","userParamsFromFunc","getFromDefault","defaultFloatingFilterType","getFloatingFilterType","usingDefaultFilter","ColDefUtil","ExcelFactoryMode","ColDefPropertyMap","toolPanelClass","cellDataType","headerTooltip","defaultAggFunc","chartDataType","cellEditorPopupPosition","headerGroupComponent","headerGroupComponentParams","cellStyle","cellEditor","cellEditorParams","headerComponent","headerComponentParams","floatingFilterComponent","floatingFilterComponentParams","tooltipComponentParams","columnsMenuParams","sortingOrder","allowedAggFuncs","cellClassRules","suppressCellFlash","suppressColumnsToolPanel","suppressFiltersToolPanel","headerCheckboxSelectionFilteredOnly","headerCheckboxSelectionCurrentPageOnly","suppressMenu","suppressMovable","lockVisible","lockPinned","enableCellChangeFlash","wrapText","singleClickEdit","floatingFilter","cellEditorPopup","wrapHeaderText","dndSourceOnRowDrag","valueSetter","keyCreator","valueParser","pivotComparator","getQuickFilterText","onCellValueChanged","onCellClicked","onCellDoubleClicked","onCellContextMenu","cellEditorSelector","useValueFormatterForExport","useValueParserForImport","dragEndFunctions","dragSources","removeListener","dragSourceAndListener","mouseDownListener","touchEnabled","touchStartListener","mouseListener","stopPropagationForTouch","startTarget","currentDragParams","touchLastTime","touchMoveEvent","touchEndEvent","onTouchUp","documentTouchMove","addTemporaryEvents","onCommonMove","skipMouseEvent","_alreadyProcessedByDragService","shouldPreventMouseEvent","mouseStartEvent","mouseMoveEvent","mouseUpEvent","onMouseUp","contextEvent","currentEvent","startEvent","requiredPixelDiff","isEventNearStartEvent","getFirstActiveTouch","getSelection","removeAllRanges","isEnableCellTextSelect","isMouseMove","isEventFromThisGrid","isOverFormFieldElement","tagName","changedTouches","onUpCommon","eventOrTouch","AutoScrollService","tickingInterval","onScrollCallback","scrollContainer","scrollHorizontally","scrollAxis","scrollVertically","scrollByTick","getVerticalPosition","setVerticalPosition","getHorizontalPosition","setHorizontalPosition","shouldSkipVerticalScroll","shouldSkipHorizontalScroll","forceSkipVerticalScroll","skipVerticalScroll","scrollTick","tickLeft","tickRight","tickUp","tickDown","ensureTickingStarted","ensureCleared","doTick","tickCount","tickAmount","vScrollPosition","hScrollPosition","LIST_ITEM_HOVERED","virtualList","currentDragValue","lastHoveredListItem","listItemDragStartEvent","listItemDragStart","listItemDragEndEvent","listItemDragEnd","createDropTarget","createAutoScrollService","getCurrentDragValue","moveBlocked","isMoveBlocked","dragSourceType","addDropTarget","virtualListGui","autoScrollService","hoveredListItem","getListDragItem","getComponentAt","clearHoveredItems","getRowHeight","getScrollTop","maxLen","getNumRows","normalizedRowIndex","moveItem","RowHighlightPosition","unwrapUserComp","compAsAny","isProxy","getFrameworkComponentInstance","detailGridInfoMap","destroyCalled","getType","clientSideRowModel","infiniteRowModel","serverSideRowModel","whenReady","alignedGridsService","gridInfo","CsvExportModule","csvCreator","getDataAsCsv","exportDataAsCsv","method","ExcelExportModule","excelCreator","getFactoryMode","MULTI_SHEET","assertNotExcelMultiSheet","getDataAsExcel","exportDataAsExcel","setFactoryMode","getSheetDataForExcel","getMultipleSheetsAsExcel","exportMultipleSheetsAsExcel","eGrid","ariaProperty","apiMethod","requiredRowModels","pinnedRowModel","getPinnedTopRowCount","getPinnedBottomRowCount","getPinnedTopRow","getPinnedBottomRow","getVScrollPosition","getHScrollPosition","flashCells","redrawRows","isAnyFilterPresent","isColumnFilterPresent","isAggregateFilterPresent","isQuickFilterPresent","expandParents","expansionService","setRowNodeExpanded","logMissingRowModel","onGroupExpandedOrCollapsed","refreshModel","isQueueEmpty","getRowNode","gos","getRowHeightAsNumber","headerHeight","expandAll","addRenderedRowListener","AdvancedFilterModule","getAdvancedFilterModel","setAdvancedFilterModel","showAdvancedFilterBuilder","allNodesValid","nodesAsRowNode","selectAllRowNodes","deselectAllRowNodes","justFiltered","getSelectionState","setSelectionState","justCurrentPage","overlayService","showLoadingOverlay","showNoRowsOverlay","hideOverlay","getSelectedRows","getBestCostNodeSelection","getRenderedNodes","ensureColumnVisible","ensureIndexVisible","nodeSelector","ensureNodeVisible","forEachLeafNode","includeFooterNodes","forEachNode","forEachNodeAfterFilter","forEachNodeAfterFilterAndSort","getFilterInstance","destroyFilter","StatusBarModule","statusBarService","getStatusPanel","getColumnDefs","setFilterModel","getFilterModel","getFocusedCell","clearFocusedCell","setFocusedCell","forceBrowserFocus","addRowDropZone","activeDropTarget","findExternalZone","removeDropTarget","getRowDropZone","SideBarModule","assertSideBarLoaded","sideBarService","getSideBarComp","isDisplayed","show","setSideBarPosition","openToolPanel","openedItem","isToolPanelShowing","getToolPanelInstance","getDef","isAutoRowHeightActive","resetRowHeights","maxRowFound","setRowCount","onRowHeightChanged","apiEventService","removeGlobalListener","getState","gridCtrl","getGridCtrl","destroyGridUi","resetQuickFilterCache","rangeService","getCellRanges","RangeSelectionModule","addCellRange","removeAllCellRanges","undoRedoService","undo","redo","getCurrentUndoStackSize","getCurrentRedoStackSize","GridChartsModule","chartService","getChartModels","chartId","getChartRef","getChartImageDataURL","downloadChart","openChartToolPanel","closeChartToolPanel","createRangeChart","createPivotChart","createCrossFilterChart","updateChart","chartModel","chartContainer","restoreChart","ClipboardModule","clipboardService","copyToClipboard","cutToClipboard","copySelectedRowsToClipboard","copySelectedRangeToClipboard","copyRangeDown","pasteFromClipboard","buttonElement","showMenuAfterMouseEvent","contextMenuFactory","hideActiveMenu","navigationService","tabToNextCell","getCellRendererInstances","unwrapped","getCellEditorInstances","getEditingCells","cellPosition","notPinned","cell","getCellByPosition","isCellFocused","startRowOrCellEdit","addAggFunc","addAggFuncs","clear","transaction","serverSideTransactionManager","applyTransaction","applyTransactionAsync","startRow","route","applyRowData","successParams","retryLoads","flushAsyncTransactions","rowDataTransaction","updateRowData","batchUpdateRowData","refreshCache","purgeCache","refreshStore","getStoreState","getRowCount","isLastRowIndexKnown","rowNodeBlockLoader","getBlockState","getFirstVirtualRenderedRow","getLastVirtualRenderedRow","getRow","paginationProxy","isLastPageFound","getPageSize","getCurrentPage","getTotalPages","getMasterRowCount","goToNextPage","goToPreviousPage","goToFirstPage","goToLastPage","page","goToPage","paramsOrGridWidth","getColumnGroup","getDisplayNameForColumnGroup","getAllPrimaryColumns","resetColumnState","getColumnGroupState","resetColumnGroupState","isPinningRight","getDisplayedColBefore","setColumnPinned","getViewportColumns","moveColumnByIndex","moveRowGroupColumn","setColumnAggFunc","setColumnWidths","getSecondaryPivotColumn","setValueColumns","getValueColumns","removeValueColumn","addValueColumn","setRowGroupColumns","removeRowGroupColumn","addRowGroupColumn","setPivotColumns","removePivotColumn","addPivotColumn","getPivotColumns","getDisplayedTreeLeft","getDisplayedTreeCentre","getDisplayedTreeRight","autoSizeColumn","setSecondaryColumns","getSecondaryColumns","stateService","updateGridOptions","charAt","setGridOption","deprecatedUpdateGridOption","ePopupParent","dataTypeDefinitions","enable","enabled","advancedFilterParent","newFilter","quickFilterText","quickFilterParser","quickFilterMatcher","columnTypes","newTreeData","datasource","blockSize","viewportDatasource","rowData","domLayout","animateRows","isExternalFilterPresentFunc","doesExternalFilterPassFunc","navigateToNextCellFunc","tabToNextCellFunc","tabToNextHeaderFunc","navigateToNextHeaderFunc","rowGroupPanelShow","getGroupRowAggFunc","getBusinessKeyForNodeFunc","getChildCountFunc","processRowPostCreateFunc","rowClassFunc","isFullWidthRowFunc","isRowMasterFunc","postSortRowsFunc","getDocumentFunc","getContextMenuItemsFunc","getMainMenuItemsFunc","processCellForClipboardFunc","sendToClipboardFunc","processCellFromClipboardFunc","processPivotResultColDefFunc","processPivotResultColGroupDefFunc","postProcessPopupFunc","initialGroupOrderComparatorFunc","getChartToolbarItemsFunc","paginationNumberFormatterFunc","getServerSideGroupLevelParamsFunc","isServerSideGroupOpenByDefaultFunc","isApplyServerSideTransactionFunc","isServerSideGroupFunc","getServerSideGroupKeyFunc","rowStyleFunc","rowHeightFunc","QuickFilterService_1","quickFilter","quickFilterParts","setQuickFilter","onIncludeHiddenColumnsInQuickFilterChanged","parseQuickFilter","setQuickFilterParts","setQuickFilterParserAndMatcher","usingCache","doesRowPassQuickFilterMatcher","doesRowPassQuickFilterCache","doesRowPassQuickFilterNoCache","parsedFilter","EVENT_QUICK_FILTER_CHANGED","hasChanged","filterPart","getAllColumnsForQuickFilter","getQuickFilterTextForColumn","checkGenerateQuickFilterAggregateText","getQuickFilterAggregateText","stringParts","QUICK_FILTER_SEPARATOR","allColumnFilters","allColumnListeners","activeAggregateFilters","activeColumnFilters","processingFilterChange","filterModelUpdateQueue","advancedFilterModelUpdateQueue","onColumnsChanged","refreshFiltersForAggregations","updateAdvancedFilterColumns","onNewRowsLoaded","externalFilterPresent","isExternalFilterPresentCallback","updateAggFiltering","onAdvancedFilterEnabledChanged","processFilterModelUpdateQueue","quickFilterService","isFilterPresent","doesFilterPass","isAdvancedFilterEnabled","warnAdvancedFilters","isPendingInference","allPromises","modelKeys","filterWrapper","setModelOnFilterWrapper","filterPromise","isFilterAllowed","getOrCreateFilterWrapper","all","resolveNow","promiseFilter","isExternalFilterPresent","isAdvancedFilterPresent","advancedFilterService","disposeFilterWrapper","isEnabled","isHeaderActive","filterToSkip","doColumnFiltersPass","groupFilterEnabled","getGroupAggFiltering","isAggFilter","isSecondary","isShowingPrimaryColumns","filterComp","setFilterActive","targetAggregates","targetedFilters","targetedData","isAggFiltering","isRefreshInProgress","updateDependantFilters","updateActiveFilters","updateFilterFlagInColumns","onAnyFilterChanged","aggFiltering","doesRowPassFilter","filterInstanceToSkip","isAggregateQuickFilterPresent","doesRowPassQuickFilter","doAggregateFiltersPass","isNonAggregateQuickFilterPresent","doesExternalFilterPass","filterColumn","columnToUse","createIfDoesNotExist","cachedFilter","putIntoGui","createFilterWrapper","setColumnFilterWrapper","getDefaultFilter","createFilterParams","filterModifiedCallbackFactory","filterChangedCallbackFactory","doesRowPassOtherFilter","doesRowPassOtherFilters","getFilterDetails","createValueGetter","createGetValue","compiledElement","guiPromise","createFilterInstance","eFilterGui","guiFromFilter","wrapper","disposeColumnListener","groupColumns","getGroupAutoColumns","groupColumn","showParentFilter","finalFilterParams","getDefaultFloatingFilterType","getDefaultFloatingFilter","filterComponent","getFilterComponent","getCurrentFloatingFilterParentModel","suppressFilterButton","getFloatingFilterCompDetails","columnListener","callOnFilterChangedOutsideRenderCycle","areFilterCompsDifferent","newFilterParams","shouldRefreshFilter","checkDestroyFilter","oldCompDetails","newCompDetails","oldComponentClass","newComponentClass","isSameComponentClass","render","getCtrl","toggleFilterBuilder","updateValidity","getFilterInstanceImpl","eCompToInsertBefore","setupHeaderComp","isAdvancedFilterHeaderActive","cssClassName","on","addOrRemoveBodyCssClass","eFloatingFilterBody","setButtonWrapperDisplayed","eButtonWrapper","setCompDetails","getFloatingFilterComp","compPromise","setMenuIcon","eButtonShowMainFilter","setComp","destroyFloatingFilterComp","afterCompCreated","floatingFilterComp","LayoutCssClasses","view","updateLayoutClasses","getDomLayout","print","AUTO_HEIGHT","PRINT","NORMAL","validLayouts","ScrollDirection","ScrollSource","eBodyViewport","lastScrollSource","nextScrollTop","resetLastHScrollDebounced","Horizontal","resetLastVScrollDebounced","Vertical","onDisplayedColumnsWidthChanged","centerRowContainerCtrl","addScrollListener","fakeHScroll","getFakeHScrollComp","fakeVScroll","getFakeVScrollComp","getViewportElement","onHScroll","onFakeHScroll","isDebounce","onVScroll","onFakeVScroll","horizontallyScrollHeaderCenterAndFloatingCenter","notYetInitialised","getCenterViewportScrollLeft","offset","topCenterContainer","getTopCenterRowContainerCtrl","stickyTopCenterContainer","getStickyTopCenterRowContainerCtrl","bottomCenterContainer","getBottomCenterRowContainerCtrl","centerHeaderContainer","getHeaderRowContainerCtrl","setHorizontalScroll","setContainerTranslateX","centerViewport","isCenterViewportLastHorizontal","Container","setScrollPosition","isControllingScroll","FakeContainer","onHScrollCommon","centerContainerViewport","shouldBlockScrollUpdate","newScrollLeft","getScrollPosition","doHorizontalScroll","onVScrollCommon","setScrollTop","scrollGridIfNeeded","schedule","fakeScrollLeft","fireScrollEvent","onHorizontalViewportChanged","bodyScrollEvent","scrollTimer","bodyScrollEndEvent","scrollTo","touchOnly","shouldBlockVerticalScroll","shouldBlockHorizontalScroll","getCenterWidth","frameNeeded","redrawRowsAfterScroll","fromAlignedGridsService","minScrollLeft","maxScrollLeft","pixels","oldScrollPosition","setHorizontalScrollPosition","indexToSelect","isPaging","paginationPanelEnabled","goToPageWithIndex","stickyTopHeight","getStickyTopHeight","rowGotShiftedDuringOperation","startingRowTop","startingRowHeight","paginationOffset","getPixelOffset","rowTopPixel","rowBottomPixel","heightOffset","heightScaler","getDivStretchOffset","vScrollTop","vScrollBottom","viewportHeight","pxTop","getScrollPositionForPixel","pxBottom","pxMiddle","rowAboveViewport","rowBelowViewport","newScrollPosition","redraw","isPinned","isColumnDisplayed","newHorizontalScroll","getPositionedHorizontalScroll","setCenterViewportScrollLeft","columnBeforeStart","columnAfterEnd","isColumnOutsideViewport","viewportTooSmallForColumn","alignColToStart","alignColToEnd","isMiddle","colLeft","colMiddle","colRight","getColumnBounds","viewportStart","end","viewportEnd","getViewportBounds","getBodyContainerWidth","multiplier","colLeftPixel","colRightPixel","colMidPixel","viewportStartPixel","viewportEndPixel","isMultiRowDrag","isGridSorted","isGridFiltered","refreshStatus","onRowGroupChanged","getBodyViewportElement","lastDraggingEvent","isSortActive","rowGroups","managedDrag","isFromThisGrid","selectedNodes","getRowIndexNumber","currentNode","getRowNodes","dispatchGridEvent","setDragging","onEnterOrDragging","gridGui","getNormalisedPosition","doManagedDrag","isDropZoneWithinThisGrid","highlightRowAtPixel","moveRows","getRowIndexString","lastHighlightedRowNode","getLastHighlightedRowNode","isBelow","Below","increment","addIndex","getRowIndexAtPixel","getHighlightPosition","Above","clearRowHighlight","rowWasMoved","ensureRowsAtPixel","processedParams","fromGrid","draggingToRowDragEvent","yNormalised","mouseIsPastLastRow","getCurrentPageHeight","overNode","vDirectionString","overIndex","stopDragging","moveRowAndClearHighlight","RowAnimationCssClasses","CSS_CLASS_FORCE_VERTICAL_SCROLL","CSS_CLASS_CELL_SELECTABLE","CSS_CLASS_COLUMN_MOVING","bodyScrollFeature","eGridBody","eTop","eBottom","eStickyTop","setCellTextSelection","addRowDragListener","setupRowAnimationCssClass","addEventListeners","addFocusListeners","onGridColumnsChanged","addBodyViewportListener","setFloatingHeights","disableBrowserDragging","addStopEditingWhenGridLosesFocus","setupAdvancedFilterHeaderComp","registerGridBodyCtrl","onScrollVisibilityChanged","onPinnedRowDataChanged","onHeaderHeightChanged","isFocusedElementNested","gridContainRelatedTarget","isNestedRelatedTarget","isNestedTarget","setColumnMovingCss","setCellSelectableCss","scrollVisibleService","isVerticalScrollShowing","setVerticalScrollPaddingVisible","setStickyTopWidth","pad","requestAnimationFrame","setBodyViewportWidth","setColumnCount","HTMLImageElement","focusOutListener","elementWithFocus","clickInsideGrid","viewports","viewport","isElementInThisGrid","getActivePopups","isElementWithinCustomPopup","headerCount","headerNavigationService","getHeaderRowCount","registerBodyViewportResizeListener","overflowY","setPinnedTopBottomOverflowY","allowVerticalScroll","setAlwaysVerticalScrollClass","isAnimateRows","rowContainerHeightService","isStretching","animateRowsCssClass","ANIMATION_ON","ANIMATION_OFF","setRowAnimationCssOnBodyViewport","onBodyViewportContextMenu","mockContextMenuForIPad","onBodyViewportWheel","onStickyTopWheel","addFullWidthContainerWheelListener","fullWidthContainer","eCenterColsViewport","onFullWidthContainerWheel","deltaX","deltaY","scrollBy","getCenterRowContainerCtrl","onContextMenu","longTapListener","hasAnchoredPopup","offsetY","floatingTopHeight","getPinnedTopTotalHeight","floatingBottomHeight","getPinnedBottomTotalHeight","setTopHeight","setBottomHeight","setTopDisplay","setBottomDisplay","setStickyTopOffsetTop","setStickyTopHeight","vScrollVisible","headerCtrl","getGridHeaderCtrl","pinnedTopHeight","setStickyTopTop","nextTimeout","removeScrollWidth","scrollWidthToRemove","bodyViewportWidth","availableWidth","SelectionHandleType","CellRangeType","CSS_CELL_RANGE_SELECTED","CSS_CELL_RANGE_CHART","CSS_CELL_RANGE_SINGLE_CELL","CSS_CELL_RANGE_CHART_CATEGORY","CSS_CELL_RANGE_HANDLE","CSS_CELL_RANGE_TOP","CSS_CELL_RANGE_RIGHT","CSS_CELL_RANGE_BOTTOM","CSS_CELL_RANGE_LEFT","cellCtrl","cellComp","onRangeSelectionChanged","rangeCount","getCellRangeCount","getCellPosition","hasChartRange","getHasChartRange","isSingleCell","updateRangeBorders","refreshHandle","rangeBorders","getRangeBorders","isMoreThanOneCell","cellRanges","range","DIMENSION","VALUE","thisCol","leftCol","rightCol","ranges","isCellInSpecificRange","getRangeStartRow","endRow","getRangeEndRow","rowPositionUtils","sameRow","shouldHaveSelectionHandle","selectionHandle","addSelectionHandle","rangesLen","cellRange","isFillHandleAvailable","isSuppressFillHandle","isRangeHandleAvailable","handleIsAvailable","isEditing","hasCategoryRange","isCategoryCell","isContiguousRange","isBottomRightCell","cellRangeType","selectionHandleFill","FILL","RANGE","selectionHandleFactory","createSelectionHandle","setupColSpan","setupRowSpan","getRowSpan","onNewColumnsLoaded","onLeftChanged","onWidthChanged","applyRowSpan","colsSpanning","getColSpanningList","onDisplayColumnsChanged","getCellWidth","modifyLeftForPrintLayout","getCellLeft","mostLeftCol","leftPosition","isPrintLayout","getDisplayedColumnsLeftWidth","force","singleRowHeight","totalRowHeight","zIndex","staticClasses","applyUserStyles","applyCellClassRules","applyClassesFromColDef","cellClassParams","stylingService","processClassRules","cellStyleParams","cellStyleFunc","setUserStyles","getStaticCellClasses","setupTooltip","tooltip","browserTooltips","updateTooltipText","setBrowserTooltip","createTooltipFeatureIfNeeded","getTooltipValue","genericTooltipFeature","getTooltipShowDelayOverride","getTooltipHideDelayOverride","getLocation","getRowIndex","getTooltipText","getValueFormatted","hideTooltipCallback","Beans","onMouseOut","onMouseOver","isDoubleClickOnIPad","isMultiKey","intersectLastRange","cellClickedEvent","editOnSingleClick","nowMillis","lastIPadMouseClickEvent","cellDoubleClickedEvent","editOnDoubleClick","isRightClickInExistingRange","focusCell","focusedCellPosition","focusedRowCtrl","getRowByPosition","focusedCellCtrl","getCellCtrl","preventScrollOnBrowserFocus","containsWidget","thisCell","extendLatestRangeToCell","setRangeToCell","cellInRange","isCellInAnyRange","isRightClick","mouseStayingInsideCell","cellMouseOutEvent","clearMouseOver","cellMouseOverEvent","setMouseOver","cellContainsTarget","cellContainsRelatedTarget","rowCtrl","onEnterKeyDown","onF2KeyDown","onEscapeKeyDown","onBackspaceOrDeleteKeyDown","onNavigationKeyDown","isRangeSelectionEnabled","onShiftRangeSelect","navigateToNextCell","endCell","extendLatestRangeInDirection","ensureCellVisible","clearCellRangeCellValues","dispatchWrapperEvents","wrapperEventSource","stopEditingAndFocus","stopRowOrCellEdit","eventOnChildComponent","onSpaceKeyDown","isRowSelection","currentSelection","newSelection","updatedCount","eCell","dragEvent","providedOnRowDrag","dataTransfer","setDragImage","defaultOnRowDrag","jsonData","setData","isDndSource","CSS_FIRST_COLUMN","CSS_LAST_COLUMN","getColumnClassesFromCollDef","isColumnAtEdge","classesOrFunc","classToUse","getClassParams","CSS_CELL","CSS_AUTO_HEIGHT","CSS_NORMAL_HEIGHT","CSS_CELL_FOCUS","CSS_CELL_FIRST_RIGHT_PINNED","CSS_CELL_LAST_LEFT_PINNED","CSS_CELL_NOT_INLINE_EDITING","CSS_COLUMN_HOVER","CSS_CELL_WRAP_TEXT","cellRangeFeature","cellPositionFeature","cellCustomStyleFeature","cellMouseListenerFeature","cellKeyboardListenerFeature","suppressRefreshCell","onCellCompAttachedFuncs","colIdSanitised","isCellRenderer","createCellPosition","addFeatures","updateAndFormatValue","isTooltipEnabled","enableTooltipFeature","disableTooltipFeature","rangeSelectionEnabled","isTooltipFieldContainsDots","tooltipCtrl","eCellWrapper","printLayout","startEditing","addDomData","onCellFocused","focusEventToRestore","applyStaticCssClasses","setWrapText","onFirstRightPinnedChanged","onLastLeftPinnedChanged","onColumnHover","setupControlComps","setupAutoHeight","refreshFirstAndLastStyles","refreshAriaColIndex","showValue","eParentCell","minRowHeight","measureHeight","timesCalled","extraHeight","wrapperHeight","doc","notYetInDom","possiblyNoContentYet","setRowAutoHeight","destroyResizeObserver","includeSelection","includeRowDrag","includeDndSource","forceNewCellRendererInstance","getValueToDisplay","createCellRendererParams","isIncludeControl","setIncludeSelection","setIncludeDndSource","setIncludeRowDrag","forceWrapper","rowNodePinned","isFunc","selectionChanged","rowDragChanged","dndSourceChanged","editorParams","createCellEditorParams","getCellEditorDetails","setEditing","setEditDetails","stopRowEditing","noValueResult","newValueExists","getCellEditor","userWantsToCancel","isCancelAfterEnd","takeValueFromCellEditor","saveNewValue","refreshCell","forceRefresh","suppressFlash","dispatchEditingStoppedEvent","editingStoppedEvent","getParentOfValue","registerRowDragger","rowDraggerElement","valueParserService","focusOut","eventImpactsThisCell","refreshShouldDestroy","noValueProvided","isCellCompReady","valuesDifferent","dataNeedsUpdating","flashCell","refreshToolTip","suppressNavigateAfterEdit","navigateAfterEdit","enterNavigatesVerticallyAfterEdit","delays","flashDelay","fadeDelay","animateCell","cssName","fullName","animationFullName","transition","cellId","cellPositionUtils","createId","shouldFlash","cells","callValueFormatter","compareValues","oldValueFormatted","valuesAreEqual","setDomData","DOM_DATA_KEY_CELL_CTRL","domEvent","processCharacter","onMouseEvent","colIdx","getAriaColumnIndex","isSuppressNavigable","htmlElement","startRowEditing","updateRangeBordersIfRangeCount","isFirstRightPinned","isLastLeftPinned","cellFocused","fullRowEdit","refreshOrDestroyCell","cellContextMenuEvent","getCellRenderer","dndSourceComp","customElement","customRowDragComp","newComp","createRowDragComp","pagination","rowDragManaged","clientSideRowModelActive","RowType","animateIn","useAnimationFrameForCreate","allRowGuis","centerCellCtrls","leftCellCtrls","rightCellCtrls","slideInAnimation","fadeInAnimation","rowDragComps","lastMouseDownOnDragger","emptyStyle","updateColumnListsPending","rowId","businessKeySanitised","paginationPage","initRowBusinessKey","rowFocused","isRowFocused","rowLevel","rowCssClassCalculator","calculateRowLevel","setRowType","setAnimateFlags","rowStyles","processStylesFromGridOptions","isFullWidth","addListeners","businessKeyForNodeFunc","updateRowBusinessKey","businessKey","rowComp","RowContainerType","leftGui","rightGui","FULL_WIDTH","fullWidthGui","centerGui","initialiseRowComp","rowType","dispatchFirstDataRenderedEvent","rowGui","CENTER","cached","rg","display","listenOnDomOrder","wasAutoRowHeightEverActive","updateRowIndexes","setFocusedClasses","setStylesFromGridOptions","onRowSelected","updateColumnLists","initialRowClasses","getInitialRowClasses","executeSlideAndFadeAnimations","setRowCompRowId","setRowCompRowBusinessKey","DOM_DATA_KEY_ROW_CTRL","createTask","addHoverFunctionality","setupFullWidth","addRowDraggerToRow","addDestroyTask","executeProcessRowPostCreateFunc","setRowBusinessKey","setRowId","shouldSlide","onTopChanged","shouldFade","rowDragBean","getPinnedForContainer","createFullWidthParams","getFullWidthDetailCellRendererDetails","getFullWidthGroupCellRendererDetails","getFullWidthLoadingCellRendererDetails","getFullWidthCellRendererDetails","showFullWidth","getFullWidthCellRenderer","areAllContainersReady","eRow","ePinnedLeftRow","ePinnedRightRow","isLeftReady","isCenterReady","isRightReady","isStub","isFullWidthCell","isDetailCell","isGroupRow","isFullWidthGroup","Normal","useFlushSync","noAnimation","updateColumnListsImpl","prev","addCell","colInstanceId","prevCellCtrl","cellInResult","keepCell","isCellEligibleToBeRemoved","createAllCellCtrls","setCellCtrls","cellControls","getCellCtrlsForContainer","exhaustiveCheck","createCellCtrls","centerCols","leftCols","rightCols","nextContainerPinned","REMOVE_CELL","KEEP_CELL","mightWantToKeepCell","cellStillDisplayed","isEnsureDomOrder","setDomOrder","getDomOrder","isSticky","oldRowTopExists","pinningLeft","pinningRight","editingRow","tryRefresh","refreshSucceeded","fullWidthSuccess","centerSuccess","leftSuccess","rightSuccess","allFullWidthRowsRefreshed","onRowIndexChanged","updateExpandedCss","onRowNodeDataChanged","onRowNodeCellChanged","onRowNodeHighlightChanged","onRowNodeDraggingChanged","onUiLevelChanged","onPaginationPixelOffsetChanged","onDisplayedColumnsChanged","onVirtualColumnsChanged","onCellFocusCleared","onPaginationChanged","onModelUpdated","onColumnMoved","useRowDragEntireRow","addListenersForCellComps","getAllCellCtrls","onCellChanged","fullWidthChanged","redrawRow","refreshFullWidth","postProcessCss","postProcessClassesFromGridOptions","postProcessRowClassRules","postProcessRowDragging","aboveOn","belowOn","currentFullWidthComp","currentFullWidthContainer","isFullWidthContainerFocused","lastFocusedCell","nextEl","isFocused","removeCellCtrl","cellCtrlToRemove","onRowDblClick","onRowClick","onRowMouseDown","createRowEvent","createRowEventWithSource","stop","isShiftKey","groupSelectsChildren","multiSelectOnClick","rowDeselectionWithCtrl","eDetailGui","checkRowSizeFunc","updateRowHeightFunc","resizeObserverDestroyFunc","addFullWidthRowDragging","newLevel","classToAdd","classToRemove","getPageFirstRow","getPageLastRow","refreshFirstAndLastRowStyles","newFirst","isFirstRowOnPage","newLast","isLastRowOnPage","firstRowOnPage","lastRowOnPage","stoppingRowEdit","isRowEdit","fireRowEditEvent","setEditingRow","sourceRenderedCell","atLeastOneEditing","cssClasses","processClassesFromGridOptions","classStr","processRowClassRules","updateStyles","forEachGui","rowContainerType","fadeRowIn","rowIsEven","fullWidthRow","rowStyle","rowStyleFuncResult","createAriaLabel","isDragging","setHovered","minPixel","applyPaginationOffset","maxPixel","defaultRowHeight","getDefaultRowHeight","isHeightFromFunc","isGetRowHeightFunction","heightFromFunc","lineHeight","setupRemoveAnimation","rowStillVisibleJustNotInViewport","roundRowTopToBounds","destroyCellCtrls","ctrls","onCellFocusChanged","currentPage","topPx","isRowPinned","pixelOffset","afterPaginationPixels","skipScaling","afterScalingPixels","getRealPixelPosition","setRowTopStyle","getInitialRowTopShared","setTop","setTransform","rowIndexStr","headerRowCount","ariaRowIndex","addKeyboardListeners","addMouseListeners","processKeyboardEvent","mouseDownEvent","eventNames","processMouseEvent","getRowForEvent","getRenderedCellForEvent","handleContextMenuMouseEvent","rowCon","dispatchCellContextMenuEvent","anchorToElement","getGridBodyElement","getControlsForEventTarget","processCellKeyboardEvent","processFullWidthRowKeyboardEvent","gridProcessingAllowed","wasScrollKey","handlePageScrollingKey","doGridOperations","cellKeyDownEvent","focusedCell","onKeyboardNavigate","onCtrlAndA","onCtrlAndC","onCtrlAndD","onCtrlAndV","onCtrlAndX","onCtrlAndY","onCtrlAndZ","isRowsToRender","isEmptyPinnedTop","isEmptyPinnedBottom","isEmpty","floatingStart","floatingEnd","rowEnd","getPinnedBottomRowData","setCellRange","rowStartIndex","rowStartPinned","rowEndIndex","rowEndPinned","columnStart","columnEnd","centerContainerCtrl","listenForResize","onScrollbarWidthChanged","checkViewportAndScrolls","onCenterViewportResized","registerViewportResizeListener","isViewportVisible","keepPinnedColumnsNarrowerThanViewport","centerWidth","bodyHeight","columnsToRemove","getPinnedColumnsOverflowingViewport","pinnedRightWidth","pinnedWidthService","getPinnedRightWidth","pinnedLeftWidth","getPinnedLeftWidth","totalPinnedWidth","pinnedLeftColumns","pinnedRightColumns","indexRight","indexLeft","totalWidthRemoved","spaceNecessary","updateScrollVisibleService","checkBodyHeight","checkScrollLeft","updateScrollVisibleServiceImpl","horizontalScrollShowing","verticalScrollShowing","setScrollsVisible","getViewportScrollLeft","setViewportPosition","onPinnedLeftWidthChanged","onPinnedRightWidthChanged","eViewport","onHeightChanged","maxDivHeightScaler","getUiContainerHeight","heightString","enableFeature","disableFeature","isRangeSelection","addSpacer","getDisplayedColumnsRightWidth","totalWidth","relevantWidth","RowContainerName","getRowContainerTypeForName","TOP_CENTER","STICKY_TOP_CENTER","BOTTOM_CENTER","TOP_LEFT","STICKY_TOP_LEFT","BOTTOM_LEFT","TOP_RIGHT","STICKY_TOP_RIGHT","BOTTOM_RIGHT","TOP_FULL_WIDTH","STICKY_TOP_FULL_WIDTH","BOTTOM_FULL_WIDTH","ContainerCssClasses","ViewportCssClasses","EMPTY_CTRLS","isFullWithContainer","containerClass","viewportClass","forContainers","viewportSizeFeature","registerCenterRowContainerCtrl","registerLeftRowContainerCtrl","registerRightRowContainerCtrl","registerTopCenterRowContainerCtrl","registerTopLeftRowContainerCon","registerTopRightRowContainerCtrl","registerStickyTopCenterRowContainerCtrl","registerStickyTopLeftRowContainerCon","registerStickyTopRightRowContainerCtrl","registerBottomCenterRowContainerCtrl","registerBottomLeftRowContainerCtrl","registerBottomRightRowContainerCtrl","names","addPreventScrollWhileDragging","stopHScrollOnPinnedRows","allTopNoFW","allStickyTopNoFW","allBottomNoFW","allMiddleNoFW","allNoFW","allMiddle","allCenter","allLeft","allRight","pinnedWidthFeature","onPinnedWidthChanged","setContainerWidth","registerWithCtrlsService","onDisplayedRowsChanged","allStickyContainers","isStickContainer","resetScrollLeft","unsubscribeFromResize","isAlwaysShowHorizontalScroll","amount","isContainerVisible","embedFullWidthRows","embedFW","doesRowMatch","rowsThisContainer","getRowCtrls","setRowCtrls","getTopRowCtrls","getStickyTopRowCtrls","getBottomRowCtrls","getCentreRowCtrls","GRID_BODY_TEMPLATE","animate","classLists","eBody","ct","bodyViewportClassList","updateImpl","centerRowCtrl","atLeastOneDifferent","MouseEventService_1","gridInstanceId","gridInstanceSequence","eGridDiv","GRID_DOM_KEY","eventFromThisGrid","gridPanelHasScrolls","vRange","hRange","onPageDown","onPageUp","fromFullWidth","alt","rangeServiceShouldHandleShift","currentCell","getCellPositionForEvent","processed","onHomeOrEndKey","onCtrlUpDownLeftRight","handlePageUpDown","navigateParams","scrollIndex","scrollType","scrollColumn","focusIndex","focusColumn","isAsync","gridCell","pixelsInOnePage","getViewportHeight","pagingPixelOffset","currentPageBottomPixel","currentPageBottomRow","navigateToNextPageWithAutoHeight","navigateToNextPage","currentPageTopPixel","currentPageTopRow","up","firstRow","lastRow","rowPixelDiff","nextCellPixel","isRowTallerThanView","navigateTo","getNextFocusIndexForAutoHeight","lastRowIndex","pixelSum","currentIndex","currentCellHeight","cellToFocus","cellNavigationService","getNextCellToFocus","homeKey","columnToSelect","backwards","movedToNextCell","tabToNextCellCommon","getRowPosition","focusNextGridCoreContainer","focusPreviousFromFirstCell","cellOrRow","row","getRowCtrl","moveToNextEditingRow","moveToNextEditingCell","moveToNextCellNotEditing","getFocusedHeader","previousCell","previousPos","nextCell","findNextCellToFocusOn","previousEditable","nextEditable","rowsMatch","setFocusOutOnEditor","pRow","nRow","setFocusInOnEditor","cellPos","tryToFocusFullWidthRow","previousPosition","nextPosition","getLastCellOfColSpan","getNextTabbedCell","previousCellPosition","nextCellPosition","userCell","floating","headerLen","focusHeaderPosition","headerPosition","fromCell","cellIsEditable","lookupRowNodeForCell","allowUserOverride","hitEdgeOfGrid","isValidNavigateCell","normalisedPosition","focusPosition","currentCellFocused","fromBelow","focusEvent","colSpanningList","isGroupStickyEnabled","isGroupRowsSticky","skipScrollToRow","DOM_KEY_POPUP_EDITOR_WRAPPER","addKeyDownListener","rendererVersion","editorVersion","isForceWrapper","refreshWrapper","getColumnIdSanitised","eCellValue","isInlineEditing","cellEditorPopupWrapper","firstRender","controlWrapperChanged","refreshEditStyles","neverRefresh","cellRendererRefreshSuccessful","refreshCellRenderer","destroyRenderer","createCellRendererInstance","insertValueWithoutCellRenderer","createCellEditorInstance","destroyEditor","checkboxSelectionComp","rowDraggingComp","providingControls","usingWrapper","putWrapperIn","takeWrapperOut","usingCellValue","putCellValueIn","takeCellValueOut","templateChanged","removeControls","addControls","createDndSource","createSelectionCheckbox","versionCopy","cellEditorPromise","afterCellEditorCreated","cellEditorAsync","escapedValue","cellRendererGui","hideEditorPopup","cellEditorGui","compClassAndParams","cellRendererClass","useTaskService","displayComponentVersionCopy","createCellRendererFunc","staleTask","afterCellRendererCreated","cellRendererVersion","requestVersion","staleComp","editingCancelledByUserComp","isCancelBeforeStart","cellEditorInPopup","isPopup","addPopupCellEditor","addInCellEditor","setInlineEditingCss","clearParentOfValue","ePopupGui","useModelPopup","positionToUse","getPopupPosition","positionParams","positionCallback","onPopupEditorClosed","destroyEditorAndRenderer","cellComps","getInitialStyle","domOrder","cellCtrls","unsetComp","getInitialTransform","getInitialRowTop","setupDetailRowAutoHeight","setFullWidthRowComp","cellsToRemove","existingCellComp","newCellComp","cellCompsToRemove","destroyCells","elementsInOrder","destroyAllCells","cellsToDestroy","cp","fullWidthRowComponent","fullWidthCellRenderer","detach","templateFactory","getRowContainerCssClasses","centerTemplate","rowComps","setViewportHeight","rowCtrls","oldRows","lastPlacedElement","processRow","existingRowComp","appendRow","oldRowComp","columnsToAggregate","columnsToGroup","columnsToPivot","clearColumnsList","dragColumns","isAnyFunctionActive","totalColumns","isFromHeader","fromEnter","fakeEvent","draggingLeft","draggingRight","allMovingColumns","newCols","movingGroup","isMarryChildren","allMovingColumnsOrdered","sortColumnsLikeGridColumns","validMoves","calculateValidMoves","movingCols","calculateOldIndex","firstValidMove","constrainDirection","potentialMoves","targetOrder","move","order","displayedOrder","fragCount","groupFragCount","gridCols","firstIndex","gapsExist","parents","allDisplayedCols","getDisplayedColumns","allGridCols","movingDisplayedCols","otherDisplayedCols","otherGridCols","displayIndex","widthOfMovingDisplayedCols","leftColumn","numberComparator","displacedCol","firstDisplayIndex","fromKeyboard","getViewport","needToMoveLeft","needToMoveRight","lastMovedInfo","centerContainer","dragCameFromToolPanel","ToolPanel","visibleState","ensureIntervalCleared","allowedCols","xAdjustedForScroll","firstVisiblePixel","lastVisiblePixel","ensureIntervalStarted","mouseX","normaliseX","checkCenterForScrolling","normaliseDirection","attemptMoveColumns","HeaderCell","movingIntervalId","intervalCount","failedMoveAttempts","moveInterval","pixelsToMove","pixelsMoved","columnsThatCanPin","pinType","nudge","eSecondaryContainers","leftRowContainerCtrl","getContainerElement","bottomLeftRowContainerCtrl","topLeftRowContainerCtrl","rightRowContainerCtrl","bottomRightRowContainerCtrl","topRightRowContainerCtrl","bottomCenterRowContainerCtrl","topCenterRowContainerCtrl","moveColumnFeature","bodyDropPivotTarget","currentDropListener","isDropColumnInPivotMode","headerCompVersion","getColumnGroupChild","setUserCompDetails","getUserCompInstance","headerComp","eResize","eHeaderCompWrapper","selectAllGui","getSelectAllGui","headerCompGui","destroyHeaderComp","setDragSource","setResizableDisplayed","headerGroupComp","afterHeaderCompCreated","eHeaderGroupGui","HeaderRowType","headerComps","getHeaderRowClass","getTransform","getAriaRowIndex","setHeaderCtrls","forceOrder","oldComps","createHeaderComp","comps","leftA","leftB","COLUMN_GROUP","FLOATING_FILTER","columnGroupChild","parentRowCtrl","resizeToggleTimeout","resizeMultiplier","resizeFeature","lastFocusEvent","activeEl","onGuiKeyDown","onGuiKeyUp","isLeftOrRight","resizeHeader","toggleColumnResizing","moveHeader","wrapperHasFocus","getWrapperHasFocus","DOM_DATA_KEY_HEADER_CTRL","setLeftFirstTime","suppressMoveAnimation","oldLeftExists","getOldLeft","animateColumnMove","isActive","animateInLeft","colOrGroup","getColumnOrGroup","oldActualLeft","actualLeft","indexColumn","addMouseHoverListeners","iconCreated","setGui","setupActive","setupWidth","setupLeft","setupHover","setupFocus","setupFilterButton","setupUserComp","setupSyncWithFilter","setupUi","setupFilterChangedListener","onColDefChanged","filterExists","floatingFilterExists","eMenuIcon","nextFocusableEl","scrollToColumn","nextFocusableColumn","findNextColumnWithFloatingFilter","getParentRowCtrl","nextCol","focusInto","isRelatedWithin","notFromHeaderWrapper","fromWithinHeader","fromTab","shouldFocusLast","setFocusedHeader","setLeftFeature","userCompDetails","syncWithFilter","onParentModelChanged","destroySyncListener","destroyFilterChangedListener","updateFilterButton","wasActive","becomeActive","compInstance","updateCompDetails","updateFloatingFilterParams","destroyResizeFuncs","canResize","canAutosize","addResize","finishedWithResizeFunc","horizontalResizeService","addResizeBar","eResizeBar","onResizing","autoSizeColListener","removeResize","resize","autoSize","propertyChange","addRefreshFunction","resizeAmount","lastResizeAmount","resizeStartWidth","resizeAmountNormalised","normaliseResizeAmount","resizeWithShiftKey","resizing","dragChange","notPinningLeft","cbSelectAllVisible","processingEventFromCheckbox","cbSelectAll","headerCellCtrl","showOrHideSelectAll","onModelChanged","onCbSelectAll","refreshSelectAllLabel","isCheckboxSelection","checkRightRowModelType","checkSelectionType","updateStateOfCheckbox","allSelected","getSelectAllState","isFilteredOnly","isCurrentPageOnly","ariaStatus","setAriaDescriptionProperty","refreshAriaDescription","feature","isMultiSelect","rowModelMatches","refreshFunctions","userHeaderClasses","ariaDescriptionProperties","updateState","setupMovingCss","setupMenuClass","setupSortableClass","setupWrapTextClass","refreshSpanHeaderHeight","addColumnHoverListener","setupFilterClass","setupClassesFromColDef","addActiveHeaderMouseListeners","setupSelectAll","refreshAria","addResizeAndMoveKeyboardListeners","onColumnValueChanged","onColumnRowGroupChanged","onColumnPivotChanged","lookupUserCompDetails","createParams","getHeaderCompDetails","menuEnabled","showColumnMenu","showColumnMenuAfterButtonClick","setSortForColumn","eGridHeader","selectAllFeature","getCheckboxGui","setActiveHeader","refreshHeaderClasses","classes","getHeaderClassesFromColDef","oldClasses","eSource","dragSourceElement","draggable","hideColumnOnExit","createDragItem","setMoving","unlockedColumns","isMenuEnabled","calculateDisplayName","workOutDraggable","refreshHeaderComp","attemptRefresh","headerCompRefreshed","attemptHeaderCompRefresh","isSuppressMovableColumns","colCanMove","checkDisplayName","isMenuVisible","updateSortableCssClass","refreshAriaSort","isSpanHeaderHeight","numberOfParents","isSpanningTotal","getColumnGroupPaddingInfo","getColumnHeaderRowHeight","groupHeaderHeight","wrapperElement","setColumnHeaderHeight","stopResizeObserver","isMeasuring","checkMeasuring","startMeasuring","stopMeasuring","ariaDescription","refreshAriaMenu","refreshAriaFiltered","initialValues","getInitialValues","storeLocalValues","normaliseDragChange","resizeColumnsFromLocalValues","columnsToResize","getColumnsToResize","getInitialSizeOfColumns","resizeRatios","getSizeRatiosOfColumns","columnSizeAndRatios","groupAfter","getDisplayedGroupAfter","takeFromLeafCols","groupAfterColumns","groupAfterStartWidth","groupAfterRatios","resizeCols","resizeTakeFromCols","resizeTakeFromStartWidth","resizeTakeFromRatios","preferredSize","getPreferredWidthForColumnGroup","resizeColumns","initialSizeOfColumns","clearLocalValues","removeChildListenersFuncs","addListenersToChildrenColumns","onDisplayedChildrenChanged","removeListenersOnChildrenColumns","widthChangedListener","onSuppressColMoveChange","isSuppressMoving","addClasses","displayedLeafColumns","restoreFocus","previousColumnGroup","newColumnGroup","findGroupWidthId","getHeaderGroupCompDetails","providedColGroup","refreshExpanded","eHeaderGroup","getDragItemForGroup","allColumnsOriginalOrder","allColumnsCurrentOrder","childSuppressesMoving","typeClass","headerRowClass","initCompState","onColumnResized","headerCellCtrls","getWidthForRow","getContainerWidth","topOffset","getTopAndHeight","sizes","numberOfFloating","hasFloatingFilters","groupHeight","getColumnGroupHeaderRowHeight","numberOfNonGroups","numberOfGroups","getFloatingFiltersHeight","ctrlsToDisplay","getHeaderCtrls","oldCtrls","getColumnsInViewport","recycleAndCreateHeaderCtrls","isFocusedAndDisplayed","isHeaderWrapperFocused","oldCtrl","keepCtrl","headerColumn","isEmptyGroup","idOfChild","forOldColumn","getColumnsInViewportPrintLayout","getColumnsInViewportNormalLayout","actualDepth","getActualDepth","getVirtualHeaderGroupRow","allCtrls","includeFloatingFilter","groupsRowCtrls","setupCenterWidth","setupPinnedWidth","setupDragAndDrop","registerHeaderContainer","isReady","dropContainer","bodyDropTarget","keepColumns","sequence","focusedHeaderPosition","getFocusHeaderToUseAfterRefresh","refreshColumnGroups","groupRowCount","refreshColumns","needNewInstance","columnsRowCtrl","shouldDestroyInstance","COLUMN","refreshFilters","destroyPreviousComp","filtersRowCtrl","rowIndexMismatch","getAllCtrls","setCtrls","restoreFocusOnHeader","setCenterWidth","setViewportScrollLeft","hiddenChanged","addPaddingForScrollbar","widthWithPadding","setPinnedContainerWidth","getHeaderCellCtrl","focusHeader","headerRowComps","rowCompsList","selectAndSetTemplate","eCenterContainer","pinnedLeft","pinnedRight","PINNED_LEFT_TEMPLATE","PINNED_RIGHT_TEMPLATE","CENTER_TEMPLATE","eRowContainer","oldRowComps","prevGui","appendEnsuringDomOrder","notAlreadyIn","ctrlId","existingComp","destroyRowComp","HeaderNavigationDirection","fromHeader","rowLen","isUp","nextRow","nextFocusColumn","headerPositionUtils","getColumnVisibleParent","getColumnVisibleChild","skipColumn","focusedHeader","nextHeader","normalisedDirection","findHeader","focusNextHeaderRow","nextRowIndex","findColAtEdgeForHeaderRow","columnToScrollTo","onPivotModeChanged","setupHeaderHeight","registerGridHeaderCtrl","setHeaderHeight","totalHeaderHeight","px","setHeightAndMinHeight","shouldAllowOverflow","navigateHorizontally","navigateVertically","clearFocusedHeader","addContainer","dragStartX","setResizeIcons","MouseEvent","setResizeCursor","disableUserSelect","resetIcons","showPopup","tabListener","trapFocusWithin","setMenuVisible","isKeyboardEvent","findTabbableParent","getMenuTabs","tabbedItemScrollMap","addItem","activeItem","tabbedItem","afterDetachedCallback","eHeader","isRightKey","currentPosition","nextItem","showItemWrapper","eHeaderButton","isTargetUnderManagedComponent","findFocusableElementBeforeTabGuard","afterAttachedParams","title","titleLabel","itemWrapper","onItemClicked","lastScrollListener","bodyPromise","onlyUnmanaged","isKeyboardMode","afterAttachedCallback","keepScrollPosition","scrollableContainer","getScrollableContainer","onActiveItemClicked","DEBOUNCE_DELAY","polyfillFunctions","getWindow","useBrowserResizeObserver","resizeObserver","ResizeObserver","observe","disconnect","usePolyfill","widthLastTime","heightLastTime","running","periodicallyCheckWidthAndHeight","doNextPolyfillTurn","suppressResize","resizeObserverExists","schedulePolyfill","polyfillScheduled","executeAllFuncs","createTasksP1","sorted","createTasksP2","destroyTasks","ticking","scrollGoingDown","lastPage","lastScrollTop","taskCount","cancelledTasks","isPaginationActive","useAnimationFrame","task","verifyAnimationFrameOn","taskItem","createOrder","addTaskToList","taskList","millis","p1TaskList","p1Tasks","p2TaskList","p2Tasks","frameStart","duration","noMaxMillis","gridBodyDidSomething","sortTaskList","requestFrame","stopTicking","executeFrame","webkitRequestAnimationFrame","pending","isOn","ClientSideRowModelSteps","isClientSideRowModel","rowIds","rowIdSet","expandedRows","expandOrCollapseAll","MAP","eHeaderCell","getHeaderCellForColumn","getAllCellsForColumn","addElementsToContainerAndGetWidth","eDummyContainer","eBodyContainer","cloneItemIntoDummy","dummyContainerWidth","autoSizePadding","getAutoSizePadding","getHtmlElementForColumnHeader","eCellClone","cloneNode","eCloneParent","eCloneParentClassList","isHeader","isRow","createRowCon","destroyRowCtrls","stickyRowCtrls","containerHeight","isClientSide","refreshNodesAndContainerHeight","stickyRows","firstPixel","getFirstVisibleVerticalPixel","addStickyRow","stickyRow","lastChildBottom","lastAncestor","childrenAfterSort","storeBounds","childStore","getStoreBounds","heightPx","stickRowBottom","thisRowLastPx","firstPixelAfterStickyRows","firstMissingParent","stickRowNode","allStickyNodes","checkStickyRows","stickyRowsChanged","removedCtrls","addedNodes","ctrlsToDestroy","removedCtrl","newCtrls","destroyFuncsForColumnListeners","rowCtrlsByRowIndex","zombieRowCtrls","allRowCtrls","topRowCtrls","bottomRowCtrls","refreshInProgress","dataFirstRenderedFired","setupRangeSelectionListeners","onColumnMovedPinnedVisible","addRangeSelectionListeners","removeRangeSelectionListeners","initialise","onPageLoaded","onBodyScroll","onDomLayoutChanged","stickyRowFeature","registerCellEventListeners","initialiseCache","redrawAfterModelUpdate","countProp","getKeepDetailRowsCount","cachedRowCtrls","getStickyRowCtrls","liveList","zombieList","cachedList","getEntries","getFullWidthRowCtrls","onFullWidthRowFocused","onFlashCells","refreshListenersToColumnsForCellComps","removeGridColumnListeners","forEachCellWithThisCol","leftChangedListener","firstRightPinnedChangedListener","lastLeftPinnedChangedListener","colDefChangedListener","destroyRows","domLayoutChanged","firstRenderedRow","lastRenderedRow","rowIndexesToRemove","removeRowCtrls","recycleRows","keepRenderedRows","newPage","onlyBody","getAllRowCtrls","getCellElement","refreshFloatingRows","getPinnedTopRowData","destroyFirstPass","destroySecondPass","suppressEvent","refreshStickyNode","destroyAndRecreateCtrl","dataStruct","updateAllRowCtrls","dispatchDisplayedRowsChanged","partialRefresh","suppressKeepFocus","getFocusCellToUseAfterRefresh","cellDomData","rowDomData","gridElementFocused","getLockOnRefresh","getCellToRestoreFocusToAfterRefresh","updateContainerHeights","scrollToTopIfNewData","rowsToRecycle","getRowsToRecycle","removeAllRowComps","workOutFirstAndLastRowsToRender","updateRowCount","refreshFloatingRowComps","restoreFocusedCell","releaseLockOnRefresh","scrollToTop","suppressScrollToTop","setModelHeight","setRestoreFocusedCell","rowCtrlsLength","cellCtrlsLength","getCellCtrls","refreshCellParams","refreshed","cellRenderers","renderer","fullWidthRenderers","rowIdMap","mapRowNodes","isRowInMap","fullWidthRenderer","rowIdsMap","colIdsMap","excludeColFromRefresh","stubNodeIndexes","stubNode","ctrlsByIdMap","rowsToRemove","indexToRemove","oldFirstRow","oldLastRow","hasStickyRowChanges","rangeChanged","newFocusedCell","indexesToDraw","indexesToDrawMap","existingIndexes","indexesNotToDraw","checkRowToDraw","indexStr","doNotUnVirtualiseRow","currRow","calculateIndexesToDraw","removeRowCompsNotToDraw","createOrUpdateRowCtrl","redrawFullWidthEmbeddedRows","fullWidthCtrl","rowNodesMap","creatingNewRowCtrl","rowCtrlsMap","executeInAWhileFuncs","nodeId","isCacheable","addRow","rowsToBuffer","getRowBuffer","updateOffset","refreshRowHeightVariable","bufferPixels","getRowBufferInPixels","lastPixel","rowHeightsChanged","pageFirstPixel","pageLastPixel","getCurrentPagePixelRange","divStretchOffset","bodyVRange","bodyTopPixel","bodyBottomPixel","firstVisibleVPixel","ensureAllRowsInRangeHaveHeightsCalculated","firstRowIndex","pageFirstRow","pageLastRow","rowLayoutNormal","suppressRowCountRestriction","rowBufferMaxSize","firstDiffers","lastDiffers","topPixel","bottomPixel","ensureRowHeightsValid","REMOVE_ROW","KEEP_ROW","rowHasFocus","isRowNodeFocused","rowIsEditing","rowIsDetail","mightWantToKeepRow","rowNodePresent","isRowPresent","rowCtrlFromCache","renderedRows","rowPosition","gridRow","startIndex","endIndex","parentClosed","blockAfterViewport","blockBeforeViewport","blockInsideViewport","maxCount","entriesMap","entriesList","setCached","rowCtrlToDestroy","removeFromCache","rowNodeMismatch","rowNodeId","suppliedFormatter","useFormatterFromColumn","setPinnedTopRowData","setPinnedBottomRowData","pinnedTopRows","pinnedBottomRows","createNodesFromData","allData","nextRowTop","dataItem","idPrefix","getTotalHeight","lastNode","ServerSideTransactionResultStatus","ChangedPath","keepingColumns","nodeIdsToColumns","mapToItems","pathRoot","pathItem","depthFirstSearchChangedPath","traverseEverything","depthFirstSearchEverything","traverseLeafNodes","includeUnchangedNodes","newEntryCount","newEntry","thisItem","parentItem","createPathItems","linkPathItems","populateColumnsMap","colsForThisNode","STATE_WAITING_TO_LOAD","STATE_LOADING","loadFromDatasource","requestMostRecentAndLive","isRequestMostRecentAndLive","STATE_FAILED","processServerFail","dispatchLoadCompleted","successCommon","thisIsMostRecentRequest","weAreNotDestroyed","STATE_LOADED","processServerResult","success","EVENT_LOAD_COMPLETE","block","RowNodeBlockLoader_1","activeBlockLoadsCount","blocks","maxConcurrentRequests","getMaxConcurrentDatasourceRequests","checkBlockToLoadDebounce","performCheckBlocksToLoad","loadComplete","checkBlockToLoad","BLOCK_LOADED_EVENT","BLOCK_LOADER_FINISHED_EVENT","printCacheStatus","loadAvailability","getAvailableLoadingCount","blocksToLoad","registerLoads","ssrm","getBlockStates","getBlockStateJson","isLogging","topDisplayedRowIndex","bottomDisplayedRowIndex","masterRowCount","pageSizeFromGridOptions","isPaginateChildRows","onPaginationGridOptionChanged","onPageSizeGridOptionChanged","startPixel","endPixel","startLimitIndex","endLimitIndex","calculatePages","shouldPaginate","modelUpdatedEvent","paginationChangedEvent","newPageSize","setPageSize","topRowBounds","bottomRowBounds","nodeIsInPage","getRowBounds","pageSize","pageNumber","getPageForIndex","rowPage","totalPages","pageSizeAutoCalculated","pageSizeFromPageSizeSelector","pageSizeFromInitialState","defaultPageSize","oldPageSize","currentSize","calculatePagesAllRows","calculatePagesMasterRowsOnly","calculatedPagesNotActive","setPixelOffset","isFinite","getTopLevelRowCount","setZeroRows","masterLastRowIndex","adjustCurrentPageIfInvalid","masterPageStartIndex","masterPageEndIndex","getTopLevelRowDisplayedIndex","firstIndexNotToShow","maxRowIndex","onApplicableClass","onNotApplicableClass","processStaticCellClasses","previousClassRules","classRules","classesToApply","classesToRemove","forEachSingleClass","singleClass","classNames","rule","resultOfRule","classOrClasses","cellClassFunc","cssClassItem","usingSafari","minDate","maxDate","setMinValue","setMaxValue","wrapperEl","formattedValue","rendererSuccessful","populateWithRenderer","populateWithoutRenderer","matchString","hasMatch","highlightEndIndex","startPart","highlightedPart","endPart","renderValueWithoutRenderer","parentId","parentAriaEl","getParentComponent","textOverflow","fromEnterKey","TabGuardClassNames","skipTabGuardFocus","eTopGuard","eBottomGuard","focusInnerElement","providedFocusInnerElement","providedFocusIn","providedFocusOut","providedShouldStopEventPropagation","providedOnTabKeyDown","providedHandleKeyDown","activateTabGuards","guard","onFocus","hasAttribute","setTabIndex","fromBottom","deactivateTabGuards","tabGuardsAreActive","getNextFocusableElement","findFocusableElements","tabGuardToFocus","createTabGuard","tabGuards","tabGuard","addTabGuards","tabGuardCtrl","TAB_GUARD_TOP","TAB_GUARD_BOTTOM","TAB_GUARD","topTabGuard","bottomTabGuard","forceFocusOutOfContainer","listName","getItemHeight","addResizeObserver","initialiseTabGuard","setAriaProperties","onGridStylesChanged","drawVirtualRows","destroyObserver","focusRow","lastFocusedRowIndex","navigate","rowNumber","renderedRow","eDiv","rowComponent","getListItemHeight","scrollPartialIntoView","viewportTopPixel","viewportBottomPixel","viewportScrolledPastRow","viewportScrolledBeforeRow","componentCreator","componentUpdater","softRefresh","canSoftRefresh","clearVirtualRows","areRowsEqual","removeRow","ensureRowsRendered","refreshRows","insertRow","searchString","highlightedItem","lastRowHovered","searchStringCreator","cellRowHeight","valueList","createLoadingElement","allowTyping","searchDebounceDelay","clearSearchString","renderSelectedValue","searchTextFromString","onWrapperFocus","onWrapperFocusOut","eLoading","setComponentCreator","createRowComponent","onListValueSelected","eListGui","onPickerMouseMove","initialInputValue","userCompDetailsPromise","currentList","forEachRenderedRow","cmp","highlightString","getCurrentValueIndex","updateHighlighted","setValueList","searchStringFn","showCurrentValueInPicker","displayOrHidePicker","currentValueIndex","highlightSelectedValue","searchKey","searchTextFromCharacter","char","runSearch","searchStrings","searchValue","filteredValues","searchType","filterList","fuzzySearchResult","valueToMatch","isMatch","buildSearchStrings","getSuggestionsAndFilteredValues","highlightMatch","filterValueLen","shouldFilter","filterListModel","topSuggestionIndex","selectListItem","highlightFilterMatch","toggleValue","preventUnnecessaryScroll","wasScrolled","mouseY","getRowForMouseEvent","newIndex","dispatchPickerEvent","buildSearchStringFromKeyboardEvent","eSlider","eventChanged","textValue","sliderValue","minValue","maxValue","suppressEnabledCheckbox","suppressOpenCloseIcons","alignItems","initialItems","cbGroupEnabled","setTitle","setEnabled","setAlignItems","hideEnabledCheckbox","hideOpenCloseIcons","setupExpandContract","refreshAriaStatus","refreshChildDisplay","eGroupClosedIcon","eGroupOpenedIcon","eTitleBar","toggleGroupExpand","showIcon","eToolbar","newCls","EVENT_EXPANDED","EVENT_COLLAPSED","itemToHide","eTitle","skipToggle","refreshDisabledStyles","menuItems","isManaged","closeIfIsChild","handleNavKey","topMenu","findTopMenu","activeMenuItem","deactivate","menuItemOrString","addSeparator","menuItemDef","menuItem","isAnotherSubMenuOpen","isSubMenuOpen","EVENT_MENU_ITEM_SELECTED","EVENT_MENU_ITEM_ACTIVATED","currentItem","activate","separatorHtml","nextParent","findNextItem","openChild","closeSubMenu","openSubMenu","foundCurrent","clearActiveItem","wrappedComponent","closePanel","subMenuIsOpen","getClassName","addIcon","addName","addShortcut","addSubMenu","onItemSelected","it","activateFirstItem","subMenu","destroySubMenu","currentLevel","nextLevel","childMenu","addMenuItems","cancelDeactivate","menuPanel","subMenuGui","mouseEnterListener","positionPopupForMenu","hideSubMenu","cancelActivate","onItemActivated","isCompact","shortcut","activateTimeoutId","deactivateTimeoutId","ACTIVATION_DELAY","suffix","prefix","closable","hideTitleBar","setBodyComponent","setClosable","eTitleBarButtons","eContentWrapper","isPositioned","renderComponent","closeButtonComp","CLOSE_BTN_TEMPLATE","addTitleBarButton","onBtClose","bodyComponent","isMaximizable","isMaximized","maximizeListeners","resizeListenerDestroy","lastPosition","maximizable","bringPopupToFront","setMovable","setMaximizable","alwaysOnTop","getPosition","refreshMaximizeIcon","maximizeIcon","minimizeIcon","destroyListener","maximizeButtonComp","clearMaximizebleListeners","buildMaximizeAndMinimizeElements","toggleMaximize","PopupService_1","DIRECTION","instanceIdSeq","popupList","handleThemeChange","popupIdx","getPopupIndex","alignedToElement","sourceRect","getParentRect","keepXYWithinBounds","widthOfParent","maxX","xRightPosition","xLeftPosition","setAlignedStyles","nudgeX","calculatePointerAlign","postProcessCallback","callPostProcessPopup","shouldRenderUnderOrAbove","targetCompRect","spaceAvailableUnder","spaceAvailableAbove","spaceRequired","positions","updatePopupPosition","fromResizeObserver","horizontal","WAIT_FOR_POPUP_CONTENT_RESIZE","popupParent","sizeProperty","anchorProperty","offsetProperty","scrollPositionProperty","docElement","documentRect","isBody","offsetSize","getSize","sizeOfParent","initialisePopupPosition","createPopupWrapper","removeListeners","addEventListenersToPopup","addPopupToPopupList","ePopupParentRect","allThemes","setAlwaysOnTop","popupEl","click","pointerEvent","popupHidden","hidePopupOnKeyboardEvent","hidePopupOnMouseEvent","hidePopupOnTouchEvent","isEventFromCurrentPopup","removePopupFromPopupList","isAnchored","setPopupPositionRelatedToElement","relativeElement","popupIndex","stopAnchoringPromise","destroyPositionTracker","keepPopupPositionedRelativeTo","initialDiffTop","initialDiffLeft","lastDiffTop","lastDiffLeft","leftPx","pRect","sRect","elementNotInDom","currentDiffTop","newTop","currentDiffLeft","newLeft","intervalId","indexOfThisChild","getWrapper","popupLen","alwaysOnTopList","onTopLength","innerEls","innerElsScrollMap","isPopupAlwaysOnTop","hasHighlighting","updateSelected","keepHighlighting","lastElementChild","autocompleteEntries","eList","onConfirmed","setSelectedValue","selectedValue","checkSetSelectedValue","updateSearchInList","topMatch","topMatchStartsWithSearchString","lowerCaseSearchString","allMatches","lowerCaseString","startsWithSearchString","matchingStrings","topSuggestion","useFuzzySearch","containsMatches","runContainsSearch","filteredEntries","forceLastSelection","setSearchString","isListOpen","eAutocompleteInput","onValueChanged","updatePositionAndList","autocompleteList","updateValue","updateAutocompleteList","updateLastPosition","autocompleteListParams","listGenerator","closeList","openList","setSearch","onUpDownKeyDown","forceOpenList","getSelectedValue","EVENT_OPTION_SELECTED","updateEntry","autocompleteType","confirmSelection","onCompleted","setFocus","selectionStart","validator","validationMessage","setCustomValidity","EVENT_VALID_CHANGED","listAriaLabel","EVENT_VALUE_CONFIRMED","updateListOnlyIfOpen","OUTSIDE_ANGULAR_EVENTS","frameworkName","renderingEngine","isOutsideAngular","useCapture","capture","global","framework","ctrlPressed","getNextCellToFocusWithCtrlPressed","getNextCellToFocusWithoutCtrlPressed","upKey","downKey","leftKey","getCellAbove","getCellBelow","getCellToLeft","getCellToRight","isCellGoodToFocusOn","lastCell","colToLeft","colToRight","isLastRowInContainer","nextStickyPosition","getNextStickyPosition","nextCtrl","rowBelow","getRowBelow","lastTopIndex","lastBottomIndex","lastBodyIndex","isFirstRow","getLastBodyCell","getLastFloatingTopRow","rowAbove","getRowAbove","lastBodyRow","lastFloatingRow","getNextTabbedCellBackwards","getNextTabbedCellForwards","newRowIndex","newFloating","newColumn","isRowInPage","consuming","isCallbackConfig","seeUrl","apis","alignedGrid","refOrComp","current","isDestroyed","fireColumnEvent","getAlignedGridApis","alignedGridService","__getAlignedGridService","fireEvent","onColumnEvent","onScrollEvent","onEvent","colEvent","processColumnEvent","groupOpenedEvent","processGroupOpenedEvent","masterGroup","otherColumnGroup","masterColumn","otherColumn","masterColumns","getMasterColumns","movedEvent","srcColState","destColState","visibleEvent","pinnedEvent","resizedEvent","resetNodes","rowSelection","suppressFinishActions","isMultiselect","lastSelectedNode","getLastSelectedNode","newRowClicked","selectRange","skipThisNode","thisNodeWasSelected","selectThisNode","selectChildren","clearOtherNodes","updateGroupsFromChildrenSelections","fromNode","toNode","nodesToSelect","getNodesInRangeForSelection","nodeWasSelected","childrenAfterAggFilter","selectedKeys","selectedRows","newSelectedNodes","passesPredicate","changedPath","setInactive","forEachChangedNodeDepthFirst","rowNodeToKeepSelected","groupsToRefresh","otherRowNode","syncInOldRowNode","syncInNewRowNode","oldNodeHasDifferentId","oldNodeSelected","setSelectedInitialValue","selectionCount","getSelectionCount","topLevelNodes","getTopLevelNodes","traverse","maybeGroup","rowModelClientSide","getNodesToSelect","selectedCount","notSelectedCount","getSelectedCounts","forEachNodeOnPage","recursivelyAddChildren","childrenAfterFilter","selectedIds","gridAp","viaApi","funcName","initialised","cellExpressions","callColumnCellValueChangedHandler","propChange","forFilter","groupDataExists","aggDataExists","ignoreSsrmAggData","ssrmFooterGroupCol","executeFilterValueGetter","executeValueGetter","isFieldContainsDots","cellValueGetter","openedGroup","getOpenedGroup","checkType","valueWasDifferent","setValueUsingField","valuesAreSame","fieldPieces","fieldPiece","getValueCallback","valueFromCache","keyParams","expressionToFunctionCache","evaluateExpression","javaScriptFunction","createExpressionFunction","functionBody","createFunctionBody","theFunction","Function","templateCache","waitingCallbacks","url","templateFromCache","callbackList","that","client","XMLHttpRequest","onload","handleHttpResult","send","httpResult","response","responseText","logging","Logger","isLoggingFunc","eGridHostDiv","addRtlSupport","onGridSizeChanged","registerGridCtrl","EnterpriseCoreModule","setRtlClass","setCursor","setUserSelect","focusableContainers","getFocusableContainers","idxWithFocus","nextIdx","lastColumn","focusGridView","focusFirstHeader","userSelect","webkitUserSelect","cursor","createTemplate","insertGridIntoDom","eRootWrapperBodyClassList","eRootWrapperBody","dropZones","showDropZones","sideBar","showSideBar","showStatusBar","watermark","showWatermark","gridBodyComp","sideBarComp","SortController_1","nextDirection","getNextSortDirection","columnsToUpdate","sortableRowGroupColumns","doingMultiSort","clearSortBarTheseColumns","updateSortIndex","lastColToChange","isCoupled","groupParent","getGroupDisplayColumnForGroup","lastSortIndexCol","allSortedCols","allSortedColsWithoutChanges","sortedColsWithIndices","allCols","sortedCols","columnsToSkip","columnToClear","DEFAULT_SORTING_ORDER","notInArray","lastItemInArray","isSortingLinked","isAggregated","sortedRowGroupCols","isSortLinked","allColsIndexes","iA","iB","indexMap","groupDisplayCol","getIndexedSortMap","col1","idx1","col2","idx2","isColumnSortCouplingActive","isGroupDisplayColumn","linkedColumns","canColumnDisplayMixedSort","columnHasUniqueData","sortableColumns","firstSort","allMatch","FocusService_1","instanceCount","toggleKeyboardMode","isKeyboardActive","keyboardModeActive","removeKeyboardModeEvents","clearFocusedCellListener","onColumnEverythingChanged","registerKeyboardFocusEvents","addKeyboardModeEvents","unregisterGridCompController","colFromColumnModel","isDomDataMissingInHierarchy","eBrowserCell","ePointer","isCellRestoreFocused","restoredFocusedCellPosition","getFocusEventParams","gridColumn","focusedColumn","focusedHeaderRowIndex","focusAdvancedFilter","previousHeaderPosition","nextHeaderPosition","headerRowContainerCtrl","focusSuccess","firstColumn","focusLastHeader","exclude","focusableString","excludeString","excludeNodes","focusableElements","toFocus","referenceElement","referenceIndex","lastTabGuardIndex","onlyManaged","nextIndex","managedContainers","getLastRow","getFirstRow","forceOut","focusNextInnerContainer","isDetailGrid","advancedFilterFocusColumn","focusHeaderComp","forceFirstColumn","selectedColumns","executeNextFuncs","executeLaterFuncs","animationThreadCount","ensureAnimationCssClassPresent","flush","animationThreadCountCopy","nowFuncs","waitFuncs","centerRowContainerCon","checkPageSize","onPaginationAutoSizeChanged","notActive","unsetAutoCalculatedPageSize","getViewportSizeFeature","isBodyRendered","cacheVersion","neverExpires","__cacheVersion","__cacheData","SOURCE_PASTE","doChangeDetection","nodesToRefresh","onlyChangedColumns","addParentNode","doAggregate","jsCompFunc","functionAdapter","Adapter","callbackResult","candidate","componentMetaData","dateComponent","detailCellRenderer","adaptCellRendererFunction","loadingCellRenderer","floatingFilterWrapperComponent","groupRowRenderer","statusPanel","toolPanel","DEFAULT_ROW_HEIGHT","MIN_COL_WIDTH","MAT_GRID_SIZE","BASE_GRID_SIZE","BALHAM_GRID_SIZE","ALPINE_GRID_SIZE","QUARTZ_ICON_SIZE","QUARTZ_FONT_SIZE","QUARTZ_GRID_SIZE","HARD_CODED_SIZES","headerCellMinWidth","listItemHeight","chartMenuPanelWidth","SASS_PROPERTY_BUILDER","calculatedSizes","mutationObserver","MutationObserver","fireGridStylesChangedEvent","attributeFilter","themeFamily","calculateValueForSassProperty","themeElement","useTheme","classesFromThemeElement","prevEl","currentClass","currentDiv","calculatedValue","sizeName","getSassVariable","reg","themeMatch","sassVariableName","oldRowHeight","getPropertyValue","measuredMin","scrollY","uiBodyHeight","maxDivHeight","stretching","newScrollY","newBodyHeight","getUiBodyHeight","calculateOffset","setUiContainerHeight","pixelsToShave","modelHeight","uiContainerHeight","maxScrollY","scrollPercent","setDivStretchOffset","newOffset","newOffsetFloor","clearOffset","modelPixel","modelMaxScroll","scrollPixel","updateSelectable","skipLeafNodes","isRowSelecting","isRowSelectable","isCsrmGroupSelectsChildren","nodesToDeselect","nodeCallback","hasSelectableChild","rowSelectable","csrm","previousAndFirstButtonsDisabled","nextButtonDisabled","lastButtonDisabled","areListenersSetup","btFirst","btPrevious","btNext","btLast","pageSizeComp","onPageSizeRelatedOptionsChange","toggleSelectDisplay","shouldShowPageSizeSelector","enableOrDisableButtons","updateRowLabels","setCurrentPageLabel","setTotalLabels","onBtFirst","onBtPrevious","onBtNext","onBtLast","pagesExist","toDisplay","lbCurrent","formatNumber","strPage","strTo","strOf","strFirst","strPrevious","strNext","strLast","toggleButtonDisabled","zeroPagesToDisplay","isZeroPagesToDisplay","onLastPage","lbFirstRowOnPage","isLoading","lbLastRowOnPage","lastPageFound","hiddenGroupRow","setTotalLabelsToZero","lbTotal","lbRecordCount","moreText","inProgress","destroyRequested","overlayWrapperClassList","eOverlayWrapper","registerOverlayWrapperComp","overlayWrapperCssClass","activeOverlayWrapperCssClass","overlayComp","setWrapperTypeClass","destroyActiveOverlay","activeOverlay","pinnedBottomCount","pinnedTopCount","rowA","rowB","createIdFromValues","cellA","cellB","colsMatch","floatingMatch","indexMatch","UndoRedoAction","cellValueChanges","RangeUndoRedoAction","initialRange","finalRange","UndoRedoStack","maxStackSize","actionStack","DEFAULT_STACK_SIZE","shouldAddActions","activeCellEdit","activeRowEdit","isPasting","isRangeInAction","eventCell","isCellEditing","isRowEditing","shouldCaptureAction","cellValueChange","clearStacks","undoStack","redoStack","undoRedoLimit","addRowEditingListeners","addCellEditingListeners","addPasteListeners","addFillListeners","addCellKeyListeners","keepUndoRedoStack","getCurrentStackSize","operationPerformed","undoRedo","endEvent","undoRedoStack","opposingUndoRedoStack","rangeProperty","cellValueChangeProperty","undoRedoAction","processAction","processRange","processCell","valueExtractor","currentRow","startColumn","setLastFocusedCell","cellRangeParams","pushActionsToUndoStack","shouldPushAction","nextColumn","getGroupMethod","getColMethod","currentRowType","getHeaderRowType","isAnyChildSpanningHeaderHeight","isColumn","leafChild","getRowType","childContainer","colGroupDefs","createDefFromColumn","addToResult","childDef","lastPointer","parentDef","existingParentDef","createDefFromGroup","defCloned","colDefCloned","extraCssClass","preProcessRowClassRules","rowCls","rowClass","rowClassFuncResult","rowClassParams","isAccentedSort","primaryColumnsSortGroups","sortOptions","mapper","currentPos","sortedRowNodes","compareRowNodes","sortedNodeA","sortedNodeB","sortOption","comparatorResult","providedComparator","getComparator","validResult","comparatorOnCol","groupLeafField","primaryColumn","isNodeGroupedAtLevel","isGroupRows","allLeafChildren","displayCol","CtrlsService_1","readyCallbacks","stickyTopCenterRowContainerCtrl","stickyTopLeftRowContainerCtrl","stickyTopRightRowContainerCtrl","centerHeaderRowContainerCtrl","leftHeaderRowContainerCtrl","rightHeaderRowContainerCtrl","fakeHScrollComp","fakeVScrollComp","gridHeaderCtrl","createReadyParams","checkReady","NAME","registry","meta","controllerName","controllerClass","ControllerClass","hideTimeout","invisibleScrollbar","hideAndShowInvisibleScrollAsNeeded","addActiveListenerToggles","activateEvents","deactivateEvents","initialiseInvisibleScrollbar","setScrollVisible","spacerWidthsListener","setFakeHScrollSpacerWidths","registerFakeHScrollComp","refreshCompBottom","bottomPinnedHeight","vScrollShowing","rightSpacing","scrollOnRight","eRightSpacer","leftSpacing","scrollOnLeft","eLeftSpacer","hScrollShowing","isSuppressHorizontalScroll","adjustedScrollbarWidth","scrollContainerSize","attemptSettingScrollPosition","checkContainerWidths","onRowGroupOpened","dispatchExpandedDebounced","COLUMN_DEFINITION_DEPRECATIONS","CSRM_REQUIRES_ROW_GROUP_MODULE","_options","COLUMN_DEFINITION_VALIDATIONS","enterpriseMenuTabs","tab","MenuModule","ColumnsToolPanelModule","supportedRowModels","dependencies","COL_DEF_VALIDATORS","objectName","allProperties","docsUrl","deprecations","validations","GRID_OPTION_DEPRECATIONS","onColumnRowGroupChangeRequest","onColumnPivotChangeRequest","onColumnValueChangeRequest","onColumnAggFuncChangeRequest","serverSideFilterAllLevels","enterMovesDown","renamed","enterMovesDownAfterEdit","GRID_OPTION_DEFAULTS","suppressContextMenu","preventDefaultOnContextMenu","allowContextMenuWithControlKey","tooltipShowDelay","tooltipHideDelay","copyHeadersToClipboard","copyGroupHeadersToClipboard","clipboardDelimiter","suppressCopyRowsToClipboard","suppressCopySingleCellRanges","suppressLastEmptyLineOnPaste","suppressClipboardPaste","suppressClipboardApi","suppressCutToClipboard","maintainColumnOrder","suppressFieldDotNotation","allowDragFromColumnsToolPanel","suppressMovableColumns","suppressColumnMoveAnimation","suppressDragLeaveHidesColumns","suppressRowGroupHidesColumns","suppressClickEdit","readOnlyEdit","enterNavigatesVertically","enableCellEditingOnBackspace","suppressCsvExport","suppressExcelExport","includeHiddenColumnsInQuickFilter","excludeChildrenWhenTreeDataFiltering","enableAdvancedFilter","includeHiddenColumnsInAdvancedFilter","enableCharts","masterDetail","rowBuffer","suppressFocusAfterRefresh","suppressChangeDetection","suppressNoRowsOverlay","paginationPageSize","paginationAutoPageSize","suppressPaginationPanel","pivotDefaultExpanded","functionsReadOnly","alwaysAggregateAtRootLevel","aggregateOnlyChangedColumns","suppressAggFilteredOnly","cellFlashDelay","cellFadeDelay","suppressMoveWhenRowDragging","rowDragEntireRow","rowDragMultiRow","groupDefaultExpanded","groupMaintainOrder","groupIncludeTotalFooter","groupSuppressBlankHeader","showOpenedGroup","groupRemoveSingleChildren","groupRemoveLowestSingleChildren","groupHideOpenParents","groupAllowUnbalanced","suppressMakeColumnVisibleAfterUnGroup","asyncTransactionWaitMillis","suppressModelUpdateAfterUpdateTransaction","cacheBlockSize","purgeClosedRowNodes","serverSideSortAllLevels","serverSideSortOnServer","serverSideFilterOnServer","alwaysShowHorizontalScroll","alwaysShowVerticalScroll","suppressHorizontalScroll","suppressScrollOnNewData","suppressScrollWhenPopupsAreOpen","suppressMiddleClickScrolls","rowMultiSelectWithClick","suppressRowDeselection","suppressRowClickSelection","suppressCellFocus","suppressMultiRangeSelection","enableCellTextSelection","enableRangeSelection","enableRangeHandle","enableFillHandle","fillHandleDirection","suppressClearOnFillReduction","accentedSort","suppressMultiSort","alwaysMultiSort","suppressMaintainUnsortedOrder","suppressRowHoverHighlight","columnHoverHighlight","deltaSort","GRID_OPTION_VALIDATIONS","getMainMenuItems","getContextMenuItems","csrmWarning","getDataPath","ssrmWarning","isServerSideGroup","getServerSideGroupKey","groupIncludeFooter","warning","ViewportRowModelModule","serverSideDatasource","ServerSideRowModelModule","InfiniteRowModelModule","ClientSideRowModelModule","GRID_OPTIONS_VALIDATORS","propertyExceptions","GridOptionsService_1","domDataKey","random","propertyEventService","globalEventHandlerFactory","restrictToSyncOnly","alwaysSync","alwaysSyncGlobalEvents","callbackMethodName","mergeGridCommonParams","wrapped","mergedParams","parsed","num","coerceFunc","PROPERTY_COERCIONS","newGo","coercedValue","getCoercedValue","changeSetId","shouldForce","validationService","processGridOptions","useGridOptions","gridLayout","allowEstimate","isNumeric","getMasterDetailRowHeight","domData","ownerDocument","userValue","groupAggFiltering","toBoolean","toConstrainedNum","variableValues","localisedText","registerFakeVScrollComp","onRowContainerHeightChanged","gridBodyViewportEl","MONTH_LOCALE_TEXT","january","february","march","april","may","june","july","august","september","october","november","december","MONTH_KEYS","isWaitingForRowData","isColumnTypeOverrideInDataTypeDefinitions","columnStateUpdatesPendingInference","columnStateUpdateListenerDestroyFuncs","processDataTypeDefinitions","recreateColumnDefs","defaultDataTypes","getDefaultDataTypes","dataTypeDefinition","groupSafeValueFormatter","createGroupSafeValueFormatter","dataTypeMatchers","mergedDataTypeDefinition","processDataTypeDefinition","dataTypeMatcher","checkObjectValueHandlers","overriddenDataTypeMatcher","parentDataTypeDefinition","childDataTypeDefinition","appendColumnTypes","convertColumnTypes","alreadyProcessedDataTypes","extendsCellDataType","extendsDataType","baseDataType","baseDataTypeDefinition","overriddenBaseDataTypeDefinition","validateDataTypeDefinition","mergeDataTypeDefinitions","extendedDataTypeDefinition","mergedExtendedDataTypeDefinition","parentCellDataType","canInferCellDataType","inferCellDataType","suppressDefaultProperties","setColDefPropertiesForBaseDataType","dataTypeDefinitionColumnType","updateColDefAndGetDataTypeDefinitionColumnType","columnStateUpdates","propsToCheckForInference","doColDefPropsPreventInference","columnTypeDefs","hasPropsPreventingInference","columnTypeDef","prop","comparisonValue","doesColDefPropPreventInference","checkProps","initialData","getInitialData","initWaitForRowData","_cellDataType","columnTypeOverridesExist","queueResizeOperations","firstRowData","processColumnsPendingInference","processResizeOperations","dataTypesInferredEvent","newRowGroupColumnStateWithoutIndex","newPivotColumnStateWithoutIndex","resetColumnDefIntoColumn","getUpdatedColumnState","generateColumnStateForRowGroupAndPivotIndexes","columnState","resolvedObjectDataTypeDefinition","defaultObjectDataTypeDefinition","hasObjectValueParser","hasObjectValueFormatter","invalidArray","dateString","getDateStringTypeDefinition","dateParser","dateFormatter","getDataTypeDefinition","usingSetFilter","mergeFilterParams","valA","valB","_filterValues","treeList","treeListFormatter","pathKey","monthKey","convertToDate","treeListPathGetter","defaultDateFormatMatcher","boolean","waitingForColumns","setColumnDefs","setColumnsAndData","gridReady","dispatchGridReadyEvent","isEnterprise","readyEvent","manuallyDisplayed","onRowDataUpdated","overlayWrapperComp","getLoadingOverlayCompDetails","showOverlay","getNoRowsOverlayCompDetails","wrapperCssClass","isSuppressNoRowsOverlay","showOrHideOverlay","suppressEvents","queuedUpdateSources","dispatchStateUpdateEventDebounced","dispatchQueuedStateUpdateEvents","cachedState","setupStateOnGridReady","newColumnsLoadedDestroyFunc","setupStateOnColumnsInitialised","rowCountReadyDestroyFunc","setupStateOnRowCountReady","firstDataRenderedDestroyFunc","setupStateOnFirstDataRendered","dispatchStateUpdateEvent","updateCachedState","getSideBarState","filterState","setColumnState","setFilterState","updateColumnState","getFilterState","rowGroupExpansion","rowGroupExpansionState","rowSelectionState","paginationState","setRowGroupExpansionState","setRowSelectionState","setPaginationState","getRowGroupExpansionState","getRowSelectionState","getPaginationState","scroll","scrollState","rangeSelection","rangeSelectionState","focusedCellState","setFocusedCellState","setRangeSelectionState","setScrollState","getFocusedCellState","getRangeSelectionState","getScrollState","sortColumns","aggregationColumns","leftColumns","rightColumns","hiddenColumns","columnSizes","sortModel","groupColIds","aggregation","aggregationModel","pivotColIds","columnPinning","leftColIds","rightColIds","columnVisibility","hiddenColIds","columnSizing","columnSizingModel","columnOrder","orderedColIds","sortState","aggregationState","pivotState","columnPinningState","columnVisibilityState","columnSizingState","columnOrderState","columnStateMap","openColumnGroups","openColumnGroupIds","openColumnGroupSet","existingColumnGroupState","gridOptionAdvancedFilterModel","startColId","setCellRanges","setPage","selectionState","noSelections","selectAll","selectAllChildren","toggledNodes","expandedRowGroups","getExpandedRows","expandedRowGroupIds","expandRows","features","newColumnState","existingValue","sources","processOptions","checkProperties","warnings","optionKeys","deprecation","rulesOrGetter","rules","fromGetter","allRegistered","checkForWarning","optionEntries","failed","gridOptionValue","failedKey","possibleOptions","exceptions","validProperties","containerName","VUE_FRAMEWORK_PROPS","invalidProperties","syncEventListeners","asyncEventListeners","syncGlobalEventListeners","asyncGlobalEventListeners","asyncListeners","hasAsync","destroyEventListeners","destroyGlobalListeners","hasEmptyOption","handlePageSizeItemSelected","selectPageSizeComp","onPageSizeSelectorValuesChange","handlePaginationChanged","getPageSizeSelectorValues","reloadPageSizesSelector","pageSizeOptions","paginationPageSizeOption","shouldAddAndSelectEmptyOption","unshift","localisedLabel","localisedAriaLabel","addOptions","paginationPageSizeSelectorValues","validateValues","isNumber","isPositive","createGrid","shallowCopy","getCoercedGridOptions","gridComp","isFrozen","apiUrl","nextGridId","createUi","acceptChanges","registeredModules","getRegisteredModules","createBeansList","createProvidedBeans","contextLogger","getBean","registerModuleUserComponents","registerStackComponents","registerControllers","syncService","controllers","ctrlsFactory","register","agStackComponents","createAgStackComponentsList","setupComponents","passedViaConstructor","registered","__getRegisteredModules","allModules","mapNames","addModule","mod","addIndividualModule","currentModule","dependantModules","__isPackageBased","moduleUserComps","extractModuleEntity","userComponents","compMeta","registerDefaultComponent","seed","moduleAgStackComps","rowModelModules","rowModelModuleNames","clientSide","infinite","serverSide","moduleBeans","beansNoDuplicates","moduleEntities","extractor","BaseComponentWrapper","OriginalConstructor","componentType","createWrapper","createMethod","addMethod","createMethodProxy","hasMethod","callMethod","BarColumnLabelPlacement","globalObj","HTMLButtonElement","HTMLSelectElement","HTMLInputElement","componentInstance","searchForComponentInstance","freeze","componentDependencies","dependency","$mount","maxDepth","suppressError","currentParent","$parent","depth","DynamicComponent","VueComponent","frameworkComponentInstance","autoParamsRefresh","createComponent","getComponentType","createAndMountComponent","overrideProcessing","processMethod","$el","$destroy","getAgGridProperties","rowDataModel","SHALLOW_CHECK_PROPERTIES","DEEP_CHECK_PROPERTIES","createPropsObject","processPropsObject","gridCreated","processOnChange","watch","deep","shallowProps","default","foundInstance","indirectName","gridReadyFired","emitRowModel","h","ALWAYS_SYNC_GLOBAL_EVENTS","updateModelIfUsed","kebabName","kebabProperty","$listeners","$emit","getRowData","combineAttributesAndGridOptions","checkForBindingConflicts","getRowDataBasedOnBindings","gridParams","globalEventListenerFactory","thisAsAny","ROW_DATA_EVENTS","later","Boolean"],"mappings":"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","file":"@ag-grid-community/vue.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vue\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@ag-grid-community/vue\"] = factory(require(\"vue\"));\n\telse\n\t\troot[\"@ag-grid-community/vue\"] = factory(root[\"Vue\"]);\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__8bbf__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fae3\");\n","module.exports = __WEBPACK_EXTERNAL_MODULE__8bbf__;","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n  * vue-class-component v7.2.6\n  * (c) 2015-present Evan You\n  * @license MIT\n  */\nimport Vue from 'vue';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\n// The rational behind the verbose Reflect-feature check below is the fact that there are polyfills\n// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.\n// Without this check consumers will encounter hard to track down runtime errors.\nfunction reflectionIsSupported() {\n  return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;\n}\nfunction copyReflectionMetadata(to, from) {\n  forwardMetadata(to, from);\n  Object.getOwnPropertyNames(from.prototype).forEach(function (key) {\n    forwardMetadata(to.prototype, from.prototype, key);\n  });\n  Object.getOwnPropertyNames(from).forEach(function (key) {\n    forwardMetadata(to, from, key);\n  });\n}\n\nfunction forwardMetadata(to, from, propertyKey) {\n  var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);\n  metaKeys.forEach(function (metaKey) {\n    var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);\n\n    if (propertyKey) {\n      Reflect.defineMetadata(metaKey, metadata, to, propertyKey);\n    } else {\n      Reflect.defineMetadata(metaKey, metadata, to);\n    }\n  });\n}\n\nvar fakeArray = {\n  __proto__: []\n};\nvar hasProto = fakeArray instanceof Array;\nfunction createDecorator(factory) {\n  return function (target, key, index) {\n    var Ctor = typeof target === 'function' ? target : target.constructor;\n\n    if (!Ctor.__decorators__) {\n      Ctor.__decorators__ = [];\n    }\n\n    if (typeof index !== 'number') {\n      index = undefined;\n    }\n\n    Ctor.__decorators__.push(function (options) {\n      return factory(options, key, index);\n    });\n  };\n}\nfunction mixins() {\n  for (var _len = arguments.length, Ctors = new Array(_len), _key = 0; _key < _len; _key++) {\n    Ctors[_key] = arguments[_key];\n  }\n\n  return Vue.extend({\n    mixins: Ctors\n  });\n}\nfunction isPrimitive(value) {\n  var type = _typeof(value);\n\n  return value == null || type !== 'object' && type !== 'function';\n}\nfunction warn(message) {\n  if (typeof console !== 'undefined') {\n    console.warn('[vue-class-component] ' + message);\n  }\n}\n\nfunction collectDataFromConstructor(vm, Component) {\n  // override _init to prevent to init as Vue instance\n  var originalInit = Component.prototype._init;\n\n  Component.prototype._init = function () {\n    var _this = this;\n\n    // proxy to actual vm\n    var keys = Object.getOwnPropertyNames(vm); // 2.2.0 compat (props are no longer exposed as self properties)\n\n    if (vm.$options.props) {\n      for (var key in vm.$options.props) {\n        if (!vm.hasOwnProperty(key)) {\n          keys.push(key);\n        }\n      }\n    }\n\n    keys.forEach(function (key) {\n      Object.defineProperty(_this, key, {\n        get: function get() {\n          return vm[key];\n        },\n        set: function set(value) {\n          vm[key] = value;\n        },\n        configurable: true\n      });\n    });\n  }; // should be acquired class property values\n\n\n  var data = new Component(); // restore original _init to avoid memory leak (#209)\n\n  Component.prototype._init = originalInit; // create plain data object\n\n  var plainData = {};\n  Object.keys(data).forEach(function (key) {\n    if (data[key] !== undefined) {\n      plainData[key] = data[key];\n    }\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!(Component.prototype instanceof Vue) && Object.keys(plainData).length > 0) {\n      warn('Component class must inherit Vue or its descendant class ' + 'when class property is used.');\n    }\n  }\n\n  return plainData;\n}\n\nvar $internalHooks = ['data', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeDestroy', 'destroyed', 'beforeUpdate', 'updated', 'activated', 'deactivated', 'render', 'errorCaptured', 'serverPrefetch' // 2.6\n];\nfunction componentFactory(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.name = options.name || Component._componentTag || Component.name; // prototype props.\n\n  var proto = Component.prototype;\n  Object.getOwnPropertyNames(proto).forEach(function (key) {\n    if (key === 'constructor') {\n      return;\n    } // hooks\n\n\n    if ($internalHooks.indexOf(key) > -1) {\n      options[key] = proto[key];\n      return;\n    }\n\n    var descriptor = Object.getOwnPropertyDescriptor(proto, key);\n\n    if (descriptor.value !== void 0) {\n      // methods\n      if (typeof descriptor.value === 'function') {\n        (options.methods || (options.methods = {}))[key] = descriptor.value;\n      } else {\n        // typescript decorated data\n        (options.mixins || (options.mixins = [])).push({\n          data: function data() {\n            return _defineProperty({}, key, descriptor.value);\n          }\n        });\n      }\n    } else if (descriptor.get || descriptor.set) {\n      // computed properties\n      (options.computed || (options.computed = {}))[key] = {\n        get: descriptor.get,\n        set: descriptor.set\n      };\n    }\n  });\n  (options.mixins || (options.mixins = [])).push({\n    data: function data() {\n      return collectDataFromConstructor(this, Component);\n    }\n  }); // decorate options\n\n  var decorators = Component.__decorators__;\n\n  if (decorators) {\n    decorators.forEach(function (fn) {\n      return fn(options);\n    });\n    delete Component.__decorators__;\n  } // find super\n\n\n  var superProto = Object.getPrototypeOf(Component.prototype);\n  var Super = superProto instanceof Vue ? superProto.constructor : Vue;\n  var Extended = Super.extend(options);\n  forwardStaticMembers(Extended, Component, Super);\n\n  if (reflectionIsSupported()) {\n    copyReflectionMetadata(Extended, Component);\n  }\n\n  return Extended;\n}\nvar reservedPropertyNames = [// Unique id\n'cid', // Super Vue constructor\n'super', // Component options that will be used by the component\n'options', 'superOptions', 'extendOptions', 'sealedOptions', // Private assets\n'component', 'directive', 'filter'];\nvar shouldIgnore = {\n  prototype: true,\n  arguments: true,\n  callee: true,\n  caller: true\n};\n\nfunction forwardStaticMembers(Extended, Original, Super) {\n  // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable\n  Object.getOwnPropertyNames(Original).forEach(function (key) {\n    // Skip the properties that should not be overwritten\n    if (shouldIgnore[key]) {\n      return;\n    } // Some browsers does not allow reconfigure built-in properties\n\n\n    var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);\n\n    if (extendedDescriptor && !extendedDescriptor.configurable) {\n      return;\n    }\n\n    var descriptor = Object.getOwnPropertyDescriptor(Original, key); // If the user agent does not support `__proto__` or its family (IE <= 10),\n    // the sub class properties may be inherited properties from the super class in TypeScript.\n    // We need to exclude such properties to prevent to overwrite\n    // the component options object which stored on the extended constructor (See #192).\n    // If the value is a referenced value (object or function),\n    // we can check equality of them and exclude it if they have the same reference.\n    // If it is a primitive value, it will be forwarded for safety.\n\n    if (!hasProto) {\n      // Only `cid` is explicitly exluded from property forwarding\n      // because we cannot detect whether it is a inherited property or not\n      // on the no `__proto__` environment even though the property is reserved.\n      if (key === 'cid') {\n        return;\n      }\n\n      var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);\n\n      if (!isPrimitive(descriptor.value) && superDescriptor && superDescriptor.value === descriptor.value) {\n        return;\n      }\n    } // Warn if the users manually declare reserved properties\n\n\n    if (process.env.NODE_ENV !== 'production' && reservedPropertyNames.indexOf(key) >= 0) {\n      warn(\"Static property name '\".concat(key, \"' declared on class '\").concat(Original.name, \"' \") + 'conflicts with reserved property name of Vue internal. ' + 'It may cause unexpected behavior of the component. Consider renaming the property.');\n    }\n\n    Object.defineProperty(Extended, key, descriptor);\n  });\n}\n\nfunction Component(options) {\n  if (typeof options === 'function') {\n    return componentFactory(options);\n  }\n\n  return function (Component) {\n    return componentFactory(Component, options);\n  };\n}\n\nComponent.registerHooks = function registerHooks(keys) {\n  $internalHooks.push.apply($internalHooks, _toConsumableArray(keys));\n};\n\nexport default Component;\nexport { createDecorator, mixins };\n","/** @see {@link https://github.com/vuejs/vue-class-component/blob/master/src/reflect.ts} */\nvar reflectMetadataIsSupported = typeof Reflect !== 'undefined' && typeof Reflect.getMetadata !== 'undefined';\nexport function applyMetadata(options, target, key) {\n    if (reflectMetadataIsSupported) {\n        if (!Array.isArray(options) &&\n            typeof options !== 'function' &&\n            !options.hasOwnProperty('type') &&\n            typeof options.type === 'undefined') {\n            var type = Reflect.getMetadata('design:type', target, key);\n            if (type !== Object) {\n                options.type = type;\n            }\n        }\n    }\n}\n","import { createDecorator } from 'vue-class-component';\nimport { applyMetadata } from '../helpers/metadata';\n/**\n * decorator of a prop\n * @param  options the options for the prop\n * @return PropertyDecorator | void\n */\nexport function Prop(options) {\n    if (options === void 0) { options = {}; }\n    return function (target, key) {\n        applyMetadata(options, target, key);\n        createDecorator(function (componentOptions, k) {\n            ;\n            (componentOptions.props || (componentOptions.props = {}))[k] = options;\n        })(target, key);\n    };\n}\n","/**\n * If value is undefined, null or blank, returns null, otherwise returns the value\n * @param {T} value\n * @returns {T | null}\n */\nexport function makeNull(value) {\n    if (value == null || value === '') {\n        return null;\n    }\n    return value;\n}\nexport function exists(value, allowEmptyString = false) {\n    return value != null && (value !== '' || allowEmptyString);\n}\nexport function missing(value) {\n    return !exists(value);\n}\nexport function missingOrEmpty(value) {\n    return value == null || value.length === 0;\n}\nexport function toStringOrNull(value) {\n    return value != null && typeof value.toString === 'function' ? value.toString() : null;\n}\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToNumber(value) {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n    if (value === null || value === '') {\n        // null or blank means clear\n        return null;\n    }\n    if (typeof value === 'number') {\n        return isNaN(value) ? undefined : value;\n    }\n    const valueParsed = parseInt(value, 10);\n    return isNaN(valueParsed) ? undefined : valueParsed;\n}\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToBoolean(value) {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n    if (value === null || value === '') {\n        // null means clear\n        return false;\n    }\n    if (typeof value === 'boolean') {\n        // if simple boolean, return the boolean\n        return value;\n    }\n    // if equal to the string 'true' (ignoring case) then return true\n    return (/true/i).test(value);\n}\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToString(value) {\n    if (value == null || value === '') {\n        return;\n    }\n    return value;\n}\nexport function jsonEquals(val1, val2) {\n    const val1Json = val1 ? JSON.stringify(val1) : null;\n    const val2Json = val2 ? JSON.stringify(val2) : null;\n    return val1Json === val2Json;\n}\nexport function defaultComparator(valueA, valueB, accentedCompare = false) {\n    const valueAMissing = valueA == null;\n    const valueBMissing = valueB == null;\n    // this is for aggregations sum and avg, where the result can be a number that is wrapped.\n    // if we didn't do this, then the toString() value would be used, which would result in\n    // the strings getting used instead of the numbers.\n    if (valueA && valueA.toNumber) {\n        valueA = valueA.toNumber();\n    }\n    if (valueB && valueB.toNumber) {\n        valueB = valueB.toNumber();\n    }\n    if (valueAMissing && valueBMissing) {\n        return 0;\n    }\n    if (valueAMissing) {\n        return -1;\n    }\n    if (valueBMissing) {\n        return 1;\n    }\n    function doQuickCompare(a, b) {\n        return (a > b ? 1 : (a < b ? -1 : 0));\n    }\n    if (typeof valueA !== 'string') {\n        return doQuickCompare(valueA, valueB);\n    }\n    if (!accentedCompare) {\n        return doQuickCompare(valueA, valueB);\n    }\n    try {\n        // using local compare also allows chinese comparisons\n        return valueA.localeCompare(valueB);\n    }\n    catch (e) {\n        // if something wrong with localeCompare, eg not supported\n        // by browser, then just continue with the quick one\n        return doQuickCompare(valueA, valueB);\n    }\n}\nexport function values(object) {\n    if (object instanceof Set || object instanceof Map) {\n        const arr = [];\n        object.forEach((value) => arr.push(value));\n        return arr;\n    }\n    return Object.values(object);\n}\n","// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\nimport { toStringOrNull } from \"../utils/generic.mjs\";\nexport class ColumnKeyCreator {\n    constructor() {\n        this.existingKeys = {};\n    }\n    addExistingKeys(keys) {\n        for (let i = 0; i < keys.length; i++) {\n            this.existingKeys[keys[i]] = true;\n        }\n    }\n    getUniqueKey(colId, colField) {\n        // in case user passed in number for colId, convert to string\n        colId = toStringOrNull(colId);\n        let count = 0;\n        while (true) {\n            let idToTry;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            }\n            else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            }\n            else {\n                // no point in stringing this, object treats it the same anyway.\n                idToTry = count;\n            }\n            if (!this.existingKeys[idToTry]) {\n                this.existingKeys[idToTry] = true;\n                return String(idToTry);\n            }\n            count++;\n        }\n    }\n}\n","import { missing, exists } from './generic.mjs';\nexport function iterateObject(object, callback) {\n    if (object == null) {\n        return;\n    }\n    if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n            callback(i.toString(), object[i]);\n        }\n        return;\n    }\n    for (const [key, value] of Object.entries(object)) {\n        callback(key, value);\n    }\n}\nexport function cloneObject(object) {\n    const copy = {};\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const value = object[key];\n        copy[key] = value;\n    }\n    return copy;\n}\nexport function deepCloneObject(object) {\n    return JSON.parse(JSON.stringify(object));\n}\n// returns copy of an object, doing a deep clone of any objects with that object.\n// this is used for eg creating copies of Column Definitions, where we want to\n// deep copy all objects, but do not want to deep copy functions (eg when user provides\n// a function or class for colDef.cellRenderer)\nexport function deepCloneDefinition(object, keysToSkip) {\n    if (!object) {\n        return;\n    }\n    const obj = object;\n    const res = {};\n    Object.keys(obj).forEach(key => {\n        if (keysToSkip && keysToSkip.indexOf(key) >= 0) {\n            return;\n        }\n        const value = obj[key];\n        // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}. it does\n        // NOT include the following:\n        // 1) arrays\n        // 2) functions or classes (eg ColumnAPI instance)\n        const sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;\n        if (sourceIsSimpleObject) {\n            res[key] = deepCloneDefinition(value);\n        }\n        else {\n            res[key] = value;\n        }\n    });\n    return res;\n}\nexport function getProperty(object, key) {\n    return object[key];\n}\nexport function setProperty(object, key, value) {\n    object[key] = value;\n}\n/**\n * Will copy the specified properties from `source` into the equivalent properties on `target`, ignoring properties with\n * a value of `undefined`.\n */\nexport function copyPropertiesIfPresent(source, target, ...properties) {\n    properties.forEach(p => copyPropertyIfPresent(source, target, p));\n}\n/**\n * Will copy the specified property from `source` into the equivalent property on `target`, unless the property has a\n * value of `undefined`. If a transformation is provided, it will be applied to the value before being set on `target`.\n */\nexport function copyPropertyIfPresent(source, target, property, transform) {\n    const value = getProperty(source, property);\n    if (value !== undefined) {\n        setProperty(target, property, transform ? transform(value) : value);\n    }\n}\nexport function getAllKeysInObjects(objects) {\n    const allValues = {};\n    objects.filter(obj => obj != null).forEach(obj => {\n        Object.keys(obj).forEach(key => allValues[key] = null);\n    });\n    return Object.keys(allValues);\n}\nexport function getAllValuesInObject(obj) {\n    if (!obj) {\n        return [];\n    }\n    const anyObject = Object;\n    if (typeof anyObject.values === 'function') {\n        return anyObject.values(obj);\n    }\n    const ret = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {\n            ret.push(obj[key]);\n        }\n    }\n    return ret;\n}\nexport function mergeDeep(dest, source, copyUndefined = true, makeCopyOfSimpleObjects = false) {\n    if (!exists(source)) {\n        return;\n    }\n    iterateObject(source, (key, sourceValue) => {\n        let destValue = dest[key];\n        if (destValue === sourceValue) {\n            return;\n        }\n        // when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef\n        // and Column Types) would result in params getting shared between objects.\n        // by putting an empty value into destValue first, it means we end up copying over values from\n        // the source object, rather than just copying in the source object in it's entirety.\n        if (makeCopyOfSimpleObjects) {\n            const objectIsDueToBeCopied = destValue == null && sourceValue != null;\n            if (objectIsDueToBeCopied) {\n                // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}, as opposed\n                // to a Class instance (such as ColumnAPI instance).\n                const sourceIsSimpleObject = typeof sourceValue === 'object' && sourceValue.constructor === Object;\n                const dontCopy = sourceIsSimpleObject;\n                if (dontCopy) {\n                    destValue = {};\n                    dest[key] = destValue;\n                }\n            }\n        }\n        if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {\n            mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);\n        }\n        else if (copyUndefined || sourceValue !== undefined) {\n            dest[key] = sourceValue;\n        }\n    });\n}\nexport function missingOrEmptyObject(value) {\n    return missing(value) || Object.keys(value).length === 0;\n}\nexport function get(source, expression, defaultValue) {\n    if (source == null) {\n        return defaultValue;\n    }\n    const keys = expression.split('.');\n    let objectToRead = source;\n    while (keys.length > 1) {\n        objectToRead = objectToRead[keys.shift()];\n        if (objectToRead == null) {\n            return defaultValue;\n        }\n    }\n    const value = objectToRead[keys[0]];\n    return value != null ? value : defaultValue;\n}\nexport function set(target, expression, value) {\n    if (target == null) {\n        return;\n    }\n    const keys = expression.split('.');\n    let objectToUpdate = target;\n    // Create empty objects\n    keys.forEach((key, i) => {\n        if (!objectToUpdate[key]) {\n            objectToUpdate[key] = {};\n        }\n        if (i < keys.length - 1) {\n            objectToUpdate = objectToUpdate[key];\n        }\n    });\n    objectToUpdate[keys[keys.length - 1]] = value;\n}\nexport function getValueUsingField(data, field, fieldContainsDots) {\n    if (!field || !data) {\n        return;\n    }\n    // if no '.', then it's not a deep value\n    if (!fieldContainsDots) {\n        return data[field];\n    }\n    // otherwise it is a deep value, so need to dig for it\n    const fields = field.split('.');\n    let currentObject = data;\n    for (let i = 0; i < fields.length; i++) {\n        if (currentObject == null) {\n            return undefined;\n        }\n        currentObject = currentObject[fields[i]];\n    }\n    return currentObject;\n}\n// used by GridAPI to remove all references, so keeping grid in memory resulting in a\n// memory leak if user is not disposing of the GridAPI references\nexport function removeAllReferences(obj, preserveKeys = [], preDestroyLink) {\n    Object.keys(obj).forEach(key => {\n        const value = obj[key];\n        // we want to replace all the @autowired services, which are objects. any simple types (boolean, string etc)\n        // we don't care about\n        if (typeof value === 'object' && !preserveKeys.includes(key)) {\n            obj[key] = undefined;\n        }\n    });\n    const proto = Object.getPrototypeOf(obj);\n    const properties = {};\n    const msgFunc = (key) => `AG Grid: Grid API function ${key}() cannot be called as the grid has been destroyed.\n    It is recommended to remove local references to the grid api. Alternatively, check gridApi.isDestroyed() to avoid calling methods against a destroyed grid.\n    To run logic when the grid is about to be destroyed use the gridPreDestroy event. See: ${preDestroyLink}`;\n    Object.getOwnPropertyNames(proto).forEach(key => {\n        const value = proto[key];\n        // leave all basic types and preserveKeys this is needed for GridAPI to leave the \"destroyed: boolean\" attribute and isDestroyed() function.\n        if (typeof value === 'function' && !preserveKeys.includes(key)) {\n            const func = () => {\n                console.warn(msgFunc(key));\n            };\n            properties[key] = { value: func, writable: true };\n        }\n    });\n    Object.defineProperties(obj, properties);\n}\nexport function isNonNullObject(value) {\n    return typeof value === 'object' && value !== null;\n}\n","const doOnceFlags = {};\n/**\n * If the key was passed before, then doesn't execute the func\n * @param {Function} func\n * @param {string} key\n */\nexport function doOnce(func, key) {\n    if (doOnceFlags[key]) {\n        return;\n    }\n    func();\n    doOnceFlags[key] = true;\n}\nexport function warnOnce(msg) {\n    doOnce(() => console.warn(\"AG Grid: \" + msg), msg);\n}\nexport function errorOnce(msg) {\n    doOnce(() => console.error(\"AG Grid: \" + msg), msg);\n}\nexport function getFunctionName(funcConstructor) {\n    // for every other browser in the world\n    if (funcConstructor.name) {\n        return funcConstructor.name;\n    }\n    // for the pestilence that is ie11\n    const matches = /function\\s+([^\\(]+)/.exec(funcConstructor.toString());\n    return matches && matches.length === 2 ? matches[1].trim() : null;\n}\nexport function isFunction(val) {\n    return !!(val && val.constructor && val.call && val.apply);\n}\nexport function executeInAWhile(funcs) {\n    executeAfter(funcs, 400);\n}\nconst executeNextVMTurnFuncs = [];\nlet executeNextVMTurnPending = false;\nexport function executeNextVMTurn(func) {\n    executeNextVMTurnFuncs.push(func);\n    if (executeNextVMTurnPending) {\n        return;\n    }\n    executeNextVMTurnPending = true;\n    window.setTimeout(() => {\n        const funcsCopy = executeNextVMTurnFuncs.slice();\n        executeNextVMTurnFuncs.length = 0;\n        executeNextVMTurnPending = false;\n        funcsCopy.forEach(func => func());\n    }, 0);\n}\nexport function executeAfter(funcs, milliseconds = 0) {\n    if (funcs.length > 0) {\n        window.setTimeout(() => funcs.forEach(func => func()), milliseconds);\n    }\n}\n/**\n * @param {Function} func The function to be debounced\n * @param {number} delay The time in ms to debounce\n * @return {Function} The debounced function\n */\nexport function debounce(func, delay) {\n    let timeout;\n    // Calling debounce returns a new anonymous function\n    return function (...args) {\n        const context = this;\n        window.clearTimeout(timeout);\n        // Set the new timeout\n        timeout = window.setTimeout(function () {\n            func.apply(context, args);\n        }, delay);\n    };\n}\n/**\n * @param {Function} func The function to be throttled\n * @param {number} wait The time in ms to throttle\n * @return {Function} The throttled function\n */\nexport function throttle(func, wait) {\n    let previousCall = 0;\n    return function (...args) {\n        const context = this;\n        const currentCall = new Date().getTime();\n        if (currentCall - previousCall < wait) {\n            return;\n        }\n        previousCall = currentCall;\n        func.apply(context, args);\n    };\n}\nexport function waitUntil(condition, callback, timeout = 100, timeoutMessage) {\n    const timeStamp = new Date().getTime();\n    let interval = null;\n    let executed = false;\n    const internalCallback = () => {\n        const reachedTimeout = ((new Date().getTime()) - timeStamp) > timeout;\n        if (condition() || reachedTimeout) {\n            callback();\n            executed = true;\n            if (interval != null) {\n                window.clearInterval(interval);\n                interval = null;\n            }\n            if (reachedTimeout && timeoutMessage) {\n                console.warn(timeoutMessage);\n            }\n        }\n    };\n    internalCallback();\n    if (!executed) {\n        interval = window.setInterval(internalCallback, 10);\n    }\n}\nexport function compose(...fns) {\n    return (arg) => fns.reduce((composed, f) => f(composed), arg);\n}\nexport function callIfPresent(func) {\n    if (func) {\n        func();\n    }\n}\nexport const noop = () => { return; };\n","export var ModuleNames;\n(function (ModuleNames) {\n    ModuleNames[\"CommunityCoreModule\"] = \"@ag-grid-community/core\";\n    // community modules\n    ModuleNames[\"InfiniteRowModelModule\"] = \"@ag-grid-community/infinite-row-model\";\n    ModuleNames[\"ClientSideRowModelModule\"] = \"@ag-grid-community/client-side-row-model\";\n    ModuleNames[\"CsvExportModule\"] = \"@ag-grid-community/csv-export\";\n    // enterprise core - users don't need to import on this, but other enterprise modules do\n    ModuleNames[\"EnterpriseCoreModule\"] = \"@ag-grid-enterprise/core\";\n    // enterprise modules\n    ModuleNames[\"RowGroupingModule\"] = \"@ag-grid-enterprise/row-grouping\";\n    ModuleNames[\"ColumnsToolPanelModule\"] = \"@ag-grid-enterprise/column-tool-panel\";\n    ModuleNames[\"FiltersToolPanelModule\"] = \"@ag-grid-enterprise/filter-tool-panel\";\n    ModuleNames[\"MenuModule\"] = \"@ag-grid-enterprise/menu\";\n    ModuleNames[\"SetFilterModule\"] = \"@ag-grid-enterprise/set-filter\";\n    ModuleNames[\"MultiFilterModule\"] = \"@ag-grid-enterprise/multi-filter\";\n    ModuleNames[\"StatusBarModule\"] = \"@ag-grid-enterprise/status-bar\";\n    ModuleNames[\"SideBarModule\"] = \"@ag-grid-enterprise/side-bar\";\n    ModuleNames[\"RangeSelectionModule\"] = \"@ag-grid-enterprise/range-selection\";\n    ModuleNames[\"MasterDetailModule\"] = \"@ag-grid-enterprise/master-detail\";\n    ModuleNames[\"RichSelectModule\"] = \"@ag-grid-enterprise/rich-select\";\n    ModuleNames[\"GridChartsModule\"] = \"@ag-grid-enterprise/charts\";\n    ModuleNames[\"ViewportRowModelModule\"] = \"@ag-grid-enterprise/viewport-row-model\";\n    ModuleNames[\"ServerSideRowModelModule\"] = \"@ag-grid-enterprise/server-side-row-model\";\n    ModuleNames[\"ExcelExportModule\"] = \"@ag-grid-enterprise/excel-export\";\n    ModuleNames[\"ClipboardModule\"] = \"@ag-grid-enterprise/clipboard\";\n    ModuleNames[\"SparklinesModule\"] = \"@ag-grid-enterprise/sparklines\";\n    ModuleNames[\"AdvancedFilterModule\"] = \"@ag-grid-enterprise/advanced-filter\";\n    // framework wrappers currently don't provide beans, comps etc, so no need to be modules,\n    // however i argue they should be as in theory they 'could' provide beans etc\n    ModuleNames[\"AngularModule\"] = \"@ag-grid-community/angular\";\n    ModuleNames[\"ReactModule\"] = \"@ag-grid-community/react\";\n    ModuleNames[\"VueModule\"] = \"@ag-grid-community/vue\";\n    // and then this, which is definitely not a grid module, as it should not have any dependency\n    // on the grid (ie shouldn't even reference the Module interface)\n    // ChartsModule = \"@ag-grid-community/charts-core\",\n})(ModuleNames || (ModuleNames = {}));\n","import { ModuleNames } from \"./moduleNames.mjs\";\nimport { doOnce } from \"../utils/function.mjs\";\nimport { values } from \"../utils/generic.mjs\";\nexport class ModuleRegistry {\n    /**\n     * Globally register the given module for all grids.\n     * @param module - module to register\n     */\n    static register(module) {\n        ModuleRegistry.__register(module, true, undefined);\n    }\n    /**\n     * Globally register the given modules for all grids.\n     * @param modules - modules to register\n     */\n    static registerModules(modules) {\n        ModuleRegistry.__registerModules(modules, true, undefined);\n    }\n    /** AG GRID INTERNAL - Module registration helper. */\n    static __register(module, moduleBased, gridId) {\n        ModuleRegistry.runVersionChecks(module);\n        if (gridId !== undefined) {\n            ModuleRegistry.areGridScopedModules = true;\n            if (ModuleRegistry.gridModulesMap[gridId] === undefined) {\n                ModuleRegistry.gridModulesMap[gridId] = {};\n            }\n            ModuleRegistry.gridModulesMap[gridId][module.moduleName] = module;\n        }\n        else {\n            ModuleRegistry.globalModulesMap[module.moduleName] = module;\n        }\n        ModuleRegistry.setModuleBased(moduleBased);\n    }\n    /** AG GRID INTERNAL - Unregister grid scoped module. */\n    static __unRegisterGridModules(gridId) {\n        delete ModuleRegistry.gridModulesMap[gridId];\n    }\n    /** AG GRID INTERNAL - Module registration helper. */\n    static __registerModules(modules, moduleBased, gridId) {\n        ModuleRegistry.setModuleBased(moduleBased);\n        if (!modules) {\n            return;\n        }\n        modules.forEach(module => ModuleRegistry.__register(module, moduleBased, gridId));\n    }\n    static isValidModuleVersion(module) {\n        const [moduleMajor, moduleMinor] = module.version.split('.') || [];\n        const [currentModuleMajor, currentModuleMinor] = ModuleRegistry.currentModuleVersion.split('.') || [];\n        return moduleMajor === currentModuleMajor && moduleMinor === currentModuleMinor;\n    }\n    static runVersionChecks(module) {\n        if (!ModuleRegistry.currentModuleVersion) {\n            ModuleRegistry.currentModuleVersion = module.version;\n        }\n        if (!module.version) {\n            console.error(`AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '${module.moduleName}' is incompatible. Please update all modules to the same version.`);\n        }\n        else if (!ModuleRegistry.isValidModuleVersion(module)) {\n            console.error(`AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '${module.moduleName}' is version ${module.version} but the other modules are version ${this.currentModuleVersion}. Please update all modules to the same version.`);\n        }\n        if (module.validate) {\n            const result = module.validate();\n            if (!result.isValid) {\n                const errorResult = result;\n                console.error(`AG Grid: ${errorResult.message}`);\n            }\n        }\n    }\n    static setModuleBased(moduleBased) {\n        if (ModuleRegistry.moduleBased === undefined) {\n            ModuleRegistry.moduleBased = moduleBased;\n        }\n        else {\n            if (ModuleRegistry.moduleBased !== moduleBased) {\n                doOnce(() => {\n                    console.warn(`AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.`);\n                    console.warn('Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.');\n                }, 'ModulePackageCheck');\n            }\n        }\n    }\n    /**\n     * AG GRID INTERNAL - Set if files are being served from a single UMD bundle to provide accurate enterprise upgrade steps.\n     */\n    static __setIsBundled() {\n        ModuleRegistry.isBundled = true;\n    }\n    /** AG GRID INTERNAL - Assert a given module has been register, globally or individually with this grid. */\n    static __assertRegistered(moduleName, reason, gridId) {\n        var _a;\n        if (this.__isRegistered(moduleName, gridId)) {\n            return true;\n        }\n        const warningKey = reason + moduleName;\n        let warningMessage;\n        if (ModuleRegistry.isBundled) {\n            {\n                warningMessage =\n                    `AG Grid: unable to use ${reason} as 'ag-grid-enterprise' has not been loaded. Check you are using the Enterprise bundle:\n        \n        <script src=\"https://cdn.jsdelivr.net/npm/ag-grid-enterprise@AG_GRID_VERSION/dist/ag-grid-enterprise.min.js\"></script>\n        \nFor more info see: https://ag-grid.com/javascript-data-grid/getting-started/#getting-started-with-ag-grid-enterprise`;\n            }\n        }\n        else if (ModuleRegistry.moduleBased || ModuleRegistry.moduleBased === undefined) {\n            let modName = (_a = Object.entries(ModuleNames).find(([k, v]) => v === moduleName)) === null || _a === void 0 ? void 0 : _a[0];\n            warningMessage =\n                `AG Grid: unable to use ${reason} as the ${modName} is not registered${ModuleRegistry.areGridScopedModules ? ` for gridId: ${gridId}` : ''}. Check if you have registered the module:\n           \n    import { ModuleRegistry } from '@ag-grid-community/core';\n    import { ${modName} } from '${moduleName}';\n    \n    ModuleRegistry.registerModules([ ${modName} ]);\n\nFor more info see: https://www.ag-grid.com/javascript-grid/modules/`;\n        }\n        else {\n            warningMessage =\n                `AG Grid: unable to use ${reason} as package 'ag-grid-enterprise' has not been imported. Check that you have imported the package:\n            \n    import 'ag-grid-enterprise';\n            \nFor more info see: https://www.ag-grid.com/javascript-grid/packages/`;\n        }\n        doOnce(() => {\n            console.warn(warningMessage);\n        }, warningKey);\n        return false;\n    }\n    /** AG GRID INTERNAL - Is the given module registered, globally or individually with this grid. */\n    static __isRegistered(moduleName, gridId) {\n        var _a;\n        return !!ModuleRegistry.globalModulesMap[moduleName] || !!((_a = ModuleRegistry.gridModulesMap[gridId]) === null || _a === void 0 ? void 0 : _a[moduleName]);\n    }\n    /** AG GRID INTERNAL - Get all registered modules globally / individually for this grid. */\n    static __getRegisteredModules(gridId) {\n        return [...values(ModuleRegistry.globalModulesMap), ...values(ModuleRegistry.gridModulesMap[gridId] || {})];\n    }\n    /** AG GRID INTERNAL - Get the list of modules registered individually for this grid. */\n    static __getGridRegisteredModules(gridId) {\n        var _a;\n        return values((_a = ModuleRegistry.gridModulesMap[gridId]) !== null && _a !== void 0 ? _a : {}) || [];\n    }\n    /** INTERNAL */\n    static __isPackageBased() {\n        return !ModuleRegistry.moduleBased;\n    }\n}\n// having in a map a) removes duplicates and b) allows fast lookup\nModuleRegistry.globalModulesMap = {};\nModuleRegistry.gridModulesMap = {};\nModuleRegistry.areGridScopedModules = false;\n","import { exists, values } from \"../utils/generic.mjs\";\nimport { iterateObject } from \"../utils/object.mjs\";\nimport { getFunctionName } from \"../utils/function.mjs\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry.mjs\";\nexport class Context {\n    constructor(params, logger) {\n        this.beanWrappers = {};\n        this.destroyed = false;\n        if (!params || !params.beanClasses) {\n            return;\n        }\n        this.contextParams = params;\n        this.logger = logger;\n        this.logger.log(\">> creating ag-Application Context\");\n        this.createBeans();\n        const beanInstances = this.getBeanInstances();\n        this.wireBeans(beanInstances);\n        this.logger.log(\">> ag-Application Context ready - component is alive\");\n    }\n    getBeanInstances() {\n        return values(this.beanWrappers).map(beanEntry => beanEntry.beanInstance);\n    }\n    createBean(bean, afterPreCreateCallback) {\n        if (!bean) {\n            throw Error(`Can't wire to bean since it is null`);\n        }\n        this.wireBeans([bean], afterPreCreateCallback);\n        return bean;\n    }\n    wireBeans(beanInstances, afterPreCreateCallback) {\n        this.autoWireBeans(beanInstances);\n        this.methodWireBeans(beanInstances);\n        this.callLifeCycleMethods(beanInstances, 'preConstructMethods');\n        // the callback sets the attributes, so the component has access to attributes\n        // before postConstruct methods in the component are executed\n        if (exists(afterPreCreateCallback)) {\n            beanInstances.forEach(afterPreCreateCallback);\n        }\n        this.callLifeCycleMethods(beanInstances, 'postConstructMethods');\n    }\n    createBeans() {\n        // register all normal beans\n        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));\n        // register override beans, these will overwrite beans above of same name\n        // instantiate all beans - overridden beans will be left out\n        iterateObject(this.beanWrappers, (key, beanEntry) => {\n            let constructorParamsMeta;\n            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {\n                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;\n            }\n            const constructorParams = this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);\n            const newInstance = new (beanEntry.bean.bind.apply(beanEntry.bean, [null, ...constructorParams]));\n            beanEntry.beanInstance = newInstance;\n        });\n        const createdBeanNames = Object.keys(this.beanWrappers).join(', ');\n        this.logger.log(`created beans: ${createdBeanNames}`);\n    }\n    // tslint:disable-next-line\n    createBeanWrapper(BeanClass) {\n        const metaData = BeanClass.__agBeanMetaData;\n        if (!metaData) {\n            let beanName;\n            if (BeanClass.prototype.constructor) {\n                beanName = getFunctionName(BeanClass.prototype.constructor);\n            }\n            else {\n                beanName = \"\" + BeanClass;\n            }\n            console.error(`Context item ${beanName} is not a bean`);\n            return;\n        }\n        const beanEntry = {\n            bean: BeanClass,\n            beanInstance: null,\n            beanName: metaData.beanName\n        };\n        this.beanWrappers[metaData.beanName] = beanEntry;\n    }\n    autoWireBeans(beanInstances) {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData, beanName) => {\n                const attributes = metaData.agClassAttributes;\n                if (!attributes) {\n                    return;\n                }\n                attributes.forEach((attribute) => {\n                    const otherBean = this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);\n                    beanInstance[attribute.attributeName] = otherBean;\n                });\n            });\n        });\n    }\n    methodWireBeans(beanInstances) {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData, beanName) => {\n                iterateObject(metaData.autowireMethods, (methodName, wireParams) => {\n                    // skip constructor, as this is dealt with elsewhere\n                    if (methodName === \"agConstructor\") {\n                        return;\n                    }\n                    const initParams = this.getBeansForParameters(wireParams, beanName);\n                    beanInstance[methodName].apply(beanInstance, initParams);\n                });\n            });\n        });\n    }\n    forEachMetaDataInHierarchy(beanInstance, callback) {\n        let prototype = Object.getPrototypeOf(beanInstance);\n        while (prototype != null) {\n            const constructor = prototype.constructor;\n            if (constructor.hasOwnProperty('__agBeanMetaData')) {\n                const metaData = constructor.__agBeanMetaData;\n                const beanName = this.getBeanName(constructor);\n                callback(metaData, beanName);\n            }\n            prototype = Object.getPrototypeOf(prototype);\n        }\n    }\n    getBeanName(constructor) {\n        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {\n            return constructor.__agBeanMetaData.beanName;\n        }\n        const constructorString = constructor.toString();\n        const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n        return beanName;\n    }\n    getBeansForParameters(parameters, beanName) {\n        const beansList = [];\n        if (parameters) {\n            iterateObject(parameters, (paramIndex, otherBeanName) => {\n                const otherBean = this.lookupBeanInstance(beanName, otherBeanName);\n                beansList[Number(paramIndex)] = otherBean;\n            });\n        }\n        return beansList;\n    }\n    lookupBeanInstance(wiringBean, beanName, optional = false) {\n        if (this.destroyed) {\n            this.logger.log(`AG Grid: bean reference ${beanName} is used after the grid is destroyed!`);\n            return null;\n        }\n        if (beanName === \"context\") {\n            return this;\n        }\n        if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {\n            return this.contextParams.providedBeanInstances[beanName];\n        }\n        const beanEntry = this.beanWrappers[beanName];\n        if (beanEntry) {\n            return beanEntry.beanInstance;\n        }\n        if (!optional) {\n            console.error(`AG Grid: unable to find bean reference ${beanName} while initialising ${wiringBean}`);\n        }\n        return null;\n    }\n    callLifeCycleMethods(beanInstances, lifeCycleMethod) {\n        beanInstances.forEach(beanInstance => this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod));\n    }\n    callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod, methodToIgnore) {\n        // putting all methods into a map removes duplicates\n        const allMethods = {};\n        // dump methods from each level of the metadata hierarchy\n        this.forEachMetaDataInHierarchy(beanInstance, (metaData) => {\n            const methods = metaData[lifeCycleMethod];\n            if (methods) {\n                methods.forEach(methodName => {\n                    if (methodName != methodToIgnore) {\n                        allMethods[methodName] = true;\n                    }\n                });\n            }\n        });\n        const allMethodsList = Object.keys(allMethods);\n        allMethodsList.forEach(methodName => beanInstance[methodName]());\n    }\n    getBean(name) {\n        return this.lookupBeanInstance(\"getBean\", name, true);\n    }\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        // Set before doing the destroy, so if context.destroy() gets called via another bean\n        // we are marked as destroyed already to prevent running destroy() twice\n        this.destroyed = true;\n        this.logger.log(\">> Shutting down ag-Application Context\");\n        const beanInstances = this.getBeanInstances();\n        this.destroyBeans(beanInstances);\n        this.contextParams.providedBeanInstances = null;\n        ModuleRegistry.__unRegisterGridModules(this.contextParams.gridId);\n        this.logger.log(\">> ag-Application Context shut down - component is dead\");\n    }\n    destroyBean(bean) {\n        if (!bean) {\n            return;\n        }\n        this.destroyBeans([bean]);\n    }\n    destroyBeans(beans) {\n        if (!beans) {\n            return [];\n        }\n        beans.forEach(bean => {\n            this.callLifeCycleMethodsOnBean(bean, 'preDestroyMethods', 'destroy');\n            // call destroy() explicitly if it exists\n            const beanAny = bean;\n            if (typeof beanAny.destroy === 'function') {\n                beanAny.destroy();\n            }\n        });\n        return [];\n    }\n    isDestroyed() {\n        return this.destroyed;\n    }\n    getGridId() {\n        return this.contextParams.gridId;\n    }\n}\nexport function PreConstruct(target, methodName, descriptor) {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preConstructMethods) {\n        props.preConstructMethods = [];\n    }\n    props.preConstructMethods.push(methodName);\n}\nexport function PostConstruct(target, methodName, descriptor) {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.postConstructMethods) {\n        props.postConstructMethods = [];\n    }\n    props.postConstructMethods.push(methodName);\n}\nexport function PreDestroy(target, methodName, descriptor) {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preDestroyMethods) {\n        props.preDestroyMethods = [];\n    }\n    props.preDestroyMethods.push(methodName);\n}\nexport function Bean(beanName) {\n    return (classConstructor) => {\n        const props = getOrCreateProps(classConstructor);\n        props.beanName = beanName;\n    };\n}\nexport function Autowired(name) {\n    return (target, propertyKey, descriptor) => {\n        autowiredFunc(target, name, false, target, propertyKey, null);\n    };\n}\nexport function Optional(name) {\n    return (target, propertyKey, descriptor) => {\n        autowiredFunc(target, name, true, target, propertyKey, null);\n    };\n}\nfunction autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {\n    if (name === null) {\n        console.error(\"AG Grid: Autowired name should not be null\");\n        return;\n    }\n    if (typeof index === \"number\") {\n        console.error(\"AG Grid: Autowired should be on an attribute\");\n        return;\n    }\n    // it's an attribute on the class\n    const props = getOrCreateProps(target.constructor);\n    if (!props.agClassAttributes) {\n        props.agClassAttributes = [];\n    }\n    props.agClassAttributes.push({\n        attributeName: methodOrAttributeName,\n        beanName: name,\n        optional: optional\n    });\n}\nexport function Qualifier(name) {\n    return (classPrototype, methodOrAttributeName, index) => {\n        const constructor = typeof classPrototype == \"function\" ? classPrototype : classPrototype.constructor;\n        let props;\n        if (typeof index === \"number\") {\n            // it's a parameter on a method\n            let methodName;\n            if (methodOrAttributeName) {\n                props = getOrCreateProps(constructor);\n                methodName = methodOrAttributeName;\n            }\n            else {\n                props = getOrCreateProps(constructor);\n                methodName = \"agConstructor\";\n            }\n            if (!props.autowireMethods) {\n                props.autowireMethods = {};\n            }\n            if (!props.autowireMethods[methodName]) {\n                props.autowireMethods[methodName] = {};\n            }\n            props.autowireMethods[methodName][index] = name;\n        }\n    };\n}\nfunction getOrCreateProps(target) {\n    if (!target.hasOwnProperty(\"__agBeanMetaData\")) {\n        target.__agBeanMetaData = {};\n    }\n    return target.__agBeanMetaData;\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Bean, Qualifier } from \"./context/context.mjs\";\nlet EventService = class EventService {\n    constructor() {\n        this.allSyncListeners = new Map();\n        this.allAsyncListeners = new Map();\n        this.globalSyncListeners = new Set();\n        this.globalAsyncListeners = new Set();\n        this.asyncFunctionsQueue = [];\n        this.scheduled = false;\n        // using an object performs better than a Set for the number of different events we have\n        this.firedEvents = {};\n    }\n    // because this class is used both inside the context and outside the context, we do not\n    // use autowired attributes, as that would be confusing, as sometimes the attributes\n    // would be wired, and sometimes not.\n    //\n    // the global event servers used by AG Grid is autowired by the context once, and this\n    // setBeans method gets called once.\n    //\n    // the times when this class is used outside of the context (eg RowNode has an instance of this\n    // class) then it is not a bean, and this setBeans method is not called.\n    setBeans(loggerFactory, gridOptionsService, frameworkOverrides, globalEventListener = null, globalSyncEventListener = null) {\n        this.frameworkOverrides = frameworkOverrides;\n        this.gridOptionsService = gridOptionsService;\n        if (globalEventListener) {\n            const async = gridOptionsService.useAsyncEvents();\n            this.addGlobalListener(globalEventListener, async);\n        }\n        if (globalSyncEventListener) {\n            this.addGlobalListener(globalSyncEventListener, false);\n        }\n    }\n    getListeners(eventType, async, autoCreateListenerCollection) {\n        const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n        let listeners = listenerMap.get(eventType);\n        // Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance\n        // getListeners() is also called during event dispatch even though no listeners are added. This measure protects\n        // against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after\n        // the RowComp is destroyed, see noRegisteredListenersExist() below.\n        if (!listeners && autoCreateListenerCollection) {\n            listeners = new Set();\n            listenerMap.set(eventType, listeners);\n        }\n        return listeners;\n    }\n    noRegisteredListenersExist() {\n        return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 &&\n            this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;\n    }\n    addEventListener(eventType, listener, async = false) {\n        this.getListeners(eventType, async, true).add(listener);\n    }\n    removeEventListener(eventType, listener, async = false) {\n        const listeners = this.getListeners(eventType, async, false);\n        if (!listeners) {\n            return;\n        }\n        listeners.delete(listener);\n        if (listeners.size === 0) {\n            const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n            listenerMap.delete(eventType);\n        }\n    }\n    addGlobalListener(listener, async = false) {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);\n    }\n    removeGlobalListener(listener, async = false) {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);\n    }\n    dispatchEvent(event) {\n        let agEvent = event;\n        if (this.gridOptionsService) {\n            // Apply common properties to all dispatched events if this event service has had its beans set with gridOptionsService.\n            // Note there are multiple instances of EventService that are used local to components which do not set gridOptionsService.\n            const { api, columnApi, context } = this.gridOptionsService;\n            agEvent.api = api;\n            agEvent.columnApi = columnApi;\n            agEvent.context = context;\n        }\n        this.dispatchToListeners(agEvent, true);\n        this.dispatchToListeners(agEvent, false);\n        this.firedEvents[agEvent.type] = true;\n    }\n    dispatchEventOnce(event) {\n        if (!this.firedEvents[event.type]) {\n            this.dispatchEvent(event);\n        }\n    }\n    dispatchToListeners(event, async) {\n        var _a;\n        const eventType = event.type;\n        if (async && 'event' in event) {\n            const browserEvent = event.event;\n            if (browserEvent instanceof Event) {\n                // AG-7893 - Persist composedPath() so that its result can still be accessed by the user asynchronously.\n                // Within an async event handler if they call composedPath() on the event it will always return an empty [].\n                event.eventPath = browserEvent.composedPath();\n            }\n        }\n        const processEventListeners = (listeners, originalListeners) => listeners.forEach(listener => {\n            if (!originalListeners.has(listener)) {\n                // A listener could have been removed by a previously processed listener. In this case we don't want to call \n                return;\n            }\n            if (async) {\n                this.dispatchAsync(() => listener(event));\n            }\n            else {\n                listener(event);\n            }\n        });\n        const originalListeners = (_a = this.getListeners(eventType, async, false)) !== null && _a !== void 0 ? _a : new Set();\n        // create a shallow copy to prevent listeners cyclically adding more listeners to capture this event\n        const listeners = new Set(originalListeners);\n        if (listeners.size > 0) {\n            processEventListeners(listeners, originalListeners);\n        }\n        const globalListeners = new Set(async ? this.globalAsyncListeners : this.globalSyncListeners);\n        globalListeners.forEach(listener => {\n            if (async) {\n                this.dispatchAsync(() => this.frameworkOverrides.dispatchEvent(eventType, () => listener(eventType, event), true));\n            }\n            else {\n                this.frameworkOverrides.dispatchEvent(eventType, () => listener(eventType, event), true);\n            }\n        });\n    }\n    // this gets called inside the grid's thread, for each event that it\n    // wants to set async. the grid then batches the events into one setTimeout()\n    // because setTimeout() is an expensive operation. ideally we would have\n    // each event in it's own setTimeout(), but we batch for performance.\n    dispatchAsync(func) {\n        // add to the queue for executing later in the next VM turn\n        this.asyncFunctionsQueue.push(func);\n        // check if timeout is already scheduled. the first time the grid calls\n        // this within it's thread turn, this should be false, so it will schedule\n        // the 'flush queue' method the first time it comes here. then the flag is\n        // set to 'true' so it will know it's already scheduled for subsequent calls.\n        if (!this.scheduled) {\n            // if not scheduled, schedule one\n            window.setTimeout(this.flushAsyncQueue.bind(this), 0);\n            // mark that it is scheduled\n            this.scheduled = true;\n        }\n    }\n    // this happens in the next VM turn only, and empties the queue of events\n    flushAsyncQueue() {\n        this.scheduled = false;\n        // we take a copy, because the event listener could be using\n        // the grid, which would cause more events, which would be potentially\n        // added to the queue, so safe to take a copy, the new events will\n        // get executed in a later VM turn rather than risk updating the\n        // queue as we are flushing it.\n        const queueCopy = this.asyncFunctionsQueue.slice();\n        this.asyncFunctionsQueue = [];\n        // execute the queue\n        queueCopy.forEach(func => func());\n    }\n};\n__decorate([\n    __param(0, Qualifier('loggerFactory')),\n    __param(1, Qualifier('gridOptionsService')),\n    __param(2, Qualifier('frameworkOverrides')),\n    __param(3, Qualifier('globalEventListener')),\n    __param(4, Qualifier('globalSyncEventListener'))\n], EventService.prototype, \"setBeans\", null);\nEventService = __decorate([\n    Bean('eventService')\n], EventService);\nexport { EventService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { EventService } from \"../eventService.mjs\";\nimport { exists, missing } from \"../utils/generic.mjs\";\nimport { mergeDeep } from \"../utils/object.mjs\";\nconst COL_DEF_DEFAULTS = {\n    resizable: true,\n    sortable: true\n};\nlet instanceIdSequence = 0;\nexport function getNextColInstanceId() {\n    return instanceIdSequence++;\n}\n// Wrapper around a user provide column definition. The grid treats the column definition as ready only.\n// This class contains all the runtime information about a column, plus some logic (the definition has no logic).\n// This class implements both interfaces ColumnGroupChild and ProvidedColumnGroupChild as the class can\n// appear as a child of either the original tree or the displayed tree. However the relevant group classes\n// for each type only implements one, as each group can only appear in it's associated tree (eg ProvidedColumnGroup\n// can only appear in OriginalColumn tree).\nexport class Column {\n    constructor(colDef, userProvidedColDef, colId, primary) {\n        // used by React (and possibly other frameworks) as key for rendering. also used to\n        // identify old vs new columns for destroying cols when no longer used.\n        this.instanceId = getNextColInstanceId();\n        // The measured height of this column's header when autoHeaderHeight is enabled\n        this.autoHeaderHeight = null;\n        this.moving = false;\n        this.menuVisible = false;\n        this.lastLeftPinned = false;\n        this.firstRightPinned = false;\n        this.filterActive = false;\n        this.eventService = new EventService();\n        this.tooltipEnabled = false;\n        this.rowGroupActive = false;\n        this.pivotActive = false;\n        this.aggregationActive = false;\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.colId = colId;\n        this.primary = primary;\n        this.setState(colDef);\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    setState(colDef) {\n        // sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort === 'asc' || colDef.sort === 'desc') {\n                this.sort = colDef.sort;\n            }\n        }\n        else {\n            if (colDef.initialSort === 'asc' || colDef.initialSort === 'desc') {\n                this.sort = colDef.initialSort;\n            }\n        }\n        // sortIndex\n        const sortIndex = colDef.sortIndex;\n        const initialSortIndex = colDef.initialSortIndex;\n        if (sortIndex !== undefined) {\n            if (sortIndex !== null) {\n                this.sortIndex = sortIndex;\n            }\n        }\n        else {\n            if (initialSortIndex !== null) {\n                this.sortIndex = initialSortIndex;\n            }\n        }\n        // hide\n        const hide = colDef.hide;\n        const initialHide = colDef.initialHide;\n        if (hide !== undefined) {\n            this.visible = !hide;\n        }\n        else {\n            this.visible = !initialHide;\n        }\n        // pinned\n        if (colDef.pinned !== undefined) {\n            this.setPinned(colDef.pinned);\n        }\n        else {\n            this.setPinned(colDef.initialPinned);\n        }\n        // flex\n        const flex = colDef.flex;\n        const initialFlex = colDef.initialFlex;\n        if (flex !== undefined) {\n            this.flex = flex;\n        }\n        else if (initialFlex !== undefined) {\n            this.flex = initialFlex;\n        }\n    }\n    // gets called when user provides an alternative colDef, eg\n    setColDef(colDef, userProvidedColDef, source = 'api') {\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.initMinAndMaxWidths();\n        this.initDotNotation();\n        this.initTooltip();\n        this.eventService.dispatchEvent(this.createColumnEvent('colDefChanged', source));\n    }\n    /**\n     * Returns the column definition provided by the application.\n     * This may not be correct, as items can be superseded by default column options.\n     * However it's useful for comparison, eg to know which application column definition matches that column.\n     */\n    getUserProvidedColDef() {\n        return this.userProvidedColDef;\n    }\n    setParent(parent) {\n        this.parent = parent;\n    }\n    /** Returns the parent column group, if column grouping is active. */\n    getParent() {\n        return this.parent;\n    }\n    setOriginalParent(originalParent) {\n        this.originalParent = originalParent;\n    }\n    /**\n     * Used for marryChildren, helps with comparing when duplicate groups have been created to manage split groups.\n     *\n     * Parent may contain a duplicate but not identical group when the group is split.\n     */\n    getOriginalParent() {\n        return this.originalParent;\n    }\n    // this is done after constructor as it uses gridOptionsService\n    initialise() {\n        this.initMinAndMaxWidths();\n        this.resetActualWidth('gridInitializing');\n        this.initDotNotation();\n        this.initTooltip();\n    }\n    initDotNotation() {\n        const suppressDotNotation = this.gridOptionsService.get('suppressFieldDotNotation');\n        this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;\n        this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;\n    }\n    initMinAndMaxWidths() {\n        const colDef = this.colDef;\n        this.minWidth = this.columnUtils.calculateColMinWidth(colDef);\n        this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);\n    }\n    initTooltip() {\n        this.tooltipEnabled = exists(this.colDef.tooltipField) ||\n            exists(this.colDef.tooltipValueGetter) ||\n            exists(this.colDef.tooltipComponent);\n    }\n    resetActualWidth(source = 'api') {\n        const initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);\n        this.setActualWidth(initialWidth, source, true);\n    }\n    isEmptyGroup() {\n        return false;\n    }\n    isRowGroupDisplayed(colId) {\n        if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {\n            return false;\n        }\n        const showingAllGroups = this.colDef.showRowGroup === true;\n        const showingThisGroup = this.colDef.showRowGroup === colId;\n        return showingAllGroups || showingThisGroup;\n    }\n    /** Returns `true` if column is a primary column, `false` if secondary. Secondary columns are used for pivoting. */\n    isPrimary() {\n        return this.primary;\n    }\n    /** Returns `true` if column filtering is allowed. */\n    isFilterAllowed() {\n        // filter defined means it's a string, class or true.\n        // if its false, null or undefined then it's false.\n        const filterDefined = !!this.colDef.filter;\n        return filterDefined;\n    }\n    isFieldContainsDots() {\n        return this.fieldContainsDots;\n    }\n    isTooltipEnabled() {\n        return this.tooltipEnabled;\n    }\n    isTooltipFieldContainsDots() {\n        return this.tooltipFieldContainsDots;\n    }\n    /** Add an event listener to the column. */\n    addEventListener(eventType, listener) {\n        this.eventService.addEventListener(eventType, listener);\n    }\n    /** Remove event listener from the column. */\n    removeEventListener(eventType, listener) {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n    createColumnFunctionCallbackParams(rowNode) {\n        return {\n            node: rowNode,\n            data: rowNode.data,\n            column: this,\n            colDef: this.colDef,\n            context: this.gridOptionsService.context,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi\n        };\n    }\n    isSuppressNavigable(rowNode) {\n        // if boolean set, then just use it\n        if (typeof this.colDef.suppressNavigable === 'boolean') {\n            return this.colDef.suppressNavigable;\n        }\n        // if function, then call the function to find out\n        if (typeof this.colDef.suppressNavigable === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const userFunc = this.colDef.suppressNavigable;\n            return userFunc(params);\n        }\n        return false;\n    }\n    /**\n     * Returns `true` if the cell for this column is editable for the given `rowNode`, otherwise `false`.\n     */\n    isCellEditable(rowNode) {\n        // only allow editing of groups if the user has this option enabled\n        if (rowNode.group && !this.gridOptionsService.get('enableGroupEdit')) {\n            return false;\n        }\n        return this.isColumnFunc(rowNode, this.colDef.editable);\n    }\n    isSuppressFillHandle() {\n        return !!this.colDef.suppressFillHandle;\n    }\n    isAutoHeight() {\n        return !!this.colDef.autoHeight;\n    }\n    isAutoHeaderHeight() {\n        return !!this.colDef.autoHeaderHeight;\n    }\n    isRowDrag(rowNode) {\n        return this.isColumnFunc(rowNode, this.colDef.rowDrag);\n    }\n    isDndSource(rowNode) {\n        return this.isColumnFunc(rowNode, this.colDef.dndSource);\n    }\n    isCellCheckboxSelection(rowNode) {\n        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);\n    }\n    isSuppressPaste(rowNode) {\n        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);\n    }\n    isResizable() {\n        return !!this.getColDefValue('resizable');\n    }\n    /** Get value from ColDef or default if it exists. */\n    getColDefValue(key) {\n        var _a;\n        return (_a = this.colDef[key]) !== null && _a !== void 0 ? _a : COL_DEF_DEFAULTS[key];\n    }\n    isColumnFunc(rowNode, value) {\n        // if boolean set, then just use it\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        // if function, then call the function to find out\n        if (typeof value === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const editableFunc = value;\n            return editableFunc(params);\n        }\n        return false;\n    }\n    setMoving(moving, source = \"api\") {\n        this.moving = moving;\n        this.eventService.dispatchEvent(this.createColumnEvent('movingChanged', source));\n    }\n    createColumnEvent(type, source) {\n        return {\n            type: type,\n            column: this,\n            columns: [this],\n            source: source,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        };\n    }\n    isMoving() {\n        return this.moving;\n    }\n    /** If sorting is active, returns the sort direction e.g. `'asc'` or `'desc'`. */\n    getSort() {\n        return this.sort;\n    }\n    setSort(sort, source = \"api\") {\n        if (this.sort !== sort) {\n            this.sort = sort;\n            this.eventService.dispatchEvent(this.createColumnEvent('sortChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('sort');\n    }\n    setMenuVisible(visible, source = \"api\") {\n        if (this.menuVisible !== visible) {\n            this.menuVisible = visible;\n            this.eventService.dispatchEvent(this.createColumnEvent('menuVisibleChanged', source));\n        }\n    }\n    isMenuVisible() {\n        return this.menuVisible;\n    }\n    isSortable() {\n        return !!this.getColDefValue('sortable');\n    }\n    isSortAscending() {\n        return this.sort === 'asc';\n    }\n    isSortDescending() {\n        return this.sort === 'desc';\n    }\n    isSortNone() {\n        return missing(this.sort);\n    }\n    isSorting() {\n        return exists(this.sort);\n    }\n    getSortIndex() {\n        return this.sortIndex;\n    }\n    setSortIndex(sortOrder) {\n        this.sortIndex = sortOrder;\n        this.dispatchStateUpdatedEvent('sortIndex');\n    }\n    setAggFunc(aggFunc) {\n        this.aggFunc = aggFunc;\n        this.dispatchStateUpdatedEvent('aggFunc');\n    }\n    /** If aggregation is set for the column, returns the aggregation function. */\n    getAggFunc() {\n        return this.aggFunc;\n    }\n    getLeft() {\n        return this.left;\n    }\n    getOldLeft() {\n        return this.oldLeft;\n    }\n    getRight() {\n        return this.left + this.actualWidth;\n    }\n    setLeft(left, source = \"api\") {\n        this.oldLeft = this.left;\n        if (this.left !== left) {\n            this.left = left;\n            this.eventService.dispatchEvent(this.createColumnEvent('leftChanged', source));\n        }\n    }\n    /** Returns `true` if filter is active on the column. */\n    isFilterActive() {\n        return this.filterActive;\n    }\n    // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event\n    setFilterActive(active, source = \"api\", additionalEventAttributes) {\n        if (this.filterActive !== active) {\n            this.filterActive = active;\n            this.eventService.dispatchEvent(this.createColumnEvent('filterActiveChanged', source));\n        }\n        const filterChangedEvent = this.createColumnEvent('filterChanged', source);\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n        this.eventService.dispatchEvent(filterChangedEvent);\n    }\n    /** Returns `true` when this `Column` is hovered, otherwise `false` */\n    isHovered() {\n        return this.columnHoverService.isHovered(this);\n    }\n    setPinned(pinned) {\n        if (pinned === true || pinned === 'left') {\n            this.pinned = 'left';\n        }\n        else if (pinned === 'right') {\n            this.pinned = 'right';\n        }\n        else {\n            this.pinned = null;\n        }\n        this.dispatchStateUpdatedEvent('pinned');\n    }\n    setFirstRightPinned(firstRightPinned, source = \"api\") {\n        if (this.firstRightPinned !== firstRightPinned) {\n            this.firstRightPinned = firstRightPinned;\n            this.eventService.dispatchEvent(this.createColumnEvent('firstRightPinnedChanged', source));\n        }\n    }\n    setLastLeftPinned(lastLeftPinned, source = \"api\") {\n        if (this.lastLeftPinned !== lastLeftPinned) {\n            this.lastLeftPinned = lastLeftPinned;\n            this.eventService.dispatchEvent(this.createColumnEvent('lastLeftPinnedChanged', source));\n        }\n    }\n    isFirstRightPinned() {\n        return this.firstRightPinned;\n    }\n    isLastLeftPinned() {\n        return this.lastLeftPinned;\n    }\n    isPinned() {\n        return this.pinned === 'left' || this.pinned === 'right';\n    }\n    isPinnedLeft() {\n        return this.pinned === 'left';\n    }\n    isPinnedRight() {\n        return this.pinned === 'right';\n    }\n    getPinned() {\n        return this.pinned;\n    }\n    setVisible(visible, source = \"api\") {\n        const newValue = visible === true;\n        if (this.visible !== newValue) {\n            this.visible = newValue;\n            this.eventService.dispatchEvent(this.createColumnEvent('visibleChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('hide');\n    }\n    isVisible() {\n        return this.visible;\n    }\n    isSpanHeaderHeight() {\n        const colDef = this.getColDef();\n        return !colDef.suppressSpanHeaderHeight && !colDef.autoHeaderHeight;\n    }\n    /** Returns the column definition for this column.\n     * The column definition will be the result of merging the application provided column definition with any provided defaults\n     * (e.g. `defaultColDef` grid option, or column types.\n     *\n     * Equivalent: `getDefinition` */\n    getColDef() {\n        return this.colDef;\n    }\n    getColumnGroupShow() {\n        return this.colDef.columnGroupShow;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getId`, `getUniqueId` */\n    getColId() {\n        return this.colId;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getColId`, `getUniqueId` */\n    getId() {\n        return this.colId;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getColId`, `getId` */\n    getUniqueId() {\n        return this.colId;\n    }\n    getDefinition() {\n        return this.colDef;\n    }\n    /** Returns the current width of the column. If the column is resized, the actual width is the new size. */\n    getActualWidth() {\n        return this.actualWidth;\n    }\n    getAutoHeaderHeight() {\n        return this.autoHeaderHeight;\n    }\n    /** Returns true if the header height has changed */\n    setAutoHeaderHeight(height) {\n        const changed = height !== this.autoHeaderHeight;\n        this.autoHeaderHeight = height;\n        return changed;\n    }\n    createBaseColDefParams(rowNode) {\n        const params = {\n            node: rowNode,\n            data: rowNode.data,\n            colDef: this.colDef,\n            column: this,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        };\n        return params;\n    }\n    getColSpan(rowNode) {\n        if (missing(this.colDef.colSpan)) {\n            return 1;\n        }\n        const params = this.createBaseColDefParams(rowNode);\n        const colSpan = this.colDef.colSpan(params);\n        // colSpan must be number equal to or greater than 1\n        return Math.max(colSpan, 1);\n    }\n    getRowSpan(rowNode) {\n        if (missing(this.colDef.rowSpan)) {\n            return 1;\n        }\n        const params = this.createBaseColDefParams(rowNode);\n        const rowSpan = this.colDef.rowSpan(params);\n        // rowSpan must be number equal to or greater than 1\n        return Math.max(rowSpan, 1);\n    }\n    setActualWidth(actualWidth, source = \"api\", silent = false) {\n        if (this.minWidth != null) {\n            actualWidth = Math.max(actualWidth, this.minWidth);\n        }\n        if (this.maxWidth != null) {\n            actualWidth = Math.min(actualWidth, this.maxWidth);\n        }\n        if (this.actualWidth !== actualWidth) {\n            // disable flex for this column if it was manually resized.\n            this.actualWidth = actualWidth;\n            if (this.flex && source !== 'flex' && source !== 'gridInitializing') {\n                this.flex = null;\n            }\n            if (!silent) {\n                this.fireColumnWidthChangedEvent(source);\n            }\n        }\n        this.dispatchStateUpdatedEvent('width');\n    }\n    fireColumnWidthChangedEvent(source) {\n        this.eventService.dispatchEvent(this.createColumnEvent('widthChanged', source));\n    }\n    isGreaterThanMax(width) {\n        if (this.maxWidth != null) {\n            return width > this.maxWidth;\n        }\n        return false;\n    }\n    getMinWidth() {\n        return this.minWidth;\n    }\n    getMaxWidth() {\n        return this.maxWidth;\n    }\n    getFlex() {\n        return this.flex || 0;\n    }\n    // this method should only be used by the columnModel to\n    // change flex when required by the applyColumnState method.\n    setFlex(flex) {\n        if (this.flex !== flex) {\n            this.flex = flex;\n        }\n        this.dispatchStateUpdatedEvent('flex');\n    }\n    setMinimum(source = \"api\") {\n        if (exists(this.minWidth)) {\n            this.setActualWidth(this.minWidth, source);\n        }\n    }\n    setRowGroupActive(rowGroup, source = \"api\") {\n        if (this.rowGroupActive !== rowGroup) {\n            this.rowGroupActive = rowGroup;\n            this.eventService.dispatchEvent(this.createColumnEvent('columnRowGroupChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('rowGroup');\n    }\n    /** Returns `true` if row group is currently active for this column. */\n    isRowGroupActive() {\n        return this.rowGroupActive;\n    }\n    setPivotActive(pivot, source = \"api\") {\n        if (this.pivotActive !== pivot) {\n            this.pivotActive = pivot;\n            this.eventService.dispatchEvent(this.createColumnEvent('columnPivotChanged', source));\n        }\n        this.dispatchStateUpdatedEvent('pivot');\n    }\n    /** Returns `true` if pivot is currently active for this column. */\n    isPivotActive() {\n        return this.pivotActive;\n    }\n    isAnyFunctionActive() {\n        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();\n    }\n    isAnyFunctionAllowed() {\n        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();\n    }\n    setValueActive(value, source = \"api\") {\n        if (this.aggregationActive !== value) {\n            this.aggregationActive = value;\n            this.eventService.dispatchEvent(this.createColumnEvent('columnValueChanged', source));\n        }\n    }\n    /** Returns `true` if value (aggregation) is currently active for this column. */\n    isValueActive() {\n        return this.aggregationActive;\n    }\n    isAllowPivot() {\n        return this.colDef.enablePivot === true;\n    }\n    isAllowValue() {\n        return this.colDef.enableValue === true;\n    }\n    isAllowRowGroup() {\n        return this.colDef.enableRowGroup === true;\n    }\n    getMenuTabs(defaultValues) {\n        let menuTabs = this.getColDef().menuTabs;\n        if (menuTabs == null) {\n            menuTabs = defaultValues;\n        }\n        return menuTabs;\n    }\n    dispatchStateUpdatedEvent(key) {\n        this.eventService.dispatchEvent({\n            type: Column.EVENT_STATE_UPDATED,\n            key\n        });\n    }\n}\n// + renderedHeaderCell - for making header cell transparent when moving\nColumn.EVENT_MOVING_CHANGED = 'movingChanged';\n// + renderedCell - changing left position\nColumn.EVENT_LEFT_CHANGED = 'leftChanged';\n// + renderedCell - changing width\nColumn.EVENT_WIDTH_CHANGED = 'widthChanged';\n// + renderedCell - for changing pinned classes\nColumn.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';\nColumn.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged';\n// + renderedColumn - for changing visibility icon\nColumn.EVENT_VISIBLE_CHANGED = 'visibleChanged';\n// + every time the filter changes, used in the floating filters\nColumn.EVENT_FILTER_CHANGED = 'filterChanged';\n// + renderedHeaderCell - marks the header with filter icon\nColumn.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged';\n// + renderedHeaderCell - marks the header with sort icon\nColumn.EVENT_SORT_CHANGED = 'sortChanged';\n// + renderedHeaderCell - marks the header with sort icon\nColumn.EVENT_COL_DEF_CHANGED = 'colDefChanged';\nColumn.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged';\n// + toolpanel, for gui updates\nColumn.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n// + toolpanel, for gui updates\nColumn.EVENT_PIVOT_CHANGED = 'columnPivotChanged';\n// + toolpanel, for gui updates\nColumn.EVENT_VALUE_CHANGED = 'columnValueChanged';\n// + dataTypeService - when waiting to infer cell data types\nColumn.EVENT_STATE_UPDATED = 'columnStateUpdated';\n__decorate([\n    Autowired('gridOptionsService')\n], Column.prototype, \"gridOptionsService\", void 0);\n__decorate([\n    Autowired('columnUtils')\n], Column.prototype, \"columnUtils\", void 0);\n__decorate([\n    Autowired('columnHoverService')\n], Column.prototype, \"columnHoverService\", void 0);\n__decorate([\n    PostConstruct\n], Column.prototype, \"initialise\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column, getNextColInstanceId } from \"./column.mjs\";\nimport { EventService } from \"../eventService.mjs\";\nimport { PreDestroy } from \"../context/context.mjs\";\nexport class ProvidedColumnGroup {\n    constructor(colGroupDef, groupId, padding, level) {\n        this.localEventService = new EventService();\n        this.expandable = false;\n        // used by React (and possibly other frameworks) as key for rendering. also used to\n        // identify old vs new columns for destroying cols when no longer used.\n        this.instanceId = getNextColInstanceId();\n        this.expandableListenerRemoveCallback = null;\n        this.colGroupDef = colGroupDef;\n        this.groupId = groupId;\n        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;\n        this.padding = padding;\n        this.level = level;\n    }\n    destroy() {\n        if (this.expandableListenerRemoveCallback) {\n            this.reset(null, undefined);\n        }\n    }\n    reset(colGroupDef, level) {\n        this.colGroupDef = colGroupDef;\n        this.level = level;\n        this.originalParent = null;\n        if (this.expandableListenerRemoveCallback) {\n            this.expandableListenerRemoveCallback();\n        }\n        // we use ! below, as we want to set the object back to the\n        // way it was when it was first created\n        this.children = undefined;\n        this.expandable = undefined;\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    setOriginalParent(originalParent) {\n        this.originalParent = originalParent;\n    }\n    getOriginalParent() {\n        return this.originalParent;\n    }\n    getLevel() {\n        return this.level;\n    }\n    isVisible() {\n        // return true if at least one child is visible\n        if (this.children) {\n            return this.children.some(child => child.isVisible());\n        }\n        return false;\n    }\n    isPadding() {\n        return this.padding;\n    }\n    setExpanded(expanded) {\n        this.expanded = expanded === undefined ? false : expanded;\n        const event = {\n            type: ProvidedColumnGroup.EVENT_EXPANDED_CHANGED\n        };\n        this.localEventService.dispatchEvent(event);\n    }\n    isExpandable() {\n        return this.expandable;\n    }\n    isExpanded() {\n        return this.expanded;\n    }\n    getGroupId() {\n        return this.groupId;\n    }\n    getId() {\n        return this.getGroupId();\n    }\n    setChildren(children) {\n        this.children = children;\n    }\n    getChildren() {\n        return this.children;\n    }\n    getColGroupDef() {\n        return this.colGroupDef;\n    }\n    getLeafColumns() {\n        const result = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n    addLeafColumns(leafColumns) {\n        if (!this.children) {\n            return;\n        }\n        this.children.forEach((child) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ProvidedColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n    getColumnGroupShow() {\n        const colGroupDef = this.colGroupDef;\n        if (!colGroupDef) {\n            return;\n        }\n        return colGroupDef.columnGroupShow;\n    }\n    // need to check that this group has at least one col showing when both expanded and contracted.\n    // if not, then we don't allow expanding and contracting on this group\n    setupExpandable() {\n        this.setExpandable();\n        if (this.expandableListenerRemoveCallback) {\n            this.expandableListenerRemoveCallback();\n        }\n        const listener = this.onColumnVisibilityChanged.bind(this);\n        this.getLeafColumns().forEach(col => col.addEventListener('visibleChanged', listener));\n        this.expandableListenerRemoveCallback = () => {\n            this.getLeafColumns().forEach(col => col.removeEventListener('visibleChanged', listener));\n            this.expandableListenerRemoveCallback = null;\n        };\n    }\n    setExpandable() {\n        if (this.isPadding()) {\n            return;\n        }\n        // want to make sure the group doesn't disappear when it's open\n        let atLeastOneShowingWhenOpen = false;\n        // want to make sure the group doesn't disappear when it's closed\n        let atLeastOneShowingWhenClosed = false;\n        // want to make sure the group has something to show / hide\n        let atLeastOneChangeable = false;\n        const children = this.findChildrenRemovingPadding();\n        for (let i = 0, j = children.length; i < j; i++) {\n            const abstractColumn = children[i];\n            if (!abstractColumn.isVisible()) {\n                continue;\n            }\n            // if the abstractColumn is a grid generated group, there will be no colDef\n            const headerGroupShow = abstractColumn.getColumnGroupShow();\n            if (headerGroupShow === 'open') {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneChangeable = true;\n            }\n            else if (headerGroupShow === 'closed') {\n                atLeastOneShowingWhenClosed = true;\n                atLeastOneChangeable = true;\n            }\n            else {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneShowingWhenClosed = true;\n            }\n        }\n        const expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n        if (this.expandable !== expandable) {\n            this.expandable = expandable;\n            const event = {\n                type: ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED\n            };\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n    findChildrenRemovingPadding() {\n        const res = [];\n        const process = (items) => {\n            items.forEach(item => {\n                // if padding, we add this children instead of the padding\n                const skipBecausePadding = item instanceof ProvidedColumnGroup && item.isPadding();\n                if (skipBecausePadding) {\n                    process(item.children);\n                }\n                else {\n                    res.push(item);\n                }\n            });\n        };\n        process(this.children);\n        return res;\n    }\n    onColumnVisibilityChanged() {\n        this.setExpandable();\n    }\n    addEventListener(eventType, listener) {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n}\nProvidedColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';\nProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n__decorate([\n    PreDestroy\n], ProvidedColumnGroup.prototype, \"destroy\", null);\n","export const DefaultColumnTypes = {\n    numericColumn: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell'\n    },\n    rightAligned: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell'\n    }\n};\n","import { exists, toStringOrNull } from './generic.mjs';\nexport function firstExistingValue(...values) {\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (exists(value)) {\n            return value;\n        }\n    }\n    return null;\n}\nexport function existsAndNotEmpty(value) {\n    return value != null && value.length > 0;\n}\nexport function last(arr) {\n    if (!arr || !arr.length) {\n        return;\n    }\n    return arr[arr.length - 1];\n}\nexport function areEqual(a, b, comparator) {\n    if (a == null && b == null) {\n        return true;\n    }\n    return a != null &&\n        b != null &&\n        a.length === b.length &&\n        a.every((value, index) => comparator ? comparator(value, b[index]) : b[index] === value);\n}\nexport function shallowCompare(arr1, arr2) {\n    return areEqual(arr1, arr2);\n}\nexport function sortNumerically(array) {\n    return array.sort((a, b) => a - b);\n}\nexport function removeRepeatsFromArray(array, object) {\n    if (!array) {\n        return;\n    }\n    for (let index = array.length - 2; index >= 0; index--) {\n        const thisOneMatches = array[index] === object;\n        const nextOneMatches = array[index + 1] === object;\n        if (thisOneMatches && nextOneMatches) {\n            array.splice(index + 1, 1);\n        }\n    }\n}\nexport function removeFromUnorderedArray(array, object) {\n    const index = array.indexOf(object);\n    if (index >= 0) {\n        // preserve the last element, then shorten array length by 1 to delete index\n        array[index] = array[array.length - 1];\n        array.pop();\n    }\n}\nexport function removeFromArray(array, object) {\n    const index = array.indexOf(object);\n    if (index >= 0) {\n        array.splice(index, 1);\n    }\n}\nexport function removeAllFromUnorderedArray(array, toRemove) {\n    for (let i = 0; i < toRemove.length; i++) {\n        removeFromUnorderedArray(array, toRemove[i]);\n    }\n}\nexport function removeAllFromArray(array, toRemove) {\n    for (let i = 0; i < toRemove.length; i++) {\n        removeFromArray(array, toRemove[i]);\n    }\n}\nexport function insertIntoArray(array, object, toIndex) {\n    array.splice(toIndex, 0, object);\n}\nexport function insertArrayIntoArray(dest, src, toIndex) {\n    if (dest == null || src == null) {\n        return;\n    }\n    // put items in backwards, otherwise inserted items end up in reverse order\n    for (let i = src.length - 1; i >= 0; i--) {\n        const item = src[i];\n        insertIntoArray(dest, item, toIndex);\n    }\n}\nexport function moveInArray(array, objectsToMove, toIndex) {\n    // first take out items from the array\n    removeAllFromArray(array, objectsToMove);\n    // now add the objects, in same order as provided to us, that means we start at the end\n    // as the objects will be pushed to the right as they are inserted\n    objectsToMove.slice().reverse().forEach(obj => insertIntoArray(array, obj, toIndex));\n}\nexport function includes(array, value) {\n    return array.indexOf(value) > -1;\n}\nexport function flatten(arrayOfArrays) {\n    return [].concat.apply([], arrayOfArrays);\n}\nexport function pushAll(target, source) {\n    if (source == null || target == null) {\n        return;\n    }\n    source.forEach(value => target.push(value));\n}\nexport function toStrings(array) {\n    return array.map(toStringOrNull);\n}\nexport function forEachReverse(list, action) {\n    if (list == null) {\n        return;\n    }\n    for (let i = list.length - 1; i >= 0; i--) {\n        action(list[i], i);\n    }\n}\n","import { includes } from './array.mjs';\nconst AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel', 'scroll'];\nconst supports = {};\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\nexport function stopPropagationForAgGrid(event) {\n    event[AG_GRID_STOP_PROPAGATION] = true;\n}\nexport function isStopPropagationForAgGrid(event) {\n    return event[AG_GRID_STOP_PROPAGATION] === true;\n}\nexport const isEventSupported = (() => {\n    const tags = {\n        select: 'input',\n        change: 'input',\n        submit: 'form',\n        reset: 'form',\n        error: 'img',\n        load: 'img',\n        abort: 'img'\n    };\n    const eventChecker = (eventName) => {\n        if (typeof supports[eventName] === 'boolean') {\n            return supports[eventName];\n        }\n        const el = document.createElement(tags[eventName] || 'div');\n        eventName = 'on' + eventName;\n        return supports[eventName] = (eventName in el);\n    };\n    return eventChecker;\n})();\nexport function getCtrlForEventTarget(gridOptionsService, eventTarget, type) {\n    let sourceElement = eventTarget;\n    while (sourceElement) {\n        const renderedComp = gridOptionsService.getDomData(sourceElement, type);\n        if (renderedComp) {\n            return renderedComp;\n        }\n        sourceElement = sourceElement.parentElement;\n    }\n    return null;\n}\nexport function isElementInEventPath(element, event) {\n    if (!event || !element) {\n        return false;\n    }\n    return getEventPath(event).indexOf(element) >= 0;\n}\nexport function createEventPath(event) {\n    const res = [];\n    let pointer = event.target;\n    while (pointer) {\n        res.push(pointer);\n        pointer = pointer.parentElement;\n    }\n    return res;\n}\n/**\n * Gets the path for a browser Event or from the target on an AG Grid Event\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event| { target: EventTarget }} event\n * @returns {EventTarget[]}\n */\nexport function getEventPath(event) {\n    // This can be called with either a browser event or an AG Grid Event that has a target property.\n    const eventNoType = event;\n    if (eventNoType.path) {\n        return eventNoType.path;\n    }\n    if (eventNoType.composedPath) {\n        return eventNoType.composedPath();\n    }\n    // If this is an AG Grid event build the path ourselves\n    return createEventPath(eventNoType);\n}\nexport function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {\n    const isPassive = includes(PASSIVE_EVENTS, event);\n    const options = isPassive ? { passive: true } : undefined;\n    // this check is here for certain scenarios where I believe the user must be destroying\n    // the grid somehow but continuing for it to be used\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { EventService } from \"../eventService.mjs\";\nimport { Autowired, PreDestroy } from \"./context.mjs\";\nimport { addSafePassiveEventListener } from \"../utils/event.mjs\";\nexport class BeanStub {\n    constructor() {\n        this.destroyFunctions = [];\n        this.destroyed = false;\n        // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive\n        // prevents vue from creating proxies for created objects and prevents identity related issues\n        this.__v_skip = true;\n        // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are\n        // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed\n        // points to a bean or component that was not properly disposed of.\n        // constructor() {\n        //     setTimeout(()=> {\n        //         if (this.isAlive()) {\n        //             let prototype: any = Object.getPrototypeOf(this);\n        //             const constructor: any = prototype.constructor;\n        //             const constructorString = constructor.toString();\n        //             const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n        //             console.log('is alive ' + beanName);\n        //         }\n        //     }, 5000);\n        // }\n        // Enable multiple grid properties to be updated together by the user but only trigger shared logic once.\n        // Closely related to logic in ComponentUtil.ts\n        this.lastChangeSetIdLookup = {};\n        this.propertyListenerId = 0;\n        this.isAlive = () => !this.destroyed;\n    }\n    // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean\n    getFrameworkOverrides() {\n        return this.frameworkOverrides;\n    }\n    getContext() {\n        return this.context;\n    }\n    destroy() {\n        // let prototype: any = Object.getPrototypeOf(this);\n        // const constructor: any = prototype.constructor;\n        // const constructorString = constructor.toString();\n        // const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n        this.destroyFunctions.forEach(func => func());\n        this.destroyFunctions.length = 0;\n        this.destroyed = true;\n        this.dispatchEvent({ type: BeanStub.EVENT_DESTROYED });\n    }\n    addEventListener(eventType, listener) {\n        if (!this.localEventService) {\n            this.localEventService = new EventService();\n        }\n        this.localEventService.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        if (this.localEventService) {\n            this.localEventService.removeEventListener(eventType, listener);\n        }\n    }\n    dispatchEventAsync(event) {\n        window.setTimeout(() => this.dispatchEvent(event), 0);\n    }\n    dispatchEvent(event) {\n        if (this.localEventService) {\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n    addManagedListener(object, event, listener) {\n        if (this.destroyed) {\n            return;\n        }\n        if (object instanceof HTMLElement) {\n            addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);\n        }\n        else {\n            object.addEventListener(event, listener);\n        }\n        const destroyFunc = () => {\n            object.removeEventListener(event, listener);\n            this.destroyFunctions = this.destroyFunctions.filter(fn => fn !== destroyFunc);\n            return null;\n        };\n        this.destroyFunctions.push(destroyFunc);\n        return destroyFunc;\n    }\n    setupGridOptionListener(event, listener) {\n        this.gridOptionsService.addEventListener(event, listener);\n        const destroyFunc = () => {\n            this.gridOptionsService.removeEventListener(event, listener);\n            this.destroyFunctions = this.destroyFunctions.filter((fn) => fn !== destroyFunc);\n            return null;\n        };\n        this.destroyFunctions.push(destroyFunc);\n    }\n    /**\n     * Setup a managed property listener for the given GridOption property.\n     * @param event GridOption property to listen to changes for.\n     * @param listener Listener to run when property value changes\n     */\n    addManagedPropertyListener(event, listener) {\n        if (this.destroyed) {\n            return;\n        }\n        this.setupGridOptionListener(event, listener);\n    }\n    /**\n     * Setup managed property listeners for the given set of GridOption properties.\n     * The listener will be run if any of the property changes but will only run once if\n     * multiple of the properties change within the same framework lifecycle event.\n     * Works on the basis that GridOptionsService updates all properties *before* any property change events are fired.\n     * @param events Array of GridOption properties to listen for changes too.\n     * @param listener Shared listener to run if any of the properties change\n     */\n    addManagedPropertyListeners(events, listener) {\n        if (this.destroyed) {\n            return;\n        }\n        // Ensure each set of events can run for the same changeSetId\n        const eventsKey = events.join('-') + this.propertyListenerId++;\n        const wrappedListener = (event) => {\n            if (event.changeSet) {\n                // ChangeSet is only set when the property change is part of a group of changes from ComponentUtils\n                // Direct api calls should always be run as \n                if (event.changeSet && event.changeSet.id === this.lastChangeSetIdLookup[eventsKey]) {\n                    // Already run the listener for this set of prop changes so don't run again\n                    return;\n                }\n                this.lastChangeSetIdLookup[eventsKey] = event.changeSet.id;\n            }\n            // Don't expose the underlying event value changes to the group listener.\n            const propertiesChangeEvent = {\n                type: 'gridPropertyChanged',\n                changeSet: event.changeSet,\n            };\n            listener(propertiesChangeEvent);\n        };\n        events.forEach((event) => this.setupGridOptionListener(event, wrappedListener));\n    }\n    addDestroyFunc(func) {\n        // if we are already destroyed, we execute the func now\n        if (this.isAlive()) {\n            this.destroyFunctions.push(func);\n        }\n        else {\n            func();\n        }\n    }\n    createManagedBean(bean, context) {\n        const res = this.createBean(bean, context);\n        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));\n        return res;\n    }\n    createBean(bean, context, afterPreCreateCallback) {\n        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);\n    }\n    destroyBean(bean, context) {\n        return (context || this.getContext()).destroyBean(bean);\n    }\n    destroyBeans(beans, context) {\n        if (beans) {\n            beans.forEach(bean => this.destroyBean(bean, context));\n        }\n        return [];\n    }\n}\nBeanStub.EVENT_DESTROYED = 'destroyed';\n__decorate([\n    Autowired('frameworkOverrides')\n], BeanStub.prototype, \"frameworkOverrides\", void 0);\n__decorate([\n    Autowired('context')\n], BeanStub.prototype, \"context\", void 0);\n__decorate([\n    Autowired('eventService')\n], BeanStub.prototype, \"eventService\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], BeanStub.prototype, \"gridOptionsService\", void 0);\n__decorate([\n    Autowired('localeService')\n], BeanStub.prototype, \"localeService\", void 0);\n__decorate([\n    Autowired('environment')\n], BeanStub.prototype, \"environment\", void 0);\n__decorate([\n    PreDestroy\n], BeanStub.prototype, \"destroy\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { ColumnKeyCreator } from \"./columnKeyCreator.mjs\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup.mjs\";\nimport { Column } from \"../entities/column.mjs\";\nimport { Autowired, Bean, Qualifier } from \"../context/context.mjs\";\nimport { DefaultColumnTypes } from \"../entities/defaultColumnTypes.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { iterateObject, mergeDeep } from '../utils/object.mjs';\nimport { attrToNumber, attrToBoolean } from '../utils/generic.mjs';\nimport { warnOnce } from '../utils/function.mjs';\n// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups\nlet ColumnFactory = class ColumnFactory extends BeanStub {\n    setBeans(loggerFactory) {\n        this.logger = loggerFactory.create('ColumnFactory');\n    }\n    createColumnTree(defs, primaryColumns, existingTree) {\n        // column key creator dishes out unique column id's in a deterministic way,\n        // so if we have two grids (that could be master/slave) with same column definitions,\n        // then this ensures the two grids use identical id's.\n        const columnKeyCreator = new ColumnKeyCreator();\n        const { existingCols, existingGroups, existingColKeys } = this.extractExistingTreeData(existingTree);\n        columnKeyCreator.addExistingKeys(existingColKeys);\n        // create am unbalanced tree that maps the provided definitions\n        const unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingCols, columnKeyCreator, existingGroups);\n        const treeDept = this.findMaxDept(unbalancedTree, 0);\n        this.logger.log('Number of levels for grouped columns is ' + treeDept);\n        const columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);\n        const deptFirstCallback = (child, parent) => {\n            if (child instanceof ProvidedColumnGroup) {\n                child.setupExpandable();\n            }\n            // we set the original parents at the end, rather than when we go along, as balancing the tree\n            // adds extra levels into the tree. so we can only set parents when balancing is done.\n            child.setOriginalParent(parent);\n        };\n        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);\n        return {\n            columnTree,\n            treeDept\n        };\n    }\n    extractExistingTreeData(existingTree) {\n        const existingCols = [];\n        const existingGroups = [];\n        const existingColKeys = [];\n        if (existingTree) {\n            this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, (item) => {\n                if (item instanceof ProvidedColumnGroup) {\n                    const group = item;\n                    existingGroups.push(group);\n                }\n                else {\n                    const col = item;\n                    existingColKeys.push(col.getId());\n                    existingCols.push(col);\n                }\n            });\n        }\n        return { existingCols, existingGroups, existingColKeys };\n    }\n    createForAutoGroups(autoGroupCols, gridBalancedTree) {\n        return autoGroupCols.map((col) => this.createAutoGroupTreeItem(gridBalancedTree, col));\n    }\n    createAutoGroupTreeItem(balancedColumnTree, column) {\n        const dept = this.findDepth(balancedColumnTree);\n        // at the end, this will be the top of the tree item.\n        let nextChild = column;\n        for (let i = dept - 1; i >= 0; i--) {\n            const autoGroup = new ProvidedColumnGroup(null, `FAKE_PATH_${column.getId()}}_${i}`, true, i);\n            this.createBean(autoGroup);\n            autoGroup.setChildren([nextChild]);\n            nextChild.setOriginalParent(autoGroup);\n            nextChild = autoGroup;\n        }\n        if (dept === 0) {\n            column.setOriginalParent(null);\n        }\n        // at this point, the nextChild is the top most item in the tree\n        return nextChild;\n    }\n    findDepth(balancedColumnTree) {\n        let dept = 0;\n        let pointer = balancedColumnTree;\n        while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {\n            dept++;\n            pointer = pointer[0].getChildren();\n        }\n        return dept;\n    }\n    balanceColumnTree(unbalancedTree, currentDept, columnDept, columnKeyCreator) {\n        const result = [];\n        // go through each child, for groups, recurse a level deeper,\n        // for columns we need to pad\n        for (let i = 0; i < unbalancedTree.length; i++) {\n            const child = unbalancedTree[i];\n            if (child instanceof ProvidedColumnGroup) {\n                // child is a group, all we do is go to the next level of recursion\n                const originalGroup = child;\n                const newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);\n                originalGroup.setChildren(newChildren);\n                result.push(originalGroup);\n            }\n            else {\n                // child is a column - so here we add in the padded column groups if needed\n                let firstPaddedGroup;\n                let currentPaddedGroup;\n                // this for loop will NOT run any loops if no padded column groups are needed\n                for (let j = columnDept - 1; j >= currentDept; j--) {\n                    const newColId = columnKeyCreator.getUniqueKey(null, null);\n                    const colGroupDefMerged = this.createMergedColGroupDef(null);\n                    const paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);\n                    this.createBean(paddedGroup);\n                    if (currentPaddedGroup) {\n                        currentPaddedGroup.setChildren([paddedGroup]);\n                    }\n                    currentPaddedGroup = paddedGroup;\n                    if (!firstPaddedGroup) {\n                        firstPaddedGroup = currentPaddedGroup;\n                    }\n                }\n                // likewise this if statement will not run if no padded groups\n                if (firstPaddedGroup && currentPaddedGroup) {\n                    result.push(firstPaddedGroup);\n                    const hasGroups = unbalancedTree.some(leaf => leaf instanceof ProvidedColumnGroup);\n                    if (hasGroups) {\n                        currentPaddedGroup.setChildren([child]);\n                        continue;\n                    }\n                    else {\n                        currentPaddedGroup.setChildren(unbalancedTree);\n                        break;\n                    }\n                }\n                result.push(child);\n            }\n        }\n        return result;\n    }\n    findMaxDept(treeChildren, dept) {\n        let maxDeptThisLevel = dept;\n        for (let i = 0; i < treeChildren.length; i++) {\n            const abstractColumn = treeChildren[i];\n            if (abstractColumn instanceof ProvidedColumnGroup) {\n                const originalGroup = abstractColumn;\n                const newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);\n                if (maxDeptThisLevel < newDept) {\n                    maxDeptThisLevel = newDept;\n                }\n            }\n        }\n        return maxDeptThisLevel;\n    }\n    recursivelyCreateColumns(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, existingGroups) {\n        if (!defs)\n            return [];\n        const result = new Array(defs.length);\n        for (let i = 0; i < result.length; i++) {\n            const def = defs[i];\n            if (this.isColumnGroup(def)) {\n                result[i] = this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, existingGroups);\n            }\n            else {\n                result[i] = this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator);\n            }\n        }\n        return result;\n    }\n    createColumnGroup(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, existingGroups) {\n        const colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);\n        const groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);\n        const providedGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);\n        this.createBean(providedGroup);\n        const existingGroupAndIndex = this.findExistingGroup(colGroupDef, existingGroups);\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingGroupAndIndex) {\n            existingGroups.splice(existingGroupAndIndex.idx, 1);\n        }\n        let existingGroup = existingGroupAndIndex === null || existingGroupAndIndex === void 0 ? void 0 : existingGroupAndIndex.group;\n        if (existingGroup) {\n            providedGroup.setExpanded(existingGroup.isExpanded());\n        }\n        const children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);\n        providedGroup.setChildren(children);\n        return providedGroup;\n    }\n    createMergedColGroupDef(colGroupDef) {\n        const colGroupDefMerged = {};\n        Object.assign(colGroupDefMerged, this.gridOptionsService.get('defaultColGroupDef'));\n        Object.assign(colGroupDefMerged, colGroupDef);\n        return colGroupDefMerged;\n    }\n    createColumn(primaryColumns, colDef, existingColsCopy, columnKeyCreator) {\n        // see if column already exists\n        const existingColAndIndex = this.findExistingColumn(colDef, existingColsCopy);\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingColAndIndex) {\n            existingColsCopy === null || existingColsCopy === void 0 ? void 0 : existingColsCopy.splice(existingColAndIndex.idx, 1);\n        }\n        let column = existingColAndIndex === null || existingColAndIndex === void 0 ? void 0 : existingColAndIndex.column;\n        if (!column) {\n            // no existing column, need to create one\n            const colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);\n            const colDefMerged = this.addColumnDefaultAndTypes(colDef, colId);\n            column = new Column(colDefMerged, colDef, colId, primaryColumns);\n            this.context.createBean(column);\n        }\n        else {\n            const colDefMerged = this.addColumnDefaultAndTypes(colDef, column.getColId());\n            column.setColDef(colDefMerged, colDef);\n            this.applyColumnState(column, colDefMerged);\n        }\n        this.dataTypeService.addColumnListeners(column);\n        return column;\n    }\n    applyColumnState(column, colDef) {\n        // flex\n        const flex = attrToNumber(colDef.flex);\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n        // width - we only set width if column is not flexing\n        const noFlexThisCol = column.getFlex() <= 0;\n        if (noFlexThisCol) {\n            // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\n            const width = attrToNumber(colDef.width);\n            if (width != null) {\n                column.setActualWidth(width);\n            }\n            else {\n                // otherwise set the width again, in case min or max width has changed,\n                // and width needs to be adjusted.\n                const widthBeforeUpdate = column.getActualWidth();\n                column.setActualWidth(widthBeforeUpdate);\n            }\n        }\n        // sort - anything but undefined will set sort, thus null or empty string will clear the sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort == 'asc' || colDef.sort == 'desc') {\n                column.setSort(colDef.sort);\n            }\n            else {\n                column.setSort(undefined);\n            }\n        }\n        // sorted at - anything but undefined, thus null will clear the sortIndex\n        const sortIndex = attrToNumber(colDef.sortIndex);\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n        // hide - anything but undefined, thus null will clear the hide\n        const hide = attrToBoolean(colDef.hide);\n        if (hide !== undefined) {\n            column.setVisible(!hide);\n        }\n        // pinned - anything but undefined, thus null or empty string will remove pinned\n        if (colDef.pinned !== undefined) {\n            column.setPinned(colDef.pinned);\n        }\n    }\n    findExistingColumn(newColDef, existingColsCopy) {\n        if (!existingColsCopy)\n            return undefined;\n        for (let i = 0; i < existingColsCopy.length; i++) {\n            const def = existingColsCopy[i].getUserProvidedColDef();\n            if (!def)\n                continue;\n            const newHasId = newColDef.colId != null;\n            if (newHasId) {\n                if (existingColsCopy[i].getId() === newColDef.colId) {\n                    return { idx: i, column: existingColsCopy[i] };\n                }\n                continue;\n            }\n            const newHasField = newColDef.field != null;\n            if (newHasField) {\n                if (def.field === newColDef.field) {\n                    return { idx: i, column: existingColsCopy[i] };\n                }\n                continue;\n            }\n            if (def === newColDef) {\n                return { idx: i, column: existingColsCopy[i] };\n            }\n        }\n        return undefined;\n    }\n    findExistingGroup(newGroupDef, existingGroups) {\n        const newHasId = newGroupDef.groupId != null;\n        if (!newHasId) {\n            return undefined;\n        }\n        for (let i = 0; i < existingGroups.length; i++) {\n            const existingGroup = existingGroups[i];\n            const existingDef = existingGroup.getColGroupDef();\n            if (!existingDef) {\n                continue;\n            }\n            if (existingGroup.getId() === newGroupDef.groupId) {\n                return { idx: i, group: existingGroup };\n            }\n        }\n        return undefined;\n    }\n    addColumnDefaultAndTypes(colDef, colId) {\n        // start with empty merged definition\n        const res = {};\n        // merge properties from default column definitions\n        const defaultColDef = this.gridOptionsService.get('defaultColDef');\n        mergeDeep(res, defaultColDef, false, true);\n        const columnType = this.dataTypeService.updateColDefAndGetColumnType(res, colDef, colId);\n        if (columnType) {\n            this.assignColumnTypes(columnType, res);\n        }\n        // merge properties from column definitions\n        mergeDeep(res, colDef, false, true);\n        const autoGroupColDef = this.gridOptionsService.get('autoGroupColumnDef');\n        const isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {\n            // override the sort for row group columns where the autoGroupColDef defines these values.\n            mergeDeep(res, { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort }, false, true);\n        }\n        this.dataTypeService.validateColDef(res);\n        return res;\n    }\n    assignColumnTypes(typeKeys, colDefMerged) {\n        if (!typeKeys.length) {\n            return;\n        }\n        // merge user defined with default column types\n        const allColumnTypes = Object.assign({}, DefaultColumnTypes);\n        const userTypes = this.gridOptionsService.get('columnTypes') || {};\n        iterateObject(userTypes, (key, value) => {\n            if (key in allColumnTypes) {\n                console.warn(`AG Grid: the column type '${key}' is a default column type and cannot be overridden.`);\n            }\n            else {\n                const colType = value;\n                if (colType.type) {\n                    warnOnce(`Column type definitions 'columnTypes' with a 'type' attribute are not supported ` +\n                        `because a column type cannot refer to another column type. Only column definitions ` +\n                        `'columnDefs' can use the 'type' attribute to refer to a column type.`);\n                }\n                allColumnTypes[key] = value;\n            }\n        });\n        typeKeys.forEach((t) => {\n            const typeColDef = allColumnTypes[t.trim()];\n            if (typeColDef) {\n                mergeDeep(colDefMerged, typeColDef, false, true);\n            }\n            else {\n                console.warn(\"AG Grid: colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\");\n            }\n        });\n    }\n    // if object has children, we assume it's a group\n    isColumnGroup(abstractColDef) {\n        return abstractColDef.children !== undefined;\n    }\n};\n__decorate([\n    Autowired('columnUtils')\n], ColumnFactory.prototype, \"columnUtils\", void 0);\n__decorate([\n    Autowired('dataTypeService')\n], ColumnFactory.prototype, \"dataTypeService\", void 0);\n__decorate([\n    __param(0, Qualifier('loggerFactory'))\n], ColumnFactory.prototype, \"setBeans\", null);\nColumnFactory = __decorate([\n    Bean('columnFactory')\n], ColumnFactory);\nexport { ColumnFactory };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column } from \"./column.mjs\";\nimport { EventService } from \"../eventService.mjs\";\nimport { Autowired } from \"../context/context.mjs\";\nimport { last } from \"../utils/array.mjs\";\nexport class ColumnGroup {\n    constructor(providedColumnGroup, groupId, partId, pinned) {\n        // depends on the open/closed state of the group, only displaying columns are stored here\n        this.displayedChildren = [];\n        this.localEventService = new EventService();\n        this.groupId = groupId;\n        this.partId = partId;\n        this.providedColumnGroup = providedColumnGroup;\n        this.pinned = pinned;\n    }\n    // this is static, a it is used outside of this class\n    static createUniqueId(groupId, instanceId) {\n        return groupId + '_' + instanceId;\n    }\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    reset() {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    }\n    getParent() {\n        return this.parent;\n    }\n    setParent(parent) {\n        this.parent = parent;\n    }\n    getUniqueId() {\n        return ColumnGroup.createUniqueId(this.groupId, this.partId);\n    }\n    isEmptyGroup() {\n        return this.displayedChildren.length === 0;\n    }\n    isMoving() {\n        const allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) {\n            return false;\n        }\n        return allLeafColumns.every(col => col.isMoving());\n    }\n    checkLeft() {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren.forEach((child) => {\n            if (child instanceof ColumnGroup) {\n                child.checkLeft();\n            }\n        });\n        // set our left based on first displayed column\n        if (this.displayedChildren.length > 0) {\n            if (this.gridOptionsService.get('enableRtl')) {\n                const lastChild = last(this.displayedChildren);\n                const lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            }\n            else {\n                const firstChildLeft = this.displayedChildren[0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        }\n        else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    }\n    getLeft() {\n        return this.left;\n    }\n    getOldLeft() {\n        return this.oldLeft;\n    }\n    setLeft(left) {\n        this.oldLeft = left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    }\n    getPinned() {\n        return this.pinned;\n    }\n    createAgEvent(type) {\n        return { type };\n    }\n    addEventListener(eventType, listener) {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n    getGroupId() {\n        return this.groupId;\n    }\n    getPartId() {\n        return this.partId;\n    }\n    isChildInThisGroupDeepSearch(wantedChild) {\n        let result = false;\n        this.children.forEach((foundChild) => {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n        return result;\n    }\n    getActualWidth() {\n        let groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach((child) => {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    }\n    isResizable() {\n        if (!this.displayedChildren) {\n            return false;\n        }\n        // if at least one child is resizable, then the group is resizable\n        let result = false;\n        this.displayedChildren.forEach((child) => {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n        return result;\n    }\n    getMinWidth() {\n        let result = 0;\n        this.displayedChildren.forEach((groupChild) => {\n            result += groupChild.getMinWidth() || 0;\n        });\n        return result;\n    }\n    addChild(child) {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    }\n    getDisplayedChildren() {\n        return this.displayedChildren;\n    }\n    getLeafColumns() {\n        const result = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n    getDisplayedLeafColumns() {\n        const result = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    }\n    getDefinition() {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n    getColGroupDef() {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n    isPadding() {\n        return this.providedColumnGroup.isPadding();\n    }\n    isExpandable() {\n        return this.providedColumnGroup.isExpandable();\n    }\n    isExpanded() {\n        return this.providedColumnGroup.isExpanded();\n    }\n    setExpanded(expanded) {\n        this.providedColumnGroup.setExpanded(expanded);\n    }\n    addDisplayedLeafColumns(leafColumns) {\n        this.displayedChildren.forEach((child) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ColumnGroup) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    }\n    addLeafColumns(leafColumns) {\n        this.children.forEach((child) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            }\n            else if (child instanceof ColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n    getChildren() {\n        return this.children;\n    }\n    getColumnGroupShow() {\n        return this.providedColumnGroup.getColumnGroupShow();\n    }\n    getProvidedColumnGroup() {\n        return this.providedColumnGroup;\n    }\n    getPaddingLevel() {\n        const parent = this.getParent();\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\n            return 0;\n        }\n        return 1 + parent.getPaddingLevel();\n    }\n    calculateDisplayedColumns() {\n        // clear out last time we calculated\n        this.displayedChildren = [];\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        let parentWithExpansion = this;\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n            parentWithExpansion = parentWithExpansion.getParent();\n        }\n        const isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n            return;\n        }\n        // Add cols based on columnGroupShow\n        // Note - the below also adds padding groups, these are always added because they never have\n        // colDef.columnGroupShow set.\n        this.children.forEach(child => {\n            // never add empty groups\n            const emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);\n            if (emptyGroup) {\n                return;\n            }\n            const headerGroupShow = child.getColumnGroupShow();\n            switch (headerGroupShow) {\n                case 'open':\n                    // when set to open, only show col if group is open\n                    if (parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren.push(child);\n                    }\n                    break;\n                case 'closed':\n                    // when set to open, only show col if group is open\n                    if (!parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren.push(child);\n                    }\n                    break;\n                default:\n                    this.displayedChildren.push(child);\n                    break;\n            }\n        });\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    }\n}\nColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';\nColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n__decorate([\n    Autowired('gridOptionsService')\n], ColumnGroup.prototype, \"gridOptionsService\", void 0);\n","export class Events {\n}\n/** Everything has changed with the columns. Either complete new set of columns set, or user called applyColumnState() */\n/** @deprecated - grid no longer uses this, and setSate() also fires individual events */\nEvents.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';\n/** User has set in new columns. */\nEvents.EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';\n/** The pivot mode flag was changed */\nEvents.EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';\n/** A row group column was added, removed or order changed. */\nEvents.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n/** expandAll / collapseAll was called from the api. */\nEvents.EVENT_EXPAND_COLLAPSE_ALL = 'expandOrCollapseAll';\n/** A pivot column was added, removed or order changed. */\nEvents.EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';\n/** The list of grid columns has changed. */\nEvents.EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';\n/** A value column was added, removed or agg function was changed. */\nEvents.EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';\n/** A column was moved */\nEvents.EVENT_COLUMN_MOVED = 'columnMoved';\n/** One or more columns was shown / hidden */\nEvents.EVENT_COLUMN_VISIBLE = 'columnVisible';\n/** One or more columns was pinned / unpinned*/\nEvents.EVENT_COLUMN_PINNED = 'columnPinned';\n/** A column group was opened / closed */\nEvents.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';\n/** One or more columns was resized. If just one, the column in the event is set. */\nEvents.EVENT_COLUMN_RESIZED = 'columnResized';\n/** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */\nEvents.EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';\n/** The grid option related to suppressing movable columns has changed */\nEvents.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED = 'suppressMovableColumns';\n/** The grid option related to suppressing column group selection has changed */\nEvents.EVENT_SUPPRESS_MENU_HIDE_CHANGED = 'suppressMenuHide';\n/** The grid option related to suppressing movable columns has changed */\nEvents.EVENT_SUPPRESS_FIELD_DOT_NOTATION = 'suppressFieldDotNotation';\n/** The list of virtual columns has changed, results from viewport changing */\nEvents.EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';\n/** Async Transactions Executed */\nEvents.EVENT_ASYNC_TRANSACTIONS_FLUSHED = 'asyncTransactionsFlushed';\n/** A row group was opened / closed */\nEvents.EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';\n/** Client-Side Row Model only. The client has updated data for the grid */\nEvents.EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';\n/** The client has set new floating data into the grid */\nEvents.EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';\n/** Range selection has changed */\nEvents.EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';\n/** Chart was created */\nEvents.EVENT_CHART_CREATED = 'chartCreated';\n/** Chart Range selection has changed */\nEvents.EVENT_CHART_RANGE_SELECTION_CHANGED = 'chartRangeSelectionChanged';\n/** Chart Options have changed */\nEvents.EVENT_CHART_OPTIONS_CHANGED = 'chartOptionsChanged';\n/** Chart was destroyed */\nEvents.EVENT_CHART_DESTROYED = 'chartDestroyed';\n/** For when the tool panel is shown / hidden */\nEvents.EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';\nEvents.EVENT_TOOL_PANEL_SIZE_CHANGED = 'toolPanelSizeChanged';\nEvents.EVENT_COLUMN_PANEL_ITEM_DRAG_START = 'columnPanelItemDragStart';\nEvents.EVENT_COLUMN_PANEL_ITEM_DRAG_END = 'columnPanelItemDragEnd';\n/** Model was updated - grid updates the drawn rows when this happens */\nEvents.EVENT_MODEL_UPDATED = 'modelUpdated';\nEvents.EVENT_CUT_START = 'cutStart';\nEvents.EVENT_CUT_END = 'cutEnd';\nEvents.EVENT_PASTE_START = 'pasteStart';\nEvents.EVENT_PASTE_END = 'pasteEnd';\nEvents.EVENT_FILL_START = 'fillStart';\nEvents.EVENT_FILL_END = 'fillEnd';\nEvents.EVENT_RANGE_DELETE_START = 'rangeDeleteStart';\nEvents.EVENT_RANGE_DELETE_END = 'rangeDeleteEnd';\n/** Undo operation has started. */\nEvents.EVENT_UNDO_STARTED = 'undoStarted';\n/** Undo operation has ended. */\nEvents.EVENT_UNDO_ENDED = 'undoEnded';\n/** Redo operation has started. */\nEvents.EVENT_REDO_STARTED = 'redoStarted';\n/** Redo operation has ended. */\nEvents.EVENT_REDO_ENDED = 'redoEnded';\nEvents.EVENT_KEY_SHORTCUT_CHANGED_CELL_START = 'keyShortcutChangedCellStart';\nEvents.EVENT_KEY_SHORTCUT_CHANGED_CELL_END = 'keyShortcutChangedCellEnd';\nEvents.EVENT_CELL_CLICKED = 'cellClicked';\nEvents.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';\nEvents.EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';\nEvents.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';\nEvents.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';\nEvents.EVENT_CELL_EDIT_REQUEST = 'cellEditRequest';\nEvents.EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';\nEvents.EVENT_CELL_FOCUSED = 'cellFocused';\nEvents.EVENT_CELL_FOCUS_CLEARED = 'cellFocusCleared';\nEvents.EVENT_FULL_WIDTH_ROW_FOCUSED = 'fullWidthRowFocused';\nEvents.EVENT_ROW_SELECTED = 'rowSelected';\nEvents.EVENT_SELECTION_CHANGED = 'selectionChanged';\nEvents.EVENT_TOOLTIP_SHOW = 'tooltipShow';\nEvents.EVENT_TOOLTIP_HIDE = 'tooltipHide';\nEvents.EVENT_CELL_KEY_DOWN = 'cellKeyDown';\nEvents.EVENT_CELL_MOUSE_OVER = 'cellMouseOver';\nEvents.EVENT_CELL_MOUSE_OUT = 'cellMouseOut';\n/** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */\nEvents.EVENT_FILTER_CHANGED = 'filterChanged';\n/** Filter was change but not applied. Only useful if apply buttons are used in filters. */\nEvents.EVENT_FILTER_MODIFIED = 'filterModified';\nEvents.EVENT_FILTER_OPENED = 'filterOpened';\nEvents.EVENT_ADVANCED_FILTER_BUILDER_VISIBLE_CHANGED = 'advancedFilterBuilderVisibleChanged';\nEvents.EVENT_SORT_CHANGED = 'sortChanged';\n/** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */\nEvents.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';\nEvents.EVENT_ROW_CLICKED = 'rowClicked';\nEvents.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';\n/** Gets called once after the grid has finished initialising. */\nEvents.EVENT_GRID_READY = 'gridReady';\n/** Called once when the grid is about to get destroyed. */\nEvents.EVENT_GRID_PRE_DESTROYED = 'gridPreDestroyed';\n/** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's\n * changed, so always filling the space it was given. */\nEvents.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';\n/** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */\nEvents.EVENT_VIEWPORT_CHANGED = 'viewportChanged';\n/* The width of the scrollbar has been calculated */\nEvents.EVENT_SCROLLBAR_WIDTH_CHANGED = 'scrollbarWidthChanged';\n/** Rows were rendered for the first time (ie on async data load). */\nEvents.EVENT_FIRST_DATA_RENDERED = 'firstDataRendered';\n/** A column drag has started, either resizing a column or moving a column. */\nEvents.EVENT_DRAG_STARTED = 'dragStarted';\n/** A column drag has stopped */\nEvents.EVENT_DRAG_STOPPED = 'dragStopped';\nEvents.EVENT_CHECKBOX_CHANGED = 'checkboxChanged';\nEvents.EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';\nEvents.EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';\nEvents.EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';\nEvents.EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';\n/** Main body of grid has scrolled, either horizontally or vertically */\nEvents.EVENT_BODY_SCROLL = 'bodyScroll';\n/** Main body of the grid has stopped scrolling, either horizontally or vertically */\nEvents.EVENT_BODY_SCROLL_END = 'bodyScrollEnd';\nEvents.EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';\n/** The displayed page for pagination has changed. For example the data was filtered or sorted,\n * or the user has moved to a different page. */\nEvents.EVENT_PAGINATION_CHANGED = 'paginationChanged';\n/** Only used by React, Angular, Web Components and VueJS AG Grid components\n * (not used if doing plain JavaScript). If the grid receives changes due\n * to bound properties, this event fires after the grid has finished processing the change. */\nEvents.EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';\n/** Only used by the SSRM, called when the grid has no more rows to refresh */\nEvents.EVENT_STORE_REFRESHED = 'storeRefreshed';\nEvents.EVENT_STATE_UPDATED = 'stateUpdated';\n/*****************************  INTERNAL EVENTS: START ******************************************* */\n/** Please remember to add to ComponentUtil.EXCLUDED_INTERNAL_EVENTS to not have these events exposed to framework components. */\n/** All items from here down are used internally by the grid, not intended for external use. */\n// not documented, either experimental, or we just don't want users using an depending on them\nEvents.EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';\nEvents.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';\nEvents.EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';\nEvents.EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';\nEvents.EVENT_FLASH_CELLS = 'flashCells';\nEvents.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = 'paginationPixelOffsetChanged';\nEvents.EVENT_DISPLAYED_ROWS_CHANGED = 'displayedRowsChanged';\nEvents.EVENT_LEFT_PINNED_WIDTH_CHANGED = 'leftPinnedWidthChanged';\nEvents.EVENT_RIGHT_PINNED_WIDTH_CHANGED = 'rightPinnedWidthChanged';\nEvents.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = 'rowContainerHeightChanged';\nEvents.EVENT_HEADER_HEIGHT_CHANGED = 'headerHeightChanged';\nEvents.EVENT_COLUMN_HEADER_HEIGHT_CHANGED = 'columnHeaderHeightChanged';\nEvents.EVENT_ROW_DRAG_ENTER = 'rowDragEnter';\nEvents.EVENT_ROW_DRAG_MOVE = 'rowDragMove';\nEvents.EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';\nEvents.EVENT_ROW_DRAG_END = 'rowDragEnd';\n// environment\nEvents.EVENT_GRID_STYLES_CHANGED = 'gridStylesChanged';\n// primarily for charts\nEvents.EVENT_POPUP_TO_FRONT = 'popupToFront';\n// these are used for server side group and agg - only used by CS with Viewport Row Model - intention is\n// to design these better around server side functions and then release to general public when fully working with\n// all the row models.\nEvents.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';\nEvents.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';\nEvents.EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';\nEvents.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';\nEvents.EVENT_STORE_UPDATED = 'storeUpdated';\nEvents.EVENT_FILTER_DESTROYED = 'filterDestroyed';\nEvents.EVENT_ROW_DATA_UPDATE_STARTED = 'rowDataUpdateStarted';\nEvents.EVENT_ROW_COUNT_READY = 'rowCountReady';\n// Advanced Filters\nEvents.EVENT_ADVANCED_FILTER_ENABLED_CHANGED = 'advancedFilterEnabledChanged';\nEvents.EVENT_DATA_TYPES_INFERRED = 'dataTypesInferred';\n// Widgets\nEvents.EVENT_FIELD_VALUE_CHANGED = 'fieldValueChanged';\nEvents.EVENT_FIELD_PICKER_VALUE_SELECTED = 'fieldPickerValueSelected';\nEvents.EVENT_SIDE_BAR_UPDATED = 'sideBarUpdated';\n","// class returns unique instance id's for columns.\n// eg, the following calls (in this order) will result in:\n//\n// getInstanceIdForKey('country') => 0\n// getInstanceIdForKey('country') => 1\n// getInstanceIdForKey('country') => 2\n// getInstanceIdForKey('country') => 3\n// getInstanceIdForKey('age') => 0\n// getInstanceIdForKey('age') => 1\n// getInstanceIdForKey('country') => 4\nexport class GroupInstanceIdCreator {\n    constructor() {\n        // this map contains keys to numbers, so we remember what the last call was\n        this.existingIds = {};\n    }\n    getInstanceIdForKey(key) {\n        const lastResult = this.existingIds[key];\n        let result;\n        if (typeof lastResult !== 'number') {\n            // first time this key\n            result = 0;\n        }\n        else {\n            result = lastResult + 1;\n        }\n        this.existingIds[key] = result;\n        return result;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context.mjs\";\nimport { Column } from \"../entities/column.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { mergeDeep } from \"../utils/object.mjs\";\nimport { missing } from \"../utils/generic.mjs\";\nexport const GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';\nlet AutoGroupColService = class AutoGroupColService extends BeanStub {\n    createAutoGroupColumns(rowGroupColumns) {\n        const groupAutoColumns = [];\n        const doingTreeData = this.gridOptionsService.get('treeData');\n        let doingMultiAutoColumn = this.gridOptionsService.isGroupMultiAutoColumn();\n        if (doingTreeData && doingMultiAutoColumn) {\n            console.warn('AG Grid: you cannot mix groupDisplayType = \"multipleColumns\" with treeData, only one column can be used to display groups when doing tree data');\n            doingMultiAutoColumn = false;\n        }\n        // if doing groupDisplayType = \"multipleColumns\", then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupColumns.forEach((rowGroupCol, index) => {\n                groupAutoColumns.push(this.createOneAutoGroupColumn(rowGroupCol, index));\n            });\n        }\n        else {\n            groupAutoColumns.push(this.createOneAutoGroupColumn());\n        }\n        return groupAutoColumns;\n    }\n    updateAutoGroupColumns(autoGroupColumns) {\n        autoGroupColumns.forEach((column, index) => this.updateOneAutoGroupColumn(column, index));\n    }\n    // rowGroupCol and index are missing if groupDisplayType != \"multipleColumns\"\n    createOneAutoGroupColumn(rowGroupCol, index) {\n        // if doing multi, set the field\n        let colId;\n        if (rowGroupCol) {\n            colId = `${GROUP_AUTO_COLUMN_ID}-${rowGroupCol.getId()}`;\n        }\n        else {\n            colId = GROUP_AUTO_COLUMN_ID;\n        }\n        const colDef = this.createAutoGroupColDef(colId, rowGroupCol, index);\n        colDef.colId = colId;\n        const newCol = new Column(colDef, null, colId, true);\n        this.context.createBean(newCol);\n        return newCol;\n    }\n    /**\n     * Refreshes an auto group col to load changes from defaultColDef or autoGroupColDef\n     */\n    updateOneAutoGroupColumn(colToUpdate, index) {\n        const oldColDef = colToUpdate.getColDef();\n        const underlyingColId = typeof oldColDef.showRowGroup == 'string' ? oldColDef.showRowGroup : undefined;\n        const underlyingColumn = underlyingColId != null ? this.columnModel.getPrimaryColumn(underlyingColId) : undefined;\n        const colDef = this.createAutoGroupColDef(colToUpdate.getId(), underlyingColumn !== null && underlyingColumn !== void 0 ? underlyingColumn : undefined, index);\n        colToUpdate.setColDef(colDef, null);\n        this.columnFactory.applyColumnState(colToUpdate, colDef);\n    }\n    createAutoGroupColDef(colId, underlyingColumn, index) {\n        // if one provided by user, use it, otherwise create one\n        let res = this.createBaseColDef(underlyingColumn);\n        const autoGroupColumnDef = this.gridOptionsService.get('autoGroupColumnDef');\n        mergeDeep(res, autoGroupColumnDef);\n        res = this.columnFactory.addColumnDefaultAndTypes(res, colId);\n        // For tree data the filter is always allowed\n        if (!this.gridOptionsService.get('treeData')) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            const noFieldOrValueGetter = missing(res.field) &&\n                missing(res.valueGetter) &&\n                missing(res.filterValueGetter) &&\n                res.filter !== 'agGroupColumnFilter';\n            if (noFieldOrValueGetter) {\n                res.filter = false;\n            }\n        }\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            res.headerCheckboxSelection = false;\n        }\n        const isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        const hasOwnData = res.valueGetter || res.field != null;\n        if (isSortingCoupled && !hasOwnData) {\n            // if col is coupled sorting, and has sort attribute, we want to ignore this\n            // because we only accept the sort on creation of the col\n            res.sortIndex = undefined;\n            res.initialSort = undefined;\n        }\n        return res;\n    }\n    createBaseColDef(rowGroupCol) {\n        const userDef = this.gridOptionsService.get('autoGroupColumnDef');\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const res = {\n            headerName: localeTextFunc('group', 'Group')\n        };\n        const userHasProvidedGroupCellRenderer = userDef &&\n            (userDef.cellRenderer || userDef.cellRendererSelector);\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            res.cellRenderer = 'agGroupCellRenderer';\n        }\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n        if (rowGroupCol) {\n            const colDef = rowGroupCol.getColDef();\n            Object.assign(res, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: colDef.headerValueGetter\n            });\n            if (colDef.cellRenderer) {\n                Object.assign(res, {\n                    cellRendererParams: {\n                        innerRenderer: colDef.cellRenderer,\n                        innerRendererParams: colDef.cellRendererParams\n                    }\n                });\n            }\n            res.showRowGroup = rowGroupCol.getColId();\n        }\n        else {\n            res.showRowGroup = true;\n        }\n        return res;\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], AutoGroupColService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('columnFactory')\n], AutoGroupColService.prototype, \"columnFactory\", void 0);\nAutoGroupColService = __decorate([\n    Bean('autoGroupColService')\n], AutoGroupColService);\nexport { AutoGroupColService };\n","const reUnescapedHtml = /[&<>\"']/g;\n/**\n * HTML Escapes.\n */\nconst HTML_ESCAPES = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\nexport function utf8_encode(s) {\n    const stringFromCharCode = String.fromCharCode;\n    function ucs2decode(string) {\n        const output = [];\n        if (!string) {\n            return [];\n        }\n        const len = string.length;\n        let counter = 0;\n        let value;\n        let extra;\n        while (counter < len) {\n            value = string.charCodeAt(counter++);\n            if (value >= 0xD800 && value <= 0xDBFF && counter < len) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                }\n                else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                }\n            }\n            else {\n                output.push(value);\n            }\n        }\n        return output;\n    }\n    function checkScalarValue(point) {\n        if (point >= 0xD800 && point <= 0xDFFF) {\n            throw Error('Lone surrogate U+' + point.toString(16).toUpperCase() +\n                ' is not a scalar value');\n        }\n    }\n    function createByte(point, shift) {\n        return stringFromCharCode(((point >> shift) & 0x3F) | 0x80);\n    }\n    function encodeCodePoint(point) {\n        if ((point >= 0 && point <= 31 && point !== 10)) {\n            const convertedCode = point.toString(16).toUpperCase();\n            const paddedCode = convertedCode.padStart(4, '0');\n            return `_x${paddedCode}_`;\n        }\n        if ((point & 0xFFFFFF80) == 0) { // 1-byte sequence\n            return stringFromCharCode(point);\n        }\n        let symbol = '';\n        if ((point & 0xFFFFF800) == 0) { // 2-byte sequence\n            symbol = stringFromCharCode(((point >> 6) & 0x1F) | 0xC0);\n        }\n        else if ((point & 0xFFFF0000) == 0) { // 3-byte sequence\n            checkScalarValue(point);\n            symbol = stringFromCharCode(((point >> 12) & 0x0F) | 0xE0);\n            symbol += createByte(point, 6);\n        }\n        else if ((point & 0xFFE00000) == 0) { // 4-byte sequence\n            symbol = stringFromCharCode(((point >> 18) & 0x07) | 0xF0);\n            symbol += createByte(point, 12);\n            symbol += createByte(point, 6);\n        }\n        symbol += stringFromCharCode((point & 0x3F) | 0x80);\n        return symbol;\n    }\n    const codePoints = ucs2decode(s);\n    const length = codePoints.length;\n    let index = -1;\n    let codePoint;\n    let byteString = '';\n    while (++index < length) {\n        codePoint = codePoints[index];\n        byteString += encodeCodePoint(codePoint);\n    }\n    return byteString;\n}\nexport function capitalise(str) {\n    return str[0].toUpperCase() + str.substring(1).toLowerCase();\n}\nexport function escapeString(toEscape, skipEscapingHtmlChars) {\n    if (toEscape == null) {\n        return null;\n    }\n    // we call toString() twice, in case value is an object, where user provides\n    // a toString() method, and first call to toString() returns back something other\n    // than a string (eg a number to render)\n    const stringResult = toEscape.toString().toString();\n    if (skipEscapingHtmlChars) {\n        return stringResult;\n    }\n    // in react we don't need to escape html characters, as it's done by the framework\n    return stringResult.replace(reUnescapedHtml, chr => HTML_ESCAPES[chr]);\n}\n/**\n * Converts a camelCase string into startCase\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHumanText(camelCase) {\n    if (!camelCase || camelCase == null) {\n        return null;\n    }\n    // either split on a lowercase followed by uppercase ie  asHereTo -> as Here To\n    const rex = /([a-z])([A-Z])/g;\n    // or starts with uppercase and we take all expect the last which is assumed to be part of next word if followed by lowercase HEREToThere -> HERE To There\n    const rexCaps = /([A-Z]+)([A-Z])([a-z])/g;\n    const words = camelCase\n        .replace(rex, '$1 $2')\n        .replace(rexCaps, '$1 $2$3')\n        .replace(/\\./g, ' ')\n        .split(' ');\n    return words.map(word => word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : '')).join(' ');\n}\n/**\n * Converts a camelCase string into hyphenated string\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHyphenated(camelCase) {\n    return camelCase.replace(/[A-Z]/g, s => `-${s.toLocaleLowerCase()}`);\n}\n","export function convertToMap(arr) {\n    const map = new Map();\n    arr.forEach(pair => map.set(pair[0], pair[1]));\n    return map;\n}\n// handy for organising a list into a map, where each item is mapped by an attribute, eg mapping Columns by ID\nexport function mapById(arr, callback) {\n    const map = new Map();\n    arr.forEach(item => map.set(callback(item), item));\n    return map;\n}\nexport function keys(map) {\n    const arr = [];\n    map.forEach((_, key) => arr.push(key));\n    return arr;\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { ColumnGroup } from '../entities/columnGroup.mjs';\nimport { Column } from '../entities/column.mjs';\nimport { Events } from '../events.mjs';\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { ProvidedColumnGroup } from '../entities/providedColumnGroup.mjs';\nimport { GroupInstanceIdCreator } from './groupInstanceIdCreator.mjs';\nimport { Autowired, Bean, Optional, PostConstruct, PreDestroy, Qualifier } from '../context/context.mjs';\nimport { GROUP_AUTO_COLUMN_ID } from './autoGroupColService.mjs';\nimport { areEqual, last, removeFromArray, moveInArray, includes, insertIntoArray, removeAllFromUnorderedArray, removeFromUnorderedArray } from '../utils/array.mjs';\nimport { missingOrEmpty, exists, missing, attrToBoolean, attrToNumber } from '../utils/generic.mjs';\nimport { camelCaseToHumanText } from '../utils/string.mjs';\nimport { convertToMap } from '../utils/map.mjs';\nimport { warnOnce } from '../utils/function.mjs';\nlet ColumnModel = class ColumnModel extends BeanStub {\n    constructor() {\n        super(...arguments);\n        // header row count, based on user provided columns\n        this.primaryHeaderRowCount = 0;\n        this.secondaryHeaderRowCount = 0;\n        // header row count, either above, or based on pivoting if we are pivoting\n        this.gridHeaderRowCount = 0;\n        // leave level columns of the displayed trees\n        this.displayedColumnsLeft = [];\n        this.displayedColumnsRight = [];\n        this.displayedColumnsCenter = [];\n        // all three lists above combined\n        this.displayedColumns = [];\n        // for fast lookup, to see if a column or group is still displayed\n        this.displayedColumnsAndGroupsMap = {};\n        // all columns to be rendered\n        this.viewportColumns = [];\n        // A hash key to keep track of changes in viewport columns\n        this.viewportColumnsHash = '';\n        // same as viewportColumns, except we always include columns with headerAutoHeight\n        this.headerViewportColumns = [];\n        // all columns to be rendered in the centre\n        this.viewportColumnsCenter = [];\n        // same as viewportColumnsCenter, except we always include columns with headerAutoHeight\n        this.headerViewportColumnsCenter = [];\n        this.autoHeightActiveAtLeastOnce = false;\n        this.rowGroupColumns = [];\n        this.valueColumns = [];\n        this.pivotColumns = [];\n        this.ready = false;\n        this.autoGroupsNeedBuilding = false;\n        this.forceRecreateAutoGroups = false;\n        this.pivotMode = false;\n        this.bodyWidth = 0;\n        this.leftWidth = 0;\n        this.rightWidth = 0;\n        this.bodyWidthDirty = true;\n        // when we're waiting for cell data types to be inferred, we need to defer column resizing\n        this.shouldQueueResizeOperations = false;\n        this.resizeOperationQueue = [];\n    }\n    init() {\n        this.suppressColumnVirtualisation = this.gridOptionsService.get('suppressColumnVirtualisation');\n        const pivotMode = this.gridOptionsService.get('pivotMode');\n        if (this.isPivotSettingAllowed(pivotMode)) {\n            this.pivotMode = pivotMode;\n        }\n        this.addManagedPropertyListeners(['groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'], () => this.buildAutoGroupColumns());\n        this.addManagedPropertyListener('autoGroupColumnDef', () => this.onAutoGroupColumnDefChanged());\n        this.addManagedPropertyListeners(['defaultColDef', 'columnTypes', 'suppressFieldDotNotation'], (params) => this.onSharedColDefChanged(params.source));\n        this.addManagedPropertyListener('pivotMode', () => this.setPivotMode(this.gridOptionsService.get('pivotMode')));\n        this.addManagedListener(this.eventService, Events.EVENT_FIRST_DATA_RENDERED, () => this.onFirstDataRendered());\n    }\n    buildAutoGroupColumns() {\n        // Possible for update to be called before columns are present in which case there is nothing to do here.\n        if (!this.columnDefs) {\n            return;\n        }\n        this.autoGroupsNeedBuilding = true;\n        this.forceRecreateAutoGroups = true;\n        this.updateGridColumns();\n        this.updateDisplayedColumns('gridOptionsChanged');\n    }\n    onAutoGroupColumnDefChanged() {\n        if (this.groupAutoColumns) {\n            this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns);\n        }\n    }\n    onSharedColDefChanged(source = 'api') {\n        if (!this.gridColumns) {\n            return;\n        }\n        // if we aren't going to force, update the auto cols in place\n        if (this.groupAutoColumns) {\n            this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns);\n        }\n        this.createColumnsFromColumnDefs(true, source);\n    }\n    setColumnDefs(columnDefs, source = 'api') {\n        const colsPreviouslyExisted = !!this.columnDefs;\n        this.columnDefs = columnDefs;\n        this.createColumnsFromColumnDefs(colsPreviouslyExisted, source);\n    }\n    recreateColumnDefs(source = 'api') {\n        this.onSharedColDefChanged(source);\n    }\n    destroyOldColumns(oldTree, newTree) {\n        const oldObjectsById = {};\n        if (!oldTree) {\n            return;\n        }\n        // add in all old columns to be destroyed\n        this.columnUtils.depthFirstOriginalTreeSearch(null, oldTree, child => {\n            oldObjectsById[child.getInstanceId()] = child;\n        });\n        // however we don't destroy anything in the new tree. if destroying the grid, there is no new tree\n        if (newTree) {\n            this.columnUtils.depthFirstOriginalTreeSearch(null, newTree, child => {\n                oldObjectsById[child.getInstanceId()] = null;\n            });\n        }\n        // what's left can be destroyed\n        const colsToDestroy = Object.values(oldObjectsById).filter(item => item != null);\n        this.destroyBeans(colsToDestroy);\n    }\n    destroyColumns() {\n        this.destroyOldColumns(this.primaryColumnTree);\n        this.destroyOldColumns(this.secondaryBalancedTree);\n        this.destroyOldColumns(this.groupAutoColsBalancedTree);\n    }\n    createColumnsFromColumnDefs(colsPreviouslyExisted, source = 'api') {\n        // only need to dispatch before/after events if updating columns, never if setting columns for first time\n        const dispatchEventsFunc = colsPreviouslyExisted ? this.compareColumnStatesAndDispatchEvents(source) : undefined;\n        // always invalidate cache on changing columns, as the column id's for the new columns\n        // could overlap with the old id's, so the cache would return old values for new columns.\n        this.valueCache.expire();\n        // NOTE ==================\n        // we should be destroying the existing columns and groups if they exist, for example, the original column\n        // group adds a listener to the columns, it should be also removing the listeners\n        this.autoGroupsNeedBuilding = true;\n        const oldPrimaryColumns = this.primaryColumns;\n        const oldPrimaryTree = this.primaryColumnTree;\n        const balancedTreeResult = this.columnFactory.createColumnTree(this.columnDefs, true, oldPrimaryTree);\n        this.destroyOldColumns(this.primaryColumnTree, balancedTreeResult.columnTree);\n        this.primaryColumnTree = balancedTreeResult.columnTree;\n        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;\n        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);\n        this.primaryColumnsMap = {};\n        this.primaryColumns.forEach(col => this.primaryColumnsMap[col.getId()] = col);\n        this.extractRowGroupColumns(source, oldPrimaryColumns);\n        this.extractPivotColumns(source, oldPrimaryColumns);\n        this.extractValueColumns(source, oldPrimaryColumns);\n        this.ready = true;\n        // if we are showing secondary columns, then no need to update grid columns\n        // unless the auto column needs rebuilt, as it's the pivot service responsibility to change these\n        // if we are no longer pivoting (ie and need to revert back to primary, otherwise\n        // we shouldn't be touching the primary).\n        const gridColsNotProcessed = this.gridColsArePrimary === undefined;\n        const processGridCols = this.gridColsArePrimary || gridColsNotProcessed || this.autoGroupsNeedBuilding;\n        if (processGridCols) {\n            this.updateGridColumns();\n            if (colsPreviouslyExisted && this.gridColsArePrimary && !this.gridOptionsService.get('maintainColumnOrder')) {\n                this.orderGridColumnsLikePrimary();\n            }\n            this.updateDisplayedColumns(source);\n            this.checkViewportColumns();\n        }\n        // this event is not used by AG Grid, but left here for backwards compatibility,\n        // in case applications use it\n        this.dispatchEverythingChanged(source);\n        if (dispatchEventsFunc) {\n            dispatchEventsFunc();\n        }\n        this.dispatchNewColumnsLoaded(source);\n    }\n    dispatchNewColumnsLoaded(source) {\n        const newColumnsLoadedEvent = {\n            type: Events.EVENT_NEW_COLUMNS_LOADED,\n            source\n        };\n        this.eventService.dispatchEvent(newColumnsLoadedEvent);\n        if (source === 'gridInitializing') {\n            this.onColumnsReady();\n        }\n    }\n    // this event is legacy, no grid code listens to it. instead the grid listens to New Columns Loaded\n    dispatchEverythingChanged(source = 'api') {\n        const eventEverythingChanged = {\n            type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(eventEverythingChanged);\n    }\n    orderGridColumnsLikePrimary() {\n        const primaryColumns = this.primaryColumns;\n        if (!primaryColumns) {\n            return;\n        }\n        const primaryColsOrdered = primaryColumns.filter(col => this.gridColumns.indexOf(col) >= 0);\n        const otherCols = this.gridColumns.filter(col => primaryColsOrdered.indexOf(col) < 0);\n        this.gridColumns = [...otherCols, ...primaryColsOrdered];\n        this.gridColumns = this.placeLockedColumns(this.gridColumns);\n    }\n    getAllDisplayedAutoHeightCols() {\n        return this.displayedAutoHeightCols;\n    }\n    setViewport() {\n        if (this.gridOptionsService.get('enableRtl')) {\n            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;\n            this.viewportRight = this.bodyWidth - this.scrollPosition;\n        }\n        else {\n            this.viewportLeft = this.scrollPosition;\n            this.viewportRight = this.scrollWidth + this.scrollPosition;\n        }\n    }\n    // used by clipboard service, to know what columns to paste into\n    getDisplayedColumnsStartingAt(column) {\n        let currentColumn = column;\n        const columns = [];\n        while (currentColumn != null) {\n            columns.push(currentColumn);\n            currentColumn = this.getDisplayedColAfter(currentColumn);\n        }\n        return columns;\n    }\n    // checks what columns are currently displayed due to column virtualisation. dispatches an event\n    // if the list of columns has changed.\n    // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()\n    checkViewportColumns(afterScroll = false) {\n        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising\n        if (this.displayedColumnsCenter == null) {\n            return;\n        }\n        const viewportColumnsChanged = this.extractViewport();\n        if (!viewportColumnsChanged) {\n            return;\n        }\n        const event = {\n            type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,\n            afterScroll,\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    setViewportPosition(scrollWidth, scrollPosition, afterScroll = false) {\n        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {\n            this.scrollWidth = scrollWidth;\n            this.scrollPosition = scrollPosition;\n            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,\n            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the\n            // virtual columns again\n            this.bodyWidthDirty = true;\n            this.setViewport();\n            if (this.ready) {\n                this.checkViewportColumns(afterScroll);\n            }\n        }\n    }\n    isPivotMode() {\n        return this.pivotMode;\n    }\n    isPivotSettingAllowed(pivot) {\n        if (pivot && this.gridOptionsService.get('treeData')) {\n            console.warn(\"AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'\");\n            return false;\n        }\n        return true;\n    }\n    setPivotMode(pivotMode, source = 'api') {\n        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {\n            return;\n        }\n        this.pivotMode = pivotMode;\n        if (!this.gridColumns) {\n            return;\n        }\n        // we need to update grid columns to cover the scenario where user has groupDisplayType = 'custom', as\n        // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),\n        // so need to updateGridColumn() to check it autoGroupCol needs to be added / removed\n        this.autoGroupsNeedBuilding = true;\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n        const event = {\n            type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getSecondaryPivotColumn(pivotKeys, valueColKey) {\n        if (missing(this.secondaryColumns)) {\n            return null;\n        }\n        const valueColumnToFind = this.getPrimaryColumn(valueColKey);\n        let foundColumn = null;\n        this.secondaryColumns.forEach(column => {\n            const thisPivotKeys = column.getColDef().pivotKeys;\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n            const pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);\n            const pivotValueMatches = pivotValueColumn === valueColumnToFind;\n            if (pivotKeyMatches && pivotValueMatches) {\n                foundColumn = column;\n            }\n        });\n        return foundColumn;\n    }\n    setBeans(loggerFactory) {\n        this.logger = loggerFactory.create('columnModel');\n    }\n    setFirstRightAndLastLeftPinned(source) {\n        let lastLeft;\n        let firstRight;\n        if (this.gridOptionsService.get('enableRtl')) {\n            lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;\n            firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;\n        }\n        else {\n            lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;\n            firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;\n        }\n        this.gridColumns.forEach((column) => {\n            column.setLastLeftPinned(column === lastLeft, source);\n            column.setFirstRightPinned(column === firstRight, source);\n        });\n    }\n    autoSizeColumns(params) {\n        if (this.shouldQueueResizeOperations) {\n            this.resizeOperationQueue.push(() => this.autoSizeColumns(params));\n            return;\n        }\n        const { columns, skipHeader, skipHeaderGroups, stopAtGroup, source = 'api' } = params;\n        // because of column virtualisation, we can only do this function on columns that are\n        // actually rendered, as non-rendered columns (outside the viewport and not rendered\n        // due to column virtualisation) are not present. this can result in all rendered columns\n        // getting narrowed, which in turn introduces more rendered columns on the RHS which\n        // did not get autosized in the original run, leaving the visible grid with columns on\n        // the LHS sized, but RHS no. so we keep looping through the visible columns until\n        // no more cols are available (rendered) to be resized\n        // we autosize after animation frames finish in case any cell renderers need to complete first. this can\n        // happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid\n        // hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).\n        this.animationFrameService.flushAllFrames();\n        // keep track of which cols we have resized in here\n        const columnsAutosized = [];\n        // initialise with anything except 0 so that while loop executes at least once\n        let changesThisTimeAround = -1;\n        const shouldSkipHeader = skipHeader != null ? skipHeader : this.gridOptionsService.get('skipHeaderOnAutoSize');\n        const shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;\n        while (changesThisTimeAround !== 0) {\n            changesThisTimeAround = 0;\n            this.actionOnGridColumns(columns, (column) => {\n                // if already autosized, skip it\n                if (columnsAutosized.indexOf(column) >= 0) {\n                    return false;\n                }\n                // get how wide this col should be\n                const preferredWidth = this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);\n                // preferredWidth = -1 if this col is not on the screen\n                if (preferredWidth > 0) {\n                    const newWidth = this.normaliseColumnWidth(column, preferredWidth);\n                    column.setActualWidth(newWidth, source);\n                    columnsAutosized.push(column);\n                    changesThisTimeAround++;\n                }\n                return true;\n            }, source);\n        }\n        if (!shouldSkipHeaderGroups) {\n            this.autoSizeColumnGroupsByColumns(columns, source, stopAtGroup);\n        }\n        this.dispatchColumnResizedEvent(columnsAutosized, true, 'autosizeColumns');\n    }\n    dispatchColumnResizedEvent(columns, finished, source, flexColumns = null) {\n        if (columns && columns.length) {\n            const event = {\n                type: Events.EVENT_COLUMN_RESIZED,\n                columns: columns,\n                column: columns.length === 1 ? columns[0] : null,\n                flexColumns: flexColumns,\n                finished: finished,\n                source: source\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    dispatchColumnChangedEvent(type, columns, source) {\n        const event = {\n            type: type,\n            columns: columns,\n            column: (columns && columns.length == 1) ? columns[0] : null,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    dispatchColumnMovedEvent(params) {\n        const { movedColumns, source, toIndex, finished } = params;\n        const event = {\n            type: Events.EVENT_COLUMN_MOVED,\n            columns: movedColumns,\n            column: movedColumns && movedColumns.length === 1 ? movedColumns[0] : null,\n            toIndex,\n            finished,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    dispatchColumnPinnedEvent(changedColumns, source) {\n        if (!changedColumns.length) {\n            return;\n        }\n        // if just one column, we use this, otherwise we don't include the col\n        const column = changedColumns.length === 1 ? changedColumns[0] : null;\n        // only include visible if it's common in all columns\n        const pinned = this.getCommonValue(changedColumns, col => col.getPinned());\n        const event = {\n            type: Events.EVENT_COLUMN_PINNED,\n            // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'\n            pinned: pinned != null ? pinned : null,\n            columns: changedColumns,\n            column,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    dispatchColumnVisibleEvent(changedColumns, source) {\n        if (!changedColumns.length) {\n            return;\n        }\n        // if just one column, we use this, otherwise we don't include the col\n        const column = changedColumns.length === 1 ? changedColumns[0] : null;\n        // only include visible if it's common in all columns\n        const visible = this.getCommonValue(changedColumns, col => col.isVisible());\n        const event = {\n            type: Events.EVENT_COLUMN_VISIBLE,\n            visible,\n            columns: changedColumns,\n            column,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    autoSizeColumn(key, skipHeader, source = \"api\") {\n        if (key) {\n            this.autoSizeColumns({ columns: [key], skipHeader, skipHeaderGroups: true, source });\n        }\n    }\n    autoSizeColumnGroupsByColumns(keys, source, stopAtGroup) {\n        const columnGroups = new Set();\n        const columns = this.getGridColumns(keys);\n        columns.forEach(col => {\n            let parent = col.getParent();\n            while (parent && parent != stopAtGroup) {\n                if (!parent.isPadding()) {\n                    columnGroups.add(parent);\n                }\n                parent = parent.getParent();\n            }\n        });\n        let headerGroupCtrl;\n        const resizedColumns = [];\n        for (const columnGroup of columnGroups) {\n            for (const headerContainerCtrl of this.ctrlsService.getHeaderRowContainerCtrls()) {\n                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);\n                if (headerGroupCtrl) {\n                    break;\n                }\n            }\n            if (headerGroupCtrl) {\n                headerGroupCtrl.resizeLeafColumnsToFit(source);\n            }\n        }\n        return resizedColumns;\n    }\n    autoSizeAllColumns(skipHeader, source = \"api\") {\n        if (this.shouldQueueResizeOperations) {\n            this.resizeOperationQueue.push(() => this.autoSizeAllColumns(skipHeader, source));\n            return;\n        }\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        this.autoSizeColumns({ columns: allDisplayedColumns, skipHeader, source });\n    }\n    // Possible candidate for reuse (alot of recursive traversal duplication)\n    getColumnsFromTree(rootColumns) {\n        const result = [];\n        const recursiveFindColumns = (childColumns) => {\n            for (let i = 0; i < childColumns.length; i++) {\n                const child = childColumns[i];\n                if (child instanceof Column) {\n                    result.push(child);\n                }\n                else if (child instanceof ProvidedColumnGroup) {\n                    recursiveFindColumns(child.getChildren());\n                }\n            }\n        };\n        recursiveFindColumns(rootColumns);\n        return result;\n    }\n    getAllDisplayedTrees() {\n        if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {\n            return this.displayedTreeLeft\n                .concat(this.displayedTreeCentre)\n                .concat(this.displayedTreeRight);\n        }\n        return null;\n    }\n    // + columnSelectPanel\n    getPrimaryColumnTree() {\n        return this.primaryColumnTree;\n    }\n    // + gridPanel -> for resizing the body and setting top margin\n    getHeaderRowCount() {\n        return this.gridHeaderRowCount;\n    }\n    // + headerRenderer -> setting pinned body width\n    getDisplayedTreeLeft() {\n        return this.displayedTreeLeft;\n    }\n    // + headerRenderer -> setting pinned body width\n    getDisplayedTreeRight() {\n        return this.displayedTreeRight;\n    }\n    // + headerRenderer -> setting pinned body width\n    getDisplayedTreeCentre() {\n        return this.displayedTreeCentre;\n    }\n    // gridPanel -> ensureColumnVisible\n    isColumnDisplayed(column) {\n        return this.getAllDisplayedColumns().indexOf(column) >= 0;\n    }\n    // + csvCreator\n    getAllDisplayedColumns() {\n        return this.displayedColumns;\n    }\n    getViewportColumns() {\n        return this.viewportColumns;\n    }\n    getDisplayedLeftColumnsForRow(rowNode) {\n        if (!this.colSpanActive) {\n            return this.displayedColumnsLeft;\n        }\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);\n    }\n    getDisplayedRightColumnsForRow(rowNode) {\n        if (!this.colSpanActive) {\n            return this.displayedColumnsRight;\n        }\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);\n    }\n    isColSpanActive() {\n        return this.colSpanActive;\n    }\n    getDisplayedColumnsForRow(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {\n        const result = [];\n        let lastConsideredCol = null;\n        for (let i = 0; i < displayedColumns.length; i++) {\n            const col = displayedColumns[i];\n            const maxAllowedColSpan = displayedColumns.length - i;\n            const colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);\n            const columnsToCheckFilter = [col];\n            if (colSpan > 1) {\n                const colsToRemove = colSpan - 1;\n                for (let j = 1; j <= colsToRemove; j++) {\n                    columnsToCheckFilter.push(displayedColumns[i + j]);\n                }\n                i += colsToRemove;\n            }\n            // see which cols we should take out for column virtualisation\n            let filterPasses;\n            if (filterCallback) {\n                // if user provided a callback, means some columns may not be in the viewport.\n                // the user will NOT provide a callback if we are talking about pinned areas,\n                // as pinned areas have no horizontal scroll and do not virtualise the columns.\n                // if lots of columns, that means column spanning, and we set filterPasses = true\n                // if one or more of the columns spanned pass the filter.\n                filterPasses = false;\n                columnsToCheckFilter.forEach(colForFilter => {\n                    if (filterCallback(colForFilter)) {\n                        filterPasses = true;\n                    }\n                });\n            }\n            else {\n                filterPasses = true;\n            }\n            if (filterPasses) {\n                if (result.length === 0 && lastConsideredCol) {\n                    const gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;\n                    if (gapBeforeColumn) {\n                        result.push(lastConsideredCol);\n                    }\n                }\n                result.push(col);\n            }\n            lastConsideredCol = col;\n        }\n        return result;\n    }\n    // + rowRenderer\n    // if we are not column spanning, this just returns back the virtual centre columns,\n    // however if we are column spanning, then different rows can have different virtual\n    // columns, so we have to work out the list for each individual row.\n    getViewportCenterColumnsForRow(rowNode) {\n        if (!this.colSpanActive) {\n            return this.viewportColumnsCenter;\n        }\n        const emptySpaceBeforeColumn = (col) => {\n            const left = col.getLeft();\n            return exists(left) && left > this.viewportLeft;\n        };\n        // if doing column virtualisation, then we filter based on the viewport.\n        const filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInRowViewport.bind(this);\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsCenter, filterCallback, emptySpaceBeforeColumn);\n    }\n    isColumnAtEdge(col, edge) {\n        const allColumns = this.getAllDisplayedColumns();\n        if (!allColumns.length) {\n            return false;\n        }\n        const isFirst = edge === 'first';\n        let columnToCompare;\n        if (col instanceof ColumnGroup) {\n            const leafColumns = col.getDisplayedLeafColumns();\n            if (!leafColumns.length) {\n                return false;\n            }\n            columnToCompare = isFirst ? leafColumns[0] : last(leafColumns);\n        }\n        else {\n            columnToCompare = col;\n        }\n        return (isFirst ? allColumns[0] : last(allColumns)) === columnToCompare;\n    }\n    getAriaColumnIndex(col) {\n        let targetColumn;\n        if (col instanceof ColumnGroup) {\n            targetColumn = col.getLeafColumns()[0];\n        }\n        else {\n            targetColumn = col;\n        }\n        return this.getAllGridColumns().indexOf(targetColumn) + 1;\n    }\n    isColumnInHeaderViewport(col) {\n        // for headers, we never filter out autoHeaderHeight columns, if calculating\n        if (col.isAutoHeaderHeight()) {\n            return true;\n        }\n        return this.isColumnInRowViewport(col);\n    }\n    isColumnInRowViewport(col) {\n        // we never filter out autoHeight columns, as we need them in the DOM for calculating Auto Height\n        if (col.isAutoHeight()) {\n            return true;\n        }\n        const columnLeft = col.getLeft() || 0;\n        const columnRight = columnLeft + col.getActualWidth();\n        // adding 200 for buffer size, so some cols off viewport are rendered.\n        // this helps horizontal scrolling so user rarely sees white space (unless\n        // they scroll horizontally fast). however we are conservative, as the more\n        // buffer the slower the vertical redraw speed\n        const leftBounds = this.viewportLeft - 200;\n        const rightBounds = this.viewportRight + 200;\n        const columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;\n        const columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;\n        return !columnToMuchLeft && !columnToMuchRight;\n    }\n    // used by:\n    // + angularGrid -> setting pinned body width\n    // note: this should be cached\n    getDisplayedColumnsLeftWidth() {\n        return this.getWidthOfColsInList(this.displayedColumnsLeft);\n    }\n    // note: this should be cached\n    getDisplayedColumnsRightWidth() {\n        return this.getWidthOfColsInList(this.displayedColumnsRight);\n    }\n    updatePrimaryColumnList(keys, masterList, actionIsAdd, columnCallback, eventType, source = \"api\") {\n        if (!keys || missingOrEmpty(keys)) {\n            return;\n        }\n        let atLeastOne = false;\n        keys.forEach(key => {\n            const columnToAdd = this.getPrimaryColumn(key);\n            if (!columnToAdd) {\n                return;\n            }\n            if (actionIsAdd) {\n                if (masterList.indexOf(columnToAdd) >= 0) {\n                    return;\n                }\n                masterList.push(columnToAdd);\n            }\n            else {\n                if (masterList.indexOf(columnToAdd) < 0) {\n                    return;\n                }\n                removeFromArray(masterList, columnToAdd);\n            }\n            columnCallback(columnToAdd);\n            atLeastOne = true;\n        });\n        if (!atLeastOne) {\n            return;\n        }\n        if (this.autoGroupsNeedBuilding) {\n            this.updateGridColumns();\n        }\n        this.updateDisplayedColumns(source);\n        const event = {\n            type: eventType,\n            columns: masterList,\n            column: masterList.length === 1 ? masterList[0] : null,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    setRowGroupColumns(colKeys, source = \"api\") {\n        this.autoGroupsNeedBuilding = true;\n        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, true, this.setRowGroupActive.bind(this), source);\n    }\n    setRowGroupActive(active, column, source) {\n        if (active === column.isRowGroupActive()) {\n            return;\n        }\n        column.setRowGroupActive(active, source);\n        if (active && !this.gridOptionsService.get('suppressRowGroupHidesColumns')) {\n            this.setColumnVisible(column, false, source);\n        }\n        if (!active && !this.gridOptionsService.get('suppressMakeColumnVisibleAfterUnGroup')) {\n            this.setColumnVisible(column, true, source);\n        }\n    }\n    addRowGroupColumn(key, source = \"api\") {\n        if (key) {\n            this.addRowGroupColumns([key], source);\n        }\n    }\n    addRowGroupColumns(keys, source = \"api\") {\n        this.autoGroupsNeedBuilding = true;\n        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);\n    }\n    removeRowGroupColumns(keys, source = \"api\") {\n        this.autoGroupsNeedBuilding = true;\n        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);\n    }\n    removeRowGroupColumn(key, source = \"api\") {\n        if (key) {\n            this.removeRowGroupColumns([key], source);\n        }\n    }\n    addPivotColumns(keys, source = \"api\") {\n        this.updatePrimaryColumnList(keys, this.pivotColumns, true, column => column.setPivotActive(true, source), Events.EVENT_COLUMN_PIVOT_CHANGED, source);\n    }\n    setPivotColumns(colKeys, source = \"api\") {\n        this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, true, (added, column) => {\n            column.setPivotActive(added, source);\n        }, source);\n    }\n    addPivotColumn(key, source = \"api\") {\n        this.addPivotColumns([key], source);\n    }\n    removePivotColumns(keys, source = \"api\") {\n        this.updatePrimaryColumnList(keys, this.pivotColumns, false, column => column.setPivotActive(false, source), Events.EVENT_COLUMN_PIVOT_CHANGED, source);\n    }\n    removePivotColumn(key, source = \"api\") {\n        this.removePivotColumns([key], source);\n    }\n    setPrimaryColumnList(colKeys, masterList, eventName, detectOrderChange, columnCallback, source) {\n        if (!this.gridColumns) {\n            return;\n        }\n        const changes = new Map();\n        // store all original cols and their index.\n        masterList.forEach((col, idx) => changes.set(col, idx));\n        masterList.length = 0;\n        if (exists(colKeys)) {\n            colKeys.forEach(key => {\n                const column = this.getPrimaryColumn(key);\n                if (column) {\n                    masterList.push(column);\n                }\n            });\n        }\n        masterList.forEach((col, idx) => {\n            const oldIndex = changes.get(col);\n            // if the column was not in the list, we add it as it's a change\n            // idx is irrelevant now.\n            if (oldIndex === undefined) {\n                changes.set(col, 0);\n                return;\n            }\n            if (detectOrderChange && oldIndex !== idx) {\n                // if we're detecting order changes, and the indexes differ, we retain this as it's changed\n                return;\n            }\n            // otherwise remove this col, as it's unchanged.\n            changes.delete(col);\n        });\n        (this.primaryColumns || []).forEach(column => {\n            const added = masterList.indexOf(column) >= 0;\n            columnCallback(added, column);\n        });\n        if (this.autoGroupsNeedBuilding) {\n            this.updateGridColumns();\n        }\n        this.updateDisplayedColumns(source);\n        this.dispatchColumnChangedEvent(eventName, [...changes.keys()], source);\n    }\n    setValueColumns(colKeys, source = \"api\") {\n        this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, false, this.setValueActive.bind(this), source);\n    }\n    setValueActive(active, column, source) {\n        if (active === column.isValueActive()) {\n            return;\n        }\n        column.setValueActive(active, source);\n        if (active && !column.getAggFunc()) {\n            const initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);\n            column.setAggFunc(initialAggFunc);\n        }\n    }\n    addValueColumns(keys, source = \"api\") {\n        this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);\n    }\n    addValueColumn(colKey, source = \"api\") {\n        if (colKey) {\n            this.addValueColumns([colKey], source);\n        }\n    }\n    removeValueColumn(colKey, source = \"api\") {\n        this.removeValueColumns([colKey], source);\n    }\n    removeValueColumns(keys, source = \"api\") {\n        this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);\n    }\n    // returns the width we can set to this col, taking into consideration min and max widths\n    normaliseColumnWidth(column, newWidth) {\n        const minWidth = column.getMinWidth();\n        if (exists(minWidth) && newWidth < minWidth) {\n            newWidth = minWidth;\n        }\n        const maxWidth = column.getMaxWidth();\n        if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {\n            newWidth = maxWidth;\n        }\n        return newWidth;\n    }\n    getPrimaryOrGridColumn(key) {\n        const column = this.getPrimaryColumn(key);\n        return column || this.getGridColumn(key);\n    }\n    setColumnWidths(columnWidths, shiftKey, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column\n    finished, // @finished - ends up in the event, tells the user if more events are to come\n    source = \"api\") {\n        const sets = [];\n        columnWidths.forEach(columnWidth => {\n            const col = this.getPrimaryOrGridColumn(columnWidth.key);\n            if (!col) {\n                return;\n            }\n            sets.push({\n                width: columnWidth.newWidth,\n                ratios: [1],\n                columns: [col]\n            });\n            // if user wants to do shift resize by default, then we invert the shift operation\n            const defaultIsShift = this.gridOptionsService.get('colResizeDefault') === 'shift';\n            if (defaultIsShift) {\n                shiftKey = !shiftKey;\n            }\n            if (shiftKey) {\n                const otherCol = this.getDisplayedColAfter(col);\n                if (!otherCol) {\n                    return;\n                }\n                const widthDiff = col.getActualWidth() - columnWidth.newWidth;\n                const otherColWidth = otherCol.getActualWidth() + widthDiff;\n                sets.push({\n                    width: otherColWidth,\n                    ratios: [1],\n                    columns: [otherCol]\n                });\n            }\n        });\n        if (sets.length === 0) {\n            return;\n        }\n        this.resizeColumnSets({\n            resizeSets: sets,\n            finished,\n            source\n        });\n    }\n    checkMinAndMaxWidthsForSet(columnResizeSet) {\n        const { columns, width } = columnResizeSet;\n        // every col has a min width, so sum them all up and see if we have enough room\n        // for all the min widths\n        let minWidthAccumulated = 0;\n        let maxWidthAccumulated = 0;\n        let maxWidthActive = true;\n        columns.forEach(col => {\n            const minWidth = col.getMinWidth();\n            minWidthAccumulated += minWidth || 0;\n            const maxWidth = col.getMaxWidth();\n            if (exists(maxWidth) && maxWidth > 0) {\n                maxWidthAccumulated += maxWidth;\n            }\n            else {\n                // if at least one columns has no max width, it means the group of columns\n                // then has no max width, as at least one column can take as much width as possible\n                maxWidthActive = false;\n            }\n        });\n        const minWidthPasses = width >= minWidthAccumulated;\n        const maxWidthPasses = !maxWidthActive || (width <= maxWidthAccumulated);\n        return minWidthPasses && maxWidthPasses;\n    }\n    // method takes sets of columns and resizes them. either all sets will be resized, or nothing\n    // be resized. this is used for example when user tries to resize a group and holds shift key,\n    // then both the current group (grows), and the adjacent group (shrinks), will get resized,\n    // so that's two sets for this method.\n    resizeColumnSets(params) {\n        const { resizeSets, finished, source } = params;\n        const passMinMaxCheck = !resizeSets || resizeSets.every(columnResizeSet => this.checkMinAndMaxWidthsForSet(columnResizeSet));\n        if (!passMinMaxCheck) {\n            // even though we are not going to resize beyond min/max size, we still need to dispatch event when finished\n            if (finished) {\n                const columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;\n                this.dispatchColumnResizedEvent(columns, finished, source);\n            }\n            return; // don't resize!\n        }\n        const changedCols = [];\n        const allResizedCols = [];\n        resizeSets.forEach(set => {\n            const { width, columns, ratios } = set;\n            // keep track of pixels used, and last column gets the remaining,\n            // to cater for rounding errors, and min width adjustments\n            const newWidths = {};\n            const finishedCols = {};\n            columns.forEach(col => allResizedCols.push(col));\n            // the loop below goes through each col. if a col exceeds it's min/max width,\n            // it then gets set to its min/max width and the column is removed marked as 'finished'\n            // and the calculation is done again leaving this column out. take for example columns\n            // {A, width: 50, maxWidth: 100}\n            // {B, width: 50}\n            // {C, width: 50}\n            // and then the set is set to width 600 - on the first pass the grid tries to set each column\n            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked\n            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up\n            // splitting the remaining 500 pixels.\n            let finishedColsGrew = true;\n            let loopCount = 0;\n            while (finishedColsGrew) {\n                loopCount++;\n                if (loopCount > 1000) {\n                    // this should never happen, but in the future, someone might introduce a bug here,\n                    // so we stop the browser from hanging and report bug properly\n                    console.error('AG Grid: infinite loop in resizeColumnSets');\n                    break;\n                }\n                finishedColsGrew = false;\n                const subsetCols = [];\n                let subsetRatioTotal = 0;\n                let pixelsToDistribute = width;\n                columns.forEach((col, index) => {\n                    const thisColFinished = finishedCols[col.getId()];\n                    if (thisColFinished) {\n                        pixelsToDistribute -= newWidths[col.getId()];\n                    }\n                    else {\n                        subsetCols.push(col);\n                        const ratioThisCol = ratios[index];\n                        subsetRatioTotal += ratioThisCol;\n                    }\n                });\n                // because we are not using all of the ratios (cols can be missing),\n                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,\n                // and so the ratioScale will be 1.\n                const ratioScale = 1 / subsetRatioTotal;\n                subsetCols.forEach((col, index) => {\n                    const lastCol = index === (subsetCols.length - 1);\n                    let colNewWidth;\n                    if (lastCol) {\n                        colNewWidth = pixelsToDistribute;\n                    }\n                    else {\n                        colNewWidth = Math.round(ratios[index] * width * ratioScale);\n                        pixelsToDistribute -= colNewWidth;\n                    }\n                    const minWidth = col.getMinWidth();\n                    const maxWidth = col.getMaxWidth();\n                    if (exists(minWidth) && colNewWidth < minWidth) {\n                        colNewWidth = minWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    }\n                    else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {\n                        colNewWidth = maxWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    }\n                    newWidths[col.getId()] = colNewWidth;\n                });\n            }\n            columns.forEach(col => {\n                const newWidth = newWidths[col.getId()];\n                const actualWidth = col.getActualWidth();\n                if (actualWidth !== newWidth) {\n                    col.setActualWidth(newWidth, source);\n                    changedCols.push(col);\n                }\n            });\n        });\n        // if no cols changed, then no need to update more or send event.\n        const atLeastOneColChanged = changedCols.length > 0;\n        let flexedCols = [];\n        if (atLeastOneColChanged) {\n            flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });\n            this.setLeftValues(source);\n            this.updateBodyWidths();\n            this.checkViewportColumns();\n        }\n        // check for change first, to avoid unnecessary firing of events\n        // however we always dispatch 'finished' events. this is important\n        // when groups are resized, as if the group is changing slowly,\n        // eg 1 pixel at a time, then each change will dispatch change events\n        // in all the columns in the group, but only one with get the pixel.\n        const colsForEvent = allResizedCols.concat(flexedCols);\n        if (atLeastOneColChanged || finished) {\n            this.dispatchColumnResizedEvent(colsForEvent, finished, source, flexedCols);\n        }\n    }\n    setColumnAggFunc(key, aggFunc, source = \"api\") {\n        if (!key) {\n            return;\n        }\n        const column = this.getPrimaryColumn(key);\n        if (!column) {\n            return;\n        }\n        column.setAggFunc(aggFunc);\n        this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);\n    }\n    moveRowGroupColumn(fromIndex, toIndex, source = \"api\") {\n        if (this.isRowGroupEmpty()) {\n            return;\n        }\n        const column = this.rowGroupColumns[fromIndex];\n        const impactedColumns = this.rowGroupColumns.slice(fromIndex, toIndex);\n        this.rowGroupColumns.splice(fromIndex, 1);\n        this.rowGroupColumns.splice(toIndex, 0, column);\n        const event = {\n            type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            columns: impactedColumns,\n            column: impactedColumns.length === 1 ? impactedColumns[0] : null,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    moveColumns(columnsToMoveKeys, toIndex, source = \"api\", finished = true) {\n        if (!this.gridColumns) {\n            return;\n        }\n        this.columnAnimationService.start();\n        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {\n            console.warn('AG Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);\n            console.warn('AG Grid: remember that you should not count the moving columns when calculating the new index');\n            return;\n        }\n        // we want to pull all the columns out first and put them into an ordered list\n        const movedColumns = this.getGridColumns(columnsToMoveKeys);\n        const failedRules = !this.doesMovePassRules(movedColumns, toIndex);\n        if (failedRules) {\n            return;\n        }\n        moveInArray(this.gridColumns, movedColumns, toIndex);\n        this.updateDisplayedColumns(source);\n        this.dispatchColumnMovedEvent({ movedColumns, source, toIndex, finished });\n        this.columnAnimationService.finish();\n    }\n    doesMovePassRules(columnsToMove, toIndex) {\n        // make a copy of what the grid columns would look like after the move\n        const proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);\n        return this.doesOrderPassRules(proposedColumnOrder);\n    }\n    doesOrderPassRules(gridOrder) {\n        if (!this.doesMovePassMarryChildren(gridOrder)) {\n            return false;\n        }\n        if (!this.doesMovePassLockedPositions(gridOrder)) {\n            return false;\n        }\n        return true;\n    }\n    getProposedColumnOrder(columnsToMove, toIndex) {\n        const proposedColumnOrder = this.gridColumns.slice();\n        moveInArray(proposedColumnOrder, columnsToMove, toIndex);\n        return proposedColumnOrder;\n    }\n    // returns the provided cols sorted in same order as they appear in grid columns. eg if grid columns\n    // contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]\n    sortColumnsLikeGridColumns(cols) {\n        if (!cols || cols.length <= 1) {\n            return;\n        }\n        const notAllColsInGridColumns = cols.filter(c => this.gridColumns.indexOf(c) < 0).length > 0;\n        if (notAllColsInGridColumns) {\n            return;\n        }\n        cols.sort((a, b) => {\n            const indexA = this.gridColumns.indexOf(a);\n            const indexB = this.gridColumns.indexOf(b);\n            return indexA - indexB;\n        });\n    }\n    doesMovePassLockedPositions(proposedColumnOrder) {\n        // Placement is a number indicating 'left' 'center' or 'right' as 0 1 2\n        let lastPlacement = 0;\n        let rulePassed = true;\n        const lockPositionToPlacement = (position) => {\n            if (!position) { // false or undefined\n                return 1;\n            }\n            if (position === true) {\n                return 0;\n            }\n            return position === 'left' ? 0 : 2; // Otherwise 'right'\n        };\n        proposedColumnOrder.forEach(col => {\n            const placement = lockPositionToPlacement(col.getColDef().lockPosition);\n            if (placement < lastPlacement) { // If placement goes down, we're not in the correct order\n                rulePassed = false;\n            }\n            lastPlacement = placement;\n        });\n        return rulePassed;\n    }\n    doesMovePassMarryChildren(allColumnsCopy) {\n        let rulePassed = true;\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, child => {\n            if (!(child instanceof ProvidedColumnGroup)) {\n                return;\n            }\n            const columnGroup = child;\n            const colGroupDef = columnGroup.getColGroupDef();\n            const marryChildren = colGroupDef && colGroupDef.marryChildren;\n            if (!marryChildren) {\n                return;\n            }\n            const newIndexes = [];\n            columnGroup.getLeafColumns().forEach(col => {\n                const newColIndex = allColumnsCopy.indexOf(col);\n                newIndexes.push(newColIndex);\n            });\n            const maxIndex = Math.max.apply(Math, newIndexes);\n            const minIndex = Math.min.apply(Math, newIndexes);\n            // spread is how far the first column in this group is away from the last column\n            const spread = maxIndex - minIndex;\n            const maxSpread = columnGroup.getLeafColumns().length - 1;\n            // if the columns\n            if (spread > maxSpread) {\n                rulePassed = false;\n            }\n            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)\n            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));\n        });\n        return rulePassed;\n    }\n    moveColumn(key, toIndex, source = \"api\") {\n        this.moveColumns([key], toIndex, source);\n    }\n    moveColumnByIndex(fromIndex, toIndex, source = \"api\") {\n        if (!this.gridColumns) {\n            return;\n        }\n        const column = this.gridColumns[fromIndex];\n        this.moveColumn(column, toIndex, source);\n    }\n    getColumnDefs() {\n        if (!this.primaryColumns) {\n            return;\n        }\n        const cols = this.primaryColumns.slice();\n        if (this.gridColsArePrimary) {\n            cols.sort((a, b) => this.gridColumns.indexOf(a) - this.gridColumns.indexOf(b));\n        }\n        else if (this.lastPrimaryOrder) {\n            cols.sort((a, b) => this.lastPrimaryOrder.indexOf(a) - this.lastPrimaryOrder.indexOf(b));\n        }\n        return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);\n    }\n    // used by:\n    // + angularGrid -> for setting body width\n    // + rowController -> setting main row widths (when inserting and resizing)\n    // need to cache this\n    getBodyContainerWidth() {\n        return this.bodyWidth;\n    }\n    getContainerWidth(pinned) {\n        switch (pinned) {\n            case 'left':\n                return this.leftWidth;\n            case 'right':\n                return this.rightWidth;\n            default:\n                return this.bodyWidth;\n        }\n    }\n    // after setColumnWidth or updateGroupsAndDisplayedColumns\n    updateBodyWidths() {\n        const newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);\n        const newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);\n        const newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);\n        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed\n        // columns, due to RTL inverting the y coordinates\n        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;\n        const atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;\n        if (atLeastOneChanged) {\n            this.bodyWidth = newBodyWidth;\n            this.leftWidth = newLeftWidth;\n            this.rightWidth = newRightWidth;\n            // when this fires, it is picked up by the gridPanel, which ends up in\n            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setViewportPosition()\n            const event = {\n                type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    // + rowController\n    getValueColumns() {\n        return this.valueColumns ? this.valueColumns : [];\n    }\n    // + rowController\n    getPivotColumns() {\n        return this.pivotColumns ? this.pivotColumns : [];\n    }\n    // + clientSideRowModel\n    isPivotActive() {\n        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;\n    }\n    // + toolPanel\n    getRowGroupColumns() {\n        return this.rowGroupColumns ? this.rowGroupColumns : [];\n    }\n    // + rowController -> while inserting rows\n    getDisplayedCenterColumns() {\n        return this.displayedColumnsCenter;\n    }\n    // + rowController -> while inserting rows\n    getDisplayedLeftColumns() {\n        return this.displayedColumnsLeft;\n    }\n    getDisplayedRightColumns() {\n        return this.displayedColumnsRight;\n    }\n    getDisplayedColumns(type) {\n        switch (type) {\n            case 'left':\n                return this.getDisplayedLeftColumns();\n            case 'right':\n                return this.getDisplayedRightColumns();\n            default:\n                return this.getDisplayedCenterColumns();\n        }\n    }\n    // used by:\n    // + clientSideRowController -> sorting, building quick filter text\n    // + headerRenderer -> sorting (clearing icon)\n    getAllPrimaryColumns() {\n        return this.primaryColumns ? this.primaryColumns.slice() : null;\n    }\n    getSecondaryColumns() {\n        return this.secondaryColumns ? this.secondaryColumns.slice() : null;\n    }\n    getAllColumnsForQuickFilter() {\n        return this.columnsForQuickFilter;\n    }\n    // + moveColumnController\n    getAllGridColumns() {\n        var _a;\n        return (_a = this.gridColumns) !== null && _a !== void 0 ? _a : [];\n    }\n    isEmpty() {\n        return missingOrEmpty(this.gridColumns);\n    }\n    isRowGroupEmpty() {\n        return missingOrEmpty(this.rowGroupColumns);\n    }\n    setColumnVisible(key, visible, source = \"api\") {\n        this.setColumnsVisible([key], visible, source);\n    }\n    setColumnsVisible(keys, visible = false, source = \"api\") {\n        this.applyColumnState({\n            state: keys.map(key => ({\n                colId: typeof key === 'string' ? key : key.getColId(),\n                hide: !visible,\n            })),\n        }, source);\n    }\n    setColumnPinned(key, pinned, source = \"api\") {\n        if (key) {\n            this.setColumnsPinned([key], pinned, source);\n        }\n    }\n    setColumnsPinned(keys, pinned, source = \"api\") {\n        if (!this.gridColumns) {\n            return;\n        }\n        if (this.gridOptionsService.isDomLayout('print')) {\n            console.warn(`AG Grid: Changing the column pinning status is not allowed with domLayout='print'`);\n            return;\n        }\n        this.columnAnimationService.start();\n        let actualPinned;\n        if (pinned === true || pinned === 'left') {\n            actualPinned = 'left';\n        }\n        else if (pinned === 'right') {\n            actualPinned = 'right';\n        }\n        else {\n            actualPinned = null;\n        }\n        this.actionOnGridColumns(keys, (col) => {\n            if (col.getPinned() !== actualPinned) {\n                col.setPinned(actualPinned);\n                return true;\n            }\n            return false;\n        }, source, () => {\n            const event = {\n                type: Events.EVENT_COLUMN_PINNED,\n                pinned: actualPinned,\n                column: null,\n                columns: null,\n                source: source\n            };\n            return event;\n        });\n        this.columnAnimationService.finish();\n    }\n    // does an action on a set of columns. provides common functionality for looking up the\n    // columns based on key, getting a list of effected columns, and then updated the event\n    // with either one column (if it was just one col) or a list of columns\n    // used by: autoResize, setVisible, setPinned\n    actionOnGridColumns(// the column keys this action will be on\n    keys, \n    // the action to do - if this returns false, the column was skipped\n    // and won't be included in the event\n    action, \n    // should return back a column event of the right type\n    source, createEvent) {\n        if (missingOrEmpty(keys)) {\n            return;\n        }\n        const updatedColumns = [];\n        keys.forEach(key => {\n            const column = this.getGridColumn(key);\n            if (!column) {\n                return;\n            }\n            // need to check for false with type (ie !== instead of !=)\n            // as not returning anything (undefined) would also be false\n            const resultOfAction = action(column);\n            if (resultOfAction !== false) {\n                updatedColumns.push(column);\n            }\n        });\n        if (!updatedColumns.length) {\n            return;\n        }\n        this.updateDisplayedColumns(source);\n        if (exists(createEvent) && createEvent) {\n            const event = createEvent();\n            event.columns = updatedColumns;\n            event.column = updatedColumns.length === 1 ? updatedColumns[0] : null;\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    getDisplayedColBefore(col) {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const oldIndex = allDisplayedColumns.indexOf(col);\n        if (oldIndex > 0) {\n            return allDisplayedColumns[oldIndex - 1];\n        }\n        return null;\n    }\n    // used by:\n    // + rowRenderer -> for navigation\n    getDisplayedColAfter(col) {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const oldIndex = allDisplayedColumns.indexOf(col);\n        if (oldIndex < (allDisplayedColumns.length - 1)) {\n            return allDisplayedColumns[oldIndex + 1];\n        }\n        return null;\n    }\n    getDisplayedGroupAfter(columnGroup) {\n        return this.getDisplayedGroupAtDirection(columnGroup, 'After');\n    }\n    getDisplayedGroupBefore(columnGroup) {\n        return this.getDisplayedGroupAtDirection(columnGroup, 'Before');\n    }\n    getDisplayedGroupAtDirection(columnGroup, direction) {\n        // pick the last displayed column in this group\n        const requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();\n        const colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();\n        const col = direction === 'After' ? last(colGroupLeafColumns) : colGroupLeafColumns[0];\n        const getDisplayColMethod = `getDisplayedCol${direction}`;\n        while (true) {\n            // keep moving to the next col, until we get to another group\n            const column = this[getDisplayColMethod](col);\n            if (!column) {\n                return null;\n            }\n            const groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);\n            if (groupPointer !== columnGroup) {\n                return groupPointer;\n            }\n        }\n    }\n    getColumnGroupAtLevel(column, level) {\n        // get group at same level as the one we are looking for\n        let groupPointer = column.getParent();\n        let originalGroupLevel;\n        let groupPointerLevel;\n        while (true) {\n            const groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();\n            originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();\n            groupPointerLevel = groupPointer.getPaddingLevel();\n            if (originalGroupLevel + groupPointerLevel <= level) {\n                break;\n            }\n            groupPointer = groupPointer.getParent();\n        }\n        return groupPointer;\n    }\n    isPinningLeft() {\n        return this.displayedColumnsLeft.length > 0;\n    }\n    isPinningRight() {\n        return this.displayedColumnsRight.length > 0;\n    }\n    getPrimaryAndSecondaryAndAutoColumns() {\n        return [].concat(...[\n            this.primaryColumns || [],\n            this.groupAutoColumns || [],\n            this.secondaryColumns || [],\n        ]);\n    }\n    createStateItemFromColumn(column) {\n        const rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;\n        const pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;\n        const aggFunc = column.isValueActive() ? column.getAggFunc() : null;\n        const sort = column.getSort() != null ? column.getSort() : null;\n        const sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;\n        const flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;\n        const res = {\n            colId: column.getColId(),\n            width: column.getActualWidth(),\n            hide: !column.isVisible(),\n            pinned: column.getPinned(),\n            sort,\n            sortIndex,\n            aggFunc,\n            rowGroup: column.isRowGroupActive(),\n            rowGroupIndex,\n            pivot: column.isPivotActive(),\n            pivotIndex: pivotIndex,\n            flex\n        };\n        return res;\n    }\n    getColumnState() {\n        if (missing(this.primaryColumns) || !this.isAlive()) {\n            return [];\n        }\n        const colsForState = this.getPrimaryAndSecondaryAndAutoColumns();\n        const res = colsForState.map(this.createStateItemFromColumn.bind(this));\n        this.orderColumnStateList(res);\n        return res;\n    }\n    orderColumnStateList(columnStateList) {\n        // for fast looking, store the index of each column\n        const colIdToGridIndexMap = convertToMap(this.gridColumns.map((col, index) => [col.getColId(), index]));\n        columnStateList.sort((itemA, itemB) => {\n            const posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;\n            const posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;\n            return posA - posB;\n        });\n    }\n    resetColumnState(source = \"api\") {\n        if (missingOrEmpty(this.primaryColumns)) {\n            return;\n        }\n        // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,\n        // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.\n        // As a work around, developers should just put lockPosition columns first in their colDef list.\n        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list\n        const primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);\n        const columnStates = [];\n        // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.\n        // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,\n        // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000\n        let letRowGroupIndex = 1000;\n        let letPivotIndex = 1000;\n        let colsToProcess = [];\n        if (this.groupAutoColumns) {\n            colsToProcess = colsToProcess.concat(this.groupAutoColumns);\n        }\n        if (primaryColumns) {\n            colsToProcess = colsToProcess.concat(primaryColumns);\n        }\n        colsToProcess.forEach(column => {\n            const stateItem = this.getColumnStateFromColDef(column);\n            if (missing(stateItem.rowGroupIndex) && stateItem.rowGroup) {\n                stateItem.rowGroupIndex = letRowGroupIndex++;\n            }\n            if (missing(stateItem.pivotIndex) && stateItem.pivot) {\n                stateItem.pivotIndex = letPivotIndex++;\n            }\n            columnStates.push(stateItem);\n        });\n        this.applyColumnState({ state: columnStates, applyOrder: true }, source);\n    }\n    getColumnStateFromColDef(column) {\n        const getValueOrNull = (a, b) => a != null ? a : b != null ? b : null;\n        const colDef = column.getColDef();\n        const sort = getValueOrNull(colDef.sort, colDef.initialSort);\n        const sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);\n        const hide = getValueOrNull(colDef.hide, colDef.initialHide);\n        const pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);\n        const width = getValueOrNull(colDef.width, colDef.initialWidth);\n        const flex = getValueOrNull(colDef.flex, colDef.initialFlex);\n        let rowGroupIndex = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);\n        let rowGroup = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);\n        if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {\n            rowGroupIndex = null;\n            rowGroup = null;\n        }\n        let pivotIndex = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);\n        let pivot = getValueOrNull(colDef.pivot, colDef.initialPivot);\n        if (pivotIndex == null && (pivot == null || pivot == false)) {\n            pivotIndex = null;\n            pivot = null;\n        }\n        const aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);\n        return {\n            colId: column.getColId(),\n            sort,\n            sortIndex,\n            hide,\n            pinned,\n            width,\n            flex,\n            rowGroup,\n            rowGroupIndex,\n            pivot,\n            pivotIndex,\n            aggFunc,\n        };\n    }\n    applyColumnState(params, source) {\n        if (missingOrEmpty(this.primaryColumns)) {\n            return false;\n        }\n        if (params && params.state && !params.state.forEach) {\n            console.warn('AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.');\n            return false;\n        }\n        const applyStates = (states, existingColumns, getById) => {\n            const dispatchEventsFunc = this.compareColumnStatesAndDispatchEvents(source);\n            this.autoGroupsNeedBuilding = true;\n            // at the end below, this list will have all columns we got no state for\n            const columnsWithNoState = existingColumns.slice();\n            const rowGroupIndexes = {};\n            const pivotIndexes = {};\n            const autoGroupColumnStates = [];\n            // If pivoting is modified, these are the states we try to reapply after\n            // the secondary columns are re-generated\n            const unmatchedAndAutoStates = [];\n            let unmatchedCount = 0;\n            const previousRowGroupCols = this.rowGroupColumns.slice();\n            const previousPivotCols = this.pivotColumns.slice();\n            states.forEach((state) => {\n                const colId = state.colId || '';\n                // auto group columns are re-created so deferring syncing with ColumnState\n                const isAutoGroupColumn = colId.startsWith(GROUP_AUTO_COLUMN_ID);\n                if (isAutoGroupColumn) {\n                    autoGroupColumnStates.push(state);\n                    unmatchedAndAutoStates.push(state);\n                    return;\n                }\n                const column = getById(colId);\n                if (!column) {\n                    unmatchedAndAutoStates.push(state);\n                    unmatchedCount += 1;\n                }\n                else {\n                    this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);\n                    removeFromArray(columnsWithNoState, column);\n                }\n            });\n            // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden\n            const applyDefaultsFunc = (col) => this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);\n            columnsWithNoState.forEach(applyDefaultsFunc);\n            // sort the lists according to the indexes that were provided\n            const comparator = (indexes, oldList, colA, colB) => {\n                const indexA = indexes[colA.getId()];\n                const indexB = indexes[colB.getId()];\n                const aHasIndex = indexA != null;\n                const bHasIndex = indexB != null;\n                if (aHasIndex && bHasIndex) {\n                    // both a and b are new cols with index, so sort on index\n                    return indexA - indexB;\n                }\n                if (aHasIndex) {\n                    // a has an index, so it should be before a\n                    return -1;\n                }\n                if (bHasIndex) {\n                    // b has an index, so it should be before a\n                    return 1;\n                }\n                const oldIndexA = oldList.indexOf(colA);\n                const oldIndexB = oldList.indexOf(colB);\n                const aHasOldIndex = oldIndexA >= 0;\n                const bHasOldIndex = oldIndexB >= 0;\n                if (aHasOldIndex && bHasOldIndex) {\n                    // both a and b are old cols, so sort based on last order\n                    return oldIndexA - oldIndexB;\n                }\n                if (aHasOldIndex) {\n                    // a is old, b is new, so b is first\n                    return -1;\n                }\n                // this bit does matter, means both are new cols\n                // but without index or that b is old and a is new\n                return 1;\n            };\n            this.rowGroupColumns.sort(comparator.bind(this, rowGroupIndexes, previousRowGroupCols));\n            this.pivotColumns.sort(comparator.bind(this, pivotIndexes, previousPivotCols));\n            this.updateGridColumns();\n            // sync newly created auto group columns with ColumnState\n            const autoGroupColsCopy = this.groupAutoColumns ? this.groupAutoColumns.slice() : [];\n            autoGroupColumnStates.forEach(stateItem => {\n                const autoCol = this.getAutoColumn(stateItem.colId);\n                removeFromArray(autoGroupColsCopy, autoCol);\n                this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);\n            });\n            // autogroup cols with nothing else, apply the default\n            autoGroupColsCopy.forEach(applyDefaultsFunc);\n            this.applyOrderAfterApplyState(params);\n            this.updateDisplayedColumns(source);\n            this.dispatchEverythingChanged(source);\n            dispatchEventsFunc(); // Will trigger secondary column changes if pivoting modified\n            return { unmatchedAndAutoStates, unmatchedCount };\n        };\n        this.columnAnimationService.start();\n        let { unmatchedAndAutoStates, unmatchedCount, } = applyStates(params.state || [], this.primaryColumns || [], (id) => this.getPrimaryColumn(id));\n        // If there are still states left over, see if we can apply them to newly generated\n        // secondary or auto columns. Also if defaults exist, ensure they are applied to secondary cols\n        if (unmatchedAndAutoStates.length > 0 || exists(params.defaultState)) {\n            unmatchedCount = applyStates(unmatchedAndAutoStates, this.secondaryColumns || [], (id) => this.getSecondaryColumn(id)).unmatchedCount;\n        }\n        this.columnAnimationService.finish();\n        return unmatchedCount === 0; // Successful if no states unaccounted for\n    }\n    applyOrderAfterApplyState(params) {\n        if (!params.applyOrder || !params.state) {\n            return;\n        }\n        let newOrder = [];\n        const processedColIds = {};\n        params.state.forEach(item => {\n            if (!item.colId || processedColIds[item.colId]) {\n                return;\n            }\n            const col = this.gridColumnsMap[item.colId];\n            if (col) {\n                newOrder.push(col);\n                processedColIds[item.colId] = true;\n            }\n        });\n        // add in all other columns\n        let autoGroupInsertIndex = 0;\n        this.gridColumns.forEach(col => {\n            const colId = col.getColId();\n            const alreadyProcessed = processedColIds[colId] != null;\n            if (alreadyProcessed) {\n                return;\n            }\n            const isAutoGroupCol = colId.startsWith(GROUP_AUTO_COLUMN_ID);\n            if (isAutoGroupCol) {\n                // auto group columns, if missing from state list, are added to the start.\n                // it's common to have autoGroup missing, as grouping could be on by default\n                // on a column, but the user could of since removed the grouping via the UI.\n                // if we don't inc the insert index, autoGroups will be inserted in reverse order\n                insertIntoArray(newOrder, col, autoGroupInsertIndex++);\n            }\n            else {\n                // normal columns, if missing from state list, are added at the end\n                newOrder.push(col);\n            }\n        });\n        // this is already done in updateGridColumns, however we changed the order above (to match the order of the state\n        // columns) so we need to do it again. we could of put logic into the order above to take into account fixed\n        // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here\n        // is less sexy for the code here, but it keeps consistency.\n        newOrder = this.placeLockedColumns(newOrder);\n        if (!this.doesMovePassMarryChildren(newOrder)) {\n            console.warn('AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.');\n            return;\n        }\n        this.gridColumns = newOrder;\n    }\n    compareColumnStatesAndDispatchEvents(source) {\n        const startState = {\n            rowGroupColumns: this.rowGroupColumns.slice(),\n            pivotColumns: this.pivotColumns.slice(),\n            valueColumns: this.valueColumns.slice()\n        };\n        const columnStateBefore = this.getColumnState();\n        const columnStateBeforeMap = {};\n        columnStateBefore.forEach(col => {\n            columnStateBeforeMap[col.colId] = col;\n        });\n        return () => {\n            const colsForState = this.getPrimaryAndSecondaryAndAutoColumns();\n            // dispatches generic ColumnEvents where all columns are returned rather than what has changed\n            const dispatchWhenListsDifferent = (eventType, colsBefore, colsAfter, idMapper) => {\n                const beforeList = colsBefore.map(idMapper);\n                const afterList = colsAfter.map(idMapper);\n                const unchanged = areEqual(beforeList, afterList);\n                if (unchanged) {\n                    return;\n                }\n                const changes = new Set(colsBefore);\n                colsAfter.forEach(id => {\n                    // if the first list had it, delete it, as it's unchanged.\n                    if (!changes.delete(id)) {\n                        // if the second list has it, and first doesn't, add it.\n                        changes.add(id);\n                    }\n                });\n                const changesArr = [...changes];\n                const event = {\n                    type: eventType,\n                    columns: changesArr,\n                    column: changesArr.length === 1 ? changesArr[0] : null,\n                    source: source\n                };\n                this.eventService.dispatchEvent(event);\n            };\n            // determines which columns have changed according to supplied predicate\n            const getChangedColumns = (changedPredicate) => {\n                const changedColumns = [];\n                colsForState.forEach(column => {\n                    const colStateBefore = columnStateBeforeMap[column.getColId()];\n                    if (colStateBefore && changedPredicate(colStateBefore, column)) {\n                        changedColumns.push(column);\n                    }\n                });\n                return changedColumns;\n            };\n            const columnIdMapper = (c) => c.getColId();\n            dispatchWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, this.rowGroupColumns, columnIdMapper);\n            dispatchWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, this.pivotColumns, columnIdMapper);\n            const valueChangePredicate = (cs, c) => {\n                const oldActive = cs.aggFunc != null;\n                const activeChanged = oldActive != c.isValueActive();\n                // we only check aggFunc if the agg is active\n                const aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();\n                return activeChanged || aggFuncChanged;\n            };\n            const changedValues = getChangedColumns(valueChangePredicate);\n            if (changedValues.length > 0) {\n                this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, changedValues, source);\n            }\n            const resizeChangePredicate = (cs, c) => cs.width != c.getActualWidth();\n            this.dispatchColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);\n            const pinnedChangePredicate = (cs, c) => cs.pinned != c.getPinned();\n            this.dispatchColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);\n            const visibilityChangePredicate = (cs, c) => cs.hide == c.isVisible();\n            this.dispatchColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);\n            const sortChangePredicate = (cs, c) => cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();\n            if (getChangedColumns(sortChangePredicate).length > 0) {\n                this.sortController.dispatchSortChangedEvents(source);\n            }\n            // special handling for moved column events\n            this.normaliseColumnMovedEventForColumnState(columnStateBefore, source);\n        };\n    }\n    getCommonValue(cols, valueGetter) {\n        if (!cols || cols.length == 0) {\n            return undefined;\n        }\n        // compare each value to the first value. if nothing differs, then value is common so return it.\n        const firstValue = valueGetter(cols[0]);\n        for (let i = 1; i < cols.length; i++) {\n            if (firstValue !== valueGetter(cols[i])) {\n                // values differ, no common value\n                return undefined;\n            }\n        }\n        return firstValue;\n    }\n    normaliseColumnMovedEventForColumnState(colStateBefore, source) {\n        // we are only interested in columns that were both present and visible before and after\n        const colStateAfter = this.getColumnState();\n        const colStateAfterMapped = {};\n        colStateAfter.forEach(s => colStateAfterMapped[s.colId] = s);\n        // get id's of cols in both before and after lists\n        const colsIntersectIds = {};\n        colStateBefore.forEach(s => {\n            if (colStateAfterMapped[s.colId]) {\n                colsIntersectIds[s.colId] = true;\n            }\n        });\n        // filter state lists, so we only have cols that were present before and after\n        const beforeFiltered = colStateBefore.filter(c => colsIntersectIds[c.colId]);\n        const afterFiltered = colStateAfter.filter(c => colsIntersectIds[c.colId]);\n        // see if any cols are in a different location\n        const movedColumns = [];\n        afterFiltered.forEach((csAfter, index) => {\n            const csBefore = beforeFiltered && beforeFiltered[index];\n            if (csBefore && csBefore.colId !== csAfter.colId) {\n                const gridCol = this.getGridColumn(csBefore.colId);\n                if (gridCol) {\n                    movedColumns.push(gridCol);\n                }\n            }\n        });\n        if (!movedColumns.length) {\n            return;\n        }\n        this.dispatchColumnMovedEvent({ movedColumns, source, finished: true });\n    }\n    syncColumnWithStateItem(column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {\n        if (!column) {\n            return;\n        }\n        const getValue = (key1, key2) => {\n            const obj = { value1: undefined, value2: undefined };\n            let calculated = false;\n            if (stateItem) {\n                if (stateItem[key1] !== undefined) {\n                    obj.value1 = stateItem[key1];\n                    calculated = true;\n                }\n                if (exists(key2) && stateItem[key2] !== undefined) {\n                    obj.value2 = stateItem[key2];\n                    calculated = true;\n                }\n            }\n            if (!calculated && defaultState) {\n                if (defaultState[key1] !== undefined) {\n                    obj.value1 = defaultState[key1];\n                }\n                if (exists(key2) && defaultState[key2] !== undefined) {\n                    obj.value2 = defaultState[key2];\n                }\n            }\n            return obj;\n        };\n        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true\n        const hide = getValue('hide').value1;\n        if (hide !== undefined) {\n            column.setVisible(!hide, source);\n        }\n        // sets pinned to 'left' or 'right'\n        const pinned = getValue('pinned').value1;\n        if (pinned !== undefined) {\n            column.setPinned(pinned);\n        }\n        // if width provided and valid, use it, otherwise stick with the old width\n        const minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());\n        // flex\n        const flex = getValue('flex').value1;\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n        // width - we only set width if column is not flexing\n        const noFlexThisCol = column.getFlex() <= 0;\n        if (noFlexThisCol) {\n            // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\n            const width = getValue('width').value1;\n            if (width != null) {\n                if (minColWidth != null && width >= minColWidth) {\n                    column.setActualWidth(width, source);\n                }\n            }\n        }\n        const sort = getValue('sort').value1;\n        if (sort !== undefined) {\n            if (sort === 'desc' || sort === 'asc') {\n                column.setSort(sort, source);\n            }\n            else {\n                column.setSort(undefined, source);\n            }\n        }\n        const sortIndex = getValue('sortIndex').value1;\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n        // we do not do aggFunc, rowGroup or pivot for auto cols or secondary cols\n        if (autoCol || !column.isPrimary()) {\n            return;\n        }\n        const aggFunc = getValue('aggFunc').value1;\n        if (aggFunc !== undefined) {\n            if (typeof aggFunc === 'string') {\n                column.setAggFunc(aggFunc);\n                if (!column.isValueActive()) {\n                    column.setValueActive(true, source);\n                    this.valueColumns.push(column);\n                }\n            }\n            else {\n                if (exists(aggFunc)) {\n                    console.warn('AG Grid: stateItem.aggFunc must be a string. if using your own aggregation ' +\n                        'functions, register the functions first before using them in get/set state. This is because it is ' +\n                        'intended for the column state to be stored and retrieved as simple JSON.');\n                }\n                // Note: we do not call column.setAggFunc(null), so that next time we aggregate\n                // by this column (eg drag the column to the agg section int he toolpanel) it will\n                // default to the last aggregation function.\n                if (column.isValueActive()) {\n                    column.setValueActive(false, source);\n                    removeFromArray(this.valueColumns, column);\n                }\n            }\n        }\n        const { value1: rowGroup, value2: rowGroupIndex } = getValue('rowGroup', 'rowGroupIndex');\n        if (rowGroup !== undefined || rowGroupIndex !== undefined) {\n            if (typeof rowGroupIndex === 'number' || rowGroup) {\n                if (!column.isRowGroupActive()) {\n                    column.setRowGroupActive(true, source);\n                    this.rowGroupColumns.push(column);\n                }\n                if (rowGroupIndexes && typeof rowGroupIndex === 'number') {\n                    rowGroupIndexes[column.getId()] = rowGroupIndex;\n                }\n            }\n            else {\n                if (column.isRowGroupActive()) {\n                    column.setRowGroupActive(false, source);\n                    removeFromArray(this.rowGroupColumns, column);\n                }\n            }\n        }\n        const { value1: pivot, value2: pivotIndex } = getValue('pivot', 'pivotIndex');\n        if (pivot !== undefined || pivotIndex !== undefined) {\n            if (typeof pivotIndex === 'number' || pivot) {\n                if (!column.isPivotActive()) {\n                    column.setPivotActive(true, source);\n                    this.pivotColumns.push(column);\n                }\n                if (pivotIndexes && typeof pivotIndex === 'number') {\n                    pivotIndexes[column.getId()] = pivotIndex;\n                }\n            }\n            else {\n                if (column.isPivotActive()) {\n                    column.setPivotActive(false, source);\n                    removeFromArray(this.pivotColumns, column);\n                }\n            }\n        }\n    }\n    getGridColumns(keys) {\n        return this.getColumns(keys, this.getGridColumn.bind(this));\n    }\n    getColumns(keys, columnLookupCallback) {\n        const foundColumns = [];\n        if (keys) {\n            keys.forEach((key) => {\n                const column = columnLookupCallback(key);\n                if (column) {\n                    foundColumns.push(column);\n                }\n            });\n        }\n        return foundColumns;\n    }\n    // used by growGroupPanel\n    getColumnWithValidation(key) {\n        if (key == null) {\n            return null;\n        }\n        const column = this.getGridColumn(key);\n        if (!column) {\n            console.warn('AG Grid: could not find column ' + key);\n        }\n        return column;\n    }\n    getPrimaryColumn(key) {\n        if (!this.primaryColumns) {\n            return null;\n        }\n        return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);\n    }\n    getGridColumn(key) {\n        return this.getColumn(key, this.gridColumns, this.gridColumnsMap);\n    }\n    lookupGridColumn(key) {\n        return this.gridColumnsMap[key];\n    }\n    getSecondaryColumn(key) {\n        if (!this.secondaryColumns) {\n            return null;\n        }\n        return this.getColumn(key, this.secondaryColumns, this.secondaryColumnsMap);\n    }\n    getColumn(key, columnList, columnMap) {\n        if (!key || !columnMap) {\n            return null;\n        }\n        // most of the time this method gets called the key is a string, so we put this shortcut in\n        // for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)\n        if (typeof key == 'string' && columnMap[key]) {\n            return columnMap[key];\n        }\n        for (let i = 0; i < columnList.length; i++) {\n            if (this.columnsMatch(columnList[i], key)) {\n                return columnList[i];\n            }\n        }\n        return this.getAutoColumn(key);\n    }\n    getSourceColumnsForGroupColumn(groupCol) {\n        const sourceColumnId = groupCol.getColDef().showRowGroup;\n        if (!sourceColumnId) {\n            return null;\n        }\n        if (sourceColumnId === true) {\n            return this.rowGroupColumns.slice(0);\n        }\n        const column = this.getPrimaryColumn(sourceColumnId);\n        return column ? [column] : null;\n    }\n    getAutoColumn(key) {\n        if (!this.groupAutoColumns ||\n            !exists(this.groupAutoColumns) ||\n            missing(this.groupAutoColumns)) {\n            return null;\n        }\n        return this.groupAutoColumns.find(groupCol => this.columnsMatch(groupCol, key)) || null;\n    }\n    columnsMatch(column, key) {\n        const columnMatches = column === key;\n        const colDefMatches = column.getColDef() === key;\n        const idMatches = column.getColId() == key;\n        return columnMatches || colDefMatches || idMatches;\n    }\n    getDisplayNameForColumn(column, location, includeAggFunc = false) {\n        if (!column) {\n            return null;\n        }\n        const headerName = this.getHeaderName(column.getColDef(), column, null, null, location);\n        if (includeAggFunc) {\n            return this.wrapHeaderNameWithAggFunc(column, headerName);\n        }\n        return headerName;\n    }\n    getDisplayNameForProvidedColumnGroup(columnGroup, providedColumnGroup, location) {\n        const colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;\n        if (colGroupDef) {\n            return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);\n        }\n        return null;\n    }\n    getDisplayNameForColumnGroup(columnGroup, location) {\n        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);\n    }\n    // location is where the column is going to appear, ie who is calling us\n    getHeaderName(colDef, column, columnGroup, providedColumnGroup, location) {\n        const headerValueGetter = colDef.headerValueGetter;\n        if (headerValueGetter) {\n            const params = {\n                colDef: colDef,\n                column: column,\n                columnGroup: columnGroup,\n                providedColumnGroup: providedColumnGroup,\n                location: location,\n                api: this.gridOptionsService.api,\n                columnApi: this.gridOptionsService.columnApi,\n                context: this.gridOptionsService.context\n            };\n            if (typeof headerValueGetter === 'function') {\n                // valueGetter is a function, so just call it\n                return headerValueGetter(params);\n            }\n            else if (typeof headerValueGetter === 'string') {\n                // valueGetter is an expression, so execute the expression\n                return this.expressionService.evaluate(headerValueGetter, params);\n            }\n            console.warn('AG Grid: headerValueGetter must be a function or a string');\n            return '';\n        }\n        else if (colDef.headerName != null) {\n            return colDef.headerName;\n        }\n        else if (colDef.field) {\n            return camelCaseToHumanText(colDef.field);\n        }\n        return '';\n    }\n    wrapHeaderNameWithAggFunc(column, headerName) {\n        if (this.gridOptionsService.get('suppressAggFuncInHeader')) {\n            return headerName;\n        }\n        // only columns with aggregation active can have aggregations\n        const pivotValueColumn = column.getColDef().pivotValueColumn;\n        const pivotActiveOnThisColumn = exists(pivotValueColumn);\n        let aggFunc = null;\n        let aggFuncFound;\n        // otherwise we have a measure that is active, and we are doing aggregation on it\n        if (pivotActiveOnThisColumn) {\n            const isCollapsedHeaderEnabled = this.gridOptionsService.get('removePivotHeaderRowWhenSingleValueColumn') && this.valueColumns.length === 1;\n            const isTotalColumn = column.getColDef().pivotTotalColumnIds !== undefined;\n            if (isCollapsedHeaderEnabled && !isTotalColumn) {\n                return headerName; // Skip decorating the header - in this case the label is the pivot key, not the value col\n            }\n            aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;\n            aggFuncFound = true;\n        }\n        else {\n            const measureActive = column.isValueActive();\n            const aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();\n            if (measureActive && aggregationPresent) {\n                aggFunc = column.getAggFunc();\n                aggFuncFound = true;\n            }\n            else {\n                aggFuncFound = false;\n            }\n        }\n        if (aggFuncFound) {\n            const aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'func';\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n            return `${aggFuncStringTranslated}(${headerName})`;\n        }\n        return headerName;\n    }\n    // returns the group with matching colId and instanceId. If instanceId is missing,\n    // matches only on the colId.\n    getColumnGroup(colId, partId) {\n        if (!colId) {\n            return null;\n        }\n        if (colId instanceof ColumnGroup) {\n            return colId;\n        }\n        const allColumnGroups = this.getAllDisplayedTrees();\n        const checkPartId = typeof partId === 'number';\n        let result = null;\n        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, (child) => {\n            if (child instanceof ColumnGroup) {\n                const columnGroup = child;\n                let matched;\n                if (checkPartId) {\n                    matched = colId === columnGroup.getGroupId() && partId === columnGroup.getPartId();\n                }\n                else {\n                    matched = colId === columnGroup.getGroupId();\n                }\n                if (matched) {\n                    result = columnGroup;\n                }\n            }\n        });\n        return result;\n    }\n    isReady() {\n        return this.ready;\n    }\n    extractValueColumns(source, oldPrimaryColumns) {\n        this.valueColumns = this.extractColumns(oldPrimaryColumns, this.valueColumns, (col, flag) => col.setValueActive(flag, source), \n        // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null\n        () => undefined, () => undefined, \n        // aggFunc is a string, so return it's existence\n        (colDef) => {\n            const aggFunc = colDef.aggFunc;\n            // null or empty string means clear\n            if (aggFunc === null || aggFunc === '') {\n                return null;\n            }\n            if (aggFunc === undefined) {\n                return;\n            }\n            return !!aggFunc;\n        }, (colDef) => {\n            // return false if any of the following: null, undefined, empty string\n            return colDef.initialAggFunc != null && colDef.initialAggFunc != '';\n        });\n        // all new columns added will have aggFunc missing, so set it to what is in the colDef\n        this.valueColumns.forEach(col => {\n            const colDef = col.getColDef();\n            // if aggFunc provided, we always override, as reactive property\n            if (colDef.aggFunc != null && colDef.aggFunc != '') {\n                col.setAggFunc(colDef.aggFunc);\n            }\n            else {\n                // otherwise we use initialAggFunc only if no agg func set - which happens when new column only\n                if (!col.getAggFunc()) {\n                    col.setAggFunc(colDef.initialAggFunc);\n                }\n            }\n        });\n    }\n    extractRowGroupColumns(source, oldPrimaryColumns) {\n        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, (col, flag) => col.setRowGroupActive(flag, source), (colDef) => colDef.rowGroupIndex, (colDef) => colDef.initialRowGroupIndex, (colDef) => colDef.rowGroup, (colDef) => colDef.initialRowGroup);\n    }\n    extractColumns(oldPrimaryColumns = [], previousCols = [], setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {\n        const colsWithIndex = [];\n        const colsWithValue = [];\n        // go though all cols.\n        // if value, change\n        // if default only, change only if new\n        (this.primaryColumns || []).forEach(col => {\n            const colIsNew = oldPrimaryColumns.indexOf(col) < 0;\n            const colDef = col.getColDef();\n            const value = attrToBoolean(getValueFunc(colDef));\n            const initialValue = attrToBoolean(getInitialValueFunc(colDef));\n            const index = attrToNumber(getIndexFunc(colDef));\n            const initialIndex = attrToNumber(getInitialIndexFunc(colDef));\n            let include;\n            const valuePresent = value !== undefined;\n            const indexPresent = index !== undefined;\n            const initialValuePresent = initialValue !== undefined;\n            const initialIndexPresent = initialIndex !== undefined;\n            if (valuePresent) {\n                include = value; // boolean value is guaranteed as attrToBoolean() is used above\n            }\n            else if (indexPresent) {\n                if (index === null) {\n                    // if col is new we don't want to use the default / initial if index is set to null. Similarly,\n                    // we don't want to include the property for existing columns, i.e. we want to 'clear' it.\n                    include = false;\n                }\n                else {\n                    // note that 'null >= 0' evaluates to true which means 'rowGroupIndex = null' would enable row\n                    // grouping if the null check didn't exist above.\n                    include = index >= 0;\n                }\n            }\n            else {\n                if (colIsNew) {\n                    // as no value or index is 'present' we use the default / initial when col is new\n                    if (initialValuePresent) {\n                        include = initialValue;\n                    }\n                    else if (initialIndexPresent) {\n                        include = initialIndex != null && initialIndex >= 0;\n                    }\n                    else {\n                        include = false;\n                    }\n                }\n                else {\n                    // otherwise include it if included last time, e.g. if we are extracting row group cols and this col\n                    // is an existing row group col (i.e. it exists in 'previousCols') then we should include it.\n                    include = previousCols.indexOf(col) >= 0;\n                }\n            }\n            if (include) {\n                const useIndex = colIsNew ? (index != null || initialIndex != null) : index != null;\n                useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);\n            }\n        });\n        const getIndexForCol = (col) => {\n            const index = getIndexFunc(col.getColDef());\n            const defaultIndex = getInitialIndexFunc(col.getColDef());\n            return index != null ? index : defaultIndex;\n        };\n        // sort cols with index, and add these first\n        colsWithIndex.sort((colA, colB) => {\n            const indexA = getIndexForCol(colA);\n            const indexB = getIndexForCol(colB);\n            if (indexA === indexB) {\n                return 0;\n            }\n            if (indexA < indexB) {\n                return -1;\n            }\n            return 1;\n        });\n        const res = [].concat(colsWithIndex);\n        // second add columns that were there before and in the same order as they were before,\n        // so we are preserving order of current grouping of columns that simply have rowGroup=true\n        previousCols.forEach(col => {\n            if (colsWithValue.indexOf(col) >= 0) {\n                res.push(col);\n            }\n        });\n        // lastly put in all remaining cols\n        colsWithValue.forEach(col => {\n            if (res.indexOf(col) < 0) {\n                res.push(col);\n            }\n        });\n        // set flag=false for removed cols\n        previousCols.forEach(col => {\n            if (res.indexOf(col) < 0) {\n                setFlagFunc(col, false);\n            }\n        });\n        // set flag=true for newly added cols\n        res.forEach(col => {\n            if (previousCols.indexOf(col) < 0) {\n                setFlagFunc(col, true);\n            }\n        });\n        return res;\n    }\n    extractPivotColumns(source, oldPrimaryColumns) {\n        this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, (col, flag) => col.setPivotActive(flag, source), (colDef) => colDef.pivotIndex, (colDef) => colDef.initialPivotIndex, (colDef) => colDef.pivot, (colDef) => colDef.initialPivot);\n    }\n    resetColumnGroupState(source = \"api\") {\n        if (!this.primaryColumnTree) {\n            return;\n        }\n        const stateItems = [];\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, child => {\n            if (child instanceof ProvidedColumnGroup) {\n                const colGroupDef = child.getColGroupDef();\n                const groupState = {\n                    groupId: child.getGroupId(),\n                    open: !colGroupDef ? undefined : colGroupDef.openByDefault\n                };\n                stateItems.push(groupState);\n            }\n        });\n        this.setColumnGroupState(stateItems, source);\n    }\n    getColumnGroupState() {\n        const columnGroupState = [];\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, node => {\n            if (node instanceof ProvidedColumnGroup) {\n                columnGroupState.push({\n                    groupId: node.getGroupId(),\n                    open: node.isExpanded()\n                });\n            }\n        });\n        return columnGroupState;\n    }\n    setColumnGroupState(stateItems, source = \"api\") {\n        if (!this.gridBalancedTree) {\n            return;\n        }\n        this.columnAnimationService.start();\n        const impactedGroups = [];\n        stateItems.forEach(stateItem => {\n            const groupKey = stateItem.groupId;\n            const newValue = stateItem.open;\n            const providedColumnGroup = this.getProvidedColumnGroup(groupKey);\n            if (!providedColumnGroup) {\n                return;\n            }\n            if (providedColumnGroup.isExpanded() === newValue) {\n                return;\n            }\n            this.logger.log('columnGroupOpened(' + providedColumnGroup.getGroupId() + ',' + newValue + ')');\n            providedColumnGroup.setExpanded(newValue);\n            impactedGroups.push(providedColumnGroup);\n        });\n        this.updateGroupsAndDisplayedColumns(source);\n        this.setFirstRightAndLastLeftPinned(source);\n        if (impactedGroups.length) {\n            const event = {\n                type: Events.EVENT_COLUMN_GROUP_OPENED,\n                columnGroup: ProvidedColumnGroup.length === 1 ? impactedGroups[0] : undefined,\n                columnGroups: impactedGroups,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        this.columnAnimationService.finish();\n    }\n    // called by headerRenderer - when a header is opened or closed\n    setColumnGroupOpened(key, newValue, source = \"api\") {\n        let keyAsString;\n        if (key instanceof ProvidedColumnGroup) {\n            keyAsString = key.getId();\n        }\n        else {\n            keyAsString = key || '';\n        }\n        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);\n    }\n    getProvidedColumnGroup(key) {\n        // if (key instanceof ProvidedColumnGroup) { return key; }\n        if (typeof key !== 'string') {\n            console.error('AG Grid: group key must be a string');\n        }\n        // otherwise, search for the column group by id\n        let res = null;\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, node => {\n            if (node instanceof ProvidedColumnGroup) {\n                if (node.getId() === key) {\n                    res = node;\n                }\n            }\n        });\n        return res;\n    }\n    calculateColumnsForDisplay() {\n        let columnsForDisplay;\n        if (this.pivotMode && missing(this.secondaryColumns)) {\n            // pivot mode is on, but we are not pivoting, so we only\n            // show columns we are aggregating on\n            columnsForDisplay = this.gridColumns.filter(column => {\n                const isAutoGroupCol = this.groupAutoColumns && includes(this.groupAutoColumns, column);\n                const isValueCol = this.valueColumns && includes(this.valueColumns, column);\n                return isAutoGroupCol || isValueCol;\n            });\n        }\n        else {\n            // otherwise continue as normal. this can be working on the primary\n            // or secondary columns, whatever the gridColumns are set to\n            columnsForDisplay = this.gridColumns.filter(column => {\n                // keep col if a) it's auto-group or b) it's visible\n                const isAutoGroupCol = this.groupAutoColumns && includes(this.groupAutoColumns, column);\n                return isAutoGroupCol || column.isVisible();\n            });\n        }\n        return columnsForDisplay;\n    }\n    checkColSpanActiveInCols(columns) {\n        let result = false;\n        columns.forEach(col => {\n            if (exists(col.getColDef().colSpan)) {\n                result = true;\n            }\n        });\n        return result;\n    }\n    calculateColumnsForGroupDisplay() {\n        this.groupDisplayColumns = [];\n        this.groupDisplayColumnsMap = {};\n        const checkFunc = (col) => {\n            const colDef = col.getColDef();\n            const underlyingColumn = colDef.showRowGroup;\n            if (colDef && exists(underlyingColumn)) {\n                this.groupDisplayColumns.push(col);\n                if (typeof underlyingColumn === 'string') {\n                    this.groupDisplayColumnsMap[underlyingColumn] = col;\n                }\n                else if (underlyingColumn === true) {\n                    this.getRowGroupColumns().forEach(rowGroupCol => {\n                        this.groupDisplayColumnsMap[rowGroupCol.getId()] = col;\n                    });\n                }\n            }\n        };\n        this.gridColumns.forEach(checkFunc);\n    }\n    getGroupDisplayColumns() {\n        return this.groupDisplayColumns;\n    }\n    getGroupDisplayColumnForGroup(rowGroupColumnId) {\n        return this.groupDisplayColumnsMap[rowGroupColumnId];\n    }\n    updateDisplayedColumns(source) {\n        const columnsForDisplay = this.calculateColumnsForDisplay();\n        this.buildDisplayedTrees(columnsForDisplay);\n        // also called when group opened/closed\n        this.updateGroupsAndDisplayedColumns(source);\n        // also called when group opened/closed\n        this.setFirstRightAndLastLeftPinned(source);\n    }\n    isSecondaryColumnsPresent() {\n        return exists(this.secondaryColumns);\n    }\n    setSecondaryColumns(colDefs, source = \"api\") {\n        if (!this.gridColumns) {\n            return;\n        }\n        const newColsPresent = colDefs && colDefs.length > 0;\n        // if not cols passed, and we had no cols anyway, then do nothing\n        if (!newColsPresent && missing(this.secondaryColumns)) {\n            return;\n        }\n        if (newColsPresent) {\n            this.processSecondaryColumnDefinitions(colDefs);\n            const balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false, this.secondaryBalancedTree || this.previousSecondaryColumns || undefined);\n            this.destroyOldColumns(this.secondaryBalancedTree, balancedTreeResult.columnTree);\n            this.secondaryBalancedTree = balancedTreeResult.columnTree;\n            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;\n            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);\n            this.secondaryColumnsMap = {};\n            this.secondaryColumns.forEach(col => this.secondaryColumnsMap[col.getId()] = col);\n            this.previousSecondaryColumns = null;\n        }\n        else {\n            this.previousSecondaryColumns = this.secondaryBalancedTree;\n            this.secondaryBalancedTree = null;\n            this.secondaryHeaderRowCount = -1;\n            this.secondaryColumns = null;\n            this.secondaryColumnsMap = {};\n        }\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n    }\n    processSecondaryColumnDefinitions(colDefs) {\n        const columnCallback = this.gridOptionsService.get('processPivotResultColDef');\n        const groupCallback = this.gridOptionsService.get('processPivotResultColGroupDef');\n        if (!columnCallback && !groupCallback) {\n            return undefined;\n        }\n        const searchForColDefs = (colDefs2) => {\n            colDefs2.forEach((abstractColDef) => {\n                const isGroup = exists(abstractColDef.children);\n                if (isGroup) {\n                    const colGroupDef = abstractColDef;\n                    if (groupCallback) {\n                        groupCallback(colGroupDef);\n                    }\n                    searchForColDefs(colGroupDef.children);\n                }\n                else {\n                    const colDef = abstractColDef;\n                    if (columnCallback) {\n                        columnCallback(colDef);\n                    }\n                }\n            });\n        };\n        if (colDefs) {\n            searchForColDefs(colDefs);\n        }\n    }\n    // called from: applyColumnState, setColumnDefs, setSecondaryColumns\n    updateGridColumns() {\n        const prevGridCols = this.gridBalancedTree;\n        if (this.gridColsArePrimary) {\n            this.lastPrimaryOrder = this.gridColumns;\n        }\n        else {\n            this.lastSecondaryOrder = this.gridColumns;\n        }\n        let sortOrderToRecover;\n        if (this.secondaryColumns && this.secondaryBalancedTree) {\n            const hasSameColumns = this.secondaryColumns.every((col) => {\n                return this.gridColumnsMap[col.getColId()] !== undefined;\n            });\n            this.gridBalancedTree = this.secondaryBalancedTree.slice();\n            this.gridHeaderRowCount = this.secondaryHeaderRowCount;\n            this.gridColumns = this.secondaryColumns.slice();\n            this.gridColsArePrimary = false;\n            // If the current columns are the same or a subset of the previous\n            // we keep the previous order, otherwise we go back to the order the pivot\n            // cols are generated in\n            if (hasSameColumns) {\n                sortOrderToRecover = this.lastSecondaryOrder;\n            }\n        }\n        else if (this.primaryColumns) {\n            this.gridBalancedTree = this.primaryColumnTree.slice();\n            this.gridHeaderRowCount = this.primaryHeaderRowCount;\n            this.gridColumns = this.primaryColumns.slice();\n            this.gridColsArePrimary = true;\n            // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns\n            // when this happens (eg if user moved a column) rather than revert back to the original column order.\n            // likewise if changing in/out of pivot mode, we want to maintain the order of the cols\n            sortOrderToRecover = this.lastPrimaryOrder;\n        }\n        // create the new auto columns\n        const areAutoColsChanged = this.createGroupAutoColumnsIfNeeded();\n        // if auto group cols have changed, and we have a sort order, we need to move auto cols to the start\n        if (areAutoColsChanged && sortOrderToRecover) {\n            const groupAutoColsMap = convertToMap(this.groupAutoColumns.map(col => [col, true]));\n            // if group columns has changed, we don't preserve the group column order, so remove them from the old order\n            sortOrderToRecover = sortOrderToRecover.filter(col => !groupAutoColsMap.has(col));\n            // and add them to the start of the order\n            sortOrderToRecover = [...this.groupAutoColumns, ...sortOrderToRecover];\n        }\n        this.addAutoGroupToGridColumns();\n        this.orderGridColsLike(sortOrderToRecover);\n        this.gridColumns = this.placeLockedColumns(this.gridColumns);\n        this.calculateColumnsForGroupDisplay();\n        this.refreshQuickFilterColumns();\n        this.clearDisplayedAndViewportColumns();\n        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);\n        this.gridColumnsMap = {};\n        this.gridColumns.forEach(col => this.gridColumnsMap[col.getId()] = col);\n        this.setAutoHeightActive();\n        if (!areEqual(prevGridCols, this.gridBalancedTree)) {\n            const event = {\n                type: Events.EVENT_GRID_COLUMNS_CHANGED\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    setAutoHeightActive() {\n        this.autoHeightActive = this.gridColumns.filter(col => col.isAutoHeight()).length > 0;\n        if (this.autoHeightActive) {\n            this.autoHeightActiveAtLeastOnce = true;\n            const supportedRowModel = this.gridOptionsService.isRowModelType('clientSide') || this.gridOptionsService.isRowModelType('serverSide');\n            if (!supportedRowModel) {\n                warnOnce('autoHeight columns only work with Client Side Row Model and Server Side Row Model.');\n            }\n        }\n    }\n    orderGridColsLike(colsOrder) {\n        if (missing(colsOrder)) {\n            return;\n        }\n        const lastOrderMapped = convertToMap(colsOrder.map((col, index) => [col, index]));\n        // only do the sort if at least one column is accounted for. columns will be not accounted for\n        // if changing from secondary to primary columns\n        let noColsFound = true;\n        this.gridColumns.forEach(col => {\n            if (lastOrderMapped.has(col)) {\n                noColsFound = false;\n            }\n        });\n        if (noColsFound) {\n            return;\n        }\n        // order cols in the same order as before. we need to make sure that all\n        // cols still exists, so filter out any that no longer exist.\n        const gridColsMap = convertToMap(this.gridColumns.map(col => [col, true]));\n        const oldColsOrdered = colsOrder.filter(col => gridColsMap.has(col));\n        const oldColsMap = convertToMap(oldColsOrdered.map(col => [col, true]));\n        const newColsOrdered = this.gridColumns.filter(col => !oldColsMap.has(col));\n        // add in the new columns, at the end (if no group), or at the end of the group (if a group)\n        const newGridColumns = oldColsOrdered.slice();\n        newColsOrdered.forEach(newCol => {\n            let parent = newCol.getOriginalParent();\n            // if no parent, means we are not grouping, so just add the column to the end\n            if (!parent) {\n                newGridColumns.push(newCol);\n                return;\n            }\n            // find the group the column belongs to. if no siblings at the current level (eg col in group on it's\n            // own) then go up one level and look for siblings there.\n            const siblings = [];\n            while (!siblings.length && parent) {\n                const leafCols = parent.getLeafColumns();\n                leafCols.forEach(leafCol => {\n                    const presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;\n                    const noYetInSiblings = siblings.indexOf(leafCol) < 0;\n                    if (presentInNewGriColumns && noYetInSiblings) {\n                        siblings.push(leafCol);\n                    }\n                });\n                parent = parent.getOriginalParent();\n            }\n            // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own\n            if (!siblings.length) {\n                newGridColumns.push(newCol);\n                return;\n            }\n            // find index of last column in the group\n            const indexes = siblings.map(col => newGridColumns.indexOf(col));\n            const lastIndex = Math.max(...indexes);\n            insertIntoArray(newGridColumns, newCol, lastIndex + 1);\n        });\n        this.gridColumns = newGridColumns;\n    }\n    isPrimaryColumnGroupsPresent() {\n        return this.primaryHeaderRowCount > 1;\n    }\n    // if we are using autoGroupCols, then they should be included for quick filter. this covers the\n    // following scenarios:\n    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on\n    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this\n    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)\n    refreshQuickFilterColumns() {\n        var _a;\n        let columnsForQuickFilter = (_a = (this.isPivotMode() ? this.secondaryColumns : this.primaryColumns)) !== null && _a !== void 0 ? _a : [];\n        if (this.groupAutoColumns) {\n            columnsForQuickFilter = columnsForQuickFilter.concat(this.groupAutoColumns);\n        }\n        this.columnsForQuickFilter = this.gridOptionsService.get('includeHiddenColumnsInQuickFilter')\n            ? columnsForQuickFilter\n            : columnsForQuickFilter.filter(col => col.isVisible() || col.isRowGroupActive());\n    }\n    placeLockedColumns(cols) {\n        const left = [];\n        const normal = [];\n        const right = [];\n        cols.forEach((col) => {\n            const position = col.getColDef().lockPosition;\n            if (position === 'right') {\n                right.push(col);\n            }\n            else if (position === 'left' || position === true) {\n                left.push(col);\n            }\n            else {\n                normal.push(col);\n            }\n        });\n        return [...left, ...normal, ...right];\n    }\n    addAutoGroupToGridColumns() {\n        if (missing(this.groupAutoColumns)) {\n            this.destroyOldColumns(this.groupAutoColsBalancedTree);\n            this.groupAutoColsBalancedTree = null;\n            return;\n        }\n        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;\n        const newAutoColsTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);\n        this.destroyOldColumns(this.groupAutoColsBalancedTree, newAutoColsTree);\n        this.groupAutoColsBalancedTree = newAutoColsTree;\n        this.gridBalancedTree = newAutoColsTree.concat(this.gridBalancedTree);\n    }\n    // gets called after we copy down grid columns, to make sure any part of the gui\n    // that tries to draw, eg the header, it will get empty lists of columns rather\n    // than stale columns. for example, the header will received gridColumnsChanged\n    // event, so will try and draw, but it will draw successfully when it acts on the\n    // virtualColumnsChanged event\n    clearDisplayedAndViewportColumns() {\n        this.viewportRowLeft = {};\n        this.viewportRowRight = {};\n        this.viewportRowCenter = {};\n        this.displayedColumnsLeft = [];\n        this.displayedColumnsRight = [];\n        this.displayedColumnsCenter = [];\n        this.displayedColumns = [];\n        this.viewportColumns = [];\n        this.headerViewportColumns = [];\n        this.viewportColumnsHash = '';\n    }\n    updateGroupsAndDisplayedColumns(source) {\n        this.updateOpenClosedVisibilityInColumnGroups();\n        this.deriveDisplayedColumns(source);\n        this.refreshFlexedColumns();\n        this.extractViewport();\n        this.updateBodyWidths();\n        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display\n        const event = {\n            type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    deriveDisplayedColumns(source) {\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);\n        this.joinDisplayedColumns();\n        this.setLeftValues(source);\n        this.displayedAutoHeightCols = this.displayedColumns.filter(col => col.isAutoHeight());\n    }\n    isAutoRowHeightActive() {\n        return this.autoHeightActive;\n    }\n    wasAutoRowHeightEverActive() {\n        return this.autoHeightActiveAtLeastOnce;\n    }\n    joinDisplayedColumns() {\n        if (this.gridOptionsService.get('enableRtl')) {\n            this.displayedColumns = this.displayedColumnsRight\n                .concat(this.displayedColumnsCenter)\n                .concat(this.displayedColumnsLeft);\n        }\n        else {\n            this.displayedColumns = this.displayedColumnsLeft\n                .concat(this.displayedColumnsCenter)\n                .concat(this.displayedColumnsRight);\n        }\n    }\n    // sets the left pixel position of each column\n    setLeftValues(source) {\n        this.setLeftValuesOfColumns(source);\n        this.setLeftValuesOfGroups();\n    }\n    setLeftValuesOfColumns(source) {\n        if (!this.primaryColumns) {\n            return;\n        }\n        // go through each list of displayed columns\n        const allColumns = this.primaryColumns.slice(0);\n        // let totalColumnWidth = this.getWidthOfColsInList()\n        const doingRtl = this.gridOptionsService.get('enableRtl');\n        [\n            this.displayedColumnsLeft,\n            this.displayedColumnsRight,\n            this.displayedColumnsCenter\n        ].forEach(columns => {\n            if (doingRtl) {\n                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards\n                let left = this.getWidthOfColsInList(columns);\n                columns.forEach(column => {\n                    left -= column.getActualWidth();\n                    column.setLeft(left, source);\n                });\n            }\n            else {\n                // otherwise normal LTR, we start at zero\n                let left = 0;\n                columns.forEach(column => {\n                    column.setLeft(left, source);\n                    left += column.getActualWidth();\n                });\n            }\n            removeAllFromUnorderedArray(allColumns, columns);\n        });\n        // items left in allColumns are columns not displayed, so remove the left position. this is\n        // important for the rows, as if a col is made visible, then taken out, then made visible again,\n        // we don't want the animation of the cell floating in from the old position, whatever that was.\n        allColumns.forEach((column) => {\n            column.setLeft(null, source);\n        });\n    }\n    setLeftValuesOfGroups() {\n        // a groups left value is the lest left value of it's children\n        [\n            this.displayedTreeLeft,\n            this.displayedTreeRight,\n            this.displayedTreeCentre\n        ].forEach(columns => {\n            columns.forEach(column => {\n                if (column instanceof ColumnGroup) {\n                    const columnGroup = column;\n                    columnGroup.checkLeft();\n                }\n            });\n        });\n    }\n    derivedDisplayedColumnsFromDisplayedTree(tree, columns) {\n        columns.length = 0;\n        this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, (child) => {\n            if (child instanceof Column) {\n                columns.push(child);\n            }\n        });\n    }\n    extractViewportColumns() {\n        if (this.suppressColumnVirtualisation) {\n            // no virtualisation, so don't filter\n            this.viewportColumnsCenter = this.displayedColumnsCenter;\n            this.headerViewportColumnsCenter = this.displayedColumnsCenter;\n        }\n        else {\n            // filter out what should be visible\n            this.viewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));\n            this.headerViewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));\n        }\n        this.viewportColumns = this.viewportColumnsCenter\n            .concat(this.displayedColumnsLeft)\n            .concat(this.displayedColumnsRight);\n        this.headerViewportColumns = this.headerViewportColumnsCenter\n            .concat(this.displayedColumnsLeft)\n            .concat(this.displayedColumnsRight);\n    }\n    getVirtualHeaderGroupRow(type, dept) {\n        let result;\n        switch (type) {\n            case 'left':\n                result = this.viewportRowLeft[dept];\n                break;\n            case 'right':\n                result = this.viewportRowRight[dept];\n                break;\n            default:\n                result = this.viewportRowCenter[dept];\n                break;\n        }\n        if (missing(result)) {\n            result = [];\n        }\n        return result;\n    }\n    calculateHeaderRows() {\n        // go through each group, see if any of it's cols are displayed, and if yes,\n        // then this group is included\n        this.viewportRowLeft = {};\n        this.viewportRowRight = {};\n        this.viewportRowCenter = {};\n        // for easy lookup when building the groups.\n        const virtualColIds = {};\n        this.headerViewportColumns.forEach(col => virtualColIds[col.getId()] = true);\n        const testGroup = (children, result, dept) => {\n            let returnValue = false;\n            for (let i = 0; i < children.length; i++) {\n                // see if this item is within viewport\n                const child = children[i];\n                let addThisItem = false;\n                if (child instanceof Column) {\n                    // for column, test if column is included\n                    addThisItem = virtualColIds[child.getId()] === true;\n                }\n                else {\n                    // if group, base decision on children\n                    const columnGroup = child;\n                    const displayedChildren = columnGroup.getDisplayedChildren();\n                    if (displayedChildren) {\n                        addThisItem = testGroup(displayedChildren, result, dept + 1);\n                    }\n                }\n                if (addThisItem) {\n                    returnValue = true;\n                    if (!result[dept]) {\n                        result[dept] = [];\n                    }\n                    result[dept].push(child);\n                }\n            }\n            return returnValue;\n        };\n        testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);\n        testGroup(this.displayedTreeRight, this.viewportRowRight, 0);\n        testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);\n    }\n    extractViewport() {\n        const hashColumn = (c) => `${c.getId()}-${c.getPinned() || 'normal'}`;\n        this.extractViewportColumns();\n        const newHash = this.viewportColumns.map(hashColumn).join('#');\n        const changed = this.viewportColumnsHash !== newHash;\n        if (changed) {\n            this.viewportColumnsHash = newHash;\n            this.calculateHeaderRows();\n        }\n        return changed;\n    }\n    refreshFlexedColumns(params = {}) {\n        var _a;\n        const source = params.source ? params.source : 'flex';\n        if (params.viewportWidth != null) {\n            this.flexViewportWidth = params.viewportWidth;\n        }\n        if (!this.flexViewportWidth) {\n            return [];\n        }\n        // If the grid has left-over space, divide it between flexing columns in proportion to their flex value.\n        // A \"flexing column\" is one that has a 'flex' value set and is not currently being constrained by its\n        // minWidth or maxWidth rules.\n        let flexAfterDisplayIndex = -1;\n        if (params.resizingCols) {\n            const allResizingCols = new Set(params.resizingCols);\n            // find the last resizing col, as only cols after this one are affected by the resizing\n            let displayedCols = this.displayedColumnsCenter;\n            for (let i = displayedCols.length - 1; i >= 0; i--) {\n                if (allResizingCols.has(displayedCols[i])) {\n                    flexAfterDisplayIndex = i;\n                    break;\n                }\n            }\n        }\n        // the width of all of the columns for which the width has been determined\n        let knownColumnsWidth = 0;\n        let flexingColumns = [];\n        // store the minimum width of all the flex columns, so we can determine if flex is even possible more quickly\n        let minimumFlexedWidth = 0;\n        let totalFlex = 0;\n        for (let i = 0; i < this.displayedColumnsCenter.length; i++) {\n            const isFlex = this.displayedColumnsCenter[i].getFlex() && i > flexAfterDisplayIndex;\n            if (isFlex) {\n                flexingColumns.push(this.displayedColumnsCenter[i]);\n                totalFlex += this.displayedColumnsCenter[i].getFlex();\n                minimumFlexedWidth += (_a = this.displayedColumnsCenter[i].getMinWidth()) !== null && _a !== void 0 ? _a : 0;\n            }\n            else {\n                knownColumnsWidth += this.displayedColumnsCenter[i].getActualWidth();\n            }\n        }\n        ;\n        if (!flexingColumns.length) {\n            return [];\n        }\n        let changedColumns = [];\n        // this is for performance to prevent trying to flex when unnecessary\n        if (knownColumnsWidth + minimumFlexedWidth > this.flexViewportWidth) {\n            // known columns and the minimum width of all the flex cols are too wide for viewport\n            // so don't flex\n            flexingColumns.forEach(col => { var _a; return col.setActualWidth((_a = col.getMinWidth()) !== null && _a !== void 0 ? _a : 0, source); });\n            // No columns should flex, but all have been changed. Swap arrays so events fire properly.\n            // Expensive logic won't execute as flex columns is empty.\n            changedColumns = flexingColumns;\n            flexingColumns = [];\n        }\n        const flexingColumnSizes = [];\n        let spaceForFlexingColumns;\n        outer: while (true) {\n            spaceForFlexingColumns = this.flexViewportWidth - knownColumnsWidth;\n            const spacePerFlex = spaceForFlexingColumns / totalFlex;\n            for (let i = 0; i < flexingColumns.length; i++) {\n                const col = flexingColumns[i];\n                const widthByFlexRule = spacePerFlex * col.getFlex();\n                let constrainedWidth = 0;\n                const minWidth = col.getMinWidth();\n                const maxWidth = col.getMaxWidth();\n                if (exists(minWidth) && widthByFlexRule < minWidth) {\n                    constrainedWidth = minWidth;\n                }\n                else if (exists(maxWidth) && widthByFlexRule > maxWidth) {\n                    constrainedWidth = maxWidth;\n                }\n                if (constrainedWidth) {\n                    // This column is not in fact flexing as it is being constrained to a specific size\n                    // so remove it from the list of flexing columns and start again\n                    col.setActualWidth(constrainedWidth, source);\n                    removeFromUnorderedArray(flexingColumns, col);\n                    totalFlex -= col.getFlex();\n                    changedColumns.push(col);\n                    knownColumnsWidth += col.getActualWidth();\n                    continue outer;\n                }\n                flexingColumnSizes[i] = Math.round(widthByFlexRule);\n            }\n            break;\n        }\n        let remainingSpace = spaceForFlexingColumns;\n        flexingColumns.forEach((col, i) => {\n            col.setActualWidth(Math.min(flexingColumnSizes[i], remainingSpace), source);\n            changedColumns.push(col);\n            remainingSpace -= flexingColumnSizes[i];\n        });\n        if (!params.skipSetLeft) {\n            this.setLeftValues(source);\n        }\n        if (params.updateBodyWidths) {\n            this.updateBodyWidths();\n        }\n        if (params.fireResizedEvent) {\n            this.dispatchColumnResizedEvent(changedColumns, true, source, flexingColumns);\n        }\n        return flexingColumns;\n    }\n    // called from api\n    sizeColumnsToFit(gridWidth, source = \"sizeColumnsToFit\", silent, params) {\n        var _a, _b, _c, _d, _e;\n        if (this.shouldQueueResizeOperations) {\n            this.resizeOperationQueue.push(() => this.sizeColumnsToFit(gridWidth, source, silent, params));\n            return;\n        }\n        const limitsMap = {};\n        if (params) {\n            (_a = params === null || params === void 0 ? void 0 : params.columnLimits) === null || _a === void 0 ? void 0 : _a.forEach((_a) => {\n                var { key } = _a, dimensions = __rest(_a, [\"key\"]);\n                limitsMap[typeof key === 'string' ? key : key.getColId()] = dimensions;\n            });\n        }\n        // avoid divide by zero\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const doColumnsAlreadyFit = gridWidth === this.getWidthOfColsInList(allDisplayedColumns);\n        if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) {\n            return;\n        }\n        const colsToSpread = [];\n        const colsToNotSpread = [];\n        allDisplayedColumns.forEach(column => {\n            if (column.getColDef().suppressSizeToFit === true) {\n                colsToNotSpread.push(column);\n            }\n            else {\n                colsToSpread.push(column);\n            }\n        });\n        // make a copy of the cols that are going to be resized\n        const colsToDispatchEventFor = colsToSpread.slice(0);\n        let finishedResizing = false;\n        const moveToNotSpread = (column) => {\n            removeFromArray(colsToSpread, column);\n            colsToNotSpread.push(column);\n        };\n        // resetting cols to their original width makes the sizeColumnsToFit more deterministic,\n        // rather than depending on the current size of the columns. most users call sizeColumnsToFit\n        // immediately after grid is created, so will make no difference. however if application is calling\n        // sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want\n        // the columns to start shrinking / growing over time.\n        //\n        // NOTE: the process below will assign values to `this.actualWidth` of each column without firing events\n        // for this reason we need to manually dispatch resize events after the resize has been done for each column.\n        colsToSpread.forEach(column => {\n            var _a, _b;\n            column.resetActualWidth(source);\n            const widthOverride = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column.getId()];\n            const minOverride = ((_a = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.minWidth) !== null && _a !== void 0 ? _a : params === null || params === void 0 ? void 0 : params.defaultMinWidth);\n            const maxOverride = ((_b = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.maxWidth) !== null && _b !== void 0 ? _b : params === null || params === void 0 ? void 0 : params.defaultMaxWidth);\n            const colWidth = column.getActualWidth();\n            if (typeof minOverride === 'number' && colWidth < minOverride) {\n                column.setActualWidth(minOverride, source, true);\n            }\n            else if (typeof maxOverride === 'number' && colWidth > maxOverride) {\n                column.setActualWidth(maxOverride, source, true);\n            }\n        });\n        while (!finishedResizing) {\n            finishedResizing = true;\n            const availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);\n            if (availablePixels <= 0) {\n                // no width, set everything to minimum\n                colsToSpread.forEach((column) => {\n                    var _a, _b;\n                    const widthOverride = (_b = (_a = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column.getId()]) === null || _a === void 0 ? void 0 : _a.minWidth) !== null && _b !== void 0 ? _b : params === null || params === void 0 ? void 0 : params.defaultMinWidth;\n                    if (typeof widthOverride === 'number') {\n                        column.setActualWidth(widthOverride, source, true);\n                        return;\n                    }\n                    column.setMinimum(source);\n                });\n            }\n            else {\n                const scale = availablePixels / this.getWidthOfColsInList(colsToSpread);\n                // we set the pixels for the last col based on what's left, as otherwise\n                // we could be a pixel or two short or extra because of rounding errors.\n                let pixelsForLastCol = availablePixels;\n                // backwards through loop, as we are removing items as we go\n                for (let i = colsToSpread.length - 1; i >= 0; i--) {\n                    const column = colsToSpread[i];\n                    const widthOverride = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column.getId()];\n                    const minOverride = ((_b = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.minWidth) !== null && _b !== void 0 ? _b : params === null || params === void 0 ? void 0 : params.defaultMinWidth);\n                    const maxOverride = ((_c = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.maxWidth) !== null && _c !== void 0 ? _c : params === null || params === void 0 ? void 0 : params.defaultMaxWidth);\n                    const colMinWidth = (_d = column.getMinWidth()) !== null && _d !== void 0 ? _d : 0;\n                    const colMaxWidth = (_e = column.getMaxWidth()) !== null && _e !== void 0 ? _e : Number.MAX_VALUE;\n                    const minWidth = typeof minOverride === 'number' && minOverride > colMinWidth ? minOverride : column.getMinWidth();\n                    const maxWidth = typeof maxOverride === 'number' && maxOverride < colMaxWidth ? maxOverride : column.getMaxWidth();\n                    let newWidth = Math.round(column.getActualWidth() * scale);\n                    if (exists(minWidth) && newWidth < minWidth) {\n                        newWidth = minWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    }\n                    else if (exists(maxWidth) && newWidth > maxWidth) {\n                        newWidth = maxWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    }\n                    else if (i === 0) { // if this is the last column\n                        newWidth = pixelsForLastCol;\n                    }\n                    column.setActualWidth(newWidth, source, true);\n                    pixelsForLastCol -= newWidth;\n                }\n            }\n        }\n        // see notes above\n        colsToDispatchEventFor.forEach(col => {\n            col.fireColumnWidthChangedEvent(source);\n        });\n        this.setLeftValues(source);\n        this.updateBodyWidths();\n        if (silent) {\n            return;\n        }\n        this.dispatchColumnResizedEvent(colsToDispatchEventFor, true, source);\n    }\n    buildDisplayedTrees(visibleColumns) {\n        const leftVisibleColumns = [];\n        const rightVisibleColumns = [];\n        const centerVisibleColumns = [];\n        visibleColumns.forEach(column => {\n            switch (column.getPinned()) {\n                case \"left\":\n                    leftVisibleColumns.push(column);\n                    break;\n                case \"right\":\n                    rightVisibleColumns.push(column);\n                    break;\n                default:\n                    centerVisibleColumns.push(column);\n                    break;\n            }\n        });\n        const groupInstanceIdCreator = new GroupInstanceIdCreator();\n        this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, groupInstanceIdCreator, 'left', this.displayedTreeLeft);\n        this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, groupInstanceIdCreator, 'right', this.displayedTreeRight);\n        this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, groupInstanceIdCreator, null, this.displayedTreeCentre);\n        this.updateDisplayedMap();\n    }\n    updateDisplayedMap() {\n        this.displayedColumnsAndGroupsMap = {};\n        const func = (child) => {\n            this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;\n        };\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);\n    }\n    isDisplayed(item) {\n        const fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];\n        // check for reference, in case new column / group with same id is now present\n        return fromMap === item;\n    }\n    updateOpenClosedVisibilityInColumnGroups() {\n        const allColumnGroups = this.getAllDisplayedTrees();\n        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, child => {\n            if (child instanceof ColumnGroup) {\n                child.calculateDisplayedColumns();\n            }\n        });\n    }\n    getGroupAutoColumns() {\n        return this.groupAutoColumns;\n    }\n    /**\n     * Creates new auto group columns if required\n     * @returns whether auto cols have changed\n     */\n    createGroupAutoColumnsIfNeeded() {\n        const forceRecreateAutoGroups = this.forceRecreateAutoGroups;\n        this.forceRecreateAutoGroups = false;\n        if (!this.autoGroupsNeedBuilding) {\n            return false;\n        }\n        this.autoGroupsNeedBuilding = false;\n        const groupFullWidthRow = this.gridOptionsService.isGroupUseEntireRow(this.pivotMode);\n        // we need to allow suppressing auto-column separately for group and pivot as the normal situation\n        // is CSRM and user provides group column themselves for normal view, but when they go into pivot the\n        // columns are generated by the grid so no opportunity for user to provide group column. so need a way\n        // to suppress auto-col for grouping only, and not pivot.\n        // however if using Viewport RM or SSRM and user is providing the columns, the user may wish full control\n        // of the group column in this instance.\n        const suppressAutoColumn = this.pivotMode ?\n            this.gridOptionsService.get('pivotSuppressAutoColumn') : this.isGroupSuppressAutoColumn();\n        const groupingActive = this.rowGroupColumns.length > 0 || this.gridOptionsService.get('treeData');\n        const needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;\n        if (needAutoColumns) {\n            const newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);\n            const autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);\n            // we force recreate so new group cols pick up the new\n            // definitions. otherwise we could ignore the new cols because they appear to be the same.\n            if (autoColsDifferent || forceRecreateAutoGroups) {\n                this.groupAutoColumns = newAutoGroupCols;\n                return true;\n            }\n        }\n        else {\n            this.groupAutoColumns = null;\n        }\n        return false;\n    }\n    isGroupSuppressAutoColumn() {\n        const groupDisplayType = this.gridOptionsService.get('groupDisplayType');\n        const isCustomRowGroups = groupDisplayType === 'custom';\n        if (isCustomRowGroups) {\n            return true;\n        }\n        const treeDataDisplayType = this.gridOptionsService.get('treeDataDisplayType');\n        return treeDataDisplayType === 'custom';\n    }\n    autoColsEqual(colsA, colsB) {\n        return areEqual(colsA, colsB, (a, b) => a.getColId() === b.getColId());\n    }\n    getWidthOfColsInList(columnList) {\n        return columnList.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n    getFirstDisplayedColumn() {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const queryOrder = [\n            'getDisplayedLeftColumns',\n            'getDisplayedCenterColumns',\n            'getDisplayedRightColumns'\n        ];\n        if (isRtl) {\n            queryOrder.reverse();\n        }\n        for (let i = 0; i < queryOrder.length; i++) {\n            const container = this[queryOrder[i]]();\n            if (container.length) {\n                return isRtl ? last(container) : container[0];\n            }\n        }\n        return null;\n    }\n    setColumnHeaderHeight(col, height) {\n        const changed = col.setAutoHeaderHeight(height);\n        if (changed) {\n            const event = {\n                type: Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,\n                column: col,\n                columns: [col],\n                source: 'autosizeColumnHeaderHeight',\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    getColumnGroupHeaderRowHeight() {\n        if (this.isPivotMode()) {\n            return this.getPivotGroupHeaderHeight();\n        }\n        return this.getGroupHeaderHeight();\n    }\n    getColumnHeaderRowHeight() {\n        const defaultHeight = (this.isPivotMode() ?\n            this.getPivotHeaderHeight() :\n            this.getHeaderHeight());\n        const displayedHeights = this.getAllDisplayedColumns()\n            .filter((col) => col.isAutoHeaderHeight())\n            .map((col) => col.getAutoHeaderHeight() || 0);\n        return Math.max(defaultHeight, ...displayedHeights);\n    }\n    getHeaderHeight() {\n        var _a;\n        return (_a = this.gridOptionsService.get('headerHeight')) !== null && _a !== void 0 ? _a : this.environment.getFromTheme(25, 'headerHeight');\n    }\n    getFloatingFiltersHeight() {\n        var _a;\n        return (_a = this.gridOptionsService.get('floatingFiltersHeight')) !== null && _a !== void 0 ? _a : this.getHeaderHeight();\n    }\n    getGroupHeaderHeight() {\n        var _a;\n        return (_a = this.gridOptionsService.get('groupHeaderHeight')) !== null && _a !== void 0 ? _a : this.getHeaderHeight();\n    }\n    getPivotHeaderHeight() {\n        var _a;\n        return (_a = this.gridOptionsService.get('pivotHeaderHeight')) !== null && _a !== void 0 ? _a : this.getHeaderHeight();\n    }\n    getPivotGroupHeaderHeight() {\n        var _a;\n        return (_a = this.gridOptionsService.get('pivotGroupHeaderHeight')) !== null && _a !== void 0 ? _a : this.getGroupHeaderHeight();\n    }\n    queueResizeOperations() {\n        this.shouldQueueResizeOperations = true;\n    }\n    processResizeOperations() {\n        this.shouldQueueResizeOperations = false;\n        this.resizeOperationQueue.forEach(resizeOperation => resizeOperation());\n        this.resizeOperationQueue = [];\n    }\n    resetColumnDefIntoColumn(column, source) {\n        const userColDef = column.getUserProvidedColDef();\n        if (!userColDef) {\n            return false;\n        }\n        const newColDef = this.columnFactory.addColumnDefaultAndTypes(userColDef, column.getColId());\n        column.setColDef(newColDef, userColDef, source);\n        return true;\n    }\n    isColumnGroupingLocked(column) {\n        const groupLockGroupColumns = this.gridOptionsService.get('groupLockGroupColumns');\n        if (!column.isRowGroupActive() || groupLockGroupColumns === 0) {\n            return false;\n        }\n        if (groupLockGroupColumns === -1) {\n            return true;\n        }\n        const colIndex = this.rowGroupColumns.findIndex(groupCol => groupCol.getColId() === column.getColId());\n        return groupLockGroupColumns > colIndex;\n    }\n    generateColumnStateForRowGroupAndPivotIndexes(updatedRowGroupColumnState, updatedPivotColumnState) {\n        // Generally columns should appear in the order they were before. For any new columns, these should appear in the original col def order.\n        // The exception is for columns that were added via `addGroupColumns`. These should appear at the end.\n        // We don't have to worry about full updates, as in this case the arrays are correct, and they won't appear in the updated lists.\n        let existingColumnStateUpdates = {};\n        const orderColumns = (updatedColumnState, colList, enableProp, initialEnableProp, indexProp, initialIndexProp) => {\n            if (!colList.length || !this.primaryColumns) {\n                return [];\n            }\n            const updatedColIdArray = Object.keys(updatedColumnState);\n            const updatedColIds = new Set(updatedColIdArray);\n            const newColIds = new Set(updatedColIdArray);\n            const allColIds = new Set(colList.map(column => {\n                const colId = column.getColId();\n                newColIds.delete(colId);\n                return colId;\n            }).concat(updatedColIdArray));\n            const colIdsInOriginalOrder = [];\n            const originalOrderMap = {};\n            let orderIndex = 0;\n            for (let i = 0; i < this.primaryColumns.length; i++) {\n                const colId = this.primaryColumns[i].getColId();\n                if (allColIds.has(colId)) {\n                    colIdsInOriginalOrder.push(colId);\n                    originalOrderMap[colId] = orderIndex++;\n                }\n            }\n            // follow approach in `resetColumnState`\n            let index = 1000;\n            let hasAddedNewCols = false;\n            let lastIndex = 0;\n            const processPrecedingNewCols = (colId) => {\n                const originalOrderIndex = originalOrderMap[colId];\n                for (let i = lastIndex; i < originalOrderIndex; i++) {\n                    const newColId = colIdsInOriginalOrder[i];\n                    if (newColIds.has(newColId)) {\n                        updatedColumnState[newColId][indexProp] = index++;\n                        newColIds.delete(newColId);\n                    }\n                }\n                lastIndex = originalOrderIndex;\n            };\n            colList.forEach(column => {\n                const colId = column.getColId();\n                if (updatedColIds.has(colId)) {\n                    // New col already exists. Add any other new cols that should be before it.\n                    processPrecedingNewCols(colId);\n                    updatedColumnState[colId][indexProp] = index++;\n                }\n                else {\n                    const colDef = column.getColDef();\n                    const missingIndex = colDef[indexProp] === null || (colDef[indexProp] === undefined && colDef[initialIndexProp] == null);\n                    if (missingIndex) {\n                        if (!hasAddedNewCols) {\n                            const propEnabled = colDef[enableProp] || (colDef[enableProp] === undefined && colDef[initialEnableProp]);\n                            if (propEnabled) {\n                                processPrecedingNewCols(colId);\n                            }\n                            else {\n                                // Reached the first manually added column. Add all the new columns now.\n                                newColIds.forEach(newColId => {\n                                    // Rather than increment the index, just use the original order index - doesn't need to be contiguous.\n                                    updatedColumnState[newColId][indexProp] = index + originalOrderMap[newColId];\n                                });\n                                index += colIdsInOriginalOrder.length;\n                                hasAddedNewCols = true;\n                            }\n                        }\n                        if (!existingColumnStateUpdates[colId]) {\n                            existingColumnStateUpdates[colId] = { colId };\n                        }\n                        existingColumnStateUpdates[colId][indexProp] = index++;\n                    }\n                }\n            });\n        };\n        orderColumns(updatedRowGroupColumnState, this.rowGroupColumns, 'rowGroup', 'initialRowGroup', 'rowGroupIndex', 'initialRowGroupIndex');\n        orderColumns(updatedPivotColumnState, this.pivotColumns, 'pivot', 'initialPivot', 'pivotIndex', 'initialPivotIndex');\n        return Object.values(existingColumnStateUpdates);\n    }\n    onColumnsReady() {\n        const autoSizeStrategy = this.gridOptionsService.get('autoSizeStrategy');\n        if (!autoSizeStrategy) {\n            return;\n        }\n        const { type } = autoSizeStrategy;\n        // ensure things like aligned grids have linked first\n        setTimeout(() => {\n            if (type === 'fitGridWidth') {\n                const { columnLimits: propColumnLimits, defaultMinWidth, defaultMaxWidth } = autoSizeStrategy;\n                const columnLimits = propColumnLimits === null || propColumnLimits === void 0 ? void 0 : propColumnLimits.map(({ colId: key, minWidth, maxWidth }) => ({\n                    key,\n                    minWidth,\n                    maxWidth\n                }));\n                this.ctrlsService.getGridBodyCtrl().sizeColumnsToFit({\n                    defaultMinWidth,\n                    defaultMaxWidth,\n                    columnLimits\n                });\n            }\n            else if (type === 'fitProvidedWidth') {\n                this.sizeColumnsToFit(autoSizeStrategy.width, 'sizeColumnsToFit');\n            }\n        });\n    }\n    onFirstDataRendered() {\n        const autoSizeStrategy = this.gridOptionsService.get('autoSizeStrategy');\n        if ((autoSizeStrategy === null || autoSizeStrategy === void 0 ? void 0 : autoSizeStrategy.type) !== 'fitCellContents') {\n            return;\n        }\n        const { colIds: columns, skipHeader } = autoSizeStrategy;\n        // ensure render has finished\n        setTimeout(() => {\n            if (columns) {\n                this.autoSizeColumns({\n                    columns,\n                    skipHeader,\n                    source: 'autosizeColumns'\n                });\n            }\n            else {\n                this.autoSizeAllColumns(skipHeader, 'autosizeColumns');\n            }\n        });\n    }\n};\n__decorate([\n    Autowired('expressionService')\n], ColumnModel.prototype, \"expressionService\", void 0);\n__decorate([\n    Autowired('columnFactory')\n], ColumnModel.prototype, \"columnFactory\", void 0);\n__decorate([\n    Autowired('displayedGroupCreator')\n], ColumnModel.prototype, \"displayedGroupCreator\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], ColumnModel.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('autoWidthCalculator')\n], ColumnModel.prototype, \"autoWidthCalculator\", void 0);\n__decorate([\n    Autowired('columnUtils')\n], ColumnModel.prototype, \"columnUtils\", void 0);\n__decorate([\n    Autowired('columnAnimationService')\n], ColumnModel.prototype, \"columnAnimationService\", void 0);\n__decorate([\n    Autowired('autoGroupColService')\n], ColumnModel.prototype, \"autoGroupColService\", void 0);\n__decorate([\n    Optional('aggFuncService')\n], ColumnModel.prototype, \"aggFuncService\", void 0);\n__decorate([\n    Optional('valueCache')\n], ColumnModel.prototype, \"valueCache\", void 0);\n__decorate([\n    Optional('animationFrameService')\n], ColumnModel.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired('sortController')\n], ColumnModel.prototype, \"sortController\", void 0);\n__decorate([\n    Autowired('columnDefFactory')\n], ColumnModel.prototype, \"columnDefFactory\", void 0);\n__decorate([\n    PostConstruct\n], ColumnModel.prototype, \"init\", null);\n__decorate([\n    PreDestroy\n], ColumnModel.prototype, \"destroyColumns\", null);\n__decorate([\n    __param(0, Qualifier('loggerFactory'))\n], ColumnModel.prototype, \"setBeans\", null);\nColumnModel = __decorate([\n    Bean('columnModel')\n], ColumnModel);\nexport { ColumnModel };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ColumnGroup } from \"../entities/columnGroup.mjs\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup.mjs\";\nimport { Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { attrToNumber } from \"../utils/generic.mjs\";\n// takes in a list of columns, as specified by the column definitions, and returns column groups\nlet ColumnUtils = class ColumnUtils extends BeanStub {\n    calculateColMinWidth(colDef) {\n        return colDef.minWidth != null ? colDef.minWidth : this.environment.getMinColWidth();\n    }\n    calculateColMaxWidth(colDef) {\n        return colDef.maxWidth != null ? colDef.maxWidth : Number.MAX_SAFE_INTEGER;\n    }\n    calculateColInitialWidth(colDef) {\n        const minColWidth = this.calculateColMinWidth(colDef);\n        const maxColWidth = this.calculateColMaxWidth(colDef);\n        let width;\n        const colDefWidth = attrToNumber(colDef.width);\n        const colDefInitialWidth = attrToNumber(colDef.initialWidth);\n        if (colDefWidth != null) {\n            width = colDefWidth;\n        }\n        else if (colDefInitialWidth != null) {\n            width = colDefInitialWidth;\n        }\n        else {\n            width = 200;\n        }\n        return Math.max(Math.min(width, maxColWidth), minColWidth);\n    }\n    getOriginalPathForColumn(column, originalBalancedTree) {\n        const result = [];\n        let found = false;\n        const recursePath = (balancedColumnTree, dept) => {\n            for (let i = 0; i < balancedColumnTree.length; i++) {\n                if (found) {\n                    return;\n                }\n                // quit the search, so 'result' is kept with the found result\n                const node = balancedColumnTree[i];\n                if (node instanceof ProvidedColumnGroup) {\n                    const nextNode = node;\n                    recursePath(nextNode.getChildren(), dept + 1);\n                    result[dept] = node;\n                }\n                else if (node === column) {\n                    found = true;\n                }\n            }\n        };\n        recursePath(originalBalancedTree, 0);\n        // we should always find the path, but in case there is a bug somewhere, returning null\n        // will make it fail rather than provide a 'hard to track down' bug\n        return found ? result : null;\n    }\n    depthFirstOriginalTreeSearch(parent, tree, callback) {\n        if (!tree) {\n            return;\n        }\n        tree.forEach((child) => {\n            if (child instanceof ProvidedColumnGroup) {\n                this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n            }\n            callback(child, parent);\n        });\n    }\n    depthFirstAllColumnTreeSearch(tree, callback) {\n        if (!tree) {\n            return;\n        }\n        tree.forEach((child) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);\n            }\n            callback(child);\n        });\n    }\n    depthFirstDisplayedColumnTreeSearch(tree, callback) {\n        if (!tree) {\n            return;\n        }\n        tree.forEach((child) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);\n            }\n            callback(child);\n        });\n    }\n};\nColumnUtils = __decorate([\n    Bean('columnUtils')\n], ColumnUtils);\nexport { ColumnUtils };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ColumnGroup } from \"../entities/columnGroup.mjs\";\nimport { Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\n// takes in a list of columns, as specified by the column definitions, and returns column groups\nlet DisplayedGroupCreator = class DisplayedGroupCreator extends BeanStub {\n    createDisplayedGroups(\n    // all displayed columns sorted - this is the columns the grid should show\n    sortedVisibleColumns, \n    // creates unique id's for the group\n    groupInstanceIdCreator, \n    // whether it's left, right or center col\n    pinned, \n    // we try to reuse old groups if we can, to allow gui to do animation\n    oldDisplayedGroups) {\n        const oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);\n        /**\n         * The following logic starts at the leaf level of columns, iterating through them to build their parent\n         * groups when the parents match.\n         *\n         * The created groups are then added to an array, and similarly iterated on until we reach the top level.\n         *\n         * When row groups have no original parent, it's added to the result.\n         */\n        const topLevelResultCols = [];\n        // this is an array of cols or col groups at one level of depth, starting from leaf and ending at root\n        let groupsOrColsAtCurrentLevel = sortedVisibleColumns;\n        while (groupsOrColsAtCurrentLevel.length) {\n            // store what's currently iterating so the function can build the next level of col groups\n            const currentlyIterating = groupsOrColsAtCurrentLevel;\n            groupsOrColsAtCurrentLevel = [];\n            // store the index of the last row which was different from the previous row, this is used as a slice\n            // index for finding the children to group together\n            let lastGroupedColIdx = 0;\n            // create a group of children from lastGroupedColIdx to the provided `to` parameter\n            const createGroupToIndex = (to) => {\n                const from = lastGroupedColIdx;\n                lastGroupedColIdx = to;\n                const previousNode = currentlyIterating[from];\n                const previousNodeProvided = previousNode instanceof ColumnGroup ? previousNode.getProvidedColumnGroup() : previousNode;\n                const previousNodeParent = previousNodeProvided.getOriginalParent();\n                if (previousNodeParent == null) {\n                    // if the last node was different, and had a null parent, then we add all the nodes to the final\n                    // results)\n                    for (let i = from; i < to; i++) {\n                        topLevelResultCols.push(currentlyIterating[i]);\n                    }\n                    return;\n                }\n                // the parent differs from the previous node, so we create a group from the previous node\n                // and add all to the result array, except the current node.\n                const newGroup = this.createColumnGroup(previousNodeParent, groupInstanceIdCreator, oldColumnsMapped, pinned);\n                for (let i = from; i < to; i++) {\n                    newGroup.addChild(currentlyIterating[i]);\n                }\n                groupsOrColsAtCurrentLevel.push(newGroup);\n            };\n            for (let i = 1; i < currentlyIterating.length; i++) {\n                const thisNode = currentlyIterating[i];\n                const thisNodeProvided = thisNode instanceof ColumnGroup ? thisNode.getProvidedColumnGroup() : thisNode;\n                const thisNodeParent = thisNodeProvided.getOriginalParent();\n                const previousNode = currentlyIterating[lastGroupedColIdx];\n                const previousNodeProvided = previousNode instanceof ColumnGroup ? previousNode.getProvidedColumnGroup() : previousNode;\n                const previousNodeParent = previousNodeProvided.getOriginalParent();\n                if (thisNodeParent !== previousNodeParent) {\n                    createGroupToIndex(i);\n                }\n            }\n            if (lastGroupedColIdx < currentlyIterating.length) {\n                createGroupToIndex(currentlyIterating.length);\n            }\n        }\n        this.setupParentsIntoColumns(topLevelResultCols, null);\n        return topLevelResultCols;\n    }\n    createColumnGroup(providedGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {\n        const groupId = providedGroup.getGroupId();\n        const instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);\n        const uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);\n        let columnGroup = oldColumnsMapped[uniqueId];\n        // if the user is setting new colDefs, it is possible that the id's overlap, and we\n        // would have a false match from above. so we double check we are talking about the\n        // same original column group.\n        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {\n            columnGroup = null;\n        }\n        if (exists(columnGroup)) {\n            // clean out the old column group here, as we will be adding children into it again\n            columnGroup.reset();\n        }\n        else {\n            columnGroup = new ColumnGroup(providedGroup, groupId, instanceId, pinned);\n            this.context.createBean(columnGroup);\n        }\n        return columnGroup;\n    }\n    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup\n    mapOldGroupsById(displayedGroups) {\n        const result = {};\n        const recursive = (columnsOrGroups) => {\n            columnsOrGroups.forEach(columnOrGroup => {\n                if (columnOrGroup instanceof ColumnGroup) {\n                    const columnGroup = columnOrGroup;\n                    result[columnOrGroup.getUniqueId()] = columnGroup;\n                    recursive(columnGroup.getChildren());\n                }\n            });\n        };\n        if (displayedGroups) {\n            recursive(displayedGroups);\n        }\n        return result;\n    }\n    setupParentsIntoColumns(columnsOrGroups, parent) {\n        columnsOrGroups.forEach(columnsOrGroup => {\n            columnsOrGroup.setParent(parent);\n            if (columnsOrGroup instanceof ColumnGroup) {\n                const columnGroup = columnsOrGroup;\n                this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);\n            }\n        });\n    }\n};\nDisplayedGroupCreator = __decorate([\n    Bean('displayedGroupCreator')\n], DisplayedGroupCreator);\nexport { DisplayedGroupCreator };\n","export const INITIAL_GRID_OPTION_KEYS = {\n    statusBar: true,\n    enableBrowserTooltips: true,\n    tooltipTrigger: true,\n    tooltipMouseTrack: true,\n    tooltipInteraction: true,\n    defaultColGroupDef: true,\n    suppressAutoSize: true,\n    skipHeaderOnAutoSize: true,\n    autoSizeStrategy: true,\n    components: true,\n    stopEditingWhenCellsLoseFocus: true,\n    undoRedoCellEditing: true,\n    undoRedoCellEditingLimit: true,\n    excelStyles: true,\n    cacheQuickFilter: true,\n    excludeHiddenColumnsFromQuickFilter: true,\n    advancedFilterModel: true,\n    customChartThemes: true,\n    chartThemeOverrides: true,\n    enableChartToolPanelsButton: true,\n    suppressChartToolPanelsButton: true,\n    chartToolPanelsDef: true,\n    loadingCellRendererSelector: true,\n    localeText: true,\n    keepDetailRows: true,\n    keepDetailRowsCount: true,\n    detailRowHeight: true,\n    detailRowAutoHeight: true,\n    alignedGrids: true,\n    tabIndex: true,\n    valueCache: true,\n    valueCacheNeverExpires: true,\n    enableCellExpressions: true,\n    suppressParentsInRowNodes: true,\n    suppressTouch: true,\n    suppressAsyncEvents: true,\n    suppressBrowserResizeObserver: true,\n    suppressPropertyNamesCheck: true,\n    debug: true,\n    loadingOverlayComponent: true,\n    loadingOverlayComponentParams: true,\n    suppressLoadingOverlay: true,\n    noRowsOverlayComponent: true,\n    noRowsOverlayComponentParams: true,\n    paginationPageSizeSelector: true,\n    paginateChildRows: true,\n    pivotPanelShow: true,\n    pivotSuppressAutoColumn: true,\n    suppressExpandablePivotGroups: true,\n    aggFuncs: true,\n    suppressAggFuncInHeader: true,\n    suppressAggAtRootLevel: true,\n    removePivotHeaderRowWhenSingleValueColumn: true,\n    allowShowChangeAfterFilter: true,\n    ensureDomOrder: true,\n    enableRtl: true,\n    suppressColumnVirtualisation: true,\n    suppressMaxRenderedRowRestriction: true,\n    suppressRowVirtualisation: true,\n    rowDragText: true,\n    suppressGroupMaintainValueType: true,\n    autoGroupColumnDef: true,\n    groupLockGroupColumns: true,\n    rowGroupPanelSuppressSort: true,\n    suppressGroupRowsSticky: true,\n    rowModelType: true,\n    cacheOverflowSize: true,\n    infiniteInitialRowCount: true,\n    serverSideInitialRowCount: true,\n    suppressServerSideInfiniteScroll: true,\n    maxBlocksInCache: true,\n    maxConcurrentDatasourceRequests: true,\n    blockLoadDebounceMillis: true,\n    serverSideOnlyRefreshFilteredGroups: true,\n    serverSidePivotResultFieldSeparator: true,\n    viewportRowModelPageSize: true,\n    viewportRowModelBufferSize: true,\n    debounceVerticalScrollbar: true,\n    suppressAnimationFrame: true,\n    suppressPreventDefaultOnMouseWheel: true,\n    scrollbarWidth: true,\n    icons: true,\n    suppressRowTransform: true,\n    gridId: true,\n    functionsPassive: true,\n    enableGroupEdit: true,\n    initialState: true,\n    processUnpinnedColumns: true,\n    createChartContainer: true,\n    getLocaleText: true,\n    getRowId: true,\n};\n/**\n * These keys are used for validating properties supplied on a gridOptions object, and for code generation.\n * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.\n */\nexport class PropertyKeys {\n}\nPropertyKeys.STRING_PROPERTIES = [\n    'rowSelection', 'overlayLoadingTemplate', 'overlayNoRowsTemplate', 'gridId', 'quickFilterText', 'rowModelType', 'editType', 'domLayout',\n    'clipboardDelimiter', 'rowGroupPanelShow', 'multiSortKey', 'pivotColumnGroupTotals', 'pivotRowTotals', 'pivotPanelShow', 'fillHandleDirection',\n    'groupDisplayType', 'treeDataDisplayType', 'colResizeDefault', 'tooltipTrigger', 'serverSidePivotResultFieldSeparator',\n];\nPropertyKeys.OBJECT_PROPERTIES = [\n    'components', 'rowStyle', 'context', 'autoGroupColumnDef', 'localeText', 'icons', 'datasource', 'serverSideDatasource', 'viewportDatasource',\n    'groupRowRendererParams', 'aggFuncs', 'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultCsvExportParams',\n    'defaultExcelExportParams', 'columnTypes', 'rowClassRules', 'detailCellRendererParams', 'loadingCellRendererParams', 'loadingOverlayComponentParams',\n    'noRowsOverlayComponentParams', 'popupParent', 'statusBar', 'sideBar', 'chartThemeOverrides', 'customChartThemes', 'chartToolPanelsDef',\n    'dataTypeDefinitions', 'advancedFilterModel', 'advancedFilterParent', 'advancedFilterBuilderParams', 'initialState', 'autoSizeStrategy',\n];\nPropertyKeys.ARRAY_PROPERTIES = [\n    'sortingOrder', 'alignedGrids', 'rowData', 'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData', 'chartThemes',\n    'rowClass', 'paginationPageSizeSelector',\n];\nPropertyKeys.NUMBER_PROPERTIES = [\n    'rowHeight', 'detailRowHeight', 'rowBuffer', 'headerHeight', 'groupHeaderHeight', 'groupLockGroupColumns', 'floatingFiltersHeight',\n    'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded', 'pivotDefaultExpanded', 'viewportRowModelPageSize',\n    'viewportRowModelBufferSize', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests', 'tooltipShowDelay',\n    'tooltipHideDelay', 'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount', 'serverSideInitialRowCount',\n    'scrollbarWidth', 'asyncTransactionWaitMillis', 'blockLoadDebounceMillis', 'keepDetailRowsCount', 'undoRedoCellEditingLimit',\n    'cellFlashDelay', 'cellFadeDelay', 'tabIndex'\n];\nPropertyKeys.BOOLEAN_PROPERTIES = [\n    'suppressMakeColumnVisibleAfterUnGroup', 'suppressRowClickSelection', 'suppressCellFocus', 'suppressHorizontalScroll', 'groupSelectsChildren',\n    'alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll', 'debug', 'enableBrowserTooltips', 'enableCellExpressions', 'groupIncludeTotalFooter',\n    'groupSuppressBlankHeader', 'suppressMenuHide', 'suppressRowDeselection', 'unSortIcon', 'suppressMultiSort', 'alwaysMultiSort', 'singleClickEdit',\n    'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize', 'skipHeaderOnAutoSize', 'suppressParentsInRowNodes', 'suppressColumnMoveAnimation',\n    'suppressMovableColumns', 'suppressFieldDotNotation', 'enableRangeSelection', 'enableRangeHandle', 'enableFillHandle', 'suppressClearOnFillReduction',\n    'deltaSort', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey', 'suppressContextMenu', 'enableCellChangeFlash',\n    'suppressDragLeaveHidesColumns', 'suppressRowGroupHidesColumns', 'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel',\n    'suppressCopyRowsToClipboard', 'copyHeadersToClipboard', 'copyGroupHeadersToClipboard', 'pivotMode', 'suppressAggFuncInHeader',\n    'suppressColumnVirtualisation', 'alwaysAggregateAtRootLevel', 'suppressAggAtRootLevel', 'suppressFocusAfterRefresh', 'functionsPassive',\n    'functionsReadOnly', 'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren', 'groupRemoveLowestSingleChildren', 'enableRtl',\n    'suppressClickEdit', 'rowDragEntireRow', 'rowDragManaged', 'suppressRowDrag', 'suppressMoveWhenRowDragging', 'rowDragMultiRow', 'enableGroupEdit',\n    'embedFullWidthRows', 'suppressPaginationPanel', 'groupHideOpenParents', 'groupAllowUnbalanced', 'pagination', 'paginationAutoPageSize',\n    'suppressScrollOnNewData', 'suppressScrollWhenPopupsAreOpen', 'purgeClosedRowNodes', 'cacheQuickFilter', 'includeHiddenColumnsInQuickFilter',\n    'excludeHiddenColumnsFromQuickFilter', 'ensureDomOrder', 'accentedSort', 'suppressChangeDetection', 'valueCache', 'valueCacheNeverExpires',\n    'aggregateOnlyChangedColumns', 'suppressAnimationFrame', 'suppressExcelExport', 'suppressCsvExport', 'includeHiddenColumnsInAdvancedFilter',\n    'suppressMultiRangeSelection', 'enterMovesDown', 'enterMovesDownAfterEdit', 'enterNavigatesVerticallyAfterEdit', 'enterNavigatesVertically',\n    'suppressPropertyNamesCheck', 'rowMultiSelectWithClick', 'suppressRowHoverHighlight', 'suppressRowTransform', 'suppressClipboardPaste',\n    'suppressLastEmptyLineOnPaste', 'enableCharts', 'enableChartToolPanelsButton', 'suppressChartToolPanelsButton', 'suppressMaintainUnsortedOrder',\n    'enableCellTextSelection', 'suppressBrowserResizeObserver', 'suppressMaxRenderedRowRestriction', 'excludeChildrenWhenTreeDataFiltering',\n    'tooltipMouseTrack', 'tooltipInteraction', 'keepDetailRows', 'paginateChildRows', 'preventDefaultOnContextMenu', 'undoRedoCellEditing',\n    'allowDragFromColumnsToolPanel', 'pivotSuppressAutoColumn', 'suppressExpandablePivotGroups', 'debounceVerticalScrollbar', 'detailRowAutoHeight',\n    'serverSideFilterAllLevels', 'serverSideSortAllLevels', 'serverSideOnlyRefreshFilteredGroups', 'serverSideSortOnServer', 'serverSideFilterOnServer',\n    'suppressAggFilteredOnly', 'showOpenedGroup', 'suppressClipboardApi', 'suppressModelUpdateAfterUpdateTransaction', 'stopEditingWhenCellsLoseFocus',\n    'maintainColumnOrder', 'groupMaintainOrder', 'columnHoverHighlight', 'readOnlyEdit', 'suppressRowVirtualisation', 'enableCellEditingOnBackspace',\n    'resetRowDataOnUpdate', 'removePivotHeaderRowWhenSingleValueColumn', 'suppressCopySingleCellRanges', 'suppressGroupRowsSticky', 'suppressCutToClipboard',\n    'suppressServerSideInfiniteScroll', 'rowGroupPanelSuppressSort', 'allowShowChangeAfterFilter', 'enableAdvancedFilter', 'masterDetail', 'treeData',\n    'suppressGroupMaintainValueType'\n];\n/** You do not need to include event callbacks in this list, as they are generated automatically. */\nPropertyKeys.FUNCTIONAL_PROPERTIES = [\n    'doesExternalFilterPass', 'processPivotResultColDef', 'processPivotResultColGroupDef', 'getBusinessKeyForNode', 'isRowSelectable', 'rowDragText',\n    'groupRowRenderer', 'fullWidthCellRenderer', 'loadingCellRenderer', 'loadingOverlayComponent', 'noRowsOverlayComponent', 'detailCellRenderer',\n    'quickFilterParser', 'quickFilterMatcher'\n];\n/** These callbacks extend AgGridCommon interface */\nPropertyKeys.CALLBACK_PROPERTIES = [\n    'getLocaleText', 'isExternalFilterPresent', 'getRowHeight', 'getRowClass', 'getRowStyle', 'getContextMenuItems', 'getMainMenuItems',\n    'processRowPostCreate', 'processCellForClipboard', 'getGroupRowAgg', 'isFullWidthRow', 'sendToClipboard', 'navigateToNextHeader',\n    'tabToNextHeader', 'navigateToNextCell', 'tabToNextCell', 'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount',\n    'getDataPath', 'isRowMaster', 'postSortRows', 'processHeaderForClipboard', 'processUnpinnedColumns', 'processGroupHeaderForClipboard',\n    'paginationNumberFormatter', 'processDataFromClipboard', 'getServerSideGroupKey', 'isServerSideGroup', 'createChartContainer',\n    'getChartToolbarItems', 'fillOperation', 'isApplyServerSideTransaction', 'getServerSideGroupLevelParams', 'isServerSideGroupOpenByDefault',\n    'isGroupOpenByDefault', 'initialGroupOrderComparator', 'groupIncludeFooter', 'loadingCellRendererSelector', 'getRowId', 'groupAggFiltering'\n];\nPropertyKeys.FUNCTION_PROPERTIES = [\n    ...PropertyKeys.FUNCTIONAL_PROPERTIES,\n    ...PropertyKeys.CALLBACK_PROPERTIES\n];\nPropertyKeys.ALL_PROPERTIES = [\n    ...PropertyKeys.ARRAY_PROPERTIES,\n    ...PropertyKeys.OBJECT_PROPERTIES,\n    ...PropertyKeys.STRING_PROPERTIES,\n    ...PropertyKeys.NUMBER_PROPERTIES,\n    ...PropertyKeys.FUNCTION_PROPERTIES,\n    ...PropertyKeys.BOOLEAN_PROPERTIES\n];\n","var _a;\nimport { Events } from '../events.mjs';\nimport { PropertyKeys } from '../propertyKeys.mjs';\nimport { iterateObject } from '../utils/object.mjs';\nimport { includes } from '../utils/array.mjs';\nimport { values } from '../utils/generic.mjs';\nexport class ComponentUtil {\n    static getCallbackForEvent(eventName) {\n        if (!eventName || eventName.length < 2) {\n            return eventName;\n        }\n        return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n    }\n    static getGridOptionKeys() {\n        // Vue does not have keys in prod so instead need to run through all the \n        // gridOptions checking for presence of a gridOption key.\n        return this.ALL_PROPERTIES_AND_CALLBACKS;\n    }\n    /** Combines component props / attributes with the provided gridOptions returning a new combined gridOptions object */\n    static combineAttributesAndGridOptions(gridOptions, component) {\n        // create empty grid options if none were passed\n        if (typeof gridOptions !== 'object') {\n            gridOptions = {};\n        }\n        // shallow copy (so we don't change the provided object)\n        const mergedOptions = Object.assign({}, gridOptions);\n        const keys = ComponentUtil.getGridOptionKeys();\n        // Loop through component props, if they are not undefined and a valid gridOption copy to gridOptions\n        keys.forEach(key => {\n            const value = component[key];\n            if (typeof value !== 'undefined' && value !== ComponentUtil.VUE_OMITTED_PROPERTY) {\n                mergedOptions[key] = value;\n            }\n        });\n        return mergedOptions;\n    }\n    static processOnChange(changes, api) {\n        if (!changes) {\n            return;\n        }\n        // Only process changes to properties that are part of the gridOptions\n        const gridChanges = {};\n        let hasChanges = false;\n        Object.keys(changes)\n            .filter((key) => ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS_SET.has(key))\n            .forEach((key) => {\n            gridChanges[key] = changes[key];\n            hasChanges = true;\n        });\n        if (!hasChanges) {\n            return;\n        }\n        api.__internalUpdateGridOptions(gridChanges);\n        // copy gridChanges into an event for dispatch\n        const event = {\n            type: Events.EVENT_COMPONENT_STATE_CHANGED\n        };\n        iterateObject(gridChanges, (key, value) => {\n            event[key] = value;\n        });\n        api.dispatchEvent(event);\n    }\n}\n_a = ComponentUtil;\n// all events\nComponentUtil.EVENTS = values(Events);\nComponentUtil.VUE_OMITTED_PROPERTY = 'AG-VUE-OMITTED-PROPERTY';\n// events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components\n/** Exclude the following internal events from code generation to prevent exposing these events via framework components */\nComponentUtil.EXCLUDED_INTERNAL_EVENTS = [\n    Events.EVENT_SCROLLBAR_WIDTH_CHANGED,\n    Events.EVENT_CHECKBOX_CHANGED,\n    Events.EVENT_HEIGHT_SCALE_CHANGED,\n    Events.EVENT_BODY_HEIGHT_CHANGED,\n    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n    Events.EVENT_SCROLL_VISIBILITY_CHANGED,\n    Events.EVENT_COLUMN_HOVER_CHANGED,\n    Events.EVENT_FLASH_CELLS,\n    Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,\n    Events.EVENT_DISPLAYED_ROWS_CHANGED,\n    Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,\n    Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,\n    Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,\n    Events.EVENT_POPUP_TO_FRONT,\n    Events.EVENT_STORE_UPDATED,\n    Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n    Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n    Events.EVENT_FILL_START,\n    Events.EVENT_FILL_END,\n    Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START,\n    Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END,\n    Events.EVENT_FULL_WIDTH_ROW_FOCUSED,\n    Events.EVENT_HEADER_HEIGHT_CHANGED,\n    Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,\n    Events.EVENT_CELL_FOCUS_CLEARED,\n    Events.EVENT_GRID_STYLES_CHANGED,\n    Events.EVENT_FILTER_DESTROYED,\n    Events.EVENT_ROW_DATA_UPDATE_STARTED,\n    Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,\n    Events.EVENT_DATA_TYPES_INFERRED,\n    Events.EVENT_FIELD_VALUE_CHANGED,\n    Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n    Events.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED,\n    Events.EVENT_SUPPRESS_MENU_HIDE_CHANGED,\n    Events.EVENT_SUPPRESS_FIELD_DOT_NOTATION,\n    Events.EVENT_ROW_COUNT_READY,\n    Events.EVENT_SIDE_BAR_UPDATED,\n];\n// events that are available for use by users of AG Grid and so should be documented\n/** EVENTS that should be exposed via code generation for the framework components.  */\nComponentUtil.PUBLIC_EVENTS = ComponentUtil.EVENTS.filter(e => !includes(ComponentUtil.EXCLUDED_INTERNAL_EVENTS, e));\n// onXXX methods, based on the above events\nComponentUtil.EVENT_CALLBACKS = ComponentUtil.EVENTS.map(event => ComponentUtil.getCallbackForEvent(event));\nComponentUtil.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;\nComponentUtil.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;\nComponentUtil.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;\nComponentUtil.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;\nComponentUtil.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;\nComponentUtil.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;\nComponentUtil.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;\nComponentUtil.ALL_PROPERTIES_AND_CALLBACKS = [..._a.ALL_PROPERTIES, ..._a.EVENT_CALLBACKS];\nComponentUtil.ALL_PROPERTIES_AND_CALLBACKS_SET = new Set(ComponentUtil.ALL_PROPERTIES_AND_CALLBACKS);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet AgStackComponentsRegistry = class AgStackComponentsRegistry extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.componentsMappedByName = {};\n    }\n    setupComponents(components) {\n        if (components) {\n            components.forEach(componentMeta => this.addComponent(componentMeta));\n        }\n    }\n    addComponent(componentMeta) {\n        // get name of the class as a string\n        // insert a dash after every capital letter\n        // let classEscaped = className.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n        const classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n        // put all to upper case\n        const classUpperCase = classEscaped.toUpperCase();\n        // finally store\n        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;\n    }\n    getComponentClass(htmlTag) {\n        return this.componentsMappedByName[htmlTag];\n    }\n};\nAgStackComponentsRegistry = __decorate([\n    Bean('agStackComponentsRegistry')\n], AgStackComponentsRegistry);\nexport { AgStackComponentsRegistry };\n","/**\n * These variables are lazy loaded, as otherwise they try and get initialised when we are loading\n * unit tests and we don't have references to window or document in the unit tests\n */\nlet isSafari;\nlet safariVersion;\nlet isChrome;\nlet isFirefox;\nlet isMacOs;\nlet isIOS;\nlet invisibleScrollbar;\nlet browserScrollbarWidth;\nexport function isBrowserSafari() {\n    if (isSafari === undefined) {\n        isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    }\n    return isSafari;\n}\nexport function getSafariVersion() {\n    if (safariVersion === undefined) {\n        if (isBrowserSafari()) {\n            const versionMatch = navigator.userAgent.match(/version\\/(\\d+)/i);\n            if (versionMatch) {\n                safariVersion = versionMatch[1] != null ? parseFloat(versionMatch[1]) : 0;\n            }\n        }\n        else {\n            safariVersion = 0;\n        }\n    }\n    return safariVersion;\n}\n/**\n * Returns true for Chrome and also for Edge (Chromium)\n */\nexport function isBrowserChrome() {\n    if (isChrome === undefined) {\n        const win = window;\n        isChrome = (!!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime)) ||\n            (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\n    }\n    return isChrome;\n}\nexport function isBrowserFirefox() {\n    if (isFirefox === undefined) {\n        isFirefox = /(firefox)/i.test(navigator.userAgent);\n    }\n    return isFirefox;\n}\nexport function isMacOsUserAgent() {\n    if (isMacOs === undefined) {\n        isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n    }\n    return isMacOs;\n}\nexport function isIOSUserAgent() {\n    if (isIOS === undefined) {\n        isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) ||\n            // eslint-disable-next-line\n            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1));\n    }\n    return isIOS;\n}\nexport function browserSupportsPreventScroll() {\n    // all browsers except safari support focus({ preventScroll: true }).\n    // this feature was added on Safari 15+\n    return !isBrowserSafari() || getSafariVersion() >= 15;\n}\nexport function getTabIndex(el) {\n    if (!el) {\n        return null;\n    }\n    const numberTabIndex = el.tabIndex;\n    const tabIndex = el.getAttribute('tabIndex');\n    if (numberTabIndex === -1 && (tabIndex === null || (tabIndex === '' && !isBrowserFirefox()))) {\n        return null;\n    }\n    return numberTabIndex.toString();\n}\nexport function getMaxDivHeight() {\n    if (!document.body) {\n        return -1;\n    }\n    let res = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n    while (true) {\n        const test = res * 2;\n        div.style.height = test + 'px';\n        if (test > testUpTo || div.clientHeight !== test) {\n            break;\n        }\n        else {\n            res = test;\n        }\n    }\n    document.body.removeChild(div);\n    return res;\n}\nexport function getBodyWidth() {\n    var _a, _b, _c;\n    return (_b = (_a = document.body) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : (window.innerHeight || ((_c = document.documentElement) === null || _c === void 0 ? void 0 : _c.clientWidth) || -1);\n}\nexport function getBodyHeight() {\n    var _a, _b, _c;\n    return (_b = (_a = document.body) === null || _a === void 0 ? void 0 : _a.clientHeight) !== null && _b !== void 0 ? _b : (window.innerHeight || ((_c = document.documentElement) === null || _c === void 0 ? void 0 : _c.clientHeight) || -1);\n}\nexport function getScrollbarWidth() {\n    if (browserScrollbarWidth == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return browserScrollbarWidth;\n}\nfunction initScrollbarWidthAndVisibility() {\n    const body = document.body;\n    const div = document.createElement('div');\n    div.style.width = div.style.height = '100px';\n    div.style.opacity = '0';\n    div.style.overflow = 'scroll';\n    div.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n    div.style.position = 'absolute';\n    body.appendChild(div);\n    let width = div.offsetWidth - div.clientWidth;\n    // if width is 0 and client width is 0, means the DOM isn't ready\n    if (width === 0 && div.clientWidth === 0) {\n        width = null;\n    }\n    // remove div\n    if (div.parentNode) {\n        div.parentNode.removeChild(div);\n    }\n    if (width != null) {\n        browserScrollbarWidth = width;\n        invisibleScrollbar = width === 0;\n    }\n}\nexport function isInvisibleScrollbar() {\n    if (invisibleScrollbar == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return invisibleScrollbar;\n}\n","// ARIA HELPER FUNCTIONS\nfunction toggleAriaAttribute(element, attribute, value) {\n    if (value == null || (typeof value === 'string' && value == '')) {\n        removeAriaAttribute(element, attribute);\n    }\n    else {\n        setAriaAttribute(element, attribute, value);\n    }\n}\nfunction setAriaAttribute(element, attribute, value) {\n    element.setAttribute(ariaAttributeName(attribute), value.toString());\n}\nfunction removeAriaAttribute(element, attribute) {\n    element.removeAttribute(ariaAttributeName(attribute));\n}\nfunction ariaAttributeName(attribute) {\n    return `aria-${attribute}`;\n}\nexport function setAriaRole(element, role) {\n    if (role) {\n        element.setAttribute('role', role);\n    }\n    else {\n        element.removeAttribute('role');\n    }\n}\nexport function getAriaSortState(sortDirection) {\n    let sort;\n    if (sortDirection === 'asc') {\n        sort = 'ascending';\n    }\n    else if (sortDirection === 'desc') {\n        sort = 'descending';\n    }\n    else if (sortDirection === 'mixed') {\n        sort = 'other';\n    }\n    else {\n        sort = 'none';\n    }\n    return sort;\n}\n// ARIA ATTRIBUTE GETTERS\nexport function getAriaLevel(element) {\n    return parseInt(element.getAttribute('aria-level'), 10);\n}\nexport function getAriaPosInSet(element) {\n    return parseInt(element.getAttribute('aria-posinset'), 10);\n}\nexport function getAriaLabel(element) {\n    return element.getAttribute('aria-label');\n}\n// ARIA ATTRIBUTE SETTERS\nexport function setAriaLabel(element, label) {\n    toggleAriaAttribute(element, 'label', label);\n}\nexport function setAriaLabelledBy(element, labelledBy) {\n    toggleAriaAttribute(element, 'labelledby', labelledBy);\n}\nexport function setAriaDescription(element, description) {\n    toggleAriaAttribute(element, 'description', description);\n}\nexport function setAriaDescribedBy(element, describedby) {\n    toggleAriaAttribute(element, 'describedby', describedby);\n}\nexport function setAriaLive(element, live) {\n    toggleAriaAttribute(element, 'live', live);\n}\nexport function setAriaAtomic(element, atomic) {\n    toggleAriaAttribute(element, 'atomic', atomic);\n}\nexport function setAriaRelevant(element, relevant) {\n    toggleAriaAttribute(element, 'relevant', relevant);\n}\nexport function setAriaLevel(element, level) {\n    toggleAriaAttribute(element, 'level', level);\n}\nexport function setAriaDisabled(element, disabled) {\n    toggleAriaAttribute(element, 'disabled', disabled);\n}\nexport function setAriaHidden(element, hidden) {\n    toggleAriaAttribute(element, 'hidden', hidden);\n}\nexport function setAriaActiveDescendant(element, descendantId) {\n    toggleAriaAttribute(element, 'activedescendant', descendantId);\n}\nexport function setAriaExpanded(element, expanded) {\n    setAriaAttribute(element, 'expanded', expanded);\n}\nexport function removeAriaExpanded(element) {\n    removeAriaAttribute(element, 'expanded');\n}\nexport function setAriaSetSize(element, setsize) {\n    setAriaAttribute(element, 'setsize', setsize);\n}\nexport function setAriaPosInSet(element, position) {\n    setAriaAttribute(element, 'posinset', position);\n}\nexport function setAriaMultiSelectable(element, multiSelectable) {\n    setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\nexport function setAriaRowCount(element, rowCount) {\n    setAriaAttribute(element, 'rowcount', rowCount);\n}\nexport function setAriaRowIndex(element, rowIndex) {\n    setAriaAttribute(element, 'rowindex', rowIndex);\n}\nexport function setAriaColCount(element, colCount) {\n    setAriaAttribute(element, 'colcount', colCount);\n}\nexport function setAriaColIndex(element, colIndex) {\n    setAriaAttribute(element, 'colindex', colIndex);\n}\nexport function setAriaColSpan(element, colSpan) {\n    setAriaAttribute(element, 'colspan', colSpan);\n}\nexport function setAriaSort(element, sort) {\n    setAriaAttribute(element, 'sort', sort);\n}\nexport function removeAriaSort(element) {\n    removeAriaAttribute(element, 'sort');\n}\nexport function setAriaSelected(element, selected) {\n    toggleAriaAttribute(element, 'selected', selected);\n}\nexport function setAriaChecked(element, checked) {\n    setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}\nexport function setAriaControls(controllerElement, controlledElement) {\n    toggleAriaAttribute(controllerElement, 'controls', controlledElement.id);\n    setAriaLabelledBy(controlledElement, controllerElement.id);\n}\nexport function getAriaCheckboxStateName(translate, state) {\n    return state === undefined\n        ? translate('ariaIndeterminate', 'indeterminate')\n        : (state === true\n            ? translate('ariaChecked', 'checked')\n            : translate('ariaUnchecked', 'unchecked'));\n}\n","export function padStartWidthZeros(value, totalStringSize) {\n    return value.toString().padStart(totalStringSize, '0');\n}\nexport function createArrayOfNumbers(first, last) {\n    const result = [];\n    for (let i = first; i <= last; i++) {\n        result.push(i);\n    }\n    return result;\n}\nexport function cleanNumber(value) {\n    if (typeof value === 'string') {\n        value = parseInt(value, 10);\n    }\n    if (typeof value === 'number') {\n        return Math.floor(value);\n    }\n    return null;\n}\nexport function decToHex(number, bytes) {\n    let hex = '';\n    for (let i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n    return hex;\n}\nexport function formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator) {\n    if (typeof value !== 'number') {\n        return '';\n    }\n    return formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);\n}\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\nexport function formatNumberCommas(value, thousandSeparator, decimalSeparator) {\n    if (typeof value !== 'number') {\n        return '';\n    }\n    return value.toString().replace('.', decimalSeparator).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${thousandSeparator}`);\n}\nexport function sum(values) {\n    return values == null ? null : values.reduce((total, value) => total + value, 0);\n}\n","import { padStartWidthZeros } from './number.mjs';\n/**\n * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.\n * An alternative separator can be provided to be used instead of hyphens.\n * @param date The date to serialise\n * @param includeTime Whether to include the time in the serialised string\n * @param separator The separator to use between date parts\n */\nexport function serialiseDate(date, includeTime = true, separator = '-') {\n    if (!date) {\n        return null;\n    }\n    let serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(part => padStartWidthZeros(part, 2)).join(separator);\n    if (includeTime) {\n        serialised += ' ' + [date.getHours(), date.getMinutes(), date.getSeconds()].map(part => padStartWidthZeros(part, 2)).join(':');\n    }\n    return serialised;\n}\nconst calculateOrdinal = (value) => {\n    if (value > 3 && value < 21) {\n        return 'th';\n    }\n    const remainder = value % 10;\n    switch (remainder) {\n        case 1: return \"st\";\n        case 2: return \"nd\";\n        case 3: return \"rd\";\n    }\n    return 'th';\n};\n/**\n * Serialises a Date to a string of format the defined format, does not include time.\n * @param date The date to serialise\n * @param format The string to format the date to, defaults to YYYY-MM-DD\n */\nexport function dateToFormattedString(date, format = 'YYYY-MM-DD') {\n    const fullYear = padStartWidthZeros(date.getFullYear(), 4);\n    const months = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December',\n    ];\n    const days = [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',\n    ];\n    const replace = {\n        YYYY: () => fullYear.slice(fullYear.length - 4, fullYear.length),\n        YY: () => fullYear.slice(fullYear.length - 2, fullYear.length),\n        Y: () => `${date.getFullYear()}`,\n        MMMM: () => months[date.getMonth()],\n        MMM: () => months[date.getMonth()].slice(0, 3),\n        MM: () => padStartWidthZeros(date.getMonth() + 1, 2),\n        Mo: () => `${date.getMonth() + 1}${calculateOrdinal(date.getMonth() + 1)}`,\n        M: () => `${date.getMonth() + 1}`,\n        Do: () => `${date.getDate()}${calculateOrdinal(date.getDate())}`,\n        DD: () => padStartWidthZeros(date.getDate(), 2),\n        D: () => `${date.getDate()}`,\n        dddd: () => days[date.getDay()],\n        ddd: () => days[date.getDay()].slice(0, 3),\n        dd: () => days[date.getDay()].slice(0, 2),\n        do: () => `${date.getDay()}${calculateOrdinal(date.getDay())}`,\n        d: () => `${date.getDay()}`,\n    };\n    const regexp = new RegExp(Object.keys(replace).join('|'), 'g');\n    return format.replace(regexp, (match) => {\n        if (match in replace) {\n            return replace[match]();\n        }\n        return match;\n    });\n}\n/**\n * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`\n */\nexport function parseDateTimeFromString(value) {\n    if (!value) {\n        return null;\n    }\n    const [dateStr, timeStr] = value.split(' ');\n    if (!dateStr) {\n        return null;\n    }\n    const fields = dateStr.split('-').map(f => parseInt(f, 10));\n    if (fields.filter(f => !isNaN(f)).length !== 3) {\n        return null;\n    }\n    const [year, month, day] = fields;\n    const date = new Date(year, month - 1, day);\n    if (date.getFullYear() !== year ||\n        date.getMonth() !== month - 1 ||\n        date.getDate() !== day) {\n        // date was not parsed as expected so must have been invalid\n        return null;\n    }\n    if (!timeStr || timeStr === '00:00:00') {\n        return date;\n    }\n    const [hours, minutes, seconds] = timeStr.split(':').map(part => parseInt(part, 10));\n    if (hours >= 0 && hours < 24) {\n        date.setHours(hours);\n    }\n    if (minutes >= 0 && minutes < 60) {\n        date.setMinutes(minutes);\n    }\n    if (seconds >= 0 && seconds < 60) {\n        date.setSeconds(seconds);\n    }\n    return date;\n}\n","import { browserSupportsPreventScroll, isBrowserChrome, isBrowserSafari } from './browser.mjs';\nimport { setAriaHidden } from './aria.mjs';\nimport { camelCaseToHyphenated } from './string.mjs';\nlet rtlNegativeScroll;\n/**\n * This method adds a class to an element and remove that class from all siblings.\n * Useful for toggling state.\n * @param {HTMLElement} element The element to receive the class\n * @param {string} elementClass The class to be assigned to the element\n * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself\n */\nexport function radioCssClass(element, elementClass, otherElementClass) {\n    const parent = element.parentElement;\n    let sibling = parent && parent.firstChild;\n    while (sibling) {\n        if (elementClass) {\n            sibling.classList.toggle(elementClass, sibling === element);\n        }\n        if (otherElementClass) {\n            sibling.classList.toggle(otherElementClass, sibling !== element);\n        }\n        sibling = sibling.nextSibling;\n    }\n}\nexport const FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea, [href]';\nexport const FOCUSABLE_EXCLUDE = '[disabled], .ag-disabled:not(.ag-button), .ag-disabled *';\nexport function isFocusableFormField(element) {\n    const matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n    const inputSelector = 'input, select, button, textarea';\n    const isFocusable = matches.call(element, inputSelector);\n    const isNotFocusable = matches.call(element, FOCUSABLE_EXCLUDE);\n    const isElementVisible = isVisible(element);\n    const focusable = isFocusable && !isNotFocusable && isElementVisible;\n    return focusable;\n}\nexport function setDisplayed(element, displayed, options = {}) {\n    const { skipAriaHidden } = options;\n    element.classList.toggle('ag-hidden', !displayed);\n    if (!skipAriaHidden) {\n        setAriaHidden(element, !displayed);\n    }\n}\nexport function setVisible(element, visible, options = {}) {\n    const { skipAriaHidden } = options;\n    element.classList.toggle('ag-invisible', !visible);\n    if (!skipAriaHidden) {\n        setAriaHidden(element, !visible);\n    }\n}\nexport function setDisabled(element, disabled) {\n    const attributeName = 'disabled';\n    const addOrRemoveDisabledAttribute = disabled ?\n        (e) => e.setAttribute(attributeName, '') :\n        (e) => e.removeAttribute(attributeName);\n    addOrRemoveDisabledAttribute(element);\n    nodeListForEach(element.querySelectorAll('input'), input => addOrRemoveDisabledAttribute(input));\n}\nexport function isElementChildOfClass(element, cls, maxNest) {\n    let counter = 0;\n    while (element) {\n        if (element.classList.contains(cls)) {\n            return true;\n        }\n        element = element.parentElement;\n        if (typeof maxNest == 'number') {\n            if (++counter > maxNest) {\n                break;\n            }\n        }\n        else if (element === maxNest) {\n            break;\n        }\n    }\n    return false;\n}\n// returns back sizes as doubles instead of strings. similar to\n// getBoundingClientRect, however getBoundingClientRect does not:\n// a) work with fractions (eg browser is zooming)\n// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values\nexport function getElementSize(el) {\n    const { height, width, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth, paddingTop, paddingRight, paddingBottom, paddingLeft, marginTop, marginRight, marginBottom, marginLeft, boxSizing } = window.getComputedStyle(el);\n    return {\n        height: parseFloat(height),\n        width: parseFloat(width),\n        borderTopWidth: parseFloat(borderTopWidth),\n        borderRightWidth: parseFloat(borderRightWidth),\n        borderBottomWidth: parseFloat(borderBottomWidth),\n        borderLeftWidth: parseFloat(borderLeftWidth),\n        paddingTop: parseFloat(paddingTop),\n        paddingRight: parseFloat(paddingRight),\n        paddingBottom: parseFloat(paddingBottom),\n        paddingLeft: parseFloat(paddingLeft),\n        marginTop: parseFloat(marginTop),\n        marginRight: parseFloat(marginRight),\n        marginBottom: parseFloat(marginBottom),\n        marginLeft: parseFloat(marginLeft),\n        boxSizing\n    };\n}\nexport function getInnerHeight(el) {\n    const size = getElementSize(el);\n    if (size.boxSizing === 'border-box') {\n        return size.height - size.paddingTop - size.paddingBottom;\n    }\n    return size.height;\n}\nexport function getInnerWidth(el) {\n    const size = getElementSize(el);\n    if (size.boxSizing === 'border-box') {\n        return size.width - size.paddingLeft - size.paddingRight;\n    }\n    return size.width;\n}\nexport function getAbsoluteHeight(el) {\n    const size = getElementSize(el);\n    const marginRight = size.marginBottom + size.marginTop;\n    return Math.ceil(el.offsetHeight + marginRight);\n}\nexport function getAbsoluteWidth(el) {\n    const size = getElementSize(el);\n    const marginWidth = size.marginLeft + size.marginRight;\n    return Math.ceil(el.offsetWidth + marginWidth);\n}\nexport function getElementRectWithOffset(el) {\n    const offsetElementRect = el.getBoundingClientRect();\n    const { borderTopWidth, borderLeftWidth, borderRightWidth, borderBottomWidth } = getElementSize(el);\n    return {\n        top: offsetElementRect.top + (borderTopWidth || 0),\n        left: offsetElementRect.left + (borderLeftWidth || 0),\n        right: offsetElementRect.right + (borderRightWidth || 0),\n        bottom: offsetElementRect.bottom + (borderBottomWidth || 0),\n    };\n}\nexport function isRtlNegativeScroll() {\n    if (typeof rtlNegativeScroll === \"boolean\") {\n        return rtlNegativeScroll;\n    }\n    const template = document.createElement('div');\n    template.style.direction = 'rtl';\n    template.style.width = '1px';\n    template.style.height = '1px';\n    template.style.position = 'fixed';\n    template.style.top = '0px';\n    template.style.overflow = 'hidden';\n    template.dir = 'rtl';\n    template.innerHTML = /* html */\n        `<div style=\"width: 2px\">\n            <span style=\"display: inline-block; width: 1px\"></span>\n            <span style=\"display: inline-block; width: 1px\"></span>\n        </div>`;\n    document.body.appendChild(template);\n    template.scrollLeft = 1;\n    rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;\n    document.body.removeChild(template);\n    return rtlNegativeScroll;\n}\nexport function getScrollLeft(element, rtl) {\n    let scrollLeft = element.scrollLeft;\n    if (rtl) {\n        // Absolute value - for FF that reports RTL scrolls in negative numbers\n        scrollLeft = Math.abs(scrollLeft);\n        if (isBrowserChrome() && !isRtlNegativeScroll()) {\n            scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;\n        }\n    }\n    return scrollLeft;\n}\nexport function setScrollLeft(element, value, rtl) {\n    if (rtl) {\n        // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start\n        if (isRtlNegativeScroll()) {\n            value *= -1;\n        }\n        else if (isBrowserSafari() || isBrowserChrome()) {\n            value = element.scrollWidth - element.clientWidth - value;\n        }\n    }\n    element.scrollLeft = value;\n}\nexport function clearElement(el) {\n    while (el && el.firstChild) {\n        el.removeChild(el.firstChild);\n    }\n}\nexport function removeFromParent(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nexport function isVisible(element) {\n    const el = element;\n    if (el.checkVisibility) {\n        return el.checkVisibility({ checkVisibilityCSS: true });\n    }\n    const isHidden = !element.offsetParent || window.getComputedStyle(element).visibility !== 'visible';\n    return !isHidden;\n}\n/**\n * Loads the template and returns it as an element. makes up for no simple way in\n * the dom api to load html directly, eg we cannot do this: document.createElement(template)\n * @param {string} template\n * @returns {HTMLElement}\n */\nexport function loadTemplate(template) {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = (template || '').trim();\n    return tempDiv.firstChild;\n}\nexport function appendHtml(eContainer, htmlTemplate) {\n    if (eContainer.lastChild) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML\n        // we put the items at the start, so new items appear underneath old items,\n        // so when expanding/collapsing groups, the new rows don't go on top of the\n        // rows below that are moving our of the way\n        eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);\n    }\n    else {\n        eContainer.innerHTML = htmlTemplate;\n    }\n}\nexport function offsetHeight(element) {\n    return element && element.clientHeight ? element.clientHeight : 0;\n}\nexport function offsetWidth(element) {\n    return element && element.clientWidth ? element.clientWidth : 0;\n}\nexport function ensureDomOrder(eContainer, eChild, eChildBefore) {\n    // if already in right order, do nothing\n    if (eChildBefore && eChildBefore.nextSibling === eChild) {\n        return;\n    }\n    const focusedEl = document.activeElement;\n    const eChildHasFocus = eChild.contains(focusedEl);\n    if (eChildBefore) {\n        if (eChildBefore.nextSibling) {\n            // insert between the eRowBefore and the row after it\n            eContainer.insertBefore(eChild, eChildBefore.nextSibling);\n        }\n        else {\n            // if nextSibling is missing, means other row is at end, so just append new row at the end\n            eContainer.appendChild(eChild);\n        }\n    }\n    else {\n        // otherwise put at start\n        if (eContainer.firstChild && eContainer.firstChild !== eChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eChild);\n        }\n    }\n    if (eChildHasFocus && focusedEl && browserSupportsPreventScroll()) {\n        focusedEl.focus({ preventScroll: true });\n    }\n}\nexport function setDomChildOrder(eContainer, orderedChildren) {\n    for (let i = 0; i < orderedChildren.length; i++) {\n        const correctCellAtIndex = orderedChildren[i];\n        const actualCellAtIndex = eContainer.children[i];\n        if (actualCellAtIndex !== correctCellAtIndex) {\n            eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);\n        }\n    }\n}\nexport function insertWithDomOrder(eContainer, eToInsert, eChildBefore) {\n    if (eChildBefore) {\n        // if previous element exists, just slot in after the previous element\n        eChildBefore.insertAdjacentElement('afterend', eToInsert);\n    }\n    else {\n        if (eContainer.firstChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eToInsert);\n        }\n        else {\n            // otherwise eContainer is empty, so just append it\n            eContainer.appendChild(eToInsert);\n        }\n    }\n}\nexport function addStylesToElement(eElement, styles) {\n    if (!styles) {\n        return;\n    }\n    for (const [key, value] of Object.entries(styles)) {\n        if (!key || !key.length || value == null) {\n            continue;\n        }\n        // changes the key from camelCase into a hyphenated-string\n        const parsedKey = camelCaseToHyphenated(key);\n        const valueAsString = value.toString();\n        const parsedValue = valueAsString.replace(/\\s*!important/g, '');\n        const priority = parsedValue.length != valueAsString.length ? 'important' : undefined;\n        eElement.style.setProperty(parsedKey, parsedValue, priority);\n    }\n}\nexport function isHorizontalScrollShowing(element) {\n    return element.clientWidth < element.scrollWidth;\n}\nexport function isVerticalScrollShowing(element) {\n    return element.clientHeight < element.scrollHeight;\n}\nexport function setElementWidth(element, width) {\n    if (width === 'flex') {\n        element.style.removeProperty('width');\n        element.style.removeProperty('minWidth');\n        element.style.removeProperty('maxWidth');\n        element.style.flex = '1 1 auto';\n    }\n    else {\n        setFixedWidth(element, width);\n    }\n}\nexport function setFixedWidth(element, width) {\n    width = formatSize(width);\n    element.style.width = width.toString();\n    element.style.maxWidth = width.toString();\n    element.style.minWidth = width.toString();\n}\nexport function setElementHeight(element, height) {\n    if (height === 'flex') {\n        element.style.removeProperty('height');\n        element.style.removeProperty('minHeight');\n        element.style.removeProperty('maxHeight');\n        element.style.flex = '1 1 auto';\n    }\n    else {\n        setFixedHeight(element, height);\n    }\n}\nexport function setFixedHeight(element, height) {\n    height = formatSize(height);\n    element.style.height = height.toString();\n    element.style.maxHeight = height.toString();\n    element.style.minHeight = height.toString();\n}\nexport function formatSize(size) {\n    if (typeof size === 'number') {\n        return `${size}px`;\n    }\n    return size;\n}\nexport function isNodeOrElement(o) {\n    return o instanceof Node || o instanceof HTMLElement;\n}\n/**\n * Makes a copy of a node list into a list\n * @param {NodeList} nodeList\n * @returns {Node[]}\n */\nexport function copyNodeList(nodeList) {\n    if (nodeList == null) {\n        return [];\n    }\n    const result = [];\n    nodeListForEach(nodeList, node => result.push(node));\n    return result;\n}\nexport function iterateNamedNodeMap(map, callback) {\n    if (!map) {\n        return;\n    }\n    for (let i = 0; i < map.length; i++) {\n        const attr = map[i];\n        callback(attr.name, attr.value);\n    }\n}\nexport function addOrRemoveAttribute(element, name, value) {\n    if (value == null) {\n        element.removeAttribute(name);\n    }\n    else {\n        element.setAttribute(name, value.toString());\n    }\n}\nexport function nodeListForEach(nodeList, action) {\n    if (nodeList == null) {\n        return;\n    }\n    for (let i = 0; i < nodeList.length; i++) {\n        action(nodeList[i]);\n    }\n}\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renders as they\n * can return back strings (instead of html element) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nexport function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {\n    cellRendererPromise.then(cellRenderer => {\n        const gui = cellRenderer.getGui();\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            }\n            else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}\n","export function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {\n    const fuzzyMatches = {};\n    const invalidInputs = inputValues.filter(inputValue => !validValues.some((validValue) => validValue === inputValue));\n    if (invalidInputs.length > 0) {\n        invalidInputs.forEach(invalidInput => fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions).values);\n    }\n    return fuzzyMatches;\n}\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n */\nexport function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, filterByPercentageOfBestMatch) {\n    let thisSuggestions = allSuggestions.map((text, idx) => ({\n        value: text,\n        relevance: stringWeightedDistances(inputValue.toLowerCase(), text.toLocaleLowerCase()),\n        idx\n    }));\n    thisSuggestions.sort((a, b) => b.relevance - a.relevance);\n    if (hideIrrelevant) {\n        thisSuggestions = thisSuggestions.filter(suggestion => suggestion.relevance !== 0);\n    }\n    if (thisSuggestions.length > 0 && filterByPercentageOfBestMatch && filterByPercentageOfBestMatch > 0) {\n        const bestMatch = thisSuggestions[0].relevance;\n        const limit = bestMatch * filterByPercentageOfBestMatch;\n        thisSuggestions = thisSuggestions.filter(suggestion => limit - suggestion.relevance < 0);\n    }\n    const values = [];\n    const indices = [];\n    for (const suggestion of thisSuggestions) {\n        values.push(suggestion.value);\n        indices.push(suggestion.idx);\n    }\n    return { values, indices };\n}\nfunction stringWeightedDistances(str1, str2) {\n    const a = str1.replace(/\\s/g, '');\n    const b = str2.replace(/\\s/g, '');\n    let weight = 0;\n    let lastIndex = -1;\n    for (let i = 0; i < a.length; i++) {\n        const idx = b.indexOf(a[i], lastIndex + 1);\n        if (idx === -1) {\n            continue;\n        }\n        lastIndex = idx;\n        weight += (100 - (lastIndex * 100 / 10000) * 100);\n    }\n    return weight;\n}\n","import { loadTemplate, isNodeOrElement } from './dom.mjs';\nimport { setAriaRole } from './aria.mjs';\n//\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page custom-icons\n//\nexport const iconNameClassMap = {\n    // header column group shown when expanded (click to contract)\n    columnGroupOpened: 'expanded',\n    // header column group shown when contracted (click to expand)\n    columnGroupClosed: 'contracted',\n    // tool panel column group contracted (click to expand)\n    columnSelectClosed: 'tree-closed',\n    // tool panel column group expanded (click to contract)\n    columnSelectOpen: 'tree-open',\n    // column tool panel header expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    columnSelectIndeterminate: 'tree-indeterminate',\n    // shown on ghost icon while dragging column to the side of the grid to pin\n    columnMovePin: 'pin',\n    // shown on ghost icon while dragging over part of the page that is not a drop zone\n    columnMoveHide: 'eye-slash',\n    // shown on ghost icon while dragging columns to reorder\n    columnMoveMove: 'arrows',\n    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n    columnMoveLeft: 'left',\n    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n    columnMoveRight: 'right',\n    // shown on ghost icon while dragging over Row Groups drop zone\n    columnMoveGroup: 'group',\n    // shown on ghost icon while dragging over Values drop zone\n    columnMoveValue: 'aggregation',\n    // shown on ghost icon while dragging over pivot drop zone\n    columnMovePivot: 'pivot',\n    // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n    //     string column over aggregation drop zone\n    dropNotAllowed: 'not-allowed',\n    // shown on row group when contracted (click to expand)\n    groupContracted: 'tree-closed',\n    // shown on row group when expanded (click to contract)\n    groupExpanded: 'tree-open',\n    // set filter tree list group contracted (click to expand)\n    setFilterGroupClosed: 'tree-closed',\n    // set filter tree list group expanded (click to contract)\n    setFilterGroupOpen: 'tree-open',\n    // set filter tree list expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    setFilterGroupIndeterminate: 'tree-indeterminate',\n    // context menu chart item\n    chart: 'chart',\n    // chart window title bar\n    close: 'cross',\n    // X (remove) on column 'pill' after adding it to a drop zone list\n    cancel: 'cancel',\n    // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n    check: 'tick',\n    // \"go to first\" button in pagination controls\n    first: 'first',\n    // \"go to previous\" button in pagination controls\n    previous: 'previous',\n    // \"go to next\" button in pagination controls\n    next: 'next',\n    // \"go to last\" button in pagination controls\n    last: 'last',\n    // shown on top right of chart when chart is linked to range data (click to unlink)\n    linked: 'linked',\n    // shown on top right of chart when chart is not linked to range data (click to link)\n    unlinked: 'unlinked',\n    // \"Choose colour\" button on chart settings tab\n    colorPicker: 'color-picker',\n    // rotating spinner shown by the loading cell renderer\n    groupLoading: 'loading',\n    // button to launch enterprise column menu\n    menu: 'menu',\n    // filter tool panel tab\n    filter: 'filter',\n    // column tool panel tab\n    columns: 'columns',\n    // button in chart regular size window title bar (click to maximise)\n    maximize: 'maximize',\n    // button in chart maximised window title bar (click to make regular size)\n    minimize: 'minimize',\n    // \"Pin column\" item in column header menu\n    menuPin: 'pin',\n    // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n    menuValue: 'aggregation',\n    // \"Group by {column-name}\" item in column header menu\n    menuAddRowGroup: 'group',\n    // \"Un-Group by {column-name}\" item in column header menu\n    menuRemoveRowGroup: 'group',\n    // context menu copy item\n    clipboardCopy: 'copy',\n    // context menu cut item\n    clipboardCut: 'cut',\n    // context menu paste item\n    clipboardPaste: 'paste',\n    // identifies the pivot drop zone\n    pivotPanel: 'pivot',\n    // \"Row groups\" drop zone in column tool panel\n    rowGroupPanel: 'group',\n    // columns tool panel Values drop zone\n    valuePanel: 'aggregation',\n    // drag handle used to pick up draggable columns\n    columnDrag: 'grip',\n    // drag handle used to pick up draggable rows\n    rowDrag: 'grip',\n    // context menu export item\n    save: 'save',\n    // csv export\n    csvExport: 'csv',\n    // excel export,\n    excelExport: 'excel',\n    // icon on dropdown editors\n    smallDown: 'small-down',\n    // version of small-right used in RTL mode\n    smallLeft: 'small-left',\n    // separater between column 'pills' when you add multiple columns to the header drop zone\n    smallRight: 'small-right',\n    smallUp: 'small-up',\n    // show on column header when column is sorted ascending\n    sortAscending: 'asc',\n    // show on column header when column is sorted descending\n    sortDescending: 'desc',\n    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n    sortUnSort: 'none',\n    // Builder button in Advanced Filter\n    advancedFilterBuilder: 'group',\n    // drag handle used to pick up Advanced Filter Builder rows\n    advancedFilterBuilderDrag: 'grip',\n    // Advanced Filter Builder row validation error\n    advancedFilterBuilderInvalid: 'not-allowed',\n    // shown on Advanced Filter Builder rows to move them up\n    advancedFilterBuilderMoveUp: 'up',\n    // shown on Advanced Filter Builder rows to move them down\n    advancedFilterBuilderMoveDown: 'down',\n    // shown on Advanced Filter Builder rows to add new rows\n    advancedFilterBuilderAdd: 'plus',\n    // shown on Advanced Filter Builder rows to remove row\n    advancedFilterBuilderRemove: 'minus',\n};\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsService} gridOptionsService\n * @param {Column | null} [column]\n * @returns {Element}\n */\nexport function createIcon(iconName, gridOptionsService, column) {\n    const iconContents = createIconNoSpan(iconName, gridOptionsService, column);\n    if (iconContents) {\n        const { className } = iconContents;\n        if ((typeof className === 'string' && className.indexOf('ag-icon') > -1) ||\n            (typeof className === 'object' && className['ag-icon'])) {\n            return iconContents;\n        }\n    }\n    const eResult = document.createElement('span');\n    eResult.appendChild(iconContents);\n    return eResult;\n}\nexport function createIconNoSpan(iconName, gridOptionsService, column, forceCreate) {\n    let userProvidedIcon = null;\n    // check col for icon first\n    const icons = column && column.getColDef().icons;\n    if (icons) {\n        userProvidedIcon = icons[iconName];\n    }\n    // if not in col, try grid options\n    if (gridOptionsService && !userProvidedIcon) {\n        const optionsIcons = gridOptionsService.get('icons');\n        if (optionsIcons) {\n            userProvidedIcon = optionsIcons[iconName];\n        }\n    }\n    // now if user provided, use it\n    if (userProvidedIcon) {\n        let rendererResult;\n        if (typeof userProvidedIcon === 'function') {\n            rendererResult = userProvidedIcon();\n        }\n        else if (typeof userProvidedIcon === 'string') {\n            rendererResult = userProvidedIcon;\n        }\n        else {\n            throw new Error('icon from grid options needs to be a string or a function');\n        }\n        if (typeof rendererResult === 'string') {\n            return loadTemplate(rendererResult);\n        }\n        if (isNodeOrElement(rendererResult)) {\n            return rendererResult;\n        }\n        console.warn('AG Grid: iconRenderer should return back a string or a dom object');\n    }\n    else {\n        const span = document.createElement('span');\n        let cssClass = iconNameClassMap[iconName];\n        if (!cssClass) {\n            if (!forceCreate) {\n                console.warn(`AG Grid: Did not find icon ${iconName}`);\n                cssClass = '';\n            }\n            else {\n                cssClass = iconName;\n            }\n        }\n        span.setAttribute('class', `ag-icon ag-icon-${cssClass}`);\n        span.setAttribute('unselectable', 'on');\n        setAriaRole(span, 'presentation');\n        return span;\n    }\n}\n","export class KeyCode {\n}\nKeyCode.BACKSPACE = 'Backspace';\nKeyCode.TAB = 'Tab';\nKeyCode.ENTER = 'Enter';\nKeyCode.ESCAPE = 'Escape';\nKeyCode.SPACE = ' ';\nKeyCode.LEFT = 'ArrowLeft';\nKeyCode.UP = 'ArrowUp';\nKeyCode.RIGHT = 'ArrowRight';\nKeyCode.DOWN = 'ArrowDown';\nKeyCode.DELETE = 'Delete';\nKeyCode.F2 = 'F2';\nKeyCode.PAGE_UP = 'PageUp';\nKeyCode.PAGE_DOWN = 'PageDown';\nKeyCode.PAGE_HOME = 'Home';\nKeyCode.PAGE_END = 'End';\n// these should be used with `event.code` instead of `event.key`\n// as `event.key` changes when non-latin keyboards are used\nKeyCode.A = 'KeyA';\nKeyCode.C = 'KeyC';\nKeyCode.D = 'KeyD';\nKeyCode.V = 'KeyV';\nKeyCode.X = 'KeyX';\nKeyCode.Y = 'KeyY';\nKeyCode.Z = 'KeyZ';\n","import { KeyCode } from '../constants/keyCode.mjs';\nimport { isMacOsUserAgent } from './browser.mjs';\nimport { exists } from './generic.mjs';\nconst A_KEYCODE = 65;\nconst C_KEYCODE = 67;\nconst V_KEYCODE = 86;\nconst D_KEYCODE = 68;\nconst Z_KEYCODE = 90;\nconst Y_KEYCODE = 89;\nexport function isEventFromPrintableCharacter(event) {\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey || event.metaKey) {\n        return false;\n    }\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\n    const printableCharacter = event.key.length === 1;\n    return printableCharacter;\n}\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsService} gridOptionsService\n * @param {KeyboardEvent} keyboardEvent\n * @param {IRowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(gridOptionsService, keyboardEvent, rowNode, column, editing) {\n    const colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\n    // if no callbacks provided by user, then do nothing\n    if (!colDefFunc) {\n        return false;\n    }\n    const params = {\n        event: keyboardEvent,\n        editing,\n        column,\n        api: gridOptionsService.api,\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n        context: gridOptionsService.context,\n        columnApi: gridOptionsService.columnApi\n    };\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        const colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) {\n            return true;\n        }\n    }\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\nexport function isUserSuppressingHeaderKeyboardEvent(gridOptionsService, keyboardEvent, headerRowIndex, column) {\n    const colDef = column.getDefinition();\n    const colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n    if (!exists(colDefFunc)) {\n        return false;\n    }\n    const params = {\n        api: gridOptionsService.api,\n        columnApi: gridOptionsService.columnApi,\n        context: gridOptionsService.context,\n        colDef: colDef,\n        column,\n        headerRowIndex,\n        event: keyboardEvent\n    };\n    return !!colDefFunc(params);\n}\nexport function normaliseQwertyAzerty(keyboardEvent) {\n    const { keyCode } = keyboardEvent;\n    let code;\n    switch (keyCode) {\n        case A_KEYCODE:\n            code = KeyCode.A;\n            break;\n        case C_KEYCODE:\n            code = KeyCode.C;\n            break;\n        case V_KEYCODE:\n            code = KeyCode.V;\n            break;\n        case D_KEYCODE:\n            code = KeyCode.D;\n            break;\n        case Z_KEYCODE:\n            code = KeyCode.Z;\n            break;\n        case Y_KEYCODE:\n            code = KeyCode.Y;\n            break;\n        default:\n            code = keyboardEvent.code;\n    }\n    return code;\n}\nexport function isDeleteKey(key, alwaysReturnFalseOnBackspace = false) {\n    if (key === KeyCode.DELETE) {\n        return true;\n    }\n    if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {\n        return isMacOsUserAgent();\n    }\n    return false;\n}\n","/**\n * `True` if the event is close to the original event by X pixels either vertically or horizontally.\n * we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n * @param {MouseEvent | TouchEvent} e1\n * @param {MouseEvent | TouchEvent} e2\n * @param {number} pixelCount\n * @returns {boolean}\n */\nexport function areEventsNear(e1, e2, pixelCount) {\n    // by default, we wait 4 pixels before starting the drag\n    if (pixelCount === 0) {\n        return false;\n    }\n    const diffX = Math.abs(e1.clientX - e2.clientX);\n    const diffY = Math.abs(e1.clientY - e2.clientY);\n    return Math.max(diffX, diffY) <= pixelCount;\n}\n","/**\n * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.\n * when in ClientSideNodeManager we always have indexes (as this sorts the items the\n * user provided) but when in GroupStage, the nodes can contain filler nodes that\n * don't have order id's\n * @param {RowNode[]} rowNodes\n * @param {Object} rowNodeOrder\n *\n * @returns a boolean representing whether nodes were reordered\n */\nexport function sortRowNodesByOrder(rowNodes, rowNodeOrder) {\n    if (!rowNodes) {\n        return false;\n    }\n    const comparator = (nodeA, nodeB) => {\n        const positionA = rowNodeOrder[nodeA.id];\n        const positionB = rowNodeOrder[nodeB.id];\n        const aHasIndex = positionA !== undefined;\n        const bHasIndex = positionB !== undefined;\n        const bothNodesAreUserNodes = aHasIndex && bHasIndex;\n        const bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;\n        if (bothNodesAreUserNodes) {\n            // when comparing two nodes the user has provided, they always\n            // have indexes\n            return positionA - positionB;\n        }\n        if (bothNodesAreFillerNodes) {\n            // when comparing two filler nodes, we have no index to compare them\n            // against, however we want this sorting to be deterministic, so that\n            // the rows don't jump around as the user does delta updates. so we\n            // want the same sort result. so we use the __objectId - which doesn't make sense\n            // from a sorting point of view, but does give consistent behaviour between\n            // calls. otherwise groups jump around as delta updates are done.\n            // note: previously here we used nodeId, however this gave a strange order\n            // as string ordering of numbers is wrong, so using id based on creation order\n            // as least gives better looking order.\n            return nodeA.__objectId - nodeB.__objectId;\n        }\n        if (aHasIndex) {\n            return 1;\n        }\n        return -1;\n    };\n    // check if the list first needs sorting\n    let rowNodeA;\n    let rowNodeB;\n    let atLeastOneOutOfOrder = false;\n    for (let i = 0; i < rowNodes.length - 1; i++) {\n        rowNodeA = rowNodes[i];\n        rowNodeB = rowNodes[i + 1];\n        if (comparator(rowNodeA, rowNodeB) > 0) {\n            atLeastOneOutOfOrder = true;\n            break;\n        }\n    }\n    if (atLeastOneOutOfOrder) {\n        rowNodes.sort(comparator);\n        return true;\n    }\n    return false;\n}\n","export function convertToSet(list) {\n    const set = new Set();\n    list.forEach(x => set.add(x));\n    return set;\n}\n","import * as AriaUtils from './aria.mjs';\nimport * as ArrayUtils from './array.mjs';\nimport * as BrowserUtils from './browser.mjs';\nimport * as DateUtils from './date.mjs';\nimport * as DomUtils from './dom.mjs';\nimport * as EventUtils from './event.mjs';\nimport * as FunctionUtils from './function.mjs';\nimport * as FuzzyMatchUtils from './fuzzyMatch.mjs';\nimport * as GenericUtils from './generic.mjs';\nimport * as IconUtils from './icon.mjs';\nimport * as KeyboardUtils from './keyboard.mjs';\nimport * as MapUtils from './map.mjs';\nimport * as MouseUtils from './mouse.mjs';\nimport * as NumberUtils from './number.mjs';\nimport * as ObjectUtils from './object.mjs';\nimport * as RowNodeUtils from './rowNode.mjs';\nimport * as SetUtils from './set.mjs';\nimport * as StringUtils from './string.mjs';\nconst utils = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, AriaUtils), ArrayUtils), BrowserUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);\nexport const _ = utils;\n","export class NumberSequence {\n    constructor(initValue = 0, step = 1) {\n        this.nextValue = initValue;\n        this.step = step;\n    }\n    next() {\n        const valToReturn = this.nextValue;\n        this.nextValue += this.step;\n        return valToReturn;\n    }\n    peek() {\n        return this.nextValue;\n    }\n    skip(count) {\n        this.nextValue += count;\n    }\n}\n","export var AgPromiseStatus;\n(function (AgPromiseStatus) {\n    AgPromiseStatus[AgPromiseStatus[\"IN_PROGRESS\"] = 0] = \"IN_PROGRESS\";\n    AgPromiseStatus[AgPromiseStatus[\"RESOLVED\"] = 1] = \"RESOLVED\";\n})(AgPromiseStatus || (AgPromiseStatus = {}));\nexport class AgPromise {\n    constructor(callback) {\n        this.status = AgPromiseStatus.IN_PROGRESS;\n        this.resolution = null;\n        this.waiters = [];\n        callback(value => this.onDone(value), params => this.onReject(params));\n    }\n    static all(promises) {\n        return new AgPromise(resolve => {\n            let remainingToResolve = promises.length;\n            const combinedValues = new Array(remainingToResolve);\n            promises.forEach((promise, index) => {\n                promise.then(value => {\n                    combinedValues[index] = value;\n                    remainingToResolve--;\n                    if (remainingToResolve === 0) {\n                        resolve(combinedValues);\n                    }\n                });\n            });\n        });\n    }\n    static resolve(value = null) {\n        return new AgPromise(resolve => resolve(value));\n    }\n    then(func) {\n        return new AgPromise(resolve => {\n            if (this.status === AgPromiseStatus.RESOLVED) {\n                resolve(func(this.resolution));\n            }\n            else {\n                this.waiters.push(value => resolve(func(value)));\n            }\n        });\n    }\n    resolveNow(ifNotResolvedValue, ifResolved) {\n        return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;\n    }\n    onDone(value) {\n        this.status = AgPromiseStatus.RESOLVED;\n        this.resolution = value;\n        this.waiters.forEach(waiter => waiter(value));\n    }\n    onReject(params) {\n        console.warn('TBI');\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { isIOSUserAgent } from \"../utils/browser.mjs\";\nimport { warnOnce } from \"../utils/function.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nvar TooltipStates;\n(function (TooltipStates) {\n    TooltipStates[TooltipStates[\"NOTHING\"] = 0] = \"NOTHING\";\n    TooltipStates[TooltipStates[\"WAITING_TO_SHOW\"] = 1] = \"WAITING_TO_SHOW\";\n    TooltipStates[TooltipStates[\"SHOWING\"] = 2] = \"SHOWING\";\n})(TooltipStates || (TooltipStates = {}));\nvar TooltipTrigger;\n(function (TooltipTrigger) {\n    TooltipTrigger[TooltipTrigger[\"HOVER\"] = 0] = \"HOVER\";\n    TooltipTrigger[TooltipTrigger[\"FOCUS\"] = 1] = \"FOCUS\";\n})(TooltipTrigger || (TooltipTrigger = {}));\nexport class CustomTooltipFeature extends BeanStub {\n    constructor(parentComp, tooltipShowDelayOverride, tooltipHideDelayOverride) {\n        super();\n        this.parentComp = parentComp;\n        this.tooltipShowDelayOverride = tooltipShowDelayOverride;\n        this.tooltipHideDelayOverride = tooltipHideDelayOverride;\n        this.SHOW_QUICK_TOOLTIP_DIFF = 1000;\n        this.FADE_OUT_TOOLTIP_TIMEOUT = 1000;\n        this.INTERACTIVE_HIDE_DELAY = 100;\n        this.interactionEnabled = false;\n        this.isInteractingWithTooltip = false;\n        this.state = TooltipStates.NOTHING;\n        // when showing the tooltip, we need to make sure it's the most recent instance we request, as due to\n        // async we could request two tooltips before the first instance returns, in which case we should\n        // disregard the second instance.\n        this.tooltipInstanceCount = 0;\n        this.tooltipMouseTrack = false;\n    }\n    postConstruct() {\n        if (this.gridOptionsService.get('tooltipInteraction')) {\n            this.interactionEnabled = true;\n        }\n        this.tooltipTrigger = this.getTooltipTrigger();\n        this.tooltipMouseTrack = this.gridOptionsService.get('tooltipMouseTrack');\n        const el = this.parentComp.getGui();\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n            this.addManagedListener(el, 'mouseenter', this.onMouseEnter.bind(this));\n            this.addManagedListener(el, 'mouseleave', this.onMouseLeave.bind(this));\n        }\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\n            this.addManagedListener(el, 'focusin', this.onFocusIn.bind(this));\n            this.addManagedListener(el, 'focusout', this.onFocusOut.bind(this));\n        }\n        this.addManagedListener(el, 'mousemove', this.onMouseMove.bind(this));\n        if (!this.interactionEnabled) {\n            this.addManagedListener(el, 'mousedown', this.onMouseDown.bind(this));\n            this.addManagedListener(el, 'keydown', this.onKeyDown.bind(this));\n        }\n    }\n    getGridOptionsTooltipDelay(delayOption) {\n        const delay = this.gridOptionsService.get(delayOption);\n        if (delay < 0) {\n            warnOnce(`${delayOption} should not be lower than 0`);\n        }\n        return Math.max(200, delay);\n    }\n    getTooltipDelay(type) {\n        var _a, _b;\n        if (type === 'show') {\n            return (_a = this.tooltipShowDelayOverride) !== null && _a !== void 0 ? _a : this.getGridOptionsTooltipDelay('tooltipShowDelay');\n        }\n        else {\n            return (_b = this.tooltipHideDelayOverride) !== null && _b !== void 0 ? _b : this.getGridOptionsTooltipDelay('tooltipHideDelay');\n        }\n    }\n    destroy() {\n        // if this component gets destroyed while tooltip is showing, need to make sure\n        // we don't end with no mouseLeave event resulting in zombie tooltip\n        this.setToDoNothing();\n        super.destroy();\n    }\n    getTooltipTrigger() {\n        const trigger = this.gridOptionsService.get('tooltipTrigger');\n        if (!trigger || trigger === 'hover') {\n            return TooltipTrigger.HOVER;\n        }\n        return TooltipTrigger.FOCUS;\n    }\n    onMouseEnter(e) {\n        // if `interactiveTooltipTimeoutId` is set, it means that this cell has a tooltip\n        // and we are in the process of moving the cursor from the tooltip back to the cell\n        // so we need to unlock this service here.\n        if (this.interactionEnabled && this.interactiveTooltipTimeoutId) {\n            this.unlockService();\n            this.startHideTimeout();\n        }\n        if (isIOSUserAgent()) {\n            return;\n        }\n        if (CustomTooltipFeature.isLocked) {\n            this.showTooltipTimeoutId = window.setTimeout(() => {\n                this.prepareToShowTooltip(e);\n            }, this.INTERACTIVE_HIDE_DELAY);\n        }\n        else {\n            this.prepareToShowTooltip(e);\n        }\n    }\n    onMouseMove(e) {\n        // there is a delay from the time we mouseOver a component and the time the\n        // tooltip is displayed, so we need to track mousemove to be able to correctly\n        // position the tooltip when showTooltip is called.\n        if (this.lastMouseEvent) {\n            this.lastMouseEvent = e;\n        }\n        if (this.tooltipMouseTrack &&\n            this.state === TooltipStates.SHOWING &&\n            this.tooltipComp) {\n            this.positionTooltip();\n        }\n    }\n    onMouseDown() {\n        this.setToDoNothing();\n    }\n    onMouseLeave() {\n        // if interaction is enabled, we need to verify if the user is moving\n        // the cursor from the cell onto the tooltip, so we lock the service \n        // for 100ms to prevent other tooltips from being created while this is happening.\n        if (this.interactionEnabled) {\n            this.lockService();\n        }\n        else {\n            this.setToDoNothing();\n        }\n    }\n    onFocusIn() {\n        this.prepareToShowTooltip();\n    }\n    onFocusOut(e) {\n        var _a;\n        const relatedTarget = e.relatedTarget;\n        const parentCompGui = this.parentComp.getGui();\n        const tooltipGui = (_a = this.tooltipComp) === null || _a === void 0 ? void 0 : _a.getGui();\n        if (this.isInteractingWithTooltip ||\n            parentCompGui.contains(relatedTarget) ||\n            (this.interactionEnabled && (tooltipGui === null || tooltipGui === void 0 ? void 0 : tooltipGui.contains(relatedTarget)))) {\n            return;\n        }\n        this.setToDoNothing();\n    }\n    onKeyDown() {\n        this.setToDoNothing();\n    }\n    prepareToShowTooltip(mouseEvent) {\n        // every mouseenter should be following by a mouseleave, however for some unknown, it's possible for\n        // mouseenter to be called twice in a row, which can happen if editing the cell. this was reported\n        // in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if\n        // state is != nothing, then we know mouseenter was already received.\n        if (this.state != TooltipStates.NOTHING || CustomTooltipFeature.isLocked) {\n            return false;\n        }\n        // if we are showing the tooltip because of focus, no delay at all\n        // if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time\n        let delay = 0;\n        if (mouseEvent) {\n            delay = this.isLastTooltipHiddenRecently() ? 200 : this.getTooltipDelay('show');\n        }\n        this.lastMouseEvent = mouseEvent || null;\n        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);\n        this.state = TooltipStates.WAITING_TO_SHOW;\n        return true;\n    }\n    isLastTooltipHiddenRecently() {\n        // return true if <1000ms since last time we hid a tooltip\n        const now = new Date().getTime();\n        const then = CustomTooltipFeature.lastTooltipHideTime;\n        return (now - then) < this.SHOW_QUICK_TOOLTIP_DIFF;\n    }\n    setToDoNothing() {\n        if (this.state === TooltipStates.SHOWING) {\n            this.hideTooltip();\n        }\n        if (this.onBodyScrollEventCallback) {\n            this.onBodyScrollEventCallback();\n            this.onBodyScrollEventCallback = undefined;\n        }\n        if (this.onColumnMovedEventCallback) {\n            this.onColumnMovedEventCallback();\n            this.onColumnMovedEventCallback = undefined;\n        }\n        this.clearTimeouts();\n        this.state = TooltipStates.NOTHING;\n        this.lastMouseEvent = null;\n    }\n    showTooltip() {\n        const params = Object.assign({}, this.parentComp.getTooltipParams());\n        if (!exists(params.value)) {\n            this.setToDoNothing();\n            return;\n        }\n        this.state = TooltipStates.SHOWING;\n        this.tooltipInstanceCount++;\n        // we pass in tooltipInstanceCount so the callback knows what the count was when\n        // we requested the tooltip, so if another tooltip was requested in the mean time\n        // we disregard it\n        const callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);\n        const userDetails = this.userComponentFactory.getTooltipCompDetails(params);\n        userDetails.newAgStackInstance().then(callback);\n    }\n    hideTooltip(forceHide) {\n        if (!forceHide && this.isInteractingWithTooltip) {\n            return;\n        }\n        // check if comp exists - due to async, although we asked for\n        // one, the instance may not be back yet\n        if (this.tooltipComp) {\n            this.destroyTooltipComp();\n            CustomTooltipFeature.lastTooltipHideTime = new Date().getTime();\n        }\n        const event = {\n            type: Events.EVENT_TOOLTIP_HIDE,\n            parentGui: this.parentComp.getGui()\n        };\n        this.eventService.dispatchEvent(event);\n        this.state = TooltipStates.NOTHING;\n    }\n    newTooltipComponentCallback(tooltipInstanceCopy, tooltipComp) {\n        const compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;\n        if (compNoLongerNeeded) {\n            this.getContext().destroyBean(tooltipComp);\n            return;\n        }\n        const eGui = tooltipComp.getGui();\n        this.tooltipComp = tooltipComp;\n        if (!eGui.classList.contains('ag-tooltip')) {\n            eGui.classList.add('ag-tooltip-custom');\n        }\n        if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n            eGui.classList.add('ag-tooltip-animate');\n        }\n        if (this.interactionEnabled) {\n            eGui.classList.add('ag-tooltip-interactive');\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            eChild: eGui,\n            ariaLabel: translate('ariaLabelTooltip', 'Tooltip')\n        });\n        if (addPopupRes) {\n            this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;\n        }\n        this.positionTooltip();\n        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {\n            this.onBodyScrollEventCallback = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.setToDoNothing.bind(this));\n            this.onColumnMovedEventCallback = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.setToDoNothing.bind(this));\n        }\n        if (this.interactionEnabled) {\n            if (this.tooltipTrigger === TooltipTrigger.HOVER) {\n                this.tooltipMouseEnterListener = this.addManagedListener(eGui, 'mouseenter', this.onTooltipMouseEnter.bind(this)) || null;\n                this.tooltipMouseLeaveListener = this.addManagedListener(eGui, 'mouseleave', this.onTooltipMouseLeave.bind(this)) || null;\n            }\n            else {\n                this.tooltipFocusInListener = this.addManagedListener(eGui, 'focusin', this.onTooltipFocusIn.bind(this)) || null;\n                this.tooltipFocusOutListener = this.addManagedListener(eGui, 'focusout', this.onTooltipFocusOut.bind(this)) || null;\n            }\n        }\n        const event = {\n            type: Events.EVENT_TOOLTIP_SHOW,\n            tooltipGui: eGui,\n            parentGui: this.parentComp.getGui()\n        };\n        this.eventService.dispatchEvent(event);\n        this.startHideTimeout();\n    }\n    onTooltipMouseEnter() {\n        this.isInteractingWithTooltip = true;\n        this.unlockService();\n    }\n    onTooltipMouseLeave() {\n        this.isInteractingWithTooltip = false;\n        this.lockService();\n    }\n    onTooltipFocusIn() {\n        this.isInteractingWithTooltip = true;\n    }\n    onTooltipFocusOut(e) {\n        var _a;\n        const parentGui = this.parentComp.getGui();\n        const tooltipGui = (_a = this.tooltipComp) === null || _a === void 0 ? void 0 : _a.getGui();\n        const relatedTarget = e.relatedTarget;\n        // focusout is dispatched when inner elements lose focus\n        // so we need to verify if focus is contained within the tooltip\n        if (tooltipGui === null || tooltipGui === void 0 ? void 0 : tooltipGui.contains(relatedTarget)) {\n            return;\n        }\n        this.isInteractingWithTooltip = false;\n        // if we move the focus from the tooltip back to the original cell\n        // the tooltip should remain open, but we need to restart the hide timeout counter\n        if (parentGui.contains(relatedTarget)) {\n            this.startHideTimeout();\n        }\n        // if the parent cell doesn't contain the focus, simply hide the tooltip\n        else {\n            this.hideTooltip();\n        }\n    }\n    positionTooltip() {\n        const params = {\n            type: 'tooltip',\n            ePopup: this.tooltipComp.getGui(),\n            nudgeY: 18,\n            skipObserver: this.tooltipMouseTrack\n        };\n        if (this.lastMouseEvent) {\n            this.popupService.positionPopupUnderMouseEvent(Object.assign(Object.assign({}, params), { mouseEvent: this.lastMouseEvent }));\n        }\n        else {\n            this.popupService.positionPopupByComponent(Object.assign(Object.assign({}, params), { eventSource: this.parentComp.getGui(), position: 'under', keepWithinBounds: true, nudgeY: 5 }));\n        }\n    }\n    destroyTooltipComp() {\n        // add class to fade out the tooltip\n        this.tooltipComp.getGui().classList.add('ag-tooltip-hiding');\n        // make local copies of these variables, as we use them in the async function below,\n        // and we clear then to 'undefined' later, so need to take a copy before they are undefined.\n        const tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;\n        const tooltipComp = this.tooltipComp;\n        const delay = this.tooltipTrigger === TooltipTrigger.HOVER ? this.FADE_OUT_TOOLTIP_TIMEOUT : 0;\n        window.setTimeout(() => {\n            tooltipPopupDestroyFunc();\n            this.getContext().destroyBean(tooltipComp);\n        }, delay);\n        this.clearTooltipListeners();\n        this.tooltipPopupDestroyFunc = undefined;\n        this.tooltipComp = undefined;\n    }\n    clearTooltipListeners() {\n        [\n            this.tooltipMouseEnterListener, this.tooltipMouseLeaveListener,\n            this.tooltipFocusInListener, this.tooltipFocusOutListener\n        ].forEach(listener => {\n            if (listener) {\n                listener();\n            }\n        });\n        this.tooltipMouseEnterListener = this.tooltipMouseLeaveListener =\n            this.tooltipFocusInListener = this.tooltipFocusOutListener = null;\n    }\n    lockService() {\n        CustomTooltipFeature.isLocked = true;\n        this.interactiveTooltipTimeoutId = window.setTimeout(() => {\n            this.unlockService();\n            this.setToDoNothing();\n        }, this.INTERACTIVE_HIDE_DELAY);\n    }\n    unlockService() {\n        CustomTooltipFeature.isLocked = false;\n        this.clearInteractiveTimeout();\n    }\n    startHideTimeout() {\n        this.clearHideTimeout();\n        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.getTooltipDelay('hide'));\n    }\n    clearShowTimeout() {\n        if (!this.showTooltipTimeoutId) {\n            return;\n        }\n        window.clearTimeout(this.showTooltipTimeoutId);\n        this.showTooltipTimeoutId = undefined;\n    }\n    clearHideTimeout() {\n        if (!this.hideTooltipTimeoutId) {\n            return;\n        }\n        window.clearTimeout(this.hideTooltipTimeoutId);\n        this.hideTooltipTimeoutId = undefined;\n    }\n    clearInteractiveTimeout() {\n        if (!this.interactiveTooltipTimeoutId) {\n            return;\n        }\n        window.clearTimeout(this.interactiveTooltipTimeoutId);\n        this.interactiveTooltipTimeoutId = undefined;\n    }\n    clearTimeouts() {\n        this.clearShowTimeout();\n        this.clearHideTimeout();\n        this.clearInteractiveTimeout();\n    }\n}\nCustomTooltipFeature.isLocked = false;\n__decorate([\n    Autowired('popupService')\n], CustomTooltipFeature.prototype, \"popupService\", void 0);\n__decorate([\n    Autowired('userComponentFactory')\n], CustomTooltipFeature.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    PostConstruct\n], CustomTooltipFeature.prototype, \"postConstruct\", null);\n","export class CssClassManager {\n    constructor(getGui) {\n        // to minimise DOM hits, we only apply CSS classes if they have changed. as adding a CSS class that is already\n        // there, or removing one that wasn't present, all takes CPU.\n        this.cssClassStates = {};\n        this.getGui = getGui;\n    }\n    addCssClass(className) {\n        const list = (className || '').split(' ');\n        if (list.length > 1) {\n            list.forEach(cls => this.addCssClass(cls));\n            return;\n        }\n        const updateNeeded = this.cssClassStates[className] !== true;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.add(className);\n            }\n            this.cssClassStates[className] = true;\n        }\n    }\n    removeCssClass(className) {\n        const list = (className || '').split(' ');\n        if (list.length > 1) {\n            list.forEach(cls => this.removeCssClass(cls));\n            return;\n        }\n        const updateNeeded = this.cssClassStates[className] !== false;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.remove(className);\n            }\n            this.cssClassStates[className] = false;\n        }\n    }\n    containsCssClass(className) {\n        const eGui = this.getGui();\n        if (!eGui) {\n            return false;\n        }\n        return eGui.classList.contains(className);\n    }\n    addOrRemoveCssClass(className, addOrRemove) {\n        if (!className) {\n            return;\n        }\n        // we check for spaces before doing the split, as doing the split\n        // created a performance problem (on windows only, see AG-6765)\n        if (className.indexOf(' ') >= 0) {\n            const list = (className || '').split(' ');\n            if (list.length > 1) {\n                list.forEach(cls => this.addOrRemoveCssClass(cls, addOrRemove));\n                return;\n            }\n        }\n        const updateNeeded = this.cssClassStates[className] !== addOrRemove;\n        if (updateNeeded && className.length) {\n            const eGui = this.getGui();\n            if (eGui) {\n                eGui.classList.toggle(className, addOrRemove);\n            }\n            this.cssClassStates[className] = addOrRemove;\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PreConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { NumberSequence } from \"../utils/index.mjs\";\nimport { isNodeOrElement, copyNodeList, iterateNamedNodeMap, loadTemplate, setVisible, setDisplayed } from '../utils/dom.mjs';\nimport { getFunctionName } from '../utils/function.mjs';\nimport { CustomTooltipFeature } from \"./customTooltipFeature.mjs\";\nimport { CssClassManager } from \"../rendering/cssClassManager.mjs\";\nconst compIdSequence = new NumberSequence();\nexport class Component extends BeanStub {\n    constructor(template) {\n        super();\n        // if false, then CSS class \"ag-hidden\" is applied, which sets \"display: none\"\n        this.displayed = true;\n        // if false, then CSS class \"ag-invisible\" is applied, which sets \"visibility: hidden\"\n        this.visible = true;\n        // unique id for this row component. this is used for getting a reference to the HTML dom.\n        // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\n        // around as we create a new rowComp instance for the same row node).\n        this.compId = compIdSequence.next();\n        this.cssClassManager = new CssClassManager(() => this.eGui);\n        if (template) {\n            this.setTemplate(template);\n        }\n    }\n    preConstructOnComponent() {\n        this.usingBrowserTooltips = this.gridOptionsService.get('enableBrowserTooltips');\n    }\n    getCompId() {\n        return this.compId;\n    }\n    getTooltipParams() {\n        return {\n            value: this.tooltipText,\n            location: 'UNKNOWN'\n        };\n    }\n    setTooltip(newTooltipText, showDelayOverride, hideDelayOverride) {\n        const removeTooltip = () => {\n            if (this.usingBrowserTooltips) {\n                this.getGui().removeAttribute('title');\n            }\n            else {\n                this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n            }\n        };\n        const addTooltip = () => {\n            if (this.usingBrowserTooltips) {\n                this.getGui().setAttribute('title', this.tooltipText);\n            }\n            else {\n                this.tooltipFeature = this.createBean(new CustomTooltipFeature(this, showDelayOverride, hideDelayOverride));\n            }\n        };\n        if (this.tooltipText != newTooltipText) {\n            if (this.tooltipText) {\n                removeTooltip();\n            }\n            if (newTooltipText != null) {\n                this.tooltipText = newTooltipText;\n                if (this.tooltipText) {\n                    addTooltip();\n                }\n            }\n        }\n    }\n    // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag\n    createChildComponentsFromTags(parentNode, paramsMap) {\n        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\n        // which messes up the traversal order of the children.\n        const childNodeList = copyNodeList(parentNode.childNodes);\n        childNodeList.forEach(childNode => {\n            if (!(childNode instanceof HTMLElement)) {\n                return;\n            }\n            const childComp = this.createComponentFromElement(childNode, childComp => {\n                // copy over all attributes, including css classes, so any attributes user put on the tag\n                // wll be carried across\n                const childGui = childComp.getGui();\n                if (childGui) {\n                    this.copyAttributesFromNode(childNode, childComp.getGui());\n                }\n            }, paramsMap);\n            if (childComp) {\n                if (childComp.addItems && childNode.children.length) {\n                    this.createChildComponentsFromTags(childNode, paramsMap);\n                    // converting from HTMLCollection to Array\n                    const items = Array.prototype.slice.call(childNode.children);\n                    childComp.addItems(items);\n                }\n                // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom\n                this.swapComponentForNode(childComp, parentNode, childNode);\n            }\n            else if (childNode.childNodes) {\n                this.createChildComponentsFromTags(childNode, paramsMap);\n            }\n        });\n    }\n    createComponentFromElement(element, afterPreCreateCallback, paramsMap) {\n        const key = element.nodeName;\n        const componentParams = paramsMap ? paramsMap[element.getAttribute('ref')] : undefined;\n        const ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);\n        if (ComponentClass) {\n            Component.elementGettingCreated = element;\n            const newComponent = new ComponentClass(componentParams);\n            newComponent.setParentComponent(this);\n            this.createBean(newComponent, null, afterPreCreateCallback);\n            return newComponent;\n        }\n        return null;\n    }\n    copyAttributesFromNode(source, dest) {\n        iterateNamedNodeMap(source.attributes, (name, value) => dest.setAttribute(name, value));\n    }\n    swapComponentForNode(newComponent, parentNode, childNode) {\n        const eComponent = newComponent.getGui();\n        parentNode.replaceChild(eComponent, childNode);\n        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\n        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));\n        this.swapInComponentForQuerySelectors(newComponent, childNode);\n    }\n    swapInComponentForQuerySelectors(newComponent, childNode) {\n        const thisNoType = this;\n        this.iterateOverQuerySelectors((querySelector) => {\n            if (thisNoType[querySelector.attributeName] === childNode) {\n                thisNoType[querySelector.attributeName] = newComponent;\n            }\n        });\n    }\n    iterateOverQuerySelectors(action) {\n        let thisPrototype = Object.getPrototypeOf(this);\n        while (thisPrototype != null) {\n            const metaData = thisPrototype.__agComponentMetaData;\n            const currentProtoName = getFunctionName(thisPrototype.constructor);\n            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\n                metaData[currentProtoName].querySelectors.forEach((querySelector) => action(querySelector));\n            }\n            thisPrototype = Object.getPrototypeOf(thisPrototype);\n        }\n    }\n    activateTabIndex(elements) {\n        const tabIndex = this.gridOptionsService.get('tabIndex');\n        if (!elements) {\n            elements = [];\n        }\n        if (!elements.length) {\n            elements.push(this.getGui());\n        }\n        elements.forEach(el => el.setAttribute('tabindex', tabIndex.toString()));\n    }\n    setTemplate(template, paramsMap) {\n        const eGui = loadTemplate(template);\n        this.setTemplateFromElement(eGui, paramsMap);\n    }\n    setTemplateFromElement(element, paramsMap) {\n        this.eGui = element;\n        this.eGui.__agComponent = this;\n        this.wireQuerySelectors();\n        // context will not be available when user sets template in constructor\n        if (!!this.getContext()) {\n            this.createChildComponentsFromTags(this.getGui(), paramsMap);\n        }\n    }\n    createChildComponentsPreConstruct() {\n        // ui exists if user sets template in constructor. when this happens, we have to wait for the context\n        // to be autoWired first before we can create child components.\n        if (!!this.getGui()) {\n            this.createChildComponentsFromTags(this.getGui());\n        }\n    }\n    wireQuerySelectors() {\n        if (!this.eGui) {\n            return;\n        }\n        const thisNoType = this;\n        this.iterateOverQuerySelectors((querySelector) => {\n            const setResult = (result) => thisNoType[querySelector.attributeName] = result;\n            // if it's a ref selector, and match is on top level component, we return\n            // the element. otherwise no way of components putting ref=xxx on the top\n            // level element as querySelector only looks at children.\n            const topLevelRefMatch = querySelector.refSelector\n                && this.getAttribute('ref') === querySelector.refSelector;\n            if (topLevelRefMatch) {\n                setResult(this.eGui);\n            }\n            else {\n                // otherwise use querySelector, which looks at children\n                const resultOfQuery = this.eGui.querySelector(querySelector.querySelector);\n                if (resultOfQuery) {\n                    setResult(resultOfQuery.__agComponent || resultOfQuery);\n                }\n            }\n        });\n    }\n    getGui() {\n        return this.eGui;\n    }\n    getFocusableElement() {\n        return this.eGui;\n    }\n    getAriaElement() {\n        return this.getFocusableElement();\n    }\n    setParentComponent(component) {\n        this.parentComponent = component;\n    }\n    getParentComponent() {\n        return this.parentComponent;\n    }\n    // this method is for older code, that wants to provide the gui element,\n    // it is not intended for this to be in ag-Stack\n    setGui(eGui) {\n        this.eGui = eGui;\n    }\n    queryForHtmlElement(cssSelector) {\n        return this.eGui.querySelector(cssSelector);\n    }\n    queryForHtmlInputElement(cssSelector) {\n        return this.eGui.querySelector(cssSelector);\n    }\n    appendChild(newChild, container) {\n        if (newChild == null) {\n            return;\n        }\n        if (!container) {\n            container = this.eGui;\n        }\n        if (isNodeOrElement(newChild)) {\n            container.appendChild(newChild);\n        }\n        else {\n            const childComponent = newChild;\n            container.appendChild(childComponent.getGui());\n        }\n    }\n    isDisplayed() {\n        return this.displayed;\n    }\n    setVisible(visible, options = {}) {\n        if (visible !== this.visible) {\n            this.visible = visible;\n            const { skipAriaHidden } = options;\n            setVisible(this.eGui, visible, { skipAriaHidden });\n        }\n    }\n    setDisplayed(displayed, options = {}) {\n        if (displayed !== this.displayed) {\n            this.displayed = displayed;\n            const { skipAriaHidden } = options;\n            setDisplayed(this.eGui, displayed, { skipAriaHidden });\n            const event = {\n                type: Component.EVENT_DISPLAYED_CHANGED,\n                visible: this.displayed\n            };\n            this.dispatchEvent(event);\n        }\n    }\n    destroy() {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n        if (this.parentComponent) {\n            this.parentComponent = undefined;\n        }\n        const eGui = this.eGui;\n        if (eGui && eGui.__agComponent) {\n            eGui.__agComponent = undefined;\n        }\n        super.destroy();\n    }\n    addGuiEventListener(event, listener, options) {\n        this.eGui.addEventListener(event, listener, options);\n        this.addDestroyFunc(() => this.eGui.removeEventListener(event, listener));\n    }\n    addCssClass(className) {\n        this.cssClassManager.addCssClass(className);\n    }\n    removeCssClass(className) {\n        this.cssClassManager.removeCssClass(className);\n    }\n    containsCssClass(className) {\n        return this.cssClassManager.containsCssClass(className);\n    }\n    addOrRemoveCssClass(className, addOrRemove) {\n        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);\n    }\n    getAttribute(key) {\n        const { eGui } = this;\n        return eGui ? eGui.getAttribute(key) : null;\n    }\n    getRefElement(refName) {\n        return this.queryForHtmlElement(`[ref=\"${refName}\"]`);\n    }\n}\nComponent.EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n__decorate([\n    Autowired('agStackComponentsRegistry')\n], Component.prototype, \"agStackComponentsRegistry\", void 0);\n__decorate([\n    PreConstruct\n], Component.prototype, \"preConstructOnComponent\", null);\n__decorate([\n    PreConstruct\n], Component.prototype, \"createChildComponentsPreConstruct\", null);\n","import { getFunctionName } from '../utils/function.mjs';\nexport function QuerySelector(selector) {\n    return querySelectorFunc.bind(this, selector, undefined);\n}\nexport function RefSelector(ref) {\n    return querySelectorFunc.bind(this, `[ref=${ref}]`, ref);\n}\nfunction querySelectorFunc(selector, refSelector, classPrototype, methodOrAttributeName, index) {\n    if (selector === null) {\n        console.error('AG Grid: QuerySelector selector should not be null');\n        return;\n    }\n    if (typeof index === 'number') {\n        console.error('AG Grid: QuerySelector should be on an attribute');\n        return;\n    }\n    addToObjectProps(classPrototype, 'querySelectors', {\n        attributeName: methodOrAttributeName,\n        querySelector: selector,\n        refSelector: refSelector\n    });\n}\n// // think we should take this out, put property bindings on the\n// export function Method(eventName?: string): Function {\n//     return methodFunc.bind(this, eventName);\n// }\n//\n// function methodFunc(alias: string, target: Object, methodName: string) {\n//     if (alias === null) {\n//         console.error(\"AG Grid: EventListener eventName should not be null\");\n//         return;\n//     }\n//\n//     addToObjectProps(target, 'methods', {\n//         methodName: methodName,\n//         alias: alias\n//     });\n// }\nfunction addToObjectProps(target, key, value) {\n    // it's an attribute on the class\n    const props = getOrCreateProps(target, getFunctionName(target.constructor));\n    if (!props[key]) {\n        props[key] = [];\n    }\n    props[key].push(value);\n}\nfunction getOrCreateProps(target, instanceName) {\n    if (!target.__agComponentMetaData) {\n        target.__agComponentMetaData = {};\n    }\n    if (!target.__agComponentMetaData[instanceName]) {\n        target.__agComponentMetaData[instanceName] = {};\n    }\n    return target.__agComponentMetaData[instanceName];\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '../../../widgets/component.mjs';\nimport { RefSelector } from '../../../widgets/componentAnnotations.mjs';\nimport { Autowired } from '../../../context/context.mjs';\n// optional floating filter for user provided filters - instead of providing a floating filter,\n// they can provide a getModelAsString() method on the filter instead. this class just displays\n// the string returned from getModelAsString()\nexport class ReadOnlyFloatingFilter extends Component {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    init(params) {\n        this.params = params;\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n    onParentModelChanged(parentModel) {\n        if (!parentModel) {\n            this.eFloatingFilterText.setValue('');\n            return;\n        }\n        this.params.parentFilterInstance(filterInstance => {\n            // it would be nice to check if getModelAsString was present before creating this component,\n            // however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until\n            // AFTER the filter is created, not allowing inspection before this (we create floating filters as columns\n            // are drawn, but the parent filters are only created when needed).\n            if (filterInstance.getModelAsString) {\n                const modelAsString = filterInstance.getModelAsString(parentModel);\n                this.eFloatingFilterText.setValue(modelAsString);\n            }\n        });\n    }\n    onParamsUpdated(params) {\n        this.init(params);\n    }\n}\n__decorate([\n    RefSelector('eFloatingFilterText')\n], ReadOnlyFloatingFilter.prototype, \"eFloatingFilterText\", void 0);\n__decorate([\n    Autowired('columnModel')\n], ReadOnlyFloatingFilter.prototype, \"columnModel\", void 0);\n","import { setDisplayed } from '../../../utils/dom.mjs';\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nexport class DateCompWrapper {\n    constructor(context, userComponentFactory, dateComponentParams, eParent) {\n        this.alive = true;\n        this.context = context;\n        this.eParent = eParent;\n        const compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);\n        const promise = compDetails.newAgStackInstance();\n        promise.then(dateComp => {\n            // because async, check the filter still exists after component comes back\n            if (!this.alive) {\n                context.destroyBean(dateComp);\n                return;\n            }\n            this.dateComp = dateComp;\n            if (!dateComp) {\n                return;\n            }\n            eParent.appendChild(dateComp.getGui());\n            if (dateComp.afterGuiAttached) {\n                dateComp.afterGuiAttached();\n            }\n            if (this.tempValue) {\n                dateComp.setDate(this.tempValue);\n            }\n            if (this.disabled != null) {\n                this.setDateCompDisabled(this.disabled);\n            }\n        });\n    }\n    destroy() {\n        this.alive = false;\n        this.dateComp = this.context.destroyBean(this.dateComp);\n    }\n    getDate() {\n        return this.dateComp ? this.dateComp.getDate() : this.tempValue;\n    }\n    setDate(value) {\n        if (this.dateComp) {\n            this.dateComp.setDate(value);\n        }\n        else {\n            this.tempValue = value;\n        }\n    }\n    setDisabled(disabled) {\n        if (this.dateComp) {\n            this.setDateCompDisabled(disabled);\n        }\n        else {\n            this.disabled = disabled;\n        }\n    }\n    setDisplayed(displayed) {\n        setDisplayed(this.eParent, displayed);\n    }\n    setInputPlaceholder(placeholder) {\n        if (this.dateComp && this.dateComp.setInputPlaceholder) {\n            this.dateComp.setInputPlaceholder(placeholder);\n        }\n    }\n    setInputAriaLabel(label) {\n        if (this.dateComp && this.dateComp.setInputAriaLabel) {\n            this.dateComp.setInputAriaLabel(label);\n        }\n    }\n    afterGuiAttached(params) {\n        if (this.dateComp && typeof this.dateComp.afterGuiAttached === 'function') {\n            this.dateComp.afterGuiAttached(params);\n        }\n    }\n    updateParams(params) {\n        var _a;\n        if (((_a = this.dateComp) === null || _a === void 0 ? void 0 : _a.onParamsUpdated) && typeof this.dateComp.onParamsUpdated === 'function') {\n            this.dateComp.onParamsUpdated(params);\n        }\n    }\n    setDateCompDisabled(disabled) {\n        if (this.dateComp == null) {\n            return;\n        }\n        if (this.dateComp.setDisabled == null) {\n            return;\n        }\n        this.dateComp.setDisabled(disabled);\n    }\n}\n","/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n    constructor() {\n        this.customFilterOptions = {};\n    }\n    init(params, defaultOptions) {\n        this.filterOptions = params.filterOptions || defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n    }\n    getFilterOptions() {\n        return this.filterOptions;\n    }\n    mapCustomOptions() {\n        if (!this.filterOptions) {\n            return;\n        }\n        this.filterOptions.forEach(filterOption => {\n            if (typeof filterOption === 'string') {\n                return;\n            }\n            const requiredProperties = [['displayKey'], ['displayName'], ['predicate', 'test']];\n            const propertyCheck = (keys) => {\n                if (!keys.some(key => filterOption[key] != null)) {\n                    console.warn(`AG Grid: ignoring FilterOptionDef as it doesn't contain one of '${keys}'`);\n                    return false;\n                }\n                return true;\n            };\n            if (!requiredProperties.every(propertyCheck)) {\n                this.filterOptions = this.filterOptions.filter(v => v === filterOption) || [];\n                return;\n            }\n            this.customFilterOptions[filterOption.displayKey] = filterOption;\n        });\n    }\n    selectDefaultItem(params) {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        }\n        else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            }\n            else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            }\n            else {\n                console.warn(`AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        }\n        else {\n            console.warn('AG Grid: no filter options for filter');\n        }\n    }\n    getDefaultOption() {\n        return this.defaultOption;\n    }\n    getCustomOption(name) {\n        return this.customFilterOptions[name];\n    }\n}\n","export const FILTER_LOCALE_TEXT = {\n    applyFilter: 'Apply',\n    clearFilter: 'Clear',\n    resetFilter: 'Reset',\n    cancelFilter: 'Cancel',\n    textFilter: 'Text Filter',\n    numberFilter: 'Number Filter',\n    dateFilter: 'Date Filter',\n    setFilter: 'Set Filter',\n    filterOoo: 'Filter...',\n    empty: 'Choose one',\n    equals: 'Equals',\n    notEqual: 'Does not equal',\n    lessThan: 'Less than',\n    greaterThan: 'Greater than',\n    inRange: 'Between',\n    inRangeStart: 'From',\n    inRangeEnd: 'To',\n    lessThanOrEqual: 'Less than or equal to',\n    greaterThanOrEqual: 'Greater than or equal to',\n    contains: 'Contains',\n    notContains: 'Does not contain',\n    startsWith: 'Begins with',\n    endsWith: 'Ends with',\n    blank: 'Blank',\n    notBlank: 'Not blank',\n    before: 'Before',\n    after: 'After',\n    andCondition: 'AND',\n    orCondition: 'OR',\n    dateFormatOoo: 'yyyy-mm-dd',\n};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct, Autowired } from '../context/context.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from '../utils/event.mjs';\nimport { BeanStub } from '../context/beanStub.mjs';\nexport class ManagedFocusFeature extends BeanStub {\n    constructor(eFocusableElement, callbacks = {}) {\n        super();\n        this.eFocusableElement = eFocusableElement;\n        this.callbacks = callbacks;\n        this.callbacks = Object.assign({ shouldStopEventPropagation: () => false, onTabKeyDown: (e) => {\n                if (e.defaultPrevented) {\n                    return;\n                }\n                const nextRoot = this.focusService.findNextFocusableElement(this.eFocusableElement, false, e.shiftKey);\n                if (!nextRoot) {\n                    return;\n                }\n                nextRoot.focus();\n                e.preventDefault();\n            } }, callbacks);\n    }\n    postConstruct() {\n        this.eFocusableElement.classList.add(ManagedFocusFeature.FOCUS_MANAGED_CLASS);\n        this.addKeyDownListeners(this.eFocusableElement);\n        if (this.callbacks.onFocusIn) {\n            this.addManagedListener(this.eFocusableElement, 'focusin', this.callbacks.onFocusIn);\n        }\n        if (this.callbacks.onFocusOut) {\n            this.addManagedListener(this.eFocusableElement, 'focusout', this.callbacks.onFocusOut);\n        }\n    }\n    addKeyDownListeners(eGui) {\n        this.addManagedListener(eGui, 'keydown', (e) => {\n            if (e.defaultPrevented || isStopPropagationForAgGrid(e)) {\n                return;\n            }\n            if (this.callbacks.shouldStopEventPropagation(e)) {\n                stopPropagationForAgGrid(e);\n                return;\n            }\n            if (e.key === KeyCode.TAB) {\n                this.callbacks.onTabKeyDown(e);\n            }\n            else if (this.callbacks.handleKeyDown) {\n                this.callbacks.handleKeyDown(e);\n            }\n        });\n    }\n}\nManagedFocusFeature.FOCUS_MANAGED_CLASS = 'ag-focus-managed';\n__decorate([\n    Autowired('focusService')\n], ManagedFocusFeature.prototype, \"focusService\", void 0);\n__decorate([\n    PostConstruct\n], ManagedFocusFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired } from \"../../context/context.mjs\";\nimport { getAbsoluteHeight, getAbsoluteWidth, isVisible, setFixedHeight, setFixedWidth } from \"../../utils/dom.mjs\";\nconst RESIZE_CONTAINER_STYLE = 'ag-resizer-wrapper';\nconst RESIZE_TEMPLATE = /* html */ `<div class=\"${RESIZE_CONTAINER_STYLE}\">\n        <div ref=\"eTopLeftResizer\" class=\"ag-resizer ag-resizer-topLeft\"></div>\n        <div ref=\"eTopResizer\" class=\"ag-resizer ag-resizer-top\"></div>\n        <div ref=\"eTopRightResizer\" class=\"ag-resizer ag-resizer-topRight\"></div>\n        <div ref=\"eRightResizer\" class=\"ag-resizer ag-resizer-right\"></div>\n        <div ref=\"eBottomRightResizer\" class=\"ag-resizer ag-resizer-bottomRight\"></div>\n        <div ref=\"eBottomResizer\" class=\"ag-resizer ag-resizer-bottom\"></div>\n        <div ref=\"eBottomLeftResizer\" class=\"ag-resizer ag-resizer-bottomLeft\"></div>\n        <div ref=\"eLeftResizer\" class=\"ag-resizer ag-resizer-left\"></div>\n    </div>`;\nexport class PositionableFeature extends BeanStub {\n    constructor(element, config) {\n        super();\n        this.element = element;\n        this.dragStartPosition = {\n            x: 0,\n            y: 0\n        };\n        this.position = {\n            x: 0,\n            y: 0\n        };\n        this.lastSize = {\n            width: -1,\n            height: -1\n        };\n        this.positioned = false;\n        this.resizersAdded = false;\n        this.resizeListeners = [];\n        this.boundaryEl = null;\n        this.isResizing = false;\n        this.isMoving = false;\n        this.resizable = {};\n        this.movable = false;\n        this.currentResizer = null;\n        this.config = Object.assign({}, { popup: false }, config);\n    }\n    center() {\n        const { clientHeight, clientWidth } = this.offsetParent;\n        const x = (clientWidth / 2) - (this.getWidth() / 2);\n        const y = (clientHeight / 2) - (this.getHeight() / 2);\n        this.offsetElement(x, y);\n    }\n    initialisePosition() {\n        if (this.positioned) {\n            return;\n        }\n        const { centered, forcePopupParentAsOffsetParent, minWidth, width, minHeight, height, x, y } = this.config;\n        if (!this.offsetParent) {\n            this.setOffsetParent();\n        }\n        let computedMinHeight = 0;\n        let computedMinWidth = 0;\n        // here we don't use the main offset parent but the element's offsetParent\n        // in order to calculated the minWidth and minHeight correctly\n        const isElementVisible = isVisible(this.element);\n        if (isElementVisible) {\n            const boundaryEl = this.findBoundaryElement();\n            const offsetParentComputedStyles = window.getComputedStyle(boundaryEl);\n            if (offsetParentComputedStyles.minWidth != null) {\n                const paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;\n                computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;\n            }\n            if (offsetParentComputedStyles.minHeight != null) {\n                const paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;\n                computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;\n            }\n        }\n        this.minHeight = minHeight || computedMinHeight;\n        this.minWidth = minWidth || computedMinWidth;\n        if (width) {\n            this.setWidth(width);\n        }\n        if (height) {\n            this.setHeight(height);\n        }\n        if (!width || !height) {\n            this.refreshSize();\n        }\n        if (centered) {\n            this.center();\n        }\n        else if (x || y) {\n            this.offsetElement(x, y);\n        }\n        else if (isElementVisible && forcePopupParentAsOffsetParent) {\n            let boundaryEl = this.boundaryEl;\n            let initialisedDuringPositioning = true;\n            if (!boundaryEl) {\n                boundaryEl = this.findBoundaryElement();\n                initialisedDuringPositioning = false;\n            }\n            if (boundaryEl) {\n                const top = parseFloat(boundaryEl.style.top);\n                const left = parseFloat(boundaryEl.style.left);\n                if (initialisedDuringPositioning) {\n                    this.offsetElement(isNaN(left) ? 0 : left, isNaN(top) ? 0 : top);\n                }\n                else {\n                    this.setPosition(left, top);\n                }\n            }\n        }\n        this.positioned = !!this.offsetParent;\n    }\n    isPositioned() {\n        return this.positioned;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setMovable(movable, moveElement) {\n        if (!this.config.popup || movable === this.movable) {\n            return;\n        }\n        this.movable = movable;\n        const params = this.moveElementDragListener || {\n            eElement: moveElement,\n            onDragStart: this.onMoveStart.bind(this),\n            onDragging: this.onMove.bind(this),\n            onDragStop: this.onMoveEnd.bind(this)\n        };\n        if (movable) {\n            this.dragService.addDragSource(params);\n            this.moveElementDragListener = params;\n        }\n        else {\n            this.dragService.removeDragSource(params);\n            this.moveElementDragListener = undefined;\n        }\n    }\n    setResizable(resizable) {\n        this.clearResizeListeners();\n        if (resizable) {\n            this.addResizers();\n        }\n        else {\n            this.removeResizers();\n        }\n        if (typeof resizable === 'boolean') {\n            if (resizable === false) {\n                return;\n            }\n            resizable = {\n                topLeft: resizable,\n                top: resizable,\n                topRight: resizable,\n                right: resizable,\n                bottomRight: resizable,\n                bottom: resizable,\n                bottomLeft: resizable,\n                left: resizable\n            };\n        }\n        Object.keys(resizable).forEach((side) => {\n            const resizableStructure = resizable;\n            const isSideResizable = !!resizableStructure[side];\n            const resizerEl = this.getResizerElement(side);\n            const params = {\n                dragStartPixels: 0,\n                eElement: resizerEl,\n                onDragStart: (e) => this.onResizeStart(e, side),\n                onDragging: this.onResize.bind(this),\n                onDragStop: (e) => this.onResizeEnd(e, side),\n            };\n            if (isSideResizable || (!this.isAlive() && !isSideResizable)) {\n                if (isSideResizable) {\n                    this.dragService.addDragSource(params);\n                    this.resizeListeners.push(params);\n                    resizerEl.style.pointerEvents = 'all';\n                }\n                else {\n                    resizerEl.style.pointerEvents = 'none';\n                }\n                this.resizable[side] = isSideResizable;\n            }\n        });\n    }\n    removeSizeFromEl() {\n        this.element.style.removeProperty('height');\n        this.element.style.removeProperty('width');\n        this.element.style.removeProperty('flex');\n    }\n    restoreLastSize() {\n        this.element.style.flex = '0 0 auto';\n        const { height, width } = this.lastSize;\n        if (width !== -1) {\n            this.element.style.width = `${width}px`;\n        }\n        if (height !== -1) {\n            this.element.style.height = `${height}px`;\n        }\n    }\n    getHeight() {\n        return this.element.offsetHeight;\n    }\n    setHeight(height) {\n        const { popup } = this.config;\n        const eGui = this.element;\n        let isPercent = false;\n        if (typeof height === 'string' && height.indexOf('%') !== -1) {\n            setFixedHeight(eGui, height);\n            height = getAbsoluteHeight(eGui);\n            isPercent = true;\n        }\n        else {\n            height = Math.max(this.minHeight, height);\n            if (this.positioned) {\n                const availableHeight = this.getAvailableHeight();\n                if (availableHeight && height > availableHeight) {\n                    height = availableHeight;\n                }\n            }\n        }\n        if (this.getHeight() === height) {\n            return;\n        }\n        if (!isPercent) {\n            if (popup) {\n                setFixedHeight(eGui, height);\n            }\n            else {\n                eGui.style.height = `${height}px`;\n                eGui.style.flex = '0 0 auto';\n                this.lastSize.height = typeof height === 'number' ? height : parseFloat(height);\n            }\n        }\n        else {\n            eGui.style.maxHeight = 'unset';\n            eGui.style.minHeight = 'unset';\n        }\n    }\n    getAvailableHeight() {\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n        if (!this.positioned) {\n            this.initialisePosition();\n        }\n        const { clientHeight } = this.offsetParent;\n        if (!clientHeight) {\n            return null;\n        }\n        const elRect = this.element.getBoundingClientRect();\n        const offsetParentRect = this.offsetParent.getBoundingClientRect();\n        const yPosition = popup ? this.position.y : elRect.top;\n        const parentTop = popup ? 0 : offsetParentRect.top;\n        // When `forcePopupParentAsOffsetParent`, there may be elements that appear after the resizable element, but aren't included in the height.\n        // Take these into account here\n        let additionalHeight = 0;\n        if (forcePopupParentAsOffsetParent) {\n            const parentEl = this.element.parentElement;\n            if (parentEl) {\n                const { bottom } = parentEl.getBoundingClientRect();\n                additionalHeight = bottom - elRect.bottom;\n            }\n        }\n        const availableHeight = clientHeight + parentTop - yPosition - additionalHeight;\n        return availableHeight;\n    }\n    getWidth() {\n        return this.element.offsetWidth;\n    }\n    setWidth(width) {\n        const eGui = this.element;\n        const { popup } = this.config;\n        let isPercent = false;\n        if (typeof width === 'string' && width.indexOf('%') !== -1) {\n            setFixedWidth(eGui, width);\n            width = getAbsoluteWidth(eGui);\n            isPercent = true;\n        }\n        else if (this.positioned) {\n            width = Math.max(this.minWidth, width);\n            const { clientWidth } = this.offsetParent;\n            const xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;\n            if (clientWidth && (width + xPosition > clientWidth)) {\n                width = clientWidth - xPosition;\n            }\n        }\n        if (this.getWidth() === width) {\n            return;\n        }\n        if (!isPercent) {\n            if (this.config.popup) {\n                setFixedWidth(eGui, width);\n            }\n            else {\n                eGui.style.width = `${width}px`;\n                eGui.style.flex = ' unset';\n                this.lastSize.width = typeof width === 'number' ? width : parseFloat(width);\n            }\n        }\n        else {\n            eGui.style.maxWidth = 'unset';\n            eGui.style.minWidth = 'unset';\n        }\n    }\n    offsetElement(x = 0, y = 0) {\n        const { forcePopupParentAsOffsetParent } = this.config;\n        const ePopup = forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;\n        if (!ePopup) {\n            return;\n        }\n        this.popupService.positionPopup({\n            ePopup,\n            keepWithinBounds: true,\n            skipObserver: this.movable || this.isResizable(),\n            updatePosition: () => ({ x, y })\n        });\n        this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));\n    }\n    constrainSizeToAvailableHeight(constrain) {\n        if (!this.config.forcePopupParentAsOffsetParent) {\n            return;\n        }\n        const applyMaxHeightToElement = () => {\n            const availableHeight = this.getAvailableHeight();\n            this.element.style.setProperty('max-height', `${availableHeight}px`);\n        };\n        if (constrain) {\n            this.resizeObserverSubscriber = this.resizeObserverService.observeResize(this.popupService.getPopupParent(), applyMaxHeightToElement);\n        }\n        else {\n            this.element.style.removeProperty('max-height');\n            if (this.resizeObserverSubscriber) {\n                this.resizeObserverSubscriber();\n                this.resizeObserverSubscriber = undefined;\n            }\n        }\n    }\n    setPosition(x, y) {\n        this.position.x = x;\n        this.position.y = y;\n    }\n    updateDragStartPosition(x, y) {\n        this.dragStartPosition = { x, y };\n    }\n    calculateMouseMovement(params) {\n        const { e, isLeft, isTop, anywhereWithin, topBuffer } = params;\n        const xDiff = e.clientX - this.dragStartPosition.x;\n        const yDiff = e.clientY - this.dragStartPosition.y;\n        const movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;\n        const movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;\n        return { movementX, movementY };\n    }\n    shouldSkipX(e, isLeft, anywhereWithin, diff) {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl.getBoundingClientRect();\n        const xPosition = this.config.popup ? this.position.x : elRect.left;\n        // skip if cursor is outside of popupParent horizontally\n        let skipX = ((xPosition <= 0 && parentRect.left >= e.clientX) ||\n            (parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right));\n        if (skipX) {\n            return true;\n        }\n        if (isLeft) {\n            skipX = (\n            // skip if we are moving to the left and the cursor\n            // is positioned to the right of the left side anchor\n            (diff < 0 && e.clientX > xPosition + parentRect.left) ||\n                // skip if we are moving to the right and the cursor\n                // is positioned to the left of the dialog\n                (diff > 0 && e.clientX < xPosition + parentRect.left));\n        }\n        else {\n            if (anywhereWithin) {\n                // if anywhereWithin is true, we allow to move\n                // as long as the cursor is within the dialog\n                skipX = ((diff < 0 && e.clientX > boundaryElRect.right) ||\n                    (diff > 0 && e.clientX < xPosition + parentRect.left));\n            }\n            else {\n                skipX = (\n                // if the movement is bound to the right side of the dialog\n                // we skip if we are moving to the left and the cursor\n                // is to the right of the dialog\n                (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    // or skip if we are moving to the right and the cursor\n                    // is to the left of the right side anchor\n                    (diff > 0 && e.clientX < boundaryElRect.right));\n            }\n        }\n        return skipX;\n    }\n    shouldSkipY(e, isTop, topBuffer = 0, diff) {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl.getBoundingClientRect();\n        const yPosition = this.config.popup ? this.position.y : elRect.top;\n        // skip if cursor is outside of popupParent vertically\n        let skipY = ((yPosition <= 0 && parentRect.top >= e.clientY) ||\n            (parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom));\n        if (skipY) {\n            return true;\n        }\n        if (isTop) {\n            skipY = (\n            // skip if we are moving to towards top and the cursor is\n            // below the top anchor + topBuffer\n            // note: topBuffer is used when moving the dialog using the title bar\n            (diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer) ||\n                // skip if we are moving to the bottom and the cursor is\n                // above the top anchor\n                (diff > 0 && e.clientY < yPosition + parentRect.top));\n        }\n        else {\n            skipY = (\n            // skip if we are moving towards the top and the cursor\n            // is below the bottom anchor\n            (diff < 0 && e.clientY > boundaryElRect.bottom) ||\n                // skip if we are moving towards the bottom and the cursor\n                // is above the bottom anchor\n                (diff > 0 && e.clientY < boundaryElRect.bottom));\n        }\n        return skipY;\n    }\n    createResizeMap() {\n        const eGui = this.element;\n        this.resizerMap = {\n            topLeft: { element: eGui.querySelector('[ref=eTopLeftResizer]') },\n            top: { element: eGui.querySelector('[ref=eTopResizer]') },\n            topRight: { element: eGui.querySelector('[ref=eTopRightResizer]') },\n            right: { element: eGui.querySelector('[ref=eRightResizer]') },\n            bottomRight: { element: eGui.querySelector('[ref=eBottomRightResizer]') },\n            bottom: { element: eGui.querySelector('[ref=eBottomResizer]') },\n            bottomLeft: { element: eGui.querySelector('[ref=eBottomLeftResizer]') },\n            left: { element: eGui.querySelector('[ref=eLeftResizer]') }\n        };\n    }\n    addResizers() {\n        if (this.resizersAdded) {\n            return;\n        }\n        const eGui = this.element;\n        if (!eGui) {\n            return;\n        }\n        const parser = new DOMParser();\n        const resizers = parser.parseFromString(RESIZE_TEMPLATE, 'text/html').body;\n        eGui.appendChild(resizers.firstChild);\n        this.createResizeMap();\n        this.resizersAdded = true;\n    }\n    removeResizers() {\n        this.resizerMap = undefined;\n        const resizerEl = this.element.querySelector(`.${RESIZE_CONTAINER_STYLE}`);\n        if (resizerEl) {\n            this.element.removeChild(resizerEl);\n        }\n        this.resizersAdded = false;\n    }\n    getResizerElement(side) {\n        return this.resizerMap[side].element;\n    }\n    onResizeStart(e, side) {\n        this.boundaryEl = this.findBoundaryElement();\n        if (!this.positioned) {\n            this.initialisePosition();\n        }\n        this.currentResizer = {\n            isTop: !!side.match(/top/i),\n            isRight: !!side.match(/right/i),\n            isBottom: !!side.match(/bottom/i),\n            isLeft: !!side.match(/left/i),\n        };\n        this.element.classList.add('ag-resizing');\n        this.resizerMap[side].element.classList.add('ag-active');\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n        if (!popup && !forcePopupParentAsOffsetParent) {\n            this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);\n        }\n        this.isResizing = true;\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n    getSiblings() {\n        const element = this.element;\n        const parent = element.parentElement;\n        if (!parent) {\n            return null;\n        }\n        return Array.prototype.slice.call(parent.children).filter((el) => !el.classList.contains('ag-hidden'));\n    }\n    getMinSizeOfSiblings() {\n        const siblings = this.getSiblings() || [];\n        let height = 0;\n        let width = 0;\n        for (let i = 0; i < siblings.length; i++) {\n            const currentEl = siblings[i];\n            const isFlex = !!currentEl.style.flex && currentEl.style.flex !== '0 0 auto';\n            if (currentEl === this.element) {\n                continue;\n            }\n            let nextHeight = this.minHeight || 0;\n            let nextWidth = this.minWidth || 0;\n            if (isFlex) {\n                const computedStyle = window.getComputedStyle(currentEl);\n                if (computedStyle.minHeight) {\n                    nextHeight = parseInt(computedStyle.minHeight, 10);\n                }\n                if (computedStyle.minWidth) {\n                    nextWidth = parseInt(computedStyle.minWidth, 10);\n                }\n            }\n            else {\n                nextHeight = currentEl.offsetHeight;\n                nextWidth = currentEl.offsetWidth;\n            }\n            height += nextHeight;\n            width += nextWidth;\n        }\n        return { height, width };\n    }\n    applySizeToSiblings(vertical) {\n        let containerToFlex = null;\n        const siblings = this.getSiblings();\n        if (!siblings) {\n            return;\n        }\n        for (let i = 0; i < siblings.length; i++) {\n            const el = siblings[i];\n            if (el === containerToFlex) {\n                continue;\n            }\n            if (vertical) {\n                el.style.height = `${el.offsetHeight}px`;\n            }\n            else {\n                el.style.width = `${el.offsetWidth}px`;\n            }\n            el.style.flex = '0 0 auto';\n            if (el === this.element) {\n                containerToFlex = siblings[i + 1];\n            }\n        }\n        if (containerToFlex) {\n            containerToFlex.style.removeProperty('height');\n            containerToFlex.style.removeProperty('min-height');\n            containerToFlex.style.removeProperty('max-height');\n            containerToFlex.style.flex = '1 1 auto';\n        }\n    }\n    isResizable() {\n        return Object.values(this.resizable).some(value => value);\n    }\n    onResize(e) {\n        if (!this.isResizing || !this.currentResizer) {\n            return;\n        }\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n        const { isTop, isRight, isBottom, isLeft } = this.currentResizer;\n        const isHorizontal = isRight || isLeft;\n        const isVertical = isBottom || isTop;\n        const { movementX, movementY } = this.calculateMouseMovement({ e, isLeft, isTop });\n        const xPosition = this.position.x;\n        const yPosition = this.position.y;\n        let offsetLeft = 0;\n        let offsetTop = 0;\n        if (isHorizontal && movementX) {\n            const direction = isLeft ? -1 : 1;\n            const oldWidth = this.getWidth();\n            const newWidth = oldWidth + (movementX * direction);\n            let skipWidth = false;\n            if (isLeft) {\n                offsetLeft = oldWidth - newWidth;\n                if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {\n                    skipWidth = true;\n                    offsetLeft = 0;\n                }\n            }\n            if (!skipWidth) {\n                this.setWidth(newWidth);\n            }\n        }\n        if (isVertical && movementY) {\n            const direction = isTop ? -1 : 1;\n            const oldHeight = this.getHeight();\n            const newHeight = oldHeight + (movementY * direction);\n            let skipHeight = false;\n            if (isTop) {\n                offsetTop = oldHeight - newHeight;\n                if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight) {\n                    skipHeight = true;\n                    offsetTop = 0;\n                }\n            }\n            else {\n                // do not let the size of all siblings be higher than the parent container\n                if (!this.config.popup &&\n                    !this.config.forcePopupParentAsOffsetParent &&\n                    oldHeight < newHeight &&\n                    (this.getMinSizeOfSiblings().height + newHeight) > this.element.parentElement.offsetHeight) {\n                    skipHeight = true;\n                }\n            }\n            if (!skipHeight) {\n                this.setHeight(newHeight);\n            }\n        }\n        this.updateDragStartPosition(e.clientX, e.clientY);\n        if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {\n            this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);\n        }\n    }\n    onResizeEnd(e, side) {\n        this.isResizing = false;\n        this.currentResizer = null;\n        this.boundaryEl = null;\n        const params = {\n            type: 'resize',\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi\n        };\n        this.element.classList.remove('ag-resizing');\n        this.resizerMap[side].element.classList.remove('ag-active');\n        this.dispatchEvent(params);\n    }\n    refreshSize() {\n        const eGui = this.element;\n        if (this.config.popup) {\n            if (!this.config.width) {\n                this.setWidth(eGui.offsetWidth);\n            }\n            if (!this.config.height) {\n                this.setHeight(eGui.offsetHeight);\n            }\n        }\n    }\n    onMoveStart(e) {\n        this.boundaryEl = this.findBoundaryElement();\n        if (!this.positioned) {\n            this.initialisePosition();\n        }\n        this.isMoving = true;\n        this.element.classList.add('ag-moving');\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n    onMove(e) {\n        if (!this.isMoving) {\n            return;\n        }\n        const { x, y } = this.position;\n        let topBuffer;\n        if (this.config.calculateTopBuffer) {\n            topBuffer = this.config.calculateTopBuffer();\n        }\n        const { movementX, movementY } = this.calculateMouseMovement({\n            e,\n            isTop: true,\n            anywhereWithin: true,\n            topBuffer\n        });\n        this.offsetElement(x + movementX, y + movementY);\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n    onMoveEnd() {\n        this.isMoving = false;\n        this.boundaryEl = null;\n        this.element.classList.remove('ag-moving');\n    }\n    setOffsetParent() {\n        if (this.config.forcePopupParentAsOffsetParent) {\n            this.offsetParent = this.popupService.getPopupParent();\n        }\n        else {\n            this.offsetParent = this.element.offsetParent;\n        }\n    }\n    findBoundaryElement() {\n        let el = this.element;\n        while (el) {\n            if (window.getComputedStyle(el).position !== 'static') {\n                return el;\n            }\n            el = el.parentElement;\n        }\n        return this.element;\n    }\n    clearResizeListeners() {\n        while (this.resizeListeners.length) {\n            const params = this.resizeListeners.pop();\n            this.dragService.removeDragSource(params);\n        }\n    }\n    destroy() {\n        super.destroy();\n        if (this.moveElementDragListener) {\n            this.dragService.removeDragSource(this.moveElementDragListener);\n        }\n        this.constrainSizeToAvailableHeight(false);\n        this.clearResizeListeners();\n        this.removeResizers();\n    }\n}\n__decorate([\n    Autowired('popupService')\n], PositionableFeature.prototype, \"popupService\", void 0);\n__decorate([\n    Autowired('resizeObserverService')\n], PositionableFeature.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Autowired('dragService')\n], PositionableFeature.prototype, \"dragService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from '../../context/context.mjs';\nimport { clearElement, loadTemplate, removeFromParent, setDisabled } from '../../utils/dom.mjs';\nimport { debounce } from '../../utils/function.mjs';\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText.mjs';\nimport { ManagedFocusFeature } from '../../widgets/managedFocusFeature.mjs';\nimport { convertToSet } from '../../utils/set.mjs';\nimport { Component } from '../../widgets/component.mjs';\nimport { RefSelector } from '../../widgets/componentAnnotations.mjs';\nimport { PositionableFeature } from '../../rendering/features/positionableFeature.mjs';\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with AG Grid extend this class. User filters do not\n * extend this class.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n */\nexport class ProvidedFilter extends Component {\n    constructor(filterNameKey) {\n        super();\n        this.filterNameKey = filterNameKey;\n        this.applyActive = false;\n        this.hidePopup = null;\n        this.debouncePending = false;\n        // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n        // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n        // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n        // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n        // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n        // not active) then this appliedModel will be null/undefined.\n        this.appliedModel = null;\n        this.buttonListeners = [];\n    }\n    postConstruct() {\n        this.resetTemplate(); // do this first to create the DOM\n        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {\n            handleKeyDown: this.handleKeyDown.bind(this)\n        }));\n        this.positionableFeature = new PositionableFeature(this.getPositionableElement(), {\n            forcePopupParentAsOffsetParent: true\n        });\n        this.createBean(this.positionableFeature);\n    }\n    // override\n    handleKeyDown(e) { }\n    getFilterTitle() {\n        return this.translate(this.filterNameKey);\n    }\n    isFilterActive() {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n    resetTemplate(paramsMap) {\n        let eGui = this.getGui();\n        if (eGui) {\n            eGui.removeEventListener('submit', this.onFormSubmit);\n        }\n        const templateString = /* html */ `\n            <form class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\" ref=\"eFilterBody\">\n                    ${this.createBodyTemplate()}\n                </div>\n            </form>`;\n        this.setTemplate(templateString, paramsMap);\n        eGui = this.getGui();\n        if (eGui) {\n            eGui.addEventListener('submit', this.onFormSubmit);\n        }\n    }\n    isReadOnly() {\n        return !!this.providedFilterParams.readOnly;\n    }\n    init(params) {\n        this.setParams(params);\n        this.resetUiToDefaults(true).then(() => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n    setParams(params) {\n        this.providedFilterParams = params;\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n        this.resetButtonsPanel();\n    }\n    updateParams(params) {\n        this.providedFilterParams = params;\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n        this.resetUiToActiveModel(this.getModel(), () => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n    resetButtonsPanel() {\n        const { buttons } = this.providedFilterParams;\n        const hasButtons = buttons && buttons.length > 0 && !this.isReadOnly();\n        if (!this.eButtonsPanel) {\n            // Only create the buttons panel if we need to\n            if (hasButtons) {\n                this.eButtonsPanel = document.createElement('div');\n                this.eButtonsPanel.classList.add('ag-filter-apply-panel');\n            }\n        }\n        else {\n            // Always empty the buttons panel before adding new buttons\n            clearElement(this.eButtonsPanel);\n            this.buttonListeners.forEach(destroyFunc => destroyFunc === null || destroyFunc === void 0 ? void 0 : destroyFunc());\n            this.buttonListeners = [];\n        }\n        if (!hasButtons) {\n            // The case when we need to hide the buttons panel because there are no buttons\n            if (this.eButtonsPanel) {\n                removeFromParent(this.eButtonsPanel);\n            }\n            return;\n        }\n        // At this point we know we have a buttons and a buttons panel has been created.\n        // Instead of appending each button to the DOM individually, we create a fragment and append that\n        // to the DOM once. This is much faster than appending each button individually.\n        const fragment = document.createDocumentFragment();\n        const addButton = (type) => {\n            let text;\n            let clickListener;\n            switch (type) {\n                case 'apply':\n                    text = this.translate('applyFilter');\n                    clickListener = (e) => this.onBtApply(false, false, e);\n                    break;\n                case 'clear':\n                    text = this.translate('clearFilter');\n                    clickListener = () => this.onBtClear();\n                    break;\n                case 'reset':\n                    text = this.translate('resetFilter');\n                    clickListener = () => this.onBtReset();\n                    break;\n                case 'cancel':\n                    text = this.translate('cancelFilter');\n                    clickListener = (e) => { this.onBtCancel(e); };\n                    break;\n                default:\n                    console.warn('AG Grid: Unknown button type specified');\n                    return;\n            }\n            const buttonType = type === 'apply' ? 'submit' : 'button';\n            const button = loadTemplate(\n            /* html */\n            `<button\n                    type=\"${buttonType}\"\n                    ref=\"${type}FilterButton\"\n                    class=\"ag-button ag-standard-button ag-filter-apply-panel-button\"\n                >${text}\n                </button>`);\n            this.buttonListeners.push(this.addManagedListener(button, 'click', clickListener));\n            fragment.append(button);\n        };\n        convertToSet(buttons).forEach(type => addButton(type));\n        this.eButtonsPanel.append(fragment);\n        this.getGui().appendChild(this.eButtonsPanel);\n    }\n    // subclasses can override this to provide alternative debounce defaults\n    getDefaultDebounceMs() {\n        return 0;\n    }\n    setupOnBtApplyDebounce() {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        const debounceFunc = debounce(this.checkApplyDebounce.bind(this), debounceMs);\n        this.onBtApplyDebounce = () => {\n            this.debouncePending = true;\n            debounceFunc();\n        };\n    }\n    checkApplyDebounce() {\n        if (this.debouncePending) {\n            // May already have been applied, so don't apply again (e.g. closing filter before debounce timeout)\n            this.debouncePending = false;\n            this.onBtApply();\n        }\n    }\n    getModel() {\n        return this.appliedModel ? this.appliedModel : null;\n    }\n    setModel(model) {\n        const promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();\n        return promise.then(() => {\n            this.updateUiVisibility();\n            // we set the model from the GUI, rather than the provided model,\n            // so the model is consistent, e.g. handling of null/undefined will be the same,\n            // or if model is case-insensitive, then casing is removed.\n            this.applyModel('api');\n        });\n    }\n    onBtCancel(e) {\n        this.resetUiToActiveModel(this.getModel(), () => {\n            this.handleCancelEnd(e);\n        });\n    }\n    handleCancelEnd(e) {\n        if (this.providedFilterParams.closeOnApply) {\n            this.close(e);\n        }\n    }\n    resetUiToActiveModel(currentModel, afterUiUpdatedFunc) {\n        const afterAppliedFunc = () => {\n            this.onUiChanged(false, 'prevent');\n            afterUiUpdatedFunc === null || afterUiUpdatedFunc === void 0 ? void 0 : afterUiUpdatedFunc();\n        };\n        if (currentModel != null) {\n            this.setModelIntoUi(currentModel).then(afterAppliedFunc);\n        }\n        else {\n            this.resetUiToDefaults().then(afterAppliedFunc);\n        }\n    }\n    onBtClear() {\n        this.resetUiToDefaults().then(() => this.onUiChanged());\n    }\n    onBtReset() {\n        this.onBtClear();\n        this.onBtApply();\n    }\n    /**\n     * Applies changes made in the UI to the filter, and returns true if the model has changed.\n     */\n    applyModel(source = 'api') {\n        const newModel = this.getModelFromUi();\n        if (!this.isModelValid(newModel)) {\n            return false;\n        }\n        const previousModel = this.appliedModel;\n        this.appliedModel = newModel;\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        return !this.areModelsEqual(previousModel, newModel);\n    }\n    isModelValid(model) {\n        return true;\n    }\n    onFormSubmit(e) {\n        e.preventDefault();\n    }\n    onBtApply(afterFloatingFilter = false, afterDataChange = false, e) {\n        // Prevent form submission\n        if (e) {\n            e.preventDefault();\n        }\n        if (this.applyModel(afterDataChange ? 'rowDataUpdated' : 'ui')) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            const source = 'columnFilter';\n            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange, source });\n        }\n        const { closeOnApply } = this.providedFilterParams;\n        // only close if an apply button is visible, otherwise we'd be closing every time a change was made!\n        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {\n            this.close(e);\n        }\n    }\n    onNewRowsLoaded() {\n    }\n    close(e) {\n        if (!this.hidePopup) {\n            return;\n        }\n        const keyboardEvent = e;\n        const key = keyboardEvent && keyboardEvent.key;\n        let params;\n        if (key === 'Enter' || key === 'Space') {\n            params = { keyboardEvent };\n        }\n        this.hidePopup(params);\n        this.hidePopup = null;\n    }\n    /**\n     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no\n     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can\n     * be adjusted by using the apply parameter.\n     */\n    onUiChanged(fromFloatingFilter = false, apply) {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n        if (this.applyActive && !this.isReadOnly()) {\n            const isValid = this.isModelValid(this.getModelFromUi());\n            const applyFilterButton = this.getRefElement('applyFilterButton');\n            if (applyFilterButton) {\n                setDisabled(applyFilterButton, !isValid);\n            }\n        }\n        if ((fromFloatingFilter && !apply) || apply === 'immediately') {\n            this.onBtApply(fromFloatingFilter);\n        }\n        else if ((!this.applyActive && !apply) || apply === 'debounce') {\n            this.onBtApplyDebounce();\n        }\n    }\n    afterGuiAttached(params) {\n        if (params) {\n            this.hidePopup = params.hidePopup;\n        }\n        this.refreshFilterResizer(params === null || params === void 0 ? void 0 : params.container);\n    }\n    refreshFilterResizer(containerType) {\n        // tool panel is scrollable, so don't need to size\n        if (!this.positionableFeature || containerType === 'toolPanel') {\n            return;\n        }\n        const isFloatingFilter = containerType === 'floatingFilter';\n        const { positionableFeature, gridOptionsService } = this;\n        if (isFloatingFilter) {\n            positionableFeature.restoreLastSize();\n            positionableFeature.setResizable(gridOptionsService.get('enableRtl')\n                ? { bottom: true, bottomLeft: true, left: true }\n                : { bottom: true, bottomRight: true, right: true });\n        }\n        else {\n            this.positionableFeature.removeSizeFromEl();\n            this.positionableFeature.setResizable(false);\n        }\n        this.positionableFeature.constrainSizeToAvailableHeight(true);\n    }\n    afterGuiDetached() {\n        this.checkApplyDebounce();\n        if (this.positionableFeature) {\n            this.positionableFeature.constrainSizeToAvailableHeight(false);\n        }\n    }\n    // static, as used by floating filter also\n    static getDebounceMs(params, debounceDefault) {\n        if (ProvidedFilter.isUseApplyButton(params)) {\n            if (params.debounceMs != null) {\n                console.warn('AG Grid: debounceMs is ignored when apply button is present');\n            }\n            return 0;\n        }\n        return params.debounceMs != null ? params.debounceMs : debounceDefault;\n    }\n    // static, as used by floating filter also\n    static isUseApplyButton(params) {\n        return !!params.buttons && params.buttons.indexOf('apply') >= 0;\n    }\n    refresh(newParams) {\n        this.providedFilterParams = newParams;\n        return true;\n    }\n    destroy() {\n        const eGui = this.getGui();\n        if (eGui) {\n            eGui.removeEventListener('submit', this.onFormSubmit);\n        }\n        this.hidePopup = null;\n        if (this.positionableFeature) {\n            this.positionableFeature = this.destroyBean(this.positionableFeature);\n        }\n        super.destroy();\n    }\n    translate(key) {\n        const translate = this.localeService.getLocaleTextFunc();\n        return translate(key, FILTER_LOCALE_TEXT[key]);\n    }\n    getCellValue(rowNode) {\n        return this.providedFilterParams.getValue(rowNode);\n    }\n    // override to control positionable feature\n    getPositionableElement() {\n        return this.eFilterBody;\n    }\n}\n__decorate([\n    Autowired('rowModel')\n], ProvidedFilter.prototype, \"rowModel\", void 0);\n__decorate([\n    RefSelector('eFilterBody')\n], ProvidedFilter.prototype, \"eFilterBody\", void 0);\n__decorate([\n    PostConstruct\n], ProvidedFilter.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"./component.mjs\";\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { clearElement, setDisabled, setDisplayed, setElementWidth } from \"../utils/dom.mjs\";\nimport { setAriaRole } from \"../utils/aria.mjs\";\nexport class AgAbstractLabel extends Component {\n    constructor(config, template) {\n        super(template);\n        this.labelSeparator = '';\n        this.labelAlignment = 'left';\n        this.disabled = false;\n        this.label = '';\n        this.config = config || {};\n    }\n    postConstruct() {\n        this.addCssClass('ag-labeled');\n        this.eLabel.classList.add('ag-label');\n        const { labelSeparator, label, labelWidth, labelAlignment } = this.config;\n        if (labelSeparator != null) {\n            this.setLabelSeparator(labelSeparator);\n        }\n        if (label != null) {\n            this.setLabel(label);\n        }\n        if (labelWidth != null) {\n            this.setLabelWidth(labelWidth);\n        }\n        this.setLabelAlignment(labelAlignment || this.labelAlignment);\n        this.refreshLabel();\n    }\n    refreshLabel() {\n        clearElement(this.eLabel);\n        if (typeof this.label === 'string') {\n            this.eLabel.innerText = this.label + this.labelSeparator;\n        }\n        else if (this.label) {\n            this.eLabel.appendChild(this.label);\n        }\n        if (this.label === '') {\n            setDisplayed(this.eLabel, false);\n            setAriaRole(this.eLabel, 'presentation');\n        }\n        else {\n            setDisplayed(this.eLabel, true);\n            setAriaRole(this.eLabel, null);\n        }\n    }\n    setLabelSeparator(labelSeparator) {\n        if (this.labelSeparator === labelSeparator) {\n            return this;\n        }\n        this.labelSeparator = labelSeparator;\n        if (this.label != null) {\n            this.refreshLabel();\n        }\n        return this;\n    }\n    getLabelId() {\n        this.eLabel.id = this.eLabel.id || `ag-${this.getCompId()}-label`;\n        return this.eLabel.id;\n    }\n    getLabel() {\n        return this.label;\n    }\n    setLabel(label) {\n        if (this.label === label) {\n            return this;\n        }\n        this.label = label;\n        this.refreshLabel();\n        return this;\n    }\n    setLabelAlignment(alignment) {\n        const eGui = this.getGui();\n        const eGuiClassList = eGui.classList;\n        eGuiClassList.toggle('ag-label-align-left', alignment === 'left');\n        eGuiClassList.toggle('ag-label-align-right', alignment === 'right');\n        eGuiClassList.toggle('ag-label-align-top', alignment === 'top');\n        return this;\n    }\n    setLabelEllipsis(hasEllipsis) {\n        this.eLabel.classList.toggle('ag-label-ellipsis', hasEllipsis);\n        return this;\n    }\n    setLabelWidth(width) {\n        if (this.label == null) {\n            return this;\n        }\n        setElementWidth(this.eLabel, width);\n        return this;\n    }\n    setDisabled(disabled) {\n        disabled = !!disabled;\n        const element = this.getGui();\n        setDisabled(element, disabled);\n        element.classList.toggle('ag-disabled', disabled);\n        this.disabled = disabled;\n        return this;\n    }\n    isDisabled() {\n        return !!this.disabled;\n    }\n}\n__decorate([\n    PostConstruct\n], AgAbstractLabel.prototype, \"postConstruct\", null);\n","import { AgAbstractLabel } from './agAbstractLabel.mjs';\nimport { setFixedWidth } from '../utils/dom.mjs';\nimport { Events } from '../eventKeys.mjs';\nimport { getAriaLabel, setAriaLabel, setAriaLabelledBy } from '../utils/aria.mjs';\nexport class AgAbstractField extends AgAbstractLabel {\n    constructor(config, template, className) {\n        super(config, template);\n        this.className = className;\n    }\n    postConstruct() {\n        super.postConstruct();\n        if (this.className) {\n            this.addCssClass(this.className);\n        }\n        this.refreshAriaLabelledBy();\n    }\n    refreshAriaLabelledBy() {\n        const ariaEl = this.getAriaElement();\n        const labelId = this.getLabelId();\n        if (getAriaLabel(ariaEl) !== null) {\n            setAriaLabelledBy(ariaEl, '');\n        }\n        else {\n            setAriaLabelledBy(ariaEl, labelId !== null && labelId !== void 0 ? labelId : '');\n        }\n    }\n    setAriaLabel(label) {\n        setAriaLabel(this.getAriaElement(), label);\n        this.refreshAriaLabelledBy();\n        return this;\n    }\n    onValueChange(callbackFn) {\n        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, () => callbackFn(this.getValue()));\n        return this;\n    }\n    getWidth() {\n        return this.getGui().clientWidth;\n    }\n    setWidth(width) {\n        setFixedWidth(this.getGui(), width);\n        return this;\n    }\n    getPreviousValue() {\n        return this.previousValue;\n    }\n    getValue() {\n        return this.value;\n    }\n    setValue(value, silent) {\n        if (this.value === value) {\n            return this;\n        }\n        this.previousValue = this.value;\n        this.value = value;\n        if (!silent) {\n            this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n        }\n        return this;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AgAbstractField } from \"./agAbstractField.mjs\";\nimport { RefSelector } from \"./componentAnnotations.mjs\";\nimport { setAriaExpanded, setAriaRole } from \"../utils/aria.mjs\";\nimport { createIconNoSpan } from \"../utils/icon.mjs\";\nimport { setElementWidth, getAbsoluteWidth, getInnerHeight, formatSize } from \"../utils/dom.mjs\";\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { Autowired } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nconst TEMPLATE = /* html */ `\n    <div class=\"ag-picker-field\" role=\"presentation\">\n        <div ref=\"eLabel\"></div>\n            <div ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-picker-collapsed\">\n            <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n            <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n        </div>\n    </div>`;\nexport class AgPickerField extends AgAbstractField {\n    constructor(config) {\n        super(config, (config === null || config === void 0 ? void 0 : config.template) || TEMPLATE, config === null || config === void 0 ? void 0 : config.className);\n        this.isPickerDisplayed = false;\n        this.skipClick = false;\n        this.pickerGap = 4;\n        this.hideCurrentPicker = null;\n        this.ariaRole = config === null || config === void 0 ? void 0 : config.ariaRole;\n        this.onPickerFocusIn = this.onPickerFocusIn.bind(this);\n        this.onPickerFocusOut = this.onPickerFocusOut.bind(this);\n        if (!config) {\n            return;\n        }\n        const { pickerGap, maxPickerHeight, variableWidth, minPickerWidth, maxPickerWidth } = config;\n        if (pickerGap != null) {\n            this.pickerGap = pickerGap;\n        }\n        this.variableWidth = !!variableWidth;\n        if (maxPickerHeight != null) {\n            this.setPickerMaxHeight(maxPickerHeight);\n        }\n        if (minPickerWidth != null) {\n            this.setPickerMinWidth(minPickerWidth);\n        }\n        if (maxPickerWidth != null) {\n            this.setPickerMaxWidth(maxPickerWidth);\n        }\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.setupAria();\n        const displayId = `ag-${this.getCompId()}-display`;\n        this.eDisplayField.setAttribute('id', displayId);\n        const ariaEl = this.getAriaElement();\n        this.addManagedListener(ariaEl, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(this.eLabel, 'mousedown', this.onLabelOrWrapperMouseDown.bind(this));\n        this.addManagedListener(this.eWrapper, 'mousedown', this.onLabelOrWrapperMouseDown.bind(this));\n        const { pickerIcon } = this.config;\n        if (pickerIcon) {\n            const icon = createIconNoSpan(pickerIcon, this.gridOptionsService);\n            if (icon) {\n                this.eIcon.appendChild(icon);\n            }\n        }\n    }\n    setupAria() {\n        const ariaEl = this.getAriaElement();\n        ariaEl.setAttribute('tabindex', (this.gridOptionsService.get('tabIndex')).toString());\n        setAriaExpanded(ariaEl, false);\n        if (this.ariaRole) {\n            setAriaRole(ariaEl, this.ariaRole);\n        }\n    }\n    onLabelOrWrapperMouseDown(e) {\n        if (e) {\n            const focusableEl = this.getFocusableElement();\n            // if the focusableEl is not the wrapper and the mousedown\n            // targets the focusableEl, we should not expand/collapse the picker.\n            // Note: this will happen when AgRichSelect is set with `allowTyping=true`\n            if (focusableEl !== this.eWrapper && (e === null || e === void 0 ? void 0 : e.target) === focusableEl) {\n                return;\n            }\n            // this prevents a BUG where MouseDown causes the element to be focused\n            // after the picker is shown and focus ends up being lost.\n            e.preventDefault();\n            this.getFocusableElement().focus();\n        }\n        if (this.skipClick) {\n            this.skipClick = false;\n            return;\n        }\n        if (this.isDisabled()) {\n            return;\n        }\n        if (this.isPickerDisplayed) {\n            this.hidePicker();\n        }\n        else {\n            this.showPicker();\n        }\n    }\n    onKeyDown(e) {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n            case KeyCode.ENTER:\n            case KeyCode.SPACE:\n                e.preventDefault();\n                this.onLabelOrWrapperMouseDown();\n                break;\n            case KeyCode.ESCAPE:\n                if (this.isPickerDisplayed) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (this.hideCurrentPicker) {\n                        this.hideCurrentPicker();\n                    }\n                }\n                break;\n        }\n    }\n    showPicker() {\n        this.isPickerDisplayed = true;\n        if (!this.pickerComponent) {\n            this.pickerComponent = this.createPickerComponent();\n        }\n        const pickerGui = this.pickerComponent.getGui();\n        pickerGui.addEventListener('focusin', this.onPickerFocusIn);\n        pickerGui.addEventListener('focusout', this.onPickerFocusOut);\n        this.hideCurrentPicker = this.renderAndPositionPicker();\n        this.toggleExpandedStyles(true);\n    }\n    renderAndPositionPicker() {\n        const eDocument = this.gridOptionsService.getDocument();\n        const ePicker = this.pickerComponent.getGui();\n        if (!this.gridOptionsService.get('suppressScrollWhenPopupsAreOpen')) {\n            this.destroyMouseWheelFunc = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, () => {\n                this.hidePicker();\n            });\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        const { pickerAriaLabelKey, pickerAriaLabelValue, modalPicker = true } = this.config;\n        const popupParams = {\n            modal: modalPicker,\n            eChild: ePicker,\n            closeOnEsc: true,\n            closedCallback: () => {\n                const shouldRestoreFocus = eDocument.activeElement === eDocument.body;\n                this.beforeHidePicker();\n                if (shouldRestoreFocus && this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            },\n            ariaLabel: translate(pickerAriaLabelKey, pickerAriaLabelValue),\n        };\n        const addPopupRes = this.popupService.addPopup(popupParams);\n        const { maxPickerHeight, minPickerWidth, maxPickerWidth, variableWidth } = this;\n        if (variableWidth) {\n            if (minPickerWidth) {\n                ePicker.style.minWidth = minPickerWidth;\n            }\n            ePicker.style.width = formatSize(getAbsoluteWidth(this.eWrapper));\n            if (maxPickerWidth) {\n                ePicker.style.maxWidth = maxPickerWidth;\n            }\n        }\n        else {\n            setElementWidth(ePicker, maxPickerWidth !== null && maxPickerWidth !== void 0 ? maxPickerWidth : getAbsoluteWidth(this.eWrapper));\n        }\n        const maxHeight = maxPickerHeight !== null && maxPickerHeight !== void 0 ? maxPickerHeight : `${getInnerHeight(this.popupService.getPopupParent())}px`;\n        ePicker.style.setProperty('max-height', maxHeight);\n        ePicker.style.position = 'absolute';\n        this.alignPickerToComponent();\n        return addPopupRes.hideFunc;\n    }\n    alignPickerToComponent() {\n        if (!this.pickerComponent) {\n            return;\n        }\n        const { pickerType } = this.config;\n        const { pickerGap } = this;\n        const alignSide = this.gridOptionsService.get('enableRtl') ? 'right' : 'left';\n        this.popupService.positionPopupByComponent({\n            type: pickerType,\n            eventSource: this.eWrapper,\n            ePopup: this.pickerComponent.getGui(),\n            position: 'under',\n            alignSide,\n            keepWithinBounds: true,\n            nudgeY: pickerGap\n        });\n    }\n    beforeHidePicker() {\n        if (this.destroyMouseWheelFunc) {\n            this.destroyMouseWheelFunc();\n            this.destroyMouseWheelFunc = undefined;\n        }\n        this.toggleExpandedStyles(false);\n        const pickerGui = this.pickerComponent.getGui();\n        pickerGui.removeEventListener('focusin', this.onPickerFocusIn);\n        pickerGui.removeEventListener('focusout', this.onPickerFocusOut);\n        this.isPickerDisplayed = false;\n        this.pickerComponent = undefined;\n        this.hideCurrentPicker = null;\n    }\n    toggleExpandedStyles(expanded) {\n        if (!this.isAlive()) {\n            return;\n        }\n        const ariaEl = this.getAriaElement();\n        setAriaExpanded(ariaEl, expanded);\n        this.eWrapper.classList.toggle('ag-picker-expanded', expanded);\n        this.eWrapper.classList.toggle('ag-picker-collapsed', !expanded);\n    }\n    onPickerFocusIn() {\n        this.togglePickerHasFocus(true);\n    }\n    onPickerFocusOut(e) {\n        var _a;\n        if (!((_a = this.pickerComponent) === null || _a === void 0 ? void 0 : _a.getGui().contains(e.relatedTarget))) {\n            this.togglePickerHasFocus(false);\n        }\n    }\n    togglePickerHasFocus(focused) {\n        if (!this.pickerComponent) {\n            return;\n        }\n        this.eWrapper.classList.toggle('ag-picker-has-focus', focused);\n    }\n    hidePicker() {\n        if (this.hideCurrentPicker) {\n            this.hideCurrentPicker();\n        }\n    }\n    setInputWidth(width) {\n        setElementWidth(this.eWrapper, width);\n        return this;\n    }\n    getFocusableElement() {\n        return this.eWrapper;\n    }\n    setPickerGap(gap) {\n        this.pickerGap = gap;\n        return this;\n    }\n    setPickerMinWidth(width) {\n        if (typeof width === 'number') {\n            width = `${width}px`;\n        }\n        this.minPickerWidth = width == null ? undefined : width;\n        return this;\n    }\n    setPickerMaxWidth(width) {\n        if (typeof width === 'number') {\n            width = `${width}px`;\n        }\n        this.maxPickerWidth = width == null ? undefined : width;\n        return this;\n    }\n    setPickerMaxHeight(height) {\n        if (typeof height === 'number') {\n            height = `${height}px`;\n        }\n        this.maxPickerHeight = height == null ? undefined : height;\n        return this;\n    }\n    destroy() {\n        this.hidePicker();\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('popupService')\n], AgPickerField.prototype, \"popupService\", void 0);\n__decorate([\n    RefSelector('eLabel')\n], AgPickerField.prototype, \"eLabel\", void 0);\n__decorate([\n    RefSelector('eWrapper')\n], AgPickerField.prototype, \"eWrapper\", void 0);\n__decorate([\n    RefSelector('eDisplayField')\n], AgPickerField.prototype, \"eDisplayField\", void 0);\n__decorate([\n    RefSelector('eIcon')\n], AgPickerField.prototype, \"eIcon\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"./component.mjs\";\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { escapeString } from \"../utils/string.mjs\";\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { setAriaPosInSet, setAriaRole, setAriaSelected, setAriaSetSize } from '../utils/aria.mjs';\nimport { Events } from \"../eventKeys.mjs\";\nimport { isVisible } from \"../utils/dom.mjs\";\nexport class AgList extends Component {\n    constructor(cssIdentifier = 'default') {\n        super(/* html */ `<div class=\"ag-list ag-${cssIdentifier}-list\" role=\"listbox\"></div>`);\n        this.cssIdentifier = cssIdentifier;\n        this.options = [];\n        this.itemEls = [];\n    }\n    init() {\n        this.addManagedListener(this.getGui(), 'keydown', this.handleKeyDown.bind(this));\n    }\n    handleKeyDown(e) {\n        const key = e.key;\n        switch (key) {\n            case KeyCode.ENTER:\n                if (!this.highlightedEl) {\n                    this.setValue(this.getValue());\n                }\n                else {\n                    const pos = this.itemEls.indexOf(this.highlightedEl);\n                    this.setValueByIndex(pos);\n                }\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                const isDown = key === KeyCode.DOWN;\n                let itemToHighlight;\n                e.preventDefault();\n                if (!this.highlightedEl) {\n                    itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];\n                }\n                else {\n                    const currentIdx = this.itemEls.indexOf(this.highlightedEl);\n                    let nextPos = currentIdx + (isDown ? 1 : -1);\n                    nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);\n                    itemToHighlight = this.itemEls[nextPos];\n                }\n                this.highlightItem(itemToHighlight);\n                break;\n        }\n    }\n    addOptions(listOptions) {\n        listOptions.forEach(listOption => this.addOption(listOption));\n        return this;\n    }\n    addOption(listOption) {\n        const { value, text } = listOption;\n        const sanitisedText = escapeString(text || value);\n        this.options.push({ value, text: sanitisedText });\n        this.renderOption(value, sanitisedText);\n        this.updateIndices();\n        return this;\n    }\n    updateIndices() {\n        const options = this.getGui().querySelectorAll('.ag-list-item');\n        options.forEach((option, idx) => {\n            setAriaPosInSet(option, idx + 1);\n            setAriaSetSize(option, options.length);\n        });\n    }\n    renderOption(value, text) {\n        const itemEl = document.createElement('div');\n        setAriaRole(itemEl, 'option');\n        itemEl.classList.add('ag-list-item', `ag-${this.cssIdentifier}-list-item`);\n        itemEl.innerHTML = `<span>${text}</span>`;\n        itemEl.tabIndex = -1;\n        this.itemEls.push(itemEl);\n        this.addManagedListener(itemEl, 'mouseover', () => this.highlightItem(itemEl));\n        this.addManagedListener(itemEl, 'mouseleave', () => this.clearHighlighted());\n        this.addManagedListener(itemEl, 'click', () => this.setValue(value));\n        this.getGui().appendChild(itemEl);\n    }\n    setValue(value, silent) {\n        if (this.value === value) {\n            this.fireItemSelected();\n            return this;\n        }\n        if (value == null) {\n            this.reset();\n            return this;\n        }\n        const idx = this.options.findIndex(option => option.value === value);\n        if (idx !== -1) {\n            const option = this.options[idx];\n            this.value = option.value;\n            this.displayValue = option.text != null ? option.text : option.value;\n            this.highlightItem(this.itemEls[idx]);\n            if (!silent) {\n                this.fireChangeEvent();\n            }\n        }\n        return this;\n    }\n    setValueByIndex(idx) {\n        return this.setValue(this.options[idx].value);\n    }\n    getValue() {\n        return this.value;\n    }\n    getDisplayValue() {\n        return this.displayValue;\n    }\n    refreshHighlighted() {\n        this.clearHighlighted();\n        const idx = this.options.findIndex(option => option.value === this.value);\n        if (idx !== -1) {\n            this.highlightItem(this.itemEls[idx]);\n        }\n    }\n    reset() {\n        this.value = null;\n        this.displayValue = null;\n        this.clearHighlighted();\n        this.fireChangeEvent();\n    }\n    highlightItem(el) {\n        if (!isVisible(el)) {\n            return;\n        }\n        this.clearHighlighted();\n        this.highlightedEl = el;\n        this.highlightedEl.classList.add(AgList.ACTIVE_CLASS);\n        setAriaSelected(this.highlightedEl, true);\n        this.highlightedEl.focus();\n    }\n    clearHighlighted() {\n        if (!this.highlightedEl || !isVisible(this.highlightedEl)) {\n            return;\n        }\n        this.highlightedEl.classList.remove(AgList.ACTIVE_CLASS);\n        setAriaSelected(this.highlightedEl, false);\n        this.highlightedEl = null;\n    }\n    fireChangeEvent() {\n        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n        this.fireItemSelected();\n    }\n    fireItemSelected() {\n        this.dispatchEvent({ type: AgList.EVENT_ITEM_SELECTED });\n    }\n}\nAgList.EVENT_ITEM_SELECTED = 'selectedItem';\nAgList.ACTIVE_CLASS = 'ag-active-item';\n__decorate([\n    PostConstruct\n], AgList.prototype, \"init\", null);\n","import { AgPickerField } from \"./agPickerField.mjs\";\nimport { AgList } from \"./agList.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { KeyCode } from \"../constants/keyCode.mjs\";\nimport { setAriaControls } from \"../utils/aria.mjs\";\nexport class AgSelect extends AgPickerField {\n    constructor(config) {\n        super(Object.assign({ pickerAriaLabelKey: 'ariaLabelSelectField', pickerAriaLabelValue: 'Select Field', pickerType: 'ag-list', className: 'ag-select', pickerIcon: 'smallDown', ariaRole: 'combobox' }, config));\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.createListComponent();\n        this.eWrapper.tabIndex = this.gridOptionsService.get('tabIndex');\n    }\n    createListComponent() {\n        this.listComponent = this.createBean(new AgList('select'));\n        this.listComponent.setParentComponent(this);\n        const eListAriaEl = this.listComponent.getAriaElement();\n        const listId = `ag-select-list-${this.listComponent.getCompId()}`;\n        eListAriaEl.setAttribute('id', listId);\n        setAriaControls(this.getAriaElement(), eListAriaEl);\n        this.listComponent.addGuiEventListener('keydown', (e) => {\n            if (e.key === KeyCode.TAB) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                this.getGui().dispatchEvent(new KeyboardEvent('keydown', {\n                    key: e.key,\n                    shiftKey: e.shiftKey,\n                    ctrlKey: e.ctrlKey,\n                    bubbles: true\n                }));\n            }\n            ;\n        });\n        this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, () => {\n            this.hidePicker();\n            this.dispatchEvent({ type: AgSelect.EVENT_ITEM_SELECTED });\n        });\n        this.listComponent.addManagedListener(this.listComponent, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            if (!this.listComponent) {\n                return;\n            }\n            this.setValue(this.listComponent.getValue(), false, true);\n            this.hidePicker();\n        });\n    }\n    createPickerComponent() {\n        // do not create the picker every time to save state\n        return this.listComponent;\n    }\n    showPicker() {\n        if (!this.listComponent) {\n            return;\n        }\n        super.showPicker();\n        this.listComponent.refreshHighlighted();\n    }\n    addOptions(options) {\n        options.forEach(option => this.addOption(option));\n        return this;\n    }\n    addOption(option) {\n        this.listComponent.addOption(option);\n        return this;\n    }\n    setValue(value, silent, fromPicker) {\n        if (this.value === value || !this.listComponent) {\n            return this;\n        }\n        if (!fromPicker) {\n            this.listComponent.setValue(value, true);\n        }\n        const newValue = this.listComponent.getValue();\n        if (newValue === this.getValue()) {\n            return this;\n        }\n        this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();\n        return super.setValue(value, silent);\n    }\n    destroy() {\n        if (this.listComponent) {\n            this.destroyBean(this.listComponent);\n            this.listComponent = undefined;\n        }\n        super.destroy();\n    }\n}\nAgSelect.EVENT_ITEM_SELECTED = 'selectedItem';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RefSelector } from './componentAnnotations.mjs';\nimport { AgAbstractField } from './agAbstractField.mjs';\nimport { setDisabled, setElementWidth, addOrRemoveAttribute } from '../utils/dom.mjs';\nimport { setAriaLabel } from '../utils/aria.mjs';\nexport class AgAbstractInputField extends AgAbstractField {\n    constructor(config, className, inputType = 'text', displayFieldTag = 'input') {\n        super(config, /* html */ `\n            <div role=\"presentation\">\n                <div ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <${displayFieldTag} ref=\"eInput\" class=\"ag-input-field-input\"></${displayFieldTag}>\n                </div>\n            </div>`, className);\n        this.inputType = inputType;\n        this.displayFieldTag = displayFieldTag;\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.setInputType();\n        this.eLabel.classList.add(`${this.className}-label`);\n        this.eWrapper.classList.add(`${this.className}-input-wrapper`);\n        this.eInput.classList.add(`${this.className}-input`);\n        this.addCssClass('ag-input-field');\n        this.eInput.id = this.eInput.id || `ag-${this.getCompId()}-input`;\n        const { width, value } = this.config;\n        if (width != null) {\n            this.setWidth(width);\n        }\n        if (value != null) {\n            this.setValue(value);\n        }\n        this.addInputListeners();\n        this.activateTabIndex([this.eInput]);\n    }\n    addInputListeners() {\n        this.addManagedListener(this.eInput, 'input', e => this.setValue(e.target.value));\n    }\n    setInputType() {\n        if (this.displayFieldTag === 'input') {\n            this.eInput.setAttribute('type', this.inputType);\n        }\n    }\n    getInputElement() {\n        return this.eInput;\n    }\n    setInputWidth(width) {\n        setElementWidth(this.eWrapper, width);\n        return this;\n    }\n    setInputName(name) {\n        this.getInputElement().setAttribute('name', name);\n        return this;\n    }\n    getFocusableElement() {\n        return this.eInput;\n    }\n    setMaxLength(length) {\n        const eInput = this.eInput;\n        eInput.maxLength = length;\n        return this;\n    }\n    setInputPlaceholder(placeholder) {\n        addOrRemoveAttribute(this.eInput, 'placeholder', placeholder);\n        return this;\n    }\n    setInputAriaLabel(label) {\n        setAriaLabel(this.eInput, label);\n        this.refreshAriaLabelledBy();\n        return this;\n    }\n    setDisabled(disabled) {\n        setDisabled(this.eInput, disabled);\n        return super.setDisabled(disabled);\n    }\n    setAutoComplete(value) {\n        if (value === true) {\n            // Remove the autocomplete attribute if the value is explicitly set to true\n            // to allow the default browser autocomplete/autofill behaviour.\n            addOrRemoveAttribute(this.eInput, 'autocomplete', null);\n        }\n        else {\n            // When a string is provided, use it as the value of the autocomplete attribute.\n            // This enables users to specify how they want to the browser to handle the autocomplete on the input, as per spec:\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n            const autoCompleteValue = typeof value === 'string' ? value : 'off';\n            addOrRemoveAttribute(this.eInput, 'autocomplete', autoCompleteValue);\n        }\n        return this;\n    }\n}\n__decorate([\n    RefSelector('eLabel')\n], AgAbstractInputField.prototype, \"eLabel\", void 0);\n__decorate([\n    RefSelector('eWrapper')\n], AgAbstractInputField.prototype, \"eWrapper\", void 0);\n__decorate([\n    RefSelector('eInput')\n], AgAbstractInputField.prototype, \"eInput\", void 0);\n","import { Events } from \"../events.mjs\";\nimport { AgAbstractInputField } from './agAbstractInputField.mjs';\nexport class AgCheckbox extends AgAbstractInputField {\n    constructor(config, className = 'ag-checkbox', inputType = 'checkbox') {\n        super(config, className, inputType);\n        this.labelAlignment = 'right';\n        this.selected = false;\n        this.readOnly = false;\n        this.passive = false;\n    }\n    addInputListeners() {\n        this.addManagedListener(this.eInput, 'click', this.onCheckboxClick.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.toggle.bind(this));\n    }\n    getNextValue() {\n        return this.selected === undefined ? true : !this.selected;\n    }\n    setPassive(passive) {\n        this.passive = passive;\n    }\n    isReadOnly() {\n        return this.readOnly;\n    }\n    setReadOnly(readOnly) {\n        this.eWrapper.classList.toggle('ag-disabled', readOnly);\n        this.eInput.disabled = readOnly;\n        this.readOnly = readOnly;\n    }\n    setDisabled(disabled) {\n        this.eWrapper.classList.toggle('ag-disabled', disabled);\n        return super.setDisabled(disabled);\n    }\n    toggle() {\n        if (this.eInput.disabled) {\n            return;\n        }\n        const previousValue = this.isSelected();\n        const nextValue = this.getNextValue();\n        if (this.passive) {\n            this.dispatchChange(nextValue, previousValue);\n        }\n        else {\n            this.setValue(nextValue);\n        }\n    }\n    getValue() {\n        return this.isSelected();\n    }\n    setValue(value, silent) {\n        this.refreshSelectedClass(value);\n        this.setSelected(value, silent);\n        return this;\n    }\n    setName(name) {\n        const input = this.getInputElement();\n        input.name = name;\n        return this;\n    }\n    isSelected() {\n        return this.selected;\n    }\n    setSelected(selected, silent) {\n        if (this.isSelected() === selected) {\n            return;\n        }\n        this.previousValue = this.isSelected();\n        selected = this.selected = typeof selected === 'boolean' ? selected : undefined;\n        this.eInput.checked = selected;\n        this.eInput.indeterminate = selected === undefined;\n        if (!silent) {\n            this.dispatchChange(this.selected, this.previousValue);\n        }\n    }\n    dispatchChange(selected, previousValue, event) {\n        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED, selected, previousValue, event });\n        const input = this.getInputElement();\n        const checkboxChangedEvent = {\n            type: Events.EVENT_CHECKBOX_CHANGED,\n            id: input.id,\n            name: input.name,\n            selected,\n            previousValue\n        };\n        this.eventService.dispatchEvent(checkboxChangedEvent);\n    }\n    onCheckboxClick(e) {\n        if (this.passive || this.eInput.disabled) {\n            return;\n        }\n        const previousValue = this.isSelected();\n        const selected = this.selected = e.target.checked;\n        this.refreshSelectedClass(selected);\n        this.dispatchChange(selected, previousValue, e);\n    }\n    refreshSelectedClass(value) {\n        this.eWrapper.classList.toggle('ag-checked', value === true);\n        this.eWrapper.classList.toggle('ag-indeterminate', value == null);\n    }\n}\n","import { AgCheckbox } from './agCheckbox.mjs';\nimport { Events } from '../eventKeys.mjs';\nexport class AgRadioButton extends AgCheckbox {\n    constructor(config) {\n        super(config, 'ag-radio-button', 'radio');\n    }\n    isSelected() {\n        return this.eInput.checked;\n    }\n    toggle() {\n        if (this.eInput.disabled) {\n            return;\n        }\n        // do not allow an active radio button to be deselected\n        if (!this.isSelected()) {\n            this.setValue(true);\n        }\n    }\n    addInputListeners() {\n        super.addInputListeners();\n        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));\n    }\n    /**\n     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.\n     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input\n     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,\n     * not deselected, so we need to use our own event.\n     */\n    onChange(event) {\n        if (event.selected &&\n            event.name &&\n            this.eInput.name &&\n            this.eInput.name === event.name &&\n            event.id &&\n            this.eInput.id !== event.id) {\n            this.setValue(false, true);\n        }\n    }\n}\n","import { OptionsFactory } from './optionsFactory.mjs';\nimport { ProvidedFilter } from './providedFilter.mjs';\nimport { AgPromise } from '../../utils/index.mjs';\nimport { AgSelect } from '../../widgets/agSelect.mjs';\nimport { AgRadioButton } from '../../widgets/agRadioButton.mjs';\nimport { areEqual } from '../../utils/array.mjs';\nimport { setDisplayed, setDisabled, removeFromParent } from '../../utils/dom.mjs';\nimport { FILTER_LOCALE_TEXT } from '../filterLocaleText.mjs';\nimport { Component } from '../../widgets/component.mjs';\nimport { AgAbstractInputField } from '../../widgets/agAbstractInputField.mjs';\nimport { warnOnce, isFunction } from '../../utils/function.mjs';\nexport class SimpleFilterModelFormatter {\n    constructor(localeService, optionsFactory, valueFormatter) {\n        this.localeService = localeService;\n        this.optionsFactory = optionsFactory;\n        this.valueFormatter = valueFormatter;\n    }\n    // used by:\n    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n    getModelAsString(model) {\n        if (!model) {\n            return null;\n        }\n        const isCombined = model.operator != null;\n        const translate = this.localeService.getLocaleTextFunc();\n        if (isCombined) {\n            const combinedModel = model;\n            let { conditions } = combinedModel;\n            if (!conditions) {\n                const { condition1, condition2 } = combinedModel;\n                conditions = [condition1, condition2];\n            }\n            const customOptions = conditions.map(condition => this.getModelAsString(condition));\n            const joinOperatorTranslateKey = combinedModel.operator === 'AND' ? 'andCondition' : 'orCondition';\n            return customOptions.join(` ${translate(joinOperatorTranslateKey, FILTER_LOCALE_TEXT[joinOperatorTranslateKey])} `);\n        }\n        else if (model.type === SimpleFilter.BLANK || model.type === SimpleFilter.NOT_BLANK) {\n            return translate(model.type, model.type);\n        }\n        else {\n            const condition = model;\n            const customOption = this.optionsFactory.getCustomOption(condition.type);\n            // For custom filter options we display the Name of the filter instead\n            // of displaying the `from` value, as it wouldn't be relevant\n            const { displayKey, displayName, numberOfInputs } = customOption || {};\n            if (displayKey && displayName && numberOfInputs === 0) {\n                translate(displayKey, displayName);\n                return displayName;\n            }\n            return this.conditionToString(condition, customOption);\n        }\n    }\n    updateParams(params) {\n        this.optionsFactory = params.optionsFactory;\n    }\n    formatValue(value) {\n        var _a;\n        return this.valueFormatter ? ((_a = this.valueFormatter(value !== null && value !== void 0 ? value : null)) !== null && _a !== void 0 ? _a : '') : String(value);\n    }\n}\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n * @param E type of UI element used for collecting user-input\n */\nexport class SimpleFilter extends ProvidedFilter {\n    constructor() {\n        super(...arguments);\n        this.eTypes = [];\n        this.eJoinOperatorPanels = [];\n        this.eJoinOperatorsAnd = [];\n        this.eJoinOperatorsOr = [];\n        this.eConditionBodies = [];\n        this.listener = () => this.onUiChanged();\n        this.lastUiCompletePosition = null;\n        this.joinOperatorId = 0;\n    }\n    getNumberOfInputs(type) {\n        const customOpts = this.optionsFactory.getCustomOption(type);\n        if (customOpts) {\n            const { numberOfInputs } = customOpts;\n            return numberOfInputs != null ? numberOfInputs : 1;\n        }\n        const zeroInputTypes = [\n            SimpleFilter.EMPTY, SimpleFilter.NOT_BLANK, SimpleFilter.BLANK,\n        ];\n        if (type && zeroInputTypes.indexOf(type) >= 0) {\n            return 0;\n        }\n        else if (type === SimpleFilter.IN_RANGE) {\n            return 2;\n        }\n        return 1;\n    }\n    // floating filter calls this when user applies filter from floating filter\n    onFloatingFilterChanged(type, value) {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n    setTypeFromFloatingFilter(type) {\n        this.eTypes.forEach((eType, position) => {\n            if (position === 0) {\n                eType.setValue(type, true);\n            }\n            else {\n                eType.setValue(this.optionsFactory.getDefaultOption(), true);\n            }\n        });\n    }\n    getModelFromUi() {\n        const conditions = this.getUiCompleteConditions();\n        if (conditions.length === 0) {\n            return null;\n        }\n        if (this.maxNumConditions > 1 && conditions.length > 1) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: conditions[0],\n                condition2: conditions[1],\n                conditions\n            };\n        }\n        return conditions[0];\n    }\n    getConditionTypes() {\n        return this.eTypes.map(eType => eType.getValue());\n    }\n    getConditionType(position) {\n        return this.eTypes[position].getValue();\n    }\n    getJoinOperator() {\n        if (this.eJoinOperatorsOr.length === 0) {\n            return this.defaultJoinOperator;\n        }\n        return this.eJoinOperatorsOr[0].getValue() === true ? 'OR' : 'AND';\n    }\n    areModelsEqual(a, b) {\n        // both are missing\n        if (!a && !b) {\n            return true;\n        }\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) {\n            return false;\n        }\n        // one is combined, the other is not\n        const aIsSimple = !a.operator;\n        const bIsSimple = !b.operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) {\n            return false;\n        }\n        let res;\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a;\n            const bSimple = b;\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        }\n        else {\n            const aCombined = a;\n            const bCombined = b;\n            res = aCombined.operator === bCombined.operator\n                && areEqual(aCombined.conditions, bCombined.conditions, (aModel, bModel) => this.areSimpleModelsEqual(aModel, bModel));\n        }\n        return res;\n    }\n    shouldRefresh(newParams) {\n        var _a, _b, _c;\n        const model = this.getModel();\n        const conditions = model ? ((_a = model.conditions) !== null && _a !== void 0 ? _a : [model]) : null;\n        // Do Not refresh when one of the existing condition options is not in new options list\n        const newOptionsList = (_c = (_b = newParams.filterOptions) === null || _b === void 0 ? void 0 : _b.map(option => typeof option === 'string' ? option : option.displayKey)) !== null && _c !== void 0 ? _c : this.getDefaultFilterOptions();\n        const allConditionsExistInNewOptionsList = !conditions || conditions.every(condition => newOptionsList.find(option => option === condition.type) !== undefined);\n        if (!allConditionsExistInNewOptionsList) {\n            return false;\n        }\n        // Check number of conditions vs maxNumConditions\n        if (typeof newParams.maxNumConditions === 'number' && conditions && conditions.length > newParams.maxNumConditions) {\n            return false;\n        }\n        return true;\n    }\n    refresh(newParams) {\n        if (!this.shouldRefresh(newParams)) {\n            return false;\n        }\n        const parentRefreshed = super.refresh(newParams);\n        if (!parentRefreshed) {\n            return false;\n        }\n        this.setParams(newParams);\n        this.removeConditionsAndOperators(0);\n        this.createOption();\n        this.setModel(this.getModel());\n        return true;\n    }\n    setModelIntoUi(model) {\n        const isCombined = model.operator;\n        if (isCombined) {\n            let combinedModel = model;\n            if (!combinedModel.conditions) {\n                combinedModel.conditions = [\n                    combinedModel.condition1,\n                    combinedModel.condition2\n                ];\n            }\n            const numConditions = this.validateAndUpdateConditions(combinedModel.conditions);\n            const numPrevConditions = this.getNumConditions();\n            if (numConditions < numPrevConditions) {\n                this.removeConditionsAndOperators(numConditions);\n            }\n            else if (numConditions > numPrevConditions) {\n                for (let i = numPrevConditions; i < numConditions; i++) {\n                    this.createJoinOperatorPanel();\n                    this.createOption();\n                }\n            }\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorsAnd.forEach(eJoinOperatorAnd => eJoinOperatorAnd.setValue(!orChecked, true));\n            this.eJoinOperatorsOr.forEach(eJoinOperatorOr => eJoinOperatorOr.setValue(orChecked, true));\n            combinedModel.conditions.forEach((condition, position) => {\n                this.eTypes[position].setValue(condition.type, true);\n                this.setConditionIntoUi(condition, position);\n            });\n        }\n        else {\n            const simpleModel = model;\n            if (this.getNumConditions() > 1) {\n                this.removeConditionsAndOperators(1);\n            }\n            this.eTypes[0].setValue(simpleModel.type, true);\n            this.setConditionIntoUi(simpleModel, 0);\n        }\n        this.lastUiCompletePosition = this.getNumConditions() - 1;\n        this.createMissingConditionsAndOperators();\n        this.onUiChanged();\n        return AgPromise.resolve();\n    }\n    validateAndUpdateConditions(conditions) {\n        let numConditions = conditions.length;\n        if (numConditions > this.maxNumConditions) {\n            conditions.splice(this.maxNumConditions);\n            warnOnce('Filter Model contains more conditions than \"filterParams.maxNumConditions\". Additional conditions have been ignored.');\n            numConditions = this.maxNumConditions;\n        }\n        return numConditions;\n    }\n    doesFilterPass(params) {\n        var _a;\n        const model = this.getModel();\n        if (model == null) {\n            return true;\n        }\n        const { operator } = model;\n        const models = [];\n        if (operator) {\n            const combinedModel = model;\n            models.push(...((_a = combinedModel.conditions) !== null && _a !== void 0 ? _a : []));\n        }\n        else {\n            models.push(model);\n        }\n        const combineFunction = operator && operator === 'OR' ? 'some' : 'every';\n        return models[combineFunction](m => this.individualConditionPasses(params, m));\n    }\n    setParams(params) {\n        super.setParams(params);\n        this.setNumConditions(params);\n        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);\n        this.filterPlaceholder = params.filterPlaceholder;\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n        this.createFilterListOptions();\n        this.createOption();\n        this.createMissingConditionsAndOperators();\n        if (this.isReadOnly()) {\n            // only do this when read only (so no other focusable elements), otherwise the tab order breaks\n            // as the tabbed layout managed focus feature will focus the body when it shouldn't\n            this.eFilterBody.setAttribute('tabindex', '-1');\n        }\n    }\n    setNumConditions(params) {\n        var _a, _b;\n        if (params.suppressAndOrCondition != null) {\n            warnOnce('Since v29.2 \"filterParams.suppressAndOrCondition\" is deprecated. Use \"filterParams.maxNumConditions = 1\" instead.');\n        }\n        if (params.alwaysShowBothConditions != null) {\n            warnOnce('Since v29.2 \"filterParams.alwaysShowBothConditions\" is deprecated. Use \"filterParams.numAlwaysVisibleConditions = 2\" instead.');\n        }\n        this.maxNumConditions = (_a = params.maxNumConditions) !== null && _a !== void 0 ? _a : (params.suppressAndOrCondition ? 1 : 2);\n        if (this.maxNumConditions < 1) {\n            warnOnce('\"filterParams.maxNumConditions\" must be greater than or equal to zero.');\n            this.maxNumConditions = 1;\n        }\n        this.numAlwaysVisibleConditions = (_b = params.numAlwaysVisibleConditions) !== null && _b !== void 0 ? _b : (params.alwaysShowBothConditions ? 2 : 1);\n        if (this.numAlwaysVisibleConditions < 1) {\n            warnOnce('\"filterParams.numAlwaysVisibleConditions\" must be greater than or equal to zero.');\n            this.numAlwaysVisibleConditions = 1;\n        }\n        if (this.numAlwaysVisibleConditions > this.maxNumConditions) {\n            warnOnce('\"filterParams.numAlwaysVisibleConditions\" cannot be greater than \"filterParams.maxNumConditions\".');\n            this.numAlwaysVisibleConditions = this.maxNumConditions;\n        }\n    }\n    createOption() {\n        const eType = this.createManagedBean(new AgSelect());\n        this.eTypes.push(eType);\n        eType.addCssClass('ag-filter-select');\n        this.eFilterBody.appendChild(eType.getGui());\n        const eConditionBody = this.createValueElement();\n        this.eConditionBodies.push(eConditionBody);\n        this.eFilterBody.appendChild(eConditionBody);\n        this.putOptionsIntoDropdown(eType);\n        this.resetType(eType);\n        const position = this.getNumConditions() - 1;\n        this.forEachPositionInput(position, (element) => this.resetInput(element));\n        this.addChangedListeners(eType, position);\n    }\n    createJoinOperatorPanel() {\n        const eJoinOperatorPanel = document.createElement('div');\n        this.eJoinOperatorPanels.push(eJoinOperatorPanel);\n        eJoinOperatorPanel.classList.add('ag-filter-condition');\n        const eJoinOperatorAnd = this.createJoinOperator(this.eJoinOperatorsAnd, eJoinOperatorPanel, 'and');\n        const eJoinOperatorOr = this.createJoinOperator(this.eJoinOperatorsOr, eJoinOperatorPanel, 'or');\n        this.eFilterBody.appendChild(eJoinOperatorPanel);\n        const index = this.eJoinOperatorPanels.length - 1;\n        const uniqueGroupId = this.joinOperatorId++;\n        this.resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId);\n        this.resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId);\n        if (!this.isReadOnly()) {\n            eJoinOperatorAnd.onValueChange(this.listener);\n            eJoinOperatorOr.onValueChange(this.listener);\n        }\n    }\n    createJoinOperator(eJoinOperators, eJoinOperatorPanel, andOr) {\n        const eJoinOperator = this.createManagedBean(new AgRadioButton());\n        eJoinOperators.push(eJoinOperator);\n        eJoinOperator.addCssClass('ag-filter-condition-operator');\n        eJoinOperator.addCssClass(`ag-filter-condition-operator-${andOr}`);\n        eJoinOperatorPanel.appendChild(eJoinOperator.getGui());\n        return eJoinOperator;\n    }\n    getDefaultJoinOperator(defaultJoinOperator) {\n        return defaultJoinOperator === 'AND' || defaultJoinOperator === 'OR' ? defaultJoinOperator : 'AND';\n    }\n    createFilterListOptions() {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n        this.filterListOptions = filterOptions.map(option => typeof option === 'string' ?\n            this.createBoilerplateListOption(option) :\n            this.createCustomListOption(option));\n    }\n    putOptionsIntoDropdown(eType) {\n        // Add specified options to condition drop-down.\n        this.filterListOptions.forEach(listOption => {\n            eType.addOption(listOption);\n        });\n        // Make drop-downs read-only if there is only one option.\n        eType.setDisabled(this.filterListOptions.length <= 1);\n    }\n    createBoilerplateListOption(option) {\n        return { value: option, text: this.translate(option) };\n    }\n    createCustomListOption(option) {\n        const { displayKey } = option;\n        const customOption = this.optionsFactory.getCustomOption(option.displayKey);\n        return {\n            value: displayKey,\n            text: customOption ?\n                this.localeService.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) :\n                this.translate(displayKey),\n        };\n    }\n    /**\n     * @deprecated As of v29.2 filters can have more than two conditions. Check `colDef.filterParams.maxNumConditions` instead.\n     */\n    isAllowTwoConditions() {\n        return this.maxNumConditions >= 2;\n    }\n    createBodyTemplate() {\n        // created dynamically\n        return '';\n    }\n    getCssIdentifier() {\n        return 'simple-filter';\n    }\n    updateUiVisibility() {\n        const joinOperator = this.getJoinOperator();\n        this.updateNumConditions();\n        // from here, the number of elements in all the collections is correct, so can just update the values/statuses\n        this.updateConditionStatusesAndValues(this.lastUiCompletePosition, joinOperator);\n    }\n    updateNumConditions() {\n        var _a;\n        // Collection sizes are already correct if updated via API, so only need to handle UI updates here\n        let lastUiCompletePosition = -1;\n        let areAllConditionsUiComplete = true;\n        for (let position = 0; position < this.getNumConditions(); position++) {\n            if (this.isConditionUiComplete(position)) {\n                lastUiCompletePosition = position;\n            }\n            else {\n                areAllConditionsUiComplete = false;\n            }\n        }\n        if (this.shouldAddNewConditionAtEnd(areAllConditionsUiComplete)) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n        }\n        else {\n            const activePosition = (_a = this.lastUiCompletePosition) !== null && _a !== void 0 ? _a : this.getNumConditions() - 2;\n            if (lastUiCompletePosition < activePosition) {\n                // remove any incomplete conditions at the end, excluding the active position\n                this.removeConditionsAndOperators(activePosition + 1);\n                const removeStartPosition = lastUiCompletePosition + 1;\n                const numConditionsToRemove = activePosition - removeStartPosition;\n                if (numConditionsToRemove > 0) {\n                    this.removeConditionsAndOperators(removeStartPosition, numConditionsToRemove);\n                }\n                this.createMissingConditionsAndOperators();\n            }\n        }\n        this.lastUiCompletePosition = lastUiCompletePosition;\n    }\n    updateConditionStatusesAndValues(lastUiCompletePosition, joinOperator) {\n        this.eTypes.forEach((eType, position) => {\n            const disabled = this.isConditionDisabled(position, lastUiCompletePosition);\n            eType.setDisabled(disabled || this.filterListOptions.length <= 1);\n            if (position === 1) {\n                setDisabled(this.eJoinOperatorPanels[0], disabled);\n                this.eJoinOperatorsAnd[0].setDisabled(disabled);\n                this.eJoinOperatorsOr[0].setDisabled(disabled);\n            }\n        });\n        this.eConditionBodies.forEach((element, index) => {\n            setDisplayed(element, this.isConditionBodyVisible(index));\n        });\n        const orChecked = (joinOperator !== null && joinOperator !== void 0 ? joinOperator : this.getJoinOperator()) === 'OR';\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd, index) => {\n            eJoinOperatorAnd.setValue(!orChecked, true);\n        });\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr, index) => {\n            eJoinOperatorOr.setValue(orChecked, true);\n        });\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            this.setElementDisplayed(element, index < numberOfInputs);\n            this.setElementDisabled(element, this.isConditionDisabled(position, lastUiCompletePosition));\n        });\n        this.resetPlaceholder();\n    }\n    shouldAddNewConditionAtEnd(areAllConditionsUiComplete) {\n        return areAllConditionsUiComplete && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();\n    }\n    removeConditionsAndOperators(startPosition, deleteCount) {\n        if (startPosition >= this.getNumConditions()) {\n            return;\n        }\n        this.removeComponents(this.eTypes, startPosition, deleteCount);\n        this.removeElements(this.eConditionBodies, startPosition, deleteCount);\n        this.removeValueElements(startPosition, deleteCount);\n        const joinOperatorIndex = Math.max(startPosition - 1, 0);\n        this.removeElements(this.eJoinOperatorPanels, joinOperatorIndex, deleteCount);\n        this.removeComponents(this.eJoinOperatorsAnd, joinOperatorIndex, deleteCount);\n        this.removeComponents(this.eJoinOperatorsOr, joinOperatorIndex, deleteCount);\n    }\n    removeElements(elements, startPosition, deleteCount) {\n        const removedElements = this.removeItems(elements, startPosition, deleteCount);\n        removedElements.forEach(element => removeFromParent(element));\n    }\n    removeComponents(components, startPosition, deleteCount) {\n        const removedComponents = this.removeItems(components, startPosition, deleteCount);\n        removedComponents.forEach(comp => {\n            removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n    removeItems(items, startPosition, deleteCount) {\n        return deleteCount == null ? items.splice(startPosition) : items.splice(startPosition, deleteCount);\n    }\n    afterGuiAttached(params) {\n        super.afterGuiAttached(params);\n        this.resetPlaceholder();\n        if (!(params === null || params === void 0 ? void 0 : params.suppressFocus)) {\n            if (this.isReadOnly()) {\n                // something needs focus otherwise keyboard navigation breaks, so focus the filter body\n                this.eFilterBody.focus();\n            }\n            else {\n                const firstInput = this.getInputs(0)[0];\n                if (!firstInput) {\n                    return;\n                }\n                if (firstInput instanceof AgAbstractInputField) {\n                    firstInput.getInputElement().focus();\n                }\n            }\n        }\n    }\n    afterGuiDetached() {\n        super.afterGuiDetached();\n        const appliedModel = this.getModel();\n        // Reset temporary UI state that was applied to the DOM but not committed to the model\n        this.resetUiToActiveModel(appliedModel);\n        // remove incomplete positions\n        let lastUiCompletePosition = -1;\n        // as we remove incomplete positions, the last UI complete position will change\n        let updatedLastUiCompletePosition = -1;\n        let conditionsRemoved = false;\n        const joinOperator = this.getJoinOperator();\n        for (let position = this.getNumConditions() - 1; position >= 0; position--) {\n            if (this.isConditionUiComplete(position)) {\n                if (lastUiCompletePosition === -1) {\n                    lastUiCompletePosition = position;\n                    updatedLastUiCompletePosition = position;\n                }\n            }\n            else {\n                const shouldRemovePositionAtEnd = position >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(position - 1);\n                const positionBeforeLastUiCompletePosition = position < lastUiCompletePosition;\n                if (shouldRemovePositionAtEnd || positionBeforeLastUiCompletePosition) {\n                    this.removeConditionsAndOperators(position, 1);\n                    conditionsRemoved = true;\n                    if (positionBeforeLastUiCompletePosition) {\n                        updatedLastUiCompletePosition--;\n                    }\n                }\n            }\n        }\n        let shouldUpdateConditionStatusesAndValues = false;\n        if (this.getNumConditions() < this.numAlwaysVisibleConditions) {\n            // if conditions have been removed, need to recreate new ones at the end up to the number required\n            this.createMissingConditionsAndOperators();\n            shouldUpdateConditionStatusesAndValues = true;\n        }\n        if (this.shouldAddNewConditionAtEnd(updatedLastUiCompletePosition === this.getNumConditions() - 1)) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n            shouldUpdateConditionStatusesAndValues = true;\n        }\n        if (shouldUpdateConditionStatusesAndValues) {\n            this.updateConditionStatusesAndValues(updatedLastUiCompletePosition, joinOperator);\n        }\n        if (conditionsRemoved) {\n            this.updateJoinOperatorsDisabled();\n        }\n        this.lastUiCompletePosition = updatedLastUiCompletePosition;\n    }\n    getPlaceholderText(defaultPlaceholder, position) {\n        let placeholder = this.translate(defaultPlaceholder);\n        if (isFunction(this.filterPlaceholder)) {\n            const filterPlaceholderFn = this.filterPlaceholder;\n            const filterOptionKey = this.eTypes[position].getValue();\n            const filterOption = this.translate(filterOptionKey);\n            placeholder = filterPlaceholderFn({\n                filterOptionKey,\n                filterOption,\n                placeholder\n            });\n        }\n        else if (typeof this.filterPlaceholder === 'string') {\n            placeholder = this.filterPlaceholder;\n        }\n        return placeholder;\n    }\n    // allow sub-classes to reset HTML placeholders after UI update.\n    resetPlaceholder() {\n        const globalTranslate = this.localeService.getLocaleTextFunc();\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            if (!(element instanceof AgAbstractInputField)) {\n                return;\n            }\n            const placeholder = index === 0 && numberOfInputs > 1 ? 'inRangeStart' :\n                index === 0 ? 'filterOoo' :\n                    'inRangeEnd';\n            const ariaLabel = index === 0 && numberOfInputs > 1 ? globalTranslate('ariaFilterFromValue', 'Filter from value') :\n                index === 0 ? globalTranslate('ariaFilterValue', 'Filter Value') :\n                    globalTranslate('ariaFilterToValue', 'Filter to Value');\n            element.setInputPlaceholder(this.getPlaceholderText(placeholder, position));\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n    setElementValue(element, value, fromFloatingFilter) {\n        if (element instanceof AgAbstractInputField) {\n            element.setValue(value != null ? String(value) : null, true);\n        }\n    }\n    setElementDisplayed(element, displayed) {\n        if (element instanceof Component) {\n            setDisplayed(element.getGui(), displayed);\n        }\n    }\n    setElementDisabled(element, disabled) {\n        if (element instanceof Component) {\n            setDisabled(element.getGui(), disabled);\n        }\n    }\n    attachElementOnChange(element, listener) {\n        if (element instanceof AgAbstractInputField) {\n            element.onValueChange(listener);\n        }\n    }\n    forEachInput(cb) {\n        this.getConditionTypes().forEach((type, position) => {\n            this.forEachPositionTypeInput(position, type, cb);\n        });\n    }\n    forEachPositionInput(position, cb) {\n        const type = this.getConditionType(position);\n        this.forEachPositionTypeInput(position, type, cb);\n    }\n    forEachPositionTypeInput(position, type, cb) {\n        const numberOfInputs = this.getNumberOfInputs(type);\n        const inputs = this.getInputs(position);\n        for (let index = 0; index < inputs.length; index++) {\n            const input = inputs[index];\n            if (input != null) {\n                cb(input, index, position, numberOfInputs);\n            }\n        }\n    }\n    isConditionDisabled(position, lastUiCompletePosition) {\n        if (this.isReadOnly()) {\n            return true;\n        } // Read-only mode trumps everything.\n        if (position === 0) {\n            return false;\n        } // Position 0 should typically be editable.\n        // Only allow editing of a 2nd or later condition if the previous condition is complete and no subsequent conditions are complete.\n        return position > lastUiCompletePosition + 1;\n    }\n    isConditionBodyVisible(position) {\n        // Check that the condition needs inputs.\n        const type = this.getConditionType(position);\n        const numberOfInputs = this.getNumberOfInputs(type);\n        return numberOfInputs > 0;\n    }\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    isConditionUiComplete(position) {\n        if (position >= this.getNumConditions()) {\n            return false;\n        } // Condition doesn't exist.\n        const type = this.getConditionType(position);\n        if (type === SimpleFilter.EMPTY) {\n            return false;\n        }\n        if (this.getValues(position).some(v => v == null)) {\n            return false;\n        }\n        return true;\n    }\n    getNumConditions() {\n        return this.eTypes.length;\n    }\n    getUiCompleteConditions() {\n        const conditions = [];\n        for (let position = 0; position < this.getNumConditions(); position++) {\n            if (this.isConditionUiComplete(position)) {\n                conditions.push(this.createCondition(position));\n            }\n        }\n        return conditions;\n    }\n    createMissingConditionsAndOperators() {\n        if (this.isReadOnly()) {\n            return;\n        } // don't show incomplete conditions when read only\n        for (let i = this.getNumConditions(); i < this.numAlwaysVisibleConditions; i++) {\n            this.createJoinOperatorPanel();\n            this.createOption();\n        }\n    }\n    resetUiToDefaults(silent) {\n        this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions);\n        this.eTypes.forEach(eType => this.resetType(eType));\n        this.eJoinOperatorsAnd.forEach((eJoinOperatorAnd, index) => this.resetJoinOperatorAnd(eJoinOperatorAnd, index, this.joinOperatorId + index));\n        this.eJoinOperatorsOr.forEach((eJoinOperatorOr, index) => this.resetJoinOperatorOr(eJoinOperatorOr, index, this.joinOperatorId + index));\n        this.joinOperatorId++;\n        this.forEachInput((element) => this.resetInput(element));\n        this.resetPlaceholder();\n        this.createMissingConditionsAndOperators();\n        this.lastUiCompletePosition = null;\n        if (!silent) {\n            this.onUiChanged();\n        }\n        return AgPromise.resolve();\n    }\n    resetType(eType) {\n        const translate = this.localeService.getLocaleTextFunc();\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\n        eType\n            .setValue(this.optionsFactory.getDefaultOption(), true)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);\n    }\n    resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId) {\n        this.resetJoinOperator(eJoinOperatorAnd, index, this.isDefaultOperator('AND'), this.translate('andCondition'), uniqueGroupId);\n    }\n    resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId) {\n        this.resetJoinOperator(eJoinOperatorOr, index, this.isDefaultOperator('OR'), this.translate('orCondition'), uniqueGroupId);\n    }\n    resetJoinOperator(eJoinOperator, index, value, label, uniqueGroupId) {\n        this.updateJoinOperatorDisabled(eJoinOperator\n            .setValue(value, true)\n            .setName(`ag-simple-filter-and-or-${this.getCompId()}-${uniqueGroupId}`)\n            .setLabel(label), index);\n    }\n    updateJoinOperatorsDisabled() {\n        this.eJoinOperatorsAnd.forEach((eJoinOperator, index) => this.updateJoinOperatorDisabled(eJoinOperator, index));\n        this.eJoinOperatorsOr.forEach((eJoinOperator, index) => this.updateJoinOperatorDisabled(eJoinOperator, index));\n    }\n    updateJoinOperatorDisabled(eJoinOperator, index) {\n        eJoinOperator.setDisabled(this.isReadOnly() || index > 0);\n    }\n    resetInput(element) {\n        this.setElementValue(element, null);\n        this.setElementDisabled(element, this.isReadOnly());\n    }\n    // puts model values into the UI\n    setConditionIntoUi(model, position) {\n        const values = this.mapValuesFromModel(model);\n        this.forEachInput((element, index, elPosition, _) => {\n            if (elPosition !== position) {\n                return;\n            }\n            this.setElementValue(element, values[index] != null ? values[index] : null);\n        });\n    }\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    setValueFromFloatingFilter(value) {\n        this.forEachInput((element, index, position, _) => {\n            this.setElementValue(element, index === 0 && position === 0 ? value : null, true);\n        });\n    }\n    isDefaultOperator(operator) {\n        return operator === this.defaultJoinOperator;\n    }\n    addChangedListeners(eType, position) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        eType.onValueChange(this.listener);\n        this.forEachPositionInput(position, (element) => {\n            this.attachElementOnChange(element, this.listener);\n        });\n    }\n    /** returns true if the row passes the said condition */\n    individualConditionPasses(params, filterModel) {\n        const cellValue = this.getCellValue(params.node);\n        const values = this.mapValuesFromModel(filterModel);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);\n        const customFilterResult = this.evaluateCustomFilter(customFilterOption, values, cellValue);\n        if (customFilterResult != null) {\n            return customFilterResult;\n        }\n        if (cellValue == null) {\n            return this.evaluateNullValue(filterModel.type);\n        }\n        return this.evaluateNonNullValue(values, cellValue, filterModel, params);\n    }\n    evaluateCustomFilter(customFilterOption, values, cellValue) {\n        if (customFilterOption == null) {\n            return;\n        }\n        const { predicate } = customFilterOption;\n        // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n        if (predicate != null && !values.some(v => v == null)) {\n            return predicate(values, cellValue);\n        }\n        // No custom filter invocation, indicate that to the caller.\n        return;\n    }\n    isBlank(cellValue) {\n        return cellValue == null ||\n            (typeof cellValue === 'string' && cellValue.trim().length === 0);\n    }\n    hasInvalidInputs() {\n        return false;\n    }\n}\nSimpleFilter.EMPTY = 'empty';\nSimpleFilter.BLANK = 'blank';\nSimpleFilter.NOT_BLANK = 'notBlank';\nSimpleFilter.EQUALS = 'equals';\nSimpleFilter.NOT_EQUAL = 'notEqual';\nSimpleFilter.LESS_THAN = 'lessThan';\nSimpleFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';\nSimpleFilter.GREATER_THAN = 'greaterThan';\nSimpleFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';\nSimpleFilter.IN_RANGE = 'inRange';\nSimpleFilter.CONTAINS = 'contains';\nSimpleFilter.NOT_CONTAINS = 'notContains';\nSimpleFilter.STARTS_WITH = 'startsWith';\nSimpleFilter.ENDS_WITH = 'endsWith';\n","import { SimpleFilter } from \"./simpleFilter.mjs\";\nexport class ScalarFilter extends SimpleFilter {\n    setParams(params) {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n    }\n    evaluateNullValue(filterType) {\n        switch (filterType) {\n            case ScalarFilter.EQUALS:\n            case ScalarFilter.NOT_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInEquals) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.GREATER_THAN:\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.LESS_THAN:\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInLessThan) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.IN_RANGE:\n                if (this.scalarFilterParams.includeBlanksInRange) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.BLANK:\n                return true;\n            case ScalarFilter.NOT_BLANK:\n                return false;\n        }\n        return false;\n    }\n    evaluateNonNullValue(values, cellValue, filterModel) {\n        const comparator = this.comparator();\n        const compareResult = values[0] != null ? comparator(values[0], cellValue) : 0;\n        switch (filterModel.type) {\n            case ScalarFilter.EQUALS:\n                return compareResult === 0;\n            case ScalarFilter.NOT_EQUAL:\n                return compareResult !== 0;\n            case ScalarFilter.GREATER_THAN:\n                return compareResult > 0;\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                return compareResult >= 0;\n            case ScalarFilter.LESS_THAN:\n                return compareResult < 0;\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                return compareResult <= 0;\n            case ScalarFilter.IN_RANGE: {\n                const compareToResult = comparator(values[1], cellValue);\n                return this.scalarFilterParams.inRangeInclusive ?\n                    compareResult >= 0 && compareToResult <= 0 :\n                    compareResult > 0 && compareToResult < 0;\n            }\n            case ScalarFilter.BLANK:\n                return this.isBlank(cellValue);\n            case ScalarFilter.NOT_BLANK:\n                return !this.isBlank(cellValue);\n            default:\n                console.warn('AG Grid: Unexpected type of filter \"' + filterModel.type + '\", it looks like the filter was configured with incorrect Filter Options');\n                return true;\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from '../../../context/context.mjs';\nimport { DateCompWrapper } from './dateCompWrapper.mjs';\nimport { SimpleFilter, SimpleFilterModelFormatter } from '../simpleFilter.mjs';\nimport { ScalarFilter } from '../scalarFilter.mjs';\nimport { serialiseDate, parseDateTimeFromString, dateToFormattedString } from '../../../utils/date.mjs';\nconst DEFAULT_MIN_YEAR = 1000;\nconst DEFAULT_MAX_YEAR = Infinity;\nexport class DateFilterModelFormatter extends SimpleFilterModelFormatter {\n    constructor(dateFilterParams, localeService, optionsFactory) {\n        super(localeService, optionsFactory);\n        this.dateFilterParams = dateFilterParams;\n    }\n    conditionToString(condition, options) {\n        const { type } = condition;\n        const { numberOfInputs } = options || {};\n        const isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n        const dateFrom = parseDateTimeFromString(condition.dateFrom);\n        const dateTo = parseDateTimeFromString(condition.dateTo);\n        const format = this.dateFilterParams.inRangeFloatingFilterDateFormat;\n        if (isRange) {\n            const formattedFrom = dateFrom !== null ? dateToFormattedString(dateFrom, format) : 'null';\n            const formattedTo = dateTo !== null ? dateToFormattedString(dateTo, format) : 'null';\n            return `${formattedFrom}-${formattedTo}`;\n        }\n        if (dateFrom != null) {\n            return dateToFormattedString(dateFrom, format);\n        }\n        // cater for when the type doesn't need a value\n        return `${type}`;\n    }\n    updateParams(params) {\n        super.updateParams(params);\n        this.dateFilterParams = params.dateFilterParams;\n    }\n}\nexport class DateFilter extends ScalarFilter {\n    constructor() {\n        super('dateFilter');\n        this.eConditionPanelsFrom = [];\n        this.eConditionPanelsTo = [];\n        this.dateConditionFromComps = [];\n        this.dateConditionToComps = [];\n        this.minValidYear = DEFAULT_MIN_YEAR;\n        this.maxValidYear = DEFAULT_MAX_YEAR;\n        this.minValidDate = null;\n        this.maxValidDate = null;\n    }\n    afterGuiAttached(params) {\n        super.afterGuiAttached(params);\n        this.dateConditionFromComps[0].afterGuiAttached(params);\n    }\n    mapValuesFromModel(filterModel) {\n        // unlike the other filters, we do two things here:\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\n        //    are in different locations in Date and Number filter models)\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\n        //\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\n        //       the model. When we recreate the date again here, it's without a timezone.\n        const { dateFrom, dateTo, type } = filterModel || {};\n        return [\n            dateFrom && parseDateTimeFromString(dateFrom) || null,\n            dateTo && parseDateTimeFromString(dateTo) || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n    comparator() {\n        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);\n    }\n    defaultComparator(filterDate, cellValue) {\n        // The default comparator assumes that the cellValue is a date\n        const cellAsDate = cellValue;\n        if (cellValue == null || cellAsDate < filterDate) {\n            return -1;\n        }\n        if (cellAsDate > filterDate) {\n            return 1;\n        }\n        return 0;\n    }\n    setParams(params) {\n        this.dateFilterParams = params;\n        super.setParams(params);\n        const yearParser = (param, fallback) => {\n            if (params[param] != null) {\n                if (!isNaN(params[param])) {\n                    return params[param] == null ? fallback : Number(params[param]);\n                }\n                else {\n                    console.warn(`AG Grid: DateFilter ${param} is not a number`);\n                }\n            }\n            return fallback;\n        };\n        this.minValidYear = yearParser('minValidYear', DEFAULT_MIN_YEAR);\n        this.maxValidYear = yearParser('maxValidYear', DEFAULT_MAX_YEAR);\n        if (this.minValidYear > this.maxValidYear) {\n            console.warn(`AG Grid: DateFilter minValidYear should be <= maxValidYear`);\n        }\n        if (params.minValidDate) {\n            this.minValidDate = params.minValidDate instanceof Date ? params.minValidDate : parseDateTimeFromString(params.minValidDate);\n        }\n        else {\n            this.minValidDate = null;\n        }\n        if (params.maxValidDate) {\n            this.maxValidDate = params.maxValidDate instanceof Date ? params.maxValidDate : parseDateTimeFromString(params.maxValidDate);\n        }\n        else {\n            this.maxValidDate = null;\n        }\n        if (this.minValidDate && this.maxValidDate && this.minValidDate > this.maxValidDate) {\n            console.warn(`AG Grid: DateFilter minValidDate should be <= maxValidDate`);\n        }\n        this.filterModelFormatter = new DateFilterModelFormatter(this.dateFilterParams, this.localeService, this.optionsFactory);\n    }\n    createDateCompWrapper(element) {\n        const dateCompWrapper = new DateCompWrapper(this.getContext(), this.userComponentFactory, {\n            onDateChanged: () => this.onUiChanged(),\n            filterParams: this.dateFilterParams\n        }, element);\n        this.addDestroyFunc(() => dateCompWrapper.destroy());\n        return dateCompWrapper;\n    }\n    setElementValue(element, value) {\n        element.setDate(value);\n    }\n    setElementDisplayed(element, displayed) {\n        element.setDisplayed(displayed);\n    }\n    setElementDisabled(element, disabled) {\n        element.setDisabled(disabled);\n    }\n    getDefaultFilterOptions() {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n    createValueElement() {\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        this.createFromToElement(eCondition, this.eConditionPanelsFrom, this.dateConditionFromComps, 'from');\n        this.createFromToElement(eCondition, this.eConditionPanelsTo, this.dateConditionToComps, 'to');\n        return eCondition;\n    }\n    createFromToElement(eCondition, eConditionPanels, dateConditionComps, fromTo) {\n        const eConditionPanel = document.createElement('div');\n        eConditionPanel.classList.add(`ag-filter-${fromTo}`);\n        eConditionPanel.classList.add(`ag-filter-date-${fromTo}`);\n        eConditionPanels.push(eConditionPanel);\n        eCondition.appendChild(eConditionPanel);\n        dateConditionComps.push(this.createDateCompWrapper(eConditionPanel));\n    }\n    removeValueElements(startPosition, deleteCount) {\n        this.removeDateComps(this.dateConditionFromComps, startPosition, deleteCount);\n        this.removeDateComps(this.dateConditionToComps, startPosition, deleteCount);\n        this.removeItems(this.eConditionPanelsFrom, startPosition, deleteCount);\n        this.removeItems(this.eConditionPanelsTo, startPosition, deleteCount);\n    }\n    removeDateComps(components, startPosition, deleteCount) {\n        const removedComponents = this.removeItems(components, startPosition, deleteCount);\n        removedComponents.forEach(comp => comp.destroy());\n    }\n    isValidDateValue(value) {\n        if (value === null) {\n            return false;\n        }\n        if (this.minValidDate) {\n            if (value < this.minValidDate) {\n                return false;\n            }\n        }\n        else {\n            if (value.getUTCFullYear() < this.minValidYear) {\n                return false;\n            }\n        }\n        if (this.maxValidDate) {\n            if (value > this.maxValidDate) {\n                return false;\n            }\n        }\n        else {\n            if (value.getUTCFullYear() > this.maxValidYear) {\n                return false;\n            }\n        }\n        return true;\n    }\n    ;\n    isConditionUiComplete(position) {\n        if (!super.isConditionUiComplete(position)) {\n            return false;\n        }\n        let valid = true;\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (elPosition !== position || !valid || index >= numberOfInputs) {\n                return;\n            }\n            valid = valid && this.isValidDateValue(element.getDate());\n        });\n        return valid;\n    }\n    areSimpleModelsEqual(aSimple, bSimple) {\n        return aSimple.dateFrom === bSimple.dateFrom\n            && aSimple.dateTo === bSimple.dateTo\n            && aSimple.type === bSimple.type;\n    }\n    getFilterType() {\n        return 'date';\n    }\n    createCondition(position) {\n        const type = this.getConditionType(position);\n        const model = {};\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.dateFrom = serialiseDate(values[0]);\n        }\n        if (values.length > 1) {\n            model.dateTo = serialiseDate(values[1]);\n        }\n        return Object.assign({ dateFrom: null, dateTo: null, filterType: this.getFilterType(), type }, model);\n    }\n    resetPlaceholder() {\n        const globalTranslate = this.localeService.getLocaleTextFunc();\n        const placeholder = this.translate('dateFormatOoo');\n        const ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');\n        this.forEachInput((element) => {\n            element.setInputPlaceholder(placeholder);\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n    getInputs(position) {\n        if (position >= this.dateConditionFromComps.length) {\n            return [null, null];\n        }\n        return [this.dateConditionFromComps[position], this.dateConditionToComps[position]];\n    }\n    getValues(position) {\n        const result = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                result.push(element.getDate());\n            }\n        });\n        return result;\n    }\n    translate(key) {\n        if (key === ScalarFilter.LESS_THAN) {\n            return super.translate('before');\n        }\n        if (key === ScalarFilter.GREATER_THAN) {\n            return super.translate('after');\n        }\n        return super.translate(key);\n    }\n    getModelAsString(model) {\n        var _a;\n        return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : '';\n    }\n}\nDateFilter.DEFAULT_FILTER_OPTIONS = [\n    ScalarFilter.EQUALS,\n    ScalarFilter.NOT_EQUAL,\n    ScalarFilter.LESS_THAN,\n    ScalarFilter.GREATER_THAN,\n    ScalarFilter.IN_RANGE,\n    ScalarFilter.BLANK,\n    ScalarFilter.NOT_BLANK,\n];\n__decorate([\n    Autowired('userComponentFactory')\n], DateFilter.prototype, \"userComponentFactory\", void 0);\n","import { Component } from '../../../widgets/component.mjs';\nimport { SimpleFilter } from '../../provided/simpleFilter.mjs';\nimport { OptionsFactory } from '../../provided/optionsFactory.mjs';\nexport class SimpleFloatingFilter extends Component {\n    getDefaultDebounceMs() {\n        return 0;\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    isEventFromFloatingFilter(event) {\n        return event && event.afterFloatingFilter;\n    }\n    isEventFromDataChange(event) {\n        return event === null || event === void 0 ? void 0 : event.afterDataChange;\n    }\n    getLastType() {\n        return this.lastType;\n    }\n    isReadOnly() {\n        return this.readOnly;\n    }\n    setLastTypeFromModel(model) {\n        // if no model provided by the parent filter use default\n        if (!model) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n            return;\n        }\n        const isCombined = model.operator;\n        let condition;\n        if (isCombined) {\n            const combinedModel = model;\n            condition = combinedModel.conditions[0];\n        }\n        else {\n            condition = model;\n        }\n        this.lastType = condition.type;\n    }\n    canWeEditAfterModelFromParentFilter(model) {\n        if (!model) {\n            // if no model, then we can edit as long as the lastType is something we can edit, as this\n            // is the type we will provide to the parent filter if the user decides to use the floating filter.\n            return this.isTypeEditable(this.lastType);\n        }\n        // never allow editing if the filter is combined (ie has two parts)\n        const isCombined = model.operator;\n        if (isCombined) {\n            return false;\n        }\n        const simpleModel = model;\n        return this.isTypeEditable(simpleModel.type);\n    }\n    init(params) {\n        this.setSimpleParams(params, false);\n    }\n    setSimpleParams(params, update = true) {\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());\n        // Initial call\n        if (!update) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n        }\n        // readOnly is a property of ProvidedFilterParams - we need to find a better (type-safe)\n        // way to support reading this in the future.\n        this.readOnly = !!params.filterParams.readOnly;\n        // we are editable if:\n        // 1) there is a type (user has configured filter wrong if not type)\n        //  AND\n        // 2) the default type is not 'inRange'\n        const editable = this.isTypeEditable(this.lastType);\n        this.setEditable(editable);\n    }\n    onParamsUpdated(params) {\n        this.setSimpleParams(params);\n    }\n    doesFilterHaveSingleInput(filterType) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        const { numberOfInputs } = customFilterOption || {};\n        return numberOfInputs == null || numberOfInputs == 1;\n    }\n    isTypeEditable(type) {\n        const uneditableTypes = [\n            SimpleFilter.IN_RANGE, SimpleFilter.EMPTY, SimpleFilter.BLANK, SimpleFilter.NOT_BLANK,\n        ];\n        return !!type &&\n            !this.isReadOnly() &&\n            this.doesFilterHaveSingleInput(type) &&\n            uneditableTypes.indexOf(type) < 0;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DateFilter, DateFilterModelFormatter } from './dateFilter.mjs';\nimport { Autowired } from '../../../context/context.mjs';\nimport { DateCompWrapper } from './dateCompWrapper.mjs';\nimport { RefSelector } from '../../../widgets/componentAnnotations.mjs';\nimport { SimpleFloatingFilter } from '../../floating/provided/simpleFloatingFilter.mjs';\nimport { ProvidedFilter } from '../providedFilter.mjs';\nimport { setDisplayed } from '../../../utils/dom.mjs';\nimport { parseDateTimeFromString, serialiseDate } from '../../../utils/date.mjs';\nimport { debounce } from '../../../utils/function.mjs';\nexport class DateFloatingFilter extends SimpleFloatingFilter {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div ref=\"eDateWrapper\" style=\"display: flex;\"></div>\n            </div>`);\n    }\n    getDefaultFilterOptions() {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n    init(params) {\n        super.init(params);\n        this.params = params;\n        this.filterParams = params.filterParams;\n        this.createDateComponent();\n        this.filterModelFormatter = new DateFilterModelFormatter(this.filterParams, this.localeService, this.optionsFactory);\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eReadOnlyText\n            .setDisabled(true)\n            .setInputAriaLabel(translate('ariaDateFilterInput', 'Date Filter Input'));\n    }\n    onParamsUpdated(params) {\n        super.onParamsUpdated(params);\n        this.params = params;\n        this.filterParams = params.filterParams;\n        this.updateDateComponent();\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory, dateFilterParams: this.filterParams });\n        this.updateCompOnModelChange(params.currentParentModel());\n    }\n    updateCompOnModelChange(model) {\n        // Update the read-only text field\n        const allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model);\n        this.setEditable(allowEditing);\n        if (allowEditing) {\n            if (model) {\n                const dateModel = model;\n                this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));\n            }\n            else {\n                this.dateComp.setDate(null);\n            }\n            this.eReadOnlyText.setValue('');\n        }\n        else {\n            this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(model));\n            this.dateComp.setDate(null);\n        }\n    }\n    setEditable(editable) {\n        setDisplayed(this.eDateWrapper, editable);\n        setDisplayed(this.eReadOnlyText.getGui(), !editable);\n    }\n    onParentModelChanged(model, event) {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing.\n        // This is similar for data changes, which don't affect provided date floating filters\n        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {\n            return;\n        }\n        super.setLastTypeFromModel(model);\n        this.updateCompOnModelChange(model);\n    }\n    onDateChanged() {\n        const filterValueDate = this.dateComp.getDate();\n        const filterValueText = serialiseDate(filterValueDate);\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                const date = parseDateTimeFromString(filterValueText);\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, date);\n            }\n        });\n    }\n    getDateComponentParams() {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n        return {\n            onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),\n            filterParams: this.params.column.getColDef().filterParams\n        };\n    }\n    createDateComponent() {\n        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, this.getDateComponentParams(), this.eDateWrapper);\n        this.addDestroyFunc(() => this.dateComp.destroy());\n    }\n    updateDateComponent() {\n        const params = this.getDateComponentParams();\n        const { api, columnApi, context } = this.gridOptionsService;\n        params.api = api;\n        params.columnApi = columnApi;\n        params.context = context;\n        this.dateComp.updateParams(params);\n    }\n    getFilterModelFormatter() {\n        return this.filterModelFormatter;\n    }\n}\n__decorate([\n    Autowired('userComponentFactory')\n], DateFloatingFilter.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    RefSelector('eReadOnlyText')\n], DateFloatingFilter.prototype, \"eReadOnlyText\", void 0);\n__decorate([\n    RefSelector('eDateWrapper')\n], DateFloatingFilter.prototype, \"eDateWrapper\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '../../../widgets/component.mjs';\nimport { RefSelector } from '../../../widgets/componentAnnotations.mjs';\nimport { serialiseDate, parseDateTimeFromString, dateToFormattedString } from '../../../utils/date.mjs';\nimport { getSafariVersion, isBrowserChrome, isBrowserFirefox, isBrowserSafari } from '../../../utils/browser.mjs';\nimport { warnOnce } from '../../../utils/function.mjs';\nexport class DefaultDateComponent extends Component {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>`);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    init(params) {\n        this.params = params;\n        this.setParams(params);\n        const eDocument = this.gridOptionsService.getDocument();\n        const inputElement = this.eDateInput.getInputElement();\n        // ensures that the input element is focussed when a clear button is clicked,\n        // unless using safari as there is no clear button and focus does not work properly\n        this.addManagedListener(inputElement, 'mousedown', () => {\n            if (this.eDateInput.isDisabled() || this.usingSafariDatePicker) {\n                return;\n            }\n            inputElement.focus();\n        });\n        this.addManagedListener(inputElement, 'input', e => {\n            if (e.target !== eDocument.activeElement) {\n                return;\n            }\n            if (this.eDateInput.isDisabled()) {\n                return;\n            }\n            this.params.onDateChanged();\n        });\n    }\n    setParams(params) {\n        const inputElement = this.eDateInput.getInputElement();\n        const shouldUseBrowserDatePicker = this.shouldUseBrowserDatePicker(params);\n        this.usingSafariDatePicker = shouldUseBrowserDatePicker && isBrowserSafari();\n        inputElement.type = shouldUseBrowserDatePicker ? 'date' : 'text';\n        const { minValidYear, maxValidYear, minValidDate, maxValidDate, } = params.filterParams || {};\n        if (minValidDate && minValidYear) {\n            warnOnce('DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.');\n        }\n        if (maxValidDate && maxValidYear) {\n            warnOnce('DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.');\n        }\n        if (minValidDate && maxValidDate) {\n            const [parsedMinValidDate, parsedMaxValidDate] = [minValidDate, maxValidDate]\n                .map(v => v instanceof Date ? v : parseDateTimeFromString(v));\n            if (parsedMinValidDate && parsedMaxValidDate && parsedMinValidDate.getTime() > parsedMaxValidDate.getTime()) {\n                warnOnce('DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.');\n            }\n        }\n        if (minValidDate) {\n            if (minValidDate instanceof Date) {\n                inputElement.min = dateToFormattedString(minValidDate);\n            }\n            else {\n                inputElement.min = minValidDate;\n            }\n        }\n        else {\n            if (minValidYear) {\n                inputElement.min = `${minValidYear}-01-01`;\n            }\n        }\n        if (maxValidDate) {\n            if (maxValidDate instanceof Date) {\n                inputElement.max = dateToFormattedString(maxValidDate);\n            }\n            else {\n                inputElement.max = maxValidDate;\n            }\n        }\n        else {\n            if (maxValidYear) {\n                inputElement.max = `${maxValidYear}-12-31`;\n            }\n        }\n    }\n    onParamsUpdated(params) {\n        this.params = params;\n        this.setParams(params);\n    }\n    getDate() {\n        return parseDateTimeFromString(this.eDateInput.getValue());\n    }\n    setDate(date) {\n        this.eDateInput.setValue(serialiseDate(date, false));\n    }\n    setInputPlaceholder(placeholder) {\n        this.eDateInput.setInputPlaceholder(placeholder);\n    }\n    setDisabled(disabled) {\n        this.eDateInput.setDisabled(disabled);\n    }\n    afterGuiAttached(params) {\n        if (!params || !params.suppressFocus) {\n            this.eDateInput.getInputElement().focus();\n        }\n    }\n    shouldUseBrowserDatePicker(params) {\n        if (params.filterParams && params.filterParams.browserDatePicker != null) {\n            return params.filterParams.browserDatePicker;\n        }\n        return isBrowserChrome() || isBrowserFirefox() || (isBrowserSafari() && getSafariVersion() >= 14.1);\n    }\n}\n__decorate([\n    RefSelector('eDateInput')\n], DefaultDateComponent.prototype, \"eDateInput\", void 0);\n","import { AgAbstractInputField } from './agAbstractInputField.mjs';\nimport { exists } from '../utils/generic.mjs';\nimport { isEventFromPrintableCharacter } from '../utils/keyboard.mjs';\nexport class AgInputTextField extends AgAbstractInputField {\n    constructor(config, className = 'ag-text-field', inputType = 'text') {\n        super(config, className, inputType);\n    }\n    postConstruct() {\n        super.postConstruct();\n        if (this.config.allowedCharPattern) {\n            this.preventDisallowedCharacters();\n        }\n    }\n    setValue(value, silent) {\n        // update the input before we call super.setValue, so it's updated before the value changed event is fired\n        if (this.eInput.value !== value) {\n            this.eInput.value = exists(value) ? value : '';\n        }\n        return super.setValue(value, silent);\n    }\n    /** Used to set an initial value into the input without necessarily setting `this.value` or triggering events (e.g. to set an invalid value) */\n    setStartValue(value) {\n        this.setValue(value, true);\n    }\n    preventDisallowedCharacters() {\n        const pattern = new RegExp(`[${this.config.allowedCharPattern}]`);\n        const preventCharacters = (event) => {\n            if (!isEventFromPrintableCharacter(event)) {\n                return;\n            }\n            if (event.key && !pattern.test(event.key)) {\n                event.preventDefault();\n            }\n        };\n        this.addManagedListener(this.eInput, 'keydown', preventCharacters);\n        this.addManagedListener(this.eInput, 'paste', (e) => {\n            var _a;\n            const text = (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text');\n            if (text && text.split('').some((c) => !pattern.test(c))) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n","import { AgInputTextField } from \"./agInputTextField.mjs\";\nimport { addOrRemoveAttribute } from '../utils/dom.mjs';\nimport { exists } from \"../utils/generic.mjs\";\nexport class AgInputNumberField extends AgInputTextField {\n    constructor(config) {\n        super(config, 'ag-number-field', 'number');\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.addManagedListener(this.eInput, 'blur', () => {\n            const floatedValue = parseFloat(this.eInput.value);\n            const value = isNaN(floatedValue) ? '' : this.normalizeValue(floatedValue.toString());\n            if (this.value !== value) {\n                this.setValue(value);\n            }\n        });\n        this.addManagedListener(this.eInput, 'wheel', this.onWheel.bind(this));\n        this.eInput.step = 'any';\n    }\n    onWheel(e) {\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\n        if (document.activeElement === this.eInput) {\n            e.preventDefault();\n        }\n    }\n    normalizeValue(value) {\n        if (value === '') {\n            return '';\n        }\n        if (this.precision != null) {\n            value = this.adjustPrecision(value);\n        }\n        const val = parseFloat(value);\n        if (this.min != null && val < this.min) {\n            value = this.min.toString();\n        }\n        else if (this.max != null && val > this.max) {\n            value = this.max.toString();\n        }\n        return value;\n    }\n    adjustPrecision(value, isScientificNotation) {\n        if (this.precision == null) {\n            return value;\n        }\n        if (isScientificNotation) {\n            const floatString = parseFloat(value).toFixed(this.precision);\n            return parseFloat(floatString).toString();\n        }\n        // can't use toFixed here because we don't want to round up\n        const parts = String(value).split('.');\n        if (parts.length > 1) {\n            if (parts[1].length <= this.precision) {\n                return value;\n            }\n            else if (this.precision > 0) {\n                return `${parts[0]}.${parts[1].slice(0, this.precision)}`;\n            }\n        }\n        return parts[0];\n    }\n    setMin(min) {\n        if (this.min === min) {\n            return this;\n        }\n        this.min = min;\n        addOrRemoveAttribute(this.eInput, 'min', min);\n        return this;\n    }\n    setMax(max) {\n        if (this.max === max) {\n            return this;\n        }\n        this.max = max;\n        addOrRemoveAttribute(this.eInput, 'max', max);\n        return this;\n    }\n    setPrecision(precision) {\n        this.precision = precision;\n        return this;\n    }\n    setStep(step) {\n        if (this.step === step) {\n            return this;\n        }\n        this.step = step;\n        addOrRemoveAttribute(this.eInput, 'step', step);\n        return this;\n    }\n    setValue(value, silent) {\n        return this.setValueOrInputValue(v => super.setValue(v, silent), () => this, value);\n    }\n    setStartValue(value) {\n        return this.setValueOrInputValue(v => super.setValue(v, true), v => { this.eInput.value = v; }, value);\n    }\n    setValueOrInputValue(setValueFunc, setInputValueOnlyFunc, value) {\n        if (exists(value)) {\n            // need to maintain the scientific notation format whilst typing (e.g. 1e10)\n            let setInputValueOnly = this.isScientificNotation(value);\n            if (setInputValueOnly && this.eInput.validity.valid) {\n                return setValueFunc(value);\n            }\n            if (!setInputValueOnly) {\n                value = this.adjustPrecision(value);\n                const normalizedValue = this.normalizeValue(value);\n                // outside of valid range\n                setInputValueOnly = value != normalizedValue;\n            }\n            if (setInputValueOnly) {\n                return setInputValueOnlyFunc(value);\n            }\n        }\n        return setValueFunc(value);\n    }\n    getValue() {\n        if (!this.eInput.validity.valid) {\n            return undefined;\n        }\n        const inputValue = this.eInput.value;\n        if (this.isScientificNotation(inputValue)) {\n            return this.adjustPrecision(inputValue, true);\n        }\n        return super.getValue();\n    }\n    isScientificNotation(value) {\n        return typeof value === 'string' && value.includes('e');\n    }\n}\n","import { SimpleFilter, SimpleFilterModelFormatter } from '../simpleFilter.mjs';\nimport { ScalarFilter } from '../scalarFilter.mjs';\nimport { makeNull } from '../../../utils/generic.mjs';\nimport { AgInputTextField } from '../../../widgets/agInputTextField.mjs';\nimport { setAriaRole } from '../../../utils/aria.mjs';\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField.mjs';\nexport class NumberFilterModelFormatter extends SimpleFilterModelFormatter {\n    conditionToString(condition, options) {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n        if (isRange) {\n            return `${this.formatValue(condition.filter)}-${this.formatValue(condition.filterTo)}`;\n        }\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return this.formatValue(condition.filter);\n        }\n        return `${condition.type}`;\n    }\n}\nexport function getAllowedCharPattern(filterParams) {\n    const { allowedCharPattern } = filterParams !== null && filterParams !== void 0 ? filterParams : {};\n    return allowedCharPattern !== null && allowedCharPattern !== void 0 ? allowedCharPattern : null;\n}\nexport class NumberFilter extends ScalarFilter {\n    constructor() {\n        super('numberFilter');\n        this.eValuesFrom = [];\n        this.eValuesTo = [];\n    }\n    refresh(params) {\n        if (this.numberFilterParams.allowedCharPattern !== params.allowedCharPattern) {\n            return false;\n        }\n        return super.refresh(params);\n    }\n    mapValuesFromModel(filterModel) {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            this.processValue(filter),\n            this.processValue(filterTo),\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n    getDefaultDebounceMs() {\n        return 500;\n    }\n    comparator() {\n        return (left, right) => {\n            if (left === right) {\n                return 0;\n            }\n            return left < right ? 1 : -1;\n        };\n    }\n    setParams(params) {\n        this.numberFilterParams = params;\n        super.setParams(params);\n        this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, this.numberFilterParams.numberFormatter);\n    }\n    getDefaultFilterOptions() {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n    setElementValue(element, value, fromFloatingFilter) {\n        // values from floating filter are directly from the input, not from the model\n        const valueToSet = !fromFloatingFilter && this.numberFilterParams.numberFormatter\n            ? this.numberFilterParams.numberFormatter(value !== null && value !== void 0 ? value : null)\n            : value;\n        super.setElementValue(element, valueToSet);\n    }\n    createValueElement() {\n        const allowedCharPattern = getAllowedCharPattern(this.numberFilterParams);\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        setAriaRole(eCondition, 'presentation');\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from', allowedCharPattern);\n        this.createFromToElement(eCondition, this.eValuesTo, 'to', allowedCharPattern);\n        return eCondition;\n    }\n    createFromToElement(eCondition, eValues, fromTo, allowedCharPattern) {\n        const eValue = this.createManagedBean(allowedCharPattern ? new AgInputTextField({ allowedCharPattern }) : new AgInputNumberField());\n        eValue.addCssClass(`ag-filter-${fromTo}`);\n        eValue.addCssClass('ag-filter-filter');\n        eValues.push(eValue);\n        eCondition.appendChild(eValue.getGui());\n    }\n    removeValueElements(startPosition, deleteCount) {\n        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);\n        this.removeComponents(this.eValuesTo, startPosition, deleteCount);\n    }\n    getValues(position) {\n        const result = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            if (index < numberOfInputs) {\n                result.push(this.processValue(this.stringToFloat(element.getValue())));\n            }\n        });\n        return result;\n    }\n    areSimpleModelsEqual(aSimple, bSimple) {\n        return aSimple.filter === bSimple.filter\n            && aSimple.filterTo === bSimple.filterTo\n            && aSimple.type === bSimple.type;\n    }\n    getFilterType() {\n        return 'number';\n    }\n    processValue(value) {\n        if (value == null) {\n            return null;\n        }\n        return isNaN(value) ? null : value;\n    }\n    stringToFloat(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        let filterText = makeNull(value);\n        if (filterText != null && filterText.trim() === '') {\n            filterText = null;\n        }\n        if (this.numberFilterParams.numberParser) {\n            return this.numberFilterParams.numberParser(filterText);\n        }\n        return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);\n    }\n    createCondition(position) {\n        const type = this.getConditionType(position);\n        const model = {\n            filterType: this.getFilterType(),\n            type\n        };\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n        return model;\n    }\n    getInputs(position) {\n        if (position >= this.eValuesFrom.length) {\n            return [null, null];\n        }\n        return [this.eValuesFrom[position], this.eValuesTo[position]];\n    }\n    getModelAsString(model) {\n        var _a;\n        return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : '';\n    }\n    hasInvalidInputs() {\n        let invalidInputs = false;\n        this.forEachInput(element => {\n            if (!element.getInputElement().validity.valid) {\n                invalidInputs = true;\n                return;\n            }\n        });\n        return invalidInputs;\n    }\n}\nNumberFilter.DEFAULT_FILTER_OPTIONS = [\n    ScalarFilter.EQUALS,\n    ScalarFilter.NOT_EQUAL,\n    ScalarFilter.GREATER_THAN,\n    ScalarFilter.GREATER_THAN_OR_EQUAL,\n    ScalarFilter.LESS_THAN,\n    ScalarFilter.LESS_THAN_OR_EQUAL,\n    ScalarFilter.IN_RANGE,\n    ScalarFilter.BLANK,\n    ScalarFilter.NOT_BLANK,\n];\n","import { SimpleFilter, SimpleFilterModelFormatter, } from '../simpleFilter.mjs';\nimport { AgInputTextField } from '../../../widgets/agInputTextField.mjs';\nimport { makeNull } from '../../../utils/generic.mjs';\nimport { _ } from '../../../utils/index.mjs';\nimport { setAriaRole } from '../../../utils/aria.mjs';\nexport class TextFilterModelFormatter extends SimpleFilterModelFormatter {\n    conditionToString(condition, options) {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n        if (isRange) {\n            return `${condition.filter}-${condition.filterTo}`;\n        }\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return `${condition.filter}`;\n        }\n        return `${condition.type}`;\n    }\n}\nexport class TextFilter extends SimpleFilter {\n    constructor() {\n        super('textFilter');\n        this.eValuesFrom = [];\n        this.eValuesTo = [];\n    }\n    static trimInput(value) {\n        const trimmedInput = value && value.trim();\n        // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n        return trimmedInput === '' ? value : trimmedInput;\n    }\n    getDefaultDebounceMs() {\n        return 500;\n    }\n    setParams(params) {\n        this.textFilterParams = params;\n        super.setParams(params);\n        this.matcher = this.getTextMatcher();\n        this.formatter = this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);\n    }\n    getTextMatcher() {\n        const legacyComparator = this.textFilterParams.textCustomComparator;\n        if (legacyComparator) {\n            _.warnOnce('textCustomComparator is deprecated, use textMatcher instead.');\n            return ({ filterOption, value, filterText }) => legacyComparator(filterOption, value, filterText);\n        }\n        return this.textFilterParams.textMatcher || TextFilter.DEFAULT_MATCHER;\n    }\n    createCondition(position) {\n        const type = this.getConditionType(position);\n        const model = {\n            filterType: this.getFilterType(),\n            type,\n        };\n        const values = this.getValuesWithSideEffects(position, true);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n        return model;\n    }\n    getFilterType() {\n        return 'text';\n    }\n    areSimpleModelsEqual(aSimple, bSimple) {\n        return aSimple.filter === bSimple.filter &&\n            aSimple.filterTo === bSimple.filterTo &&\n            aSimple.type === bSimple.type;\n    }\n    getInputs(position) {\n        if (position >= this.eValuesFrom.length) {\n            return [null, null];\n        }\n        return [this.eValuesFrom[position], this.eValuesTo[position]];\n    }\n    getValues(position) {\n        return this.getValuesWithSideEffects(position, false);\n    }\n    getValuesWithSideEffects(position, applySideEffects) {\n        const result = [];\n        this.forEachPositionInput(position, (element, index, _elPosition, numberOfInputs) => {\n            var _a;\n            if (index < numberOfInputs) {\n                let value = makeNull(element.getValue());\n                if (applySideEffects && this.textFilterParams.trimInput) {\n                    value = (_a = TextFilter.trimInput(value)) !== null && _a !== void 0 ? _a : null;\n                    element.setValue(value, true); // ensure clean value is visible\n                }\n                result.push(value);\n            }\n        });\n        return result;\n    }\n    getDefaultFilterOptions() {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n    createValueElement() {\n        const eCondition = document.createElement('div');\n        eCondition.classList.add('ag-filter-body');\n        setAriaRole(eCondition, 'presentation');\n        this.createFromToElement(eCondition, this.eValuesFrom, 'from');\n        this.createFromToElement(eCondition, this.eValuesTo, 'to');\n        return eCondition;\n    }\n    createFromToElement(eCondition, eValues, fromTo) {\n        const eValue = this.createManagedBean(new AgInputTextField());\n        eValue.addCssClass(`ag-filter-${fromTo}`);\n        eValue.addCssClass('ag-filter-filter');\n        eValues.push(eValue);\n        eCondition.appendChild(eValue.getGui());\n    }\n    removeValueElements(startPosition, deleteCount) {\n        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);\n        this.removeComponents(this.eValuesTo, startPosition, deleteCount);\n    }\n    mapValuesFromModel(filterModel) {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter || null,\n            filterTo || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n    evaluateNullValue(filterType) {\n        const filterTypesAllowNulls = [\n            SimpleFilter.NOT_EQUAL, SimpleFilter.NOT_CONTAINS, SimpleFilter.BLANK,\n        ];\n        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;\n    }\n    evaluateNonNullValue(values, cellValue, filterModel, params) {\n        const formattedValues = values.map(v => this.formatter(v)) || [];\n        const cellValueFormatted = this.formatter(cellValue);\n        const { api, colDef, column, columnApi, context, textFormatter } = this.textFilterParams;\n        if (filterModel.type === SimpleFilter.BLANK) {\n            return this.isBlank(cellValue);\n        }\n        else if (filterModel.type === SimpleFilter.NOT_BLANK) {\n            return !this.isBlank(cellValue);\n        }\n        const matcherParams = {\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            node: params.node,\n            data: params.data,\n            filterOption: filterModel.type,\n            value: cellValueFormatted,\n            textFormatter,\n        };\n        return formattedValues.some(v => this.matcher(Object.assign(Object.assign({}, matcherParams), { filterText: v })));\n    }\n    getModelAsString(model) {\n        var _a;\n        return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : '';\n    }\n}\nTextFilter.DEFAULT_FILTER_OPTIONS = [\n    SimpleFilter.CONTAINS,\n    SimpleFilter.NOT_CONTAINS,\n    SimpleFilter.EQUALS,\n    SimpleFilter.NOT_EQUAL,\n    SimpleFilter.STARTS_WITH,\n    SimpleFilter.ENDS_WITH,\n    SimpleFilter.BLANK,\n    SimpleFilter.NOT_BLANK,\n];\nTextFilter.DEFAULT_FORMATTER = (from) => from;\nTextFilter.DEFAULT_LOWERCASE_FORMATTER = (from) => from == null ? null : from.toString().toLowerCase();\nTextFilter.DEFAULT_MATCHER = ({ filterOption, value, filterText }) => {\n    if (filterText == null) {\n        return false;\n    }\n    switch (filterOption) {\n        case TextFilter.CONTAINS:\n            return value.indexOf(filterText) >= 0;\n        case TextFilter.NOT_CONTAINS:\n            return value.indexOf(filterText) < 0;\n        case TextFilter.EQUALS:\n            return value === filterText;\n        case TextFilter.NOT_EQUAL:\n            return value != filterText;\n        case TextFilter.STARTS_WITH:\n            return value.indexOf(filterText) === 0;\n        case TextFilter.ENDS_WITH:\n            const index = value.lastIndexOf(filterText);\n            return index >= 0 && index === (value.length - filterText.length);\n        default:\n            return false;\n    }\n};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RefSelector } from '../../../widgets/componentAnnotations.mjs';\nimport { debounce } from '../../../utils/function.mjs';\nimport { ProvidedFilter } from '../../provided/providedFilter.mjs';\nimport { PostConstruct, Autowired } from '../../../context/context.mjs';\nimport { SimpleFloatingFilter } from './simpleFloatingFilter.mjs';\nimport { AgInputTextField } from '../../../widgets/agInputTextField.mjs';\nimport { KeyCode } from '../../../constants/keyCode.mjs';\nimport { TextFilter } from '../../provided/text/textFilter.mjs';\nimport { BeanStub } from '../../../context/beanStub.mjs';\nimport { clearElement } from '../../../utils/dom.mjs';\nexport class FloatingFilterTextInputService extends BeanStub {\n    constructor(params) {\n        super();\n        this.params = params;\n        this.valueChangedListener = () => { };\n    }\n    setupGui(parentElement) {\n        var _a;\n        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField((_a = this.params) === null || _a === void 0 ? void 0 : _a.config));\n        const eInput = this.eFloatingFilterTextInput.getGui();\n        parentElement.appendChild(eInput);\n        this.addManagedListener(eInput, 'input', (e) => this.valueChangedListener(e));\n        this.addManagedListener(eInput, 'keydown', (e) => this.valueChangedListener(e));\n    }\n    setEditable(editable) {\n        this.eFloatingFilterTextInput.setDisabled(!editable);\n    }\n    setAutoComplete(autoComplete) {\n        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);\n    }\n    getValue() {\n        return this.eFloatingFilterTextInput.getValue();\n    }\n    setValue(value, silent) {\n        this.eFloatingFilterTextInput.setValue(value, silent);\n    }\n    setValueChangedListener(listener) {\n        this.valueChangedListener = listener;\n    }\n    setParams(params) {\n        this.setAriaLabel(params.ariaLabel);\n        if (params.autoComplete !== undefined) {\n            this.setAutoComplete(params.autoComplete);\n        }\n    }\n    setAriaLabel(ariaLabel) {\n        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);\n    }\n}\n;\nexport class TextInputFloatingFilter extends SimpleFloatingFilter {\n    postConstruct() {\n        this.setTemplate(/* html */ `\n            <div class=\"ag-floating-filter-input\" role=\"presentation\" ref=\"eFloatingFilterInputContainer\"></div>\n        `);\n    }\n    getDefaultDebounceMs() {\n        return 500;\n    }\n    onParentModelChanged(model, event) {\n        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {\n            // if the floating filter triggered the change, it is already in sync.\n            // Data changes also do not affect provided text floating filters\n            return;\n        }\n        this.setLastTypeFromModel(model);\n        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));\n        this.floatingFilterInputService.setValue(this.getFilterModelFormatter().getModelAsString(model));\n    }\n    init(params) {\n        this.setupFloatingFilterInputService(params);\n        super.init(params);\n        this.setTextInputParams(params);\n    }\n    setupFloatingFilterInputService(params) {\n        this.floatingFilterInputService = this.createFloatingFilterInputService(params);\n        this.floatingFilterInputService.setupGui(this.eFloatingFilterInputContainer);\n    }\n    setTextInputParams(params) {\n        var _a;\n        this.params = params;\n        const autoComplete = (_a = params.browserAutoComplete) !== null && _a !== void 0 ? _a : false;\n        this.floatingFilterInputService.setParams({\n            ariaLabel: this.getAriaLabel(params),\n            autoComplete,\n        });\n        this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);\n        if (!this.isReadOnly()) {\n            const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n            const toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);\n            this.floatingFilterInputService.setValueChangedListener(toDebounce);\n        }\n    }\n    onParamsUpdated(params) {\n        super.onParamsUpdated(params);\n        this.setTextInputParams(params);\n    }\n    recreateFloatingFilterInputService(params) {\n        const value = this.floatingFilterInputService.getValue();\n        clearElement(this.eFloatingFilterInputContainer);\n        this.destroyBean(this.floatingFilterInputService);\n        this.setupFloatingFilterInputService(params);\n        this.floatingFilterInputService.setValue(value, true);\n    }\n    getAriaLabel(params) {\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.localeService.getLocaleTextFunc();\n        return `${displayName} ${translate('ariaFilterInput', 'Filter Input')}`;\n    }\n    syncUpWithParentFilter(e) {\n        const isEnterKey = e.key === KeyCode.ENTER;\n        if (this.applyActive && !isEnterKey) {\n            return;\n        }\n        let value = this.floatingFilterInputService.getValue();\n        if (this.params.filterParams.trimInput) {\n            value = TextFilter.trimInput(value);\n            this.floatingFilterInputService.setValue(value, true); // ensure visible value is trimmed\n        }\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                // NumberFilter is typed as number, but actually receives string values\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, value || null);\n            }\n        });\n    }\n    setEditable(editable) {\n        this.floatingFilterInputService.setEditable(editable);\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], TextInputFloatingFilter.prototype, \"columnModel\", void 0);\n__decorate([\n    RefSelector('eFloatingFilterInputContainer')\n], TextInputFloatingFilter.prototype, \"eFloatingFilterInputContainer\", void 0);\n__decorate([\n    PostConstruct\n], TextInputFloatingFilter.prototype, \"postConstruct\", null);\n","import { getAllowedCharPattern, NumberFilter, NumberFilterModelFormatter } from './numberFilter.mjs';\nimport { FloatingFilterTextInputService, TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter.mjs';\nimport { AgInputNumberField } from '../../../widgets/agInputNumberField.mjs';\nimport { AgInputTextField } from '../../../widgets/agInputTextField.mjs';\nimport { BeanStub } from '../../../context/beanStub.mjs';\nclass FloatingFilterNumberInputService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.valueChangedListener = () => { };\n        this.numberInputActive = true;\n    }\n    setupGui(parentElement) {\n        this.eFloatingFilterNumberInput = this.createManagedBean(new AgInputNumberField());\n        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField());\n        this.eFloatingFilterTextInput.setDisabled(true);\n        const eNumberInput = this.eFloatingFilterNumberInput.getGui();\n        const eTextInput = this.eFloatingFilterTextInput.getGui();\n        parentElement.appendChild(eNumberInput);\n        parentElement.appendChild(eTextInput);\n        this.setupListeners(eNumberInput, (e) => this.valueChangedListener(e));\n        this.setupListeners(eTextInput, (e) => this.valueChangedListener(e));\n    }\n    setEditable(editable) {\n        this.numberInputActive = editable;\n        this.eFloatingFilterNumberInput.setDisplayed(this.numberInputActive);\n        this.eFloatingFilterTextInput.setDisplayed(!this.numberInputActive);\n    }\n    setAutoComplete(autoComplete) {\n        this.eFloatingFilterNumberInput.setAutoComplete(autoComplete);\n        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);\n    }\n    getValue() {\n        return this.getActiveInputElement().getValue();\n    }\n    setValue(value, silent) {\n        this.getActiveInputElement().setValue(value, silent);\n    }\n    getActiveInputElement() {\n        return this.numberInputActive ? this.eFloatingFilterNumberInput : this.eFloatingFilterTextInput;\n    }\n    setValueChangedListener(listener) {\n        this.valueChangedListener = listener;\n    }\n    setupListeners(element, listener) {\n        this.addManagedListener(element, 'input', listener);\n        this.addManagedListener(element, 'keydown', listener);\n    }\n    setParams(params) {\n        this.setAriaLabel(params.ariaLabel);\n        if (params.autoComplete !== undefined) {\n            this.setAutoComplete(params.autoComplete);\n        }\n    }\n    setAriaLabel(ariaLabel) {\n        this.eFloatingFilterNumberInput.setInputAriaLabel(ariaLabel);\n        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);\n    }\n}\nexport class NumberFloatingFilter extends TextInputFloatingFilter {\n    init(params) {\n        var _a;\n        super.init(params);\n        this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, (_a = params.filterParams) === null || _a === void 0 ? void 0 : _a.numberFormatter);\n    }\n    onParamsUpdated(params) {\n        const allowedCharPattern = getAllowedCharPattern(params.filterParams);\n        if (allowedCharPattern !== this.allowedCharPattern) {\n            this.recreateFloatingFilterInputService(params);\n        }\n        super.onParamsUpdated(params);\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\n    }\n    getDefaultFilterOptions() {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n    getFilterModelFormatter() {\n        return this.filterModelFormatter;\n    }\n    createFloatingFilterInputService(params) {\n        this.allowedCharPattern = getAllowedCharPattern(params.filterParams);\n        if (this.allowedCharPattern) {\n            // need to use text input\n            return this.createManagedBean(new FloatingFilterTextInputService({\n                config: { allowedCharPattern: this.allowedCharPattern },\n            }));\n        }\n        return this.createManagedBean(new FloatingFilterNumberInputService());\n    }\n}\n","import { TextFilter, TextFilterModelFormatter } from './textFilter.mjs';\nimport { FloatingFilterTextInputService, TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter.mjs';\nexport class TextFloatingFilter extends TextInputFloatingFilter {\n    init(params) {\n        super.init(params);\n        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);\n    }\n    onParamsUpdated(params) {\n        super.onParamsUpdated(params);\n        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });\n    }\n    getDefaultFilterOptions() {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n    getFilterModelFormatter() {\n        return this.filterModelFormatter;\n    }\n    createFloatingFilterInputService() {\n        return this.createManagedBean(new FloatingFilterTextInputService());\n    }\n}\n","import { EventService } from \"../eventService.mjs\";\nimport { areEventsNear } from \"../utils/mouse.mjs\";\nexport class TouchListener {\n    constructor(eElement, preventMouseClick = false) {\n        this.destroyFuncs = [];\n        this.touching = false;\n        this.eventService = new EventService();\n        this.eElement = eElement;\n        this.preventMouseClick = preventMouseClick;\n        const startListener = this.onTouchStart.bind(this);\n        const moveListener = this.onTouchMove.bind(this);\n        const endListener = this.onTouchEnd.bind(this);\n        this.eElement.addEventListener(\"touchstart\", startListener, { passive: true });\n        this.eElement.addEventListener(\"touchmove\", moveListener, { passive: true });\n        // we set passive=false, as we want to prevent default on this event\n        this.eElement.addEventListener(\"touchend\", endListener, { passive: false });\n        this.destroyFuncs.push(() => {\n            this.eElement.removeEventListener(\"touchstart\", startListener, { passive: true });\n            this.eElement.removeEventListener(\"touchmove\", moveListener, { passive: true });\n            this.eElement.removeEventListener(\"touchend\", endListener, { passive: false });\n        });\n    }\n    getActiveTouch(touchList) {\n        for (let i = 0; i < touchList.length; i++) {\n            const matches = touchList[i].identifier === this.touchStart.identifier;\n            if (matches) {\n                return touchList[i];\n            }\n        }\n        return null;\n    }\n    addEventListener(eventType, listener) {\n        this.eventService.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n    onTouchStart(touchEvent) {\n        // only looking at one touch point at any time\n        if (this.touching) {\n            return;\n        }\n        this.touchStart = touchEvent.touches[0];\n        this.touching = true;\n        this.moved = false;\n        const touchStartCopy = this.touchStart;\n        window.setTimeout(() => {\n            const touchesMatch = this.touchStart === touchStartCopy;\n            if (this.touching && touchesMatch && !this.moved) {\n                this.moved = true;\n                const event = {\n                    type: TouchListener.EVENT_LONG_TAP,\n                    touchStart: this.touchStart,\n                    touchEvent: touchEvent\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        }, 500);\n    }\n    onTouchMove(touchEvent) {\n        if (!this.touching) {\n            return;\n        }\n        const touch = this.getActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n        const eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);\n        if (eventIsFarAway) {\n            this.moved = true;\n        }\n    }\n    onTouchEnd(touchEvent) {\n        if (!this.touching) {\n            return;\n        }\n        if (!this.moved) {\n            const event = {\n                type: TouchListener.EVENT_TAP,\n                touchStart: this.touchStart\n            };\n            this.eventService.dispatchEvent(event);\n            this.checkForDoubleTap();\n        }\n        // stops the tap from also been processed as a mouse click\n        if (this.preventMouseClick && touchEvent.cancelable) {\n            touchEvent.preventDefault();\n        }\n        this.touching = false;\n    }\n    checkForDoubleTap() {\n        const now = new Date().getTime();\n        if (this.lastTapTime && this.lastTapTime > 0) {\n            // if previous tap, see if duration is short enough to be considered double tap\n            const interval = now - this.lastTapTime;\n            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {\n                // dispatch double tap event\n                const event = {\n                    type: TouchListener.EVENT_DOUBLE_TAP,\n                    touchStart: this.touchStart\n                };\n                this.eventService.dispatchEvent(event);\n                // this stops a tripple tap ending up as two double taps\n                this.lastTapTime = null;\n            }\n            else {\n                this.lastTapTime = now;\n            }\n        }\n        else {\n            this.lastTapTime = now;\n        }\n    }\n    destroy() {\n        this.destroyFuncs.forEach(func => func());\n    }\n}\nTouchListener.EVENT_TAP = \"tap\";\nTouchListener.EVENT_DOUBLE_TAP = \"doubleTap\";\nTouchListener.EVENT_LONG_TAP = \"longTap\";\nTouchListener.DOUBLE_TAP_MILLIS = 500;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Events } from \"../../../eventKeys.mjs\";\nimport { setDisplayed, clearElement } from \"../../../utils/dom.mjs\";\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations.mjs\";\nimport { Component } from \"../../../widgets/component.mjs\";\nimport { createIconNoSpan } from \"../../../utils/icon.mjs\";\nexport class SortIndicatorComp extends Component {\n    constructor(skipTemplate) {\n        super();\n        if (!skipTemplate) {\n            this.setTemplate(SortIndicatorComp.TEMPLATE);\n        }\n    }\n    attachCustomElements(eSortOrder, eSortAsc, eSortDesc, eSortMixed, eSortNone) {\n        this.eSortOrder = eSortOrder;\n        this.eSortAsc = eSortAsc;\n        this.eSortDesc = eSortDesc;\n        this.eSortMixed = eSortMixed;\n        this.eSortNone = eSortNone;\n    }\n    setupSort(column, suppressOrder = false) {\n        this.column = column;\n        this.suppressOrder = suppressOrder;\n        this.setupMultiSortIndicator();\n        if (!this.column.isSortable()) {\n            return;\n        }\n        this.addInIcon('sortAscending', this.eSortAsc, column);\n        this.addInIcon('sortDescending', this.eSortDesc, column);\n        this.addInIcon('sortUnSort', this.eSortNone, column);\n        this.addManagedPropertyListener('unSortIcon', () => this.updateIcons());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.updateIcons());\n        // Watch global events, as row group columns can effect their display column.\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, () => this.onSortChanged());\n        // when grouping changes so can sort indexes and icons\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.onSortChanged());\n        this.onSortChanged();\n    }\n    addInIcon(iconName, eParent, column) {\n        if (eParent == null) {\n            return;\n        }\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n    onSortChanged() {\n        this.updateIcons();\n        if (!this.suppressOrder) {\n            this.updateSortOrder();\n        }\n    }\n    updateIcons() {\n        const sortDirection = this.sortController.getDisplaySortForColumn(this.column);\n        if (this.eSortAsc) {\n            const isAscending = sortDirection === 'asc';\n            setDisplayed(this.eSortAsc, isAscending, { skipAriaHidden: true });\n        }\n        if (this.eSortDesc) {\n            const isDescending = sortDirection === 'desc';\n            setDisplayed(this.eSortDesc, isDescending, { skipAriaHidden: true });\n        }\n        if (this.eSortNone) {\n            const alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsService.get('unSortIcon');\n            const isNone = sortDirection === null || sortDirection === undefined;\n            setDisplayed(this.eSortNone, !alwaysHideNoSort && isNone, { skipAriaHidden: true });\n        }\n    }\n    setupMultiSortIndicator() {\n        this.addInIcon('sortUnSort', this.eSortMixed, this.column);\n        const isColumnShowingRowGroup = this.column.getColDef().showRowGroup;\n        const areGroupsCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        if (areGroupsCoupled && isColumnShowingRowGroup) {\n            // Watch global events, as row group columns can effect their display column.\n            this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, () => this.updateMultiSortIndicator());\n            // when grouping changes so can sort indexes and icons\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.updateMultiSortIndicator());\n            this.updateMultiSortIndicator();\n        }\n    }\n    updateMultiSortIndicator() {\n        if (this.eSortMixed) {\n            const isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === 'mixed';\n            setDisplayed(this.eSortMixed, isMixedSort, { skipAriaHidden: true });\n        }\n    }\n    // we listen here for global sort events, NOT column sort events, as we want to do this\n    // when sorting has been set on all column (if we listened just for our col (where we\n    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.\n    updateSortOrder() {\n        var _a;\n        if (!this.eSortOrder) {\n            return;\n        }\n        const allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();\n        const indexThisCol = (_a = this.sortController.getDisplaySortIndexForColumn(this.column)) !== null && _a !== void 0 ? _a : -1;\n        const moreThanOneColSorting = allColumnsWithSorting.some(col => { var _a; return (_a = this.sortController.getDisplaySortIndexForColumn(col)) !== null && _a !== void 0 ? _a : -1 >= 1; });\n        const showIndex = indexThisCol >= 0 && moreThanOneColSorting;\n        setDisplayed(this.eSortOrder, showIndex, { skipAriaHidden: true });\n        if (indexThisCol >= 0) {\n            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();\n        }\n        else {\n            clearElement(this.eSortOrder);\n        }\n    }\n}\nSortIndicatorComp.TEMPLATE = `<span class=\"ag-sort-indicator-container\">\n            <span ref=\"eSortOrder\" class=\"ag-sort-indicator-icon ag-sort-order ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortAsc\" class=\"ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortDesc\" class=\"ag-sort-indicator-icon ag-sort-descending-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortMixed\" class=\"ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden\" aria-hidden=\"true\"></span>\n            <span ref=\"eSortNone\" class=\"ag-sort-indicator-icon ag-sort-none-icon ag-hidden\" aria-hidden=\"true\"></span>\n        </span>`;\n__decorate([\n    RefSelector('eSortOrder')\n], SortIndicatorComp.prototype, \"eSortOrder\", void 0);\n__decorate([\n    RefSelector('eSortAsc')\n], SortIndicatorComp.prototype, \"eSortAsc\", void 0);\n__decorate([\n    RefSelector('eSortDesc')\n], SortIndicatorComp.prototype, \"eSortDesc\", void 0);\n__decorate([\n    RefSelector('eSortMixed')\n], SortIndicatorComp.prototype, \"eSortMixed\", void 0);\n__decorate([\n    RefSelector('eSortNone')\n], SortIndicatorComp.prototype, \"eSortNone\", void 0);\n__decorate([\n    Autowired('columnModel')\n], SortIndicatorComp.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('sortController')\n], SortIndicatorComp.prototype, \"sortController\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { Column } from \"../../../entities/column.mjs\";\nimport { firstExistingValue } from \"../../../utils/array.mjs\";\nimport { isIOSUserAgent } from \"../../../utils/browser.mjs\";\nimport { removeFromParent, setDisplayed } from \"../../../utils/dom.mjs\";\nimport { exists } from \"../../../utils/generic.mjs\";\nimport { createIconNoSpan } from \"../../../utils/icon.mjs\";\nimport { escapeString } from \"../../../utils/string.mjs\";\nimport { Component } from \"../../../widgets/component.mjs\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations.mjs\";\nimport { TouchListener } from \"../../../widgets/touchListener.mjs\";\nimport { SortIndicatorComp } from \"./sortIndicatorComp.mjs\";\nimport { Events } from \"../../../eventKeys.mjs\";\nexport class HeaderComp extends Component {\n    constructor() {\n        super(...arguments);\n        this.lastMovingChanged = 0;\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    refresh(params) {\n        this.params = params;\n        // if template changed, then recreate the whole comp, the code required to manage\n        // a changing template is to difficult for what it's worth.\n        if (this.workOutTemplate() != this.currentTemplate) {\n            return false;\n        }\n        if (this.workOutShowMenu() != this.currentShowMenu) {\n            return false;\n        }\n        if (this.workOutSort() != this.currentSort) {\n            return false;\n        }\n        if (this.shouldSuppressMenuHide() != this.currentSuppressMenuHide) {\n            return false;\n        }\n        this.setDisplayName(params);\n        return true;\n    }\n    workOutTemplate() {\n        let template = firstExistingValue(this.params.template, HeaderComp.TEMPLATE);\n        // take account of any newlines & whitespace before/after the actual template\n        template = template && template.trim ? template.trim() : template;\n        return template;\n    }\n    init(params) {\n        this.params = params;\n        this.currentTemplate = this.workOutTemplate();\n        this.setTemplate(this.currentTemplate);\n        this.setupTap();\n        this.setupIcons(params.column);\n        this.setMenu();\n        this.setupSort();\n        this.setupFilterIcon();\n        this.setDisplayName(params);\n    }\n    setDisplayName(params) {\n        if (this.currentDisplayName != params.displayName) {\n            this.currentDisplayName = params.displayName;\n            const displayNameSanitised = escapeString(this.currentDisplayName);\n            if (this.eText) {\n                this.eText.innerHTML = displayNameSanitised;\n            }\n        }\n    }\n    setupIcons(column) {\n        this.addInIcon('menu', this.eMenu, column);\n        this.addInIcon('filter', this.eFilter, column);\n    }\n    addInIcon(iconName, eParent, column) {\n        if (eParent == null) {\n            return;\n        }\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n    setupTap() {\n        const { gridOptionsService } = this;\n        if (gridOptionsService.get('suppressTouch')) {\n            return;\n        }\n        const touchListener = new TouchListener(this.getGui(), true);\n        const suppressMenuHide = gridOptionsService.get('suppressMenuHide');\n        const tapMenuButton = suppressMenuHide && exists(this.eMenu);\n        const menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;\n        if (this.params.enableMenu) {\n            const eventType = tapMenuButton ? 'EVENT_TAP' : 'EVENT_LONG_TAP';\n            const showMenuFn = (event) => {\n                gridOptionsService.api.showColumnMenuAfterMouseClick(this.params.column, event.touchStart);\n            };\n            this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);\n        }\n        if (this.params.enableSorting) {\n            const tapListener = (event) => {\n                const target = event.touchStart.target;\n                // When suppressMenuHide is true, a tap on the menu icon will bubble up\n                // to the header container, in that case we should not sort\n                if (suppressMenuHide && this.eMenu.contains(target)) {\n                    return;\n                }\n                this.sortController.progressSort(this.params.column, false, \"uiColumnSorted\");\n            };\n            this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);\n        }\n        // if tapMenuButton is true `touchListener` and `menuTouchListener` are different\n        // so we need to make sure to destroy both listeners here\n        this.addDestroyFunc(() => touchListener.destroy());\n        if (tapMenuButton) {\n            this.addDestroyFunc(() => menuTouchListener.destroy());\n        }\n    }\n    workOutShowMenu() {\n        // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/\n        // However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok\n        // to show it on iPad in this case (as hover isn't needed). If suppressMenuHide\n        // is false (default) user will need to use longpress to display the menu.\n        const menuHides = !this.gridOptionsService.get('suppressMenuHide');\n        const onIpadAndMenuHides = isIOSUserAgent() && menuHides;\n        const showMenu = this.params.enableMenu && !onIpadAndMenuHides;\n        return showMenu;\n    }\n    shouldSuppressMenuHide() {\n        return this.gridOptionsService.get('suppressMenuHide');\n    }\n    setMenu() {\n        // if no menu provided in template, do nothing\n        if (!this.eMenu) {\n            return;\n        }\n        this.currentShowMenu = this.workOutShowMenu();\n        if (!this.currentShowMenu) {\n            removeFromParent(this.eMenu);\n            return;\n        }\n        this.currentSuppressMenuHide = this.shouldSuppressMenuHide();\n        this.addManagedListener(this.eMenu, 'click', () => this.showMenu(this.eMenu));\n        this.eMenu.classList.toggle('ag-header-menu-always-show', this.currentSuppressMenuHide);\n    }\n    showMenu(eventSource) {\n        if (!eventSource) {\n            eventSource = this.eMenu;\n        }\n        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource, 'columnMenu');\n    }\n    workOutSort() {\n        return this.params.enableSorting;\n    }\n    setupSort() {\n        this.currentSort = this.params.enableSorting;\n        // eSortIndicator will not be present when customers provided custom header\n        // templates, in that case, we need to look for provided sort elements and\n        // manually create eSortIndicator.\n        if (!this.eSortIndicator) {\n            this.eSortIndicator = this.context.createBean(new SortIndicatorComp(true));\n            this.eSortIndicator.attachCustomElements(this.eSortOrder, this.eSortAsc, this.eSortDesc, this.eSortMixed, this.eSortNone);\n        }\n        this.eSortIndicator.setupSort(this.params.column);\n        // we set up the indicator prior to the check for whether this column is sortable, as it allows the indicator to\n        // set up the multi sort indicator which can appear irrelevant of whether this column can itself be sorted.\n        // this can occur in the case of a non-sortable group display column.\n        if (!this.currentSort) {\n            return;\n        }\n        // keep track of last time the moving changed flag was set\n        this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, () => {\n            this.lastMovingChanged = new Date().getTime();\n        });\n        // add the event on the header, so when clicked, we do sorting\n        if (this.eLabel) {\n            this.addManagedListener(this.eLabel, 'click', (event) => {\n                // sometimes when moving a column via dragging, this was also firing a clicked event.\n                // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076\n                // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)\n                const moving = this.params.column.isMoving();\n                const nowTime = new Date().getTime();\n                // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn\n                const movedRecently = (nowTime - this.lastMovingChanged) < 50;\n                const columnMoving = moving || movedRecently;\n                if (!columnMoving) {\n                    const sortUsingCtrl = this.gridOptionsService.get('multiSortKey') === 'ctrl';\n                    const multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;\n                    this.params.progressSort(multiSort);\n                }\n            });\n        }\n        const onSortingChanged = () => {\n            this.addOrRemoveCssClass('ag-header-cell-sorted-asc', this.params.column.isSortAscending());\n            this.addOrRemoveCssClass('ag-header-cell-sorted-desc', this.params.column.isSortDescending());\n            this.addOrRemoveCssClass('ag-header-cell-sorted-none', this.params.column.isSortNone());\n            if (this.params.column.getColDef().showRowGroup) {\n                const sourceColumns = this.columnModel.getSourceColumnsForGroupColumn(this.params.column);\n                // this == is intentional, as it allows null and undefined to match, which are both unsorted states\n                const sortDirectionsMatch = sourceColumns === null || sourceColumns === void 0 ? void 0 : sourceColumns.every(sourceCol => this.params.column.getSort() == sourceCol.getSort());\n                const isMultiSorting = !sortDirectionsMatch;\n                this.addOrRemoveCssClass('ag-header-cell-sorted-mixed', isMultiSorting);\n            }\n        };\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, onSortingChanged);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, onSortingChanged);\n    }\n    setupFilterIcon() {\n        if (!this.eFilter) {\n            return;\n        }\n        this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.onFilterChanged();\n    }\n    onFilterChanged() {\n        const filterPresent = this.params.column.isFilterActive();\n        setDisplayed(this.eFilter, filterPresent, { skipAriaHidden: true });\n    }\n}\nHeaderComp.TEMPLATE = `<div class=\"ag-cell-label-container\" role=\"presentation\">\n            <span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\n            <div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\">\n                <span ref=\"eText\" class=\"ag-header-cell-text\"></span>\n                <span ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\n                <ag-sort-indicator ref=\"eSortIndicator\"></ag-sort-indicator>\n            </div>\n        </div>`;\n__decorate([\n    Autowired('sortController')\n], HeaderComp.prototype, \"sortController\", void 0);\n__decorate([\n    Autowired('menuFactory')\n], HeaderComp.prototype, \"menuFactory\", void 0);\n__decorate([\n    Autowired('columnModel')\n], HeaderComp.prototype, \"columnModel\", void 0);\n__decorate([\n    RefSelector('eFilter')\n], HeaderComp.prototype, \"eFilter\", void 0);\n__decorate([\n    RefSelector('eSortIndicator')\n], HeaderComp.prototype, \"eSortIndicator\", void 0);\n__decorate([\n    RefSelector('eMenu')\n], HeaderComp.prototype, \"eMenu\", void 0);\n__decorate([\n    RefSelector('eLabel')\n], HeaderComp.prototype, \"eLabel\", void 0);\n__decorate([\n    RefSelector('eText')\n], HeaderComp.prototype, \"eText\", void 0);\n__decorate([\n    RefSelector('eSortOrder')\n], HeaderComp.prototype, \"eSortOrder\", void 0);\n__decorate([\n    RefSelector('eSortAsc')\n], HeaderComp.prototype, \"eSortAsc\", void 0);\n__decorate([\n    RefSelector('eSortDesc')\n], HeaderComp.prototype, \"eSortDesc\", void 0);\n__decorate([\n    RefSelector('eSortMixed')\n], HeaderComp.prototype, \"eSortMixed\", void 0);\n__decorate([\n    RefSelector('eSortNone')\n], HeaderComp.prototype, \"eSortNone\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup.mjs\";\nimport { setDisplayed } from \"../../../utils/dom.mjs\";\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../../utils/event.mjs\";\nimport { warnOnce } from \"../../../utils/function.mjs\";\nimport { exists } from \"../../../utils/generic.mjs\";\nimport { createIconNoSpan } from \"../../../utils/icon.mjs\";\nimport { escapeString } from \"../../../utils/string.mjs\";\nimport { Component } from \"../../../widgets/component.mjs\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations.mjs\";\nimport { TouchListener } from \"../../../widgets/touchListener.mjs\";\nexport class HeaderGroupComp extends Component {\n    constructor() {\n        super(HeaderGroupComp.TEMPLATE);\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    init(params) {\n        this.params = params;\n        this.checkWarnings();\n        this.setupLabel();\n        this.addGroupExpandIcon();\n        this.setupExpandIcons();\n    }\n    checkWarnings() {\n        const paramsAny = this.params;\n        if (paramsAny.template) {\n            warnOnce(`A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)`);\n        }\n    }\n    setupExpandIcons() {\n        this.addInIcon(\"columnGroupOpened\", \"agOpened\");\n        this.addInIcon(\"columnGroupClosed\", \"agClosed\");\n        const expandAction = (event) => {\n            if (isStopPropagationForAgGrid(event)) {\n                return;\n            }\n            const newExpandedValue = !this.params.columnGroup.isExpanded();\n            this.columnModel.setColumnGroupOpened(this.params.columnGroup.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        };\n        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);\n        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);\n        const stopPropagationAction = (event) => {\n            stopPropagationForAgGrid(event);\n        };\n        // adding stopPropagation to the double click for the icons prevents double click action happening\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\n        // then close again straight away. if we also listened to double click, then the group would open,\n        // close, then open, which is not what we want. double click should only action if the user double\n        // clicks outside of the icons.\n        this.addManagedListener(this.eCloseIcon, \"dblclick\", stopPropagationAction);\n        this.addManagedListener(this.eOpenIcon, \"dblclick\", stopPropagationAction);\n        this.addManagedListener(this.getGui(), \"dblclick\", expandAction);\n        this.updateIconVisibility();\n        const providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();\n        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));\n        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));\n    }\n    addTouchAndClickListeners(eElement, action) {\n        const touchListener = new TouchListener(eElement, true);\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);\n        this.addDestroyFunc(() => touchListener.destroy());\n        this.addManagedListener(eElement, \"click\", action);\n    }\n    updateIconVisibility() {\n        const columnGroup = this.params.columnGroup;\n        if (columnGroup.isExpandable()) {\n            const expanded = this.params.columnGroup.isExpanded();\n            setDisplayed(this.eOpenIcon, expanded);\n            setDisplayed(this.eCloseIcon, !expanded);\n        }\n        else {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n        }\n    }\n    addInIcon(iconName, refName) {\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsService, null);\n        if (eIcon) {\n            this.getRefElement(refName).appendChild(eIcon);\n        }\n    }\n    addGroupExpandIcon() {\n        if (!this.params.columnGroup.isExpandable()) {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n            return;\n        }\n    }\n    setupLabel() {\n        var _a;\n        // no renderer, default text render\n        const { displayName, columnGroup } = this.params;\n        if (exists(displayName)) {\n            const displayNameSanitised = escapeString(displayName);\n            this.getRefElement('agLabel').innerHTML = displayNameSanitised;\n        }\n        this.addOrRemoveCssClass('ag-sticky-label', !((_a = columnGroup.getColGroupDef()) === null || _a === void 0 ? void 0 : _a.suppressStickyLabel));\n    }\n}\nHeaderGroupComp.TEMPLATE = `<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>`;\n__decorate([\n    Autowired(\"columnModel\")\n], HeaderGroupComp.prototype, \"columnModel\", void 0);\n__decorate([\n    RefSelector(\"agOpened\")\n], HeaderGroupComp.prototype, \"eOpenIcon\", void 0);\n__decorate([\n    RefSelector(\"agClosed\")\n], HeaderGroupComp.prototype, \"eCloseIcon\", void 0);\n","import { Component } from \"./component.mjs\";\nexport class PopupComponent extends Component {\n    isPopup() {\n        return true;\n    }\n    setParentComponent(container) {\n        container.addCssClass('ag-has-popup');\n        super.setParentComponent(container);\n    }\n    destroy() {\n        const parentComp = this.parentComponent;\n        const hasParent = parentComp && parentComp.isAlive();\n        if (hasParent) {\n            parentComp.getGui().classList.remove('ag-has-popup');\n        }\n        super.destroy();\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PopupComponent } from \"../../widgets/popupComponent.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nimport { KeyCode } from '../../constants/keyCode.mjs';\nexport class LargeTextCellEditor extends PopupComponent {\n    constructor() {\n        super(LargeTextCellEditor.TEMPLATE);\n    }\n    init(params) {\n        this.params = params;\n        this.focusAfterAttached = params.cellStartedEdit;\n        this.eTextArea\n            .setMaxLength(params.maxLength || 200)\n            .setCols(params.cols || 60)\n            .setRows(params.rows || 10);\n        if (exists(params.value, true)) {\n            this.eTextArea.setValue(params.value.toString(), true);\n        }\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n        this.activateTabIndex();\n    }\n    onKeyDown(event) {\n        const key = event.key;\n        if (key === KeyCode.LEFT ||\n            key === KeyCode.UP ||\n            key === KeyCode.RIGHT ||\n            key === KeyCode.DOWN ||\n            (event.shiftKey && key === KeyCode.ENTER)) { // shift+enter allows for newlines\n            event.stopPropagation();\n        }\n    }\n    afterGuiAttached() {\n        const translate = this.localeService.getLocaleTextFunc();\n        this.eTextArea.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n        if (this.focusAfterAttached) {\n            this.eTextArea.getFocusableElement().focus();\n        }\n    }\n    getValue() {\n        const value = this.eTextArea.getValue();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value);\n    }\n}\nLargeTextCellEditor.TEMPLATE = `<div class=\"ag-large-text\">\n            <ag-input-text-area ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\n        </div>`;\n__decorate([\n    RefSelector(\"eTextArea\")\n], LargeTextCellEditor.prototype, \"eTextArea\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AgSelect } from \"../../widgets/agSelect.mjs\";\nimport { Autowired } from \"../../context/context.mjs\";\nimport { PopupComponent } from \"../../widgets/popupComponent.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { missing } from \"../../utils/generic.mjs\";\nimport { KeyCode } from '../../constants/keyCode.mjs';\nexport class SelectCellEditor extends PopupComponent {\n    constructor() {\n        super(/* html */ `<div class=\"ag-cell-edit-wrapper\">\n                <ag-select class=\"ag-cell-editor\" ref=\"eSelect\"></ag-select>\n            </div>`);\n        this.startedByEnter = false;\n    }\n    init(params) {\n        this.focusAfterAttached = params.cellStartedEdit;\n        const { eSelect, valueFormatterService, gridOptionsService } = this;\n        const { values, value, eventKey } = params;\n        if (missing(values)) {\n            console.warn('AG Grid: no values found for select cellEditor');\n            return;\n        }\n        this.startedByEnter = eventKey != null ? eventKey === KeyCode.ENTER : false;\n        let hasValue = false;\n        values.forEach((currentValue) => {\n            const option = { value: currentValue };\n            const valueFormatted = valueFormatterService.formatValue(params.column, null, currentValue);\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n            option.text = valueFormattedExits ? valueFormatted : currentValue;\n            eSelect.addOption(option);\n            hasValue = hasValue || value === currentValue;\n        });\n        if (hasValue) {\n            eSelect.setValue(params.value, true);\n        }\n        else if (params.values.length) {\n            eSelect.setValue(params.values[0], true);\n        }\n        const { valueListGap, valueListMaxWidth, valueListMaxHeight } = params;\n        if (valueListGap != null) {\n            eSelect.setPickerGap(valueListGap);\n        }\n        if (valueListMaxHeight != null) {\n            eSelect.setPickerMaxHeight(valueListMaxHeight);\n        }\n        if (valueListMaxWidth != null) {\n            eSelect.setPickerMaxWidth(valueListMaxWidth);\n        }\n        // we don't want to add this if full row editing, otherwise selecting will stop the\n        // full row editing.\n        if (gridOptionsService.get('editType') !== 'fullRow') {\n            this.addManagedListener(this.eSelect, AgSelect.EVENT_ITEM_SELECTED, () => params.stopEditing());\n        }\n    }\n    afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eSelect.getFocusableElement().focus();\n        }\n        if (this.startedByEnter) {\n            setTimeout(() => {\n                if (this.isAlive()) {\n                    this.eSelect.showPicker();\n                }\n            });\n        }\n    }\n    focusIn() {\n        this.eSelect.getFocusableElement().focus();\n    }\n    getValue() {\n        return this.eSelect.getValue();\n    }\n    isPopup() {\n        return false;\n    }\n}\n__decorate([\n    Autowired('valueFormatterService')\n], SelectCellEditor.prototype, \"valueFormatterService\", void 0);\n__decorate([\n    RefSelector('eSelect')\n], SelectCellEditor.prototype, \"eSelect\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PopupComponent } from \"../../widgets/popupComponent.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { isBrowserSafari } from \"../../utils/browser.mjs\";\nimport { KeyCode } from '../../constants/keyCode.mjs';\nexport class SimpleCellEditor extends PopupComponent {\n    constructor(cellEditorInput) {\n        super(/* html */ `\n            <div class=\"ag-cell-edit-wrapper\">\n                ${cellEditorInput.getTemplate()}\n            </div>`);\n        this.cellEditorInput = cellEditorInput;\n    }\n    init(params) {\n        this.params = params;\n        const eInput = this.eInput;\n        this.cellEditorInput.init(eInput, params);\n        let startValue;\n        // cellStartedEdit is only false if we are doing fullRow editing\n        if (params.cellStartedEdit) {\n            this.focusAfterAttached = true;\n            const eventKey = params.eventKey;\n            if (eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {\n                startValue = '';\n            }\n            else if (eventKey && eventKey.length === 1) {\n                startValue = eventKey;\n            }\n            else {\n                startValue = this.cellEditorInput.getStartValue();\n                if (eventKey !== KeyCode.F2) {\n                    this.highlightAllOnFocus = true;\n                }\n            }\n        }\n        else {\n            this.focusAfterAttached = false;\n            startValue = this.cellEditorInput.getStartValue();\n        }\n        if (startValue != null) {\n            eInput.setStartValue(startValue);\n        }\n        this.addManagedListener(eInput.getGui(), 'keydown', (event) => {\n            const { key } = event;\n            if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {\n                event.preventDefault();\n            }\n        });\n    }\n    afterGuiAttached() {\n        var _a, _b;\n        const translate = this.localeService.getLocaleTextFunc();\n        const eInput = this.eInput;\n        eInput.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n        if (!this.focusAfterAttached) {\n            return;\n        }\n        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input\n        // to be focused before setSelectionRange will work. But it triggers a bug in Safari where\n        // explicitly focusing then blurring an empty field will cause the parent container to scroll.\n        if (!isBrowserSafari()) {\n            eInput.getFocusableElement().focus();\n        }\n        const inputEl = eInput.getInputElement();\n        if (this.highlightAllOnFocus) {\n            inputEl.select();\n        }\n        else {\n            (_b = (_a = this.cellEditorInput).setCaret) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    // gets called when tabbing through cells and in full row edit mode\n    focusIn() {\n        const eInput = this.eInput;\n        const focusEl = eInput.getFocusableElement();\n        const inputEl = eInput.getInputElement();\n        focusEl.focus();\n        inputEl.select();\n    }\n    getValue() {\n        return this.cellEditorInput.getValue();\n    }\n    isPopup() {\n        return false;\n    }\n}\n__decorate([\n    RefSelector('eInput')\n], SimpleCellEditor.prototype, \"eInput\", void 0);\n","import { SimpleCellEditor } from \"./simpleCellEditor.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nclass TextCellEditorInput {\n    getTemplate() {\n        return /* html */ `<ag-input-text-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-text-field>`;\n    }\n    init(eInput, params) {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.maxLength != null) {\n            eInput.setMaxLength(params.maxLength);\n        }\n    }\n    getValue() {\n        const value = this.eInput.getValue();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value);\n    }\n    getStartValue() {\n        const formatValue = this.params.useFormatter || this.params.column.getColDef().refData;\n        return formatValue ? this.params.formatValue(this.params.value) : this.params.value;\n    }\n    setCaret() {\n        // when we started editing, we want the caret at the end, not the start.\n        // this comes into play in two scenarios:\n        //   a) when user hits F2\n        //   b) when user hits a printable character\n        const value = this.eInput.getValue();\n        const len = (exists(value) && value.length) || 0;\n        if (len) {\n            this.eInput.getInputElement().setSelectionRange(len, len);\n        }\n    }\n}\nexport class TextCellEditor extends SimpleCellEditor {\n    constructor() {\n        super(new TextCellEditorInput());\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../../context/context.mjs\";\nimport { Component } from \"../../widgets/component.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nimport { clearElement } from \"../../utils/dom.mjs\";\nconst ARROW_UP = '\\u2191';\nconst ARROW_DOWN = '\\u2193';\nexport class AnimateShowChangeCellRenderer extends Component {\n    constructor() {\n        super(AnimateShowChangeCellRenderer.TEMPLATE);\n        this.refreshCount = 0;\n    }\n    init(params) {\n        // this.params = params;\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\n        this.refresh(params);\n    }\n    showDelta(params, delta) {\n        const absDelta = Math.abs(delta);\n        const valueFormatted = params.formatValue(absDelta);\n        const valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;\n        const deltaUp = (delta >= 0);\n        if (deltaUp) {\n            this.eDelta.innerHTML = ARROW_UP + valueToUse;\n        }\n        else {\n            // because negative, use ABS to remove sign\n            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;\n        }\n        this.eDelta.classList.toggle('ag-value-change-delta-up', deltaUp);\n        this.eDelta.classList.toggle('ag-value-change-delta-down', !deltaUp);\n    }\n    setTimerToRemoveDelta() {\n        // the refreshCount makes sure that if the value updates again while\n        // the below timer is waiting, then the below timer will realise it\n        // is not the most recent and will not try to remove the delta value.\n        this.refreshCount++;\n        const refreshCountCopy = this.refreshCount;\n        window.setTimeout(() => {\n            if (refreshCountCopy === this.refreshCount) {\n                this.hideDeltaValue();\n            }\n        }, 2000);\n    }\n    hideDeltaValue() {\n        this.eValue.classList.remove('ag-value-change-value-highlight');\n        clearElement(this.eDelta);\n    }\n    refresh(params) {\n        const value = params.value;\n        if (value === this.lastValue) {\n            return false;\n        }\n        if (exists(params.valueFormatted)) {\n            this.eValue.innerHTML = params.valueFormatted;\n        }\n        else if (exists(params.value)) {\n            this.eValue.innerHTML = value;\n        }\n        else {\n            clearElement(this.eValue);\n        }\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n        if (typeof value === 'number' && typeof this.lastValue === 'number') {\n            const delta = value - this.lastValue;\n            this.showDelta(params, delta);\n        }\n        // highlight the current value, but only if it's not new, otherwise it\n        // would get highlighted first time the value is shown\n        if (this.lastValue) {\n            this.eValue.classList.add('ag-value-change-value-highlight');\n        }\n        this.setTimerToRemoveDelta();\n        this.lastValue = value;\n        return true;\n    }\n}\nAnimateShowChangeCellRenderer.TEMPLATE = '<span>' +\n    '<span class=\"ag-value-change-delta\"></span>' +\n    '<span class=\"ag-value-change-value\"></span>' +\n    '</span>';\n__decorate([\n    Autowired('filterManager')\n], AnimateShowChangeCellRenderer.prototype, \"filterManager\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../../context/context.mjs\";\nimport { Component } from \"../../widgets/component.mjs\";\nimport { loadTemplate, clearElement } from \"../../utils/dom.mjs\";\nimport { missing, exists } from \"../../utils/generic.mjs\";\nexport class AnimateSlideCellRenderer extends Component {\n    constructor() {\n        super(AnimateSlideCellRenderer.TEMPLATE);\n        this.refreshCount = 0;\n        this.eCurrent = this.queryForHtmlElement('.ag-value-slide-current');\n    }\n    init(params) {\n        this.refresh(params);\n    }\n    addSlideAnimation() {\n        this.refreshCount++;\n        // below we keep checking this, and stop working on the animation\n        // if it no longer matches - this means another animation has started\n        // and this one is stale.\n        const refreshCountCopy = this.refreshCount;\n        // if old animation, remove it\n        if (this.ePrevious) {\n            this.getGui().removeChild(this.ePrevious);\n        }\n        this.ePrevious = loadTemplate('<span class=\"ag-value-slide-previous ag-value-slide-out\"></span>');\n        this.ePrevious.innerHTML = this.eCurrent.innerHTML;\n        this.getGui().insertBefore(this.ePrevious, this.eCurrent);\n        // having timeout of 0 allows use to skip to the next css turn,\n        // so we know the previous css classes have been applied. so the\n        // complex set of setTimeout below creates the animation\n        window.setTimeout(() => {\n            if (refreshCountCopy !== this.refreshCount) {\n                return;\n            }\n            this.ePrevious.classList.add('ag-value-slide-out-end');\n        }, 50);\n        window.setTimeout(() => {\n            if (refreshCountCopy !== this.refreshCount) {\n                return;\n            }\n            this.getGui().removeChild(this.ePrevious);\n            this.ePrevious = null;\n        }, 3000);\n    }\n    refresh(params) {\n        let value = params.value;\n        if (missing(value)) {\n            value = '';\n        }\n        if (value === this.lastValue) {\n            return false;\n        }\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n        this.addSlideAnimation();\n        this.lastValue = value;\n        if (exists(params.valueFormatted)) {\n            this.eCurrent.innerHTML = params.valueFormatted;\n        }\n        else if (exists(params.value)) {\n            this.eCurrent.innerHTML = value;\n        }\n        else {\n            clearElement(this.eCurrent);\n        }\n        return true;\n    }\n}\nAnimateSlideCellRenderer.TEMPLATE = `<span>\n            <span class=\"ag-value-slide-current\"></span>\n        </span>`;\n__decorate([\n    Autowired('filterManager')\n], AnimateSlideCellRenderer.prototype, \"filterManager\", void 0);\n","import { Events } from \"../events.mjs\";\nimport { EventService } from \"../eventService.mjs\";\nimport { debounce } from \"../utils/function.mjs\";\nimport { exists, missing, missingOrEmpty } from \"../utils/generic.mjs\";\nimport { getAllKeysInObjects } from \"../utils/object.mjs\";\nexport class RowNode {\n    constructor(beans) {\n        /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n        this.rowIndex = null;\n        /** The key for the group eg Ireland, UK, USA */\n        this.key = null;\n        /** Children mapped by the pivot columns. */\n        this.childrenMapped = {};\n        /**\n         * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n         */\n        this.displayed = false;\n        /** The row top position in pixels. */\n        this.rowTop = null;\n        /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n         * it is used so new rows can animate in from their old position. */\n        this.oldRowTop = null;\n        /** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n        this.selectable = true;\n        /** Used by sorting service - to give deterministic sort to groups. Previously we\n         * just id for this, however id is a string and had slower sorting compared to numbers. */\n        this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;\n        /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n         * indexed by the Column ID. */\n        this.__autoHeights = {};\n        /** `true` when nodes with the same id are being removed and added as part of the same batch transaction */\n        this.alreadyRendered = false;\n        this.highlighted = null;\n        this.hovered = false;\n        this.selected = false;\n        this.beans = beans;\n    }\n    /**\n     * Replaces the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    setData(data) {\n        this.setDataCommon(data, false);\n    }\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n    /**\n     * Updates the data on the `rowNode`. When this method is called, the grid will refresh the entire rendered row if it is displayed.\n     */\n    updateData(data) {\n        this.setDataCommon(data, true);\n    }\n    setDataCommon(data, update) {\n        const oldData = this.data;\n        this.data = data;\n        this.beans.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n        this.resetQuickFilterAggregateText();\n        const event = this.createDataChangedEvent(data, oldData, update);\n        this.dispatchLocalEvent(event);\n    }\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    updateDataOnDetailNode() {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    }\n    createDataChangedEvent(newData, oldData, update) {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    }\n    createLocalRowEvent(type) {\n        return {\n            type: type,\n            node: this\n        };\n    }\n    getRowIndexString() {\n        if (this.rowPinned === 'top') {\n            return 't-' + this.rowIndex;\n        }\n        if (this.rowPinned === 'bottom') {\n            return 'b-' + this.rowIndex;\n        }\n        return this.rowIndex.toString();\n    }\n    createDaemonNode() {\n        const oldNode = new RowNode(this.beans);\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.__daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n        return oldNode;\n    }\n    setDataAndId(data, id) {\n        const oldNode = exists(this.id) ? this.createDaemonNode() : null;\n        const oldData = this.data;\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.checkRowSelectable();\n        this.beans.selectionService.syncInRowNode(this, oldNode);\n        const event = this.createDataChangedEvent(data, oldData, false);\n        this.dispatchLocalEvent(event);\n    }\n    checkRowSelectable() {\n        const isRowSelectableFunc = this.beans.gridOptionsService.get('isRowSelectable');\n        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);\n    }\n    setRowSelectable(newVal, suppressSelectionUpdate) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n            if (suppressSelectionUpdate) {\n                return;\n            }\n            const isGroupSelectsChildren = this.beans.gridOptionsService.get('groupSelectsChildren');\n            if (isGroupSelectsChildren) {\n                const selected = this.calculateSelectedFromChildren();\n                this.setSelectedParams({\n                    newValue: selected !== null && selected !== void 0 ? selected : false,\n                    source: 'selectableChanged',\n                });\n                return;\n            }\n            // if row is selected but shouldn't be selectable, then deselect.\n            if (this.isSelected() && !this.selectable) {\n                this.setSelectedParams({\n                    newValue: false,\n                    source: 'selectableChanged',\n                });\n            }\n        }\n    }\n    setId(id) {\n        // see if user is providing the id's\n        const getRowIdFunc = this.beans.gridOptionsService.getCallback('getRowId');\n        if (getRowIdFunc) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                // we pass 'true' as we skip this level when generating keys,\n                // as we don't always have the key for this level (eg when updating\n                // data via transaction on SSRM, we are getting key to look up the\n                // RowNode, don't have the RowNode yet, thus no way to get the current key)\n                const parentKeys = this.getGroupKeys(true);\n                this.id = getRowIdFunc({\n                    data: this.data,\n                    parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                    level: this.level\n                });\n                // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that\n                // it has 'startsWith' in case the user provided a number.\n                if (this.id !== null && typeof this.id === 'string' && this.id.startsWith(RowNode.ID_PREFIX_ROW_GROUP)) {\n                    console.error(`AG Grid: Row IDs cannot start with ${RowNode.ID_PREFIX_ROW_GROUP}, this is a reserved prefix for AG Grid's row grouping feature.`);\n                }\n                // force id to be a string\n                if (this.id !== null && typeof this.id !== 'string') {\n                    this.id = '' + this.id;\n                }\n            }\n            else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        }\n        else {\n            this.id = id;\n        }\n    }\n    getGroupKeys(excludeSelf = false) {\n        const keys = [];\n        let pointer = this;\n        if (excludeSelf) {\n            pointer = pointer.parent;\n        }\n        while (pointer && pointer.level >= 0) {\n            keys.push(pointer.key);\n            pointer = pointer.parent;\n        }\n        keys.reverse();\n        return keys;\n    }\n    isPixelInRange(pixel) {\n        if (!exists(this.rowTop) || !exists(this.rowHeight)) {\n            return false;\n        }\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    }\n    setFirstChild(firstChild) {\n        if (this.firstChild === firstChild) {\n            return;\n        }\n        this.firstChild = firstChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    }\n    setLastChild(lastChild) {\n        if (this.lastChild === lastChild) {\n            return;\n        }\n        this.lastChild = lastChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    }\n    setChildIndex(childIndex) {\n        if (this.childIndex === childIndex) {\n            return;\n        }\n        this.childIndex = childIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    }\n    setRowTop(rowTop) {\n        this.oldRowTop = this.rowTop;\n        if (this.rowTop === rowTop) {\n            return;\n        }\n        this.rowTop = rowTop;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n        this.setDisplayed(rowTop !== null);\n    }\n    clearRowTopAndRowIndex() {\n        this.oldRowTop = null;\n        this.setRowTop(null);\n        this.setRowIndex(null);\n    }\n    setDisplayed(displayed) {\n        if (this.displayed === displayed) {\n            return;\n        }\n        this.displayed = displayed;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));\n        }\n    }\n    setDragging(dragging) {\n        if (this.dragging === dragging) {\n            return;\n        }\n        this.dragging = dragging;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    }\n    setHighlighted(highlighted) {\n        if (highlighted === this.highlighted) {\n            return;\n        }\n        this.highlighted = highlighted;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));\n        }\n    }\n    setHovered(hovered) {\n        if (this.hovered === hovered) {\n            return;\n        }\n        this.hovered = hovered;\n    }\n    isHovered() {\n        return this.hovered;\n    }\n    setAllChildrenCount(allChildrenCount) {\n        if (this.allChildrenCount === allChildrenCount) {\n            return;\n        }\n        this.allChildrenCount = allChildrenCount;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    }\n    setMaster(master) {\n        if (this.master === master) {\n            return;\n        }\n        // if changing AWAY from master, then unexpand, otherwise\n        // next time it's shown it is expanded again\n        if (this.master && !master) {\n            this.expanded = false;\n        }\n        this.master = master;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));\n        }\n    }\n    setGroup(group) {\n        if (this.group === group) {\n            return;\n        }\n        // if we used to be a group, and no longer, then close the node\n        if (this.group && !group) {\n            this.expanded = false;\n        }\n        this.group = group;\n        this.updateHasChildren();\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_GROUP_CHANGED));\n        }\n    }\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */\n    setRowHeight(rowHeight, estimated = false) {\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    }\n    setRowAutoHeight(cellHeight, column) {\n        if (!this.__autoHeights) {\n            this.__autoHeights = {};\n        }\n        this.__autoHeights[column.getId()] = cellHeight;\n        if (cellHeight != null) {\n            if (this.checkAutoHeightsDebounced == null) {\n                this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);\n            }\n            this.checkAutoHeightsDebounced();\n        }\n    }\n    checkAutoHeights() {\n        let notAllPresent = false;\n        let nonePresent = true;\n        let newRowHeight = 0;\n        const autoHeights = this.__autoHeights;\n        if (autoHeights == null) {\n            return;\n        }\n        const displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();\n        displayedAutoHeightCols.forEach(col => {\n            let cellHeight = autoHeights[col.getId()];\n            if (cellHeight == null) {\n                // If column spanning is active a column may not provide auto height for a row if that\n                // cell is not present for the given row due to a previous cell spanning over the auto height column.\n                if (this.beans.columnModel.isColSpanActive()) {\n                    let activeColsForRow = [];\n                    switch (col.getPinned()) {\n                        case 'left':\n                            activeColsForRow = this.beans.columnModel.getDisplayedLeftColumnsForRow(this);\n                            break;\n                        case 'right':\n                            activeColsForRow = this.beans.columnModel.getDisplayedRightColumnsForRow(this);\n                            break;\n                        case null:\n                            activeColsForRow = this.beans.columnModel.getViewportCenterColumnsForRow(this);\n                            break;\n                    }\n                    if (activeColsForRow.includes(col)) {\n                        // Column is present in the row, i.e not spanned over, but no auto height was provided so we cannot calculate the row height\n                        notAllPresent = true;\n                        return;\n                    }\n                    // Ignore this column as it is spanned over and not present in the row\n                    cellHeight = -1;\n                }\n                else {\n                    notAllPresent = true;\n                    return;\n                }\n            }\n            else {\n                // At least one auto height is present\n                nonePresent = false;\n            }\n            if (cellHeight > newRowHeight) {\n                newRowHeight = cellHeight;\n            }\n        });\n        if (notAllPresent) {\n            return;\n        }\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n        // this prevents the row starting very small when waiting for async components,\n        // which would then mean the grid squashes in far to many rows (as small heights\n        // means more rows fit in) which looks crap. so best ignore small values and assume\n        // we are still waiting for values to render.\n        if (nonePresent || newRowHeight < 10) {\n            newRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this).height;\n        }\n        if (newRowHeight == this.rowHeight) {\n            return;\n        }\n        this.setRowHeight(newRowHeight);\n        const rowModel = this.beans.rowModel;\n        if (rowModel.onRowHeightChangedDebounced) {\n            rowModel.onRowHeightChangedDebounced();\n        }\n    }\n    setRowIndex(rowIndex) {\n        if (this.rowIndex === rowIndex) {\n            return;\n        }\n        this.rowIndex = rowIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    }\n    setUiLevel(uiLevel) {\n        if (this.uiLevel === uiLevel) {\n            return;\n        }\n        this.uiLevel = uiLevel;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    }\n    /**\n     * Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse.\n     */\n    setExpanded(expanded, e) {\n        if (this.expanded === expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n        const event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {\n            expanded,\n            event: e || null\n        });\n        this.beans.rowNodeEventThrottle.dispatchExpanded(event);\n        // when using footers we need to refresh the group row, as the aggregation\n        // values jump between group and footer\n        if (this.sibling) {\n            this.beans.rowRenderer.refreshCells({ rowNodes: [this] });\n        }\n    }\n    createGlobalRowEvent(type) {\n        return {\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            context: this.beans.gridOptionsService.context,\n            api: this.beans.gridOptionsService.api,\n            columnApi: this.beans.gridOptionsService.columnApi\n        };\n    }\n    dispatchLocalEvent(event) {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `true` if the value was changed, otherwise `false`.\n     */\n    setDataValue(colKey, newValue, eventSource) {\n        const getColumnFromKey = () => {\n            var _a;\n            if (typeof colKey !== 'string') {\n                return colKey;\n            }\n            // if in pivot mode, grid columns wont include primary columns\n            return (_a = this.beans.columnModel.getGridColumn(colKey)) !== null && _a !== void 0 ? _a : this.beans.columnModel.getPrimaryColumn(colKey);\n        };\n        // When it is done via the editors, no 'cell changed' event gets fired, as it's assumed that\n        // the cell knows about the change given it's in charge of the editing.\n        // this method is for the client to call, so the cell listens for the change\n        // event, and also flashes the cell when the change occurs.\n        const column = getColumnFromKey();\n        const oldValue = this.getValueFromValueService(column);\n        if (this.beans.gridOptionsService.get('readOnlyEdit')) {\n            this.dispatchEventForSaveValueReadOnly(column, oldValue, newValue, eventSource);\n            return false;\n        }\n        const valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n        this.checkRowSelectable();\n        return valueChanged;\n    }\n    getValueFromValueService(column) {\n        // if we don't check this, then the grid will render leaf groups as open even if we are not\n        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow\n        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded\n        // them via the API, or user user expanded them in the UI before turning on pivot mode\n        const lockedClosedGroup = this.leafGroup && this.beans.columnModel.isPivotMode();\n        const isOpenGroup = this.group && this.expanded && !this.footer && !lockedClosedGroup;\n        // are we showing group footers\n        const getGroupIncludeFooter = this.beans.gridOptionsService.getGroupIncludeFooter();\n        const groupFootersEnabled = getGroupIncludeFooter({ node: this });\n        // if doing footers, we normally don't show agg data at group level when group is open\n        const groupAlwaysShowAggData = this.beans.gridOptionsService.get('groupSuppressBlankHeader');\n        // if doing grouping and footers, we don't want to include the agg value\n        // in the header when the group is open\n        const ignoreAggData = (isOpenGroup && groupFootersEnabled) && !groupAlwaysShowAggData;\n        const value = this.beans.valueService.getValue(column, this, false, ignoreAggData);\n        return value;\n    }\n    dispatchEventForSaveValueReadOnly(column, oldValue, newValue, eventSource) {\n        const event = {\n            type: Events.EVENT_CELL_EDIT_REQUEST,\n            event: null,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            column: column,\n            colDef: column.getColDef(),\n            context: this.beans.gridOptionsService.context,\n            api: this.beans.gridOptionsService.api,\n            columnApi: this.beans.gridOptionsService.columnApi,\n            data: this.data,\n            node: this,\n            oldValue,\n            newValue,\n            value: newValue,\n            source: eventSource\n        };\n        this.beans.eventService.dispatchEvent(event);\n    }\n    setGroupValue(colKey, newValue) {\n        const column = this.beans.columnModel.getGridColumn(colKey);\n        if (missing(this.groupData)) {\n            this.groupData = {};\n        }\n        const columnId = column.getColId();\n        const oldValue = this.groupData[columnId];\n        if (oldValue === newValue) {\n            return;\n        }\n        this.groupData[columnId] = newValue;\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    }\n    // sets the data for an aggregation\n    setAggData(newAggData) {\n        // find out all keys that could potentially change\n        const colIds = getAllKeysInObjects([this.aggData, newAggData]);\n        const oldAggData = this.aggData;\n        this.aggData = newAggData;\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            colIds.forEach(colId => {\n                const value = this.aggData ? this.aggData[colId] : undefined;\n                const oldValue = oldAggData ? oldAggData[colId] : undefined;\n                if (value === oldValue) {\n                    return;\n                }\n                // do a quick lookup - despite the event it's possible the column no longer exists\n                const column = this.beans.columnModel.lookupGridColumn(colId);\n                if (!column) {\n                    return;\n                }\n                this.dispatchCellChangedEvent(column, value, oldValue);\n            });\n        }\n    }\n    updateHasChildren() {\n        // in CSRM, the group property will be set before the childrenAfterGroup property, check both to prevent flickering\n        let newValue = (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n        const isSsrm = this.beans.gridOptionsService.isRowModelType('serverSide');\n        if (isSsrm) {\n            const isTreeData = this.beans.gridOptionsService.get('treeData');\n            const isGroupFunc = this.beans.gridOptionsService.get('isServerSideGroup');\n            // stubs and footers can never have children, as they're grid rows. if tree data the presence of children\n            // is determined by the isServerSideGroup callback, if not tree data then the rows group property will be set.\n            newValue = !this.stub && !this.footer && (isTreeData ? !!isGroupFunc && isGroupFunc(this.data) : !!this.group);\n        }\n        if (newValue !== this.__hasChildren) {\n            this.__hasChildren = !!newValue;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));\n            }\n        }\n    }\n    hasChildren() {\n        if (this.__hasChildren == null) {\n            this.updateHasChildren();\n        }\n        return this.__hasChildren;\n    }\n    isEmptyRowGroupNode() {\n        return this.group && missingOrEmpty(this.childrenAfterGroup);\n    }\n    dispatchCellChangedEvent(column, newValue, oldValue) {\n        const cellChangedEvent = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue,\n            oldValue: oldValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    }\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`. */\n    resetQuickFilterAggregateText() {\n        this.quickFilterAggregateText = null;\n    }\n    /** Returns:\n    * - `true` if the node can be expanded, i.e it is a group or master row.\n    * - `false` if the node cannot be expanded\n    */\n    isExpandable() {\n        if (this.footer) {\n            return false;\n        }\n        if (this.beans.columnModel.isPivotMode()) {\n            // master detail and leaf groups aren't expandable in pivot mode.\n            return this.hasChildren() && !this.leafGroup;\n        }\n        return this.hasChildren() || !!this.master;\n    }\n    /** Returns:\n     * - `true` if node is selected,\n     * - `false` if the node isn't selected\n     * - `undefined` if it's partially selected (group where not all children are selected). */\n    isSelected() {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) {\n            return this.sibling.isSelected();\n        }\n        return this.selected;\n    }\n    /** Perform a depth-first search of this node and its children. */\n    depthFirstSearch(callback) {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(child => child.depthFirstSearch(callback));\n        }\n        callback(this);\n    }\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    calculateSelectedFromChildren() {\n        var _a;\n        let atLeastOneSelected = false;\n        let atLeastOneDeSelected = false;\n        let atLeastOneMixed = false;\n        if (!((_a = this.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {\n            return this.selectable ? this.selected : null;\n        }\n        for (let i = 0; i < this.childrenAfterGroup.length; i++) {\n            const child = this.childrenAfterGroup[i];\n            let childState = child.isSelected();\n            // non-selectable nodes must be calculated from their children, or ignored if no value results.\n            if (!child.selectable) {\n                const selectable = child.calculateSelectedFromChildren();\n                if (selectable === null) {\n                    continue;\n                }\n                childState = selectable;\n            }\n            switch (childState) {\n                case true:\n                    atLeastOneSelected = true;\n                    break;\n                case false:\n                    atLeastOneDeSelected = true;\n                    break;\n                default:\n                    atLeastOneMixed = true;\n                    break;\n            }\n        }\n        if (atLeastOneMixed || (atLeastOneSelected && atLeastOneDeSelected)) {\n            return undefined;\n        }\n        if (atLeastOneSelected) {\n            return true;\n        }\n        if (atLeastOneDeSelected) {\n            return false;\n        }\n        if (!this.selectable) {\n            return null;\n        }\n        return this.selected;\n    }\n    setSelectedInitialValue(selected) {\n        this.selected = selected;\n    }\n    selectThisNode(newValue, e, source = 'api') {\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n        const selectionNotAllowed = !this.selectable && newValue;\n        const selectionNotChanged = this.selected === newValue;\n        if (selectionNotAllowed || selectionNotChanged) {\n            return false;\n        }\n        this.selected = newValue;\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n            const sibling = this.sibling;\n            if (sibling && sibling.footer) {\n                sibling.dispatchLocalEvent(sibling.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n            }\n        }\n        const event = Object.assign(Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED)), { event: e || null, source });\n        this.beans.eventService.dispatchEvent(event);\n        return true;\n    }\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\n     * @param source - Source property that will appear in the `selectionChanged` event.\n     */\n    setSelected(newValue, clearSelection = false, source = 'api') {\n        if (typeof source === 'boolean') {\n            console.warn('AG Grid: since version v30, rowNode.setSelected() property `suppressFinishActions` has been removed, please use `gridApi.setNodesSelected()` for bulk actions, and the event `source` property for ignoring events instead.');\n            return;\n        }\n        this.setSelectedParams({\n            newValue,\n            clearSelection,\n            rangeSelect: false,\n            source\n        });\n    }\n    // this is for internal use only. To make calling code more readable, this is the same method as setSelected except it takes names parameters\n    setSelectedParams(params) {\n        if (this.rowPinned) {\n            console.warn('AG Grid: cannot select pinned rows');\n            return 0;\n        }\n        if (this.id === undefined) {\n            console.warn('AG Grid: cannot select node until id for node is known');\n            return 0;\n        }\n        return this.beans.selectionService.setNodesSelected(Object.assign(Object.assign({}, params), { nodes: [this.footer ? this.sibling : this] }));\n    }\n    /**\n     * Returns:\n     * - `true` if node is either pinned to the `top` or `bottom`\n     * - `false` if the node isn't pinned\n     */\n    isRowPinned() {\n        return this.rowPinned === 'top' || this.rowPinned === 'bottom';\n    }\n    isParentOfNode(potentialParent) {\n        let parentNode = this.parent;\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n        return false;\n    }\n    /** Add an event listener. */\n    addEventListener(eventType, listener) {\n        if (!this.eventService) {\n            this.eventService = new EventService();\n        }\n        this.eventService.addEventListener(eventType, listener);\n    }\n    /** Remove event listener. */\n    removeEventListener(eventType, listener) {\n        if (!this.eventService) {\n            return;\n        }\n        this.eventService.removeEventListener(eventType, listener);\n        if (this.eventService.noRegisteredListenersExist()) {\n            this.eventService = null;\n        }\n    }\n    onMouseEnter() {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    }\n    onMouseLeave() {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    }\n    getFirstChildOfFirstChild(rowGroupColumn) {\n        let currentRowNode = this;\n        let isCandidate = true;\n        let foundFirstChildPath = false;\n        let nodeToSwapIn = null;\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        while (isCandidate && !foundFirstChildPath) {\n            const parentRowNode = currentRowNode.parent;\n            const firstChild = exists(parentRowNode) && currentRowNode.firstChild;\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            }\n            else {\n                isCandidate = false;\n            }\n            currentRowNode = parentRowNode;\n        }\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    }\n    /**\n     * Returns:\n     * - `true` if the node is a full width cell\n     * - `false` if the node is not a full width cell\n     */\n    isFullWidthCell() {\n        if (this.detail) {\n            return true;\n        }\n        const isFullWidthCellFunc = this.beans.gridOptionsService.getCallback('isFullWidthRow');\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;\n    }\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    getRoute() {\n        if (this.key == null) {\n            return;\n        }\n        const res = [];\n        let pointer = this;\n        while (pointer.key != null) {\n            res.push(pointer.key);\n            pointer = pointer.parent;\n        }\n        return res.reverse();\n    }\n    createFooter() {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (this.sibling) {\n            return;\n        }\n        // we don't copy these properties as they cause the footer node\n        // to have properties which should be unique to the row.\n        const ignoredProperties = new Set([\n            'eventService',\n            '__objectId',\n            'sticky',\n        ]);\n        const footerNode = new RowNode(this.beans);\n        Object.keys(this).forEach(key => {\n            if (ignoredProperties.has(key)) {\n                return;\n            }\n            footerNode[key] = this[key];\n        });\n        footerNode.footer = true;\n        footerNode.setRowTop(null);\n        footerNode.setRowIndex(null);\n        // manually set oldRowTop to null so we discard any\n        // previous information about its position.\n        footerNode.oldRowTop = null;\n        footerNode.id = 'rowGroupFooter_' + this.id;\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = this;\n        this.sibling = footerNode;\n    }\n    // Only used by SSRM. In CSRM this is never used as footers should always be present for\n    // the purpose of exporting collapsed groups. In SSRM it is not possible to export collapsed\n    // groups anyway, so can destroy footers.\n    destroyFooter() {\n        if (!this.sibling) {\n            return;\n        }\n        this.sibling.setRowTop(null);\n        this.sibling.setRowIndex(null);\n        this.sibling = undefined;\n    }\n}\nRowNode.ID_PREFIX_ROW_GROUP = 'row-group-';\nRowNode.ID_PREFIX_TOP_PINNED = 't-';\nRowNode.ID_PREFIX_BOTTOM_PINNED = 'b-';\nRowNode.OBJECT_ID_SEQUENCE = 0;\nRowNode.EVENT_ROW_SELECTED = 'rowSelected';\nRowNode.EVENT_DATA_CHANGED = 'dataChanged';\nRowNode.EVENT_CELL_CHANGED = 'cellChanged';\nRowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\nRowNode.EVENT_MASTER_CHANGED = 'masterChanged';\nRowNode.EVENT_GROUP_CHANGED = 'groupChanged';\nRowNode.EVENT_MOUSE_ENTER = 'mouseEnter';\nRowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';\nRowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';\nRowNode.EVENT_TOP_CHANGED = 'topChanged';\nRowNode.EVENT_DISPLAYED_CHANGED = 'displayedChanged';\nRowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\nRowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\nRowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\nRowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\nRowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';\nRowNode.EVENT_HAS_CHILDREN_CHANGED = 'hasChildrenChanged';\nRowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';\nRowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\nRowNode.EVENT_HIGHLIGHT_CHANGED = 'rowHighlightChanged';\nRowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct } from '../context/context.mjs';\nimport { Component } from '../widgets/component.mjs';\nimport { Events } from '../events.mjs';\nimport { RefSelector } from '../widgets/componentAnnotations.mjs';\nimport { RowNode } from '../entities/rowNode.mjs';\nimport { stopPropagationForAgGrid } from '../utils/event.mjs';\nimport { getAriaCheckboxStateName, setAriaLive } from '../utils/aria.mjs';\nexport class CheckboxSelectionComponent extends Component {\n    constructor() {\n        super(/* html*/ `\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`);\n    }\n    postConstruct() {\n        this.eCheckbox.setPassive(true);\n        setAriaLive(this.eCheckbox.getInputElement(), 'polite');\n    }\n    getCheckboxId() {\n        return this.eCheckbox.getInputElement().id;\n    }\n    onDataChanged() {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n    onSelectableChanged() {\n        this.showOrHideSelect();\n    }\n    onSelectionChanged() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const state = this.rowNode.isSelected();\n        const stateName = getAriaCheckboxStateName(translate, state);\n        const ariaLabel = translate('ariaRowToggleSelection', 'Press Space to toggle row selection');\n        this.eCheckbox.setValue(state, true);\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\n    }\n    onClicked(newValue, groupSelectsFiltered, event) {\n        return this.rowNode.setSelectedParams({ newValue, rangeSelect: event.shiftKey, groupSelectsFiltered, event, source: 'checkboxSelected' });\n    }\n    init(params) {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n        this.overrides = params.overrides;\n        this.onSelectionChanged();\n        // we don't want double click on this icon to open a group\n        this.addManagedListener(this.eCheckbox.getInputElement(), 'dblclick', (event) => {\n            stopPropagationForAgGrid(event);\n        });\n        this.addManagedListener(this.eCheckbox.getInputElement(), 'click', (event) => {\n            // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n            // would possibly get selected twice\n            stopPropagationForAgGrid(event);\n            const groupSelectsFiltered = this.gridOptionsService.get('groupSelectsFiltered');\n            const isSelected = this.eCheckbox.getValue();\n            if (this.shouldHandleIndeterminateState(isSelected, groupSelectsFiltered)) {\n                // try toggling children to determine action.\n                const result = this.onClicked(true, groupSelectsFiltered, event || {});\n                if (result === 0) {\n                    this.onClicked(false, groupSelectsFiltered, event);\n                }\n            }\n            else if (isSelected) {\n                this.onClicked(false, groupSelectsFiltered, event);\n            }\n            else {\n                this.onClicked(true, groupSelectsFiltered, event || {});\n            }\n        });\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n        const isRowSelectableFunc = this.gridOptionsService.get('isRowSelectable');\n        const checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === 'function';\n        if (checkboxVisibleIsDynamic) {\n            const showOrHideSelectListener = this.showOrHideSelect.bind(this);\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);\n            this.showOrHideSelect();\n        }\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\n    }\n    shouldHandleIndeterminateState(isSelected, groupSelectsFiltered) {\n        // for CSRM groupSelectsFiltered, we can get an indeterminate state where all filtered children are selected,\n        // and we would expect clicking to deselect all rather than select all\n        return groupSelectsFiltered &&\n            (this.eCheckbox.getPreviousValue() === undefined || isSelected === undefined) &&\n            this.gridOptionsService.isRowModelType('clientSide');\n    }\n    showOrHideSelect() {\n        var _a, _b, _c, _d;\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        const isVisible = this.getIsVisible();\n        if (selectable) {\n            if (typeof isVisible === 'function') {\n                const extraParams = (_a = this.overrides) === null || _a === void 0 ? void 0 : _a.callbackParams;\n                const params = (_b = this.column) === null || _b === void 0 ? void 0 : _b.createColumnFunctionCallbackParams(this.rowNode);\n                selectable = params ? isVisible(Object.assign(Object.assign({}, extraParams), params)) : false;\n            }\n            else {\n                selectable = isVisible !== null && isVisible !== void 0 ? isVisible : false;\n            }\n        }\n        const disableInsteadOfHide = (_c = this.column) === null || _c === void 0 ? void 0 : _c.getColDef().showDisabledCheckboxes;\n        if (disableInsteadOfHide) {\n            this.eCheckbox.setDisabled(!selectable);\n            this.setVisible(true);\n            this.setDisplayed(true);\n            return;\n        }\n        if ((_d = this.overrides) === null || _d === void 0 ? void 0 : _d.removeHidden) {\n            this.setDisplayed(selectable);\n            return;\n        }\n        this.setVisible(selectable);\n    }\n    getIsVisible() {\n        var _a, _b;\n        if (this.overrides) {\n            return this.overrides.isVisible;\n        }\n        // column will be missing if groupDisplayType = 'groupRows'\n        return (_b = (_a = this.column) === null || _a === void 0 ? void 0 : _a.getColDef()) === null || _b === void 0 ? void 0 : _b.checkboxSelection;\n    }\n}\n__decorate([\n    RefSelector('eCheckbox')\n], CheckboxSelectionComponent.prototype, \"eCheckbox\", void 0);\n__decorate([\n    PostConstruct\n], CheckboxSelectionComponent.prototype, \"postConstruct\", null);\n","export var VerticalDirection;\n(function (VerticalDirection) {\n    VerticalDirection[VerticalDirection[\"Up\"] = 0] = \"Up\";\n    VerticalDirection[VerticalDirection[\"Down\"] = 1] = \"Down\";\n})(VerticalDirection || (VerticalDirection = {}));\nexport var HorizontalDirection;\n(function (HorizontalDirection) {\n    HorizontalDirection[HorizontalDirection[\"Left\"] = 0] = \"Left\";\n    HorizontalDirection[HorizontalDirection[\"Right\"] = 1] = \"Right\";\n})(HorizontalDirection || (HorizontalDirection = {}));\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar DragAndDropService_1;\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { PostConstruct, Bean, Autowired, PreDestroy } from \"../context/context.mjs\";\nimport { escapeString } from \"../utils/string.mjs\";\nimport { createIcon } from \"../utils/icon.mjs\";\nimport { flatten, removeFromArray } from \"../utils/array.mjs\";\nimport { getBodyHeight, getBodyWidth } from \"../utils/browser.mjs\";\nimport { loadTemplate, clearElement, getElementRectWithOffset } from \"../utils/dom.mjs\";\nimport { isFunction } from \"../utils/function.mjs\";\nimport { HorizontalDirection, VerticalDirection } from \"../constants/direction.mjs\";\nexport var DragSourceType;\n(function (DragSourceType) {\n    DragSourceType[DragSourceType[\"ToolPanel\"] = 0] = \"ToolPanel\";\n    DragSourceType[DragSourceType[\"HeaderCell\"] = 1] = \"HeaderCell\";\n    DragSourceType[DragSourceType[\"RowDrag\"] = 2] = \"RowDrag\";\n    DragSourceType[DragSourceType[\"ChartPanel\"] = 3] = \"ChartPanel\";\n    DragSourceType[DragSourceType[\"AdvancedFilterBuilder\"] = 4] = \"AdvancedFilterBuilder\";\n})(DragSourceType || (DragSourceType = {}));\nlet DragAndDropService = DragAndDropService_1 = class DragAndDropService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.dragSourceAndParamsList = [];\n        this.dropTargets = [];\n    }\n    init() {\n        this.ePinnedIcon = createIcon('columnMovePin', this.gridOptionsService, null);\n        this.eHideIcon = createIcon('columnMoveHide', this.gridOptionsService, null);\n        this.eMoveIcon = createIcon('columnMoveMove', this.gridOptionsService, null);\n        this.eLeftIcon = createIcon('columnMoveLeft', this.gridOptionsService, null);\n        this.eRightIcon = createIcon('columnMoveRight', this.gridOptionsService, null);\n        this.eGroupIcon = createIcon('columnMoveGroup', this.gridOptionsService, null);\n        this.eAggregateIcon = createIcon('columnMoveValue', this.gridOptionsService, null);\n        this.ePivotIcon = createIcon('columnMovePivot', this.gridOptionsService, null);\n        this.eDropNotAllowedIcon = createIcon('dropNotAllowed', this.gridOptionsService, null);\n    }\n    addDragSource(dragSource, allowTouch = false) {\n        const params = {\n            eElement: dragSource.eElement,\n            dragStartPixels: dragSource.dragStartPixels,\n            onDragStart: this.onDragStart.bind(this, dragSource),\n            onDragStop: this.onDragStop.bind(this),\n            onDragging: this.onDragging.bind(this),\n            includeTouch: allowTouch\n        };\n        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });\n        this.dragService.addDragSource(params);\n    }\n    removeDragSource(dragSource) {\n        const sourceAndParams = this.dragSourceAndParamsList.find(item => item.dragSource === dragSource);\n        if (sourceAndParams) {\n            this.dragService.removeDragSource(sourceAndParams.params);\n            removeFromArray(this.dragSourceAndParamsList, sourceAndParams);\n        }\n    }\n    clearDragSourceParamsList() {\n        this.dragSourceAndParamsList.forEach(sourceAndParams => this.dragService.removeDragSource(sourceAndParams.params));\n        this.dragSourceAndParamsList.length = 0;\n        this.dropTargets.length = 0;\n    }\n    nudge() {\n        if (this.dragging) {\n            this.onDragging(this.eventLastTime, true);\n        }\n    }\n    onDragStart(dragSource, mouseEvent) {\n        this.dragging = true;\n        this.dragSource = dragSource;\n        this.eventLastTime = mouseEvent;\n        this.dragItem = this.dragSource.getDragItem();\n        this.lastDropTarget = this.dragSource.dragSourceDropTarget;\n        if (this.dragSource.onDragStarted) {\n            this.dragSource.onDragStarted();\n        }\n        this.createGhost();\n    }\n    onDragStop(mouseEvent) {\n        this.eventLastTime = null;\n        this.dragging = false;\n        if (this.dragSource.onDragStopped) {\n            this.dragSource.onDragStopped();\n        }\n        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {\n            const draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);\n            this.lastDropTarget.onDragStop(draggingEvent);\n        }\n        this.lastDropTarget = null;\n        this.dragItem = null;\n        this.removeGhost();\n    }\n    onDragging(mouseEvent, fromNudge) {\n        var _a, _b, _c, _d;\n        const hDirection = this.getHorizontalDirection(mouseEvent);\n        const vDirection = this.getVerticalDirection(mouseEvent);\n        this.eventLastTime = mouseEvent;\n        this.positionGhost(mouseEvent);\n        // check if mouseEvent intersects with any of the drop targets\n        const validDropTargets = this.dropTargets.filter(target => this.isMouseOnDropTarget(mouseEvent, target));\n        const dropTarget = this.findCurrentDropTarget(mouseEvent, validDropTargets);\n        if (dropTarget !== this.lastDropTarget) {\n            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);\n            if (this.lastDropTarget !== null && dropTarget === null) {\n                (_b = (_a = this.dragSource).onGridExit) === null || _b === void 0 ? void 0 : _b.call(_a, this.dragItem);\n            }\n            if (this.lastDropTarget === null && dropTarget !== null) {\n                (_d = (_c = this.dragSource).onGridEnter) === null || _d === void 0 ? void 0 : _d.call(_c, this.dragItem);\n            }\n            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            this.lastDropTarget = dropTarget;\n        }\n        else if (dropTarget && dropTarget.onDragging) {\n            const draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            dropTarget.onDragging(draggingEvent);\n        }\n    }\n    getAllContainersFromDropTarget(dropTarget) {\n        const secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;\n        const containers = [[dropTarget.getContainer()]];\n        return secondaryContainers ? containers.concat(secondaryContainers) : containers;\n    }\n    allContainersIntersect(mouseEvent, containers) {\n        for (const container of containers) {\n            const rect = container.getBoundingClientRect();\n            // if element is not visible, then width and height are zero\n            if (rect.width === 0 || rect.height === 0) {\n                return false;\n            }\n            const horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;\n            const verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;\n            if (!horizontalFit || !verticalFit) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers\n    isMouseOnDropTarget(mouseEvent, dropTarget) {\n        const allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);\n        let mouseOverTarget = false;\n        for (const currentContainers of allContainersFromDropTarget) {\n            if (this.allContainersIntersect(mouseEvent, currentContainers)) {\n                mouseOverTarget = true;\n                break;\n            }\n        }\n        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) {\n            return false;\n        }\n        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);\n    }\n    findCurrentDropTarget(mouseEvent, validDropTargets) {\n        const len = validDropTargets.length;\n        if (len === 0) {\n            return null;\n        }\n        if (len === 1) {\n            return validDropTargets[0];\n        }\n        const rootNode = this.gridOptionsService.getRootNode();\n        // elementsFromPoint return a list of elements under\n        // the mouseEvent sorted from topMost to bottomMost\n        const elementStack = rootNode.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY);\n        // loop over the sorted elementStack to find which dropTarget comes first\n        for (const el of elementStack) {\n            for (const dropTarget of validDropTargets) {\n                const containers = flatten(this.getAllContainersFromDropTarget(dropTarget));\n                if (containers.indexOf(el) !== -1) {\n                    return dropTarget;\n                }\n            }\n        }\n        // we should never hit this point of the code because only\n        // valid dropTargets should be provided to this method.\n        return null;\n    }\n    enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {\n        if (!dropTarget) {\n            return;\n        }\n        if (dropTarget.onDragEnter) {\n            const dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            dropTarget.onDragEnter(dragEnterEvent);\n        }\n        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);\n    }\n    leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge) {\n        if (!this.lastDropTarget) {\n            return;\n        }\n        if (this.lastDropTarget.onDragLeave) {\n            const dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            this.lastDropTarget.onDragLeave(dragLeaveEvent);\n        }\n        this.setGhostIcon(null);\n    }\n    addDropTarget(dropTarget) {\n        this.dropTargets.push(dropTarget);\n    }\n    removeDropTarget(dropTarget) {\n        this.dropTargets = this.dropTargets.filter(target => target.getContainer() !== dropTarget.getContainer());\n    }\n    hasExternalDropZones() {\n        return this.dropTargets.some(zones => zones.external);\n    }\n    findExternalZone(params) {\n        const externalTargets = this.dropTargets.filter(target => target.external);\n        return externalTargets.find(zone => zone.getContainer() === params.getContainer()) || null;\n    }\n    getHorizontalDirection(event) {\n        const clientX = this.eventLastTime && this.eventLastTime.clientX;\n        const eClientX = event.clientX;\n        if (clientX === eClientX) {\n            return null;\n        }\n        return clientX > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;\n    }\n    getVerticalDirection(event) {\n        const clientY = this.eventLastTime && this.eventLastTime.clientY;\n        const eClientY = event.clientY;\n        if (clientY === eClientY) {\n            return null;\n        }\n        return clientY > eClientY ? VerticalDirection.Up : VerticalDirection.Down;\n    }\n    createDropTargetEvent(dropTarget, event, hDirection, vDirection, fromNudge) {\n        // localise x and y to the target\n        const dropZoneTarget = dropTarget.getContainer();\n        const rect = dropZoneTarget.getBoundingClientRect();\n        const { gridApi: api, columnApi, dragItem, dragSource } = this;\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem: dragItem, api, columnApi, dropZoneTarget };\n    }\n    positionGhost(event) {\n        const ghost = this.eGhost;\n        if (!ghost) {\n            return;\n        }\n        const ghostRect = ghost.getBoundingClientRect();\n        const ghostHeight = ghostRect.height;\n        const browserWidth = getBodyWidth() - 2; // 2px for 1px borderLeft and 1px borderRight\n        const browserHeight = getBodyHeight() - 2; // 2px for 1px borderTop and 1px borderBottom\n        const offsetParentSize = getElementRectWithOffset(ghost.offsetParent);\n        const { clientY, clientX } = event;\n        let top = (clientY - offsetParentSize.top) - (ghostHeight / 2);\n        let left = (clientX - offsetParentSize.left) - 10;\n        const eDocument = this.gridOptionsService.getDocument();\n        const win = (eDocument.defaultView || window);\n        const windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;\n        const windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;\n        // check ghost is not positioned outside of the browser\n        if (browserWidth > 0 && ((left + ghost.clientWidth) > (browserWidth + windowScrollX))) {\n            left = browserWidth + windowScrollX - ghost.clientWidth;\n        }\n        if (left < 0) {\n            left = 0;\n        }\n        if (browserHeight > 0 && ((top + ghost.clientHeight) > (browserHeight + windowScrollY))) {\n            top = browserHeight + windowScrollY - ghost.clientHeight;\n        }\n        if (top < 0) {\n            top = 0;\n        }\n        ghost.style.left = `${left}px`;\n        ghost.style.top = `${top}px`;\n    }\n    removeGhost() {\n        if (this.eGhost && this.eGhostParent) {\n            this.eGhostParent.removeChild(this.eGhost);\n        }\n        this.eGhost = null;\n    }\n    createGhost() {\n        this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);\n        this.mouseEventService.stampTopLevelGridCompWithGridInstance(this.eGhost);\n        const { theme } = this.environment.getTheme();\n        if (theme) {\n            this.eGhost.classList.add(theme);\n        }\n        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon');\n        this.setGhostIcon(null);\n        const eText = this.eGhost.querySelector('.ag-dnd-ghost-label');\n        let dragItemName = this.dragSource.dragItemName;\n        if (isFunction(dragItemName)) {\n            dragItemName = dragItemName();\n        }\n        eText.innerHTML = escapeString(dragItemName) || '';\n        this.eGhost.style.height = '25px';\n        this.eGhost.style.top = '20px';\n        this.eGhost.style.left = '20px';\n        const eDocument = this.gridOptionsService.getDocument();\n        let rootNode = null;\n        let targetEl = null;\n        try {\n            rootNode = eDocument.fullscreenElement;\n        }\n        catch (e) {\n            // some environments like SalesForce will throw errors\n            // simply by trying to read the fullscreenElement property\n        }\n        finally {\n            if (!rootNode) {\n                rootNode = this.gridOptionsService.getRootNode();\n            }\n            const body = rootNode.querySelector('body');\n            if (body) {\n                targetEl = body;\n            }\n            else if (rootNode instanceof ShadowRoot) {\n                targetEl = rootNode;\n            }\n            else if (rootNode instanceof Document) {\n                targetEl = rootNode === null || rootNode === void 0 ? void 0 : rootNode.documentElement;\n            }\n            else {\n                targetEl = rootNode;\n            }\n        }\n        this.eGhostParent = targetEl;\n        if (!this.eGhostParent) {\n            console.warn('AG Grid: could not find document body, it is needed for dragging columns');\n        }\n        else {\n            this.eGhostParent.appendChild(this.eGhost);\n        }\n    }\n    setGhostIcon(iconName, shake = false) {\n        clearElement(this.eGhostIcon);\n        let eIcon = null;\n        if (!iconName) {\n            iconName = this.dragSource.getDefaultIconName ? this.dragSource.getDefaultIconName() : DragAndDropService_1.ICON_NOT_ALLOWED;\n        }\n        switch (iconName) {\n            case DragAndDropService_1.ICON_PINNED:\n                eIcon = this.ePinnedIcon;\n                break;\n            case DragAndDropService_1.ICON_MOVE:\n                eIcon = this.eMoveIcon;\n                break;\n            case DragAndDropService_1.ICON_LEFT:\n                eIcon = this.eLeftIcon;\n                break;\n            case DragAndDropService_1.ICON_RIGHT:\n                eIcon = this.eRightIcon;\n                break;\n            case DragAndDropService_1.ICON_GROUP:\n                eIcon = this.eGroupIcon;\n                break;\n            case DragAndDropService_1.ICON_AGGREGATE:\n                eIcon = this.eAggregateIcon;\n                break;\n            case DragAndDropService_1.ICON_PIVOT:\n                eIcon = this.ePivotIcon;\n                break;\n            case DragAndDropService_1.ICON_NOT_ALLOWED:\n                eIcon = this.eDropNotAllowedIcon;\n                break;\n            case DragAndDropService_1.ICON_HIDE:\n                eIcon = this.eHideIcon;\n                break;\n        }\n        this.eGhostIcon.classList.toggle('ag-shake-left-to-right', shake);\n        if (eIcon === this.eHideIcon && this.gridOptionsService.get('suppressDragLeaveHidesColumns')) {\n            return;\n        }\n        if (eIcon) {\n            this.eGhostIcon.appendChild(eIcon);\n        }\n    }\n};\nDragAndDropService.ICON_PINNED = 'pinned';\nDragAndDropService.ICON_MOVE = 'move';\nDragAndDropService.ICON_LEFT = 'left';\nDragAndDropService.ICON_RIGHT = 'right';\nDragAndDropService.ICON_GROUP = 'group';\nDragAndDropService.ICON_AGGREGATE = 'aggregate';\nDragAndDropService.ICON_PIVOT = 'pivot';\nDragAndDropService.ICON_NOT_ALLOWED = 'notAllowed';\nDragAndDropService.ICON_HIDE = 'hide';\nDragAndDropService.GHOST_TEMPLATE = `<div class=\"ag-dnd-ghost ag-unselectable\">\n            <span class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\n            <div class=\"ag-dnd-ghost-label\"></div>\n        </div>`;\n__decorate([\n    Autowired('dragService')\n], DragAndDropService.prototype, \"dragService\", void 0);\n__decorate([\n    Autowired('mouseEventService')\n], DragAndDropService.prototype, \"mouseEventService\", void 0);\n__decorate([\n    Autowired('columnApi')\n], DragAndDropService.prototype, \"columnApi\", void 0);\n__decorate([\n    Autowired('gridApi')\n], DragAndDropService.prototype, \"gridApi\", void 0);\n__decorate([\n    PostConstruct\n], DragAndDropService.prototype, \"init\", null);\n__decorate([\n    PreDestroy\n], DragAndDropService.prototype, \"clearDragSourceParamsList\", null);\nDragAndDropService = DragAndDropService_1 = __decorate([\n    Bean('dragAndDropService')\n], DragAndDropService);\nexport { DragAndDropService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../../widgets/component.mjs\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context.mjs\";\nimport { RowNode } from \"../../entities/rowNode.mjs\";\nimport { DragSourceType } from \"../../dragAndDrop/dragAndDropService.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { createIconNoSpan } from \"../../utils/icon.mjs\";\nimport { isFunction, warnOnce } from \"../../utils/function.mjs\";\nexport class RowDragComp extends Component {\n    constructor(cellValueFn, rowNode, column, customGui, dragStartPixels, suppressVisibilityChange) {\n        super();\n        this.cellValueFn = cellValueFn;\n        this.rowNode = rowNode;\n        this.column = column;\n        this.customGui = customGui;\n        this.dragStartPixels = dragStartPixels;\n        this.suppressVisibilityChange = suppressVisibilityChange;\n        this.dragSource = null;\n    }\n    isCustomGui() {\n        return this.customGui != null;\n    }\n    postConstruct() {\n        if (!this.customGui) {\n            this.setTemplate(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\n            this.getGui().appendChild(createIconNoSpan('rowDrag', this.gridOptionsService, null));\n            this.addDragSource();\n        }\n        else {\n            this.setDragElement(this.customGui, this.dragStartPixels);\n        }\n        this.checkCompatibility();\n        if (!this.suppressVisibilityChange) {\n            const strategy = this.gridOptionsService.get('rowDragManaged') ?\n                new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n                new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n            this.createManagedBean(strategy, this.beans.context);\n        }\n    }\n    setDragElement(dragElement, dragStartPixels) {\n        this.setTemplateFromElement(dragElement);\n        this.addDragSource(dragStartPixels);\n    }\n    getSelectedNodes() {\n        const isRowDragMultiRow = this.gridOptionsService.get('rowDragMultiRow');\n        if (!isRowDragMultiRow) {\n            return [this.rowNode];\n        }\n        const selection = this.beans.selectionService.getSelectedNodes();\n        return selection.indexOf(this.rowNode) !== -1 ? selection : [this.rowNode];\n    }\n    // returns true if all compatibility items work out\n    checkCompatibility() {\n        const managed = this.gridOptionsService.get('rowDragManaged');\n        const treeData = this.gridOptionsService.get('treeData');\n        if (treeData && managed) {\n            warnOnce('If using row drag with tree data, you cannot have rowDragManaged=true');\n        }\n    }\n    getDragItem() {\n        return {\n            rowNode: this.rowNode,\n            rowNodes: this.getSelectedNodes(),\n            columns: this.column ? [this.column] : undefined,\n            defaultTextValue: this.cellValueFn(),\n        };\n    }\n    getRowDragText(column) {\n        if (column) {\n            const colDef = column.getColDef();\n            if (colDef.rowDragText) {\n                return colDef.rowDragText;\n            }\n        }\n        return this.gridOptionsService.get('rowDragText');\n    }\n    addDragSource(dragStartPixels = 4) {\n        // if this is changing the drag element, delete the previous dragSource\n        if (this.dragSource) {\n            this.removeDragSource();\n        }\n        const translate = this.localeService.getLocaleTextFunc();\n        this.dragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: () => {\n                var _a;\n                const dragItem = this.getDragItem();\n                const dragItemCount = ((_a = dragItem.rowNodes) === null || _a === void 0 ? void 0 : _a.length) || 1;\n                const rowDragText = this.getRowDragText(this.column);\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n                return dragItemCount === 1 ? this.cellValueFn() : `${dragItemCount} ${translate('rowDragRows', 'rows')}`;\n            },\n            getDragItem: () => this.getDragItem(),\n            dragStartPixels,\n            dragSourceDomDataKey: this.gridOptionsService.getDomDataKey()\n        };\n        this.beans.dragAndDropService.addDragSource(this.dragSource, true);\n    }\n    removeDragSource() {\n        if (this.dragSource) {\n            this.beans.dragAndDropService.removeDragSource(this.dragSource);\n        }\n        this.dragSource = null;\n    }\n}\n__decorate([\n    Autowired('beans')\n], RowDragComp.prototype, \"beans\", void 0);\n__decorate([\n    PostConstruct\n], RowDragComp.prototype, \"postConstruct\", null);\n__decorate([\n    PreDestroy\n], RowDragComp.prototype, \"removeDragSource\", null);\nclass VisibilityStrategy extends BeanStub {\n    constructor(parent, rowNode, column) {\n        super();\n        this.parent = parent;\n        this.rowNode = rowNode;\n        this.column = column;\n    }\n    setDisplayedOrVisible(neverDisplayed) {\n        const displayedOptions = { skipAriaHidden: true };\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false, displayedOptions);\n        }\n        else {\n            let shown = true;\n            let isShownSometimes = false;\n            if (this.column) {\n                shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();\n                isShownSometimes = isFunction(this.column.getColDef().rowDrag);\n            }\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true, displayedOptions);\n                this.parent.setVisible(shown, displayedOptions);\n            }\n            else {\n                this.parent.setDisplayed(shown, displayedOptions);\n                this.parent.setVisible(true, displayedOptions);\n            }\n        }\n    }\n}\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    constructor(parent, beans, rowNode, column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n    postConstruct() {\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n        this.workOutVisibility();\n    }\n    onSuppressRowDrag() {\n        this.workOutVisibility();\n    }\n    workOutVisibility() {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.gridOptionsService.get('suppressRowDrag');\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n__decorate([\n    PostConstruct\n], NonManagedVisibilityStrategy.prototype, \"postConstruct\", null);\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n    constructor(parent, beans, rowNode, column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n    postConstruct() {\n        // we do not show the component if sort, filter or grouping is active\n        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedPropertyListener('suppressRowDrag', this.onSuppressRowDrag.bind(this));\n        this.workOutVisibility();\n    }\n    onSuppressRowDrag() {\n        this.workOutVisibility();\n    }\n    workOutVisibility() {\n        // only show the drag if both sort and filter are not present\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const rowDragFeature = gridBodyCon.getRowDragFeature();\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        const suppressRowDrag = this.gridOptionsService.get('suppressRowDrag');\n        const hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n__decorate([\n    PostConstruct\n], ManagedVisibilityStrategy.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyCode } from \"../../constants/keyCode.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired } from \"../../context/context.mjs\";\nimport { RowNode } from \"../../entities/rowNode.mjs\";\nimport { removeAriaExpanded, setAriaExpanded } from \"../../utils/aria.mjs\";\nimport { isElementInEventPath, isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../utils/event.mjs\";\nimport { missing } from \"../../utils/generic.mjs\";\nimport { createIconNoSpan } from \"../../utils/icon.mjs\";\nimport { cloneObject } from \"../../utils/object.mjs\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent.mjs\";\nimport { RowDragComp } from \"../row/rowDragComp.mjs\";\nexport class GroupCellRendererCtrl extends BeanStub {\n    init(comp, eGui, eCheckbox, eExpanded, eContracted, compClass, params) {\n        var _a, _b;\n        this.params = params;\n        this.eGui = eGui;\n        this.eCheckbox = eCheckbox;\n        this.eExpanded = eExpanded;\n        this.eContracted = eContracted;\n        this.comp = comp;\n        this.compClass = compClass;\n        const { node, value, colDef } = params;\n        const topLevelFooter = this.isTopLevelFooter();\n        // logic for skipping cells follows, never skip top level footer cell.\n        if (!topLevelFooter) {\n            const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n            if (embeddedRowMismatch) {\n                return;\n            }\n            // this footer should only be non-top level. Don't need to check groupIncludeFooter\n            // as we won't have footer rows in that instance.\n            if (node.footer && this.gridOptionsService.get('groupHideOpenParents')) {\n                const showRowGroup = colDef && colDef.showRowGroup;\n                const rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n                // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n                // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n                if (showRowGroup !== rowGroupColumnId) {\n                    return;\n                }\n            }\n        }\n        this.setupShowingValueForOpenedParent();\n        this.findDisplayedGroupNode();\n        if (!topLevelFooter) {\n            const showingFooterTotal = params.node.footer && params.node.rowGroupIndex === this.columnModel.getRowGroupColumns().findIndex(c => { var _a; return c.getColId() === ((_a = params.colDef) === null || _a === void 0 ? void 0 : _a.showRowGroup); });\n            // if we're not showing a group value\n            const isAlwaysShowing = this.gridOptionsService.get('groupDisplayType') === 'singleColumn' || this.gridOptionsService.get('treeData');\n            const showOpenGroupValue = (isAlwaysShowing || (this.gridOptionsService.get('showOpenedGroup') && !params.node.footer && ((!params.node.group ||\n                (params.node.rowGroupIndex != null &&\n                    params.node.rowGroupIndex > this.columnModel.getRowGroupColumns().findIndex(c => { var _a; return c.getColId() === ((_a = params.colDef) === null || _a === void 0 ? void 0 : _a.showRowGroup); }))))));\n            // not showing a leaf value (field/valueGetter)\n            const leafWithValues = !node.group && (((_a = this.params.colDef) === null || _a === void 0 ? void 0 : _a.field) || ((_b = this.params.colDef) === null || _b === void 0 ? void 0 : _b.valueGetter));\n            // doesn't have expand/collapse chevron\n            const isExpandable = this.isExpandable();\n            // if not showing any values or chevron, skip cell.\n            const canSkipRenderingCell = !this.showingValueForOpenedParent && !isExpandable && !leafWithValues && !showOpenGroupValue && !showingFooterTotal;\n            if (canSkipRenderingCell) {\n                return;\n            }\n        }\n        this.addExpandAndContract();\n        this.addFullWidthRowDraggerIfNeeded();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n        this.refreshAriaExpanded();\n    }\n    getCellAriaRole() {\n        var _a, _b;\n        const colDefAriaRole = (_a = this.params.colDef) === null || _a === void 0 ? void 0 : _a.cellAriaRole;\n        const columnColDefAriaRole = (_b = this.params.column) === null || _b === void 0 ? void 0 : _b.getColDef().cellAriaRole;\n        return colDefAriaRole || columnColDefAriaRole || 'gridcell';\n    }\n    destroy() {\n        super.destroy();\n        // property cleanup to avoid memory leaks\n        this.expandListener = null;\n    }\n    refreshAriaExpanded() {\n        const { node, eParentOfValue } = this.params;\n        if (this.expandListener) {\n            this.expandListener = this.expandListener();\n        }\n        if (!this.isExpandable()) {\n            removeAriaExpanded(eParentOfValue);\n            return;\n        }\n        const listener = () => {\n            // for react, we don't use JSX, as setting attributes via jsx is slower\n            setAriaExpanded(eParentOfValue, !!node.expanded);\n        };\n        this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;\n        listener();\n    }\n    isTopLevelFooter() {\n        if (!this.gridOptionsService.get('groupIncludeTotalFooter')) {\n            return false;\n        }\n        if (this.params.value != null || this.params.node.level != -1) {\n            return false;\n        }\n        // at this point, we know it's the root node and there is no value present, so it's a footer cell.\n        // the only thing to work out is if we are displaying groups  across multiple\n        // columns (groupDisplayType: 'multipleColumns'), we only want 'total' to appear in the first column.\n        const colDef = this.params.colDef;\n        const doingFullWidth = colDef == null;\n        if (doingFullWidth) {\n            return true;\n        }\n        if (colDef.showRowGroup === true) {\n            return true;\n        }\n        const rowGroupCols = this.columnModel.getRowGroupColumns();\n        // this is a sanity check, rowGroupCols should always be present\n        if (!rowGroupCols || rowGroupCols.length === 0) {\n            return true;\n        }\n        const firstRowGroupCol = rowGroupCols[0];\n        return firstRowGroupCol.getId() === colDef.showRowGroup;\n    }\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    isEmbeddedRowMismatch() {\n        if (!this.params.fullWidth || !this.gridOptionsService.get('embedFullWidthRows')) {\n            return false;\n        }\n        const pinnedLeftCell = this.params.pinned === 'left';\n        const pinnedRightCell = this.params.pinned === 'right';\n        const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n        if (this.gridOptionsService.get('enableRtl')) {\n            if (this.columnModel.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n        if (this.columnModel.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n        return !bodyCell;\n    }\n    findDisplayedGroupNode() {\n        const column = this.params.column;\n        const rowNode = this.params.node;\n        if (this.showingValueForOpenedParent) {\n            let pointer = rowNode.parent;\n            while (pointer != null) {\n                if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroupNode = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n        // if we didn't find a displayed group, set it to the row node\n        if (missing(this.displayedGroupNode)) {\n            this.displayedGroupNode = rowNode;\n        }\n    }\n    setupShowingValueForOpenedParent() {\n        // note - this code depends on sortService.updateGroupDataForHiddenOpenParents, where group data\n        // is updated to reflect the dragged down parents\n        const rowNode = this.params.node;\n        const column = this.params.column;\n        if (!this.gridOptionsService.get('groupHideOpenParents')) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n        // hideOpenParents means rowNode.groupData can have data for the group this column is displaying, even though\n        // this rowNode isn't grouping by the column we are displaying\n        // if no groupData at all, we are not showing a parent value\n        if (!rowNode.groupData) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n        // this is the normal case, in that we are showing a group for which this column is configured. note that\n        // this means the Row Group is closed (if it was open, we would not be displaying it)\n        const showingGroupNode = rowNode.rowGroupColumn != null;\n        if (showingGroupNode) {\n            const keyOfGroupingColumn = rowNode.rowGroupColumn.getId();\n            const configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);\n            // if showing group as normal, we didn't take group info from parent\n            if (configuredToShowThisGroupLevel) {\n                this.showingValueForOpenedParent = false;\n                return;\n            }\n        }\n        // see if we are showing a Group Value for the Displayed Group. if we are showing a group value, and this Row Node\n        // is not grouping by this Displayed Group, we must of gotten the value from a parent node\n        const valPresent = rowNode.groupData[column.getId()] != null;\n        this.showingValueForOpenedParent = valPresent;\n    }\n    addValueElement() {\n        if (this.displayedGroupNode.footer) {\n            this.addFooterValue();\n        }\n        else {\n            this.addGroupValue();\n            this.addChildCount();\n        }\n    }\n    addGroupValue() {\n        var _a;\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();\n        const innerCompDetails = this.getInnerCompDetails(paramsAdjusted);\n        const { valueFormatted, value } = paramsAdjusted;\n        let valueWhenNoRenderer = valueFormatted;\n        if (valueWhenNoRenderer == null) {\n            const isGroupColForNode = (this.displayedGroupNode.rowGroupColumn && ((_a = this.params.column) === null || _a === void 0 ? void 0 : _a.isRowGroupDisplayed(this.displayedGroupNode.rowGroupColumn.getId())));\n            if (this.displayedGroupNode.key === \"\" && this.displayedGroupNode.group && isGroupColForNode) {\n                const localeTextFunc = this.localeService.getLocaleTextFunc();\n                valueWhenNoRenderer = localeTextFunc('blanks', '(Blanks)');\n            }\n            else {\n                valueWhenNoRenderer = value !== null && value !== void 0 ? value : null;\n            }\n        }\n        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);\n    }\n    adjustParamsWithDetailsFromRelatedColumn() {\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const column = this.params.column;\n        if (!relatedColumn) {\n            return this.params;\n        }\n        const notFullWidth = column != null;\n        if (notFullWidth) {\n            const showingThisRowGroup = column.isRowGroupDisplayed(relatedColumn.getId());\n            if (!showingThisRowGroup) {\n                return this.params;\n            }\n        }\n        const params = this.params;\n        const { value, node } = this.params;\n        const valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);\n        // we don't update the original params, as they could of come through React,\n        // as react has RowGroupCellRenderer, which means the params could be props which\n        // would be read only\n        const paramsAdjusted = Object.assign(Object.assign({}, params), { valueFormatted: valueFormatted });\n        return paramsAdjusted;\n    }\n    addFooterValue() {\n        const footerValueGetter = this.params.footerValueGetter;\n        let footerValue = '';\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone = cloneObject(this.params);\n            paramsClone.value = this.params.value;\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            }\n            else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            }\n            else {\n                console.warn('AG Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        }\n        else {\n            footerValue = 'Total ' + (this.params.value != null ? this.params.value : '');\n        }\n        const innerCompDetails = this.getInnerCompDetails(this.params);\n        this.comp.setInnerRenderer(innerCompDetails, footerValue);\n    }\n    getInnerCompDetails(params) {\n        // for full width rows, we don't do any of the below\n        if (params.fullWidth) {\n            return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(this.gridOptionsService.get('groupRowRendererParams'), params);\n        }\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const innerCompDetails = this.userComponentFactory\n            .getInnerRendererDetails(params, params);\n        // avoid using GroupCellRenderer again, otherwise stack overflow, as we insert same renderer again and again.\n        // this covers off chance user is grouping by a column that is also configured with GroupCellRenderer\n        const isGroupRowRenderer = (details) => details && details.componentClass == this.compClass;\n        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            return innerCompDetails;\n        }\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const relatedColDef = relatedColumn ? relatedColumn.getColDef() : undefined;\n        if (!relatedColDef) {\n            return;\n        }\n        // otherwise see if we can use the cellRenderer of the column we are grouping by\n        const relatedCompDetails = this.userComponentFactory\n            .getCellRendererDetails(relatedColDef, params);\n        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {\n            // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n            return relatedCompDetails;\n        }\n        if (isGroupRowRenderer(relatedCompDetails) &&\n            relatedColDef.cellRendererParams &&\n            relatedColDef.cellRendererParams.innerRenderer) {\n            // edge case - this comes from a column which has been grouped dynamically, that has a renderer 'group'\n            // and has an inner cell renderer\n            const res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);\n            return res;\n        }\n    }\n    addChildCount() {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) {\n            return;\n        }\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n    updateChildCount() {\n        const allChildrenCount = this.displayedGroupNode.allChildrenCount;\n        const showingGroupForThisNode = this.isShowRowGroupForThisRow();\n        const showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;\n        const countString = showCount ? `(${allChildrenCount})` : ``;\n        this.comp.setChildCount(countString);\n    }\n    isShowRowGroupForThisRow() {\n        if (this.gridOptionsService.get('treeData')) {\n            return true;\n        }\n        const rowGroupColumn = this.displayedGroupNode.rowGroupColumn;\n        if (!rowGroupColumn) {\n            return false;\n        }\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());\n        return thisColumnIsInterested;\n    }\n    addExpandAndContract() {\n        var _a;\n        const params = this.params;\n        const eExpandedIcon = createIconNoSpan('groupExpanded', this.gridOptionsService, null);\n        const eContractedIcon = createIconNoSpan('groupContracted', this.gridOptionsService, null);\n        if (eExpandedIcon) {\n            this.eExpanded.appendChild(eExpandedIcon);\n        }\n        if (eContractedIcon) {\n            this.eContracted.appendChild(eContractedIcon);\n        }\n        const eGroupCell = params.eGridCell;\n        // if editing groups, then double click is to start editing\n        const isDoubleClickEdit = ((_a = this.params.column) === null || _a === void 0 ? void 0 : _a.isCellEditable(params.node)) && this.gridOptionsService.get('enableGroupEdit');\n        if (!isDoubleClickEdit && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n        this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n        // expand / contract as the user hits enter\n        this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n        this.showExpandAndContractIcons();\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        const expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);\n    }\n    onExpandClicked(mouseEvent) {\n        if (isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        // so if we expand a node, it does not also get selected.\n        stopPropagationForAgGrid(mouseEvent);\n        this.onExpandOrContract(mouseEvent);\n    }\n    onExpandOrContract(e) {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode = this.displayedGroupNode;\n        const nextExpandState = !rowNode.expanded;\n        if (!nextExpandState && rowNode.sticky) {\n            this.scrollToStickyNode(rowNode);\n        }\n        rowNode.setExpanded(nextExpandState, e);\n    }\n    scrollToStickyNode(rowNode) {\n        const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        const scrollFeature = gridBodyCtrl.getScrollFeature();\n        scrollFeature.setVerticalScrollPosition(rowNode.rowTop - rowNode.stickyRowTop);\n    }\n    isExpandable() {\n        if (this.showingValueForOpenedParent) {\n            return true;\n        }\n        const rowNode = this.displayedGroupNode;\n        const reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;\n        const expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n        if (!expandableGroup) {\n            return false;\n        }\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';\n        if (displayingForOneColumnOnly) {\n            const showing = this.isShowRowGroupForThisRow();\n            return showing;\n        }\n        return true;\n    }\n    showExpandAndContractIcons() {\n        const { params, displayedGroupNode: displayedGroup, columnModel } = this;\n        const { node } = params;\n        const isExpandable = this.isExpandable();\n        if (isExpandable) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.showingValueForOpenedParent ? true : node.expanded;\n            this.comp.setExpandedDisplayed(expanded);\n            this.comp.setContractedDisplayed(!expanded);\n        }\n        else {\n            // it not expandable, show neither\n            this.comp.setExpandedDisplayed(false);\n            this.comp.setContractedDisplayed(false);\n        }\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotMode = columnModel.isPivotMode();\n        const pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;\n        const addExpandableCss = isExpandable && !pivotModeAndLeafGroup;\n        const isTotalFooterNode = node.footer && node.level === -1;\n        this.comp.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);\n        this.comp.addOrRemoveCssClass('ag-row-group', addExpandableCss);\n        if (pivotMode) {\n            this.comp.addOrRemoveCssClass('ag-pivot-leaf-group', pivotModeAndLeafGroup);\n        }\n        else if (!isTotalFooterNode) {\n            this.comp.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);\n        }\n    }\n    onRowNodeIsExpandableChanged() {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n        // if we have no children, this impacts the indent\n        this.setIndent();\n        this.refreshAriaExpanded();\n    }\n    setupIndent() {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node = this.params.node;\n        const suppressPadding = this.params.suppressPadding;\n        if (!suppressPadding) {\n            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    }\n    setIndent() {\n        if (this.gridOptionsService.get('groupHideOpenParents')) {\n            return;\n        }\n        const params = this.params;\n        const rowNode = params.node;\n        // if we are only showing one group column, we don't want to be indenting based on level\n        const fullWithRow = !!params.colDef;\n        const treeData = this.gridOptionsService.get('treeData');\n        const manyDimensionThisColumn = !fullWithRow || treeData || params.colDef.showRowGroup === true;\n        const paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;\n        if (this.indentClass) {\n            this.comp.addOrRemoveCssClass(this.indentClass, false);\n        }\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.comp.addOrRemoveCssClass(this.indentClass, true);\n    }\n    addFullWidthRowDraggerIfNeeded() {\n        if (!this.params.fullWidth || !this.params.rowDrag) {\n            return;\n        }\n        const rowDragComp = new RowDragComp(() => this.params.value, this.params.node);\n        this.createManagedBean(rowDragComp, this.context);\n        this.eGui.insertAdjacentElement('afterbegin', rowDragComp.getGui());\n    }\n    isUserWantsSelected() {\n        const paramsCheckbox = this.params.checkbox;\n        // if a function, we always return true as change detection can show or hide the checkbox.\n        return typeof paramsCheckbox === 'function' || paramsCheckbox === true;\n    }\n    addCheckboxIfNeeded() {\n        const rowNode = this.displayedGroupNode;\n        const checkboxNeeded = this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.getContext().createBean(cbSelectionComponent);\n            cbSelectionComponent.init({\n                rowNode: this.params.node,\n                column: this.params.column,\n                overrides: {\n                    isVisible: this.params.checkbox,\n                    callbackParams: this.params,\n                    removeHidden: true,\n                },\n            });\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => this.getContext().destroyBean(cbSelectionComponent));\n        }\n        this.comp.setCheckboxVisible(checkboxNeeded);\n    }\n    onKeyDown(event) {\n        const isEnterKey = event.key === KeyCode.ENTER;\n        if (!isEnterKey || this.params.suppressEnterExpand) {\n            return;\n        }\n        const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n        if (cellEditable) {\n            return;\n        }\n        this.onExpandOrContract(event);\n    }\n    onCellDblClicked(mouseEvent) {\n        if (isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent)\n            || isElementInEventPath(this.eContracted, mouseEvent);\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract(mouseEvent);\n        }\n    }\n}\n__decorate([\n    Autowired('expressionService')\n], GroupCellRendererCtrl.prototype, \"expressionService\", void 0);\n__decorate([\n    Autowired('valueFormatterService')\n], GroupCellRendererCtrl.prototype, \"valueFormatterService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GroupCellRendererCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('userComponentFactory')\n], GroupCellRendererCtrl.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    Autowired(\"ctrlsService\")\n], GroupCellRendererCtrl.prototype, \"ctrlsService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { setAriaRole } from \"../../utils/aria.mjs\";\nimport { setDisplayed } from \"../../utils/dom.mjs\";\nimport { Component } from \"../../widgets/component.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { GroupCellRendererCtrl } from \"./groupCellRendererCtrl.mjs\";\nexport class GroupCellRenderer extends Component {\n    constructor() {\n        super(GroupCellRenderer.TEMPLATE);\n    }\n    init(params) {\n        const compProxy = {\n            setInnerRenderer: (compDetails, valueToDisplay) => this.setRenderDetails(compDetails, valueToDisplay),\n            setChildCount: count => this.eChildCount.innerHTML = count,\n            addOrRemoveCssClass: (cssClass, value) => this.addOrRemoveCssClass(cssClass, value),\n            setContractedDisplayed: expanded => setDisplayed(this.eContracted, expanded),\n            setExpandedDisplayed: expanded => setDisplayed(this.eExpanded, expanded),\n            setCheckboxVisible: visible => this.eCheckbox.classList.toggle('ag-invisible', !visible)\n        };\n        const ctrl = this.createManagedBean(new GroupCellRendererCtrl());\n        const fullWidth = !params.colDef;\n        const eGui = this.getGui();\n        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);\n        if (fullWidth) {\n            setAriaRole(eGui, ctrl.getCellAriaRole());\n        }\n    }\n    setRenderDetails(compDetails, valueToDisplay) {\n        if (compDetails) {\n            const componentPromise = compDetails.newAgStackInstance();\n            if (!componentPromise) {\n                return;\n            }\n            componentPromise.then(comp => {\n                if (!comp) {\n                    return;\n                }\n                const destroyComp = () => this.context.destroyBean(comp);\n                if (this.isAlive()) {\n                    this.eValue.appendChild(comp.getGui());\n                    this.addDestroyFunc(destroyComp);\n                }\n                else {\n                    destroyComp();\n                }\n            });\n        }\n        else {\n            this.eValue.innerText = valueToDisplay;\n        }\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    destroy() {\n        this.getContext().destroyBean(this.innerCellRenderer);\n        super.destroy();\n    }\n    refresh() {\n        return false;\n    }\n}\nGroupCellRenderer.TEMPLATE = `<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>`;\n__decorate([\n    RefSelector('eExpanded')\n], GroupCellRenderer.prototype, \"eExpanded\", void 0);\n__decorate([\n    RefSelector('eContracted')\n], GroupCellRenderer.prototype, \"eContracted\", void 0);\n__decorate([\n    RefSelector('eCheckbox')\n], GroupCellRenderer.prototype, \"eCheckbox\", void 0);\n__decorate([\n    RefSelector('eValue')\n], GroupCellRenderer.prototype, \"eValue\", void 0);\n__decorate([\n    RefSelector('eChildCount')\n], GroupCellRenderer.prototype, \"eChildCount\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../../widgets/component.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { createIconNoSpan } from \"../../utils/icon.mjs\";\nexport class LoadingCellRenderer extends Component {\n    constructor() {\n        super(LoadingCellRenderer.TEMPLATE);\n    }\n    init(params) {\n        params.node.failedLoad ? this.setupFailed() : this.setupLoading();\n    }\n    setupFailed() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingError', 'ERR');\n    }\n    setupLoading() {\n        const eLoadingIcon = createIconNoSpan('groupLoading', this.gridOptionsService, null);\n        if (eLoadingIcon) {\n            this.eLoadingIcon.appendChild(eLoadingIcon);\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');\n    }\n    refresh(params) {\n        return false;\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n}\nLoadingCellRenderer.TEMPLATE = `<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>`;\n__decorate([\n    RefSelector('eLoadingIcon')\n], LoadingCellRenderer.prototype, \"eLoadingIcon\", void 0);\n__decorate([\n    RefSelector('eLoadingText')\n], LoadingCellRenderer.prototype, \"eLoadingText\", void 0);\n","import { Component } from \"../../widgets/component.mjs\";\nexport class LoadingOverlayComponent extends Component {\n    constructor() {\n        super();\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    init(params) {\n        var _a;\n        const template = (_a = this.gridOptionsService.get('overlayLoadingTemplate')) !== null && _a !== void 0 ? _a : LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE;\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const localisedTemplate = template.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));\n        this.setTemplate(localisedTemplate);\n    }\n}\nLoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class=\"ag-overlay-loading-center\">[LOADING...]</span>';\n","import { Component } from \"../../widgets/component.mjs\";\nexport class NoRowsOverlayComponent extends Component {\n    constructor() {\n        super();\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    destroy() {\n        super.destroy();\n    }\n    init(params) {\n        var _a;\n        const template = (_a = this.gridOptionsService.get('overlayNoRowsTemplate')) !== null && _a !== void 0 ? _a : NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE;\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const localisedTemplate = template.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));\n        this.setTemplate(localisedTemplate);\n    }\n}\nNoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE = '<span class=\"ag-overlay-no-rows-center\">[NO_ROWS_TO_SHOW]</span>';\n","import { PopupComponent } from '../widgets/popupComponent.mjs';\nimport { escapeString } from '../utils/string.mjs';\nexport class TooltipComponent extends PopupComponent {\n    constructor() {\n        super(/* html */ `<div class=\"ag-tooltip\"></div>`);\n    }\n    // will need to type params\n    init(params) {\n        const { value } = params;\n        this.getGui().innerHTML = escapeString(value);\n    }\n}\n","import { SimpleCellEditor } from \"./simpleCellEditor.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nimport { KeyCode } from \"../../constants/keyCode.mjs\";\nclass NumberCellEditorInput {\n    getTemplate() {\n        return /* html */ `<ag-input-number-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-number-field>`;\n    }\n    init(eInput, params) {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.precision != null) {\n            eInput.setPrecision(params.precision);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n        const inputEl = eInput.getInputElement();\n        if (params.preventStepping) {\n            eInput.addManagedListener(inputEl, 'keydown', this.preventStepping);\n        }\n        else if (params.showStepperButtons) {\n            inputEl.classList.add('ag-number-field-input-stepper');\n        }\n    }\n    preventStepping(e) {\n        if (e.key === KeyCode.UP || e.key === KeyCode.DOWN) {\n            e.preventDefault();\n        }\n    }\n    getValue() {\n        const value = this.eInput.getValue();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        let parsedValue = this.params.parseValue(value);\n        if (parsedValue == null) {\n            return parsedValue;\n        }\n        if (typeof parsedValue === 'string') {\n            if (parsedValue === '') {\n                return null;\n            }\n            parsedValue = Number(parsedValue);\n        }\n        return isNaN(parsedValue) ? null : parsedValue;\n    }\n    getStartValue() {\n        return this.params.value;\n    }\n}\nexport class NumberCellEditor extends SimpleCellEditor {\n    constructor() {\n        super(new NumberCellEditorInput());\n    }\n}\n","import { serialiseDate } from \"../../utils/date.mjs\";\nimport { SimpleCellEditor } from \"./simpleCellEditor.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nclass DateCellEditorInput {\n    getTemplate() {\n        return /* html */ `<ag-input-date-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-date-field>`;\n    }\n    init(eInput, params) {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n    }\n    getValue() {\n        const value = this.eInput.getDate();\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return value !== null && value !== void 0 ? value : null;\n    }\n    getStartValue() {\n        const { value } = this.params;\n        if (!(value instanceof Date)) {\n            return undefined;\n        }\n        return serialiseDate(value, false);\n    }\n}\nexport class DateCellEditor extends SimpleCellEditor {\n    constructor() {\n        super(new DateCellEditorInput());\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../../context/context.mjs\";\nimport { serialiseDate } from \"../../utils/date.mjs\";\nimport { SimpleCellEditor } from \"./simpleCellEditor.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nclass DateStringCellEditorInput {\n    constructor(getDataTypeService) {\n        this.getDataTypeService = getDataTypeService;\n    }\n    getTemplate() {\n        return /* html */ `<ag-input-date-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-date-field>`;\n    }\n    init(eInput, params) {\n        this.eInput = eInput;\n        this.params = params;\n        if (params.min != null) {\n            eInput.setMin(params.min);\n        }\n        if (params.max != null) {\n            eInput.setMax(params.max);\n        }\n        if (params.step != null) {\n            eInput.setStep(params.step);\n        }\n    }\n    getValue() {\n        const value = this.formatDate(this.eInput.getDate());\n        if (!exists(value) && !exists(this.params.value)) {\n            return this.params.value;\n        }\n        return this.params.parseValue(value !== null && value !== void 0 ? value : '');\n    }\n    getStartValue() {\n        var _a, _b;\n        return serialiseDate((_b = this.parseDate((_a = this.params.value) !== null && _a !== void 0 ? _a : undefined)) !== null && _b !== void 0 ? _b : null, false);\n    }\n    parseDate(value) {\n        return this.getDataTypeService().getDateParserFunction()(value);\n    }\n    formatDate(value) {\n        return this.getDataTypeService().getDateFormatterFunction()(value);\n    }\n}\nexport class DateStringCellEditor extends SimpleCellEditor {\n    constructor() {\n        super(new DateStringCellEditorInput(() => this.dataTypeService));\n    }\n}\n__decorate([\n    Autowired('dataTypeService')\n], DateStringCellEditor.prototype, \"dataTypeService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../../widgets/component.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { stopPropagationForAgGrid } from \"../../utils/event.mjs\";\nimport { Events } from \"../../events.mjs\";\nimport { KeyCode } from \"../../constants/keyCode.mjs\";\nimport { getAriaCheckboxStateName, setAriaLive } from \"../../utils/aria.mjs\";\nimport { GROUP_AUTO_COLUMN_ID } from \"../../columns/autoGroupColService.mjs\";\nexport class CheckboxCellRenderer extends Component {\n    constructor() {\n        super(CheckboxCellRenderer.TEMPLATE);\n    }\n    init(params) {\n        this.params = params;\n        this.updateCheckbox(params);\n        const inputEl = this.eCheckbox.getInputElement();\n        inputEl.setAttribute('tabindex', '-1');\n        setAriaLive(inputEl, 'polite');\n        this.addManagedListener(inputEl, 'click', (event) => {\n            stopPropagationForAgGrid(event);\n            if (this.eCheckbox.isDisabled()) {\n                return;\n            }\n            const isSelected = this.eCheckbox.getValue();\n            this.onCheckboxChanged(isSelected);\n        });\n        this.addManagedListener(inputEl, 'dblclick', (event) => {\n            stopPropagationForAgGrid(event);\n        });\n        const eDocument = this.gridOptionsService.getDocument();\n        this.addManagedListener(this.params.eGridCell, 'keydown', (event) => {\n            if (event.key === KeyCode.SPACE && !this.eCheckbox.isDisabled()) {\n                if (this.params.eGridCell === eDocument.activeElement) {\n                    this.eCheckbox.toggle();\n                }\n                const isSelected = this.eCheckbox.getValue();\n                this.onCheckboxChanged(isSelected);\n                event.preventDefault();\n            }\n        });\n    }\n    refresh(params) {\n        this.params = params;\n        this.updateCheckbox(params);\n        return true;\n    }\n    updateCheckbox(params) {\n        var _a, _b, _c;\n        let isSelected;\n        let displayed = true;\n        if (params.node.group && params.column) {\n            const colId = params.column.getColId();\n            if (colId.startsWith(GROUP_AUTO_COLUMN_ID)) {\n                // if we're grouping by this column then the value is a string and we need to parse it\n                isSelected = params.value == null || params.value === '' ? undefined : params.value === 'true';\n            }\n            else if (params.node.aggData && params.node.aggData[colId] !== undefined) {\n                isSelected = (_a = params.value) !== null && _a !== void 0 ? _a : undefined;\n            }\n            else {\n                displayed = false;\n            }\n        }\n        else {\n            isSelected = (_b = params.value) !== null && _b !== void 0 ? _b : undefined;\n        }\n        if (!displayed) {\n            this.eCheckbox.setDisplayed(false);\n            return;\n        }\n        this.eCheckbox.setValue(isSelected);\n        const disabled = params.disabled != null ? params.disabled : !((_c = params.column) === null || _c === void 0 ? void 0 : _c.isCellEditable(params.node));\n        this.eCheckbox.setDisabled(disabled);\n        const translate = this.localeService.getLocaleTextFunc();\n        const stateName = getAriaCheckboxStateName(translate, isSelected);\n        const ariaLabel = disabled\n            ? stateName\n            : `${translate('ariaToggleCellValue', 'Press SPACE to toggle cell value')} (${stateName})`;\n        this.eCheckbox.setInputAriaLabel(ariaLabel);\n    }\n    onCheckboxChanged(isSelected) {\n        const { column, node, rowIndex, value } = this.params;\n        const eventStarted = {\n            type: Events.EVENT_CELL_EDITING_STARTED,\n            column: column,\n            colDef: column === null || column === void 0 ? void 0 : column.getColDef(),\n            data: node.data,\n            node,\n            rowIndex,\n            rowPinned: node.rowPinned,\n            value\n        };\n        this.eventService.dispatchEvent(eventStarted);\n        const valueChanged = this.params.node.setDataValue(this.params.column, isSelected, 'edit');\n        const eventStopped = {\n            type: Events.EVENT_CELL_EDITING_STOPPED,\n            column: column,\n            colDef: column === null || column === void 0 ? void 0 : column.getColDef(),\n            data: node.data,\n            node,\n            rowIndex,\n            rowPinned: node.rowPinned,\n            value,\n            oldValue: value,\n            newValue: isSelected,\n            valueChanged\n        };\n        this.eventService.dispatchEvent(eventStopped);\n    }\n}\nCheckboxCellRenderer.TEMPLATE = `\n        <div class=\"ag-cell-wrapper ag-checkbox-cell\" role=\"presentation\">\n            <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n        </div>`;\n__decorate([\n    RefSelector('eCheckbox')\n], CheckboxCellRenderer.prototype, \"eCheckbox\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PopupComponent } from \"../../widgets/popupComponent.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { getAriaCheckboxStateName } from \"../../utils/aria.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nexport class CheckboxCellEditor extends PopupComponent {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`);\n    }\n    init(params) {\n        var _a;\n        this.params = params;\n        const isSelected = (_a = params.value) !== null && _a !== void 0 ? _a : undefined;\n        this.eCheckbox.setValue(isSelected);\n        const inputEl = this.eCheckbox.getInputElement();\n        inputEl.setAttribute('tabindex', '-1');\n        this.setAriaLabel(isSelected);\n        this.addManagedListener(this.eCheckbox, Events.EVENT_FIELD_VALUE_CHANGED, (event) => this.setAriaLabel(event.selected));\n    }\n    getValue() {\n        return this.eCheckbox.getValue();\n    }\n    focusIn() {\n        this.eCheckbox.getFocusableElement().focus();\n    }\n    afterGuiAttached() {\n        if (this.params.cellStartedEdit) {\n            this.focusIn();\n        }\n    }\n    isPopup() {\n        return false;\n    }\n    setAriaLabel(isSelected) {\n        const translate = this.localeService.getLocaleTextFunc();\n        const stateName = getAriaCheckboxStateName(translate, isSelected);\n        const ariaLabel = translate('ariaToggleCellValue', 'Press SPACE to toggle cell value');\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\n    }\n}\n__decorate([\n    RefSelector('eCheckbox')\n], CheckboxCellEditor.prototype, \"eCheckbox\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context.mjs\";\nimport { ReadOnlyFloatingFilter } from \"../../filter/floating/provided/readOnlyFloatingFilter.mjs\";\nimport { DateFilter } from \"../../filter/provided/date/dateFilter.mjs\";\nimport { DateFloatingFilter } from \"../../filter/provided/date/dateFloatingFilter.mjs\";\nimport { DefaultDateComponent } from \"../../filter/provided/date/defaultDateComponent.mjs\";\nimport { NumberFilter } from \"../../filter/provided/number/numberFilter.mjs\";\nimport { NumberFloatingFilter } from \"../../filter/provided/number/numberFloatingFilter.mjs\";\nimport { TextFilter } from \"../../filter/provided/text/textFilter.mjs\";\nimport { TextFloatingFilter } from \"../../filter/provided/text/textFloatingFilter.mjs\";\nimport { HeaderComp } from \"../../headerRendering/cells/column/headerComp.mjs\";\nimport { SortIndicatorComp } from \"../../headerRendering/cells/column/sortIndicatorComp.mjs\";\nimport { HeaderGroupComp } from \"../../headerRendering/cells/columnGroup/headerGroupComp.mjs\";\nimport { ModuleNames } from \"../../modules/moduleNames.mjs\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry.mjs\";\nimport { LargeTextCellEditor } from \"../../rendering/cellEditors/largeTextCellEditor.mjs\";\nimport { SelectCellEditor } from \"../../rendering/cellEditors/selectCellEditor.mjs\";\nimport { TextCellEditor } from \"../../rendering/cellEditors/textCellEditor.mjs\";\nimport { AnimateShowChangeCellRenderer } from \"../../rendering/cellRenderers/animateShowChangeCellRenderer.mjs\";\nimport { AnimateSlideCellRenderer } from \"../../rendering/cellRenderers/animateSlideCellRenderer.mjs\";\nimport { GroupCellRenderer } from \"../../rendering/cellRenderers/groupCellRenderer.mjs\";\nimport { LoadingCellRenderer } from \"../../rendering/cellRenderers/loadingCellRenderer.mjs\";\nimport { LoadingOverlayComponent } from \"../../rendering/overlays/loadingOverlayComponent.mjs\";\nimport { NoRowsOverlayComponent } from \"../../rendering/overlays/noRowsOverlayComponent.mjs\";\nimport { TooltipComponent } from \"../../rendering/tooltipComponent.mjs\";\nimport { doOnce } from \"../../utils/function.mjs\";\nimport { iterateObject } from '../../utils/object.mjs';\nimport { fuzzySuggestions } from '../../utils/fuzzyMatch.mjs';\nimport { NumberCellEditor } from \"../../rendering/cellEditors/numberCellEditor.mjs\";\nimport { DateCellEditor } from \"../../rendering/cellEditors/dateCellEditor.mjs\";\nimport { DateStringCellEditor } from \"../../rendering/cellEditors/dateStringCellEditor.mjs\";\nimport { CheckboxCellRenderer } from \"../../rendering/cellRenderers/checkboxCellRenderer.mjs\";\nimport { CheckboxCellEditor } from \"../../rendering/cellEditors/checkboxCellEditor.mjs\";\nlet UserComponentRegistry = class UserComponentRegistry extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.agGridDefaults = {\n            //date\n            agDateInput: DefaultDateComponent,\n            //header\n            agColumnHeader: HeaderComp,\n            agColumnGroupHeader: HeaderGroupComp,\n            agSortIndicator: SortIndicatorComp,\n            //floating filters\n            agTextColumnFloatingFilter: TextFloatingFilter,\n            agNumberColumnFloatingFilter: NumberFloatingFilter,\n            agDateColumnFloatingFilter: DateFloatingFilter,\n            agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,\n            // renderers\n            agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,\n            agAnimateSlideCellRenderer: AnimateSlideCellRenderer,\n            agGroupCellRenderer: GroupCellRenderer,\n            agGroupRowRenderer: GroupCellRenderer,\n            agLoadingCellRenderer: LoadingCellRenderer,\n            agCheckboxCellRenderer: CheckboxCellRenderer,\n            //editors\n            agCellEditor: TextCellEditor,\n            agTextCellEditor: TextCellEditor,\n            agNumberCellEditor: NumberCellEditor,\n            agDateCellEditor: DateCellEditor,\n            agDateStringCellEditor: DateStringCellEditor,\n            agSelectCellEditor: SelectCellEditor,\n            agLargeTextCellEditor: LargeTextCellEditor,\n            agCheckboxCellEditor: CheckboxCellEditor,\n            //filter\n            agTextColumnFilter: TextFilter,\n            agNumberColumnFilter: NumberFilter,\n            agDateColumnFilter: DateFilter,\n            //overlays\n            agLoadingOverlay: LoadingOverlayComponent,\n            agNoRowsOverlay: NoRowsOverlayComponent,\n            // tooltips\n            agTooltipComponent: TooltipComponent\n        };\n        /** Used to provide useful error messages if a user is trying to use an enterprise component without loading the module. */\n        this.enterpriseAgDefaultCompsModule = {\n            agSetColumnFilter: ModuleNames.SetFilterModule,\n            agSetColumnFloatingFilter: ModuleNames.SetFilterModule,\n            agMultiColumnFilter: ModuleNames.MultiFilterModule,\n            agMultiColumnFloatingFilter: ModuleNames.MultiFilterModule,\n            agGroupColumnFilter: ModuleNames.RowGroupingModule,\n            agGroupColumnFloatingFilter: ModuleNames.RowGroupingModule,\n            agRichSelect: ModuleNames.RichSelectModule,\n            agRichSelectCellEditor: ModuleNames.RichSelectModule,\n            agDetailCellRenderer: ModuleNames.MasterDetailModule,\n            agSparklineCellRenderer: ModuleNames.SparklinesModule\n        };\n        this.jsComps = {};\n    }\n    init() {\n        if (this.gridOptions.components != null) {\n            iterateObject(this.gridOptions.components, (key, component) => this.registerJsComponent(key, component));\n        }\n    }\n    registerDefaultComponent(name, component) {\n        if (this.agGridDefaults[name]) {\n            console.error(`Trying to overwrite a default component. You should call registerComponent`);\n            return;\n        }\n        this.agGridDefaults[name] = component;\n    }\n    registerJsComponent(name, component) {\n        this.jsComps[name] = component;\n    }\n    retrieve(propertyName, name) {\n        const createResult = (component, componentFromFramework) => ({ componentFromFramework, component });\n        // FrameworkOverrides.frameworkComponent() is used in two locations:\n        // 1) for Vue, user provided components get registered via a framework specific way.\n        // 2) for React, it's how the React UI provides alternative default components (eg GroupCellRenderer and DetailCellRenderer)\n        const registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(name, this.gridOptions.components);\n        if (registeredViaFrameworkComp != null) {\n            return createResult(registeredViaFrameworkComp, true);\n        }\n        const jsComponent = this.jsComps[name];\n        if (jsComponent) {\n            const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);\n            return createResult(jsComponent, isFwkComp);\n        }\n        const defaultComponent = this.agGridDefaults[name];\n        if (defaultComponent) {\n            return createResult(defaultComponent, false);\n        }\n        const moduleForComponent = this.enterpriseAgDefaultCompsModule[name];\n        if (moduleForComponent) {\n            ModuleRegistry.__assertRegistered(moduleForComponent, `AG Grid '${propertyName}' component: ${name}`, this.context.getGridId());\n        }\n        else {\n            doOnce(() => { this.warnAboutMissingComponent(propertyName, name); }, \"MissingComp\" + name);\n        }\n        return null;\n    }\n    warnAboutMissingComponent(propertyName, componentName) {\n        const validComponents = [\n            // Don't include the old names / internals in potential suggestions\n            ...Object.keys(this.agGridDefaults).filter(k => !['agCellEditor', 'agGroupRowRenderer', 'agSortIndicator'].includes(k)),\n            ...Object.keys(this.jsComps)\n        ];\n        const suggestions = fuzzySuggestions(componentName, validComponents, true, 0.8).values;\n        console.warn(`AG Grid: Could not find '${componentName}' component. It was configured as \"${propertyName}: '${componentName}'\" but it wasn't found in the list of registered components.`);\n        if (suggestions.length > 0) {\n            console.warn(`         Did you mean: [${suggestions.slice(0, 3)}]?`);\n        }\n        console.warn(`If using a custom component check it has been registered as described in: ${this.getFrameworkOverrides().getDocLink('components/')}`);\n    }\n};\n__decorate([\n    Autowired('gridOptions')\n], UserComponentRegistry.prototype, \"gridOptions\", void 0);\n__decorate([\n    PostConstruct\n], UserComponentRegistry.prototype, \"init\", null);\nUserComponentRegistry = __decorate([\n    Bean('userComponentRegistry')\n], UserComponentRegistry);\nexport { UserComponentRegistry };\n","export const DateComponent = {\n    propertyName: 'dateComponent',\n    cellRenderer: false\n};\nexport const HeaderComponent = {\n    propertyName: 'headerComponent',\n    cellRenderer: false\n};\nexport const HeaderGroupComponent = {\n    propertyName: 'headerGroupComponent',\n    cellRenderer: false\n};\nexport const CellRendererComponent = {\n    propertyName: 'cellRenderer',\n    cellRenderer: true\n};\nexport const CellEditorComponent = {\n    propertyName: 'cellEditor',\n    cellRenderer: false\n};\nexport const InnerRendererComponent = {\n    propertyName: 'innerRenderer',\n    cellRenderer: true\n};\nexport const LoadingOverlayComponent = {\n    propertyName: 'loadingOverlayComponent',\n    cellRenderer: false\n};\nexport const NoRowsOverlayComponent = {\n    propertyName: 'noRowsOverlayComponent',\n    cellRenderer: false\n};\nexport const TooltipComponent = {\n    propertyName: 'tooltipComponent',\n    cellRenderer: false\n};\nexport const FilterComponent = {\n    propertyName: 'filter',\n    cellRenderer: false\n};\nexport const FloatingFilterComponent = {\n    propertyName: 'floatingFilterComponent',\n    cellRenderer: false\n};\nexport const ToolPanelComponent = {\n    propertyName: 'toolPanel',\n    cellRenderer: false\n};\nexport const StatusPanelComponent = {\n    propertyName: 'statusPanel',\n    cellRenderer: false\n};\nexport const FullWidth = {\n    propertyName: 'fullWidthCellRenderer',\n    cellRenderer: true\n};\nexport const FullWidthLoading = {\n    propertyName: 'loadingCellRenderer',\n    cellRenderer: true\n};\nexport const FullWidthGroup = {\n    propertyName: 'groupRowRenderer',\n    cellRenderer: true\n};\nexport const FullWidthDetail = {\n    propertyName: 'detailCellRenderer',\n    cellRenderer: true\n};\n","export class FloatingFilterMapper {\n    static getFloatingFilterType(filterType) {\n        return this.filterToFloatingFilterMapping[filterType];\n    }\n}\nFloatingFilterMapper.filterToFloatingFilterMapping = {\n    set: 'agSetColumnFloatingFilter',\n    agSetColumnFilter: 'agSetColumnFloatingFilter',\n    multi: 'agMultiColumnFloatingFilter',\n    agMultiColumnFilter: 'agMultiColumnFloatingFilter',\n    group: 'agGroupColumnFloatingFilter',\n    agGroupColumnFilter: 'agGroupColumnFloatingFilter',\n    number: 'agNumberColumnFloatingFilter',\n    agNumberColumnFilter: 'agNumberColumnFloatingFilter',\n    date: 'agDateColumnFloatingFilter',\n    agDateColumnFilter: 'agDateColumnFloatingFilter',\n    text: 'agTextColumnFloatingFilter',\n    agTextColumnFilter: 'agTextColumnFloatingFilter'\n};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, Bean, Optional } from \"../../context/context.mjs\";\nimport { AgPromise } from \"../../utils/index.mjs\";\nimport { mergeDeep } from '../../utils/object.mjs';\nimport { CellEditorComponent, CellRendererComponent, DateComponent, FilterComponent, FloatingFilterComponent, FullWidth, FullWidthDetail, FullWidthGroup, FullWidthLoading, HeaderComponent, HeaderGroupComponent, InnerRendererComponent, LoadingOverlayComponent, NoRowsOverlayComponent, StatusPanelComponent, ToolPanelComponent, TooltipComponent } from \"./componentTypes.mjs\";\nimport { FloatingFilterMapper } from '../../filter/floating/floatingFilterMapper.mjs';\nlet UserComponentFactory = class UserComponentFactory extends BeanStub {\n    getHeaderCompDetails(colDef, params) {\n        return this.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\n    }\n    getHeaderGroupCompDetails(params) {\n        const colGroupDef = params.columnGroup.getColGroupDef();\n        return this.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\n    }\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    getFullWidthCellRendererDetails(params) {\n        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true);\n    }\n    getFullWidthLoadingCellRendererDetails(params) {\n        return this.getCompDetails(this.gridOptions, FullWidthLoading, 'agLoadingCellRenderer', params, true);\n    }\n    getFullWidthGroupCellRendererDetails(params) {\n        return this.getCompDetails(this.gridOptions, FullWidthGroup, 'agGroupRowRenderer', params, true);\n    }\n    getFullWidthDetailCellRendererDetails(params) {\n        return this.getCompDetails(this.gridOptions, FullWidthDetail, 'agDetailCellRenderer', params, true);\n    }\n    // CELL RENDERER\n    getInnerRendererDetails(def, params) {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    getFullWidthGroupRowInnerCellRenderer(def, params) {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    getCellRendererDetails(def, params) {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n    // CELL EDITOR\n    getCellEditorDetails(def, params) {\n        return this.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\n    }\n    // FILTER\n    getFilterDetails(def, params, defaultFilter) {\n        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);\n    }\n    getDateCompDetails(params) {\n        return this.getCompDetails(this.gridOptions, DateComponent, 'agDateInput', params, true);\n    }\n    getLoadingOverlayCompDetails(params) {\n        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, 'agLoadingOverlay', params, true);\n    }\n    getNoRowsOverlayCompDetails(params) {\n        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, 'agNoRowsOverlay', params, true);\n    }\n    getTooltipCompDetails(params) {\n        return this.getCompDetails(params.colDef, TooltipComponent, 'agTooltipComponent', params, true);\n    }\n    getSetFilterCellRendererDetails(def, params) {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n    getFloatingFilterCompDetails(def, params, defaultFloatingFilter) {\n        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);\n    }\n    getToolPanelCompDetails(toolPanelDef, params) {\n        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true);\n    }\n    getStatusPanelCompDetails(def, params) {\n        return this.getCompDetails(def, StatusPanelComponent, null, params, true);\n    }\n    getCompDetails(defObject, type, defaultName, params, mandatory = false) {\n        const { propertyName, cellRenderer } = type;\n        let { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector } = this.getCompKeys(defObject, type, params);\n        const lookupFromRegistry = (key) => {\n            const item = this.userComponentRegistry.retrieve(propertyName, key);\n            if (item) {\n                jsComp = !item.componentFromFramework ? item.component : undefined;\n                fwComp = item.componentFromFramework ? item.component : undefined;\n            }\n        };\n        // if compOption is a string, means we need to look the item up\n        if (compName != null) {\n            lookupFromRegistry(compName);\n        }\n        // if lookup brought nothing back, and we have a default, lookup the default\n        if (jsComp == null && fwComp == null && defaultName != null) {\n            lookupFromRegistry(defaultName);\n        }\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\n        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {\n            jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);\n        }\n        if (!jsComp && !fwComp) {\n            if (mandatory) {\n                console.error(`AG Grid: Could not find component ${compName}, did you forget to configure this component?`);\n            }\n            return;\n        }\n        const paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);\n        const componentFromFramework = jsComp == null;\n        const componentClass = jsComp ? jsComp : fwComp;\n        return {\n            componentFromFramework,\n            componentClass,\n            params: paramsMerged,\n            type: type,\n            popupFromSelector,\n            popupPositionFromSelector,\n            newAgStackInstance: () => this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type)\n        };\n    }\n    getCompKeys(defObject, type, params) {\n        const { propertyName } = type;\n        let compName;\n        let jsComp;\n        let fwComp;\n        let paramsFromSelector;\n        let popupFromSelector;\n        let popupPositionFromSelector;\n        // there are two types of js comps, class based and func based. we can only check for\n        // class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based\n        // const isJsClassComp = (comp: any) => this.agComponentUtils.doesImplementIComponent(comp);\n        // const fwActive = this.frameworkComponentWrapper != null;\n        // pull from defObject if available\n        if (defObject) {\n            const defObjectAny = defObject;\n            // if selector, use this\n            const selectorFunc = defObjectAny[propertyName + 'Selector'];\n            const selectorRes = selectorFunc ? selectorFunc(params) : null;\n            const assignComp = (providedJsComp) => {\n                if (typeof providedJsComp === 'string') {\n                    compName = providedJsComp;\n                }\n                else if (providedJsComp != null && providedJsComp !== true) {\n                    const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);\n                    if (isFwkComp) {\n                        fwComp = providedJsComp;\n                    }\n                    else {\n                        jsComp = providedJsComp;\n                    }\n                }\n            };\n            if (selectorRes) {\n                assignComp(selectorRes.component);\n                paramsFromSelector = selectorRes.params;\n                popupFromSelector = selectorRes.popup;\n                popupPositionFromSelector = selectorRes.popupPosition;\n            }\n            else {\n                // if no selector, or result of selector is empty, take from defObject\n                assignComp(defObjectAny[propertyName]);\n            }\n        }\n        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };\n    }\n    newAgStackInstance(ComponentClass, componentFromFramework, params, type) {\n        const propertyName = type.propertyName;\n        const jsComponent = !componentFromFramework;\n        // using javascript component\n        let instance;\n        if (jsComponent) {\n            instance = new ComponentClass();\n        }\n        else {\n            // Using framework component\n            const thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);\n            instance = this.frameworkComponentWrapper.wrap(ComponentClass, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, type);\n        }\n        const deferredInit = this.initComponent(instance, params);\n        if (deferredInit == null) {\n            return AgPromise.resolve(instance);\n        }\n        return deferredInit.then(() => instance);\n    }\n    // used by Floating Filter\n    mergeParamsWithApplicationProvidedParams(defObject, type, paramsFromGrid, paramsFromSelector = null) {\n        const params = {\n            context: this.gridOptionsService.context,\n            columnApi: this.gridOptionsService.columnApi,\n            api: this.gridOptionsService.api\n        };\n        mergeDeep(params, paramsFromGrid);\n        // pull user params from either the old prop name and new prop name\n        // eg either cellRendererParams and cellCompParams\n        const defObjectAny = defObject;\n        const userParams = defObjectAny && defObjectAny[type.propertyName + 'Params'];\n        if (typeof userParams === 'function') {\n            const userParamsFromFunc = userParams(paramsFromGrid);\n            mergeDeep(params, userParamsFromFunc);\n        }\n        else if (typeof userParams === 'object') {\n            mergeDeep(params, userParams);\n        }\n        mergeDeep(params, paramsFromSelector);\n        return params;\n    }\n    initComponent(component, params) {\n        this.context.createBean(component);\n        if (component.init == null) {\n            return;\n        }\n        return component.init(params);\n    }\n    getDefaultFloatingFilterType(def, getFromDefault) {\n        if (def == null) {\n            return null;\n        }\n        let defaultFloatingFilterType = null;\n        let { compName, jsComp, fwComp } = this.getCompKeys(def, FilterComponent);\n        if (compName) {\n            // will be undefined if not in the map\n            defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);\n        }\n        else {\n            const usingDefaultFilter = (jsComp == null && fwComp == null) && (def.filter === true);\n            if (usingDefaultFilter) {\n                defaultFloatingFilterType = getFromDefault();\n            }\n        }\n        return defaultFloatingFilterType;\n    }\n};\n__decorate([\n    Autowired('gridOptions')\n], UserComponentFactory.prototype, \"gridOptions\", void 0);\n__decorate([\n    Autowired('agComponentUtils')\n], UserComponentFactory.prototype, \"agComponentUtils\", void 0);\n__decorate([\n    Autowired('componentMetadataProvider')\n], UserComponentFactory.prototype, \"componentMetadataProvider\", void 0);\n__decorate([\n    Autowired('userComponentRegistry')\n], UserComponentFactory.prototype, \"userComponentRegistry\", void 0);\n__decorate([\n    Optional('frameworkComponentWrapper')\n], UserComponentFactory.prototype, \"frameworkComponentWrapper\", void 0);\nUserComponentFactory = __decorate([\n    Bean('userComponentFactory')\n], UserComponentFactory);\nexport { UserComponentFactory };\n","export class ColDefUtil {\n}\nColDefUtil.ColDefPropertyMap = {\n    headerName: undefined,\n    columnGroupShow: undefined,\n    headerClass: undefined,\n    toolPanelClass: undefined,\n    headerValueGetter: undefined,\n    pivotKeys: undefined,\n    groupId: undefined,\n    colId: undefined,\n    sort: undefined,\n    initialSort: undefined,\n    field: undefined,\n    type: undefined,\n    cellDataType: undefined,\n    tooltipComponent: undefined,\n    tooltipField: undefined,\n    headerTooltip: undefined,\n    cellClass: undefined,\n    showRowGroup: undefined,\n    filter: undefined,\n    initialAggFunc: undefined,\n    defaultAggFunc: undefined,\n    aggFunc: undefined,\n    pinned: undefined,\n    initialPinned: undefined,\n    chartDataType: undefined,\n    cellAriaRole: undefined,\n    cellEditorPopupPosition: undefined,\n    headerGroupComponent: undefined,\n    headerGroupComponentParams: undefined,\n    cellStyle: undefined,\n    cellRenderer: undefined,\n    cellRendererParams: undefined,\n    cellEditor: undefined,\n    cellEditorParams: undefined,\n    filterParams: undefined,\n    pivotValueColumn: undefined,\n    headerComponent: undefined,\n    headerComponentParams: undefined,\n    floatingFilterComponent: undefined,\n    floatingFilterComponentParams: undefined,\n    tooltipComponentParams: undefined,\n    refData: undefined,\n    columnsMenuParams: undefined,\n    children: undefined,\n    sortingOrder: undefined,\n    allowedAggFuncs: undefined,\n    menuTabs: undefined,\n    pivotTotalColumnIds: undefined,\n    cellClassRules: undefined,\n    icons: undefined,\n    sortIndex: undefined,\n    initialSortIndex: undefined,\n    flex: undefined,\n    initialFlex: undefined,\n    width: undefined,\n    initialWidth: undefined,\n    minWidth: undefined,\n    maxWidth: undefined,\n    rowGroupIndex: undefined,\n    initialRowGroupIndex: undefined,\n    pivotIndex: undefined,\n    initialPivotIndex: undefined,\n    suppressCellFlash: undefined,\n    suppressColumnsToolPanel: undefined,\n    suppressFiltersToolPanel: undefined,\n    openByDefault: undefined,\n    marryChildren: undefined,\n    suppressStickyLabel: undefined,\n    hide: undefined,\n    initialHide: undefined,\n    rowGroup: undefined,\n    initialRowGroup: undefined,\n    pivot: undefined,\n    initialPivot: undefined,\n    checkboxSelection: undefined,\n    showDisabledCheckboxes: undefined,\n    headerCheckboxSelection: undefined,\n    headerCheckboxSelectionFilteredOnly: undefined,\n    headerCheckboxSelectionCurrentPageOnly: undefined,\n    suppressMenu: undefined,\n    suppressMovable: undefined,\n    lockPosition: undefined,\n    lockVisible: undefined,\n    lockPinned: undefined,\n    unSortIcon: undefined,\n    suppressSizeToFit: undefined,\n    suppressAutoSize: undefined,\n    enableRowGroup: undefined,\n    enablePivot: undefined,\n    enableValue: undefined,\n    editable: undefined,\n    suppressPaste: undefined,\n    suppressNavigable: undefined,\n    enableCellChangeFlash: undefined,\n    rowDrag: undefined,\n    dndSource: undefined,\n    autoHeight: undefined,\n    wrapText: undefined,\n    sortable: undefined,\n    resizable: undefined,\n    singleClickEdit: undefined,\n    floatingFilter: undefined,\n    cellEditorPopup: undefined,\n    suppressFillHandle: undefined,\n    wrapHeaderText: undefined,\n    autoHeaderHeight: undefined,\n    dndSourceOnRowDrag: undefined,\n    valueGetter: undefined,\n    valueSetter: undefined,\n    filterValueGetter: undefined,\n    keyCreator: undefined,\n    valueFormatter: undefined,\n    valueParser: undefined,\n    comparator: undefined,\n    equals: undefined,\n    pivotComparator: undefined,\n    suppressKeyboardEvent: undefined,\n    suppressHeaderKeyboardEvent: undefined,\n    colSpan: undefined,\n    rowSpan: undefined,\n    getQuickFilterText: undefined,\n    onCellValueChanged: undefined,\n    onCellClicked: undefined,\n    onCellDoubleClicked: undefined,\n    onCellContextMenu: undefined,\n    rowDragText: undefined,\n    tooltipValueGetter: undefined,\n    cellRendererSelector: undefined,\n    cellEditorSelector: undefined,\n    suppressSpanHeaderHeight: undefined,\n    useValueFormatterForExport: undefined,\n    useValueParserForImport: undefined,\n};\nColDefUtil.ALL_PROPERTIES = Object.keys(ColDefUtil.ColDefPropertyMap);\n","// Excel Export\nexport var ExcelFactoryMode;\n(function (ExcelFactoryMode) {\n    ExcelFactoryMode[ExcelFactoryMode[\"SINGLE_SHEET\"] = 0] = \"SINGLE_SHEET\";\n    ExcelFactoryMode[ExcelFactoryMode[\"MULTI_SHEET\"] = 1] = \"MULTI_SHEET\";\n})(ExcelFactoryMode || (ExcelFactoryMode = {}));\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, PreDestroy, Autowired } from \"../context/context.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { removeFromArray } from \"../utils/array.mjs\";\nimport { areEventsNear } from \"../utils/mouse.mjs\";\nimport { isBrowserSafari } from \"../utils/browser.mjs\";\nimport { isFocusableFormField } from \"../utils/dom.mjs\";\n/** Adds drag listening onto an element. In AG Grid this is used twice, first is resizing columns,\n * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */\nlet DragService = class DragService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.dragEndFunctions = [];\n        this.dragSources = [];\n    }\n    removeAllListeners() {\n        this.dragSources.forEach(this.removeListener.bind(this));\n        this.dragSources.length = 0;\n    }\n    removeListener(dragSourceAndListener) {\n        const element = dragSourceAndListener.dragSource.eElement;\n        const mouseDownListener = dragSourceAndListener.mouseDownListener;\n        element.removeEventListener('mousedown', mouseDownListener);\n        // remove touch listener only if it exists\n        if (dragSourceAndListener.touchEnabled) {\n            const touchStartListener = dragSourceAndListener.touchStartListener;\n            element.removeEventListener('touchstart', touchStartListener, { passive: true });\n        }\n    }\n    removeDragSource(params) {\n        const dragSourceAndListener = this.dragSources.find(item => item.dragSource === params);\n        if (!dragSourceAndListener) {\n            return;\n        }\n        this.removeListener(dragSourceAndListener);\n        removeFromArray(this.dragSources, dragSourceAndListener);\n    }\n    isDragging() {\n        return this.dragging;\n    }\n    addDragSource(params) {\n        const mouseListener = this.onMouseDown.bind(this, params);\n        const { eElement, includeTouch, stopPropagationForTouch } = params;\n        eElement.addEventListener('mousedown', mouseListener);\n        let touchListener = null;\n        const suppressTouch = this.gridOptionsService.get('suppressTouch');\n        if (includeTouch && !suppressTouch) {\n            touchListener = (touchEvent) => {\n                if (isFocusableFormField(touchEvent.target)) {\n                    return;\n                }\n                if (touchEvent.cancelable) {\n                    touchEvent.preventDefault();\n                    if (stopPropagationForTouch) {\n                        touchEvent.stopPropagation();\n                    }\n                }\n                this.onTouchStart(params, touchEvent);\n            };\n            // we set passive=false, as we want to prevent default on this event\n            eElement.addEventListener('touchstart', touchListener, { passive: false });\n        }\n        this.dragSources.push({\n            dragSource: params,\n            mouseDownListener: mouseListener,\n            touchStartListener: touchListener,\n            touchEnabled: !!includeTouch\n        });\n    }\n    getStartTarget() {\n        return this.startTarget;\n    }\n    // gets called whenever mouse down on any drag source\n    onTouchStart(params, touchEvent) {\n        this.currentDragParams = params;\n        this.dragging = false;\n        const touch = touchEvent.touches[0];\n        this.touchLastTime = touch;\n        this.touchStart = touch;\n        const touchMoveEvent = (e) => this.onTouchMove(e, params.eElement);\n        const touchEndEvent = (e) => this.onTouchUp(e, params.eElement);\n        const documentTouchMove = (e) => { if (e.cancelable) {\n            e.preventDefault();\n        } };\n        const target = touchEvent.target;\n        const events = [\n            // Prevents the page document from moving while we are dragging items around.\n            // preventDefault needs to be called in the touchmove listener and never inside the\n            // touchstart, because using touchstart causes the click event to be cancelled on touch devices.\n            { target: this.gridOptionsService.getRootNode(), type: 'touchmove', listener: documentTouchMove, options: { passive: false } },\n            { target, type: 'touchmove', listener: touchMoveEvent, options: { passive: true } },\n            { target, type: 'touchend', listener: touchEndEvent, options: { passive: true } },\n            { target, type: 'touchcancel', listener: touchEndEvent, options: { passive: true } }\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n        // see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onCommonMove(touch, this.touchStart, params.eElement);\n        }\n    }\n    // gets called whenever mouse down on any drag source\n    onMouseDown(params, mouseEvent) {\n        const e = mouseEvent;\n        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {\n            return;\n        }\n        // if there are two elements with parent / child relationship, and both are draggable,\n        // when we drag the child, we should NOT drag the parent. an example of this is row moving\n        // and range selection - row moving should get preference when use drags the rowDrag component.\n        if (e._alreadyProcessedByDragService) {\n            return;\n        }\n        e._alreadyProcessedByDragService = true;\n        // only interested in left button clicks\n        if (mouseEvent.button !== 0) {\n            return;\n        }\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\n            mouseEvent.preventDefault();\n        }\n        this.currentDragParams = params;\n        this.dragging = false;\n        this.mouseStartEvent = mouseEvent;\n        this.startTarget = mouseEvent.target;\n        const mouseMoveEvent = (event) => this.onMouseMove(event, params.eElement);\n        const mouseUpEvent = (event) => this.onMouseUp(event, params.eElement);\n        const contextEvent = (event) => event.preventDefault();\n        const target = this.gridOptionsService.getRootNode();\n        const events = [\n            { target, type: 'mousemove', listener: mouseMoveEvent },\n            { target, type: 'mouseup', listener: mouseUpEvent },\n            { target, type: 'contextmenu', listener: contextEvent }\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n        //see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onMouseMove(mouseEvent, params.eElement);\n        }\n    }\n    addTemporaryEvents(events) {\n        events.forEach((currentEvent) => {\n            const { target, type, listener, options } = currentEvent;\n            target.addEventListener(type, listener, options);\n        });\n        this.dragEndFunctions.push(() => {\n            events.forEach((currentEvent) => {\n                const { target, type, listener, options } = currentEvent;\n                target.removeEventListener(type, listener, options);\n            });\n        });\n    }\n    // returns true if the event is close to the original event by X pixels either vertically or horizontally.\n    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n    isEventNearStartEvent(currentEvent, startEvent) {\n        // by default, we wait 4 pixels before starting the drag\n        const { dragStartPixels } = this.currentDragParams;\n        const requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;\n        return areEventsNear(currentEvent, startEvent, requiredPixelDiff);\n    }\n    getFirstActiveTouch(touchList) {\n        for (let i = 0; i < touchList.length; i++) {\n            if (touchList[i].identifier === this.touchStart.identifier) {\n                return touchList[i];\n            }\n        }\n        return null;\n    }\n    onCommonMove(currentEvent, startEvent, el) {\n        if (!this.dragging) {\n            // if mouse hasn't travelled from the start position enough, do nothing\n            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {\n                return;\n            }\n            this.dragging = true;\n            const event = {\n                type: Events.EVENT_DRAG_STARTED,\n                target: el\n            };\n            this.eventService.dispatchEvent(event);\n            this.currentDragParams.onDragStart(startEvent);\n            // we need ONE drag action at the startEvent, so that we are guaranteed the drop target\n            // at the start gets notified. this is because the drag can start outside of the element\n            // that started it, as the mouse is allowed drag away from the mouse down before it's\n            // considered a drag (the isEventNearStartEvent() above). if we didn't do this, then\n            // it would be possible to click a column by the edge, then drag outside of the drop zone\n            // in less than 4 pixels and the drag officially starts outside of the header but the header\n            // wouldn't be notified of the dragging.\n            this.currentDragParams.onDragging(startEvent);\n        }\n        this.currentDragParams.onDragging(currentEvent);\n    }\n    onTouchMove(touchEvent, el) {\n        const touch = this.getFirstActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');\n        this.onCommonMove(touch, this.touchStart, el);\n    }\n    // only gets called after a mouse down - as this is only added after mouseDown\n    // and is removed when mouseUp happens\n    onMouseMove(mouseEvent, el) {\n        var _a;\n        if (isBrowserSafari()) {\n            const eDocument = this.gridOptionsService.getDocument();\n            (_a = eDocument.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n        }\n        if (this.shouldPreventMouseEvent(mouseEvent)) {\n            mouseEvent.preventDefault();\n        }\n        this.onCommonMove(mouseEvent, this.mouseStartEvent, el);\n    }\n    shouldPreventMouseEvent(mouseEvent) {\n        const isEnableCellTextSelect = this.gridOptionsService.get('enableCellTextSelection');\n        const isMouseMove = mouseEvent.type === 'mousemove';\n        return (\n        // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove\n        // to avoid the grid text being selected while dragging components.\n        ((isEnableCellTextSelect && isMouseMove)) &&\n            mouseEvent.cancelable &&\n            this.mouseEventService.isEventFromThisGrid(mouseEvent) &&\n            !this.isOverFormFieldElement(mouseEvent));\n    }\n    isOverFormFieldElement(mouseEvent) {\n        const el = mouseEvent.target;\n        const tagName = el === null || el === void 0 ? void 0 : el.tagName.toLocaleLowerCase();\n        return !!(tagName === null || tagName === void 0 ? void 0 : tagName.match('^a$|textarea|input|select|button'));\n    }\n    onTouchUp(touchEvent, el) {\n        let touch = this.getFirstActiveTouch(touchEvent.changedTouches);\n        // i haven't worked this out yet, but there is no matching touch\n        // when we get the touch up event. to get around this, we swap in\n        // the last touch. this is a hack to 'get it working' while we\n        // figure out what's going on, why we are not getting a touch in\n        // current event.\n        if (!touch) {\n            touch = this.touchLastTime;\n        }\n        // if mouse was left up before we started to move, then this is a tap.\n        // we check this before onUpCommon as onUpCommon resets the dragging\n        // let tap = !this.dragging;\n        // let tapTarget = this.currentDragParams.eElement;\n        this.onUpCommon(touch, el);\n        // if tap, tell user\n        // console.log(`${Math.random()} tap = ${tap}`);\n        // if (tap) {\n        //     tapTarget.click();\n        // }\n    }\n    onMouseUp(mouseEvent, el) {\n        this.onUpCommon(mouseEvent, el);\n    }\n    onUpCommon(eventOrTouch, el) {\n        if (this.dragging) {\n            this.dragging = false;\n            this.currentDragParams.onDragStop(eventOrTouch);\n            const event = {\n                type: Events.EVENT_DRAG_STOPPED,\n                target: el\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        this.mouseStartEvent = null;\n        this.startTarget = null;\n        this.touchStart = null;\n        this.touchLastTime = null;\n        this.currentDragParams = null;\n        this.dragEndFunctions.forEach(func => func());\n        this.dragEndFunctions.length = 0;\n    }\n};\n__decorate([\n    Autowired('mouseEventService')\n], DragService.prototype, \"mouseEventService\", void 0);\n__decorate([\n    PreDestroy\n], DragService.prototype, \"removeAllListeners\", null);\nDragService = __decorate([\n    Bean('dragService')\n], DragService);\nexport { DragService };\n","export class AutoScrollService {\n    constructor(params) {\n        this.tickingInterval = null;\n        this.onScrollCallback = null;\n        this.scrollContainer = params.scrollContainer;\n        this.scrollHorizontally = params.scrollAxis.indexOf('x') !== -1;\n        this.scrollVertically = params.scrollAxis.indexOf('y') !== -1;\n        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;\n        if (params.onScrollCallback) {\n            this.onScrollCallback = params.onScrollCallback;\n        }\n        if (this.scrollVertically) {\n            this.getVerticalPosition = params.getVerticalPosition;\n            this.setVerticalPosition = params.setVerticalPosition;\n        }\n        if (this.scrollHorizontally) {\n            this.getHorizontalPosition = params.getHorizontalPosition;\n            this.setHorizontalPosition = params.setHorizontalPosition;\n        }\n        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || (() => false);\n        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || (() => false);\n    }\n    check(mouseEvent, forceSkipVerticalScroll = false) {\n        const skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();\n        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {\n            return;\n        }\n        const rect = this.scrollContainer.getBoundingClientRect();\n        const scrollTick = this.scrollByTick;\n        this.tickLeft = mouseEvent.clientX < (rect.left + scrollTick);\n        this.tickRight = mouseEvent.clientX > (rect.right - scrollTick);\n        this.tickUp = mouseEvent.clientY < (rect.top + scrollTick) && !skipVerticalScroll;\n        this.tickDown = mouseEvent.clientY > (rect.bottom - scrollTick) && !skipVerticalScroll;\n        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {\n            this.ensureTickingStarted();\n        }\n        else {\n            this.ensureCleared();\n        }\n    }\n    ensureTickingStarted() {\n        if (this.tickingInterval === null) {\n            this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);\n            this.tickCount = 0;\n        }\n    }\n    doTick() {\n        this.tickCount++;\n        let tickAmount;\n        tickAmount = this.tickCount > 20 ? 200 : (this.tickCount > 10 ? 80 : 40);\n        if (this.scrollVertically) {\n            const vScrollPosition = this.getVerticalPosition();\n            if (this.tickUp) {\n                this.setVerticalPosition(vScrollPosition - tickAmount);\n            }\n            if (this.tickDown) {\n                this.setVerticalPosition(vScrollPosition + tickAmount);\n            }\n        }\n        if (this.scrollHorizontally) {\n            const hScrollPosition = this.getHorizontalPosition();\n            if (this.tickLeft) {\n                this.setHorizontalPosition(hScrollPosition - tickAmount);\n            }\n            if (this.tickRight) {\n                this.setHorizontalPosition(hScrollPosition + tickAmount);\n            }\n        }\n        if (this.onScrollCallback) {\n            this.onScrollCallback();\n        }\n    }\n    ensureCleared() {\n        if (this.tickingInterval) {\n            window.clearInterval(this.tickingInterval);\n            this.tickingInterval = null;\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AutoScrollService } from \"../autoScrollService.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { radioCssClass } from \"../utils/dom.mjs\";\nimport { DragAndDropService } from \"./dragAndDropService.mjs\";\nconst LIST_ITEM_HOVERED = 'ag-list-item-hovered';\nexport class VirtualListDragFeature extends BeanStub {\n    constructor(comp, virtualList, params) {\n        super();\n        this.comp = comp;\n        this.virtualList = virtualList;\n        this.params = params;\n        this.currentDragValue = null;\n        this.lastHoveredListItem = null;\n    }\n    postConstruct() {\n        this.addManagedListener(this.params.eventSource, this.params.listItemDragStartEvent, this.listItemDragStart.bind(this));\n        this.addManagedListener(this.params.eventSource, this.params.listItemDragEndEvent, this.listItemDragEnd.bind(this));\n        this.createDropTarget();\n        this.createAutoScrollService();\n    }\n    listItemDragStart(event) {\n        this.currentDragValue = this.params.getCurrentDragValue(event);\n        this.moveBlocked = this.params.isMoveBlocked(this.currentDragValue);\n    }\n    listItemDragEnd() {\n        window.setTimeout(() => {\n            this.currentDragValue = null;\n            this.moveBlocked = false;\n        }, 10);\n    }\n    createDropTarget() {\n        const dropTarget = {\n            isInterestedIn: (type) => type === this.params.dragSourceType,\n            getIconName: () => DragAndDropService[this.moveBlocked ? 'ICON_NOT_ALLOWED' : 'ICON_MOVE'],\n            getContainer: () => this.comp.getGui(),\n            onDragging: (e) => this.onDragging(e),\n            onDragStop: () => this.onDragStop(),\n            onDragLeave: () => this.onDragLeave()\n        };\n        this.dragAndDropService.addDropTarget(dropTarget);\n    }\n    createAutoScrollService() {\n        const virtualListGui = this.virtualList.getGui();\n        this.autoScrollService = new AutoScrollService({\n            scrollContainer: virtualListGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => virtualListGui.scrollTop,\n            setVerticalPosition: (position) => virtualListGui.scrollTop = position\n        });\n    }\n    onDragging(e) {\n        if (!this.currentDragValue || this.moveBlocked) {\n            return;\n        }\n        const hoveredListItem = this.getListDragItem(e);\n        const comp = this.virtualList.getComponentAt(hoveredListItem.rowIndex);\n        if (!comp) {\n            return;\n        }\n        const el = comp.getGui().parentElement;\n        if (this.lastHoveredListItem &&\n            this.lastHoveredListItem.rowIndex === hoveredListItem.rowIndex &&\n            this.lastHoveredListItem.position === hoveredListItem.position) {\n            return;\n        }\n        this.autoScrollService.check(e.event);\n        this.clearHoveredItems();\n        this.lastHoveredListItem = hoveredListItem;\n        radioCssClass(el, LIST_ITEM_HOVERED);\n        radioCssClass(el, `ag-item-highlight-${hoveredListItem.position}`);\n    }\n    getListDragItem(e) {\n        const virtualListGui = this.virtualList.getGui();\n        const paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop);\n        const rowHeight = this.virtualList.getRowHeight();\n        const scrollTop = this.virtualList.getScrollTop();\n        const rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);\n        const maxLen = this.params.getNumRows(this.comp) - 1;\n        const normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;\n        return {\n            rowIndex: normalizedRowIndex,\n            position: (Math.round(rowIndex) > rowIndex || rowIndex > maxLen) ? 'bottom' : 'top',\n            component: this.virtualList.getComponentAt(normalizedRowIndex)\n        };\n    }\n    onDragStop() {\n        if (this.moveBlocked) {\n            return;\n        }\n        this.params.moveItem(this.currentDragValue, this.lastHoveredListItem);\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n    onDragLeave() {\n        this.clearHoveredItems();\n        this.autoScrollService.ensureCleared();\n    }\n    clearHoveredItems() {\n        const virtualListGui = this.virtualList.getGui();\n        virtualListGui.querySelectorAll(`.${LIST_ITEM_HOVERED}`).forEach(el => {\n            [\n                LIST_ITEM_HOVERED,\n                'ag-item-highlight-top',\n                'ag-item-highlight-bottom'\n            ].forEach(cls => {\n                el.classList.remove(cls);\n            });\n        });\n        this.lastHoveredListItem = null;\n    }\n}\n__decorate([\n    Autowired('dragAndDropService')\n], VirtualListDragFeature.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    PostConstruct\n], VirtualListDragFeature.prototype, \"postConstruct\", null);\n","export var RowHighlightPosition;\n(function (RowHighlightPosition) {\n    RowHighlightPosition[RowHighlightPosition[\"Above\"] = 0] = \"Above\";\n    RowHighlightPosition[RowHighlightPosition[\"Below\"] = 1] = \"Below\";\n})(RowHighlightPosition || (RowHighlightPosition = {}));\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, Optional, PostConstruct } from \"./context/context.mjs\";\nimport { ExcelFactoryMode } from \"./interfaces/iExcelCreator.mjs\";\nimport { ModuleNames } from \"./modules/moduleNames.mjs\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry.mjs\";\nimport { exists, missing } from \"./utils/generic.mjs\";\nimport { iterateObject, removeAllReferences } from \"./utils/object.mjs\";\nimport { Events } from './eventKeys.mjs';\nimport { warnOnce } from \"./utils/function.mjs\";\nexport function unwrapUserComp(comp) {\n    const compAsAny = comp;\n    const isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;\n    return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;\n}\nlet GridApi = class GridApi {\n    constructor() {\n        this.detailGridInfoMap = {};\n        this.destroyCalled = false;\n    }\n    init() {\n        switch (this.rowModel.getType()) {\n            case 'clientSide':\n                this.clientSideRowModel = this.rowModel;\n                break;\n            case 'infinite':\n                this.infiniteRowModel = this.rowModel;\n                break;\n            case 'serverSide':\n                this.serverSideRowModel = this.rowModel;\n                break;\n        }\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    __getAlignedGridService() {\n        return this.alignedGridsService;\n    }\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    __getContext() {\n        return this.context;\n    }\n    /** Returns the `gridId` for the current grid as specified via the gridOptions property `gridId` or the auto assigned grid id if none was provided. */\n    getGridId() {\n        return this.context.getGridId();\n    }\n    /** Register a detail grid with the master grid when it is created. */\n    addDetailGridInfo(id, gridInfo) {\n        this.detailGridInfoMap[id] = gridInfo;\n    }\n    /** Unregister a detail grid from the master grid when it is destroyed. */\n    removeDetailGridInfo(id) {\n        this.detailGridInfoMap[id] = undefined;\n    }\n    /** Returns the `DetailGridInfo` corresponding to the supplied `detailGridId`. */\n    getDetailGridInfo(id) {\n        return this.detailGridInfoMap[id];\n    }\n    /** Iterates through each `DetailGridInfo` in the grid and calls the supplied callback on each. */\n    forEachDetailGridInfo(callback) {\n        let index = 0;\n        iterateObject(this.detailGridInfoMap, (id, gridInfo) => {\n            // check for undefined, as old references will still be lying around\n            if (exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    }\n    /** Similar to `exportDataAsCsv`, except returns the result as a string rather than download it. */\n    getDataAsCsv(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv', this.context.getGridId())) {\n            return this.csvCreator.getDataAsCsv(params);\n        }\n    }\n    /** Downloads a CSV export of the grid's data. */\n    exportDataAsCsv(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv', this.context.getGridId())) {\n            this.csvCreator.exportDataAsCsv(params);\n        }\n    }\n    assertNotExcelMultiSheet(method, params) {\n        if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.' + method, this.context.getGridId())) {\n            return false;\n        }\n        if (this.excelCreator.getFactoryMode() === ExcelFactoryMode.MULTI_SHEET) {\n            console.warn(\"AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'\");\n            return false;\n        }\n        return true;\n    }\n    /** Similar to `exportDataAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */\n    getDataAsExcel(params) {\n        if (this.assertNotExcelMultiSheet('getDataAsExcel', params)) {\n            return this.excelCreator.getDataAsExcel(params);\n        }\n    }\n    /** Downloads an Excel export of the grid's data. */\n    exportDataAsExcel(params) {\n        if (this.assertNotExcelMultiSheet('exportDataAsExcel', params)) {\n            this.excelCreator.exportDataAsExcel(params);\n        }\n    }\n    /** This is method to be used to get the grid's data as a sheet, that will later be exported either by `getMultipleSheetsAsExcel()` or `exportMultipleSheetsAsExcel()`. */\n    getSheetDataForExcel(params) {\n        if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.getSheetDataForExcel', this.context.getGridId())) {\n            return;\n        }\n        this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET);\n        return this.excelCreator.getSheetDataForExcel(params);\n    }\n    /** Similar to `exportMultipleSheetsAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */\n    getMultipleSheetsAsExcel(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.getMultipleSheetsAsExcel', this.context.getGridId())) {\n            return this.excelCreator.getMultipleSheetsAsExcel(params);\n        }\n    }\n    /** Downloads an Excel export of multiple sheets in one file. */\n    exportMultipleSheetsAsExcel(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, 'api.exportMultipleSheetsAsExcel', this.context.getGridId())) {\n            return this.excelCreator.exportMultipleSheetsAsExcel(params);\n        }\n    }\n    /**\n     * Sets an ARIA property in the grid panel (element with `role=\\\"grid\\\"`), and removes an ARIA property when the value is null.\n     *\n     * Example: `api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\\\"my grid\\\"`.\n     *\n     * `api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element.\n     */\n    setGridAriaProperty(property, value) {\n        if (!property) {\n            return;\n        }\n        const eGrid = this.ctrlsService.getGridBodyCtrl().getGui();\n        const ariaProperty = `aria-${property}`;\n        if (value === null) {\n            eGrid.removeAttribute(ariaProperty);\n        }\n        else {\n            eGrid.setAttribute(ariaProperty, value);\n        }\n    }\n    logMissingRowModel(apiMethod, ...requiredRowModels) {\n        console.error(`AG Grid: api.${apiMethod} can only be called when gridOptions.rowModelType is ${requiredRowModels.join(' or ')}`);\n    }\n    /** Gets the number of top pinned rows. */\n    getPinnedTopRowCount() {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    }\n    /** Gets the number of bottom pinned rows. */\n    getPinnedBottomRowCount() {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    }\n    /** Gets the top pinned row with the specified index. */\n    getPinnedTopRow(index) {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    }\n    /** Gets the bottom pinned row with the specified index. */\n    getPinnedBottomRow(index) {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    }\n    expireValueCache() {\n        this.valueCache.expire();\n    }\n    /**\n     * Returns an object with two properties:\n     *  - `top`: The top pixel position of the current scroll in the grid\n     *  - `bottom`: The bottom pixel position of the current scroll in the grid\n     */\n    getVerticalPixelRange() {\n        return this.gridBodyCtrl.getScrollFeature().getVScrollPosition();\n    }\n    /**\n     * Returns an object with two properties:\n     * - `left`: The left pixel position of the current scroll in the grid\n     * - `right`: The right pixel position of the current scroll in the grid\n     */\n    getHorizontalPixelRange() {\n        return this.gridBodyCtrl.getScrollFeature().getHScrollPosition();\n    }\n    /** Performs change detection on all cells, refreshing cells where required. */\n    refreshCells(params = {}) {\n        this.rowRenderer.refreshCells(params);\n    }\n    /** Flash rows, columns or individual cells. */\n    flashCells(params = {}) {\n        this.rowRenderer.flashCells(params);\n    }\n    /** Remove row(s) from the DOM and recreate them again from scratch. */\n    redrawRows(params = {}) {\n        const rowNodes = params ? params.rowNodes : undefined;\n        this.rowRenderer.redrawRows(rowNodes);\n    }\n    /** Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed. */\n    refreshHeader() {\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach(c => c.refresh());\n    }\n    /** Returns `true` if any filter is set. This includes quick filter, column filter, external filter or advanced filter. */\n    isAnyFilterPresent() {\n        return this.filterManager.isAnyFilterPresent();\n    }\n    /** Returns `true` if any column filter is set, otherwise `false`. */\n    isColumnFilterPresent() {\n        return this.filterManager.isColumnFilterPresent() || this.filterManager.isAggregateFilterPresent();\n    }\n    /** Returns `true` if the Quick Filter is set, otherwise `false`. */\n    isQuickFilterPresent() {\n        return this.filterManager.isQuickFilterPresent();\n    }\n    /**\n     * Returns the row model inside the table.\n     * From here you can see the original rows, rows after filter has been applied,\n     * rows after aggregation has been applied, and the final set of 'to be displayed' rows.\n     */\n    getModel() {\n        return this.rowModel;\n    }\n    /** Expand or collapse a specific row node, optionally expanding/collapsing all of its parent nodes. */\n    setRowNodeExpanded(rowNode, expanded, expandParents) {\n        this.expansionService.setRowNodeExpanded(rowNode, expanded, expandParents);\n    }\n    /**\n     * Informs the grid that row group expanded state has changed and it needs to rerender the group nodes.\n     * Typically called after updating the row node expanded state explicitly, i.e `rowNode.expanded = false`,\n     * across multiple groups and you want to update the grid view in a single rerender instead of on every group change.\n     */\n    onGroupExpandedOrCollapsed() {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('onGroupExpandedOrCollapsed', 'clientSide');\n            return;\n        }\n        this.expansionService.onGroupExpandedOrCollapsed();\n    }\n    /**\n     * Refresh the Client-Side Row Model, executing the grouping, filtering and sorting again.\n     * Optionally provide the step you wish the refresh to apply from. Defaults to `everything`.\n     */\n    refreshClientSideRowModel(step) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('refreshClientSideRowModel', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.refreshModel(step);\n    }\n    /** Returns `true` when there are no more animation frames left to process. */\n    isAnimationFrameQueueEmpty() {\n        return this.animationFrameService.isQueueEmpty();\n    }\n    flushAllAnimationFrames() {\n        this.animationFrameService.flushAllFrames();\n    }\n    /**\n     * Returns the row node with the given ID.\n     * The row node ID is the one you provide from the callback `getRowId(params)`,\n     * otherwise the ID is a number (cast as string) auto-generated by the grid when\n     * the row data is set.\n     */\n    getRowNode(id) {\n        return this.rowModel.getRowNode(id);\n    }\n    /**\n     * Gets the sizes that various UI elements will be rendered at with the current theme.\n     * If you override the row or header height using `gridOptions`, the override value you provided will be returned.\n     */\n    getSizesForCurrentTheme() {\n        return {\n            rowHeight: this.gos.getRowHeightAsNumber(),\n            headerHeight: this.columnModel.getHeaderHeight()\n        };\n    }\n    /** Expand all groups. */\n    expandAll() {\n        if (this.clientSideRowModel || this.serverSideRowModel) {\n            this.expansionService.expandAll(true);\n        }\n        else {\n            this.logMissingRowModel('expandAll', 'clientSide', 'serverSide');\n        }\n    }\n    /** Collapse all groups. */\n    collapseAll() {\n        if (this.clientSideRowModel || this.serverSideRowModel) {\n            this.expansionService.expandAll(false);\n        }\n        else {\n            this.logMissingRowModel('collapseAll', 'clientSide', 'serverSide');\n        }\n    }\n    /**\n     * Registers a callback to a virtual row.\n     * A virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered).\n     * Unlike normal events, you do not need to unregister rendered row listeners.\n     * When the rendered row is removed from the grid, all associated rendered row listeners will also be removed.\n     * listen for this event if your `cellRenderer` needs to do cleanup when the row no longer exists.\n     */\n    addRenderedRowListener(eventName, rowIndex, callback) {\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n    }\n    /** Get the current Quick Filter text from the grid, or `undefined` if none is set. */\n    getQuickFilter() {\n        return this.gos.get('quickFilterText');\n    }\n    /** Get the state of the Advanced Filter. Used for saving Advanced Filter state */\n    getAdvancedFilterModel() {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, 'api.getAdvancedFilterModel', this.context.getGridId())) {\n            return this.filterManager.getAdvancedFilterModel();\n        }\n        return null;\n    }\n    /** Set the state of the Advanced Filter. Used for restoring Advanced Filter state */\n    setAdvancedFilterModel(advancedFilterModel) {\n        this.filterManager.setAdvancedFilterModel(advancedFilterModel);\n    }\n    /** Open the Advanced Filter Builder dialog (if enabled). */\n    showAdvancedFilterBuilder() {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, 'api.setAdvancedFilterModel', this.context.getGridId())) {\n            this.filterManager.showAdvancedFilterBuilder('api');\n        }\n    }\n    /**\n     * Set all of the provided nodes selection state to the provided value.\n     */\n    setNodesSelected(params) {\n        const allNodesValid = params.nodes.every(node => {\n            if (node.rowPinned) {\n                console.warn('AG Grid: cannot select pinned rows');\n                return false;\n            }\n            if (node.id === undefined) {\n                console.warn('AG Grid: cannot select node until id for node is known');\n                return false;\n            }\n            return true;\n        });\n        if (!allNodesValid) {\n            return;\n        }\n        const { nodes, source, newValue } = params;\n        const nodesAsRowNode = nodes;\n        this.selectionService.setNodesSelected({ nodes: nodesAsRowNode, source: source !== null && source !== void 0 ? source : 'api', newValue });\n    }\n    /**\n     * Select all rows, regardless of filtering and rows that are not visible due to grouping being enabled and their groups not expanded.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`\n     */\n    selectAll(source = 'apiSelectAll') {\n        this.selectionService.selectAllRowNodes({ source });\n    }\n    /**\n     * Clear all row selections, regardless of filtering.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAll'`\n     */\n    deselectAll(source = 'apiSelectAll') {\n        this.selectionService.deselectAllRowNodes({ source });\n    }\n    /**\n     * Select all filtered rows.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`\n     */\n    selectAllFiltered(source = 'apiSelectAllFiltered') {\n        this.selectionService.selectAllRowNodes({ source, justFiltered: true });\n    }\n    /**\n     * Clear all filtered selections.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllFiltered'`\n     */\n    deselectAllFiltered(source = 'apiSelectAllFiltered') {\n        this.selectionService.deselectAllRowNodes({ source, justFiltered: true });\n    }\n    /**\n     * Returns an object containing rules matching the selected rows in the SSRM.\n     *\n     * If `groupSelectsChildren=false` the returned object will be flat, and will conform to IServerSideSelectionState.\n     * If `groupSelectsChildren=true` the returned object will be hierarchical, and will conform to IServerSideGroupSelectionState.\n     */\n    getServerSideSelectionState() {\n        if (missing(this.serverSideRowModel)) {\n            this.logMissingRowModel('getServerSideSelectionState', 'serverSide');\n            return null;\n        }\n        return this.selectionService.getSelectionState();\n    }\n    /**\n     * Set the rules matching the selected rows in the SSRM.\n     *\n     * If `groupSelectsChildren=false` the param will be flat, and should conform to IServerSideSelectionState.\n     * If `groupSelectsChildren=true` the param will be hierarchical, and should conform to IServerSideGroupSelectionState.\n     */\n    setServerSideSelectionState(state) {\n        if (missing(this.serverSideRowModel)) {\n            this.logMissingRowModel('setServerSideSelectionState', 'serverSide');\n            return;\n        }\n        this.selectionService.setSelectionState(state, 'api');\n    }\n    /**\n     * Select all rows on the current page.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`\n     */\n    selectAllOnCurrentPage(source = 'apiSelectAllCurrentPage') {\n        this.selectionService.selectAllRowNodes({ source, justCurrentPage: true });\n    }\n    /**\n     * Clear all filtered on the current page.\n     * @param source Source property that will appear in the `selectionChanged` event, defaults to `'apiSelectAllCurrentPage'`\n     */\n    deselectAllOnCurrentPage(source = 'apiSelectAllCurrentPage') {\n        this.selectionService.deselectAllRowNodes({ source, justCurrentPage: true });\n    }\n    /** Show the 'loading' overlay. */\n    showLoadingOverlay() {\n        this.overlayService.showLoadingOverlay();\n    }\n    /** Show the 'no rows' overlay. */\n    showNoRowsOverlay() {\n        this.overlayService.showNoRowsOverlay();\n    }\n    /** Hides the overlay if showing. */\n    hideOverlay() {\n        this.overlayService.hideOverlay();\n    }\n    /**\n     * Returns an unsorted list of selected nodes.\n     * Getting the underlying node (rather than the data) is useful when working with tree / aggregated data,\n     * as the node can be traversed.\n     */\n    getSelectedNodes() {\n        return this.selectionService.getSelectedNodes();\n    }\n    /** Returns an unsorted list of selected rows (i.e. row data that you provided). */\n    getSelectedRows() {\n        return this.selectionService.getSelectedRows();\n    }\n    /**\n     * Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees.\n     * If a group has all its children selected, then the group appears in the result, but not the children.\n     * Designed for use with `'children'` as the group selection type, where groups don't actually appear in the selection normally.\n     */\n    getBestCostNodeSelection() {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('getBestCostNodeSelection', 'clientSide');\n            return;\n        }\n        return this.selectionService.getBestCostNodeSelection();\n    }\n    /** Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer. */\n    getRenderedNodes() {\n        return this.rowRenderer.getRenderedNodes();\n    }\n    /**\n     *  Ensures the column is visible by scrolling the table if needed.\n     *\n     * This will have no effect before the firstDataRendered event has fired.\n     *\n     * @param key - The column to ensure visible\n     * @param position - Where the column will be positioned.\n     * - `auto` - Scrolls the minimum amount to make sure the column is visible.\n     * - `start` - Scrolls the column to the start of the viewport.\n     * - `middle` - Scrolls the column to the middle of the viewport.\n     * - `end` - Scrolls the column to the end of the viewport.\n    */\n    ensureColumnVisible(key, position = 'auto') {\n        this.gridBodyCtrl.getScrollFeature().ensureColumnVisible(key, position);\n    }\n    /**\n     * Vertically scrolls the grid until the provided row index is inside the visible viewport.\n     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\n     * This will have no effect before the firstDataRendered event has fired.\n     */\n    ensureIndexVisible(index, position) {\n        this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(index, position);\n    }\n    /**\n     * Vertically scrolls the grid until the provided row (or a row matching the provided comparator) is inside the visible viewport.\n     * If a position is provided, the grid will attempt to scroll until the row is at the given position within the viewport.\n     * This will have no effect before the firstDataRendered event has fired.\n     */\n    ensureNodeVisible(nodeSelector, position = null) {\n        this.gridBodyCtrl.getScrollFeature().ensureNodeVisible(nodeSelector, position);\n    }\n    /**\n     * Similar to `forEachNode`, except lists all the leaf nodes.\n     * This effectively goes through all the data that you provided to the grid before the grid performed any grouping.\n     * If using tree data, goes through all the nodes for the data you provided, including nodes that have children,\n     * but excluding groups the grid created where gaps were missing in the hierarchy.\n     */\n    forEachLeafNode(callback) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('forEachLeafNode', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    }\n    /**\n     * Iterates through each node (row) in the grid and calls the callback for each node.\n     * This works similar to the `forEach` method on a JavaScript array.\n     * This is called for every node, ignoring any filtering or sorting applied within the grid.\n     * If using the Infinite Row Model, then this gets called for each page loaded in the page cache.\n     */\n    forEachNode(callback, includeFooterNodes) {\n        this.rowModel.forEachNode(callback, includeFooterNodes);\n    }\n    /** Similar to `forEachNode`, except skips any filtered out data. */\n    forEachNodeAfterFilter(callback) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('forEachNodeAfterFilter', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    }\n    /** Similar to `forEachNodeAfterFilter`, except the callbacks are called in the order the rows are displayed in the grid. */\n    forEachNodeAfterFilterAndSort(callback) {\n        if (missing(this.clientSideRowModel)) {\n            this.logMissingRowModel('forEachNodeAfterFilterAndSort', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    }\n    /**\n     * Returns the filter component instance for a column.\n     * `key` can be a string field name or a ColDef object (matches on object reference, useful if field names are not unique).\n     * If your filter is created asynchronously, `getFilterInstance` will return `null` so you will need to use the `callback` to access the filter instance instead.\n     */\n    getFilterInstance(key, callback) {\n        return this.filterManager.getFilterInstance(key, callback);\n    }\n    /** Destroys a filter. Useful to force a particular filter to be created from scratch again. */\n    destroyFilter(key) {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, 'api');\n        }\n    }\n    /** Gets the status panel instance corresponding to the supplied `id`. */\n    getStatusPanel(key) {\n        if (!ModuleRegistry.__assertRegistered(ModuleNames.StatusBarModule, 'api.getStatusPanel', this.context.getGridId())) {\n            return;\n        }\n        const comp = this.statusBarService.getStatusPanel(key);\n        return unwrapUserComp(comp);\n    }\n    getColumnDef(key) {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        }\n        return null;\n    }\n    /**\n     * Returns the current column definitions.\n    */\n    getColumnDefs() { return this.columnModel.getColumnDefs(); }\n    /**\n     * Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs.\n     * @param source The source of the filter change event. If not specified defaults to `'api'`.\n     */\n    onFilterChanged(source = 'api') {\n        this.filterManager.onFilterChanged({ source });\n    }\n    /**\n     * Gets the grid to act as if the sort was changed.\n     * Useful if you update some values and want to get the grid to reorder them according to the new values.\n     */\n    onSortChanged() {\n        this.sortController.onSortChanged('api');\n    }\n    /**\n     * Sets the state of all the column filters. Provide it with what you get from `getFilterModel()` to restore filter state.\n     * If inferring cell data types, and row data is provided asynchronously and is yet to be set,\n     * the filter model will be applied asynchronously after row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition,\n     * or provide cell data types for every column.\n     */\n    setFilterModel(model) {\n        this.filterManager.setFilterModel(model);\n    }\n    /** Gets the current state of all the column filters. Used for saving filter state. */\n    getFilterModel() {\n        return this.filterManager.getFilterModel();\n    }\n    /** Returns the focused cell (or the last focused cell if the grid lost focus). */\n    getFocusedCell() {\n        return this.focusService.getFocusedCell();\n    }\n    /** Clears the focused cell. */\n    clearFocusedCell() {\n        return this.focusService.clearFocusedCell();\n    }\n    /** Sets the focus to the specified cell. `rowPinned` can be either 'top', 'bottom' or null (for not pinned). */\n    setFocusedCell(rowIndex, colKey, rowPinned) {\n        this.focusService.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });\n    }\n    /** Adds a drop zone outside of the grid where rows can be dropped. */\n    addRowDropZone(params) {\n        this.gridBodyCtrl.getRowDragFeature().addRowDropZone(params);\n    }\n    /** Removes an external drop zone added by `addRowDropZone`. */\n    removeRowDropZone(params) {\n        const activeDropTarget = this.dragAndDropService.findExternalZone(params);\n        if (activeDropTarget) {\n            this.dragAndDropService.removeDropTarget(activeDropTarget);\n        }\n    }\n    /** Returns the `RowDropZoneParams` to be used by another grid's `addRowDropZone` method. */\n    getRowDropZoneParams(events) {\n        return this.gridBodyCtrl.getRowDragFeature().getRowDropZone(events);\n    }\n    assertSideBarLoaded(apiMethod) {\n        return ModuleRegistry.__assertRegistered(ModuleNames.SideBarModule, 'api.' + apiMethod, this.context.getGridId());\n    }\n    /** Returns `true` if the side bar is visible. */\n    isSideBarVisible() {\n        return this.assertSideBarLoaded('isSideBarVisible') && this.sideBarService.getSideBarComp().isDisplayed();\n    }\n    /** Show/hide the entire side bar, including any visible panel and the tab buttons. */\n    setSideBarVisible(show) {\n        if (this.assertSideBarLoaded('setSideBarVisible')) {\n            this.sideBarService.getSideBarComp().setDisplayed(show);\n        }\n    }\n    /** Sets the side bar position relative to the grid. Possible values are `'left'` or `'right'`. */\n    setSideBarPosition(position) {\n        if (this.assertSideBarLoaded('setSideBarPosition')) {\n            this.sideBarService.getSideBarComp().setSideBarPosition(position);\n        }\n    }\n    /** Opens a particular tool panel. Provide the ID of the tool panel to open. */\n    openToolPanel(key) {\n        if (this.assertSideBarLoaded('openToolPanel')) {\n            this.sideBarService.getSideBarComp().openToolPanel(key, 'api');\n        }\n    }\n    /** Closes the currently open tool panel (if any). */\n    closeToolPanel() {\n        if (this.assertSideBarLoaded('closeToolPanel')) {\n            this.sideBarService.getSideBarComp().close('api');\n        }\n    }\n    /** Returns the ID of the currently shown tool panel if any, otherwise `null`. */\n    getOpenedToolPanel() {\n        if (this.assertSideBarLoaded('getOpenedToolPanel')) {\n            return this.sideBarService.getSideBarComp().openedItem();\n        }\n        return null;\n    }\n    /** Force refresh all tool panels by calling their `refresh` method. */\n    refreshToolPanel() {\n        if (this.assertSideBarLoaded('refreshToolPanel')) {\n            this.sideBarService.getSideBarComp().refresh();\n        }\n    }\n    /** Returns `true` if the tool panel is showing, otherwise `false`. */\n    isToolPanelShowing() {\n        return this.assertSideBarLoaded('isToolPanelShowing') && this.sideBarService.getSideBarComp().isToolPanelShowing();\n    }\n    /** Gets the tool panel instance corresponding to the supplied `id`. */\n    getToolPanelInstance(id) {\n        if (this.assertSideBarLoaded('getToolPanelInstance')) {\n            const comp = this.sideBarService.getSideBarComp().getToolPanelInstance(id);\n            return unwrapUserComp(comp);\n        }\n    }\n    /** Returns the current side bar configuration. If a shortcut was used, returns the detailed long form. */\n    getSideBar() {\n        if (this.assertSideBarLoaded('getSideBar')) {\n            return this.sideBarService.getSideBarComp().getDef();\n        }\n        return undefined;\n    }\n    /** Tells the grid to recalculate the row heights. */\n    resetRowHeights() {\n        if (exists(this.clientSideRowModel)) {\n            if (this.columnModel.isAutoRowHeightActive()) {\n                console.warn('AG Grid: calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.');\n                return;\n            }\n            this.clientSideRowModel.resetRowHeights();\n        }\n    }\n    /**\n     * Sets the `rowCount` and `maxRowFound` properties.\n     * The second parameter, `maxRowFound`, is optional and if left out, only `rowCount` is set.\n     * Set `rowCount` to adjust the height of the vertical scroll.\n     * Set `maxRowFound` to enable / disable searching for more rows.\n     * Use this method if you add or remove rows into the dataset and need to reset the number of rows or instruct the grid that the entire row count is no longer known.\n     */\n    setRowCount(rowCount, maxRowFound) {\n        if (this.serverSideRowModel) {\n            if (this.columnModel.isRowGroupEmpty()) {\n                this.serverSideRowModel.setRowCount(rowCount, maxRowFound);\n                return;\n            }\n            console.error('AG Grid: setRowCount cannot be used while using row grouping.');\n            return;\n        }\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.setRowCount(rowCount, maxRowFound);\n            return;\n        }\n        this.logMissingRowModel('setRowCount', 'infinite', 'serverSide');\n    }\n    /** Tells the grid a row height has changed. To be used after calling `rowNode.setRowHeight(newHeight)`. */\n    onRowHeightChanged() {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.onRowHeightChanged();\n        }\n        else if (this.serverSideRowModel) {\n            this.serverSideRowModel.onRowHeightChanged();\n        }\n    }\n    /**\n     * Gets the value for a column for a particular `rowNode` (row).\n     * This is useful if you want the raw value of a cell e.g. if implementing your own CSV export.\n     */\n    getValue(colKey, rowNode) {\n        let column = this.columnModel.getPrimaryColumn(colKey);\n        if (missing(column)) {\n            column = this.columnModel.getGridColumn(colKey);\n        }\n        if (missing(column)) {\n            return null;\n        }\n        return this.valueService.getValue(column, rowNode);\n    }\n    /**\n     * Add an event listener for the specified `eventType`.\n     * Works similar to `addEventListener` for a browser DOM element.\n     * Listeners will be automatically removed when the grid is destroyed.\n     */\n    addEventListener(eventType, listener) {\n        this.apiEventService.addEventListener(eventType, listener);\n    }\n    /**\n     * Add an event listener for all event types coming from the grid.\n     * Listeners will be automatically removed when the grid is destroyed.\n     */\n    addGlobalListener(listener) {\n        this.apiEventService.addGlobalListener(listener);\n    }\n    /** Remove an event listener. */\n    removeEventListener(eventType, listener) {\n        this.apiEventService.removeEventListener(eventType, listener);\n    }\n    /** Remove a global event listener. */\n    removeGlobalListener(listener) {\n        this.apiEventService.removeGlobalListener(listener);\n    }\n    dispatchEvent(event) {\n        this.eventService.dispatchEvent(event);\n    }\n    /** Will destroy the grid and release resources. If you are using a framework you do not need to call this, as the grid links in with the framework lifecycle. However if you are using Web Components or native JavaScript, you do need to call this, to avoid a memory leak in your application. */\n    destroy() {\n        // Get framework link before this is destroyed\n        const preDestroyLink = `See ${this.frameworkOverrides.getDocLink('grid-lifecycle/#grid-pre-destroyed')}`;\n        // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n        // of context.destroy(). so we need to stop the infinite loop.\n        if (this.destroyCalled) {\n            return;\n        }\n        const event = {\n            type: Events.EVENT_GRID_PRE_DESTROYED,\n            state: this.getState()\n        };\n        this.dispatchEvent(event);\n        // Set after pre-destroy so user can still use the api in pre-destroy event and it is not marked as destroyed yet.\n        this.destroyCalled = true;\n        // destroy the UI first (as they use the services)\n        const gridCtrl = this.ctrlsService.getGridCtrl();\n        if (gridCtrl) {\n            gridCtrl.destroyGridUi();\n        }\n        // destroy the services\n        this.context.destroy();\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in the API so at least the core grid can be garbage collected.\n        removeAllReferences(this, ['isDestroyed'], preDestroyLink);\n    }\n    /** Returns `true` if the grid has been destroyed. */\n    isDestroyed() {\n        return this.destroyCalled;\n    }\n    /** Reset the Quick Filter cache text on every rowNode. */\n    resetQuickFilter() {\n        this.filterManager.resetQuickFilterCache();\n    }\n    /** Returns the list of selected cell ranges. */\n    getCellRanges() {\n        if (this.rangeService) {\n            return this.rangeService.getCellRanges();\n        }\n        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, 'api.getCellRanges', this.context.getGridId());\n        return null;\n    }\n    /** Adds the provided cell range to the selected ranges. */\n    addCellRange(params) {\n        if (this.rangeService) {\n            this.rangeService.addCellRange(params);\n            return;\n        }\n        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, 'api.addCellRange', this.context.getGridId());\n    }\n    /** Clears the selected ranges. */\n    clearRangeSelection() {\n        if (this.rangeService) {\n            this.rangeService.removeAllCellRanges();\n        }\n        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, 'gridApi.clearRangeSelection', this.context.getGridId());\n    }\n    /** Reverts the last cell edit. */\n    undoCellEditing() {\n        this.undoRedoService.undo('api');\n    }\n    /** Re-applies the most recently undone cell edit. */\n    redoCellEditing() {\n        this.undoRedoService.redo('api');\n    }\n    /** Returns current number of available cell edit undo operations. */\n    getCurrentUndoSize() {\n        return this.undoRedoService.getCurrentUndoStackSize();\n    }\n    /** Returns current number of available cell edit redo operations. */\n    getCurrentRedoSize() {\n        return this.undoRedoService.getCurrentRedoStackSize();\n    }\n    /** Returns a list of models with information about the charts that are currently rendered from the grid. */\n    getChartModels() {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels', this.context.getGridId())) {\n            return this.chartService.getChartModels();\n        }\n    }\n    /** Returns the `ChartRef` using the supplied `chartId`. */\n    getChartRef(chartId) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.getChartRef', this.context.getGridId())) {\n            return this.chartService.getChartRef(chartId);\n        }\n    }\n    /** Returns a base64-encoded image data URL for the referenced chartId. */\n    getChartImageDataURL(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.getChartImageDataURL', this.context.getGridId())) {\n            return this.chartService.getChartImageDataURL(params);\n        }\n    }\n    /** Starts a browser-based image download for the referenced chartId. */\n    downloadChart(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.downloadChart', this.context.getGridId())) {\n            return this.chartService.downloadChart(params);\n        }\n    }\n    /** Open the Chart Tool Panel. */\n    openChartToolPanel(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.openChartToolPanel', this.context.getGridId())) {\n            return this.chartService.openChartToolPanel(params);\n        }\n    }\n    /** Close the Chart Tool Panel. */\n    closeChartToolPanel(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.closeChartToolPanel', this.context.getGridId())) {\n            return this.chartService.closeChartToolPanel(params.chartId);\n        }\n    }\n    /** Used to programmatically create charts from a range. */\n    createRangeChart(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart', this.context.getGridId())) {\n            return this.chartService.createRangeChart(params);\n        }\n    }\n    /** Used to programmatically create pivot charts from a grid. */\n    createPivotChart(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart', this.context.getGridId())) {\n            return this.chartService.createPivotChart(params);\n        }\n    }\n    /** Used to programmatically create cross filter charts from a range. */\n    createCrossFilterChart(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.createCrossFilterChart', this.context.getGridId())) {\n            return this.chartService.createCrossFilterChart(params);\n        }\n    }\n    /** Used to programmatically update a chart. */\n    updateChart(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.updateChart', this.context.getGridId())) {\n            this.chartService.updateChart(params);\n        }\n    }\n    /** Restores a chart using the `ChartModel` that was previously obtained from `getChartModels()`. */\n    restoreChart(chartModel, chartContainer) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, 'api.restoreChart', this.context.getGridId())) {\n            return this.chartService.restoreChart(chartModel, chartContainer);\n        }\n    }\n    /** Copies data to clipboard by following the same rules as pressing Ctrl+C. */\n    copyToClipboard(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api.copyToClipboard', this.context.getGridId())) {\n            this.clipboardService.copyToClipboard(params);\n        }\n    }\n    /** Cuts data to clipboard by following the same rules as pressing Ctrl+X. */\n    cutToClipboard(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api.cutToClipboard', this.context.getGridId())) {\n            this.clipboardService.cutToClipboard(params, 'api');\n        }\n    }\n    /** Copies the selected rows to the clipboard. */\n    copySelectedRowsToClipboard(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api.copySelectedRowsToClipboard', this.context.getGridId())) {\n            this.clipboardService.copySelectedRowsToClipboard(params);\n        }\n    }\n    /** Copies the selected ranges to the clipboard. */\n    copySelectedRangeToClipboard(params) {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api.copySelectedRangeToClipboard', this.context.getGridId())) {\n            this.clipboardService.copySelectedRangeToClipboard(params);\n        }\n    }\n    /** Copies the selected range down, similar to `Ctrl + D` in Excel. */\n    copySelectedRangeDown() {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api.copySelectedRangeDown', this.context.getGridId())) {\n            this.clipboardService.copyRangeDown();\n        }\n    }\n    /** Pastes the data from the Clipboard into the focused cell of the grid. If no grid cell is focused, calling this method has no effect. */\n    pasteFromClipboard() {\n        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'api.pasteFromClipboard', this.context.getGridId())) {\n            this.clipboardService.pasteFromClipboard();\n        }\n    }\n    /** Shows the column menu after and positions it relative to the provided button element. Use in conjunction with your own header template. */\n    showColumnMenuAfterButtonClick(colKey, buttonElement) {\n        // use grid column so works with pivot mode\n        const column = this.columnModel.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterButtonClick(column, buttonElement, 'columnMenu');\n    }\n    /** Shows the column menu after and positions it relative to the mouse event. Use in conjunction with your own header template. */\n    showColumnMenuAfterMouseClick(colKey, mouseEvent) {\n        // use grid column so works with pivot mode\n        let column = this.columnModel.getGridColumn(colKey);\n        if (!column) {\n            column = this.columnModel.getPrimaryColumn(colKey);\n        }\n        if (!column) {\n            console.error(`AG Grid: column '${colKey}' not found`);\n            return;\n        }\n        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n    }\n    /** Hides any visible context menu or column menu. */\n    hidePopupMenu() {\n        // hide the context menu if in enterprise\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.hideActiveMenu();\n        }\n        // and hide the column menu always\n        this.menuFactory.hideActiveMenu();\n    }\n    /** Navigates the grid focus to the next cell, as if tabbing. */\n    tabToNextCell(event) {\n        return this.navigationService.tabToNextCell(false, event);\n    }\n    /** Navigates the grid focus to the previous cell, as if shift-tabbing. */\n    tabToPreviousCell(event) {\n        return this.navigationService.tabToNextCell(true, event);\n    }\n    /** Returns the list of active cell renderer instances. */\n    getCellRendererInstances(params = {}) {\n        const res = this.rowRenderer.getCellRendererInstances(params);\n        const unwrapped = res.map(unwrapUserComp);\n        return unwrapped;\n    }\n    /** Returns the list of active cell editor instances. Optionally provide parameters to restrict to certain columns / row nodes. */\n    getCellEditorInstances(params = {}) {\n        const res = this.rowRenderer.getCellEditorInstances(params);\n        const unwrapped = res.map(unwrapUserComp);\n        return unwrapped;\n    }\n    /** If the grid is editing, returns back details of the editing cell(s). */\n    getEditingCells() {\n        return this.rowRenderer.getEditingCells();\n    }\n    /** If a cell is editing, it stops the editing. Pass `true` if you want to cancel the editing (i.e. don't accept changes). */\n    stopEditing(cancel = false) {\n        this.rowRenderer.stopEditing(cancel);\n    }\n    /** Start editing the provided cell. If another cell is editing, the editing will be stopped in that other cell. */\n    startEditingCell(params) {\n        const column = this.columnModel.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(`AG Grid: no column found for ${params.colKey}`);\n            return;\n        }\n        const cellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned || null,\n            column: column\n        };\n        const notPinned = params.rowPinned == null;\n        if (notPinned) {\n            this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(params.rowIndex);\n        }\n        const cell = this.navigationService.getCellByPosition(cellPosition);\n        if (!cell) {\n            return;\n        }\n        if (!this.focusService.isCellFocused(cellPosition)) {\n            this.focusService.setFocusedCell(cellPosition);\n        }\n        cell.startRowOrCellEdit(params.key);\n    }\n    /** Add an aggregation function with the specified key. */\n    addAggFunc(key, aggFunc) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFunc(key, aggFunc);\n        }\n    }\n    /** Add aggregations function with the specified keys. */\n    addAggFuncs(aggFuncs) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    }\n    /** Clears all aggregation functions (including those provided by the grid). */\n    clearAggFuncs() {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    }\n    /** Apply transactions to the server side row model. */\n    applyServerSideTransaction(transaction) {\n        if (!this.serverSideTransactionManager) {\n            this.logMissingRowModel('applyServerSideTransaction', 'serverSide');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransaction(transaction);\n    }\n    /** Batch apply transactions to the server side row model. */\n    applyServerSideTransactionAsync(transaction, callback) {\n        if (!this.serverSideTransactionManager) {\n            this.logMissingRowModel('applyServerSideTransactionAsync', 'serverSide');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);\n    }\n    /**\n     * Applies row data to a server side store.\n     * New rows will overwrite rows at the same index in the same way as if provided by a datasource success callback.\n     *\n     * startRow is only applicable when `suppressServerSideInfiniteScroll=true`\n    */\n    applyServerSideRowData(params) {\n        var _a, _b;\n        const startRow = (_a = params.startRow) !== null && _a !== void 0 ? _a : 0;\n        const route = (_b = params.route) !== null && _b !== void 0 ? _b : [];\n        if (startRow < 0) {\n            console.warn(`AG Grid: invalid value ${params.startRow} for startRow, the value should be >= 0`);\n            return;\n        }\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.applyRowData(params.successParams, startRow, route);\n        }\n        else {\n            this.logMissingRowModel('setServerSideDatasource', 'serverSide');\n        }\n    }\n    /** Gets all failed server side loads to retry. */\n    retryServerSideLoads() {\n        if (!this.serverSideRowModel) {\n            this.logMissingRowModel('retryServerSideLoads', 'serverSide');\n            return;\n        }\n        this.serverSideRowModel.retryLoads();\n    }\n    flushServerSideAsyncTransactions() {\n        if (!this.serverSideTransactionManager) {\n            this.logMissingRowModel('flushServerSideAsyncTransactions', 'serverSide');\n            return;\n        }\n        return this.serverSideTransactionManager.flushAsyncTransactions();\n    }\n    /** Update row data. Pass a transaction object with lists for `add`, `remove` and `update`. */\n    applyTransaction(rowDataTransaction) {\n        if (!this.clientSideRowModel) {\n            this.logMissingRowModel('applyTransaction', 'clientSide');\n            return;\n        }\n        return this.clientSideRowModel.updateRowData(rowDataTransaction);\n    }\n    /** Same as `applyTransaction` except executes asynchronously for efficiency. */\n    applyTransactionAsync(rowDataTransaction, callback) {\n        if (!this.clientSideRowModel) {\n            this.logMissingRowModel('applyTransactionAsync', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n    }\n    /** Executes any remaining asynchronous grid transactions, if any are waiting to be executed. */\n    flushAsyncTransactions() {\n        if (!this.clientSideRowModel) {\n            this.logMissingRowModel('flushAsyncTransactions', 'clientSide');\n            return;\n        }\n        this.clientSideRowModel.flushAsyncTransactions();\n    }\n    /**\n     * Marks all the currently loaded blocks in the cache for reload.\n     * If you have 10 blocks in the cache, all 10 will be marked for reload.\n     * The old data will continue to be displayed until the new data is loaded.\n     */\n    refreshInfiniteCache() {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.refreshCache();\n        }\n        else {\n            this.logMissingRowModel('refreshInfiniteCache', 'infinite');\n        }\n    }\n    /**\n     * Purges the cache.\n     * The grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2).\n     * The grid will display nothing while the new blocks are loaded.\n     * Use this to immediately remove the old data from the user.\n     */\n    purgeInfiniteCache() {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.purgeCache();\n        }\n        else {\n            this.logMissingRowModel('purgeInfiniteCache', 'infinite');\n        }\n    }\n    /**\n     * Refresh a server-side store level.\n     * If you pass no parameters, then the top level store is refreshed.\n     * To refresh a child level, pass in the string of keys to get to the desired level.\n     * Once the store refresh is complete, the storeRefreshed event is fired.\n     */\n    refreshServerSide(params) {\n        if (!this.serverSideRowModel) {\n            this.logMissingRowModel('refreshServerSide', 'serverSide');\n            return;\n        }\n        this.serverSideRowModel.refreshStore(params);\n    }\n    /** Returns info on all server side group levels. */\n    getServerSideGroupLevelState() {\n        if (!this.serverSideRowModel) {\n            this.logMissingRowModel('getServerSideGroupLevelState', 'serverSide');\n            return [];\n        }\n        return this.serverSideRowModel.getStoreState();\n    }\n    /** The row count defines how many rows the grid allows scrolling to. */\n    getInfiniteRowCount() {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getRowCount();\n        }\n        else {\n            this.logMissingRowModel('getInfiniteRowCount', 'infinite');\n        }\n    }\n    /** Returns `true` if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll. */\n    isLastRowIndexKnown() {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.isLastRowIndexKnown();\n        }\n        else {\n            this.logMissingRowModel('isLastRowIndexKnown', 'infinite');\n        }\n    }\n    /**\n     * Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working.\n     */\n    getCacheBlockState() {\n        return this.rowNodeBlockLoader.getBlockState();\n    }\n    /** Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer). */\n    getFirstDisplayedRow() {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    }\n    /** Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer). */\n    getLastDisplayedRow() {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    }\n    /** Returns the displayed `RowNode` at the given `index`. */\n    getDisplayedRowAtIndex(index) {\n        return this.rowModel.getRow(index);\n    }\n    /** Returns the total number of displayed rows. */\n    getDisplayedRowCount() {\n        return this.rowModel.getRowCount();\n    }\n    /**\n     * Returns `true` when the last page is known.\n     * This will always be `true` if you are using the Client-Side Row Model for pagination.\n     * Returns `false` when the last page is not known; this only happens when using Infinite Row Model.\n     */\n    paginationIsLastPageFound() {\n        return this.paginationProxy.isLastPageFound();\n    }\n    /** Returns how many rows are being shown per page. */\n    paginationGetPageSize() {\n        return this.paginationProxy.getPageSize();\n    }\n    /** Returns the 0-based index of the page which is showing. */\n    paginationGetCurrentPage() {\n        return this.paginationProxy.getCurrentPage();\n    }\n    /** Returns the total number of pages. Returns `null` if `paginationIsLastPageFound() === false`. */\n    paginationGetTotalPages() {\n        return this.paginationProxy.getTotalPages();\n    }\n    /** The total number of rows. Returns `null` if `paginationIsLastPageFound() === false`. */\n    paginationGetRowCount() {\n        return this.paginationProxy.getMasterRowCount();\n    }\n    /** Navigates to the next page. */\n    paginationGoToNextPage() {\n        this.paginationProxy.goToNextPage();\n    }\n    /** Navigates to the previous page. */\n    paginationGoToPreviousPage() {\n        this.paginationProxy.goToPreviousPage();\n    }\n    /** Navigates to the first page. */\n    paginationGoToFirstPage() {\n        this.paginationProxy.goToFirstPage();\n    }\n    /** Navigates to the last page. */\n    paginationGoToLastPage() {\n        this.paginationProxy.goToLastPage();\n    }\n    /** Goes to the specified page. If the page requested doesn't exist, it will go to the last page. */\n    paginationGoToPage(page) {\n        this.paginationProxy.goToPage(page);\n    }\n    // Methods migrated from old ColumnApi\n    /**\n     * Sets columns to adjust in size to fit the grid horizontally.\n     * Can provide params or a fixed pixel width to control how the columns are resized.\n     * If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     **/\n    sizeColumnsToFit(paramsOrGridWidth) {\n        if (typeof paramsOrGridWidth === 'number') {\n            this.columnModel.sizeColumnsToFit(paramsOrGridWidth, 'api');\n        }\n        else {\n            this.gridBodyCtrl.sizeColumnsToFit(paramsOrGridWidth);\n        }\n    }\n    /** Call this if you want to open or close a column group. */\n    setColumnGroupOpened(group, newValue) { this.columnModel.setColumnGroupOpened(group, newValue, 'api'); }\n    /** Returns the column group with the given name. */\n    getColumnGroup(name, instanceId) { return this.columnModel.getColumnGroup(name, instanceId); }\n    /** Returns the provided column group with the given name. */\n    getProvidedColumnGroup(name) { return this.columnModel.getProvidedColumnGroup(name); }\n    /** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */\n    getDisplayNameForColumn(column, location) { return this.columnModel.getDisplayNameForColumn(column, location) || ''; }\n    /** Returns the display name for a column group (when grouping columns). */\n    getDisplayNameForColumnGroup(columnGroup, location) { return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || ''; }\n    /** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */\n    getColumn(key) { return this.columnModel.getPrimaryColumn(key); }\n    /** Returns all the columns, regardless of visible or not. */\n    getColumns() { return this.columnModel.getAllPrimaryColumns(); }\n    /** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */\n    applyColumnState(params) { return this.columnModel.applyColumnState(params, 'api'); }\n    /** Gets the state of the columns. Typically used when saving column state. */\n    getColumnState() { return this.columnModel.getColumnState(); }\n    /** Sets the state back to match the originally provided column definitions. */\n    resetColumnState() { this.columnModel.resetColumnState('api'); }\n    /** Gets the state of the column groups. Typically used when saving column group state. */\n    getColumnGroupState() { return this.columnModel.getColumnGroupState(); }\n    /** Sets the state of the column group state from a previous state. */\n    setColumnGroupState(stateItems) { this.columnModel.setColumnGroupState(stateItems, 'api'); }\n    /** Sets the state back to match the originally provided column definitions. */\n    resetColumnGroupState() { this.columnModel.resetColumnGroupState('api'); }\n    /** Returns `true` if pinning left or right, otherwise `false`. */\n    isPinning() { return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight(); }\n    /** Returns `true` if pinning left, otherwise `false`. */\n    isPinningLeft() { return this.columnModel.isPinningLeft(); }\n    /** Returns `true` if pinning right, otherwise `false`. */\n    isPinningRight() { return this.columnModel.isPinningRight(); }\n    /** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */\n    getDisplayedColAfter(col) { return this.columnModel.getDisplayedColAfter(col); }\n    /** Same as `getVisibleColAfter` except gives column to the left. */\n    getDisplayedColBefore(col) { return this.columnModel.getDisplayedColBefore(col); }\n    /** Sets the visibility of a column. Key can be the column ID or `Column` object. */\n    setColumnVisible(key, visible) { this.columnModel.setColumnVisible(key, visible, 'api'); }\n    /** Same as `setColumnVisible`, but provide a list of column keys. */\n    setColumnsVisible(keys, visible) { this.columnModel.setColumnsVisible(keys, visible, 'api'); }\n    /** Sets the column pinned / unpinned. Key can be the column ID, field, `ColDef` object or `Column` object. */\n    setColumnPinned(key, pinned) { this.columnModel.setColumnPinned(key, pinned, 'api'); }\n    /** Same as `setColumnPinned`, but provide a list of column keys. */\n    setColumnsPinned(keys, pinned) { this.columnModel.setColumnsPinned(keys, pinned, 'api'); }\n    /**\n     * Returns all the grid columns, same as `getColumns()`, except\n     *\n     *  a) it has the order of the columns that are presented in the grid\n     *\n     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.\n     */\n    getAllGridColumns() { return this.columnModel.getAllGridColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */\n    getDisplayedLeftColumns() { return this.columnModel.getDisplayedLeftColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */\n    getDisplayedCenterColumns() { return this.columnModel.getDisplayedCenterColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */\n    getDisplayedRightColumns() { return this.columnModel.getDisplayedRightColumns(); }\n    /** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */\n    getAllDisplayedColumns() { return this.columnModel.getAllDisplayedColumns(); }\n    /** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */\n    getAllDisplayedVirtualColumns() { return this.columnModel.getViewportColumns(); }\n    /** Moves a column to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */\n    moveColumn(key, toIndex) {\n        this.columnModel.moveColumn(key, toIndex, 'api');\n    }\n    /** Same as `moveColumn` but works on index locations. */\n    moveColumnByIndex(fromIndex, toIndex) { this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api'); }\n    /** Same as `moveColumn` but works on list. */\n    moveColumns(columnsToMoveKeys, toIndex) { this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api'); }\n    /** Move the column to a new position in the row grouping order. */\n    moveRowGroupColumn(fromIndex, toIndex) { this.columnModel.moveRowGroupColumn(fromIndex, toIndex); }\n    /** Sets the agg function for a column. `aggFunc` can be one of the built-in aggregations or a custom aggregation by name or direct function. */\n    setColumnAggFunc(key, aggFunc) { this.columnModel.setColumnAggFunc(key, aggFunc); }\n    /** Sets the column width on a single column. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    setColumnWidth(key, newWidth, finished = true, source) {\n        this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);\n    }\n    /** Sets the column widths on multiple columns. This method offers better performance than calling `setColumnWidth` multiple times. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    setColumnWidths(columnWidths, finished = true, source) {\n        this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n    }\n    /** Get the pivot mode. */\n    isPivotMode() { return this.columnModel.isPivotMode(); }\n    /** Returns the pivot result column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */\n    getPivotResultColumn(pivotKeys, valueColKey) { return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey); }\n    /** Set the value columns to the provided list of columns. */\n    setValueColumns(colKeys) { this.columnModel.setValueColumns(colKeys, 'api'); }\n    /** Get a list of the existing value columns. */\n    getValueColumns() { return this.columnModel.getValueColumns(); }\n    /** Remove the given column from the existing set of value columns. */\n    removeValueColumn(colKey) { this.columnModel.removeValueColumn(colKey, 'api'); }\n    /** Like `removeValueColumn` but remove the given list of columns from the existing set of value columns. */\n    removeValueColumns(colKeys) { this.columnModel.removeValueColumns(colKeys, 'api'); }\n    /** Add the given column to the set of existing value columns. */\n    addValueColumn(colKey) { this.columnModel.addValueColumn(colKey, 'api'); }\n    /** Like `addValueColumn` but add the given list of columns to the existing set of value columns. */\n    addValueColumns(colKeys) { this.columnModel.addValueColumns(colKeys, 'api'); }\n    /** Set the row group columns. */\n    setRowGroupColumns(colKeys) { this.columnModel.setRowGroupColumns(colKeys, 'api'); }\n    /** Remove a column from the row groups. */\n    removeRowGroupColumn(colKey) { this.columnModel.removeRowGroupColumn(colKey, 'api'); }\n    /** Same as `removeRowGroupColumn` but provide a list of columns. */\n    removeRowGroupColumns(colKeys) { this.columnModel.removeRowGroupColumns(colKeys, 'api'); }\n    /** Add a column to the row groups. */\n    addRowGroupColumn(colKey) { this.columnModel.addRowGroupColumn(colKey, 'api'); }\n    /** Same as `addRowGroupColumn` but provide a list of columns. */\n    addRowGroupColumns(colKeys) { this.columnModel.addRowGroupColumns(colKeys, 'api'); }\n    /** Get row group columns. */\n    getRowGroupColumns() { return this.columnModel.getRowGroupColumns(); }\n    /** Set the pivot columns. */\n    setPivotColumns(colKeys) { this.columnModel.setPivotColumns(colKeys, 'api'); }\n    /** Remove a pivot column. */\n    removePivotColumn(colKey) { this.columnModel.removePivotColumn(colKey, 'api'); }\n    /** Same as `removePivotColumn` but provide a list of columns. */\n    removePivotColumns(colKeys) { this.columnModel.removePivotColumns(colKeys, 'api'); }\n    /** Add a pivot column. */\n    addPivotColumn(colKey) { this.columnModel.addPivotColumn(colKey, 'api'); }\n    /** Same as `addPivotColumn` but provide a list of columns. */\n    addPivotColumns(colKeys) { this.columnModel.addPivotColumns(colKeys, 'api'); }\n    /** Get the pivot columns. */\n    getPivotColumns() { return this.columnModel.getPivotColumns(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */\n    getLeftDisplayedColumnGroups() { return this.columnModel.getDisplayedTreeLeft(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */\n    getCenterDisplayedColumnGroups() { return this.columnModel.getDisplayedTreeCentre(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */\n    getRightDisplayedColumnGroups() { return this.columnModel.getDisplayedTreeRight(); }\n    /** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */\n    getAllDisplayedColumnGroups() { return this.columnModel.getAllDisplayedTrees(); }\n    /**\n     * Auto-sizes a column based on its contents. If inferring cell data types with custom column types and row data is provided asynchronously,\n     * the column sizing will happen asynchronously when row data is added. To always perform this synchronously,\n     * set `cellDataType = false` on the default column definition.\n     */\n    autoSizeColumn(key, skipHeader) { return this.columnModel.autoSizeColumn(key, skipHeader, 'api'); }\n    /**\n     * Same as `autoSizeColumn`, but provide a list of column keys. If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     */\n    autoSizeColumns(keys, skipHeader) {\n        this.columnModel.autoSizeColumns({ columns: keys, skipHeader: skipHeader });\n    }\n    /**\n     * Calls `autoSizeColumns` on all displayed columns. If inferring cell data types with custom column types\n     * and row data is provided asynchronously, the column sizing will happen asynchronously when row data is added.\n     * To always perform this synchronously, set `cellDataType = false` on the default column definition.\n     */\n    autoSizeAllColumns(skipHeader) { this.columnModel.autoSizeAllColumns(skipHeader, 'api'); }\n    /** Set the pivot result columns. */\n    setPivotResultColumns(colDefs) { this.columnModel.setSecondaryColumns(colDefs, 'api'); }\n    /** Returns the grid's pivot result columns. */\n    getPivotResultColumns() { return this.columnModel.getSecondaryColumns(); }\n    /** Get the current state of the grid. Can be used in conjunction with the `initialState` grid option to save and restore grid state. */\n    getState() {\n        return this.stateService.getState();\n    }\n    /**\n     * Returns the grid option value for a provided key.\n     */\n    getGridOption(key) {\n        return this.gos.get(key);\n    }\n    /**\n     * Updates a single `Managed` gridOption to the new value provided.\n     * If updating multiple options, it is recommended to instead use `api.updateGridOptions()` which batches update logic.\n     */\n    setGridOption(key, value) {\n        this.updateGridOptions({ [key]: value });\n    }\n    /**\n     * Updates the provided subset of `Managed` gridOptions with the provided values.\n     */\n    updateGridOptions(options) {\n        this.gos.updateGridOptions({ options });\n    }\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    __internalUpdateGridOptions(options) {\n        this.gos.updateGridOptions({ options, source: 'gridOptionsUpdated' });\n    }\n    deprecatedUpdateGridOption(key, value) {\n        warnOnce(`set${key.charAt(0).toUpperCase()}${key.slice(1, key.length)} is deprecated. Please use 'api.setGridOption('${key}', newValue)' or 'api.updateGridOptions({ ${key}: newValue })' instead.`);\n        this.setGridOption(key, value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the top pinned rows. Call with no rows / undefined to clear top pinned rows.\n     **/\n    setPivotMode(pivotMode) {\n        this.deprecatedUpdateGridOption('pivotMode', pivotMode);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the top pinned rows. Call with no rows / undefined to clear top pinned rows.\n     **/\n    setPinnedTopRowData(rows) {\n        this.deprecatedUpdateGridOption('pinnedTopRowData', rows);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the bottom pinned rows. Call with no rows / undefined to clear bottom pinned rows.\n     * */\n    setPinnedBottomRowData(rows) {\n        this.deprecatedUpdateGridOption('pinnedBottomRowData', rows);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * DOM element to use as the popup parent for grid popups (context menu, column menu etc).\n     * */\n    setPopupParent(ePopupParent) {\n        this.deprecatedUpdateGridOption('popupParent', ePopupParent);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setSuppressModelUpdateAfterUpdateTransaction(value) {\n        this.deprecatedUpdateGridOption('suppressModelUpdateAfterUpdateTransaction', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Resets the data type definitions. This will update the columns in the grid.\n     * */\n    setDataTypeDefinitions(dataTypeDefinitions) {\n        this.deprecatedUpdateGridOption('dataTypeDefinitions', dataTypeDefinitions);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set whether the grid paginates the data or not.\n     *  - `true` to enable pagination\n     *  - `false` to disable pagination\n     */\n    setPagination(value) {\n        this.deprecatedUpdateGridOption('pagination', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `paginationPageSize`, then re-paginates the grid so the changes are applied immediately.\n     * */\n    paginationSetPageSize(size) {\n        this.deprecatedUpdateGridOption('paginationPageSize', size);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Resets the side bar to the provided configuration. The parameter is the same as the sideBar grid property. The side bar is re-created from scratch with the new config.\n     * */\n    setSideBar(def) {\n        this.deprecatedUpdateGridOption('sideBar', def);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setSuppressClipboardPaste(value) {\n        this.deprecatedUpdateGridOption('suppressClipboardPaste', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setGroupRemoveSingleChildren(value) {\n        this.deprecatedUpdateGridOption('groupRemoveSingleChildren', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setGroupRemoveLowestSingleChildren(value) {\n        this.deprecatedUpdateGridOption('groupRemoveLowestSingleChildren', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setGroupDisplayType(value) {\n        this.deprecatedUpdateGridOption('groupDisplayType', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `groupIncludeFooter` property\n     */\n    setGroupIncludeFooter(value) {\n        this.deprecatedUpdateGridOption('groupIncludeFooter', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `groupIncludeTotalFooter` property\n     */\n    setGroupIncludeTotalFooter(value) {\n        this.deprecatedUpdateGridOption('groupIncludeTotalFooter', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setRowClass(className) {\n        this.deprecatedUpdateGridOption('rowClass', className);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `deltaSort` property\n     * */\n    setDeltaSort(enable) {\n        this.deprecatedUpdateGridOption('deltaSort', enable);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `suppressRowDrag` property.\n     * */\n    setSuppressRowDrag(value) {\n        this.deprecatedUpdateGridOption('suppressRowDrag', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `suppressMoveWhenRowDragging` property.\n     * */\n    setSuppressMoveWhenRowDragging(value) {\n        this.deprecatedUpdateGridOption('suppressMoveWhenRowDragging', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `suppressRowClickSelection` property.\n     * */\n    setSuppressRowClickSelection(value) {\n        this.deprecatedUpdateGridOption('suppressRowClickSelection', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Enable/disable the Advanced Filter\n     * */\n    setEnableAdvancedFilter(enabled) {\n        this.deprecatedUpdateGridOption('enableAdvancedFilter', enabled);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `includeHiddenColumnsInAdvancedFilter` grid option.\n     * By default hidden columns are excluded from the Advanced Filter.\n     * Set to `true` to include them.\n     */\n    setIncludeHiddenColumnsInAdvancedFilter(value) {\n        this.deprecatedUpdateGridOption('includeHiddenColumnsInAdvancedFilter', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * DOM element to use as the parent for the Advanced Filter, to allow it to appear outside of the grid.\n     * Set to `null` to appear inside the grid.\n     */\n    setAdvancedFilterParent(advancedFilterParent) {\n        this.deprecatedUpdateGridOption('advancedFilterParent', advancedFilterParent);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the Advanced Filter Builder parameters.\n     * */\n    setAdvancedFilterBuilderParams(params) {\n        this.deprecatedUpdateGridOption('advancedFilterBuilderParams', params);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Pass a Quick Filter text into the grid for filtering.\n     * */\n    setQuickFilter(newFilter) {\n        warnOnce(`setQuickFilter is deprecated. Please use 'api.setGridOption('quickFilterText', newValue)' or 'api.updateGridOptions({ quickFilterText: newValue })' instead.`);\n        this.gos.updateGridOptions({ options: { quickFilterText: newFilter } });\n    }\n    /**\n     * @deprecated As of v30, hidden columns are excluded from the Quick Filter by default. To include hidden columns, use `setIncludeHiddenColumnsInQuickFilter` instead.\n     */\n    setExcludeHiddenColumnsFromQuickFilter(value) {\n        this.deprecatedUpdateGridOption('includeHiddenColumnsInQuickFilter', !value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `includeHiddenColumnsInQuickFilter` grid option.\n     * By default hidden columns are excluded from the Quick Filter.\n     * Set to `true` to include them.\n     */\n    setIncludeHiddenColumnsInQuickFilter(value) {\n        this.deprecatedUpdateGridOption('includeHiddenColumnsInQuickFilter', value);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `quickFilterParser` grid option,\n     * which changes how the Quick Filter splits the Quick Filter text into search terms.\n     */\n    setQuickFilterParser(quickFilterParser) {\n        this.deprecatedUpdateGridOption('quickFilterParser', quickFilterParser);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `quickFilterMatcher` grid option,\n     * which changes the matching logic for whether a row passes the Quick Filter.\n     */\n    setQuickFilterMatcher(quickFilterMatcher) {\n        this.deprecatedUpdateGridOption('quickFilterMatcher', quickFilterMatcher);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * If `true`, the horizontal scrollbar will always be present, even if not required. Otherwise, it will only be displayed when necessary.\n     * */\n    setAlwaysShowHorizontalScroll(show) {\n        this.deprecatedUpdateGridOption('alwaysShowHorizontalScroll', show);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * If `true`, the vertical scrollbar will always be present, even if not required. Otherwise it will only be displayed when necessary.\n     * */\n    setAlwaysShowVerticalScroll(show) {\n        this.deprecatedUpdateGridOption('alwaysShowVerticalScroll', show);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     */\n    setFunctionsReadOnly(readOnly) {\n        this.deprecatedUpdateGridOption('functionsReadOnly', readOnly);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new column definitions. The grid will redraw all the column headers, and then redraw all of the rows.\n     */\n    setColumnDefs(colDefs, source = \"api\") {\n        warnOnce(`setColumnDefs is deprecated. Please use 'api.setGridOption('columnDefs', newValue)' or 'api.updateGridOptions({ columnDefs: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { columnDefs: colDefs },\n            source: source,\n        });\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new auto group column definition. The grid will recreate any auto-group columns if present.\n     * */\n    setAutoGroupColumnDef(colDef, source = \"api\") {\n        warnOnce(`setAutoGroupColumnDef is deprecated. Please use 'api.setGridOption('autoGroupColumnDef', newValue)' or 'api.updateGridOptions({ autoGroupColumnDef: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { autoGroupColumnDef: colDef },\n            source: source,\n        });\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new Default Column Definition.\n     * */\n    setDefaultColDef(colDef, source = \"api\") {\n        warnOnce(`setDefaultColDef is deprecated. Please use 'api.setGridOption('defaultColDef', newValue)' or 'api.updateGridOptions({ defaultColDef: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { defaultColDef: colDef },\n            source: source,\n        });\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Call to set new Column Types.\n     * */\n    setColumnTypes(columnTypes, source = \"api\") {\n        warnOnce(`setColumnTypes is deprecated. Please use 'api.setGridOption('columnTypes', newValue)' or 'api.updateGridOptions({ columnTypes: newValue })' instead.`);\n        this.gos.updateGridOptions({\n            options: { columnTypes: columnTypes },\n            source: source,\n        });\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `treeData` property.\n     * */\n    setTreeData(newTreeData) {\n        this.deprecatedUpdateGridOption('treeData', newTreeData);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set new datasource for Server-Side Row Model.\n     * */\n    setServerSideDatasource(datasource) {\n        this.deprecatedUpdateGridOption('serverSideDatasource', datasource);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Updates the `cacheBlockSize` when requesting data from the server if `suppressServerSideInfiniteScroll` is not enabled.\n     *\n     * Note this purges all the cached data and reloads all the rows of the grid.\n     * */\n    setCacheBlockSize(blockSize) {\n        this.deprecatedUpdateGridOption('cacheBlockSize', blockSize);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set new datasource for Infinite Row Model.\n     * */\n    setDatasource(datasource) {\n        this.deprecatedUpdateGridOption('datasource', datasource);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set new datasource for Viewport Row Model.\n     * */\n    setViewportDatasource(viewportDatasource) {\n        this.deprecatedUpdateGridOption('viewportDatasource', viewportDatasource);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Set the row data.\n     * */\n    setRowData(rowData) {\n        this.deprecatedUpdateGridOption('rowData', rowData);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the `enableCellTextSelection` property.\n     * */\n    setEnableCellTextSelection(selectable) {\n        this.deprecatedUpdateGridOption('enableCellTextSelection', selectable);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing the column label header.\n     * */\n    setHeaderHeight(headerHeight) {\n        this.deprecatedUpdateGridOption('headerHeight', headerHeight);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Defaults to `normal` if no domLayout provided.\n     */\n    setDomLayout(domLayout) {\n        this.deprecatedUpdateGridOption('domLayout', domLayout);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the preferred direction for the selection fill handle.\n     * */\n    setFillHandleDirection(direction) {\n        this.deprecatedUpdateGridOption('fillHandleDirection', direction);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the rows containing header column groups.\n     * */\n    setGroupHeaderHeight(headerHeight) {\n        this.deprecatedUpdateGridOption('groupHeaderHeight', headerHeight);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing the floating filters.\n     * */\n    setFloatingFiltersHeight(headerHeight) {\n        this.deprecatedUpdateGridOption('floatingFiltersHeight', headerHeight);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing the columns when in pivot mode.\n     * */\n    setPivotHeaderHeight(headerHeight) {\n        this.deprecatedUpdateGridOption('pivotHeaderHeight', headerHeight);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     * Sets the height in pixels for the row containing header column groups when in pivot mode.\n     * */\n    setPivotGroupHeaderHeight(headerHeight) {\n        this.deprecatedUpdateGridOption('pivotGroupHeaderHeight', headerHeight);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setAnimateRows(animateRows) {\n        this.deprecatedUpdateGridOption('animateRows', animateRows);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsExternalFilterPresent(isExternalFilterPresentFunc) {\n        this.deprecatedUpdateGridOption('isExternalFilterPresent', isExternalFilterPresentFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setDoesExternalFilterPass(doesExternalFilterPassFunc) {\n        this.deprecatedUpdateGridOption('doesExternalFilterPass', doesExternalFilterPassFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setNavigateToNextCell(navigateToNextCellFunc) {\n        this.deprecatedUpdateGridOption('navigateToNextCell', navigateToNextCellFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setTabToNextCell(tabToNextCellFunc) {\n        this.deprecatedUpdateGridOption('tabToNextCell', tabToNextCellFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setTabToNextHeader(tabToNextHeaderFunc) {\n        this.deprecatedUpdateGridOption('tabToNextHeader', tabToNextHeaderFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setNavigateToNextHeader(navigateToNextHeaderFunc) {\n        this.deprecatedUpdateGridOption('navigateToNextHeader', navigateToNextHeaderFunc);\n    }\n    setRowGroupPanelShow(rowGroupPanelShow) {\n        this.deprecatedUpdateGridOption('rowGroupPanelShow', rowGroupPanelShow);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetGroupRowAgg(getGroupRowAggFunc) {\n        this.deprecatedUpdateGridOption('getGroupRowAgg', getGroupRowAggFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetBusinessKeyForNode(getBusinessKeyForNodeFunc) {\n        this.deprecatedUpdateGridOption('getBusinessKeyForNode', getBusinessKeyForNodeFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetChildCount(getChildCountFunc) {\n        this.deprecatedUpdateGridOption('getChildCount', getChildCountFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setProcessRowPostCreate(processRowPostCreateFunc) {\n        this.deprecatedUpdateGridOption('processRowPostCreate', processRowPostCreateFunc);\n    }\n    /**\n     * @deprecated v31 `getRowId` is a static property and cannot be updated.\n     *  */\n    setGetRowId(getRowIdFunc) {\n        warnOnce(`getRowId is a static property and can no longer be updated.`);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetRowClass(rowClassFunc) {\n        this.deprecatedUpdateGridOption('getRowClass', rowClassFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsFullWidthRow(isFullWidthRowFunc) {\n        this.deprecatedUpdateGridOption('isFullWidthRow', isFullWidthRowFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsRowSelectable(isRowSelectableFunc) {\n        this.deprecatedUpdateGridOption('isRowSelectable', isRowSelectableFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsRowMaster(isRowMasterFunc) {\n        this.deprecatedUpdateGridOption('isRowMaster', isRowMasterFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setPostSortRows(postSortRowsFunc) {\n        this.deprecatedUpdateGridOption('postSortRows', postSortRowsFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetDocument(getDocumentFunc) {\n        this.deprecatedUpdateGridOption('getDocument', getDocumentFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetContextMenuItems(getContextMenuItemsFunc) {\n        this.deprecatedUpdateGridOption('getContextMenuItems', getContextMenuItemsFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetMainMenuItems(getMainMenuItemsFunc) {\n        this.deprecatedUpdateGridOption('getMainMenuItems', getMainMenuItemsFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setProcessCellForClipboard(processCellForClipboardFunc) {\n        this.deprecatedUpdateGridOption('processCellForClipboard', processCellForClipboardFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setSendToClipboard(sendToClipboardFunc) {\n        this.deprecatedUpdateGridOption('sendToClipboard', sendToClipboardFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setProcessCellFromClipboard(processCellFromClipboardFunc) {\n        this.deprecatedUpdateGridOption('processCellFromClipboard', processCellFromClipboardFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setProcessPivotResultColDef(processPivotResultColDefFunc) {\n        this.deprecatedUpdateGridOption('processPivotResultColDef', processPivotResultColDefFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setProcessPivotResultColGroupDef(processPivotResultColGroupDefFunc) {\n        this.deprecatedUpdateGridOption('processPivotResultColGroupDef', processPivotResultColGroupDefFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setPostProcessPopup(postProcessPopupFunc) {\n        this.deprecatedUpdateGridOption('postProcessPopup', postProcessPopupFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setInitialGroupOrderComparator(initialGroupOrderComparatorFunc) {\n        this.deprecatedUpdateGridOption('initialGroupOrderComparator', initialGroupOrderComparatorFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetChartToolbarItems(getChartToolbarItemsFunc) {\n        this.deprecatedUpdateGridOption('getChartToolbarItems', getChartToolbarItemsFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setPaginationNumberFormatter(paginationNumberFormatterFunc) {\n        this.deprecatedUpdateGridOption('paginationNumberFormatter', paginationNumberFormatterFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetServerSideGroupLevelParams(getServerSideGroupLevelParamsFunc) {\n        this.deprecatedUpdateGridOption('getServerSideGroupLevelParams', getServerSideGroupLevelParamsFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsServerSideGroupOpenByDefault(isServerSideGroupOpenByDefaultFunc) {\n        this.deprecatedUpdateGridOption('isServerSideGroupOpenByDefault', isServerSideGroupOpenByDefaultFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsApplyServerSideTransaction(isApplyServerSideTransactionFunc) {\n        this.deprecatedUpdateGridOption('isApplyServerSideTransaction', isApplyServerSideTransactionFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setIsServerSideGroup(isServerSideGroupFunc) {\n        this.deprecatedUpdateGridOption('isServerSideGroup', isServerSideGroupFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetServerSideGroupKey(getServerSideGroupKeyFunc) {\n        this.deprecatedUpdateGridOption('getServerSideGroupKey', getServerSideGroupKeyFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetRowStyle(rowStyleFunc) {\n        this.deprecatedUpdateGridOption('getRowStyle', rowStyleFunc);\n    }\n    /**\n     * @deprecated v31 Use `api.setGridOption` or `api.updateGridOptions` instead.\n     *  */\n    setGetRowHeight(rowHeightFunc) {\n        this.deprecatedUpdateGridOption('getRowHeight', rowHeightFunc);\n    }\n};\n__decorate([\n    Optional('csvCreator')\n], GridApi.prototype, \"csvCreator\", void 0);\n__decorate([\n    Optional('excelCreator')\n], GridApi.prototype, \"excelCreator\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], GridApi.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('navigationService')\n], GridApi.prototype, \"navigationService\", void 0);\n__decorate([\n    Autowired('filterManager')\n], GridApi.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GridApi.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('selectionService')\n], GridApi.prototype, \"selectionService\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], GridApi.prototype, \"gos\", void 0);\n__decorate([\n    Autowired('valueService')\n], GridApi.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('alignedGridsService')\n], GridApi.prototype, \"alignedGridsService\", void 0);\n__decorate([\n    Autowired('eventService')\n], GridApi.prototype, \"eventService\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], GridApi.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Autowired('context')\n], GridApi.prototype, \"context\", void 0);\n__decorate([\n    Autowired('rowModel')\n], GridApi.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('sortController')\n], GridApi.prototype, \"sortController\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], GridApi.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('focusService')\n], GridApi.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], GridApi.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Optional('rangeService')\n], GridApi.prototype, \"rangeService\", void 0);\n__decorate([\n    Optional('clipboardService')\n], GridApi.prototype, \"clipboardService\", void 0);\n__decorate([\n    Optional('aggFuncService')\n], GridApi.prototype, \"aggFuncService\", void 0);\n__decorate([\n    Autowired('menuFactory')\n], GridApi.prototype, \"menuFactory\", void 0);\n__decorate([\n    Optional('contextMenuFactory')\n], GridApi.prototype, \"contextMenuFactory\", void 0);\n__decorate([\n    Autowired('valueCache')\n], GridApi.prototype, \"valueCache\", void 0);\n__decorate([\n    Autowired('animationFrameService')\n], GridApi.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Optional('statusBarService')\n], GridApi.prototype, \"statusBarService\", void 0);\n__decorate([\n    Optional('chartService')\n], GridApi.prototype, \"chartService\", void 0);\n__decorate([\n    Optional('undoRedoService')\n], GridApi.prototype, \"undoRedoService\", void 0);\n__decorate([\n    Optional('rowNodeBlockLoader')\n], GridApi.prototype, \"rowNodeBlockLoader\", void 0);\n__decorate([\n    Optional('ssrmTransactionManager')\n], GridApi.prototype, \"serverSideTransactionManager\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], GridApi.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('overlayService')\n], GridApi.prototype, \"overlayService\", void 0);\n__decorate([\n    Optional('sideBarService')\n], GridApi.prototype, \"sideBarService\", void 0);\n__decorate([\n    Autowired('stateService')\n], GridApi.prototype, \"stateService\", void 0);\n__decorate([\n    Autowired('expansionService')\n], GridApi.prototype, \"expansionService\", void 0);\n__decorate([\n    Autowired('apiEventService')\n], GridApi.prototype, \"apiEventService\", void 0);\n__decorate([\n    Autowired('frameworkOverrides')\n], GridApi.prototype, \"frameworkOverrides\", void 0);\n__decorate([\n    PostConstruct\n], GridApi.prototype, \"init\", null);\nGridApi = __decorate([\n    Bean('gridApi')\n], GridApi);\nexport { GridApi };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar QuickFilterService_1;\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nlet QuickFilterService = QuickFilterService_1 = class QuickFilterService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.quickFilter = null;\n        this.quickFilterParts = null;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.resetQuickFilterCache());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.resetQuickFilterCache());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.resetQuickFilterCache());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => {\n            if (!this.gridOptionsService.get('includeHiddenColumnsInQuickFilter')) {\n                this.resetQuickFilterCache();\n            }\n        });\n        this.addManagedPropertyListener('quickFilterText', (e) => this.setQuickFilter(e.currentValue));\n        this.addManagedPropertyListener('includeHiddenColumnsInQuickFilter', () => this.onIncludeHiddenColumnsInQuickFilterChanged());\n        this.quickFilter = this.parseQuickFilter(this.gridOptionsService.get('quickFilterText'));\n        this.parser = this.gridOptionsService.get('quickFilterParser');\n        this.matcher = this.gridOptionsService.get('quickFilterMatcher');\n        this.setQuickFilterParts();\n        this.addManagedPropertyListeners(['quickFilterMatcher', 'quickFilterParser'], () => this.setQuickFilterParserAndMatcher());\n    }\n    isQuickFilterPresent() {\n        return this.quickFilter !== null;\n    }\n    doesRowPassQuickFilter(node) {\n        const usingCache = this.gridOptionsService.get('cacheQuickFilter');\n        if (this.matcher) {\n            return this.doesRowPassQuickFilterMatcher(usingCache, node);\n        }\n        // each part must pass, if any fails, then the whole filter fails\n        return this.quickFilterParts.every(part => usingCache ? this.doesRowPassQuickFilterCache(node, part) : this.doesRowPassQuickFilterNoCache(node, part));\n    }\n    resetQuickFilterCache() {\n        this.rowModel.forEachNode(node => node.quickFilterAggregateText = null);\n    }\n    setQuickFilterParts() {\n        const { quickFilter, parser } = this;\n        if (quickFilter) {\n            this.quickFilterParts = parser ? parser(quickFilter) : quickFilter.split(' ');\n        }\n        else {\n            this.quickFilterParts = null;\n        }\n    }\n    parseQuickFilter(newFilter) {\n        if (!exists(newFilter)) {\n            return null;\n        }\n        if (!this.gridOptionsService.isRowModelType('clientSide')) {\n            console.warn('AG Grid - Quick filtering only works with the Client-Side Row Model');\n            return null;\n        }\n        return newFilter.toUpperCase();\n    }\n    setQuickFilter(newFilter) {\n        if (newFilter != null && typeof newFilter !== 'string') {\n            console.warn(`AG Grid - Grid option quickFilterText only supports string inputs, received: ${typeof newFilter}`);\n            return;\n        }\n        const parsedFilter = this.parseQuickFilter(newFilter);\n        if (this.quickFilter !== parsedFilter) {\n            this.quickFilter = parsedFilter;\n            this.setQuickFilterParts();\n            this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });\n        }\n    }\n    setQuickFilterParserAndMatcher() {\n        const parser = this.gridOptionsService.get('quickFilterParser');\n        const matcher = this.gridOptionsService.get('quickFilterMatcher');\n        const hasChanged = parser !== this.parser || matcher !== this.matcher;\n        this.parser = parser;\n        this.matcher = matcher;\n        if (hasChanged) {\n            this.setQuickFilterParts();\n            this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });\n        }\n    }\n    onIncludeHiddenColumnsInQuickFilterChanged() {\n        this.columnModel.refreshQuickFilterColumns();\n        this.resetQuickFilterCache();\n        if (this.isQuickFilterPresent()) {\n            this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });\n        }\n    }\n    doesRowPassQuickFilterNoCache(node, filterPart) {\n        const columns = this.columnModel.getAllColumnsForQuickFilter();\n        return columns.some(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n            return exists(part) && part.indexOf(filterPart) >= 0;\n        });\n    }\n    doesRowPassQuickFilterCache(node, filterPart) {\n        this.checkGenerateQuickFilterAggregateText(node);\n        return node.quickFilterAggregateText.indexOf(filterPart) >= 0;\n    }\n    doesRowPassQuickFilterMatcher(usingCache, node) {\n        let quickFilterAggregateText;\n        if (usingCache) {\n            this.checkGenerateQuickFilterAggregateText(node);\n            quickFilterAggregateText = node.quickFilterAggregateText;\n        }\n        else {\n            quickFilterAggregateText = this.getQuickFilterAggregateText(node);\n        }\n        const { quickFilterParts, matcher } = this;\n        return matcher(quickFilterParts, quickFilterAggregateText);\n    }\n    checkGenerateQuickFilterAggregateText(node) {\n        if (!node.quickFilterAggregateText) {\n            node.quickFilterAggregateText = this.getQuickFilterAggregateText(node);\n        }\n    }\n    getQuickFilterTextForColumn(column, node) {\n        let value = this.valueService.getValue(column, node, true);\n        const colDef = column.getColDef();\n        if (colDef.getQuickFilterText) {\n            const params = {\n                value,\n                node,\n                data: node.data,\n                column,\n                colDef,\n                api: this.gridOptionsService.api,\n                columnApi: this.gridOptionsService.columnApi,\n                context: this.gridOptionsService.context\n            };\n            value = colDef.getQuickFilterText(params);\n        }\n        return exists(value) ? value.toString().toUpperCase() : null;\n    }\n    getQuickFilterAggregateText(node) {\n        const stringParts = [];\n        const columns = this.columnModel.getAllColumnsForQuickFilter();\n        columns.forEach(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n            if (exists(part)) {\n                stringParts.push(part);\n            }\n        });\n        return stringParts.join(QuickFilterService_1.QUICK_FILTER_SEPARATOR);\n    }\n};\nQuickFilterService.EVENT_QUICK_FILTER_CHANGED = 'quickFilterChanged';\nQuickFilterService.QUICK_FILTER_SEPARATOR = '\\n';\n__decorate([\n    Autowired('valueService')\n], QuickFilterService.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], QuickFilterService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('rowModel')\n], QuickFilterService.prototype, \"rowModel\", void 0);\n__decorate([\n    PostConstruct\n], QuickFilterService.prototype, \"postConstruct\", null);\nQuickFilterService = QuickFilterService_1 = __decorate([\n    Bean('quickFilterService')\n], QuickFilterService);\nexport { QuickFilterService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AgPromise, _ } from '../utils/index.mjs';\nimport { Column } from '../entities/column.mjs';\nimport { Autowired, Bean, Optional, PostConstruct } from '../context/context.mjs';\nimport { Events } from '../events.mjs';\nimport { ModuleNames } from '../modules/moduleNames.mjs';\nimport { ModuleRegistry } from '../modules/moduleRegistry.mjs';\nimport { BeanStub } from '../context/beanStub.mjs';\nimport { convertToSet } from '../utils/set.mjs';\nimport { exists } from '../utils/generic.mjs';\nimport { mergeDeep, cloneObject } from '../utils/object.mjs';\nimport { loadTemplate } from '../utils/dom.mjs';\nimport { FilterComponent } from '../components/framework/componentTypes.mjs';\nimport { unwrapUserComp } from '../gridApi.mjs';\nimport { warnOnce } from '../utils/function.mjs';\nimport { QuickFilterService } from './quickFilterService.mjs';\nlet FilterManager = class FilterManager extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.allColumnFilters = new Map();\n        this.allColumnListeners = new Map();\n        this.activeAggregateFilters = [];\n        this.activeColumnFilters = [];\n        // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\n        // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\n        // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\n        // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\n        // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\n        this.processingFilterChange = false;\n        // when we're waiting for cell data types to be inferred, we need to defer filter model updates\n        this.filterModelUpdateQueue = [];\n        this.advancedFilterModelUpdateQueue = [];\n    }\n    init() {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, () => this.onColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.updateAdvancedFilterColumns());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => this.updateAdvancedFilterColumns());\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, () => this.onNewRowsLoaded('rowDataUpdated'));\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\n        this.addManagedPropertyListeners(['isExternalFilterPresent', 'doesExternalFilterPass'], () => {\n            this.onFilterChanged({ source: 'api' });\n        });\n        this.updateAggFiltering();\n        this.addManagedPropertyListener('groupAggFiltering', () => {\n            this.updateAggFiltering();\n            this.onFilterChanged();\n        });\n        this.addManagedPropertyListener('advancedFilterModel', (event) => this.setAdvancedFilterModel(event.currentValue));\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, ({ enabled }) => this.onAdvancedFilterEnabledChanged(enabled));\n        this.addManagedListener(this.eventService, Events.EVENT_DATA_TYPES_INFERRED, () => this.processFilterModelUpdateQueue());\n        this.addManagedListener(this.quickFilterService, QuickFilterService.EVENT_QUICK_FILTER_CHANGED, () => this.onFilterChanged({ source: 'quickFilter' }));\n    }\n    isExternalFilterPresentCallback() {\n        const isFilterPresent = this.gridOptionsService.getCallback('isExternalFilterPresent');\n        if (typeof isFilterPresent === 'function') {\n            return isFilterPresent({});\n        }\n        return false;\n    }\n    doesExternalFilterPass(node) {\n        const doesFilterPass = this.gridOptionsService.get('doesExternalFilterPass');\n        if (typeof doesFilterPass === 'function') {\n            return doesFilterPass(node);\n        }\n        return false;\n    }\n    setFilterModel(model, source = 'api') {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return;\n        }\n        if (this.dataTypeService.isPendingInference()) {\n            this.filterModelUpdateQueue.push({ model, source });\n            return;\n        }\n        const allPromises = [];\n        const previousModel = this.getFilterModel();\n        if (model) {\n            // mark the filters as we set them, so any active filters left over we stop\n            const modelKeys = convertToSet(Object.keys(model));\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const newModel = model[colId];\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));\n                modelKeys.delete(colId);\n            });\n            // at this point, processedFields contains data for which we don't have a filter working yet\n            modelKeys.forEach(colId => {\n                const column = this.columnModel.getPrimaryColumn(colId) || this.columnModel.getGridColumn(colId);\n                if (!column) {\n                    console.warn('AG Grid: setFilterModel() - no column found for colId: ' + colId);\n                    return;\n                }\n                if (!column.isFilterAllowed()) {\n                    console.warn('AG Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: ' + colId);\n                    return;\n                }\n                const filterWrapper = this.getOrCreateFilterWrapper(column, 'NO_UI');\n                if (!filterWrapper) {\n                    console.warn('AG-Grid: setFilterModel() - unable to fully apply model, unable to create filter for colId: ' + colId);\n                    return;\n                }\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));\n            });\n        }\n        else {\n            this.allColumnFilters.forEach(filterWrapper => {\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));\n            });\n        }\n        AgPromise.all(allPromises).then(() => {\n            const currentModel = this.getFilterModel();\n            const columns = [];\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const before = previousModel ? previousModel[colId] : null;\n                const after = currentModel ? currentModel[colId] : null;\n                if (!_.jsonEquals(before, after)) {\n                    columns.push(filterWrapper.column);\n                }\n            });\n            if (columns.length > 0) {\n                this.onFilterChanged({ columns, source });\n            }\n        });\n    }\n    setModelOnFilterWrapper(filterPromise, newModel) {\n        return new AgPromise(resolve => {\n            filterPromise.then(filter => {\n                if (typeof filter.setModel !== 'function') {\n                    console.warn('AG Grid: filter missing setModel method, which is needed for setFilterModel');\n                    resolve();\n                }\n                (filter.setModel(newModel) || AgPromise.resolve()).then(() => resolve());\n            });\n        });\n    }\n    getFilterModel() {\n        const result = {};\n        this.allColumnFilters.forEach((filterWrapper, key) => {\n            // because user can provide filters, we provide useful error checking and messages\n            const filterPromise = filterWrapper.filterPromise;\n            const filter = filterPromise.resolveNow(null, promiseFilter => promiseFilter);\n            if (filter == null) {\n                return null;\n            }\n            if (typeof filter.getModel !== 'function') {\n                console.warn('AG Grid: filter API missing getModel method, which is needed for getFilterModel');\n                return;\n            }\n            const model = filter.getModel();\n            if (exists(model)) {\n                result[key] = model;\n            }\n        });\n        return result;\n    }\n    isColumnFilterPresent() {\n        return this.activeColumnFilters.length > 0;\n    }\n    isAggregateFilterPresent() {\n        return !!this.activeAggregateFilters.length;\n    }\n    isExternalFilterPresent() {\n        return this.externalFilterPresent;\n    }\n    isChildFilterPresent() {\n        return this.isColumnFilterPresent()\n            || this.isQuickFilterPresent()\n            || this.isExternalFilterPresent()\n            || this.isAdvancedFilterPresent();\n    }\n    isAdvancedFilterPresent() {\n        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isFilterPresent();\n    }\n    onAdvancedFilterEnabledChanged(enabled) {\n        var _a;\n        if (enabled) {\n            if (this.allColumnFilters.size) {\n                this.allColumnFilters.forEach(filterWrapper => this.disposeFilterWrapper(filterWrapper, 'advancedFilterEnabled'));\n                this.onFilterChanged({ source: 'advancedFilter' });\n            }\n        }\n        else {\n            if ((_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.isFilterPresent()) {\n                this.advancedFilterService.setModel(null);\n                this.onFilterChanged({ source: 'advancedFilter' });\n            }\n        }\n    }\n    isAdvancedFilterEnabled() {\n        var _a;\n        return (_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.isEnabled();\n    }\n    isAdvancedFilterHeaderActive() {\n        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isHeaderActive();\n    }\n    doAggregateFiltersPass(node, filterToSkip) {\n        return this.doColumnFiltersPass(node, filterToSkip, true);\n    }\n    // called by:\n    // 1) onFilterChanged()\n    // 2) onNewRowsLoaded()\n    updateActiveFilters() {\n        this.activeColumnFilters.length = 0;\n        this.activeAggregateFilters.length = 0;\n        const isFilterActive = (filter) => {\n            if (!filter) {\n                return false;\n            } // this never happens, including to avoid compile error\n            if (!filter.isFilterActive) {\n                console.warn('AG Grid: Filter is missing isFilterActive() method');\n                return false;\n            }\n            return filter.isFilterActive();\n        };\n        const groupFilterEnabled = !!this.gridOptionsService.getGroupAggFiltering();\n        const isAggFilter = (column) => {\n            const isSecondary = !column.isPrimary();\n            // the only filters that can appear on secondary columns are groupAgg filters\n            if (isSecondary) {\n                return true;\n            }\n            const isShowingPrimaryColumns = !this.columnModel.isPivotActive();\n            const isValueActive = column.isValueActive();\n            // primary columns are only ever groupAgg filters if a) value is active and b) showing primary columns\n            if (!isValueActive || !isShowingPrimaryColumns) {\n                return false;\n            }\n            // from here on we know: isPrimary=true, isValueActive=true, isShowingPrimaryColumns=true\n            if (this.columnModel.isPivotMode()) {\n                // primary column is pretending to be a pivot column, ie pivotMode=true, but we are\n                // still showing primary columns\n                return true;\n            }\n            // we are not pivoting, so we groupFilter when it's an agg column\n            return groupFilterEnabled;\n        };\n        this.allColumnFilters.forEach(filterWrapper => {\n            if (filterWrapper.filterPromise.resolveNow(false, isFilterActive)) {\n                const filterComp = filterWrapper.filterPromise.resolveNow(null, filter => filter);\n                if (isAggFilter(filterWrapper.column)) {\n                    this.activeAggregateFilters.push(filterComp);\n                }\n                else {\n                    this.activeColumnFilters.push(filterComp);\n                }\n            }\n        });\n    }\n    updateFilterFlagInColumns(source, additionalEventAttributes) {\n        this.allColumnFilters.forEach(filterWrapper => {\n            const isFilterActive = filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive());\n            filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);\n        });\n    }\n    isAnyFilterPresent() {\n        return this.isQuickFilterPresent() || this.isColumnFilterPresent() || this.isAggregateFilterPresent() || this.isExternalFilterPresent();\n    }\n    doColumnFiltersPass(node, filterToSkip, targetAggregates) {\n        const { data, aggData } = node;\n        const targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;\n        const targetedData = targetAggregates ? aggData : data;\n        for (let i = 0; i < targetedFilters.length; i++) {\n            const filter = targetedFilters[i];\n            if (filter == null || filter === filterToSkip) {\n                continue;\n            }\n            if (typeof filter.doesFilterPass !== 'function') {\n                // because users can do custom filters, give nice error message\n                throw new Error('Filter is missing method doesFilterPass');\n            }\n            if (!filter.doesFilterPass({ node, data: targetedData })) {\n                return false;\n            }\n        }\n        return true;\n    }\n    resetQuickFilterCache() {\n        this.quickFilterService.resetQuickFilterCache();\n    }\n    refreshFiltersForAggregations() {\n        const isAggFiltering = this.gridOptionsService.getGroupAggFiltering();\n        if (isAggFiltering) {\n            this.onFilterChanged();\n        }\n    }\n    // sometimes (especially in React) the filter can call onFilterChanged when we are in the middle\n    // of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.\n    // this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)\n    // which results in React State getting applied in the main application, triggering a useEffect() to\n    // be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was\n    // getting it's useEffect() triggered in this way.\n    callOnFilterChangedOutsideRenderCycle(params) {\n        const action = () => this.onFilterChanged(params);\n        if (this.rowRenderer.isRefreshInProgress()) {\n            setTimeout(action, 0);\n        }\n        else {\n            action();\n        }\n    }\n    onFilterChanged(params = {}) {\n        const { source, filterInstance, additionalEventAttributes, columns } = params;\n        this.updateDependantFilters();\n        this.updateActiveFilters();\n        this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes);\n        this.externalFilterPresent = this.isExternalFilterPresentCallback();\n        this.allColumnFilters.forEach(filterWrapper => {\n            if (!filterWrapper.filterPromise) {\n                return;\n            }\n            filterWrapper.filterPromise.then(filter => {\n                if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {\n                    filter.onAnyFilterChanged();\n                }\n            });\n        });\n        const filterChangedEvent = {\n            source,\n            type: Events.EVENT_FILTER_CHANGED,\n            columns: columns || [],\n        };\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n        // because internal events are not async in ag-grid, when the dispatchEvent\n        // method comes back, we know all listeners have finished executing.\n        this.processingFilterChange = true;\n        this.eventService.dispatchEvent(filterChangedEvent);\n        this.processingFilterChange = false;\n    }\n    isSuppressFlashingCellsBecauseFiltering() {\n        var _a;\n        // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing\n        // changes when filtering\n        const allowShowChangeAfterFilter = (_a = this.gridOptionsService.get('allowShowChangeAfterFilter')) !== null && _a !== void 0 ? _a : false;\n        return !allowShowChangeAfterFilter && this.processingFilterChange;\n    }\n    isQuickFilterPresent() {\n        return this.quickFilterService.isQuickFilterPresent();\n    }\n    updateAggFiltering() {\n        this.aggFiltering = !!this.gridOptionsService.getGroupAggFiltering();\n    }\n    isAggregateQuickFilterPresent() {\n        return this.isQuickFilterPresent() && (this.aggFiltering || this.columnModel.isPivotMode());\n    }\n    isNonAggregateQuickFilterPresent() {\n        return this.isQuickFilterPresent() && !(this.aggFiltering || this.columnModel.isPivotMode());\n    }\n    doesRowPassOtherFilters(filterToSkip, node) {\n        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });\n    }\n    doesRowPassAggregateFilters(params) {\n        // check quick filter\n        if (this.isAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {\n            return false;\n        }\n        if (this.isAggregateFilterPresent() && !this.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)) {\n            return false;\n        }\n        // got this far, all filters pass\n        return true;\n    }\n    doesRowPassFilter(params) {\n        // the row must pass ALL of the filters, so if any of them fail,\n        // we return true. that means if a row passes the quick filter,\n        // but fails the column filter, it fails overall\n        // first up, check quick filter\n        if (this.isNonAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {\n            return false;\n        }\n        // secondly, give the client a chance to reject this row\n        if (this.isExternalFilterPresent() && !this.doesExternalFilterPass(params.rowNode)) {\n            return false;\n        }\n        // lastly, check column filter\n        if (this.isColumnFilterPresent() && !this.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)) {\n            return false;\n        }\n        if (this.isAdvancedFilterPresent() && !this.advancedFilterService.doesFilterPass(params.rowNode)) {\n            return false;\n        }\n        // got this far, all filters pass\n        return true;\n    }\n    onNewRowsLoaded(source) {\n        this.allColumnFilters.forEach(filterWrapper => {\n            filterWrapper.filterPromise.then(filter => {\n                if (filter.onNewRowsLoaded) {\n                    filter.onNewRowsLoaded();\n                }\n            });\n        });\n        this.updateFilterFlagInColumns(source, { afterDataChange: true });\n        this.updateActiveFilters();\n    }\n    createValueGetter(column) {\n        return ({ node }) => this.valueService.getValue(column, node, true);\n    }\n    createGetValue(filterColumn) {\n        return (rowNode, column) => {\n            const columnToUse = column ? this.columnModel.getGridColumn(column) : filterColumn;\n            return columnToUse ? this.valueService.getValue(columnToUse, rowNode, true) : undefined;\n        };\n    }\n    getFilterComponent(column, source, createIfDoesNotExist = true) {\n        var _a;\n        if (createIfDoesNotExist) {\n            return ((_a = this.getOrCreateFilterWrapper(column, source)) === null || _a === void 0 ? void 0 : _a.filterPromise) || null;\n        }\n        const filterWrapper = this.cachedFilter(column);\n        return filterWrapper ? filterWrapper.filterPromise : null;\n    }\n    isFilterActive(column) {\n        const filterWrapper = this.cachedFilter(column);\n        return !!filterWrapper && filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive());\n    }\n    getOrCreateFilterWrapper(column, source) {\n        if (!column.isFilterAllowed()) {\n            return null;\n        }\n        let filterWrapper = this.cachedFilter(column);\n        if (!filterWrapper) {\n            filterWrapper = this.createFilterWrapper(column, source);\n            this.setColumnFilterWrapper(column, filterWrapper);\n        }\n        else if (source !== 'NO_UI') {\n            this.putIntoGui(filterWrapper, source);\n        }\n        return filterWrapper;\n    }\n    cachedFilter(column) {\n        return this.allColumnFilters.get(column.getColId());\n    }\n    getDefaultFilter(column) {\n        let defaultFilter;\n        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {\n            defaultFilter = 'agSetColumnFilter';\n        }\n        else {\n            const cellDataType = column.getColDef().cellDataType;\n            if (cellDataType === 'number') {\n                defaultFilter = 'agNumberColumnFilter';\n            }\n            else if (cellDataType === 'date' || cellDataType === 'dateString') {\n                defaultFilter = 'agDateColumnFilter';\n            }\n            else {\n                defaultFilter = 'agTextColumnFilter';\n            }\n        }\n        return defaultFilter;\n    }\n    getDefaultFloatingFilter(column) {\n        let defaultFloatingFilterType;\n        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {\n            defaultFloatingFilterType = 'agSetColumnFloatingFilter';\n        }\n        else {\n            const cellDataType = column.getColDef().cellDataType;\n            if (cellDataType === 'number') {\n                defaultFloatingFilterType = 'agNumberColumnFloatingFilter';\n            }\n            else if (cellDataType === 'date' || cellDataType === 'dateString') {\n                defaultFloatingFilterType = 'agDateColumnFloatingFilter';\n            }\n            else {\n                defaultFloatingFilterType = 'agTextColumnFloatingFilter';\n            }\n        }\n        return defaultFloatingFilterType;\n    }\n    createFilterInstance(column) {\n        const defaultFilter = this.getDefaultFilter(column);\n        const colDef = column.getColDef();\n        let filterInstance;\n        const params = Object.assign(Object.assign({}, this.createFilterParams(column, colDef)), { filterModifiedCallback: () => this.filterModifiedCallbackFactory(filterInstance, column)(), filterChangedCallback: (additionalEventAttributes) => this.filterChangedCallbackFactory(filterInstance, column)(additionalEventAttributes), doesRowPassOtherFilter: node => this.doesRowPassOtherFilters(filterInstance, node) });\n        const compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);\n        if (!compDetails) {\n            return { filterPromise: null, compDetails: null };\n        }\n        return {\n            filterPromise: () => {\n                const filterPromise = compDetails.newAgStackInstance();\n                if (filterPromise) {\n                    filterPromise.then(r => filterInstance = r);\n                }\n                return filterPromise;\n            },\n            compDetails\n        };\n    }\n    createFilterParams(column, colDef) {\n        const params = {\n            column,\n            colDef: cloneObject(colDef),\n            rowModel: this.rowModel,\n            filterChangedCallback: () => { },\n            filterModifiedCallback: () => { },\n            valueGetter: this.createValueGetter(column),\n            getValue: this.createGetValue(column),\n            doesRowPassOtherFilter: () => true,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n        };\n        return params;\n    }\n    createFilterWrapper(column, source) {\n        var _a;\n        const filterWrapper = {\n            column: column,\n            filterPromise: null,\n            compiledElement: null,\n            guiPromise: AgPromise.resolve(null),\n            compDetails: null\n        };\n        const { filterPromise, compDetails } = this.createFilterInstance(column);\n        filterWrapper.filterPromise = (_a = filterPromise === null || filterPromise === void 0 ? void 0 : filterPromise()) !== null && _a !== void 0 ? _a : null;\n        filterWrapper.compDetails = compDetails;\n        if (filterPromise) {\n            this.putIntoGui(filterWrapper, source);\n        }\n        return filterWrapper;\n    }\n    putIntoGui(filterWrapper, source) {\n        const eFilterGui = document.createElement('div');\n        eFilterGui.className = 'ag-filter';\n        filterWrapper.guiPromise = new AgPromise(resolve => {\n            filterWrapper.filterPromise.then(filter => {\n                let guiFromFilter = filter.getGui();\n                if (!exists(guiFromFilter)) {\n                    console.warn(`AG Grid: getGui method from filter returned ${guiFromFilter}, it should be a DOM element or an HTML template string.`);\n                }\n                // for backwards compatibility with Angular 1 - we\n                // used to allow providing back HTML from getGui().\n                // once we move away from supporting Angular 1\n                // directly, we can change this.\n                if (typeof guiFromFilter === 'string') {\n                    guiFromFilter = loadTemplate(guiFromFilter);\n                }\n                eFilterGui.appendChild(guiFromFilter);\n                resolve(eFilterGui);\n                const event = {\n                    type: Events.EVENT_FILTER_OPENED,\n                    column: filterWrapper.column,\n                    source,\n                    eGui: eFilterGui\n                };\n                this.eventService.dispatchEvent(event);\n            });\n        });\n    }\n    onColumnsChanged() {\n        const columns = [];\n        this.allColumnFilters.forEach((wrapper, colId) => {\n            let currentColumn;\n            if (wrapper.column.isPrimary()) {\n                currentColumn = this.columnModel.getPrimaryColumn(colId);\n            }\n            else {\n                currentColumn = this.columnModel.getGridColumn(colId);\n            }\n            if (currentColumn) {\n                return;\n            }\n            columns.push(wrapper.column);\n            this.disposeFilterWrapper(wrapper, 'columnChanged');\n            this.disposeColumnListener(colId);\n        });\n        if (columns.length > 0) {\n            // When a filter changes as a side effect of a column changes,\n            // we report 'api' as the source, so that the client can distinguish\n            this.onFilterChanged({ columns, source: 'api' });\n        }\n        else {\n            // onFilterChanged does this already\n            this.updateDependantFilters();\n        }\n    }\n    updateDependantFilters() {\n        // Group column filters can be dependant on underlying column filters, but don't normally get created until they're used for the first time.\n        // Instead, create them by default when any filter changes.\n        const groupColumns = this.columnModel.getGroupAutoColumns();\n        groupColumns === null || groupColumns === void 0 ? void 0 : groupColumns.forEach(groupColumn => {\n            if (groupColumn.getColDef().filter === 'agGroupColumnFilter') {\n                this.getOrCreateFilterWrapper(groupColumn, 'NO_UI');\n            }\n        });\n    }\n    // for group filters, can change dynamically whether they are allowed or not\n    isFilterAllowed(column) {\n        var _a, _b;\n        if (this.isAdvancedFilterEnabled()) {\n            return false;\n        }\n        const isFilterAllowed = column.isFilterAllowed();\n        if (!isFilterAllowed) {\n            return false;\n        }\n        const filterWrapper = this.allColumnFilters.get(column.getColId());\n        return (_b = (_a = filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.resolveNow(true, \n        // defer to filter component isFilterAllowed if it exists\n        filter => (typeof (filter === null || filter === void 0 ? void 0 : filter.isFilterAllowed) === 'function')\n            ? filter === null || filter === void 0 ? void 0 : filter.isFilterAllowed()\n            : true)) !== null && _b !== void 0 ? _b : true;\n    }\n    getFloatingFilterCompDetails(column, showParentFilter) {\n        const colDef = column.getColDef();\n        const filterParams = this.createFilterParams(column, colDef);\n        const finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, FilterComponent, filterParams);\n        let defaultFloatingFilterType = this.userComponentFactory.getDefaultFloatingFilterType(colDef, () => this.getDefaultFloatingFilter(column));\n        if (defaultFloatingFilterType == null) {\n            defaultFloatingFilterType = 'agReadOnlyFloatingFilter';\n        }\n        const parentFilterInstance = (callback) => {\n            const filterComponent = this.getFilterComponent(column, 'NO_UI');\n            if (filterComponent == null) {\n                return;\n            }\n            filterComponent.then(instance => {\n                callback(unwrapUserComp(instance));\n            });\n        };\n        const params = {\n            column: column,\n            filterParams: finalFilterParams,\n            currentParentModel: () => this.getCurrentFloatingFilterParentModel(column),\n            parentFilterInstance,\n            showParentFilter,\n            suppressFilterButton: false // This one might be overridden from the colDef\n        };\n        return this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);\n    }\n    getCurrentFloatingFilterParentModel(column) {\n        const filterComponent = this.getFilterComponent(column, 'NO_UI', false);\n        return filterComponent ? filterComponent.resolveNow(null, filter => filter && filter.getModel()) : null;\n    }\n    // destroys the filter, so it no longer takes part\n    destroyFilter(column, source = 'api') {\n        const colId = column.getColId();\n        const filterWrapper = this.allColumnFilters.get(colId);\n        this.disposeColumnListener(colId);\n        if (filterWrapper) {\n            this.disposeFilterWrapper(filterWrapper, source);\n            this.onFilterChanged({\n                columns: [column],\n                source: 'api',\n            });\n        }\n    }\n    disposeColumnListener(colId) {\n        const columnListener = this.allColumnListeners.get(colId);\n        if (columnListener) {\n            this.allColumnListeners.delete(colId);\n            columnListener();\n        }\n    }\n    disposeFilterWrapper(filterWrapper, source) {\n        filterWrapper.filterPromise.then(filter => {\n            this.getContext().destroyBean(filter);\n            filterWrapper.column.setFilterActive(false, 'filterDestroyed');\n            this.allColumnFilters.delete(filterWrapper.column.getColId());\n            const event = {\n                type: Events.EVENT_FILTER_DESTROYED,\n                source,\n                column: filterWrapper.column,\n            };\n            this.eventService.dispatchEvent(event);\n        });\n    }\n    filterModifiedCallbackFactory(filter, column) {\n        return () => {\n            const event = {\n                type: Events.EVENT_FILTER_MODIFIED,\n                column,\n                filterInstance: filter,\n            };\n            this.eventService.dispatchEvent(event);\n        };\n    }\n    filterChangedCallbackFactory(filter, column) {\n        return (additionalEventAttributes) => {\n            var _a;\n            const source = (_a = additionalEventAttributes === null || additionalEventAttributes === void 0 ? void 0 : additionalEventAttributes.source) !== null && _a !== void 0 ? _a : 'api';\n            const params = {\n                filter,\n                additionalEventAttributes,\n                columns: [column],\n                source,\n            };\n            this.callOnFilterChangedOutsideRenderCycle(params);\n        };\n    }\n    checkDestroyFilter(colId) {\n        const filterWrapper = this.allColumnFilters.get(colId);\n        if (!filterWrapper) {\n            return;\n        }\n        const column = filterWrapper.column;\n        const { compDetails } = column.isFilterAllowed()\n            ? this.createFilterInstance(column)\n            : { compDetails: null };\n        // Case when filter component changes\n        if (this.areFilterCompsDifferent(filterWrapper.compDetails, compDetails)) {\n            this.destroyFilter(column, 'columnChanged');\n            return;\n        }\n        // Case when filter params changes\n        const newFilterParams = column.getColDef().filterParams;\n        // When filter wrapper does not have promise to retrieve FilterComp, destroy\n        if (!filterWrapper.filterPromise) {\n            this.destroyFilter(column, 'columnChanged');\n            return;\n        }\n        // Otherwise - Check for refresh method before destruction\n        // If refresh() method is implemented - call it and destroy filter if it returns false\n        // Otherwise - do nothing ( filter will not be destroyed - we assume new params are compatible with old ones )\n        filterWrapper.filterPromise.then(filter => {\n            const shouldRefreshFilter = (filter === null || filter === void 0 ? void 0 : filter.refresh) ? filter.refresh(Object.assign(Object.assign(Object.assign({}, this.createFilterParams(column, column.getColDef())), { filterModifiedCallback: this.filterModifiedCallbackFactory(filter, column), filterChangedCallback: this.filterChangedCallbackFactory(filter, column), doesRowPassOtherFilter: node => this.doesRowPassOtherFilters(filter, node) }), newFilterParams)) : true;\n            if (!shouldRefreshFilter) {\n                this.destroyFilter(column, 'columnChanged');\n            }\n        });\n    }\n    setColumnFilterWrapper(column, filterWrapper) {\n        const colId = column.getColId();\n        this.allColumnFilters.set(colId, filterWrapper);\n        this.allColumnListeners.set(colId, this.addManagedListener(column, Column.EVENT_COL_DEF_CHANGED, () => this.checkDestroyFilter(colId)));\n    }\n    areFilterCompsDifferent(oldCompDetails, newCompDetails) {\n        if (!newCompDetails || !oldCompDetails) {\n            return true;\n        }\n        const { componentClass: oldComponentClass } = oldCompDetails;\n        const { componentClass: newComponentClass } = newCompDetails;\n        const isSameComponentClass = oldComponentClass === newComponentClass ||\n            // react hooks returns new wrappers, so check nested render method\n            ((oldComponentClass === null || oldComponentClass === void 0 ? void 0 : oldComponentClass.render) && (newComponentClass === null || newComponentClass === void 0 ? void 0 : newComponentClass.render) &&\n                oldComponentClass.render === newComponentClass.render);\n        return !isSameComponentClass;\n    }\n    getAdvancedFilterModel() {\n        return this.isAdvancedFilterEnabled() ? this.advancedFilterService.getModel() : null;\n    }\n    setAdvancedFilterModel(expression) {\n        if (!this.isAdvancedFilterEnabled()) {\n            return;\n        }\n        if (this.dataTypeService.isPendingInference()) {\n            this.advancedFilterModelUpdateQueue.push(expression);\n            return;\n        }\n        this.advancedFilterService.setModel(expression !== null && expression !== void 0 ? expression : null);\n        this.onFilterChanged({ source: 'advancedFilter' });\n    }\n    showAdvancedFilterBuilder(source) {\n        if (!this.isAdvancedFilterEnabled()) {\n            return;\n        }\n        this.advancedFilterService.getCtrl().toggleFilterBuilder(source, true);\n    }\n    updateAdvancedFilterColumns() {\n        if (!this.isAdvancedFilterEnabled()) {\n            return;\n        }\n        if (this.advancedFilterService.updateValidity()) {\n            this.onFilterChanged({ source: 'advancedFilter' });\n        }\n    }\n    hasFloatingFilters() {\n        if (this.isAdvancedFilterEnabled()) {\n            return false;\n        }\n        const gridColumns = this.columnModel.getAllGridColumns();\n        return gridColumns.some(col => col.getColDef().floatingFilter);\n    }\n    getFilterInstance(key, callback) {\n        if (this.isAdvancedFilterEnabled()) {\n            this.warnAdvancedFilters();\n            return undefined;\n        }\n        const res = this.getFilterInstanceImpl(key, instance => {\n            if (!callback) {\n                return;\n            }\n            const unwrapped = unwrapUserComp(instance);\n            callback(unwrapped);\n        });\n        const unwrapped = unwrapUserComp(res);\n        return unwrapped;\n    }\n    getFilterInstanceImpl(key, callback) {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (!column) {\n            return undefined;\n        }\n        const filterPromise = this.getFilterComponent(column, 'NO_UI');\n        const currentValue = filterPromise && filterPromise.resolveNow(null, filterComp => filterComp);\n        if (currentValue) {\n            setTimeout(callback, 0, currentValue);\n        }\n        else if (filterPromise) {\n            filterPromise.then(comp => {\n                callback(comp);\n            });\n        }\n        return currentValue;\n    }\n    warnAdvancedFilters() {\n        warnOnce('Column Filter API methods have been disabled as Advanced Filters are enabled.');\n    }\n    setupAdvancedFilterHeaderComp(eCompToInsertBefore) {\n        var _a;\n        (_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.getCtrl().setupHeaderComp(eCompToInsertBefore);\n    }\n    getHeaderRowCount() {\n        return this.isAdvancedFilterHeaderActive() ? 1 : 0;\n    }\n    getHeaderHeight() {\n        return this.isAdvancedFilterHeaderActive() ? this.advancedFilterService.getCtrl().getHeaderHeight() : 0;\n    }\n    processFilterModelUpdateQueue() {\n        this.filterModelUpdateQueue.forEach(({ model, source }) => this.setFilterModel(model, source));\n        this.filterModelUpdateQueue = [];\n        this.advancedFilterModelUpdateQueue.forEach(model => this.setAdvancedFilterModel(model));\n        this.advancedFilterModelUpdateQueue = [];\n    }\n    destroy() {\n        super.destroy();\n        this.allColumnFilters.forEach(filterWrapper => this.disposeFilterWrapper(filterWrapper, 'gridDestroyed'));\n        // don't need to destroy the listeners as they are managed listeners\n        this.allColumnListeners.clear();\n    }\n};\n__decorate([\n    Autowired('valueService')\n], FilterManager.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], FilterManager.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('rowModel')\n], FilterManager.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('userComponentFactory')\n], FilterManager.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], FilterManager.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('dataTypeService')\n], FilterManager.prototype, \"dataTypeService\", void 0);\n__decorate([\n    Autowired('quickFilterService')\n], FilterManager.prototype, \"quickFilterService\", void 0);\n__decorate([\n    Optional('advancedFilterService')\n], FilterManager.prototype, \"advancedFilterService\", void 0);\n__decorate([\n    PostConstruct\n], FilterManager.prototype, \"init\", null);\nFilterManager = __decorate([\n    Bean('filterManager')\n], FilterManager);\nexport { FilterManager };\n","import { Component } from \"../../../widgets/component.mjs\";\nexport class AbstractHeaderCellComp extends Component {\n    constructor(template, ctrl) {\n        super(template);\n        this.ctrl = ctrl;\n    }\n    getCtrl() {\n        return this.ctrl;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct, PreDestroy } from '../../../context/context.mjs';\nimport { setDisplayed } from \"../../../utils/dom.mjs\";\nimport { RefSelector } from '../../../widgets/componentAnnotations.mjs';\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp.mjs';\nexport class HeaderFilterCellComp extends AbstractHeaderCellComp {\n    constructor(ctrl) {\n        super(HeaderFilterCellComp.TEMPLATE, ctrl);\n    }\n    postConstruct() {\n        const eGui = this.getGui();\n        const compProxy = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveBodyCssClass: (cssClassName, on) => this.eFloatingFilterBody.classList.toggle(cssClassName, on),\n            setButtonWrapperDisplayed: (displayed) => setDisplayed(this.eButtonWrapper, displayed),\n            setCompDetails: compDetails => this.setCompDetails(compDetails),\n            getFloatingFilterComp: () => this.compPromise,\n            setWidth: width => eGui.style.width = width,\n            setMenuIcon: eIcon => this.eButtonShowMainFilter.appendChild(eIcon)\n        };\n        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);\n    }\n    setCompDetails(compDetails) {\n        if (!compDetails) {\n            this.destroyFloatingFilterComp();\n            this.compPromise = null;\n            return;\n        }\n        // because we are providing defaultFloatingFilterType, we know it will never be undefined;\n        this.compPromise = compDetails.newAgStackInstance();\n        this.compPromise.then(comp => this.afterCompCreated(comp));\n    }\n    destroyFloatingFilterComp() {\n        if (this.floatingFilterComp) {\n            this.eFloatingFilterBody.removeChild(this.floatingFilterComp.getGui());\n            this.floatingFilterComp = this.destroyBean(this.floatingFilterComp);\n        }\n    }\n    afterCompCreated(comp) {\n        if (!comp) {\n            return;\n        }\n        if (!this.isAlive()) {\n            this.destroyBean(comp);\n            return;\n        }\n        this.destroyFloatingFilterComp();\n        this.floatingFilterComp = comp;\n        this.eFloatingFilterBody.appendChild(comp.getGui());\n        if (comp.afterGuiAttached) {\n            comp.afterGuiAttached();\n        }\n    }\n}\nHeaderFilterCellComp.TEMPLATE = `<div class=\"ag-header-cell ag-floating-filter\" role=\"gridcell\" tabindex=\"-1\">\n            <div ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\n            <div class=\"ag-floating-filter-button ag-hidden\" ref=\"eButtonWrapper\" role=\"presentation\">\n                <button type=\"button\" class=\"ag-button ag-floating-filter-button-button\" ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\n            </div>\n        </div>`;\n__decorate([\n    RefSelector('eFloatingFilterBody')\n], HeaderFilterCellComp.prototype, \"eFloatingFilterBody\", void 0);\n__decorate([\n    RefSelector('eButtonWrapper')\n], HeaderFilterCellComp.prototype, \"eButtonWrapper\", void 0);\n__decorate([\n    RefSelector('eButtonShowMainFilter')\n], HeaderFilterCellComp.prototype, \"eButtonShowMainFilter\", void 0);\n__decorate([\n    PostConstruct\n], HeaderFilterCellComp.prototype, \"postConstruct\", null);\n__decorate([\n    PreDestroy\n], HeaderFilterCellComp.prototype, \"destroyFloatingFilterComp\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { warnOnce } from \"../utils/function.mjs\";\nexport var LayoutCssClasses;\n(function (LayoutCssClasses) {\n    LayoutCssClasses[\"AUTO_HEIGHT\"] = \"ag-layout-auto-height\";\n    LayoutCssClasses[\"NORMAL\"] = \"ag-layout-normal\";\n    LayoutCssClasses[\"PRINT\"] = \"ag-layout-print\";\n})(LayoutCssClasses || (LayoutCssClasses = {}));\nexport class LayoutFeature extends BeanStub {\n    constructor(view) {\n        super();\n        this.view = view;\n    }\n    postConstruct() {\n        this.addManagedPropertyListener('domLayout', this.updateLayoutClasses.bind(this));\n        this.updateLayoutClasses();\n    }\n    updateLayoutClasses() {\n        const domLayout = this.getDomLayout();\n        const params = {\n            autoHeight: domLayout === 'autoHeight',\n            normal: domLayout === 'normal',\n            print: domLayout === 'print'\n        };\n        const cssClass = params.autoHeight ? LayoutCssClasses.AUTO_HEIGHT :\n            params.print ? LayoutCssClasses.PRINT : LayoutCssClasses.NORMAL;\n        this.view.updateLayoutClasses(cssClass, params);\n    }\n    // returns either 'print', 'autoHeight' or 'normal' (normal is the default)\n    getDomLayout() {\n        var _a;\n        const domLayout = (_a = this.gridOptionsService.get('domLayout')) !== null && _a !== void 0 ? _a : 'normal';\n        const validLayouts = ['normal', 'print', 'autoHeight'];\n        if (validLayouts.indexOf(domLayout) === -1) {\n            warnOnce(`${domLayout} is not valid for DOM Layout, valid values are 'normal', 'autoHeight', 'print'.`);\n            return 'normal';\n        }\n        return domLayout;\n    }\n}\n__decorate([\n    PostConstruct\n], LayoutFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { debounce } from \"../utils/function.mjs\";\nimport { isIOSUserAgent } from \"../utils/browser.mjs\";\nimport { getInnerHeight, getScrollLeft, isRtlNegativeScroll, setScrollLeft } from \"../utils/dom.mjs\";\nvar ScrollDirection;\n(function (ScrollDirection) {\n    ScrollDirection[ScrollDirection[\"Vertical\"] = 0] = \"Vertical\";\n    ScrollDirection[ScrollDirection[\"Horizontal\"] = 1] = \"Horizontal\";\n})(ScrollDirection || (ScrollDirection = {}));\n;\nvar ScrollSource;\n(function (ScrollSource) {\n    ScrollSource[ScrollSource[\"Container\"] = 0] = \"Container\";\n    ScrollSource[ScrollSource[\"FakeContainer\"] = 1] = \"FakeContainer\";\n})(ScrollSource || (ScrollSource = {}));\n;\nexport class GridBodyScrollFeature extends BeanStub {\n    constructor(eBodyViewport) {\n        super();\n        this.lastScrollSource = [null, null];\n        this.scrollLeft = -1;\n        this.nextScrollTop = -1;\n        this.scrollTop = -1;\n        this.eBodyViewport = eBodyViewport;\n        this.resetLastHScrollDebounced = debounce(() => this.lastScrollSource[ScrollDirection.Horizontal] = null, 500);\n        this.resetLastVScrollDebounced = debounce(() => this.lastScrollSource[ScrollDirection.Vertical] = null, 500);\n    }\n    postConstruct() {\n        this.enableRtl = this.gridOptionsService.get('enableRtl');\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCtrl = p.centerRowContainerCtrl;\n            this.onDisplayedColumnsWidthChanged();\n            this.addScrollListener();\n        });\n    }\n    addScrollListener() {\n        const fakeHScroll = this.ctrlsService.getFakeHScrollComp();\n        const fakeVScroll = this.ctrlsService.getFakeVScrollComp();\n        this.addManagedListener(this.centerRowContainerCtrl.getViewportElement(), 'scroll', this.onHScroll.bind(this));\n        fakeHScroll.onScrollCallback(this.onFakeHScroll.bind(this));\n        const isDebounce = this.gridOptionsService.get('debounceVerticalScrollbar');\n        const onVScroll = isDebounce ?\n            debounce(this.onVScroll.bind(this), 100) : this.onVScroll.bind(this);\n        const onFakeVScroll = isDebounce ?\n            debounce(this.onFakeVScroll.bind(this), 100) : this.onFakeVScroll.bind(this);\n        this.addManagedListener(this.eBodyViewport, 'scroll', onVScroll);\n        fakeVScroll.onScrollCallback(onFakeVScroll);\n    }\n    onDisplayedColumnsWidthChanged() {\n        if (this.enableRtl) {\n            // because RTL is all backwards, a change in the width of the row\n            // can cause a change in the scroll position, without a scroll event,\n            // because the scroll position in RTL is a function that depends on\n            // the width. to be convinced of this, take out this line, enable RTL,\n            // scroll all the way to the left and then resize a column\n            this.horizontallyScrollHeaderCenterAndFloatingCenter();\n        }\n    }\n    horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft) {\n        // when doing RTL, this method gets called once prematurely\n        const notYetInitialised = this.centerRowContainerCtrl == null;\n        if (notYetInitialised) {\n            return;\n        }\n        if (scrollLeft === undefined) {\n            scrollLeft = this.centerRowContainerCtrl.getCenterViewportScrollLeft();\n        }\n        const offset = this.enableRtl ? scrollLeft : -scrollLeft;\n        const topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();\n        const stickyTopCenterContainer = this.ctrlsService.getStickyTopCenterRowContainerCtrl();\n        const bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();\n        const fakeHScroll = this.ctrlsService.getFakeHScrollComp();\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        centerHeaderContainer.setHorizontalScroll(-offset);\n        bottomCenterContainer.setContainerTranslateX(offset);\n        topCenterContainer.setContainerTranslateX(offset);\n        stickyTopCenterContainer.setContainerTranslateX(offset);\n        const centerViewport = this.centerRowContainerCtrl.getViewportElement();\n        const isCenterViewportLastHorizontal = this.lastScrollSource[ScrollDirection.Horizontal] === ScrollSource.Container;\n        scrollLeft = Math.abs(scrollLeft);\n        if (isCenterViewportLastHorizontal) {\n            fakeHScroll.setScrollPosition(scrollLeft);\n        }\n        else {\n            setScrollLeft(centerViewport, scrollLeft, this.enableRtl);\n        }\n    }\n    isControllingScroll(source, direction) {\n        if (this.lastScrollSource[direction] == null) {\n            this.lastScrollSource[direction] = source;\n            return true;\n        }\n        return this.lastScrollSource[direction] === source;\n    }\n    onFakeHScroll() {\n        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Horizontal)) {\n            return;\n        }\n        this.onHScrollCommon(ScrollSource.FakeContainer);\n    }\n    onHScroll() {\n        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Horizontal)) {\n            return;\n        }\n        this.onHScrollCommon(ScrollSource.Container);\n    }\n    onHScrollCommon(source) {\n        const centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();\n        const { scrollLeft } = centerContainerViewport;\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, scrollLeft, true)) {\n            return;\n        }\n        let newScrollLeft;\n        if (source === ScrollSource.Container) {\n            newScrollLeft = getScrollLeft(centerContainerViewport, this.enableRtl);\n        }\n        else {\n            newScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();\n        }\n        // we do Math.round() rather than Math.floor(), to mirror how scroll values are applied.\n        // eg if a scale is applied (ie user has zoomed the browser), then applying scroll=200\n        // could result in 199.88, which then floor(199.88) = 199, however round(199.88) = 200.\n        // initially Math.floor() was used, however this caused (almost) infinite loop with aligned grids,\n        // as the scroll would move 1px at at time bouncing from one grid to the next (eg one grid would cause\n        // scroll to 200px, the next to 199px, then the first back to 198px and so on).\n        this.doHorizontalScroll(Math.round(newScrollLeft));\n        this.resetLastHScrollDebounced();\n    }\n    onFakeVScroll() {\n        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Vertical)) {\n            return;\n        }\n        this.onVScrollCommon(ScrollSource.FakeContainer);\n    }\n    onVScroll() {\n        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Vertical)) {\n            return;\n        }\n        this.onVScrollCommon(ScrollSource.Container);\n    }\n    onVScrollCommon(source) {\n        let scrollTop;\n        if (source === ScrollSource.Container) {\n            scrollTop = this.eBodyViewport.scrollTop;\n        }\n        else {\n            scrollTop = this.ctrlsService.getFakeVScrollComp().getScrollPosition();\n        }\n        if (this.shouldBlockScrollUpdate(ScrollDirection.Vertical, scrollTop, true)) {\n            return;\n        }\n        this.animationFrameService.setScrollTop(scrollTop);\n        this.nextScrollTop = scrollTop;\n        if (source === ScrollSource.Container) {\n            this.ctrlsService.getFakeVScrollComp().setScrollPosition(scrollTop);\n        }\n        else {\n            this.eBodyViewport.scrollTop = scrollTop;\n        }\n        // the `scrollGridIfNeeded` will recalculate the rows to be rendered by the grid\n        // so it should only be called after `eBodyViewport` has been scrolled to the correct\n        // position, otherwise the `first` and `last` row could be miscalculated.\n        if (this.gridOptionsService.get('suppressAnimationFrame')) {\n            this.scrollGridIfNeeded();\n        }\n        else {\n            this.animationFrameService.schedule();\n        }\n        this.resetLastVScrollDebounced();\n    }\n    doHorizontalScroll(scrollLeft) {\n        const fakeScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();\n        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {\n            return;\n        }\n        this.scrollLeft = scrollLeft;\n        this.fireScrollEvent(ScrollDirection.Horizontal);\n        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);\n        this.centerRowContainerCtrl.onHorizontalViewportChanged(true);\n    }\n    fireScrollEvent(direction) {\n        const bodyScrollEvent = {\n            type: Events.EVENT_BODY_SCROLL,\n            direction: direction === ScrollDirection.Horizontal ? 'horizontal' : 'vertical',\n            left: this.scrollLeft,\n            top: this.scrollTop\n        };\n        this.eventService.dispatchEvent(bodyScrollEvent);\n        window.clearTimeout(this.scrollTimer);\n        this.scrollTimer = undefined;\n        this.scrollTimer = window.setTimeout(() => {\n            const bodyScrollEndEvent = Object.assign(Object.assign({}, bodyScrollEvent), { type: Events.EVENT_BODY_SCROLL_END });\n            this.eventService.dispatchEvent(bodyScrollEndEvent);\n        }, 100);\n    }\n    shouldBlockScrollUpdate(direction, scrollTo, touchOnly = false) {\n        // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport\n        // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually\n        // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,\n        // as otherwise it was causing the rows and header to flicker.\n        // sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to\n        // ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event\n        // could be 10px before the max position, and then current scroll event could be 20px after the max position).\n        // if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in\n        // actual fact the user has exceeded the max scroll and thus scroll should be set to the max.\n        if (touchOnly && !isIOSUserAgent()) {\n            return false;\n        }\n        if (direction === ScrollDirection.Vertical) {\n            return this.shouldBlockVerticalScroll(scrollTo);\n        }\n        return this.shouldBlockHorizontalScroll(scrollTo);\n    }\n    shouldBlockVerticalScroll(scrollTo) {\n        const clientHeight = getInnerHeight(this.eBodyViewport);\n        const { scrollHeight } = this.eBodyViewport;\n        if (scrollTo < 0 || (scrollTo + clientHeight > scrollHeight)) {\n            return true;\n        }\n        return false;\n    }\n    shouldBlockHorizontalScroll(scrollTo) {\n        const clientWidth = this.centerRowContainerCtrl.getCenterWidth();\n        const { scrollWidth } = this.centerRowContainerCtrl.getViewportElement();\n        if (this.enableRtl && isRtlNegativeScroll()) {\n            if (scrollTo > 0) {\n                return true;\n            }\n        }\n        else if (scrollTo < 0) {\n            return true;\n        }\n        if (Math.abs(scrollTo) + clientWidth > scrollWidth) {\n            return true;\n        }\n        return false;\n    }\n    redrawRowsAfterScroll() {\n        this.fireScrollEvent(ScrollDirection.Vertical);\n    }\n    // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.\n    // (which happens with some implementations of tabbing). this can result in horizontal scroll getting\n    // reset back to the left, however no scroll event is fired. so we need to get header to also scroll\n    // back to the left to be kept in sync.\n    // adding and removing the grid from the DOM both resets the scroll position and\n    // triggers a resize event, so notify listeners if the scroll position has changed\n    checkScrollLeft() {\n        if (this.scrollLeft !== this.centerRowContainerCtrl.getCenterViewportScrollLeft()) {\n            this.onHScrollCommon(ScrollSource.Container);\n        }\n    }\n    scrollGridIfNeeded() {\n        const frameNeeded = this.scrollTop != this.nextScrollTop;\n        if (frameNeeded) {\n            this.scrollTop = this.nextScrollTop;\n            this.redrawRowsAfterScroll();\n        }\n        return frameNeeded;\n    }\n    // called by scrollHorizontally method and alignedGridsService\n    setHorizontalScrollPosition(hScrollPosition, fromAlignedGridsService = false) {\n        const minScrollLeft = 0;\n        const maxScrollLeft = this.centerRowContainerCtrl.getViewportElement().scrollWidth - this.centerRowContainerCtrl.getCenterWidth();\n        // if this is call is coming from the alignedGridsService, we don't need to validate the\n        // scroll, because it has already been validated by the grid firing the scroll event.\n        if (!fromAlignedGridsService && this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, hScrollPosition)) {\n            if (this.enableRtl && isRtlNegativeScroll()) {\n                hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;\n            }\n            else {\n                hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);\n            }\n        }\n        setScrollLeft(this.centerRowContainerCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);\n        // we need to manually do the event handling (rather than wait for the event)\n        // for the alignedGridsService, as if we don't, the aligned grid service gets\n        // notified async, and then it's 'consuming' flag doesn't get used right, and\n        // we can end up with an infinite loop\n        this.doHorizontalScroll(hScrollPosition);\n    }\n    setVerticalScrollPosition(vScrollPosition) {\n        this.eBodyViewport.scrollTop = vScrollPosition;\n    }\n    getVScrollPosition() {\n        const result = {\n            top: this.eBodyViewport.scrollTop,\n            bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight\n        };\n        return result;\n    }\n    getHScrollPosition() {\n        return this.centerRowContainerCtrl.getHScrollPosition();\n    }\n    isHorizontalScrollShowing() {\n        return this.centerRowContainerCtrl.isHorizontalScrollShowing();\n    }\n    // called by the headerRootComp and moveColumnController\n    scrollHorizontally(pixels) {\n        const oldScrollPosition = this.centerRowContainerCtrl.getViewportElement().scrollLeft;\n        this.setHorizontalScrollPosition(oldScrollPosition + pixels);\n        return this.centerRowContainerCtrl.getViewportElement().scrollLeft - oldScrollPosition;\n    }\n    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top\n    scrollToTop() {\n        this.eBodyViewport.scrollTop = 0;\n    }\n    // Valid values for position are bottom, middle and top\n    ensureNodeVisible(comparator, position = null) {\n        // look for the node index we want to display\n        const rowCount = this.rowModel.getRowCount();\n        let indexToSelect = -1;\n        // go through all the nodes, find the one we want to show\n        for (let i = 0; i < rowCount; i++) {\n            const node = this.rowModel.getRow(i);\n            if (typeof comparator === 'function') {\n                // Have to assert type here, as type could be TData & Function\n                const predicate = comparator;\n                if (node && predicate(node)) {\n                    indexToSelect = i;\n                    break;\n                }\n            }\n            else {\n                // check object equality against node and data\n                if (comparator === node || comparator === node.data) {\n                    indexToSelect = i;\n                    break;\n                }\n            }\n        }\n        if (indexToSelect >= 0) {\n            this.ensureIndexVisible(indexToSelect, position);\n        }\n    }\n    // Valid values for position are bottom, middle and top\n    // position should be {'top','middle','bottom', or undefined/null}.\n    // if undefined/null, then the grid will to the minimal amount of scrolling,\n    // eg if grid needs to scroll up, it scrolls until row is on top,\n    //    if grid needs to scroll down, it scrolls until row is on bottom,\n    //    if row is already in view, grid does not scroll\n    ensureIndexVisible(index, position) {\n        // if for print or auto height, everything is always visible\n        if (this.gridOptionsService.isDomLayout('print')) {\n            return;\n        }\n        const rowCount = this.paginationProxy.getRowCount();\n        if (typeof index !== 'number' || index < 0 || index >= rowCount) {\n            console.warn('AG Grid: Invalid row index for ensureIndexVisible: ' + index);\n            return;\n        }\n        const isPaging = this.gridOptionsService.get('pagination');\n        const paginationPanelEnabled = isPaging && !this.gridOptionsService.get('suppressPaginationPanel');\n        if (!paginationPanelEnabled) {\n            this.paginationProxy.goToPageWithIndex(index);\n        }\n        const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        const stickyTopHeight = gridBodyCtrl.getStickyTopHeight();\n        const rowNode = this.paginationProxy.getRow(index);\n        let rowGotShiftedDuringOperation;\n        do {\n            const startingRowTop = rowNode.rowTop;\n            const startingRowHeight = rowNode.rowHeight;\n            const paginationOffset = this.paginationProxy.getPixelOffset();\n            const rowTopPixel = rowNode.rowTop - paginationOffset;\n            const rowBottomPixel = rowTopPixel + rowNode.rowHeight;\n            const scrollPosition = this.getVScrollPosition();\n            const heightOffset = this.heightScaler.getDivStretchOffset();\n            const vScrollTop = scrollPosition.top + heightOffset;\n            const vScrollBottom = scrollPosition.bottom + heightOffset;\n            const viewportHeight = vScrollBottom - vScrollTop;\n            // work out the pixels for top, middle and bottom up front,\n            // make the if/else below easier to read\n            const pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);\n            const pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);\n            // make sure if middle, the row is not outside the top of the grid\n            const pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);\n            const rowAboveViewport = (vScrollTop + stickyTopHeight) > rowTopPixel;\n            const rowBelowViewport = vScrollBottom < rowBottomPixel;\n            let newScrollPosition = null;\n            if (position === 'top') {\n                newScrollPosition = pxTop;\n            }\n            else if (position === 'bottom') {\n                newScrollPosition = pxBottom;\n            }\n            else if (position === 'middle') {\n                newScrollPosition = pxMiddle;\n            }\n            else if (rowAboveViewport) {\n                // if row is before, scroll up with row at top\n                newScrollPosition = pxTop - stickyTopHeight;\n            }\n            else if (rowBelowViewport) {\n                // if row is after, scroll down with row at bottom\n                newScrollPosition = pxBottom;\n            }\n            if (newScrollPosition !== null) {\n                this.setVerticalScrollPosition(newScrollPosition);\n                this.rowRenderer.redraw({ afterScroll: true });\n            }\n            // the row can get shifted if during the rendering (during rowRenderer.redraw()),\n            // the height of a row changes due to lazy calculation of row heights when using\n            // colDef.autoHeight or gridOptions.getRowHeight.\n            // if row was shifted, then the position we scrolled to is incorrect.\n            rowGotShiftedDuringOperation = (startingRowTop !== rowNode.rowTop)\n                || (startingRowHeight !== rowNode.rowHeight);\n        } while (rowGotShiftedDuringOperation);\n        // so when we return back to user, the cells have rendered\n        this.animationFrameService.flushAllFrames();\n    }\n    ensureColumnVisible(key, position = 'auto') {\n        const column = this.columnModel.getGridColumn(key);\n        if (!column) {\n            return;\n        }\n        // calling ensureColumnVisible on a pinned column doesn't make sense\n        if (column.isPinned()) {\n            return;\n        }\n        // defensive\n        if (!this.columnModel.isColumnDisplayed(column)) {\n            return;\n        }\n        const newHorizontalScroll = this.getPositionedHorizontalScroll(column, position);\n        if (newHorizontalScroll !== null) {\n            this.centerRowContainerCtrl.setCenterViewportScrollLeft(newHorizontalScroll);\n        }\n        // this will happen anyway, as the move will cause a 'scroll' event on the body, however\n        // it is possible that the ensureColumnVisible method is called from within AG Grid and\n        // the caller will need to have the columns rendered to continue, which will be before\n        // the event has been worked on (which is the case for cell navigation).\n        this.centerRowContainerCtrl.onHorizontalViewportChanged();\n        // so when we return back to user, the cells have rendered\n        this.animationFrameService.flushAllFrames();\n    }\n    setScrollPosition(top, left) {\n        this.centerRowContainerCtrl.setCenterViewportScrollLeft(left);\n        this.setVerticalScrollPosition(top);\n        this.rowRenderer.redraw({ afterScroll: true });\n        this.animationFrameService.flushAllFrames();\n    }\n    getPositionedHorizontalScroll(column, position) {\n        const { columnBeforeStart, columnAfterEnd } = this.isColumnOutsideViewport(column);\n        const viewportTooSmallForColumn = this.centerRowContainerCtrl.getCenterWidth() < column.getActualWidth();\n        const viewportWidth = this.centerRowContainerCtrl.getCenterWidth();\n        const isRtl = this.enableRtl;\n        let alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;\n        let alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;\n        if (position !== 'auto') {\n            alignColToStart = position === 'start';\n            alignColToEnd = position === 'end';\n        }\n        const isMiddle = position === 'middle';\n        if (alignColToStart || alignColToEnd || isMiddle) {\n            const { colLeft, colMiddle, colRight } = this.getColumnBounds(column);\n            if (isMiddle) {\n                return colMiddle - viewportWidth / 2;\n            }\n            if (alignColToStart) {\n                return isRtl ? colRight : colLeft;\n            }\n            return isRtl ? (colLeft - viewportWidth) : (colRight - viewportWidth);\n        }\n        return null;\n    }\n    isColumnOutsideViewport(column) {\n        const { start: viewportStart, end: viewportEnd } = this.getViewportBounds();\n        const { colLeft, colRight } = this.getColumnBounds(column);\n        const isRtl = this.enableRtl;\n        const columnBeforeStart = isRtl ? (viewportStart > colRight) : (viewportEnd < colRight);\n        const columnAfterEnd = isRtl ? (viewportEnd < colLeft) : (viewportStart > colLeft);\n        return { columnBeforeStart, columnAfterEnd };\n    }\n    getColumnBounds(column) {\n        const isRtl = this.enableRtl;\n        const bodyWidth = this.columnModel.getBodyContainerWidth();\n        const colWidth = column.getActualWidth();\n        const colLeft = column.getLeft();\n        const multiplier = isRtl ? -1 : 1;\n        const colLeftPixel = isRtl ? (bodyWidth - colLeft) : colLeft;\n        const colRightPixel = colLeftPixel + colWidth * multiplier;\n        const colMidPixel = colLeftPixel + colWidth / 2 * multiplier;\n        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };\n    }\n    getViewportBounds() {\n        const viewportWidth = this.centerRowContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerRowContainerCtrl.getCenterViewportScrollLeft();\n        const viewportStartPixel = scrollPosition;\n        const viewportEndPixel = viewportWidth + scrollPosition;\n        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };\n    }\n}\n__decorate([\n    Autowired('ctrlsService')\n], GridBodyScrollFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('animationFrameService')\n], GridBodyScrollFeature.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], GridBodyScrollFeature.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('rowModel')\n], GridBodyScrollFeature.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('rowContainerHeightService')\n], GridBodyScrollFeature.prototype, \"heightScaler\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], GridBodyScrollFeature.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GridBodyScrollFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], GridBodyScrollFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DragAndDropService, DragSourceType } from \"../dragAndDrop/dragAndDropService.mjs\";\nimport { Autowired, Optional, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { RowHighlightPosition } from \"../interfaces/iRowNode.mjs\";\nimport { last } from '../utils/array.mjs';\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { missingOrEmpty } from \"../utils/generic.mjs\";\nimport { warnOnce } from \"../utils/function.mjs\";\nimport { AutoScrollService } from \"../autoScrollService.mjs\";\nimport { VerticalDirection } from \"../constants/direction.mjs\";\nexport class RowDragFeature extends BeanStub {\n    constructor(eContainer) {\n        super();\n        this.isMultiRowDrag = false;\n        this.isGridSorted = false;\n        this.isGridFiltered = false;\n        this.isRowGroupActive = false;\n        this.eContainer = eContainer;\n    }\n    postConstruct() {\n        if (this.gridOptionsService.isRowModelType('clientSide')) {\n            this.clientSideRowModel = this.rowModel;\n        }\n        const refreshStatus = () => {\n            this.onSortChanged();\n            this.onFilterChanged();\n            this.onRowGroupChanged();\n        };\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, () => {\n            refreshStatus();\n        });\n        refreshStatus();\n        this.ctrlsService.whenReady(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCon.getBodyViewportElement(),\n                scrollAxis: 'y',\n                getVerticalPosition: () => gridBodyCon.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCon.getScrollFeature().setVerticalScrollPosition(position),\n                onScrollCallback: () => { this.onDragging(this.lastDraggingEvent); }\n            });\n        });\n    }\n    onSortChanged() {\n        this.isGridSorted = this.sortController.isSortActive();\n    }\n    onFilterChanged() {\n        this.isGridFiltered = this.filterManager.isAnyFilterPresent();\n    }\n    onRowGroupChanged() {\n        const rowGroups = this.columnModel.getRowGroupColumns();\n        this.isRowGroupActive = !missingOrEmpty(rowGroups);\n    }\n    getContainer() {\n        return this.eContainer;\n    }\n    isInterestedIn(type) {\n        return type === DragSourceType.RowDrag;\n    }\n    getIconName() {\n        const managedDrag = this.gridOptionsService.get('rowDragManaged');\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return DragAndDropService.ICON_NOT_ALLOWED;\n        }\n        return DragAndDropService.ICON_MOVE;\n    }\n    shouldPreventRowMove() {\n        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;\n    }\n    getRowNodes(draggingEvent) {\n        if (!this.isFromThisGrid(draggingEvent)) {\n            return (draggingEvent.dragItem.rowNodes || []);\n        }\n        const isRowDragMultiRow = this.gridOptionsService.get('rowDragMultiRow');\n        const selectedNodes = [...this.selectionService.getSelectedNodes()].sort((a, b) => {\n            if (a.rowIndex == null || b.rowIndex == null) {\n                return 0;\n            }\n            return this.getRowIndexNumber(a) - this.getRowIndexNumber(b);\n        });\n        const currentNode = draggingEvent.dragItem.rowNode;\n        if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {\n            this.isMultiRowDrag = true;\n            return selectedNodes;\n        }\n        this.isMultiRowDrag = false;\n        return [currentNode];\n    }\n    onDragEnter(draggingEvent) {\n        // builds a lits of all rows being dragged before firing events\n        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(true);\n        });\n        this.onEnterOrDragging(draggingEvent);\n    }\n    onDragging(draggingEvent) {\n        this.onEnterOrDragging(draggingEvent);\n    }\n    isFromThisGrid(draggingEvent) {\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\n        return dragSourceDomDataKey === this.gridOptionsService.getDomDataKey();\n    }\n    isDropZoneWithinThisGrid(draggingEvent) {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const gridGui = gridBodyCon.getGui();\n        const { dropZoneTarget } = draggingEvent;\n        return !gridGui.contains(dropZoneTarget);\n    }\n    onEnterOrDragging(draggingEvent) {\n        // this event is fired for enter and move\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n        this.lastDraggingEvent = draggingEvent;\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const managedDrag = this.gridOptionsService.get('rowDragManaged');\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n        this.autoScrollService.check(draggingEvent.event);\n    }\n    doManagedDrag(draggingEvent, pixel) {\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\n        const managedDrag = this.gridOptionsService.get('rowDragManaged');\n        const rowNodes = draggingEvent.dragItem.rowNodes;\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return;\n        }\n        if (this.gridOptionsService.get('suppressMoveWhenRowDragging') || !isFromThisGrid) {\n            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\n            }\n        }\n        else {\n            this.moveRows(rowNodes, pixel);\n        }\n    }\n    getRowIndexNumber(rowNode) {\n        return parseInt(last(rowNode.getRowIndexString().split('-')), 10);\n    }\n    moveRowAndClearHighlight(draggingEvent) {\n        const lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const rowNodes = draggingEvent.dragItem.rowNodes;\n        let increment = isBelow ? 1 : 0;\n        if (this.isFromThisGrid(draggingEvent)) {\n            rowNodes.forEach(rowNode => {\n                if (rowNode.rowTop < pixel) {\n                    increment -= 1;\n                }\n            });\n            this.moveRows(rowNodes, pixel, increment);\n        }\n        else {\n            const getRowIdFunc = this.gridOptionsService.getCallback('getRowId');\n            let addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\n            if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {\n                addIndex--;\n            }\n            this.clientSideRowModel.updateRowData({\n                add: rowNodes\n                    .map(node => node.data)\n                    .filter(data => !this.clientSideRowModel.getRowNode(getRowIdFunc ? getRowIdFunc({ data, level: 0 }) : data.id)),\n                addIndex\n            });\n        }\n        this.clearRowHighlight();\n    }\n    clearRowHighlight() {\n        this.clientSideRowModel.highlightRowAtPixel(null);\n    }\n    moveRows(rowNodes, pixel, increment = 0) {\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\n        if (rowWasMoved) {\n            this.focusService.clearFocusedCell();\n            if (this.rangeService) {\n                this.rangeService.removeAllCellRanges();\n            }\n        }\n    }\n    addRowDropZone(params) {\n        if (!params.getContainer()) {\n            warnOnce('addRowDropZone - A container target needs to be provided');\n            return;\n        }\n        if (this.dragAndDropService.findExternalZone(params)) {\n            console.warn('AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.');\n            return;\n        }\n        let processedParams = {\n            getContainer: params.getContainer\n        };\n        if (params.fromGrid) {\n            params.fromGrid = undefined;\n            processedParams = params;\n        }\n        else {\n            if (params.onDragEnter) {\n                processedParams.onDragEnter = (e) => {\n                    params.onDragEnter(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));\n                };\n            }\n            if (params.onDragLeave) {\n                processedParams.onDragLeave = (e) => {\n                    params.onDragLeave(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));\n                };\n            }\n            if (params.onDragging) {\n                processedParams.onDragging = (e) => {\n                    params.onDragging(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));\n                };\n            }\n            if (params.onDragStop) {\n                processedParams.onDragStop = (e) => {\n                    params.onDragStop(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));\n                };\n            }\n        }\n        this.dragAndDropService.addDropTarget(Object.assign({ isInterestedIn: (type) => type === DragSourceType.RowDrag, getIconName: () => DragAndDropService.ICON_MOVE, external: true }, processedParams));\n    }\n    getRowDropZone(events) {\n        const getContainer = this.getContainer.bind(this);\n        const onDragEnter = this.onDragEnter.bind(this);\n        const onDragLeave = this.onDragLeave.bind(this);\n        const onDragging = this.onDragging.bind(this);\n        const onDragStop = this.onDragStop.bind(this);\n        if (!events) {\n            return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, /* @private */ fromGrid: true };\n        }\n        return {\n            getContainer,\n            onDragEnter: events.onDragEnter\n                ? ((e) => {\n                    onDragEnter(e);\n                    events.onDragEnter(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));\n                })\n                : onDragEnter,\n            onDragLeave: events.onDragLeave\n                ? ((e) => {\n                    onDragLeave(e);\n                    events.onDragLeave(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));\n                })\n                : onDragLeave,\n            onDragging: events.onDragging\n                ? ((e) => {\n                    onDragging(e);\n                    events.onDragging(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));\n                })\n                : onDragging,\n            onDragStop: events.onDragStop\n                ? ((e) => {\n                    onDragStop(e);\n                    events.onDragStop(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));\n                })\n                : onDragStop,\n            fromGrid: true /* @private */\n        };\n    }\n    draggingToRowDragEvent(type, draggingEvent) {\n        const yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();\n        let overIndex = -1;\n        let overNode;\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n        let vDirectionString;\n        switch (draggingEvent.vDirection) {\n            case VerticalDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case VerticalDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n        const event = {\n            type: type,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode,\n            nodes: draggingEvent.dragItem.rowNodes,\n            overIndex: overIndex,\n            overNode: overNode,\n            y: yNormalised,\n            vDirection: vDirectionString\n        };\n        return event;\n    }\n    dispatchGridEvent(type, draggingEvent) {\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\n        this.eventService.dispatchEvent(event);\n    }\n    onDragLeave(draggingEvent) {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n        this.stopDragging(draggingEvent);\n        if (this.gridOptionsService.get('rowDragManaged')) {\n            this.clearRowHighlight();\n        }\n        if (this.isFromThisGrid(draggingEvent)) {\n            this.isMultiRowDrag = false;\n        }\n    }\n    onDragStop(draggingEvent) {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);\n        this.stopDragging(draggingEvent);\n        if (this.gridOptionsService.get('rowDragManaged') &&\n            (this.gridOptionsService.get('suppressMoveWhenRowDragging') || !this.isFromThisGrid(draggingEvent)) &&\n            !this.isDropZoneWithinThisGrid(draggingEvent)) {\n            this.moveRowAndClearHighlight(draggingEvent);\n        }\n    }\n    stopDragging(draggingEvent) {\n        this.autoScrollService.ensureCleared();\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(false);\n        });\n    }\n}\n__decorate([\n    Autowired('dragAndDropService')\n], RowDragFeature.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('rowModel')\n], RowDragFeature.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], RowDragFeature.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('columnModel')\n], RowDragFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('focusService')\n], RowDragFeature.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('sortController')\n], RowDragFeature.prototype, \"sortController\", void 0);\n__decorate([\n    Autowired('filterManager')\n], RowDragFeature.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('selectionService')\n], RowDragFeature.prototype, \"selectionService\", void 0);\n__decorate([\n    Autowired('mouseEventService')\n], RowDragFeature.prototype, \"mouseEventService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], RowDragFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Optional('rangeService')\n], RowDragFeature.prototype, \"rangeService\", void 0);\n__decorate([\n    PostConstruct\n], RowDragFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Optional } from \"../context/context.mjs\";\nimport { LayoutFeature } from \"../styling/layoutFeature.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { GridBodyScrollFeature } from \"./gridBodyScrollFeature.mjs\";\nimport { getInnerWidth, isElementChildOfClass, isVerticalScrollShowing } from \"../utils/dom.mjs\";\nimport { RowDragFeature } from \"./rowDragFeature.mjs\";\nimport { getTabIndex, isInvisibleScrollbar, isIOSUserAgent } from \"../utils/browser.mjs\";\nimport { TouchListener } from \"../widgets/touchListener.mjs\";\nexport var RowAnimationCssClasses;\n(function (RowAnimationCssClasses) {\n    RowAnimationCssClasses[\"ANIMATION_ON\"] = \"ag-row-animation\";\n    RowAnimationCssClasses[\"ANIMATION_OFF\"] = \"ag-row-no-animation\";\n})(RowAnimationCssClasses || (RowAnimationCssClasses = {}));\nexport const CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';\nconst CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';\nconst CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';\nexport class GridBodyCtrl extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.stickyTopHeight = 0;\n    }\n    getScrollFeature() {\n        return this.bodyScrollFeature;\n    }\n    getBodyViewportElement() {\n        return this.eBodyViewport;\n    }\n    setComp(comp, eGridBody, eBodyViewport, eTop, eBottom, eStickyTop) {\n        this.comp = comp;\n        this.eGridBody = eGridBody;\n        this.eBodyViewport = eBodyViewport;\n        this.eTop = eTop;\n        this.eBottom = eBottom;\n        this.eStickyTop = eStickyTop;\n        this.setCellTextSelection(this.gridOptionsService.get('enableCellTextSelection'));\n        this.addManagedPropertyListener('enableCellTextSelection', (props) => this.setCellTextSelection(props.currentValue));\n        this.createManagedBean(new LayoutFeature(this.comp));\n        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));\n        this.addRowDragListener();\n        this.setupRowAnimationCssClass();\n        this.addEventListeners();\n        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop]);\n        this.onGridColumnsChanged();\n        this.addBodyViewportListener();\n        this.setFloatingHeights();\n        this.disableBrowserDragging();\n        this.addStopEditingWhenGridLosesFocus();\n        this.filterManager.setupAdvancedFilterHeaderComp(eTop);\n        this.ctrlsService.registerGridBodyCtrl(this);\n    }\n    getComp() {\n        return this.comp;\n    }\n    addEventListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));\n    }\n    addFocusListeners(elements) {\n        elements.forEach(element => {\n            this.addManagedListener(element, 'focusin', (e) => {\n                const { target } = e;\n                // element being focused is nested?\n                const isFocusedElementNested = isElementChildOfClass(target, 'ag-root', element);\n                element.classList.toggle('ag-has-focus', !isFocusedElementNested);\n            });\n            this.addManagedListener(element, 'focusout', (e) => {\n                const { target, relatedTarget } = e;\n                const gridContainRelatedTarget = element.contains(relatedTarget);\n                const isNestedRelatedTarget = isElementChildOfClass(relatedTarget, 'ag-root', element);\n                const isNestedTarget = isElementChildOfClass(target, 'ag-root', element);\n                // element losing focus belongs to a nested grid,\n                // it should not be handled here.\n                if (isNestedTarget) {\n                    return;\n                }\n                // the grid does not contain, or the focus element is within\n                // a nested grid\n                if (!gridContainRelatedTarget || isNestedRelatedTarget) {\n                    element.classList.remove('ag-has-focus');\n                }\n            });\n        });\n    }\n    // used by ColumnAnimationService\n    setColumnMovingCss(moving) {\n        this.comp.setColumnMovingCss(CSS_CLASS_COLUMN_MOVING, moving);\n    }\n    setCellTextSelection(selectable = false) {\n        this.comp.setCellSelectableCss(CSS_CLASS_CELL_SELECTABLE, selectable);\n    }\n    onScrollVisibilityChanged() {\n        const visible = this.scrollVisibleService.isVerticalScrollShowing();\n        this.setVerticalScrollPaddingVisible(visible);\n        this.setStickyTopWidth(visible);\n        const scrollbarWidth = visible ? (this.gridOptionsService.getScrollbarWidth() || 0) : 0;\n        const pad = isInvisibleScrollbar() ? 16 : 0;\n        const width = `calc(100% + ${scrollbarWidth + pad}px)`;\n        this.animationFrameService.requestAnimationFrame(() => this.comp.setBodyViewportWidth(width));\n    }\n    onGridColumnsChanged() {\n        const columns = this.columnModel.getAllGridColumns();\n        this.comp.setColumnCount(columns.length);\n    }\n    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)\n    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.\n    disableBrowserDragging() {\n        this.addManagedListener(this.eGridBody, 'dragstart', (event) => {\n            if (event.target instanceof HTMLImageElement) {\n                event.preventDefault();\n                return false;\n            }\n        });\n    }\n    addStopEditingWhenGridLosesFocus() {\n        if (!this.gridOptionsService.get('stopEditingWhenCellsLoseFocus')) {\n            return;\n        }\n        const focusOutListener = (event) => {\n            // this is the element the focus is moving to\n            const elementWithFocus = event.relatedTarget;\n            if (getTabIndex(elementWithFocus) === null) {\n                this.rowRenderer.stopEditing();\n                return;\n            }\n            let clickInsideGrid = \n            // see if click came from inside the viewports\n            viewports.some(viewport => viewport.contains(elementWithFocus))\n                // and also that it's not from a detail grid\n                && this.mouseEventService.isElementInThisGrid(elementWithFocus);\n            if (!clickInsideGrid) {\n                const popupService = this.popupService;\n                clickInsideGrid =\n                    popupService.getActivePopups().some(popup => popup.contains(elementWithFocus)) ||\n                        popupService.isElementWithinCustomPopup(elementWithFocus);\n            }\n            if (!clickInsideGrid) {\n                this.rowRenderer.stopEditing();\n            }\n        };\n        const viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop];\n        viewports.forEach(viewport => this.addManagedListener(viewport, 'focusout', focusOutListener));\n    }\n    updateRowCount() {\n        const headerCount = this.headerNavigationService.getHeaderRowCount() + this.filterManager.getHeaderRowCount();\n        const rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;\n        const total = rowCount === -1 ? -1 : (headerCount + rowCount);\n        this.comp.setRowCount(total);\n    }\n    registerBodyViewportResizeListener(listener) {\n        this.comp.registerBodyViewportResizeListener(listener);\n    }\n    setVerticalScrollPaddingVisible(visible) {\n        const overflowY = visible ? 'scroll' : 'hidden';\n        this.comp.setPinnedTopBottomOverflowY(overflowY);\n    }\n    isVerticalScrollShowing() {\n        const show = this.gridOptionsService.get('alwaysShowVerticalScroll');\n        const cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;\n        const allowVerticalScroll = this.gridOptionsService.isDomLayout('normal');\n        this.comp.setAlwaysVerticalScrollClass(cssClass, show);\n        return show || (allowVerticalScroll && isVerticalScrollShowing(this.eBodyViewport));\n    }\n    setupRowAnimationCssClass() {\n        const listener = () => {\n            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,\n            // when scaling and doing row animation.\n            const animateRows = this.gridOptionsService.isAnimateRows() && !this.rowContainerHeightService.isStretching();\n            const animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;\n            this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);\n        };\n        listener();\n        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);\n        this.addManagedPropertyListener('animateRows', listener);\n    }\n    getGridBodyElement() {\n        return this.eGridBody;\n    }\n    addBodyViewportListener() {\n        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing\n        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell\n        const listener = this.onBodyViewportContextMenu.bind(this);\n        this.addManagedListener(this.eBodyViewport, 'contextmenu', listener);\n        this.mockContextMenuForIPad(listener);\n        this.addManagedListener(this.eBodyViewport, 'wheel', this.onBodyViewportWheel.bind(this));\n        this.addManagedListener(this.eStickyTop, 'wheel', this.onStickyTopWheel.bind(this));\n        // allow mouseWheel on the Full Width Container to Scroll the Viewport\n        this.addFullWidthContainerWheelListener();\n    }\n    addFullWidthContainerWheelListener() {\n        const fullWidthContainer = this.eBodyViewport.querySelector('.ag-full-width-container');\n        const eCenterColsViewport = this.eBodyViewport.querySelector('.ag-center-cols-viewport');\n        if (fullWidthContainer && eCenterColsViewport) {\n            this.addManagedListener(fullWidthContainer, 'wheel', (e) => this.onFullWidthContainerWheel(e, eCenterColsViewport));\n        }\n    }\n    onFullWidthContainerWheel(e, eCenterColsViewport) {\n        if (!e.deltaX ||\n            Math.abs(e.deltaY) > Math.abs(e.deltaX) ||\n            !this.mouseEventService.isEventFromThisGrid(e)) {\n            return;\n        }\n        e.preventDefault();\n        eCenterColsViewport.scrollBy({ left: e.deltaX });\n    }\n    onBodyViewportContextMenu(mouseEvent, touch, touchEvent) {\n        if (!mouseEvent && !touchEvent) {\n            return;\n        }\n        if (this.gridOptionsService.get('preventDefaultOnContextMenu')) {\n            const event = (mouseEvent || touchEvent);\n            event.preventDefault();\n        }\n        const { target } = (mouseEvent || touch);\n        if (target === this.eBodyViewport || target === this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {\n            // show it\n            if (!this.contextMenuFactory) {\n                return;\n            }\n            if (mouseEvent) {\n                this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, this.eGridBody);\n            }\n            else if (touchEvent) {\n                this.contextMenuFactory.onContextMenu(null, touchEvent, null, null, null, this.eGridBody);\n            }\n        }\n    }\n    mockContextMenuForIPad(listener) {\n        // we do NOT want this when not in iPad\n        if (!isIOSUserAgent()) {\n            return;\n        }\n        const touchListener = new TouchListener(this.eBodyViewport);\n        const longTapListener = (event) => {\n            listener(undefined, event.touchStart, event.touchEvent);\n        };\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n    onBodyViewportWheel(e) {\n        if (!this.gridOptionsService.get('suppressScrollWhenPopupsAreOpen')) {\n            return;\n        }\n        if (this.popupService.hasAnchoredPopup()) {\n            e.preventDefault();\n        }\n    }\n    onStickyTopWheel(e) {\n        e.preventDefault();\n        if (e.offsetY) {\n            this.scrollVertically(e.deltaY);\n        }\n    }\n    getGui() {\n        return this.eGridBody;\n    }\n    // called by rowDragFeature\n    scrollVertically(pixels) {\n        const oldScrollPosition = this.eBodyViewport.scrollTop;\n        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);\n        return this.eBodyViewport.scrollTop - oldScrollPosition;\n    }\n    addRowDragListener() {\n        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));\n        this.dragAndDropService.addDropTarget(this.rowDragFeature);\n    }\n    getRowDragFeature() {\n        return this.rowDragFeature;\n    }\n    onPinnedRowDataChanged() {\n        this.setFloatingHeights();\n    }\n    setFloatingHeights() {\n        const { pinnedRowModel } = this;\n        let floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();\n        if (floatingTopHeight) {\n            // adding 1px for cell bottom border\n            floatingTopHeight += 1;\n        }\n        let floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();\n        if (floatingBottomHeight) {\n            // adding 1px for cell bottom border\n            floatingBottomHeight += 1;\n        }\n        this.comp.setTopHeight(floatingTopHeight);\n        this.comp.setBottomHeight(floatingBottomHeight);\n        this.comp.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');\n        this.comp.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');\n        this.setStickyTopOffsetTop();\n    }\n    setStickyTopHeight(height = 0) {\n        // console.log('setting sticky top height ' + height);\n        this.comp.setStickyTopHeight(`${height}px`);\n        this.stickyTopHeight = height;\n    }\n    getStickyTopHeight() {\n        return this.stickyTopHeight;\n    }\n    setStickyTopWidth(vScrollVisible) {\n        if (!vScrollVisible) {\n            this.comp.setStickyTopWidth('100%');\n        }\n        else {\n            const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n            this.comp.setStickyTopWidth(`calc(100% - ${scrollbarWidth}px)`);\n        }\n    }\n    onHeaderHeightChanged() {\n        this.setStickyTopOffsetTop();\n    }\n    setStickyTopOffsetTop() {\n        const headerCtrl = this.ctrlsService.getGridHeaderCtrl();\n        const headerHeight = headerCtrl.getHeaderHeight() + this.filterManager.getHeaderHeight();\n        const pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();\n        let height = 0;\n        if (headerHeight > 0) {\n            height += headerHeight + 1;\n        }\n        if (pinnedTopHeight > 0) {\n            height += pinnedTopHeight + 1;\n        }\n        this.comp.setStickyTopTop(`${height}px`);\n    }\n    // method will call itself if no available width. this covers if the grid\n    // isn't visible, but is just about to be visible.\n    sizeColumnsToFit(params, nextTimeout) {\n        const removeScrollWidth = this.isVerticalScrollShowing();\n        const scrollWidthToRemove = removeScrollWidth ? this.gridOptionsService.getScrollbarWidth() : 0;\n        // bodyViewportWidth should be calculated from eGridBody, not eBodyViewport\n        // because we change the width of the bodyViewport to hide the real browser scrollbar\n        const bodyViewportWidth = getInnerWidth(this.eGridBody);\n        const availableWidth = bodyViewportWidth - scrollWidthToRemove;\n        if (availableWidth > 0) {\n            this.columnModel.sizeColumnsToFit(availableWidth, \"sizeColumnsToFit\", false, params);\n            return;\n        }\n        if (nextTimeout === undefined) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, 100);\n            }, 0);\n        }\n        else if (nextTimeout === 100) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, 500);\n            }, 100);\n        }\n        else if (nextTimeout === 500) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(params, -1);\n            }, 500);\n        }\n        else {\n            console.warn('AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +\n                'zero width, maybe the grid is not visible yet on the screen?');\n        }\n    }\n    // + rangeService\n    addScrollEventListener(listener) {\n        this.eBodyViewport.addEventListener('scroll', listener, { passive: true });\n    }\n    // + focusService\n    removeScrollEventListener(listener) {\n        this.eBodyViewport.removeEventListener('scroll', listener);\n    }\n}\n__decorate([\n    Autowired('animationFrameService')\n], GridBodyCtrl.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired('rowContainerHeightService')\n], GridBodyCtrl.prototype, \"rowContainerHeightService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], GridBodyCtrl.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GridBodyCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('scrollVisibleService')\n], GridBodyCtrl.prototype, \"scrollVisibleService\", void 0);\n__decorate([\n    Optional('contextMenuFactory')\n], GridBodyCtrl.prototype, \"contextMenuFactory\", void 0);\n__decorate([\n    Autowired('headerNavigationService')\n], GridBodyCtrl.prototype, \"headerNavigationService\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], GridBodyCtrl.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], GridBodyCtrl.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], GridBodyCtrl.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('popupService')\n], GridBodyCtrl.prototype, \"popupService\", void 0);\n__decorate([\n    Autowired('mouseEventService')\n], GridBodyCtrl.prototype, \"mouseEventService\", void 0);\n__decorate([\n    Autowired('rowModel')\n], GridBodyCtrl.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('filterManager')\n], GridBodyCtrl.prototype, \"filterManager\", void 0);\n","export var SelectionHandleType;\n(function (SelectionHandleType) {\n    SelectionHandleType[SelectionHandleType[\"FILL\"] = 0] = \"FILL\";\n    SelectionHandleType[SelectionHandleType[\"RANGE\"] = 1] = \"RANGE\";\n})(SelectionHandleType || (SelectionHandleType = {}));\nexport var CellRangeType;\n(function (CellRangeType) {\n    CellRangeType[CellRangeType[\"VALUE\"] = 0] = \"VALUE\";\n    CellRangeType[CellRangeType[\"DIMENSION\"] = 1] = \"DIMENSION\";\n})(CellRangeType || (CellRangeType = {}));\n","import { includes, last } from \"../../utils/array.mjs\";\nimport { CellRangeType, SelectionHandleType } from \"../../interfaces/IRangeService.mjs\";\nimport { missing } from \"../../utils/generic.mjs\";\nimport { setAriaSelected } from \"../../utils/aria.mjs\";\nconst CSS_CELL_RANGE_SELECTED = 'ag-cell-range-selected';\nconst CSS_CELL_RANGE_CHART = 'ag-cell-range-chart';\nconst CSS_CELL_RANGE_SINGLE_CELL = 'ag-cell-range-single-cell';\nconst CSS_CELL_RANGE_CHART_CATEGORY = 'ag-cell-range-chart-category';\nconst CSS_CELL_RANGE_HANDLE = 'ag-cell-range-handle';\nconst CSS_CELL_RANGE_TOP = 'ag-cell-range-top';\nconst CSS_CELL_RANGE_RIGHT = 'ag-cell-range-right';\nconst CSS_CELL_RANGE_BOTTOM = 'ag-cell-range-bottom';\nconst CSS_CELL_RANGE_LEFT = 'ag-cell-range-left';\nexport class CellRangeFeature {\n    constructor(beans, ctrl) {\n        this.beans = beans;\n        this.cellCtrl = ctrl;\n    }\n    setComp(cellComp, eGui) {\n        this.cellComp = cellComp;\n        this.eGui = eGui;\n        this.onRangeSelectionChanged();\n    }\n    onRangeSelectionChanged() {\n        // when using reactUi, given UI is async, it's possible this method is called before the comp is registered\n        if (!this.cellComp) {\n            return;\n        }\n        this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());\n        this.hasChartRange = this.getHasChartRange();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-1`, this.rangeCount === 1);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-2`, this.rangeCount === 2);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-3`, this.rangeCount === 3);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-4`, this.rangeCount >= 4);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);\n        setAriaSelected(this.eGui, this.rangeCount > 0 ? true : undefined);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());\n        this.updateRangeBorders();\n        this.refreshHandle();\n    }\n    updateRangeBorders() {\n        const rangeBorders = this.getRangeBorders();\n        const isSingleCell = this.isSingleCell();\n        const isTop = !isSingleCell && rangeBorders.top;\n        const isRight = !isSingleCell && rangeBorders.right;\n        const isBottom = !isSingleCell && rangeBorders.bottom;\n        const isLeft = !isSingleCell && rangeBorders.left;\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);\n    }\n    isSingleCell() {\n        const { rangeService } = this.beans;\n        return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();\n    }\n    getHasChartRange() {\n        const { rangeService } = this.beans;\n        if (!this.rangeCount || !rangeService) {\n            return false;\n        }\n        const cellRanges = rangeService.getCellRanges();\n        return cellRanges.length > 0 && cellRanges.every(range => includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type));\n    }\n    updateRangeBordersIfRangeCount() {\n        // we only need to update range borders if we are in a range\n        if (this.rangeCount > 0) {\n            this.updateRangeBorders();\n            this.refreshHandle();\n        }\n    }\n    getRangeBorders() {\n        const isRtl = this.beans.gridOptionsService.get('enableRtl');\n        let top = false;\n        let right = false;\n        let bottom = false;\n        let left = false;\n        const thisCol = this.cellCtrl.getCellPosition().column;\n        const { rangeService, columnModel } = this.beans;\n        let leftCol;\n        let rightCol;\n        if (isRtl) {\n            leftCol = columnModel.getDisplayedColAfter(thisCol);\n            rightCol = columnModel.getDisplayedColBefore(thisCol);\n        }\n        else {\n            leftCol = columnModel.getDisplayedColBefore(thisCol);\n            rightCol = columnModel.getDisplayedColAfter(thisCol);\n        }\n        const ranges = rangeService.getCellRanges().filter(range => rangeService.isCellInSpecificRange(this.cellCtrl.getCellPosition(), range));\n        // this means we are the first column in the grid\n        if (!leftCol) {\n            left = true;\n        }\n        // this means we are the last column in the grid\n        if (!rightCol) {\n            right = true;\n        }\n        for (let i = 0; i < ranges.length; i++) {\n            if (top && right && bottom && left) {\n                break;\n            }\n            const range = ranges[i];\n            const startRow = rangeService.getRangeStartRow(range);\n            const endRow = rangeService.getRangeEndRow(range);\n            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {\n                top = true;\n            }\n            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {\n                bottom = true;\n            }\n            if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {\n                left = true;\n            }\n            if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {\n                right = true;\n            }\n        }\n        return { top, right, bottom, left };\n    }\n    refreshHandle() {\n        if (!this.beans.rangeService) {\n            return;\n        }\n        const shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();\n        if (this.selectionHandle && !shouldHaveSelectionHandle) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n        if (shouldHaveSelectionHandle) {\n            this.addSelectionHandle();\n        }\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);\n    }\n    shouldHaveSelectionHandle() {\n        const { gridOptionsService, rangeService } = this.beans;\n        const cellRanges = rangeService.getCellRanges();\n        const rangesLen = cellRanges.length;\n        if (this.rangeCount < 1 || rangesLen < 1) {\n            return false;\n        }\n        const cellRange = last(cellRanges);\n        const cellPosition = this.cellCtrl.getCellPosition();\n        const isFillHandleAvailable = gridOptionsService.get('enableFillHandle') && !this.cellCtrl.isSuppressFillHandle();\n        const isRangeHandleAvailable = gridOptionsService.get('enableRangeHandle');\n        let handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (isFillHandleAvailable || isRangeHandleAvailable);\n        if (this.hasChartRange) {\n            const hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;\n            const isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);\n            this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);\n            handleIsAvailable = cellRange.type === CellRangeType.VALUE;\n        }\n        return handleIsAvailable &&\n            cellRange.endRow != null &&\n            rangeService.isContiguousRange(cellRange) &&\n            rangeService.isBottomRightCell(cellRange, cellPosition);\n    }\n    addSelectionHandle() {\n        const { gridOptionsService, rangeService } = this.beans;\n        const cellRangeType = last(rangeService.getCellRanges()).type;\n        const selectionHandleFill = gridOptionsService.get('enableFillHandle') && missing(cellRangeType);\n        const type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;\n        if (this.selectionHandle && this.selectionHandle.getType() !== type) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n        if (!this.selectionHandle) {\n            this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);\n        }\n        this.selectionHandle.refresh(this.cellCtrl);\n    }\n    destroy() {\n        this.beans.context.destroyBean(this.selectionHandle);\n    }\n}\n","import { areEqual, last } from \"../../utils/array.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { missing } from \"../../utils/generic.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\nexport class CellPositionFeature extends BeanStub {\n    constructor(ctrl, beans) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n        this.setupColSpan();\n        this.setupRowSpan();\n    }\n    setupRowSpan() {\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onNewColumnsLoaded());\n    }\n    setComp(eGui) {\n        this.eGui = eGui;\n        this.onLeftChanged();\n        this.onWidthChanged();\n        this.applyRowSpan();\n    }\n    onNewColumnsLoaded() {\n        const rowSpan = this.column.getRowSpan(this.rowNode);\n        if (this.rowSpan === rowSpan) {\n            return;\n        }\n        this.rowSpan = rowSpan;\n        this.applyRowSpan(true);\n    }\n    onDisplayColumnsChanged() {\n        const colsSpanning = this.getColSpanningList();\n        if (!areEqual(this.colsSpanning, colsSpanning)) {\n            this.colsSpanning = colsSpanning;\n            this.onWidthChanged();\n            this.onLeftChanged(); // left changes when doing RTL\n        }\n    }\n    setupColSpan() {\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n        if (this.column.getColDef().colSpan == null) {\n            return;\n        }\n        this.colsSpanning = this.getColSpanningList();\n        // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));\n        // because we are spanning over multiple cols, we check for width any time any cols width changes.\n        // this is expensive - really we should be explicitly checking only the cols we are spanning over\n        // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n        // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));\n    }\n    onWidthChanged() {\n        if (!this.eGui) {\n            return;\n        }\n        const width = this.getCellWidth();\n        this.eGui.style.width = `${width}px`;\n    }\n    getCellWidth() {\n        if (!this.colsSpanning) {\n            return this.column.getActualWidth();\n        }\n        return this.colsSpanning.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n    getColSpanningList() {\n        const colSpan = this.column.getColSpan(this.rowNode);\n        const colsSpanning = [];\n        // if just one col, the col span is just the column we are in\n        if (colSpan === 1) {\n            colsSpanning.push(this.column);\n        }\n        else {\n            let pointer = this.column;\n            const pinned = this.column.getPinned();\n            for (let i = 0; pointer && i < colSpan; i++) {\n                colsSpanning.push(pointer);\n                pointer = this.beans.columnModel.getDisplayedColAfter(pointer);\n                if (!pointer || missing(pointer)) {\n                    break;\n                }\n                // we do not allow col spanning to span outside of pinned areas\n                if (pinned !== pointer.getPinned()) {\n                    break;\n                }\n            }\n        }\n        return colsSpanning;\n    }\n    onLeftChanged() {\n        if (!this.eGui) {\n            return;\n        }\n        const left = this.modifyLeftForPrintLayout(this.getCellLeft());\n        this.eGui.style.left = left + 'px';\n    }\n    getCellLeft() {\n        let mostLeftCol;\n        if (this.beans.gridOptionsService.get('enableRtl') && this.colsSpanning) {\n            mostLeftCol = last(this.colsSpanning);\n        }\n        else {\n            mostLeftCol = this.column;\n        }\n        return mostLeftCol.getLeft();\n    }\n    modifyLeftForPrintLayout(leftPosition) {\n        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === 'left') {\n            return leftPosition;\n        }\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n        if (this.column.getPinned() === 'right') {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + (leftPosition || 0);\n        }\n        // is in body\n        return leftWidth + (leftPosition || 0);\n    }\n    applyRowSpan(force) {\n        if (this.rowSpan === 1 && !force) {\n            return;\n        }\n        const singleRowHeight = this.beans.gridOptionsService.getRowHeightAsNumber();\n        const totalRowHeight = singleRowHeight * this.rowSpan;\n        this.eGui.style.height = `${totalRowHeight}px`;\n        this.eGui.style.zIndex = '1';\n    }\n    // overriding to make public, as we don't dispose this bean via context\n    destroy() {\n        super.destroy();\n    }\n}\n","import { BeanStub } from \"../../context/beanStub.mjs\";\nexport class CellCustomStyleFeature extends BeanStub {\n    constructor(ctrl, beans) {\n        super();\n        this.staticClasses = [];\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n    setComp(comp) {\n        this.cellComp = comp;\n        this.applyUserStyles();\n        this.applyCellClassRules();\n        this.applyClassesFromColDef();\n    }\n    applyCellClassRules() {\n        const colDef = this.column.getColDef();\n        const { cellClassRules } = colDef;\n        const cellClassParams = {\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            column: this.column,\n            rowIndex: this.rowNode.rowIndex,\n            api: this.beans.gridOptionsService.api,\n            columnApi: this.beans.gridOptionsService.columnApi,\n            context: this.beans.gridOptionsService.context\n        };\n        this.beans.stylingService.processClassRules(\n        // if current was previous, skip\n        cellClassRules === this.cellClassRules ? undefined : this.cellClassRules, cellClassRules, cellClassParams, className => this.cellComp.addOrRemoveCssClass(className, true), className => this.cellComp.addOrRemoveCssClass(className, false));\n        this.cellClassRules = cellClassRules;\n    }\n    applyUserStyles() {\n        const colDef = this.column.getColDef();\n        if (!colDef.cellStyle) {\n            return;\n        }\n        let styles;\n        if (typeof colDef.cellStyle === 'function') {\n            const cellStyleParams = {\n                column: this.column,\n                value: this.cellCtrl.getValue(),\n                colDef: colDef,\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex,\n                api: this.beans.gridOptionsService.api,\n                columnApi: this.beans.gridOptionsService.columnApi,\n                context: this.beans.gridOptionsService.context,\n            };\n            const cellStyleFunc = colDef.cellStyle;\n            styles = cellStyleFunc(cellStyleParams);\n        }\n        else {\n            styles = colDef.cellStyle;\n        }\n        if (styles) {\n            this.cellComp.setUserStyles(styles);\n        }\n    }\n    applyClassesFromColDef() {\n        const colDef = this.column.getColDef();\n        const cellClassParams = {\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            column: this.column,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex,\n            api: this.beans.gridOptionsService.api,\n            columnApi: this.beans.gridOptionsService.columnApi,\n            context: this.beans.gridOptionsService.context\n        };\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, false));\n        }\n        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, true));\n        }\n    }\n    // overriding to make public, as we don't dispose this bean via context\n    destroy() {\n        super.destroy();\n    }\n}\n","import { BeanStub } from \"../context/beanStub.mjs\";\nimport { CustomTooltipFeature } from \"./customTooltipFeature.mjs\";\nexport class TooltipFeature extends BeanStub {\n    constructor(ctrl, beans) {\n        super();\n        this.ctrl = ctrl;\n        this.beans = beans;\n    }\n    setComp(eGui) {\n        this.eGui = eGui;\n        this.setupTooltip();\n    }\n    setBrowserTooltip(tooltip) {\n        const name = 'title';\n        if (tooltip != null && tooltip != '') {\n            this.eGui.setAttribute(name, tooltip);\n        }\n        else {\n            this.eGui.removeAttribute(name);\n        }\n    }\n    setupTooltip() {\n        this.browserTooltips = this.beans.gridOptionsService.get('enableBrowserTooltips');\n        this.updateTooltipText();\n        if (this.browserTooltips) {\n            this.setBrowserTooltip(this.tooltip);\n        }\n        else {\n            this.createTooltipFeatureIfNeeded();\n        }\n    }\n    updateTooltipText() {\n        this.tooltip = this.ctrl.getTooltipValue();\n    }\n    createTooltipFeatureIfNeeded() {\n        var _a, _b, _c, _d;\n        if (this.genericTooltipFeature != null) {\n            return;\n        }\n        const parent = {\n            getTooltipParams: () => this.getTooltipParams(),\n            getGui: () => this.ctrl.getGui()\n        };\n        this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent, (_b = (_a = this.ctrl).getTooltipShowDelayOverride) === null || _b === void 0 ? void 0 : _b.call(_a), (_d = (_c = this.ctrl).getTooltipHideDelayOverride) === null || _d === void 0 ? void 0 : _d.call(_c)), this.beans.context);\n    }\n    refreshToolTip() {\n        this.updateTooltipText();\n        if (this.browserTooltips) {\n            this.setBrowserTooltip(this.tooltip);\n        }\n    }\n    getTooltipParams() {\n        const ctrl = this.ctrl;\n        const column = ctrl.getColumn ? ctrl.getColumn() : undefined;\n        const colDef = ctrl.getColDef ? ctrl.getColDef() : undefined;\n        const rowNode = ctrl.getRowNode ? ctrl.getRowNode() : undefined;\n        return {\n            location: ctrl.getLocation(),\n            colDef: colDef,\n            column: column,\n            rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : undefined,\n            node: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            value: this.getTooltipText(),\n            valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : undefined,\n            hideTooltipCallback: () => this.genericTooltipFeature.hideTooltip(true)\n        };\n    }\n    getTooltipText() {\n        return this.tooltip;\n    }\n    // overriding to make public, as we don't dispose this bean via context\n    destroy() {\n        super.destroy();\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context.mjs\";\n/** Using the IoC has a slight performance consideration, which is no problem most of the\n * time, unless we are trashing objects - which is the case when scrolling and rowComp\n * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired\n * with the IoC. Instead they get passed this object which is all the beans the RowComp\n * and CellComp need. Not autowiring all the cells gives performance improvement. */\nlet Beans = class Beans {\n    postConstruct() {\n        if (this.gridOptionsService.isRowModelType('clientSide')) {\n            this.clientSideRowModel = this.rowModel;\n        }\n        if (this.gridOptionsService.isRowModelType('serverSide')) {\n            this.serverSideRowModel = this.rowModel;\n        }\n    }\n};\n__decorate([\n    Autowired('resizeObserverService')\n], Beans.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], Beans.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('context')\n], Beans.prototype, \"context\", void 0);\n__decorate([\n    Autowired('columnApi')\n], Beans.prototype, \"columnApi\", void 0);\n__decorate([\n    Autowired('gridApi')\n], Beans.prototype, \"gridApi\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], Beans.prototype, \"gridOptionsService\", void 0);\n__decorate([\n    Autowired('expressionService')\n], Beans.prototype, \"expressionService\", void 0);\n__decorate([\n    Autowired('environment')\n], Beans.prototype, \"environment\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], Beans.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('templateService')\n], Beans.prototype, \"templateService\", void 0);\n__decorate([\n    Autowired('valueService')\n], Beans.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('eventService')\n], Beans.prototype, \"eventService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], Beans.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('headerNavigationService')\n], Beans.prototype, \"headerNavigationService\", void 0);\n__decorate([\n    Autowired('navigationService')\n], Beans.prototype, \"navigationService\", void 0);\n__decorate([\n    Autowired('columnAnimationService')\n], Beans.prototype, \"columnAnimationService\", void 0);\n__decorate([\n    Optional('rangeService')\n], Beans.prototype, \"rangeService\", void 0);\n__decorate([\n    Autowired('focusService')\n], Beans.prototype, \"focusService\", void 0);\n__decorate([\n    Optional('contextMenuFactory')\n], Beans.prototype, \"contextMenuFactory\", void 0);\n__decorate([\n    Autowired('popupService')\n], Beans.prototype, \"popupService\", void 0);\n__decorate([\n    Autowired('valueFormatterService')\n], Beans.prototype, \"valueFormatterService\", void 0);\n__decorate([\n    Autowired('stylingService')\n], Beans.prototype, \"stylingService\", void 0);\n__decorate([\n    Autowired('columnHoverService')\n], Beans.prototype, \"columnHoverService\", void 0);\n__decorate([\n    Autowired('userComponentFactory')\n], Beans.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    Autowired('userComponentRegistry')\n], Beans.prototype, \"userComponentRegistry\", void 0);\n__decorate([\n    Autowired('animationFrameService')\n], Beans.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired('dragService')\n], Beans.prototype, \"dragService\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], Beans.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('sortController')\n], Beans.prototype, \"sortController\", void 0);\n__decorate([\n    Autowired('filterManager')\n], Beans.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('rowContainerHeightService')\n], Beans.prototype, \"rowContainerHeightService\", void 0);\n__decorate([\n    Autowired('frameworkOverrides')\n], Beans.prototype, \"frameworkOverrides\", void 0);\n__decorate([\n    Autowired('cellPositionUtils')\n], Beans.prototype, \"cellPositionUtils\", void 0);\n__decorate([\n    Autowired('rowPositionUtils')\n], Beans.prototype, \"rowPositionUtils\", void 0);\n__decorate([\n    Autowired('selectionService')\n], Beans.prototype, \"selectionService\", void 0);\n__decorate([\n    Optional('selectionHandleFactory')\n], Beans.prototype, \"selectionHandleFactory\", void 0);\n__decorate([\n    Autowired('rowCssClassCalculator')\n], Beans.prototype, \"rowCssClassCalculator\", void 0);\n__decorate([\n    Autowired('rowModel')\n], Beans.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], Beans.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('ctrlsFactory')\n], Beans.prototype, \"ctrlsFactory\", void 0);\n__decorate([\n    Autowired('agStackComponentsRegistry')\n], Beans.prototype, \"agStackComponentsRegistry\", void 0);\n__decorate([\n    Autowired('valueCache')\n], Beans.prototype, \"valueCache\", void 0);\n__decorate([\n    Autowired('rowNodeEventThrottle')\n], Beans.prototype, \"rowNodeEventThrottle\", void 0);\n__decorate([\n    Autowired('localeService')\n], Beans.prototype, \"localeService\", void 0);\n__decorate([\n    Autowired('valueParserService')\n], Beans.prototype, \"valueParserService\", void 0);\n__decorate([\n    Autowired('syncService')\n], Beans.prototype, \"syncService\", void 0);\n__decorate([\n    PostConstruct\n], Beans.prototype, \"postConstruct\", null);\nBeans = __decorate([\n    Bean('beans')\n], Beans);\nexport { Beans };\n","import { Events } from \"../../events.mjs\";\nimport { isBrowserSafari, isIOSUserAgent } from \"../../utils/browser.mjs\";\nimport { isElementChildOfClass, isFocusableFormField } from \"../../utils/dom.mjs\";\nimport { isEventSupported, isStopPropagationForAgGrid } from \"../../utils/event.mjs\";\nimport { Beans } from \"../beans.mjs\";\nexport class CellMouseListenerFeature extends Beans {\n    constructor(ctrl, beans, column) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = column;\n    }\n    onMouseEvent(eventName, mouseEvent) {\n        if (isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        switch (eventName) {\n            case 'click':\n                this.onCellClicked(mouseEvent);\n                break;\n            case 'mousedown':\n            case 'touchstart':\n                this.onMouseDown(mouseEvent);\n                break;\n            case 'dblclick':\n                this.onCellDoubleClicked(mouseEvent);\n                break;\n            case 'mouseout':\n                this.onMouseOut(mouseEvent);\n                break;\n            case 'mouseover':\n                this.onMouseOver(mouseEvent);\n                break;\n        }\n    }\n    onCellClicked(mouseEvent) {\n        // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.\n        if (this.isDoubleClickOnIPad()) {\n            this.onCellDoubleClicked(mouseEvent);\n            mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in\n            return;\n        }\n        const { eventService, rangeService, gridOptionsService } = this.beans;\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\n        if (rangeService && isMultiKey) {\n            // the mousedown event has created the range already, so we only intersect if there is more than one\n            // range on this cell\n            if (rangeService.getCellRangeCount(this.cellCtrl.getCellPosition()) > 1) {\n                rangeService.intersectLastRange(true);\n            }\n        }\n        const cellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);\n        eventService.dispatchEvent(cellClickedEvent);\n        const colDef = this.column.getColDef();\n        if (colDef.onCellClicked) {\n            // to make callback async, do in a timeout\n            window.setTimeout(() => colDef.onCellClicked(cellClickedEvent), 0);\n        }\n        const editOnSingleClick = (gridOptionsService.get('singleClickEdit') || colDef.singleClickEdit)\n            && !gridOptionsService.get('suppressClickEdit');\n        // edit on single click, but not if extending a range\n        if (editOnSingleClick && !(mouseEvent.shiftKey && (rangeService === null || rangeService === void 0 ? void 0 : rangeService.getCellRanges().length) != 0)) {\n            this.cellCtrl.startRowOrCellEdit();\n        }\n    }\n    // returns true if on iPad and this is second 'click' event in 200ms\n    isDoubleClickOnIPad() {\n        if (!isIOSUserAgent() || isEventSupported('dblclick')) {\n            return false;\n        }\n        const nowMillis = new Date().getTime();\n        const res = nowMillis - this.lastIPadMouseClickEvent < 200;\n        this.lastIPadMouseClickEvent = nowMillis;\n        return res;\n    }\n    onCellDoubleClicked(mouseEvent) {\n        const colDef = this.column.getColDef();\n        // always dispatch event to eventService\n        const cellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);\n        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);\n        // check if colDef also wants to handle event\n        if (typeof colDef.onCellDoubleClicked === 'function') {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => colDef.onCellDoubleClicked(cellDoubleClickedEvent), 0);\n        }\n        const editOnDoubleClick = !this.beans.gridOptionsService.get('singleClickEdit')\n            && !this.beans.gridOptionsService.get('suppressClickEdit');\n        if (editOnDoubleClick) {\n            this.cellCtrl.startRowOrCellEdit(null, mouseEvent);\n        }\n    }\n    onMouseDown(mouseEvent) {\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n        const target = mouseEvent.target;\n        const { cellCtrl, beans } = this;\n        const { eventService, rangeService, focusService } = beans;\n        // do not change the range for right-clicks inside an existing range\n        if (this.isRightClickInExistingRange(mouseEvent)) {\n            return;\n        }\n        const ranges = rangeService && rangeService.getCellRanges().length != 0;\n        if (!shiftKey || !ranges) {\n            // We only need to pass true to focusCell when the browser is Safari and we are trying\n            // to focus the cell itself. This should never be true if the mousedown was triggered\n            // due to a click on a cell editor for example.\n            const forceBrowserFocus = (isBrowserSafari()) && !cellCtrl.isEditing() && !isFocusableFormField(target);\n            cellCtrl.focusCell(forceBrowserFocus);\n        }\n        // if shift clicking, and a range exists, we keep the focus on the cell that started the\n        // range as the user then changes the range selection.\n        if (shiftKey && ranges && !focusService.isCellFocused(cellCtrl.getCellPosition())) {\n            // this stops the cell from getting focused\n            mouseEvent.preventDefault();\n            const focusedCellPosition = focusService.getFocusedCell();\n            if (focusedCellPosition) {\n                const { column, rowIndex, rowPinned } = focusedCellPosition;\n                const focusedRowCtrl = beans.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n                const focusedCellCtrl = focusedRowCtrl === null || focusedRowCtrl === void 0 ? void 0 : focusedRowCtrl.getCellCtrl(column);\n                // if the focused cell is editing, need to stop editing first\n                if (focusedCellCtrl === null || focusedCellCtrl === void 0 ? void 0 : focusedCellCtrl.isEditing()) {\n                    focusedCellCtrl.stopEditing();\n                }\n                // focus could have been lost, so restore it to the starting cell in the range if needed\n                focusService.setFocusedCell({\n                    column,\n                    rowIndex,\n                    rowPinned,\n                    forceBrowserFocus: true,\n                    preventScrollOnBrowserFocus: true,\n                });\n            }\n        }\n        // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox\n        // is focused but we don't want to change the range selection, so return here.\n        if (this.containsWidget(target)) {\n            return;\n        }\n        if (rangeService) {\n            const thisCell = this.cellCtrl.getCellPosition();\n            if (shiftKey) {\n                rangeService.extendLatestRangeToCell(thisCell);\n            }\n            else {\n                const isMultiKey = ctrlKey || metaKey;\n                rangeService.setRangeToCell(thisCell, isMultiKey);\n            }\n        }\n        eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));\n    }\n    isRightClickInExistingRange(mouseEvent) {\n        const { rangeService } = this.beans;\n        if (rangeService) {\n            const cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());\n            const isRightClick = mouseEvent.button === 2 || (mouseEvent.ctrlKey && this.beans.gridOptionsService.get('allowContextMenuWithControlKey'));\n            if (cellInRange && isRightClick) {\n                return true;\n            }\n        }\n        return false;\n    }\n    containsWidget(target) {\n        return isElementChildOfClass(target, 'ag-selection-checkbox', 3);\n    }\n    onMouseOut(mouseEvent) {\n        if (this.mouseStayingInsideCell(mouseEvent)) {\n            return;\n        }\n        const cellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);\n        this.beans.eventService.dispatchEvent(cellMouseOutEvent);\n        this.beans.columnHoverService.clearMouseOver();\n    }\n    onMouseOver(mouseEvent) {\n        if (this.mouseStayingInsideCell(mouseEvent)) {\n            return;\n        }\n        const cellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);\n        this.beans.eventService.dispatchEvent(cellMouseOverEvent);\n        this.beans.columnHoverService.setMouseOver([this.column]);\n    }\n    mouseStayingInsideCell(e) {\n        if (!e.target || !e.relatedTarget) {\n            return false;\n        }\n        const eGui = this.cellCtrl.getGui();\n        const cellContainsTarget = eGui.contains(e.target);\n        const cellContainsRelatedTarget = eGui.contains(e.relatedTarget);\n        return cellContainsTarget && cellContainsRelatedTarget;\n    }\n    destroy() {\n    }\n}\n","import { BeanStub } from \"../../context/beanStub.mjs\";\nimport { KeyCode } from \"../../constants/keyCode.mjs\";\nimport { isDeleteKey } from \"../../utils/keyboard.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nexport class CellKeyboardListenerFeature extends BeanStub {\n    constructor(ctrl, beans, column, rowNode, rowCtrl) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.rowNode = rowNode;\n        this.rowCtrl = rowCtrl;\n    }\n    setComp(eGui) {\n        this.eGui = eGui;\n    }\n    onKeyDown(event) {\n        const key = event.key;\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.F2:\n                this.onF2KeyDown(event);\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.BACKSPACE:\n            case KeyCode.DELETE:\n                this.onBackspaceOrDeleteKeyDown(key, event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                this.onNavigationKeyDown(event, key);\n                break;\n        }\n    }\n    onNavigationKeyDown(event, key) {\n        if (this.cellCtrl.isEditing()) {\n            return;\n        }\n        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {\n            this.onShiftRangeSelect(event);\n        }\n        else {\n            this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);\n        }\n        // if we don't prevent default, the grid will scroll with the navigation keys\n        event.preventDefault();\n    }\n    onShiftRangeSelect(event) {\n        if (!this.beans.rangeService) {\n            return;\n        }\n        const endCell = this.beans.rangeService.extendLatestRangeInDirection(event);\n        if (endCell) {\n            this.beans.navigationService.ensureCellVisible(endCell);\n        }\n    }\n    onTabKeyDown(event) {\n        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);\n    }\n    onBackspaceOrDeleteKeyDown(key, event) {\n        const { cellCtrl, beans, rowNode } = this;\n        const { gridOptionsService, rangeService, eventService } = beans;\n        if (cellCtrl.isEditing()) {\n            return;\n        }\n        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });\n        if (isDeleteKey(key, gridOptionsService.get('enableCellEditingOnBackspace'))) {\n            if (rangeService && gridOptionsService.get('enableRangeSelection')) {\n                rangeService.clearCellRangeCellValues({ dispatchWrapperEvents: true, wrapperEventSource: 'deleteKey' });\n            }\n            else if (cellCtrl.isCellEditable()) {\n                rowNode.setDataValue(cellCtrl.getColumn(), null, 'cellClear');\n            }\n        }\n        else {\n            cellCtrl.startRowOrCellEdit(key, event);\n        }\n        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });\n    }\n    onEnterKeyDown(e) {\n        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {\n            this.cellCtrl.stopEditingAndFocus(false, e.shiftKey);\n        }\n        else {\n            if (this.beans.gridOptionsService.get('enterNavigatesVertically')) {\n                const key = e.shiftKey ? KeyCode.UP : KeyCode.DOWN;\n                this.beans.navigationService.navigateToNextCell(null, key, this.cellCtrl.getCellPosition(), false);\n            }\n            else {\n                this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, e);\n                if (this.cellCtrl.isEditing()) {\n                    // if we started editing, then we need to prevent default, otherwise the Enter action can get\n                    // applied to the cell editor. this happened, for example, with largeTextCellEditor where not\n                    // preventing default results in a 'new line' character getting inserted in the text area\n                    // when the editing was started\n                    e.preventDefault();\n                }\n            }\n        }\n    }\n    onF2KeyDown(event) {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(KeyCode.F2, event);\n        }\n    }\n    onEscapeKeyDown(event) {\n        if (this.cellCtrl.isEditing()) {\n            this.cellCtrl.stopRowOrCellEdit(true);\n            this.cellCtrl.focusCell(true);\n        }\n    }\n    processCharacter(event) {\n        // check this, in case focus is on a (for example) a text field inside the cell,\n        // in which cse we should not be listening for these key pressed\n        const eventTarget = event.target;\n        const eventOnChildComponent = eventTarget !== this.eGui;\n        if (eventOnChildComponent || this.cellCtrl.isEditing()) {\n            return;\n        }\n        const key = event.key;\n        if (key === ' ') {\n            this.onSpaceKeyDown(event);\n        }\n        else {\n            this.cellCtrl.startRowOrCellEdit(key, event);\n            // if we don't prevent default, then the event also gets applied to the text field\n            // (at least when doing the default editor), but we need to allow the editor to decide\n            // what it wants to do. we only do this IF editing was started - otherwise it messes\n            // up when the use is not doing editing, but using rendering with text fields in cellRenderer\n            // (as it would block the the user from typing into text fields).\n            event.preventDefault();\n        }\n    }\n    onSpaceKeyDown(event) {\n        const { gridOptionsService } = this.beans;\n        if (!this.cellCtrl.isEditing() && gridOptionsService.isRowSelection()) {\n            const currentSelection = this.rowNode.isSelected();\n            const newSelection = !currentSelection;\n            if (newSelection || !gridOptionsService.get('suppressRowDeselection')) {\n                const groupSelectsFiltered = this.beans.gridOptionsService.get('groupSelectsFiltered');\n                const updatedCount = this.rowNode.setSelectedParams({\n                    newValue: newSelection,\n                    rangeSelect: event.shiftKey,\n                    groupSelectsFiltered: groupSelectsFiltered,\n                    event,\n                    source: 'spaceKey',\n                });\n                if (currentSelection === undefined && updatedCount === 0) {\n                    this.rowNode.setSelectedParams({\n                        newValue: false,\n                        rangeSelect: event.shiftKey,\n                        groupSelectsFiltered: groupSelectsFiltered,\n                        event,\n                        source: 'spaceKey',\n                    });\n                }\n            }\n        }\n        // prevent default as space key, by default, moves browser scroll down\n        event.preventDefault();\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../widgets/component.mjs\";\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { createIconNoSpan } from \"../utils/icon.mjs\";\nexport class DndSourceComp extends Component {\n    constructor(rowNode, column, eCell) {\n        super(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.eCell = eCell;\n    }\n    postConstruct() {\n        const eGui = this.getGui();\n        eGui.appendChild(createIconNoSpan('rowDrag', this.gridOptionsService, null));\n        // we need to stop the event propagation here to avoid starting a range selection while dragging\n        this.addGuiEventListener('mousedown', (e) => {\n            e.stopPropagation();\n        });\n        this.addDragSource();\n        this.checkVisibility();\n    }\n    addDragSource() {\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\n    }\n    onDragStart(dragEvent) {\n        const providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;\n        dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);\n        // default behaviour is to convert data to json and set into drag component\n        const defaultOnRowDrag = () => {\n            try {\n                const jsonData = JSON.stringify(this.rowNode.data);\n                dragEvent.dataTransfer.setData('application/json', jsonData);\n                dragEvent.dataTransfer.setData('text/plain', jsonData);\n            }\n            catch (e) {\n                // if we cannot convert the data to json, then we do not set the type\n            }\n        };\n        if (providedOnRowDrag) {\n            const params = {\n                rowNode: this.rowNode, dragEvent: dragEvent,\n                api: this.gridOptionsService.api,\n                columnApi: this.gridOptionsService.columnApi,\n                context: this.gridOptionsService.context\n            };\n            providedOnRowDrag(params);\n        }\n        else {\n            defaultOnRowDrag();\n        }\n    }\n    checkVisibility() {\n        const visible = this.column.isDndSource(this.rowNode);\n        this.setDisplayed(visible);\n    }\n}\n__decorate([\n    PostConstruct\n], DndSourceComp.prototype, \"postConstruct\", null);\n","import { missing } from \"../../utils/generic.mjs\";\nconst CSS_FIRST_COLUMN = 'ag-column-first';\nconst CSS_LAST_COLUMN = 'ag-column-last';\nexport class CssClassApplier {\n    static getHeaderClassesFromColDef(abstractColDef, gridOptionsService, column, columnGroup) {\n        if (missing(abstractColDef)) {\n            return [];\n        }\n        return this.getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gridOptionsService, column, columnGroup);\n    }\n    static getToolPanelClassesFromColDef(abstractColDef, gridOptionsService, column, columnGroup) {\n        if (missing(abstractColDef)) {\n            return [];\n        }\n        return this.getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gridOptionsService, column, columnGroup);\n    }\n    static refreshFirstAndLastStyles(comp, column, columnModel) {\n        comp.addOrRemoveCssClass(CSS_FIRST_COLUMN, columnModel.isColumnAtEdge(column, 'first'));\n        comp.addOrRemoveCssClass(CSS_LAST_COLUMN, columnModel.isColumnAtEdge(column, 'last'));\n    }\n    static getClassParams(abstractColDef, gridOptionsService, column, columnGroup) {\n        return {\n            // bad naming, as colDef here can be a group or a column,\n            // however most people won't appreciate the difference,\n            // so keeping it as colDef to avoid confusion.\n            colDef: abstractColDef,\n            column: column,\n            columnGroup: columnGroup,\n            api: gridOptionsService.api,\n            columnApi: gridOptionsService.columnApi,\n            context: gridOptionsService.context\n        };\n    }\n    static getColumnClassesFromCollDef(classesOrFunc, abstractColDef, gridOptionsService, column, columnGroup) {\n        if (missing(classesOrFunc)) {\n            return [];\n        }\n        let classToUse;\n        if (typeof classesOrFunc === 'function') {\n            const params = this.getClassParams(abstractColDef, gridOptionsService, column, columnGroup);\n            classToUse = classesOrFunc(params);\n        }\n        else {\n            classToUse = classesOrFunc;\n        }\n        if (typeof classToUse === 'string') {\n            return [classToUse];\n        }\n        if (Array.isArray(classToUse)) {\n            return [...classToUse];\n        }\n        return [];\n    }\n}\n","import { Events } from \"../../events.mjs\";\nimport { CellRangeFeature } from \"./cellRangeFeature.mjs\";\nimport { exists, makeNull } from \"../../utils/generic.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { CellPositionFeature } from \"./cellPositionFeature.mjs\";\nimport { escapeString } from \"../../utils/string.mjs\";\nimport { CellCustomStyleFeature } from \"./cellCustomStyleFeature.mjs\";\nimport { TooltipFeature } from \"../../widgets/tooltipFeature.mjs\";\nimport { CellMouseListenerFeature } from \"./cellMouseListenerFeature.mjs\";\nimport { CellKeyboardListenerFeature } from \"./cellKeyboardListenerFeature.mjs\";\nimport { KeyCode } from \"../../constants/keyCode.mjs\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent.mjs\";\nimport { DndSourceComp } from \"../dndSourceComp.mjs\";\nimport { warnOnce } from \"../../utils/function.mjs\";\nimport { RowDragComp } from \"../row/rowDragComp.mjs\";\nimport { getValueUsingField } from \"../../utils/object.mjs\";\nimport { getElementSize } from \"../../utils/dom.mjs\";\nimport { setAriaColIndex } from \"../../utils/aria.mjs\";\nimport { CssClassApplier } from \"../../headerRendering/cells/cssClassApplier.mjs\";\nconst CSS_CELL = 'ag-cell';\nconst CSS_AUTO_HEIGHT = 'ag-cell-auto-height';\nconst CSS_NORMAL_HEIGHT = 'ag-cell-normal-height';\nconst CSS_CELL_FOCUS = 'ag-cell-focus';\nconst CSS_CELL_FIRST_RIGHT_PINNED = 'ag-cell-first-right-pinned';\nconst CSS_CELL_LAST_LEFT_PINNED = 'ag-cell-last-left-pinned';\nconst CSS_CELL_NOT_INLINE_EDITING = 'ag-cell-not-inline-editing';\nconst CSS_COLUMN_HOVER = 'ag-column-hover';\nconst CSS_CELL_WRAP_TEXT = 'ag-cell-wrap-text';\nlet instanceIdSequence = 0;\nexport class CellCtrl extends BeanStub {\n    constructor(column, rowNode, beans, rowCtrl) {\n        super();\n        this.cellRangeFeature = null;\n        this.cellPositionFeature = null;\n        this.cellCustomStyleFeature = null;\n        this.tooltipFeature = null;\n        this.cellMouseListenerFeature = null;\n        this.cellKeyboardListenerFeature = null;\n        this.suppressRefreshCell = false;\n        this.onCellCompAttachedFuncs = [];\n        this.column = column;\n        this.rowNode = rowNode;\n        this.beans = beans;\n        this.rowCtrl = rowCtrl;\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = column.getId() + '-' + instanceIdSequence++;\n        const colDef = this.column.getColDef();\n        this.colIdSanitised = escapeString(this.column.getId());\n        if (!this.beans.gridOptionsService.get('suppressCellFocus')) {\n            this.tabIndex = -1;\n        }\n        this.isCellRenderer = colDef.cellRenderer != null || colDef.cellRendererSelector != null;\n        this.createCellPosition();\n        this.addFeatures();\n        this.updateAndFormatValue(false);\n    }\n    shouldRestoreFocus() {\n        return this.beans.focusService.shouldRestoreFocus(this.cellPosition);\n    }\n    addFeatures() {\n        this.cellPositionFeature = new CellPositionFeature(this, this.beans);\n        this.addDestroyFunc(() => { var _a; (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.destroy(); this.cellPositionFeature = null; });\n        this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);\n        this.addDestroyFunc(() => { var _a; (_a = this.cellCustomStyleFeature) === null || _a === void 0 ? void 0 : _a.destroy(); this.cellCustomStyleFeature = null; });\n        this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);\n        this.addDestroyFunc(() => { var _a; (_a = this.cellMouseListenerFeature) === null || _a === void 0 ? void 0 : _a.destroy(); this.cellMouseListenerFeature = null; });\n        this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.rowCtrl);\n        this.addDestroyFunc(() => { var _a; (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.destroy(); this.cellKeyboardListenerFeature = null; });\n        if (this.column.isTooltipEnabled()) {\n            this.enableTooltipFeature();\n            this.addDestroyFunc(() => { this.disableTooltipFeature(); });\n        }\n        const rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsService.get('enableRangeSelection');\n        if (rangeSelectionEnabled) {\n            this.cellRangeFeature = new CellRangeFeature(this.beans, this);\n            this.addDestroyFunc(() => { var _a; (_a = this.cellRangeFeature) === null || _a === void 0 ? void 0 : _a.destroy(); this.cellRangeFeature = null; });\n        }\n    }\n    enableTooltipFeature() {\n        const getTooltipValue = () => {\n            const colDef = this.column.getColDef();\n            const data = this.rowNode.data;\n            if (colDef.tooltipField && exists(data)) {\n                return getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());\n            }\n            const valueGetter = colDef.tooltipValueGetter;\n            if (valueGetter) {\n                return valueGetter({\n                    location: 'cell',\n                    api: this.beans.gridOptionsService.api,\n                    columnApi: this.beans.gridOptionsService.columnApi,\n                    context: this.beans.gridOptionsService.context,\n                    colDef: this.column.getColDef(),\n                    column: this.column,\n                    rowIndex: this.cellPosition.rowIndex,\n                    node: this.rowNode,\n                    data: this.rowNode.data,\n                    value: this.value,\n                    valueFormatted: this.valueFormatted,\n                });\n            }\n            return null;\n        };\n        const tooltipCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getRowIndex: () => this.cellPosition.rowIndex,\n            getRowNode: () => this.rowNode,\n            getGui: () => this.getGui(),\n            getLocation: () => 'cell',\n            getTooltipValue: getTooltipValue,\n            // this makes no sense, why is the cell formatted value passed to the tooltip???\n            getValueFormatted: () => this.valueFormatted\n        };\n        this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);\n    }\n    disableTooltipFeature() {\n        if (!this.tooltipFeature) {\n            return;\n        }\n        this.tooltipFeature.destroy();\n        this.tooltipFeature = null;\n    }\n    setComp(comp, eGui, eCellWrapper, printLayout, startEditing) {\n        var _a, _b, _c, _d;\n        this.cellComp = comp;\n        this.eGui = eGui;\n        this.printLayout = printLayout;\n        this.addDomData();\n        this.onCellFocused(this.focusEventToRestore);\n        this.applyStaticCssClasses();\n        this.setWrapText();\n        this.onFirstRightPinnedChanged();\n        this.onLastLeftPinnedChanged();\n        this.onColumnHover();\n        this.setupControlComps();\n        this.setupAutoHeight(eCellWrapper);\n        this.refreshFirstAndLastStyles();\n        this.refreshAriaColIndex();\n        (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.setComp(eGui);\n        (_b = this.cellCustomStyleFeature) === null || _b === void 0 ? void 0 : _b.setComp(comp);\n        (_c = this.tooltipFeature) === null || _c === void 0 ? void 0 : _c.setComp(eGui);\n        (_d = this.cellKeyboardListenerFeature) === null || _d === void 0 ? void 0 : _d.setComp(this.eGui);\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.setComp(comp, eGui);\n        }\n        if (startEditing && this.isCellEditable()) {\n            this.startEditing();\n        }\n        else {\n            this.showValue();\n        }\n        if (this.onCellCompAttachedFuncs.length) {\n            this.onCellCompAttachedFuncs.forEach(func => func());\n            this.onCellCompAttachedFuncs = [];\n        }\n    }\n    setupAutoHeight(eCellWrapper) {\n        this.isAutoHeight = this.column.isAutoHeight();\n        if (!this.isAutoHeight || !eCellWrapper) {\n            return;\n        }\n        const eParentCell = eCellWrapper.parentElement;\n        // taking minRowHeight from getRowHeightForNode means the getRowHeight() callback is used,\n        // thus allowing different min heights for different rows.\n        const minRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this.rowNode).height;\n        const measureHeight = (timesCalled) => {\n            if (this.editing) {\n                return;\n            }\n            // because of the retry's below, it's possible the retry's go beyond\n            // the rows life.\n            if (!this.isAlive()) {\n                return;\n            }\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = getElementSize(eParentCell);\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\n            const wrapperHeight = eCellWrapper.offsetHeight;\n            const autoHeight = wrapperHeight + extraHeight;\n            if (timesCalled < 5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gridOptionsService.getDocument();\n                const notYetInDom = !doc || !doc.contains(eCellWrapper);\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight == 0;\n                if (notYetInDom || possiblyNoContentYet) {\n                    this.beans.frameworkOverrides.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n            const newHeight = Math.max(autoHeight, minRowHeight);\n            this.rowNode.setRowAutoHeight(newHeight, this.column);\n        };\n        const listener = () => measureHeight(0);\n        // do once to set size in case size doesn't change, common when cell is blank\n        listener();\n        const destroyResizeObserver = this.beans.resizeObserverService.observeResize(eCellWrapper, listener);\n        this.addDestroyFunc(() => {\n            destroyResizeObserver();\n            this.rowNode.setRowAutoHeight(undefined, this.column);\n        });\n    }\n    getCellAriaRole() {\n        var _a;\n        return (_a = this.column.getColDef().cellAriaRole) !== null && _a !== void 0 ? _a : 'gridcell';\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    getIncludeSelection() {\n        return this.includeSelection;\n    }\n    getIncludeRowDrag() {\n        return this.includeRowDrag;\n    }\n    getIncludeDndSource() {\n        return this.includeDndSource;\n    }\n    getColumnIdSanitised() {\n        return this.colIdSanitised;\n    }\n    getTabIndex() {\n        return this.tabIndex;\n    }\n    getIsCellRenderer() {\n        return this.isCellRenderer;\n    }\n    getValueToDisplay() {\n        return this.valueFormatted != null ? this.valueFormatted : this.value;\n    }\n    showValue(forceNewCellRendererInstance = false) {\n        const valueToDisplay = this.getValueToDisplay();\n        let compDetails;\n        if (this.isCellRenderer) {\n            const params = this.createCellRendererParams();\n            compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);\n        }\n        this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);\n        this.refreshHandle();\n    }\n    setupControlComps() {\n        const colDef = this.column.getColDef();\n        this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);\n        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);\n        this.includeDndSource = this.isIncludeControl(colDef.dndSource);\n        this.cellComp.setIncludeSelection(this.includeSelection);\n        this.cellComp.setIncludeDndSource(this.includeDndSource);\n        this.cellComp.setIncludeRowDrag(this.includeRowDrag);\n    }\n    isForceWrapper() {\n        // text selection requires the value to be wrapped in another element\n        const forceWrapper = this.beans.gridOptionsService.get('enableCellTextSelection') || this.column.isAutoHeight();\n        return forceWrapper;\n    }\n    isIncludeControl(value) {\n        const rowNodePinned = this.rowNode.rowPinned != null;\n        const isFunc = typeof value === 'function';\n        const res = rowNodePinned ? false : isFunc || value === true;\n        return res;\n    }\n    refreshShouldDestroy() {\n        const colDef = this.column.getColDef();\n        const selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);\n        const rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);\n        const dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);\n        return selectionChanged || rowDragChanged || dndSourceChanged;\n    }\n    // either called internally if single cell editing, or called by rowRenderer if row editing\n    startEditing(key = null, cellStartedEdit = false, event = null) {\n        if (!this.isCellEditable() || this.editing) {\n            return;\n        }\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\n        // yet to initialise the cell, so we re-schedule this operation for when celLComp is attached\n        if (!this.cellComp) {\n            this.onCellCompAttachedFuncs.push(() => { this.startEditing(key, cellStartedEdit, event); });\n            return;\n        }\n        const editorParams = this.createCellEditorParams(key, cellStartedEdit);\n        const colDef = this.column.getColDef();\n        const compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);\n        // if cellEditorSelector was used, we give preference to popup and popupPosition from the selector\n        const popup = (compDetails === null || compDetails === void 0 ? void 0 : compDetails.popupFromSelector) != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup;\n        const position = (compDetails === null || compDetails === void 0 ? void 0 : compDetails.popupPositionFromSelector) != null ? compDetails.popupPositionFromSelector : colDef.cellEditorPopupPosition;\n        this.setEditing(true);\n        this.cellComp.setEditDetails(compDetails, popup, position);\n        const e = this.createEvent(event, Events.EVENT_CELL_EDITING_STARTED);\n        this.beans.eventService.dispatchEvent(e);\n    }\n    setEditing(editing) {\n        if (this.editing === editing) {\n            return;\n        }\n        this.editing = editing;\n        this.refreshHandle();\n    }\n    // pass in 'true' to cancel the editing.\n    stopRowOrCellEdit(cancel = false) {\n        if (this.beans.gridOptionsService.get('editType') === 'fullRow') {\n            this.rowCtrl.stopRowEditing(cancel);\n        }\n        else {\n            this.stopEditing(cancel);\n        }\n    }\n    onPopupEditorClosed() {\n        if (!this.isEditing()) {\n            return;\n        }\n        // note: this happens because of a click outside of the grid or if the popupEditor\n        // is closed with `Escape` key. if another cell was clicked, then the editing will\n        // have already stopped and returned on the conditional above.\n        this.stopEditingAndFocus();\n    }\n    takeValueFromCellEditor(cancel) {\n        const noValueResult = { newValueExists: false };\n        if (cancel) {\n            return noValueResult;\n        }\n        const cellEditor = this.cellComp.getCellEditor();\n        if (!cellEditor) {\n            return noValueResult;\n        }\n        const userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();\n        if (userWantsToCancel) {\n            return noValueResult;\n        }\n        const newValue = cellEditor.getValue();\n        return {\n            newValue: newValue,\n            newValueExists: true\n        };\n    }\n    /**\n     * @returns `True` if the value changes, otherwise `False`.\n     */\n    saveNewValue(oldValue, newValue) {\n        if (newValue === oldValue) {\n            return false;\n        }\n        // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection\n        // getting triggered, which results in all cells getting refreshed. we do not want this refresh\n        // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.\n        // if we only did this refresh (and not the one below) then the cell would flash and not be forced.\n        this.suppressRefreshCell = true;\n        const valueChanged = this.rowNode.setDataValue(this.column, newValue, 'edit');\n        this.suppressRefreshCell = false;\n        return valueChanged;\n    }\n    /**\n     * Ends the Cell Editing\n     * @param cancel `True` if the edit process is being canceled.\n     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.\n     */\n    stopEditing(cancel = false) {\n        if (!this.editing) {\n            return false;\n        }\n        const { newValue, newValueExists } = this.takeValueFromCellEditor(cancel);\n        const oldValue = this.rowNode.getValueFromValueService(this.column);\n        let valueChanged = false;\n        if (newValueExists) {\n            valueChanged = this.saveNewValue(oldValue, newValue);\n        }\n        this.setEditing(false);\n        this.cellComp.setEditDetails(); // passing nothing stops editing\n        this.updateAndFormatValue(false);\n        this.refreshCell({ forceRefresh: true, suppressFlash: true });\n        this.dispatchEditingStoppedEvent(oldValue, newValue, !cancel && !!valueChanged);\n        return valueChanged;\n    }\n    dispatchEditingStoppedEvent(oldValue, newValue, valueChanged) {\n        const editingStoppedEvent = Object.assign(Object.assign({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), { oldValue,\n            newValue,\n            valueChanged });\n        this.beans.eventService.dispatchEvent(editingStoppedEvent);\n    }\n    createCellEditorParams(key, cellStartedEdit) {\n        return {\n            value: this.rowNode.getValueFromValueService(this.column),\n            eventKey: key,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            rowIndex: this.getCellPosition().rowIndex,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            api: this.beans.gridOptionsService.api,\n            cellStartedEdit: cellStartedEdit,\n            columnApi: this.beans.gridOptionsService.columnApi,\n            context: this.beans.gridOptionsService.context,\n            onKeyDown: this.onKeyDown.bind(this),\n            stopEditing: this.stopEditingAndFocus.bind(this),\n            eGridCell: this.getGui(),\n            parseValue: this.parseValue.bind(this),\n            formatValue: this.formatValue.bind(this)\n        };\n    }\n    createCellRendererParams() {\n        const res = {\n            value: this.value,\n            valueFormatted: this.valueFormatted,\n            getValue: () => this.rowNode.getValueFromValueService(this.column),\n            setValue: (value) => this.beans.valueService.setValue(this.rowNode, this.column, value),\n            formatValue: this.formatValue.bind(this),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            pinned: this.column.getPinned(),\n            colDef: this.column.getColDef(),\n            column: this.column,\n            rowIndex: this.getCellPosition().rowIndex,\n            api: this.beans.gridOptionsService.api,\n            columnApi: this.beans.gridOptionsService.columnApi,\n            context: this.beans.gridOptionsService.context,\n            refreshCell: this.refreshCell.bind(this),\n            eGridCell: this.getGui(),\n            eParentOfValue: this.cellComp.getParentOfValue(),\n            registerRowDragger: (rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) => this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange),\n        };\n        return res;\n    }\n    parseValue(newValue) {\n        return this.beans.valueParserService.parseValue(this.column, this.rowNode, newValue, this.getValue());\n    }\n    setFocusOutOnEditor() {\n        if (!this.editing) {\n            return;\n        }\n        const cellEditor = this.cellComp.getCellEditor();\n        if (cellEditor && cellEditor.focusOut) {\n            cellEditor.focusOut();\n        }\n    }\n    setFocusInOnEditor() {\n        if (!this.editing) {\n            return;\n        }\n        const cellEditor = this.cellComp.getCellEditor();\n        if (cellEditor && cellEditor.focusIn) {\n            // if the editor is present, then we just focus it\n            cellEditor.focusIn();\n        }\n        else {\n            // if the editor is not present, it means async cell editor (eg React fibre)\n            // and we are trying to set focus before the cell editor is present, so we\n            // focus the cell instead\n            this.focusCell(true);\n        }\n    }\n    onCellChanged(event) {\n        const eventImpactsThisCell = event.column === this.column;\n        if (eventImpactsThisCell) {\n            this.refreshCell({});\n        }\n    }\n    refreshOrDestroyCell(params) {\n        var _a;\n        if (this.refreshShouldDestroy()) {\n            (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.refreshCell(this);\n        }\n        else {\n            this.refreshCell(params);\n        }\n    }\n    // + stop editing {forceRefresh: true, suppressFlash: true}\n    // + event cellChanged {}\n    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything\n    // + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}\n    // + rowCtrl: api refreshCells() {animate: true/false}\n    // + rowRenderer: api softRefreshView() {}\n    refreshCell(params) {\n        var _a, _b, _c;\n        // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly\n        if (this.suppressRefreshCell || this.editing) {\n            return;\n        }\n        const colDef = this.column.getColDef();\n        const newData = params != null && !!params.newData;\n        const suppressFlash = (params != null && !!params.suppressFlash) || !!colDef.suppressCellFlash;\n        // we always refresh if cell has no value - this can happen when user provides Cell Renderer and the\n        // cell renderer doesn't rely on a value, instead it could be looking directly at the data, or maybe\n        // printing the current time (which would be silly)???. Generally speaking\n        // non of {field, valueGetter, showRowGroup} is bad in the users application, however for this edge case, it's\n        // best always refresh and take the performance hit rather than never refresh and users complaining in support\n        // that cells are not updating.\n        const noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;\n        const forceRefresh = (params && params.forceRefresh) || noValueProvided || newData;\n        const isCellCompReady = !!this.cellComp;\n        // Only worth comparing values if the cellComp is ready\n        const valuesDifferent = this.updateAndFormatValue(isCellCompReady);\n        const dataNeedsUpdating = forceRefresh || valuesDifferent;\n        // In React, due to async, it's possible a refresh was asked for before the CellComp was created and calls setComp()\n        // So we do not run the cell comp refresh logic at this point in time.\n        if (!isCellCompReady) {\n            return;\n        }\n        if (dataNeedsUpdating) {\n            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.\n            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')\n            // then we are not showing a movement in the stock price, rather we are showing different stock.\n            this.showValue(newData);\n            // we don't want to flash the cells when processing a filter change, as otherwise the UI would\n            // be to busy. see comment in FilterManager with regards processingFilterChange\n            const processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();\n            const flashCell = !suppressFlash && !processingFilterChange &&\n                (this.beans.gridOptionsService.get('enableCellChangeFlash') || colDef.enableCellChangeFlash);\n            if (flashCell) {\n                this.flashCell();\n            }\n            (_a = this.cellCustomStyleFeature) === null || _a === void 0 ? void 0 : _a.applyUserStyles();\n            (_b = this.cellCustomStyleFeature) === null || _b === void 0 ? void 0 : _b.applyClassesFromColDef();\n        }\n        this.refreshToolTip();\n        // we do cellClassRules even if the value has not changed, so that users who have rules that\n        // look at other parts of the row (where the other part of the row might of changed) will work.\n        (_c = this.cellCustomStyleFeature) === null || _c === void 0 ? void 0 : _c.applyCellClassRules();\n    }\n    // cell editors call this, when they want to stop for reasons other\n    // than what we pick up on. eg selecting from a dropdown ends editing.\n    stopEditingAndFocus(suppressNavigateAfterEdit = false, shiftKey = false) {\n        this.stopRowOrCellEdit();\n        this.focusCell(true);\n        if (!suppressNavigateAfterEdit) {\n            this.navigateAfterEdit(shiftKey);\n        }\n    }\n    navigateAfterEdit(shiftKey) {\n        const enterNavigatesVerticallyAfterEdit = this.beans.gridOptionsService.get('enterNavigatesVerticallyAfterEdit');\n        if (enterNavigatesVerticallyAfterEdit) {\n            const key = shiftKey ? KeyCode.UP : KeyCode.DOWN;\n            this.beans.navigationService.navigateToNextCell(null, key, this.getCellPosition(), false);\n        }\n    }\n    // user can also call this via API\n    flashCell(delays) {\n        const flashDelay = delays && delays.flashDelay;\n        const fadeDelay = delays && delays.fadeDelay;\n        this.animateCell('data-changed', flashDelay, fadeDelay);\n    }\n    animateCell(cssName, flashDelay, fadeDelay) {\n        if (!this.cellComp) {\n            return;\n        }\n        const fullName = `ag-cell-${cssName}`;\n        const animationFullName = `ag-cell-${cssName}-animation`;\n        const { gridOptionsService } = this.beans;\n        if (!flashDelay) {\n            flashDelay = gridOptionsService.get('cellFlashDelay');\n        }\n        if (!exists(fadeDelay)) {\n            fadeDelay = gridOptionsService.get('cellFadeDelay');\n        }\n        // we want to highlight the cells, without any animation\n        this.cellComp.addOrRemoveCssClass(fullName, true);\n        this.cellComp.addOrRemoveCssClass(animationFullName, false);\n        // then once that is applied, we remove the highlight with animation\n        window.setTimeout(() => {\n            if (!this.isAlive()) {\n                return;\n            }\n            this.cellComp.addOrRemoveCssClass(fullName, false);\n            this.cellComp.addOrRemoveCssClass(animationFullName, true);\n            this.eGui.style.transition = `background-color ${fadeDelay}ms`;\n            window.setTimeout(() => {\n                if (!this.isAlive()) {\n                    return;\n                }\n                // and then to leave things as we got them, we remove the animation\n                this.cellComp.addOrRemoveCssClass(animationFullName, false);\n                this.eGui.style.transition = '';\n            }, fadeDelay);\n        }, flashDelay);\n    }\n    onFlashCells(event) {\n        if (!this.cellComp) {\n            return;\n        }\n        const cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());\n        const shouldFlash = event.cells[cellId];\n        if (shouldFlash) {\n            this.animateCell('highlight');\n        }\n    }\n    isCellEditable() {\n        return this.column.isCellEditable(this.rowNode);\n    }\n    isSuppressFillHandle() {\n        return this.column.isSuppressFillHandle();\n    }\n    formatValue(value) {\n        var _a;\n        return (_a = this.callValueFormatter(value)) !== null && _a !== void 0 ? _a : value;\n    }\n    callValueFormatter(value) {\n        return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, value);\n    }\n    updateAndFormatValue(compareValues) {\n        const oldValue = this.value;\n        const oldValueFormatted = this.valueFormatted;\n        this.value = this.rowNode.getValueFromValueService(this.column);\n        this.valueFormatted = this.callValueFormatter(this.value);\n        if (compareValues) {\n            return !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;\n        }\n        return true;\n    }\n    valuesAreEqual(val1, val2) {\n        // if the user provided an equals method, use that, otherwise do simple comparison\n        const colDef = this.column.getColDef();\n        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;\n    }\n    getComp() {\n        return this.cellComp;\n    }\n    getValue() {\n        return this.value;\n    }\n    getValueFormatted() {\n        return this.valueFormatted;\n    }\n    addDomData() {\n        const element = this.getGui();\n        this.beans.gridOptionsService.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, this);\n        this.addDestroyFunc(() => this.beans.gridOptionsService.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, null));\n    }\n    createEvent(domEvent, eventType) {\n        const event = {\n            type: eventType,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            value: this.value,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            context: this.beans.gridOptionsService.context,\n            api: this.beans.gridApi,\n            columnApi: this.beans.columnApi,\n            rowPinned: this.rowNode.rowPinned,\n            event: domEvent,\n            rowIndex: this.rowNode.rowIndex\n        };\n        return event;\n    }\n    processCharacter(event) {\n        var _a;\n        (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.processCharacter(event);\n    }\n    onKeyDown(event) {\n        var _a;\n        (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.onKeyDown(event);\n    }\n    onMouseEvent(eventName, mouseEvent) {\n        var _a;\n        (_a = this.cellMouseListenerFeature) === null || _a === void 0 ? void 0 : _a.onMouseEvent(eventName, mouseEvent);\n    }\n    getGui() {\n        return this.eGui;\n    }\n    refreshToolTip() {\n        var _a;\n        (_a = this.tooltipFeature) === null || _a === void 0 ? void 0 : _a.refreshToolTip();\n    }\n    getColSpanningList() {\n        return this.cellPositionFeature.getColSpanningList();\n    }\n    onLeftChanged() {\n        var _a;\n        if (!this.cellComp) {\n            return;\n        }\n        (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.onLeftChanged();\n    }\n    onDisplayedColumnsChanged() {\n        if (!this.eGui) {\n            return;\n        }\n        this.refreshAriaColIndex();\n        this.refreshFirstAndLastStyles();\n    }\n    refreshFirstAndLastStyles() {\n        const { cellComp, column, beans } = this;\n        CssClassApplier.refreshFirstAndLastStyles(cellComp, column, beans.columnModel);\n    }\n    refreshAriaColIndex() {\n        const colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);\n        setAriaColIndex(this.getGui(), colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n    isSuppressNavigable() {\n        return this.column.isSuppressNavigable(this.rowNode);\n    }\n    onWidthChanged() {\n        var _a;\n        return (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.onWidthChanged();\n    }\n    getColumn() {\n        return this.column;\n    }\n    getRowNode() {\n        return this.rowNode;\n    }\n    getBeans() {\n        return this.beans;\n    }\n    isPrintLayout() {\n        return this.printLayout;\n    }\n    appendChild(htmlElement) {\n        this.eGui.appendChild(htmlElement);\n    }\n    refreshHandle() {\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.refreshHandle();\n        }\n    }\n    getCellPosition() {\n        return this.cellPosition;\n    }\n    isEditing() {\n        return this.editing;\n    }\n    // called by rowRenderer when user navigates via tab key\n    startRowOrCellEdit(key, event = null) {\n        if (!this.cellComp) {\n            return;\n        }\n        if (this.beans.gridOptionsService.get('editType') === 'fullRow') {\n            this.rowCtrl.startRowEditing(key, this);\n        }\n        else {\n            this.startEditing(key, true, event);\n        }\n    }\n    getRowCtrl() {\n        return this.rowCtrl;\n    }\n    getRowPosition() {\n        return {\n            rowIndex: this.cellPosition.rowIndex,\n            rowPinned: this.cellPosition.rowPinned\n        };\n    }\n    updateRangeBordersIfRangeCount() {\n        if (!this.cellComp) {\n            return;\n        }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.updateRangeBordersIfRangeCount();\n        }\n    }\n    onRangeSelectionChanged() {\n        if (!this.cellComp) {\n            return;\n        }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n    isRangeSelectionEnabled() {\n        return this.cellRangeFeature != null;\n    }\n    focusCell(forceBrowserFocus = false) {\n        this.beans.focusService.setFocusedCell({\n            rowIndex: this.getCellPosition().rowIndex,\n            column: this.column,\n            rowPinned: this.rowNode.rowPinned,\n            forceBrowserFocus\n        });\n    }\n    onRowIndexChanged() {\n        // when index changes, this influences items that need the index, so we update the\n        // grid cell so they are working off the new index.\n        this.createCellPosition();\n        // when the index of the row changes, ie means the cell may have lost or gained focus\n        this.onCellFocused();\n        // check range selection\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n    onFirstRightPinnedChanged() {\n        if (!this.cellComp) {\n            return;\n        }\n        const firstRightPinned = this.column.isFirstRightPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);\n    }\n    onLastLeftPinnedChanged() {\n        if (!this.cellComp) {\n            return;\n        }\n        const lastLeftPinned = this.column.isLastLeftPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);\n    }\n    onCellFocused(event) {\n        if (this.beans.gridOptionsService.get('suppressCellFocus')) {\n            return;\n        }\n        const cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);\n        if (!this.cellComp) {\n            if (cellFocused && (event === null || event === void 0 ? void 0 : event.forceBrowserFocus)) {\n                // The cell comp has not been rendered yet, but the browser focus is being forced for this cell\n                // so lets save the event to apply it when setComp is called in the next turn.\n                this.focusEventToRestore = event;\n            }\n            return;\n        }\n        // Clear the saved focus event\n        this.focusEventToRestore = undefined;\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);\n        // see if we need to force browser focus - this can happen if focus is programmatically set\n        if (cellFocused && event && event.forceBrowserFocus) {\n            const focusEl = this.cellComp.getFocusableElement();\n            focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus });\n        }\n        // if another cell was focused, and we are editing, then stop editing\n        const fullRowEdit = this.beans.gridOptionsService.get('editType') === 'fullRow';\n        if (!cellFocused && !fullRowEdit && this.editing) {\n            this.stopRowOrCellEdit();\n        }\n    }\n    createCellPosition() {\n        this.cellPosition = {\n            rowIndex: this.rowNode.rowIndex,\n            rowPinned: makeNull(this.rowNode.rowPinned),\n            column: this.column\n        };\n    }\n    // CSS Classes that only get applied once, they never change\n    applyStaticCssClasses() {\n        this.cellComp.addOrRemoveCssClass(CSS_CELL, true);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);\n        // normal cells fill the height of the row. autoHeight cells have no height to let them\n        // fit the height of content.\n        const autoHeight = this.column.isAutoHeight() == true;\n        this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);\n        this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);\n    }\n    onColumnHover() {\n        if (!this.cellComp) {\n            return;\n        }\n        if (!this.beans.gridOptionsService.get('columnHoverHighlight')) {\n            return;\n        }\n        const isHovered = this.beans.columnHoverService.isHovered(this.column);\n        this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);\n    }\n    onColDefChanged() {\n        var _a, _b;\n        if (!this.cellComp) {\n            return;\n        }\n        const isAutoHeight = this.column.isAutoHeight();\n        if (isAutoHeight !== this.isAutoHeight) {\n            // auto height uses wrappers, so need to destroy\n            (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.refreshCell(this);\n        }\n        const isTooltipEnabled = this.column.isTooltipEnabled();\n        if (isTooltipEnabled) {\n            this.disableTooltipFeature();\n            this.enableTooltipFeature();\n            (_b = this.tooltipFeature) === null || _b === void 0 ? void 0 : _b.setComp(this.eGui);\n        }\n        else {\n            this.disableTooltipFeature();\n        }\n        this.setWrapText();\n        if (!this.editing) {\n            this.refreshOrDestroyCell({ forceRefresh: true, suppressFlash: true });\n        }\n    }\n    setWrapText() {\n        const value = this.column.getColDef().wrapText == true;\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);\n    }\n    dispatchCellContextMenuEvent(event) {\n        const colDef = this.column.getColDef();\n        const cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);\n        this.beans.eventService.dispatchEvent(cellContextMenuEvent);\n        if (colDef.onCellContextMenu) {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => colDef.onCellContextMenu(cellContextMenuEvent), 0);\n        }\n    }\n    getCellRenderer() {\n        return this.cellComp ? this.cellComp.getCellRenderer() : null;\n    }\n    getCellEditor() {\n        return this.cellComp ? this.cellComp.getCellEditor() : null;\n    }\n    destroy() {\n        this.onCellCompAttachedFuncs = [];\n        super.destroy();\n    }\n    createSelectionCheckbox() {\n        const cbSelectionComponent = new CheckboxSelectionComponent();\n        this.beans.context.createBean(cbSelectionComponent);\n        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });\n        // put the checkbox in before the value\n        return cbSelectionComponent;\n    }\n    createDndSource() {\n        const dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.eGui);\n        this.beans.context.createBean(dndSourceComp);\n        return dndSourceComp;\n    }\n    registerRowDragger(customElement, dragStartPixels, suppressVisibilityChange) {\n        // if previously existed, then we are only updating\n        if (this.customRowDragComp) {\n            this.customRowDragComp.setDragElement(customElement, dragStartPixels);\n            return;\n        }\n        const newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);\n        if (newComp) {\n            this.customRowDragComp = newComp;\n            this.addDestroyFunc(() => { this.beans.context.destroyBean(newComp); this.customRowDragComp = null; });\n        }\n    }\n    createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange) {\n        const pagination = this.beans.gridOptionsService.get('pagination');\n        const rowDragManaged = this.beans.gridOptionsService.get('rowDragManaged');\n        const clientSideRowModelActive = this.beans.gridOptionsService.isRowModelType('clientSide');\n        if (rowDragManaged) {\n            // row dragging only available in default row model\n            if (!clientSideRowModelActive) {\n                warnOnce('managed row dragging is only allowed in the Client Side Row Model');\n                return;\n            }\n            if (pagination) {\n                warnOnce('managed row dragging is not possible when doing pagination');\n                return;\n            }\n        }\n        // otherwise (normal case) we are creating a RowDraggingComp for the first time\n        const rowDragComp = new RowDragComp(() => this.value, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);\n        this.beans.context.createBean(rowDragComp);\n        return rowDragComp;\n    }\n}\nCellCtrl.DOM_DATA_KEY_CELL_CTRL = 'cellCtrl';\n","import { BeanStub } from \"../../context/beanStub.mjs\";\nimport { RowNode } from \"../../entities/rowNode.mjs\";\nimport { RowHighlightPosition } from \"../../interfaces/iRowNode.mjs\";\nimport { Events } from \"../../events.mjs\";\nimport { RowContainerType } from \"../../gridBodyComp/rowContainer/rowContainerCtrl.mjs\";\nimport { ModuleNames } from \"../../modules/moduleNames.mjs\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry.mjs\";\nimport { setAriaExpanded, setAriaLabel, setAriaRowIndex, setAriaSelected } from \"../../utils/aria.mjs\";\nimport { isElementChildOfClass } from \"../../utils/dom.mjs\";\nimport { isStopPropagationForAgGrid } from \"../../utils/event.mjs\";\nimport { warnOnce, executeNextVMTurn } from \"../../utils/function.mjs\";\nimport { exists, makeNull } from \"../../utils/generic.mjs\";\nimport { escapeString } from \"../../utils/string.mjs\";\nimport { CellCtrl } from \"../cell/cellCtrl.mjs\";\nimport { RowDragComp } from \"./rowDragComp.mjs\";\nvar RowType;\n(function (RowType) {\n    RowType[\"Normal\"] = \"Normal\";\n    RowType[\"FullWidth\"] = \"FullWidth\";\n    RowType[\"FullWidthLoading\"] = \"FullWidthLoading\";\n    RowType[\"FullWidthGroup\"] = \"FullWidthGroup\";\n    RowType[\"FullWidthDetail\"] = \"FullWidthDetail\";\n})(RowType || (RowType = {}));\nlet instanceIdSequence = 0;\nexport class RowCtrl extends BeanStub {\n    constructor(rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout) {\n        super();\n        this.allRowGuis = [];\n        this.active = true;\n        this.centerCellCtrls = { list: [], map: {} };\n        this.leftCellCtrls = { list: [], map: {} };\n        this.rightCellCtrls = { list: [], map: {} };\n        this.slideInAnimation = {\n            left: false,\n            center: false,\n            right: false,\n            fullWidth: false\n        };\n        this.fadeInAnimation = {\n            left: false,\n            center: false,\n            right: false,\n            fullWidth: false\n        };\n        this.rowDragComps = [];\n        this.lastMouseDownOnDragger = false;\n        this.emptyStyle = {};\n        this.updateColumnListsPending = false;\n        this.rowId = null;\n        this.businessKeySanitised = null;\n        this.beans = beans;\n        this.gridOptionsService = beans.gridOptionsService;\n        this.rowNode = rowNode;\n        this.paginationPage = beans.paginationProxy.getCurrentPage();\n        this.useAnimationFrameForCreate = useAnimationFrameForCreate;\n        this.printLayout = printLayout;\n        this.instanceId = rowNode.id + '-' + instanceIdSequence++;\n        this.rowId = escapeString(rowNode.id);\n        this.initRowBusinessKey();\n        this.rowFocused = beans.focusService.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);\n        this.rowLevel = beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n        this.setRowType();\n        this.setAnimateFlags(animateIn);\n        this.rowStyles = this.processStylesFromGridOptions();\n        // calls to `isFullWidth()` only work after `setRowType` has been called.\n        if (this.isFullWidth() && !this.gridOptionsService.get('suppressCellFocus')) {\n            this.tabIndex = -1;\n        }\n        this.addListeners();\n    }\n    initRowBusinessKey() {\n        this.businessKeyForNodeFunc = this.gridOptionsService.get('getBusinessKeyForNode');\n        this.updateRowBusinessKey();\n    }\n    updateRowBusinessKey() {\n        if (typeof this.businessKeyForNodeFunc !== 'function') {\n            return;\n        }\n        const businessKey = this.businessKeyForNodeFunc(this.rowNode);\n        this.businessKeySanitised = escapeString(businessKey);\n    }\n    getRowId() {\n        return this.rowId;\n    }\n    getRowStyles() {\n        return this.rowStyles;\n    }\n    getTabIndex() {\n        return this.tabIndex;\n    }\n    isSticky() {\n        return this.rowNode.sticky;\n    }\n    getBeans() {\n        return this.beans;\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    setComp(rowComp, element, containerType) {\n        const gui = { rowComp, element, containerType };\n        this.allRowGuis.push(gui);\n        if (containerType === RowContainerType.LEFT) {\n            this.leftGui = gui;\n        }\n        else if (containerType === RowContainerType.RIGHT) {\n            this.rightGui = gui;\n        }\n        else if (containerType === RowContainerType.FULL_WIDTH) {\n            this.fullWidthGui = gui;\n        }\n        else {\n            this.centerGui = gui;\n        }\n        this.initialiseRowComp(gui);\n        // pinned rows render before the main grid body in the SSRM, only fire the event after the main body has rendered.\n        if (this.rowType !== 'FullWidthLoading' && !this.rowNode.rowPinned) {\n            // this is fired within setComp as we know that the component renderer is now trying to render.\n            // linked with the fact the function implementation queues behind requestAnimationFrame should allow\n            // us to be certain that all rendering is done by the time the event fires.\n            this.beans.rowRenderer.dispatchFirstDataRenderedEvent();\n        }\n    }\n    unsetComp(containerType) {\n        this.allRowGuis = this.allRowGuis\n            .filter(rowGui => rowGui.containerType !== containerType);\n        switch (containerType) {\n            case RowContainerType.LEFT:\n                this.leftGui = undefined;\n                break;\n            case RowContainerType.RIGHT:\n                this.rightGui = undefined;\n                break;\n            case RowContainerType.FULL_WIDTH:\n                this.fullWidthGui = undefined;\n                break;\n            case RowContainerType.CENTER:\n                this.centerGui = undefined;\n                break;\n            default:\n        }\n    }\n    isCacheable() {\n        return this.rowType === RowType.FullWidthDetail\n            && this.gridOptionsService.get('keepDetailRows');\n    }\n    setCached(cached) {\n        const displayValue = cached ? 'none' : '';\n        this.allRowGuis.forEach(rg => rg.element.style.display = displayValue);\n    }\n    initialiseRowComp(gui) {\n        const gos = this.gridOptionsService;\n        this.listenOnDomOrder(gui);\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n        this.onRowHeightChanged(gui);\n        this.updateRowIndexes(gui);\n        this.setFocusedClasses(gui);\n        this.setStylesFromGridOptions(false, gui); // no need to calculate styles already set in constructor\n        if (gos.isRowSelection() && this.rowNode.selectable) {\n            this.onRowSelected(gui);\n        }\n        this.updateColumnLists(!this.useAnimationFrameForCreate);\n        const comp = gui.rowComp;\n        const initialRowClasses = this.getInitialRowClasses(gui.containerType);\n        initialRowClasses.forEach(name => comp.addOrRemoveCssClass(name, true));\n        this.executeSlideAndFadeAnimations(gui);\n        if (this.rowNode.group) {\n            setAriaExpanded(gui.element, this.rowNode.expanded == true);\n        }\n        this.setRowCompRowId(comp);\n        this.setRowCompRowBusinessKey(comp);\n        // DOM DATA\n        gos.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, this);\n        this.addDestroyFunc(() => gos.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, null));\n        // adding hover functionality adds listener to this row, so we\n        // do it lazily in an animation frame\n        if (this.useAnimationFrameForCreate) {\n            this.beans.animationFrameService.createTask(this.addHoverFunctionality.bind(this, gui.element), this.rowNode.rowIndex, 'createTasksP2');\n        }\n        else {\n            this.addHoverFunctionality(gui.element);\n        }\n        if (this.isFullWidth()) {\n            this.setupFullWidth(gui);\n        }\n        if (gos.get('rowDragEntireRow')) {\n            this.addRowDraggerToRow(gui);\n        }\n        if (this.useAnimationFrameForCreate) {\n            // the height animation we only want active after the row is alive for 1 second.\n            // this stops the row animation working when rows are initially created. otherwise\n            // auto-height rows get inserted into the dom and resized immediately, which gives\n            // very bad UX (eg 10 rows get inserted, then all 10 expand, look particularly bad\n            // when scrolling). so this makes sure when rows are shown for the first time, they\n            // are resized immediately without animation.\n            this.beans.animationFrameService.addDestroyTask(() => {\n                if (!this.isAlive()) {\n                    return;\n                }\n                gui.rowComp.addOrRemoveCssClass('ag-after-created', true);\n            });\n        }\n        this.executeProcessRowPostCreateFunc();\n    }\n    setRowCompRowBusinessKey(comp) {\n        if (this.businessKeySanitised == null) {\n            return;\n        }\n        comp.setRowBusinessKey(this.businessKeySanitised);\n    }\n    getBusinessKey() {\n        return this.businessKeySanitised;\n    }\n    setRowCompRowId(comp) {\n        this.rowId = escapeString(this.rowNode.id);\n        if (this.rowId == null) {\n            return;\n        }\n        comp.setRowId(this.rowId);\n    }\n    executeSlideAndFadeAnimations(gui) {\n        const { containerType } = gui;\n        const shouldSlide = this.slideInAnimation[containerType];\n        if (shouldSlide) {\n            executeNextVMTurn(() => {\n                this.onTopChanged();\n            });\n            this.slideInAnimation[containerType] = false;\n        }\n        const shouldFade = this.fadeInAnimation[containerType];\n        if (shouldFade) {\n            executeNextVMTurn(() => {\n                gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', false);\n            });\n            this.fadeInAnimation[containerType] = false;\n        }\n    }\n    addRowDraggerToRow(gui) {\n        if (this.gridOptionsService.get('enableRangeSelection')) {\n            warnOnce('Setting `rowDragEntireRow: true` in the gridOptions doesn\\'t work with `enableRangeSelection: true`');\n            return;\n        }\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const rowDragComp = new RowDragComp(() => `1 ${translate('rowDragRow', 'row')}`, this.rowNode, undefined, gui.element, undefined, true);\n        const rowDragBean = this.createBean(rowDragComp, this.beans.context);\n        this.rowDragComps.push(rowDragBean);\n    }\n    setupFullWidth(gui) {\n        const pinned = this.getPinnedForContainer(gui.containerType);\n        const params = this.createFullWidthParams(gui.element, pinned);\n        if (this.rowType == RowType.FullWidthDetail) {\n            if (!ModuleRegistry.__assertRegistered(ModuleNames.MasterDetailModule, \"cell renderer 'agDetailCellRenderer' (for master detail)\", this.beans.context.getGridId())) {\n                return;\n            }\n        }\n        let compDetails;\n        switch (this.rowType) {\n            case RowType.FullWidthDetail:\n                compDetails = this.beans.userComponentFactory.getFullWidthDetailCellRendererDetails(params);\n                break;\n            case RowType.FullWidthGroup:\n                compDetails = this.beans.userComponentFactory.getFullWidthGroupCellRendererDetails(params);\n                break;\n            case RowType.FullWidthLoading:\n                compDetails = this.beans.userComponentFactory.getFullWidthLoadingCellRendererDetails(params);\n                break;\n            default:\n                compDetails = this.beans.userComponentFactory.getFullWidthCellRendererDetails(params);\n                break;\n        }\n        gui.rowComp.showFullWidth(compDetails);\n    }\n    isPrintLayout() {\n        return this.printLayout;\n    }\n    getFullWidthCellRenderer() {\n        var _a, _b;\n        return (_b = (_a = this.fullWidthGui) === null || _a === void 0 ? void 0 : _a.rowComp) === null || _b === void 0 ? void 0 : _b.getFullWidthCellRenderer();\n    }\n    // use by autoWidthCalculator, as it clones the elements\n    getCellElement(column) {\n        const cellCtrl = this.getCellCtrl(column);\n        return cellCtrl ? cellCtrl.getGui() : null;\n    }\n    executeProcessRowPostCreateFunc() {\n        const func = this.gridOptionsService.getCallback('processRowPostCreate');\n        if (!func || !this.areAllContainersReady()) {\n            return;\n        }\n        const params = {\n            // areAllContainersReady asserts that centerGui is not null\n            eRow: this.centerGui.element,\n            ePinnedLeftRow: this.leftGui ? this.leftGui.element : undefined,\n            ePinnedRightRow: this.rightGui ? this.rightGui.element : undefined,\n            node: this.rowNode,\n            rowIndex: this.rowNode.rowIndex,\n            addRenderedRowListener: this.addEventListener.bind(this),\n        };\n        func(params);\n    }\n    areAllContainersReady() {\n        const isLeftReady = !!this.leftGui || !this.beans.columnModel.isPinningLeft();\n        const isCenterReady = !!this.centerGui;\n        const isRightReady = !!this.rightGui || !this.beans.columnModel.isPinningRight();\n        return isLeftReady && isCenterReady && isRightReady;\n    }\n    setRowType() {\n        const isStub = this.rowNode.stub;\n        const isFullWidthCell = this.rowNode.isFullWidthCell();\n        const isDetailCell = this.gridOptionsService.get('masterDetail') && this.rowNode.detail;\n        const pivotMode = this.beans.columnModel.isPivotMode();\n        // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking\n        // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'\n        // so each can be set independently (as a customer complained about footers getting full width, hence\n        // introducing this logic)\n        const isGroupRow = !!this.rowNode.group && !this.rowNode.footer;\n        const isFullWidthGroup = isGroupRow && this.gridOptionsService.isGroupUseEntireRow(pivotMode);\n        if (isStub) {\n            this.rowType = RowType.FullWidthLoading;\n        }\n        else if (isDetailCell) {\n            this.rowType = RowType.FullWidthDetail;\n        }\n        else if (isFullWidthCell) {\n            this.rowType = RowType.FullWidth;\n        }\n        else if (isFullWidthGroup) {\n            this.rowType = RowType.FullWidthGroup;\n        }\n        else {\n            this.rowType = RowType.Normal;\n        }\n    }\n    updateColumnLists(suppressAnimationFrame = false, useFlushSync = false) {\n        if (this.isFullWidth()) {\n            return;\n        }\n        const noAnimation = suppressAnimationFrame\n            || this.gridOptionsService.get('suppressAnimationFrame')\n            || this.printLayout;\n        if (noAnimation) {\n            this.updateColumnListsImpl(useFlushSync);\n            return;\n        }\n        if (this.updateColumnListsPending) {\n            return;\n        }\n        this.beans.animationFrameService.createTask(() => {\n            if (!this.active) {\n                return;\n            }\n            this.updateColumnListsImpl(true);\n        }, this.rowNode.rowIndex, 'createTasksP1');\n        this.updateColumnListsPending = true;\n    }\n    createCellCtrls(prev, cols, pinned = null) {\n        const res = {\n            list: [],\n            map: {}\n        };\n        const addCell = (colInstanceId, cellCtrl) => {\n            res.list.push(cellCtrl);\n            res.map[colInstanceId] = cellCtrl;\n        };\n        cols.forEach(col => {\n            // we use instanceId's rather than colId as it's possible there is a Column with same Id,\n            // but it's referring to a different column instance. Happens a lot with pivot, as pivot col id's are\n            // reused eg pivot_0, pivot_1 etc\n            const colInstanceId = col.getInstanceId();\n            let cellCtrl = prev.map[colInstanceId];\n            if (!cellCtrl) {\n                cellCtrl = new CellCtrl(col, this.rowNode, this.beans, this);\n            }\n            addCell(colInstanceId, cellCtrl);\n        });\n        prev.list.forEach(prevCellCtrl => {\n            const cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;\n            if (cellInResult) {\n                return;\n            }\n            const keepCell = !this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);\n            if (keepCell) {\n                addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);\n                return;\n            }\n            prevCellCtrl.destroy();\n        });\n        return res;\n    }\n    updateColumnListsImpl(useFlushSync) {\n        this.updateColumnListsPending = false;\n        this.createAllCellCtrls();\n        this.setCellCtrls(useFlushSync);\n    }\n    setCellCtrls(useFlushSync) {\n        this.allRowGuis.forEach(item => {\n            const cellControls = this.getCellCtrlsForContainer(item.containerType);\n            item.rowComp.setCellCtrls(cellControls, useFlushSync);\n        });\n    }\n    getCellCtrlsForContainer(containerType) {\n        switch (containerType) {\n            case RowContainerType.LEFT:\n                return this.leftCellCtrls.list;\n            case RowContainerType.RIGHT:\n                return this.rightCellCtrls.list;\n            case RowContainerType.FULL_WIDTH:\n                return [];\n            case RowContainerType.CENTER:\n                return this.centerCellCtrls.list;\n            default:\n                const exhaustiveCheck = containerType;\n                throw new Error(`Unhandled case: ${exhaustiveCheck}`);\n        }\n    }\n    createAllCellCtrls() {\n        const columnModel = this.beans.columnModel;\n        if (this.printLayout) {\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());\n            this.leftCellCtrls = { list: [], map: {} };\n            this.rightCellCtrls = { list: [], map: {} };\n        }\n        else {\n            const centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);\n            const leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);\n            this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, 'left');\n            const rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);\n            this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, 'right');\n        }\n    }\n    isCellEligibleToBeRemoved(cellCtrl, nextContainerPinned) {\n        const REMOVE_CELL = true;\n        const KEEP_CELL = false;\n        // always remove the cell if it's not rendered or if it's in the wrong pinned location\n        const column = cellCtrl.getColumn();\n        if (column.getPinned() != nextContainerPinned) {\n            return REMOVE_CELL;\n        }\n        // we want to try and keep editing and focused cells\n        const editing = cellCtrl.isEditing();\n        const focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());\n        const mightWantToKeepCell = editing || focused;\n        if (mightWantToKeepCell) {\n            const column = cellCtrl.getColumn();\n            const displayedColumns = this.beans.columnModel.getAllDisplayedColumns();\n            const cellStillDisplayed = displayedColumns.indexOf(column) >= 0;\n            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;\n        }\n        return REMOVE_CELL;\n    }\n    getDomOrder() {\n        const isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n        return isEnsureDomOrder || this.gridOptionsService.isDomLayout('print');\n    }\n    listenOnDomOrder(gui) {\n        const listener = () => {\n            gui.rowComp.setDomOrder(this.getDomOrder());\n        };\n        this.addManagedPropertyListener('domLayout', listener);\n        this.addManagedPropertyListener('ensureDomOrder', listener);\n    }\n    setAnimateFlags(animateIn) {\n        if (this.isSticky() || !animateIn) {\n            return;\n        }\n        const oldRowTopExists = exists(this.rowNode.oldRowTop);\n        const pinningLeft = this.beans.columnModel.isPinningLeft();\n        const pinningRight = this.beans.columnModel.isPinningRight();\n        if (oldRowTopExists) {\n            if (this.isFullWidth() && !this.gridOptionsService.get('embedFullWidthRows')) {\n                this.slideInAnimation.fullWidth = true;\n                return;\n            }\n            // if the row had a previous position, we slide it in\n            this.slideInAnimation.center = true;\n            this.slideInAnimation.left = pinningLeft;\n            this.slideInAnimation.right = pinningRight;\n        }\n        else {\n            if (this.isFullWidth() && !this.gridOptionsService.get('embedFullWidthRows')) {\n                this.fadeInAnimation.fullWidth = true;\n                return;\n            }\n            // if the row had no previous position, we fade it in\n            this.fadeInAnimation.center = true;\n            this.fadeInAnimation.left = pinningLeft;\n            this.fadeInAnimation.right = pinningRight;\n        }\n    }\n    isEditing() {\n        return this.editingRow;\n    }\n    stopRowEditing(cancel) {\n        this.stopEditing(cancel);\n    }\n    isFullWidth() {\n        return this.rowType !== RowType.Normal;\n    }\n    getRowType() {\n        return this.rowType;\n    }\n    refreshFullWidth() {\n        // returns 'true' if refresh succeeded\n        const tryRefresh = (gui, pinned) => {\n            if (!gui) {\n                return true;\n            } // no refresh needed\n            const cellRenderer = gui.rowComp.getFullWidthCellRenderer();\n            // no cell renderer, either means comp not yet ready, or comp ready but now reference\n            // to it (happens in react when comp is stateless). if comp not ready, we don't need to\n            // refresh, however we don't know which one, so we refresh to cover the case where it's\n            // react comp without reference so need to force a refresh\n            if (!cellRenderer) {\n                return false;\n            }\n            // no refresh method present, so can't refresh, hard refresh needed\n            if (!cellRenderer.refresh) {\n                return false;\n            }\n            const params = this.createFullWidthParams(gui.element, pinned);\n            const refreshSucceeded = cellRenderer.refresh(params);\n            return refreshSucceeded;\n        };\n        const fullWidthSuccess = tryRefresh(this.fullWidthGui, null);\n        const centerSuccess = tryRefresh(this.centerGui, null);\n        const leftSuccess = tryRefresh(this.leftGui, 'left');\n        const rightSuccess = tryRefresh(this.rightGui, 'right');\n        const allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;\n        return allFullWidthRowsRefreshed;\n    }\n    addListeners() {\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, () => this.onRowHeightChanged());\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, () => this.onRowSelected());\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));\n        if (this.rowNode.detail) {\n            // if the master row node has updated data, we also want to try to refresh the detail row\n            this.addManagedListener(this.rowNode.parent, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));\n        }\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));\n        const eventService = this.beans.eventService;\n        this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocused.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUS_CLEARED, this.onCellFocusCleared.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));\n        this.addDestroyFunc(() => {\n            this.destroyBeans(this.rowDragComps, this.beans.context);\n        });\n        this.addManagedPropertyListeners(['rowDragEntireRow'], () => {\n            const useRowDragEntireRow = this.gridOptionsService.get('rowDragEntireRow');\n            if (useRowDragEntireRow) {\n                this.allRowGuis.forEach(gui => {\n                    this.addRowDraggerToRow(gui);\n                });\n                return;\n            }\n            this.destroyBeans(this.rowDragComps, this.beans.context);\n            this.rowDragComps = [];\n        });\n        this.addListenersForCellComps();\n    }\n    onColumnMoved() {\n        this.updateColumnLists();\n    }\n    addListenersForCellComps() {\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onRowIndexChanged());\n        });\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, event => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onCellChanged(event));\n        });\n    }\n    onRowNodeDataChanged(event) {\n        // if the row is rendered incorrectly, as the requirements for whether this is a FW row have changed, we force re-render this row.\n        const fullWidthChanged = this.isFullWidth() !== !!this.rowNode.isFullWidthCell();\n        if (fullWidthChanged) {\n            this.beans.rowRenderer.redrawRow(this.rowNode);\n            return;\n        }\n        // this bit of logic handles trying to refresh the FW row ctrl, or delegating to removing/recreating it if unsupported.\n        if (this.isFullWidth()) {\n            const refresh = this.refreshFullWidth();\n            if (!refresh) {\n                this.beans.rowRenderer.redrawRow(this.rowNode);\n            }\n            return;\n        }\n        // if this is an update, we want to refresh, as this will allow the user to put in a transition\n        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case\n        // we will want to completely replace the cells\n        this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.refreshCell({\n            suppressFlash: !event.update,\n            newData: !event.update\n        }));\n        // as data has changed update the dom row id attributes\n        this.allRowGuis.forEach(gui => {\n            this.setRowCompRowId(gui.rowComp);\n            this.updateRowBusinessKey();\n            this.setRowCompRowBusinessKey(gui.rowComp);\n        });\n        // check for selected also, as this could be after lazy loading of the row data, in which case\n        // the id might of just gotten set inside the row and the row selected state may of changed\n        // as a result. this is what happens when selected rows are loaded in virtual pagination.\n        // - niall note - since moving to the stub component, this may no longer be true, as replacing\n        // the stub component now replaces the entire row\n        this.onRowSelected();\n        // as data has changed, then the style and class needs to be recomputed\n        this.postProcessCss();\n    }\n    onRowNodeCellChanged() {\n        // as data has changed, then the style and class needs to be recomputed\n        this.postProcessCss();\n    }\n    postProcessCss() {\n        this.setStylesFromGridOptions(true);\n        this.postProcessClassesFromGridOptions();\n        this.postProcessRowClassRules();\n        this.postProcessRowDragging();\n    }\n    onRowNodeHighlightChanged() {\n        const highlighted = this.rowNode.highlighted;\n        this.allRowGuis.forEach(gui => {\n            const aboveOn = highlighted === RowHighlightPosition.Above;\n            const belowOn = highlighted === RowHighlightPosition.Below;\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-above', aboveOn);\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-below', belowOn);\n        });\n    }\n    onRowNodeDraggingChanged() {\n        this.postProcessRowDragging();\n    }\n    postProcessRowDragging() {\n        const dragging = this.rowNode.dragging;\n        this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-dragging', dragging));\n    }\n    updateExpandedCss() {\n        const expandable = this.rowNode.isExpandable();\n        const expanded = this.rowNode.expanded == true;\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-group', expandable);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-expanded', expandable && expanded);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-contracted', expandable && !expanded);\n            setAriaExpanded(gui.element, expandable && expanded);\n        });\n    }\n    onDisplayedColumnsChanged() {\n        // we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and\n        // then set data, and any old valueGetter's (ie from cols that were removed) would still get called.\n        this.updateColumnLists(true);\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n    }\n    onVirtualColumnsChanged() {\n        this.updateColumnLists(false, true);\n    }\n    getRowPosition() {\n        return {\n            rowPinned: makeNull(this.rowNode.rowPinned),\n            rowIndex: this.rowNode.rowIndex\n        };\n    }\n    onKeyboardNavigate(keyboardEvent) {\n        const currentFullWidthComp = this.allRowGuis.find(c => c.element.contains(keyboardEvent.target));\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n        if (!isFullWidthContainerFocused) {\n            return;\n        }\n        const node = this.rowNode;\n        const lastFocusedCell = this.beans.focusService.getFocusedCell();\n        const cellPosition = {\n            rowIndex: node.rowIndex,\n            rowPinned: node.rowPinned,\n            column: (lastFocusedCell && lastFocusedCell.column)\n        };\n        this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);\n        keyboardEvent.preventDefault();\n    }\n    onTabKeyDown(keyboardEvent) {\n        if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) {\n            return;\n        }\n        const currentFullWidthComp = this.allRowGuis.find(c => c.element.contains(keyboardEvent.target));\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n        let nextEl = null;\n        if (!isFullWidthContainerFocused) {\n            nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer, false, keyboardEvent.shiftKey);\n        }\n        if ((this.isFullWidth() && isFullWidthContainerFocused) || !nextEl) {\n            this.beans.navigationService.onTabKeyDown(this, keyboardEvent);\n        }\n    }\n    onFullWidthRowFocused(event) {\n        var _a;\n        const node = this.rowNode;\n        const isFocused = !event ? false : this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;\n        const element = this.fullWidthGui ? this.fullWidthGui.element : (_a = this.centerGui) === null || _a === void 0 ? void 0 : _a.element;\n        if (!element) {\n            return;\n        } // can happen with react ui, comp not yet ready\n        element.classList.toggle('ag-full-width-focus', isFocused);\n        if (isFocused) {\n            // we don't scroll normal rows into view when we focus them, so we don't want\n            // to scroll Full Width rows either.\n            element.focus({ preventScroll: true });\n        }\n    }\n    refreshCell(cellCtrl) {\n        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);\n        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);\n        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);\n        this.updateColumnLists();\n    }\n    removeCellCtrl(prev, cellCtrlToRemove) {\n        const res = {\n            list: [],\n            map: {}\n        };\n        prev.list.forEach(cellCtrl => {\n            if (cellCtrl === cellCtrlToRemove) {\n                return;\n            }\n            res.list.push(cellCtrl);\n            res.map[cellCtrl.getInstanceId()] = cellCtrl;\n        });\n        return res;\n    }\n    onMouseEvent(eventName, mouseEvent) {\n        switch (eventName) {\n            case 'dblclick':\n                this.onRowDblClick(mouseEvent);\n                break;\n            case 'click':\n                this.onRowClick(mouseEvent);\n                break;\n            case 'touchstart':\n            case 'mousedown':\n                this.onRowMouseDown(mouseEvent);\n                break;\n        }\n    }\n    createRowEvent(type, domEvent) {\n        return {\n            type: type,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            rowIndex: this.rowNode.rowIndex,\n            rowPinned: this.rowNode.rowPinned,\n            context: this.gridOptionsService.context,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            event: domEvent\n        };\n    }\n    createRowEventWithSource(type, domEvent) {\n        const event = this.createRowEvent(type, domEvent);\n        // when first developing this, we included the rowComp in the event.\n        // this seems very weird. so when introducing the event types, i left the 'source'\n        // out of the type, and just include the source in the two places where this event\n        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any\n        // users to be using this, as the rowComp isn't an object we expose, so would be\n        // very surprising if a user was using it.\n        event.source = this;\n        return event;\n    }\n    onRowDblClick(mouseEvent) {\n        if (isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        const agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);\n        this.beans.eventService.dispatchEvent(agEvent);\n    }\n    onRowMouseDown(mouseEvent) {\n        this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, 'ag-row-drag', 3);\n        if (!this.isFullWidth()) {\n            return;\n        }\n        const node = this.rowNode;\n        const columnModel = this.beans.columnModel;\n        if (this.beans.rangeService) {\n            this.beans.rangeService.removeAllCellRanges();\n        }\n        this.beans.focusService.setFocusedCell({\n            rowIndex: node.rowIndex,\n            column: columnModel.getAllDisplayedColumns()[0],\n            rowPinned: node.rowPinned,\n            forceBrowserFocus: true\n        });\n    }\n    onRowClick(mouseEvent) {\n        const stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;\n        if (stop) {\n            return;\n        }\n        const agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);\n        this.beans.eventService.dispatchEvent(agEvent);\n        // ctrlKey for windows, metaKey for Apple\n        const isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;\n        const isShiftKey = mouseEvent.shiftKey;\n        // we do not allow selecting the group by clicking, when groupSelectChildren, as the logic to\n        // handle this is broken. to observe, change the logic below and allow groups to be selected.\n        // you will see the group gets selected, then all children get selected, then the grid unselects\n        // the children (as the default behaviour when clicking is to unselect other rows) which results\n        // in the group getting unselected (as all children are unselected). the correct thing would be\n        // to change this, so that children of the selected group are not then subsequently un-selected.\n        const groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n        if (\n        // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,\n        // so return if it's a group row\n        (groupSelectsChildren && this.rowNode.group) ||\n            // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,\n            // and we click it, the selection should not change (ie any currently selected row should stay selected)\n            !this.rowNode.selectable ||\n            // we also don't allow selection of pinned rows\n            this.rowNode.rowPinned ||\n            // if no selection method enabled, do nothing\n            !this.gridOptionsService.isRowSelection() ||\n            // if click selection suppressed, do nothing\n            this.gridOptionsService.get('suppressRowClickSelection')) {\n            return;\n        }\n        const multiSelectOnClick = this.gridOptionsService.get('rowMultiSelectWithClick');\n        const rowDeselectionWithCtrl = !this.gridOptionsService.get('suppressRowDeselection');\n        const source = 'rowClicked';\n        if (this.rowNode.isSelected()) {\n            if (multiSelectOnClick) {\n                this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });\n            }\n            else if (isMultiKey) {\n                if (rowDeselectionWithCtrl) {\n                    this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });\n                }\n            }\n            else {\n                // selected with no multi key, must make sure anything else is unselected\n                this.rowNode.setSelectedParams({ newValue: true, clearSelection: !isShiftKey, rangeSelect: isShiftKey, event: mouseEvent, source });\n            }\n        }\n        else {\n            const clearSelection = multiSelectOnClick ? false : !isMultiKey;\n            this.rowNode.setSelectedParams({ newValue: true, clearSelection: clearSelection, rangeSelect: isShiftKey, event: mouseEvent, source });\n        }\n    }\n    setupDetailRowAutoHeight(eDetailGui) {\n        if (this.rowType !== RowType.FullWidthDetail) {\n            return;\n        }\n        if (!this.gridOptionsService.get('detailRowAutoHeight')) {\n            return;\n        }\n        const checkRowSizeFunc = () => {\n            const clientHeight = eDetailGui.clientHeight;\n            // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n            // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n            // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n            // empty detail grid would still have some styling around it giving at least a few pixels.\n            if (clientHeight != null && clientHeight > 0) {\n                // we do the update in a timeout, to make sure we are not calling from inside the grid\n                // doing another update\n                const updateRowHeightFunc = () => {\n                    this.rowNode.setRowHeight(clientHeight);\n                    if (this.beans.clientSideRowModel) {\n                        this.beans.clientSideRowModel.onRowHeightChanged();\n                    }\n                    else if (this.beans.serverSideRowModel) {\n                        this.beans.serverSideRowModel.onRowHeightChanged();\n                    }\n                };\n                this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);\n            }\n        };\n        const resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);\n        this.addDestroyFunc(resizeObserverDestroyFunc);\n        checkRowSizeFunc();\n    }\n    createFullWidthParams(eRow, pinned) {\n        const params = {\n            fullWidth: true,\n            data: this.rowNode.data,\n            node: this.rowNode,\n            value: this.rowNode.key,\n            valueFormatted: this.rowNode.key,\n            rowIndex: this.rowNode.rowIndex,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n            // these need to be taken out, as part of 'afterAttached' now\n            eGridCell: eRow,\n            eParentOfValue: eRow,\n            pinned: pinned,\n            addRenderedRowListener: this.addEventListener.bind(this),\n            registerRowDragger: (rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) => this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange)\n        };\n        return params;\n    }\n    addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value = '', suppressVisibilityChange) {\n        if (!this.isFullWidth()) {\n            return;\n        }\n        const rowDragComp = new RowDragComp(() => value, this.rowNode, undefined, rowDraggerElement, dragStartPixels, suppressVisibilityChange);\n        this.createManagedBean(rowDragComp, this.beans.context);\n    }\n    onUiLevelChanged() {\n        const newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n        if (this.rowLevel != newLevel) {\n            const classToAdd = 'ag-row-level-' + newLevel;\n            const classToRemove = 'ag-row-level-' + this.rowLevel;\n            this.allRowGuis.forEach(gui => {\n                gui.rowComp.addOrRemoveCssClass(classToAdd, true);\n                gui.rowComp.addOrRemoveCssClass(classToRemove, false);\n            });\n        }\n        this.rowLevel = newLevel;\n    }\n    isFirstRowOnPage() {\n        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();\n    }\n    isLastRowOnPage() {\n        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();\n    }\n    onModelUpdated() {\n        this.refreshFirstAndLastRowStyles();\n    }\n    refreshFirstAndLastRowStyles() {\n        const newFirst = this.isFirstRowOnPage();\n        const newLast = this.isLastRowOnPage();\n        if (this.firstRowOnPage !== newFirst) {\n            this.firstRowOnPage = newFirst;\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-first', newFirst));\n        }\n        if (this.lastRowOnPage !== newLast) {\n            this.lastRowOnPage = newLast;\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-last', newLast));\n        }\n    }\n    stopEditing(cancel = false) {\n        // if we are already stopping row edit, there is\n        // no need to start this process again.\n        if (this.stoppingRowEdit) {\n            return;\n        }\n        const cellControls = this.getAllCellCtrls();\n        const isRowEdit = this.editingRow;\n        this.stoppingRowEdit = true;\n        let fireRowEditEvent = false;\n        for (const ctrl of cellControls) {\n            const valueChanged = ctrl.stopEditing(cancel);\n            if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {\n                fireRowEditEvent = true;\n            }\n        }\n        if (fireRowEditEvent) {\n            const event = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);\n            this.beans.eventService.dispatchEvent(event);\n        }\n        if (isRowEdit) {\n            this.setEditingRow(false);\n        }\n        this.stoppingRowEdit = false;\n    }\n    setInlineEditingCss(editing) {\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass(\"ag-row-inline-editing\", editing);\n            gui.rowComp.addOrRemoveCssClass(\"ag-row-not-inline-editing\", !editing);\n        });\n    }\n    setEditingRow(value) {\n        this.editingRow = value;\n        this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-editing', value));\n        const event = value ?\n            this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED)\n            : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);\n        this.beans.eventService.dispatchEvent(event);\n    }\n    startRowEditing(key = null, sourceRenderedCell = null, event = null) {\n        // don't do it if already editing\n        if (this.editingRow) {\n            return;\n        }\n        const atLeastOneEditing = this.getAllCellCtrls().reduce((prev, cellCtrl) => {\n            const cellStartedEdit = cellCtrl === sourceRenderedCell;\n            if (cellStartedEdit) {\n                cellCtrl.startEditing(key, cellStartedEdit, event);\n            }\n            else {\n                cellCtrl.startEditing(null, cellStartedEdit, event);\n            }\n            if (prev) {\n                return true;\n            }\n            return cellCtrl.isEditing();\n        }, false);\n        if (atLeastOneEditing) {\n            this.setEditingRow(true);\n        }\n    }\n    getAllCellCtrls() {\n        if (this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0) {\n            return this.centerCellCtrls.list;\n        }\n        const res = [...this.centerCellCtrls.list, ...this.leftCellCtrls.list, ...this.rightCellCtrls.list];\n        return res;\n    }\n    postProcessClassesFromGridOptions() {\n        const cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);\n        if (!cssClasses || !cssClasses.length) {\n            return;\n        }\n        cssClasses.forEach(classStr => {\n            this.allRowGuis.forEach(c => c.rowComp.addOrRemoveCssClass(classStr, true));\n        });\n    }\n    postProcessRowClassRules() {\n        this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, (className) => {\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass(className, true));\n        }, (className) => {\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass(className, false));\n        });\n    }\n    setStylesFromGridOptions(updateStyles, gui) {\n        if (updateStyles) {\n            this.rowStyles = this.processStylesFromGridOptions();\n        }\n        this.forEachGui(gui, gui => gui.rowComp.setUserStyles(this.rowStyles));\n    }\n    getPinnedForContainer(rowContainerType) {\n        const pinned = rowContainerType === RowContainerType.LEFT\n            ? 'left'\n            : rowContainerType === RowContainerType.RIGHT\n                ? 'right'\n                : null;\n        return pinned;\n    }\n    getInitialRowClasses(rowContainerType) {\n        const pinned = this.getPinnedForContainer(rowContainerType);\n        const params = {\n            rowNode: this.rowNode,\n            rowFocused: this.rowFocused,\n            fadeRowIn: this.fadeInAnimation[rowContainerType],\n            rowIsEven: this.rowNode.rowIndex % 2 === 0,\n            rowLevel: this.rowLevel,\n            fullWidthRow: this.isFullWidth(),\n            firstRowOnPage: this.isFirstRowOnPage(),\n            lastRowOnPage: this.isLastRowOnPage(),\n            printLayout: this.printLayout,\n            expandable: this.rowNode.isExpandable(),\n            pinned: pinned\n        };\n        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);\n    }\n    processStylesFromGridOptions() {\n        // part 1 - rowStyle\n        const rowStyle = this.gridOptionsService.get('rowStyle');\n        if (rowStyle && typeof rowStyle === 'function') {\n            console.warn('AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');\n            return;\n        }\n        // part 1 - rowStyleFunc\n        const rowStyleFunc = this.gridOptionsService.getCallback('getRowStyle');\n        let rowStyleFuncResult;\n        if (rowStyleFunc) {\n            const params = {\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex\n            };\n            rowStyleFuncResult = rowStyleFunc(params);\n        }\n        if (rowStyleFuncResult || rowStyle) {\n            return Object.assign({}, rowStyle, rowStyleFuncResult);\n        }\n        // Return constant reference for React\n        return this.emptyStyle;\n    }\n    onRowSelected(gui) {\n        // Treat undefined as false, if we pass undefined down it gets treated as toggle class, rather than explicitly\n        // setting the required value\n        const selected = !!this.rowNode.isSelected();\n        this.forEachGui(gui, gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-selected', selected);\n            setAriaSelected(gui.element, selected ? true : undefined);\n            const ariaLabel = this.createAriaLabel();\n            setAriaLabel(gui.element, ariaLabel == null ? '' : ariaLabel);\n        });\n    }\n    createAriaLabel() {\n        const selected = this.rowNode.isSelected();\n        if (selected && this.gridOptionsService.get('suppressRowDeselection')) {\n            return undefined;\n        }\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const label = translate(selected ? 'ariaRowDeselect' : 'ariaRowSelect', `Press SPACE to ${selected ? 'deselect' : 'select'} this row.`);\n        return label;\n    }\n    isUseAnimationFrameForCreate() {\n        return this.useAnimationFrameForCreate;\n    }\n    addHoverFunctionality(eRow) {\n        // because we use animation frames to do this, it's possible the row no longer exists\n        // by the time we get to add it\n        if (!this.active) {\n            return;\n        }\n        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel\n        // like we do for all the other mouse events.\n        // because of the pinning, we cannot simply add / remove the class based on the eRow. we\n        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a\n        // mouse hover, it sets such in the rowNode, and then all three reflect the change as\n        // all are listening for event on the row node.\n        // step 1 - add listener, to set flag on row node\n        this.addManagedListener(eRow, 'mouseenter', () => this.rowNode.onMouseEnter());\n        this.addManagedListener(eRow, 'mouseleave', () => this.rowNode.onMouseLeave());\n        // step 2 - listen for changes on row node (which any eRow can trigger)\n        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, () => {\n            // if hover turned off, we don't add the class. we do this here so that if the application\n            // toggles this property mid way, we remove the hover form the last row, but we stop\n            // adding hovers from that point onwards. Also, do not highlight while dragging elements around.\n            if (!this.beans.dragService.isDragging() &&\n                !this.gridOptionsService.get('suppressRowHoverHighlight')) {\n                eRow.classList.add('ag-row-hover');\n                this.rowNode.setHovered(true);\n            }\n        });\n        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, () => {\n            eRow.classList.remove('ag-row-hover');\n            this.rowNode.setHovered(false);\n        });\n    }\n    // for animation, we don't want to animate entry or exit to a very far away pixel,\n    // otherwise the row would move so fast, it would appear to disappear. so this method\n    // moves the row closer to the viewport if it is far away, so the row slide in / out\n    // at a speed the user can see.\n    roundRowTopToBounds(rowTop) {\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const range = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const minPixel = this.applyPaginationOffset(range.top, true) - 100;\n        const maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;\n        return Math.min(Math.max(minPixel, rowTop), maxPixel);\n    }\n    getFrameworkOverrides() {\n        return this.beans.frameworkOverrides;\n    }\n    forEachGui(gui, callback) {\n        if (gui) {\n            callback(gui);\n        }\n        else {\n            this.allRowGuis.forEach(callback);\n        }\n    }\n    onRowHeightChanged(gui) {\n        // check for exists first - if the user is resetting the row height, then\n        // it will be null (or undefined) momentarily until the next time the flatten\n        // stage is called where the row will then update again with a new height\n        if (this.rowNode.rowHeight == null) {\n            return;\n        }\n        const rowHeight = this.rowNode.rowHeight;\n        const defaultRowHeight = this.beans.environment.getDefaultRowHeight();\n        const isHeightFromFunc = this.gridOptionsService.isGetRowHeightFunction();\n        const heightFromFunc = isHeightFromFunc ? this.gridOptionsService.getRowHeightForNode(this.rowNode).height : undefined;\n        const lineHeight = heightFromFunc ? `${Math.min(defaultRowHeight, heightFromFunc) - 2}px` : undefined;\n        this.forEachGui(gui, gui => {\n            gui.element.style.height = `${rowHeight}px`;\n            // If the row height is coming from a function, this means some rows can\n            // be smaller than the theme had intended. so we set --ag-line-height on\n            // the row, which is picked up by the theme CSS and is used in a calc\n            // for the CSS line-height property, which makes sure the line-height is\n            // not bigger than the row height, otherwise the row text would not fit.\n            // We do not use rowNode.rowHeight here, as this could be the result of autoHeight,\n            // and we found using the autoHeight result causes a loop, where changing the\n            // line-height them impacts the cell height, resulting in a new autoHeight,\n            // resulting in a new line-height and so on loop.\n            // const heightFromFunc = this.gridOptionsService.getRowHeightForNode(this.rowNode).height;\n            if (lineHeight) {\n                gui.element.style.setProperty('--ag-line-height', lineHeight);\n            }\n        });\n    }\n    addEventListener(eventType, listener) {\n        super.addEventListener(eventType, listener);\n    }\n    removeEventListener(eventType, listener) {\n        super.removeEventListener(eventType, listener);\n    }\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    destroyFirstPass() {\n        this.active = false;\n        // why do we have this method? shouldn't everything below be added as a destroy func beside\n        // the corresponding create logic?\n        if (this.gridOptionsService.isAnimateRows()) {\n            this.setupRemoveAnimation();\n        }\n        this.rowNode.setHovered(false);\n        const event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);\n        this.dispatchEvent(event);\n        this.beans.eventService.dispatchEvent(event);\n        super.destroy();\n    }\n    setupRemoveAnimation() {\n        // we don't animate sticky rows\n        if (this.isSticky()) {\n            return;\n        }\n        const rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;\n        if (rowStillVisibleJustNotInViewport) {\n            // if the row is not rendered, but in viewport, it means it has moved,\n            // so we animate the row out. if the new location is very far away,\n            // the animation will be so fast the row will look like it's just disappeared,\n            // so instead we animate to a position just outside the viewport.\n            const rowTop = this.roundRowTopToBounds(this.rowNode.rowTop);\n            this.setRowTop(rowTop);\n        }\n        else {\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', true));\n        }\n    }\n    destroySecondPass() {\n        this.allRowGuis.length = 0;\n        // if we are editing, destroying the row will stop editing\n        this.stopEditing();\n        const destroyCellCtrls = (ctrls) => {\n            ctrls.list.forEach(c => c.destroy());\n            return { list: [], map: {} };\n        };\n        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);\n        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);\n        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);\n    }\n    setFocusedClasses(gui) {\n        this.forEachGui(gui, gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-focus', this.rowFocused);\n            gui.rowComp.addOrRemoveCssClass('ag-row-no-focus', !this.rowFocused);\n        });\n    }\n    onCellFocused() {\n        this.onCellFocusChanged();\n    }\n    onCellFocusCleared() {\n        this.onCellFocusChanged();\n    }\n    onCellFocusChanged() {\n        const rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);\n        if (rowFocused !== this.rowFocused) {\n            this.rowFocused = rowFocused;\n            this.setFocusedClasses();\n        }\n        // if we are editing, then moving the focus out of a row will stop editing\n        if (!rowFocused && this.editingRow) {\n            this.stopEditing(false);\n        }\n    }\n    onPaginationChanged() {\n        const currentPage = this.beans.paginationProxy.getCurrentPage();\n        // it is possible this row is in the new page, but the page number has changed, which means\n        // it needs to reposition itself relative to the new page\n        if (this.paginationPage !== currentPage) {\n            this.paginationPage = currentPage;\n            this.onTopChanged();\n        }\n        this.refreshFirstAndLastRowStyles();\n    }\n    onTopChanged() {\n        this.setRowTop(this.rowNode.rowTop);\n    }\n    onPaginationPixelOffsetChanged() {\n        // the pixel offset is used when calculating rowTop to set on the row DIV\n        this.onTopChanged();\n    }\n    // applies pagination offset, eg if on second page, and page height is 500px, then removes\n    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.\n    // reverse will take the offset away rather than add.\n    applyPaginationOffset(topPx, reverse = false) {\n        if (this.rowNode.isRowPinned() || this.rowNode.sticky) {\n            return topPx;\n        }\n        const pixelOffset = this.beans.paginationProxy.getPixelOffset();\n        const multiplier = reverse ? 1 : -1;\n        return topPx + (pixelOffset * multiplier);\n    }\n    setRowTop(pixels) {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) {\n            return;\n        }\n        // need to make sure rowTop is not null, as this can happen if the node was once\n        // visible (ie parent group was expanded) but is now not visible\n        if (exists(pixels)) {\n            const afterPaginationPixels = this.applyPaginationOffset(pixels);\n            const skipScaling = this.rowNode.isRowPinned() || this.rowNode.sticky;\n            const afterScalingPixels = skipScaling ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n            const topPx = `${afterScalingPixels}px`;\n            this.setRowTopStyle(topPx);\n        }\n    }\n    // the top needs to be set into the DOM element when the element is created, not updated afterwards.\n    // otherwise the transition would not work, as it would be transitioning from zero (the unset value).\n    // for example, suppose a row that is outside the viewport, then user does a filter to remove other rows\n    // and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,\n    // but now is in the viewport) then a new RowComp is created, however it should have it's position initialised\n    // to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation\n    // time, the row would animate down (ie from position zero).\n    getInitialRowTop(rowContainerType) {\n        const suppressRowTransform = this.gridOptionsService.get('suppressRowTransform');\n        return suppressRowTransform ? this.getInitialRowTopShared(rowContainerType) : undefined;\n    }\n    getInitialTransform(rowContainerType) {\n        const suppressRowTransform = this.gridOptionsService.get('suppressRowTransform');\n        return suppressRowTransform ? undefined : `translateY(${this.getInitialRowTopShared(rowContainerType)})`;\n    }\n    getInitialRowTopShared(rowContainerType) {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) {\n            return '';\n        }\n        let rowTop;\n        if (this.isSticky()) {\n            rowTop = this.rowNode.stickyRowTop;\n        }\n        else {\n            // if sliding in, we take the old row top. otherwise we just set the current row top.\n            const pixels = this.slideInAnimation[rowContainerType] ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;\n            const afterPaginationPixels = this.applyPaginationOffset(pixels);\n            // we don't apply scaling if row is pinned\n            rowTop = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n        }\n        return rowTop + 'px';\n    }\n    setRowTopStyle(topPx) {\n        const suppressRowTransform = this.gridOptionsService.get('suppressRowTransform');\n        this.allRowGuis.forEach(gui => suppressRowTransform ?\n            gui.rowComp.setTop(topPx) :\n            gui.rowComp.setTransform(`translateY(${topPx})`));\n    }\n    getRowNode() {\n        return this.rowNode;\n    }\n    getCellCtrl(column) {\n        // first up, check for cell directly linked to this column\n        let res = null;\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.getColumn() == column) {\n                res = cellCtrl;\n            }\n        });\n        if (res != null) {\n            return res;\n        }\n        // second up, if not found, then check for spanned cols.\n        // we do this second (and not at the same time) as this is\n        // more expensive, as spanning cols is a\n        // infrequently used feature so we don't need to do this most\n        // of the time\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {\n                res = cellCtrl;\n            }\n        });\n        return res;\n    }\n    onRowIndexChanged() {\n        // we only bother updating if the rowIndex is present. if it is not present, it means this row\n        // is child of a group node, and the group node was closed, it's the only way to have no row index.\n        // when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!\n        if (this.rowNode.rowIndex != null) {\n            this.onCellFocusChanged();\n            this.updateRowIndexes();\n            this.postProcessCss();\n        }\n    }\n    getRowIndex() {\n        return this.rowNode.getRowIndexString();\n    }\n    updateRowIndexes(gui) {\n        const rowIndexStr = this.rowNode.getRowIndexString();\n        const headerRowCount = this.beans.headerNavigationService.getHeaderRowCount() + this.beans.filterManager.getHeaderRowCount();\n        const rowIsEven = this.rowNode.rowIndex % 2 === 0;\n        const ariaRowIndex = headerRowCount + this.rowNode.rowIndex + 1;\n        this.forEachGui(gui, c => {\n            c.rowComp.setRowIndex(rowIndexStr);\n            c.rowComp.addOrRemoveCssClass('ag-row-even', rowIsEven);\n            c.rowComp.addOrRemoveCssClass('ag-row-odd', !rowIsEven);\n            setAriaRowIndex(c.element, ariaRowIndex);\n        });\n    }\n    // returns the pinned left container, either the normal one, or the embedded full with one if exists\n    getPinnedLeftRowElement() {\n        return this.leftGui ? this.leftGui.element : undefined;\n    }\n    // returns the pinned right container, either the normal one, or the embedded full with one if exists\n    getPinnedRightRowElement() {\n        return this.rightGui ? this.rightGui.element : undefined;\n    }\n    // returns the body container, either the normal one, or the embedded full with one if exists\n    getBodyRowElement() {\n        return this.centerGui ? this.centerGui.element : undefined;\n    }\n    // returns the full width container\n    getFullWidthRowElement() {\n        return this.fullWidthGui ? this.fullWidthGui.element : undefined;\n    }\n}\nRowCtrl.DOM_DATA_KEY_ROW_CTRL = 'renderedRow';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { getCtrlForEventTarget, isStopPropagationForAgGrid, isEventSupported } from \"../../utils/event.mjs\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context.mjs\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl.mjs\";\nimport { isIOSUserAgent } from \"../../utils/browser.mjs\";\nimport { TouchListener } from \"../../widgets/touchListener.mjs\";\nimport { isEventFromPrintableCharacter, isUserSuppressingKeyboardEvent } from \"../../utils/keyboard.mjs\";\nimport { Events } from \"../../events.mjs\";\nimport { KeyCode } from \"../../constants/keyCode.mjs\";\nimport { missingOrEmpty } from \"../../utils/generic.mjs\";\nimport { last } from \"../../utils/array.mjs\";\nimport { normaliseQwertyAzerty } from \"../../utils/keyboard.mjs\";\nimport { CellCtrl } from \"../../rendering/cell/cellCtrl.mjs\";\nexport class RowContainerEventsFeature extends BeanStub {\n    constructor(element) {\n        super();\n        this.element = element;\n    }\n    postConstruct() {\n        this.addKeyboardListeners();\n        this.addMouseListeners();\n        this.mockContextMenuForIPad();\n    }\n    addKeyboardListeners() {\n        const eventName = 'keydown';\n        const listener = this.processKeyboardEvent.bind(this, eventName);\n        this.addManagedListener(this.element, eventName, listener);\n    }\n    addMouseListeners() {\n        const mouseDownEvent = isEventSupported('touchstart') ? 'touchstart' : 'mousedown';\n        const eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', mouseDownEvent];\n        eventNames.forEach(eventName => {\n            const listener = this.processMouseEvent.bind(this, eventName);\n            this.addManagedListener(this.element, eventName, listener);\n        });\n    }\n    processMouseEvent(eventName, mouseEvent) {\n        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) ||\n            isStopPropagationForAgGrid(mouseEvent)) {\n            return;\n        }\n        const rowComp = this.getRowForEvent(mouseEvent);\n        const cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent);\n        if (eventName === \"contextmenu\") {\n            this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);\n        }\n        else {\n            if (cellCtrl) {\n                cellCtrl.onMouseEvent(eventName, mouseEvent);\n            }\n            if (rowComp) {\n                rowComp.onMouseEvent(eventName, mouseEvent);\n            }\n        }\n    }\n    mockContextMenuForIPad() {\n        // we do NOT want this when not in iPad, otherwise we will be doing\n        if (!isIOSUserAgent()) {\n            return;\n        }\n        const touchListener = new TouchListener(this.element);\n        const longTapListener = (event) => {\n            const rowComp = this.getRowForEvent(event.touchEvent);\n            const cellComp = this.mouseEventService.getRenderedCellForEvent(event.touchEvent);\n            this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);\n        };\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n    getRowForEvent(event) {\n        let sourceElement = event.target;\n        while (sourceElement) {\n            const rowCon = this.gridOptionsService.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n            if (rowCon) {\n                return rowCon;\n            }\n            sourceElement = sourceElement.parentElement;\n        }\n        return null;\n    }\n    handleContextMenuMouseEvent(mouseEvent, touchEvent, rowComp, cellCtrl) {\n        const rowNode = rowComp ? rowComp.getRowNode() : null;\n        const column = cellCtrl ? cellCtrl.getColumn() : null;\n        let value = null;\n        if (column) {\n            const event = mouseEvent ? mouseEvent : touchEvent;\n            cellCtrl.dispatchCellContextMenuEvent(event);\n            value = this.valueService.getValue(column, rowNode);\n        }\n        // if user clicked on a cell, anchor to that cell, otherwise anchor to the grid panel\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);\n        }\n    }\n    getControlsForEventTarget(target) {\n        return {\n            cellCtrl: getCtrlForEventTarget(this.gridOptionsService, target, CellCtrl.DOM_DATA_KEY_CELL_CTRL),\n            rowCtrl: getCtrlForEventTarget(this.gridOptionsService, target, RowCtrl.DOM_DATA_KEY_ROW_CTRL)\n        };\n    }\n    processKeyboardEvent(eventName, keyboardEvent) {\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(keyboardEvent.target);\n        if (keyboardEvent.defaultPrevented) {\n            return;\n        }\n        if (cellCtrl) {\n            this.processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent);\n        }\n        else if (rowCtrl && rowCtrl.isFullWidth()) {\n            this.processFullWidthRowKeyboardEvent(rowCtrl, eventName, keyboardEvent);\n        }\n    }\n    processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent) {\n        const rowNode = cellCtrl.getRowNode();\n        const column = cellCtrl.getColumn();\n        const editing = cellCtrl.isEditing();\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, editing);\n        if (gridProcessingAllowed) {\n            if (eventName === 'keydown') {\n                // first see if it's a scroll key, page up / down, home / end etc\n                const wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);\n                // if not a scroll key, then we pass onto cell\n                if (!wasScrollKey) {\n                    cellCtrl.onKeyDown(keyboardEvent);\n                }\n                // perform clipboard and undo / redo operations\n                this.doGridOperations(keyboardEvent, cellCtrl.isEditing());\n                if (isEventFromPrintableCharacter(keyboardEvent)) {\n                    cellCtrl.processCharacter(keyboardEvent);\n                }\n            }\n        }\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n    }\n    processFullWidthRowKeyboardEvent(rowComp, eventName, keyboardEvent) {\n        const rowNode = rowComp.getRowNode();\n        const focusedCell = this.focusService.getFocusedCell();\n        const column = (focusedCell && focusedCell.column);\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, false);\n        if (gridProcessingAllowed) {\n            const key = keyboardEvent.key;\n            if (eventName === 'keydown') {\n                switch (key) {\n                    case KeyCode.PAGE_HOME:\n                    case KeyCode.PAGE_END:\n                    case KeyCode.PAGE_UP:\n                    case KeyCode.PAGE_DOWN:\n                        this.navigationService.handlePageScrollingKey(keyboardEvent, true);\n                        break;\n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        rowComp.onKeyboardNavigate(keyboardEvent);\n                        break;\n                    case KeyCode.TAB:\n                        rowComp.onTabKeyDown(keyboardEvent);\n                        break;\n                    default:\n                }\n            }\n        }\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n    }\n    doGridOperations(keyboardEvent, editing) {\n        // check if ctrl or meta key pressed\n        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {\n            return;\n        }\n        // if the cell the event came from is editing, then we do not\n        // want to do the default shortcut keys, otherwise the editor\n        // (eg a text field) would not be able to do the normal cut/copy/paste\n        if (editing) {\n            return;\n        }\n        // for copy / paste, we don't want to execute when the event\n        // was from a child grid (happens in master detail)\n        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {\n            return;\n        }\n        const keyCode = normaliseQwertyAzerty(keyboardEvent);\n        if (keyCode === KeyCode.A) {\n            return this.onCtrlAndA(keyboardEvent);\n        }\n        if (keyCode === KeyCode.C) {\n            return this.onCtrlAndC(keyboardEvent);\n        }\n        if (keyCode === KeyCode.D) {\n            return this.onCtrlAndD(keyboardEvent);\n        }\n        if (keyCode === KeyCode.V) {\n            return this.onCtrlAndV(keyboardEvent);\n        }\n        if (keyCode === KeyCode.X) {\n            return this.onCtrlAndX(keyboardEvent);\n        }\n        if (keyCode === KeyCode.Y) {\n            return this.onCtrlAndY();\n        }\n        if (keyCode === KeyCode.Z) {\n            return this.onCtrlAndZ(keyboardEvent);\n        }\n    }\n    onCtrlAndA(event) {\n        const { pinnedRowModel, paginationProxy, rangeService } = this;\n        if (rangeService && paginationProxy.isRowsToRender()) {\n            const [isEmptyPinnedTop, isEmptyPinnedBottom] = [\n                pinnedRowModel.isEmpty('top'),\n                pinnedRowModel.isEmpty('bottom')\n            ];\n            const floatingStart = isEmptyPinnedTop ? null : 'top';\n            let floatingEnd;\n            let rowEnd;\n            if (isEmptyPinnedBottom) {\n                floatingEnd = null;\n                rowEnd = this.paginationProxy.getRowCount() - 1;\n            }\n            else {\n                floatingEnd = 'bottom';\n                rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;\n            }\n            const allDisplayedColumns = this.columnModel.getAllDisplayedColumns();\n            if (missingOrEmpty(allDisplayedColumns)) {\n                return;\n            }\n            rangeService.setCellRange({\n                rowStartIndex: 0,\n                rowStartPinned: floatingStart,\n                rowEndIndex: rowEnd,\n                rowEndPinned: floatingEnd,\n                columnStart: allDisplayedColumns[0],\n                columnEnd: last(allDisplayedColumns)\n            });\n        }\n        event.preventDefault();\n    }\n    onCtrlAndC(event) {\n        if (!this.clipboardService || this.gridOptionsService.get('enableCellTextSelection')) {\n            return;\n        }\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n        if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {\n            return;\n        }\n        event.preventDefault();\n        this.clipboardService.copyToClipboard();\n    }\n    onCtrlAndX(event) {\n        if (!this.clipboardService ||\n            this.gridOptionsService.get('enableCellTextSelection') ||\n            this.gridOptionsService.get('suppressCutToClipboard')) {\n            return;\n        }\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n        if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {\n            return;\n        }\n        event.preventDefault();\n        this.clipboardService.cutToClipboard(undefined, 'ui');\n    }\n    onCtrlAndV(event) {\n        const { cellCtrl, rowCtrl } = this.getControlsForEventTarget(event.target);\n        if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {\n            return;\n        }\n        if (this.clipboardService && !this.gridOptionsService.get('suppressClipboardPaste')) {\n            this.clipboardService.pasteFromClipboard();\n        }\n    }\n    onCtrlAndD(event) {\n        if (this.clipboardService && !this.gridOptionsService.get('suppressClipboardPaste')) {\n            this.clipboardService.copyRangeDown();\n        }\n        event.preventDefault();\n    }\n    onCtrlAndZ(event) {\n        if (!this.gridOptionsService.get('undoRedoCellEditing')) {\n            return;\n        }\n        event.preventDefault();\n        if (event.shiftKey) {\n            this.undoRedoService.redo('ui');\n        }\n        else {\n            this.undoRedoService.undo('ui');\n        }\n    }\n    onCtrlAndY() {\n        this.undoRedoService.redo('ui');\n    }\n}\n__decorate([\n    Autowired('mouseEventService')\n], RowContainerEventsFeature.prototype, \"mouseEventService\", void 0);\n__decorate([\n    Autowired('valueService')\n], RowContainerEventsFeature.prototype, \"valueService\", void 0);\n__decorate([\n    Optional('contextMenuFactory')\n], RowContainerEventsFeature.prototype, \"contextMenuFactory\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], RowContainerEventsFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('navigationService')\n], RowContainerEventsFeature.prototype, \"navigationService\", void 0);\n__decorate([\n    Autowired('focusService')\n], RowContainerEventsFeature.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('undoRedoService')\n], RowContainerEventsFeature.prototype, \"undoRedoService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], RowContainerEventsFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], RowContainerEventsFeature.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], RowContainerEventsFeature.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Optional('rangeService')\n], RowContainerEventsFeature.prototype, \"rangeService\", void 0);\n__decorate([\n    Optional('clipboardService')\n], RowContainerEventsFeature.prototype, \"clipboardService\", void 0);\n__decorate([\n    PostConstruct\n], RowContainerEventsFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { getInnerHeight, getInnerWidth } from \"../utils/dom.mjs\";\n// listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\nexport class ViewportSizeFeature extends BeanStub {\n    constructor(centerContainerCtrl) {\n        super();\n        this.centerContainerCtrl = centerContainerCtrl;\n    }\n    postConstruct() {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.listenForResize();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n        this.addManagedPropertyListeners(['alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll'], () => {\n            this.checkViewportAndScrolls();\n        });\n    }\n    listenForResize() {\n        const listener = () => this.onCenterViewportResized();\n        // centerContainer gets horizontal resizes\n        this.centerContainerCtrl.registerViewportResizeListener(listener);\n        // eBodyViewport gets vertical resizes\n        this.gridBodyCtrl.registerBodyViewportResizeListener(listener);\n    }\n    onScrollbarWidthChanged() {\n        this.checkViewportAndScrolls();\n    }\n    onCenterViewportResized() {\n        if (this.centerContainerCtrl.isViewportVisible()) {\n            this.keepPinnedColumnsNarrowerThanViewport();\n            this.checkViewportAndScrolls();\n            const newWidth = this.centerContainerCtrl.getCenterWidth();\n            if (newWidth !== this.centerWidth) {\n                this.centerWidth = newWidth;\n                this.columnModel.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });\n            }\n        }\n        else {\n            this.bodyHeight = 0;\n        }\n    }\n    keepPinnedColumnsNarrowerThanViewport() {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyWidth = getInnerWidth(eBodyViewport);\n        if (isNaN(bodyWidth) || bodyWidth <= 50) {\n            return;\n        }\n        // remove 50px from the bodyWidth to give some margin\n        let columnsToRemove = this.getPinnedColumnsOverflowingViewport(bodyWidth - 50);\n        const processUnpinnedColumns = this.gridOptionsService.getCallback('processUnpinnedColumns');\n        if (!columnsToRemove.length) {\n            return;\n        }\n        if (processUnpinnedColumns) {\n            const params = {\n                columns: columnsToRemove,\n                viewportWidth: bodyWidth\n            };\n            columnsToRemove = processUnpinnedColumns(params);\n        }\n        this.columnModel.setColumnsPinned(columnsToRemove, null, 'viewportSizeFeature');\n    }\n    getPinnedColumnsOverflowingViewport(viewportWidth) {\n        const pinnedRightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const pinnedLeftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const totalPinnedWidth = pinnedRightWidth + pinnedLeftWidth;\n        if (totalPinnedWidth < viewportWidth) {\n            return [];\n        }\n        const pinnedLeftColumns = [...this.columnModel.getDisplayedLeftColumns()];\n        const pinnedRightColumns = [...this.columnModel.getDisplayedRightColumns()];\n        let indexRight = 0;\n        let indexLeft = 0;\n        let totalWidthRemoved = 0;\n        const columnsToRemove = [];\n        let spaceNecessary = (totalPinnedWidth - totalWidthRemoved) - viewportWidth;\n        while ((indexLeft < pinnedLeftColumns.length || indexRight < pinnedRightColumns.length) && spaceNecessary > 0) {\n            if (indexRight < pinnedRightColumns.length) {\n                const currentColumn = pinnedRightColumns[indexRight++];\n                spaceNecessary -= currentColumn.getActualWidth();\n                columnsToRemove.push(currentColumn);\n            }\n            if (indexLeft < pinnedLeftColumns.length && spaceNecessary > 0) {\n                const currentColumn = pinnedLeftColumns[indexLeft++];\n                spaceNecessary -= currentColumn.getActualWidth();\n                columnsToRemove.push(currentColumn);\n            }\n        }\n        return columnsToRemove;\n    }\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n    checkViewportAndScrolls() {\n        // results in updating anything that depends on scroll showing\n        this.updateScrollVisibleService();\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n        this.checkBodyHeight();\n        // check for virtual columns for ColumnController\n        this.onHorizontalViewportChanged();\n        this.gridBodyCtrl.getScrollFeature().checkScrollLeft();\n    }\n    getBodyHeight() {\n        return this.bodyHeight;\n    }\n    checkBodyHeight() {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyHeight = getInnerHeight(eBodyViewport);\n        if (this.bodyHeight !== bodyHeight) {\n            this.bodyHeight = bodyHeight;\n            const event = {\n                type: Events.EVENT_BODY_HEIGHT_CHANGED\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    updateScrollVisibleService() {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateScrollVisibleServiceImpl();\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n    }\n    updateScrollVisibleServiceImpl() {\n        const params = {\n            horizontalScrollShowing: this.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()\n        };\n        this.scrollVisibleService.setScrollsVisible(params);\n    }\n    isHorizontalScrollShowing() {\n        return this.centerContainerCtrl.isHorizontalScrollShowing();\n    }\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\n    onHorizontalViewportChanged() {\n        const scrollWidth = this.centerContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    }\n}\n__decorate([\n    Autowired('ctrlsService')\n], ViewportSizeFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('pinnedWidthService')\n], ViewportSizeFeature.prototype, \"pinnedWidthService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], ViewportSizeFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('scrollVisibleService')\n], ViewportSizeFeature.prototype, \"scrollVisibleService\", void 0);\n__decorate([\n    PostConstruct\n], ViewportSizeFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { setDisplayed, setFixedWidth } from \"../../utils/dom.mjs\";\nexport class SetPinnedLeftWidthFeature extends BeanStub {\n    constructor(element) {\n        super();\n        this.element = element;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));\n    }\n    onPinnedLeftWidthChanged() {\n        const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const displayed = leftWidth > 0;\n        setDisplayed(this.element, displayed);\n        setFixedWidth(this.element, leftWidth);\n    }\n    getWidth() {\n        return this.pinnedWidthService.getPinnedLeftWidth();\n    }\n}\n__decorate([\n    Autowired('pinnedWidthService')\n], SetPinnedLeftWidthFeature.prototype, \"pinnedWidthService\", void 0);\n__decorate([\n    PostConstruct\n], SetPinnedLeftWidthFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { setDisplayed, setFixedWidth } from \"../../utils/dom.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nexport class SetPinnedRightWidthFeature extends BeanStub {\n    constructor(element) {\n        super();\n        this.element = element;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));\n    }\n    onPinnedRightWidthChanged() {\n        const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const displayed = rightWidth > 0;\n        setDisplayed(this.element, displayed);\n        setFixedWidth(this.element, rightWidth);\n    }\n    getWidth() {\n        return this.pinnedWidthService.getPinnedRightWidth();\n    }\n}\n__decorate([\n    Autowired('pinnedWidthService')\n], SetPinnedRightWidthFeature.prototype, \"pinnedWidthService\", void 0);\n__decorate([\n    PostConstruct\n], SetPinnedRightWidthFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nexport class SetHeightFeature extends BeanStub {\n    constructor(eContainer, eViewport) {\n        super();\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));\n    }\n    onHeightChanged() {\n        const height = this.maxDivHeightScaler.getUiContainerHeight();\n        const heightString = height != null ? `${height}px` : ``;\n        this.eContainer.style.height = heightString;\n        if (this.eViewport) {\n            this.eViewport.style.height = heightString;\n        }\n    }\n}\n__decorate([\n    Autowired(\"rowContainerHeightService\")\n], SetHeightFeature.prototype, \"maxDivHeightScaler\", void 0);\n__decorate([\n    PostConstruct\n], SetHeightFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { missing } from \"../../utils/generic.mjs\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context.mjs\";\nexport class DragListenerFeature extends BeanStub {\n    constructor(eContainer) {\n        super();\n        this.eContainer = eContainer;\n    }\n    postConstruct() {\n        if (missing(this.rangeService)) {\n            return;\n        }\n        this.params = {\n            eElement: this.eContainer,\n            onDragStart: this.rangeService.onDragStart.bind(this.rangeService),\n            onDragStop: this.rangeService.onDragStop.bind(this.rangeService),\n            onDragging: this.rangeService.onDragging.bind(this.rangeService)\n        };\n        this.addManagedPropertyListener('enableRangeSelection', (props) => {\n            const isEnabled = props.currentValue;\n            if (isEnabled) {\n                this.enableFeature();\n                return;\n            }\n            this.disableFeature();\n        });\n        this.addDestroyFunc(() => this.disableFeature());\n        const isRangeSelection = this.gridOptionsService.get('enableRangeSelection');\n        if (isRangeSelection) {\n            this.enableFeature();\n        }\n    }\n    enableFeature() {\n        this.dragService.addDragSource(this.params);\n    }\n    disableFeature() {\n        this.dragService.removeDragSource(this.params);\n    }\n}\n__decorate([\n    Optional('rangeService')\n], DragListenerFeature.prototype, \"rangeService\", void 0);\n__decorate([\n    Autowired('dragService')\n], DragListenerFeature.prototype, \"dragService\", void 0);\n__decorate([\n    PostConstruct\n], DragListenerFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nexport class CenterWidthFeature extends BeanStub {\n    constructor(callback, addSpacer = false) {\n        super();\n        this.callback = callback;\n        this.addSpacer = addSpacer;\n    }\n    postConstruct() {\n        const listener = this.setWidth.bind(this);\n        this.addManagedPropertyListener('domLayout', listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);\n        if (this.addSpacer) {\n            this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);\n        }\n        this.setWidth();\n    }\n    setWidth() {\n        const { columnModel } = this;\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n        const centerWidth = columnModel.getBodyContainerWidth();\n        const leftWidth = columnModel.getDisplayedColumnsLeftWidth();\n        const rightWidth = columnModel.getDisplayedColumnsRightWidth();\n        let totalWidth;\n        if (printLayout) {\n            totalWidth = centerWidth + leftWidth + rightWidth;\n        }\n        else {\n            totalWidth = centerWidth;\n            if (this.addSpacer) {\n                const relevantWidth = this.gridOptionsService.get('enableRtl') ? leftWidth : rightWidth;\n                if (relevantWidth === 0 && this.scrollVisibleService.isVerticalScrollShowing()) {\n                    totalWidth += this.gridOptionsService.getScrollbarWidth();\n                }\n            }\n        }\n        this.callback(totalWidth);\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], CenterWidthFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('scrollVisibleService')\n], CenterWidthFeature.prototype, \"scrollVisibleService\", void 0);\n__decorate([\n    PostConstruct\n], CenterWidthFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { RowContainerEventsFeature } from \"./rowContainerEventsFeature.mjs\";\nimport { getInnerWidth, getScrollLeft, isHorizontalScrollShowing, isVisible, setScrollLeft } from \"../../utils/dom.mjs\";\nimport { ViewportSizeFeature } from \"../viewportSizeFeature.mjs\";\nimport { convertToMap } from \"../../utils/map.mjs\";\nimport { SetPinnedLeftWidthFeature } from \"./setPinnedLeftWidthFeature.mjs\";\nimport { SetPinnedRightWidthFeature } from \"./setPinnedRightWidthFeature.mjs\";\nimport { SetHeightFeature } from \"./setHeightFeature.mjs\";\nimport { DragListenerFeature } from \"./dragListenerFeature.mjs\";\nimport { CenterWidthFeature } from \"../centerWidthFeature.mjs\";\nexport var RowContainerName;\n(function (RowContainerName) {\n    RowContainerName[\"LEFT\"] = \"left\";\n    RowContainerName[\"RIGHT\"] = \"right\";\n    RowContainerName[\"CENTER\"] = \"center\";\n    RowContainerName[\"FULL_WIDTH\"] = \"fullWidth\";\n    RowContainerName[\"TOP_LEFT\"] = \"topLeft\";\n    RowContainerName[\"TOP_RIGHT\"] = \"topRight\";\n    RowContainerName[\"TOP_CENTER\"] = \"topCenter\";\n    RowContainerName[\"TOP_FULL_WIDTH\"] = \"topFullWidth\";\n    RowContainerName[\"STICKY_TOP_LEFT\"] = \"stickyTopLeft\";\n    RowContainerName[\"STICKY_TOP_RIGHT\"] = \"stickyTopRight\";\n    RowContainerName[\"STICKY_TOP_CENTER\"] = \"stickyTopCenter\";\n    RowContainerName[\"STICKY_TOP_FULL_WIDTH\"] = \"stickyTopFullWidth\";\n    RowContainerName[\"BOTTOM_LEFT\"] = \"bottomLeft\";\n    RowContainerName[\"BOTTOM_RIGHT\"] = \"bottomRight\";\n    RowContainerName[\"BOTTOM_CENTER\"] = \"bottomCenter\";\n    RowContainerName[\"BOTTOM_FULL_WIDTH\"] = \"bottomFullWidth\";\n})(RowContainerName || (RowContainerName = {}));\nexport var RowContainerType;\n(function (RowContainerType) {\n    RowContainerType[\"LEFT\"] = \"left\";\n    RowContainerType[\"RIGHT\"] = \"right\";\n    RowContainerType[\"CENTER\"] = \"center\";\n    RowContainerType[\"FULL_WIDTH\"] = \"fullWidth\";\n})(RowContainerType || (RowContainerType = {}));\nexport function getRowContainerTypeForName(name) {\n    switch (name) {\n        case RowContainerName.CENTER:\n        case RowContainerName.TOP_CENTER:\n        case RowContainerName.STICKY_TOP_CENTER:\n        case RowContainerName.BOTTOM_CENTER:\n            return RowContainerType.CENTER;\n        case RowContainerName.LEFT:\n        case RowContainerName.TOP_LEFT:\n        case RowContainerName.STICKY_TOP_LEFT:\n        case RowContainerName.BOTTOM_LEFT:\n            return RowContainerType.LEFT;\n        case RowContainerName.RIGHT:\n        case RowContainerName.TOP_RIGHT:\n        case RowContainerName.STICKY_TOP_RIGHT:\n        case RowContainerName.BOTTOM_RIGHT:\n            return RowContainerType.RIGHT;\n        case RowContainerName.FULL_WIDTH:\n        case RowContainerName.TOP_FULL_WIDTH:\n        case RowContainerName.STICKY_TOP_FULL_WIDTH:\n        case RowContainerName.BOTTOM_FULL_WIDTH:\n            return RowContainerType.FULL_WIDTH;\n        default:\n            throw Error('Invalid Row Container Type');\n    }\n}\nconst ContainerCssClasses = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-container'],\n    [RowContainerName.LEFT, 'ag-pinned-left-cols-container'],\n    [RowContainerName.RIGHT, 'ag-pinned-right-cols-container'],\n    [RowContainerName.FULL_WIDTH, 'ag-full-width-container'],\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-container'],\n    [RowContainerName.TOP_LEFT, 'ag-pinned-left-floating-top'],\n    [RowContainerName.TOP_RIGHT, 'ag-pinned-right-floating-top'],\n    [RowContainerName.TOP_FULL_WIDTH, 'ag-floating-top-full-width-container'],\n    [RowContainerName.STICKY_TOP_CENTER, 'ag-sticky-top-container'],\n    [RowContainerName.STICKY_TOP_LEFT, 'ag-pinned-left-sticky-top'],\n    [RowContainerName.STICKY_TOP_RIGHT, 'ag-pinned-right-sticky-top'],\n    [RowContainerName.STICKY_TOP_FULL_WIDTH, 'ag-sticky-top-full-width-container'],\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-container'],\n    [RowContainerName.BOTTOM_LEFT, 'ag-pinned-left-floating-bottom'],\n    [RowContainerName.BOTTOM_RIGHT, 'ag-pinned-right-floating-bottom'],\n    [RowContainerName.BOTTOM_FULL_WIDTH, 'ag-floating-bottom-full-width-container'],\n]);\nconst ViewportCssClasses = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-viewport'],\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-viewport'],\n    [RowContainerName.STICKY_TOP_CENTER, 'ag-sticky-top-viewport'],\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-viewport'],\n]);\nexport class RowContainerCtrl extends BeanStub {\n    constructor(name) {\n        super();\n        this.visible = true;\n        // Maintaining a constant reference enables optimization in React.\n        this.EMPTY_CTRLS = [];\n        this.name = name;\n        this.isFullWithContainer =\n            this.name === RowContainerName.TOP_FULL_WIDTH\n                || this.name === RowContainerName.STICKY_TOP_FULL_WIDTH\n                || this.name === RowContainerName.BOTTOM_FULL_WIDTH\n                || this.name === RowContainerName.FULL_WIDTH;\n    }\n    static getRowContainerCssClasses(name) {\n        const containerClass = ContainerCssClasses.get(name);\n        const viewportClass = ViewportCssClasses.get(name);\n        return { container: containerClass, viewport: viewportClass };\n    }\n    static getPinned(name) {\n        switch (name) {\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.STICKY_TOP_LEFT:\n            case RowContainerName.LEFT:\n                return 'left';\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.STICKY_TOP_RIGHT:\n            case RowContainerName.RIGHT:\n                return 'right';\n            default:\n                return null;\n        }\n    }\n    postConstruct() {\n        this.enableRtl = this.gridOptionsService.get('enableRtl');\n        this.forContainers([RowContainerName.CENTER], () => this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this)));\n    }\n    registerWithCtrlsService() {\n        switch (this.name) {\n            case RowContainerName.CENTER:\n                this.ctrlsService.registerCenterRowContainerCtrl(this);\n                break;\n            case RowContainerName.LEFT:\n                this.ctrlsService.registerLeftRowContainerCtrl(this);\n                break;\n            case RowContainerName.RIGHT:\n                this.ctrlsService.registerRightRowContainerCtrl(this);\n                break;\n            case RowContainerName.TOP_CENTER:\n                this.ctrlsService.registerTopCenterRowContainerCtrl(this);\n                break;\n            case RowContainerName.TOP_LEFT:\n                this.ctrlsService.registerTopLeftRowContainerCon(this);\n                break;\n            case RowContainerName.TOP_RIGHT:\n                this.ctrlsService.registerTopRightRowContainerCtrl(this);\n                break;\n            case RowContainerName.STICKY_TOP_CENTER:\n                this.ctrlsService.registerStickyTopCenterRowContainerCtrl(this);\n                break;\n            case RowContainerName.STICKY_TOP_LEFT:\n                this.ctrlsService.registerStickyTopLeftRowContainerCon(this);\n                break;\n            case RowContainerName.STICKY_TOP_RIGHT:\n                this.ctrlsService.registerStickyTopRightRowContainerCtrl(this);\n                break;\n            case RowContainerName.BOTTOM_CENTER:\n                this.ctrlsService.registerBottomCenterRowContainerCtrl(this);\n                break;\n            case RowContainerName.BOTTOM_LEFT:\n                this.ctrlsService.registerBottomLeftRowContainerCtrl(this);\n                break;\n            case RowContainerName.BOTTOM_RIGHT:\n                this.ctrlsService.registerBottomRightRowContainerCtrl(this);\n                break;\n        }\n    }\n    forContainers(names, callback) {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n    getContainerElement() {\n        return this.eContainer;\n    }\n    getViewportSizeFeature() {\n        return this.viewportSizeFeature;\n    }\n    setComp(view, eContainer, eViewport) {\n        this.comp = view;\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\n        this.addPreventScrollWhileDragging();\n        this.listenOnDomOrder();\n        this.stopHScrollOnPinnedRows();\n        const allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];\n        const allStickyTopNoFW = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT];\n        const allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];\n        const allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];\n        const allNoFW = [...allTopNoFW, ...allBottomNoFW, ...allMiddleNoFW, ...allStickyTopNoFW];\n        const allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];\n        const allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER];\n        const allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT, RowContainerName.STICKY_TOP_LEFT];\n        const allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT, RowContainerName.STICKY_TOP_RIGHT];\n        this.forContainers(allLeft, () => {\n            this.pinnedWidthFeature = this.createManagedBean(new SetPinnedLeftWidthFeature(this.eContainer));\n            this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, () => this.onPinnedWidthChanged());\n        });\n        this.forContainers(allRight, () => {\n            this.pinnedWidthFeature = this.createManagedBean(new SetPinnedRightWidthFeature(this.eContainer));\n            this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, () => this.onPinnedWidthChanged());\n        });\n        this.forContainers(allMiddle, () => this.createManagedBean(new SetHeightFeature(this.eContainer, this.name === RowContainerName.CENTER ? eViewport : undefined)));\n        this.forContainers(allNoFW, () => this.createManagedBean(new DragListenerFeature(this.eContainer)));\n        this.forContainers(allCenter, () => this.createManagedBean(new CenterWidthFeature(width => this.comp.setContainerWidth(`${width}px`))));\n        this.addListeners();\n        this.registerWithCtrlsService();\n    }\n    addListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, () => this.onDisplayedColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, () => this.onDisplayedColumnsWidthChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, (params) => this.onDisplayedRowsChanged(params.afterScroll));\n        this.onDisplayedColumnsChanged();\n        this.onDisplayedColumnsWidthChanged();\n        this.onDisplayedRowsChanged();\n    }\n    listenOnDomOrder() {\n        // sticky section must show rows in set order\n        const allStickyContainers = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT, RowContainerName.STICKY_TOP_FULL_WIDTH];\n        const isStickContainer = allStickyContainers.indexOf(this.name) >= 0;\n        if (isStickContainer) {\n            this.comp.setDomOrder(true);\n            return;\n        }\n        const listener = () => {\n            const isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n            const isPrintLayout = this.gridOptionsService.isDomLayout('print');\n            this.comp.setDomOrder(isEnsureDomOrder || isPrintLayout);\n        };\n        this.addManagedPropertyListener('domLayout', listener);\n        listener();\n    }\n    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can\n    // scroll the column into view. we do not want this, the pinned sections should never scroll.\n    // so we listen to scrolls on these containers and reset the scroll if we find one.\n    stopHScrollOnPinnedRows() {\n        this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER], () => {\n            const resetScrollLeft = () => this.eViewport.scrollLeft = 0;\n            this.addManagedListener(this.eViewport, 'scroll', resetScrollLeft);\n        });\n    }\n    onDisplayedColumnsChanged() {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n    onDisplayedColumnsWidthChanged() {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n    // this methods prevents the grid views from being scrolled while the dragService is being used\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\n    addPreventScrollWhileDragging() {\n        const preventScroll = (e) => {\n            if (this.dragService.isDragging()) {\n                if (e.cancelable) {\n                    e.preventDefault();\n                }\n            }\n        };\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\n    }\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged\n    onHorizontalViewportChanged(afterScroll = false) {\n        const scrollWidth = this.getCenterWidth();\n        const scrollPosition = this.getCenterViewportScrollLeft();\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition, afterScroll);\n    }\n    getCenterWidth() {\n        return getInnerWidth(this.eViewport);\n    }\n    getCenterViewportScrollLeft() {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n    registerViewportResizeListener(listener) {\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n    isViewportVisible() {\n        return isVisible(this.eViewport);\n    }\n    getViewportScrollLeft() {\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n    isHorizontalScrollShowing() {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsService.get('alwaysShowHorizontalScroll');\n        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);\n    }\n    getViewportElement() {\n        return this.eViewport;\n    }\n    setContainerTranslateX(amount) {\n        this.eContainer.style.transform = `translateX(${amount}px)`;\n    }\n    getHScrollPosition() {\n        const res = {\n            left: this.eViewport.scrollLeft,\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth\n        };\n        return res;\n    }\n    setCenterViewportScrollLeft(value) {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        setScrollLeft(this.eViewport, value, this.enableRtl);\n    }\n    isContainerVisible() {\n        const pinned = RowContainerCtrl.getPinned(this.name);\n        return !pinned || (!!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0);\n    }\n    onPinnedWidthChanged() {\n        const visible = this.isContainerVisible();\n        if (this.visible != visible) {\n            this.visible = visible;\n            this.onDisplayedRowsChanged();\n        }\n    }\n    onDisplayedRowsChanged(useFlushSync = false) {\n        if (this.visible) {\n            const printLayout = this.gridOptionsService.isDomLayout('print');\n            const embedFullWidthRows = this.gridOptionsService.get('embedFullWidthRows');\n            const embedFW = embedFullWidthRows || printLayout;\n            // this just justifies if the ctrl is in the correct place, this will be fed with zombie rows by the\n            // row renderer, so should not block them as they still need to animate -  the row renderer\n            // will clean these up when they finish animating\n            const doesRowMatch = (rowCtrl) => {\n                const fullWidthRow = rowCtrl.isFullWidth();\n                const match = this.isFullWithContainer ?\n                    !embedFW && fullWidthRow\n                    : embedFW || !fullWidthRow;\n                return match;\n            };\n            // this list contains either all pinned top, center or pinned bottom rows\n            // this filters out rows not for this container, eg if it's a full with row, but we are not full with container\n            const rowsThisContainer = this.getRowCtrls().filter(doesRowMatch);\n            this.comp.setRowCtrls(rowsThisContainer, useFlushSync);\n        }\n        else {\n            this.comp.setRowCtrls(this.EMPTY_CTRLS, false);\n        }\n    }\n    getRowCtrls() {\n        switch (this.name) {\n            case RowContainerName.TOP_CENTER:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.TOP_FULL_WIDTH:\n                return this.rowRenderer.getTopRowCtrls();\n            case RowContainerName.STICKY_TOP_CENTER:\n            case RowContainerName.STICKY_TOP_LEFT:\n            case RowContainerName.STICKY_TOP_RIGHT:\n            case RowContainerName.STICKY_TOP_FULL_WIDTH:\n                return this.rowRenderer.getStickyTopRowCtrls();\n            case RowContainerName.BOTTOM_CENTER:\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.BOTTOM_FULL_WIDTH:\n                return this.rowRenderer.getBottomRowCtrls();\n            default:\n                return this.rowRenderer.getCentreRowCtrls();\n        }\n    }\n}\n__decorate([\n    Autowired('scrollVisibleService')\n], RowContainerCtrl.prototype, \"scrollVisibleService\", void 0);\n__decorate([\n    Autowired('dragService')\n], RowContainerCtrl.prototype, \"dragService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], RowContainerCtrl.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], RowContainerCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('resizeObserverService')\n], RowContainerCtrl.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Autowired('animationFrameService')\n], RowContainerCtrl.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], RowContainerCtrl.prototype, \"rowRenderer\", void 0);\n__decorate([\n    PostConstruct\n], RowContainerCtrl.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Optional, PostConstruct } from '../context/context.mjs';\nimport { LayoutCssClasses } from \"../styling/layoutFeature.mjs\";\nimport { setAriaColCount, setAriaMultiSelectable, setAriaRowCount } from '../utils/aria.mjs';\nimport { Component } from '../widgets/component.mjs';\nimport { RefSelector } from '../widgets/componentAnnotations.mjs';\nimport { CSS_CLASS_FORCE_VERTICAL_SCROLL, GridBodyCtrl, RowAnimationCssClasses } from \"./gridBodyCtrl.mjs\";\nimport { RowContainerName } from \"./rowContainer/rowContainerCtrl.mjs\";\nconst GRID_BODY_TEMPLATE = /* html */ `<div class=\"ag-root ag-unselectable\" role=\"treegrid\">\n        <ag-header-root ref=\"gridHeader\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"${RowContainerName.TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"${RowContainerName.TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"${RowContainerName.TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"${RowContainerName.TOP_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-body\" ref=\"eBody\" role=\"presentation\">\n            <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n                <ag-row-container ref=\"leftContainer\" name=\"${RowContainerName.LEFT}\"></ag-row-container>\n                <ag-row-container ref=\"centerContainer\" name=\"${RowContainerName.CENTER}\"></ag-row-container>\n                <ag-row-container ref=\"rightContainer\" name=\"${RowContainerName.RIGHT}\"></ag-row-container>\n                <ag-row-container ref=\"fullWidthContainer\" name=\"${RowContainerName.FULL_WIDTH}\"></ag-row-container>\n            </div>\n            <ag-fake-vertical-scroll></ag-fake-vertical-scroll>\n        </div>\n        <div class=\"ag-sticky-top\" ref=\"eStickyTop\" role=\"presentation\">\n            <ag-row-container ref=\"stickyTopLeftContainer\" name=\"${RowContainerName.STICKY_TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"stickyTopCenterContainer\" name=\"${RowContainerName.STICKY_TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"stickyTopRightContainer\" name=\"${RowContainerName.STICKY_TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"stickyTopFullWidthContainer\" name=\"${RowContainerName.STICKY_TOP_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"${RowContainerName.BOTTOM_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"${RowContainerName.BOTTOM_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"${RowContainerName.BOTTOM_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"${RowContainerName.BOTTOM_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>`;\nexport class GridBodyComp extends Component {\n    constructor() {\n        super(GRID_BODY_TEMPLATE);\n    }\n    init() {\n        const setHeight = (height, element) => {\n            const heightString = `${height}px`;\n            element.style.minHeight = heightString;\n            element.style.height = heightString;\n        };\n        const compProxy = {\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) => this.setRowAnimationCssOnBodyViewport(cssClass, animate),\n            setColumnCount: count => setAriaColCount(this.getGui(), count),\n            setRowCount: count => setAriaRowCount(this.getGui(), count),\n            setTopHeight: height => setHeight(height, this.eTop),\n            setBottomHeight: height => setHeight(height, this.eBottom),\n            setTopDisplay: display => this.eTop.style.display = display,\n            setBottomDisplay: display => this.eBottom.style.display = display,\n            setStickyTopHeight: height => this.eStickyTop.style.height = height,\n            setStickyTopTop: top => this.eStickyTop.style.top = top,\n            setStickyTopWidth: width => this.eStickyTop.style.width = width,\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(cssClass, flag),\n            updateLayoutClasses: (cssClass, params) => {\n                const classLists = [\n                    this.eBodyViewport.classList,\n                    this.eBody.classList\n                ];\n                classLists.forEach(classList => {\n                    classList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                    classList.toggle(LayoutCssClasses.NORMAL, params.normal);\n                    classList.toggle(LayoutCssClasses.PRINT, params.print);\n                });\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n            },\n            setAlwaysVerticalScrollClass: (cssClass, on) => this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eBodyViewport, listener);\n                this.addDestroyFunc(() => unsubscribeFromResize());\n            },\n            setPinnedTopBottomOverflowY: overflow => this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow,\n            setCellSelectableCss: (cssClass, selectable) => {\n                [this.eTop, this.eBodyViewport, this.eBottom]\n                    .forEach(ct => ct.classList.toggle(cssClass, selectable));\n            },\n            setBodyViewportWidth: width => this.eBodyViewport.style.width = width\n        };\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\n        this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom, this.eStickyTop);\n        if (this.rangeService && this.gridOptionsService.get('enableRangeSelection') || this.gridOptionsService.get('rowSelection') === 'multiple') {\n            setAriaMultiSelectable(this.getGui(), true);\n        }\n    }\n    setRowAnimationCssOnBodyViewport(cssClass, animateRows) {\n        const bodyViewportClassList = this.eBodyViewport.classList;\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);\n    }\n    getFloatingTopBottom() {\n        return [this.eTop, this.eBottom];\n    }\n}\n__decorate([\n    Autowired('resizeObserverService')\n], GridBodyComp.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Optional('rangeService')\n], GridBodyComp.prototype, \"rangeService\", void 0);\n__decorate([\n    RefSelector('eBodyViewport')\n], GridBodyComp.prototype, \"eBodyViewport\", void 0);\n__decorate([\n    RefSelector('eStickyTop')\n], GridBodyComp.prototype, \"eStickyTop\", void 0);\n__decorate([\n    RefSelector('eTop')\n], GridBodyComp.prototype, \"eTop\", void 0);\n__decorate([\n    RefSelector('eBottom')\n], GridBodyComp.prototype, \"eBottom\", void 0);\n__decorate([\n    RefSelector('gridHeader')\n], GridBodyComp.prototype, \"headerRootComp\", void 0);\n__decorate([\n    RefSelector('eBody')\n], GridBodyComp.prototype, \"eBody\", void 0);\n__decorate([\n    PostConstruct\n], GridBodyComp.prototype, \"init\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Events } from \"../events.mjs\";\nlet ScrollVisibleService = class ScrollVisibleService extends BeanStub {\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n    }\n    onDisplayedColumnsChanged() {\n        this.update();\n    }\n    onDisplayedColumnsWidthChanged() {\n        this.update();\n    }\n    update() {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateImpl();\n        setTimeout(this.updateImpl.bind(this), 500);\n    }\n    updateImpl() {\n        const centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();\n        if (!centerRowCtrl) {\n            return;\n        }\n        const params = {\n            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.isVerticalScrollShowing()\n        };\n        this.setScrollsVisible(params);\n    }\n    setScrollsVisible(params) {\n        const atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing ||\n            this.verticalScrollShowing !== params.verticalScrollShowing;\n        if (atLeastOneDifferent) {\n            this.horizontalScrollShowing = params.horizontalScrollShowing;\n            this.verticalScrollShowing = params.verticalScrollShowing;\n            const event = {\n                type: Events.EVENT_SCROLL_VISIBILITY_CHANGED\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    // used by pagination service - to know page height\n    isHorizontalScrollShowing() {\n        return this.horizontalScrollShowing;\n    }\n    // used by header container\n    isVerticalScrollShowing() {\n        return this.verticalScrollShowing;\n    }\n};\n__decorate([\n    Autowired('ctrlsService')\n], ScrollVisibleService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], ScrollVisibleService.prototype, \"postConstruct\", null);\nScrollVisibleService = __decorate([\n    Bean('scrollVisibleService')\n], ScrollVisibleService);\nexport { ScrollVisibleService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar MouseEventService_1;\nimport { Bean } from \"../context/context.mjs\";\nimport { Autowired } from \"../context/context.mjs\";\nimport { NumberSequence } from '../utils/index.mjs';\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { getCtrlForEventTarget } from \"../utils/event.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl.mjs\";\nlet MouseEventService = MouseEventService_1 = class MouseEventService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();\n    }\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    stampTopLevelGridCompWithGridInstance(eGridDiv) {\n        eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;\n    }\n    getRenderedCellForEvent(event) {\n        return getCtrlForEventTarget(this.gridOptionsService, event.target, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    }\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    isEventFromThisGrid(event) {\n        const res = this.isElementInThisGrid(event.target);\n        return res;\n    }\n    isElementInThisGrid(element) {\n        let pointer = element;\n        while (pointer) {\n            const instanceId = pointer[MouseEventService_1.GRID_DOM_KEY];\n            if (exists(instanceId)) {\n                const eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n            pointer = pointer.parentElement;\n        }\n        return false;\n    }\n    getCellPositionForEvent(event) {\n        const cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    }\n    getNormalisedPosition(event) {\n        const gridPanelHasScrolls = this.gridOptionsService.isDomLayout('normal');\n        const e = event;\n        let x;\n        let y;\n        if (e.clientX != null || e.clientY != null) {\n            x = e.clientX;\n            y = e.clientY;\n        }\n        else {\n            x = e.x;\n            y = e.y;\n        }\n        if (gridPanelHasScrolls) {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            const vRange = gridBodyCon.getScrollFeature().getVScrollPosition();\n            const hRange = gridBodyCon.getScrollFeature().getHScrollPosition();\n            x += hRange.left;\n            y += vRange.top;\n        }\n        return { x, y };\n    }\n};\nMouseEventService.gridInstanceSequence = new NumberSequence();\nMouseEventService.GRID_DOM_KEY = '__ag_grid_instance';\n__decorate([\n    Autowired('ctrlsService')\n], MouseEventService.prototype, \"ctrlsService\", void 0);\nMouseEventService = MouseEventService_1 = __decorate([\n    Bean('mouseEventService')\n], MouseEventService);\nexport { MouseEventService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { exists, missing } from \"../utils/generic.mjs\";\nimport { last } from \"../utils/array.mjs\";\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { CellCtrl } from \"../rendering/cell/cellCtrl.mjs\";\nimport { RowCtrl } from \"../rendering/row/rowCtrl.mjs\";\nimport { warnOnce, throttle } from \"../utils/function.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nlet NavigationService = class NavigationService extends BeanStub {\n    constructor() {\n        super();\n        this.onPageDown = throttle(this.onPageDown, 100);\n        this.onPageUp = throttle(this.onPageUp, 100);\n    }\n    postConstruct() {\n        this.ctrlsService.whenReady(p => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n    handlePageScrollingKey(event, fromFullWidth = false) {\n        const key = event.key;\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey || event.metaKey;\n        const rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;\n        // home and end can be processed without knowing the currently selected cell, this can occur for full width rows.\n        const currentCell = this.mouseEventService.getCellPositionForEvent(event);\n        let processed = false;\n        switch (key) {\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // handle home and end when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onHomeOrEndKey(key);\n                    processed = true;\n                }\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!currentCell) {\n                    return false;\n                }\n                // handle when ctrl is pressed only, if shift is pressed\n                // it will be handled by the rangeService\n                if (ctrl && !alt && !rangeServiceShouldHandleShift) {\n                    this.onCtrlUpDownLeftRight(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    processed = this.handlePageUpDown(key, currentCell, fromFullWidth);\n                }\n                break;\n        }\n        if (processed) {\n            event.preventDefault();\n        }\n        return processed;\n    }\n    handlePageUpDown(key, currentCell, fromFullWidth) {\n        if (fromFullWidth) {\n            currentCell = this.focusService.getFocusedCell();\n        }\n        if (!currentCell) {\n            return false;\n        }\n        if (key === KeyCode.PAGE_UP) {\n            this.onPageUp(currentCell);\n        }\n        else {\n            this.onPageDown(currentCell);\n        }\n        return true;\n    }\n    navigateTo(navigateParams) {\n        const { scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn } = navigateParams;\n        if (exists(scrollColumn) && !scrollColumn.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);\n        }\n        if (exists(scrollIndex)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);\n        }\n        // setFocusedCell relies on the browser default focus behavior to scroll the focused cell into view,\n        // however, this behavior will cause the cell border to be cut off, or if we have sticky rows, the\n        // cell will be completely hidden, so we call ensureIndexVisible without a position to guarantee\n        // minimal scroll to get the row into view.\n        if (!navigateParams.isAsync) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(focusIndex);\n        }\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n        // highlighted.\n        this.focusService.setFocusedCell({ rowIndex: focusIndex, column: focusColumn, rowPinned: null, forceBrowserFocus: true });\n        if (this.rangeService) {\n            const cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n    // this method is throttled, see the `constructor`\n    onPageDown(gridCell) {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const pixelsInOnePage = this.getViewportHeight();\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        const currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n        const currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);\n        }\n        else {\n            this.navigateToNextPage(gridCell, currentPageBottomRow);\n        }\n    }\n    // this method is throttled, see the `constructor`\n    onPageUp(gridCell) {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        const currentPageTopPixel = scrollPosition.top;\n        const currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);\n        }\n        else {\n            this.navigateToNextPage(gridCell, currentPageTopRow, true);\n        }\n    }\n    navigateToNextPage(gridCell, scrollIndex, up = false) {\n        const pixelsInOnePage = this.getViewportHeight();\n        const firstRow = this.paginationProxy.getPageFirstRow();\n        const lastRow = this.paginationProxy.getPageLastRow();\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        const currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);\n        const rowPixelDiff = up\n            ? ((currentRowNode === null || currentRowNode === void 0 ? void 0 : currentRowNode.rowHeight) - pixelsInOnePage - pagingPixelOffset)\n            : (pixelsInOnePage - pagingPixelOffset);\n        const nextCellPixel = (currentRowNode === null || currentRowNode === void 0 ? void 0 : currentRowNode.rowTop) + rowPixelDiff;\n        let focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n        if (focusIndex === gridCell.rowIndex) {\n            const diff = up ? -1 : 1;\n            scrollIndex = focusIndex = gridCell.rowIndex + diff;\n        }\n        let scrollType;\n        if (up) {\n            scrollType = 'bottom';\n            if (focusIndex < firstRow) {\n                focusIndex = firstRow;\n            }\n            if (scrollIndex < firstRow) {\n                scrollIndex = firstRow;\n            }\n        }\n        else {\n            scrollType = 'top';\n            if (focusIndex > lastRow) {\n                focusIndex = lastRow;\n            }\n            if (scrollIndex > lastRow) {\n                scrollIndex = lastRow;\n            }\n        }\n        if (this.isRowTallerThanView(focusIndex)) {\n            scrollIndex = focusIndex;\n            scrollType = 'top';\n        }\n        this.navigateTo({\n            scrollIndex,\n            scrollType,\n            scrollColumn: null,\n            focusIndex,\n            focusColumn: gridCell.column\n        });\n    }\n    navigateToNextPageWithAutoHeight(gridCell, scrollIndex, up = false) {\n        // because autoHeight will calculate the height of rows after scroll\n        // first we scroll towards the required point, then we add a small\n        // delay to allow the height to be recalculated, check which index\n        // should be focused and then finally navigate to that index.\n        // TODO: we should probably have an event fired once to scrollbar has\n        // settled and all rowHeights have been calculated instead of relying\n        // on a setTimeout of 50ms.\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: up ? 'bottom' : 'top',\n            scrollColumn: null,\n            focusIndex: scrollIndex,\n            focusColumn: gridCell.column\n        });\n        setTimeout(() => {\n            const focusIndex = this.getNextFocusIndexForAutoHeight(gridCell, up);\n            this.navigateTo({\n                scrollIndex: scrollIndex,\n                scrollType: up ? 'bottom' : 'top',\n                scrollColumn: null,\n                focusIndex: focusIndex,\n                focusColumn: gridCell.column,\n                isAsync: true\n            });\n        }, 50);\n    }\n    getNextFocusIndexForAutoHeight(gridCell, up = false) {\n        var _a;\n        const step = up ? -1 : 1;\n        const pixelsInOnePage = this.getViewportHeight();\n        const lastRowIndex = this.paginationProxy.getPageLastRow();\n        let pixelSum = 0;\n        let currentIndex = gridCell.rowIndex;\n        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {\n            const currentCell = this.paginationProxy.getRow(currentIndex);\n            if (currentCell) {\n                const currentCellHeight = (_a = currentCell.rowHeight) !== null && _a !== void 0 ? _a : 0;\n                if (pixelSum + currentCellHeight > pixelsInOnePage) {\n                    break;\n                }\n                pixelSum += currentCellHeight;\n            }\n            currentIndex += step;\n        }\n        return Math.max(0, Math.min(currentIndex, lastRowIndex));\n    }\n    getViewportHeight() {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n        if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {\n            pixelsInOnePage -= scrollbarWidth;\n        }\n        return pixelsInOnePage;\n    }\n    isRowTallerThanView(rowIndex) {\n        const rowNode = this.paginationProxy.getRow(rowIndex);\n        if (!rowNode) {\n            return false;\n        }\n        const rowHeight = rowNode.rowHeight;\n        if (typeof rowHeight !== 'number') {\n            return false;\n        }\n        return rowHeight > this.getViewportHeight();\n    }\n    onCtrlUpDownLeftRight(key, gridCell) {\n        const cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true);\n        const { rowIndex, column } = cellToFocus;\n        this.navigateTo({\n            scrollIndex: rowIndex,\n            scrollType: null,\n            scrollColumn: column,\n            focusIndex: rowIndex,\n            focusColumn: column\n        });\n    }\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n    // same cell into view (which means either scroll all the way up, or all the way down).\n    onHomeOrEndKey(key) {\n        const homeKey = key === KeyCode.PAGE_HOME;\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        const columnToSelect = homeKey ? allColumns[0] : last(allColumns);\n        const scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: null,\n            scrollColumn: columnToSelect,\n            focusIndex: scrollIndex,\n            focusColumn: columnToSelect\n        });\n    }\n    // result of keyboard event\n    onTabKeyDown(previous, keyboardEvent) {\n        const backwards = keyboardEvent.shiftKey;\n        const movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);\n        if (movedToNextCell) {\n            // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n            // to the normal tabbing so user can exit the grid.\n            keyboardEvent.preventDefault();\n            return;\n        }\n        // if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going\n        // backwards)\n        if (backwards) {\n            const { rowIndex, rowPinned } = previous.getRowPosition();\n            const firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();\n            if (firstRow) {\n                if (this.gridOptionsService.get('headerHeight') === 0) {\n                    this.focusService.focusNextGridCoreContainer(true, true);\n                }\n                else {\n                    keyboardEvent.preventDefault();\n                    this.focusService.focusPreviousFromFirstCell(keyboardEvent);\n                }\n            }\n        }\n        else {\n            // if the case it's a popup editor, the focus is on the editor and not the previous cell.\n            // in order for the tab navigation to work, we need to focus the browser back onto the\n            // previous cell.\n            if (previous instanceof CellCtrl) {\n                previous.focusCell(true);\n            }\n            if (this.focusService.focusNextGridCoreContainer(backwards)) {\n                keyboardEvent.preventDefault();\n            }\n        }\n    }\n    // comes from API\n    tabToNextCell(backwards, event) {\n        const focusedCell = this.focusService.getFocusedCell();\n        // if no focus, then cannot navigate\n        if (!focusedCell) {\n            return false;\n        }\n        let cellOrRow = this.getCellByPosition(focusedCell);\n        // if cell is not rendered, means user has scrolled away from the cell\n        // or that the focusedCell is a Full Width Row\n        if (!cellOrRow) {\n            cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);\n            if (!cellOrRow || !cellOrRow.isFullWidth()) {\n                return false;\n            }\n        }\n        return this.tabToNextCellCommon(cellOrRow, backwards, event);\n    }\n    tabToNextCellCommon(previous, backwards, event) {\n        let editing = previous.isEditing();\n        // if cell is not editing, there is still chance row is editing if it's Full Row Editing\n        if (!editing && previous instanceof CellCtrl) {\n            const cell = previous;\n            const row = cell.getRowCtrl();\n            if (row) {\n                editing = row.isEditing();\n            }\n        }\n        let res;\n        if (editing) {\n            // if we are editing, we know it's not a Full Width Row (RowComp)\n            if (this.gridOptionsService.get('editType') === 'fullRow') {\n                res = this.moveToNextEditingRow(previous, backwards, event);\n            }\n            else {\n                res = this.moveToNextEditingCell(previous, backwards, event);\n            }\n        }\n        else {\n            res = this.moveToNextCellNotEditing(previous, backwards);\n        }\n        // if a cell wasn't found, it's possible that focus was moved to the header\n        return res || !!this.focusService.getFocusedHeader();\n    }\n    moveToNextEditingCell(previousCell, backwards, event = null) {\n        const previousPos = previousCell.getCellPosition();\n        // before we stop editing, we need to focus the cell element\n        // so the grid doesn't detect that focus has left the grid\n        previousCell.getGui().focus();\n        // need to do this before getting next cell to edit, in case the next cell\n        // has editable function (eg colDef.editable=func() ) and it depends on the\n        // result of this cell, so need to save updates from the first edit, in case\n        // the value is referenced in the function.\n        previousCell.stopEditing();\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);\n        if (nextCell == null) {\n            return false;\n        }\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        nextCell.startEditing(null, true, event);\n        nextCell.focusCell(false);\n        return true;\n    }\n    moveToNextEditingRow(previousCell, backwards, event = null) {\n        const previousPos = previousCell.getCellPosition();\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);\n        if (nextCell == null) {\n            return false;\n        }\n        const nextPos = nextCell.getCellPosition();\n        const previousEditable = this.isCellEditable(previousPos);\n        const nextEditable = this.isCellEditable(nextPos);\n        const rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;\n        if (previousEditable) {\n            previousCell.setFocusOutOnEditor();\n        }\n        if (!rowsMatch) {\n            const pRow = previousCell.getRowCtrl();\n            pRow.stopEditing();\n            const nRow = nextCell.getRowCtrl();\n            nRow.startRowEditing(undefined, undefined, event);\n        }\n        if (nextEditable) {\n            nextCell.setFocusInOnEditor();\n            nextCell.focusCell();\n        }\n        else {\n            nextCell.focusCell(true);\n        }\n        return true;\n    }\n    moveToNextCellNotEditing(previousCell, backwards) {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        let cellPos;\n        if (previousCell instanceof RowCtrl) {\n            cellPos = Object.assign(Object.assign({}, previousCell.getRowPosition()), { column: backwards ? displayedColumns[0] : last(displayedColumns) });\n        }\n        else {\n            cellPos = previousCell.getCellPosition();\n        }\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        if (nextCell instanceof CellCtrl) {\n            nextCell.focusCell(true);\n        }\n        else if (nextCell) {\n            return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);\n        }\n        return exists(nextCell);\n    }\n    // called by the cell, when tab is pressed while editing.\n    // @return: RenderedCell when navigation successful, otherwise null\n    findNextCellToFocusOn(previousPosition, backwards, startEditing) {\n        let nextPosition = previousPosition;\n        while (true) {\n            if (previousPosition !== nextPosition) {\n                previousPosition = nextPosition;\n            }\n            if (!backwards) {\n                nextPosition = this.getLastCellOfColSpan(nextPosition);\n            }\n            nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);\n            // allow user to override what cell to go to next\n            const userFunc = this.gridOptionsService.getCallback('tabToNextCell');\n            if (exists(userFunc)) {\n                const params = {\n                    backwards: backwards,\n                    editing: startEditing,\n                    previousCellPosition: previousPosition,\n                    nextCellPosition: nextPosition ? nextPosition : null\n                };\n                const userCell = userFunc(params);\n                if (exists(userCell)) {\n                    if (userCell.floating) {\n                        warnOnce(`tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?`);\n                        userCell.rowPinned = userCell.floating;\n                    }\n                    nextPosition = {\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column,\n                        rowPinned: userCell.rowPinned\n                    };\n                }\n                else {\n                    nextPosition = null;\n                }\n            }\n            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,\n            // so bottom right cell going forwards, or top left going backwards\n            if (!nextPosition) {\n                return null;\n            }\n            if (nextPosition.rowIndex < 0) {\n                const headerLen = this.headerNavigationService.getHeaderRowCount();\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerLen + (nextPosition.rowIndex),\n                        column: nextPosition.column\n                    },\n                    fromCell: true\n                });\n                return null;\n            }\n            // if editing, but cell not editable, skip cell. we do this before we do all of\n            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping\n            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless\n            // (except for the last one) which causes grid to stall for a while.\n            // note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.\n            const fullRowEdit = this.gridOptionsService.get('editType') === 'fullRow';\n            if (startEditing && !fullRowEdit) {\n                const cellIsEditable = this.isCellEditable(nextPosition);\n                if (!cellIsEditable) {\n                    continue;\n                }\n            }\n            this.ensureCellVisible(nextPosition);\n            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column\n            // or row that is not currently in view, hence the renderedCell would not exist\n            const nextCell = this.getCellByPosition(nextPosition);\n            // if next cell is fullWidth row, then no rendered cell,\n            // as fullWidth rows have no cells, so we skip it\n            if (!nextCell) {\n                const row = this.rowRenderer.getRowByPosition(nextPosition);\n                if (!row || !row.isFullWidth() || startEditing) {\n                    continue;\n                }\n                return row;\n            }\n            if (nextCell.isSuppressNavigable()) {\n                continue;\n            }\n            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation\n            // consistent, we set into range here also.\n            if (this.rangeService) {\n                this.rangeService.setRangeToCell(nextPosition);\n            }\n            // we successfully tabbed onto a grid cell, so return true\n            return nextCell;\n        }\n    }\n    isCellEditable(cell) {\n        const rowNode = this.lookupRowNodeForCell(cell);\n        if (rowNode) {\n            return cell.column.isCellEditable(rowNode);\n        }\n        return false;\n    }\n    getCellByPosition(cellPosition) {\n        const rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);\n        if (!rowCtrl) {\n            return null;\n        }\n        return rowCtrl.getCellCtrl(cellPosition.column);\n    }\n    lookupRowNodeForCell(cell) {\n        if (cell.rowPinned === 'top') {\n            return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);\n        }\n        if (cell.rowPinned === 'bottom') {\n            return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);\n        }\n        return this.paginationProxy.getRow(cell.rowIndex);\n    }\n    // we use index for rows, but column object for columns, as the next column (by index) might not\n    // be visible (header grouping) so it's not reliable, so using the column object instead.\n    navigateToNextCell(event, key, currentCell, allowUserOverride) {\n        // we keep searching for a next cell until we find one. this is how the group rows get skipped\n        let nextCell = currentCell;\n        let hitEdgeOfGrid = false;\n        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {\n            // if the current cell is spanning across multiple columns, we need to move\n            // our current position to be the last cell on the right before finding the\n            // the next target.\n            if (this.gridOptionsService.get('enableRtl')) {\n                if (key === KeyCode.LEFT) {\n                    nextCell = this.getLastCellOfColSpan(nextCell);\n                }\n            }\n            else if (key === KeyCode.RIGHT) {\n                nextCell = this.getLastCellOfColSpan(nextCell);\n            }\n            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);\n            // eg if going down, and nextCell=undefined, means we are gone past the last row\n            hitEdgeOfGrid = missing(nextCell);\n        }\n        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {\n            nextCell = {\n                rowIndex: -1,\n                rowPinned: null,\n                column: currentCell.column\n            };\n        }\n        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)\n        // we allow this, however if processing 'enter after edit' we don't allow override\n        if (allowUserOverride) {\n            const userFunc = this.gridOptionsService.getCallback('navigateToNextCell');\n            if (exists(userFunc)) {\n                const params = {\n                    key: key,\n                    previousCellPosition: currentCell,\n                    nextCellPosition: nextCell ? nextCell : null,\n                    event: event\n                };\n                const userCell = userFunc(params);\n                if (exists(userCell)) {\n                    if (userCell.floating) {\n                        warnOnce(`tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?`);\n                        userCell.rowPinned = userCell.floating;\n                    }\n                    nextCell = {\n                        rowPinned: userCell.rowPinned,\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column\n                    };\n                }\n                else {\n                    nextCell = null;\n                }\n            }\n        }\n        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid\n        if (!nextCell) {\n            return;\n        }\n        if (nextCell.rowIndex < 0) {\n            const headerLen = this.headerNavigationService.getHeaderRowCount();\n            this.focusService.focusHeaderPosition({\n                headerPosition: { headerRowIndex: headerLen + (nextCell.rowIndex), column: currentCell.column },\n                event: event || undefined,\n                fromCell: true\n            });\n            return;\n        }\n        // in case we have col spanning we get the cellComp and use it to get the\n        // position. This was we always focus the first cell inside the spanning.\n        const normalisedPosition = this.getNormalisedPosition(nextCell);\n        if (normalisedPosition) {\n            this.focusPosition(normalisedPosition);\n        }\n        else {\n            this.tryToFocusFullWidthRow(nextCell);\n        }\n    }\n    getNormalisedPosition(cellPosition) {\n        // ensureCellVisible first, to make sure cell at position is rendered.\n        this.ensureCellVisible(cellPosition);\n        const cellCtrl = this.getCellByPosition(cellPosition);\n        // not guaranteed to have a cellComp when using the SSRM as blocks are loading.\n        if (!cellCtrl) {\n            return null;\n        }\n        cellPosition = cellCtrl.getCellPosition();\n        // we call this again, as nextCell can be different to it's previous value due to Column Spanning\n        // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the\n        // last column in the group, however now it's the first column in the group). if we didn't do\n        // ensureCellVisible again, then we could only be showing the last portion (last column) of the\n        // merged cells.\n        this.ensureCellVisible(cellPosition);\n        return cellPosition;\n    }\n    tryToFocusFullWidthRow(position, backwards = false) {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        const rowComp = this.rowRenderer.getRowByPosition(position);\n        if (!rowComp || !rowComp.isFullWidth()) {\n            return false;\n        }\n        const currentCellFocused = this.focusService.getFocusedCell();\n        const cellPosition = {\n            rowIndex: position.rowIndex,\n            rowPinned: position.rowPinned,\n            column: position.column || (backwards ? last(displayedColumns) : displayedColumns[0])\n        };\n        this.focusPosition(cellPosition);\n        const fromBelow = currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;\n        const focusEvent = {\n            type: Events.EVENT_FULL_WIDTH_ROW_FOCUSED,\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned,\n            column: cellPosition.column,\n            isFullWidthCell: true,\n            floating: cellPosition.rowPinned,\n            fromBelow\n        };\n        this.eventService.dispatchEvent(focusEvent);\n        return true;\n    }\n    focusPosition(cellPosition) {\n        this.focusService.setFocusedCell({\n            rowIndex: cellPosition.rowIndex,\n            column: cellPosition.column,\n            rowPinned: cellPosition.rowPinned,\n            forceBrowserFocus: true\n        });\n        if (this.rangeService) {\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n    isValidNavigateCell(cell) {\n        const rowNode = this.rowPositionUtils.getRowNode(cell);\n        // we do not allow focusing on detail rows and full width rows\n        return !!rowNode;\n    }\n    getLastCellOfColSpan(cell) {\n        const cellCtrl = this.getCellByPosition(cell);\n        if (!cellCtrl) {\n            return cell;\n        }\n        const colSpanningList = cellCtrl.getColSpanningList();\n        if (colSpanningList.length === 1) {\n            return cell;\n        }\n        return {\n            rowIndex: cell.rowIndex,\n            column: last(colSpanningList),\n            rowPinned: cell.rowPinned\n        };\n    }\n    ensureCellVisible(gridCell) {\n        const isGroupStickyEnabled = this.gridOptionsService.isGroupRowsSticky();\n        const rowNode = this.rowModel.getRow(gridCell.rowIndex);\n        // sticky rows are always visible, so the grid shouldn't scroll to focus them.\n        const skipScrollToRow = isGroupStickyEnabled && (rowNode === null || rowNode === void 0 ? void 0 : rowNode.sticky);\n        // this scrolls the row into view\n        if (!skipScrollToRow && missing(gridCell.rowPinned)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);\n        }\n        if (!gridCell.column.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);\n        }\n    }\n};\n__decorate([\n    Autowired('mouseEventService')\n], NavigationService.prototype, \"mouseEventService\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], NavigationService.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('focusService')\n], NavigationService.prototype, \"focusService\", void 0);\n__decorate([\n    Optional('rangeService')\n], NavigationService.prototype, \"rangeService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], NavigationService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('rowModel')\n], NavigationService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], NavigationService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], NavigationService.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('headerNavigationService')\n], NavigationService.prototype, \"headerNavigationService\", void 0);\n__decorate([\n    Autowired(\"rowPositionUtils\")\n], NavigationService.prototype, \"rowPositionUtils\", void 0);\n__decorate([\n    Autowired(\"cellNavigationService\")\n], NavigationService.prototype, \"cellNavigationService\", void 0);\n__decorate([\n    Autowired(\"pinnedRowModel\")\n], NavigationService.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    PostConstruct\n], NavigationService.prototype, \"postConstruct\", null);\nNavigationService = __decorate([\n    Bean('navigationService')\n], NavigationService);\nexport { NavigationService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PopupComponent } from \"../../widgets/popupComponent.mjs\";\nimport { isUserSuppressingKeyboardEvent } from \"../../utils/keyboard.mjs\";\nimport { PostConstruct } from \"../../context/context.mjs\";\nexport class PopupEditorWrapper extends PopupComponent {\n    constructor(params) {\n        super(/* html */ `<div class=\"ag-popup-editor\" tabindex=\"-1\"/>`);\n        this.params = params;\n    }\n    postConstruct() {\n        this.gridOptionsService.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);\n        this.addKeyDownListener();\n    }\n    addKeyDownListener() {\n        const eGui = this.getGui();\n        const params = this.params;\n        const listener = (event) => {\n            if (!isUserSuppressingKeyboardEvent(this.gridOptionsService, event, params.node, params.column, true)) {\n                params.onKeyDown(event);\n            }\n        };\n        this.addManagedListener(eGui, 'keydown', listener);\n    }\n}\nPopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';\n__decorate([\n    PostConstruct\n], PopupEditorWrapper.prototype, \"postConstruct\", null);\n","import { Component } from \"../../widgets/component.mjs\";\nimport { PopupEditorWrapper } from \"./../cellEditors/popupEditorWrapper.mjs\";\nimport { setAriaRole } from \"../../utils/aria.mjs\";\nimport { escapeString } from \"../../utils/string.mjs\";\nimport { missing } from \"../../utils/generic.mjs\";\nimport { addStylesToElement, clearElement, loadTemplate, removeFromParent } from \"../../utils/dom.mjs\";\nimport { browserSupportsPreventScroll } from \"../../utils/browser.mjs\";\nexport class CellComp extends Component {\n    constructor(beans, cellCtrl, printLayout, eRow, editingRow) {\n        super();\n        // every time we go into edit mode, or back again, this gets incremented.\n        // it's the components way of dealing with the async nature of framework components,\n        // so if a framework component takes a while to be created, we know if the object\n        // is still relevant when creating is finished. eg we could click edit / un-edit 20\n        // times before the first React edit component comes back - we should discard\n        // the first 19.\n        this.rendererVersion = 0;\n        this.editorVersion = 0;\n        this.beans = beans;\n        this.column = cellCtrl.getColumn();\n        this.rowNode = cellCtrl.getRowNode();\n        this.rowCtrl = cellCtrl.getRowCtrl();\n        this.eRow = eRow;\n        this.cellCtrl = cellCtrl;\n        this.setTemplate(/* html */ `<div comp-id=\"${this.getCompId()}\"/>`);\n        const eGui = this.getGui();\n        this.forceWrapper = cellCtrl.isForceWrapper();\n        this.refreshWrapper(false);\n        const setAttribute = (name, value) => {\n            if (value != null && value != '') {\n                eGui.setAttribute(name, value);\n            }\n            else {\n                eGui.removeAttribute(name);\n            }\n        };\n        setAriaRole(eGui, cellCtrl.getCellAriaRole());\n        setAttribute('col-id', cellCtrl.getColumnIdSanitised());\n        const tabIndex = cellCtrl.getTabIndex();\n        if (tabIndex !== undefined) {\n            setAttribute('tabindex', tabIndex.toString());\n        }\n        const compProxy = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setUserStyles: (styles) => addStylesToElement(eGui, styles),\n            getFocusableElement: () => this.getFocusableElement(),\n            setIncludeSelection: include => this.includeSelection = include,\n            setIncludeRowDrag: include => this.includeRowDrag = include,\n            setIncludeDndSource: include => this.includeDndSource = include,\n            setRenderDetails: (compDetails, valueToDisplay, force) => this.setRenderDetails(compDetails, valueToDisplay, force),\n            setEditDetails: (compDetails, popup, position) => this.setEditDetails(compDetails, popup, position),\n            getCellEditor: () => this.cellEditor || null,\n            getCellRenderer: () => this.cellRenderer || null,\n            getParentOfValue: () => this.getParentOfValue()\n        };\n        cellCtrl.setComp(compProxy, this.getGui(), this.eCellWrapper, printLayout, editingRow);\n    }\n    getParentOfValue() {\n        if (this.eCellValue) {\n            // if not editing, and using wrapper, then value goes in eCellValue\n            return this.eCellValue;\n        }\n        if (this.eCellWrapper) {\n            // if editing, and using wrapper, value (cell editor) goes in eCellWrapper\n            return this.eCellWrapper;\n        }\n        // if editing or rendering, and not using wrapper, value (or comp) is directly inside cell\n        return this.getGui();\n    }\n    setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance) {\n        // this can happen if the users asks for the cell to refresh, but we are not showing the vale as we are editing\n        const isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;\n        if (isInlineEditing) {\n            return;\n        }\n        // this means firstRender will be true for one pass only, as it's initialised to undefined\n        this.firstRender = this.firstRender == null;\n        // if display template has changed, means any previous Cell Renderer is in the wrong location\n        const controlWrapperChanged = this.refreshWrapper(false);\n        this.refreshEditStyles(false);\n        // all of these have dependencies on the eGui, so only do them after eGui is set\n        if (compDetails) {\n            const neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;\n            const cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);\n            if (!cellRendererRefreshSuccessful) {\n                this.destroyRenderer();\n                this.createCellRendererInstance(compDetails);\n            }\n        }\n        else {\n            this.destroyRenderer();\n            this.insertValueWithoutCellRenderer(valueToDisplay);\n        }\n    }\n    setEditDetails(compDetails, popup, position) {\n        if (compDetails) {\n            this.createCellEditorInstance(compDetails, popup, position);\n        }\n        else {\n            this.destroyEditor();\n        }\n    }\n    removeControls() {\n        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);\n        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);\n        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);\n    }\n    // returns true if wrapper was changed\n    refreshWrapper(editing) {\n        const providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;\n        const usingWrapper = providingControls || this.forceWrapper;\n        const putWrapperIn = usingWrapper && this.eCellWrapper == null;\n        if (putWrapperIn) {\n            this.eCellWrapper = loadTemplate(/* html */ `<div class=\"ag-cell-wrapper\" role=\"presentation\"></div>`);\n            this.getGui().appendChild(this.eCellWrapper);\n        }\n        const takeWrapperOut = !usingWrapper && this.eCellWrapper != null;\n        if (takeWrapperOut) {\n            removeFromParent(this.eCellWrapper);\n            this.eCellWrapper = undefined;\n        }\n        this.addOrRemoveCssClass('ag-cell-value', !usingWrapper);\n        const usingCellValue = !editing && usingWrapper;\n        const putCellValueIn = usingCellValue && this.eCellValue == null;\n        if (putCellValueIn) {\n            this.eCellValue = loadTemplate(/* html */ `<span class=\"ag-cell-value\" role=\"presentation\"></span>`);\n            this.eCellWrapper.appendChild(this.eCellValue);\n        }\n        const takeCellValueOut = !usingCellValue && this.eCellValue != null;\n        if (takeCellValueOut) {\n            removeFromParent(this.eCellValue);\n            this.eCellValue = undefined;\n        }\n        const templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;\n        if (templateChanged) {\n            this.removeControls();\n        }\n        if (!editing) {\n            if (providingControls) {\n                this.addControls();\n            }\n        }\n        return templateChanged;\n    }\n    addControls() {\n        if (this.includeRowDrag) {\n            if (this.rowDraggingComp == null) {\n                this.rowDraggingComp = this.cellCtrl.createRowDragComp();\n                if (this.rowDraggingComp) {\n                    // put the checkbox in before the value\n                    this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);\n                }\n            }\n        }\n        if (this.includeDndSource) {\n            if (this.dndSourceComp == null) {\n                this.dndSourceComp = this.cellCtrl.createDndSource();\n                // put the checkbox in before the value\n                this.eCellWrapper.insertBefore(this.dndSourceComp.getGui(), this.eCellValue);\n            }\n        }\n        if (this.includeSelection) {\n            if (this.checkboxSelectionComp == null) {\n                this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();\n                this.eCellWrapper.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue);\n            }\n        }\n    }\n    createCellEditorInstance(compDetails, popup, position) {\n        const versionCopy = this.editorVersion;\n        const cellEditorPromise = compDetails.newAgStackInstance();\n        if (!cellEditorPromise) {\n            return;\n        } // if empty, userComponentFactory already did a console message\n        const { params } = compDetails;\n        cellEditorPromise.then(c => this.afterCellEditorCreated(versionCopy, c, params, popup, position));\n        // if we don't do this, and editor component is async, then there will be a period\n        // when the component isn't present and keyboard navigation won't work - so example\n        // of user hitting tab quickly (more quickly than renderers getting created) won't work\n        const cellEditorAsync = missing(this.cellEditor);\n        if (cellEditorAsync && params.cellStartedEdit) {\n            this.cellCtrl.focusCell(true);\n        }\n    }\n    insertValueWithoutCellRenderer(valueToDisplay) {\n        const eParent = this.getParentOfValue();\n        clearElement(eParent);\n        const escapedValue = valueToDisplay != null ? escapeString(valueToDisplay) : null;\n        if (escapedValue != null) {\n            eParent.innerHTML = escapedValue;\n        }\n    }\n    destroyEditorAndRenderer() {\n        this.destroyRenderer();\n        this.destroyEditor();\n    }\n    destroyRenderer() {\n        const { context } = this.beans;\n        this.cellRenderer = context.destroyBean(this.cellRenderer);\n        removeFromParent(this.cellRendererGui);\n        this.cellRendererGui = null;\n        this.rendererVersion++;\n    }\n    destroyEditor() {\n        const { context } = this.beans;\n        if (this.hideEditorPopup) {\n            this.hideEditorPopup();\n        }\n        this.hideEditorPopup = undefined;\n        this.cellEditor = context.destroyBean(this.cellEditor);\n        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);\n        removeFromParent(this.cellEditorGui);\n        this.cellEditorGui = null;\n        this.editorVersion++;\n    }\n    refreshCellRenderer(compClassAndParams) {\n        if (this.cellRenderer == null || this.cellRenderer.refresh == null) {\n            return false;\n        }\n        // if different Cell Renderer configured this time (eg user is using selector, and\n        // returns different component) then don't refresh, force recreate of Cell Renderer\n        if (this.cellRendererClass !== compClassAndParams.componentClass) {\n            return false;\n        }\n        // take any custom params off of the user\n        const result = this.cellRenderer.refresh(compClassAndParams.params);\n        // NOTE on undefined: previous version of the cellRenderer.refresh() interface\n        // returned nothing, if the method existed, we assumed it refreshed. so for\n        // backwards compatibility, we assume if method exists and returns nothing,\n        // that it was successful.\n        return result === true || result === undefined;\n    }\n    createCellRendererInstance(compDetails) {\n        // never use task service if animation frame service is turned off.\n        // and lastly we never use it if doing auto-height, as the auto-height service checks the\n        // row height directly after the cell is created, it doesn't wait around for the tasks to complete        \n        const suppressAnimationFrame = this.beans.gridOptionsService.get('suppressAnimationFrame');\n        const useTaskService = !suppressAnimationFrame;\n        const displayComponentVersionCopy = this.rendererVersion;\n        const { componentClass } = compDetails;\n        const createCellRendererFunc = () => {\n            const staleTask = this.rendererVersion !== displayComponentVersionCopy || !this.isAlive();\n            if (staleTask) {\n                return;\n            }\n            // this can return null in the event that the user has switched from a renderer component to nothing, for example\n            // when using a cellRendererSelect to return a component or null depending on row data etc\n            const componentPromise = compDetails.newAgStackInstance();\n            const callback = this.afterCellRendererCreated.bind(this, displayComponentVersionCopy, componentClass);\n            if (componentPromise) {\n                componentPromise.then(callback);\n            }\n        };\n        // we only use task service when rendering for first time, which means it is not used when doing edits.\n        // if we changed this (always use task service) would make sense, however it would break tests, possibly\n        // test of users.\n        if (useTaskService && this.firstRender) {\n            this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex, 'createTasksP2');\n        }\n        else {\n            createCellRendererFunc();\n        }\n    }\n    getCtrl() {\n        return this.cellCtrl;\n    }\n    getRowCtrl() {\n        return this.rowCtrl;\n    }\n    getCellRenderer() {\n        return this.cellRenderer;\n    }\n    getCellEditor() {\n        return this.cellEditor;\n    }\n    afterCellRendererCreated(cellRendererVersion, cellRendererClass, cellRenderer) {\n        const staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;\n        if (staleTask) {\n            this.beans.context.destroyBean(cellRenderer);\n            return;\n        }\n        this.cellRenderer = cellRenderer;\n        this.cellRendererClass = cellRendererClass;\n        this.cellRendererGui = this.cellRenderer.getGui();\n        if (this.cellRendererGui != null) {\n            const eParent = this.getParentOfValue();\n            clearElement(eParent);\n            eParent.appendChild(this.cellRendererGui);\n        }\n    }\n    afterCellEditorCreated(requestVersion, cellEditor, params, popup, position) {\n        // if editingCell=false, means user cancelled the editor before component was ready.\n        // if versionMismatch, then user cancelled the edit, then started the edit again, and this\n        //   is the first editor which is now stale.\n        const staleComp = requestVersion !== this.editorVersion;\n        if (staleComp) {\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n        const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n        if (editingCancelledByUserComp) {\n            this.beans.context.destroyBean(cellEditor);\n            this.cellCtrl.stopEditing(true);\n            return;\n        }\n        if (!cellEditor.getGui) {\n            console.warn(`AG Grid: cellEditor for column ${this.column.getId()} is missing getGui() method`);\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n        this.cellEditor = cellEditor;\n        this.cellEditorGui = cellEditor.getGui();\n        const cellEditorInPopup = popup || (cellEditor.isPopup !== undefined && cellEditor.isPopup());\n        if (cellEditorInPopup) {\n            this.addPopupCellEditor(params, position);\n        }\n        else {\n            this.addInCellEditor();\n        }\n        this.refreshEditStyles(true, cellEditorInPopup);\n        if (cellEditor.afterGuiAttached) {\n            cellEditor.afterGuiAttached();\n        }\n    }\n    refreshEditStyles(editing, isPopup) {\n        var _a;\n        this.addOrRemoveCssClass('ag-cell-inline-editing', editing && !isPopup);\n        this.addOrRemoveCssClass('ag-cell-popup-editing', editing && !!isPopup);\n        this.addOrRemoveCssClass('ag-cell-not-inline-editing', !editing || !!isPopup);\n        (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.setInlineEditingCss(editing);\n    }\n    addInCellEditor() {\n        const eGui = this.getGui();\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        const eDocument = this.beans.gridOptionsService.getDocument();\n        if (eGui.contains(eDocument.activeElement)) {\n            eGui.focus();\n        }\n        this.destroyRenderer();\n        this.refreshWrapper(true);\n        this.clearParentOfValue();\n        if (this.cellEditorGui) {\n            const eParent = this.getParentOfValue();\n            eParent.appendChild(this.cellEditorGui);\n        }\n    }\n    addPopupCellEditor(params, position) {\n        if (this.beans.gridOptionsService.get('editType') === 'fullRow') {\n            console.warn('AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' +\n                '- either turn off fullRowEdit, or stop using popup editors.');\n        }\n        const cellEditor = this.cellEditor;\n        // if a popup, then we wrap in a popup editor and return the popup\n        this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));\n        const ePopupGui = this.cellEditorPopupWrapper.getGui();\n        if (this.cellEditorGui) {\n            ePopupGui.appendChild(this.cellEditorGui);\n        }\n        const popupService = this.beans.popupService;\n        const useModelPopup = this.beans.gridOptionsService.get('stopEditingWhenCellsLoseFocus');\n        // see if position provided by colDef, if not then check old way of method on cellComp\n        const positionToUse = position != null\n            ? position\n            : cellEditor.getPopupPosition\n                ? cellEditor.getPopupPosition()\n                : 'over';\n        const isRtl = this.beans.gridOptionsService.get('enableRtl');\n        const positionParams = {\n            ePopup: ePopupGui,\n            column: this.column,\n            rowNode: this.rowNode,\n            type: 'popupCellEditor',\n            eventSource: this.getGui(),\n            position: positionToUse,\n            alignSide: isRtl ? 'right' : 'left',\n            keepWithinBounds: true\n        };\n        const positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams);\n        const translate = this.beans.localeService.getLocaleTextFunc();\n        const addPopupRes = popupService.addPopup({\n            modal: useModelPopup,\n            eChild: ePopupGui,\n            closeOnEsc: true,\n            closedCallback: () => { this.cellCtrl.onPopupEditorClosed(); },\n            anchorToElement: this.getGui(),\n            positionCallback,\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor')\n        });\n        if (addPopupRes) {\n            this.hideEditorPopup = addPopupRes.hideFunc;\n        }\n    }\n    detach() {\n        this.eRow.removeChild(this.getGui());\n    }\n    // if the row is also getting destroyed, then we don't need to remove from dom,\n    // as the row will also get removed, so no need to take out the cells from the row\n    // if the row is going (removing is an expensive operation, so only need to remove\n    // the top part)\n    //\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    destroy() {\n        this.cellCtrl.stopEditing();\n        this.destroyEditorAndRenderer();\n        this.removeControls();\n        super.destroy();\n    }\n    clearParentOfValue() {\n        const eGui = this.getGui();\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        const eDocument = this.beans.gridOptionsService.getDocument();\n        if (eGui.contains(eDocument.activeElement) && browserSupportsPreventScroll()) {\n            eGui.focus({ preventScroll: true });\n        }\n        clearElement(this.getParentOfValue());\n    }\n}\n","import { Component } from \"../../widgets/component.mjs\";\nimport { addStylesToElement, setDomChildOrder } from \"../../utils/dom.mjs\";\nimport { CellComp } from \"../cell/cellComp.mjs\";\nimport { getAllValuesInObject } from \"../../utils/object.mjs\";\nimport { setAriaRole } from \"../../utils/aria.mjs\";\nexport class RowComp extends Component {\n    constructor(ctrl, beans, containerType) {\n        super();\n        this.cellComps = {};\n        this.beans = beans;\n        this.rowCtrl = ctrl;\n        this.setTemplate(/* html */ `<div comp-id=\"${this.getCompId()}\" style=\"${this.getInitialStyle(containerType)}\"/>`);\n        const eGui = this.getGui();\n        const style = eGui.style;\n        this.domOrder = this.rowCtrl.getDomOrder();\n        setAriaRole(eGui, 'row');\n        const tabIndex = this.rowCtrl.getTabIndex();\n        if (tabIndex != null) {\n            eGui.setAttribute('tabindex', tabIndex.toString());\n        }\n        const compProxy = {\n            setDomOrder: domOrder => this.domOrder = domOrder,\n            setCellCtrls: cellCtrls => this.setCellCtrls(cellCtrls),\n            showFullWidth: compDetails => this.showFullWidth(compDetails),\n            getFullWidthCellRenderer: () => this.getFullWidthCellRenderer(),\n            addOrRemoveCssClass: (name, on) => this.addOrRemoveCssClass(name, on),\n            setUserStyles: (styles) => addStylesToElement(eGui, styles),\n            setTop: top => style.top = top,\n            setTransform: transform => style.transform = transform,\n            setRowIndex: rowIndex => eGui.setAttribute('row-index', rowIndex),\n            setRowId: (rowId) => eGui.setAttribute('row-id', rowId),\n            setRowBusinessKey: businessKey => eGui.setAttribute('row-business-key', businessKey),\n        };\n        ctrl.setComp(compProxy, this.getGui(), containerType);\n        this.addDestroyFunc(() => {\n            ctrl.unsetComp(containerType);\n        });\n    }\n    getInitialStyle(containerType) {\n        const transform = this.rowCtrl.getInitialTransform(containerType);\n        const top = this.rowCtrl.getInitialRowTop(containerType);\n        return transform ? `transform: ${transform}` : `top: ${top}`;\n    }\n    showFullWidth(compDetails) {\n        const callback = (cellRenderer) => {\n            if (this.isAlive()) {\n                const eGui = cellRenderer.getGui();\n                this.getGui().appendChild(eGui);\n                this.rowCtrl.setupDetailRowAutoHeight(eGui);\n                this.setFullWidthRowComp(cellRenderer);\n            }\n            else {\n                this.beans.context.destroyBean(cellRenderer);\n            }\n        };\n        // if not in cache, create new one\n        const res = compDetails.newAgStackInstance();\n        if (!res) {\n            return;\n        }\n        res.then(callback);\n    }\n    setCellCtrls(cellCtrls) {\n        const cellsToRemove = Object.assign({}, this.cellComps);\n        cellCtrls.forEach(cellCtrl => {\n            const key = cellCtrl.getInstanceId();\n            const existingCellComp = this.cellComps[key];\n            if (existingCellComp == null) {\n                this.newCellComp(cellCtrl);\n            }\n            else {\n                cellsToRemove[key] = null;\n            }\n        });\n        const cellCompsToRemove = getAllValuesInObject(cellsToRemove)\n            .filter(cellComp => cellComp != null);\n        this.destroyCells(cellCompsToRemove);\n        this.ensureDomOrder(cellCtrls);\n    }\n    ensureDomOrder(cellCtrls) {\n        if (!this.domOrder) {\n            return;\n        }\n        const elementsInOrder = [];\n        cellCtrls.forEach(cellCtrl => {\n            const cellComp = this.cellComps[cellCtrl.getInstanceId()];\n            if (cellComp) {\n                elementsInOrder.push(cellComp.getGui());\n            }\n        });\n        setDomChildOrder(this.getGui(), elementsInOrder);\n    }\n    newCellComp(cellCtrl) {\n        const cellComp = new CellComp(this.beans, cellCtrl, this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());\n        this.cellComps[cellCtrl.getInstanceId()] = cellComp;\n        this.getGui().appendChild(cellComp.getGui());\n    }\n    destroy() {\n        super.destroy();\n        this.destroyAllCells();\n    }\n    destroyAllCells() {\n        const cellsToDestroy = getAllValuesInObject(this.cellComps).filter(cp => cp != null);\n        this.destroyCells(cellsToDestroy);\n    }\n    setFullWidthRowComp(fullWidthRowComponent) {\n        if (this.fullWidthCellRenderer) {\n            console.error('AG Grid - should not be setting fullWidthRowComponent twice');\n        }\n        this.fullWidthCellRenderer = fullWidthRowComponent;\n        this.addDestroyFunc(() => {\n            this.fullWidthCellRenderer = this.beans.context.destroyBean(this.fullWidthCellRenderer);\n        });\n    }\n    getFullWidthCellRenderer() {\n        return this.fullWidthCellRenderer;\n    }\n    destroyCells(cellComps) {\n        cellComps.forEach(cellComp => {\n            // could be old reference, ie removed cell\n            if (!cellComp) {\n                return;\n            }\n            // check cellComp belongs in this container\n            const instanceId = cellComp.getCtrl().getInstanceId();\n            if (this.cellComps[instanceId] !== cellComp) {\n                return;\n            }\n            cellComp.detach();\n            cellComp.destroy();\n            this.cellComps[instanceId] = null;\n        });\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../../widgets/component.mjs\";\nimport { RefSelector } from \"../../widgets/componentAnnotations.mjs\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context.mjs\";\nimport { getRowContainerTypeForName, RowContainerCtrl, RowContainerName } from \"./rowContainerCtrl.mjs\";\nimport { ensureDomOrder, insertWithDomOrder } from \"../../utils/dom.mjs\";\nimport { RowComp } from \"../../rendering/row/rowComp.mjs\";\nimport { getAllValuesInObject } from \"../../utils/object.mjs\";\nimport { setAriaRole } from \"../../utils/aria.mjs\";\nfunction templateFactory() {\n    const name = Component.elementGettingCreated.getAttribute('name');\n    const cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);\n    let res;\n    const centerTemplate = name === RowContainerName.CENTER ||\n        name === RowContainerName.TOP_CENTER ||\n        name === RowContainerName.STICKY_TOP_CENTER ||\n        name === RowContainerName.BOTTOM_CENTER;\n    if (centerTemplate) {\n        res = /* html */\n            `<div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                <div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>\n            </div>`;\n    }\n    else {\n        res = /* html */\n            `<div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>`;\n    }\n    return res;\n}\nexport class RowContainerComp extends Component {\n    constructor() {\n        super(templateFactory());\n        this.rowComps = {};\n        this.name = Component.elementGettingCreated.getAttribute('name');\n        this.type = getRowContainerTypeForName(this.name);\n    }\n    postConstruct() {\n        const compProxy = {\n            setViewportHeight: height => this.eViewport.style.height = height,\n            setRowCtrls: rowCtrls => this.setRowCtrls(rowCtrls),\n            setDomOrder: domOrder => {\n                this.domOrder = domOrder;\n            },\n            setContainerWidth: width => this.eContainer.style.width = width\n        };\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport);\n    }\n    preDestroy() {\n        // destroys all row comps\n        this.setRowCtrls([]);\n    }\n    setRowCtrls(rowCtrls) {\n        const oldRows = Object.assign({}, this.rowComps);\n        this.rowComps = {};\n        this.lastPlacedElement = null;\n        const processRow = (rowCon) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n            if (existingRowComp) {\n                this.rowComps[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            }\n            else {\n                // don't create new row comps for rows which are not displayed. still want the existing components\n                // as they may be animating out.\n                if (!rowCon.getRowNode().displayed) {\n                    return;\n                }\n                const rowComp = new RowComp(rowCon, this.beans, this.type);\n                this.rowComps[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n        rowCtrls.forEach(processRow);\n        getAllValuesInObject(oldRows).forEach(oldRowComp => {\n            this.eContainer.removeChild(oldRowComp.getGui());\n            oldRowComp.destroy();\n        });\n        setAriaRole(this.eContainer, rowCtrls.length ? \"rowgroup\" : \"presentation\");\n    }\n    appendRow(element) {\n        if (this.domOrder) {\n            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        }\n        else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n    ensureDomOrder(eRow) {\n        if (this.domOrder) {\n            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n}\n__decorate([\n    Autowired('beans')\n], RowContainerComp.prototype, \"beans\", void 0);\n__decorate([\n    RefSelector('eViewport')\n], RowContainerComp.prototype, \"eViewport\", void 0);\n__decorate([\n    RefSelector('eContainer')\n], RowContainerComp.prototype, \"eContainer\", void 0);\n__decorate([\n    PostConstruct\n], RowContainerComp.prototype, \"postConstruct\", null);\n__decorate([\n    PreDestroy\n], RowContainerComp.prototype, \"preDestroy\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DragAndDropService } from \"../../dragAndDrop/dragAndDropService.mjs\";\nimport { Autowired } from \"../../context/context.mjs\";\nexport class BodyDropPivotTarget {\n    constructor(pinned) {\n        this.columnsToAggregate = [];\n        this.columnsToGroup = [];\n        this.columnsToPivot = [];\n        this.pinned = pinned;\n    }\n    /** Callback for when drag enters */\n    onDragEnter(draggingEvent) {\n        this.clearColumnsList();\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gridOptionsService.get('functionsReadOnly')) {\n            return;\n        }\n        const dragColumns = draggingEvent.dragItem.columns;\n        if (!dragColumns) {\n            return;\n        }\n        dragColumns.forEach(column => {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) {\n                return;\n            }\n            if (column.isAnyFunctionActive()) {\n                return;\n            }\n            if (column.isAllowValue()) {\n                this.columnsToAggregate.push(column);\n            }\n            else if (column.isAllowRowGroup()) {\n                this.columnsToGroup.push(column);\n            }\n            else if (column.isAllowPivot()) {\n                this.columnsToPivot.push(column);\n            }\n        });\n    }\n    getIconName() {\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n        }\n        return null;\n    }\n    /** Callback for when drag leaves */\n    onDragLeave(draggingEvent) {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    }\n    clearColumnsList() {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    }\n    /** Callback for when dragging */\n    onDragging(draggingEvent) {\n    }\n    /** Callback for when drag stops */\n    onDragStop(draggingEvent) {\n        if (this.columnsToAggregate.length > 0) {\n            this.columnModel.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.columnModel.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.columnModel.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n        }\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], BodyDropPivotTarget.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], BodyDropPivotTarget.prototype, \"gridOptionsService\", void 0);\n","import { HorizontalDirection } from \"../constants/direction.mjs\";\nimport { areEqual, includes, last, sortNumerically } from \"../utils/array.mjs\";\nexport class ColumnMoveHelper {\n    static attemptMoveColumns(params) {\n        const { isFromHeader, hDirection, xPosition, fromEnter, fakeEvent, pinned, gridOptionsService, columnModel } = params;\n        const draggingLeft = hDirection === HorizontalDirection.Left;\n        const draggingRight = hDirection === HorizontalDirection.Right;\n        let { allMovingColumns } = params;\n        if (isFromHeader) {\n            // If the columns we're dragging are the only visible columns of their group, move the hidden ones too\n            let newCols = [];\n            allMovingColumns.forEach((col) => {\n                var _a;\n                let movingGroup = null;\n                let parent = col.getParent();\n                while (parent != null && parent.getDisplayedLeafColumns().length === 1) {\n                    movingGroup = parent;\n                    parent = parent.getParent();\n                }\n                if (movingGroup != null) {\n                    const isMarryChildren = !!((_a = movingGroup.getColGroupDef()) === null || _a === void 0 ? void 0 : _a.marryChildren);\n                    const columnsToMove = isMarryChildren\n                        // when marry children is true, we also have to move hidden\n                        // columns within the group, so grab them from the `providedColumnGroup`\n                        ? movingGroup.getProvidedColumnGroup().getLeafColumns()\n                        : movingGroup.getLeafColumns();\n                    columnsToMove.forEach((newCol) => {\n                        if (!newCols.includes(newCol)) {\n                            newCols.push(newCol);\n                        }\n                    });\n                }\n                else if (!newCols.includes(col)) {\n                    newCols.push(col);\n                }\n            });\n            allMovingColumns = newCols;\n        }\n        // it is important to sort the moving columns as they are in grid columns, as the list of moving columns\n        // could themselves be part of 'married children' groups, which means we need to maintain the order within\n        // the moving list.\n        const allMovingColumnsOrdered = allMovingColumns.slice();\n        columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);\n        const validMoves = this.calculateValidMoves({\n            movingCols: allMovingColumnsOrdered,\n            draggingRight,\n            xPosition,\n            pinned,\n            gridOptionsService,\n            columnModel\n        });\n        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move\n        // (ie left or right) to the mouse direction. however\n        const oldIndex = this.calculateOldIndex(allMovingColumnsOrdered, columnModel);\n        if (validMoves.length === 0) {\n            return;\n        }\n        const firstValidMove = validMoves[0];\n        // the two check below stop an error when the user grabs a group my a middle column, then\n        // it is possible the mouse pointer is to the right of a column while been dragged left.\n        // so we need to make sure that the mouse pointer is actually left of the left most column\n        // if moving left, and right of the right most column if moving right\n        // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from\n        // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should\n        // place the column to the RHS even if the mouse is moving left and the column is already on\n        // the LHS. otherwise we stick to the rule described above.\n        let constrainDirection = oldIndex !== null && !fromEnter;\n        // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag\n        if (isFromHeader) {\n            constrainDirection = oldIndex !== null;\n        }\n        // if the event was faked by a change in column pin state, then the original location of the column\n        // is not reliable for dictating where the column may now be placed.\n        if (constrainDirection && !fakeEvent) {\n            // only allow left drag if this column is moving left\n            if (draggingLeft && firstValidMove >= oldIndex) {\n                return;\n            }\n            // only allow right drag if this column is moving right\n            if (draggingRight && firstValidMove <= oldIndex) {\n                return;\n            }\n        }\n        // From when we find a move that passes all the rules\n        // Remember what that move would look like in terms of displayed cols\n        // keep going with further moves until we find a different result in displayed output\n        // In this way potentialMoves contains all potential moves over 'hidden' columns\n        const displayedCols = columnModel.getAllDisplayedColumns();\n        let potentialMoves = [];\n        let targetOrder = null;\n        for (let i = 0; i < validMoves.length; i++) {\n            const move = validMoves[i];\n            const order = columnModel.getProposedColumnOrder(allMovingColumnsOrdered, move);\n            if (!columnModel.doesOrderPassRules(order)) {\n                continue;\n            }\n            const displayedOrder = order.filter((col) => displayedCols.includes(col));\n            if (targetOrder === null) {\n                targetOrder = displayedOrder;\n            }\n            else if (!areEqual(displayedOrder, targetOrder)) {\n                break; // Stop looking for potential moves if the displayed result changes from the target\n            }\n            const fragCount = this.groupFragCount(order);\n            potentialMoves.push({ move, fragCount });\n        }\n        if (potentialMoves.length === 0) {\n            return;\n        }\n        // The best move is the move with least group fragmentation\n        potentialMoves.sort((a, b) => a.fragCount - b.fragCount);\n        return this.moveColumns(allMovingColumns, potentialMoves[0].move, 'uiColumnMoved', false, columnModel);\n    }\n    static moveColumns(columns, toIndex, source, finished, columnModel) {\n        columnModel.moveColumns(columns, toIndex, source, finished);\n        return finished ? null : { columns, toIndex };\n    }\n    // returns the index of the first column in the list ONLY if the cols are all beside\n    // each other. if the cols are not beside each other, then returns null\n    static calculateOldIndex(movingCols, columnModel) {\n        const gridCols = columnModel.getAllGridColumns();\n        const indexes = sortNumerically(movingCols.map(col => gridCols.indexOf(col)));\n        const firstIndex = indexes[0];\n        const lastIndex = last(indexes);\n        const spread = lastIndex - firstIndex;\n        const gapsExist = spread !== indexes.length - 1;\n        return gapsExist ? null : firstIndex;\n    }\n    // A measure of how fragmented in terms of groups an order of columns is\n    static groupFragCount(columns) {\n        function parents(col) {\n            let result = [];\n            let parent = col.getOriginalParent();\n            while (parent != null) {\n                result.push(parent);\n                parent = parent.getOriginalParent();\n            }\n            return result;\n        }\n        let count = 0;\n        for (let i = 0; i < columns.length - 1; i++) {\n            let a = parents(columns[i]);\n            let b = parents(columns[i + 1]);\n            // iterate over the longest one\n            [a, b] = a.length > b.length ? [a, b] : [b, a];\n            a.forEach((parent) => {\n                if (b.indexOf(parent) === -1) {\n                    count++; // More fragmented if other column doesn't share the parent\n                }\n            });\n        }\n        return count;\n    }\n    static calculateValidMoves(params) {\n        const { movingCols, draggingRight, xPosition, pinned, gridOptionsService, columnModel } = params;\n        const isMoveBlocked = gridOptionsService.get('suppressMovableColumns') || movingCols.some(col => col.getColDef().suppressMovable);\n        if (isMoveBlocked) {\n            return [];\n        }\n        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position\n        const allDisplayedCols = columnModel.getDisplayedColumns(pinned);\n        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,\n        // so the result we return has to be and index location for this list\n        const allGridCols = columnModel.getAllGridColumns();\n        const movingDisplayedCols = allDisplayedCols.filter(col => includes(movingCols, col));\n        const otherDisplayedCols = allDisplayedCols.filter(col => !includes(movingCols, col));\n        const otherGridCols = allGridCols.filter(col => !includes(movingCols, col));\n        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.\n        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving\n        // col between b and c (so that it is under the mouse position).\n        let displayIndex = 0;\n        let availableWidth = xPosition;\n        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to\n        // include the width of the moving columns\n        if (draggingRight) {\n            let widthOfMovingDisplayedCols = 0;\n            movingDisplayedCols.forEach(col => widthOfMovingDisplayedCols += col.getActualWidth());\n            availableWidth -= widthOfMovingDisplayedCols;\n        }\n        if (availableWidth > 0) {\n            // now count how many of the displayed columns will fit to the left\n            for (let i = 0; i < otherDisplayedCols.length; i++) {\n                const col = otherDisplayedCols[i];\n                availableWidth -= col.getActualWidth();\n                if (availableWidth < 0) {\n                    break;\n                }\n                displayIndex++;\n            }\n            // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works\n            if (draggingRight) {\n                displayIndex++;\n            }\n        }\n        // the display index is with respect to all the showing columns, however when we move, it's with\n        // respect to all grid columns, so we need to translate from display index to grid index\n        let firstValidMove;\n        if (displayIndex > 0) {\n            const leftColumn = otherDisplayedCols[displayIndex - 1];\n            firstValidMove = otherGridCols.indexOf(leftColumn) + 1;\n        }\n        else {\n            firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);\n            if (firstValidMove === -1) {\n                firstValidMove = 0;\n            }\n        }\n        const validMoves = [firstValidMove];\n        const numberComparator = (a, b) => a - b;\n        // add in other valid moves due to hidden columns and married children. for example, a particular\n        // move might break a group that has married children (so move isn't valid), however there could\n        // be hidden columns (not displayed) that we could jump over to make the move valid. because\n        // they are hidden, user doesn't see any different, however it allows moves that would otherwise\n        // not work. for example imagine a group with 9 columns and all columns are hidden except the\n        // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will\n        // be relative to the not-shown column, however we need to consider the move jumping over all the\n        // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the\n        // grid, there would be no way to put a column after it (as the grid would only consider beside the\n        // visible column, which would fail valid move rules).\n        if (draggingRight) {\n            // if dragging right, then we add all the additional moves to the right. so in other words\n            // if the next move is not valid, find the next move to the right that is valid.\n            let pointer = firstValidMove + 1;\n            const lastIndex = allGridCols.length - 1;\n            while (pointer <= lastIndex) {\n                validMoves.push(pointer);\n                pointer++;\n            }\n            // adding columns here means the order is now messed up\n            validMoves.sort(numberComparator);\n        }\n        else {\n            // if dragging left we do the reverse of dragging right, we add in all the valid moves to the\n            // left. however we also have to consider moves to the right for all hidden columns first.\n            // (this logic is hard to reason with, it was worked out with trial and error,\n            // more observation rather than science).\n            // add moves to the right\n            let pointer = firstValidMove;\n            const lastIndex = allGridCols.length - 1;\n            let displacedCol = allGridCols[pointer];\n            // takes into account visible=false and group=closed, ie it is not displayed\n            while (pointer <= lastIndex && allDisplayedCols.indexOf(displacedCol) < 0) {\n                pointer++;\n                validMoves.push(pointer);\n                displacedCol = allGridCols[pointer];\n            }\n            // add moves to the left\n            pointer = firstValidMove - 1;\n            const firstDisplayIndex = 0;\n            while (pointer >= firstDisplayIndex) {\n                validMoves.push(pointer);\n                pointer--;\n            }\n            // adding columns here means the order is now messed up\n            validMoves.sort(numberComparator).reverse();\n        }\n        return validMoves;\n    }\n    static normaliseX(x, pinned, fromKeyboard, gridOptionsService, ctrlsService) {\n        const eViewport = ctrlsService.getHeaderRowContainerCtrl(pinned).getViewport();\n        if (fromKeyboard) {\n            x -= eViewport.getBoundingClientRect().left;\n        }\n        // flip the coordinate if doing RTL\n        if (gridOptionsService.get('enableRtl')) {\n            const clientWidth = eViewport.clientWidth;\n            x = clientWidth - x;\n        }\n        // adjust for scroll only if centre container (the pinned containers don't scroll)\n        if (pinned == null) {\n            x += ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();\n        }\n        return x;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { DragAndDropService, DragSourceType } from \"../../dragAndDrop/dragAndDropService.mjs\";\nimport { missing, exists } from \"../../utils/generic.mjs\";\nimport { ColumnMoveHelper } from \"../columnMoveHelper.mjs\";\nimport { HorizontalDirection } from \"../../constants/direction.mjs\";\nexport class MoveColumnFeature {\n    constructor(pinned, eContainer) {\n        this.needToMoveLeft = false;\n        this.needToMoveRight = false;\n        this.lastMovedInfo = null;\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n        this.centerContainer = !exists(pinned);\n    }\n    init() {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n    getIconName() {\n        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n    }\n    onDragEnter(draggingEvent) {\n        // we do dummy drag, so make sure column appears in the right location when first placed\n        const columns = draggingEvent.dragItem.columns;\n        const dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n        if (dragCameFromToolPanel) {\n            // the if statement doesn't work if drag leaves grid, then enters again\n            this.setColumnsVisible(columns, true, \"uiColumnDragged\");\n        }\n        else {\n            // restore previous state of visible columns upon re-entering. this means if the user drags\n            // a group out, and then drags the group back in, only columns that were originally visible\n            // will be visible again. otherwise a group with three columns (but only two visible) could\n            // be dragged out, then when it's dragged in again, all three are visible. this stops that.\n            const visibleState = draggingEvent.dragItem.visibleState;\n            const visibleColumns = (columns || []).filter(column => visibleState[column.getId()]);\n            this.setColumnsVisible(visibleColumns, true, \"uiColumnDragged\");\n        }\n        this.setColumnsPinned(columns, this.pinned, \"uiColumnDragged\");\n        this.onDragging(draggingEvent, true, true);\n    }\n    onDragLeave() {\n        this.ensureIntervalCleared();\n        this.lastMovedInfo = null;\n    }\n    setColumnsVisible(columns, visible, source = \"api\") {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockVisible);\n            this.columnModel.setColumnsVisible(allowedCols, visible, source);\n        }\n    }\n    setColumnsPinned(columns, pinned, source = \"api\") {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockPinned);\n            this.columnModel.setColumnsPinned(allowedCols, pinned, source);\n        }\n    }\n    onDragStop() {\n        this.onDragging(this.lastDraggingEvent, false, true, true);\n        this.ensureIntervalCleared();\n        this.lastMovedInfo = null;\n    }\n    checkCenterForScrolling(xAdjustedForScroll) {\n        if (this.centerContainer) {\n            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)\n            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen\n            const firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();\n            const lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();\n            if (this.gridOptionsService.get('enableRtl')) {\n                this.needToMoveRight = xAdjustedForScroll < (firstVisiblePixel + 50);\n                this.needToMoveLeft = xAdjustedForScroll > (lastVisiblePixel - 50);\n            }\n            else {\n                this.needToMoveLeft = xAdjustedForScroll < (firstVisiblePixel + 50);\n                this.needToMoveRight = xAdjustedForScroll > (lastVisiblePixel - 50);\n            }\n            if (this.needToMoveLeft || this.needToMoveRight) {\n                this.ensureIntervalStarted();\n            }\n            else {\n                this.ensureIntervalCleared();\n            }\n        }\n    }\n    onDragging(draggingEvent = this.lastDraggingEvent, fromEnter = false, fakeEvent = false, finished = false) {\n        var _a;\n        if (finished) {\n            if (this.lastMovedInfo) {\n                const { columns, toIndex } = this.lastMovedInfo;\n                ColumnMoveHelper.moveColumns(columns, toIndex, 'uiColumnMoved', true, this.columnModel);\n            }\n            return;\n        }\n        this.lastDraggingEvent = draggingEvent;\n        // if moving up or down (ie not left or right) then do nothing\n        if (missing(draggingEvent.hDirection)) {\n            return;\n        }\n        const mouseX = ColumnMoveHelper.normaliseX(draggingEvent.x, this.pinned, false, this.gridOptionsService, this.ctrlsService);\n        // if the user is dragging into the panel, ie coming from the side panel into the main grid,\n        // we don't want to scroll the grid this time, it would appear like the table is jumping\n        // each time a column is dragged in.\n        if (!fromEnter) {\n            this.checkCenterForScrolling(mouseX);\n        }\n        const hDirection = this.normaliseDirection(draggingEvent.hDirection);\n        const dragSourceType = draggingEvent.dragSource.type;\n        const allMovingColumns = ((_a = draggingEvent.dragSource.getDragItem().columns) === null || _a === void 0 ? void 0 : _a.filter(col => {\n            if (col.getColDef().lockPinned) {\n                // if locked return true only if both col and container are same pin type.\n                // double equals (==) here on purpose so that null==undefined is true (for not pinned options)\n                return col.getPinned() == this.pinned;\n            }\n            // if not pin locked, then always allowed to be in this container\n            return true;\n        })) || [];\n        const lastMovedInfo = ColumnMoveHelper.attemptMoveColumns({\n            allMovingColumns,\n            isFromHeader: dragSourceType === DragSourceType.HeaderCell,\n            hDirection,\n            xPosition: mouseX,\n            pinned: this.pinned,\n            fromEnter,\n            fakeEvent,\n            gridOptionsService: this.gridOptionsService,\n            columnModel: this.columnModel\n        });\n        if (lastMovedInfo) {\n            this.lastMovedInfo = lastMovedInfo;\n        }\n    }\n    normaliseDirection(hDirection) {\n        if (this.gridOptionsService.get('enableRtl')) {\n            switch (hDirection) {\n                case HorizontalDirection.Left: return HorizontalDirection.Right;\n                case HorizontalDirection.Right: return HorizontalDirection.Left;\n                default: console.error(`AG Grid: Unknown direction ${hDirection}`);\n            }\n        }\n        else {\n            return hDirection;\n        }\n    }\n    ensureIntervalStarted() {\n        if (!this.movingIntervalId) {\n            this.intervalCount = 0;\n            this.failedMoveAttempts = 0;\n            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n            if (this.needToMoveLeft) {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);\n            }\n            else {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);\n            }\n        }\n    }\n    ensureIntervalCleared() {\n        if (this.movingIntervalId) {\n            window.clearInterval(this.movingIntervalId);\n            this.movingIntervalId = null;\n            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);\n        }\n    }\n    moveInterval() {\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n        let pixelsToMove;\n        this.intervalCount++;\n        pixelsToMove = 10 + (this.intervalCount * 5);\n        if (pixelsToMove > 100) {\n            pixelsToMove = 100;\n        }\n        let pixelsMoved = null;\n        const scrollFeature = this.gridBodyCon.getScrollFeature();\n        if (this.needToMoveLeft) {\n            pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);\n        }\n        else if (this.needToMoveRight) {\n            pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);\n        }\n        if (pixelsMoved !== 0) {\n            this.onDragging(this.lastDraggingEvent);\n            this.failedMoveAttempts = 0;\n        }\n        else {\n            // we count the failed move attempts. if we fail to move 7 times, then we pin the column.\n            // this is how we achieve pining by dragging the column to the edge of the grid.\n            this.failedMoveAttempts++;\n            const columns = this.lastDraggingEvent.dragItem.columns;\n            const columnsThatCanPin = columns.filter(c => !c.getColDef().lockPinned);\n            if (columnsThatCanPin.length > 0) {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);\n                if (this.failedMoveAttempts > 7) {\n                    const pinType = this.needToMoveLeft ? 'left' : 'right';\n                    this.setColumnsPinned(columnsThatCanPin, pinType, \"uiColumnDragged\");\n                    this.dragAndDropService.nudge();\n                }\n            }\n        }\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], MoveColumnFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], MoveColumnFeature.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], MoveColumnFeature.prototype, \"gridOptionsService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], MoveColumnFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], MoveColumnFeature.prototype, \"init\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { DragSourceType } from \"../../dragAndDrop/dragAndDropService.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { MoveColumnFeature } from \"./moveColumnFeature.mjs\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nexport class BodyDropTarget extends BeanStub {\n    constructor(pinned, eContainer) {\n        super();\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n    postConstruct() {\n        this.ctrlsService.whenReady(p => {\n            switch (this.pinned) {\n                case 'left':\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],\n                        [p.bottomLeftRowContainerCtrl.getContainerElement()],\n                        [p.topLeftRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                case 'right':\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],\n                        [p.bottomRightRowContainerCtrl.getContainerElement()],\n                        [p.topRightRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                default:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],\n                        [p.bottomCenterRowContainerCtrl.getViewportElement()],\n                        [p.topCenterRowContainerCtrl.getViewportElement()]\n                    ];\n                    break;\n            }\n        });\n    }\n    isInterestedIn(type) {\n        return type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gridOptionsService.get('allowDragFromColumnsToolPanel'));\n    }\n    getSecondaryContainers() {\n        return this.eSecondaryContainers;\n    }\n    getContainer() {\n        return this.eContainer;\n    }\n    init() {\n        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));\n        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));\n        this.dragAndDropService.addDropTarget(this);\n    }\n    getIconName() {\n        return this.currentDropListener.getIconName();\n    }\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    isDropColumnInPivotMode(draggingEvent) {\n        // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n        // a standard column move, however if it came from the toolpanel, then we are introducing\n        // dimensions or values to the grid\n        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n    }\n    onDragEnter(draggingEvent) {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;\n        this.currentDropListener.onDragEnter(draggingEvent);\n    }\n    onDragLeave(params) {\n        this.currentDropListener.onDragLeave(params);\n    }\n    onDragging(params) {\n        this.currentDropListener.onDragging(params);\n    }\n    onDragStop(params) {\n        this.currentDropListener.onDragStop(params);\n    }\n}\n__decorate([\n    Autowired('dragAndDropService')\n], BodyDropTarget.prototype, \"dragAndDropService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], BodyDropTarget.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], BodyDropTarget.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], BodyDropTarget.prototype, \"postConstruct\", null);\n__decorate([\n    PostConstruct\n], BodyDropTarget.prototype, \"init\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct, PreDestroy } from \"../../../context/context.mjs\";\nimport { removeAriaSort, setAriaDescription, setAriaSort } from \"../../../utils/aria.mjs\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations.mjs\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp.mjs\";\nexport class HeaderCellComp extends AbstractHeaderCellComp {\n    constructor(ctrl) {\n        super(HeaderCellComp.TEMPLATE, ctrl);\n        this.headerCompVersion = 0;\n        this.column = ctrl.getColumnGroupChild();\n        this.pinned = ctrl.getPinned();\n    }\n    postConstruct() {\n        const eGui = this.getGui();\n        const setAttribute = (name, value) => {\n            if (value != null && value != '') {\n                eGui.setAttribute(name, value);\n            }\n            else {\n                eGui.removeAttribute(name);\n            }\n        };\n        setAttribute('col-id', this.column.getColId());\n        const compProxy = {\n            setWidth: width => eGui.style.width = width,\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setAriaDescription: label => setAriaDescription(eGui, label),\n            setAriaSort: sort => sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui),\n            setUserCompDetails: compDetails => this.setUserCompDetails(compDetails),\n            getUserCompInstance: () => this.headerComp\n        };\n        this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper);\n        const selectAllGui = this.ctrl.getSelectAllGui();\n        this.eResize.insertAdjacentElement('afterend', selectAllGui);\n    }\n    destroyHeaderComp() {\n        if (this.headerComp) {\n            this.eHeaderCompWrapper.removeChild(this.headerCompGui);\n            this.headerComp = this.destroyBean(this.headerComp);\n            this.headerCompGui = undefined;\n        }\n    }\n    setUserCompDetails(compDetails) {\n        this.headerCompVersion++;\n        const versionCopy = this.headerCompVersion;\n        compDetails.newAgStackInstance().then(comp => this.afterCompCreated(versionCopy, comp));\n    }\n    afterCompCreated(version, headerComp) {\n        if (version != this.headerCompVersion || !this.isAlive()) {\n            this.destroyBean(headerComp);\n            return;\n        }\n        this.destroyHeaderComp();\n        this.headerComp = headerComp;\n        this.headerCompGui = headerComp.getGui();\n        this.eHeaderCompWrapper.appendChild(this.headerCompGui);\n        this.ctrl.setDragSource(this.getGui());\n    }\n}\nHeaderCellComp.TEMPLATE = `<div class=\"ag-header-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            <div ref=\"eHeaderCompWrapper\" class=\"ag-header-cell-comp-wrapper\" role=\"presentation\"></div>\n        </div>`;\n__decorate([\n    RefSelector('eResize')\n], HeaderCellComp.prototype, \"eResize\", void 0);\n__decorate([\n    RefSelector('eHeaderCompWrapper')\n], HeaderCellComp.prototype, \"eHeaderCompWrapper\", void 0);\n__decorate([\n    PostConstruct\n], HeaderCellComp.prototype, \"postConstruct\", null);\n__decorate([\n    PreDestroy\n], HeaderCellComp.prototype, \"destroyHeaderComp\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../../../context/context.mjs\";\nimport { setDisplayed } from \"../../../utils/dom.mjs\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations.mjs\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp.mjs\";\nexport class HeaderGroupCellComp extends AbstractHeaderCellComp {\n    constructor(ctrl) {\n        super(HeaderGroupCellComp.TEMPLATE, ctrl);\n    }\n    postConstruct() {\n        const eGui = this.getGui();\n        const setAttribute = (key, value) => value != undefined ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);\n        eGui.setAttribute(\"col-id\", this.ctrl.getColId());\n        const compProxy = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setResizableDisplayed: (displayed) => setDisplayed(this.eResize, displayed),\n            setWidth: width => eGui.style.width = width,\n            setAriaExpanded: expanded => setAttribute('aria-expanded', expanded),\n            setUserCompDetails: details => this.setUserCompDetails(details),\n            getUserCompInstance: () => this.headerGroupComp,\n        };\n        this.ctrl.setComp(compProxy, eGui, this.eResize);\n    }\n    setUserCompDetails(details) {\n        details.newAgStackInstance().then(comp => this.afterHeaderCompCreated(comp));\n    }\n    afterHeaderCompCreated(headerGroupComp) {\n        const destroyFunc = () => this.destroyBean(headerGroupComp);\n        if (!this.isAlive()) {\n            destroyFunc();\n            return;\n        }\n        const eGui = this.getGui();\n        const eHeaderGroupGui = headerGroupComp.getGui();\n        eGui.appendChild(eHeaderGroupGui);\n        this.addDestroyFunc(destroyFunc);\n        this.headerGroupComp = headerGroupComp;\n        this.ctrl.setDragSource(eGui);\n    }\n}\nHeaderGroupCellComp.TEMPLATE = `<div class=\"ag-header-group-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`;\n__decorate([\n    Autowired('userComponentFactory')\n], HeaderGroupCellComp.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    RefSelector('eResize')\n], HeaderGroupCellComp.prototype, \"eResize\", void 0);\n__decorate([\n    PostConstruct\n], HeaderGroupCellComp.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct, PreDestroy } from '../../context/context.mjs';\nimport { setAriaRowIndex } from '../../utils/aria.mjs';\nimport { setDomChildOrder } from '../../utils/dom.mjs';\nimport { getAllValuesInObject, iterateObject } from '../../utils/object.mjs';\nimport { Component } from '../../widgets/component.mjs';\nimport { HeaderCellComp } from '../cells/column/headerCellComp.mjs';\nimport { HeaderGroupCellComp } from '../cells/columnGroup/headerGroupCellComp.mjs';\nimport { HeaderFilterCellComp } from '../cells/floatingFilter/headerFilterCellComp.mjs';\nexport var HeaderRowType;\n(function (HeaderRowType) {\n    HeaderRowType[\"COLUMN_GROUP\"] = \"group\";\n    HeaderRowType[\"COLUMN\"] = \"column\";\n    HeaderRowType[\"FLOATING_FILTER\"] = \"filter\";\n})(HeaderRowType || (HeaderRowType = {}));\nexport class HeaderRowComp extends Component {\n    constructor(ctrl) {\n        super();\n        this.headerComps = {};\n        this.ctrl = ctrl;\n        this.setTemplate(/* html */ `<div class=\"${this.ctrl.getHeaderRowClass()}\" role=\"row\"></div>`);\n    }\n    //noinspection JSUnusedLocalSymbols\n    init() {\n        this.getGui().style.transform = this.ctrl.getTransform();\n        setAriaRowIndex(this.getGui(), this.ctrl.getAriaRowIndex());\n        const compProxy = {\n            setHeight: height => this.getGui().style.height = height,\n            setTop: top => this.getGui().style.top = top,\n            setHeaderCtrls: (ctrls, forceOrder) => this.setHeaderCtrls(ctrls, forceOrder),\n            setWidth: width => this.getGui().style.width = width,\n        };\n        this.ctrl.setComp(compProxy);\n    }\n    destroyHeaderCtrls() {\n        this.setHeaderCtrls([], false);\n    }\n    setHeaderCtrls(ctrls, forceOrder) {\n        if (!this.isAlive()) {\n            return;\n        }\n        const oldComps = this.headerComps;\n        this.headerComps = {};\n        ctrls.forEach(ctrl => {\n            const id = ctrl.getInstanceId();\n            let comp = oldComps[id];\n            delete oldComps[id];\n            if (comp == null) {\n                comp = this.createHeaderComp(ctrl);\n                this.getGui().appendChild(comp.getGui());\n            }\n            this.headerComps[id] = comp;\n        });\n        iterateObject(oldComps, (id, comp) => {\n            this.getGui().removeChild(comp.getGui());\n            this.destroyBean(comp);\n        });\n        if (forceOrder) {\n            const comps = getAllValuesInObject(this.headerComps);\n            // ordering the columns by left position orders them in the order they appear on the screen\n            comps.sort((a, b) => {\n                const leftA = a.getCtrl().getColumnGroupChild().getLeft();\n                const leftB = b.getCtrl().getColumnGroupChild().getLeft();\n                return leftA - leftB;\n            });\n            const elementsInOrder = comps.map(c => c.getGui());\n            setDomChildOrder(this.getGui(), elementsInOrder);\n        }\n    }\n    createHeaderComp(headerCtrl) {\n        let result;\n        switch (this.ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP:\n                result = new HeaderGroupCellComp(headerCtrl);\n                break;\n            case HeaderRowType.FLOATING_FILTER:\n                result = new HeaderFilterCellComp(headerCtrl);\n                break;\n            default:\n                result = new HeaderCellComp(headerCtrl);\n                break;\n        }\n        this.createBean(result);\n        result.setParentComponent(this);\n        return result;\n    }\n}\n__decorate([\n    PostConstruct\n], HeaderRowComp.prototype, \"init\", null);\n__decorate([\n    PreDestroy\n], HeaderRowComp.prototype, \"destroyHeaderCtrls\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../../context/beanStub.mjs\";\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { isUserSuppressingHeaderKeyboardEvent } from \"../../../utils/keyboard.mjs\";\nimport { KeyCode } from \"../.././../constants/keyCode.mjs\";\nimport { HorizontalDirection } from \"../../../constants/direction.mjs\";\nimport { CssClassApplier } from \"../cssClassApplier.mjs\";\nimport { setAriaColIndex } from \"../../../utils/aria.mjs\";\nimport { Events } from \"../../../eventKeys.mjs\";\nlet instanceIdSequence = 0;\nexport class AbstractHeaderCellCtrl extends BeanStub {\n    constructor(columnGroupChild, parentRowCtrl) {\n        super();\n        this.resizeToggleTimeout = 0;\n        this.resizeMultiplier = 1;\n        this.resizeFeature = null;\n        this.lastFocusEvent = null;\n        this.dragSource = null;\n        this.columnGroupChild = columnGroupChild;\n        this.parentRowCtrl = parentRowCtrl;\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = columnGroupChild.getUniqueId() + '-' + instanceIdSequence++;\n    }\n    shouldStopEventPropagation(e) {\n        const { headerRowIndex, column } = this.focusService.getFocusedHeader();\n        return isUserSuppressingHeaderKeyboardEvent(this.gridOptionsService, e, headerRowIndex, column);\n    }\n    getWrapperHasFocus() {\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n        return activeEl === this.eGui;\n    }\n    setGui(eGui) {\n        this.eGui = eGui;\n        this.addDomData();\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.onDisplayedColumnsChanged();\n    }\n    onDisplayedColumnsChanged() {\n        if (!this.comp || !this.column) {\n            return;\n        }\n        this.refreshFirstAndLastStyles();\n        this.refreshAriaColIndex();\n    }\n    refreshFirstAndLastStyles() {\n        const { comp, column, beans } = this;\n        CssClassApplier.refreshFirstAndLastStyles(comp, column, beans.columnModel);\n    }\n    refreshAriaColIndex() {\n        const { beans, column } = this;\n        const colIdx = beans.columnModel.getAriaColumnIndex(column);\n        setAriaColIndex(this.eGui, colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n    addResizeAndMoveKeyboardListeners() {\n        if (!this.resizeFeature) {\n            return;\n        }\n        this.addManagedListener(this.eGui, 'keydown', this.onGuiKeyDown.bind(this));\n        this.addManagedListener(this.eGui, 'keyup', this.onGuiKeyUp.bind(this));\n    }\n    onGuiKeyDown(e) {\n        var _a;\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n        const isLeftOrRight = e.key === KeyCode.LEFT || e.key === KeyCode.RIGHT;\n        if (this.isResizing) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n        if (\n        // if elements within the header are focused, we don't process the event\n        activeEl !== this.eGui ||\n            // if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event\n            (!e.shiftKey && !e.altKey)) {\n            return;\n        }\n        if (this.isResizing || isLeftOrRight) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n        if (!isLeftOrRight) {\n            return;\n        }\n        const isLeft = (e.key === KeyCode.LEFT) !== this.gridOptionsService.get('enableRtl');\n        const direction = HorizontalDirection[isLeft ? 'Left' : 'Right'];\n        if (e.altKey) {\n            this.isResizing = true;\n            this.resizeMultiplier += 1;\n            this.resizeHeader(direction, e.shiftKey);\n            (_a = this.resizeFeature) === null || _a === void 0 ? void 0 : _a.toggleColumnResizing(true);\n        }\n        else {\n            this.moveHeader(direction);\n        }\n    }\n    onGuiKeyUp() {\n        if (!this.isResizing) {\n            return;\n        }\n        if (this.resizeToggleTimeout) {\n            window.clearTimeout(this.resizeToggleTimeout);\n            this.resizeToggleTimeout = 0;\n        }\n        this.isResizing = false;\n        this.resizeMultiplier = 1;\n        this.resizeToggleTimeout = setTimeout(() => {\n            var _a;\n            (_a = this.resizeFeature) === null || _a === void 0 ? void 0 : _a.toggleColumnResizing(false);\n        }, 150);\n    }\n    handleKeyDown(e) {\n        const wrapperHasFocus = this.getWrapperHasFocus();\n        switch (e.key) {\n            case KeyCode.PAGE_DOWN:\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                if (wrapperHasFocus) {\n                    e.preventDefault();\n                }\n        }\n    }\n    addDomData() {\n        const key = AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL;\n        this.gridOptionsService.setDomData(this.eGui, key, this);\n        this.addDestroyFunc(() => this.gridOptionsService.setDomData(this.eGui, key, null));\n    }\n    getGui() {\n        return this.eGui;\n    }\n    focus(event) {\n        if (!this.eGui) {\n            return false;\n        }\n        this.lastFocusEvent = event || null;\n        this.eGui.focus();\n        return true;\n    }\n    getRowIndex() {\n        return this.parentRowCtrl.getRowIndex();\n    }\n    getParentRowCtrl() {\n        return this.parentRowCtrl;\n    }\n    getPinned() {\n        return this.parentRowCtrl.getPinned();\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    getColumnGroupChild() {\n        return this.columnGroupChild;\n    }\n    removeDragSource() {\n        if (this.dragSource) {\n            this.dragAndDropService.removeDragSource(this.dragSource);\n            this.dragSource = null;\n        }\n    }\n    destroy() {\n        super.destroy();\n        this.removeDragSource();\n        this.comp = null;\n        this.column = null;\n        this.resizeFeature = null;\n        this.lastFocusEvent = null;\n        this.columnGroupChild = null;\n        this.parentRowCtrl = null;\n        this.eGui = null;\n    }\n}\nAbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL = 'headerCtrl';\n__decorate([\n    Autowired('focusService')\n], AbstractHeaderCellCtrl.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('beans')\n], AbstractHeaderCellCtrl.prototype, \"beans\", void 0);\n__decorate([\n    Autowired('userComponentFactory')\n], AbstractHeaderCellCtrl.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], AbstractHeaderCellCtrl.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], AbstractHeaderCellCtrl.prototype, \"dragAndDropService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column } from \"../../entities/column.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { PostConstruct } from \"../../context/context.mjs\";\nimport { setAriaColSpan } from \"../../utils/aria.mjs\";\nimport { last } from \"../../utils/array.mjs\";\nimport { exists } from \"../../utils/generic.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nexport class SetLeftFeature extends BeanStub {\n    constructor(columnOrGroup, eCell, beans, colsSpanning) {\n        super();\n        this.columnOrGroup = columnOrGroup;\n        this.eCell = eCell;\n        this.ariaEl = this.eCell.querySelector('[role=columnheader]') || this.eCell;\n        this.colsSpanning = colsSpanning;\n        this.beans = beans;\n    }\n    setColsSpanning(colsSpanning) {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    }\n    getColumnOrGroup() {\n        if (this.beans.gridOptionsService.get('enableRtl') && this.colsSpanning) {\n            return last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    }\n    postConstruct() {\n        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\n        // so additionally update left if any column width changes.\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));\n        // setting left has a dependency on print layout\n        this.addManagedPropertyListener('domLayout', this.onLeftChanged.bind(this));\n    }\n    setLeftFirstTime() {\n        const suppressMoveAnimation = this.beans.gridOptionsService.get('suppressColumnMoveAnimation');\n        const oldLeftExists = exists(this.columnOrGroup.getOldLeft());\n        const animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        }\n        else {\n            this.onLeftChanged();\n        }\n    }\n    animateInLeft() {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        const oldLeft = colOrGroup.getOldLeft();\n        const oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);\n        const actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n        this.setLeft(oldActualLeft);\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = actualLeft;\n        this.beans.columnAnimationService.executeNextVMTurn(() => {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (this.actualLeft === actualLeft) {\n                this.setLeft(actualLeft);\n            }\n        });\n    }\n    onLeftChanged() {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n        this.setLeft(this.actualLeft);\n    }\n    modifyLeftForPrintLayout(colOrGroup, leftPosition) {\n        const printLayout = this.beans.gridOptionsService.isDomLayout('print');\n        if (!printLayout) {\n            return leftPosition;\n        }\n        if (colOrGroup.getPinned() === 'left') {\n            return leftPosition;\n        }\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n        if (colOrGroup.getPinned() === 'right') {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n        // is in body\n        return leftWidth + leftPosition;\n    }\n    setLeft(value) {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (exists(value)) {\n            this.eCell.style.left = `${value}px`;\n        }\n        let indexColumn;\n        if (this.columnOrGroup instanceof Column) {\n            indexColumn = this.columnOrGroup;\n        }\n        else {\n            const columnGroup = this.columnOrGroup;\n            const children = columnGroup.getLeafColumns();\n            if (!children.length) {\n                return;\n            }\n            if (children.length > 1) {\n                setAriaColSpan(this.ariaEl, children.length);\n            }\n            indexColumn = children[0];\n        }\n    }\n}\n__decorate([\n    PostConstruct\n], SetLeftFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nexport class HoverFeature extends BeanStub {\n    constructor(columns, element) {\n        super();\n        this.columns = columns;\n        this.element = element;\n    }\n    postConstruct() {\n        if (this.gridOptionsService.get('columnHoverHighlight')) {\n            this.addMouseHoverListeners();\n        }\n    }\n    addMouseHoverListeners() {\n        this.addManagedListener(this.element, 'mouseout', this.onMouseOut.bind(this));\n        this.addManagedListener(this.element, 'mouseover', this.onMouseOver.bind(this));\n    }\n    onMouseOut() {\n        this.columnHoverService.clearMouseOver();\n    }\n    onMouseOver() {\n        this.columnHoverService.setMouseOver(this.columns);\n    }\n}\n__decorate([\n    Autowired('columnHoverService')\n], HoverFeature.prototype, \"columnHoverService\", void 0);\n__decorate([\n    PostConstruct\n], HoverFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AbstractHeaderCellCtrl } from \"../abstractCell/abstractHeaderCellCtrl.mjs\";\nimport { KeyCode } from '../../../constants/keyCode.mjs';\nimport { Autowired } from '../../../context/context.mjs';\nimport { Column } from '../../../entities/column.mjs';\nimport { Events } from '../../../events.mjs';\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature.mjs';\nimport { isElementChildOfClass } from '../../../utils/dom.mjs';\nimport { createIconNoSpan } from '../../../utils/icon.mjs';\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature.mjs';\nimport { HoverFeature } from '../hoverFeature.mjs';\nimport { setAriaLabel } from \"../../../utils/aria.mjs\";\nexport class HeaderFilterCellCtrl extends AbstractHeaderCellCtrl {\n    constructor(column, parentRowCtrl) {\n        super(column, parentRowCtrl);\n        this.iconCreated = false;\n        this.column = column;\n    }\n    setComp(comp, eGui, eButtonShowMainFilter, eFloatingFilterBody) {\n        this.comp = comp;\n        this.eButtonShowMainFilter = eButtonShowMainFilter;\n        this.eFloatingFilterBody = eFloatingFilterBody;\n        this.setGui(eGui);\n        this.setupActive();\n        this.setupWidth();\n        this.setupLeft();\n        this.setupHover();\n        this.setupFocus();\n        this.setupAria();\n        this.setupFilterButton();\n        this.setupUserComp();\n        this.setupSyncWithFilter();\n        this.setupUi();\n        this.addManagedListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));\n        this.setupFilterChangedListener();\n        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));\n    }\n    // empty abstract method\n    resizeHeader() { }\n    // empty abstract method\n    moveHeader() { }\n    setupActive() {\n        const colDef = this.column.getColDef();\n        const filterExists = !!colDef.filter;\n        const floatingFilterExists = !!colDef.floatingFilter;\n        this.active = filterExists && floatingFilterExists;\n    }\n    setupUi() {\n        this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active);\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-full-body', this.suppressFilterButton);\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-body', !this.suppressFilterButton);\n        if (!this.active || this.iconCreated) {\n            return;\n        }\n        const eMenuIcon = createIconNoSpan('filter', this.gridOptionsService, this.column);\n        if (eMenuIcon) {\n            this.iconCreated = true;\n            this.eButtonShowMainFilter.appendChild(eMenuIcon);\n        }\n    }\n    setupFocus() {\n        this.createManagedBean(new ManagedFocusFeature(this.eGui, {\n            shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this),\n            onFocusIn: this.onFocusIn.bind(this)\n        }));\n    }\n    setupAria() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        setAriaLabel(this.eButtonShowMainFilter, localeTextFunc('ariaFilterMenuOpen', 'Open Filter Menu'));\n    }\n    onTabKeyDown(e) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n        const wrapperHasFocus = activeEl === this.eGui;\n        if (wrapperHasFocus) {\n            return;\n        }\n        const nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);\n        if (nextFocusableEl) {\n            this.beans.headerNavigationService.scrollToColumn(this.column);\n            e.preventDefault();\n            nextFocusableEl.focus();\n            return;\n        }\n        const nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);\n        if (!nextFocusableColumn) {\n            return;\n        }\n        if (this.focusService.focusHeaderPosition({\n            headerPosition: {\n                headerRowIndex: this.getParentRowCtrl().getRowIndex(),\n                column: nextFocusableColumn\n            },\n            event: e\n        })) {\n            e.preventDefault();\n        }\n    }\n    findNextColumnWithFloatingFilter(backwards) {\n        const columnModel = this.beans.columnModel;\n        let nextCol = this.column;\n        do {\n            nextCol = backwards\n                ? columnModel.getDisplayedColBefore(nextCol)\n                : columnModel.getDisplayedColAfter(nextCol);\n            if (!nextCol) {\n                break;\n            }\n        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);\n        return nextCol;\n    }\n    handleKeyDown(e) {\n        super.handleKeyDown(e);\n        const wrapperHasFocus = this.getWrapperHasFocus();\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!wrapperHasFocus) {\n                    e.preventDefault();\n                }\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n                if (wrapperHasFocus) {\n                    return;\n                }\n                e.stopPropagation();\n            case KeyCode.ENTER:\n                if (wrapperHasFocus) {\n                    if (this.focusService.focusInto(this.eGui)) {\n                        e.preventDefault();\n                    }\n                }\n                break;\n            case KeyCode.ESCAPE:\n                if (!wrapperHasFocus) {\n                    this.eGui.focus();\n                }\n        }\n    }\n    onFocusIn(e) {\n        const isRelatedWithin = this.eGui.contains(e.relatedTarget);\n        // when the focus is already within the component,\n        // we default to the browser's behavior\n        if (isRelatedWithin) {\n            return;\n        }\n        const notFromHeaderWrapper = !!e.relatedTarget && !e.relatedTarget.classList.contains('ag-floating-filter');\n        const fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget, 'ag-floating-filter');\n        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {\n            const lastFocusEvent = this.lastFocusEvent;\n            const fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);\n            if (lastFocusEvent && fromTab) {\n                const shouldFocusLast = lastFocusEvent.shiftKey;\n                this.focusService.focusInto(this.eGui, shouldFocusLast);\n            }\n        }\n        const rowIndex = this.getRowIndex();\n        this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n    }\n    setupHover() {\n        this.createManagedBean(new HoverFeature([this.column], this.eGui));\n        const listener = () => {\n            if (!this.gridOptionsService.get('columnHoverHighlight')) {\n                return;\n            }\n            const hovered = this.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', hovered);\n        };\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);\n        listener();\n    }\n    setupLeft() {\n        const setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);\n        this.createManagedBean(setLeftFeature);\n    }\n    setupFilterButton() {\n        const colDef = this.column.getColDef();\n        // this is unusual - we need a params value OUTSIDE the component the params are for.\n        // the params are for the floating filter component, but this property is actually for the wrapper.\n        this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;\n    }\n    setupUserComp() {\n        if (!this.active) {\n            return;\n        }\n        const compDetails = this.filterManager.getFloatingFilterCompDetails(this.column, () => this.showParentFilter());\n        if (compDetails) {\n            this.setCompDetails(compDetails);\n        }\n    }\n    setCompDetails(compDetails) {\n        this.userCompDetails = compDetails;\n        this.comp.setCompDetails(compDetails);\n    }\n    showParentFilter() {\n        const eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;\n        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, 'floatingFilter', 'filterMenuTab', ['filterMenuTab']);\n    }\n    setupSyncWithFilter() {\n        if (!this.active) {\n            return;\n        }\n        const syncWithFilter = (filterChangedEvent) => {\n            const compPromise = this.comp.getFloatingFilterComp();\n            if (!compPromise) {\n                return;\n            }\n            compPromise.then(comp => {\n                if (comp) {\n                    const parentModel = this.filterManager.getCurrentFloatingFilterParentModel(this.column);\n                    comp.onParentModelChanged(parentModel, filterChangedEvent);\n                }\n            });\n        };\n        this.destroySyncListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);\n        if (this.filterManager.isFilterActive(this.column)) {\n            syncWithFilter(null);\n        }\n    }\n    setupWidth() {\n        const listener = () => {\n            const width = `${this.column.getActualWidth()}px`;\n            this.comp.setWidth(width);\n        };\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);\n        listener();\n    }\n    setupFilterChangedListener() {\n        if (this.active) {\n            this.destroyFilterChangedListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, this.updateFilterButton.bind(this));\n        }\n    }\n    updateFilterButton() {\n        if (!this.suppressFilterButton && this.comp) {\n            this.comp.setButtonWrapperDisplayed(this.filterManager.isFilterAllowed(this.column));\n        }\n    }\n    onColDefChanged() {\n        var _a, _b;\n        const wasActive = this.active;\n        this.setupActive();\n        const becomeActive = !wasActive && this.active;\n        if (wasActive && !this.active) {\n            (_a = this.destroySyncListener) === null || _a === void 0 ? void 0 : _a.call(this);\n            (_b = this.destroyFilterChangedListener) === null || _b === void 0 ? void 0 : _b.call(this);\n        }\n        const newCompDetails = this.active\n            ? this.filterManager.getFloatingFilterCompDetails(this.column, () => this.showParentFilter())\n            : null;\n        const compPromise = this.comp.getFloatingFilterComp();\n        if (!compPromise || !newCompDetails) {\n            this.updateCompDetails(newCompDetails, becomeActive);\n        }\n        else {\n            compPromise.then(compInstance => {\n                var _a;\n                if (!compInstance || this.filterManager.areFilterCompsDifferent((_a = this.userCompDetails) !== null && _a !== void 0 ? _a : null, newCompDetails)) {\n                    this.updateCompDetails(newCompDetails, becomeActive);\n                }\n                else {\n                    this.updateFloatingFilterParams(newCompDetails);\n                }\n            });\n        }\n    }\n    updateCompDetails(compDetails, becomeActive) {\n        this.setCompDetails(compDetails);\n        // filter button and UI can change based on params, so always want to update\n        this.setupFilterButton();\n        this.setupUi();\n        if (becomeActive) {\n            this.setupSyncWithFilter();\n            this.setupFilterChangedListener();\n        }\n    }\n    updateFloatingFilterParams(userCompDetails) {\n        var _a;\n        if (!userCompDetails) {\n            return;\n        }\n        const params = userCompDetails.params;\n        (_a = this.comp.getFloatingFilterComp()) === null || _a === void 0 ? void 0 : _a.then(floatingFilter => {\n            if ((floatingFilter === null || floatingFilter === void 0 ? void 0 : floatingFilter.onParamsUpdated) && typeof floatingFilter.onParamsUpdated === 'function') {\n                floatingFilter.onParamsUpdated(params);\n            }\n        });\n    }\n    destroy() {\n        super.destroy();\n        this.eButtonShowMainFilter = null;\n        this.eFloatingFilterBody = null;\n        this.userCompDetails = null;\n        this.destroySyncListener = null;\n        this.destroyFilterChangedListener = null;\n    }\n}\n__decorate([\n    Autowired('filterManager')\n], HeaderFilterCellCtrl.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('columnHoverService')\n], HeaderFilterCellCtrl.prototype, \"columnHoverService\", void 0);\n__decorate([\n    Autowired('menuFactory')\n], HeaderFilterCellCtrl.prototype, \"menuFactory\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../../context/context.mjs\";\nimport { getInnerWidth, setDisplayed } from \"../../../utils/dom.mjs\";\nimport { TouchListener } from \"../../../widgets/touchListener.mjs\";\nexport class ResizeFeature extends BeanStub {\n    constructor(pinned, column, eResize, comp, ctrl) {\n        super();\n        this.pinned = pinned;\n        this.column = column;\n        this.eResize = eResize;\n        this.comp = comp;\n        this.ctrl = ctrl;\n    }\n    postConstruct() {\n        const destroyResizeFuncs = [];\n        let canResize;\n        let canAutosize;\n        const addResize = () => {\n            setDisplayed(this.eResize, canResize);\n            if (!canResize) {\n                return;\n            }\n            const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n                eResizeBar: this.eResize,\n                onResizeStart: this.onResizeStart.bind(this),\n                onResizing: this.onResizing.bind(this, false),\n                onResizeEnd: this.onResizing.bind(this, true)\n            });\n            destroyResizeFuncs.push(finishedWithResizeFunc);\n            if (canAutosize) {\n                const skipHeaderOnAutoSize = this.gridOptionsService.get('skipHeaderOnAutoSize');\n                const autoSizeColListener = () => {\n                    this.columnModel.autoSizeColumn(this.column, skipHeaderOnAutoSize, \"uiColumnResized\");\n                };\n                this.eResize.addEventListener('dblclick', autoSizeColListener);\n                const touchListener = new TouchListener(this.eResize);\n                touchListener.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n                destroyResizeFuncs.push(() => {\n                    this.eResize.removeEventListener('dblclick', autoSizeColListener);\n                    touchListener.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n                    touchListener.destroy();\n                });\n            }\n        };\n        const removeResize = () => {\n            destroyResizeFuncs.forEach(f => f());\n            destroyResizeFuncs.length = 0;\n        };\n        const refresh = () => {\n            const resize = this.column.isResizable();\n            const autoSize = !this.gridOptionsService.get('suppressAutoSize') && !this.column.getColDef().suppressAutoSize;\n            const propertyChange = resize !== canResize || autoSize !== canAutosize;\n            if (propertyChange) {\n                canResize = resize;\n                canAutosize = autoSize;\n                removeResize();\n                addResize();\n            }\n        };\n        refresh();\n        this.addDestroyFunc(removeResize);\n        this.ctrl.addRefreshFunction(refresh);\n    }\n    onResizing(finished, resizeAmount) {\n        const { column: key, lastResizeAmount, resizeStartWidth } = this;\n        const resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);\n        const newWidth = resizeStartWidth + resizeAmountNormalised;\n        const columnWidths = [{ key, newWidth }];\n        if (this.column.getPinned()) {\n            const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n            const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n            const bodyWidth = getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;\n            if (leftWidth + rightWidth + (resizeAmountNormalised - lastResizeAmount) > bodyWidth) {\n                return;\n            }\n        }\n        this.lastResizeAmount = resizeAmountNormalised;\n        this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, \"uiColumnResized\");\n        if (finished) {\n            this.toggleColumnResizing(false);\n        }\n    }\n    onResizeStart(shiftKey) {\n        this.resizeStartWidth = this.column.getActualWidth();\n        this.lastResizeAmount = 0;\n        this.resizeWithShiftKey = shiftKey;\n        this.toggleColumnResizing(true);\n    }\n    toggleColumnResizing(resizing) {\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\n    }\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?\n    normaliseResizeAmount(dragChange) {\n        let result = dragChange;\n        const notPinningLeft = this.pinned !== 'left';\n        const pinningRight = this.pinned === 'right';\n        if (this.gridOptionsService.get('enableRtl')) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (notPinningLeft) {\n                result *= -1;\n            }\n        }\n        else {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            if (pinningRight) {\n                result *= -1;\n            }\n        }\n        return result;\n    }\n}\n__decorate([\n    Autowired('horizontalResizeService')\n], ResizeFeature.prototype, \"horizontalResizeService\", void 0);\n__decorate([\n    Autowired('pinnedWidthService')\n], ResizeFeature.prototype, \"pinnedWidthService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], ResizeFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], ResizeFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], ResizeFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../../context/beanStub.mjs\";\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { Events } from \"../../../events.mjs\";\nimport { setAriaHidden, setAriaRole } from \"../../../utils/aria.mjs\";\nimport { AgCheckbox } from \"../../../widgets/agCheckbox.mjs\";\nexport class SelectAllFeature extends BeanStub {\n    constructor(column) {\n        super();\n        this.cbSelectAllVisible = false;\n        this.processingEventFromCheckbox = false;\n        this.column = column;\n    }\n    onSpaceKeyDown(e) {\n        const checkbox = this.cbSelectAll;\n        const eDocument = this.gridOptionsService.getDocument();\n        if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {\n            e.preventDefault();\n            checkbox.setValue(!checkbox.getValue());\n        }\n    }\n    getCheckboxGui() {\n        return this.cbSelectAll.getGui();\n    }\n    setComp(ctrl) {\n        this.headerCellCtrl = ctrl;\n        this.cbSelectAll = this.createManagedBean(new AgCheckbox());\n        this.cbSelectAll.addCssClass('ag-header-select-all');\n        setAriaRole(this.cbSelectAll.getGui(), 'presentation');\n        this.showOrHideSelectAll();\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));\n        this.addManagedListener(this.cbSelectAll, Events.EVENT_FIELD_VALUE_CHANGED, this.onCbSelectAll.bind(this));\n        setAriaHidden(this.cbSelectAll.getGui(), true);\n        this.cbSelectAll.getInputElement().setAttribute('tabindex', '-1');\n        this.refreshSelectAllLabel();\n    }\n    onNewColumnsLoaded() {\n        this.showOrHideSelectAll();\n    }\n    onDisplayedColumnsChanged() {\n        if (!this.isAlive()) {\n            return;\n        }\n        this.showOrHideSelectAll();\n    }\n    showOrHideSelectAll() {\n        this.cbSelectAllVisible = this.isCheckboxSelection();\n        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible, { skipAriaHidden: true });\n        if (this.cbSelectAllVisible) {\n            // in case user is trying this feature with the wrong model type\n            this.checkRightRowModelType('selectAllCheckbox');\n            // in case user is trying this feature with the wrong model type\n            this.checkSelectionType('selectAllCheckbox');\n            // make sure checkbox is showing the right state\n            this.updateStateOfCheckbox();\n        }\n        this.refreshSelectAllLabel();\n    }\n    onModelChanged() {\n        if (!this.cbSelectAllVisible) {\n            return;\n        }\n        this.updateStateOfCheckbox();\n    }\n    onSelectionChanged() {\n        if (!this.cbSelectAllVisible) {\n            return;\n        }\n        this.updateStateOfCheckbox();\n    }\n    updateStateOfCheckbox() {\n        if (this.processingEventFromCheckbox) {\n            return;\n        }\n        this.processingEventFromCheckbox = true;\n        const allSelected = this.selectionService.getSelectAllState(this.isFilteredOnly(), this.isCurrentPageOnly());\n        this.cbSelectAll.setValue(allSelected);\n        this.refreshSelectAllLabel();\n        this.processingEventFromCheckbox = false;\n    }\n    refreshSelectAllLabel() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const checked = this.cbSelectAll.getValue();\n        const ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');\n        const ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');\n        if (!this.cbSelectAllVisible) {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', null);\n        }\n        else {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', `${ariaLabel} (${ariaStatus})`);\n        }\n        this.cbSelectAll.setInputAriaLabel(`${ariaLabel} (${ariaStatus})`);\n        this.headerCellCtrl.refreshAriaDescription();\n    }\n    checkSelectionType(feature) {\n        const isMultiSelect = this.gridOptionsService.get('rowSelection') === 'multiple';\n        if (!isMultiSelect) {\n            console.warn(`AG Grid: ${feature} is only available if using 'multiple' rowSelection.`);\n            return false;\n        }\n        return true;\n    }\n    checkRightRowModelType(feature) {\n        const rowModelType = this.rowModel.getType();\n        const rowModelMatches = rowModelType === 'clientSide' || rowModelType === 'serverSide';\n        if (!rowModelMatches) {\n            console.warn(`AG Grid: ${feature} is only available if using 'clientSide' or 'serverSide' rowModelType, you are using ${rowModelType}.`);\n            return false;\n        }\n        return true;\n    }\n    onCbSelectAll() {\n        if (this.processingEventFromCheckbox) {\n            return;\n        }\n        if (!this.cbSelectAllVisible) {\n            return;\n        }\n        const value = this.cbSelectAll.getValue();\n        const justFiltered = this.isFilteredOnly();\n        const justCurrentPage = this.isCurrentPageOnly();\n        let source = 'uiSelectAll';\n        if (justCurrentPage) {\n            source = 'uiSelectAllCurrentPage';\n        }\n        else if (justFiltered) {\n            source = 'uiSelectAllFiltered';\n        }\n        const params = {\n            source,\n            justFiltered,\n            justCurrentPage,\n        };\n        if (value) {\n            this.selectionService.selectAllRowNodes(params);\n        }\n        else {\n            this.selectionService.deselectAllRowNodes(params);\n        }\n    }\n    isCheckboxSelection() {\n        let result = this.column.getColDef().headerCheckboxSelection;\n        if (typeof result === 'function') {\n            const func = result;\n            const params = {\n                column: this.column,\n                colDef: this.column.getColDef(),\n                columnApi: this.gridOptionsService.columnApi,\n                api: this.gridOptionsService.api,\n                context: this.gridOptionsService.context\n            };\n            result = func(params);\n        }\n        if (result) {\n            return this.checkRightRowModelType('headerCheckboxSelection') && this.checkSelectionType('headerCheckboxSelection');\n        }\n        return false;\n    }\n    isFilteredOnly() {\n        return !!this.column.getColDef().headerCheckboxSelectionFilteredOnly;\n    }\n    isCurrentPageOnly() {\n        return !!this.column.getColDef().headerCheckboxSelectionCurrentPageOnly;\n    }\n}\n__decorate([\n    Autowired('rowModel')\n], SelectAllFeature.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('selectionService')\n], SelectAllFeature.prototype, \"selectionService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyCode } from '../../../constants/keyCode.mjs';\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { DragAndDropService, DragSourceType } from \"../../../dragAndDrop/dragAndDropService.mjs\";\nimport { Column } from \"../../../entities/column.mjs\";\nimport { Events } from \"../../../eventKeys.mjs\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature.mjs\";\nimport { getAriaSortState } from \"../../../utils/aria.mjs\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature.mjs\";\nimport { TooltipFeature } from \"../../../widgets/tooltipFeature.mjs\";\nimport { AbstractHeaderCellCtrl } from \"../abstractCell/abstractHeaderCellCtrl.mjs\";\nimport { CssClassApplier } from \"../cssClassApplier.mjs\";\nimport { HoverFeature } from \"../hoverFeature.mjs\";\nimport { ResizeFeature } from \"./resizeFeature.mjs\";\nimport { SelectAllFeature } from \"./selectAllFeature.mjs\";\nimport { getElementSize, getInnerWidth } from \"../../../utils/dom.mjs\";\nimport { ColumnMoveHelper } from \"../../columnMoveHelper.mjs\";\nimport { HorizontalDirection } from \"../../../constants/direction.mjs\";\nexport class HeaderCellCtrl extends AbstractHeaderCellCtrl {\n    constructor(column, parentRowCtrl) {\n        super(column, parentRowCtrl);\n        this.refreshFunctions = [];\n        this.userHeaderClasses = new Set();\n        this.ariaDescriptionProperties = new Map();\n        this.column = column;\n    }\n    setComp(comp, eGui, eResize, eHeaderCompWrapper) {\n        this.comp = comp;\n        this.setGui(eGui);\n        this.updateState();\n        this.setupWidth();\n        this.setupMovingCss();\n        this.setupMenuClass();\n        this.setupSortableClass();\n        this.setupWrapTextClass();\n        this.refreshSpanHeaderHeight();\n        this.setupAutoHeight(eHeaderCompWrapper);\n        this.addColumnHoverListener();\n        this.setupFilterClass();\n        this.setupClassesFromColDef();\n        this.setupTooltip();\n        this.addActiveHeaderMouseListeners();\n        this.setupSelectAll();\n        this.setupUserComp();\n        this.refreshAria();\n        this.resizeFeature = this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));\n        this.createManagedBean(new HoverFeature([this.column], eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(new ManagedFocusFeature(eGui, {\n            shouldStopEventPropagation: e => this.shouldStopEventPropagation(e),\n            onTabKeyDown: () => null,\n            handleKeyDown: this.handleKeyDown.bind(this),\n            onFocusIn: this.onFocusIn.bind(this),\n            onFocusOut: this.onFocusOut.bind(this)\n        }));\n        this.addResizeAndMoveKeyboardListeners();\n        this.addManagedPropertyListeners(['suppressMovableColumns', 'suppressMenuHide', 'suppressAggFuncInHeader'], this.refresh.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.refresh.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));\n    }\n    resizeHeader(direction, shiftKey) {\n        var _a, _b;\n        if (!this.column.isResizable()) {\n            return;\n        }\n        const pinned = this.column.getPinned();\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const actualWidth = this.column.getActualWidth();\n        const minWidth = (_a = this.column.getMinWidth()) !== null && _a !== void 0 ? _a : 0;\n        const maxWidth = (_b = this.column.getMaxWidth()) !== null && _b !== void 0 ? _b : Number.MAX_SAFE_INTEGER;\n        let isLeft = direction === HorizontalDirection.Left;\n        if (pinned) {\n            if (isRtl !== (pinned === 'right')) {\n                isLeft = !isLeft;\n            }\n        }\n        const diff = (isLeft ? -1 : 1) * this.resizeMultiplier;\n        const newWidth = Math.min(Math.max(actualWidth + diff, minWidth), maxWidth);\n        if (pinned) {\n            const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n            const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n            const bodyWidth = getInnerWidth(this.ctrlsService.getGridBodyCtrl().getBodyViewportElement()) - 50;\n            if (leftWidth + rightWidth + diff > bodyWidth) {\n                return;\n            }\n        }\n        this.columnModel.setColumnWidths([{ key: this.column, newWidth }], shiftKey, true);\n    }\n    moveHeader(hDirection) {\n        const { eGui, column, columnModel, gridOptionsService, ctrlsService } = this;\n        const pinned = this.getPinned();\n        const left = eGui.getBoundingClientRect().left;\n        const width = column.getActualWidth();\n        const isRtl = gridOptionsService.get('enableRtl');\n        const isLeft = hDirection === HorizontalDirection.Left !== isRtl;\n        const xPosition = ColumnMoveHelper.normaliseX(isLeft ? (left - 20) : (left + width + 20), pinned, true, gridOptionsService, ctrlsService);\n        ColumnMoveHelper.attemptMoveColumns({\n            allMovingColumns: [column],\n            isFromHeader: true,\n            hDirection,\n            xPosition,\n            pinned,\n            fromEnter: false,\n            fakeEvent: false,\n            gridOptionsService,\n            columnModel\n        });\n        ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(column, 'auto');\n    }\n    setupUserComp() {\n        const compDetails = this.lookupUserCompDetails();\n        this.setCompDetails(compDetails);\n    }\n    setCompDetails(compDetails) {\n        this.userCompDetails = compDetails;\n        this.comp.setUserCompDetails(compDetails);\n    }\n    lookupUserCompDetails() {\n        const params = this.createParams();\n        const colDef = this.column.getColDef();\n        return this.userComponentFactory.getHeaderCompDetails(colDef, params);\n    }\n    createParams() {\n        const params = {\n            column: this.column,\n            displayName: this.displayName,\n            enableSorting: this.column.isSortable(),\n            enableMenu: this.menuEnabled,\n            showColumnMenu: (source) => {\n                this.gridApi.showColumnMenuAfterButtonClick(this.column, source);\n            },\n            progressSort: (multiSort) => {\n                this.sortController.progressSort(this.column, !!multiSort, \"uiColumnSorted\");\n            },\n            setSort: (sort, multiSort) => {\n                this.sortController.setSortForColumn(this.column, sort, !!multiSort, \"uiColumnSorted\");\n            },\n            api: this.gridApi,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n            eGridHeader: this.getGui()\n        };\n        return params;\n    }\n    setupSelectAll() {\n        this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));\n        this.selectAllFeature.setComp(this);\n    }\n    getSelectAllGui() {\n        return this.selectAllFeature.getCheckboxGui();\n    }\n    handleKeyDown(e) {\n        super.handleKeyDown(e);\n        if (e.key === KeyCode.SPACE) {\n            this.selectAllFeature.onSpaceKeyDown(e);\n        }\n        if (e.key === KeyCode.ENTER) {\n            this.onEnterKeyDown(e);\n        }\n    }\n    onEnterKeyDown(e) {\n        /// THIS IS BAD - we are assuming the header is not a user provided comp\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp) {\n            return;\n        }\n        if (e.ctrlKey || e.metaKey) {\n            if (this.menuEnabled && headerComp.showMenu) {\n                e.preventDefault();\n                headerComp.showMenu();\n            }\n        }\n        else if (this.sortable) {\n            const multiSort = e.shiftKey;\n            this.sortController.progressSort(this.column, multiSort, \"uiColumnSorted\");\n        }\n    }\n    isMenuEnabled() {\n        return this.menuEnabled;\n    }\n    onFocusIn(e) {\n        if (!this.getGui().contains(e.relatedTarget)) {\n            const rowIndex = this.getRowIndex();\n            this.focusService.setFocusedHeader(rowIndex, this.column);\n        }\n        this.setActiveHeader(true);\n    }\n    onFocusOut(e) {\n        if (this.getGui().contains(e.relatedTarget)) {\n            return;\n        }\n        this.setActiveHeader(false);\n    }\n    setupTooltip() {\n        const tooltipCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getGui: () => this.eGui,\n            getLocation: () => 'header',\n            getTooltipValue: () => {\n                const res = this.column.getColDef().headerTooltip;\n                return res;\n            },\n        };\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n        tooltipFeature.setComp(this.eGui);\n        this.refreshFunctions.push(() => tooltipFeature.refreshToolTip());\n    }\n    setupClassesFromColDef() {\n        const refreshHeaderClasses = () => {\n            const colDef = this.column.getColDef();\n            const classes = CssClassApplier.getHeaderClassesFromColDef(colDef, this.gridOptionsService, this.column, null);\n            const oldClasses = this.userHeaderClasses;\n            this.userHeaderClasses = new Set(classes);\n            classes.forEach(c => {\n                if (oldClasses.has(c)) {\n                    // class already added, no need to apply it, but remove from old set\n                    oldClasses.delete(c);\n                }\n                else {\n                    // class new since last time, so apply it\n                    this.comp.addOrRemoveCssClass(c, true);\n                }\n            });\n            // now old set only has classes that were applied last time, but not this time, so remove them\n            oldClasses.forEach(c => this.comp.addOrRemoveCssClass(c, false));\n        };\n        this.refreshFunctions.push(refreshHeaderClasses);\n        refreshHeaderClasses();\n    }\n    setDragSource(eSource) {\n        this.dragSourceElement = eSource;\n        this.removeDragSource();\n        if (!eSource || !this.draggable) {\n            return;\n        }\n        const { column, columnModel, displayName, dragAndDropService, gridOptionsService } = this;\n        let hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource = this.dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eSource,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(column),\n            dragItemName: displayName,\n            onDragStarted: () => {\n                hideColumnOnExit = !gridOptionsService.get('suppressDragLeaveHidesColumns');\n                column.setMoving(true, \"uiColumnMoved\");\n            },\n            onDragStopped: () => column.setMoving(false, \"uiColumnMoved\"),\n            onGridEnter: (dragItem) => {\n                var _a;\n                if (hideColumnOnExit) {\n                    const unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(col => !col.getColDef().lockVisible)) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, true, \"uiColumnMoved\");\n                }\n            },\n            onGridExit: (dragItem) => {\n                var _a;\n                if (hideColumnOnExit) {\n                    const unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(col => !col.getColDef().lockVisible)) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, false, \"uiColumnMoved\");\n                }\n            },\n        };\n        dragAndDropService.addDragSource(dragSource, true);\n    }\n    createDragItem(column) {\n        const visibleState = {};\n        visibleState[column.getId()] = column.isVisible();\n        return {\n            columns: [column],\n            visibleState: visibleState\n        };\n    }\n    updateState() {\n        const colDef = this.column.getColDef();\n        this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;\n        this.sortable = this.column.isSortable();\n        this.displayName = this.calculateDisplayName();\n        this.draggable = this.workOutDraggable();\n    }\n    addRefreshFunction(func) {\n        this.refreshFunctions.push(func);\n    }\n    refresh() {\n        this.updateState();\n        this.refreshHeaderComp();\n        this.refreshAria();\n        this.refreshFunctions.forEach(f => f());\n    }\n    refreshHeaderComp() {\n        const newCompDetails = this.lookupUserCompDetails();\n        const compInstance = this.comp.getUserCompInstance();\n        // only try refresh if old comp exists adn it is the correct type\n        const attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;\n        const headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;\n        if (headerCompRefreshed) {\n            // we do this as a refresh happens after colDefs change, and it's possible the column has had it's\n            // draggable property toggled. no need to call this if not refreshing, as setDragSource is done\n            // as part of appendHeaderComp\n            this.setDragSource(this.dragSourceElement);\n        }\n        else {\n            this.setCompDetails(newCompDetails);\n        }\n    }\n    attemptHeaderCompRefresh(params) {\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp) {\n            return false;\n        }\n        // if no refresh method, then we want to replace the headerComp\n        if (!headerComp.refresh) {\n            return false;\n        }\n        const res = headerComp.refresh(params);\n        return res;\n    }\n    calculateDisplayName() {\n        return this.columnModel.getDisplayNameForColumn(this.column, 'header', true);\n    }\n    checkDisplayName() {\n        // display name can change if aggFunc different, eg sum(Gold) is now max(Gold)\n        if (this.displayName !== this.calculateDisplayName()) {\n            this.refresh();\n        }\n    }\n    workOutDraggable() {\n        const colDef = this.column.getColDef();\n        const isSuppressMovableColumns = this.gridOptionsService.get('suppressMovableColumns');\n        const colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;\n        // we should still be allowed drag the column, even if it can't be moved, if the column\n        // can be dragged to a rowGroup or pivot drop zone\n        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;\n    }\n    onColumnRowGroupChanged() {\n        this.checkDisplayName();\n    }\n    onColumnPivotChanged() {\n        this.checkDisplayName();\n    }\n    onColumnValueChanged() {\n        this.checkDisplayName();\n    }\n    setupWidth() {\n        const listener = () => {\n            const columnWidth = this.column.getActualWidth();\n            this.comp.setWidth(`${columnWidth}px`);\n        };\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);\n        listener();\n    }\n    setupMovingCss() {\n        const listener = () => {\n            // this is what makes the header go dark when it is been moved (gives impression to\n            // user that the column was picked up).\n            this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n        };\n        this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);\n        listener();\n    }\n    setupMenuClass() {\n        const listener = () => {\n            this.comp.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());\n        };\n        this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);\n        listener();\n    }\n    setupSortableClass() {\n        const updateSortableCssClass = () => {\n            this.comp.addOrRemoveCssClass('ag-header-cell-sortable', !!this.sortable);\n        };\n        updateSortableCssClass();\n        this.addRefreshFunction(updateSortableCssClass);\n        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, this.refreshAriaSort.bind(this));\n    }\n    setupFilterClass() {\n        const listener = () => {\n            const isFilterActive = this.column.isFilterActive();\n            this.comp.addOrRemoveCssClass('ag-header-cell-filtered', isFilterActive);\n            this.refreshAria();\n        };\n        this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);\n        listener();\n    }\n    setupWrapTextClass() {\n        const listener = () => {\n            const wrapText = !!this.column.getColDef().wrapHeaderText;\n            this.comp.addOrRemoveCssClass('ag-header-cell-wrap-text', wrapText);\n        };\n        listener();\n        this.addRefreshFunction(listener);\n    }\n    onDisplayedColumnsChanged() {\n        super.onDisplayedColumnsChanged();\n        if (!this.isAlive()) {\n            return;\n        }\n        this.onHeaderHeightChanged();\n    }\n    onHeaderHeightChanged() {\n        this.refreshSpanHeaderHeight();\n    }\n    refreshSpanHeaderHeight() {\n        const { eGui, column, comp, columnModel, gridOptionsService } = this;\n        if (!column.isSpanHeaderHeight()) {\n            eGui.style.removeProperty('top');\n            eGui.style.removeProperty('height');\n            comp.addOrRemoveCssClass('ag-header-span-height', false);\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\n            return;\n        }\n        const { numberOfParents, isSpanningTotal } = this.getColumnGroupPaddingInfo();\n        comp.addOrRemoveCssClass('ag-header-span-height', numberOfParents > 0);\n        const headerHeight = columnModel.getColumnHeaderRowHeight();\n        if (numberOfParents === 0) {\n            // if spanning has stopped then need to reset these values.\n            comp.addOrRemoveCssClass('ag-header-span-total', false);\n            eGui.style.setProperty('top', `0px`);\n            eGui.style.setProperty('height', `${headerHeight}px`);\n            return;\n        }\n        comp.addOrRemoveCssClass('ag-header-span-total', isSpanningTotal);\n        const pivotMode = gridOptionsService.get('pivotMode');\n        const groupHeaderHeight = pivotMode\n            ? columnModel.getPivotGroupHeaderHeight()\n            : columnModel.getGroupHeaderHeight();\n        const extraHeight = numberOfParents * groupHeaderHeight;\n        eGui.style.setProperty('top', `${-extraHeight}px`);\n        eGui.style.setProperty('height', `${headerHeight + extraHeight}px`);\n    }\n    getColumnGroupPaddingInfo() {\n        let parent = this.column.getParent();\n        if (!parent || !parent.isPadding()) {\n            return { numberOfParents: 0, isSpanningTotal: false };\n        }\n        const numberOfParents = parent.getPaddingLevel() + 1;\n        let isSpanningTotal = true;\n        while (parent) {\n            if (!parent.isPadding()) {\n                isSpanningTotal = false;\n                break;\n            }\n            parent = parent.getParent();\n        }\n        return { numberOfParents, isSpanningTotal };\n    }\n    setupAutoHeight(wrapperElement) {\n        const measureHeight = (timesCalled) => {\n            if (!this.isAlive()) {\n                return;\n            }\n            const { paddingTop, paddingBottom, borderBottomWidth, borderTopWidth } = getElementSize(this.getGui());\n            const extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;\n            const wrapperHeight = wrapperElement.offsetHeight;\n            const autoHeight = wrapperHeight + extraHeight;\n            if (timesCalled < 5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gridOptionsService.getDocument();\n                const notYetInDom = !doc || !doc.contains(wrapperElement);\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight == 0;\n                if (notYetInDom || possiblyNoContentYet) {\n                    this.beans.frameworkOverrides.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n            this.columnModel.setColumnHeaderHeight(this.column, autoHeight);\n        };\n        let isMeasuring = false;\n        let stopResizeObserver;\n        const checkMeasuring = () => {\n            const newValue = this.column.isAutoHeaderHeight();\n            if (newValue && !isMeasuring) {\n                startMeasuring();\n            }\n            if (!newValue && isMeasuring) {\n                stopMeasuring();\n            }\n        };\n        const startMeasuring = () => {\n            isMeasuring = true;\n            measureHeight(0);\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', true);\n            stopResizeObserver = this.resizeObserverService.observeResize(wrapperElement, () => measureHeight(0));\n        };\n        const stopMeasuring = () => {\n            isMeasuring = false;\n            if (stopResizeObserver) {\n                stopResizeObserver();\n            }\n            this.comp.addOrRemoveCssClass('ag-header-cell-auto-height', false);\n            stopResizeObserver = undefined;\n        };\n        checkMeasuring();\n        this.addDestroyFunc(() => stopMeasuring());\n        // In theory we could rely on the resize observer for everything - but since it's debounced\n        // it can be a little janky for smooth movement. in this case its better to react to our own events\n        // And unfortunately we cant _just_ rely on our own events, since custom components can change whenever\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, () => isMeasuring && measureHeight(0));\n        // Displaying the sort icon changes the available area for text, so sort changes can affect height\n        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, () => {\n            // Rendering changes for sort, happen after the event... not ideal\n            if (isMeasuring) {\n                this.beans.frameworkOverrides.setTimeout(() => measureHeight(0));\n            }\n        });\n        this.addRefreshFunction(checkMeasuring);\n    }\n    refreshAriaSort() {\n        if (this.sortable) {\n            const translate = this.localeService.getLocaleTextFunc();\n            const sort = this.sortController.getDisplaySortForColumn(this.column) || null;\n            this.comp.setAriaSort(getAriaSortState(sort));\n            this.setAriaDescriptionProperty('sort', translate('ariaSortableColumn', 'Press ENTER to sort.'));\n        }\n        else {\n            this.comp.setAriaSort();\n            this.setAriaDescriptionProperty('sort', null);\n        }\n    }\n    refreshAriaMenu() {\n        if (this.menuEnabled) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.setAriaDescriptionProperty('menu', translate('ariaMenuColumn', 'Press CTRL ENTER to open column menu.'));\n        }\n        else {\n            this.setAriaDescriptionProperty('menu', null);\n        }\n    }\n    refreshAriaFiltered() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const isFilterActive = this.column.isFilterActive();\n        if (isFilterActive) {\n            this.setAriaDescriptionProperty('filter', translate('ariaColumnFiltered', 'Column Filtered'));\n        }\n        else {\n            this.setAriaDescriptionProperty('filter', null);\n        }\n    }\n    setAriaDescriptionProperty(property, value) {\n        if (value != null) {\n            this.ariaDescriptionProperties.set(property, value);\n        }\n        else {\n            this.ariaDescriptionProperties.delete(property);\n        }\n    }\n    refreshAriaDescription() {\n        let ariaDescription = null;\n        for (const [key, value] of this.ariaDescriptionProperties) {\n            // always announce filtered state first\n            if (key === 'filter') {\n                ariaDescription = `${value} ${ariaDescription || ''}`;\n            }\n            else {\n                ariaDescription = `${ariaDescription || ''} ${value}`;\n            }\n        }\n        this.comp.setAriaDescription(ariaDescription !== null && ariaDescription !== void 0 ? ariaDescription : undefined);\n    }\n    refreshAria() {\n        this.refreshAriaSort();\n        this.refreshAriaMenu();\n        this.refreshAriaFiltered();\n        this.refreshAriaDescription();\n    }\n    addColumnHoverListener() {\n        const listener = () => {\n            if (!this.gridOptionsService.get('columnHoverHighlight')) {\n                return;\n            }\n            const isHovered = this.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', isHovered);\n        };\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);\n        listener();\n    }\n    getColId() {\n        return this.column.getColId();\n    }\n    addActiveHeaderMouseListeners() {\n        const listener = (e) => this.setActiveHeader(e.type === 'mouseenter');\n        this.addManagedListener(this.getGui(), 'mouseenter', listener);\n        this.addManagedListener(this.getGui(), 'mouseleave', listener);\n    }\n    setActiveHeader(active) {\n        this.comp.addOrRemoveCssClass('ag-header-active', active);\n    }\n    destroy() {\n        super.destroy();\n        this.refreshFunctions = null;\n        this.selectAllFeature = null;\n        this.dragSourceElement = null;\n        this.userCompDetails = null;\n        this.userHeaderClasses = null;\n        this.ariaDescriptionProperties = null;\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], HeaderCellCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('pinnedWidthService')\n], HeaderCellCtrl.prototype, \"pinnedWidthService\", void 0);\n__decorate([\n    Autowired('columnHoverService')\n], HeaderCellCtrl.prototype, \"columnHoverService\", void 0);\n__decorate([\n    Autowired('sortController')\n], HeaderCellCtrl.prototype, \"sortController\", void 0);\n__decorate([\n    Autowired('menuFactory')\n], HeaderCellCtrl.prototype, \"menuFactory\", void 0);\n__decorate([\n    Autowired('resizeObserverService')\n], HeaderCellCtrl.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Autowired('gridApi')\n], HeaderCellCtrl.prototype, \"gridApi\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../../context/context.mjs\";\nexport class GroupResizeFeature extends BeanStub {\n    constructor(comp, eResize, pinned, columnGroup) {\n        super();\n        this.eResize = eResize;\n        this.comp = comp;\n        this.pinned = pinned;\n        this.columnGroup = columnGroup;\n    }\n    postConstruct() {\n        if (!this.columnGroup.isResizable()) {\n            this.comp.setResizableDisplayed(false);\n            return;\n        }\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n        this.addDestroyFunc(finishedWithResizeFunc);\n        if (!this.gridOptionsService.get('suppressAutoSize')) {\n            const skipHeaderOnAutoSize = this.gridOptionsService.get('skipHeaderOnAutoSize');\n            this.eResize.addEventListener('dblclick', () => {\n                // get list of all the column keys we are responsible for\n                const keys = [];\n                const leafCols = this.columnGroup.getDisplayedLeafColumns();\n                leafCols.forEach((column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n                if (keys.length > 0) {\n                    this.columnModel.autoSizeColumns({\n                        columns: keys,\n                        skipHeader: skipHeaderOnAutoSize,\n                        stopAtGroup: this.columnGroup,\n                        source: 'uiColumnResized'\n                    });\n                }\n                this.resizeLeafColumnsToFit('uiColumnResized');\n            });\n        }\n    }\n    onResizeStart(shiftKey) {\n        const initialValues = this.getInitialValues(shiftKey);\n        this.storeLocalValues(initialValues);\n        this.toggleColumnResizing(true);\n    }\n    onResizing(finished, resizeAmount, source = 'uiColumnResized') {\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n        const width = this.resizeStartWidth + resizeAmountNormalised;\n        this.resizeColumnsFromLocalValues(width, source, finished);\n    }\n    getInitialValues(shiftKey) {\n        const columnsToResize = this.getColumnsToResize();\n        const resizeStartWidth = this.getInitialSizeOfColumns(columnsToResize);\n        const resizeRatios = this.getSizeRatiosOfColumns(columnsToResize, resizeStartWidth);\n        const columnSizeAndRatios = {\n            columnsToResize,\n            resizeStartWidth,\n            resizeRatios\n        };\n        let groupAfter = null;\n        if (shiftKey) {\n            groupAfter = this.columnModel.getDisplayedGroupAfter(this.columnGroup);\n        }\n        if (groupAfter) {\n            const takeFromLeafCols = groupAfter.getDisplayedLeafColumns();\n            const groupAfterColumns = columnSizeAndRatios.groupAfterColumns = takeFromLeafCols.filter(col => col.isResizable());\n            const groupAfterStartWidth = columnSizeAndRatios.groupAfterStartWidth = this.getInitialSizeOfColumns(groupAfterColumns);\n            columnSizeAndRatios.groupAfterRatios = this.getSizeRatiosOfColumns(groupAfterColumns, groupAfterStartWidth);\n        }\n        else {\n            columnSizeAndRatios.groupAfterColumns = undefined;\n            columnSizeAndRatios.groupAfterStartWidth = undefined;\n            columnSizeAndRatios.groupAfterRatios = undefined;\n        }\n        return columnSizeAndRatios;\n    }\n    storeLocalValues(initialValues) {\n        const { columnsToResize, resizeStartWidth, resizeRatios, groupAfterColumns, groupAfterStartWidth, groupAfterRatios } = initialValues;\n        this.resizeCols = columnsToResize;\n        this.resizeStartWidth = resizeStartWidth;\n        this.resizeRatios = resizeRatios;\n        this.resizeTakeFromCols = groupAfterColumns;\n        this.resizeTakeFromStartWidth = groupAfterStartWidth;\n        this.resizeTakeFromRatios = groupAfterRatios;\n    }\n    clearLocalValues() {\n        this.resizeCols = undefined;\n        this.resizeRatios = undefined;\n        this.resizeTakeFromCols = undefined;\n        this.resizeTakeFromRatios = undefined;\n    }\n    resizeLeafColumnsToFit(source) {\n        const preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);\n        const initialValues = this.getInitialValues();\n        if (preferredSize > initialValues.resizeStartWidth) {\n            this.resizeColumns(initialValues, preferredSize, source, true);\n        }\n    }\n    resizeColumnsFromLocalValues(totalWidth, source, finished = true) {\n        var _a, _b, _c;\n        if (!this.resizeCols || !this.resizeRatios) {\n            return;\n        }\n        const initialValues = {\n            columnsToResize: this.resizeCols,\n            resizeStartWidth: this.resizeStartWidth,\n            resizeRatios: this.resizeRatios,\n            groupAfterColumns: (_a = this.resizeTakeFromCols) !== null && _a !== void 0 ? _a : undefined,\n            groupAfterStartWidth: (_b = this.resizeTakeFromStartWidth) !== null && _b !== void 0 ? _b : undefined,\n            groupAfterRatios: (_c = this.resizeTakeFromRatios) !== null && _c !== void 0 ? _c : undefined\n        };\n        this.resizeColumns(initialValues, totalWidth, source, finished);\n    }\n    resizeColumns(initialValues, totalWidth, source, finished = true) {\n        const { columnsToResize, resizeStartWidth, resizeRatios, groupAfterColumns, groupAfterStartWidth, groupAfterRatios } = initialValues;\n        const resizeSets = [];\n        resizeSets.push({\n            columns: columnsToResize,\n            ratios: resizeRatios,\n            width: totalWidth\n        });\n        if (groupAfterColumns) {\n            const diff = totalWidth - resizeStartWidth;\n            resizeSets.push({\n                columns: groupAfterColumns,\n                ratios: groupAfterRatios,\n                width: groupAfterStartWidth - diff\n            });\n        }\n        this.columnModel.resizeColumnSets({\n            resizeSets,\n            finished,\n            source: source\n        });\n        if (finished) {\n            this.toggleColumnResizing(false);\n        }\n    }\n    toggleColumnResizing(resizing) {\n        this.comp.addOrRemoveCssClass('ag-column-resizing', resizing);\n    }\n    getColumnsToResize() {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        return leafCols.filter(col => col.isResizable());\n    }\n    getInitialSizeOfColumns(columns) {\n        return columns.reduce((totalWidth, column) => totalWidth + column.getActualWidth(), 0);\n    }\n    getSizeRatiosOfColumns(columns, initialSizeOfColumns) {\n        return columns.map(column => column.getActualWidth() / initialSizeOfColumns);\n    }\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    normaliseDragChange(dragChange) {\n        let result = dragChange;\n        if (this.gridOptionsService.get('enableRtl')) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== 'left') {\n                result *= -1;\n            }\n        }\n        else if (this.pinned === 'right') {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n        return result;\n    }\n    destroy() {\n        super.destroy();\n        this.clearLocalValues();\n    }\n}\n__decorate([\n    Autowired('horizontalResizeService')\n], GroupResizeFeature.prototype, \"horizontalResizeService\", void 0);\n__decorate([\n    Autowired('autoWidthCalculator')\n], GroupResizeFeature.prototype, \"autoWidthCalculator\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GroupResizeFeature.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], GroupResizeFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../../context/beanStub.mjs\";\nimport { PostConstruct } from \"../../../context/context.mjs\";\nimport { ColumnGroup } from \"../../../entities/columnGroup.mjs\";\nexport class GroupWidthFeature extends BeanStub {\n    constructor(comp, columnGroup) {\n        super();\n        // the children can change, we keep destroy functions related to listening to the children here\n        this.removeChildListenersFuncs = [];\n        this.columnGroup = columnGroup;\n        this.comp = comp;\n    }\n    postConstruct() {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n        this.onWidthChanged();\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    }\n    addListenersToChildrenColumns() {\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach(column => {\n            column.addEventListener('widthChanged', widthChangedListener);\n            column.addEventListener('visibleChanged', widthChangedListener);\n            this.removeChildListenersFuncs.push(() => {\n                column.removeEventListener('widthChanged', widthChangedListener);\n                column.removeEventListener('visibleChanged', widthChangedListener);\n            });\n        });\n    }\n    removeListenersOnChildrenColumns() {\n        this.removeChildListenersFuncs.forEach(func => func());\n        this.removeChildListenersFuncs = [];\n    }\n    onDisplayedChildrenChanged() {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n    onWidthChanged() {\n        const columnWidth = this.columnGroup.getActualWidth();\n        this.comp.setWidth(`${columnWidth}px`);\n        this.comp.addOrRemoveCssClass('ag-hidden', columnWidth === 0);\n    }\n}\n__decorate([\n    PostConstruct\n], GroupWidthFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyCode } from '../../../constants/keyCode.mjs';\nimport { Autowired } from \"../../../context/context.mjs\";\nimport { DragAndDropService, DragSourceType } from \"../../../dragAndDrop/dragAndDropService.mjs\";\nimport { Column } from \"../../../entities/column.mjs\";\nimport { Events } from \"../../../events.mjs\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup.mjs\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature.mjs\";\nimport { last, removeFromArray } from \"../../../utils/array.mjs\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature.mjs\";\nimport { TooltipFeature } from \"../../../widgets/tooltipFeature.mjs\";\nimport { AbstractHeaderCellCtrl } from \"../abstractCell/abstractHeaderCellCtrl.mjs\";\nimport { CssClassApplier } from \"../cssClassApplier.mjs\";\nimport { HoverFeature } from \"../hoverFeature.mjs\";\nimport { GroupResizeFeature } from \"./groupResizeFeature.mjs\";\nimport { GroupWidthFeature } from \"./groupWidthFeature.mjs\";\nimport { HorizontalDirection } from \"../../../constants/direction.mjs\";\nimport { ColumnMoveHelper } from \"../../columnMoveHelper.mjs\";\nexport class HeaderGroupCellCtrl extends AbstractHeaderCellCtrl {\n    constructor(columnGroup, parentRowCtrl) {\n        super(columnGroup, parentRowCtrl);\n        this.onSuppressColMoveChange = () => {\n            if (this.isSuppressMoving()) {\n                this.removeDragSource();\n            }\n            else {\n                if (!this.dragSource) {\n                    const eGui = this.getGui();\n                    this.setDragSource(eGui);\n                }\n            }\n        };\n        this.column = columnGroup;\n    }\n    setComp(comp, eGui, eResize) {\n        this.comp = comp;\n        this.setGui(eGui);\n        this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.column, 'header');\n        this.addClasses();\n        this.setupMovingCss();\n        this.setupExpandable();\n        this.setupTooltip();\n        this.setupUserComp();\n        const pinned = this.getParentRowCtrl().getPinned();\n        const leafCols = this.column.getProvidedColumnGroup().getLeafColumns();\n        this.createManagedBean(new HoverFeature(leafCols, eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(new GroupWidthFeature(comp, this.column));\n        this.resizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.column));\n        this.createManagedBean(new ManagedFocusFeature(eGui, {\n            shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n            onTabKeyDown: () => undefined,\n            handleKeyDown: this.handleKeyDown.bind(this),\n            onFocusIn: this.onFocusIn.bind(this)\n        }));\n        this.addManagedPropertyListener(Events.EVENT_SUPPRESS_COLUMN_MOVE_CHANGED, this.onSuppressColMoveChange);\n        this.addResizeAndMoveKeyboardListeners();\n    }\n    resizeHeader(direction, shiftKey) {\n        // check to avoid throwing when a component has not been setup yet (React 18)\n        if (!this.resizeFeature) {\n            return;\n        }\n        const isLeft = direction === HorizontalDirection.Left;\n        const diff = (isLeft ? -1 : 1) * this.resizeMultiplier;\n        const initialValues = this.resizeFeature.getInitialValues(shiftKey);\n        this.resizeFeature.resizeColumns(initialValues, initialValues.resizeStartWidth + diff, 'uiColumnResized', true);\n    }\n    moveHeader(hDirection) {\n        const { eGui, column, columnModel, gridOptionsService, ctrlsService } = this;\n        const isRtl = gridOptionsService.get('enableRtl');\n        const isLeft = hDirection === HorizontalDirection.Left;\n        const pinned = this.getPinned();\n        const rect = eGui.getBoundingClientRect();\n        const left = rect.left;\n        const width = rect.width;\n        const xPosition = ColumnMoveHelper.normaliseX(isLeft !== isRtl ? (left - 20) : (left + width + 20), pinned, true, gridOptionsService, ctrlsService);\n        const id = column.getGroupId();\n        const headerPosition = this.focusService.getFocusedHeader();\n        ColumnMoveHelper.attemptMoveColumns({\n            allMovingColumns: this.column.getLeafColumns(),\n            isFromHeader: true,\n            hDirection,\n            xPosition,\n            pinned,\n            fromEnter: false,\n            fakeEvent: false,\n            gridOptionsService: gridOptionsService,\n            columnModel\n        });\n        const displayedLeafColumns = column.getDisplayedLeafColumns();\n        const targetColumn = isLeft ? displayedLeafColumns[0] : last(displayedLeafColumns);\n        this.ctrlsService.getGridBodyCtrl().getScrollFeature().ensureColumnVisible(targetColumn, 'auto');\n        if (!this.isAlive() && headerPosition) {\n            this.restoreFocus(id, column, headerPosition);\n        }\n    }\n    restoreFocus(groupId, previousColumnGroup, previousPosition) {\n        const leafCols = previousColumnGroup.getLeafColumns();\n        if (!leafCols.length) {\n            return;\n        }\n        const parent = leafCols[0].getParent();\n        if (!parent) {\n            return;\n        }\n        const newColumnGroup = this.findGroupWidthId(parent, groupId);\n        if (newColumnGroup) {\n            this.focusService.focusHeaderPosition({\n                headerPosition: Object.assign(Object.assign({}, previousPosition), { column: newColumnGroup })\n            });\n        }\n    }\n    findGroupWidthId(columnGroup, id) {\n        while (columnGroup) {\n            if (columnGroup.getGroupId() === id) {\n                return columnGroup;\n            }\n            columnGroup = columnGroup.getParent();\n        }\n        return null;\n    }\n    resizeLeafColumnsToFit(source) {\n        // check to avoid throwing when a component has not been setup yet (React 18)\n        if (!this.resizeFeature) {\n            return;\n        }\n        this.resizeFeature.resizeLeafColumnsToFit(source);\n    }\n    setupUserComp() {\n        const params = {\n            displayName: this.displayName,\n            columnGroup: this.column,\n            setExpanded: (expanded) => {\n                this.columnModel.setColumnGroupOpened(this.column.getProvidedColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        };\n        const compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);\n        this.comp.setUserCompDetails(compDetails);\n    }\n    setupTooltip() {\n        const colGroupDef = this.column.getColGroupDef();\n        const tooltipCtrl = {\n            getColumn: () => this.column,\n            getGui: () => this.eGui,\n            getLocation: () => 'headerGroup',\n            getTooltipValue: () => colGroupDef && colGroupDef.headerTooltip\n        };\n        if (colGroupDef) {\n            tooltipCtrl.getColDef = () => colGroupDef;\n        }\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n        tooltipFeature.setComp(this.eGui);\n    }\n    setupExpandable() {\n        const providedColGroup = this.column.getProvidedColumnGroup();\n        this.refreshExpanded();\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n    }\n    refreshExpanded() {\n        const column = this.column;\n        this.expandable = column.isExpandable();\n        const expanded = column.isExpanded();\n        if (this.expandable) {\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n        }\n        else {\n            this.comp.setAriaExpanded(undefined);\n        }\n    }\n    getColId() {\n        return this.column.getUniqueId();\n    }\n    addClasses() {\n        const colGroupDef = this.column.getColGroupDef();\n        const classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsService, null, this.column);\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        if (this.column.isPadding()) {\n            classes.push('ag-header-group-cell-no-group');\n            const leafCols = this.column.getLeafColumns();\n            if (leafCols.every(col => col.isSpanHeaderHeight())) {\n                classes.push('ag-header-span-height');\n            }\n        }\n        else {\n            classes.push('ag-header-group-cell-with-group');\n        }\n        classes.forEach(c => this.comp.addOrRemoveCssClass(c, true));\n    }\n    setupMovingCss() {\n        const providedColumnGroup = this.column.getProvidedColumnGroup();\n        const leafColumns = providedColumnGroup.getLeafColumns();\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        const listener = () => this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n        leafColumns.forEach(col => {\n            this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);\n        });\n        listener();\n    }\n    onFocusIn(e) {\n        if (!this.eGui.contains(e.relatedTarget)) {\n            const rowIndex = this.getRowIndex();\n            this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n        }\n    }\n    handleKeyDown(e) {\n        super.handleKeyDown(e);\n        const wrapperHasFocus = this.getWrapperHasFocus();\n        if (!this.expandable || !wrapperHasFocus) {\n            return;\n        }\n        if (e.key === KeyCode.ENTER) {\n            const column = this.column;\n            const newExpandedValue = !column.isExpanded();\n            this.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        }\n    }\n    // unlike columns, this will only get called once, as we don't react on props on column groups\n    // (we will always destroy and recreate this comp if something changes)\n    setDragSource(eHeaderGroup) {\n        if (this.isSuppressMoving()) {\n            return;\n        }\n        this.removeDragSource();\n        if (!eHeaderGroup) {\n            return;\n        }\n        const { column, columnModel, displayName, gridOptionsService, dragAndDropService } = this;\n        const allLeafColumns = column.getProvidedColumnGroup().getLeafColumns();\n        let hideColumnOnExit = !gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource = this.dragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            dragItemName: displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: () => this.getDragItemForGroup(column),\n            onDragStarted: () => {\n                hideColumnOnExit = !gridOptionsService.get('suppressDragLeaveHidesColumns');\n                allLeafColumns.forEach(col => col.setMoving(true, \"uiColumnDragged\"));\n            },\n            onDragStopped: () => allLeafColumns.forEach(col => col.setMoving(false, \"uiColumnDragged\")),\n            onGridEnter: (dragItem) => {\n                var _a;\n                if (hideColumnOnExit) {\n                    const unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(col => !col.getColDef().lockVisible)) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, true, \"uiColumnMoved\");\n                }\n            },\n            onGridExit: (dragItem) => {\n                var _a;\n                if (hideColumnOnExit) {\n                    const unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(col => !col.getColDef().lockVisible)) || [];\n                    columnModel.setColumnsVisible(unlockedColumns, false, \"uiColumnMoved\");\n                }\n            },\n        };\n        dragAndDropService.addDragSource(dragSource, true);\n    }\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    getDragItemForGroup(columnGroup) {\n        const allColumnsOriginalOrder = columnGroup.getProvidedColumnGroup().getLeafColumns();\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState = {};\n        allColumnsOriginalOrder.forEach(column => visibleState[column.getId()] = column.isVisible());\n        const allColumnsCurrentOrder = [];\n        this.columnModel.getAllDisplayedColumns().forEach(column => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(column => allColumnsCurrentOrder.push(column));\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    }\n    isSuppressMoving() {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.column.getLeafColumns().forEach((column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n        const result = childSuppressesMoving || this.gridOptionsService.get('suppressMovableColumns');\n        return result;\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], HeaderGroupCellCtrl.prototype, \"columnModel\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { isBrowserSafari } from \"../../utils/browser.mjs\";\nimport { HeaderFilterCellCtrl } from \"../cells/floatingFilter/headerFilterCellCtrl.mjs\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl.mjs\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl.mjs\";\nimport { HeaderRowType } from \"./headerRowComp.mjs\";\nimport { values } from \"../../utils/generic.mjs\";\nlet instanceIdSequence = 0;\nexport class HeaderRowCtrl extends BeanStub {\n    constructor(rowIndex, pinned, type) {\n        super();\n        this.instanceId = instanceIdSequence++;\n        this.rowIndex = rowIndex;\n        this.pinned = pinned;\n        this.type = type;\n        const typeClass = type == HeaderRowType.COLUMN_GROUP ? `ag-header-row-column-group` :\n            type == HeaderRowType.FLOATING_FILTER ? `ag-header-row-column-filter` : `ag-header-row-column`;\n        this.headerRowClass = `ag-header-row ${typeClass}`;\n    }\n    postConstruct() {\n        this.isPrintLayout = this.gridOptionsService.isDomLayout('print');\n        this.isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    /**\n     *\n     * @param comp Proxy to the actual component\n     * @param initCompState Should the component be initialised with the current state of the controller. Default: true\n     */\n    setComp(comp, initCompState = true) {\n        this.comp = comp;\n        if (initCompState) {\n            this.onRowHeightChanged();\n            this.onVirtualColumnsChanged();\n        }\n        // width is managed directly regardless of framework and so is not included in initCompState\n        this.setWidth();\n        this.addEventListeners();\n    }\n    getHeaderRowClass() {\n        return this.headerRowClass;\n    }\n    getAriaRowIndex() {\n        return this.rowIndex + 1;\n    }\n    getTransform() {\n        if (isBrowserSafari()) {\n            // fix for a Safari rendering bug that caused the header to flicker above chart panels\n            // as you move the mouse over the header\n            return 'translateZ(0)';\n        }\n    }\n    addEventListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, (params) => this.onVirtualColumnsChanged(params.afterScroll));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onRowHeightChanged.bind(this));\n        // when print layout changes, it changes what columns are in what section\n        this.addManagedPropertyListener('domLayout', this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedPropertyListener('ensureDomOrder', (e) => this.isEnsureDomOrder = e.currentValue);\n        this.addManagedPropertyListener('headerHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('pivotHeaderHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('groupHeaderHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('pivotGroupHeaderHeight', this.onRowHeightChanged.bind(this));\n        this.addManagedPropertyListener('floatingFiltersHeight', this.onRowHeightChanged.bind(this));\n    }\n    getHeaderCellCtrl(column) {\n        if (!this.headerCellCtrls) {\n            return;\n        }\n        return values(this.headerCellCtrls).find(cellCtrl => cellCtrl.getColumnGroupChild() === column);\n    }\n    onDisplayedColumnsChanged() {\n        this.isPrintLayout = this.gridOptionsService.isDomLayout('print');\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n        this.onRowHeightChanged();\n    }\n    getType() {\n        return this.type;\n    }\n    onColumnResized() {\n        this.setWidth();\n    }\n    setWidth() {\n        const width = this.getWidthForRow();\n        this.comp.setWidth(`${width}px`);\n    }\n    getWidthForRow() {\n        if (this.isPrintLayout) {\n            const pinned = this.pinned != null;\n            if (pinned) {\n                return 0;\n            }\n            return this.columnModel.getContainerWidth('right')\n                + this.columnModel.getContainerWidth('left')\n                + this.columnModel.getContainerWidth(null);\n        }\n        // if not printing, just return the width as normal\n        return this.columnModel.getContainerWidth(this.pinned);\n    }\n    onRowHeightChanged() {\n        var { topOffset, rowHeight } = this.getTopAndHeight();\n        this.comp.setTop(topOffset + 'px');\n        this.comp.setHeight(rowHeight + 'px');\n    }\n    getTopAndHeight() {\n        let headerRowCount = this.columnModel.getHeaderRowCount();\n        const sizes = [];\n        let numberOfFloating = 0;\n        if (this.filterManager.hasFloatingFilters()) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n        const groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();\n        const headerHeight = this.columnModel.getColumnHeaderRowHeight();\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n        for (let i = 0; i < numberOfGroups; i++) {\n            sizes.push(groupHeight);\n        }\n        sizes.push(headerHeight);\n        for (let i = 0; i < numberOfFloating; i++) {\n            sizes.push(this.columnModel.getFloatingFiltersHeight());\n        }\n        let topOffset = 0;\n        for (let i = 0; i < this.rowIndex; i++) {\n            topOffset += sizes[i];\n        }\n        const rowHeight = sizes[this.rowIndex];\n        return { topOffset, rowHeight };\n    }\n    getPinned() {\n        return this.pinned;\n    }\n    getRowIndex() {\n        return this.rowIndex;\n    }\n    onVirtualColumnsChanged(afterScroll = false) {\n        const ctrlsToDisplay = this.getHeaderCtrls();\n        const forceOrder = this.isEnsureDomOrder || this.isPrintLayout;\n        this.comp.setHeaderCtrls(ctrlsToDisplay, forceOrder, afterScroll);\n    }\n    getHeaderCtrls() {\n        const oldCtrls = this.headerCellCtrls;\n        this.headerCellCtrls = new Map();\n        const columns = this.getColumnsInViewport();\n        for (const child of columns) {\n            this.recycleAndCreateHeaderCtrls(child, oldCtrls);\n        }\n        // we want to keep columns that are focused, otherwise keyboard navigation breaks\n        const isFocusedAndDisplayed = (ctrl) => {\n            const isFocused = this.focusService.isHeaderWrapperFocused(ctrl);\n            if (!isFocused) {\n                return false;\n            }\n            const isDisplayed = this.columnModel.isDisplayed(ctrl.getColumnGroupChild());\n            return isDisplayed;\n        };\n        if (oldCtrls) {\n            for (const [id, oldCtrl] of oldCtrls) {\n                const keepCtrl = isFocusedAndDisplayed(oldCtrl);\n                if (keepCtrl) {\n                    this.headerCellCtrls.set(id, oldCtrl);\n                }\n                else {\n                    this.destroyBean(oldCtrl);\n                }\n            }\n        }\n        const ctrlsToDisplay = Array.from(this.headerCellCtrls.values());\n        return ctrlsToDisplay;\n    }\n    recycleAndCreateHeaderCtrls(headerColumn, oldCtrls) {\n        if (!this.headerCellCtrls) {\n            return;\n        }\n        // skip groups that have no displayed children. this can happen when the group is broken,\n        // and this section happens to have nothing to display for the open / closed state.\n        // (a broken group is one that is split, ie columns in the group have a non-group column\n        // in between them)\n        if (headerColumn.isEmptyGroup()) {\n            return;\n        }\n        const idOfChild = headerColumn.getUniqueId();\n        // if we already have this cell rendered, do nothing\n        let headerCtrl;\n        if (oldCtrls) {\n            headerCtrl = oldCtrls.get(idOfChild);\n            oldCtrls.delete(idOfChild);\n        }\n        // it's possible there is a new Column with the same ID, but it's for a different Column.\n        // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,\n        // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are\n        // about to replace it in the this.headerComps map.\n        const forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != headerColumn;\n        if (forOldColumn) {\n            this.destroyBean(headerCtrl);\n            headerCtrl = undefined;\n        }\n        if (headerCtrl == null) {\n            switch (this.type) {\n                case HeaderRowType.FLOATING_FILTER:\n                    headerCtrl = this.createBean(new HeaderFilterCellCtrl(headerColumn, this));\n                    break;\n                case HeaderRowType.COLUMN_GROUP:\n                    headerCtrl = this.createBean(new HeaderGroupCellCtrl(headerColumn, this));\n                    break;\n                default:\n                    headerCtrl = this.createBean(new HeaderCellCtrl(headerColumn, this));\n                    break;\n            }\n        }\n        this.headerCellCtrls.set(idOfChild, headerCtrl);\n    }\n    getColumnsInViewport() {\n        return this.isPrintLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();\n    }\n    getColumnsInViewportPrintLayout() {\n        // for print layout, we add all columns into the center\n        if (this.pinned != null) {\n            return [];\n        }\n        let viewportColumns = [];\n        const actualDepth = this.getActualDepth();\n        ['left', null, 'right'].forEach(pinned => {\n            const items = this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);\n            viewportColumns = viewportColumns.concat(items);\n        });\n        return viewportColumns;\n    }\n    getActualDepth() {\n        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;\n    }\n    getColumnsInViewportNormalLayout() {\n        // when in normal layout, we add the columns for that container only\n        return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());\n    }\n    focusHeader(column, event) {\n        if (!this.headerCellCtrls) {\n            return false;\n        }\n        const allCtrls = Array.from(this.headerCellCtrls.values());\n        const ctrl = allCtrls.find(ctrl => ctrl.getColumnGroupChild() == column);\n        if (!ctrl) {\n            return false;\n        }\n        return ctrl.focus(event);\n    }\n    destroy() {\n        if (this.headerCellCtrls) {\n            this.headerCellCtrls.forEach((ctrl) => {\n                this.destroyBean(ctrl);\n            });\n        }\n        this.headerCellCtrls = undefined;\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('columnModel')\n], HeaderRowCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('focusService')\n], HeaderRowCtrl.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('filterManager')\n], HeaderRowCtrl.prototype, \"filterManager\", void 0);\n__decorate([\n    PostConstruct\n], HeaderRowCtrl.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired } from \"../../context/context.mjs\";\nimport { Column } from \"../../entities/column.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nimport { CenterWidthFeature } from \"../../gridBodyComp/centerWidthFeature.mjs\";\nimport { NumberSequence } from \"../../utils/index.mjs\";\nimport { BodyDropTarget } from \"../columnDrag/bodyDropTarget.mjs\";\nimport { HeaderRowType } from \"../row/headerRowComp.mjs\";\nimport { HeaderRowCtrl } from \"../row/headerRowCtrl.mjs\";\nexport class HeaderRowContainerCtrl extends BeanStub {\n    constructor(pinned) {\n        super();\n        this.hidden = false;\n        this.includeFloatingFilter = false;\n        this.groupsRowCtrls = [];\n        this.pinned = pinned;\n    }\n    setComp(comp, eGui) {\n        this.comp = comp;\n        this.eViewport = eGui;\n        this.setupCenterWidth();\n        this.setupPinnedWidth();\n        this.setupDragAndDrop(this.eViewport);\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.ctrlsService.registerHeaderContainer(this, this.pinned);\n        if (this.columnModel.isReady()) {\n            this.refresh();\n        }\n    }\n    setupDragAndDrop(dropContainer) {\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.createManagedBean(bodyDropTarget);\n    }\n    refresh(keepColumns = false) {\n        const sequence = new NumberSequence();\n        const focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();\n        const refreshColumnGroups = () => {\n            const groupRowCount = this.columnModel.getHeaderRowCount() - 1;\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n            for (let i = 0; i < groupRowCount; i++) {\n                const ctrl = this.createBean(new HeaderRowCtrl(sequence.next(), this.pinned, HeaderRowType.COLUMN_GROUP));\n                this.groupsRowCtrls.push(ctrl);\n            }\n        };\n        const refreshColumns = () => {\n            const rowIndex = sequence.next();\n            const needNewInstance = !this.hidden && (this.columnsRowCtrl == null || !keepColumns || this.columnsRowCtrl.getRowIndex() !== rowIndex);\n            const shouldDestroyInstance = needNewInstance || this.hidden;\n            if (shouldDestroyInstance) {\n                this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\n            }\n            if (needNewInstance) {\n                this.columnsRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.COLUMN));\n            }\n        };\n        const refreshFilters = () => {\n            this.includeFloatingFilter = this.filterManager.hasFloatingFilters() && !this.hidden;\n            const destroyPreviousComp = () => {\n                this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n            };\n            if (!this.includeFloatingFilter) {\n                destroyPreviousComp();\n                return;\n            }\n            const rowIndex = sequence.next();\n            if (this.filtersRowCtrl) {\n                const rowIndexMismatch = this.filtersRowCtrl.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    destroyPreviousComp();\n                }\n            }\n            if (!this.filtersRowCtrl) {\n                this.filtersRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.FLOATING_FILTER));\n            }\n        };\n        refreshColumnGroups();\n        refreshColumns();\n        refreshFilters();\n        const allCtrls = this.getAllCtrls();\n        this.comp.setCtrls(allCtrls);\n        this.restoreFocusOnHeader(focusedHeaderPosition);\n    }\n    restoreFocusOnHeader(position) {\n        if (position == null || position.column.getPinned() != this.pinned) {\n            return;\n        }\n        this.focusService.focusHeaderPosition({ headerPosition: position });\n    }\n    getAllCtrls() {\n        const res = [...this.groupsRowCtrls];\n        if (this.columnsRowCtrl) {\n            res.push(this.columnsRowCtrl);\n        }\n        if (this.filtersRowCtrl) {\n            res.push(this.filtersRowCtrl);\n        }\n        return res;\n    }\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    onGridColumnsChanged() {\n        this.refresh(true);\n    }\n    onDisplayedColumnsChanged() {\n        const includeFloatingFilter = this.filterManager.hasFloatingFilters() && !this.hidden;\n        if (this.includeFloatingFilter !== includeFloatingFilter) {\n            this.refresh(true);\n        }\n    }\n    setupCenterWidth() {\n        if (this.pinned != null) {\n            return;\n        }\n        this.createManagedBean(new CenterWidthFeature(width => this.comp.setCenterWidth(`${width}px`), true));\n    }\n    setHorizontalScroll(offset) {\n        this.comp.setViewportScrollLeft(offset);\n    }\n    setupPinnedWidth() {\n        if (this.pinned == null) {\n            return;\n        }\n        const pinningLeft = this.pinned === 'left';\n        const pinningRight = this.pinned === 'right';\n        this.hidden = true;\n        const listener = () => {\n            const width = pinningLeft ? this.pinnedWidthService.getPinnedLeftWidth() : this.pinnedWidthService.getPinnedRightWidth();\n            if (width == null) {\n                return;\n            } // can happen at initialisation, width not yet set\n            const hidden = (width == 0);\n            const hiddenChanged = this.hidden !== hidden;\n            const isRtl = this.gridOptionsService.get('enableRtl');\n            const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n            const widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;\n            this.comp.setPinnedContainerWidth(`${widthWithPadding}px`);\n            this.comp.setDisplayed(!hidden);\n            if (hiddenChanged) {\n                this.hidden = hidden;\n                this.refresh();\n            }\n        };\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);\n    }\n    getHeaderCtrlForColumn(column) {\n        if (column instanceof Column) {\n            if (!this.columnsRowCtrl) {\n                return;\n            }\n            return this.columnsRowCtrl.getHeaderCellCtrl(column);\n        }\n        if (this.groupsRowCtrls.length === 0) {\n            return;\n        }\n        for (let i = 0; i < this.groupsRowCtrls.length; i++) {\n            const ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);\n            if (ctrl) {\n                return ctrl;\n            }\n        }\n    }\n    getHtmlElementForColumnHeader(column) {\n        /* tslint:enable */\n        const cellCtrl = this.getHeaderCtrlForColumn(column);\n        if (!cellCtrl) {\n            return null;\n        }\n        return cellCtrl.getGui();\n    }\n    getRowType(rowIndex) {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        return ctrl ? ctrl.getType() : undefined;\n    }\n    focusHeader(rowIndex, column, event) {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        if (!ctrl) {\n            return false;\n        }\n        return ctrl.focusHeader(column, event);\n    }\n    getViewport() {\n        return this.eViewport;\n    }\n    getRowCount() {\n        return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);\n    }\n    destroy() {\n        if (this.filtersRowCtrl) {\n            this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n        }\n        if (this.columnsRowCtrl) {\n            this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);\n        }\n        if (this.groupsRowCtrls && this.groupsRowCtrls.length) {\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n        }\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('ctrlsService')\n], HeaderRowContainerCtrl.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('scrollVisibleService')\n], HeaderRowContainerCtrl.prototype, \"scrollVisibleService\", void 0);\n__decorate([\n    Autowired('pinnedWidthService')\n], HeaderRowContainerCtrl.prototype, \"pinnedWidthService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], HeaderRowContainerCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('focusService')\n], HeaderRowContainerCtrl.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('filterManager')\n], HeaderRowContainerCtrl.prototype, \"filterManager\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct, PreDestroy } from '../../context/context.mjs';\nimport { ensureDomOrder } from '../../utils/dom.mjs';\nimport { getAllValuesInObject } from '../../utils/object.mjs';\nimport { Component } from '../../widgets/component.mjs';\nimport { RefSelector } from '../../widgets/componentAnnotations.mjs';\nimport { HeaderRowComp } from '../row/headerRowComp.mjs';\nimport { HeaderRowContainerCtrl } from './headerRowContainerCtrl.mjs';\nexport class HeaderRowContainerComp extends Component {\n    constructor(pinned) {\n        super();\n        this.headerRowComps = {};\n        this.rowCompsList = [];\n        this.pinned = pinned;\n    }\n    init() {\n        this.selectAndSetTemplate();\n        const compProxy = {\n            setDisplayed: displayed => this.setDisplayed(displayed),\n            setCtrls: ctrls => this.setCtrls(ctrls),\n            // only gets called for center section\n            setCenterWidth: width => this.eCenterContainer.style.width = width,\n            setViewportScrollLeft: left => this.getGui().scrollLeft = left,\n            // only gets called for pinned sections\n            setPinnedContainerWidth: width => {\n                const eGui = this.getGui();\n                eGui.style.width = width;\n                eGui.style.maxWidth = width;\n                eGui.style.minWidth = width;\n            }\n        };\n        const ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));\n        ctrl.setComp(compProxy, this.getGui());\n    }\n    selectAndSetTemplate() {\n        const pinnedLeft = this.pinned == 'left';\n        const pinnedRight = this.pinned == 'right';\n        const template = pinnedLeft ? HeaderRowContainerComp.PINNED_LEFT_TEMPLATE :\n            pinnedRight ? HeaderRowContainerComp.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp.CENTER_TEMPLATE;\n        this.setTemplate(template);\n        // for left and right, we add rows directly to the root element,\n        // but for center container we add elements to the child container.\n        this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();\n    }\n    destroyRowComps() {\n        this.setCtrls([]);\n    }\n    destroyRowComp(rowComp) {\n        this.destroyBean(rowComp);\n        this.eRowContainer.removeChild(rowComp.getGui());\n    }\n    setCtrls(ctrls) {\n        const oldRowComps = this.headerRowComps;\n        this.headerRowComps = {};\n        this.rowCompsList = [];\n        let prevGui;\n        const appendEnsuringDomOrder = (rowComp) => {\n            const eGui = rowComp.getGui();\n            const notAlreadyIn = eGui.parentElement != this.eRowContainer;\n            if (notAlreadyIn) {\n                this.eRowContainer.appendChild(eGui);\n            }\n            if (prevGui) {\n                ensureDomOrder(this.eRowContainer, eGui, prevGui);\n            }\n            prevGui = eGui;\n        };\n        ctrls.forEach(ctrl => {\n            const ctrlId = ctrl.getInstanceId();\n            const existingComp = oldRowComps[ctrlId];\n            delete oldRowComps[ctrlId];\n            const rowComp = existingComp ? existingComp : this.createBean(new HeaderRowComp(ctrl));\n            this.headerRowComps[ctrlId] = rowComp;\n            this.rowCompsList.push(rowComp);\n            appendEnsuringDomOrder(rowComp);\n        });\n        getAllValuesInObject(oldRowComps).forEach(c => this.destroyRowComp(c));\n    }\n}\nHeaderRowContainerComp.PINNED_LEFT_TEMPLATE = `<div class=\"ag-pinned-left-header\" role=\"presentation\"></div>`;\nHeaderRowContainerComp.PINNED_RIGHT_TEMPLATE = `<div class=\"ag-pinned-right-header\" role=\"presentation\"></div>`;\nHeaderRowContainerComp.CENTER_TEMPLATE = `<div class=\"ag-header-viewport\" role=\"presentation\">\n            <div class=\"ag-header-container\" ref=\"eCenterContainer\" role=\"rowgroup\"></div>\n        </div>`;\n__decorate([\n    RefSelector('eCenterContainer')\n], HeaderRowContainerComp.prototype, \"eCenterContainer\", void 0);\n__decorate([\n    PostConstruct\n], HeaderRowContainerComp.prototype, \"init\", null);\n__decorate([\n    PreDestroy\n], HeaderRowContainerComp.prototype, \"destroyRowComps\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context.mjs\";\nimport { ColumnGroup } from \"../../entities/columnGroup.mjs\";\nimport { last } from \"../../utils/array.mjs\";\nexport var HeaderNavigationDirection;\n(function (HeaderNavigationDirection) {\n    HeaderNavigationDirection[HeaderNavigationDirection[\"UP\"] = 0] = \"UP\";\n    HeaderNavigationDirection[HeaderNavigationDirection[\"DOWN\"] = 1] = \"DOWN\";\n    HeaderNavigationDirection[HeaderNavigationDirection[\"LEFT\"] = 2] = \"LEFT\";\n    HeaderNavigationDirection[HeaderNavigationDirection[\"RIGHT\"] = 3] = \"RIGHT\";\n})(HeaderNavigationDirection || (HeaderNavigationDirection = {}));\nlet HeaderNavigationService = class HeaderNavigationService extends BeanStub {\n    postConstruct() {\n        this.ctrlsService.whenReady(p => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n    getHeaderRowCount() {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;\n    }\n    /*\n     * This method navigates grid header vertically\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    navigateVertically(direction, fromHeader, event) {\n        if (!fromHeader) {\n            fromHeader = this.focusService.getFocusedHeader();\n        }\n        if (!fromHeader) {\n            return false;\n        }\n        const { headerRowIndex, column } = fromHeader;\n        const rowLen = this.getHeaderRowCount();\n        const isUp = direction === HeaderNavigationDirection.UP;\n        let { nextRow, nextFocusColumn } = isUp\n            ? this.headerPositionUtils.getColumnVisibleParent(column, headerRowIndex)\n            : this.headerPositionUtils.getColumnVisibleChild(column, headerRowIndex);\n        let skipColumn = false;\n        if (nextRow < 0) {\n            nextRow = 0;\n            nextFocusColumn = column;\n            skipColumn = true;\n        }\n        if (nextRow >= rowLen) {\n            nextRow = -1; // -1 indicates the focus should move to grid rows.\n        }\n        if (!skipColumn && !nextFocusColumn) {\n            return false;\n        }\n        return this.focusService.focusHeaderPosition({\n            headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn },\n            allowUserOverride: true,\n            event\n        });\n    }\n    /*\n     * This method navigates grid header horizontally\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    navigateHorizontally(direction, fromTab = false, event) {\n        const focusedHeader = this.focusService.getFocusedHeader();\n        const isLeft = direction === HeaderNavigationDirection.LEFT;\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        let nextHeader;\n        let normalisedDirection;\n        // either navigating to the left or isRtl (cannot be both)\n        if (isLeft !== isRtl) {\n            normalisedDirection = 'Before';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);\n        }\n        else {\n            normalisedDirection = 'After';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);\n        }\n        if (nextHeader || !fromTab) {\n            return this.focusService.focusHeaderPosition({\n                headerPosition: nextHeader,\n                direction: normalisedDirection,\n                fromTab,\n                allowUserOverride: true,\n                event\n            });\n        }\n        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);\n    }\n    focusNextHeaderRow(focusedHeader, direction, event) {\n        const currentIndex = focusedHeader.headerRowIndex;\n        let nextPosition = null;\n        let nextRowIndex;\n        if (direction === 'Before') {\n            if (currentIndex > 0) {\n                nextRowIndex = currentIndex - 1;\n                nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'end');\n            }\n        }\n        else {\n            nextRowIndex = currentIndex + 1;\n            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'start');\n        }\n        return this.focusService.focusHeaderPosition({\n            headerPosition: nextPosition,\n            direction,\n            fromTab: true,\n            allowUserOverride: true,\n            event\n        });\n    }\n    scrollToColumn(column, direction = 'After') {\n        if (column.getPinned()) {\n            return;\n        }\n        let columnToScrollTo;\n        if (column instanceof ColumnGroup) {\n            const columns = column.getDisplayedLeafColumns();\n            columnToScrollTo = direction === 'Before' ? last(columns) : columns[0];\n        }\n        else {\n            columnToScrollTo = column;\n        }\n        this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);\n    }\n};\n__decorate([\n    Autowired('focusService')\n], HeaderNavigationService.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('headerPositionUtils')\n], HeaderNavigationService.prototype, \"headerPositionUtils\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], HeaderNavigationService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], HeaderNavigationService.prototype, \"postConstruct\", null);\nHeaderNavigationService = __decorate([\n    Bean('headerNavigationService')\n], HeaderNavigationService);\nexport { HeaderNavigationService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyCode } from \"../constants/keyCode.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { ManagedFocusFeature } from \"../widgets/managedFocusFeature.mjs\";\nimport { HeaderNavigationDirection } from \"./common/headerNavigationService.mjs\";\nexport class GridHeaderCtrl extends BeanStub {\n    setComp(comp, eGui, eFocusableElement) {\n        this.comp = comp;\n        this.eGui = eGui;\n        this.createManagedBean(new ManagedFocusFeature(eFocusableElement, {\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this),\n            onFocusOut: this.onFocusOut.bind(this)\n        }));\n        // for setting ag-pivot-on / ag-pivot-off CSS classes\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.onPivotModeChanged();\n        this.setupHeaderHeight();\n        this.ctrlsService.registerGridHeaderCtrl(this);\n    }\n    setupHeaderHeight() {\n        const listener = this.setHeaderHeight.bind(this);\n        listener();\n        this.addManagedPropertyListener('headerHeight', listener);\n        this.addManagedPropertyListener('pivotHeaderHeight', listener);\n        this.addManagedPropertyListener('groupHeaderHeight', listener);\n        this.addManagedPropertyListener('pivotGroupHeaderHeight', listener);\n        this.addManagedPropertyListener('floatingFiltersHeight', listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, listener);\n    }\n    getHeaderHeight() {\n        return this.headerHeight;\n    }\n    setHeaderHeight() {\n        const { columnModel } = this;\n        let numberOfFloating = 0;\n        let headerRowCount = columnModel.getHeaderRowCount();\n        let totalHeaderHeight;\n        const hasFloatingFilters = this.filterManager.hasFloatingFilters();\n        if (hasFloatingFilters) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n        const groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();\n        const headerHeight = this.columnModel.getColumnHeaderRowHeight();\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n        totalHeaderHeight = numberOfFloating * columnModel.getFloatingFiltersHeight();\n        totalHeaderHeight += numberOfGroups * groupHeight;\n        totalHeaderHeight += headerHeight;\n        if (this.headerHeight === totalHeaderHeight) {\n            return;\n        }\n        this.headerHeight = totalHeaderHeight;\n        // one extra pixel is needed here to account for the\n        // height of the border\n        const px = `${totalHeaderHeight + 1}px`;\n        this.comp.setHeightAndMinHeight(px);\n        this.eventService.dispatchEvent({\n            type: Events.EVENT_HEADER_HEIGHT_CHANGED\n        });\n    }\n    onPivotModeChanged() {\n        const pivotMode = this.columnModel.isPivotMode();\n        this.comp.addOrRemoveCssClass('ag-pivot-on', pivotMode);\n        this.comp.addOrRemoveCssClass('ag-pivot-off', !pivotMode);\n    }\n    onDisplayedColumnsChanged() {\n        const columns = this.columnModel.getAllDisplayedColumns();\n        const shouldAllowOverflow = columns.some(col => col.isSpanHeaderHeight());\n        this.comp.addOrRemoveCssClass('ag-header-allow-overflow', shouldAllowOverflow);\n    }\n    onTabKeyDown(e) {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const direction = e.shiftKey !== isRtl\n            ? HeaderNavigationDirection.LEFT\n            : HeaderNavigationDirection.RIGHT;\n        if (this.headerNavigationService.navigateHorizontally(direction, true, e) ||\n            this.focusService.focusNextGridCoreContainer(e.shiftKey)) {\n            e.preventDefault();\n        }\n    }\n    handleKeyDown(e) {\n        let direction = null;\n        switch (e.key) {\n            case KeyCode.LEFT:\n                direction = HeaderNavigationDirection.LEFT;\n            case KeyCode.RIGHT:\n                if (!exists(direction)) {\n                    direction = HeaderNavigationDirection.RIGHT;\n                }\n                this.headerNavigationService.navigateHorizontally(direction, false, e);\n                break;\n            case KeyCode.UP:\n                direction = HeaderNavigationDirection.UP;\n            case KeyCode.DOWN:\n                if (!exists(direction)) {\n                    direction = HeaderNavigationDirection.DOWN;\n                }\n                if (this.headerNavigationService.navigateVertically(direction, null, e)) {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n    onFocusOut(e) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const { relatedTarget } = e;\n        if (!relatedTarget && this.eGui.contains(eDocument.activeElement)) {\n            return;\n        }\n        if (!this.eGui.contains(relatedTarget)) {\n            this.focusService.clearFocusedHeader();\n        }\n    }\n}\n__decorate([\n    Autowired('headerNavigationService')\n], GridHeaderCtrl.prototype, \"headerNavigationService\", void 0);\n__decorate([\n    Autowired('focusService')\n], GridHeaderCtrl.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GridHeaderCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], GridHeaderCtrl.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('filterManager')\n], GridHeaderCtrl.prototype, \"filterManager\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct } from '../context/context.mjs';\nimport { Component } from '../widgets/component.mjs';\nimport { GridHeaderCtrl } from './gridHeaderCtrl.mjs';\nimport { HeaderRowContainerComp } from './rowContainer/headerRowContainerComp.mjs';\nexport class GridHeaderComp extends Component {\n    constructor() {\n        super(GridHeaderComp.TEMPLATE);\n    }\n    postConstruct() {\n        const compProxy = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setHeightAndMinHeight: height => {\n                this.getGui().style.height = height;\n                this.getGui().style.minHeight = height;\n            }\n        };\n        const ctrl = this.createManagedBean(new GridHeaderCtrl());\n        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());\n        const addContainer = (container) => {\n            this.createManagedBean(container);\n            this.appendChild(container);\n        };\n        addContainer(new HeaderRowContainerComp('left'));\n        addContainer(new HeaderRowContainerComp(null));\n        addContainer(new HeaderRowContainerComp('right'));\n    }\n}\nGridHeaderComp.TEMPLATE = `<div class=\"ag-header\" role=\"presentation\"/>`;\n__decorate([\n    PostConstruct\n], GridHeaderComp.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../../context/context.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nlet HorizontalResizeService = class HorizontalResizeService extends BeanStub {\n    addResizeBar(params) {\n        const dragSource = {\n            dragStartPixels: params.dragStartPixels || 0,\n            eElement: params.eResizeBar,\n            onDragStart: this.onDragStart.bind(this, params),\n            onDragStop: this.onDragStop.bind(this, params),\n            onDragging: this.onDragging.bind(this, params),\n            includeTouch: true,\n            stopPropagationForTouch: true\n        };\n        this.dragService.addDragSource(dragSource);\n        // we pass remove func back to the caller, so call can tell us when they\n        // are finished, and then we remove the listener from the drag source\n        const finishedWithResizeFunc = () => this.dragService.removeDragSource(dragSource);\n        return finishedWithResizeFunc;\n    }\n    onDragStart(params, mouseEvent) {\n        this.dragStartX = mouseEvent.clientX;\n        this.setResizeIcons();\n        const shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;\n        params.onResizeStart(shiftKey);\n    }\n    setResizeIcons() {\n        const ctrl = this.ctrlsService.getGridCtrl();\n        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'\n        ctrl.setResizeCursor(true);\n        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)\n        ctrl.disableUserSelect(true);\n    }\n    onDragStop(params, mouseEvent) {\n        params.onResizeEnd(this.resizeAmount);\n        this.resetIcons();\n    }\n    resetIcons() {\n        const ctrl = this.ctrlsService.getGridCtrl();\n        ctrl.setResizeCursor(false);\n        ctrl.disableUserSelect(false);\n    }\n    onDragging(params, mouseEvent) {\n        this.resizeAmount = mouseEvent.clientX - this.dragStartX;\n        params.onResizing(this.resizeAmount);\n    }\n};\n__decorate([\n    Autowired('dragService')\n], HorizontalResizeService.prototype, \"dragService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], HorizontalResizeService.prototype, \"ctrlsService\", void 0);\nHorizontalResizeService = __decorate([\n    Bean('horizontalResizeService')\n], HorizontalResizeService);\nexport { HorizontalResizeService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from '../../../context/context.mjs';\nimport { BeanStub } from \"../../../context/beanStub.mjs\";\nimport { isVisible } from '../../../utils/dom.mjs';\nimport { KeyCode } from '../../../constants/keyCode.mjs';\nimport { setAriaRole } from '../../../utils/aria.mjs';\nlet StandardMenuFactory = class StandardMenuFactory extends BeanStub {\n    hideActiveMenu() {\n        if (this.hidePopup) {\n            this.hidePopup();\n        }\n    }\n    showMenuAfterMouseEvent(column, mouseEvent) {\n        this.showPopup(column, eMenu => {\n            this.popupService.positionPopupUnderMouseEvent({\n                column,\n                type: 'columnMenu',\n                mouseEvent,\n                ePopup: eMenu\n            });\n        }, 'columnMenu', mouseEvent.target);\n    }\n    showMenuAfterButtonClick(column, eventSource, containerType) {\n        this.showPopup(column, eMenu => {\n            this.popupService.positionPopupByComponent({\n                type: containerType,\n                eventSource,\n                ePopup: eMenu,\n                keepWithinBounds: true,\n                position: 'under',\n                column,\n            });\n        }, containerType, eventSource);\n    }\n    showPopup(column, positionCallback, containerType, eventSource) {\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');\n        if (!filterWrapper) {\n            throw new Error('AG Grid - unable to show popup filter, filter instantiation failed');\n        }\n        const eMenu = document.createElement('div');\n        setAriaRole(eMenu, 'presentation');\n        eMenu.classList.add('ag-menu');\n        this.tabListener = this.addManagedListener(eMenu, 'keydown', (e) => this.trapFocusWithin(e, eMenu));\n        filterWrapper.guiPromise.then(gui => eMenu.appendChild(gui));\n        let hidePopup;\n        const afterGuiDetached = () => { var _a; return (_a = filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.then(filter => { var _a; return (_a = filter === null || filter === void 0 ? void 0 : filter.afterGuiDetached) === null || _a === void 0 ? void 0 : _a.call(filter); }); };\n        const anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();\n        const closedCallback = (e) => {\n            column.setMenuVisible(false, 'contextMenu');\n            const isKeyboardEvent = e instanceof KeyboardEvent;\n            if (this.tabListener) {\n                this.tabListener = this.tabListener();\n            }\n            if (isKeyboardEvent && eventSource && isVisible(eventSource)) {\n                const focusableEl = this.focusService.findTabbableParent(eventSource);\n                if (focusableEl) {\n                    focusableEl.focus();\n                }\n            }\n            afterGuiDetached();\n        };\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenu,\n            closeOnEsc: true,\n            closedCallback,\n            positionCallback: () => positionCallback(eMenu),\n            anchorToElement,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu')\n        });\n        if (addPopupRes) {\n            this.hidePopup = hidePopup = addPopupRes.hideFunc;\n        }\n        filterWrapper.filterPromise.then(filter => {\n            // need to make sure the filter is present before positioning, as only\n            // after filter it is visible can we find out what the width of it is\n            positionCallback(eMenu);\n            if (filter.afterGuiAttached) {\n                filter.afterGuiAttached({ container: containerType, hidePopup });\n            }\n        });\n        column.setMenuVisible(true, 'contextMenu');\n    }\n    trapFocusWithin(e, menu) {\n        if (e.key !== KeyCode.TAB ||\n            e.defaultPrevented ||\n            this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {\n            return;\n        }\n        e.preventDefault();\n        this.focusService.focusInto(menu, e.shiftKey);\n    }\n    isMenuEnabled(column) {\n        // for standard, we show menu if filter is enabled, and the menu is not suppressed by passing an empty array\n        return column.isFilterAllowed() && column.getMenuTabs(['filterMenuTab']).includes('filterMenuTab');\n    }\n};\n__decorate([\n    Autowired('filterManager')\n], StandardMenuFactory.prototype, \"filterManager\", void 0);\n__decorate([\n    Autowired('popupService')\n], StandardMenuFactory.prototype, \"popupService\", void 0);\n__decorate([\n    Autowired('focusService')\n], StandardMenuFactory.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], StandardMenuFactory.prototype, \"ctrlsService\", void 0);\nStandardMenuFactory = __decorate([\n    Bean('menuFactory')\n], StandardMenuFactory);\nexport { StandardMenuFactory };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RefSelector } from '../widgets/componentAnnotations.mjs';\nimport { ManagedFocusFeature } from '../widgets/managedFocusFeature.mjs';\nimport { clearElement } from '../utils/dom.mjs';\nimport { setAriaLabel, setAriaRole } from '../utils/aria.mjs';\nimport { callIfPresent } from '../utils/function.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { Component } from '../widgets/component.mjs';\nimport { PostConstruct, Autowired } from '../context/context.mjs';\nexport class TabbedLayout extends Component {\n    constructor(params) {\n        super(TabbedLayout.getTemplate(params.cssClass));\n        this.items = [];\n        this.tabbedItemScrollMap = new Map();\n        this.params = params;\n        if (params.items) {\n            params.items.forEach(item => this.addItem(item));\n        }\n    }\n    postConstruct() {\n        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            handleKeyDown: this.handleKeyDown.bind(this)\n        }));\n        this.addDestroyFunc(() => { var _a, _b, _c; return (_c = (_b = (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.tabbedItem) === null || _b === void 0 ? void 0 : _b.afterDetachedCallback) === null || _c === void 0 ? void 0 : _c.call(_b); });\n    }\n    static getTemplate(cssClass) {\n        return /* html */ `<div class=\"ag-tabs ${cssClass}\">\n            <div ref=\"eHeader\" role=\"tablist\" class=\"ag-tabs-header ${cssClass ? `${cssClass}-header` : ''}\"></div>\n            <div ref=\"eBody\" role=\"presentation\" class=\"ag-tabs-body ${cssClass ? `${cssClass}-body` : ''}\"></div>\n        </div>`;\n    }\n    handleKeyDown(e) {\n        const eDocument = this.gridOptionsService.getDocument();\n        switch (e.key) {\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                if (!this.eHeader.contains(eDocument.activeElement)) {\n                    return;\n                }\n                const isRightKey = e.key === KeyCode.RIGHT;\n                const isRtl = this.gridOptionsService.get('enableRtl');\n                const currentPosition = this.items.indexOf(this.activeItem);\n                const nextPosition = isRightKey !== isRtl ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);\n                if (currentPosition === nextPosition) {\n                    return;\n                }\n                e.preventDefault();\n                const nextItem = this.items[nextPosition];\n                this.showItemWrapper(nextItem);\n                nextItem.eHeaderButton.focus();\n                break;\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                e.stopPropagation();\n                break;\n        }\n    }\n    onTabKeyDown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        const { focusService, eHeader, eBody, activeItem } = this;\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement;\n        const target = e.target;\n        e.preventDefault();\n        if (eHeader.contains(activeElement)) {\n            // focus is in header, move into body of popup\n            focusService.focusInto(eBody, e.shiftKey);\n            return;\n        }\n        let nextEl = null;\n        if (focusService.isTargetUnderManagedComponent(eBody, target)) {\n            if (e.shiftKey) {\n                nextEl = this.focusService.findFocusableElementBeforeTabGuard(eBody, target);\n            }\n            if (!nextEl) {\n                nextEl = activeItem.eHeaderButton;\n            }\n        }\n        if (!nextEl && eBody.contains(activeElement)) {\n            nextEl = focusService.findNextFocusableElement(eBody, false, e.shiftKey);\n            if (!nextEl) {\n                nextEl = activeItem.eHeaderButton;\n            }\n        }\n        if (nextEl) {\n            nextEl.focus();\n        }\n    }\n    setAfterAttachedParams(params) {\n        this.afterAttachedParams = params;\n    }\n    showFirstItem() {\n        if (this.items.length > 0) {\n            this.showItemWrapper(this.items[0]);\n        }\n    }\n    addItem(item) {\n        const eHeaderButton = document.createElement('span');\n        setAriaRole(eHeaderButton, 'tab');\n        eHeaderButton.setAttribute('tabindex', '-1');\n        eHeaderButton.appendChild(item.title);\n        eHeaderButton.classList.add('ag-tab');\n        this.eHeader.appendChild(eHeaderButton);\n        setAriaLabel(eHeaderButton, item.titleLabel);\n        const wrapper = {\n            tabbedItem: item,\n            eHeaderButton: eHeaderButton\n        };\n        this.items.push(wrapper);\n        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));\n    }\n    showItem(tabbedItem) {\n        const itemWrapper = this.items.find(wrapper => wrapper.tabbedItem === tabbedItem);\n        if (itemWrapper) {\n            this.showItemWrapper(itemWrapper);\n        }\n    }\n    showItemWrapper(wrapper) {\n        var _a, _b;\n        const { tabbedItem, eHeaderButton } = wrapper;\n        if (this.params.onItemClicked) {\n            this.params.onItemClicked({ item: tabbedItem });\n        }\n        if (this.activeItem === wrapper) {\n            callIfPresent(this.params.onActiveItemClicked);\n            return;\n        }\n        if (this.lastScrollListener) {\n            this.lastScrollListener = this.lastScrollListener();\n        }\n        clearElement(this.eBody);\n        tabbedItem.bodyPromise.then((body) => {\n            this.eBody.appendChild(body);\n            const onlyUnmanaged = !this.focusService.isKeyboardMode();\n            this.focusService.focusInto(this.eBody, false, onlyUnmanaged);\n            if (tabbedItem.afterAttachedCallback) {\n                tabbedItem.afterAttachedCallback(this.afterAttachedParams);\n            }\n            if (this.params.keepScrollPosition) {\n                const scrollableContainer = (tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer()) || body;\n                this.lastScrollListener = this.addManagedListener(scrollableContainer, 'scroll', () => {\n                    this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer.scrollTop);\n                });\n                const scrollPosition = this.tabbedItemScrollMap.get(tabbedItem.name);\n                if (scrollPosition !== undefined) {\n                    // Safari needs a small timeout or it will fire a scroll event to position 0\n                    setTimeout(() => {\n                        scrollableContainer.scrollTop = scrollPosition;\n                    }, 0);\n                }\n            }\n        });\n        if (this.activeItem) {\n            this.activeItem.eHeaderButton.classList.remove('ag-tab-selected');\n            (_b = (_a = this.activeItem.tabbedItem).afterDetachedCallback) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n        eHeaderButton.classList.add('ag-tab-selected');\n        this.activeItem = wrapper;\n    }\n}\n__decorate([\n    Autowired('focusService')\n], TabbedLayout.prototype, \"focusService\", void 0);\n__decorate([\n    RefSelector('eHeader')\n], TabbedLayout.prototype, \"eHeader\", void 0);\n__decorate([\n    RefSelector('eBody')\n], TabbedLayout.prototype, \"eBody\", void 0);\n__decorate([\n    PostConstruct\n], TabbedLayout.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { offsetHeight, offsetWidth } from \"../utils/dom.mjs\";\nconst DEBOUNCE_DELAY = 50;\nlet ResizeObserverService = class ResizeObserverService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.polyfillFunctions = [];\n    }\n    observeResize(element, callback) {\n        const win = this.gridOptionsService.getWindow();\n        const useBrowserResizeObserver = () => {\n            const resizeObserver = new win.ResizeObserver(callback);\n            resizeObserver.observe(element);\n            return () => resizeObserver.disconnect();\n        };\n        const usePolyfill = () => {\n            // initialise to the current width and height, so first call will have no changes\n            let widthLastTime = offsetWidth(element);\n            let heightLastTime = offsetHeight(element);\n            // when finished, this gets turned to false.\n            let running = true;\n            const periodicallyCheckWidthAndHeight = () => {\n                if (running) {\n                    const newWidth = offsetWidth(element);\n                    const newHeight = offsetHeight(element);\n                    const changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n                    if (changed) {\n                        widthLastTime = newWidth;\n                        heightLastTime = newHeight;\n                        callback();\n                    }\n                    this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);\n                }\n            };\n            periodicallyCheckWidthAndHeight();\n            // the callback function we return sets running to false\n            return () => running = false;\n        };\n        const suppressResize = this.gridOptionsService.get('suppressBrowserResizeObserver');\n        const resizeObserverExists = !!win.ResizeObserver;\n        if (resizeObserverExists && !suppressResize) {\n            return useBrowserResizeObserver();\n        }\n        return usePolyfill();\n    }\n    doNextPolyfillTurn(func) {\n        this.polyfillFunctions.push(func);\n        this.schedulePolyfill();\n    }\n    schedulePolyfill() {\n        if (this.polyfillScheduled) {\n            return;\n        }\n        const executeAllFuncs = () => {\n            const funcs = this.polyfillFunctions;\n            // make sure set scheduled to false and clear clear array\n            // before executing the funcs, as the funcs could add more funcs\n            this.polyfillScheduled = false;\n            this.polyfillFunctions = [];\n            funcs.forEach(f => f());\n        };\n        this.polyfillScheduled = true;\n        this.getFrameworkOverrides().setTimeout(executeAllFuncs, DEBOUNCE_DELAY);\n    }\n};\nResizeObserverService = __decorate([\n    Bean('resizeObserverService')\n], ResizeObserverService);\nexport { ResizeObserverService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet AnimationFrameService = class AnimationFrameService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        // p1 and p2 are create tasks are to do with row and cell creation.\n        // for them we want to execute according to row order, so we use\n        // TaskItem so we know what index the item is for.\n        this.createTasksP1 = { list: [], sorted: false }; // eg drawing back-ground of rows\n        this.createTasksP2 = { list: [], sorted: false }; // eg cell renderers, adding hover functionality\n        // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new\n        // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as\n        // important.\n        this.destroyTasks = [];\n        this.ticking = false;\n        // we need to know direction of scroll, to build up rows in the direction of\n        // the scroll. eg if user scrolls down, we extend the rows by building down.\n        this.scrollGoingDown = true;\n        this.lastPage = 0;\n        this.lastScrollTop = 0;\n        this.taskCount = 0;\n        this.cancelledTasks = new Set();\n    }\n    setScrollTop(scrollTop) {\n        const isPaginationActive = this.gridOptionsService.get('pagination');\n        this.scrollGoingDown = scrollTop >= this.lastScrollTop;\n        if (isPaginationActive && scrollTop === 0) {\n            const currentPage = this.paginationProxy.getCurrentPage();\n            if (currentPage !== this.lastPage) {\n                this.lastPage = currentPage;\n                this.scrollGoingDown = true;\n            }\n        }\n        this.lastScrollTop = scrollTop;\n    }\n    init() {\n        this.useAnimationFrame = !this.gridOptionsService.get('suppressAnimationFrame');\n    }\n    isOn() {\n        return this.useAnimationFrame;\n    }\n    // this method is for our AG Grid sanity only - if animation frames are turned off,\n    // then no place in the code should be looking to add any work to be done in animation\n    // frames. this stops bugs - where some code is asking for a frame to be executed\n    // when it should not.\n    verifyAnimationFrameOn(methodName) {\n        if (this.useAnimationFrame === false) {\n            console.warn(`AG Grid: AnimationFrameService.${methodName} called but animation frames are off`);\n        }\n    }\n    createTask(task, index, list) {\n        this.verifyAnimationFrameOn(list);\n        const taskItem = { task, index, createOrder: ++this.taskCount };\n        this.addTaskToList(this[list], taskItem);\n        this.schedule();\n    }\n    cancelTask(task) {\n        this.cancelledTasks.add(task);\n    }\n    addTaskToList(taskList, task) {\n        taskList.list.push(task);\n        taskList.sorted = false;\n    }\n    sortTaskList(taskList) {\n        if (taskList.sorted) {\n            return;\n        }\n        const sortDirection = this.scrollGoingDown ? 1 : -1;\n        // sort first by row index (taking into account scroll direction), then by\n        // order of task creation (always ascending, so cells will render left-to-right)\n        taskList.list.sort((a, b) => a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder);\n        taskList.sorted = true;\n    }\n    addDestroyTask(task) {\n        this.verifyAnimationFrameOn('createTasksP3');\n        this.destroyTasks.push(task);\n        this.schedule();\n    }\n    executeFrame(millis) {\n        this.verifyAnimationFrameOn('executeFrame');\n        const p1TaskList = this.createTasksP1;\n        const p1Tasks = p1TaskList.list;\n        const p2TaskList = this.createTasksP2;\n        const p2Tasks = p2TaskList.list;\n        const destroyTasks = this.destroyTasks;\n        const frameStart = new Date().getTime();\n        let duration = (new Date().getTime()) - frameStart;\n        // 16ms is 60 fps\n        const noMaxMillis = millis <= 0;\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        while (noMaxMillis || duration < millis) {\n            const gridBodyDidSomething = gridBodyCon.getScrollFeature().scrollGridIfNeeded();\n            if (!gridBodyDidSomething) {\n                let task;\n                if (p1Tasks.length) {\n                    this.sortTaskList(p1TaskList);\n                    task = p1Tasks.pop().task;\n                }\n                else if (p2Tasks.length) {\n                    this.sortTaskList(p2TaskList);\n                    task = p2Tasks.pop().task;\n                }\n                else if (destroyTasks.length) {\n                    task = destroyTasks.pop();\n                }\n                else {\n                    this.cancelledTasks.clear();\n                    break;\n                }\n                if (!this.cancelledTasks.has(task)) {\n                    task();\n                }\n            }\n            duration = (new Date().getTime()) - frameStart;\n        }\n        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {\n            this.requestFrame();\n        }\n        else {\n            this.stopTicking();\n        }\n    }\n    stopTicking() {\n        this.ticking = false;\n    }\n    flushAllFrames() {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        this.executeFrame(-1);\n    }\n    schedule() {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        if (!this.ticking) {\n            this.ticking = true;\n            this.requestFrame();\n        }\n    }\n    requestFrame() {\n        // check for the existence of requestAnimationFrame, and if\n        // it's missing, then we polyfill it with setTimeout()\n        const callback = this.executeFrame.bind(this, 60);\n        this.requestAnimationFrame(callback);\n    }\n    requestAnimationFrame(callback) {\n        const win = this.gridOptionsService.getWindow();\n        if (win.requestAnimationFrame) {\n            win.requestAnimationFrame(callback);\n        }\n        else if (win.webkitRequestAnimationFrame) {\n            win.webkitRequestAnimationFrame(callback);\n        }\n        else {\n            win.setTimeout(callback, 0);\n        }\n    }\n    isQueueEmpty() {\n        return !this.ticking;\n    }\n    // a debounce utility used for parts of the app involved with rendering.\n    // the advantage over normal debounce is the client can call flushAllFrames()\n    // to make sure all rendering is complete. we don't wait any milliseconds,\n    // as this is intended to batch calls in one VM turn.\n    debounce(func) {\n        let pending = false;\n        return () => {\n            if (!this.isOn()) {\n                this.getFrameworkOverrides().setTimeout(func, 0);\n                return;\n            }\n            if (pending) {\n                return;\n            }\n            pending = true;\n            this.addDestroyTask(() => {\n                pending = false;\n                func();\n            });\n        };\n    }\n};\n__decorate([\n    Autowired('ctrlsService')\n], AnimationFrameService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], AnimationFrameService.prototype, \"paginationProxy\", void 0);\n__decorate([\n    PostConstruct\n], AnimationFrameService.prototype, \"init\", null);\nAnimationFrameService = __decorate([\n    Bean('animationFrameService')\n], AnimationFrameService);\nexport { AnimationFrameService };\n","export var ClientSideRowModelSteps;\n(function (ClientSideRowModelSteps) {\n    ClientSideRowModelSteps[\"EVERYTHING\"] = \"group\";\n    ClientSideRowModelSteps[\"FILTER\"] = \"filter\";\n    ClientSideRowModelSteps[\"SORT\"] = \"sort\";\n    ClientSideRowModelSteps[\"MAP\"] = \"map\";\n    ClientSideRowModelSteps[\"AGGREGATE\"] = \"aggregate\";\n    ClientSideRowModelSteps[\"FILTER_AGGREGATES\"] = \"filter_aggregates\";\n    ClientSideRowModelSteps[\"PIVOT\"] = \"pivot\";\n    ClientSideRowModelSteps[\"NOTHING\"] = \"nothing\";\n})(ClientSideRowModelSteps || (ClientSideRowModelSteps = {}));\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { ClientSideRowModelSteps } from \"../interfaces/iClientSideRowModel.mjs\";\nlet ExpansionService = class ExpansionService extends BeanStub {\n    postConstruct() {\n        this.isClientSideRowModel = this.rowModel.getType() === 'clientSide';\n    }\n    expandRows(rowIds) {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        const rowIdSet = new Set(rowIds);\n        this.rowModel.forEachNode(node => {\n            if (node.id && rowIdSet.has(node.id)) {\n                node.expanded = true;\n            }\n        });\n        this.onGroupExpandedOrCollapsed();\n    }\n    getExpandedRows() {\n        const expandedRows = [];\n        this.rowModel.forEachNode(({ expanded, id }) => {\n            if (expanded && id) {\n                expandedRows.push(id);\n            }\n        });\n        return expandedRows;\n    }\n    expandAll(value) {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        this.rowModel.expandOrCollapseAll(value);\n    }\n    setRowNodeExpanded(rowNode, expanded, expandParents) {\n        if (rowNode) {\n            // expand all parents recursively, except root node.\n            if (expandParents && rowNode.parent && rowNode.parent.level !== -1) {\n                this.setRowNodeExpanded(rowNode.parent, expanded, expandParents);\n            }\n            rowNode.setExpanded(expanded);\n        }\n    }\n    onGroupExpandedOrCollapsed() {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        this.rowModel.refreshModel({ step: ClientSideRowModelSteps.MAP });\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], ExpansionService.prototype, \"rowModel\", void 0);\n__decorate([\n    PostConstruct\n], ExpansionService.prototype, \"postConstruct\", null);\nExpansionService = __decorate([\n    Bean('expansionService')\n], ExpansionService);\nexport { ExpansionService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet AutoWidthCalculator = class AutoWidthCalculator extends BeanStub {\n    postConstruct() {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCtrl = p.centerRowContainerCtrl;\n        });\n    }\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    getPreferredWidthForColumn(column, skipHeader) {\n        const eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) {\n            return -1;\n        }\n        const elements = this.rowRenderer.getAllCellsForColumn(column);\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            elements.push(eHeaderCell);\n        }\n        return this.addElementsToContainerAndGetWidth(elements);\n    }\n    getPreferredWidthForColumnGroup(columnGroup) {\n        const eHeaderCell = this.getHeaderCellForColumn(columnGroup);\n        if (!eHeaderCell) {\n            return -1;\n        }\n        return this.addElementsToContainerAndGetWidth([eHeaderCell]);\n    }\n    addElementsToContainerAndGetWidth(elements) {\n        // this element has to be a form, otherwise form elements within a cell\n        // will be validated while being cloned. This can cause issues such as \n        // radio buttons being reset and losing their values.\n        const eDummyContainer = document.createElement('form');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.centerRowContainerCtrl.getContainerElement();\n        elements.forEach(el => this.cloneItemIntoDummy(el, eDummyContainer));\n        // only append the dummyContainer to the DOM after it contains all the necessary items\n        eBodyContainer.appendChild(eDummyContainer);\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        const dummyContainerWidth = eDummyContainer.offsetWidth;\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        const autoSizePadding = this.getAutoSizePadding();\n        return dummyContainerWidth + autoSizePadding;\n    }\n    getAutoSizePadding() {\n        return this.gridOptionsService.get('autoSizePadding');\n    }\n    getHeaderCellForColumn(column) {\n        /* tslint:enable */\n        let element = null;\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach(container => {\n            const res = container.getHtmlElementForColumnHeader(column);\n            if (res != null) {\n                element = res;\n            }\n        });\n        return element;\n    }\n    cloneItemIntoDummy(eCell, eDummyContainer) {\n        // make a deep clone of the cell\n        const eCellClone = eCell.cloneNode(true);\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        const eCloneParent = document.createElement('div');\n        const eCloneParentClassList = eCloneParent.classList;\n        const isHeader = ['ag-header-cell', 'ag-header-group-cell'].some(cls => eCellClone.classList.contains(cls));\n        if (isHeader) {\n            eCloneParentClassList.add('ag-header', 'ag-header-row');\n            eCloneParent.style.position = 'static';\n        }\n        else {\n            eCloneParentClassList.add('ag-row');\n        }\n        // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\n        // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\n        // onto group items.\n        let pointer = eCell.parentElement;\n        while (pointer) {\n            const isRow = ['ag-header-row', 'ag-row'].some(cls => pointer.classList.contains(cls));\n            if (isRow) {\n                for (let i = 0; i < pointer.classList.length; i++) {\n                    const item = pointer.classList[i];\n                    // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\n                    // element from fitting into it's parent, and we need the element to stretch the parent\n                    // as we are measuring the parents width\n                    if (item != 'ag-row-position-absolute') {\n                        eCloneParentClassList.add(item);\n                    }\n                }\n                break;\n            }\n            pointer = pointer.parentElement;\n        }\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    }\n};\n__decorate([\n    Autowired('rowRenderer')\n], AutoWidthCalculator.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], AutoWidthCalculator.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('rowCssClassCalculator')\n], AutoWidthCalculator.prototype, \"rowCssClassCalculator\", void 0);\n__decorate([\n    PostConstruct\n], AutoWidthCalculator.prototype, \"postConstruct\", null);\nAutoWidthCalculator = __decorate([\n    Bean('autoWidthCalculator')\n], AutoWidthCalculator);\nexport { AutoWidthCalculator };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { last } from \"../../utils/array.mjs\";\nexport class StickyRowFeature extends BeanStub {\n    constructor(createRowCon, destroyRowCtrls) {\n        super();\n        this.createRowCon = createRowCon;\n        this.destroyRowCtrls = destroyRowCtrls;\n        this.stickyRowCtrls = [];\n        this.containerHeight = 0;\n    }\n    postConstruct() {\n        this.isClientSide = this.rowModel.getType() === 'clientSide';\n        this.ctrlsService.whenReady(params => {\n            this.gridBodyCtrl = params.gridBodyCtrl;\n        });\n    }\n    getStickyRowCtrls() {\n        return this.stickyRowCtrls;\n    }\n    checkStickyRows() {\n        let height = 0;\n        if (!this.gridOptionsService.isGroupRowsSticky()) {\n            return this.refreshNodesAndContainerHeight([], height);\n        }\n        const stickyRows = [];\n        const firstPixel = this.rowRenderer.getFirstVisibleVerticalPixel();\n        const addStickyRow = (stickyRow) => {\n            var _a, _b, _c;\n            stickyRows.push(stickyRow);\n            let lastChildBottom;\n            if (this.isClientSide) {\n                let lastAncestor = stickyRow;\n                while (lastAncestor.isExpandable() && lastAncestor.expanded) {\n                    if (lastAncestor.master) {\n                        lastAncestor = lastAncestor.detailNode;\n                    }\n                    else if (lastAncestor.childrenAfterSort) {\n                        // Tree Data will have `childrenAfterSort` without any nodes, but\n                        // the current node will still be marked as expansible.\n                        if (lastAncestor.childrenAfterSort.length === 0) {\n                            break;\n                        }\n                        lastAncestor = last(lastAncestor.childrenAfterSort);\n                    }\n                }\n                lastChildBottom = lastAncestor.rowTop + lastAncestor.rowHeight;\n            }\n            // if the rowModel is `serverSide` as only `clientSide` and `serverSide` create this feature.\n            else {\n                if (stickyRow.master) {\n                    lastChildBottom = stickyRow.detailNode.rowTop + stickyRow.detailNode.rowHeight;\n                }\n                else {\n                    const storeBounds = (_a = stickyRow.childStore) === null || _a === void 0 ? void 0 : _a.getStoreBounds();\n                    lastChildBottom = ((_b = storeBounds === null || storeBounds === void 0 ? void 0 : storeBounds.heightPx) !== null && _b !== void 0 ? _b : 0) + ((_c = storeBounds === null || storeBounds === void 0 ? void 0 : storeBounds.topPx) !== null && _c !== void 0 ? _c : 0);\n                }\n            }\n            const stickRowBottom = firstPixel + height + stickyRow.rowHeight;\n            if (lastChildBottom < stickRowBottom) {\n                stickyRow.stickyRowTop = height + (lastChildBottom - stickRowBottom);\n            }\n            else {\n                stickyRow.stickyRowTop = height;\n            }\n            height = 0;\n            stickyRows.forEach(rowNode => {\n                const thisRowLastPx = rowNode.stickyRowTop + rowNode.rowHeight;\n                if (height < thisRowLastPx) {\n                    height = thisRowLastPx;\n                }\n            });\n        };\n        while (true) {\n            const firstPixelAfterStickyRows = firstPixel + height;\n            const firstIndex = this.rowModel.getRowIndexAtPixel(firstPixelAfterStickyRows);\n            const firstRow = this.rowModel.getRow(firstIndex);\n            if (firstRow == null) {\n                break;\n            }\n            // only happens when pivoting, and we are showing root node\n            if (firstRow.level < 0) {\n                break;\n            }\n            const parents = [];\n            let p = firstRow.parent;\n            while (p.level >= 0) {\n                parents.push(p);\n                p = p.parent;\n            }\n            const firstMissingParent = parents.reverse().find(parent => stickyRows.indexOf(parent) < 0 && parent.displayed);\n            if (firstMissingParent) {\n                addStickyRow(firstMissingParent);\n                continue;\n            }\n            // if first row is an open group, and practically shown, it needs\n            // to be stuck\n            if (firstRow.isExpandable() && firstRow.expanded && firstRow.rowTop < firstPixelAfterStickyRows) {\n                addStickyRow(firstRow);\n                continue;\n            }\n            break;\n        }\n        return this.refreshNodesAndContainerHeight(stickyRows, height);\n    }\n    refreshStickyNode(stickRowNode) {\n        const allStickyNodes = [];\n        for (let i = 0; i < this.stickyRowCtrls.length; i++) {\n            const currentNode = this.stickyRowCtrls[i].getRowNode();\n            if (currentNode !== stickRowNode) {\n                allStickyNodes.push(currentNode);\n            }\n        }\n        if (this.refreshNodesAndContainerHeight(allStickyNodes, this.containerHeight)) {\n            this.checkStickyRows();\n        }\n    }\n    refreshNodesAndContainerHeight(allStickyNodes, height) {\n        let stickyRowsChanged = false;\n        const removedCtrls = this.stickyRowCtrls.filter(ctrl => allStickyNodes.indexOf(ctrl.getRowNode()) === -1);\n        const addedNodes = allStickyNodes.filter(rowNode => this.stickyRowCtrls.findIndex(ctrl => ctrl.getRowNode() === rowNode) === -1);\n        if (removedCtrls.length || addedNodes.length) {\n            stickyRowsChanged = true;\n        }\n        const ctrlsToDestroy = {};\n        removedCtrls.forEach(removedCtrl => {\n            ctrlsToDestroy[removedCtrl.getRowNode().id] = removedCtrl;\n            this.stickyRowCtrls = this.stickyRowCtrls.filter(ctrl => ctrl !== removedCtrl);\n        });\n        for (const ctrl of Object.values(ctrlsToDestroy)) {\n            ctrl.getRowNode().sticky = false;\n        }\n        this.destroyRowCtrls(ctrlsToDestroy, false);\n        const newCtrls = addedNodes.map(rowNode => {\n            rowNode.sticky = true;\n            return this.createRowCon(rowNode, false, false);\n        });\n        this.stickyRowCtrls.push(...newCtrls);\n        this.stickyRowCtrls.forEach(ctrl => ctrl.setRowTop(ctrl.getRowNode().stickyRowTop));\n        this.stickyRowCtrls.sort((a, b) => b.getRowNode().rowIndex - a.getRowNode().rowIndex);\n        if (this.containerHeight !== height) {\n            this.containerHeight = height;\n            this.gridBodyCtrl.setStickyTopHeight(height);\n            stickyRowsChanged = true;\n        }\n        return stickyRowsChanged;\n    }\n}\n__decorate([\n    Autowired(\"rowModel\")\n], StickyRowFeature.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired(\"rowRenderer\")\n], StickyRowFeature.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired(\"ctrlsService\")\n], StickyRowFeature.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], StickyRowFeature.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RowCtrl } from \"./row/rowCtrl.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { getAllValuesInObject, iterateObject } from \"../utils/object.mjs\";\nimport { createArrayOfNumbers } from \"../utils/number.mjs\";\nimport { executeInAWhile } from \"../utils/function.mjs\";\nimport { CellCtrl } from \"./cell/cellCtrl.mjs\";\nimport { removeFromArray } from \"../utils/array.mjs\";\nimport { StickyRowFeature } from \"./features/stickyRowFeature.mjs\";\nimport { browserSupportsPreventScroll } from \"../utils/browser.mjs\";\nlet RowRenderer = class RowRenderer extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.destroyFuncsForColumnListeners = [];\n        // map of row ids to row objects. keeps track of which elements\n        // are rendered for which rows in the dom.\n        this.rowCtrlsByRowIndex = {};\n        this.zombieRowCtrls = {};\n        this.allRowCtrls = [];\n        this.topRowCtrls = [];\n        this.bottomRowCtrls = [];\n        // we only allow one refresh at a time, otherwise the internal memory structure here\n        // will get messed up. this can happen if the user has a cellRenderer, and inside the\n        // renderer they call an API method that results in another pass of the refresh,\n        // then it will be trying to draw rows in the middle of a refresh.\n        this.refreshInProgress = false;\n        this.dataFirstRenderedFired = false;\n        this.setupRangeSelectionListeners = () => {\n            const onRangeSelectionChanged = () => {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onRangeSelectionChanged());\n            };\n            const onColumnMovedPinnedVisible = () => {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.updateRangeBordersIfRangeCount());\n            };\n            const addRangeSelectionListeners = () => {\n                this.eventService.addEventListener(Events.EVENT_RANGE_SELECTION_CHANGED, onRangeSelectionChanged);\n                this.eventService.addEventListener(Events.EVENT_COLUMN_MOVED, onColumnMovedPinnedVisible);\n                this.eventService.addEventListener(Events.EVENT_COLUMN_PINNED, onColumnMovedPinnedVisible);\n                this.eventService.addEventListener(Events.EVENT_COLUMN_VISIBLE, onColumnMovedPinnedVisible);\n            };\n            const removeRangeSelectionListeners = () => {\n                this.eventService.removeEventListener(Events.EVENT_RANGE_SELECTION_CHANGED, onRangeSelectionChanged);\n                this.eventService.removeEventListener(Events.EVENT_COLUMN_MOVED, onColumnMovedPinnedVisible);\n                this.eventService.removeEventListener(Events.EVENT_COLUMN_PINNED, onColumnMovedPinnedVisible);\n                this.eventService.removeEventListener(Events.EVENT_COLUMN_VISIBLE, onColumnMovedPinnedVisible);\n            };\n            this.addDestroyFunc(() => removeRangeSelectionListeners());\n            this.addManagedPropertyListener('enableRangeSelection', (params) => {\n                const isEnabled = params.currentValue;\n                if (isEnabled) {\n                    addRangeSelectionListeners();\n                }\n                else {\n                    removeRangeSelectionListeners();\n                }\n            });\n            const rangeSelectionEnabled = this.gridOptionsService.get('enableRangeSelection');\n            if (rangeSelectionEnabled) {\n                addRangeSelectionListeners();\n            }\n        };\n    }\n    postConstruct() {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.initialise();\n        });\n    }\n    initialise() {\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.onBodyScroll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redraw.bind(this));\n        this.addManagedPropertyListeners(['domLayout', 'embedFullWidthRows'], () => this.onDomLayoutChanged());\n        this.addManagedPropertyListeners(['suppressMaxRenderedRowRestriction', 'rowBuffer'], () => this.redraw());\n        this.addManagedPropertyListeners([\n            'suppressCellFocus', 'getBusinessKeyForNode',\n            'fullWidthCellRenderer', 'fullWidthCellRendererParams',\n            'rowStyle', 'getRowStyle',\n            'rowClass', 'getRowClass', 'rowClassRules',\n            'groupRowRenderer', 'groupRowRendererParams',\n            'loadingCellRenderer', 'loadingCellRendererParams',\n            'detailCellRenderer', 'detailCellRendererParams',\n            'enableRangeSelection', 'enableCellTextSelection',\n        ], () => this.redrawRows());\n        if (this.gridOptionsService.isGroupRowsSticky()) {\n            const rowModelType = this.rowModel.getType();\n            if (rowModelType === 'clientSide' || rowModelType === 'serverSide') {\n                this.stickyRowFeature = this.createManagedBean(new StickyRowFeature(this.createRowCon.bind(this), this.destroyRowCtrls.bind(this)));\n            }\n        }\n        this.registerCellEventListeners();\n        this.initialiseCache();\n        this.printLayout = this.gridOptionsService.isDomLayout('print');\n        this.embedFullWidthRows = this.printLayout || this.gridOptionsService.get('embedFullWidthRows');\n        this.redrawAfterModelUpdate();\n    }\n    initialiseCache() {\n        if (this.gridOptionsService.get('keepDetailRows')) {\n            const countProp = this.getKeepDetailRowsCount();\n            const count = countProp != null ? countProp : 3;\n            this.cachedRowCtrls = new RowCtrlCache(count);\n        }\n    }\n    getKeepDetailRowsCount() {\n        return this.gridOptionsService.get('keepDetailRowsCount');\n    }\n    getStickyTopRowCtrls() {\n        if (!this.stickyRowFeature) {\n            return [];\n        }\n        return this.stickyRowFeature.getStickyRowCtrls();\n    }\n    updateAllRowCtrls() {\n        const liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);\n        const isEnsureDomOrder = this.gridOptionsService.get('ensureDomOrder');\n        const isPrintLayout = this.gridOptionsService.isDomLayout('print');\n        if (isEnsureDomOrder || isPrintLayout) {\n            liveList.sort((a, b) => a.getRowNode().rowIndex - b.getRowNode.rowIndex);\n        }\n        const zombieList = getAllValuesInObject(this.zombieRowCtrls);\n        const cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];\n        if (zombieList.length > 0 || cachedList.length > 0) {\n            // Only spread if we need to.\n            this.allRowCtrls = [...liveList, ...zombieList, ...cachedList];\n        }\n        else {\n            this.allRowCtrls = liveList;\n        }\n    }\n    onCellFocusChanged(event) {\n        this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onCellFocused(event));\n        this.getFullWidthRowCtrls().forEach(rowCtrl => rowCtrl.onFullWidthRowFocused(event));\n    }\n    // in a clean design, each cell would register for each of these events. however when scrolling, all the cells\n    // registering and de-registering for events is a performance bottleneck. so we register here once and inform\n    // all active cells.\n    registerCellEventListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, (event) => {\n            this.onCellFocusChanged(event);\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUS_CLEARED, () => {\n            this.onCellFocusChanged();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, event => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onFlashCells(event));\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onColumnHover());\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onDisplayedColumnsChanged());\n        });\n        // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,\n        // then changing the width of the containers will impact left position. eg the center cols all have their\n        // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,\n        // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are\n        // in different containers so doesn't impact.\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, () => {\n            if (this.printLayout) {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onLeftChanged());\n            }\n        });\n        this.setupRangeSelectionListeners();\n        // add listeners to the grid columns\n        this.refreshListenersToColumnsForCellComps();\n        // if the grid columns change, then refresh the listeners again\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));\n        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));\n    }\n    // executes all functions in destroyFuncsForColumnListeners and then clears the list\n    removeGridColumnListeners() {\n        this.destroyFuncsForColumnListeners.forEach(func => func());\n        this.destroyFuncsForColumnListeners.length = 0;\n    }\n    // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.\n    // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to\n    // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here\n    // once instead.\n    refreshListenersToColumnsForCellComps() {\n        this.removeGridColumnListeners();\n        const cols = this.columnModel.getAllGridColumns();\n        cols.forEach(col => {\n            const forEachCellWithThisCol = (callback) => {\n                this.getAllCellCtrls().forEach(cellCtrl => {\n                    if (cellCtrl.getColumn() === col) {\n                        callback(cellCtrl);\n                    }\n                });\n            };\n            const leftChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onLeftChanged());\n            };\n            const widthChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onWidthChanged());\n            };\n            const firstRightPinnedChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onFirstRightPinnedChanged());\n            };\n            const lastLeftPinnedChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onLastLeftPinnedChanged());\n            };\n            const colDefChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onColDefChanged());\n            };\n            col.addEventListener('leftChanged', leftChangedListener);\n            col.addEventListener('widthChanged', widthChangedListener);\n            col.addEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\n            col.addEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\n            col.addEventListener('colDefChanged', colDefChangedListener);\n            this.destroyFuncsForColumnListeners.push(() => {\n                col.removeEventListener('leftChanged', leftChangedListener);\n                col.removeEventListener('widthChanged', widthChangedListener);\n                col.removeEventListener('firstRightPinnedChanged', firstRightPinnedChangedListener);\n                col.removeEventListener('lastLeftPinnedChanged', lastLeftPinnedChangedListener);\n                col.removeEventListener('colDefChanged', colDefChangedListener);\n            });\n        });\n    }\n    onDomLayoutChanged() {\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n        const embedFullWidthRows = printLayout || this.gridOptionsService.get('embedFullWidthRows');\n        // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid\n        // out using absolute positioning when doing print layout\n        const destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;\n        this.printLayout = printLayout;\n        this.embedFullWidthRows = embedFullWidthRows;\n        if (destroyRows) {\n            this.redrawAfterModelUpdate({ domLayoutChanged: true });\n        }\n    }\n    // for row models that have datasources, when we update the datasource, we need to force the rowRenderer\n    // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.\n    datasourceChanged() {\n        this.firstRenderedRow = 0;\n        this.lastRenderedRow = -1;\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n    onPageLoaded(event) {\n        const params = {\n            recycleRows: event.keepRenderedRows,\n            animate: event.animate,\n            newData: event.newData,\n            newPage: event.newPage,\n            // because this is a model updated event (not pinned rows), we\n            // can skip updating the pinned rows. this is needed so that if user\n            // is doing transaction updates, the pinned rows are not getting constantly\n            // trashed - or editing cells in pinned rows are not refreshed and put into read mode\n            onlyBody: true\n        };\n        this.redrawAfterModelUpdate(params);\n    }\n    getAllCellsForColumn(column) {\n        const res = [];\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            const eCell = rowCtrl.getCellElement(column);\n            if (eCell) {\n                res.push(eCell);\n            }\n        });\n        return res;\n    }\n    refreshFloatingRowComps() {\n        this.refreshFloatingRows(this.topRowCtrls, this.pinnedRowModel.getPinnedTopRowData());\n        this.refreshFloatingRows(this.bottomRowCtrls, this.pinnedRowModel.getPinnedBottomRowData());\n    }\n    getTopRowCtrls() {\n        return this.topRowCtrls;\n    }\n    getCentreRowCtrls() {\n        return this.allRowCtrls;\n    }\n    getBottomRowCtrls() {\n        return this.bottomRowCtrls;\n    }\n    refreshFloatingRows(rowComps, rowNodes) {\n        rowComps.forEach((row) => {\n            row.destroyFirstPass();\n            row.destroySecondPass();\n        });\n        rowComps.length = 0;\n        if (!rowNodes) {\n            return;\n        }\n        rowNodes.forEach(rowNode => {\n            const rowCtrl = new RowCtrl(rowNode, this.beans, false, false, this.printLayout);\n            rowComps.push(rowCtrl);\n        });\n    }\n    onPinnedRowDataChanged() {\n        // recycling rows in order to ensure cell editing is not cancelled\n        const params = {\n            recycleRows: true\n        };\n        this.redrawAfterModelUpdate(params);\n    }\n    redrawRow(rowNode, suppressEvent = false) {\n        if (rowNode.sticky) {\n            this.stickyRowFeature.refreshStickyNode(rowNode);\n        }\n        else {\n            const destroyAndRecreateCtrl = (dataStruct) => {\n                const ctrl = dataStruct[rowNode.rowIndex];\n                if (!ctrl) {\n                    return;\n                }\n                if (ctrl.getRowNode() !== rowNode) {\n                    // if the node is in the wrong place, then the row model is responsible for triggering a full refresh.\n                    return;\n                }\n                ctrl.destroyFirstPass();\n                ctrl.destroySecondPass();\n                dataStruct[rowNode.rowIndex] = this.createRowCon(rowNode, false, false);\n            };\n            switch (rowNode.rowPinned) {\n                case 'top':\n                    destroyAndRecreateCtrl(this.topRowCtrls);\n                case 'bottom':\n                    destroyAndRecreateCtrl(this.bottomRowCtrls);\n                default:\n                    destroyAndRecreateCtrl(this.rowCtrlsByRowIndex);\n                    this.updateAllRowCtrls();\n            }\n        }\n        if (!suppressEvent) {\n            this.dispatchDisplayedRowsChanged(false);\n        }\n    }\n    redrawRows(rowNodes) {\n        // if no row nodes provided, then refresh everything\n        const partialRefresh = rowNodes != null;\n        if (partialRefresh) {\n            rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes.forEach(node => this.redrawRow(node, true));\n            this.dispatchDisplayedRowsChanged(false);\n            return;\n        }\n        this.redrawAfterModelUpdate();\n    }\n    getCellToRestoreFocusToAfterRefresh(params) {\n        const focusedCell = (params === null || params === void 0 ? void 0 : params.suppressKeepFocus) ? null : this.focusService.getFocusCellToUseAfterRefresh();\n        if (focusedCell == null) {\n            return null;\n        }\n        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this\n        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the\n        // cell itself, then the cell can be registered as having focus, however it's the text field that\n        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus\n        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,\n        // the focus is lost from the text field. we do not want this.\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement;\n        const cellDomData = this.gridOptionsService.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const rowDomData = this.gridOptionsService.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n        const gridElementFocused = cellDomData || rowDomData;\n        return gridElementFocused ? focusedCell : null;\n    }\n    // gets called from:\n    // +) initialisation (in registerGridComp) params = null\n    // +) onDomLayoutChanged, params = null\n    // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true\n    // +) onPinnedRowDataChanged, recycleRows = true\n    // +) redrawRows (from Grid API), recycleRows = true/false\n    redrawAfterModelUpdate(params = {}) {\n        this.getLockOnRefresh();\n        const focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);\n        this.updateContainerHeights();\n        this.scrollToTopIfNewData(params);\n        // never recycle rows on layout change as rows could change from normal DOM layout\n        // back to the grid's row positioning.\n        const recycleRows = !params.domLayoutChanged && !!params.recycleRows;\n        const animate = params.animate && this.gridOptionsService.isAnimateRows();\n        // after modelUpdate, row indexes can change, so we clear out the rowsByIndex map,\n        // however we can reuse the rows, so we keep them but index by rowNode.id\n        const rowsToRecycle = recycleRows ? this.getRowsToRecycle() : null;\n        if (!recycleRows) {\n            this.removeAllRowComps();\n        }\n        this.workOutFirstAndLastRowsToRender();\n        if (this.stickyRowFeature) {\n            this.stickyRowFeature.checkStickyRows();\n        }\n        this.recycleRows(rowsToRecycle, animate);\n        this.gridBodyCtrl.updateRowCount();\n        if (!params.onlyBody) {\n            this.refreshFloatingRowComps();\n        }\n        this.dispatchDisplayedRowsChanged();\n        // if a cell was focused before, ensure focus now.\n        if (focusedCell != null) {\n            this.restoreFocusedCell(focusedCell);\n        }\n        this.releaseLockOnRefresh();\n    }\n    scrollToTopIfNewData(params) {\n        const scrollToTop = params.newData || params.newPage;\n        const suppressScrollToTop = this.gridOptionsService.get('suppressScrollOnNewData');\n        if (scrollToTop && !suppressScrollToTop) {\n            this.gridBodyCtrl.getScrollFeature().scrollToTop();\n        }\n    }\n    updateContainerHeights() {\n        // when doing print layout, we don't explicitly set height on the containers\n        if (this.printLayout) {\n            this.rowContainerHeightService.setModelHeight(null);\n            return;\n        }\n        let containerHeight = this.paginationProxy.getCurrentPageHeight();\n        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,\n        // we still want the scroll to be present, otherwise there would be no way to scroll the header\n        // which might be needed us user wants to access columns\n        // on the RHS - and if that was where the filter was that cause no rows to be presented, there\n        // is no way to remove the filter.\n        if (containerHeight === 0) {\n            containerHeight = 1;\n        }\n        this.rowContainerHeightService.setModelHeight(containerHeight);\n    }\n    getLockOnRefresh() {\n        if (this.refreshInProgress) {\n            throw new Error(\"AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. \" +\n                \"Your code probably called a grid API method while the grid was in the render stage. To overcome \" +\n                \"this, put the API call into a timeout, e.g. instead of api.redrawRows(), \" +\n                \"call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code \" +\n                \"that caused the refresh check this stacktrace.\");\n        }\n        this.refreshInProgress = true;\n    }\n    releaseLockOnRefresh() {\n        this.refreshInProgress = false;\n    }\n    isRefreshInProgress() {\n        return this.refreshInProgress;\n    }\n    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without\n    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits\n    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the\n    // edited cell).\n    restoreFocusedCell(cellPosition) {\n        if (cellPosition) {\n            // we don't wish to dispatch an event as the rowRenderer is not capable of changing the selected cell,\n            // so we mock a change event for the full width rows and cells to ensure they update to the newly selected\n            // state\n            this.focusService.setRestoreFocusedCell(cellPosition);\n            this.onCellFocusChanged({\n                rowIndex: cellPosition.rowIndex,\n                column: cellPosition.column,\n                rowPinned: cellPosition.rowPinned,\n                forceBrowserFocus: true,\n                preventScrollOnBrowserFocus: true,\n                api: this.beans.gridApi,\n                columnApi: this.beans.columnApi,\n                context: this.beans.gridOptionsService.context,\n                type: 'mock',\n            });\n        }\n    }\n    stopEditing(cancel = false) {\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            rowCtrl.stopEditing(cancel);\n        });\n    }\n    getAllCellCtrls() {\n        const res = [];\n        const rowCtrls = this.getAllRowCtrls();\n        const rowCtrlsLength = rowCtrls.length;\n        for (let i = 0; i < rowCtrlsLength; i++) {\n            const cellCtrls = rowCtrls[i].getAllCellCtrls();\n            const cellCtrlsLength = cellCtrls.length;\n            for (let j = 0; j < cellCtrlsLength; j++) {\n                res.push(cellCtrls[j]);\n            }\n        }\n        return res;\n    }\n    getAllRowCtrls() {\n        const stickyRowCtrls = (this.stickyRowFeature && this.stickyRowFeature.getStickyRowCtrls()) || [];\n        const res = [...this.topRowCtrls, ...this.bottomRowCtrls, ...stickyRowCtrls];\n        for (const key of Object.keys(this.rowCtrlsByRowIndex)) {\n            res.push(this.rowCtrlsByRowIndex[key]);\n        }\n        return res;\n    }\n    addRenderedRowListener(eventName, rowIndex, callback) {\n        const rowComp = this.rowCtrlsByRowIndex[rowIndex];\n        if (rowComp) {\n            rowComp.addEventListener(eventName, callback);\n        }\n    }\n    flashCells(params = {}) {\n        const { flashDelay, fadeDelay } = params;\n        this.getCellCtrls(params.rowNodes, params.columns)\n            .forEach(cellCtrl => cellCtrl.flashCell({ flashDelay, fadeDelay }));\n    }\n    refreshCells(params = {}) {\n        const refreshCellParams = {\n            forceRefresh: params.force,\n            newData: false,\n            suppressFlash: params.suppressFlash\n        };\n        this.getCellCtrls(params.rowNodes, params.columns)\n            .forEach(cellCtrl => cellCtrl.refreshOrDestroyCell(refreshCellParams));\n        if (params.rowNodes) {\n            // refresh the full width rows too\n            this.getRowCtrls(params.rowNodes).forEach(rowCtrl => {\n                if (!rowCtrl.isFullWidth()) {\n                    return;\n                }\n                const refreshed = rowCtrl.refreshFullWidth();\n                if (!refreshed) {\n                    this.redrawRow(rowCtrl.getRowNode(), true);\n                }\n            });\n            this.dispatchDisplayedRowsChanged(false);\n        }\n    }\n    getCellRendererInstances(params) {\n        var _a;\n        const cellRenderers = this.getCellCtrls(params.rowNodes, params.columns)\n            .map(cellCtrl => cellCtrl.getCellRenderer())\n            .filter(renderer => renderer != null);\n        if ((_a = params.columns) === null || _a === void 0 ? void 0 : _a.length) {\n            return cellRenderers;\n        }\n        const fullWidthRenderers = [];\n        const rowIdMap = this.mapRowNodes(params.rowNodes);\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            if (rowIdMap && !this.isRowInMap(rowCtrl.getRowNode(), rowIdMap)) {\n                return;\n            }\n            if (!rowCtrl.isFullWidth()) {\n                return;\n            }\n            const fullWidthRenderer = rowCtrl.getFullWidthCellRenderer();\n            if (fullWidthRenderer) {\n                fullWidthRenderers.push(fullWidthRenderer);\n            }\n        });\n        return [...fullWidthRenderers, ...cellRenderers];\n    }\n    getCellEditorInstances(params) {\n        const res = [];\n        this.getCellCtrls(params.rowNodes, params.columns).forEach(cellCtrl => {\n            const cellEditor = cellCtrl.getCellEditor();\n            if (cellEditor) {\n                res.push(cellEditor);\n            }\n        });\n        return res;\n    }\n    getEditingCells() {\n        const res = [];\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.isEditing()) {\n                const cellPosition = cellCtrl.getCellPosition();\n                res.push(cellPosition);\n            }\n        });\n        return res;\n    }\n    mapRowNodes(rowNodes) {\n        if (!rowNodes) {\n            return;\n        }\n        const res = {\n            top: {},\n            bottom: {},\n            normal: {}\n        };\n        rowNodes.forEach(rowNode => {\n            const id = rowNode.id;\n            if (rowNode.rowPinned === 'top') {\n                res.top[id] = rowNode;\n            }\n            else if (rowNode.rowPinned === 'bottom') {\n                res.bottom[id] = rowNode;\n            }\n            else {\n                res.normal[id] = rowNode;\n            }\n        });\n        return res;\n    }\n    isRowInMap(rowNode, rowIdsMap) {\n        // skip this row if it is missing from the provided list\n        const id = rowNode.id;\n        const floating = rowNode.rowPinned;\n        if (floating === 'bottom') {\n            return rowIdsMap.bottom[id] != null;\n        }\n        if (floating === 'top') {\n            return rowIdsMap.top[id] != null;\n        }\n        return rowIdsMap.normal[id] != null;\n    }\n    /**\n     * @param rowNodes if provided, returns the RowCtrls for the provided rowNodes. otherwise returns all RowCtrls.\n     */\n    getRowCtrls(rowNodes) {\n        const rowIdsMap = this.mapRowNodes(rowNodes);\n        const allRowCtrls = this.getAllRowCtrls();\n        if (!rowNodes || !rowIdsMap) {\n            return allRowCtrls;\n        }\n        return allRowCtrls.filter(rowCtrl => {\n            const rowNode = rowCtrl.getRowNode();\n            return this.isRowInMap(rowNode, rowIdsMap);\n        });\n    }\n    // returns CellCtrl's that match the provided rowNodes and columns. eg if one row node\n    // and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.\n    getCellCtrls(rowNodes, columns) {\n        let colIdsMap;\n        if (exists(columns)) {\n            colIdsMap = {};\n            columns.forEach((colKey) => {\n                const column = this.columnModel.getGridColumn(colKey);\n                if (exists(column)) {\n                    colIdsMap[column.getId()] = true;\n                }\n            });\n        }\n        const res = [];\n        this.getRowCtrls(rowNodes).forEach(rowCtrl => {\n            rowCtrl.getAllCellCtrls().forEach(cellCtrl => {\n                const colId = cellCtrl.getColumn().getId();\n                const excludeColFromRefresh = colIdsMap && !colIdsMap[colId];\n                if (excludeColFromRefresh) {\n                    return;\n                }\n                res.push(cellCtrl);\n            });\n        });\n        return res;\n    }\n    destroy() {\n        this.removeAllRowComps();\n        super.destroy();\n    }\n    removeAllRowComps() {\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n    getRowsToRecycle() {\n        // remove all stub nodes, they can't be reused, as no rowNode id\n        const stubNodeIndexes = [];\n        iterateObject(this.rowCtrlsByRowIndex, (index, rowComp) => {\n            const stubNode = rowComp.getRowNode().id == null;\n            if (stubNode) {\n                stubNodeIndexes.push(index);\n            }\n        });\n        this.removeRowCtrls(stubNodeIndexes);\n        // then clear out rowCompsByIndex, but before that take a copy, but index by id, not rowIndex\n        const ctrlsByIdMap = {};\n        iterateObject(this.rowCtrlsByRowIndex, (index, rowComp) => {\n            const rowNode = rowComp.getRowNode();\n            ctrlsByIdMap[rowNode.id] = rowComp;\n        });\n        this.rowCtrlsByRowIndex = {};\n        return ctrlsByIdMap;\n    }\n    // takes array of row indexes\n    removeRowCtrls(rowsToRemove) {\n        // if no fromIndex then set to -1, which will refresh everything\n        // let realFromIndex = -1;\n        rowsToRemove.forEach(indexToRemove => {\n            const rowCtrl = this.rowCtrlsByRowIndex[indexToRemove];\n            if (rowCtrl) {\n                rowCtrl.destroyFirstPass();\n                rowCtrl.destroySecondPass();\n            }\n            delete this.rowCtrlsByRowIndex[indexToRemove];\n        });\n    }\n    onBodyScroll(e) {\n        if (e.direction !== 'vertical') {\n            return;\n        }\n        this.redraw({ afterScroll: true });\n    }\n    // gets called when rows don't change, but viewport does, so after:\n    // 1) height of grid body changes, ie number of displayed rows has changed\n    // 2) grid scrolled to new position\n    // 3) ensure index visible (which is a scroll)\n    redraw(params = {}) {\n        const { afterScroll } = params;\n        let cellFocused;\n        // only try to refocus cells shifting in and out of sticky container\n        // if the browser supports focus ({ preventScroll })\n        if (this.stickyRowFeature && browserSupportsPreventScroll()) {\n            cellFocused = this.getCellToRestoreFocusToAfterRefresh() || undefined;\n        }\n        const oldFirstRow = this.firstRenderedRow;\n        const oldLastRow = this.lastRenderedRow;\n        this.workOutFirstAndLastRowsToRender();\n        let hasStickyRowChanges = false;\n        if (this.stickyRowFeature) {\n            hasStickyRowChanges = this.stickyRowFeature.checkStickyRows();\n        }\n        const rangeChanged = this.firstRenderedRow !== oldFirstRow || this.lastRenderedRow !== oldLastRow;\n        if (afterScroll && !hasStickyRowChanges && !rangeChanged) {\n            return;\n        }\n        this.getLockOnRefresh();\n        this.recycleRows(null, false, afterScroll);\n        this.releaseLockOnRefresh();\n        this.dispatchDisplayedRowsChanged(afterScroll);\n        if (cellFocused != null) {\n            const newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();\n            if (cellFocused != null && newFocusedCell == null) {\n                this.animationFrameService.flushAllFrames();\n                this.restoreFocusedCell(cellFocused);\n            }\n        }\n    }\n    removeRowCompsNotToDraw(indexesToDraw) {\n        // for speedy lookup, dump into map\n        const indexesToDrawMap = {};\n        indexesToDraw.forEach(index => (indexesToDrawMap[index] = true));\n        const existingIndexes = Object.keys(this.rowCtrlsByRowIndex);\n        const indexesNotToDraw = existingIndexes.filter(index => !indexesToDrawMap[index]);\n        this.removeRowCtrls(indexesNotToDraw);\n    }\n    calculateIndexesToDraw(rowsToRecycle) {\n        // all in all indexes in the viewport\n        let indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);\n        const checkRowToDraw = (indexStr, rowComp) => {\n            const index = rowComp.getRowNode().rowIndex;\n            if (index == null) {\n                return;\n            }\n            if (index < this.firstRenderedRow || index > this.lastRenderedRow) {\n                if (this.doNotUnVirtualiseRow(rowComp)) {\n                    indexesToDraw.push(index);\n                }\n            }\n        };\n        // if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex\n        iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);\n        // if we are redrawing due to model update, then old rows are in rowsToRecycle\n        iterateObject(rowsToRecycle, checkRowToDraw);\n        indexesToDraw.sort((a, b) => a - b);\n        const ret = [];\n        for (let i = 0; i < indexesToDraw.length; i++) {\n            const currRow = indexesToDraw[i];\n            const rowNode = this.paginationProxy.getRow(currRow);\n            if (rowNode && !rowNode.sticky) {\n                ret.push(currRow);\n            }\n        }\n        return ret;\n    }\n    recycleRows(rowsToRecycle, animate = false, afterScroll = false) {\n        // the row can already exist and be in the following:\n        // rowsToRecycle -> if model change, then the index may be different, however row may\n        //                         exist here from previous time (mapped by id).\n        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport\n        // this is all the indexes we want, including those that already exist, so this method\n        // will end up going through each index and drawing only if the row doesn't already exist\n        const indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);\n        this.removeRowCompsNotToDraw(indexesToDraw);\n        // never animate when doing print layout - as we want to get things ready to print as quickly as possible,\n        // otherwise we risk the printer printing a row that's half faded (half way through fading in)\n        if (this.printLayout) {\n            animate = false;\n        }\n        // add in new rows\n        const rowCtrls = [];\n        indexesToDraw.forEach(rowIndex => {\n            const rowCtrl = this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);\n            if (exists(rowCtrl)) {\n                rowCtrls.push(rowCtrl);\n            }\n        });\n        if (rowsToRecycle) {\n            const useAnimationFrame = afterScroll && !this.gridOptionsService.get('suppressAnimationFrame') && !this.printLayout;\n            if (useAnimationFrame) {\n                this.beans.animationFrameService.addDestroyTask(() => {\n                    this.destroyRowCtrls(rowsToRecycle, animate);\n                    this.updateAllRowCtrls();\n                    this.dispatchDisplayedRowsChanged();\n                });\n            }\n            else {\n                this.destroyRowCtrls(rowsToRecycle, animate);\n            }\n        }\n        this.updateAllRowCtrls();\n    }\n    dispatchDisplayedRowsChanged(afterScroll = false) {\n        const event = { type: Events.EVENT_DISPLAYED_ROWS_CHANGED, afterScroll };\n        this.eventService.dispatchEvent(event);\n    }\n    onDisplayedColumnsChanged() {\n        const pinningLeft = this.columnModel.isPinningLeft();\n        const pinningRight = this.columnModel.isPinningRight();\n        const atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;\n        if (atLeastOneChanged) {\n            this.pinningLeft = pinningLeft;\n            this.pinningRight = pinningRight;\n            if (this.embedFullWidthRows) {\n                this.redrawFullWidthEmbeddedRows();\n            }\n        }\n    }\n    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,\n    // then it should go into the pinned left area if pinning left, or the center area if not pinning.\n    redrawFullWidthEmbeddedRows() {\n        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when\n        // embedded, as what appears in each section depends on whether we are pinned or not\n        const rowsToRemove = [];\n        this.getFullWidthRowCtrls().forEach(fullWidthCtrl => {\n            const rowIndex = fullWidthCtrl.getRowNode().rowIndex;\n            rowsToRemove.push(rowIndex.toString());\n        });\n        this.refreshFloatingRowComps();\n        this.removeRowCtrls(rowsToRemove);\n        this.redraw({ afterScroll: true });\n    }\n    getFullWidthRowCtrls(rowNodes) {\n        const rowNodesMap = this.mapRowNodes(rowNodes);\n        return this.getAllRowCtrls().filter((rowCtrl) => {\n            // include just full width\n            if (!rowCtrl.isFullWidth()) {\n                return false;\n            }\n            // if Row Nodes provided, we exclude where Row Node is missing\n            const rowNode = rowCtrl.getRowNode();\n            if (rowNodesMap != null && !this.isRowInMap(rowNode, rowNodesMap)) {\n                return false;\n            }\n            return true;\n        });\n    }\n    createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll) {\n        let rowNode;\n        let rowCtrl = this.rowCtrlsByRowIndex[rowIndex];\n        // if no row comp, see if we can get it from the previous rowComps\n        if (!rowCtrl) {\n            rowNode = this.paginationProxy.getRow(rowIndex);\n            if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {\n                rowCtrl = rowsToRecycle[rowNode.id];\n                rowsToRecycle[rowNode.id] = null;\n            }\n        }\n        const creatingNewRowCtrl = !rowCtrl;\n        if (creatingNewRowCtrl) {\n            // create a new one\n            if (!rowNode) {\n                rowNode = this.paginationProxy.getRow(rowIndex);\n            }\n            if (exists(rowNode)) {\n                rowCtrl = this.createRowCon(rowNode, animate, afterScroll);\n            }\n            else {\n                // this should never happen - if somehow we are trying to create\n                // a row for a rowNode that does not exist.\n                return;\n            }\n        }\n        if (rowNode) {\n            // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures\n            // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.\n            rowNode.alreadyRendered = true;\n        }\n        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl;\n        return rowCtrl;\n    }\n    destroyRowCtrls(rowCtrlsMap, animate) {\n        const executeInAWhileFuncs = [];\n        iterateObject(rowCtrlsMap, (nodeId, rowCtrl) => {\n            // if row was used, then it's null\n            if (!rowCtrl) {\n                return;\n            }\n            if (this.cachedRowCtrls && rowCtrl.isCacheable()) {\n                this.cachedRowCtrls.addRow(rowCtrl);\n                return;\n            }\n            rowCtrl.destroyFirstPass();\n            if (animate) {\n                this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;\n                executeInAWhileFuncs.push(() => {\n                    rowCtrl.destroySecondPass();\n                    delete this.zombieRowCtrls[rowCtrl.getInstanceId()];\n                });\n            }\n            else {\n                rowCtrl.destroySecondPass();\n            }\n        });\n        if (animate) {\n            // this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get\n            // executed, as we added it to the end of the list.\n            executeInAWhileFuncs.push(() => {\n                this.updateAllRowCtrls();\n                this.dispatchDisplayedRowsChanged();\n            });\n            executeInAWhile(executeInAWhileFuncs);\n        }\n    }\n    getRowBuffer() {\n        return this.gridOptionsService.get('rowBuffer');\n    }\n    getRowBufferInPixels() {\n        const rowsToBuffer = this.getRowBuffer();\n        const defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();\n        return rowsToBuffer * defaultRowHeight;\n    }\n    workOutFirstAndLastRowsToRender() {\n        this.rowContainerHeightService.updateOffset();\n        let newFirst;\n        let newLast;\n        if (!this.paginationProxy.isRowsToRender()) {\n            newFirst = 0;\n            newLast = -1; // setting to -1 means nothing in range\n        }\n        else if (this.printLayout) {\n            this.environment.refreshRowHeightVariable();\n            newFirst = this.paginationProxy.getPageFirstRow();\n            newLast = this.paginationProxy.getPageLastRow();\n        }\n        else {\n            const bufferPixels = this.getRowBufferInPixels();\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            const suppressRowVirtualisation = this.gridOptionsService.get('suppressRowVirtualisation');\n            let rowHeightsChanged = false;\n            let firstPixel;\n            let lastPixel;\n            do {\n                const paginationOffset = this.paginationProxy.getPixelOffset();\n                const { pageFirstPixel, pageLastPixel } = this.paginationProxy.getCurrentPagePixelRange();\n                const divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();\n                const bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();\n                const bodyTopPixel = bodyVRange.top;\n                const bodyBottomPixel = bodyVRange.bottom;\n                if (suppressRowVirtualisation) {\n                    firstPixel = pageFirstPixel + divStretchOffset;\n                    lastPixel = pageLastPixel + divStretchOffset;\n                }\n                else {\n                    firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;\n                    lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;\n                }\n                this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;\n                // if the rows we are about to display get their heights changed, then that upsets the calcs from above.\n                rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);\n            } while (rowHeightsChanged);\n            let firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);\n            let lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);\n            const pageFirstRow = this.paginationProxy.getPageFirstRow();\n            const pageLastRow = this.paginationProxy.getPageLastRow();\n            // adjust, in case buffer extended actual size\n            if (firstRowIndex < pageFirstRow) {\n                firstRowIndex = pageFirstRow;\n            }\n            if (lastRowIndex > pageLastRow) {\n                lastRowIndex = pageLastRow;\n            }\n            newFirst = firstRowIndex;\n            newLast = lastRowIndex;\n        }\n        // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up\n        // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of\n        // killing the browser, we limit the number of rows. just in case some use case we didn't think\n        // of, we also have a property to not do this operation.\n        const rowLayoutNormal = this.gridOptionsService.isDomLayout('normal');\n        const suppressRowCountRestriction = this.gridOptionsService.get('suppressMaxRenderedRowRestriction');\n        const rowBufferMaxSize = Math.max(this.getRowBuffer(), 500);\n        if (rowLayoutNormal && !suppressRowCountRestriction) {\n            if (newLast - newFirst > rowBufferMaxSize) {\n                newLast = newFirst + rowBufferMaxSize;\n            }\n        }\n        const firstDiffers = newFirst !== this.firstRenderedRow;\n        const lastDiffers = newLast !== this.lastRenderedRow;\n        if (firstDiffers || lastDiffers) {\n            this.firstRenderedRow = newFirst;\n            this.lastRenderedRow = newLast;\n            const event = {\n                type: Events.EVENT_VIEWPORT_CHANGED,\n                firstRow: newFirst,\n                lastRow: newLast\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    /**\n     * This event will only be fired once, and is queued until after the browser next renders.\n     * This allows us to fire an event during the start of the render cycle, when we first see data being rendered\n     * but not execute the event until all of the data has finished being rendered to the dom.\n     */\n    dispatchFirstDataRenderedEvent() {\n        if (this.dataFirstRenderedFired) {\n            return;\n        }\n        this.dataFirstRenderedFired = true;\n        const event = {\n            type: Events.EVENT_FIRST_DATA_RENDERED,\n            firstRow: this.firstRenderedRow,\n            lastRow: this.lastRenderedRow,\n        };\n        // See AG-7018\n        window.requestAnimationFrame(() => {\n            this.beans.eventService.dispatchEvent(event);\n        });\n    }\n    ensureAllRowsInRangeHaveHeightsCalculated(topPixel, bottomPixel) {\n        // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.\n        // all the other row models just hard code so the method just returns back false\n        const res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);\n        if (res) {\n            this.updateContainerHeights();\n        }\n        return res;\n    }\n    getFirstVisibleVerticalPixel() {\n        return this.firstVisibleVPixel;\n    }\n    getFirstVirtualRenderedRow() {\n        return this.firstRenderedRow;\n    }\n    getLastVirtualRenderedRow() {\n        return this.lastRenderedRow;\n    }\n    // check that none of the rows to remove are editing or focused as:\n    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,\n    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered\n    //    the edit is reset - so we want to keep it rendered.\n    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,\n    //    otherwise the user can range select and drag (with focus cell going out of the viewport)\n    //    and then ctrl+c, nothing will happen if cell is removed from dom.\n    // c) if detail record of master detail, as users complained that the context of detail rows\n    //    was getting lost when detail row out of view. eg user expands to show detail row,\n    //    then manipulates the detail panel (eg sorts the detail grid), then context is lost\n    //    after detail panel is scrolled out of / into view.\n    doNotUnVirtualiseRow(rowComp) {\n        const REMOVE_ROW = false;\n        const KEEP_ROW = true;\n        const rowNode = rowComp.getRowNode();\n        const rowHasFocus = this.focusService.isRowNodeFocused(rowNode);\n        const rowIsEditing = rowComp.isEditing();\n        const rowIsDetail = rowNode.detail;\n        const mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;\n        // if we deffo don't want to keep it,\n        if (!mightWantToKeepRow) {\n            return REMOVE_ROW;\n        }\n        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.\n        // the reason we want to keep is if user is scrolling up and down, we don't want to loose\n        // the context of the editing in process.\n        const rowNodePresent = this.paginationProxy.isRowPresent(rowNode);\n        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;\n    }\n    createRowCon(rowNode, animate, afterScroll) {\n        const rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;\n        if (rowCtrlFromCache) {\n            return rowCtrlFromCache;\n        }\n        // we don't use animations frames for printing, so the user can put the grid into print mode\n        // and immediately print - otherwise the user would have to wait for the rows to draw in the background\n        // (via the animation frames) which is awkward to do from code.\n        // we only do the animation frames after scrolling, as this is where we want the smooth user experience.\n        // having animation frames for other times makes the grid look 'jumpy'.\n        const suppressAnimationFrame = this.gridOptionsService.get('suppressAnimationFrame');\n        const useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;\n        const res = new RowCtrl(rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);\n        return res;\n    }\n    getRenderedNodes() {\n        const renderedRows = this.rowCtrlsByRowIndex;\n        return Object.keys(renderedRows).map(key => renderedRows[key].getRowNode());\n    }\n    getRowByPosition(rowPosition) {\n        let rowCtrl;\n        const { rowIndex } = rowPosition;\n        switch (rowPosition.rowPinned) {\n            case 'top':\n                rowCtrl = this.topRowCtrls[rowIndex];\n                break;\n            case 'bottom':\n                rowCtrl = this.bottomRowCtrls[rowIndex];\n                break;\n            default:\n                rowCtrl = this.rowCtrlsByRowIndex[rowIndex];\n                if (!rowCtrl) {\n                    rowCtrl = this.getStickyTopRowCtrls().find(ctrl => ctrl.getRowNode().rowIndex === rowIndex) || null;\n                }\n                break;\n        }\n        return rowCtrl;\n    }\n    getRowNode(gridRow) {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n    // returns true if any row between startIndex and endIndex is rendered. used by\n    // SSRM or IRM, as they don't want to purge visible blocks from cache.\n    isRangeInRenderedViewport(startIndex, endIndex) {\n        // parent closed means the parent node is not expanded, thus these blocks are not visible\n        const parentClosed = startIndex == null || endIndex == null;\n        if (parentClosed) {\n            return false;\n        }\n        const blockAfterViewport = startIndex > this.lastRenderedRow;\n        const blockBeforeViewport = endIndex < this.firstRenderedRow;\n        const blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;\n        return blockInsideViewport;\n    }\n};\n__decorate([\n    Autowired(\"animationFrameService\")\n], RowRenderer.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired(\"paginationProxy\")\n], RowRenderer.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired(\"columnModel\")\n], RowRenderer.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired(\"pinnedRowModel\")\n], RowRenderer.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Autowired(\"rowModel\")\n], RowRenderer.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired(\"focusService\")\n], RowRenderer.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired(\"beans\")\n], RowRenderer.prototype, \"beans\", void 0);\n__decorate([\n    Autowired(\"rowContainerHeightService\")\n], RowRenderer.prototype, \"rowContainerHeightService\", void 0);\n__decorate([\n    Autowired(\"ctrlsService\")\n], RowRenderer.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], RowRenderer.prototype, \"postConstruct\", null);\nRowRenderer = __decorate([\n    Bean(\"rowRenderer\")\n], RowRenderer);\nexport { RowRenderer };\nclass RowCtrlCache {\n    constructor(maxCount) {\n        // map for fast access\n        this.entriesMap = {};\n        // list for keeping order\n        this.entriesList = [];\n        this.maxCount = maxCount;\n    }\n    addRow(rowCtrl) {\n        this.entriesMap[rowCtrl.getRowNode().id] = rowCtrl;\n        this.entriesList.push(rowCtrl);\n        rowCtrl.setCached(true);\n        if (this.entriesList.length > this.maxCount) {\n            const rowCtrlToDestroy = this.entriesList[0];\n            rowCtrlToDestroy.destroyFirstPass();\n            rowCtrlToDestroy.destroySecondPass();\n            this.removeFromCache(rowCtrlToDestroy);\n        }\n    }\n    getRow(rowNode) {\n        if (rowNode == null || rowNode.id == null) {\n            return null;\n        }\n        const res = this.entriesMap[rowNode.id];\n        if (!res) {\n            return null;\n        }\n        this.removeFromCache(res);\n        res.setCached(false);\n        // this can happen if user reloads data, and a new RowNode is reusing\n        // the same ID as the old one\n        const rowNodeMismatch = res.getRowNode() != rowNode;\n        return rowNodeMismatch ? null : res;\n    }\n    removeFromCache(rowCtrl) {\n        const rowNodeId = rowCtrl.getRowNode().id;\n        delete this.entriesMap[rowNodeId];\n        removeFromArray(this.entriesList, rowCtrl);\n    }\n    getEntries() {\n        return this.entriesList;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, Autowired } from '../context/context.mjs';\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet ValueFormatterService = class ValueFormatterService extends BeanStub {\n    formatValue(column, node, value, suppliedFormatter, useFormatterFromColumn = true) {\n        let result = null;\n        let formatter;\n        const colDef = column.getColDef();\n        if (suppliedFormatter) {\n            // use supplied formatter if provided, e.g. set filter items can have their own value formatters\n            formatter = suppliedFormatter;\n        }\n        else if (useFormatterFromColumn) {\n            formatter = colDef.valueFormatter;\n        }\n        if (formatter) {\n            const params = {\n                value,\n                node,\n                data: node ? node.data : null,\n                colDef,\n                column,\n                api: this.gridOptionsService.api,\n                columnApi: this.gridOptionsService.columnApi,\n                context: this.gridOptionsService.context\n            };\n            if (typeof formatter === 'function') {\n                result = formatter(params);\n            }\n            else {\n                result = this.expressionService.evaluate(formatter, params);\n            }\n        }\n        else if (colDef.refData) {\n            return colDef.refData[value] || '';\n        }\n        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)\n        if (result == null && Array.isArray(value)) {\n            result = value.join(', ');\n        }\n        return result;\n    }\n};\n__decorate([\n    Autowired('expressionService')\n], ValueFormatterService.prototype, \"expressionService\", void 0);\nValueFormatterService = __decorate([\n    Bean('valueFormatterService')\n], ValueFormatterService);\nexport { ValueFormatterService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RowNode } from \"../entities/rowNode.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { missingOrEmpty } from \"../utils/generic.mjs\";\nimport { last } from \"../utils/array.mjs\";\nlet PinnedRowModel = class PinnedRowModel extends BeanStub {\n    init() {\n        this.setPinnedTopRowData();\n        this.setPinnedBottomRowData();\n        this.addManagedPropertyListener('pinnedTopRowData', () => this.setPinnedTopRowData());\n        this.addManagedPropertyListener('pinnedBottomRowData', () => this.setPinnedBottomRowData());\n    }\n    isEmpty(floating) {\n        const rows = floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\n        return missingOrEmpty(rows);\n    }\n    isRowsToRender(floating) {\n        return !this.isEmpty(floating);\n    }\n    getRowAtPixel(pixel, floating) {\n        const rows = floating === 'top' ? this.pinnedTopRows : this.pinnedBottomRows;\n        if (missingOrEmpty(rows)) {\n            return 0; // this should never happen, just in case, 0 is graceful failure\n        }\n        for (let i = 0; i < rows.length; i++) {\n            const rowNode = rows[i];\n            const rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;\n            // only need to range check against the top pixel, as we are going through the list\n            // in order, first row to hit the pixel wins\n            if (rowTopPixel >= pixel) {\n                return i;\n            }\n        }\n        return rows.length - 1;\n    }\n    setPinnedTopRowData() {\n        const rowData = this.gridOptionsService.get('pinnedTopRowData');\n        this.pinnedTopRows = this.createNodesFromData(rowData, true);\n        const event = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    setPinnedBottomRowData() {\n        const rowData = this.gridOptionsService.get('pinnedBottomRowData');\n        this.pinnedBottomRows = this.createNodesFromData(rowData, false);\n        const event = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    createNodesFromData(allData, isTop) {\n        const rowNodes = [];\n        if (allData) {\n            let nextRowTop = 0;\n            allData.forEach((dataItem, index) => {\n                const rowNode = new RowNode(this.beans);\n                rowNode.data = dataItem;\n                const idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;\n                rowNode.id = idPrefix + index;\n                rowNode.rowPinned = isTop ? 'top' : 'bottom';\n                rowNode.setRowTop(nextRowTop);\n                rowNode.setRowHeight(this.gridOptionsService.getRowHeightForNode(rowNode).height);\n                rowNode.setRowIndex(index);\n                nextRowTop += rowNode.rowHeight;\n                rowNodes.push(rowNode);\n            });\n        }\n        return rowNodes;\n    }\n    getPinnedTopRowData() {\n        return this.pinnedTopRows;\n    }\n    getPinnedBottomRowData() {\n        return this.pinnedBottomRows;\n    }\n    getPinnedTopTotalHeight() {\n        return this.getTotalHeight(this.pinnedTopRows);\n    }\n    getPinnedTopRowCount() {\n        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;\n    }\n    getPinnedBottomRowCount() {\n        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;\n    }\n    getPinnedTopRow(index) {\n        return this.pinnedTopRows[index];\n    }\n    getPinnedBottomRow(index) {\n        return this.pinnedBottomRows[index];\n    }\n    forEachPinnedTopRow(callback) {\n        if (missingOrEmpty(this.pinnedTopRows)) {\n            return;\n        }\n        this.pinnedTopRows.forEach(callback);\n    }\n    forEachPinnedBottomRow(callback) {\n        if (missingOrEmpty(this.pinnedBottomRows)) {\n            return;\n        }\n        this.pinnedBottomRows.forEach(callback);\n    }\n    getPinnedBottomTotalHeight() {\n        return this.getTotalHeight(this.pinnedBottomRows);\n    }\n    getTotalHeight(rowNodes) {\n        if (!rowNodes || rowNodes.length === 0) {\n            return 0;\n        }\n        const lastNode = last(rowNodes);\n        return lastNode.rowTop + lastNode.rowHeight;\n    }\n};\n__decorate([\n    Autowired('beans')\n], PinnedRowModel.prototype, \"beans\", void 0);\n__decorate([\n    PostConstruct\n], PinnedRowModel.prototype, \"init\", null);\nPinnedRowModel = __decorate([\n    Bean('pinnedRowModel')\n], PinnedRowModel);\nexport { PinnedRowModel };\n","export var ServerSideTransactionResultStatus;\n(function (ServerSideTransactionResultStatus) {\n    /** Transaction was successfully applied */\n    ServerSideTransactionResultStatus[\"Applied\"] = \"Applied\";\n    /**\n     * Store was not found, transaction not applied.\n     * Either invalid route, or the parent row has not yet been expanded.\n     */\n    ServerSideTransactionResultStatus[\"StoreNotFound\"] = \"StoreNotFound\";\n    /**\n     * Store is loading, transaction not applied.\n     */\n    ServerSideTransactionResultStatus[\"StoreLoading\"] = \"StoreLoading\";\n    /**\n     * Store is loading (as max loads exceeded), transaction not applied.\n     */\n    ServerSideTransactionResultStatus[\"StoreWaitingToLoad\"] = \"StoreWaitingToLoad\";\n    /**\n     * Store load attempt failed, transaction not applied.\n     */\n    ServerSideTransactionResultStatus[\"StoreLoadingFailed\"] = \"StoreLoadingFailed\";\n    /**\n     * Store is type Partial, which doesn't accept transactions\n     */\n    ServerSideTransactionResultStatus[\"StoreWrongType\"] = \"StoreWrongType\";\n    /**\n     * Transaction was cancelled, due to grid.\n     * Callback isApplyServerSideTransaction() returning false\n     */\n    ServerSideTransactionResultStatus[\"Cancelled\"] = \"Cancelled\";\n    /**\n     * Store has not started yet, transaction not applied\n     */\n    ServerSideTransactionResultStatus[\"StoreNotStarted\"] = \"StoreNotStarted\";\n})(ServerSideTransactionResultStatus || (ServerSideTransactionResultStatus = {}));\n","// when doing transactions, or change detection, and grouping is present\n// in the data, there is no need for the ClientSideRowModel to update each\n// group after an update, ony parts that were impacted by the change.\n// this class keeps track of all groups that were impacted by a transaction.\n// the the different CSRM operations (filter, sort etc) use the forEach method\n// to visit each group that was changed.\nexport class ChangedPath {\n    constructor(keepingColumns, rootNode) {\n        // whether changed path is active of not. it is active when a) doing\n        // a transaction update or b) doing change detection. if we are doing\n        // a CSRM refresh for other reasons (after sort or filter, or user calling\n        // setRowData() without delta mode) then we are not active. we are also\n        // marked as not active if secondary columns change in pivot (as this impacts\n        // aggregations)\n        this.active = true;\n        // for each node in the change path, we also store which columns need\n        // to be re-aggregated.\n        this.nodeIdsToColumns = {};\n        // for quick lookup, all items in the change path are mapped by nodeId\n        this.mapToItems = {};\n        this.keepingColumns = keepingColumns;\n        this.pathRoot = {\n            rowNode: rootNode,\n            children: null\n        };\n        this.mapToItems[rootNode.id] = this.pathRoot;\n    }\n    // can be set inactive by:\n    // a) ClientSideRowModel, if no transactions or\n    // b) PivotService, if secondary columns changed\n    setInactive() {\n        this.active = false;\n    }\n    isActive() {\n        return this.active;\n    }\n    depthFirstSearchChangedPath(pathItem, callback) {\n        if (pathItem.children) {\n            for (let i = 0; i < pathItem.children.length; i++) {\n                this.depthFirstSearchChangedPath(pathItem.children[i], callback);\n            }\n        }\n        callback(pathItem.rowNode);\n    }\n    depthFirstSearchEverything(rowNode, callback, traverseEverything) {\n        if (rowNode.childrenAfterGroup) {\n            for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                const childNode = rowNode.childrenAfterGroup[i];\n                if (childNode.childrenAfterGroup) {\n                    this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);\n                }\n                else if (traverseEverything) {\n                    callback(childNode);\n                }\n            }\n        }\n        callback(rowNode);\n    }\n    // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback\n    // will be called for child nodes in addition to parent nodes.\n    forEachChangedNodeDepthFirst(callback, traverseLeafNodes = false, includeUnchangedNodes = false) {\n        if (this.active && !includeUnchangedNodes) {\n            // if we are active, then use the change path to callback\n            // only for updated groups\n            this.depthFirstSearchChangedPath(this.pathRoot, callback);\n        }\n        else {\n            // we are not active, so callback for everything, walk the entire path\n            this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);\n        }\n    }\n    executeFromRootNode(callback) {\n        callback(this.pathRoot.rowNode);\n    }\n    createPathItems(rowNode) {\n        let pointer = rowNode;\n        let newEntryCount = 0;\n        while (!this.mapToItems[pointer.id]) {\n            const newEntry = {\n                rowNode: pointer,\n                children: null\n            };\n            this.mapToItems[pointer.id] = newEntry;\n            newEntryCount++;\n            pointer = pointer.parent;\n        }\n        return newEntryCount;\n    }\n    populateColumnsMap(rowNode, columns) {\n        if (!this.keepingColumns || !columns) {\n            return;\n        }\n        let pointer = rowNode;\n        while (pointer) {\n            // if columns, add the columns in all the way to parent, merging\n            // in any other columns that might be there already\n            if (!this.nodeIdsToColumns[pointer.id]) {\n                this.nodeIdsToColumns[pointer.id] = {};\n            }\n            columns.forEach(col => this.nodeIdsToColumns[pointer.id][col.getId()] = true);\n            pointer = pointer.parent;\n        }\n    }\n    linkPathItems(rowNode, newEntryCount) {\n        let pointer = rowNode;\n        for (let i = 0; i < newEntryCount; i++) {\n            const thisItem = this.mapToItems[pointer.id];\n            const parentItem = this.mapToItems[pointer.parent.id];\n            if (!parentItem.children) {\n                parentItem.children = [];\n            }\n            parentItem.children.push(thisItem);\n            pointer = pointer.parent;\n        }\n    }\n    // called by\n    // 1) change detection (provides cols) and\n    // 2) groupStage if doing transaction update (doesn't provide cols)\n    addParentNode(rowNode, columns) {\n        if (!rowNode || rowNode.isRowPinned()) {\n            return;\n        }\n        // we cannot do  both steps below in the same loop as\n        // the second loop has a dependency on the first loop.\n        // ie the hierarchy cannot be stitched up yet because\n        // we don't have it built yet\n        // create the new PathItem objects.\n        const newEntryCount = this.createPathItems(rowNode);\n        // link in the node items\n        this.linkPathItems(rowNode, newEntryCount);\n        // update columns\n        this.populateColumnsMap(rowNode, columns);\n    }\n    canSkip(rowNode) {\n        return this.active && !this.mapToItems[rowNode.id];\n    }\n    getValueColumnsForNode(rowNode, valueColumns) {\n        if (!this.keepingColumns) {\n            return valueColumns;\n        }\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id];\n        const result = valueColumns.filter(col => colsForThisNode[col.getId()]);\n        return result;\n    }\n    getNotValueColumnsForNode(rowNode, valueColumns) {\n        if (!this.keepingColumns) {\n            return null;\n        }\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id];\n        const result = valueColumns.filter(col => !colsForThisNode[col.getId()]);\n        return result;\n    }\n}\n","import { BeanStub } from \"../context/beanStub.mjs\";\nexport class RowNodeBlock extends BeanStub {\n    constructor(id) {\n        super();\n        this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n        this.version = 0;\n        this.id = id;\n    }\n    getId() {\n        return this.id;\n    }\n    load() {\n        this.state = RowNodeBlock.STATE_LOADING;\n        this.loadFromDatasource();\n    }\n    getVersion() {\n        return this.version;\n    }\n    setStateWaitingToLoad() {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n    }\n    getState() {\n        return this.state;\n    }\n    pageLoadFailed(version) {\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_FAILED;\n            this.processServerFail();\n        }\n        this.dispatchLoadCompleted(false);\n    }\n    success(version, params) {\n        this.successCommon(version, params);\n    }\n    pageLoaded(version, rows, lastRow) {\n        this.successCommon(version, { rowData: rows, rowCount: lastRow });\n    }\n    isRequestMostRecentAndLive(version) {\n        // thisIsMostRecentRequest - if block was refreshed, then another request\n        // could of been sent after this one.\n        const thisIsMostRecentRequest = version === this.version;\n        // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\n        // and new blocks created. so data loads of old blocks are discarded.\n        const weAreNotDestroyed = this.isAlive();\n        return thisIsMostRecentRequest && weAreNotDestroyed;\n    }\n    successCommon(version, params) {\n        // need to dispatch load complete before processing the data, as PaginationComp checks\n        // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\n        // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\n        this.dispatchLoadCompleted();\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_LOADED;\n            this.processServerResult(params);\n        }\n    }\n    dispatchLoadCompleted(success = true) {\n        // we fire event regardless of processing data or now, as we want\n        // the concurrentLoadRequests count to be reduced in BlockLoader\n        const event = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: success,\n            block: this\n        };\n        this.dispatchEvent(event);\n    }\n}\nRowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';\nRowNodeBlock.STATE_WAITING_TO_LOAD = 'needsLoading';\nRowNodeBlock.STATE_LOADING = 'loading';\nRowNodeBlock.STATE_LOADED = 'loaded';\nRowNodeBlock.STATE_FAILED = 'failed';\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar RowNodeBlockLoader_1;\nimport { RowNodeBlock } from \"./rowNodeBlock.mjs\";\nimport { Autowired, Bean, PostConstruct, Qualifier } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { _ } from \"../utils/index.mjs\";\nlet RowNodeBlockLoader = RowNodeBlockLoader_1 = class RowNodeBlockLoader extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.activeBlockLoadsCount = 0;\n        this.blocks = [];\n        this.active = true;\n    }\n    postConstruct() {\n        this.maxConcurrentRequests = this.getMaxConcurrentDatasourceRequests();\n        const blockLoadDebounceMillis = this.gridOptionsService.get('blockLoadDebounceMillis');\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\n            this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);\n        }\n    }\n    setBeans(loggerFactory) {\n        this.logger = loggerFactory.create('RowNodeBlockLoader');\n    }\n    getMaxConcurrentDatasourceRequests() {\n        const res = this.gridOptionsService.get('maxConcurrentDatasourceRequests');\n        if (res == null) {\n            return 2;\n        } // 2 is the default\n        if (res <= 0) {\n            return;\n        } // negative number, eg -1, means no max restriction\n        return res;\n    }\n    addBlock(block) {\n        this.blocks.push(block);\n        // note that we do not remove this listener when removing the block. this is because the\n        // cache can get destroyed (and containing blocks) when a block is loading. however the loading block\n        // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.\n        block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));\n        this.checkBlockToLoad();\n    }\n    removeBlock(block) {\n        _.removeFromArray(this.blocks, block);\n    }\n    destroy() {\n        super.destroy();\n        this.active = false;\n    }\n    loadComplete() {\n        this.activeBlockLoadsCount--;\n        this.checkBlockToLoad();\n        this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADED_EVENT });\n        if (this.activeBlockLoadsCount == 0) {\n            this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADER_FINISHED_EVENT });\n        }\n    }\n    checkBlockToLoad() {\n        if (this.checkBlockToLoadDebounce) {\n            this.checkBlockToLoadDebounce();\n        }\n        else {\n            this.performCheckBlocksToLoad();\n        }\n    }\n    performCheckBlocksToLoad() {\n        if (!this.active) {\n            return;\n        }\n        this.printCacheStatus();\n        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\n            this.logger.log(`checkBlockToLoad: max loads exceeded`);\n            return;\n        }\n        const loadAvailability = this.getAvailableLoadingCount();\n        const blocksToLoad = this.blocks.filter(block => (block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD)).slice(0, loadAvailability);\n        this.registerLoads(blocksToLoad.length);\n        blocksToLoad.forEach(block => block.load());\n        this.printCacheStatus();\n    }\n    getBlockState() {\n        if (this.gridOptionsService.isRowModelType('serverSide')) {\n            const ssrm = this.rowModel;\n            return ssrm.getBlockStates();\n        }\n        const result = {};\n        this.blocks.forEach((block) => {\n            const { id, state } = block.getBlockStateJson();\n            result[id] = state;\n        });\n        return result;\n    }\n    printCacheStatus() {\n        if (this.logger.isLogging()) {\n            this.logger.log(`printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},`\n                + ` blocks = ${JSON.stringify(this.getBlockState())}`);\n        }\n    }\n    isLoading() {\n        return this.activeBlockLoadsCount > 0;\n    }\n    registerLoads(count) {\n        this.activeBlockLoadsCount += count;\n    }\n    getAvailableLoadingCount() {\n        return this.maxConcurrentRequests !== undefined ? this.maxConcurrentRequests - this.activeBlockLoadsCount : undefined;\n    }\n};\nRowNodeBlockLoader.BLOCK_LOADED_EVENT = 'blockLoaded';\nRowNodeBlockLoader.BLOCK_LOADER_FINISHED_EVENT = 'blockLoaderFinished';\n__decorate([\n    Autowired('rowModel')\n], RowNodeBlockLoader.prototype, \"rowModel\", void 0);\n__decorate([\n    PostConstruct\n], RowNodeBlockLoader.prototype, \"postConstruct\", null);\n__decorate([\n    __param(0, Qualifier('loggerFactory'))\n], RowNodeBlockLoader.prototype, \"setBeans\", null);\nRowNodeBlockLoader = RowNodeBlockLoader_1 = __decorate([\n    Bean('rowNodeBlockLoader')\n], RowNodeBlockLoader);\nexport { RowNodeBlockLoader };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { missing, exists } from \"../utils/generic.mjs\";\nlet PaginationProxy = class PaginationProxy extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.currentPage = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = 0;\n        this.pixelOffset = 0;\n        this.masterRowCount = 0;\n    }\n    postConstruct() {\n        this.active = this.gridOptionsService.get('pagination');\n        this.pageSizeFromGridOptions = this.gridOptionsService.get('paginationPageSize');\n        this.paginateChildRows = this.isPaginateChildRows();\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n        this.addManagedPropertyListener('pagination', this.onPaginationGridOptionChanged.bind(this));\n        this.addManagedPropertyListener('paginationPageSize', this.onPageSizeGridOptionChanged.bind(this));\n        this.onModelUpdated();\n    }\n    ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        const res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());\n        if (res) {\n            this.calculatePages();\n        }\n        return res;\n    }\n    isPaginateChildRows() {\n        const shouldPaginate = this.gridOptionsService.get('groupRemoveSingleChildren') || this.gridOptionsService.get('groupRemoveLowestSingleChildren');\n        if (shouldPaginate) {\n            return true;\n        }\n        return this.gridOptionsService.get('paginateChildRows');\n    }\n    onModelUpdated(modelUpdatedEvent) {\n        this.calculatePages();\n        const paginationChangedEvent = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n            newPageSize: modelUpdatedEvent ? modelUpdatedEvent.newPageSize : false,\n            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n    onPaginationGridOptionChanged() {\n        this.active = this.gridOptionsService.get('pagination');\n        this.calculatePages();\n        const paginationChangedEvent = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: false,\n            newData: false,\n            newPage: false,\n            newPageSize: false,\n            // important to keep rendered rows, otherwise every time grid is resized,\n            // we would destroy all the rows.\n            keepRenderedRows: true\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n    onPageSizeGridOptionChanged() {\n        this.setPageSize(this.gridOptionsService.get('paginationPageSize'), 'gridOptions');\n    }\n    goToPage(page) {\n        if (!this.active || this.currentPage === page || typeof this.currentPage !== 'number') {\n            return;\n        }\n        this.currentPage = page;\n        const event = {\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: true,\n            newPageSize: false\n        };\n        this.onModelUpdated(event);\n    }\n    getPixelOffset() {\n        return this.pixelOffset;\n    }\n    getRow(index) {\n        return this.rowModel.getRow(index);\n    }\n    getRowNode(id) {\n        return this.rowModel.getRowNode(id);\n    }\n    getRowIndexAtPixel(pixel) {\n        return this.rowModel.getRowIndexAtPixel(pixel);\n    }\n    getCurrentPageHeight() {\n        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {\n            return 0;\n        }\n        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);\n    }\n    getCurrentPagePixelRange() {\n        const pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;\n        const pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;\n        return { pageFirstPixel, pageLastPixel };\n    }\n    isRowPresent(rowNode) {\n        if (!this.rowModel.isRowPresent(rowNode)) {\n            return false;\n        }\n        const nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;\n        return nodeIsInPage;\n    }\n    isEmpty() {\n        return this.rowModel.isEmpty();\n    }\n    isRowsToRender() {\n        return this.rowModel.isRowsToRender();\n    }\n    forEachNode(callback) {\n        return this.rowModel.forEachNode(callback);\n    }\n    forEachNodeOnPage(callback) {\n        const firstRow = this.getPageFirstRow();\n        const lastRow = this.getPageLastRow();\n        for (let i = firstRow; i <= lastRow; i++) {\n            const node = this.getRow(i);\n            if (node) {\n                callback(node);\n            }\n        }\n    }\n    getType() {\n        return this.rowModel.getType();\n    }\n    getRowBounds(index) {\n        const res = this.rowModel.getRowBounds(index);\n        res.rowIndex = index;\n        return res;\n    }\n    getPageFirstRow() {\n        return this.topRowBounds ? this.topRowBounds.rowIndex : -1;\n    }\n    getPageLastRow() {\n        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;\n    }\n    getRowCount() {\n        return this.rowModel.getRowCount();\n    }\n    getPageForIndex(index) {\n        return Math.floor(index / this.pageSize);\n    }\n    goToPageWithIndex(index) {\n        if (!this.active) {\n            return;\n        }\n        const pageNumber = this.getPageForIndex(index);\n        this.goToPage(pageNumber);\n    }\n    isRowInPage(row) {\n        if (!this.active) {\n            return true;\n        }\n        const rowPage = this.getPageForIndex(row.rowIndex);\n        return rowPage === this.currentPage;\n    }\n    isLastPageFound() {\n        return this.rowModel.isLastRowIndexKnown();\n    }\n    getCurrentPage() {\n        return this.currentPage;\n    }\n    goToNextPage() {\n        this.goToPage(this.currentPage + 1);\n    }\n    goToPreviousPage() {\n        this.goToPage(this.currentPage - 1);\n    }\n    goToFirstPage() {\n        this.goToPage(0);\n    }\n    goToLastPage() {\n        const rowCount = this.rowModel.getRowCount();\n        const lastPage = Math.floor(rowCount / this.pageSize);\n        this.goToPage(lastPage);\n    }\n    getPageSize() {\n        return this.pageSize;\n    }\n    getTotalPages() {\n        return this.totalPages;\n    }\n    /** This is only for state setting before data has been loaded */\n    setPage(page) {\n        this.currentPage = page;\n    }\n    get pageSize() {\n        if (exists(this.pageSizeAutoCalculated)) {\n            return this.pageSizeAutoCalculated;\n        }\n        if (exists(this.pageSizeFromPageSizeSelector)) {\n            return this.pageSizeFromPageSizeSelector;\n        }\n        if (exists(this.pageSizeFromInitialState)) {\n            return this.pageSizeFromInitialState;\n        }\n        if (exists(this.pageSizeFromGridOptions)) {\n            return this.pageSizeFromGridOptions;\n        }\n        return this.defaultPageSize;\n    }\n    unsetAutoCalculatedPageSize() {\n        if (this.pageSizeAutoCalculated === undefined) {\n            return;\n        }\n        const oldPageSize = this.pageSizeAutoCalculated;\n        this.pageSizeAutoCalculated = undefined;\n        if (this.pageSize === oldPageSize) {\n            return;\n        }\n        this.onModelUpdated({\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: false,\n            newPageSize: true,\n        });\n    }\n    setPageSize(size, source) {\n        const currentSize = this.pageSize;\n        switch (source) {\n            case 'autoCalculated':\n                this.pageSizeAutoCalculated = size;\n                break;\n            case 'pageSizeSelector':\n                this.pageSizeFromPageSizeSelector = size;\n                if (this.currentPage !== 0) {\n                    this.goToFirstPage();\n                }\n                break;\n            case 'initialState':\n                this.pageSizeFromInitialState = size;\n                break;\n            case 'gridOptions':\n                this.pageSizeFromGridOptions = size;\n                this.pageSizeFromInitialState = undefined;\n                this.pageSizeFromPageSizeSelector = undefined;\n                if (this.currentPage !== 0) {\n                    this.goToFirstPage();\n                }\n                break;\n        }\n        if (currentSize !== this.pageSize) {\n            const event = {\n                type: Events.EVENT_MODEL_UPDATED,\n                animate: false,\n                keepRenderedRows: false,\n                newData: false,\n                newPage: false,\n                newPageSize: true,\n            };\n            this.onModelUpdated(event);\n        }\n    }\n    calculatePages() {\n        if (this.active) {\n            if (this.paginateChildRows) {\n                this.calculatePagesAllRows();\n            }\n            else {\n                this.calculatePagesMasterRowsOnly();\n            }\n        }\n        else {\n            this.calculatedPagesNotActive();\n        }\n        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);\n        if (this.topRowBounds) {\n            this.topRowBounds.rowIndex = this.topDisplayedRowIndex;\n        }\n        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);\n        if (this.bottomRowBounds) {\n            this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;\n        }\n        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);\n    }\n    setPixelOffset(value) {\n        if (this.pixelOffset === value) {\n            return;\n        }\n        this.pixelOffset = value;\n        this.eventService.dispatchEvent({ type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED });\n    }\n    setZeroRows() {\n        this.masterRowCount = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = -1;\n        this.currentPage = 0;\n        this.totalPages = 0;\n    }\n    adjustCurrentPageIfInvalid() {\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n        if (!isFinite(this.currentPage) || isNaN(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n    }\n    calculatePagesMasterRowsOnly() {\n        // const csrm = <ClientSideRowModel> this.rowModel;\n        // const rootNode = csrm.getRootNode();\n        // const masterRows = rootNode.childrenAfterSort;\n        this.masterRowCount = this.rowModel.getTopLevelRowCount();\n        // we say <=0 (rather than =0) as viewport returns -1 when no rows\n        if (this.masterRowCount <= 0) {\n            this.setZeroRows();\n            return;\n        }\n        const masterLastRowIndex = this.masterRowCount - 1;\n        this.totalPages = Math.floor((masterLastRowIndex) / this.pageSize) + 1;\n        this.adjustCurrentPageIfInvalid();\n        const masterPageStartIndex = this.pageSize * this.currentPage;\n        let masterPageEndIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n        if (masterPageEndIndex > masterLastRowIndex) {\n            masterPageEndIndex = masterLastRowIndex;\n        }\n        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);\n        // masterRows[masterPageStartIndex].rowIndex;\n        if (masterPageEndIndex === masterLastRowIndex) {\n            // if showing the last master row, then we want to show the very last row of the model\n            this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n        }\n        else {\n            const firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);\n            //masterRows[masterPageEndIndex + 1].rowIndex;\n            // this gets the index of the last child - eg current row is open, we want to display all children,\n            // the index of the last child is one less than the index of the next parent row.\n            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\n        }\n    }\n    getMasterRowCount() {\n        return this.masterRowCount;\n    }\n    calculatePagesAllRows() {\n        this.masterRowCount = this.rowModel.getRowCount();\n        if (this.masterRowCount === 0) {\n            this.setZeroRows();\n            return;\n        }\n        const maxRowIndex = this.masterRowCount - 1;\n        this.totalPages = Math.floor((maxRowIndex) / this.pageSize) + 1;\n        this.adjustCurrentPageIfInvalid();\n        this.topDisplayedRowIndex = this.pageSize * this.currentPage;\n        this.bottomDisplayedRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n        if (this.bottomDisplayedRowIndex > maxRowIndex) {\n            this.bottomDisplayedRowIndex = maxRowIndex;\n        }\n    }\n    calculatedPagesNotActive() {\n        this.setPageSize(this.masterRowCount, 'autoCalculated');\n        this.totalPages = 1;\n        this.currentPage = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], PaginationProxy.prototype, \"rowModel\", void 0);\n__decorate([\n    PostConstruct\n], PaginationProxy.prototype, \"postConstruct\", null);\nPaginationProxy = __decorate([\n    Bean('paginationProxy')\n], PaginationProxy);\nexport { PaginationProxy };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet StylingService = class StylingService extends BeanStub {\n    processAllCellClasses(colDef, params, onApplicableClass, onNotApplicableClass) {\n        this.processClassRules(undefined, colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);\n        this.processStaticCellClasses(colDef, params, onApplicableClass);\n    }\n    processClassRules(previousClassRules, classRules, params, onApplicableClass, onNotApplicableClass) {\n        if (classRules == null && previousClassRules == null) {\n            return;\n        }\n        const classesToApply = {};\n        const classesToRemove = {};\n        const forEachSingleClass = (className, callback) => {\n            // in case className = 'my-class1 my-class2', we need to split into individual class names\n            className.split(' ').forEach(singleClass => {\n                if (singleClass.trim() == '')\n                    return;\n                callback(singleClass);\n            });\n        };\n        if (classRules) {\n            const classNames = Object.keys(classRules);\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                const rule = classRules[className];\n                let resultOfRule;\n                if (typeof rule === 'string') {\n                    resultOfRule = this.expressionService.evaluate(rule, params);\n                }\n                else if (typeof rule === 'function') {\n                    resultOfRule = rule(params);\n                }\n                forEachSingleClass(className, singleClass => {\n                    resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;\n                });\n            }\n        }\n        if (previousClassRules && onNotApplicableClass) {\n            Object.keys(previousClassRules).forEach(className => forEachSingleClass(className, singleClass => {\n                if (!classesToApply[singleClass]) {\n                    // if we're not applying a previous class now, make sure we remove it\n                    classesToRemove[singleClass] = true;\n                }\n            }));\n        }\n        // we remove all classes first, then add all classes second,\n        // in case a class appears in more than one rule, this means it will be added\n        // if appears in at least one truthy rule\n        if (onNotApplicableClass) {\n            Object.keys(classesToRemove).forEach(onNotApplicableClass);\n        }\n        Object.keys(classesToApply).forEach(onApplicableClass);\n    }\n    getStaticCellClasses(colDef, params) {\n        const { cellClass } = colDef;\n        if (!cellClass) {\n            return [];\n        }\n        let classOrClasses;\n        if (typeof cellClass === 'function') {\n            const cellClassFunc = cellClass;\n            classOrClasses = cellClassFunc(params);\n        }\n        else {\n            classOrClasses = cellClass;\n        }\n        if (typeof classOrClasses === 'string') {\n            classOrClasses = [classOrClasses];\n        }\n        return classOrClasses || [];\n    }\n    processStaticCellClasses(colDef, params, onApplicableClass) {\n        const classOrClasses = this.getStaticCellClasses(colDef, params);\n        classOrClasses.forEach((cssClassItem) => {\n            onApplicableClass(cssClassItem);\n        });\n    }\n};\n__decorate([\n    Autowired('expressionService')\n], StylingService.prototype, \"expressionService\", void 0);\nStylingService = __decorate([\n    Bean('stylingService')\n], StylingService);\nexport { StylingService };\n","import { AgCheckbox } from './agCheckbox.mjs';\nexport class AgToggleButton extends AgCheckbox {\n    constructor(config) {\n        super(config, 'ag-toggle-button');\n    }\n    setValue(value, silent) {\n        super.setValue(value, silent);\n        this.addOrRemoveCssClass('ag-selected', this.getValue());\n        return this;\n    }\n}\n","import { AgAbstractInputField } from \"./agAbstractInputField.mjs\";\nexport class AgInputTextArea extends AgAbstractInputField {\n    constructor(config) {\n        super(config, 'ag-text-area', null, 'textarea');\n    }\n    setValue(value, silent) {\n        const ret = super.setValue(value, silent);\n        this.eInput.value = value;\n        return ret;\n    }\n    setCols(cols) {\n        this.eInput.cols = cols;\n        return this;\n    }\n    setRows(rows) {\n        this.eInput.rows = rows;\n        return this;\n    }\n}\n","import { AgInputTextField } from \"./agInputTextField.mjs\";\nimport { addOrRemoveAttribute } from \"../utils/dom.mjs\";\nimport { parseDateTimeFromString, serialiseDate } from \"../utils/date.mjs\";\nimport { isBrowserSafari } from \"../utils/browser.mjs\";\nexport class AgInputDateField extends AgInputTextField {\n    constructor(config) {\n        super(config, 'ag-date-field', 'date');\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.addManagedListener(this.eInput, 'wheel', this.onWheel.bind(this));\n        // ensures that the input element is focussed when a clear button is clicked,\n        // unless using safari as there is no clear button and focus does not work properly\n        const usingSafari = isBrowserSafari();\n        this.addManagedListener(this.eInput, 'mousedown', () => {\n            if (this.isDisabled() || usingSafari) {\n                return;\n            }\n            this.eInput.focus();\n        });\n        this.eInput.step = 'any';\n    }\n    onWheel(e) {\n        // Prevent default scroll events from incrementing / decrementing the input, since its inconsistent between browsers\n        if (document.activeElement === this.eInput) {\n            e.preventDefault();\n        }\n    }\n    setMin(minDate) {\n        var _a;\n        const min = minDate instanceof Date ? (_a = serialiseDate(minDate !== null && minDate !== void 0 ? minDate : null, false)) !== null && _a !== void 0 ? _a : undefined : minDate;\n        if (this.min === min) {\n            return this;\n        }\n        this.min = min;\n        addOrRemoveAttribute(this.eInput, 'min', min);\n        return this;\n    }\n    setMax(maxDate) {\n        var _a;\n        const max = maxDate instanceof Date ? (_a = serialiseDate(maxDate !== null && maxDate !== void 0 ? maxDate : null, false)) !== null && _a !== void 0 ? _a : undefined : maxDate;\n        if (this.max === max) {\n            return this;\n        }\n        this.max = max;\n        addOrRemoveAttribute(this.eInput, 'max', max);\n        return this;\n    }\n    setStep(step) {\n        if (this.step === step) {\n            return this;\n        }\n        this.step = step;\n        addOrRemoveAttribute(this.eInput, 'step', step);\n        return this;\n    }\n    getDate() {\n        var _a;\n        if (!this.eInput.validity.valid) {\n            return undefined;\n        }\n        return (_a = parseDateTimeFromString(this.getValue())) !== null && _a !== void 0 ? _a : undefined;\n    }\n    setDate(date, silent) {\n        this.setValue(serialiseDate(date !== null && date !== void 0 ? date : null, false), silent);\n    }\n}\n","import { AgAbstractInputField } from \"./agAbstractInputField.mjs\";\nexport class AgInputRange extends AgAbstractInputField {\n    constructor(config) {\n        super(config, 'ag-range-field', 'range');\n    }\n    postConstruct() {\n        super.postConstruct();\n        const { min, max, step } = this.config;\n        if (min != null) {\n            this.setMinValue(min);\n        }\n        if (max != null) {\n            this.setMaxValue(max);\n        }\n        this.setStep(step || 1);\n    }\n    addInputListeners() {\n        this.addManagedListener(this.eInput, 'input', (e) => {\n            const value = e.target.value;\n            this.setValue(value);\n        });\n    }\n    setMinValue(value) {\n        this.min = value;\n        this.eInput.setAttribute('min', value.toString());\n        return this;\n    }\n    setMaxValue(value) {\n        this.max = value;\n        this.eInput.setAttribute('max', value.toString());\n        return this;\n    }\n    setStep(value) {\n        this.eInput.setAttribute('step', value.toString());\n        return this;\n    }\n    setValue(value, silent) {\n        if (this.min != null) {\n            value = Math.max(parseFloat(value), this.min).toString();\n        }\n        if (this.max != null) {\n            value = Math.min(parseFloat(value), this.max).toString();\n        }\n        const ret = super.setValue(value, silent);\n        this.eInput.value = value;\n        return ret;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { bindCellRendererToHtmlElement } from \"../utils/dom.mjs\";\nimport { Component } from \"./component.mjs\";\nimport { escapeString } from \"../utils/string.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { setAriaActiveDescendant, setAriaSelected } from \"../utils/aria.mjs\";\nexport class RichSelectRow extends Component {\n    constructor(params, wrapperEl) {\n        super(/* html */ `<div class=\"ag-rich-select-row\" role=\"presentation\"></div>`);\n        this.params = params;\n        this.wrapperEl = wrapperEl;\n    }\n    postConstruct() {\n        this.addManagedListener(this.getGui(), 'mouseup', this.onMouseUp.bind(this));\n    }\n    setState(value) {\n        let formattedValue = '';\n        if (this.params.valueFormatter) {\n            formattedValue = this.params.valueFormatter(value);\n        }\n        const rendererSuccessful = this.populateWithRenderer(value, formattedValue);\n        if (!rendererSuccessful) {\n            this.populateWithoutRenderer(value, formattedValue);\n        }\n        this.value = value;\n    }\n    highlightString(matchString) {\n        const { parsedValue } = this;\n        if (this.params.cellRenderer || !exists(parsedValue)) {\n            return;\n        }\n        let hasMatch = exists(matchString);\n        if (hasMatch) {\n            const index = parsedValue === null || parsedValue === void 0 ? void 0 : parsedValue.toLocaleLowerCase().indexOf(matchString.toLocaleLowerCase());\n            if (index >= 0) {\n                const highlightEndIndex = index + matchString.length;\n                const startPart = escapeString(parsedValue.slice(0, index), true);\n                const highlightedPart = escapeString(parsedValue.slice(index, highlightEndIndex), true);\n                const endPart = escapeString(parsedValue.slice(highlightEndIndex));\n                this.renderValueWithoutRenderer(`${startPart}<span class=\"ag-rich-select-row-text-highlight\">${highlightedPart}</span>${endPart}`);\n            }\n            else {\n                hasMatch = false;\n            }\n        }\n        if (!hasMatch) {\n            this.renderValueWithoutRenderer(parsedValue);\n        }\n    }\n    updateHighlighted(highlighted) {\n        var _a;\n        const eGui = this.getGui();\n        const parentId = `ag-rich-select-row-${this.getCompId()}`;\n        (_a = eGui.parentElement) === null || _a === void 0 ? void 0 : _a.setAttribute('id', parentId);\n        if (highlighted) {\n            const parentAriaEl = this.getParentComponent().getAriaElement();\n            setAriaActiveDescendant(parentAriaEl, parentId);\n            this.wrapperEl.setAttribute('data-active-option', parentId);\n        }\n        setAriaSelected(eGui.parentElement, highlighted);\n        this.addOrRemoveCssClass('ag-rich-select-row-selected', highlighted);\n    }\n    populateWithoutRenderer(value, valueFormatted) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const eGui = this.getGui();\n        const span = eDocument.createElement('span');\n        span.style.overflow = 'hidden';\n        span.style.textOverflow = 'ellipsis';\n        const parsedValue = escapeString(exists(valueFormatted) ? valueFormatted : value, true);\n        this.parsedValue = exists(parsedValue) ? parsedValue : null;\n        eGui.appendChild(span);\n        this.renderValueWithoutRenderer(parsedValue);\n    }\n    renderValueWithoutRenderer(value) {\n        const span = this.getGui().querySelector('span');\n        if (!span) {\n            return;\n        }\n        span.innerHTML = exists(value) ? value : '&nbsp;';\n    }\n    populateWithRenderer(value, valueFormatted) {\n        // bad coder here - we are not populating all values of the cellRendererParams\n        let cellRendererPromise;\n        let userCompDetails;\n        if (this.params.cellRenderer) {\n            userCompDetails = this.userComponentFactory.getCellRendererDetails(this.params, {\n                value,\n                valueFormatted,\n                api: this.gridOptionsService.api\n            });\n        }\n        if (userCompDetails) {\n            cellRendererPromise = userCompDetails.newAgStackInstance();\n        }\n        if (cellRendererPromise) {\n            bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());\n        }\n        if (cellRendererPromise) {\n            cellRendererPromise.then(childComponent => {\n                this.addDestroyFunc(() => {\n                    this.getContext().destroyBean(childComponent);\n                });\n            });\n            return true;\n        }\n        return false;\n    }\n    onMouseUp() {\n        const parent = this.getParentComponent();\n        const event = {\n            type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n            fromEnterKey: false,\n            value: this.value\n        };\n        parent === null || parent === void 0 ? void 0 : parent.dispatchEvent(event);\n    }\n}\n__decorate([\n    Autowired('userComponentFactory')\n], RichSelectRow.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    PostConstruct\n], RichSelectRow.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { ManagedFocusFeature } from \"./managedFocusFeature.mjs\";\nexport var TabGuardClassNames;\n(function (TabGuardClassNames) {\n    TabGuardClassNames[\"TAB_GUARD\"] = \"ag-tab-guard\";\n    TabGuardClassNames[\"TAB_GUARD_TOP\"] = \"ag-tab-guard-top\";\n    TabGuardClassNames[\"TAB_GUARD_BOTTOM\"] = \"ag-tab-guard-bottom\";\n})(TabGuardClassNames || (TabGuardClassNames = {}));\n;\nexport class TabGuardCtrl extends BeanStub {\n    constructor(params) {\n        super();\n        this.skipTabGuardFocus = false;\n        const { comp, eTopGuard, eBottomGuard, focusInnerElement, onFocusIn, onFocusOut, shouldStopEventPropagation, onTabKeyDown, handleKeyDown, eFocusableElement } = params;\n        this.comp = comp;\n        this.eTopGuard = eTopGuard;\n        this.eBottomGuard = eBottomGuard;\n        this.providedFocusInnerElement = focusInnerElement;\n        this.eFocusableElement = eFocusableElement;\n        this.providedFocusIn = onFocusIn;\n        this.providedFocusOut = onFocusOut;\n        this.providedShouldStopEventPropagation = shouldStopEventPropagation;\n        this.providedOnTabKeyDown = onTabKeyDown;\n        this.providedHandleKeyDown = handleKeyDown;\n    }\n    postConstruct() {\n        this.createManagedBean(new ManagedFocusFeature(this.eFocusableElement, {\n            shouldStopEventPropagation: () => this.shouldStopEventPropagation(),\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e),\n            onFocusIn: e => this.onFocusIn(e),\n            onFocusOut: e => this.onFocusOut(e)\n        }));\n        this.activateTabGuards();\n        [this.eTopGuard, this.eBottomGuard].forEach(guard => this.addManagedListener(guard, 'focus', this.onFocus.bind(this)));\n    }\n    handleKeyDown(e) {\n        if (this.providedHandleKeyDown) {\n            this.providedHandleKeyDown(e);\n        }\n    }\n    tabGuardsAreActive() {\n        return !!this.eTopGuard && this.eTopGuard.hasAttribute('tabIndex');\n    }\n    shouldStopEventPropagation() {\n        if (this.providedShouldStopEventPropagation) {\n            return this.providedShouldStopEventPropagation();\n        }\n        return false;\n    }\n    activateTabGuards() {\n        const tabIndex = this.gridOptionsService.get('tabIndex');\n        this.comp.setTabIndex(tabIndex.toString());\n    }\n    deactivateTabGuards() {\n        this.comp.setTabIndex();\n    }\n    onFocus(e) {\n        if (this.skipTabGuardFocus) {\n            this.skipTabGuardFocus = false;\n            return;\n        }\n        const fromBottom = e.target === this.eBottomGuard;\n        if (this.providedFocusInnerElement) {\n            this.providedFocusInnerElement(fromBottom);\n        }\n        else {\n            this.focusInnerElement(fromBottom);\n        }\n    }\n    onFocusIn(e) {\n        if (this.providedFocusIn && this.providedFocusIn(e)) {\n            return;\n        }\n        this.deactivateTabGuards();\n    }\n    onFocusOut(e) {\n        if (this.providedFocusOut && this.providedFocusOut(e)) {\n            return;\n        }\n        if (!this.eFocusableElement.contains(e.relatedTarget)) {\n            this.activateTabGuards();\n        }\n    }\n    onTabKeyDown(e) {\n        if (this.providedOnTabKeyDown) {\n            this.providedOnTabKeyDown(e);\n            return;\n        }\n        if (e.defaultPrevented) {\n            return;\n        }\n        const tabGuardsAreActive = this.tabGuardsAreActive();\n        if (tabGuardsAreActive) {\n            this.deactivateTabGuards();\n        }\n        const nextRoot = this.getNextFocusableElement(e.shiftKey);\n        if (tabGuardsAreActive) {\n            // ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser\n            // tabbing to the tab guard from inside the component\n            setTimeout(() => this.activateTabGuards(), 0);\n        }\n        if (!nextRoot) {\n            return;\n        }\n        nextRoot.focus();\n        e.preventDefault();\n    }\n    focusInnerElement(fromBottom = false) {\n        const focusable = this.focusService.findFocusableElements(this.eFocusableElement);\n        if (this.tabGuardsAreActive()) {\n            // remove tab guards from this component from list of focusable elements\n            focusable.splice(0, 1);\n            focusable.splice(focusable.length - 1, 1);\n        }\n        if (!focusable.length) {\n            return;\n        }\n        focusable[fromBottom ? focusable.length - 1 : 0].focus({ preventScroll: true });\n    }\n    getNextFocusableElement(backwards) {\n        return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);\n    }\n    forceFocusOutOfContainer(up = false) {\n        const tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;\n        this.activateTabGuards();\n        this.skipTabGuardFocus = true;\n        tabGuardToFocus.focus();\n    }\n}\n__decorate([\n    Autowired('focusService')\n], TabGuardCtrl.prototype, \"focusService\", void 0);\n__decorate([\n    PostConstruct\n], TabGuardCtrl.prototype, \"postConstruct\", null);\n","import { Component } from \"./component.mjs\";\nimport { isNodeOrElement, clearElement } from \"../utils/dom.mjs\";\nimport { TabGuardCtrl, TabGuardClassNames } from \"./tabGuardCtrl.mjs\";\nimport { setAriaRole } from \"../utils/aria.mjs\";\nexport class TabGuardComp extends Component {\n    initialiseTabGuard(params) {\n        this.eTopGuard = this.createTabGuard('top');\n        this.eBottomGuard = this.createTabGuard('bottom');\n        this.eFocusableElement = this.getFocusableElement();\n        const tabGuards = [this.eTopGuard, this.eBottomGuard];\n        const compProxy = {\n            setTabIndex: tabIndex => {\n                tabGuards.forEach(tabGuard => tabIndex != null ? tabGuard.setAttribute('tabindex', tabIndex) : tabGuard.removeAttribute('tabindex'));\n            }\n        };\n        this.addTabGuards(this.eTopGuard, this.eBottomGuard);\n        this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({\n            comp: compProxy,\n            eTopGuard: this.eTopGuard,\n            eBottomGuard: this.eBottomGuard,\n            eFocusableElement: this.eFocusableElement,\n            onFocusIn: params.onFocusIn,\n            onFocusOut: params.onFocusOut,\n            focusInnerElement: params.focusInnerElement,\n            handleKeyDown: params.handleKeyDown,\n            onTabKeyDown: params.onTabKeyDown,\n            shouldStopEventPropagation: params.shouldStopEventPropagation\n        }));\n    }\n    createTabGuard(side) {\n        const tabGuard = document.createElement('div');\n        const cls = side === 'top' ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;\n        tabGuard.classList.add(TabGuardClassNames.TAB_GUARD, cls);\n        setAriaRole(tabGuard, 'presentation');\n        return tabGuard;\n    }\n    addTabGuards(topTabGuard, bottomTabGuard) {\n        this.eFocusableElement.insertAdjacentElement('afterbegin', topTabGuard);\n        this.eFocusableElement.insertAdjacentElement('beforeend', bottomTabGuard);\n    }\n    removeAllChildrenExceptTabGuards() {\n        const tabGuards = [this.eTopGuard, this.eBottomGuard];\n        clearElement(this.getFocusableElement());\n        this.addTabGuards(...tabGuards);\n    }\n    forceFocusOutOfContainer(up = false) {\n        this.tabGuardCtrl.forceFocusOutOfContainer(up);\n    }\n    appendChild(newChild, container) {\n        if (!isNodeOrElement(newChild)) {\n            newChild = newChild.getGui();\n        }\n        const { eBottomGuard: bottomTabGuard } = this;\n        if (bottomTabGuard) {\n            bottomTabGuard.insertAdjacentElement('beforebegin', newChild);\n        }\n        else {\n            super.appendChild(newChild, container);\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from '../context/context.mjs';\nimport { RefSelector } from './componentAnnotations.mjs';\nimport { getAriaPosInSet, setAriaSetSize, setAriaPosInSet, setAriaRole, setAriaLabel } from '../utils/aria.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { waitUntil } from '../utils/function.mjs';\nimport { TabGuardComp } from './tabGuardComp.mjs';\nimport { Events } from '../eventKeys.mjs';\nimport { stopPropagationForAgGrid } from '../utils/event.mjs';\nexport class VirtualList extends TabGuardComp {\n    constructor(params) {\n        super(VirtualList.getTemplate((params === null || params === void 0 ? void 0 : params.cssIdentifier) || 'default'));\n        this.renderedRows = new Map();\n        this.rowHeight = 20;\n        const { cssIdentifier = 'default', ariaRole = 'listbox', listName } = params || {};\n        this.cssIdentifier = cssIdentifier;\n        this.ariaRole = ariaRole;\n        this.listName = listName;\n    }\n    postConstruct() {\n        this.addScrollListener();\n        this.rowHeight = this.getItemHeight();\n        this.addResizeObserver();\n        this.initialiseTabGuard({\n            onFocusIn: (e) => this.onFocusIn(e),\n            onFocusOut: (e) => this.onFocusOut(e),\n            focusInnerElement: (fromBottom) => this.focusInnerElement(fromBottom),\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n        this.setAriaProperties();\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanged.bind(this));\n    }\n    onGridStylesChanged() {\n        this.rowHeight = this.getItemHeight();\n        this.refresh();\n    }\n    setAriaProperties() {\n        const translate = this.localeService.getLocaleTextFunc();\n        const listName = translate('ariaDefaultListName', this.listName || 'List');\n        const ariaEl = this.eContainer;\n        setAriaRole(ariaEl, this.ariaRole);\n        setAriaLabel(ariaEl, listName);\n    }\n    addResizeObserver() {\n        // do this in an animation frame to prevent loops\n        const listener = () => this.animationFrameService.requestAnimationFrame(() => this.drawVirtualRows());\n        const destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);\n        this.addDestroyFunc(destroyObserver);\n    }\n    focusInnerElement(fromBottom) {\n        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);\n    }\n    onFocusIn(e) {\n        const target = e.target;\n        if (target.classList.contains('ag-virtual-list-item')) {\n            this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;\n        }\n        return false;\n    }\n    onFocusOut(e) {\n        if (!this.getFocusableElement().contains(e.relatedTarget)) {\n            this.lastFocusedRowIndex = null;\n        }\n        return false;\n    }\n    handleKeyDown(e) {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (this.navigate(e.key === KeyCode.UP)) {\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    onTabKeyDown(e) {\n        if (this.navigate(e.shiftKey)) {\n            e.preventDefault();\n        }\n        else {\n            stopPropagationForAgGrid(e);\n            this.forceFocusOutOfContainer(e.shiftKey);\n        }\n    }\n    navigate(up) {\n        if (this.lastFocusedRowIndex == null) {\n            return false;\n        }\n        const nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);\n        if (nextRow < 0 || nextRow >= this.model.getRowCount()) {\n            return false;\n        }\n        this.focusRow(nextRow);\n        return true;\n    }\n    getLastFocusedRow() {\n        return this.lastFocusedRowIndex;\n    }\n    focusRow(rowNumber) {\n        this.ensureIndexVisible(rowNumber);\n        window.setTimeout(() => {\n            if (!this.isAlive()) {\n                return;\n            }\n            const renderedRow = this.renderedRows.get(rowNumber);\n            if (renderedRow) {\n                renderedRow.eDiv.focus();\n            }\n        }, 10);\n    }\n    getComponentAt(rowIndex) {\n        const comp = this.renderedRows.get(rowIndex);\n        return comp && comp.rowComponent;\n    }\n    forEachRenderedRow(func) {\n        this.renderedRows.forEach((value, key) => func(value.rowComponent, key));\n    }\n    static getTemplate(cssIdentifier) {\n        return ( /* html */`<div class=\"ag-virtual-list-viewport ag-${cssIdentifier}-virtual-list-viewport\" role=\"presentation\">\n                <div class=\"ag-virtual-list-container ag-${cssIdentifier}-virtual-list-container\" ref=\"eContainer\"></div>\n            </div>`);\n    }\n    getItemHeight() {\n        return this.environment.getListItemHeight();\n    }\n    /**\n     * Returns true if the view had to be scrolled, otherwise, false.\n     */\n    ensureIndexVisible(index, scrollPartialIntoView = true) {\n        const lastRow = this.model.getRowCount();\n        if (typeof index !== 'number' || index < 0 || index >= lastRow) {\n            console.warn('AG Grid: invalid row index for ensureIndexVisible: ' + index);\n            return false;\n        }\n        const rowTopPixel = index * this.rowHeight;\n        const rowBottomPixel = rowTopPixel + this.rowHeight;\n        const eGui = this.getGui();\n        const viewportTopPixel = eGui.scrollTop;\n        const viewportHeight = eGui.offsetHeight;\n        const viewportBottomPixel = viewportTopPixel + viewportHeight;\n        const diff = scrollPartialIntoView ? 0 : this.rowHeight;\n        const viewportScrolledPastRow = viewportTopPixel > rowTopPixel + diff;\n        const viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel - diff;\n        if (viewportScrolledPastRow) {\n            // if row is before, scroll up with row at top\n            eGui.scrollTop = rowTopPixel;\n            return true;\n        }\n        if (viewportScrolledBeforeRow) {\n            // if row is below, scroll down with row at bottom\n            const newScrollPosition = rowBottomPixel - viewportHeight;\n            eGui.scrollTop = newScrollPosition;\n            return true;\n        }\n        return false;\n    }\n    setComponentCreator(componentCreator) {\n        this.componentCreator = componentCreator;\n    }\n    setComponentUpdater(componentUpdater) {\n        this.componentUpdater = componentUpdater;\n    }\n    getRowHeight() {\n        return this.rowHeight;\n    }\n    getScrollTop() {\n        return this.getGui().scrollTop;\n    }\n    setRowHeight(rowHeight) {\n        this.rowHeight = rowHeight;\n        this.refresh();\n    }\n    refresh(softRefresh) {\n        if (this.model == null || !this.isAlive()) {\n            return;\n        }\n        const rowCount = this.model.getRowCount();\n        this.eContainer.style.height = `${rowCount * this.rowHeight}px`;\n        // ensure height is applied before attempting to redraw rows\n        waitUntil(() => this.eContainer.clientHeight >= rowCount * this.rowHeight, () => {\n            if (!this.isAlive()) {\n                return;\n            }\n            if (this.canSoftRefresh(softRefresh)) {\n                this.drawVirtualRows(true);\n            }\n            else {\n                this.clearVirtualRows();\n                this.drawVirtualRows();\n            }\n        });\n    }\n    canSoftRefresh(softRefresh) {\n        return !!(softRefresh && this.renderedRows.size && typeof this.model.areRowsEqual === 'function' && this.componentUpdater);\n    }\n    clearVirtualRows() {\n        this.renderedRows.forEach((_, rowIndex) => this.removeRow(rowIndex));\n    }\n    drawVirtualRows(softRefresh) {\n        if (!this.isAlive() || !this.model) {\n            return;\n        }\n        const gui = this.getGui();\n        const topPixel = gui.scrollTop;\n        const bottomPixel = topPixel + gui.offsetHeight;\n        const firstRow = Math.floor(topPixel / this.rowHeight);\n        const lastRow = Math.floor(bottomPixel / this.rowHeight);\n        this.ensureRowsRendered(firstRow, lastRow, softRefresh);\n    }\n    ensureRowsRendered(start, finish, softRefresh) {\n        // remove any rows that are no longer required\n        this.renderedRows.forEach((_, rowIndex) => {\n            if ((rowIndex < start || rowIndex > finish) && rowIndex !== this.lastFocusedRowIndex) {\n                this.removeRow(rowIndex);\n            }\n        });\n        if (softRefresh) {\n            // refresh any existing rows\n            this.refreshRows();\n        }\n        // insert any required new rows\n        for (let rowIndex = start; rowIndex <= finish; rowIndex++) {\n            if (this.renderedRows.has(rowIndex)) {\n                continue;\n            }\n            // check this row actually exists (in case overflow buffer window exceeds real data)\n            if (rowIndex < this.model.getRowCount()) {\n                this.insertRow(rowIndex);\n            }\n        }\n    }\n    insertRow(rowIndex) {\n        const value = this.model.getRow(rowIndex);\n        const eDiv = document.createElement('div');\n        eDiv.classList.add('ag-virtual-list-item', `ag-${this.cssIdentifier}-virtual-list-item`);\n        setAriaRole(eDiv, this.ariaRole === 'tree' ? 'treeitem' : 'option');\n        setAriaSetSize(eDiv, this.model.getRowCount());\n        setAriaPosInSet(eDiv, rowIndex + 1);\n        eDiv.setAttribute('tabindex', '-1');\n        eDiv.style.height = `${this.rowHeight}px`;\n        eDiv.style.top = `${this.rowHeight * rowIndex}px`;\n        const rowComponent = this.componentCreator(value, eDiv);\n        rowComponent.addGuiEventListener('focusin', () => this.lastFocusedRowIndex = rowIndex);\n        eDiv.appendChild(rowComponent.getGui());\n        // keep the DOM order consistent with the order of the rows\n        if (this.renderedRows.has(rowIndex - 1)) {\n            this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement('afterend', eDiv);\n        }\n        else if (this.renderedRows.has(rowIndex + 1)) {\n            this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement('beforebegin', eDiv);\n        }\n        else {\n            this.eContainer.appendChild(eDiv);\n        }\n        this.renderedRows.set(rowIndex, { rowComponent, eDiv, value });\n    }\n    removeRow(rowIndex) {\n        const component = this.renderedRows.get(rowIndex);\n        this.eContainer.removeChild(component.eDiv);\n        this.destroyBean(component.rowComponent);\n        this.renderedRows.delete(rowIndex);\n    }\n    refreshRows() {\n        const rowCount = this.model.getRowCount();\n        this.renderedRows.forEach((row, rowIndex) => {\n            var _a, _b;\n            if (rowIndex >= rowCount) {\n                this.removeRow(rowIndex);\n            }\n            else {\n                const newValue = this.model.getRow(rowIndex);\n                if ((_b = (_a = this.model).areRowsEqual) === null || _b === void 0 ? void 0 : _b.call(_a, row.value, newValue)) {\n                    this.componentUpdater(newValue, row.rowComponent);\n                }\n                else {\n                    // to be replaced later\n                    this.removeRow(rowIndex);\n                }\n            }\n        });\n    }\n    addScrollListener() {\n        this.addGuiEventListener('scroll', () => this.drawVirtualRows(), { passive: true });\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    getAriaElement() {\n        return this.eContainer;\n    }\n    destroy() {\n        if (!this.isAlive()) {\n            return;\n        }\n        this.clearVirtualRows();\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('resizeObserverService')\n], VirtualList.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Autowired('animationFrameService')\n], VirtualList.prototype, \"animationFrameService\", void 0);\n__decorate([\n    RefSelector('eContainer')\n], VirtualList.prototype, \"eContainer\", void 0);\n__decorate([\n    PostConstruct\n], VirtualList.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { KeyCode } from \"../constants/keyCode.mjs\";\nimport { Autowired } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { setAriaActiveDescendant, setAriaControls, setAriaLabel } from \"../utils/aria.mjs\";\nimport { bindCellRendererToHtmlElement, clearElement, isVisible } from \"../utils/dom.mjs\";\nimport { stopPropagationForAgGrid } from \"../utils/event.mjs\";\nimport { debounce } from \"../utils/function.mjs\";\nimport { fuzzySuggestions } from \"../utils/fuzzyMatch.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { isEventFromPrintableCharacter } from \"../utils/keyboard.mjs\";\nimport { escapeString } from \"../utils/string.mjs\";\nimport { AgPickerField } from \"./agPickerField.mjs\";\nimport { RichSelectRow } from \"./agRichSelectRow.mjs\";\nimport { RefSelector } from \"./componentAnnotations.mjs\";\nimport { VirtualList } from \"./virtualList.mjs\";\nconst TEMPLATE = /* html */ `\n    <div class=\"ag-picker-field\" role=\"presentation\">\n        <div ref=\"eLabel\"></div>\n            <div ref=\"eWrapper\" class=\"ag-wrapper ag-picker-field-wrapper ag-rich-select-value ag-picker-collapsed\">\n            <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n            <ag-input-text-field ref=\"eInput\" class=\"ag-rich-select-field-input\"></ag-input-text-field>\n            <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n        </div>\n    </div>`;\nexport class AgRichSelect extends AgPickerField {\n    constructor(config) {\n        var _a, _b;\n        super(Object.assign(Object.assign({ pickerAriaLabelKey: 'ariaLabelRichSelectField', pickerAriaLabelValue: 'Rich Select Field', pickerType: 'ag-list', className: 'ag-rich-select', pickerIcon: 'smallDown', ariaRole: 'combobox', template: (_a = config === null || config === void 0 ? void 0 : config.template) !== null && _a !== void 0 ? _a : TEMPLATE, modalPicker: false }, config), { \n            // maxPickerHeight needs to be set after expanding `config`\n            maxPickerHeight: (_b = config === null || config === void 0 ? void 0 : config.maxPickerHeight) !== null && _b !== void 0 ? _b : 'calc(var(--ag-row-height) * 6.5)' }));\n        this.searchString = '';\n        this.highlightedItem = -1;\n        this.lastRowHovered = -1;\n        this.searchStringCreator = null;\n        const { cellRowHeight, value, valueList, searchStringCreator } = config || {};\n        if (cellRowHeight != null) {\n            this.cellRowHeight = cellRowHeight;\n        }\n        if (value !== undefined) {\n            this.value = value;\n        }\n        if (valueList != null) {\n            this.values = valueList;\n        }\n        if (searchStringCreator) {\n            this.searchStringCreator = searchStringCreator;\n        }\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.createLoadingElement();\n        this.createListComponent();\n        const { allowTyping, placeholder } = this.config;\n        if (allowTyping) {\n            this.eInput\n                .setAutoComplete(false)\n                .setInputPlaceholder(placeholder);\n            this.eDisplayField.classList.add('ag-hidden');\n        }\n        else {\n            this.eInput.setDisplayed(false);\n        }\n        this.eWrapper.tabIndex = this.gridOptionsService.get('tabIndex');\n        const { searchDebounceDelay = 300 } = this.config;\n        this.clearSearchString = debounce(this.clearSearchString, searchDebounceDelay);\n        this.renderSelectedValue();\n        if (allowTyping) {\n            this.eInput.onValueChange(value => this.searchTextFromString(value));\n            this.addManagedListener(this.eWrapper, 'focus', this.onWrapperFocus.bind(this));\n        }\n        this.addManagedListener(this.eWrapper, 'focusout', this.onWrapperFocusOut.bind(this));\n    }\n    createLoadingElement() {\n        const eDocument = this.gridOptionsService.getDocument();\n        const translate = this.localeService.getLocaleTextFunc();\n        const el = eDocument.createElement('div');\n        el.classList.add('ag-loading-text');\n        el.innerText = translate('loadingOoo', 'Loading...');\n        this.eLoading = el;\n    }\n    createListComponent() {\n        this.listComponent = this.createBean(new VirtualList({ cssIdentifier: 'rich-select' }));\n        this.listComponent.setComponentCreator(this.createRowComponent.bind(this));\n        this.listComponent.setParentComponent(this);\n        this.addManagedListener(this.listComponent, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, (e) => {\n            this.onListValueSelected(e.value, e.fromEnterKey);\n        });\n        const { cellRowHeight } = this;\n        if (cellRowHeight) {\n            this.listComponent.setRowHeight(cellRowHeight);\n        }\n        const eListGui = this.listComponent.getGui();\n        const eListAriaEl = this.listComponent.getAriaElement();\n        this.addManagedListener(eListGui, 'mousemove', this.onPickerMouseMove.bind(this));\n        this.addManagedListener(eListGui, 'mousedown', e => e.preventDefault());\n        eListGui.classList.add('ag-rich-select-list');\n        const listId = `ag-rich-select-list-${this.listComponent.getCompId()}`;\n        eListAriaEl.setAttribute('id', listId);\n        const translate = this.localeService.getLocaleTextFunc();\n        const ariaLabel = translate(this.config.pickerAriaLabelKey, this.config.pickerAriaLabelValue);\n        setAriaLabel(eListAriaEl, ariaLabel);\n        setAriaControls(this.eWrapper, eListAriaEl);\n    }\n    renderSelectedValue() {\n        const { value, eDisplayField, config } = this;\n        const { allowTyping, initialInputValue } = this.config;\n        const valueFormatted = this.config.valueFormatter ? this.config.valueFormatter(value) : value;\n        if (allowTyping) {\n            this.eInput.setValue(initialInputValue !== null && initialInputValue !== void 0 ? initialInputValue : valueFormatted);\n            return;\n        }\n        let userCompDetails;\n        if (config.cellRenderer) {\n            userCompDetails = this.userComponentFactory.getCellRendererDetails(this.config, {\n                value,\n                valueFormatted,\n                api: this.gridOptionsService.api\n            });\n        }\n        let userCompDetailsPromise;\n        if (userCompDetails) {\n            userCompDetailsPromise = userCompDetails.newAgStackInstance();\n        }\n        if (userCompDetailsPromise) {\n            clearElement(eDisplayField);\n            bindCellRendererToHtmlElement(userCompDetailsPromise, eDisplayField);\n            userCompDetailsPromise.then(renderer => {\n                this.addDestroyFunc(() => this.getContext().destroyBean(renderer));\n            });\n        }\n        else {\n            if (exists(this.value)) {\n                eDisplayField.innerText = valueFormatted;\n                eDisplayField.classList.remove('ag-display-as-placeholder');\n            }\n            else {\n                const { placeholder } = config;\n                if (exists(placeholder)) {\n                    eDisplayField.innerHTML = `${escapeString(placeholder)}`;\n                    eDisplayField.classList.add('ag-display-as-placeholder');\n                }\n                else {\n                    clearElement(eDisplayField);\n                }\n            }\n        }\n    }\n    getCurrentValueIndex() {\n        const { currentList, value } = this;\n        if (value == null || !currentList) {\n            return -1;\n        }\n        for (let i = 0; i < currentList.length; i++) {\n            if (currentList[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    highlightFilterMatch() {\n        var _a;\n        (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.forEachRenderedRow((cmp, idx) => {\n            cmp.highlightString(this.searchString);\n        });\n    }\n    highlightSelectedValue(index) {\n        var _a;\n        if (index == null) {\n            index = this.getCurrentValueIndex();\n        }\n        this.highlightedItem = index;\n        (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.forEachRenderedRow((cmp, idx) => {\n            const highlighted = index === -1 ? false : this.highlightedItem === idx;\n            cmp.updateHighlighted(highlighted);\n        });\n    }\n    setRowHeight(height) {\n        if (height !== this.cellRowHeight) {\n            this.cellRowHeight = height;\n        }\n        if (this.listComponent) {\n            this.listComponent.setRowHeight(height);\n        }\n    }\n    createPickerComponent() {\n        const { values } = this;\n        if (values) {\n            this.setValueList({ valueList: values });\n        }\n        // do not create the picker every time to save state\n        return this.listComponent;\n    }\n    setSearchStringCreator(searchStringFn) {\n        this.searchStringCreator = searchStringFn;\n    }\n    setValueList(params) {\n        const { valueList, refresh } = params;\n        if (!this.listComponent) {\n            return;\n        }\n        if (this.currentList === valueList) {\n            return;\n        }\n        this.currentList = valueList;\n        this.listComponent.setModel({\n            getRowCount: () => valueList.length,\n            getRow: (index) => valueList[index]\n        });\n        if (refresh) {\n            // if `values` is not present, it means the valuesList was set asynchronously\n            if (!this.values) {\n                this.values = valueList;\n                if (this.isPickerDisplayed) {\n                    this.showCurrentValueInPicker();\n                }\n            }\n            else {\n                this.listComponent.refresh();\n            }\n        }\n    }\n    showPicker() {\n        super.showPicker();\n        this.showCurrentValueInPicker();\n        this.displayOrHidePicker();\n    }\n    showCurrentValueInPicker() {\n        var _a, _b;\n        if (!this.listComponent) {\n            return;\n        }\n        if (!this.currentList) {\n            if (this.isPickerDisplayed && this.eLoading) {\n                this.listComponent.appendChild(this.eLoading);\n            }\n            return;\n        }\n        if ((_a = this.eLoading) === null || _a === void 0 ? void 0 : _a.offsetParent) {\n            (_b = this.eLoading.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.eLoading);\n        }\n        const currentValueIndex = this.getCurrentValueIndex();\n        if (currentValueIndex !== -1) {\n            // make sure the virtual list has been sized correctly\n            this.listComponent.refresh();\n            this.listComponent.ensureIndexVisible(currentValueIndex);\n            // this second call to refresh is necessary to force scrolled elements\n            // to be rendered with the correct index info.\n            this.listComponent.refresh(true);\n            this.highlightSelectedValue(currentValueIndex);\n        }\n        else {\n            this.listComponent.refresh();\n        }\n    }\n    beforeHidePicker() {\n        this.highlightedItem = -1;\n        super.beforeHidePicker();\n    }\n    onWrapperFocus() {\n        if (!this.eInput) {\n            return;\n        }\n        const focusableEl = this.eInput.getFocusableElement();\n        focusableEl.focus();\n        focusableEl.select();\n    }\n    onWrapperFocusOut(e) {\n        if (!this.eWrapper.contains(e.relatedTarget)) {\n            this.hidePicker();\n        }\n    }\n    buildSearchStringFromKeyboardEvent(searchKey) {\n        let { key } = searchKey;\n        if (key === KeyCode.BACKSPACE) {\n            this.searchString = this.searchString.slice(0, -1);\n            key = '';\n        }\n        else if (!isEventFromPrintableCharacter(searchKey)) {\n            return;\n        }\n        searchKey.preventDefault();\n        this.searchTextFromCharacter(key);\n    }\n    searchTextFromCharacter(char) {\n        this.searchString += char;\n        this.runSearch();\n        this.clearSearchString();\n    }\n    searchTextFromString(str) {\n        if (str == null) {\n            str = '';\n        }\n        this.searchString = str;\n        this.runSearch();\n    }\n    buildSearchStrings(values) {\n        const { valueFormatter = (value => value) } = this.config;\n        let searchStrings;\n        if (typeof values[0] === 'number' || typeof values[0] === 'string') {\n            searchStrings = values.map(v => valueFormatter(v));\n        }\n        else if (typeof values[0] === 'object' && this.searchStringCreator) {\n            searchStrings = this.searchStringCreator(values);\n        }\n        return searchStrings;\n    }\n    getSuggestionsAndFilteredValues(searchValue, valueList) {\n        let suggestions = [];\n        let filteredValues = [];\n        if (!searchValue.length) {\n            return { suggestions, filteredValues };\n        }\n        ;\n        const { searchType = 'fuzzy', filterList } = this.config;\n        if (searchType === 'fuzzy') {\n            const fuzzySearchResult = fuzzySuggestions(this.searchString, valueList, true);\n            suggestions = fuzzySearchResult.values;\n            const indices = fuzzySearchResult.indices;\n            if (filterList && indices.length) {\n                for (let i = 0; i < indices.length; i++) {\n                    filteredValues.push(this.values[indices[i]]);\n                }\n            }\n        }\n        else {\n            suggestions = valueList.filter((val, idx) => {\n                const currentValue = val.toLocaleLowerCase();\n                const valueToMatch = this.searchString.toLocaleLowerCase();\n                const isMatch = searchType === 'match' ? currentValue.startsWith(valueToMatch) : currentValue.indexOf(valueToMatch) !== -1;\n                if (filterList && isMatch) {\n                    filteredValues.push(this.values[idx]);\n                }\n                return isMatch;\n            });\n        }\n        return { suggestions, filteredValues };\n    }\n    filterListModel(filteredValues) {\n        const { filterList } = this.config;\n        if (!filterList) {\n            return;\n        }\n        this.setValueList({ valueList: filteredValues, refresh: true });\n        this.alignPickerToComponent();\n    }\n    runSearch() {\n        var _a, _b;\n        const { values } = this;\n        const searchStrings = this.buildSearchStrings(values);\n        if (!searchStrings) {\n            this.highlightSelectedValue(-1);\n            return;\n        }\n        const { suggestions, filteredValues } = this.getSuggestionsAndFilteredValues(this.searchString, searchStrings);\n        const { filterList, highlightMatch, searchType = 'fuzzy' } = this.config;\n        const filterValueLen = filteredValues.length;\n        const shouldFilter = !!(filterList && this.searchString !== '');\n        this.filterListModel(shouldFilter ? filteredValues : values);\n        if (suggestions.length) {\n            const topSuggestionIndex = shouldFilter ? 0 : searchStrings.indexOf(suggestions[0]);\n            this.selectListItem(topSuggestionIndex);\n        }\n        else {\n            this.highlightSelectedValue(-1);\n            if (!shouldFilter || filterValueLen) {\n                (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.ensureIndexVisible(0);\n            }\n            else if (shouldFilter) {\n                this.getAriaElement().removeAttribute('data-active-option');\n                const eListAriaEl = (_b = this.listComponent) === null || _b === void 0 ? void 0 : _b.getAriaElement();\n                if (eListAriaEl) {\n                    setAriaActiveDescendant(eListAriaEl, null);\n                }\n            }\n        }\n        if (highlightMatch && searchType !== 'fuzzy') {\n            this.highlightFilterMatch();\n        }\n        this.displayOrHidePicker();\n    }\n    displayOrHidePicker() {\n        var _a;\n        const eListGui = (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.getGui();\n        const toggleValue = this.currentList ? this.currentList.length === 0 : false;\n        eListGui === null || eListGui === void 0 ? void 0 : eListGui.classList.toggle('ag-hidden', toggleValue);\n    }\n    clearSearchString() {\n        this.searchString = '';\n    }\n    selectListItem(index, preventUnnecessaryScroll) {\n        if (!this.isPickerDisplayed || !this.currentList || !this.listComponent || index < 0 || index >= this.currentList.length) {\n            return;\n        }\n        const wasScrolled = this.listComponent.ensureIndexVisible(index, !preventUnnecessaryScroll);\n        if (wasScrolled && !preventUnnecessaryScroll) {\n            this.listComponent.refresh(true);\n        }\n        this.highlightSelectedValue(index);\n    }\n    setValue(value, silent, fromPicker) {\n        const index = this.currentList ? this.currentList.indexOf(value) : -1;\n        if (index === -1) {\n            return this;\n        }\n        this.value = value;\n        if (!fromPicker) {\n            this.selectListItem(index);\n        }\n        this.renderSelectedValue();\n        return super.setValue(value, silent);\n    }\n    createRowComponent(value) {\n        const row = new RichSelectRow(this.config, this.eWrapper);\n        row.setParentComponent(this.listComponent);\n        this.getContext().createBean(row);\n        row.setState(value);\n        const { highlightMatch, searchType = 'fuzzy' } = this.config;\n        if (highlightMatch && searchType !== 'fuzzy') {\n            row.highlightString(this.searchString);\n        }\n        return row;\n    }\n    getRowForMouseEvent(e) {\n        const { listComponent } = this;\n        if (!listComponent) {\n            return -1;\n        }\n        const eGui = listComponent === null || listComponent === void 0 ? void 0 : listComponent.getGui();\n        const rect = eGui.getBoundingClientRect();\n        const scrollTop = listComponent.getScrollTop();\n        const mouseY = e.clientY - rect.top + scrollTop;\n        return Math.floor(mouseY / listComponent.getRowHeight());\n    }\n    onPickerMouseMove(e) {\n        if (!this.listComponent) {\n            return;\n        }\n        const row = this.getRowForMouseEvent(e);\n        if (row !== -1 && row != this.lastRowHovered) {\n            this.lastRowHovered = row;\n            this.selectListItem(row, true);\n        }\n    }\n    onNavigationKeyDown(event, key) {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n        const isDown = key === KeyCode.DOWN;\n        if (!this.isPickerDisplayed && isDown) {\n            this.showPicker();\n            return;\n        }\n        const oldIndex = this.highlightedItem;\n        const diff = isDown ? 1 : -1;\n        const newIndex = oldIndex === -1 ? 0 : oldIndex + diff;\n        this.selectListItem(newIndex);\n    }\n    onEnterKeyDown(e) {\n        if (!this.isPickerDisplayed) {\n            return;\n        }\n        e.preventDefault();\n        if (this.currentList) {\n            this.onListValueSelected(this.currentList[this.highlightedItem], true);\n        }\n    }\n    onTabKeyDown() {\n        if (!this.isPickerDisplayed || !this.currentList) {\n            return;\n        }\n        this.setValue(this.currentList[this.highlightedItem], false, true);\n    }\n    onListValueSelected(value, fromEnterKey) {\n        this.setValue(value, false, true);\n        this.dispatchPickerEvent(value, fromEnterKey);\n        this.hidePicker();\n    }\n    dispatchPickerEvent(value, fromEnterKey) {\n        const event = {\n            type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,\n            fromEnterKey,\n            value\n        };\n        this.dispatchEvent(event);\n    }\n    getFocusableElement() {\n        const { allowTyping } = this.config;\n        if (allowTyping) {\n            return this.eInput.getFocusableElement();\n        }\n        return super.getFocusableElement();\n    }\n    onKeyDown(event) {\n        const key = event.key;\n        const { allowTyping } = this.config;\n        switch (key) {\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                if (!allowTyping) {\n                    event.preventDefault();\n                }\n                break;\n            case KeyCode.PAGE_UP:\n            case KeyCode.PAGE_DOWN:\n                event.preventDefault();\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onNavigationKeyDown(event, key);\n                break;\n            case KeyCode.ESCAPE:\n                if (this.isPickerDisplayed) {\n                    if (isVisible(this.listComponent.getGui())) {\n                        event.preventDefault();\n                        stopPropagationForAgGrid(event);\n                    }\n                    this.hidePicker();\n                }\n                break;\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown();\n                break;\n            default:\n                if (!allowTyping) {\n                    this.buildSearchStringFromKeyboardEvent(event);\n                }\n        }\n    }\n    destroy() {\n        if (this.listComponent) {\n            this.destroyBean(this.listComponent);\n            this.listComponent = undefined;\n        }\n        this.eLoading = undefined;\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('userComponentFactory')\n], AgRichSelect.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    RefSelector('eInput')\n], AgRichSelect.prototype, \"eInput\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RefSelector } from \"./componentAnnotations.mjs\";\nimport { AgAbstractLabel } from \"./agAbstractLabel.mjs\";\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nexport class AgSlider extends AgAbstractLabel {\n    constructor(config) {\n        super(config, AgSlider.TEMPLATE);\n        this.labelAlignment = 'top';\n    }\n    init() {\n        this.eSlider.addCssClass('ag-slider-field');\n    }\n    onValueChange(callbackFn) {\n        const eventChanged = Events.EVENT_FIELD_VALUE_CHANGED;\n        this.addManagedListener(this.eText, eventChanged, () => {\n            const textValue = parseFloat(this.eText.getValue());\n            this.eSlider.setValue(textValue.toString(), true);\n            callbackFn(textValue || 0);\n        });\n        this.addManagedListener(this.eSlider, eventChanged, () => {\n            const sliderValue = this.eSlider.getValue();\n            this.eText.setValue(sliderValue, true);\n            callbackFn(parseFloat(sliderValue));\n        });\n        return this;\n    }\n    setSliderWidth(width) {\n        this.eSlider.setWidth(width);\n        return this;\n    }\n    setTextFieldWidth(width) {\n        this.eText.setWidth(width);\n        return this;\n    }\n    setMinValue(minValue) {\n        this.eSlider.setMinValue(minValue);\n        this.eText.setMin(minValue);\n        return this;\n    }\n    setMaxValue(maxValue) {\n        this.eSlider.setMaxValue(maxValue);\n        this.eText.setMax(maxValue);\n        return this;\n    }\n    getValue() {\n        return this.eText.getValue();\n    }\n    setValue(value) {\n        if (this.getValue() === value) {\n            return this;\n        }\n        this.eText.setValue(value, true);\n        this.eSlider.setValue(value, true);\n        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n        return this;\n    }\n    setStep(step) {\n        this.eSlider.setStep(step);\n        this.eText.setStep(step);\n        return this;\n    }\n}\nAgSlider.TEMPLATE = `<div class=\"ag-slider\">\n            <label ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>`;\n__decorate([\n    RefSelector('eLabel')\n], AgSlider.prototype, \"eLabel\", void 0);\n__decorate([\n    RefSelector('eSlider')\n], AgSlider.prototype, \"eSlider\", void 0);\n__decorate([\n    RefSelector('eText')\n], AgSlider.prototype, \"eText\", void 0);\n__decorate([\n    PostConstruct\n], AgSlider.prototype, \"init\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from './component.mjs';\nimport { RefSelector } from './componentAnnotations.mjs';\nimport { PostConstruct } from '../context/context.mjs';\nimport { createIcon } from '../utils/icon.mjs';\nimport { setDisplayed } from '../utils/dom.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { setAriaExpanded } from '../utils/aria.mjs';\nexport class AgGroupComponent extends Component {\n    constructor(params = {}) {\n        super(AgGroupComponent.getTemplate(params));\n        this.suppressEnabledCheckbox = true;\n        this.suppressOpenCloseIcons = false;\n        const { title, enabled, items, suppressEnabledCheckbox, suppressOpenCloseIcons } = params;\n        this.title = title;\n        this.cssIdentifier = params.cssIdentifier || 'default';\n        this.enabled = enabled != null ? enabled : true;\n        this.items = items || [];\n        this.alignItems = params.alignItems || 'center';\n        if (suppressEnabledCheckbox != null) {\n            this.suppressEnabledCheckbox = suppressEnabledCheckbox;\n        }\n        if (suppressOpenCloseIcons != null) {\n            this.suppressOpenCloseIcons = suppressOpenCloseIcons;\n        }\n    }\n    static getTemplate(params) {\n        const cssIdentifier = params.cssIdentifier || 'default';\n        const direction = params.direction || 'vertical';\n        return /* html */ `<div class=\"ag-group ag-${cssIdentifier}-group\" role=\"presentation\">\n            <div class=\"ag-group-title-bar ag-${cssIdentifier}-group-title-bar ag-unselectable\" ref=\"eTitleBar\" role=\"button\">\n                <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" ref=\"eGroupOpenedIcon\" role=\"presentation\"></span>\n                <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" ref=\"eGroupClosedIcon\" role=\"presentation\"></span>\n                <span ref=\"eTitle\" class=\"ag-group-title ag-${cssIdentifier}-group-title\"></span>\n            </div>\n            <div ref=\"eToolbar\" class=\"ag-group-toolbar ag-${cssIdentifier}-group-toolbar\">\n                <ag-checkbox ref=\"cbGroupEnabled\"></ag-checkbox>\n            </div>\n            <div ref=\"eContainer\" class=\"ag-group-container ag-group-container-${direction} ag-${cssIdentifier}-group-container\"></div>\n        </div>`;\n    }\n    postConstruct() {\n        if (this.items.length) {\n            const initialItems = this.items;\n            this.items = [];\n            this.addItems(initialItems);\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbGroupEnabled.setLabel(localeTextFunc('enabled', 'Enabled'));\n        if (this.title) {\n            this.setTitle(this.title);\n        }\n        if (this.enabled) {\n            this.setEnabled(this.enabled);\n        }\n        this.setAlignItems(this.alignItems);\n        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);\n        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);\n        this.setupExpandContract();\n        this.refreshAriaStatus();\n        this.refreshChildDisplay();\n    }\n    setupExpandContract() {\n        this.eGroupClosedIcon.appendChild(createIcon('columnSelectClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(createIcon('columnSelectOpen', this.gridOptionsService, null));\n        this.addManagedListener(this.eTitleBar, 'click', () => this.toggleGroupExpand());\n        this.addManagedListener(this.eTitleBar, 'keydown', (e) => {\n            switch (e.key) {\n                case KeyCode.ENTER:\n                case KeyCode.SPACE:\n                    e.preventDefault();\n                    this.toggleGroupExpand();\n                    break;\n                case KeyCode.RIGHT:\n                case KeyCode.LEFT:\n                    e.preventDefault();\n                    this.toggleGroupExpand(e.key === KeyCode.RIGHT);\n                    break;\n            }\n        });\n    }\n    refreshAriaStatus() {\n        if (!this.suppressOpenCloseIcons) {\n            setAriaExpanded(this.eTitleBar, this.expanded);\n        }\n    }\n    refreshChildDisplay() {\n        const showIcon = !this.suppressOpenCloseIcons;\n        setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);\n        setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);\n        setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);\n    }\n    isExpanded() {\n        return this.expanded;\n    }\n    setAlignItems(alignment) {\n        if (this.alignItems !== alignment) {\n            this.removeCssClass(`ag-group-item-alignment-${this.alignItems}`);\n        }\n        this.alignItems = alignment;\n        const newCls = `ag-group-item-alignment-${this.alignItems}`;\n        this.addCssClass(newCls);\n        return this;\n    }\n    toggleGroupExpand(expanded) {\n        if (this.suppressOpenCloseIcons) {\n            this.expanded = true;\n            this.refreshChildDisplay();\n            setDisplayed(this.eContainer, true);\n            return this;\n        }\n        expanded = expanded != null ? expanded : !this.expanded;\n        if (this.expanded === expanded) {\n            return this;\n        }\n        this.expanded = expanded;\n        this.refreshAriaStatus();\n        this.refreshChildDisplay();\n        setDisplayed(this.eContainer, expanded);\n        this.dispatchEvent({ type: this.expanded ? AgGroupComponent.EVENT_EXPANDED : AgGroupComponent.EVENT_COLLAPSED });\n        return this;\n    }\n    addItems(items) {\n        items.forEach(item => this.addItem(item));\n    }\n    addItem(item) {\n        const container = this.eContainer;\n        const el = item instanceof Component ? item.getGui() : item;\n        el.classList.add('ag-group-item', `ag-${this.cssIdentifier}-group-item`);\n        container.appendChild(el);\n        this.items.push(el);\n    }\n    hideItem(hide, index) {\n        const itemToHide = this.items[index];\n        setDisplayed(itemToHide, !hide);\n    }\n    setTitle(title) {\n        this.eTitle.innerText = title;\n        return this;\n    }\n    addCssClassToTitleBar(cssClass) {\n        this.eTitleBar.classList.add(cssClass);\n    }\n    setEnabled(enabled, skipToggle) {\n        this.enabled = enabled;\n        this.refreshDisabledStyles();\n        this.toggleGroupExpand(enabled);\n        if (!skipToggle) {\n            this.cbGroupEnabled.setValue(enabled);\n        }\n        return this;\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    onEnableChange(callbackFn) {\n        this.cbGroupEnabled.onValueChange((newSelection) => {\n            this.setEnabled(newSelection, true);\n            callbackFn(newSelection);\n        });\n        return this;\n    }\n    hideEnabledCheckbox(hide) {\n        this.suppressEnabledCheckbox = hide;\n        this.refreshChildDisplay();\n        this.refreshDisabledStyles();\n        return this;\n    }\n    hideOpenCloseIcons(hide) {\n        this.suppressOpenCloseIcons = hide;\n        if (hide) {\n            this.toggleGroupExpand(true);\n        }\n        return this;\n    }\n    refreshDisabledStyles() {\n        this.addOrRemoveCssClass('ag-disabled', !this.enabled);\n        if (this.suppressEnabledCheckbox && !this.enabled) {\n            this.eTitleBar.classList.add('ag-disabled-group-title-bar');\n            this.eTitleBar.removeAttribute('tabindex');\n        }\n        else {\n            this.eTitleBar.classList.remove('ag-disabled-group-title-bar');\n            this.eTitleBar.setAttribute('tabindex', '0');\n        }\n        this.eContainer.classList.toggle('ag-disabled-group-container', !this.enabled);\n    }\n}\nAgGroupComponent.EVENT_EXPANDED = 'expanded';\nAgGroupComponent.EVENT_COLLAPSED = 'collapsed';\n__decorate([\n    RefSelector('eTitleBar')\n], AgGroupComponent.prototype, \"eTitleBar\", void 0);\n__decorate([\n    RefSelector('eGroupOpenedIcon')\n], AgGroupComponent.prototype, \"eGroupOpenedIcon\", void 0);\n__decorate([\n    RefSelector('eGroupClosedIcon')\n], AgGroupComponent.prototype, \"eGroupClosedIcon\", void 0);\n__decorate([\n    RefSelector('eToolbar')\n], AgGroupComponent.prototype, \"eToolbar\", void 0);\n__decorate([\n    RefSelector('cbGroupEnabled')\n], AgGroupComponent.prototype, \"cbGroupEnabled\", void 0);\n__decorate([\n    RefSelector('eTitle')\n], AgGroupComponent.prototype, \"eTitle\", void 0);\n__decorate([\n    RefSelector('eContainer')\n], AgGroupComponent.prototype, \"eContainer\", void 0);\n__decorate([\n    PostConstruct\n], AgGroupComponent.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { AgMenuItemComponent } from \"./agMenuItemComponent.mjs\";\nimport { TabGuardComp } from \"./tabGuardComp.mjs\";\nimport { KeyCode } from \"../constants/keyCode.mjs\";\nimport { loadTemplate } from \"../utils/dom.mjs\";\nimport { last } from \"../utils/array.mjs\";\nimport { setAriaLevel } from \"../utils/aria.mjs\";\nexport class AgMenuList extends TabGuardComp {\n    constructor(level = 1) {\n        super(/* html */ `<div class=\"ag-menu-list\" role=\"tree\"></div>`);\n        this.level = level;\n        this.menuItems = [];\n    }\n    postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n    }\n    onTabKeyDown(e) {\n        const parent = this.getParentComponent();\n        const parentGui = parent && parent.getGui();\n        const isManaged = parentGui && parentGui.classList.contains('ag-focus-managed');\n        if (!isManaged) {\n            e.preventDefault();\n        }\n        if (e.shiftKey) {\n            this.closeIfIsChild(e);\n        }\n    }\n    handleKeyDown(e) {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.handleNavKey(e.key);\n                break;\n            case KeyCode.ESCAPE:\n                const topMenu = this.findTopMenu();\n                if (topMenu) {\n                    this.focusService.focusInto(topMenu.getGui());\n                }\n                break;\n        }\n    }\n    clearActiveItem() {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.deactivate();\n            this.activeMenuItem = null;\n        }\n    }\n    addMenuItems(menuItems) {\n        if (menuItems == null) {\n            return;\n        }\n        menuItems.forEach(menuItemOrString => {\n            if (menuItemOrString === 'separator') {\n                this.addSeparator();\n            }\n            else if (typeof menuItemOrString === 'string') {\n                console.warn(`AG Grid: unrecognised menu item ${menuItemOrString}`);\n            }\n            else {\n                this.addItem(menuItemOrString);\n            }\n        });\n    }\n    addItem(menuItemDef) {\n        const menuItem = this.createManagedBean(new AgMenuItemComponent(Object.assign(Object.assign({}, menuItemDef), { isAnotherSubMenuOpen: () => this.menuItems.some(m => m.isSubMenuOpen()) })));\n        menuItem.setParentComponent(this);\n        setAriaLevel(menuItem.getGui(), this.level);\n        this.menuItems.push(menuItem);\n        this.appendChild(menuItem.getGui());\n        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, (event) => {\n            this.dispatchEvent(event);\n        });\n        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, (event) => {\n            if (this.activeMenuItem && this.activeMenuItem !== event.menuItem) {\n                this.activeMenuItem.deactivate();\n            }\n            this.activeMenuItem = event.menuItem;\n        });\n    }\n    activateFirstItem() {\n        const item = this.menuItems.filter(currentItem => !currentItem.isDisabled())[0];\n        if (!item) {\n            return;\n        }\n        item.activate();\n    }\n    addSeparator() {\n        const separatorHtml = /* html */ `\n            <div class=\"ag-menu-separator\" aria-hidden=\"true\">\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n            </div>`;\n        this.appendChild(loadTemplate(separatorHtml));\n    }\n    findTopMenu() {\n        let parent = this.getParentComponent();\n        if (!parent && this instanceof AgMenuList) {\n            return this;\n        }\n        while (true) {\n            const nextParent = parent && parent.getParentComponent && parent.getParentComponent();\n            if (!nextParent || (!(nextParent instanceof AgMenuList || nextParent instanceof AgMenuItemComponent))) {\n                break;\n            }\n            parent = nextParent;\n        }\n        return parent instanceof AgMenuList ? parent : undefined;\n    }\n    handleNavKey(key) {\n        switch (key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                const nextItem = this.findNextItem(key === KeyCode.UP);\n                if (nextItem && nextItem !== this.activeMenuItem) {\n                    nextItem.activate();\n                }\n                return;\n        }\n        const left = this.gridOptionsService.get('enableRtl') ? KeyCode.RIGHT : KeyCode.LEFT;\n        if (key === left) {\n            this.closeIfIsChild();\n        }\n        else {\n            this.openChild();\n        }\n    }\n    closeIfIsChild(e) {\n        const parentItem = this.getParentComponent();\n        if (parentItem && parentItem instanceof AgMenuItemComponent) {\n            if (e) {\n                e.preventDefault();\n            }\n            parentItem.closeSubMenu();\n            parentItem.getGui().focus();\n        }\n    }\n    openChild() {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.openSubMenu(true);\n        }\n    }\n    findNextItem(up) {\n        const items = this.menuItems.filter(item => !item.isDisabled());\n        if (!items.length) {\n            return;\n        }\n        if (!this.activeMenuItem) {\n            return up ? last(items) : items[0];\n        }\n        if (up) {\n            items.reverse();\n        }\n        let nextItem;\n        let foundCurrent = false;\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (!foundCurrent) {\n                if (item === this.activeMenuItem) {\n                    foundCurrent = true;\n                }\n                continue;\n            }\n            nextItem = item;\n            break;\n        }\n        return nextItem || this.activeMenuItem;\n    }\n    destroy() {\n        this.clearActiveItem();\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('focusService')\n], AgMenuList.prototype, \"focusService\", void 0);\n__decorate([\n    PostConstruct\n], AgMenuList.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct } from '../context/context.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { TabGuardComp } from './tabGuardComp.mjs';\nexport class AgMenuPanel extends TabGuardComp {\n    constructor(wrappedComponent) {\n        super();\n        this.wrappedComponent = wrappedComponent;\n        this.setTemplateFromElement(wrappedComponent.getGui());\n    }\n    postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n    }\n    handleKeyDown(e) {\n        if (e.key === KeyCode.ESCAPE) {\n            this.closePanel();\n        }\n    }\n    onTabKeyDown(e) {\n        if (e.defaultPrevented) {\n            return;\n        }\n        this.closePanel();\n        e.preventDefault();\n    }\n    closePanel() {\n        const menuItem = this.parentComponent;\n        menuItem.closeSubMenu();\n        setTimeout(() => menuItem.getGui().focus(), 0);\n    }\n}\n__decorate([\n    PostConstruct\n], AgMenuPanel.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from '../context/context.mjs';\nimport { AgMenuList } from './agMenuList.mjs';\nimport { AgMenuPanel } from './agMenuPanel.mjs';\nimport { Component } from './component.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { PostConstruct } from '../context/context.mjs';\nimport { createIconNoSpan } from '../utils/icon.mjs';\nimport { isNodeOrElement, loadTemplate } from '../utils/dom.mjs';\nimport { CustomTooltipFeature } from './customTooltipFeature.mjs';\nimport { getAriaLevel, setAriaDisabled, setAriaExpanded } from '../utils/aria.mjs';\nexport class AgMenuItemComponent extends Component {\n    constructor(params) {\n        super();\n        this.params = params;\n        this.isActive = false;\n        this.subMenuIsOpen = false;\n        this.setTemplate(/* html */ `<div class=\"${this.getClassName()}\" tabindex=\"-1\" role=\"treeitem\"></div>`);\n    }\n    init() {\n        this.addIcon();\n        this.addName();\n        this.addShortcut();\n        this.addSubMenu();\n        this.addTooltip();\n        const eGui = this.getGui();\n        if (this.params.disabled) {\n            this.addCssClass(this.getClassName('disabled'));\n            setAriaDisabled(eGui, true);\n        }\n        else {\n            this.addGuiEventListener('click', e => this.onItemSelected(e));\n            this.addGuiEventListener('keydown', (e) => {\n                if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onItemSelected(e);\n                }\n            });\n            this.addGuiEventListener('mousedown', e => {\n                // Prevent event bubbling to other event handlers such as PopupService triggering\n                // premature closing of any open sub-menu popup.\n                e.stopPropagation();\n                e.preventDefault();\n            });\n            this.addGuiEventListener('mouseenter', () => this.onMouseEnter());\n            this.addGuiEventListener('mouseleave', () => this.onMouseLeave());\n        }\n        if (this.params.cssClasses) {\n            this.params.cssClasses.forEach(it => this.addCssClass(it));\n        }\n    }\n    isDisabled() {\n        return !!this.params.disabled;\n    }\n    openSubMenu(activateFirstItem = false) {\n        this.closeSubMenu();\n        if (!this.params.subMenu) {\n            return;\n        }\n        const ePopup = loadTemplate(/* html */ `<div class=\"ag-menu\" role=\"presentation\"></div>`);\n        let destroySubMenu;\n        if (this.params.subMenu instanceof Array) {\n            const currentLevel = getAriaLevel(this.getGui());\n            const nextLevel = isNaN(currentLevel) ? 1 : (currentLevel + 1);\n            const childMenu = this.createBean(new AgMenuList(nextLevel));\n            childMenu.setParentComponent(this);\n            childMenu.addMenuItems(this.params.subMenu);\n            ePopup.appendChild(childMenu.getGui());\n            // bubble menu item selected events\n            this.addManagedListener(childMenu, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, e => this.dispatchEvent(e));\n            childMenu.addGuiEventListener('mouseenter', () => this.cancelDeactivate());\n            destroySubMenu = () => this.destroyBean(childMenu);\n            if (activateFirstItem) {\n                setTimeout(() => childMenu.activateFirstItem(), 0);\n            }\n        }\n        else {\n            const { subMenu } = this.params;\n            const menuPanel = this.createBean(new AgMenuPanel(subMenu));\n            menuPanel.setParentComponent(this);\n            const subMenuGui = menuPanel.getGui();\n            const mouseEvent = 'mouseenter';\n            const mouseEnterListener = () => this.cancelDeactivate();\n            subMenuGui.addEventListener(mouseEvent, mouseEnterListener);\n            destroySubMenu = () => subMenuGui.removeEventListener(mouseEvent, mouseEnterListener);\n            ePopup.appendChild(subMenuGui);\n            if (subMenu.afterGuiAttached) {\n                setTimeout(() => subMenu.afterGuiAttached(), 0);\n            }\n        }\n        const eGui = this.getGui();\n        const positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, { eventSource: eGui, ePopup });\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            positionCallback: positionCallback,\n            anchorToElement: eGui,\n            ariaLabel: translate('ariaLabelSubMenu', 'SubMenu')\n        });\n        this.subMenuIsOpen = true;\n        setAriaExpanded(eGui, true);\n        this.hideSubMenu = () => {\n            if (addPopupRes) {\n                addPopupRes.hideFunc();\n            }\n            this.subMenuIsOpen = false;\n            setAriaExpanded(eGui, false);\n            destroySubMenu();\n        };\n    }\n    closeSubMenu() {\n        if (!this.hideSubMenu) {\n            return;\n        }\n        this.hideSubMenu();\n        this.hideSubMenu = null;\n        setAriaExpanded(this.getGui(), false);\n    }\n    isSubMenuOpen() {\n        return this.subMenuIsOpen;\n    }\n    activate(openSubMenu) {\n        this.cancelActivate();\n        if (this.params.disabled) {\n            return;\n        }\n        this.isActive = true;\n        this.addCssClass(this.getClassName('active'));\n        this.getGui().focus();\n        if (openSubMenu && this.params.subMenu) {\n            window.setTimeout(() => {\n                if (this.isAlive() && this.isActive) {\n                    this.openSubMenu();\n                }\n            }, 300);\n        }\n        this.onItemActivated();\n    }\n    deactivate() {\n        this.cancelDeactivate();\n        this.removeCssClass(this.getClassName('active'));\n        this.isActive = false;\n        if (this.subMenuIsOpen) {\n            this.hideSubMenu();\n        }\n    }\n    addIcon() {\n        if (!this.params.checked && !this.params.icon && this.params.isCompact) {\n            return;\n        }\n        const icon = loadTemplate(/* html */ `<span ref=\"eIcon\" class=\"${this.getClassName('part')} ${this.getClassName('icon')}\" role=\"presentation\"></span>`);\n        if (this.params.checked) {\n            icon.appendChild(createIconNoSpan('check', this.gridOptionsService));\n        }\n        else if (this.params.icon) {\n            if (isNodeOrElement(this.params.icon)) {\n                icon.appendChild(this.params.icon);\n            }\n            else if (typeof this.params.icon === 'string') {\n                icon.innerHTML = this.params.icon;\n            }\n            else {\n                console.warn('AG Grid: menu item icon must be DOM node or string');\n            }\n        }\n        this.getGui().appendChild(icon);\n    }\n    addName() {\n        if (!this.params.name && this.params.isCompact) {\n            return;\n        }\n        const name = loadTemplate(/* html */ `<span ref=\"eName\" class=\"${this.getClassName('part')} ${this.getClassName('text')}\">${this.params.name || ''}</span>`);\n        this.getGui().appendChild(name);\n    }\n    addTooltip() {\n        if (!this.params.tooltip) {\n            return;\n        }\n        this.tooltip = this.params.tooltip;\n        if (this.gridOptionsService.get('enableBrowserTooltips')) {\n            this.getGui().setAttribute('title', this.tooltip);\n        }\n        else {\n            this.createManagedBean(new CustomTooltipFeature(this));\n        }\n    }\n    getTooltipParams() {\n        return {\n            location: 'menu',\n            value: this.tooltip\n        };\n    }\n    addShortcut() {\n        if (!this.params.shortcut && this.params.isCompact) {\n            return;\n        }\n        const shortcut = loadTemplate(/* html */ `<span ref=\"eShortcut\" class=\"${this.getClassName('part')} ${this.getClassName('shortcut')}\">${this.params.shortcut || ''}</span>`);\n        this.getGui().appendChild(shortcut);\n    }\n    addSubMenu() {\n        if (!this.params.subMenu && this.params.isCompact) {\n            return;\n        }\n        const pointer = loadTemplate(/* html */ `<span ref=\"ePopupPointer\" class=\"${this.getClassName('part')} ${this.getClassName('popup-pointer')}\"></span>`);\n        const eGui = this.getGui();\n        if (this.params.subMenu) {\n            const iconName = this.gridOptionsService.get('enableRtl') ? 'smallLeft' : 'smallRight';\n            setAriaExpanded(eGui, false);\n            pointer.appendChild(createIconNoSpan(iconName, this.gridOptionsService));\n        }\n        eGui.appendChild(pointer);\n    }\n    onItemSelected(event) {\n        if (this.params.action) {\n            this.params.action();\n        }\n        else {\n            this.openSubMenu(event && event.type === 'keydown');\n        }\n        if (this.params.subMenu && !this.params.action) {\n            return;\n        }\n        const e = {\n            type: AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED,\n            action: this.params.action,\n            checked: this.params.checked,\n            cssClasses: this.params.cssClasses,\n            disabled: this.params.disabled,\n            icon: this.params.icon,\n            name: this.params.name,\n            shortcut: this.params.shortcut,\n            subMenu: this.params.subMenu,\n            tooltip: this.params.tooltip,\n            event\n        };\n        this.dispatchEvent(e);\n    }\n    onItemActivated() {\n        const event = {\n            type: AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED,\n            menuItem: this,\n        };\n        this.dispatchEvent(event);\n    }\n    cancelActivate() {\n        if (this.activateTimeoutId) {\n            window.clearTimeout(this.activateTimeoutId);\n            this.activateTimeoutId = 0;\n        }\n    }\n    cancelDeactivate() {\n        if (this.deactivateTimeoutId) {\n            window.clearTimeout(this.deactivateTimeoutId);\n            this.deactivateTimeoutId = 0;\n        }\n    }\n    onMouseEnter() {\n        this.cancelDeactivate();\n        if (this.params.isAnotherSubMenuOpen()) {\n            // wait to see if the user enters the open sub-menu\n            this.activateTimeoutId = window.setTimeout(() => this.activate(true), AgMenuItemComponent.ACTIVATION_DELAY);\n        }\n        else {\n            // activate immediately\n            this.activate(true);\n        }\n    }\n    onMouseLeave() {\n        this.cancelActivate();\n        if (this.isSubMenuOpen()) {\n            // wait to see if the user enters the sub-menu\n            this.deactivateTimeoutId = window.setTimeout(() => this.deactivate(), AgMenuItemComponent.ACTIVATION_DELAY);\n        }\n        else {\n            // de-activate immediately\n            this.deactivate();\n        }\n    }\n    getClassName(suffix) {\n        const prefix = this.params.isCompact ? 'ag-compact-menu-option' : 'ag-menu-option';\n        return suffix ? `${prefix}-${suffix}` : prefix;\n    }\n}\nAgMenuItemComponent.EVENT_MENU_ITEM_SELECTED = 'menuItemSelected';\nAgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED = 'menuItemActivated';\nAgMenuItemComponent.ACTIVATION_DELAY = 80;\n__decorate([\n    Autowired('popupService')\n], AgMenuItemComponent.prototype, \"popupService\", void 0);\n__decorate([\n    PostConstruct\n], AgMenuItemComponent.prototype, \"init\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RefSelector } from \"./componentAnnotations.mjs\";\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { Component } from \"./component.mjs\";\nimport { getInnerHeight, getInnerWidth, isVisible, setDisplayed } from \"../utils/dom.mjs\";\nimport { createIconNoSpan } from \"../utils/icon.mjs\";\nimport { PositionableFeature } from \"../rendering/features/positionableFeature.mjs\";\nexport class AgPanel extends Component {\n    constructor(config) {\n        super(AgPanel.getTemplate(config));\n        this.closable = true;\n        this.config = config;\n    }\n    static getTemplate(config) {\n        const cssIdentifier = (config && config.cssIdentifier) || 'default';\n        return /* html */ `<div class=\"ag-panel ag-${cssIdentifier}-panel\" tabindex=\"-1\">\n            <div ref=\"eTitleBar\" class=\"ag-panel-title-bar ag-${cssIdentifier}-panel-title-bar ag-unselectable\">\n                <span ref=\"eTitle\" class=\"ag-panel-title-bar-title ag-${cssIdentifier}-panel-title-bar-title\"></span>\n                <div ref=\"eTitleBarButtons\" class=\"ag-panel-title-bar-buttons ag-${cssIdentifier}-panel-title-bar-buttons\"></div>\n            </div>\n            <div ref=\"eContentWrapper\" class=\"ag-panel-content-wrapper ag-${cssIdentifier}-panel-content-wrapper\"></div>\n        </div>`;\n    }\n    postConstruct() {\n        const { component, closable, hideTitleBar, title, minWidth = 250, width, minHeight = 250, height, centered, popup, x, y } = this.config;\n        this.positionableFeature = new PositionableFeature(this.getGui(), {\n            minWidth, width, minHeight, height, centered, x, y, popup,\n            calculateTopBuffer: () => this.positionableFeature.getHeight() - this.getBodyHeight()\n        });\n        this.createManagedBean(this.positionableFeature);\n        const eGui = this.getGui();\n        if (component) {\n            this.setBodyComponent(component);\n        }\n        if (!hideTitleBar) {\n            if (title) {\n                this.setTitle(title);\n            }\n            this.setClosable(closable != null ? closable : this.closable);\n        }\n        else {\n            setDisplayed(this.eTitleBar, false);\n        }\n        this.addManagedListener(this.eTitleBar, 'mousedown', (e) => {\n            const eDocument = this.gridOptionsService.getDocument();\n            if (eGui.contains(e.relatedTarget) ||\n                eGui.contains(eDocument.activeElement) ||\n                this.eTitleBarButtons.contains(e.target)) {\n                e.preventDefault();\n                return;\n            }\n            const focusEl = this.eContentWrapper.querySelector('button, [href], input, select, textarea, [tabindex]');\n            if (focusEl) {\n                focusEl.focus();\n            }\n        });\n        if (popup && this.positionableFeature.isPositioned()) {\n            return;\n        }\n        if (this.renderComponent) {\n            this.renderComponent();\n        }\n        this.positionableFeature.initialisePosition();\n        this.eContentWrapper.style.height = '0';\n    }\n    renderComponent() {\n        const eGui = this.getGui();\n        eGui.focus();\n        this.close = () => {\n            eGui.parentElement.removeChild(eGui);\n            this.destroy();\n        };\n    }\n    getHeight() {\n        return this.positionableFeature.getHeight();\n    }\n    setHeight(height) {\n        this.positionableFeature.setHeight(height);\n    }\n    getWidth() {\n        return this.positionableFeature.getWidth();\n    }\n    setWidth(width) {\n        this.positionableFeature.setWidth(width);\n    }\n    setClosable(closable) {\n        if (closable !== this.closable) {\n            this.closable = closable;\n        }\n        if (closable) {\n            const closeButtonComp = this.closeButtonComp = new Component(AgPanel.CLOSE_BTN_TEMPLATE);\n            this.getContext().createBean(closeButtonComp);\n            const eGui = closeButtonComp.getGui();\n            const child = createIconNoSpan('close', this.gridOptionsService);\n            child.classList.add('ag-panel-title-bar-button-icon');\n            eGui.appendChild(child);\n            this.addTitleBarButton(closeButtonComp);\n            closeButtonComp.addManagedListener(eGui, 'click', this.onBtClose.bind(this));\n        }\n        else if (this.closeButtonComp) {\n            const eGui = this.closeButtonComp.getGui();\n            eGui.parentElement.removeChild(eGui);\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n    }\n    setBodyComponent(bodyComponent) {\n        bodyComponent.setParentComponent(this);\n        this.eContentWrapper.appendChild(bodyComponent.getGui());\n    }\n    addTitleBarButton(button, position) {\n        const eTitleBarButtons = this.eTitleBarButtons;\n        const buttons = eTitleBarButtons.children;\n        const len = buttons.length;\n        if (position == null) {\n            position = len;\n        }\n        position = Math.max(0, Math.min(position, len));\n        button.addCssClass('ag-panel-title-bar-button');\n        const eGui = button.getGui();\n        if (position === 0) {\n            eTitleBarButtons.insertAdjacentElement('afterbegin', eGui);\n        }\n        else if (position === len) {\n            eTitleBarButtons.insertAdjacentElement('beforeend', eGui);\n        }\n        else {\n            buttons[position - 1].insertAdjacentElement('afterend', eGui);\n        }\n        button.setParentComponent(this);\n    }\n    getBodyHeight() {\n        return getInnerHeight(this.eContentWrapper);\n    }\n    getBodyWidth() {\n        return getInnerWidth(this.eContentWrapper);\n    }\n    setTitle(title) {\n        this.eTitle.innerText = title;\n    }\n    // called when user hits the 'x' in the top right\n    onBtClose() {\n        this.close();\n    }\n    destroy() {\n        if (this.closeButtonComp) {\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n        const eGui = this.getGui();\n        if (eGui && isVisible(eGui)) {\n            this.close();\n        }\n        super.destroy();\n    }\n}\nAgPanel.CLOSE_BTN_TEMPLATE = `<div class=\"ag-button\"></div>`;\n__decorate([\n    RefSelector('eContentWrapper')\n], AgPanel.prototype, \"eContentWrapper\", void 0);\n__decorate([\n    RefSelector('eTitleBar')\n], AgPanel.prototype, \"eTitleBar\", void 0);\n__decorate([\n    RefSelector('eTitleBarButtons')\n], AgPanel.prototype, \"eTitleBarButtons\", void 0);\n__decorate([\n    RefSelector('eTitle')\n], AgPanel.prototype, \"eTitle\", void 0);\n__decorate([\n    PostConstruct\n], AgPanel.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../context/context.mjs\";\nimport { AgPanel } from \"./agPanel.mjs\";\nimport { Component } from \"./component.mjs\";\nimport { setDisplayed } from \"../utils/dom.mjs\";\nimport { createIconNoSpan } from \"../utils/icon.mjs\";\nexport class AgDialog extends AgPanel {\n    constructor(config) {\n        super(Object.assign(Object.assign({}, config), { popup: true }));\n        this.isMaximizable = false;\n        this.isMaximized = false;\n        this.maximizeListeners = [];\n        this.resizeListenerDestroy = null;\n        this.lastPosition = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        };\n    }\n    postConstruct() {\n        const eGui = this.getGui();\n        const { movable, resizable, maximizable } = this.config;\n        this.addCssClass('ag-dialog');\n        super.postConstruct();\n        this.addManagedListener(eGui, 'focusin', (e) => {\n            if (eGui.contains(e.relatedTarget)) {\n                return;\n            }\n            this.popupService.bringPopupToFront(eGui);\n        });\n        if (movable) {\n            this.setMovable(movable);\n        }\n        if (maximizable) {\n            this.setMaximizable(maximizable);\n        }\n        if (resizable) {\n            this.setResizable(resizable);\n        }\n    }\n    renderComponent() {\n        const eGui = this.getGui();\n        const { alwaysOnTop, modal, title, afterGuiAttached } = this.config;\n        const translate = this.localeService.getLocaleTextFunc();\n        const addPopupRes = this.popupService.addPopup({\n            modal,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: this.destroy.bind(this),\n            alwaysOnTop,\n            ariaLabel: title || translate('ariaLabelDialog', 'Dialog'),\n            afterGuiAttached\n        });\n        if (addPopupRes) {\n            this.close = addPopupRes.hideFunc;\n        }\n    }\n    toggleMaximize() {\n        const position = this.positionableFeature.getPosition();\n        if (this.isMaximized) {\n            const { x, y, width, height } = this.lastPosition;\n            this.setWidth(width);\n            this.setHeight(height);\n            this.positionableFeature.offsetElement(x, y);\n        }\n        else {\n            this.lastPosition.width = this.getWidth();\n            this.lastPosition.height = this.getHeight();\n            this.lastPosition.x = position.x;\n            this.lastPosition.y = position.y;\n            this.positionableFeature.offsetElement(0, 0);\n            this.setHeight('100%');\n            this.setWidth('100%');\n        }\n        this.isMaximized = !this.isMaximized;\n        this.refreshMaximizeIcon();\n    }\n    refreshMaximizeIcon() {\n        setDisplayed(this.maximizeIcon, !this.isMaximized);\n        setDisplayed(this.minimizeIcon, this.isMaximized);\n    }\n    clearMaximizebleListeners() {\n        if (this.maximizeListeners.length) {\n            this.maximizeListeners.forEach(destroyListener => destroyListener());\n            this.maximizeListeners.length = 0;\n        }\n        if (this.resizeListenerDestroy) {\n            this.resizeListenerDestroy();\n            this.resizeListenerDestroy = null;\n        }\n    }\n    destroy() {\n        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);\n        this.clearMaximizebleListeners();\n        super.destroy();\n    }\n    setResizable(resizable) {\n        this.positionableFeature.setResizable(resizable);\n    }\n    setMovable(movable) {\n        this.positionableFeature.setMovable(movable, this.eTitleBar);\n    }\n    setMaximizable(maximizable) {\n        if (!maximizable) {\n            this.clearMaximizebleListeners();\n            if (this.maximizeButtonComp) {\n                this.destroyBean(this.maximizeButtonComp);\n                this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;\n            }\n            return;\n        }\n        const eTitleBar = this.eTitleBar;\n        if (!eTitleBar || maximizable === this.isMaximizable) {\n            return;\n        }\n        const maximizeButtonComp = this.buildMaximizeAndMinimizeElements();\n        this.refreshMaximizeIcon();\n        maximizeButtonComp.addManagedListener(maximizeButtonComp.getGui(), 'click', this.toggleMaximize.bind(this));\n        this.addTitleBarButton(maximizeButtonComp, 0);\n        this.maximizeListeners.push(this.addManagedListener(eTitleBar, 'dblclick', this.toggleMaximize.bind(this)));\n        this.resizeListenerDestroy = this.addManagedListener(this, 'resize', () => {\n            this.isMaximized = false;\n            this.refreshMaximizeIcon();\n        });\n    }\n    buildMaximizeAndMinimizeElements() {\n        const maximizeButtonComp = this.maximizeButtonComp =\n            this.createBean(new Component(/* html */ `<div class=\"ag-dialog-button\"></span>`));\n        const eGui = maximizeButtonComp.getGui();\n        this.maximizeIcon = createIconNoSpan('maximize', this.gridOptionsService);\n        eGui.appendChild(this.maximizeIcon);\n        this.maximizeIcon.classList.add('ag-panel-title-bar-button-icon');\n        this.minimizeIcon = createIconNoSpan('minimize', this.gridOptionsService);\n        eGui.appendChild(this.minimizeIcon);\n        this.minimizeIcon.classList.add('ag-panel-title-bar-button-icon');\n        return maximizeButtonComp;\n    }\n}\n__decorate([\n    Autowired('popupService')\n], AgDialog.prototype, \"popupService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar PopupService_1;\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from '../events.mjs';\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { getAbsoluteHeight, getAbsoluteWidth, getElementRectWithOffset } from '../utils/dom.mjs';\nimport { last } from '../utils/array.mjs';\nimport { isElementInEventPath, isStopPropagationForAgGrid } from '../utils/event.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { AgPromise } from \"../utils/index.mjs\";\nimport { setAriaLabel, setAriaRole } from \"../utils/aria.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nvar DIRECTION;\n(function (DIRECTION) {\n    DIRECTION[DIRECTION[\"vertical\"] = 0] = \"vertical\";\n    DIRECTION[DIRECTION[\"horizontal\"] = 1] = \"horizontal\";\n})(DIRECTION || (DIRECTION = {}));\nlet instanceIdSeq = 0;\nlet PopupService = PopupService_1 = class PopupService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.popupList = [];\n    }\n    postConstruct() {\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.handleThemeChange.bind(this));\n    }\n    getPopupParent() {\n        const ePopupParent = this.gridOptionsService.get('popupParent');\n        if (ePopupParent) {\n            return ePopupParent;\n        }\n        return this.gridCtrl.getGui();\n    }\n    positionPopupForMenu(params) {\n        const { eventSource, ePopup } = params;\n        const popupIdx = this.getPopupIndex(ePopup);\n        if (popupIdx !== -1) {\n            const popup = this.popupList[popupIdx];\n            popup.alignedToElement = eventSource;\n        }\n        const sourceRect = eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect();\n        const y = this.keepXYWithinBounds(ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);\n        const minWidth = (ePopup.clientWidth > 0) ? ePopup.clientWidth : 200;\n        ePopup.style.minWidth = `${minWidth}px`;\n        const widthOfParent = parentRect.right - parentRect.left;\n        const maxX = widthOfParent - minWidth;\n        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup\n        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,\n        // we try place it first to the left, and then if not to the right.\n        let x;\n        if (this.gridOptionsService.get('enableRtl')) {\n            // for RTL, try left first\n            x = xLeftPosition();\n            if (x < 0) {\n                x = xRightPosition();\n                this.setAlignedStyles(ePopup, 'left');\n            }\n            if (x > maxX) {\n                x = 0;\n                this.setAlignedStyles(ePopup, 'right');\n            }\n        }\n        else {\n            // for LTR, try right first\n            x = xRightPosition();\n            if (x > maxX) {\n                x = xLeftPosition();\n                this.setAlignedStyles(ePopup, 'right');\n            }\n            if (x < 0) {\n                x = 0;\n                this.setAlignedStyles(ePopup, 'left');\n            }\n        }\n        ePopup.style.left = `${x}px`;\n        ePopup.style.top = `${y}px`;\n        function xRightPosition() {\n            return sourceRect.right - parentRect.left - 2;\n        }\n        function xLeftPosition() {\n            return sourceRect.left - parentRect.left - minWidth;\n        }\n    }\n    positionPopupUnderMouseEvent(params) {\n        const { ePopup, nudgeX, nudgeY, skipObserver } = params;\n        this.positionPopup({\n            ePopup: ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds: true,\n            skipObserver,\n            updatePosition: () => this.calculatePointerAlign(params.mouseEvent),\n            postProcessCallback: () => this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode)\n        });\n    }\n    calculatePointerAlign(e) {\n        const parentRect = this.getParentRect();\n        return {\n            x: e.clientX - parentRect.left,\n            y: e.clientY - parentRect.top\n        };\n    }\n    positionPopupByComponent(params) {\n        const { ePopup, nudgeX, nudgeY, keepWithinBounds, eventSource, alignSide = 'left', position = 'over', column, rowNode, type } = params;\n        const sourceRect = eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect();\n        const popupIdx = this.getPopupIndex(ePopup);\n        if (popupIdx !== -1) {\n            const popup = this.popupList[popupIdx];\n            popup.alignedToElement = eventSource;\n        }\n        const updatePosition = () => {\n            let x = sourceRect.left - parentRect.left;\n            if (alignSide === 'right') {\n                x -= (ePopup.offsetWidth - sourceRect.width);\n            }\n            let y;\n            if (position === 'over') {\n                y = (sourceRect.top - parentRect.top);\n                this.setAlignedStyles(ePopup, 'over');\n            }\n            else {\n                this.setAlignedStyles(ePopup, 'under');\n                const alignSide = this.shouldRenderUnderOrAbove(ePopup, sourceRect, parentRect, params.nudgeY || 0);\n                if (alignSide === 'under') {\n                    y = (sourceRect.top - parentRect.top + sourceRect.height);\n                }\n                else {\n                    y = (sourceRect.top - ePopup.offsetHeight - (nudgeY || 0) * 2) - parentRect.top;\n                }\n            }\n            return { x, y };\n        };\n        this.positionPopup({\n            ePopup,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds,\n            updatePosition,\n            postProcessCallback: () => this.callPostProcessPopup(type, ePopup, eventSource, null, column, rowNode)\n        });\n    }\n    shouldRenderUnderOrAbove(ePopup, targetCompRect, parentRect, nudgeY) {\n        const spaceAvailableUnder = parentRect.bottom - targetCompRect.bottom;\n        const spaceAvailableAbove = targetCompRect.top - parentRect.top;\n        const spaceRequired = ePopup.offsetHeight + nudgeY;\n        if (spaceAvailableUnder > spaceRequired) {\n            return 'under';\n        }\n        if (spaceAvailableAbove > spaceRequired || spaceAvailableAbove > spaceAvailableUnder) {\n            return 'above';\n        }\n        return 'under';\n    }\n    setAlignedStyles(ePopup, positioned) {\n        const popupIdx = this.getPopupIndex(ePopup);\n        if (popupIdx === -1) {\n            return;\n        }\n        const popup = this.popupList[popupIdx];\n        const { alignedToElement } = popup;\n        if (!alignedToElement) {\n            return;\n        }\n        const positions = ['right', 'left', 'over', 'above', 'under'];\n        positions.forEach(position => {\n            alignedToElement.classList.remove(`ag-has-popup-positioned-${position}`);\n            ePopup.classList.remove(`ag-popup-positioned-${position}`);\n        });\n        if (!positioned) {\n            return;\n        }\n        alignedToElement.classList.add(`ag-has-popup-positioned-${positioned}`);\n        ePopup.classList.add(`ag-popup-positioned-${positioned}`);\n    }\n    callPostProcessPopup(type, ePopup, eventSource, mouseEvent, column, rowNode) {\n        const callback = this.gridOptionsService.getCallback('postProcessPopup');\n        if (callback) {\n            const params = {\n                column: column,\n                rowNode: rowNode,\n                ePopup: ePopup,\n                type: type,\n                eventSource: eventSource,\n                mouseEvent: mouseEvent\n            };\n            callback(params);\n        }\n    }\n    positionPopup(params) {\n        const { ePopup, keepWithinBounds, nudgeX, nudgeY, skipObserver, updatePosition } = params;\n        const lastSize = { width: 0, height: 0 };\n        const updatePopupPosition = (fromResizeObserver = false) => {\n            let { x, y } = updatePosition();\n            if (fromResizeObserver &&\n                ePopup.clientWidth === lastSize.width &&\n                ePopup.clientHeight === lastSize.height) {\n                return;\n            }\n            lastSize.width = ePopup.clientWidth;\n            lastSize.height = ePopup.clientHeight;\n            if (nudgeX) {\n                x += nudgeX;\n            }\n            if (nudgeY) {\n                y += nudgeY;\n            }\n            // if popup is overflowing to the bottom, move it up\n            if (keepWithinBounds) {\n                x = this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);\n                y = this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);\n            }\n            ePopup.style.left = `${x}px`;\n            ePopup.style.top = `${y}px`;\n            if (params.postProcessCallback) {\n                params.postProcessCallback();\n            }\n        };\n        updatePopupPosition();\n        // Mouse tracking will recalculate positioning when moving, so won't need to recalculate here\n        if (!skipObserver) {\n            // Since rendering popup contents can be asynchronous, use a resize observer to\n            // reposition the popup after initial updates to the size of the contents\n            const resizeObserverDestroyFunc = this.resizeObserverService.observeResize(ePopup, () => updatePopupPosition(true));\n            // Only need to reposition when first open, so can clean up after a bit of time\n            setTimeout(() => resizeObserverDestroyFunc(), PopupService_1.WAIT_FOR_POPUP_CONTENT_RESIZE);\n        }\n    }\n    getActivePopups() {\n        return this.popupList.map((popup) => popup.element);\n    }\n    getPopupList() {\n        return this.popupList;\n    }\n    getParentRect() {\n        // subtract the popup parent borders, because popupParent.getBoundingClientRect\n        // returns the rect outside the borders, but the 0,0 coordinate for absolute\n        // positioning is inside the border, leading the popup to be off by the width\n        // of the border\n        const eDocument = this.gridOptionsService.getDocument();\n        let popupParent = this.getPopupParent();\n        if (popupParent === eDocument.body) {\n            popupParent = eDocument.documentElement;\n        }\n        else if (getComputedStyle(popupParent).position === 'static') {\n            popupParent = popupParent.offsetParent;\n        }\n        return getElementRectWithOffset(popupParent);\n    }\n    keepXYWithinBounds(ePopup, position, direction) {\n        const isVertical = direction === DIRECTION.vertical;\n        const sizeProperty = isVertical ? 'clientHeight' : 'clientWidth';\n        const anchorProperty = isVertical ? 'top' : 'left';\n        const offsetProperty = isVertical ? 'offsetHeight' : 'offsetWidth';\n        const scrollPositionProperty = isVertical ? 'scrollTop' : 'scrollLeft';\n        const eDocument = this.gridOptionsService.getDocument();\n        const docElement = eDocument.documentElement;\n        const popupParent = this.getPopupParent();\n        const parentRect = popupParent.getBoundingClientRect();\n        const documentRect = eDocument.documentElement.getBoundingClientRect();\n        const isBody = popupParent === eDocument.body;\n        const offsetSize = ePopup[offsetProperty];\n        const getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;\n        let sizeOfParent = isBody ? (getSize(docElement) + docElement[scrollPositionProperty]) : popupParent[sizeProperty];\n        if (isBody) {\n            sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);\n        }\n        const max = sizeOfParent - offsetSize;\n        return Math.min(Math.max(position, 0), Math.abs(max));\n    }\n    addPopup(params) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const { eChild, ariaLabel, alwaysOnTop, positionCallback, anchorToElement } = params;\n        if (!eDocument) {\n            console.warn('AG Grid: could not find the document, document is empty');\n            return { hideFunc: () => { } };\n        }\n        const pos = this.getPopupIndex(eChild);\n        if (pos !== -1) {\n            const popup = this.popupList[pos];\n            return { hideFunc: popup.hideFunc };\n        }\n        this.initialisePopupPosition(eChild);\n        const wrapperEl = this.createPopupWrapper(eChild, ariaLabel, !!alwaysOnTop);\n        const removeListeners = this.addEventListenersToPopup(Object.assign(Object.assign({}, params), { wrapperEl }));\n        if (positionCallback) {\n            positionCallback();\n        }\n        this.addPopupToPopupList(eChild, wrapperEl, removeListeners, anchorToElement);\n        return {\n            hideFunc: removeListeners\n        };\n    }\n    initialisePopupPosition(element) {\n        const ePopupParent = this.getPopupParent();\n        const ePopupParentRect = ePopupParent.getBoundingClientRect();\n        if (!exists(element.style.top)) {\n            element.style.top = `${ePopupParentRect.top * -1}px`;\n        }\n        if (!exists(element.style.left)) {\n            element.style.left = `${ePopupParentRect.left * -1}px`;\n        }\n    }\n    createPopupWrapper(element, ariaLabel, alwaysOnTop) {\n        const ePopupParent = this.getPopupParent();\n        // add env CSS class to child, in case user provided a popup parent, which means\n        // theme class may be missing\n        const eWrapper = document.createElement('div');\n        const { allThemes } = this.environment.getTheme();\n        if (allThemes.length) {\n            eWrapper.classList.add(...allThemes);\n        }\n        eWrapper.classList.add('ag-popup');\n        element.classList.add(this.gridOptionsService.get('enableRtl') ? 'ag-rtl' : 'ag-ltr', 'ag-popup-child');\n        if (!element.hasAttribute('role')) {\n            setAriaRole(element, 'dialog');\n        }\n        setAriaLabel(element, ariaLabel);\n        eWrapper.appendChild(element);\n        ePopupParent.appendChild(eWrapper);\n        if (alwaysOnTop) {\n            this.setAlwaysOnTop(element, true);\n        }\n        else {\n            this.bringPopupToFront(element);\n        }\n        return eWrapper;\n    }\n    handleThemeChange() {\n        const { allThemes } = this.environment.getTheme();\n        for (const popup of this.popupList) {\n            for (const className of Array.from(popup.wrapper.classList)) {\n                if (className.startsWith(\"ag-theme-\")) {\n                    popup.wrapper.classList.remove(className);\n                }\n            }\n            if (allThemes.length) {\n                popup.wrapper.classList.add(...allThemes);\n            }\n        }\n    }\n    addEventListenersToPopup(params) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const ePopupParent = this.getPopupParent();\n        const { wrapperEl, eChild: popupEl, click: pointerEvent, closedCallback, afterGuiAttached, closeOnEsc, modal } = params;\n        let popupHidden = false;\n        const hidePopupOnKeyboardEvent = (event) => {\n            if (!wrapperEl.contains(eDocument.activeElement)) {\n                return;\n            }\n            const key = event.key;\n            if (key === KeyCode.ESCAPE && !isStopPropagationForAgGrid(event)) {\n                removeListeners({ keyboardEvent: event });\n            }\n        };\n        const hidePopupOnMouseEvent = (event) => removeListeners({ mouseEvent: event });\n        const hidePopupOnTouchEvent = (event) => removeListeners({ touchEvent: event });\n        const removeListeners = (popupParams = {}) => {\n            const { mouseEvent, touchEvent, keyboardEvent } = popupParams;\n            if (\n            // we don't hide popup if the event was on the child, or any\n            // children of this child\n            this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, popupEl) ||\n                // this method should only be called once. the client can have different\n                // paths, each one wanting to close, so this method may be called multiple times.\n                popupHidden) {\n                return;\n            }\n            popupHidden = true;\n            ePopupParent.removeChild(wrapperEl);\n            eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);\n            eDocument.removeEventListener('mousedown', hidePopupOnMouseEvent);\n            eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);\n            eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);\n            this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);\n            if (closedCallback) {\n                closedCallback(mouseEvent || touchEvent || keyboardEvent);\n            }\n            this.removePopupFromPopupList(popupEl);\n        };\n        if (afterGuiAttached) {\n            afterGuiAttached({ hidePopup: removeListeners });\n        }\n        // if we add these listeners now, then the current mouse\n        // click will be included, which we don't want\n        window.setTimeout(() => {\n            if (closeOnEsc) {\n                eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);\n            }\n            if (modal) {\n                eDocument.addEventListener('mousedown', hidePopupOnMouseEvent);\n                this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);\n                eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);\n                eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);\n            }\n        }, 0);\n        return removeListeners;\n    }\n    addPopupToPopupList(element, wrapperEl, removeListeners, anchorToElement) {\n        this.popupList.push({\n            element: element,\n            wrapper: wrapperEl,\n            hideFunc: removeListeners,\n            instanceId: instanceIdSeq++,\n            isAnchored: !!anchorToElement\n        });\n        if (anchorToElement) {\n            this.setPopupPositionRelatedToElement(element, anchorToElement);\n        }\n    }\n    getPopupIndex(el) {\n        return this.popupList.findIndex(p => p.element === el);\n    }\n    setPopupPositionRelatedToElement(popupEl, relativeElement) {\n        const popupIndex = this.getPopupIndex(popupEl);\n        if (popupIndex === -1) {\n            return;\n        }\n        const popup = this.popupList[popupIndex];\n        if (popup.stopAnchoringPromise) {\n            popup.stopAnchoringPromise.then(destroyFunc => destroyFunc && destroyFunc());\n        }\n        popup.stopAnchoringPromise = undefined;\n        popup.isAnchored = false;\n        if (!relativeElement) {\n            return;\n        }\n        // keeps popup positioned under created, eg if context menu, if user scrolls\n        // using touchpad and the cell moves, it moves the popup to keep it with the cell.\n        const destroyPositionTracker = this.keepPopupPositionedRelativeTo({\n            element: relativeElement,\n            ePopup: popupEl,\n            hidePopup: popup.hideFunc\n        });\n        popup.stopAnchoringPromise = destroyPositionTracker;\n        popup.isAnchored = true;\n        return destroyPositionTracker;\n    }\n    removePopupFromPopupList(element) {\n        this.setAlignedStyles(element, null);\n        this.setPopupPositionRelatedToElement(element, null);\n        this.popupList = this.popupList.filter(p => p.element !== element);\n    }\n    keepPopupPositionedRelativeTo(params) {\n        const eParent = this.getPopupParent();\n        const parentRect = eParent.getBoundingClientRect();\n        const { element, ePopup } = params;\n        const sourceRect = element.getBoundingClientRect();\n        const initialDiffTop = parentRect.top - sourceRect.top;\n        const initialDiffLeft = parentRect.left - sourceRect.left;\n        let lastDiffTop = initialDiffTop;\n        let lastDiffLeft = initialDiffLeft;\n        const topPx = ePopup.style.top;\n        const top = parseInt(topPx.substring(0, topPx.length - 1), 10);\n        const leftPx = ePopup.style.left;\n        const left = parseInt(leftPx.substring(0, leftPx.length - 1), 10);\n        return new AgPromise(resolve => {\n            this.getFrameworkOverrides().setInterval(() => {\n                const pRect = eParent.getBoundingClientRect();\n                const sRect = element.getBoundingClientRect();\n                const elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;\n                if (elementNotInDom) {\n                    params.hidePopup();\n                    return;\n                }\n                const currentDiffTop = pRect.top - sRect.top;\n                if (currentDiffTop != lastDiffTop) {\n                    const newTop = this.keepXYWithinBounds(ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);\n                    ePopup.style.top = `${newTop}px`;\n                }\n                lastDiffTop = currentDiffTop;\n                const currentDiffLeft = pRect.left - sRect.left;\n                if (currentDiffLeft != lastDiffLeft) {\n                    const newLeft = this.keepXYWithinBounds(ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);\n                    ePopup.style.left = `${newLeft}px`;\n                }\n                lastDiffLeft = currentDiffLeft;\n            }, 200).then(intervalId => {\n                const result = () => {\n                    if (intervalId != null) {\n                        window.clearInterval(intervalId);\n                    }\n                };\n                resolve(result);\n            });\n        });\n    }\n    hasAnchoredPopup() {\n        return this.popupList.some(popup => popup.isAnchored);\n    }\n    isEventFromCurrentPopup(params, target) {\n        const { mouseEvent, touchEvent } = params;\n        const event = mouseEvent ? mouseEvent : touchEvent;\n        if (!event) {\n            return false;\n        }\n        const indexOfThisChild = this.getPopupIndex(target);\n        if (indexOfThisChild === -1) {\n            return false;\n        }\n        for (let i = indexOfThisChild; i < this.popupList.length; i++) {\n            const popup = this.popupList[i];\n            if (isElementInEventPath(popup.element, event)) {\n                return true;\n            }\n        }\n        // if the user did not write their own Custom Element to be rendered as popup\n        // and this component has an additional popup element, they should have the\n        // `ag-custom-component-popup` class to be detected as part of the Custom Component\n        return this.isElementWithinCustomPopup(event.target);\n    }\n    isElementWithinCustomPopup(el) {\n        const eDocument = this.gridOptionsService.getDocument();\n        while (el && el !== eDocument.body) {\n            if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {\n                return true;\n            }\n            el = el.parentElement;\n        }\n        return false;\n    }\n    getWrapper(ePopup) {\n        while (!ePopup.classList.contains('ag-popup') && ePopup.parentElement) {\n            ePopup = ePopup.parentElement;\n        }\n        return ePopup.classList.contains('ag-popup') ? ePopup : null;\n    }\n    setAlwaysOnTop(ePopup, alwaysOnTop) {\n        const eWrapper = this.getWrapper(ePopup);\n        if (!eWrapper) {\n            return;\n        }\n        eWrapper.classList.toggle('ag-always-on-top', !!alwaysOnTop);\n        if (alwaysOnTop) {\n            this.bringPopupToFront(eWrapper);\n        }\n    }\n    bringPopupToFront(ePopup) {\n        const parent = this.getPopupParent();\n        const popupList = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup'));\n        const popupLen = popupList.length;\n        const alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup.ag-always-on-top'));\n        const onTopLength = alwaysOnTopList.length;\n        const eWrapper = this.getWrapper(ePopup);\n        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {\n            return;\n        }\n        const pos = popupList.indexOf(eWrapper);\n        const innerEls = eWrapper.querySelectorAll('div');\n        const innerElsScrollMap = [];\n        innerEls.forEach(el => {\n            if (el.scrollTop !== 0) {\n                innerElsScrollMap.push([el, el.scrollTop]);\n            }\n        });\n        if (onTopLength) {\n            const isPopupAlwaysOnTop = eWrapper.classList.contains('ag-always-on-top');\n            if (isPopupAlwaysOnTop) {\n                if (pos !== popupLen - 1) {\n                    last(alwaysOnTopList).insertAdjacentElement('afterend', eWrapper);\n                }\n            }\n            else if (pos !== popupLen - onTopLength - 1) {\n                alwaysOnTopList[0].insertAdjacentElement('beforebegin', eWrapper);\n            }\n        }\n        else if (pos !== popupLen - 1) {\n            last(popupList).insertAdjacentElement('afterend', eWrapper);\n        }\n        while (innerElsScrollMap.length) {\n            const currentEl = innerElsScrollMap.pop();\n            currentEl[0].scrollTop = currentEl[1];\n        }\n        const params = {\n            type: 'popupToFront',\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            eWrapper\n        };\n        this.eventService.dispatchEvent(params);\n    }\n};\nPopupService.WAIT_FOR_POPUP_CONTENT_RESIZE = 200;\n__decorate([\n    Autowired('focusService')\n], PopupService.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], PopupService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('resizeObserverService')\n], PopupService.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    PostConstruct\n], PopupService.prototype, \"postConstruct\", null);\nPopupService = PopupService_1 = __decorate([\n    Bean('popupService')\n], PopupService);\nexport { PopupService };\n","import { escapeString } from \"../utils/string.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nimport { Component } from \"./component.mjs\";\nexport class AgAutocompleteRow extends Component {\n    constructor() {\n        super(/* html */ `\n        <div class=\"ag-autocomplete-row\" role=\"presentation\">\n            <div class=\"ag-autocomplete-row-label\"></div>\n        </div>`);\n        this.hasHighlighting = false;\n    }\n    setState(value, selected) {\n        this.value = value;\n        this.render();\n        this.updateSelected(selected);\n    }\n    updateSelected(selected) {\n        this.addOrRemoveCssClass('ag-autocomplete-row-selected', selected);\n    }\n    setSearchString(searchString) {\n        var _a;\n        let keepHighlighting = false;\n        if (exists(searchString)) {\n            const index = (_a = this.value) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().indexOf(searchString.toLocaleLowerCase());\n            if (index >= 0) {\n                keepHighlighting = true;\n                this.hasHighlighting = true;\n                const highlightEndIndex = index + searchString.length;\n                const startPart = escapeString(this.value.slice(0, index));\n                const highlightedPart = escapeString(this.value.slice(index, highlightEndIndex));\n                const endPart = escapeString(this.value.slice(highlightEndIndex));\n                this.getGui().lastElementChild.innerHTML = `${startPart}<b>${highlightedPart}</b>${endPart}`;\n            }\n        }\n        if (!keepHighlighting && this.hasHighlighting) {\n            this.hasHighlighting = false;\n            this.render();\n        }\n    }\n    render() {\n        var _a;\n        // putting in blank if missing, so at least the user can click on it\n        this.getGui().lastElementChild.innerHTML = (_a = escapeString(this.value)) !== null && _a !== void 0 ? _a : '&nbsp;';\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { RefSelector } from \"./componentAnnotations.mjs\";\nimport { VirtualList } from \"./virtualList.mjs\";\nimport { KeyCode } from \"../constants/keyCode.mjs\";\nimport { AgAutocompleteRow } from \"./agAutocompleteRow.mjs\";\nimport { fuzzySuggestions } from \"../utils/fuzzyMatch.mjs\";\nimport { PopupComponent } from \"./popupComponent.mjs\";\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nexport class AgAutocompleteList extends PopupComponent {\n    constructor(params) {\n        super(AgAutocompleteList.TEMPLATE);\n        this.params = params;\n        this.searchString = '';\n    }\n    destroy() {\n        super.destroy();\n    }\n    init() {\n        this.autocompleteEntries = this.params.autocompleteEntries;\n        this.virtualList = this.createManagedBean(new VirtualList({ cssIdentifier: 'autocomplete' }));\n        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));\n        this.eList.appendChild(this.virtualList.getGui());\n        this.virtualList.setModel({\n            getRowCount: () => this.autocompleteEntries.length,\n            getRow: (index) => this.autocompleteEntries[index]\n        });\n        const virtualListGui = this.virtualList.getGui();\n        this.addManagedListener(virtualListGui, 'click', () => this.params.onConfirmed());\n        this.addManagedListener(virtualListGui, 'mousemove', this.onMouseMove.bind(this));\n        this.addManagedListener(virtualListGui, 'mousedown', (e) => e.preventDefault());\n        this.setSelectedValue(0);\n    }\n    onNavigationKeyDown(event, key) {\n        // if we don't preventDefault the page body and/or grid scroll will move.\n        event.preventDefault();\n        const oldIndex = this.autocompleteEntries.indexOf(this.selectedValue);\n        const newIndex = key === KeyCode.UP ? oldIndex - 1 : oldIndex + 1;\n        this.checkSetSelectedValue(newIndex);\n    }\n    setSearch(searchString) {\n        this.searchString = searchString;\n        if (exists(searchString)) {\n            this.runSearch();\n        }\n        else {\n            // reset\n            this.autocompleteEntries = this.params.autocompleteEntries;\n            this.virtualList.refresh();\n            this.checkSetSelectedValue(0);\n        }\n        this.updateSearchInList();\n    }\n    runContainsSearch(searchString, searchStrings) {\n        let topMatch;\n        let topMatchStartsWithSearchString = false;\n        const lowerCaseSearchString = searchString.toLocaleLowerCase();\n        const allMatches = searchStrings.filter(string => {\n            const lowerCaseString = string.toLocaleLowerCase();\n            const index = lowerCaseString.indexOf(lowerCaseSearchString);\n            const startsWithSearchString = index === 0;\n            const isMatch = index >= 0;\n            // top match is shortest value that starts with the search string, otherwise shortest value that includes the search string\n            if (isMatch && (!topMatch ||\n                (!topMatchStartsWithSearchString && startsWithSearchString) ||\n                (topMatchStartsWithSearchString === startsWithSearchString && string.length < topMatch.length))) {\n                topMatch = string;\n                topMatchStartsWithSearchString = startsWithSearchString;\n            }\n            return isMatch;\n        });\n        if (!topMatch && allMatches.length) {\n            topMatch = allMatches[0];\n        }\n        return { topMatch, allMatches };\n    }\n    runSearch() {\n        var _a, _b;\n        const { autocompleteEntries } = this.params;\n        const searchStrings = autocompleteEntries.map(v => { var _a; return (_a = v.displayValue) !== null && _a !== void 0 ? _a : v.key; });\n        let matchingStrings;\n        let topSuggestion;\n        if (this.params.useFuzzySearch) {\n            matchingStrings = fuzzySuggestions(this.searchString, searchStrings, true).values;\n            topSuggestion = matchingStrings.length ? matchingStrings[0] : undefined;\n        }\n        else {\n            const containsMatches = this.runContainsSearch(this.searchString, searchStrings);\n            matchingStrings = containsMatches.allMatches;\n            topSuggestion = containsMatches.topMatch;\n        }\n        let filteredEntries = autocompleteEntries.filter(({ key, displayValue }) => matchingStrings.includes(displayValue !== null && displayValue !== void 0 ? displayValue : key));\n        if (!filteredEntries.length && this.selectedValue && ((_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.forceLastSelection) === null || _b === void 0 ? void 0 : _b.call(_a, this.selectedValue, this.searchString))) {\n            filteredEntries = [this.selectedValue];\n        }\n        this.autocompleteEntries = filteredEntries;\n        this.virtualList.refresh();\n        if (!topSuggestion) {\n            return;\n        }\n        const topSuggestionIndex = matchingStrings.indexOf(topSuggestion);\n        this.checkSetSelectedValue(topSuggestionIndex);\n    }\n    updateSearchInList() {\n        this.virtualList.forEachRenderedRow((row) => row.setSearchString(this.searchString));\n    }\n    checkSetSelectedValue(index) {\n        if (index >= 0 && index < this.autocompleteEntries.length) {\n            this.setSelectedValue(index);\n        }\n    }\n    setSelectedValue(index) {\n        const value = this.autocompleteEntries[index];\n        if (this.selectedValue === value) {\n            return;\n        }\n        this.selectedValue = value;\n        this.virtualList.ensureIndexVisible(index);\n        this.virtualList.forEachRenderedRow((cmp, idx) => {\n            cmp.updateSelected(index === idx);\n        });\n    }\n    createRowComponent(value) {\n        var _a;\n        const row = new AgAutocompleteRow();\n        this.getContext().createBean(row);\n        row.setState((_a = value.displayValue) !== null && _a !== void 0 ? _a : value.key, value === this.selectedValue);\n        return row;\n    }\n    onMouseMove(mouseEvent) {\n        const rect = this.virtualList.getGui().getBoundingClientRect();\n        const scrollTop = this.virtualList.getScrollTop();\n        const mouseY = mouseEvent.clientY - rect.top + scrollTop;\n        const row = Math.floor(mouseY / this.virtualList.getRowHeight());\n        this.checkSetSelectedValue(row);\n    }\n    afterGuiAttached() {\n        this.virtualList.refresh();\n    }\n    getSelectedValue() {\n        var _a;\n        if (!this.autocompleteEntries.length) {\n            return null;\n        }\n        ;\n        return (_a = this.selectedValue) !== null && _a !== void 0 ? _a : null;\n    }\n}\nAgAutocompleteList.TEMPLATE = `<div class=\"ag-autocomplete-list-popup\">\n            <div ref=\"eList\" class=\"ag-autocomplete-list\"></div>\n        <div>`;\n__decorate([\n    RefSelector('eList')\n], AgAutocompleteList.prototype, \"eList\", void 0);\n__decorate([\n    PostConstruct\n], AgAutocompleteList.prototype, \"init\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"./component.mjs\";\nimport { RefSelector } from \"./componentAnnotations.mjs\";\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { AgAutocompleteList } from \"./agAutocompleteList.mjs\";\nimport { KeyCode } from \"../constants/keyCode.mjs\";\nimport { makeNull } from \"../utils/generic.mjs\";\nexport class AgAutocomplete extends Component {\n    constructor() {\n        super(/* html */ `\n            <div class=\"ag-autocomplete\" role=\"presentation\">\n                <ag-input-text-field ref=\"eAutocompleteInput\"></ag-input-text-field>\n            </div>`);\n        this.isListOpen = false;\n        this.lastPosition = 0;\n        this.valid = true;\n    }\n    postConstruct() {\n        this.eAutocompleteInput.onValueChange(value => this.onValueChanged(value));\n        this.eAutocompleteInput.getInputElement().setAttribute('autocomplete', 'off');\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n        this.addGuiEventListener('click', this.updatePositionAndList.bind(this));\n        this.addDestroyFunc(() => {\n            this.destroyBean(this.autocompleteList);\n        });\n        this.addGuiEventListener('focusout', () => this.onFocusOut());\n    }\n    onValueChanged(value) {\n        const parsedValue = makeNull(value);\n        this.updateValue(parsedValue);\n        this.updateAutocompleteList(parsedValue);\n    }\n    updateValue(value) {\n        this.updateLastPosition();\n        this.dispatchEvent({\n            type: AgAutocomplete.EVENT_VALUE_CHANGED,\n            value\n        });\n        this.validate(value);\n    }\n    updateAutocompleteList(value) {\n        var _a, _b, _c, _d;\n        const autocompleteListParams = (_b = (_a = this.listGenerator) === null || _a === void 0 ? void 0 : _a.call(this, value, this.lastPosition)) !== null && _b !== void 0 ? _b : { enabled: false };\n        if (!autocompleteListParams.type || autocompleteListParams.type !== ((_c = this.autocompleteListParams) === null || _c === void 0 ? void 0 : _c.type)) {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n        this.autocompleteListParams = autocompleteListParams;\n        if ((_d = this.autocompleteListParams) === null || _d === void 0 ? void 0 : _d.enabled) {\n            if (!this.isListOpen) {\n                this.openList();\n            }\n            const { searchString } = this.autocompleteListParams;\n            this.autocompleteList.setSearch(searchString !== null && searchString !== void 0 ? searchString : '');\n        }\n        else {\n            if (this.isListOpen) {\n                this.closeList();\n            }\n        }\n    }\n    onKeyDown(event) {\n        const key = event.key;\n        this.updateLastPosition();\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                this.onUpDownKeyDown(event, key);\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // input position is updated after this is called, so do async\n                setTimeout(() => {\n                    this.updatePositionAndList();\n                });\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.SPACE:\n                if (event.ctrlKey && !this.isListOpen) {\n                    event.preventDefault();\n                    this.forceOpenList();\n                }\n                break;\n        }\n    }\n    confirmSelection() {\n        var _a;\n        const selectedValue = (_a = this.autocompleteList) === null || _a === void 0 ? void 0 : _a.getSelectedValue();\n        if (selectedValue) {\n            this.closeList();\n            this.dispatchEvent({\n                type: AgAutocomplete.EVENT_OPTION_SELECTED,\n                value: this.getValue(),\n                position: this.lastPosition,\n                updateEntry: selectedValue,\n                autocompleteType: this.autocompleteListParams.type\n            });\n        }\n    }\n    onTabKeyDown(event) {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.confirmSelection();\n        }\n    }\n    onEnterKeyDown(event) {\n        event.preventDefault();\n        if (this.isListOpen) {\n            this.confirmSelection();\n        }\n        else {\n            this.onCompleted();\n        }\n    }\n    onUpDownKeyDown(event, key) {\n        var _a;\n        event.preventDefault();\n        if (!this.isListOpen) {\n            this.forceOpenList();\n        }\n        else {\n            (_a = this.autocompleteList) === null || _a === void 0 ? void 0 : _a.onNavigationKeyDown(event, key);\n        }\n    }\n    onEscapeKeyDown(event) {\n        if (this.isListOpen) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.closeList();\n            this.setCaret(this.lastPosition, true);\n        }\n    }\n    onFocusOut() {\n        if (this.isListOpen) {\n            this.closeList();\n        }\n    }\n    updatePositionAndList() {\n        var _a;\n        this.updateLastPosition();\n        this.updateAutocompleteList((_a = this.eAutocompleteInput.getValue()) !== null && _a !== void 0 ? _a : null);\n    }\n    setCaret(position, setFocus) {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (setFocus && eDocument.activeElement === eDocument.body) {\n            // clicking on the list loses focus, so restore\n            this.eAutocompleteInput.getFocusableElement().focus();\n        }\n        const eInput = this.eAutocompleteInput.getInputElement();\n        eInput.setSelectionRange(position, position);\n        if (position === eInput.value.length) {\n            // ensure the caret is visible\n            eInput.scrollLeft = eInput.scrollWidth;\n        }\n    }\n    forceOpenList() {\n        this.onValueChanged(this.eAutocompleteInput.getValue());\n    }\n    updateLastPosition() {\n        var _a;\n        this.lastPosition = (_a = this.eAutocompleteInput.getInputElement().selectionStart) !== null && _a !== void 0 ? _a : 0;\n    }\n    validate(value) {\n        var _a;\n        if (!this.validator) {\n            return;\n        }\n        this.validationMessage = this.validator(value);\n        this.eAutocompleteInput.getInputElement().setCustomValidity((_a = this.validationMessage) !== null && _a !== void 0 ? _a : '');\n        this.valid = !this.validationMessage;\n        this.dispatchEvent({\n            type: AgAutocomplete.EVENT_VALID_CHANGED,\n            isValid: this.valid,\n            validationMessage: this.validationMessage\n        });\n    }\n    openList() {\n        this.isListOpen = true;\n        // this is unmanaged as it gets destroyed/created each time it is opened\n        this.autocompleteList = this.createBean(new AgAutocompleteList({\n            autocompleteEntries: this.autocompleteListParams.entries,\n            onConfirmed: () => this.confirmSelection(),\n            forceLastSelection: this.forceLastSelection\n        }));\n        const ePopupGui = this.autocompleteList.getGui();\n        const positionParams = {\n            ePopup: ePopupGui,\n            type: 'autocomplete',\n            eventSource: this.getGui(),\n            position: 'under',\n            alignSide: this.gridOptionsService.get('enableRtl') ? 'right' : 'left',\n            keepWithinBounds: true\n        };\n        const addPopupRes = this.popupService.addPopup({\n            eChild: ePopupGui,\n            anchorToElement: this.getGui(),\n            positionCallback: () => this.popupService.positionPopupByComponent(positionParams),\n            ariaLabel: this.listAriaLabel\n        });\n        this.hidePopup = addPopupRes.hideFunc;\n        this.autocompleteList.afterGuiAttached();\n    }\n    closeList() {\n        this.isListOpen = false;\n        this.hidePopup();\n        this.destroyBean(this.autocompleteList);\n        this.autocompleteList = null;\n    }\n    onCompleted() {\n        if (this.isListOpen) {\n            this.closeList();\n        }\n        this.dispatchEvent({\n            type: AgAutocomplete.EVENT_VALUE_CONFIRMED,\n            value: this.getValue(),\n            isValid: this.isValid()\n        });\n    }\n    getValue() {\n        return makeNull(this.eAutocompleteInput.getValue());\n    }\n    setInputPlaceholder(placeholder) {\n        this.eAutocompleteInput.setInputPlaceholder(placeholder);\n        return this;\n    }\n    setInputAriaLabel(label) {\n        this.eAutocompleteInput.setInputAriaLabel(label);\n        return this;\n    }\n    setListAriaLabel(label) {\n        this.listAriaLabel = label;\n        return this;\n    }\n    setListGenerator(listGenerator) {\n        this.listGenerator = listGenerator;\n        return this;\n    }\n    setValidator(validator) {\n        this.validator = validator;\n        return this;\n    }\n    isValid() {\n        return this.valid;\n    }\n    setValue(params) {\n        const { value, position, silent, updateListOnlyIfOpen, restoreFocus } = params;\n        this.eAutocompleteInput.setValue(value, true);\n        this.setCaret(position !== null && position !== void 0 ? position : this.lastPosition, restoreFocus);\n        if (!silent) {\n            this.updateValue(value);\n        }\n        if (!updateListOnlyIfOpen || this.isListOpen) {\n            this.updateAutocompleteList(value);\n        }\n    }\n    setForceLastSelection(forceLastSelection) {\n        this.forceLastSelection = forceLastSelection;\n        return this;\n    }\n    setInputDisabled(disabled) {\n        this.eAutocompleteInput.setDisabled(disabled);\n        return this;\n    }\n}\nAgAutocomplete.EVENT_VALUE_CHANGED = 'eventValueChanged';\nAgAutocomplete.EVENT_VALUE_CONFIRMED = 'eventValueConfirmed';\nAgAutocomplete.EVENT_OPTION_SELECTED = 'eventOptionSelected';\nAgAutocomplete.EVENT_VALID_CHANGED = 'eventValidChanged';\n__decorate([\n    Autowired('popupService')\n], AgAutocomplete.prototype, \"popupService\", void 0);\n__decorate([\n    RefSelector('eAutocompleteInput')\n], AgAutocomplete.prototype, \"eAutocompleteInput\", void 0);\n__decorate([\n    PostConstruct\n], AgAutocomplete.prototype, \"postConstruct\", null);\n","import { includes } from \"./utils/array.mjs\";\nimport { AgPromise } from \"./utils/index.mjs\";\nconst OUTSIDE_ANGULAR_EVENTS = ['mouseover', 'mouseout', 'mouseenter', 'mouseleave', 'mousemove'];\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */\nexport class VanillaFrameworkOverrides {\n    constructor(frameworkName = 'javascript') {\n        this.frameworkName = frameworkName;\n        this.renderingEngine = \"vanilla\";\n        this.isOutsideAngular = (eventType) => includes(OUTSIDE_ANGULAR_EVENTS, eventType);\n    }\n    // for Vanilla JS, we use simple timeout\n    setTimeout(action, timeout) {\n        window.setTimeout(action, timeout);\n    }\n    setInterval(action, timeout) {\n        return new AgPromise(resolve => {\n            resolve(window.setInterval(action, timeout));\n        });\n    }\n    // for Vanilla JS, we just add the event to the element\n    addEventListener(element, type, listener, useCapture) {\n        const isPassive = includes(PASSIVE_EVENTS, type);\n        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });\n    }\n    // for Vanilla JS, we just execute the listener\n    dispatchEvent(eventType, listener, global = false) {\n        listener();\n    }\n    frameworkComponent(name) {\n        return null;\n    }\n    isFrameworkComponent(comp) {\n        return false;\n    }\n    getDocLink(path) {\n        const framework = this.frameworkName === 'solid' ? 'react' : this.frameworkName;\n        return `https://www.ag-grid.com/${framework}-data-grid${path ? `/${path}` : ''}`;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { missing } from \"./utils/generic.mjs\";\nimport { last } from \"./utils/array.mjs\";\nimport { KeyCode } from './constants/keyCode.mjs';\nlet CellNavigationService = class CellNavigationService extends BeanStub {\n    // returns null if no cell to focus on, ie at the end of the grid\n    getNextCellToFocus(key, focusedCell, ctrlPressed = false) {\n        if (ctrlPressed) {\n            return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);\n        }\n        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);\n    }\n    getNextCellToFocusWithCtrlPressed(key, focusedCell) {\n        const upKey = key === KeyCode.UP;\n        const downKey = key === KeyCode.DOWN;\n        const leftKey = key === KeyCode.LEFT;\n        let column;\n        let rowIndex;\n        if (upKey || downKey) {\n            rowIndex = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();\n            column = focusedCell.column;\n        }\n        else {\n            const allColumns = this.columnModel.getAllDisplayedColumns();\n            const isRtl = this.gridOptionsService.get('enableRtl');\n            rowIndex = focusedCell.rowIndex;\n            column = leftKey !== isRtl ? allColumns[0] : last(allColumns);\n        }\n        return {\n            rowIndex,\n            rowPinned: null,\n            column\n        };\n    }\n    getNextCellToFocusWithoutCtrlPressed(key, focusedCell) {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        let pointer = focusedCell;\n        let finished = false;\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n            switch (key) {\n                case KeyCode.UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case KeyCode.DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case KeyCode.RIGHT:\n                    if (this.gridOptionsService.get('enableRtl')) {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case KeyCode.LEFT:\n                    if (this.gridOptionsService.get('enableRtl')) {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    console.warn('AG Grid: unknown key for navigation ' + key);\n                    break;\n            }\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            }\n            else {\n                finished = true;\n            }\n        }\n        return pointer;\n    }\n    isCellGoodToFocusOn(gridCell) {\n        const column = gridCell.column;\n        let rowNode;\n        switch (gridCell.rowPinned) {\n            case 'top':\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case 'bottom':\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n        if (!rowNode) {\n            return false;\n        }\n        const suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    }\n    getCellToLeft(lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        const colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);\n        if (!colToLeft) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned\n        };\n    }\n    getCellToRight(lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        const colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);\n        // if already on right, do nothing\n        if (!colToRight) {\n            return null;\n        }\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned\n        };\n    }\n    getRowBelow(rowPosition) {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case 'bottom':\n                    // never any rows after pinned bottom\n                    return null;\n                case 'top':\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };\n                    }\n                    if (this.pinnedRowModel.isRowsToRender('bottom')) {\n                        return { rowIndex: 0, rowPinned: 'bottom' };\n                    }\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender('bottom')) {\n                        return { rowIndex: 0, rowPinned: 'bottom' };\n                    }\n                    return null;\n            }\n        }\n        const rowNode = this.rowModel.getRow(rowPosition.rowIndex);\n        const nextStickyPosition = this.getNextStickyPosition(rowNode);\n        if (nextStickyPosition) {\n            return nextStickyPosition;\n        }\n        return { rowIndex: index + 1, rowPinned: pinned };\n    }\n    getNextStickyPosition(rowNode, up) {\n        if (!this.gridOptionsService.isGroupRowsSticky() || !rowNode || !rowNode.sticky) {\n            return;\n        }\n        const stickyRowCtrls = [...this.rowRenderer.getStickyTopRowCtrls()].sort((a, b) => a.getRowNode().rowIndex - b.getRowNode().rowIndex);\n        const diff = up ? -1 : 1;\n        const idx = stickyRowCtrls.findIndex(ctrl => ctrl.getRowNode().rowIndex === rowNode.rowIndex);\n        const nextCtrl = stickyRowCtrls[idx + diff];\n        if (nextCtrl) {\n            return { rowIndex: nextCtrl.getRowNode().rowIndex, rowPinned: null };\n        }\n    }\n    getCellBelow(lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        const rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned\n            };\n        }\n        return null;\n    }\n    isLastRowInContainer(rowPosition) {\n        const pinned = rowPosition.rowPinned;\n        const index = rowPosition.rowIndex;\n        if (pinned === 'top') {\n            const lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n            return lastTopIndex <= index;\n        }\n        if (pinned === 'bottom') {\n            const lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n            return lastBottomIndex <= index;\n        }\n        const lastBodyIndex = this.paginationProxy.getPageLastRow();\n        return lastBodyIndex <= index;\n    }\n    getRowAbove(rowPosition) {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        const isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();\n        // if already on top row, do nothing\n        if (isFirstRow) {\n            if (pinned === 'top') {\n                return null;\n            }\n            if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender('top')) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n            // last floating bottom\n            if (this.rowModel.isRowsToRender()) {\n                return this.getLastBodyCell();\n            }\n            if (this.pinnedRowModel.isRowsToRender('top')) {\n                return this.getLastFloatingTopRow();\n            }\n            return null;\n        }\n        const rowNode = this.rowModel.getRow(rowPosition.rowIndex);\n        const nextStickyPosition = this.getNextStickyPosition(rowNode, true);\n        if (nextStickyPosition) {\n            return nextStickyPosition;\n        }\n        return { rowIndex: index - 1, rowPinned: pinned };\n    }\n    getCellAbove(lastCell) {\n        if (!lastCell) {\n            return null;\n        }\n        const rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned\n            };\n        }\n        return null;\n    }\n    getLastBodyCell() {\n        const lastBodyRow = this.paginationProxy.getPageLastRow();\n        return { rowIndex: lastBodyRow, rowPinned: null };\n    }\n    getLastFloatingTopRow() {\n        const lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n        return { rowIndex: lastFloatingRow, rowPinned: 'top' };\n    }\n    getNextTabbedCell(gridCell, backwards) {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n        return this.getNextTabbedCellForwards(gridCell);\n    }\n    getNextTabbedCellForwards(gridCell) {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        let newRowIndex = gridCell.rowIndex;\n        let newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        let newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n            const rowBelow = this.getRowBelow(gridCell);\n            if (missing(rowBelow)) {\n                return null;\n            }\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {\n                return null;\n            }\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    }\n    getNextTabbedCellBackwards(gridCell) {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        let newRowIndex = gridCell.rowIndex;\n        let newFloating = gridCell.rowPinned;\n        // move along to the next cell\n        let newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = last(displayedColumns);\n            const rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n            if (missing(rowAbove)) {\n                return null;\n            }\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {\n                return null;\n            }\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], CellNavigationService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('rowModel')\n], CellNavigationService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], CellNavigationService.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], CellNavigationService.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], CellNavigationService.prototype, \"paginationProxy\", void 0);\nCellNavigationService = __decorate([\n    Bean('cellNavigationService')\n], CellNavigationService);\nexport { CellNavigationService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Events } from \"./events.mjs\";\nimport { Bean } from \"./context/context.mjs\";\nimport { Qualifier } from \"./context/context.mjs\";\nimport { Autowired } from \"./context/context.mjs\";\nimport { PostConstruct } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { GridApi } from \"./gridApi.mjs\";\nimport { errorOnce } from \"./utils/function.mjs\";\nlet AlignedGridsService = class AlignedGridsService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n        // while processing a master event) we mark this if consuming an event, and if we are, then\n        // we don't fire back any events.\n        this.consuming = false;\n    }\n    setBeans(loggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    }\n    getAlignedGridApis() {\n        var _a;\n        let alignedGrids = (_a = this.gridOptionsService.get('alignedGrids')) !== null && _a !== void 0 ? _a : [];\n        const isCallbackConfig = typeof alignedGrids === 'function';\n        if (typeof alignedGrids === 'function') {\n            alignedGrids = alignedGrids();\n        }\n        const seeUrl = () => `See ${this.getFrameworkOverrides().getDocLink('aligned-grids')}`;\n        const apis = alignedGrids.map((alignedGrid) => {\n            var _a;\n            if (!alignedGrid) {\n                errorOnce(`alignedGrids contains an undefined option.`);\n                if (!isCallbackConfig) {\n                    errorOnce(`You may want to configure via a callback to avoid setup race conditions:\n                     \"alignedGrids: () => [linkedGrid]\"`);\n                }\n                errorOnce(seeUrl());\n                return;\n            }\n            if (alignedGrid instanceof GridApi) {\n                return alignedGrid;\n            }\n            // Extract the GridApi from a ref or component\n            const refOrComp = alignedGrid;\n            if ('current' in refOrComp) {\n                return (_a = refOrComp.current) === null || _a === void 0 ? void 0 : _a.api;\n            }\n            else {\n                if (!refOrComp.api) {\n                    errorOnce(`alignedGrids - No api found on the linked grid. If you are passing gridOptions to alignedGrids since v31 this is no longer valid. ${seeUrl()}`);\n                }\n                return refOrComp.api;\n            }\n        }).filter(api => !!api && !api.isDestroyed());\n        return apis;\n    }\n    init() {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    }\n    // common logic across all the fire methods\n    fireEvent(callback) {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        this.getAlignedGridApis().forEach((api) => {\n            const alignedGridService = api.__getAlignedGridService();\n            callback(alignedGridService);\n        });\n    }\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    onEvent(callback) {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    }\n    fireColumnEvent(event) {\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onColumnEvent(event);\n        });\n    }\n    fireScrollEvent(event) {\n        if (event.direction !== 'horizontal') {\n            return;\n        }\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onScrollEvent(event);\n        });\n    }\n    onScrollEvent(event) {\n        this.onEvent(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left, true);\n        });\n    }\n    getMasterColumns(event) {\n        const result = [];\n        if (event.columns) {\n            event.columns.forEach((column) => {\n                result.push(column);\n            });\n        }\n        else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    }\n    getColumnIds(event) {\n        const result = [];\n        if (event.columns) {\n            event.columns.forEach(column => {\n                result.push(column.getColId());\n            });\n        }\n        else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    }\n    onColumnEvent(event) {\n        this.onEvent(() => {\n            switch (event.type) {\n                case Events.EVENT_COLUMN_MOVED:\n                case Events.EVENT_COLUMN_VISIBLE:\n                case Events.EVENT_COLUMN_PINNED:\n                case Events.EVENT_COLUMN_RESIZED:\n                    const colEvent = event;\n                    this.processColumnEvent(colEvent);\n                    break;\n                case Events.EVENT_COLUMN_GROUP_OPENED:\n                    const groupOpenedEvent = event;\n                    this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n                case Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('AG Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n        });\n    }\n    processGroupOpenedEvent(groupOpenedEvent) {\n        groupOpenedEvent.columnGroups.forEach(masterGroup => {\n            // likewise for column group\n            let otherColumnGroup = null;\n            if (masterGroup) {\n                const groupId = masterGroup.getGroupId();\n                otherColumnGroup = this.columnModel.getProvidedColumnGroup(groupId);\n            }\n            if (masterGroup && !otherColumnGroup) {\n                return;\n            }\n            this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterGroup.isExpanded());\n            this.columnModel.setColumnGroupOpened(otherColumnGroup, masterGroup.isExpanded(), \"alignedGridChanged\");\n        });\n    }\n    processColumnEvent(colEvent) {\n        var _a;\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        const masterColumn = colEvent.column;\n        let otherColumn = null;\n        if (masterColumn) {\n            otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) {\n            return;\n        }\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        const masterColumns = this.getMasterColumns(colEvent);\n        switch (colEvent.type) {\n            case Events.EVENT_COLUMN_MOVED:\n                // when the user moves columns via applyColumnState, we can't depend on moving specific columns\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n                // so only way to be sure is match the order of all columns using Column State.\n                {\n                    const movedEvent = colEvent;\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId }));\n                    this.columnModel.applyColumnState({ state: destColState, applyOrder: true }, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} toIndex = ${movedEvent.toIndex}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_VISIBLE:\n                // when the user changes visibility via applyColumnState, we can't depend on visibility flag in event\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n                // so only way to be sure is match the visibility of all columns using Column State.\n                {\n                    const visibleEvent = colEvent;\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, hide: s.hide }));\n                    this.columnModel.applyColumnState({ state: destColState }, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} visible = ${visibleEvent.visible}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_PINNED:\n                {\n                    const pinnedEvent = colEvent;\n                    const srcColState = colEvent.api.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, pinned: s.pinned }));\n                    this.columnModel.applyColumnState({ state: destColState }, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} pinned = ${pinnedEvent.pinned}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_RESIZED:\n                const resizedEvent = colEvent;\n                const columnWidths = {};\n                masterColumns.forEach((column) => {\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} actualWidth = ${column.getActualWidth()}`);\n                    columnWidths[column.getId()] = { key: column.getColId(), newWidth: column.getActualWidth() };\n                });\n                // don't set flex columns width\n                (_a = resizedEvent.flexColumns) === null || _a === void 0 ? void 0 : _a.forEach(col => {\n                    if (columnWidths[col.getId()]) {\n                        delete columnWidths[col.getId()];\n                    }\n                });\n                this.columnModel.setColumnWidths(Object.values(columnWidths), false, resizedEvent.finished, \"alignedGridChanged\");\n                break;\n        }\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n        this.getAlignedGridApis().forEach((api) => {\n            api.setGridOption('alwaysShowVerticalScroll', isVerticalScrollShowing);\n        });\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], AlignedGridsService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], AlignedGridsService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    __param(0, Qualifier('loggerFactory'))\n], AlignedGridsService.prototype, \"setBeans\", null);\n__decorate([\n    PostConstruct\n], AlignedGridsService.prototype, \"init\", null);\nAlignedGridsService = __decorate([\n    Bean('alignedGridsService')\n], AlignedGridsService);\nexport { AlignedGridsService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Bean } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { Qualifier } from \"./context/context.mjs\";\nimport { Events } from \"./events.mjs\";\nimport { Autowired } from \"./context/context.mjs\";\nimport { PostConstruct } from \"./context/context.mjs\";\nimport { ChangedPath } from \"./utils/changedPath.mjs\";\nimport { exists, missing } from \"./utils/generic.mjs\";\nimport { last } from \"./utils/array.mjs\";\nlet SelectionService = class SelectionService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.selectedNodes = new Map();\n    }\n    setBeans(loggerFactory) {\n        this.logger = loggerFactory.create('selectionService');\n        this.resetNodes();\n    }\n    init() {\n        this.rowSelection = this.gridOptionsService.get('rowSelection');\n        this.groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n        this.addManagedPropertyListeners(['groupSelectsChildren', 'rowSelection'], () => {\n            this.groupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n            this.rowSelection = this.gridOptionsService.get('rowSelection');\n            this.deselectAllRowNodes({ source: 'api' });\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n    }\n    isMultiselect() {\n        return this.rowSelection === 'multiple';\n    }\n    setNodesSelected(params) {\n        var _a;\n        if (params.nodes.length === 0)\n            return 0;\n        const { newValue, clearSelection, suppressFinishActions, rangeSelect, event, source = 'api', } = params;\n        if (params.nodes.length > 1 && !this.isMultiselect()) {\n            console.warn(`AG Grid: cannot multi select while rowSelection='single'`);\n            return 0;\n        }\n        // groupSelectsFiltered only makes sense when group selects children\n        const groupSelectsFiltered = this.groupSelectsChildren && (params.groupSelectsFiltered === true);\n        // if node is a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        const nodes = params.nodes.map(node => node.footer ? node.sibling : node);\n        if (rangeSelect) {\n            if (params.nodes.length > 1) {\n                console.warn('AG Grid: cannot range select while selecting multiple rows');\n                return 0;\n            }\n            const lastSelectedNode = this.getLastSelectedNode();\n            if (lastSelectedNode) {\n                // if node is a footer, we don't do selection, just pass the info\n                // to the sibling (the parent of the group)\n                const node = nodes[0];\n                const newRowClicked = lastSelectedNode !== node;\n                if (newRowClicked && this.isMultiselect()) {\n                    return this.selectRange(node, lastSelectedNode, params.newValue, source);\n                    ;\n                }\n            }\n        }\n        let updatedCount = 0;\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n            // when groupSelectsFiltered, then this node may end up intermediate despite\n            // trying to set it to true / false. this group will be calculated further on\n            // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n            // here, otherwise the updatedCount would include it.\n            const skipThisNode = groupSelectsFiltered && node.group;\n            if (!skipThisNode) {\n                const thisNodeWasSelected = node.selectThisNode(newValue, params.event, source);\n                if (thisNodeWasSelected) {\n                    updatedCount++;\n                }\n            }\n            if (this.groupSelectsChildren && ((_a = node.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {\n                updatedCount += this.selectChildren(node, newValue, groupSelectsFiltered, source);\n            }\n        }\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            const clearOtherNodes = newValue && (clearSelection || !this.isMultiselect());\n            if (clearOtherNodes) {\n                updatedCount += this.clearOtherNodes(nodes[0], source);\n            }\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.updateGroupsFromChildrenSelections(source);\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                const event = {\n                    type: Events.EVENT_SELECTION_CHANGED,\n                    source\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        }\n        return updatedCount;\n    }\n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    selectRange(fromNode, toNode, value = true, source) {\n        const nodesToSelect = this.rowModel.getNodesInRangeForSelection(fromNode, toNode);\n        let updatedCount = 0;\n        nodesToSelect.forEach(rowNode => {\n            if (rowNode.group && this.groupSelectsChildren || (value === false && fromNode === rowNode)) {\n                return;\n            }\n            const nodeWasSelected = rowNode.selectThisNode(value, undefined, source);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n        this.updateGroupsFromChildrenSelections(source);\n        const event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n        return updatedCount;\n    }\n    selectChildren(node, newValue, groupSelectsFiltered, source) {\n        const children = groupSelectsFiltered ? node.childrenAfterAggFilter : node.childrenAfterGroup;\n        if (missing(children)) {\n            return 0;\n        }\n        return this.setNodesSelected({\n            newValue: newValue,\n            clearSelection: false,\n            suppressFinishActions: true,\n            groupSelectsFiltered,\n            source,\n            nodes: children,\n        });\n    }\n    getLastSelectedNode() {\n        const selectedKeys = Array.from(this.selectedNodes.keys());\n        if (selectedKeys.length == 0) {\n            return null;\n        }\n        const node = this.selectedNodes.get(last(selectedKeys));\n        if (node) {\n            return node;\n        }\n        return null;\n    }\n    getSelectedNodes() {\n        const selectedNodes = [];\n        this.selectedNodes.forEach((rowNode) => {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    }\n    getSelectedRows() {\n        const selectedRows = [];\n        this.selectedNodes.forEach((rowNode) => {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    }\n    getSelectionCount() {\n        return this.selectedNodes.size;\n    }\n    /**\n     * This method is used by the CSRM to remove groups which are being disposed of,\n     * events do not need fired in this case\n     */\n    filterFromSelection(predicate) {\n        const newSelectedNodes = new Map();\n        this.selectedNodes.forEach((rowNode, key) => {\n            const passesPredicate = rowNode && predicate(rowNode);\n            if (passesPredicate) {\n                newSelectedNodes.set(key, rowNode);\n            }\n        });\n        this.selectedNodes = newSelectedNodes;\n    }\n    // should only be called if groupSelectsChildren=true\n    updateGroupsFromChildrenSelections(source, changedPath) {\n        // we only do this when group selection state depends on selected children\n        if (!this.groupSelectsChildren) {\n            return false;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== 'clientSide') {\n            return false;\n        }\n        const clientSideRowModel = this.rowModel;\n        const rootNode = clientSideRowModel.getRootNode();\n        if (!changedPath) {\n            changedPath = new ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n        let selectionChanged = false;\n        changedPath.forEachChangedNodeDepthFirst(rowNode => {\n            if (rowNode !== rootNode) {\n                const selected = rowNode.calculateSelectedFromChildren();\n                selectionChanged = rowNode.selectThisNode(selected === null ? false : selected, undefined, source) || selectionChanged;\n            }\n        });\n        return selectionChanged;\n    }\n    clearOtherNodes(rowNodeToKeepSelected, source) {\n        const groupsToRefresh = new Map();\n        let updatedCount = 0;\n        this.selectedNodes.forEach((otherRowNode) => {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                const rowNode = this.selectedNodes.get(otherRowNode.id);\n                updatedCount += rowNode.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true,\n                    source,\n                });\n                if (this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh.set(otherRowNode.parent.id, otherRowNode.parent);\n                }\n            }\n        });\n        groupsToRefresh.forEach((group) => {\n            const selected = group.calculateSelectedFromChildren();\n            group.selectThisNode(selected === null ? false : selected, undefined, source);\n        });\n        return updatedCount;\n    }\n    onRowSelected(event) {\n        const rowNode = event.node;\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n        if (rowNode.isSelected()) {\n            this.selectedNodes.set(rowNode.id, rowNode);\n        }\n        else {\n            this.selectedNodes.delete(rowNode.id);\n        }\n    }\n    syncInRowNode(rowNode, oldNode) {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    }\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    syncInOldRowNode(rowNode, oldNode) {\n        const oldNodeHasDifferentId = exists(oldNode) && (rowNode.id !== oldNode.id);\n        if (oldNodeHasDifferentId && oldNode) {\n            const id = oldNode.id;\n            const oldNodeSelected = this.selectedNodes.get(id) == rowNode;\n            if (oldNodeSelected) {\n                this.selectedNodes.set(oldNode.id, oldNode);\n            }\n        }\n    }\n    syncInNewRowNode(rowNode) {\n        if (this.selectedNodes.has(rowNode.id)) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes.set(rowNode.id, rowNode);\n        }\n        else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    }\n    reset(source) {\n        const selectionCount = this.getSelectionCount();\n        this.resetNodes();\n        if (selectionCount) {\n            const event = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                source\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n    resetNodes() {\n        var _a;\n        this.logger.log('reset');\n        (_a = this.selectedNodes) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    getBestCostNodeSelection() {\n        if (this.rowModel.getType() !== 'clientSide') {\n            // Error logged as part of gridApi as that is only call point for this method.\n            return;\n        }\n        const clientSideRowModel = this.rowModel;\n        const topLevelNodes = clientSideRowModel.getTopLevelNodes();\n        if (topLevelNodes === null) {\n            return;\n        }\n        const result = [];\n        // recursive function, to find the selected nodes\n        function traverse(nodes) {\n            for (let i = 0, l = nodes.length; i < l; i++) {\n                const node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                }\n                else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    const maybeGroup = node;\n                    if (maybeGroup.group && maybeGroup.children) {\n                        traverse(maybeGroup.children);\n                    }\n                }\n            }\n        }\n        traverse(topLevelNodes);\n        return result;\n    }\n    isEmpty() {\n        let count = 0;\n        this.selectedNodes.forEach((rowNode) => {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    }\n    deselectAllRowNodes(params) {\n        const callback = (rowNode) => rowNode.selectThisNode(false, undefined, source);\n        const rowModelClientSide = this.rowModel.getType() === 'clientSide';\n        const { source, justFiltered, justCurrentPage } = params;\n        if (justCurrentPage || justFiltered) {\n            if (!rowModelClientSide) {\n                console.error(\"AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'\");\n                return;\n            }\n            this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        }\n        else {\n            this.selectedNodes.forEach((rowNode) => {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset(source);\n        }\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections(source);\n        }\n        const event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getSelectedCounts(justFiltered, justCurrentPage) {\n        let selectedCount = 0;\n        let notSelectedCount = 0;\n        const callback = (node) => {\n            if (this.groupSelectsChildren && node.group) {\n                return;\n            }\n            if (node.isSelected()) {\n                selectedCount++;\n            }\n            else if (!node.selectable) {\n                // don't count non-selectable nodes!\n            }\n            else {\n                notSelectedCount++;\n            }\n        };\n        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        return { selectedCount, notSelectedCount };\n    }\n    getSelectAllState(justFiltered, justCurrentPage) {\n        const { selectedCount, notSelectedCount } = this.getSelectedCounts(justFiltered, justCurrentPage);\n        // if no rows, always have it unselected\n        if (selectedCount === 0 && notSelectedCount === 0) {\n            return false;\n        }\n        // if mix of selected and unselected, this is indeterminate\n        if (selectedCount > 0 && notSelectedCount > 0) {\n            return null;\n        }\n        // only selected\n        return selectedCount > 0;\n    }\n    /**\n     * @param justFiltered whether to just include nodes which have passed the filter\n     * @param justCurrentPage whether to just include nodes on the current page\n     * @returns all nodes including unselectable nodes which are the target of this selection attempt\n     */\n    getNodesToSelect(justFiltered = false, justCurrentPage = false) {\n        if (this.rowModel.getType() !== 'clientSide') {\n            throw new Error(`selectAll only available when rowModelType='clientSide', ie not ${this.rowModel.getType()}`);\n        }\n        const nodes = [];\n        if (justCurrentPage) {\n            this.paginationProxy.forEachNodeOnPage((node) => {\n                if (!node.group) {\n                    nodes.push(node);\n                    return;\n                }\n                if (!node.expanded) {\n                    // even with groupSelectsChildren, do this recursively as only the filtered children\n                    // are considered as the current page\n                    const recursivelyAddChildren = (child) => {\n                        var _a;\n                        nodes.push(child);\n                        if ((_a = child.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.length) {\n                            child.childrenAfterFilter.forEach(recursivelyAddChildren);\n                        }\n                    };\n                    recursivelyAddChildren(node);\n                    return;\n                }\n                // if the group node is expanded, the pagination proxy will include the visible nodes to select\n                if (!this.groupSelectsChildren) {\n                    nodes.push(node);\n                }\n            });\n            return nodes;\n        }\n        const clientSideRowModel = this.rowModel;\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter(node => {\n                nodes.push(node);\n            });\n            return nodes;\n        }\n        clientSideRowModel.forEachNode(node => {\n            nodes.push(node);\n        });\n        return nodes;\n    }\n    selectAllRowNodes(params) {\n        if (this.rowModel.getType() !== 'clientSide') {\n            throw new Error(`selectAll only available when rowModelType='clientSide', ie not ${this.rowModel.getType()}`);\n        }\n        const { source, justFiltered, justCurrentPage } = params;\n        const callback = (rowNode) => rowNode.selectThisNode(true, undefined, source);\n        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === 'clientSide' && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections(source);\n        }\n        const event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getSelectionState() {\n        const selectedIds = [];\n        this.selectedNodes.forEach((node) => {\n            if (node === null || node === void 0 ? void 0 : node.id) {\n                selectedIds.push(node.id);\n            }\n        });\n        return selectedIds.length ? selectedIds : null;\n    }\n    setSelectionState(state, source) {\n        if (!Array.isArray(state)) {\n            return;\n        }\n        const rowIds = new Set(state);\n        const nodes = [];\n        this.rowModel.forEachNode(node => {\n            if (rowIds.has(node.id)) {\n                nodes.push(node);\n            }\n        });\n        this.setNodesSelected({\n            newValue: true,\n            nodes,\n            source\n        });\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], SelectionService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], SelectionService.prototype, \"paginationProxy\", void 0);\n__decorate([\n    __param(0, Qualifier('loggerFactory'))\n], SelectionService.prototype, \"setBeans\", null);\n__decorate([\n    PostConstruct\n], SelectionService.prototype, \"init\", null);\nSelectionService = __decorate([\n    Bean('selectionService')\n], SelectionService);\nexport { SelectionService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context.mjs\";\nimport { warnOnce } from \"../utils/function.mjs\";\n/** @deprecated Use methods via the grid api instead. */\nlet ColumnApi = class ColumnApi {\n    constructor(gridAp) {\n        this.viaApi = (funcName, ...args) => {\n            warnOnce(`Since v31, 'columnApi.${funcName}' is deprecated and moved to 'api.${funcName}'.`);\n            return this.api[funcName](...args);\n        };\n        this.api = gridAp;\n    }\n    /** @deprecated v31 use `api.sizeColumnsToFit()` instead.   */\n    sizeColumnsToFit(gridWidth) { this.viaApi('sizeColumnsToFit', gridWidth); }\n    /** @deprecated v31 use `api.setColumnGroupOpened() instead. */\n    setColumnGroupOpened(group, newValue) { this.viaApi('setColumnGroupOpened', group, newValue); }\n    /** @deprecated v31 use `api.getColumnGroup() instead. */\n    getColumnGroup(name, instanceId) { return this.viaApi('getColumnGroup', name, instanceId); }\n    /** @deprecated v31 use `api.getProvidedColumnGroup() instead. */\n    getProvidedColumnGroup(name) { return this.viaApi('getProvidedColumnGroup', name); }\n    /** @deprecated v31 use `api.getDisplayNameForColumn() instead. */\n    getDisplayNameForColumn(column, location) { return this.viaApi('getDisplayNameForColumn', column, location); }\n    /** @deprecated v31 use `api.getDisplayNameForColumnGroup() instead. */\n    getDisplayNameForColumnGroup(columnGroup, location) { return this.viaApi('getDisplayNameForColumnGroup', columnGroup, location); }\n    /** @deprecated v31 use `api.getColumn() instead. */\n    getColumn(key) { return this.viaApi('getColumn', key); }\n    /** @deprecated v31 use `api.getColumns() instead. */\n    getColumns() { return this.viaApi('getColumns'); }\n    /** @deprecated v31 use `api.applyColumnState() instead. */\n    applyColumnState(params) { return this.viaApi('applyColumnState', params); }\n    /** @deprecated v31 use `api.getColumnState() instead. */\n    getColumnState() { return this.viaApi('getColumnState'); }\n    /** @deprecated v31 use `api.resetColumnState() instead. */\n    resetColumnState() { this.viaApi('resetColumnState'); }\n    /** @deprecated v31 use `api.getColumnGroupState() instead. */\n    getColumnGroupState() { return this.viaApi('getColumnGroupState'); }\n    /** @deprecated v31 use `api.setColumnGroupState() instead. */\n    setColumnGroupState(stateItems) { this.viaApi('setColumnGroupState', stateItems); }\n    /** @deprecated v31 use `api.resetColumnGroupState() instead. */\n    resetColumnGroupState() { this.viaApi('resetColumnGroupState'); }\n    /** @deprecated v31 use `api.isPinning() instead. */\n    isPinning() { return this.viaApi('isPinning'); }\n    /** @deprecated v31 use `api.isPinningLeft() instead. */\n    isPinningLeft() { return this.viaApi('isPinningLeft'); }\n    /** @deprecated v31 use `api.isPinningRight() instead. */\n    isPinningRight() { return this.viaApi('isPinningRight'); }\n    /** @deprecated v31 use `api.getDisplayedColAfter() instead. */\n    getDisplayedColAfter(col) { return this.viaApi('getDisplayedColAfter', col); }\n    /** @deprecated v31 use `api.getDisplayedColBefore() instead. */\n    getDisplayedColBefore(col) { return this.viaApi('getDisplayedColBefore', col); }\n    /** @deprecated v31 use `api.setColumnVisible() instead. */\n    setColumnVisible(key, visible) { this.viaApi('setColumnVisible', key, visible); }\n    /** @deprecated v31 use `api.setColumnsVisible() instead. */\n    setColumnsVisible(keys, visible) { this.viaApi('setColumnsVisible', keys, visible); }\n    /** @deprecated v31 use `api.setColumnPinned() instead. */\n    setColumnPinned(key, pinned) { this.viaApi('setColumnPinned', key, pinned); }\n    /** @deprecated v31 use `api.setColumnsPinned() instead. */\n    setColumnsPinned(keys, pinned) { this.viaApi('setColumnsPinned', keys, pinned); }\n    /** @deprecated v31 use `api.getAllGridColumns() instead. */\n    getAllGridColumns() { return this.viaApi('getAllGridColumns'); }\n    /** @deprecated v31 use `api.getDisplayedLeftColumns() instead. */\n    getDisplayedLeftColumns() { return this.viaApi('getDisplayedLeftColumns'); }\n    /** @deprecated v31 use `api.getDisplayedCenterColumns() instead. */\n    getDisplayedCenterColumns() { return this.viaApi('getDisplayedCenterColumns'); }\n    /** @deprecated v31 use `api.getDisplayedRightColumns() instead. */\n    getDisplayedRightColumns() { return this.viaApi('getDisplayedRightColumns'); }\n    /** @deprecated v31 use `api.getAllDisplayedColumns() instead. */\n    getAllDisplayedColumns() { return this.viaApi('getAllDisplayedColumns'); }\n    /** @deprecated v31 use `api.getAllDisplayedVirtualColumns() instead. */\n    getAllDisplayedVirtualColumns() { return this.viaApi('getAllDisplayedVirtualColumns'); }\n    /** @deprecated v31 use `api.moveColumn() instead. */\n    moveColumn(key, toIndex) { this.viaApi('moveColumn', key, toIndex); }\n    /** @deprecated v31 use `api.moveColumnByIndex() instead. */\n    moveColumnByIndex(fromIndex, toIndex) { this.viaApi('moveColumnByIndex', fromIndex, toIndex); }\n    /** @deprecated v31 use `api.moveColumns() instead. */\n    moveColumns(columnsToMoveKeys, toIndex) { this.viaApi('moveColumns', columnsToMoveKeys, toIndex); }\n    /** @deprecated v31 use `api.moveRowGroupColumn() instead. */\n    moveRowGroupColumn(fromIndex, toIndex) { this.viaApi('moveRowGroupColumn', fromIndex, toIndex); }\n    /** @deprecated v31 use `api.setColumnAggFunc() instead. */\n    setColumnAggFunc(key, aggFunc) { this.viaApi('setColumnAggFunc', key, aggFunc); }\n    /** @deprecated v31 use `api.setColumnWidth() instead. */\n    setColumnWidth(key, newWidth, finished = true, source) {\n        this.viaApi('setColumnWidth', key, newWidth, finished, source);\n    }\n    /** @deprecated v31 use `api.setColumnWidths() instead. */\n    setColumnWidths(columnWidths, finished = true, source) {\n        this.viaApi('setColumnWidths', columnWidths, finished, source);\n    }\n    /** @deprecated v31 use `api.setPivotMode() instead. */\n    setPivotMode(pivotMode) { this.viaApi('setPivotMode', pivotMode); }\n    /** @deprecated v31 use `api.isPivotMode() instead. */\n    isPivotMode() { return this.viaApi('isPivotMode'); }\n    /** @deprecated v31 use `api.getPivotResultColumn() instead. */\n    getPivotResultColumn(pivotKeys, valueColKey) { return this.viaApi('getPivotResultColumn', pivotKeys, valueColKey); }\n    /** @deprecated v31 use `api.setValueColumns() instead. */\n    setValueColumns(colKeys) { this.viaApi('setValueColumns', colKeys); }\n    /** @deprecated v31 use `api.getValueColumns() instead. */\n    getValueColumns() { return this.viaApi('getValueColumns'); }\n    /** @deprecated v31 use `api.removeValueColumn() instead. */\n    removeValueColumn(colKey) { this.viaApi('removeValueColumn', colKey); }\n    /** @deprecated v31 use `api.removeValueColumns() instead. */\n    removeValueColumns(colKeys) { this.viaApi('removeValueColumns', colKeys); }\n    /** @deprecated v31 use `api.addValueColumn() instead. */\n    addValueColumn(colKey) { this.viaApi('addValueColumn', colKey); }\n    /** @deprecated v31 use `api.addValueColumns() instead. */\n    addValueColumns(colKeys) { this.viaApi('addValueColumns', colKeys); }\n    /** @deprecated v31 use `api.setRowGroupColumns() instead. */\n    setRowGroupColumns(colKeys) { this.viaApi('setRowGroupColumns', colKeys); }\n    /** @deprecated v31 use `api.removeRowGroupColumn() instead. */\n    removeRowGroupColumn(colKey) { this.viaApi('removeRowGroupColumn', colKey); }\n    /** @deprecated v31 use `api.removeRowGroupColumns() instead. */\n    removeRowGroupColumns(colKeys) { this.viaApi('removeRowGroupColumns', colKeys); }\n    /** @deprecated v31 use `api.addRowGroupColumn() instead. */\n    addRowGroupColumn(colKey) { this.viaApi('addRowGroupColumn', colKey); }\n    /** @deprecated v31 use `api.addRowGroupColumns() instead. */\n    addRowGroupColumns(colKeys) { this.viaApi('addRowGroupColumns', colKeys); }\n    /** @deprecated v31 use `api.getRowGroupColumns() instead. */\n    getRowGroupColumns() { return this.viaApi('getRowGroupColumns'); }\n    /** @deprecated v31 use `api.setPivotColumns() instead. */\n    setPivotColumns(colKeys) { this.viaApi('setPivotColumns', colKeys); }\n    /** @deprecated v31 use `api.removePivotColumn() instead. */\n    removePivotColumn(colKey) { this.viaApi('removePivotColumn', colKey); }\n    /** @deprecated v31 use `api.removePivotColumns() instead. */\n    removePivotColumns(colKeys) { this.viaApi('removePivotColumns', colKeys); }\n    /** @deprecated v31 use `api.addPivotColumn() instead. */\n    addPivotColumn(colKey) { this.viaApi('addPivotColumn', colKey); }\n    /** @deprecated v31 use `api.addPivotColumns() instead. */\n    addPivotColumns(colKeys) { this.viaApi('addPivotColumns', colKeys); }\n    /** @deprecated v31 use `api.getPivotColumns() instead. */\n    getPivotColumns() { return this.viaApi('getPivotColumns'); }\n    /** @deprecated v31 use `api.getLeftDisplayedColumnGroups() instead. */\n    getLeftDisplayedColumnGroups() { return this.viaApi('getLeftDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.getCenterDisplayedColumnGroups() instead. */\n    getCenterDisplayedColumnGroups() { return this.viaApi('getCenterDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.getRightDisplayedColumnGroups() instead. */\n    getRightDisplayedColumnGroups() { return this.viaApi('getRightDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.getAllDisplayedColumnGroups() instead. */\n    getAllDisplayedColumnGroups() { return this.viaApi('getAllDisplayedColumnGroups'); }\n    /** @deprecated v31 use `api.autoSizeColumn() instead. */\n    autoSizeColumn(key, skipHeader) { return this.viaApi('autoSizeColumn', key, skipHeader); }\n    /** @deprecated v31 use `api.autoSizeColumns() instead. */\n    autoSizeColumns(keys, skipHeader) {\n        this.viaApi('autoSizeColumns', keys, skipHeader);\n    }\n    /** @deprecated v31 use `api.autoSizeAllColumns() instead. */\n    autoSizeAllColumns(skipHeader) { this.viaApi('autoSizeAllColumns', skipHeader); }\n    /** @deprecated v31 use `api.setPivotResultColumns() instead. */\n    setPivotResultColumns(colDefs) { this.viaApi('setPivotResultColumns', colDefs); }\n    /** @deprecated v31 use `api.getPivotResultColumns() instead. */\n    getPivotResultColumns() { return this.viaApi('getPivotResultColumns'); }\n};\n__decorate([\n    Autowired('gridApi')\n], ColumnApi.prototype, \"api\", void 0);\nColumnApi = __decorate([\n    Bean('columnApi')\n], ColumnApi);\nexport { ColumnApi };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { getValueUsingField } from \"../utils/object.mjs\";\nimport { missing, exists } from \"../utils/generic.mjs\";\nimport { warnOnce } from \"../utils/function.mjs\";\nlet ValueService = class ValueService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.initialised = false;\n        this.isSsrm = false;\n    }\n    init() {\n        this.isSsrm = this.gridOptionsService.isRowModelType('serverSide');\n        this.cellExpressions = this.gridOptionsService.get('enableCellExpressions');\n        this.isTreeData = this.gridOptionsService.get('treeData');\n        this.initialised = true;\n        // We listen to our own event and use it to call the columnSpecific callback,\n        // this way the handler calls are correctly interleaved with other global events\n        const listener = (event) => this.callColumnCellValueChangedHandler(event);\n        const async = this.gridOptionsService.useAsyncEvents();\n        this.eventService.addEventListener(Events.EVENT_CELL_VALUE_CHANGED, listener, async);\n        this.addDestroyFunc(() => this.eventService.removeEventListener(Events.EVENT_CELL_VALUE_CHANGED, listener, async));\n        this.addManagedPropertyListener('treeData', (propChange) => this.isTreeData = propChange.currentValue);\n    }\n    getValue(column, rowNode, forFilter = false, ignoreAggData = false) {\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n        // really should have a way so they get initialised in the right order???\n        if (!this.initialised) {\n            this.init();\n        }\n        if (!rowNode) {\n            return;\n        }\n        // pull these out to make code below easier to read\n        const colDef = column.getColDef();\n        const field = colDef.field;\n        const colId = column.getColId();\n        const data = rowNode.data;\n        let result;\n        // if there is a value getter, this gets precedence over a field\n        const groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n        const aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n        // SSRM agg data comes from the data attribute, so ignore that instead\n        const ignoreSsrmAggData = this.isSsrm && ignoreAggData && !!column.getColDef().aggFunc;\n        const ssrmFooterGroupCol = this.isSsrm && rowNode.footer && rowNode.field && (column.getColDef().showRowGroup === true || column.getColDef().showRowGroup === rowNode.field);\n        if (forFilter && colDef.filterValueGetter) {\n            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n        }\n        else if (this.isTreeData && aggDataExists) {\n            result = rowNode.aggData[colId];\n        }\n        else if (this.isTreeData && colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        }\n        else if (this.isTreeData && (field && data)) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n        else if (groupDataExists) {\n            result = rowNode.groupData[colId];\n        }\n        else if (aggDataExists) {\n            result = rowNode.aggData[colId];\n        }\n        else if (colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        }\n        else if (ssrmFooterGroupCol) {\n            // this is for group footers in SSRM, as the SSRM row won't have groupData, need to extract\n            // the group value from the data using the row field\n            result = getValueUsingField(data, rowNode.field, column.isFieldContainsDots());\n        }\n        else if (field && data && !ignoreSsrmAggData) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n        // the result could be an expression itself, if we are allowing cell values to be expressions\n        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {\n            const cellValueGetter = result.substring(1);\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n        }\n        if (result == null) {\n            const openedGroup = this.getOpenedGroup(rowNode, column);\n            if (openedGroup != null) {\n                return openedGroup;\n            }\n        }\n        return result;\n    }\n    getOpenedGroup(rowNode, column) {\n        if (!this.gridOptionsService.get('showOpenedGroup')) {\n            return;\n        }\n        const colDef = column.getColDef();\n        if (!colDef.showRowGroup) {\n            return;\n        }\n        const showRowGroup = column.getColDef().showRowGroup;\n        let pointer = rowNode.parent;\n        while (pointer != null) {\n            if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getColId())) {\n                return pointer.key;\n            }\n            pointer = pointer.parent;\n        }\n        return undefined;\n    }\n    /**\n     * Sets the value of a GridCell\n     * @param rowNode The `RowNode` to be updated\n     * @param colKey The `Column` to be updated\n     * @param newValue The new value to be set\n     * @param eventSource The event source\n     * @returns `True` if the value has been updated, otherwise`False`.\n     */\n    setValue(rowNode, colKey, newValue, eventSource) {\n        const column = this.columnModel.getPrimaryColumn(colKey);\n        if (!rowNode || !column) {\n            return false;\n        }\n        // this will only happen if user is trying to paste into a group row, which doesn't make sense\n        // the user should not be trying to paste into group rows\n        if (missing(rowNode.data)) {\n            rowNode.data = {};\n        }\n        const { field, valueSetter } = column.getColDef();\n        if (missing(field) && missing(valueSetter)) {\n            console.warn(`AG Grid: you need either field or valueSetter set on colDef for editing to work`);\n            return false;\n        }\n        if (!this.dataTypeService.checkType(column, newValue)) {\n            console.warn(`AG Grid: Data type of the new value does not match the cell data type of the column`);\n            return false;\n        }\n        const params = {\n            node: rowNode,\n            data: rowNode.data,\n            oldValue: this.getValue(column, rowNode),\n            newValue: newValue,\n            colDef: column.getColDef(),\n            column: column,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        };\n        params.newValue = newValue;\n        let valueWasDifferent;\n        if (exists(valueSetter)) {\n            if (typeof valueSetter === 'function') {\n                valueWasDifferent = valueSetter(params);\n            }\n            else {\n                valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n            }\n        }\n        else {\n            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\n        }\n        // in case user forgot to return something (possible if they are not using TypeScript\n        // and just forgot we default the return value to true, so we always refresh.\n        if (valueWasDifferent === undefined) {\n            valueWasDifferent = true;\n        }\n        // if no change to the value, then no need to do the updating, or notifying via events.\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n        // all the time.\n        if (!valueWasDifferent) {\n            return false;\n        }\n        // reset quick filter on this row\n        rowNode.resetQuickFilterAggregateText();\n        this.valueCache.onDataChanged();\n        params.newValue = this.getValue(column, rowNode);\n        const event = {\n            type: Events.EVENT_CELL_VALUE_CHANGED,\n            event: null,\n            rowIndex: rowNode.rowIndex,\n            rowPinned: rowNode.rowPinned,\n            column: params.column,\n            api: params.api,\n            columnApi: params.columnApi,\n            colDef: params.colDef,\n            context: params.context,\n            data: rowNode.data,\n            node: rowNode,\n            oldValue: params.oldValue,\n            newValue: params.newValue,\n            value: params.newValue,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n        return true;\n    }\n    callColumnCellValueChangedHandler(event) {\n        const onCellValueChanged = event.colDef.onCellValueChanged;\n        if (typeof onCellValueChanged === 'function') {\n            onCellValueChanged({\n                node: event.node,\n                data: event.data,\n                oldValue: event.oldValue,\n                newValue: event.newValue,\n                colDef: event.colDef,\n                column: event.column,\n                api: event.api,\n                columnApi: event.columnApi,\n                context: event.context\n            });\n        }\n    }\n    setValueUsingField(data, field, newValue, isFieldContainsDots) {\n        if (!field) {\n            return false;\n        }\n        // if no '.', then it's not a deep value\n        let valuesAreSame = false;\n        if (!isFieldContainsDots) {\n            valuesAreSame = data[field] === newValue;\n            if (!valuesAreSame) {\n                data[field] = newValue;\n            }\n        }\n        else {\n            // otherwise it is a deep value, so need to dig for it\n            const fieldPieces = field.split('.');\n            let currentObject = data;\n            while (fieldPieces.length > 0 && currentObject) {\n                const fieldPiece = fieldPieces.shift();\n                if (fieldPieces.length === 0) {\n                    valuesAreSame = currentObject[fieldPiece] === newValue;\n                    if (!valuesAreSame) {\n                        currentObject[fieldPiece] = newValue;\n                    }\n                }\n                else {\n                    currentObject = currentObject[fieldPiece];\n                }\n            }\n        }\n        return !valuesAreSame;\n    }\n    executeFilterValueGetter(valueGetter, data, column, rowNode) {\n        const params = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n        if (typeof valueGetter === 'function') {\n            return valueGetter(params);\n        }\n        return this.expressionService.evaluate(valueGetter, params);\n    }\n    executeValueGetter(valueGetter, data, column, rowNode) {\n        const colId = column.getColId();\n        // if inside the same turn, just return back the value we got last time\n        const valueFromCache = this.valueCache.getValue(rowNode, colId);\n        if (valueFromCache !== undefined) {\n            return valueFromCache;\n        }\n        const params = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context,\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n        let result;\n        if (typeof valueGetter === 'function') {\n            result = valueGetter(params);\n        }\n        else {\n            result = this.expressionService.evaluate(valueGetter, params);\n        }\n        // if a turn is active, store the value in case the grid asks for it again\n        this.valueCache.setValue(rowNode, colId, result);\n        return result;\n    }\n    getValueCallback(node, field) {\n        const otherColumn = this.columnModel.getPrimaryColumn(field);\n        if (otherColumn) {\n            return this.getValue(otherColumn, node);\n        }\n        return null;\n    }\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n    getKeyForNode(col, rowNode) {\n        const value = this.getValue(col, rowNode);\n        const keyCreator = col.getColDef().keyCreator;\n        let result = value;\n        if (keyCreator) {\n            const keyParams = {\n                value: value,\n                colDef: col.getColDef(),\n                column: col,\n                node: rowNode,\n                data: rowNode.data,\n                api: this.gridOptionsService.api,\n                columnApi: this.gridOptionsService.columnApi,\n                context: this.gridOptionsService.context\n            };\n            result = keyCreator(keyParams);\n        }\n        // if already a string, or missing, just return it\n        if (typeof result === 'string' || result == null) {\n            return result;\n        }\n        result = String(result);\n        if (result === '[object Object]') {\n            warnOnce('a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key');\n        }\n        return result;\n    }\n};\n__decorate([\n    Autowired('expressionService')\n], ValueService.prototype, \"expressionService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], ValueService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('valueCache')\n], ValueService.prototype, \"valueCache\", void 0);\n__decorate([\n    Autowired('dataTypeService')\n], ValueService.prototype, \"dataTypeService\", void 0);\n__decorate([\n    PostConstruct\n], ValueService.prototype, \"init\", null);\nValueService = __decorate([\n    Bean('valueService')\n], ValueService);\nexport { ValueService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Bean } from \"../context/context.mjs\";\nimport { Qualifier } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet ExpressionService = class ExpressionService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.expressionToFunctionCache = {};\n    }\n    setBeans(loggerFactory) {\n        this.logger = loggerFactory.create('ExpressionService');\n    }\n    evaluate(expression, params) {\n        if (typeof expression === 'string') {\n            // valueGetter is an expression, so execute the expression\n            return this.evaluateExpression(expression, params);\n        }\n        else {\n            console.error('AG Grid: value should be either a string or a function', expression);\n        }\n    }\n    evaluateExpression(expression, params) {\n        try {\n            const javaScriptFunction = this.createExpressionFunction(expression);\n            // the params don't have all these values, rather we add every possible\n            // value a params can have, which makes whatever is in the params available.\n            const result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);\n            return result;\n        }\n        catch (e) {\n            // the expression failed, which can happen, as it's the client that\n            // provides the expression. so print a nice message\n            // tslint:disable-next-line\n            console.log('Processing of the expression failed');\n            // tslint:disable-next-line\n            console.log('Expression = ' + expression);\n            // tslint:disable-next-line\n            console.log('Params =', params);\n            // tslint:disable-next-line\n            console.log('Exception = ' + e);\n            return null;\n        }\n    }\n    createExpressionFunction(expression) {\n        // check cache first\n        if (this.expressionToFunctionCache[expression]) {\n            return this.expressionToFunctionCache[expression];\n        }\n        // if not found in cache, return the function\n        const functionBody = this.createFunctionBody(expression);\n        const theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);\n        // store in cache\n        this.expressionToFunctionCache[expression] = theFunction;\n        return theFunction;\n    }\n    createFunctionBody(expression) {\n        // if the expression has the 'return' word in it, then use as is,\n        // if not, then wrap it with return and ';' to make a function\n        if (expression.indexOf('return') >= 0) {\n            return expression;\n        }\n        else {\n            return 'return ' + expression + ';';\n        }\n    }\n};\n__decorate([\n    __param(0, Qualifier('loggerFactory'))\n], ExpressionService.prototype, \"setBeans\", null);\nExpressionService = __decorate([\n    Bean('expressionService')\n], ExpressionService);\nexport { ExpressionService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nlet TemplateService = class TemplateService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.templateCache = {};\n        this.waitingCallbacks = {};\n    }\n    // returns the template if it is loaded, or null if it is not loaded\n    // but will call the callback when it is loaded\n    getTemplate(url, callback) {\n        const templateFromCache = this.templateCache[url];\n        if (templateFromCache) {\n            return templateFromCache;\n        }\n        let callbackList = this.waitingCallbacks[url];\n        const that = this;\n        if (!callbackList) {\n            // first time this was called, so need a new list for callbacks\n            callbackList = [];\n            this.waitingCallbacks[url] = callbackList;\n            // and also need to do the http request\n            const client = new XMLHttpRequest();\n            client.onload = function () {\n                that.handleHttpResult(this, url);\n            };\n            client.open(\"GET\", url);\n            client.send();\n        }\n        // add this callback\n        if (callback) {\n            callbackList.push(callback);\n        }\n        // caller needs to wait for template to load, so return null\n        return null;\n    }\n    handleHttpResult(httpResult, url) {\n        if (httpResult.status !== 200 || httpResult.response === null) {\n            console.warn(`AG Grid: Unable to get template error ${httpResult.status} - ${url}`);\n            return;\n        }\n        // response success, so process it\n        // in IE9 the response is in - responseText\n        this.templateCache[url] = httpResult.response || httpResult.responseText;\n        // inform all listeners that this is now in the cache\n        const callbacks = this.waitingCallbacks[url];\n        for (let i = 0; i < callbacks.length; i++) {\n            const callback = callbacks[i];\n            // we could pass the callback the response, however we know the client of this code\n            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback\n            // which doesn't take any parameters.\n            callback();\n        }\n    }\n};\nTemplateService = __decorate([\n    Bean('templateService')\n], TemplateService);\nexport { TemplateService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Bean } from \"./context/context.mjs\";\nimport { Qualifier } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nlet LoggerFactory = class LoggerFactory extends BeanStub {\n    setBeans(gridOptionsService) {\n        this.logging = gridOptionsService.get('debug');\n    }\n    create(name) {\n        return new Logger(name, this.isLogging.bind(this));\n    }\n    isLogging() {\n        return this.logging;\n    }\n};\n__decorate([\n    __param(0, Qualifier('gridOptionsService'))\n], LoggerFactory.prototype, \"setBeans\", null);\nLoggerFactory = __decorate([\n    Bean('loggerFactory')\n], LoggerFactory);\nexport { LoggerFactory };\nexport class Logger {\n    constructor(name, isLoggingFunc) {\n        this.name = name;\n        this.isLoggingFunc = isLoggingFunc;\n    }\n    isLogging() {\n        return this.isLoggingFunc();\n    }\n    log(message) {\n        if (this.isLoggingFunc()) {\n            // tslint:disable-next-line\n            console.log('AG Grid.' + this.name + ': ' + message);\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry.mjs\";\nimport { ModuleNames } from \"../modules/moduleNames.mjs\";\nimport { LayoutFeature } from \"../styling/layoutFeature.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { last } from \"../utils/array.mjs\";\nimport { DragAndDropService, DragSourceType } from \"../dragAndDrop/dragAndDropService.mjs\";\nexport class GridCtrl extends BeanStub {\n    setComp(view, eGridDiv, eGui) {\n        this.view = view;\n        this.eGridHostDiv = eGridDiv;\n        this.eGui = eGui;\n        this.eGui.setAttribute('grid-id', this.context.getGridId());\n        // this drop target is just used to see if the drop event is inside the grid\n        this.dragAndDropService.addDropTarget({\n            getContainer: () => this.eGui,\n            isInterestedIn: (type) => type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel,\n            getIconName: () => DragAndDropService.ICON_NOT_ALLOWED,\n        });\n        this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);\n        this.createManagedBean(new LayoutFeature(this.view));\n        this.addRtlSupport();\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));\n        this.addDestroyFunc(() => unsubscribeFromResize());\n        this.ctrlsService.registerGridCtrl(this);\n    }\n    isDetailGrid() {\n        var _a;\n        const el = this.focusService.findTabbableParent(this.getGui());\n        return ((_a = el === null || el === void 0 ? void 0 : el.getAttribute('row-id')) === null || _a === void 0 ? void 0 : _a.startsWith('detail')) || false;\n    }\n    showDropZones() {\n        return ModuleRegistry.__isRegistered(ModuleNames.RowGroupingModule, this.context.getGridId());\n    }\n    showSideBar() {\n        return ModuleRegistry.__isRegistered(ModuleNames.SideBarModule, this.context.getGridId());\n    }\n    showStatusBar() {\n        return ModuleRegistry.__isRegistered(ModuleNames.StatusBarModule, this.context.getGridId());\n    }\n    showWatermark() {\n        return ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());\n    }\n    onGridSizeChanged() {\n        const event = {\n            type: Events.EVENT_GRID_SIZE_CHANGED,\n            clientWidth: this.eGridHostDiv.clientWidth,\n            clientHeight: this.eGridHostDiv.clientHeight\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    addRtlSupport() {\n        const cssClass = this.gridOptionsService.get('enableRtl') ? 'ag-rtl' : 'ag-ltr';\n        this.view.setRtlClass(cssClass);\n    }\n    destroyGridUi() {\n        this.view.destroyGridUi();\n    }\n    getGui() {\n        return this.eGui;\n    }\n    setResizeCursor(on) {\n        this.view.setCursor(on ? 'ew-resize' : null);\n    }\n    disableUserSelect(on) {\n        this.view.setUserSelect(on ? 'none' : null);\n    }\n    focusNextInnerContainer(backwards) {\n        const eDocument = this.gridOptionsService.getDocument();\n        const focusableContainers = this.view.getFocusableContainers();\n        const idxWithFocus = focusableContainers.findIndex(container => container.contains(eDocument.activeElement));\n        const nextIdx = idxWithFocus + (backwards ? -1 : 1);\n        if (nextIdx <= 0 || nextIdx >= focusableContainers.length) {\n            return false;\n        }\n        return this.focusService.focusInto(focusableContainers[nextIdx]);\n    }\n    focusInnerElement(fromBottom) {\n        const focusableContainers = this.view.getFocusableContainers();\n        const allColumns = this.columnModel.getAllDisplayedColumns();\n        if (fromBottom) {\n            if (focusableContainers.length > 1) {\n                return this.focusService.focusInto(last(focusableContainers), true);\n            }\n            const lastColumn = last(allColumns);\n            if (this.focusService.focusGridView(lastColumn, true)) {\n                return true;\n            }\n        }\n        if (this.gridOptionsService.get('headerHeight') === 0) {\n            return this.focusService.focusGridView(allColumns[0]);\n        }\n        return this.focusService.focusFirstHeader();\n    }\n    forceFocusOutOfContainer(up = false) {\n        this.view.forceFocusOutOfContainer(up);\n    }\n}\n__decorate([\n    Autowired('focusService')\n], GridCtrl.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('resizeObserverService')\n], GridCtrl.prototype, \"resizeObserverService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], GridCtrl.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], GridCtrl.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('mouseEventService')\n], GridCtrl.prototype, \"mouseEventService\", void 0);\n__decorate([\n    Autowired('dragAndDropService')\n], GridCtrl.prototype, \"dragAndDropService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { RefSelector } from \"../widgets/componentAnnotations.mjs\";\nimport { isVisible } from \"../utils/dom.mjs\";\nimport { GridCtrl } from \"./gridCtrl.mjs\";\nimport { LayoutCssClasses } from \"../styling/layoutFeature.mjs\";\nimport { TabGuardComp } from \"../widgets/tabGuardComp.mjs\";\nexport class GridComp extends TabGuardComp {\n    constructor(eGridDiv) {\n        super();\n        this.eGridDiv = eGridDiv;\n    }\n    postConstruct() {\n        this.logger = this.loggerFactory.create('GridComp');\n        const compProxy = {\n            destroyGridUi: () => this.destroyBean(this),\n            setRtlClass: (cssClass) => this.addCssClass(cssClass),\n            forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),\n            updateLayoutClasses: this.updateLayoutClasses.bind(this),\n            getFocusableContainers: this.getFocusableContainers.bind(this),\n            setUserSelect: value => {\n                this.getGui().style.userSelect = value != null ? value : '';\n                this.getGui().style.webkitUserSelect = value != null ? value : '';\n            },\n            setCursor: value => {\n                this.getGui().style.cursor = value != null ? value : '';\n            }\n        };\n        this.ctrl = this.createManagedBean(new GridCtrl());\n        const template = this.createTemplate();\n        this.setTemplate(template);\n        this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());\n        this.insertGridIntoDom();\n        this.initialiseTabGuard({\n            // we want to override the default behaviour to do nothing for onTabKeyDown\n            onTabKeyDown: () => undefined,\n            focusInnerElement: fromBottom => this.ctrl.focusInnerElement(fromBottom)\n        });\n    }\n    insertGridIntoDom() {\n        const eGui = this.getGui();\n        this.eGridDiv.appendChild(eGui);\n        this.addDestroyFunc(() => {\n            this.eGridDiv.removeChild(eGui);\n            this.logger.log('Grid removed from DOM');\n        });\n    }\n    updateLayoutClasses(cssClass, params) {\n        const eRootWrapperBodyClassList = this.eRootWrapperBody.classList;\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);\n        this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n        this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n    }\n    createTemplate() {\n        const dropZones = this.ctrl.showDropZones() ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>' : '';\n        const sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref=\"sideBar\"></ag-side-bar>' : '';\n        const statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref=\"statusBar\"></ag-status-bar>' : '';\n        const watermark = this.ctrl.showWatermark() ? '<ag-watermark></ag-watermark>' : '';\n        const template = /* html */ `<div class=\"ag-root-wrapper\" role=\"presentation\">\n                ${dropZones}\n                <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\" role=\"presentation\">\n                    <ag-grid-body ref=\"gridBody\"></ag-grid-body>\n                    ${sideBar}\n                </div>\n                ${statusBar}\n                <ag-pagination></ag-pagination>\n                ${watermark}\n            </div>`;\n        return template;\n    }\n    getFocusableElement() {\n        return this.eRootWrapperBody;\n    }\n    getFocusableContainers() {\n        const focusableContainers = [\n            this.gridBodyComp.getGui()\n        ];\n        if (this.sideBarComp) {\n            focusableContainers.push(this.sideBarComp.getGui());\n        }\n        return focusableContainers.filter(el => isVisible(el));\n    }\n}\n__decorate([\n    Autowired('loggerFactory')\n], GridComp.prototype, \"loggerFactory\", void 0);\n__decorate([\n    RefSelector('gridBody')\n], GridComp.prototype, \"gridBodyComp\", void 0);\n__decorate([\n    RefSelector('sideBar')\n], GridComp.prototype, \"sideBarComp\", void 0);\n__decorate([\n    RefSelector('rootWrapperBody')\n], GridComp.prototype, \"eRootWrapperBody\", void 0);\n__decorate([\n    PostConstruct\n], GridComp.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar SortController_1;\nimport { Autowired, Bean } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { Events } from \"./events.mjs\";\nlet SortController = SortController_1 = class SortController extends BeanStub {\n    progressSort(column, multiSort, source) {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n    setSortForColumn(column, sort, multiSort, source) {\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== 'asc' && sort !== 'desc') {\n            sort = null;\n        }\n        const isColumnsSortingCoupledToGroup = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        let columnsToUpdate = [column];\n        if (isColumnsSortingCoupledToGroup) {\n            if (column.getColDef().showRowGroup) {\n                const rowGroupColumns = this.columnModel.getSourceColumnsForGroupColumn(column);\n                const sortableRowGroupColumns = rowGroupColumns === null || rowGroupColumns === void 0 ? void 0 : rowGroupColumns.filter(col => col.isSortable());\n                if (sortableRowGroupColumns) {\n                    columnsToUpdate = [column, ...sortableRowGroupColumns];\n                }\n            }\n        }\n        columnsToUpdate.forEach(col => col.setSort(sort, source));\n        const doingMultiSort = (multiSort || this.gridOptionsService.get('alwaysMultiSort')) && !this.gridOptionsService.get('suppressMultiSort');\n        // clear sort on all columns except those changed, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarTheseColumns(columnsToUpdate, source);\n        }\n        // sortIndex used for knowing order of cols when multi-col sort\n        this.updateSortIndex(column);\n        this.dispatchSortChangedEvents(source);\n    }\n    updateSortIndex(lastColToChange) {\n        const isCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        const groupParent = this.columnModel.getGroupDisplayColumnForGroup(lastColToChange.getId());\n        const lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;\n        const allSortedCols = this.getColumnsWithSortingOrdered();\n        // reset sort index on everything\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(col => col.setSortIndex(null));\n        const allSortedColsWithoutChanges = allSortedCols.filter(col => col !== lastSortIndexCol);\n        const sortedColsWithIndices = !!lastSortIndexCol.getSort() ? [...allSortedColsWithoutChanges, lastSortIndexCol] : allSortedColsWithoutChanges;\n        sortedColsWithIndices.forEach((col, idx) => (col.setSortIndex(idx)));\n    }\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    onSortChanged(source) {\n        this.dispatchSortChangedEvents(source);\n    }\n    isSortActive() {\n        // pull out all the columns that have sorting set\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const sortedCols = allCols.filter(column => !!column.getSort());\n        return sortedCols && sortedCols.length > 0;\n    }\n    dispatchSortChangedEvents(source) {\n        const event = {\n            type: Events.EVENT_SORT_CHANGED,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    clearSortBarTheseColumns(columnsToSkip, source) {\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach((columnToClear) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (!columnsToSkip.includes(columnToClear)) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    }\n    getNextSortDirection(column) {\n        let sortingOrder;\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        }\n        else if (this.gridOptionsService.get('sortingOrder')) {\n            sortingOrder = this.gridOptionsService.get('sortingOrder');\n        }\n        else {\n            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;\n        }\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(`AG Grid: sortingOrder must be an array with at least one element, currently it\\'s ${sortingOrder}`);\n            return null;\n        }\n        const currentIndex = sortingOrder.indexOf(column.getSort());\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result;\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        }\n        else {\n            result = sortingOrder[currentIndex + 1];\n        }\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('AG Grid: invalid sort type ' + result);\n            return null;\n        }\n        return result;\n    }\n    /**\n     * @returns a map of sort indexes for every sorted column, if groups sort primaries then they will have equivalent indices\n     */\n    getIndexedSortMap() {\n        // pull out all the columns that have sorting set\n        let allSortedCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns()\n            .filter(col => !!col.getSort());\n        if (this.columnModel.isPivotMode()) {\n            const isSortingLinked = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n            allSortedCols = allSortedCols.filter(col => {\n                const isAggregated = !!col.getAggFunc();\n                const isSecondary = !col.isPrimary();\n                const isGroup = isSortingLinked ? this.columnModel.getGroupDisplayColumnForGroup(col.getId()) : col.getColDef().showRowGroup;\n                return isAggregated || isSecondary || isGroup;\n            });\n        }\n        const sortedRowGroupCols = this.columnModel.getRowGroupColumns()\n            .filter(col => !!col.getSort());\n        const isSortLinked = this.gridOptionsService.isColumnsSortingCoupledToGroup() && !!sortedRowGroupCols.length;\n        if (isSortLinked) {\n            allSortedCols = [\n                ...new Set(\n                // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness\n                allSortedCols.map(col => { var _a; return (_a = this.columnModel.getGroupDisplayColumnForGroup(col.getId())) !== null && _a !== void 0 ? _a : col; }))\n            ];\n        }\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\n        // cols is sorted by first.\n        const allColsIndexes = {};\n        allSortedCols.forEach((col, index) => allColsIndexes[col.getId()] = index);\n        // put the columns in order of which one got sorted first\n        allSortedCols.sort((a, b) => {\n            const iA = a.getSortIndex();\n            const iB = b.getSortIndex();\n            if (iA != null && iB != null) {\n                return iA - iB; // both present, normal comparison\n            }\n            else if (iA == null && iB == null) {\n                // both missing, compare using column positions\n                const posA = allColsIndexes[a.getId()];\n                const posB = allColsIndexes[b.getId()];\n                return posA > posB ? 1 : -1;\n            }\n            else if (iB == null) {\n                return -1; // iB missing\n            }\n            else {\n                return 1; // iA missing\n            }\n        });\n        const indexMap = new Map();\n        allSortedCols.forEach((col, idx) => indexMap.set(col, idx));\n        // add the row group cols back\n        if (isSortLinked) {\n            sortedRowGroupCols.forEach(col => {\n                const groupDisplayCol = this.columnModel.getGroupDisplayColumnForGroup(col.getId());\n                indexMap.set(col, indexMap.get(groupDisplayCol));\n            });\n        }\n        return indexMap;\n    }\n    getColumnsWithSortingOrdered() {\n        // pull out all the columns that have sorting set\n        return [...this.getIndexedSortMap().entries()]\n            .sort(([col1, idx1], [col2, idx2]) => idx1 - idx2)\n            .map(([col]) => col);\n    }\n    // used by server side row models, to sent sort to server\n    getSortModel() {\n        return this.getColumnsWithSortingOrdered()\n            .filter(column => column.getSort())\n            .map(column => ({\n            sort: column.getSort(),\n            colId: column.getId()\n        }));\n    }\n    getSortOptions() {\n        return this.getColumnsWithSortingOrdered()\n            .filter(column => column.getSort())\n            .map(column => ({\n            sort: column.getSort(),\n            column\n        }));\n    }\n    canColumnDisplayMixedSort(column) {\n        const isColumnSortCouplingActive = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        const isGroupDisplayColumn = !!column.getColDef().showRowGroup;\n        return isColumnSortCouplingActive && isGroupDisplayColumn;\n    }\n    getDisplaySortForColumn(column) {\n        const linkedColumns = this.columnModel.getSourceColumnsForGroupColumn(column);\n        if (!this.canColumnDisplayMixedSort(column) || !(linkedColumns === null || linkedColumns === void 0 ? void 0 : linkedColumns.length)) {\n            return column.getSort();\n        }\n        // if column has unique data, its sorting is independent - but can still be mixed\n        const columnHasUniqueData = column.getColDef().field != null || !!column.getColDef().valueGetter;\n        const sortableColumns = columnHasUniqueData ? [column, ...linkedColumns] : linkedColumns;\n        const firstSort = sortableColumns[0].getSort();\n        // the == is intentional, as null and undefined both represent no sort, which means they are equivalent\n        const allMatch = sortableColumns.every(col => col.getSort() == firstSort);\n        if (!allMatch) {\n            return 'mixed';\n        }\n        return firstSort;\n    }\n    getDisplaySortIndexForColumn(column) {\n        return this.getIndexedSortMap().get(column);\n    }\n};\nSortController.DEFAULT_SORTING_ORDER = ['asc', 'desc', null];\n__decorate([\n    Autowired('columnModel')\n], SortController.prototype, \"columnModel\", void 0);\nSortController = SortController_1 = __decorate([\n    Bean('sortController')\n], SortController);\nexport { SortController };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar FocusService_1;\nimport { Autowired, Bean, Optional, PostConstruct } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { Events } from \"./events.mjs\";\nimport { ManagedFocusFeature } from \"./widgets/managedFocusFeature.mjs\";\nimport { getTabIndex } from './utils/browser.mjs';\nimport { makeNull } from './utils/generic.mjs';\nimport { RowCtrl } from \"./rendering/row/rowCtrl.mjs\";\nimport { AbstractHeaderCellCtrl } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl.mjs\";\nimport { last } from \"./utils/array.mjs\";\nimport { FOCUSABLE_EXCLUDE, FOCUSABLE_SELECTOR, isVisible } from \"./utils/dom.mjs\";\nimport { TabGuardClassNames } from \"./widgets/tabGuardCtrl.mjs\";\nlet FocusService = FocusService_1 = class FocusService extends BeanStub {\n    static addKeyboardModeEvents(doc) {\n        if (this.instanceCount > 0) {\n            return;\n        }\n        doc.addEventListener('keydown', FocusService_1.toggleKeyboardMode);\n        doc.addEventListener('mousedown', FocusService_1.toggleKeyboardMode);\n    }\n    static removeKeyboardModeEvents(doc) {\n        if (this.instanceCount > 0)\n            return;\n        doc.addEventListener('keydown', FocusService_1.toggleKeyboardMode);\n        doc.addEventListener('mousedown', FocusService_1.toggleKeyboardMode);\n    }\n    static toggleKeyboardMode(event) {\n        const isKeyboardActive = FocusService_1.keyboardModeActive;\n        const isKeyboardEvent = event.type === 'keydown';\n        if (isKeyboardEvent) {\n            // the following keys should not toggle keyboard mode.\n            if (event.ctrlKey || event.metaKey || event.altKey) {\n                return;\n            }\n        }\n        if (isKeyboardActive === isKeyboardEvent) {\n            return;\n        }\n        FocusService_1.keyboardModeActive = isKeyboardEvent;\n    }\n    static unregisterGridCompController(doc) {\n        FocusService_1.removeKeyboardModeEvents(doc);\n    }\n    init() {\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);\n        this.registerKeyboardFocusEvents();\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n        });\n    }\n    registerKeyboardFocusEvents() {\n        const eDocument = this.gridOptionsService.getDocument();\n        FocusService_1.addKeyboardModeEvents(eDocument);\n        FocusService_1.instanceCount++;\n        this.addDestroyFunc(() => {\n            FocusService_1.instanceCount--;\n            FocusService_1.unregisterGridCompController(eDocument);\n        });\n    }\n    onColumnEverythingChanged() {\n        // if the columns change, check and see if this column still exists. if it does, then\n        // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.\n        if (!this.focusedCellPosition) {\n            return;\n        }\n        const col = this.focusedCellPosition.column;\n        const colFromColumnModel = this.columnModel.getGridColumn(col.getId());\n        if (col !== colFromColumnModel) {\n            this.clearFocusedCell();\n        }\n    }\n    isKeyboardMode() {\n        return FocusService_1.keyboardModeActive;\n    }\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    getFocusCellToUseAfterRefresh() {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (this.gridOptionsService.get('suppressFocusAfterRefresh') || !this.focusedCellPosition) {\n            return null;\n        }\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)\n        // and Cells (covers cells as cells live in rows)\n        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {\n            return null;\n        }\n        return this.focusedCellPosition;\n    }\n    getFocusHeaderToUseAfterRefresh() {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (this.gridOptionsService.get('suppressFocusAfterRefresh') || !this.focusedHeaderPosition) {\n            return null;\n        }\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {\n            return null;\n        }\n        return this.focusedHeaderPosition;\n    }\n    isDomDataMissingInHierarchy(eBrowserCell, key) {\n        let ePointer = eBrowserCell;\n        while (ePointer) {\n            const data = this.gridOptionsService.getDomData(ePointer, key);\n            if (data) {\n                return false;\n            }\n            ePointer = ePointer.parentNode;\n        }\n        return true;\n    }\n    getFocusedCell() {\n        return this.focusedCellPosition;\n    }\n    shouldRestoreFocus(cell) {\n        if (this.isCellRestoreFocused(cell)) {\n            setTimeout(() => {\n                // Clear the restore focused cell position after the timeout to avoid\n                // the cell being focused again and stealing focus from another part of the app.\n                this.restoredFocusedCellPosition = null;\n            }, 0);\n            return true;\n        }\n        return false;\n    }\n    isCellRestoreFocused(cellPosition) {\n        if (this.restoredFocusedCellPosition == null) {\n            return false;\n        }\n        return this.cellPositionUtils.equals(cellPosition, this.restoredFocusedCellPosition);\n    }\n    setRestoreFocusedCell(cellPosition) {\n        if (this.getFrameworkOverrides().renderingEngine === 'react') {\n            // The restoredFocusedCellPosition is used in the React Rendering engine as we have to be able\n            // to support restoring focus after an async rendering.\n            this.restoredFocusedCellPosition = cellPosition;\n        }\n    }\n    getFocusEventParams() {\n        const { rowIndex, rowPinned, column } = this.focusedCellPosition;\n        const params = {\n            rowIndex: rowIndex,\n            rowPinned: rowPinned,\n            column: column,\n            isFullWidthCell: false\n        };\n        const rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n        if (rowCtrl) {\n            params.isFullWidthCell = rowCtrl.isFullWidth();\n        }\n        return params;\n    }\n    clearFocusedCell() {\n        this.restoredFocusedCellPosition = null;\n        if (this.focusedCellPosition == null) {\n            return;\n        }\n        const event = Object.assign({ type: Events.EVENT_CELL_FOCUS_CLEARED }, this.getFocusEventParams());\n        this.focusedCellPosition = null;\n        this.eventService.dispatchEvent(event);\n    }\n    setFocusedCell(params) {\n        const { column, rowIndex, rowPinned, forceBrowserFocus = false, preventScrollOnBrowserFocus = false } = params;\n        const gridColumn = this.columnModel.getGridColumn(column);\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\n        // to re-focus the focused cell.\n        if (!gridColumn) {\n            this.focusedCellPosition = null;\n            return;\n        }\n        this.focusedCellPosition = gridColumn ? {\n            rowIndex: rowIndex,\n            rowPinned: makeNull(rowPinned),\n            column: gridColumn\n        } : null;\n        const event = Object.assign(Object.assign({ type: Events.EVENT_CELL_FOCUSED }, this.getFocusEventParams()), { forceBrowserFocus,\n            preventScrollOnBrowserFocus, floating: null });\n        this.eventService.dispatchEvent(event);\n    }\n    isCellFocused(cellPosition) {\n        if (this.focusedCellPosition == null) {\n            return false;\n        }\n        return this.cellPositionUtils.equals(cellPosition, this.focusedCellPosition);\n    }\n    isRowNodeFocused(rowNode) {\n        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);\n    }\n    isHeaderWrapperFocused(headerCtrl) {\n        if (this.focusedHeaderPosition == null) {\n            return false;\n        }\n        const column = headerCtrl.getColumnGroupChild();\n        const headerRowIndex = headerCtrl.getRowIndex();\n        const pinned = headerCtrl.getPinned();\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeaderPosition;\n        return column === focusedColumn &&\n            headerRowIndex === focusedHeaderRowIndex &&\n            pinned == focusedColumn.getPinned();\n    }\n    clearFocusedHeader() {\n        this.focusedHeaderPosition = null;\n    }\n    getFocusedHeader() {\n        return this.focusedHeaderPosition;\n    }\n    setFocusedHeader(headerRowIndex, column) {\n        this.focusedHeaderPosition = { headerRowIndex, column };\n    }\n    focusHeaderPosition(params) {\n        const { direction, fromTab, allowUserOverride, event, fromCell } = params;\n        let { headerPosition } = params;\n        if (fromCell && this.filterManager.isAdvancedFilterHeaderActive()) {\n            return this.focusAdvancedFilter(headerPosition);\n        }\n        if (allowUserOverride) {\n            const currentPosition = this.getFocusedHeader();\n            const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n            if (fromTab) {\n                const userFunc = this.gridOptionsService.getCallback('tabToNextHeader');\n                if (userFunc) {\n                    const params = {\n                        backwards: direction === 'Before',\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n            else {\n                const userFunc = this.gridOptionsService.getCallback('navigateToNextHeader');\n                if (userFunc && event) {\n                    const params = {\n                        key: event.key,\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        event,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n        }\n        if (!headerPosition) {\n            return false;\n        }\n        if (headerPosition.headerRowIndex === -1) {\n            if (this.filterManager.isAdvancedFilterHeaderActive()) {\n                return this.focusAdvancedFilter(headerPosition);\n            }\n            else {\n                return this.focusGridView(headerPosition.column);\n            }\n        }\n        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);\n        const headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());\n        // this will automatically call the setFocusedHeader method above\n        const focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);\n        return focusSuccess;\n    }\n    focusFirstHeader() {\n        let firstColumn = this.columnModel.getAllDisplayedColumns()[0];\n        if (!firstColumn) {\n            return false;\n        }\n        if (firstColumn.getParent()) {\n            firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0);\n        }\n        return this.focusHeaderPosition({\n            headerPosition: { headerRowIndex: 0, column: firstColumn }\n        });\n    }\n    focusLastHeader(event) {\n        const headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;\n        const column = last(this.columnModel.getAllDisplayedColumns());\n        return this.focusHeaderPosition({\n            headerPosition: { headerRowIndex, column },\n            event\n        });\n    }\n    focusPreviousFromFirstCell(event) {\n        if (this.filterManager.isAdvancedFilterHeaderActive()) {\n            return this.focusAdvancedFilter(null);\n        }\n        return this.focusLastHeader(event);\n    }\n    isAnyCellFocused() {\n        return !!this.focusedCellPosition;\n    }\n    isRowFocused(rowIndex, floating) {\n        if (this.focusedCellPosition == null) {\n            return false;\n        }\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);\n    }\n    findFocusableElements(rootNode, exclude, onlyUnmanaged = false) {\n        const focusableString = FOCUSABLE_SELECTOR;\n        let excludeString = FOCUSABLE_EXCLUDE;\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n        if (onlyUnmanaged) {\n            excludeString += ', [tabindex=\"-1\"]';\n        }\n        const nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString)).filter((node) => {\n            return isVisible(node);\n        });\n        const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n        const diff = (a, b) => a.filter(element => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n    focusInto(rootNode, up = false, onlyUnmanaged = false) {\n        const focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);\n        const toFocus = up ? last(focusableElements) : focusableElements[0];\n        if (toFocus) {\n            toFocus.focus({ preventScroll: true });\n            return true;\n        }\n        return false;\n    }\n    findFocusableElementBeforeTabGuard(rootNode, referenceElement) {\n        if (!referenceElement) {\n            return null;\n        }\n        const focusableElements = this.findFocusableElements(rootNode);\n        const referenceIndex = focusableElements.indexOf(referenceElement);\n        if (referenceIndex === -1) {\n            return null;\n        }\n        let lastTabGuardIndex = -1;\n        for (let i = referenceIndex - 1; i >= 0; i--) {\n            if (focusableElements[i].classList.contains(TabGuardClassNames.TAB_GUARD_TOP)) {\n                lastTabGuardIndex = i;\n                break;\n            }\n        }\n        if (lastTabGuardIndex <= 0) {\n            return null;\n        }\n        return focusableElements[lastTabGuardIndex - 1];\n    }\n    findNextFocusableElement(rootNode = this.eGridDiv, onlyManaged, backwards) {\n        const focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeEl = eDocument.activeElement;\n        let currentIndex;\n        if (onlyManaged) {\n            currentIndex = focusable.findIndex(el => el.contains(activeEl));\n        }\n        else {\n            currentIndex = focusable.indexOf(activeEl);\n        }\n        const nextIndex = currentIndex + (backwards ? -1 : 1);\n        if (nextIndex < 0 || nextIndex >= focusable.length) {\n            return null;\n        }\n        return focusable[nextIndex];\n    }\n    isTargetUnderManagedComponent(rootNode, target) {\n        if (!target) {\n            return false;\n        }\n        const managedContainers = rootNode.querySelectorAll(`.${ManagedFocusFeature.FOCUS_MANAGED_CLASS}`);\n        if (!managedContainers.length) {\n            return false;\n        }\n        for (let i = 0; i < managedContainers.length; i++) {\n            if (managedContainers[i].contains(target)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    findTabbableParent(node, limit = 5) {\n        let counter = 0;\n        while (node && getTabIndex(node) === null && ++counter <= limit) {\n            node = node.parentElement;\n        }\n        if (getTabIndex(node) === null) {\n            return null;\n        }\n        return node;\n    }\n    focusGridView(column, backwards) {\n        // if suppressCellFocus is `true`, it means the user does not want to\n        // navigate between the cells using tab. Instead, we put focus on either\n        // the header or after the grid, depending on whether tab or shift-tab was pressed.\n        if (this.gridOptionsService.get('suppressCellFocus')) {\n            if (backwards) {\n                return this.focusLastHeader();\n            }\n            return this.focusNextGridCoreContainer(false);\n        }\n        const nextRow = backwards\n            ? this.rowPositionUtils.getLastRow()\n            : this.rowPositionUtils.getFirstRow();\n        if (!nextRow) {\n            return false;\n        }\n        const { rowIndex, rowPinned } = nextRow;\n        const focusedHeader = this.getFocusedHeader();\n        if (!column && focusedHeader) {\n            column = focusedHeader.column;\n        }\n        if (rowIndex == null || !column) {\n            return false;\n        }\n        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });\n        this.setFocusedCell({\n            rowIndex,\n            column,\n            rowPinned: makeNull(rowPinned),\n            forceBrowserFocus: true\n        });\n        if (this.rangeService) {\n            const cellPosition = { rowIndex, rowPinned, column };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n        return true;\n    }\n    focusNextGridCoreContainer(backwards, forceOut = false) {\n        if (!forceOut && this.gridCtrl.focusNextInnerContainer(backwards)) {\n            return true;\n        }\n        if (forceOut || (!backwards && !this.gridCtrl.isDetailGrid())) {\n            this.gridCtrl.forceFocusOutOfContainer(backwards);\n        }\n        return false;\n    }\n    focusAdvancedFilter(position) {\n        this.advancedFilterFocusColumn = position === null || position === void 0 ? void 0 : position.column;\n        return this.advancedFilterService.getCtrl().focusHeaderComp();\n    }\n    focusNextFromAdvancedFilter(backwards, forceFirstColumn) {\n        var _a, _b;\n        const column = (_a = (forceFirstColumn ? undefined : this.advancedFilterFocusColumn)) !== null && _a !== void 0 ? _a : (_b = this.columnModel.getAllDisplayedColumns()) === null || _b === void 0 ? void 0 : _b[0];\n        if (backwards) {\n            return this.focusHeaderPosition({\n                headerPosition: {\n                    column: column,\n                    headerRowIndex: this.headerNavigationService.getHeaderRowCount() - 1\n                }\n            });\n        }\n        else {\n            return this.focusGridView(column);\n        }\n    }\n    clearAdvancedFilterColumn() {\n        this.advancedFilterFocusColumn = undefined;\n    }\n};\nFocusService.keyboardModeActive = false;\nFocusService.instanceCount = 0;\n__decorate([\n    Autowired('eGridDiv')\n], FocusService.prototype, \"eGridDiv\", void 0);\n__decorate([\n    Autowired('columnModel')\n], FocusService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('headerNavigationService')\n], FocusService.prototype, \"headerNavigationService\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], FocusService.prototype, \"rowRenderer\", void 0);\n__decorate([\n    Autowired('rowPositionUtils')\n], FocusService.prototype, \"rowPositionUtils\", void 0);\n__decorate([\n    Autowired('cellPositionUtils')\n], FocusService.prototype, \"cellPositionUtils\", void 0);\n__decorate([\n    Optional('rangeService')\n], FocusService.prototype, \"rangeService\", void 0);\n__decorate([\n    Autowired('navigationService')\n], FocusService.prototype, \"navigationService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], FocusService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('filterManager')\n], FocusService.prototype, \"filterManager\", void 0);\n__decorate([\n    Optional('advancedFilterService')\n], FocusService.prototype, \"advancedFilterService\", void 0);\n__decorate([\n    PostConstruct\n], FocusService.prototype, \"init\", null);\nFocusService = FocusService_1 = __decorate([\n    Bean('focusService')\n], FocusService);\nexport { FocusService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Bean } from \"../context/context.mjs\";\nimport { Events } from \"../events.mjs\";\nlet ColumnHoverService = class ColumnHoverService extends BeanStub {\n    setMouseOver(columns) {\n        this.selectedColumns = columns;\n        const event = {\n            type: Events.EVENT_COLUMN_HOVER_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    clearMouseOver() {\n        this.selectedColumns = null;\n        const event = {\n            type: Events.EVENT_COLUMN_HOVER_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    isHovered(column) {\n        return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;\n    }\n};\nColumnHoverService = __decorate([\n    Bean('columnHoverService')\n], ColumnHoverService);\nexport { ColumnHoverService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet ColumnAnimationService = class ColumnAnimationService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.executeNextFuncs = [];\n        this.executeLaterFuncs = [];\n        this.active = false;\n        this.animationThreadCount = 0;\n    }\n    postConstruct() {\n        this.ctrlsService.whenReady(p => this.gridBodyCtrl = p.gridBodyCtrl);\n    }\n    isActive() {\n        return this.active;\n    }\n    start() {\n        if (this.active) {\n            return;\n        }\n        if (this.gridOptionsService.get('suppressColumnMoveAnimation')) {\n            return;\n        }\n        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,\n        // the animation moves all the row the the right rather than to the left (ie it's the static\n        // columns that actually get their coordinates updated)\n        if (this.gridOptionsService.get('enableRtl')) {\n            return;\n        }\n        this.ensureAnimationCssClassPresent();\n        this.active = true;\n    }\n    finish() {\n        if (!this.active) {\n            return;\n        }\n        this.flush();\n        this.active = false;\n    }\n    executeNextVMTurn(func) {\n        if (this.active) {\n            this.executeNextFuncs.push(func);\n        }\n        else {\n            func();\n        }\n    }\n    executeLaterVMTurn(func) {\n        if (this.active) {\n            this.executeLaterFuncs.push(func);\n        }\n        else {\n            func();\n        }\n    }\n    ensureAnimationCssClassPresent() {\n        // up the count, so we can tell if someone else has updated the count\n        // by the time the 'wait' func executes\n        this.animationThreadCount++;\n        const animationThreadCountCopy = this.animationThreadCount;\n        this.gridBodyCtrl.setColumnMovingCss(true);\n        this.executeLaterFuncs.push(() => {\n            // only remove the class if this thread was the last one to update it\n            if (this.animationThreadCount === animationThreadCountCopy) {\n                this.gridBodyCtrl.setColumnMovingCss(false);\n            }\n        });\n    }\n    flush() {\n        const nowFuncs = this.executeNextFuncs;\n        this.executeNextFuncs = [];\n        const waitFuncs = this.executeLaterFuncs;\n        this.executeLaterFuncs = [];\n        if (nowFuncs.length === 0 && waitFuncs.length === 0) {\n            return;\n        }\n        window.setTimeout(() => nowFuncs.forEach(func => func()), 0);\n        window.setTimeout(() => waitFuncs.forEach(func => func()), 300);\n    }\n};\n__decorate([\n    Autowired('ctrlsService')\n], ColumnAnimationService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    PostConstruct\n], ColumnAnimationService.prototype, \"postConstruct\", null);\nColumnAnimationService = __decorate([\n    Bean('columnAnimationService')\n], ColumnAnimationService);\nexport { ColumnAnimationService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { debounce } from \"../utils/function.mjs\";\nlet PaginationAutoPageSizeService = class PaginationAutoPageSizeService extends BeanStub {\n    postConstruct() {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCon = p.centerRowContainerCtrl;\n            this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.checkPageSize.bind(this));\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.checkPageSize.bind(this));\n            this.addManagedPropertyListener('paginationAutoPageSize', this.onPaginationAutoSizeChanged.bind(this));\n            this.checkPageSize();\n        });\n    }\n    notActive() {\n        return !this.gridOptionsService.get('paginationAutoPageSize') || this.centerRowContainerCon == null;\n    }\n    onPaginationAutoSizeChanged() {\n        if (this.notActive()) {\n            this.paginationProxy.unsetAutoCalculatedPageSize();\n        }\n        else {\n            this.checkPageSize();\n        }\n    }\n    checkPageSize() {\n        if (this.notActive()) {\n            return;\n        }\n        const bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();\n        if (bodyHeight > 0) {\n            const update = () => {\n                const rowHeight = this.gridOptionsService.getRowHeightAsNumber();\n                const newPageSize = Math.floor(bodyHeight / rowHeight);\n                this.paginationProxy.setPageSize(newPageSize, 'autoCalculated');\n            };\n            if (!this.isBodyRendered) {\n                update();\n                this.isBodyRendered = true;\n            }\n            else {\n                debounce(() => update(), 50)();\n            }\n        }\n        else {\n            this.isBodyRendered = false;\n        }\n    }\n};\n__decorate([\n    Autowired('ctrlsService')\n], PaginationAutoPageSizeService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], PaginationAutoPageSizeService.prototype, \"paginationProxy\", void 0);\n__decorate([\n    PostConstruct\n], PaginationAutoPageSizeService.prototype, \"postConstruct\", null);\nPaginationAutoPageSizeService = __decorate([\n    Bean('paginationAutoPageSizeService')\n], PaginationAutoPageSizeService);\nexport { PaginationAutoPageSizeService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet ValueCache = class ValueCache extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.cacheVersion = 0;\n    }\n    init() {\n        this.active = this.gridOptionsService.get('valueCache');\n        this.neverExpires = this.gridOptionsService.get('valueCacheNeverExpires');\n    }\n    onDataChanged() {\n        if (this.neverExpires) {\n            return;\n        }\n        this.expire();\n    }\n    expire() {\n        this.cacheVersion++;\n    }\n    setValue(rowNode, colId, value) {\n        if (this.active) {\n            if (rowNode.__cacheVersion !== this.cacheVersion) {\n                rowNode.__cacheVersion = this.cacheVersion;\n                rowNode.__cacheData = {};\n            }\n            rowNode.__cacheData[colId] = value;\n        }\n    }\n    getValue(rowNode, colId) {\n        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {\n            return undefined;\n        }\n        return rowNode.__cacheData[colId];\n    }\n};\n__decorate([\n    PostConstruct\n], ValueCache.prototype, \"init\", null);\nValueCache = __decorate([\n    Bean('valueCache')\n], ValueCache);\nexport { ValueCache };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { ChangedPath } from \"../utils/changedPath.mjs\";\nimport { Events } from \"../events.mjs\";\n// Matches value in clipboard module\nconst SOURCE_PASTE = 'paste';\nlet ChangeDetectionService = class ChangeDetectionService extends BeanStub {\n    init() {\n        if (this.rowModel.getType() === 'clientSide') {\n            this.clientSideRowModel = this.rowModel;\n        }\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));\n    }\n    onCellValueChanged(event) {\n        // Clipboard service manages its own change detection, so no need to do it here.\n        // The clipboard manages its own as otherwise this would happen once for every cell\n        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\n        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\n        // service executes the logic we have here once (in essence batching up all cell changes\n        // into one change detection).\n        if (event.source === SOURCE_PASTE) {\n            return;\n        }\n        this.doChangeDetection(event.node, event.column);\n    }\n    doChangeDetection(rowNode, column) {\n        if (this.gridOptionsService.get('suppressChangeDetection')) {\n            return;\n        }\n        const nodesToRefresh = [rowNode];\n        // step 1 of change detection is to update the aggregated values\n        if (this.clientSideRowModel && !rowNode.isRowPinned()) {\n            const onlyChangedColumns = this.gridOptionsService.get('aggregateOnlyChangedColumns');\n            const changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n            changedPath.addParentNode(rowNode.parent, [column]);\n            this.clientSideRowModel.doAggregate(changedPath);\n            // add all nodes impacted by aggregation, as they need refreshed also.\n            changedPath.forEachChangedNodeDepthFirst(rowNode => {\n                nodesToRefresh.push(rowNode);\n            });\n        }\n        // step 2 of change detection is to refresh the cells\n        this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], ChangeDetectionService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('rowRenderer')\n], ChangeDetectionService.prototype, \"rowRenderer\", void 0);\n__decorate([\n    PostConstruct\n], ChangeDetectionService.prototype, \"init\", null);\nChangeDetectionService = __decorate([\n    Bean('changeDetectionService')\n], ChangeDetectionService);\nexport { ChangeDetectionService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../../context/context.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { loadTemplate } from \"../../utils/dom.mjs\";\nlet AgComponentUtils = class AgComponentUtils extends BeanStub {\n    adaptFunction(propertyName, jsCompFunc) {\n        const metadata = this.componentMetadataProvider.retrieve(propertyName);\n        if (metadata && metadata.functionAdapter) {\n            return metadata.functionAdapter(jsCompFunc);\n        }\n        return null;\n    }\n    adaptCellRendererFunction(callback) {\n        class Adapter {\n            refresh(params) {\n                return false;\n            }\n            getGui() {\n                return this.eGui;\n            }\n            init(params) {\n                const callbackResult = callback(params);\n                const type = typeof callbackResult;\n                if (type === 'string' || type === 'number' || type === 'boolean') {\n                    this.eGui = loadTemplate('<span>' + callbackResult + '</span>');\n                    return;\n                }\n                if (callbackResult == null) {\n                    this.eGui = loadTemplate('<span></span>');\n                    return;\n                }\n                this.eGui = callbackResult;\n            }\n        }\n        return Adapter;\n    }\n    doesImplementIComponent(candidate) {\n        if (!candidate) {\n            return false;\n        }\n        return candidate.prototype && 'getGui' in candidate.prototype;\n    }\n};\n__decorate([\n    Autowired(\"componentMetadataProvider\")\n], AgComponentUtils.prototype, \"componentMetadataProvider\", void 0);\nAgComponentUtils = __decorate([\n    Bean(\"agComponentUtils\")\n], AgComponentUtils);\nexport { AgComponentUtils };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../../context/context.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nlet ComponentMetadataProvider = class ComponentMetadataProvider extends BeanStub {\n    postConstruct() {\n        this.componentMetaData = {\n            dateComponent: {\n                mandatoryMethodList: ['getDate', 'setDate'],\n                optionalMethodList: ['afterGuiAttached', 'setInputPlaceholder', 'setInputAriaLabel']\n            },\n            detailCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            headerComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh']\n            },\n            headerGroupComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            loadingCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            loadingOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            noRowsOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            floatingFilterComponent: {\n                mandatoryMethodList: ['onParentModelChanged'],\n                optionalMethodList: ['afterGuiAttached']\n            },\n            floatingFilterWrapperComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            cellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            cellEditor: {\n                mandatoryMethodList: ['getValue'],\n                optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'getPopupPosition', 'focusIn', 'focusOut', 'afterGuiAttached']\n            },\n            innerRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            fullWidthCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            groupRowRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            filter: {\n                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\n                optionalMethodList: ['afterGuiAttached', 'afterGuiDetached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged', 'onAnyFilterChanged']\n            },\n            filterComponent: {\n                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\n                optionalMethodList: ['afterGuiAttached', 'afterGuiDetached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged', 'onAnyFilterChanged']\n            },\n            statusPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n            },\n            toolPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached']\n            },\n            tooltipComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            }\n        };\n    }\n    retrieve(name) {\n        return this.componentMetaData[name];\n    }\n};\n__decorate([\n    Autowired(\"agComponentUtils\")\n], ComponentMetadataProvider.prototype, \"agComponentUtils\", void 0);\n__decorate([\n    PostConstruct\n], ComponentMetadataProvider.prototype, \"postConstruct\", null);\nComponentMetadataProvider = __decorate([\n    Bean(\"componentMetadataProvider\")\n], ComponentMetadataProvider);\nexport { ComponentMetadataProvider };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, Autowired, PostConstruct } from './context/context.mjs';\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { exists } from './utils/generic.mjs';\nimport { Events } from './eventKeys.mjs';\nconst DEFAULT_ROW_HEIGHT = 25;\nconst MIN_COL_WIDTH = 10;\nconst MAT_GRID_SIZE = 8;\nconst BASE_GRID_SIZE = 4;\nconst BALHAM_GRID_SIZE = 4;\nconst ALPINE_GRID_SIZE = 6;\nconst QUARTZ_ICON_SIZE = 16;\nconst QUARTZ_FONT_SIZE = 14;\nconst QUARTZ_GRID_SIZE = 8;\nconst HARD_CODED_SIZES = {\n    // this item is required for custom themes\n    'ag-theme-custom': {\n        headerHeight: 25,\n        headerCellMinWidth: 24,\n        listItemHeight: BASE_GRID_SIZE * 5,\n        rowHeight: 25,\n        chartMenuPanelWidth: 220\n    },\n    'ag-theme-material': {\n        headerHeight: MAT_GRID_SIZE * 7,\n        headerCellMinWidth: 48,\n        listItemHeight: MAT_GRID_SIZE * 4,\n        rowHeight: MAT_GRID_SIZE * 6,\n        chartMenuPanelWidth: 240\n    },\n    'ag-theme-balham': {\n        headerHeight: BALHAM_GRID_SIZE * 8,\n        headerCellMinWidth: 24,\n        listItemHeight: BALHAM_GRID_SIZE * 6,\n        rowHeight: BALHAM_GRID_SIZE * 7,\n        chartMenuPanelWidth: 220\n    },\n    'ag-theme-alpine': {\n        headerHeight: ALPINE_GRID_SIZE * 8,\n        headerCellMinWidth: 36,\n        listItemHeight: ALPINE_GRID_SIZE * 4,\n        rowHeight: ALPINE_GRID_SIZE * 7,\n        chartMenuPanelWidth: 240\n    },\n    'ag-theme-quartz': {\n        headerHeight: QUARTZ_FONT_SIZE + QUARTZ_GRID_SIZE * 4.25,\n        headerCellMinWidth: 36,\n        listItemHeight: QUARTZ_ICON_SIZE + QUARTZ_GRID_SIZE,\n        rowHeight: QUARTZ_FONT_SIZE + QUARTZ_GRID_SIZE * 3.5,\n        chartMenuPanelWidth: 260\n    }\n};\n/**\n * this object contains a list of Sass variables and an array\n * of CSS styles required to get the correct value.\n * eg. $virtual-item-height requires a structure, so we can get its height.\n * <div class=\"ag-theme-balham\">\n *     <div class=\"ag-virtual-list-container\">\n *         <div class=\"ag-virtual-list-item\"></div>\n *     </div>\n * </div>\n */\nconst SASS_PROPERTY_BUILDER = {\n    headerHeight: ['ag-header-row'],\n    headerCellMinWidth: ['ag-header-cell'],\n    listItemHeight: ['ag-virtual-list-item'],\n    rowHeight: ['ag-row'],\n    chartMenuPanelWidth: ['ag-chart-docked-container']\n};\nlet Environment = class Environment extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.calculatedSizes = {};\n    }\n    postConstruct() {\n        var _a;\n        const el = (_a = this.getTheme().el) !== null && _a !== void 0 ? _a : this.eGridDiv;\n        this.addManagedPropertyListener('rowHeight', () => this.refreshRowHeightVariable());\n        this.mutationObserver = new MutationObserver(() => {\n            this.calculatedSizes = {};\n            this.fireGridStylesChangedEvent();\n        });\n        this.mutationObserver.observe(el || this.eGridDiv, {\n            attributes: true,\n            attributeFilter: ['class']\n        });\n    }\n    fireGridStylesChangedEvent() {\n        const event = {\n            type: Events.EVENT_GRID_STYLES_CHANGED\n        };\n        this.eventService.dispatchEvent(event);\n    }\n    getSassVariable(key) {\n        const { themeFamily, el } = this.getTheme();\n        if (!themeFamily || themeFamily.indexOf('ag-theme') !== 0) {\n            return;\n        }\n        if (!this.calculatedSizes) {\n            this.calculatedSizes = {};\n        }\n        if (!this.calculatedSizes[themeFamily]) {\n            this.calculatedSizes[themeFamily] = {};\n        }\n        const size = this.calculatedSizes[themeFamily][key];\n        if (size != null) {\n            return size;\n        }\n        this.calculatedSizes[themeFamily][key] = this.calculateValueForSassProperty(key, themeFamily, el);\n        return this.calculatedSizes[themeFamily][key];\n    }\n    calculateValueForSassProperty(property, theme, themeElement) {\n        const useTheme = 'ag-theme-' + (theme.match('material') ? 'material' : theme.match('balham') ? 'balham' : theme.match('alpine') ? 'alpine' : 'custom');\n        const defaultValue = HARD_CODED_SIZES[useTheme][property];\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!themeElement) {\n            themeElement = this.eGridDiv;\n        }\n        if (!SASS_PROPERTY_BUILDER[property]) {\n            return defaultValue;\n        }\n        const classList = SASS_PROPERTY_BUILDER[property];\n        const div = eDocument.createElement('div');\n        // this will apply SASS variables that were manually added to the current theme\n        const classesFromThemeElement = Array.from(themeElement.classList);\n        div.classList.add(theme, ...classesFromThemeElement);\n        div.style.position = 'absolute';\n        const el = classList.reduce((prevEl, currentClass) => {\n            const currentDiv = eDocument.createElement('div');\n            currentDiv.style.position = 'static';\n            currentDiv.classList.add(currentClass);\n            prevEl.appendChild(currentDiv);\n            return currentDiv;\n        }, div);\n        let calculatedValue = 0;\n        if (eDocument.body) {\n            eDocument.body.appendChild(div);\n            const sizeName = property.toLowerCase().indexOf('height') !== -1 ? 'height' : 'width';\n            calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);\n            eDocument.body.removeChild(div);\n        }\n        return calculatedValue || defaultValue;\n    }\n    isThemeDark() {\n        const { theme } = this.getTheme();\n        return !!theme && theme.indexOf('dark') >= 0;\n    }\n    chartMenuPanelWidth() {\n        return this.getSassVariable('chartMenuPanelWidth');\n    }\n    getTheme() {\n        const reg = /\\bag-(material|(?:theme-([\\w\\-]*)))\\b/g;\n        let el = this.eGridDiv;\n        let themeMatch = null;\n        let allThemes = [];\n        while (el) {\n            themeMatch = reg.exec(el.className);\n            if (!themeMatch) {\n                el = el.parentElement || undefined;\n            }\n            else {\n                const matched = el.className.match(reg);\n                if (matched) {\n                    allThemes = matched;\n                }\n                break;\n            }\n        }\n        if (!themeMatch) {\n            return { allThemes };\n        }\n        const theme = themeMatch[0];\n        return { theme, el, themeFamily: theme.replace(/-dark$/, ''), allThemes };\n    }\n    getFromTheme(defaultValue, sassVariableName) {\n        var _a;\n        return (_a = this.getSassVariable(sassVariableName)) !== null && _a !== void 0 ? _a : defaultValue;\n    }\n    getDefaultRowHeight() {\n        return this.getFromTheme(DEFAULT_ROW_HEIGHT, 'rowHeight');\n    }\n    getListItemHeight() {\n        return this.getFromTheme(20, 'listItemHeight');\n    }\n    refreshRowHeightVariable() {\n        const oldRowHeight = this.eGridDiv.style.getPropertyValue('--ag-line-height').trim();\n        const height = this.gridOptionsService.get('rowHeight');\n        if (height == null || isNaN(height) || !isFinite(height)) {\n            if (oldRowHeight !== null) {\n                this.eGridDiv.style.setProperty('--ag-line-height', null);\n            }\n            return -1;\n        }\n        const newRowHeight = `${height}px`;\n        if (oldRowHeight != newRowHeight) {\n            this.eGridDiv.style.setProperty('--ag-line-height', newRowHeight);\n            return height;\n        }\n        return oldRowHeight != '' ? parseFloat(oldRowHeight) : -1;\n    }\n    getMinColWidth() {\n        const measuredMin = this.getFromTheme(null, 'headerCellMinWidth');\n        return exists(measuredMin) ? Math.max(measuredMin, MIN_COL_WIDTH) : MIN_COL_WIDTH;\n    }\n    destroy() {\n        this.calculatedSizes = null;\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n        super.destroy();\n    }\n};\n__decorate([\n    Autowired('eGridDiv')\n], Environment.prototype, \"eGridDiv\", void 0);\n__decorate([\n    PostConstruct\n], Environment.prototype, \"postConstruct\", null);\nEnvironment = __decorate([\n    Bean('environment')\n], Environment);\nexport { Environment };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct, Qualifier } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { getMaxDivHeight } from \"../utils/browser.mjs\";\n/**\n * This class solves the 'max height' problem, where the user might want to show more data than\n * the max div height actually allows.\n */\nlet RowContainerHeightService = class RowContainerHeightService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        // the scrollY position\n        this.scrollY = 0;\n        // how tall the body is\n        this.uiBodyHeight = 0;\n    }\n    agWire(loggerFactory) {\n        this.logger = loggerFactory.create(\"RowContainerHeightService\");\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));\n        this.maxDivHeight = getMaxDivHeight();\n        this.logger.log('maxDivHeight = ' + this.maxDivHeight);\n    }\n    isStretching() {\n        return this.stretching;\n    }\n    getDivStretchOffset() {\n        return this.divStretchOffset;\n    }\n    updateOffset() {\n        if (!this.stretching) {\n            return;\n        }\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;\n        const newBodyHeight = this.getUiBodyHeight();\n        const atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\n        if (atLeastOneChanged) {\n            this.scrollY = newScrollY;\n            this.uiBodyHeight = newBodyHeight;\n            this.calculateOffset();\n        }\n    }\n    calculateOffset() {\n        this.setUiContainerHeight(this.maxDivHeight);\n        this.pixelsToShave = this.modelHeight - this.uiContainerHeight;\n        this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;\n        const scrollPercent = this.scrollY / this.maxScrollY;\n        const divStretchOffset = scrollPercent * this.pixelsToShave;\n        this.logger.log(`Div Stretch Offset = ${divStretchOffset} (${this.pixelsToShave} * ${scrollPercent})`);\n        this.setDivStretchOffset(divStretchOffset);\n    }\n    setUiContainerHeight(height) {\n        if (height !== this.uiContainerHeight) {\n            this.uiContainerHeight = height;\n            this.eventService.dispatchEvent({ type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED });\n        }\n    }\n    clearOffset() {\n        this.setUiContainerHeight(this.modelHeight);\n        this.pixelsToShave = 0;\n        this.setDivStretchOffset(0);\n    }\n    setDivStretchOffset(newOffset) {\n        // because we are talking pixels, no point in confusing things with half numbers\n        const newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\n        if (this.divStretchOffset === newOffsetFloor) {\n            return;\n        }\n        this.divStretchOffset = newOffsetFloor;\n        this.eventService.dispatchEvent({ type: Events.EVENT_HEIGHT_SCALE_CHANGED });\n    }\n    setModelHeight(modelHeight) {\n        this.modelHeight = modelHeight;\n        this.stretching = modelHeight != null // null happens when in print layout\n            && this.maxDivHeight > 0\n            && modelHeight > this.maxDivHeight;\n        if (this.stretching) {\n            this.calculateOffset();\n        }\n        else {\n            this.clearOffset();\n        }\n    }\n    getUiContainerHeight() {\n        return this.uiContainerHeight;\n    }\n    getRealPixelPosition(modelPixel) {\n        return modelPixel - this.divStretchOffset;\n    }\n    getUiBodyHeight() {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const pos = gridBodyCon.getScrollFeature().getVScrollPosition();\n        return pos.bottom - pos.top;\n    }\n    getScrollPositionForPixel(rowTop) {\n        if (this.pixelsToShave <= 0) {\n            return rowTop;\n        }\n        const modelMaxScroll = this.modelHeight - this.getUiBodyHeight();\n        const scrollPercent = rowTop / modelMaxScroll;\n        const scrollPixel = this.maxScrollY * scrollPercent;\n        return scrollPixel;\n    }\n};\n__decorate([\n    Autowired('ctrlsService')\n], RowContainerHeightService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    __param(0, Qualifier(\"loggerFactory\"))\n], RowContainerHeightService.prototype, \"agWire\", null);\n__decorate([\n    PostConstruct\n], RowContainerHeightService.prototype, \"postConstruct\", null);\nRowContainerHeightService = __decorate([\n    Bean('rowContainerHeightService')\n], RowContainerHeightService);\nexport { RowContainerHeightService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { SelectionService } from \"../selectionService.mjs\";\nimport { ChangedPath } from \"../utils/changedPath.mjs\";\nlet SelectableService = class SelectableService extends BeanStub {\n    init() {\n        this.addManagedPropertyListener('isRowSelectable', () => this.updateSelectable());\n    }\n    /**\n     * Used by CSRM only, to update selectable state after group state changes.\n     */\n    updateSelectableAfterGrouping() {\n        this.updateSelectable(true);\n    }\n    updateSelectable(skipLeafNodes = false) {\n        const isRowSelecting = !!this.gridOptionsService.get('rowSelection');\n        const isRowSelectable = this.gridOptionsService.get('isRowSelectable');\n        if (!isRowSelecting || !isRowSelectable) {\n            return;\n        }\n        const isGroupSelectsChildren = this.gridOptionsService.get('groupSelectsChildren');\n        const isCsrmGroupSelectsChildren = this.rowModel.getType() === 'clientSide' && isGroupSelectsChildren;\n        const nodesToDeselect = [];\n        const nodeCallback = (node) => {\n            if (skipLeafNodes && !node.group) {\n                return;\n            }\n            // Only in the CSRM, we allow group node selection if a child has a selectable=true when using groupSelectsChildren\n            if (isCsrmGroupSelectsChildren && node.group) {\n                const hasSelectableChild = node.childrenAfterGroup.some(rowNode => rowNode.selectable === true);\n                node.setRowSelectable(hasSelectableChild, true);\n                return;\n            }\n            const rowSelectable = isRowSelectable ? isRowSelectable(node) : true;\n            node.setRowSelectable(rowSelectable, true);\n            if (!rowSelectable && node.isSelected()) {\n                nodesToDeselect.push(node);\n            }\n        };\n        // Needs to be depth first in this case, so that parents can be updated based on child.\n        if (isCsrmGroupSelectsChildren) {\n            const csrm = this.rowModel;\n            const changedPath = new ChangedPath(false, csrm.getRootNode());\n            changedPath.forEachChangedNodeDepthFirst(nodeCallback, true, true);\n        }\n        else {\n            // Normal case, update all rows\n            this.rowModel.forEachNode(nodeCallback);\n        }\n        if (nodesToDeselect.length) {\n            this.selectionService.setNodesSelected({ nodes: nodesToDeselect, newValue: false, source: 'selectableChanged' });\n        }\n        // if csrm and group selects children, update the groups after deselecting leaf nodes.\n        if (isCsrmGroupSelectsChildren && this.selectionService instanceof SelectionService) {\n            this.selectionService.updateGroupsFromChildrenSelections('selectableChanged');\n        }\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], SelectableService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('selectionService')\n], SelectableService.prototype, \"selectionService\", void 0);\n__decorate([\n    PostConstruct\n], SelectableService.prototype, \"init\", null);\nSelectableService = __decorate([\n    Bean('selectableService')\n], SelectableService);\nexport { SelectableService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../widgets/component.mjs\";\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { RefSelector } from \"../widgets/componentAnnotations.mjs\";\nimport { Events } from \"../events.mjs\";\nimport { createIconNoSpan } from \"../utils/icon.mjs\";\nimport { formatNumberCommas } from \"../utils/number.mjs\";\nimport { setAriaDisabled } from \"../utils/aria.mjs\";\nimport { KeyCode } from '../constants/keyCode.mjs';\nexport class PaginationComp extends Component {\n    constructor() {\n        super();\n        this.previousAndFirstButtonsDisabled = false;\n        this.nextButtonDisabled = false;\n        this.lastButtonDisabled = false;\n        this.areListenersSetup = false;\n    }\n    postConstruct() {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        this.setTemplate(this.getTemplate());\n        const { btFirst, btPrevious, btNext, btLast, pageSizeComp } = this;\n        this.activateTabIndex([btFirst, btPrevious, btNext, btLast]);\n        btFirst.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'last' : 'first', this.gridOptionsService));\n        btPrevious.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'next' : 'previous', this.gridOptionsService));\n        btNext.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'previous' : 'next', this.gridOptionsService));\n        btLast.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'first' : 'last', this.gridOptionsService));\n        this.addManagedPropertyListener('pagination', this.onPaginationChanged.bind(this));\n        this.addManagedPropertyListener('suppressPaginationPanel', this.onPaginationChanged.bind(this));\n        this.addManagedPropertyListeners(['paginationPageSizeSelector', 'paginationAutoPageSize', 'suppressPaginationPanel'], () => this.onPageSizeRelatedOptionsChange());\n        this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());\n        this.onPaginationChanged();\n    }\n    onPaginationChanged() {\n        const isPaging = this.gridOptionsService.get('pagination');\n        const paginationPanelEnabled = isPaging && !this.gridOptionsService.get('suppressPaginationPanel');\n        this.setDisplayed(paginationPanelEnabled);\n        if (!paginationPanelEnabled) {\n            return;\n        }\n        this.setupListeners();\n        this.enableOrDisableButtons();\n        this.updateRowLabels();\n        this.setCurrentPageLabel();\n        this.setTotalLabels();\n        this.onPageSizeRelatedOptionsChange();\n    }\n    onPageSizeRelatedOptionsChange() {\n        this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());\n    }\n    setupListeners() {\n        if (!this.areListenersSetup) {\n            this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));\n            [\n                { el: this.btFirst, fn: this.onBtFirst.bind(this) },\n                { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },\n                { el: this.btNext, fn: this.onBtNext.bind(this) },\n                { el: this.btLast, fn: this.onBtLast.bind(this) }\n            ].forEach(item => {\n                const { el, fn } = item;\n                this.addManagedListener(el, 'click', fn);\n                this.addManagedListener(el, 'keydown', (e) => {\n                    if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                        e.preventDefault();\n                        fn();\n                    }\n                });\n            });\n            this.areListenersSetup = true;\n        }\n    }\n    onBtFirst() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationProxy.goToFirstPage();\n        }\n    }\n    setCurrentPageLabel() {\n        const pagesExist = this.paginationProxy.getTotalPages() > 0;\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const toDisplay = pagesExist ? currentPage + 1 : 0;\n        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);\n    }\n    formatNumber(value) {\n        const userFunc = this.gridOptionsService.getCallback('paginationNumberFormatter');\n        if (userFunc) {\n            const params = { value: value };\n            return userFunc(params);\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        return formatNumberCommas(value, thousandSeparator, decimalSeparator);\n    }\n    getTemplate() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const strPage = localeTextFunc('page', 'Page');\n        const strTo = localeTextFunc('to', 'to');\n        const strOf = localeTextFunc('of', 'of');\n        const strFirst = localeTextFunc('firstPage', 'First Page');\n        const strPrevious = localeTextFunc('previousPage', 'Previous Page');\n        const strNext = localeTextFunc('nextPage', 'Next Page');\n        const strLast = localeTextFunc('lastPage', 'Last Page');\n        const compId = this.getCompId();\n        return /* html */ `<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-${compId}\">\n                <ag-page-size-selector ref=\"pageSizeComp\"></ag-page-size-selector>\n                <span class=\"ag-paging-row-summary-panel\" role=\"status\">\n                    <span id=\"ag-${compId}-first-row\" ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-to\">${strTo}</span>\n                    <span id=\"ag-${compId}-last-row\" ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-of\">${strOf}</span>\n                    <span id=\"ag-${compId}-row-count\" ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\n                    <div ref=\"btFirst\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strFirst}\"></div>\n                    <div ref=\"btPrevious\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strPrevious}\"></div>\n                    <span class=\"ag-paging-description\" role=\"status\">\n                        <span id=\"ag-${compId}-start-page\">${strPage}</span>\n                        <span id=\"ag-${compId}-start-page-number\" ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\n                        <span id=\"ag-${compId}-of-page\">${strOf}</span>\n                        <span id=\"ag-${compId}-of-page-number\" ref=\"lbTotal\" class=\"ag-paging-number\"></span>\n                    </span>\n                    <div ref=\"btNext\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strNext}\"></div>\n                    <div ref=\"btLast\" class=\"ag-button ag-paging-button\" role=\"button\" aria-label=\"${strLast}\"></div>\n                </span>\n            </div>`;\n    }\n    onBtNext() {\n        if (!this.nextButtonDisabled) {\n            this.paginationProxy.goToNextPage();\n        }\n    }\n    onBtPrevious() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationProxy.goToPreviousPage();\n        }\n    }\n    onBtLast() {\n        if (!this.lastButtonDisabled) {\n            this.paginationProxy.goToLastPage();\n        }\n    }\n    enableOrDisableButtons() {\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        this.previousAndFirstButtonsDisabled = currentPage === 0;\n        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);\n        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);\n        const zeroPagesToDisplay = this.isZeroPagesToDisplay();\n        const onLastPage = currentPage === (totalPages - 1);\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\n        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === (totalPages - 1);\n        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);\n        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);\n    }\n    toggleButtonDisabled(button, disabled) {\n        setAriaDisabled(button, disabled);\n        button.classList.toggle('ag-disabled', disabled);\n    }\n    updateRowLabels() {\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const pageSize = this.paginationProxy.getPageSize();\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const rowCount = this.paginationProxy.isLastPageFound() ?\n            this.paginationProxy.getMasterRowCount() : null;\n        let startRow;\n        let endRow;\n        if (this.isZeroPagesToDisplay()) {\n            startRow = endRow = 0;\n        }\n        else {\n            startRow = (pageSize * currentPage) + 1;\n            endRow = startRow + pageSize - 1;\n            if (maxRowFound && endRow > rowCount) {\n                endRow = rowCount;\n            }\n        }\n        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);\n        if (this.rowNodeBlockLoader.isLoading()) {\n            const translate = this.localeService.getLocaleTextFunc();\n            this.lbLastRowOnPage.innerHTML = translate('pageLastRowUnknown', '?');\n        }\n        else {\n            this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);\n        }\n    }\n    isZeroPagesToDisplay() {\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        return maxRowFound && totalPages === 0;\n    }\n    setTotalLabels() {\n        const lastPageFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        const rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;\n        // When `pivotMode=true` and no grouping or value columns exist, a single 'hidden' group row (root node) is in\n        // the grid and the pagination totals will correctly display total = 1. However this is confusing to users as\n        // they can't see it. To address this UX issue we simply set the totals to zero in the pagination panel.\n        if (rowCount === 1) {\n            const firstRow = this.paginationProxy.getRow(0);\n            // a group node with no group or agg data will not be visible to users\n            const hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);\n            if (hiddenGroupRow) {\n                this.setTotalLabelsToZero();\n                return;\n            }\n        }\n        if (lastPageFound) {\n            this.lbTotal.innerHTML = this.formatNumber(totalPages);\n            this.lbRecordCount.innerHTML = this.formatNumber(rowCount);\n        }\n        else {\n            const moreText = this.localeService.getLocaleTextFunc()('more', 'more');\n            this.lbTotal.innerHTML = moreText;\n            this.lbRecordCount.innerHTML = moreText;\n        }\n    }\n    setTotalLabelsToZero() {\n        this.lbFirstRowOnPage.innerHTML = this.formatNumber(0);\n        this.lbCurrent.innerHTML = this.formatNumber(0);\n        this.lbLastRowOnPage.innerHTML = this.formatNumber(0);\n        this.lbTotal.innerHTML = this.formatNumber(0);\n        this.lbRecordCount.innerHTML = this.formatNumber(0);\n    }\n}\n__decorate([\n    Autowired('paginationProxy')\n], PaginationComp.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('rowNodeBlockLoader')\n], PaginationComp.prototype, \"rowNodeBlockLoader\", void 0);\n__decorate([\n    RefSelector('btFirst')\n], PaginationComp.prototype, \"btFirst\", void 0);\n__decorate([\n    RefSelector('btPrevious')\n], PaginationComp.prototype, \"btPrevious\", void 0);\n__decorate([\n    RefSelector('btNext')\n], PaginationComp.prototype, \"btNext\", void 0);\n__decorate([\n    RefSelector('btLast')\n], PaginationComp.prototype, \"btLast\", void 0);\n__decorate([\n    RefSelector('lbRecordCount')\n], PaginationComp.prototype, \"lbRecordCount\", void 0);\n__decorate([\n    RefSelector('lbFirstRowOnPage')\n], PaginationComp.prototype, \"lbFirstRowOnPage\", void 0);\n__decorate([\n    RefSelector('lbLastRowOnPage')\n], PaginationComp.prototype, \"lbLastRowOnPage\", void 0);\n__decorate([\n    RefSelector('lbCurrent')\n], PaginationComp.prototype, \"lbCurrent\", void 0);\n__decorate([\n    RefSelector('lbTotal')\n], PaginationComp.prototype, \"lbTotal\", void 0);\n__decorate([\n    RefSelector('pageSizeComp')\n], PaginationComp.prototype, \"pageSizeComp\", void 0);\n__decorate([\n    PostConstruct\n], PaginationComp.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from '../../context/context.mjs';\nimport { Component } from '../../widgets/component.mjs';\nimport { RefSelector } from '../../widgets/componentAnnotations.mjs';\nimport { clearElement } from '../../utils/dom.mjs';\nimport { LayoutCssClasses, LayoutFeature } from \"../../styling/layoutFeature.mjs\";\nexport class OverlayWrapperComponent extends Component {\n    constructor() {\n        super(OverlayWrapperComponent.TEMPLATE);\n        this.inProgress = false;\n        this.destroyRequested = false;\n    }\n    updateLayoutClasses(cssClass, params) {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);\n    }\n    postConstruct() {\n        this.createManagedBean(new LayoutFeature(this));\n        this.setDisplayed(false, { skipAriaHidden: true });\n        this.overlayService.registerOverlayWrapperComp(this);\n    }\n    setWrapperTypeClass(overlayWrapperCssClass) {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        if (this.activeOverlayWrapperCssClass) {\n            overlayWrapperClassList.toggle(this.activeOverlayWrapperCssClass, false);\n        }\n        this.activeOverlayWrapperCssClass = overlayWrapperCssClass;\n        overlayWrapperClassList.toggle(overlayWrapperCssClass, true);\n    }\n    showOverlay(overlayComp, overlayWrapperCssClass) {\n        if (this.inProgress) {\n            return;\n        }\n        this.setWrapperTypeClass(overlayWrapperCssClass);\n        this.destroyActiveOverlay();\n        this.inProgress = true;\n        if (overlayComp) {\n            overlayComp.then(comp => {\n                this.inProgress = false;\n                this.eOverlayWrapper.appendChild(comp.getGui());\n                this.activeOverlay = comp;\n                if (this.destroyRequested) {\n                    this.destroyRequested = false;\n                    this.destroyActiveOverlay();\n                }\n            });\n        }\n        this.setDisplayed(true, { skipAriaHidden: true });\n    }\n    destroyActiveOverlay() {\n        if (this.inProgress) {\n            this.destroyRequested = true;\n            return;\n        }\n        if (!this.activeOverlay) {\n            return;\n        }\n        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);\n        clearElement(this.eOverlayWrapper);\n    }\n    hideOverlay() {\n        this.destroyActiveOverlay();\n        this.setDisplayed(false, { skipAriaHidden: true });\n    }\n    destroy() {\n        this.destroyActiveOverlay();\n        super.destroy();\n    }\n}\n// wrapping in outer div, and wrapper, is needed to center the loading icon\nOverlayWrapperComponent.TEMPLATE = `\n        <div class=\"ag-overlay\" aria-hidden=\"true\">\n            <div class=\"ag-overlay-panel\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>`;\n__decorate([\n    Autowired('overlayService')\n], OverlayWrapperComponent.prototype, \"overlayService\", void 0);\n__decorate([\n    RefSelector('eOverlayWrapper')\n], OverlayWrapperComponent.prototype, \"eOverlayWrapper\", void 0);\n__decorate([\n    PostConstruct\n], OverlayWrapperComponent.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { exists } from \"../utils/generic.mjs\";\nlet RowPositionUtils = class RowPositionUtils extends BeanStub {\n    getFirstRow() {\n        let rowIndex = 0;\n        let rowPinned;\n        if (this.pinnedRowModel.getPinnedTopRowCount()) {\n            rowPinned = 'top';\n        }\n        else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.paginationProxy.getPageFirstRow();\n        }\n        else if (this.pinnedRowModel.getPinnedBottomRowCount()) {\n            rowPinned = 'bottom';\n        }\n        return rowPinned === undefined ? null : { rowIndex, rowPinned };\n    }\n    getLastRow() {\n        let rowIndex;\n        let rowPinned = null;\n        const pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();\n        if (pinnedBottomCount) {\n            rowPinned = 'bottom';\n            rowIndex = pinnedBottomCount - 1;\n        }\n        else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.paginationProxy.getPageLastRow();\n        }\n        else if (pinnedTopCount) {\n            rowPinned = 'top';\n            rowIndex = pinnedTopCount - 1;\n        }\n        return rowIndex === undefined ? null : { rowIndex, rowPinned };\n    }\n    getRowNode(gridRow) {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n    sameRow(rowA, rowB) {\n        // if both missing\n        if (!rowA && !rowB) {\n            return true;\n        }\n        // if only one missing\n        if ((rowA && !rowB) || (!rowA && rowB)) {\n            return false;\n        }\n        // otherwise compare (use == to compare rowPinned because it can be null or undefined)\n        return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;\n    }\n    // tests if this row selection is before the other row selection\n    before(rowA, rowB) {\n        switch (rowA.rowPinned) {\n            case 'top':\n                // we we are floating top, and other isn't, then we are always before\n                if (rowB.rowPinned !== 'top') {\n                    return true;\n                }\n                break;\n            case 'bottom':\n                // if we are floating bottom, and the other isn't, then we are never before\n                if (rowB.rowPinned !== 'bottom') {\n                    return false;\n                }\n                break;\n            default:\n                // if we are not floating, but the other one is floating...\n                if (exists(rowB.rowPinned)) {\n                    return rowB.rowPinned !== 'top';\n                }\n                break;\n        }\n        return rowA.rowIndex < rowB.rowIndex;\n    }\n    rowMax(rows) {\n        let max;\n        rows.forEach((row) => {\n            if (max === undefined || this.before(max, row)) {\n                max = row;\n            }\n        });\n        return max;\n    }\n    rowMin(rows) {\n        let min;\n        rows.forEach((row) => {\n            if (min === undefined || this.before(row, min)) {\n                min = row;\n            }\n        });\n        return min;\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], RowPositionUtils.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], RowPositionUtils.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], RowPositionUtils.prototype, \"paginationProxy\", void 0);\nRowPositionUtils = __decorate([\n    Bean('rowPositionUtils')\n], RowPositionUtils);\nexport { RowPositionUtils };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"../context/context.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet CellPositionUtils = class CellPositionUtils extends BeanStub {\n    createId(cellPosition) {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return this.createIdFromValues({ rowIndex, column, rowPinned });\n    }\n    createIdFromValues(cellPosition) {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return `${rowIndex}.${rowPinned == null ? 'null' : rowPinned}.${column.getId()}`;\n    }\n    equals(cellA, cellB) {\n        const colsMatch = cellA.column === cellB.column;\n        const floatingMatch = cellA.rowPinned === cellB.rowPinned;\n        const indexMatch = cellA.rowIndex === cellB.rowIndex;\n        return colsMatch && floatingMatch && indexMatch;\n    }\n};\nCellPositionUtils = __decorate([\n    Bean('cellPositionUtils')\n], CellPositionUtils);\nexport { CellPositionUtils };\n","export class UndoRedoAction {\n    constructor(cellValueChanges) {\n        this.cellValueChanges = cellValueChanges;\n    }\n}\nexport class RangeUndoRedoAction extends UndoRedoAction {\n    constructor(cellValueChanges, initialRange, finalRange, ranges) {\n        super(cellValueChanges);\n        this.initialRange = initialRange;\n        this.finalRange = finalRange;\n        this.ranges = ranges;\n    }\n}\nexport class UndoRedoStack {\n    constructor(maxStackSize) {\n        this.actionStack = [];\n        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack.DEFAULT_STACK_SIZE;\n        this.actionStack = new Array(this.maxStackSize);\n    }\n    pop() {\n        return this.actionStack.pop();\n    }\n    push(item) {\n        const shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;\n        if (!shouldAddActions) {\n            return;\n        }\n        if (this.actionStack.length === this.maxStackSize) {\n            this.actionStack.shift();\n        }\n        this.actionStack.push(item);\n    }\n    clear() {\n        this.actionStack = [];\n    }\n    getCurrentStackSize() {\n        return this.actionStack.length;\n    }\n}\nUndoRedoStack.DEFAULT_STACK_SIZE = 10;\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { RangeUndoRedoAction, UndoRedoAction, UndoRedoStack } from \"./undoRedoStack.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nlet UndoRedoService = class UndoRedoService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.cellValueChanges = [];\n        this.activeCellEdit = null;\n        this.activeRowEdit = null;\n        this.isPasting = false;\n        this.isRangeInAction = false;\n        this.onCellValueChanged = (event) => {\n            const eventCell = { column: event.column, rowIndex: event.rowIndex, rowPinned: event.rowPinned };\n            const isCellEditing = this.activeCellEdit !== null && this.cellPositionUtils.equals(this.activeCellEdit, eventCell);\n            const isRowEditing = this.activeRowEdit !== null && this.rowPositionUtils.sameRow(this.activeRowEdit, eventCell);\n            const shouldCaptureAction = isCellEditing || isRowEditing || this.isPasting || this.isRangeInAction;\n            if (!shouldCaptureAction) {\n                return;\n            }\n            const { rowPinned, rowIndex, column, oldValue, value } = event;\n            const cellValueChange = {\n                rowPinned,\n                rowIndex: rowIndex,\n                columnId: column.getColId(),\n                newValue: value,\n                oldValue\n            };\n            this.cellValueChanges.push(cellValueChange);\n        };\n        this.clearStacks = () => {\n            this.undoStack.clear();\n            this.redoStack.clear();\n        };\n    }\n    init() {\n        if (!this.gridOptionsService.get('undoRedoCellEditing')) {\n            return;\n        }\n        const undoRedoLimit = this.gridOptionsService.get('undoRedoCellEditingLimit');\n        if (undoRedoLimit <= 0) {\n            return;\n        }\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\n        this.addRowEditingListeners();\n        this.addCellEditingListeners();\n        this.addPasteListeners();\n        this.addFillListeners();\n        this.addCellKeyListeners();\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);\n        // undo / redo is restricted to actual editing so we clear the stacks when other operations are\n        // performed that change the order of the row / cols.\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, e => {\n            if (!e.keepUndoRedoStack) {\n                this.clearStacks();\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n    getCurrentUndoStackSize() {\n        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;\n    }\n    getCurrentRedoStackSize() {\n        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;\n    }\n    undo(source) {\n        const startEvent = {\n            type: Events.EVENT_UNDO_STARTED,\n            source\n        };\n        this.eventService.dispatchEvent(startEvent);\n        const operationPerformed = this.undoRedo(this.undoStack, this.redoStack, 'initialRange', 'oldValue', 'undo');\n        const endEvent = {\n            type: Events.EVENT_UNDO_ENDED,\n            source,\n            operationPerformed\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n    redo(source) {\n        const startEvent = {\n            type: Events.EVENT_REDO_STARTED,\n            source\n        };\n        this.eventService.dispatchEvent(startEvent);\n        const operationPerformed = this.undoRedo(this.redoStack, this.undoStack, 'finalRange', 'newValue', 'redo');\n        const endEvent = {\n            type: Events.EVENT_REDO_ENDED,\n            source,\n            operationPerformed\n        };\n        this.eventService.dispatchEvent(endEvent);\n    }\n    undoRedo(undoRedoStack, opposingUndoRedoStack, rangeProperty, cellValueChangeProperty, source) {\n        if (!undoRedoStack) {\n            return false;\n        }\n        const undoRedoAction = undoRedoStack.pop();\n        if (!undoRedoAction || !undoRedoAction.cellValueChanges) {\n            return false;\n        }\n        this.processAction(undoRedoAction, (cellValueChange) => cellValueChange[cellValueChangeProperty], source);\n        if (undoRedoAction instanceof RangeUndoRedoAction) {\n            this.processRange(undoRedoAction.ranges || [undoRedoAction[rangeProperty]]);\n        }\n        else {\n            this.processCell(undoRedoAction.cellValueChanges);\n        }\n        opposingUndoRedoStack.push(undoRedoAction);\n        return true;\n    }\n    processAction(action, valueExtractor, source) {\n        action.cellValueChanges.forEach(cellValueChange => {\n            const { rowIndex, rowPinned, columnId } = cellValueChange;\n            const rowPosition = { rowIndex, rowPinned };\n            const currentRow = this.getRowNode(rowPosition);\n            // checks if the row has been filtered out\n            if (!currentRow.displayed) {\n                return;\n            }\n            currentRow.setDataValue(columnId, valueExtractor(cellValueChange), source);\n        });\n    }\n    processRange(ranges) {\n        let lastFocusedCell;\n        this.rangeService.removeAllCellRanges(true);\n        ranges.forEach((range, idx) => {\n            if (!range) {\n                return;\n            }\n            const startRow = range.startRow;\n            const endRow = range.endRow;\n            if (idx === ranges.length - 1) {\n                lastFocusedCell = {\n                    rowPinned: startRow.rowPinned,\n                    rowIndex: startRow.rowIndex,\n                    columnId: range.startColumn.getColId()\n                };\n                this.setLastFocusedCell(lastFocusedCell);\n            }\n            const cellRangeParams = {\n                rowStartIndex: startRow.rowIndex,\n                rowStartPinned: startRow.rowPinned,\n                rowEndIndex: endRow.rowIndex,\n                rowEndPinned: endRow.rowPinned,\n                columnStart: range.startColumn,\n                columns: range.columns\n            };\n            this.rangeService.addCellRange(cellRangeParams);\n        });\n    }\n    processCell(cellValueChanges) {\n        const cellValueChange = cellValueChanges[0];\n        const { rowIndex, rowPinned } = cellValueChange;\n        const rowPosition = { rowIndex, rowPinned };\n        const row = this.getRowNode(rowPosition);\n        const lastFocusedCell = {\n            rowPinned: cellValueChange.rowPinned,\n            rowIndex: row.rowIndex,\n            columnId: cellValueChange.columnId\n        };\n        // when single cells are being processed, they should be considered\n        // as ranges when the rangeService is present (singleCellRanges).\n        // otherwise focus will be restore but the range will not.\n        this.setLastFocusedCell(lastFocusedCell, !!this.rangeService);\n    }\n    setLastFocusedCell(lastFocusedCell, setRangeToCell) {\n        const { rowIndex, columnId, rowPinned } = lastFocusedCell;\n        const scrollFeature = this.gridBodyCtrl.getScrollFeature();\n        const column = this.columnModel.getGridColumn(columnId);\n        if (!column) {\n            return;\n        }\n        scrollFeature.ensureIndexVisible(rowIndex);\n        scrollFeature.ensureColumnVisible(column);\n        const cellPosition = { rowIndex, column, rowPinned };\n        this.focusService.setFocusedCell(Object.assign(Object.assign({}, cellPosition), { forceBrowserFocus: true }));\n        if (setRangeToCell) {\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n    addRowEditingListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, (e) => {\n            this.activeRowEdit = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.activeRowEdit = null;\n        });\n    }\n    addCellEditingListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, (e) => {\n            this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned };\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, (e) => {\n            this.activeCellEdit = null;\n            const shouldPushAction = e.valueChanged && !this.activeRowEdit && !this.isPasting && !this.isRangeInAction;\n            if (shouldPushAction) {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n            }\n        });\n    }\n    addPasteListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, () => {\n            this.isPasting = true;\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.isPasting = false;\n        });\n    }\n    addFillListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, () => {\n            this.isRangeInAction = true;\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, (event) => {\n            const action = new RangeUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\n            this.pushActionsToUndoStack(action);\n            this.isRangeInAction = false;\n        });\n    }\n    addCellKeyListeners() {\n        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START, () => {\n            this.isRangeInAction = true;\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END, () => {\n            let action;\n            if (this.rangeService && this.gridOptionsService.get('enableRangeSelection')) {\n                action = new RangeUndoRedoAction(this.cellValueChanges, undefined, undefined, [...this.rangeService.getCellRanges()]);\n            }\n            else {\n                action = new UndoRedoAction(this.cellValueChanges);\n            }\n            this.pushActionsToUndoStack(action);\n            this.isRangeInAction = false;\n        });\n    }\n    pushActionsToUndoStack(action) {\n        this.undoStack.push(action);\n        this.cellValueChanges = [];\n        this.redoStack.clear();\n    }\n    getRowNode(gridRow) {\n        switch (gridRow.rowPinned) {\n            case 'top':\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case 'bottom':\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n};\n__decorate([\n    Autowired('focusService')\n], UndoRedoService.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], UndoRedoService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('rowModel')\n], UndoRedoService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], UndoRedoService.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    Autowired('cellPositionUtils')\n], UndoRedoService.prototype, \"cellPositionUtils\", void 0);\n__decorate([\n    Autowired('rowPositionUtils')\n], UndoRedoService.prototype, \"rowPositionUtils\", void 0);\n__decorate([\n    Autowired('columnModel')\n], UndoRedoService.prototype, \"columnModel\", void 0);\n__decorate([\n    Optional('rangeService')\n], UndoRedoService.prototype, \"rangeService\", void 0);\n__decorate([\n    PostConstruct\n], UndoRedoService.prototype, \"init\", null);\nUndoRedoService = __decorate([\n    Bean('undoRedoService')\n], UndoRedoService);\nexport { UndoRedoService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"../../context/context.mjs\";\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { ColumnGroup } from \"../../entities/columnGroup.mjs\";\nimport { HeaderRowType } from \"../row/headerRowComp.mjs\";\nimport { last } from \"../../utils/array.mjs\";\nlet HeaderPositionUtils = class HeaderPositionUtils extends BeanStub {\n    findHeader(focusedHeader, direction) {\n        let nextColumn;\n        let getGroupMethod;\n        let getColMethod;\n        if (focusedHeader.column instanceof ColumnGroup) {\n            getGroupMethod = `getDisplayedGroup${direction}`;\n            nextColumn = this.columnModel[getGroupMethod](focusedHeader.column);\n        }\n        else {\n            getColMethod = `getDisplayedCol${direction}`;\n            nextColumn = this.columnModel[getColMethod](focusedHeader.column);\n        }\n        if (!nextColumn) {\n            return;\n        }\n        let { headerRowIndex } = focusedHeader;\n        const currentRowType = this.getHeaderRowType(headerRowIndex);\n        if (currentRowType === HeaderRowType.COLUMN_GROUP) {\n            const columnGroup = nextColumn;\n            if (columnGroup.isPadding() && this.isAnyChildSpanningHeaderHeight(columnGroup)) {\n                const { nextFocusColumn, nextRow } = this.getColumnVisibleChild(columnGroup, headerRowIndex, direction);\n                if (nextFocusColumn) {\n                    nextColumn = nextFocusColumn;\n                    headerRowIndex = nextRow;\n                }\n            }\n        }\n        return {\n            column: nextColumn,\n            headerRowIndex\n        };\n    }\n    isAnyChildSpanningHeaderHeight(columnGroup) {\n        if (!columnGroup) {\n            return false;\n        }\n        return columnGroup.getLeafColumns().some(col => col.isSpanHeaderHeight());\n    }\n    getColumnVisibleParent(currentColumn, currentIndex) {\n        const currentRowType = this.getHeaderRowType(currentIndex);\n        const isFloatingFilter = currentRowType === HeaderRowType.FLOATING_FILTER;\n        const isColumn = currentRowType === HeaderRowType.COLUMN;\n        let nextFocusColumn = isFloatingFilter ? currentColumn : currentColumn.getParent();\n        let nextRow = currentIndex - 1;\n        if (isColumn && this.isAnyChildSpanningHeaderHeight(currentColumn.getParent())) {\n            while (nextFocusColumn && nextFocusColumn.isPadding()) {\n                nextFocusColumn = nextFocusColumn.getParent();\n                nextRow--;\n            }\n            if (nextRow < 0) {\n                nextFocusColumn = currentColumn;\n                nextRow = currentIndex;\n            }\n        }\n        return { nextFocusColumn: nextFocusColumn, nextRow };\n    }\n    getColumnVisibleChild(column, currentIndex, direction = 'After') {\n        const currentRowType = this.getHeaderRowType(currentIndex);\n        let nextFocusColumn = column;\n        let nextRow = currentIndex + 1;\n        if (currentRowType === HeaderRowType.COLUMN_GROUP) {\n            const leafColumns = column.getDisplayedLeafColumns();\n            const leafChild = direction === 'After' ? leafColumns[0] : last(leafColumns);\n            if (this.isAnyChildSpanningHeaderHeight(leafChild.getParent())) {\n                nextFocusColumn = leafChild;\n                let currentColumn = leafChild.getParent();\n                while (currentColumn && currentColumn !== column) {\n                    currentColumn = currentColumn.getParent();\n                    nextRow++;\n                }\n            }\n            else {\n                nextFocusColumn = column.getDisplayedChildren()[0];\n            }\n        }\n        return { nextFocusColumn, nextRow };\n    }\n    getHeaderRowType(rowIndex) {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        if (centerHeaderContainer) {\n            return centerHeaderContainer.getRowType(rowIndex);\n        }\n    }\n    findColAtEdgeForHeaderRow(level, position) {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        const column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];\n        if (!column) {\n            return;\n        }\n        const childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());\n        const type = childContainer.getRowType(level);\n        if (type == HeaderRowType.COLUMN_GROUP) {\n            const columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);\n            return {\n                headerRowIndex: level,\n                column: columnGroup\n            };\n        }\n        return {\n            // if type==null, means the header level didn't exist\n            headerRowIndex: type == null ? -1 : level,\n            column\n        };\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], HeaderPositionUtils.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], HeaderPositionUtils.prototype, \"ctrlsService\", void 0);\nHeaderPositionUtils = __decorate([\n    Bean('headerPositionUtils')\n], HeaderPositionUtils);\nexport { HeaderPositionUtils };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"../context/context.mjs\";\nimport { deepCloneDefinition } from \"../utils/object.mjs\";\nlet ColumnDefFactory = class ColumnDefFactory {\n    buildColumnDefs(cols, rowGroupColumns, pivotColumns) {\n        const res = [];\n        const colGroupDefs = {};\n        cols.forEach(col => {\n            const colDef = this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n            let addToResult = true;\n            let childDef = colDef;\n            let pointer = col.getOriginalParent();\n            let lastPointer = null;\n            while (pointer) {\n                let parentDef = null;\n                // we don't include padding groups, as the column groups provided\n                // by application didn't have these. the whole point of padding groups\n                // is to balance the column tree that the user provided.\n                if (pointer.isPadding()) {\n                    pointer = pointer.getOriginalParent();\n                    continue;\n                }\n                // if colDef for this group already exists, use it\n                const existingParentDef = colGroupDefs[pointer.getGroupId()];\n                if (existingParentDef) {\n                    existingParentDef.children.push(childDef);\n                    // if we added to result, it would be the second time we did it\n                    addToResult = false;\n                    // we don't want to continue up the tree, as it has already been\n                    // done for this group\n                    break;\n                }\n                parentDef = this.createDefFromGroup(pointer);\n                if (parentDef) {\n                    parentDef.children = [childDef];\n                    colGroupDefs[parentDef.groupId] = parentDef;\n                    childDef = parentDef;\n                    pointer = pointer.getOriginalParent();\n                }\n                if (pointer != null && lastPointer === pointer) {\n                    addToResult = false;\n                    break;\n                }\n                // Ensure we don't get stuck in an infinite loop\n                lastPointer = pointer;\n            }\n            if (addToResult) {\n                res.push(childDef);\n            }\n        });\n        return res;\n    }\n    createDefFromGroup(group) {\n        const defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);\n        if (defCloned) {\n            defCloned.groupId = group.getGroupId();\n        }\n        return defCloned;\n    }\n    createDefFromColumn(col, rowGroupColumns, pivotColumns) {\n        const colDefCloned = deepCloneDefinition(col.getColDef());\n        colDefCloned.colId = col.getColId();\n        colDefCloned.width = col.getActualWidth();\n        colDefCloned.rowGroup = col.isRowGroupActive();\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n        colDefCloned.pivot = col.isPivotActive();\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n        colDefCloned.hide = col.isVisible() ? undefined : true;\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n        return colDefCloned;\n    }\n};\nColumnDefFactory = __decorate([\n    Bean('columnDefFactory')\n], ColumnDefFactory);\nexport { ColumnDefFactory };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { exists } from \"../../utils/generic.mjs\";\nimport { pushAll } from \"../../utils/array.mjs\";\nimport { Autowired, Bean } from \"../../context/context.mjs\";\nlet RowCssClassCalculator = class RowCssClassCalculator {\n    getInitialRowClasses(params) {\n        const classes = [];\n        if (exists(params.extraCssClass)) {\n            classes.push(params.extraCssClass);\n        }\n        classes.push('ag-row');\n        classes.push(params.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');\n        if (params.fadeRowIn) {\n            classes.push('ag-opacity-zero');\n        }\n        classes.push(params.rowIsEven ? 'ag-row-even' : 'ag-row-odd');\n        if (params.rowNode.isRowPinned()) {\n            classes.push('ag-row-pinned');\n        }\n        if (params.rowNode.isSelected()) {\n            classes.push('ag-row-selected');\n        }\n        if (params.rowNode.footer) {\n            classes.push('ag-row-footer');\n        }\n        classes.push('ag-row-level-' + params.rowLevel);\n        if (params.rowNode.stub) {\n            classes.push('ag-row-loading');\n        }\n        if (params.fullWidthRow) {\n            classes.push('ag-full-width-row');\n        }\n        if (params.expandable) {\n            classes.push('ag-row-group');\n            classes.push(params.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');\n        }\n        if (params.rowNode.dragging) {\n            classes.push('ag-row-dragging');\n        }\n        pushAll(classes, this.processClassesFromGridOptions(params.rowNode));\n        pushAll(classes, this.preProcessRowClassRules(params.rowNode));\n        // we use absolute position unless we are doing print layout\n        classes.push(params.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');\n        if (params.firstRowOnPage) {\n            classes.push('ag-row-first');\n        }\n        if (params.lastRowOnPage) {\n            classes.push('ag-row-last');\n        }\n        if (params.fullWidthRow) {\n            if (params.pinned === 'left') {\n                classes.push('ag-cell-last-left-pinned');\n            }\n            if (params.pinned === 'right') {\n                classes.push('ag-cell-first-right-pinned');\n            }\n        }\n        return classes;\n    }\n    processClassesFromGridOptions(rowNode) {\n        const res = [];\n        const process = (rowCls) => {\n            if (typeof rowCls === 'string') {\n                res.push(rowCls);\n            }\n            else if (Array.isArray(rowCls)) {\n                rowCls.forEach(e => res.push(e));\n            }\n        };\n        // part 1 - rowClass\n        const rowClass = this.gridOptionsService.get('rowClass');\n        if (rowClass) {\n            if (typeof rowClass === 'function') {\n                console.warn('AG Grid: rowClass should not be a function, please use getRowClass instead');\n                return [];\n            }\n            process(rowClass);\n        }\n        // part 2 - rowClassFunc\n        const rowClassFunc = this.gridOptionsService.getCallback('getRowClass');\n        if (rowClassFunc) {\n            const params = {\n                data: rowNode.data,\n                node: rowNode,\n                rowIndex: rowNode.rowIndex\n            };\n            const rowClassFuncResult = rowClassFunc(params);\n            process(rowClassFuncResult);\n        }\n        return res;\n    }\n    preProcessRowClassRules(rowNode) {\n        const res = [];\n        this.processRowClassRules(rowNode, (className) => {\n            res.push(className);\n        }, (className) => {\n            // not catered for, if creating, no need\n            // to remove class as it was never there\n        });\n        return res;\n    }\n    processRowClassRules(rowNode, onApplicableClass, onNotApplicableClass) {\n        const rowClassParams = {\n            data: rowNode.data,\n            node: rowNode,\n            rowIndex: rowNode.rowIndex,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        };\n        this.stylingService.processClassRules(undefined, this.gridOptionsService.get('rowClassRules'), rowClassParams, onApplicableClass, onNotApplicableClass);\n    }\n    calculateRowLevel(rowNode) {\n        if (rowNode.group) {\n            return rowNode.level;\n        }\n        // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item\n        return rowNode.parent ? (rowNode.parent.level + 1) : 0;\n    }\n};\n__decorate([\n    Autowired('stylingService')\n], RowCssClassCalculator.prototype, \"stylingService\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], RowCssClassCalculator.prototype, \"gridOptionsService\", void 0);\nRowCssClassCalculator = __decorate([\n    Bean('rowCssClassCalculator')\n], RowCssClassCalculator);\nexport { RowCssClassCalculator };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { _ } from \"../utils/index.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\n// this logic is used by both SSRM and CSRM\nlet RowNodeSorter = class RowNodeSorter extends BeanStub {\n    init() {\n        this.isAccentedSort = this.gridOptionsService.get('accentedSort');\n        this.primaryColumnsSortGroups = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n        this.addManagedPropertyListener('accentedSort', (propChange) => this.isAccentedSort = propChange.currentValue);\n        this.addManagedPropertyListener('autoGroupColumnDef', () => this.primaryColumnsSortGroups = this.gridOptionsService.isColumnsSortingCoupledToGroup());\n    }\n    doFullSort(rowNodes, sortOptions) {\n        const mapper = (rowNode, pos) => ({ currentPos: pos, rowNode: rowNode });\n        const sortedRowNodes = rowNodes.map(mapper);\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        return sortedRowNodes.map(item => item.rowNode);\n    }\n    compareRowNodes(sortOptions, sortedNodeA, sortedNodeB) {\n        const nodeA = sortedNodeA.rowNode;\n        const nodeB = sortedNodeB.rowNode;\n        // Iterate columns, return the first that doesn't match\n        for (let i = 0, len = sortOptions.length; i < len; i++) {\n            const sortOption = sortOptions[i];\n            const isDescending = sortOption.sort === 'desc';\n            const valueA = this.getValue(nodeA, sortOption.column);\n            const valueB = this.getValue(nodeB, sortOption.column);\n            let comparatorResult;\n            const providedComparator = this.getComparator(sortOption, nodeA);\n            if (providedComparator) {\n                //if comparator provided, use it\n                comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);\n            }\n            else {\n                //otherwise do our own comparison\n                comparatorResult = _.defaultComparator(valueA, valueB, this.isAccentedSort);\n            }\n            // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\n            // typically occurs when the comparator is used on a group row\n            const validResult = !isNaN(comparatorResult);\n            if (validResult && comparatorResult !== 0) {\n                return sortOption.sort === 'asc' ? comparatorResult : comparatorResult * -1;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    }\n    getComparator(sortOption, rowNode) {\n        const column = sortOption.column;\n        // comparator on col get preference over everything else\n        const comparatorOnCol = column.getColDef().comparator;\n        if (comparatorOnCol != null) {\n            return comparatorOnCol;\n        }\n        if (!column.getColDef().showRowGroup) {\n            return;\n        }\n        // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\n        const groupLeafField = !rowNode.group && column.getColDef().field;\n        if (!groupLeafField) {\n            return;\n        }\n        const primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);\n        if (!primaryColumn) {\n            return;\n        }\n        return primaryColumn.getColDef().comparator;\n    }\n    getValue(node, column) {\n        var _a, _b;\n        if (!this.primaryColumnsSortGroups) {\n            return this.valueService.getValue(column, node, false, false);\n        }\n        const isNodeGroupedAtLevel = node.rowGroupColumn === column;\n        if (isNodeGroupedAtLevel) {\n            const isGroupRows = this.gridOptionsService.isGroupUseEntireRow(this.columnModel.isPivotActive());\n            // because they're group rows, no display cols exist, so groupData never populated.\n            // instead delegate to getting value from leaf child.\n            if (isGroupRows) {\n                const leafChild = (_a = node.allLeafChildren) === null || _a === void 0 ? void 0 : _a[0];\n                if (leafChild) {\n                    return this.valueService.getValue(column, leafChild, false, false);\n                }\n                return undefined;\n            }\n            const displayCol = this.columnModel.getGroupDisplayColumnForGroup(column.getId());\n            if (!displayCol) {\n                return undefined;\n            }\n            return (_b = node.groupData) === null || _b === void 0 ? void 0 : _b[displayCol.getId()];\n        }\n        if (node.group && column.getColDef().showRowGroup) {\n            return undefined;\n        }\n        return this.valueService.getValue(column, node, false, false);\n    }\n};\n__decorate([\n    Autowired('valueService')\n], RowNodeSorter.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], RowNodeSorter.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], RowNodeSorter.prototype, \"init\", null);\nRowNodeSorter = __decorate([\n    Bean('rowNodeSorter')\n], RowNodeSorter);\nexport { RowNodeSorter };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar CtrlsService_1;\nimport { Bean } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nlet CtrlsService = CtrlsService_1 = class CtrlsService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.ready = false;\n        this.readyCallbacks = [];\n    }\n    checkReady() {\n        this.ready =\n            this.gridCtrl != null\n                && this.gridBodyCtrl != null\n                && this.centerRowContainerCtrl != null\n                && this.leftRowContainerCtrl != null\n                && this.rightRowContainerCtrl != null\n                && this.bottomCenterRowContainerCtrl != null\n                && this.bottomLeftRowContainerCtrl != null\n                && this.bottomRightRowContainerCtrl != null\n                && this.topCenterRowContainerCtrl != null\n                && this.topLeftRowContainerCtrl != null\n                && this.topRightRowContainerCtrl != null\n                && this.stickyTopCenterRowContainerCtrl != null\n                && this.stickyTopLeftRowContainerCtrl != null\n                && this.stickyTopRightRowContainerCtrl != null\n                && this.centerHeaderRowContainerCtrl != null\n                && this.leftHeaderRowContainerCtrl != null\n                && this.rightHeaderRowContainerCtrl != null\n                && this.fakeHScrollComp != null\n                && this.fakeVScrollComp != null\n                && this.gridHeaderCtrl != null;\n        if (this.ready) {\n            const p = this.createReadyParams();\n            this.readyCallbacks.forEach(c => c(p));\n            this.readyCallbacks.length = 0;\n        }\n    }\n    whenReady(callback) {\n        if (this.ready) {\n            callback(this.createReadyParams());\n        }\n        else {\n            this.readyCallbacks.push(callback);\n        }\n    }\n    createReadyParams() {\n        return {\n            centerRowContainerCtrl: this.centerRowContainerCtrl,\n            leftRowContainerCtrl: this.leftRowContainerCtrl,\n            rightRowContainerCtrl: this.rightRowContainerCtrl,\n            bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,\n            bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,\n            bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,\n            topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,\n            topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,\n            topRightRowContainerCtrl: this.topRightRowContainerCtrl,\n            stickyTopCenterRowContainerCtrl: this.stickyTopCenterRowContainerCtrl,\n            stickyTopLeftRowContainerCtrl: this.stickyTopLeftRowContainerCtrl,\n            stickyTopRightRowContainerCtrl: this.stickyTopRightRowContainerCtrl,\n            centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,\n            leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,\n            rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,\n            fakeHScrollComp: this.fakeHScrollComp,\n            fakeVScrollComp: this.fakeVScrollComp,\n            gridBodyCtrl: this.gridBodyCtrl,\n            gridCtrl: this.gridCtrl,\n            gridHeaderCtrl: this.gridHeaderCtrl,\n        };\n    }\n    registerFakeHScrollComp(comp) {\n        this.fakeHScrollComp = comp;\n        this.checkReady();\n    }\n    registerFakeVScrollComp(comp) {\n        this.fakeVScrollComp = comp;\n        this.checkReady();\n    }\n    registerGridHeaderCtrl(gridHeaderCtrl) {\n        this.gridHeaderCtrl = gridHeaderCtrl;\n        this.checkReady();\n    }\n    registerCenterRowContainerCtrl(ctrl) {\n        this.centerRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerLeftRowContainerCtrl(ctrl) {\n        this.leftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerRightRowContainerCtrl(ctrl) {\n        this.rightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerTopCenterRowContainerCtrl(ctrl) {\n        this.topCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerTopLeftRowContainerCon(ctrl) {\n        this.topLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerTopRightRowContainerCtrl(ctrl) {\n        this.topRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerStickyTopCenterRowContainerCtrl(ctrl) {\n        this.stickyTopCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerStickyTopLeftRowContainerCon(ctrl) {\n        this.stickyTopLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerStickyTopRightRowContainerCtrl(ctrl) {\n        this.stickyTopRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerBottomCenterRowContainerCtrl(ctrl) {\n        this.bottomCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerBottomLeftRowContainerCtrl(ctrl) {\n        this.bottomLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerBottomRightRowContainerCtrl(ctrl) {\n        this.bottomRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n    registerHeaderContainer(ctrl, pinned) {\n        switch (pinned) {\n            case 'left':\n                this.leftHeaderRowContainerCtrl = ctrl;\n                break;\n            case 'right':\n                this.rightHeaderRowContainerCtrl = ctrl;\n                break;\n            default:\n                this.centerHeaderRowContainerCtrl = ctrl;\n                break;\n        }\n        this.checkReady();\n    }\n    registerGridBodyCtrl(ctrl) {\n        this.gridBodyCtrl = ctrl;\n        this.checkReady();\n    }\n    registerGridCtrl(ctrl) {\n        this.gridCtrl = ctrl;\n        this.checkReady();\n    }\n    getFakeHScrollComp() {\n        return this.fakeHScrollComp;\n    }\n    getFakeVScrollComp() {\n        return this.fakeVScrollComp;\n    }\n    getGridHeaderCtrl() {\n        return this.gridHeaderCtrl;\n    }\n    getGridCtrl() {\n        return this.gridCtrl;\n    }\n    getCenterRowContainerCtrl() {\n        return this.centerRowContainerCtrl;\n    }\n    getTopCenterRowContainerCtrl() {\n        return this.topCenterRowContainerCtrl;\n    }\n    getBottomCenterRowContainerCtrl() {\n        return this.bottomCenterRowContainerCtrl;\n    }\n    getStickyTopCenterRowContainerCtrl() {\n        return this.stickyTopCenterRowContainerCtrl;\n    }\n    getGridBodyCtrl() {\n        return this.gridBodyCtrl;\n    }\n    getHeaderRowContainerCtrls() {\n        return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];\n    }\n    getHeaderRowContainerCtrl(pinned) {\n        switch (pinned) {\n            case 'left': return this.leftHeaderRowContainerCtrl;\n            case 'right': return this.rightHeaderRowContainerCtrl;\n            default: return this.centerHeaderRowContainerCtrl;\n        }\n    }\n};\nCtrlsService.NAME = 'ctrlsService';\nCtrlsService = CtrlsService_1 = __decorate([\n    Bean(CtrlsService_1.NAME)\n], CtrlsService);\nexport { CtrlsService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { Bean } from \"./context/context.mjs\";\nlet CtrlsFactory = class CtrlsFactory extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.registry = {};\n    }\n    register(meta) {\n        this.registry[meta.controllerName] = meta.controllerClass;\n    }\n    getInstance(name) {\n        const ControllerClass = this.registry[name];\n        if (ControllerClass == null) {\n            return undefined;\n        }\n        return new ControllerClass();\n    }\n};\nCtrlsFactory = __decorate([\n    Bean('ctrlsFactory')\n], CtrlsFactory);\nexport { CtrlsFactory };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { isInvisibleScrollbar, isIOSUserAgent, isMacOsUserAgent } from \"../utils/browser.mjs\";\nimport { isVisible } from \"../utils/dom.mjs\";\nimport { waitUntil } from \"../utils/function.mjs\";\nimport { Component } from \"../widgets/component.mjs\";\nimport { RefSelector } from \"../widgets/componentAnnotations.mjs\";\nexport class AbstractFakeScrollComp extends Component {\n    constructor(template, direction) {\n        super(template);\n        this.direction = direction;\n        this.hideTimeout = null;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.onScrollVisibilityChanged();\n        this.addOrRemoveCssClass('ag-apple-scrollbar', isMacOsUserAgent() || isIOSUserAgent());\n    }\n    initialiseInvisibleScrollbar() {\n        if (this.invisibleScrollbar !== undefined) {\n            return;\n        }\n        this.invisibleScrollbar = isInvisibleScrollbar();\n        if (this.invisibleScrollbar) {\n            this.hideAndShowInvisibleScrollAsNeeded();\n            this.addActiveListenerToggles();\n        }\n    }\n    addActiveListenerToggles() {\n        const activateEvents = ['mouseenter', 'mousedown', 'touchstart'];\n        const deactivateEvents = ['mouseleave', 'touchend'];\n        const eGui = this.getGui();\n        activateEvents.forEach(eventName => this.addManagedListener(eGui, eventName, () => this.addOrRemoveCssClass('ag-scrollbar-active', true)));\n        deactivateEvents.forEach(eventName => this.addManagedListener(eGui, eventName, () => this.addOrRemoveCssClass('ag-scrollbar-active', false)));\n    }\n    onScrollVisibilityChanged() {\n        // initialiseInvisibleScrollbar should only be called once, but the reason\n        // this can't be inside `setComp` or `PostConstruct` is the DOM might not\n        // be ready, so we call it until eventually, it gets calculated.\n        if (this.invisibleScrollbar === undefined) {\n            this.initialiseInvisibleScrollbar();\n        }\n        this.animationFrameService.requestAnimationFrame(() => this.setScrollVisible());\n    }\n    hideAndShowInvisibleScrollAsNeeded() {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, (params) => {\n            if (params.direction === this.direction) {\n                if (this.hideTimeout !== null) {\n                    window.clearTimeout(this.hideTimeout);\n                    this.hideTimeout = null;\n                }\n                this.addOrRemoveCssClass('ag-scrollbar-scrolling', true);\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, () => {\n            this.hideTimeout = window.setTimeout(() => {\n                this.addOrRemoveCssClass('ag-scrollbar-scrolling', false);\n                this.hideTimeout = null;\n            }, 400);\n        });\n    }\n    attemptSettingScrollPosition(value) {\n        const viewport = this.getViewport();\n        waitUntil(() => isVisible(viewport), () => this.setScrollPosition(value), 100);\n    }\n    getViewport() {\n        return this.eViewport;\n    }\n    getContainer() {\n        return this.eContainer;\n    }\n    onScrollCallback(fn) {\n        this.addManagedListener(this.getViewport(), 'scroll', fn);\n    }\n}\n__decorate([\n    RefSelector('eViewport')\n], AbstractFakeScrollComp.prototype, \"eViewport\", void 0);\n__decorate([\n    RefSelector('eContainer')\n], AbstractFakeScrollComp.prototype, \"eContainer\", void 0);\n__decorate([\n    Autowired('scrollVisibleService')\n], AbstractFakeScrollComp.prototype, \"scrollVisibleService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], AbstractFakeScrollComp.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('animationFrameService')\n], AbstractFakeScrollComp.prototype, \"animationFrameService\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct } from \"../context/context.mjs\";\nimport { AbstractFakeScrollComp } from \"./abstractFakeScrollComp.mjs\";\nimport { getScrollLeft, isVisible, setFixedHeight, setFixedWidth, setScrollLeft } from \"../utils/dom.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { RefSelector } from \"../widgets/componentAnnotations.mjs\";\nimport { CenterWidthFeature } from \"./centerWidthFeature.mjs\";\nexport class FakeHScrollComp extends AbstractFakeScrollComp {\n    constructor() {\n        super(FakeHScrollComp.TEMPLATE, 'horizontal');\n    }\n    postConstruct() {\n        super.postConstruct();\n        // When doing printing, this changes whether cols are pinned or not\n        const spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedPropertyListener('domLayout', spacerWidthsListener);\n        this.ctrlsService.registerFakeHScrollComp(this);\n        this.createManagedBean(new CenterWidthFeature(width => this.eContainer.style.width = `${width}px`));\n        this.addManagedPropertyListeners(['suppressHorizontalScroll'], this.onScrollVisibilityChanged.bind(this));\n    }\n    initialiseInvisibleScrollbar() {\n        if (this.invisibleScrollbar !== undefined) {\n            return;\n        }\n        this.enableRtl = this.gridOptionsService.get('enableRtl');\n        super.initialiseInvisibleScrollbar();\n        if (this.invisibleScrollbar) {\n            this.refreshCompBottom();\n        }\n    }\n    onPinnedRowDataChanged() {\n        this.refreshCompBottom();\n    }\n    refreshCompBottom() {\n        if (!this.invisibleScrollbar) {\n            return;\n        }\n        const bottomPinnedHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();\n        this.getGui().style.bottom = `${bottomPinnedHeight}px`;\n    }\n    onScrollVisibilityChanged() {\n        super.onScrollVisibilityChanged();\n        this.setFakeHScrollSpacerWidths();\n    }\n    setFakeHScrollSpacerWidths() {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n        // we pad the right based on a) if cols are pinned to the right and\n        // b) if v scroll is showing on the right (normal position of scroll)\n        let rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();\n        const scrollOnRight = !this.enableRtl && vScrollShowing;\n        const scrollbarWidth = this.gridOptionsService.getScrollbarWidth();\n        if (scrollOnRight) {\n            rightSpacing += scrollbarWidth;\n        }\n        setFixedWidth(this.eRightSpacer, rightSpacing);\n        this.eRightSpacer.classList.toggle('ag-scroller-corner', rightSpacing <= scrollbarWidth);\n        // we pad the left based on a) if cols are pinned to the left and\n        // b) if v scroll is showing on the left (happens in LTR layout only)\n        let leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();\n        const scrollOnLeft = this.enableRtl && vScrollShowing;\n        if (scrollOnLeft) {\n            leftSpacing += scrollbarWidth;\n        }\n        setFixedWidth(this.eLeftSpacer, leftSpacing);\n        this.eLeftSpacer.classList.toggle('ag-scroller-corner', leftSpacing <= scrollbarWidth);\n    }\n    setScrollVisible() {\n        const hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n        const isSuppressHorizontalScroll = this.gridOptionsService.get('suppressHorizontalScroll');\n        const scrollbarWidth = hScrollShowing ? (this.gridOptionsService.getScrollbarWidth() || 0) : 0;\n        const adjustedScrollbarWidth = (scrollbarWidth === 0 && invisibleScrollbar) ? 16 : scrollbarWidth;\n        const scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        setFixedHeight(this.getGui(), scrollContainerSize);\n        setFixedHeight(this.eViewport, scrollContainerSize);\n        setFixedHeight(this.eContainer, scrollContainerSize);\n        this.setDisplayed(hScrollShowing, { skipAriaHidden: true });\n    }\n    getScrollPosition() {\n        return getScrollLeft(this.getViewport(), this.enableRtl);\n    }\n    setScrollPosition(value) {\n        if (!isVisible(this.getViewport())) {\n            this.attemptSettingScrollPosition(value);\n        }\n        setScrollLeft(this.getViewport(), value, this.enableRtl);\n    }\n}\nFakeHScrollComp.TEMPLATE = `<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-horizontal-left-spacer\" ref=\"eLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" ref=\"eRightSpacer\"></div>\n        </div>`;\n__decorate([\n    RefSelector('eLeftSpacer')\n], FakeHScrollComp.prototype, \"eLeftSpacer\", void 0);\n__decorate([\n    RefSelector('eRightSpacer')\n], FakeHScrollComp.prototype, \"eRightSpacer\", void 0);\n__decorate([\n    Autowired('columnModel')\n], FakeHScrollComp.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('pinnedRowModel')\n], FakeHScrollComp.prototype, \"pinnedRowModel\", void 0);\n__decorate([\n    PostConstruct\n], FakeHScrollComp.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nlet PinnedWidthService = class PinnedWidthService extends BeanStub {\n    postConstruct() {\n        const listener = this.checkContainerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);\n        this.addManagedPropertyListener('domLayout', listener);\n    }\n    checkContainerWidths() {\n        const printLayout = this.gridOptionsService.isDomLayout('print');\n        const newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();\n        const newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();\n        if (newLeftWidth != this.leftWidth) {\n            this.leftWidth = newLeftWidth;\n            this.eventService.dispatchEvent({ type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED });\n        }\n        if (newRightWidth != this.rightWidth) {\n            this.rightWidth = newRightWidth;\n            this.eventService.dispatchEvent({ type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED });\n        }\n    }\n    getPinnedRightWidth() {\n        return this.rightWidth;\n    }\n    getPinnedLeftWidth() {\n        return this.leftWidth;\n    }\n};\n__decorate([\n    Autowired('columnModel')\n], PinnedWidthService.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], PinnedWidthService.prototype, \"postConstruct\", null);\nPinnedWidthService = __decorate([\n    Bean('pinnedWidthService')\n], PinnedWidthService);\nexport { PinnedWidthService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nlet RowNodeEventThrottle = class RowNodeEventThrottle extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.events = [];\n    }\n    postConstruct() {\n        if (this.rowModel.getType() == 'clientSide') {\n            this.clientSideRowModel = this.rowModel;\n        }\n    }\n    // because the user can call rowNode.setExpanded() many times in one VM turn,\n    // we throttle the calls to ClientSideRowModel using animationFrameService. this means for 100\n    // row nodes getting expanded, we only update the CSRM once, and then we fire all events after\n    // CSRM has updated.\n    //\n    // if we did not do this, then the user could call setExpanded on 100+ rows, causing the grid\n    // to re-render 100+ times, which would be a performance lag.\n    //\n    // we use animationFrameService\n    // rather than _.debounce() so this will get done if anyone flushes the animationFrameService\n    // (eg user calls api.ensureRowVisible(), which in turn flushes ).\n    dispatchExpanded(event) {\n        // if not using CSRM, we don't debounce. otherwise this breaks the SSRM.\n        if (this.clientSideRowModel == null) {\n            this.eventService.dispatchEvent(event);\n            return;\n        }\n        this.events.push(event);\n        const func = () => {\n            if (this.clientSideRowModel) {\n                this.clientSideRowModel.onRowGroupOpened();\n            }\n            this.events.forEach(e => this.eventService.dispatchEvent(e));\n            this.events = [];\n        };\n        if (this.dispatchExpandedDebounced == null) {\n            this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);\n        }\n        this.dispatchExpandedDebounced();\n    }\n};\n__decorate([\n    Autowired('animationFrameService')\n], RowNodeEventThrottle.prototype, \"animationFrameService\", void 0);\n__decorate([\n    Autowired('rowModel')\n], RowNodeEventThrottle.prototype, \"rowModel\", void 0);\n__decorate([\n    PostConstruct\n], RowNodeEventThrottle.prototype, \"postConstruct\", null);\nRowNodeEventThrottle = __decorate([\n    Bean('rowNodeEventThrottle')\n], RowNodeEventThrottle);\nexport { RowNodeEventThrottle };\n","import { ModuleNames } from '../../modules/moduleNames.mjs';\nimport { ColDefUtil } from '../../components/colDefUtil.mjs';\nconst COLUMN_DEFINITION_DEPRECATIONS = {};\nconst CSRM_REQUIRES_ROW_GROUP_MODULE = (_options, gridOptions) => {\n    var _a;\n    if (((_a = gridOptions.rowModelType) !== null && _a !== void 0 ? _a : 'clientSide') === 'clientSide') {\n        return { module: ModuleNames.RowGroupingModule };\n    }\n    return null;\n};\nconst COLUMN_DEFINITION_VALIDATIONS = {\n    // supported on all row models, but need module for client side.\n    enableRowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    rowGroup: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    rowGroupIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    enablePivot: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    enableValue: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    pivot: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    pivotIndex: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    aggFunc: CSRM_REQUIRES_ROW_GROUP_MODULE,\n    cellEditor: (options) => {\n        if (options.cellEditor === 'agRichSelect' || options.cellEditor === 'agRichSelectCellEditor') {\n            return { module: ModuleNames.RichSelectModule };\n        }\n        return null;\n    },\n    menuTabs: (options) => {\n        var _a;\n        const enterpriseMenuTabs = ['columnsMenuTab', 'generalMenuTab'];\n        if ((_a = options.menuTabs) === null || _a === void 0 ? void 0 : _a.some(tab => enterpriseMenuTabs.includes(tab))) {\n            return {\n                module: ModuleNames.MenuModule,\n            };\n        }\n        return null;\n    },\n    columnsMenuParams: {\n        module: [ModuleNames.MenuModule, ModuleNames.ColumnsToolPanelModule],\n    },\n    headerCheckboxSelection: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        dependencies: (_options, { rowSelection }) => (rowSelection === 'multiple' ? null : 'headerCheckboxSelection is only supported with rowSelection=multiple')\n    },\n    headerCheckboxSelectionFilteredOnly: {\n        supportedRowModels: ['clientSide'],\n        dependencies: (_options, { rowSelection }) => (rowSelection === 'multiple' ? null : 'headerCheckboxSelectionFilteredOnly is only supported with rowSelection=multiple'),\n    },\n    headerCheckboxSelectionCurrentPageOnly: {\n        supportedRowModels: ['clientSide'],\n        dependencies: (_options, { rowSelection }) => (rowSelection === 'multiple' ? null : 'headerCheckboxSelectionCurrentPageOnly is only supported with rowSelection=multiple'),\n    },\n    children: () => COL_DEF_VALIDATORS,\n};\nexport const COL_DEF_VALIDATORS = {\n    objectName: 'colDef',\n    allProperties: ColDefUtil.ALL_PROPERTIES,\n    docsUrl: 'column-properties/',\n    deprecations: COLUMN_DEFINITION_DEPRECATIONS,\n    validations: COLUMN_DEFINITION_VALIDATIONS,\n};\n","import { ModuleNames } from '../../modules/moduleNames.mjs';\nimport { COL_DEF_VALIDATORS } from \"./colDefValidations.mjs\";\nimport { PropertyKeys } from \"../../propertyKeys.mjs\";\nimport { ComponentUtil } from \"../../components/componentUtil.mjs\";\n/**\n * Deprecations have been kept separately for ease of removing them in the future.\n *\n * If the property was simply renamed, use the `renamed` property. The value will be implicitly copied to the new property.\n */\nconst GRID_OPTION_DEPRECATIONS = {\n    enableChartToolPanelsButton: { version: '29', message: 'The Chart Tool Panels button is now enabled by default. To hide the Chart Tool Panels button and display the hamburger button instead, set suppressChartToolPanelsButton=true.' },\n    functionsPassive: { version: '29.2' },\n    onColumnRowGroupChangeRequest: { version: '29.2' },\n    onColumnPivotChangeRequest: { version: '29.2' },\n    onColumnValueChangeRequest: { version: '29.2' },\n    onColumnAggFuncChangeRequest: { version: '29.2' },\n    serverSideFilterAllLevels: { version: '30', message: 'All server-side group levels are now filtered by default. This can be toggled using `serverSideOnlyRefreshFilteredGroups`.' },\n    suppressAggAtRootLevel: { version: '30', message: 'The root level aggregation is now suppressed by default. This can be toggled using  `alwaysAggregateAtRootLevel`.' },\n    excludeHiddenColumnsFromQuickFilter: { version: '30', message: 'Hidden columns are now excluded from the Quick Filter by default. This can be toggled using `includeHiddenColumnsInQuickFilter`.' },\n    enterMovesDown: { version: '30', renamed: 'enterNavigatesVertically' },\n    enterMovesDownAfterEdit: { version: '30', renamed: 'enterNavigatesVerticallyAfterEdit' },\n    suppressParentsInRowNodes: { version: '30.2', message: 'Using suppressParentsInRowNodes is no longer recommended. To serialize nodes it is now recommended to instead remove the parent node reference before serialization.' },\n    advancedFilterModel: { version: '31', message: 'Use `initialState.filter.advancedFilterModel` instead.' },\n    suppressAsyncEvents: { version: '31', message: 'Events should be handled asynchronously.' },\n};\n// Leave untyped. so it can be inferred.\nexport const GRID_OPTION_DEFAULTS = {\n    suppressContextMenu: false,\n    preventDefaultOnContextMenu: false,\n    allowContextMenuWithControlKey: false,\n    suppressMenuHide: false,\n    enableBrowserTooltips: false,\n    tooltipTrigger: 'hover',\n    tooltipShowDelay: 2000,\n    tooltipHideDelay: 10000,\n    tooltipMouseTrack: false,\n    tooltipInteraction: false,\n    copyHeadersToClipboard: false,\n    copyGroupHeadersToClipboard: false,\n    clipboardDelimiter: '\\t',\n    suppressCopyRowsToClipboard: false,\n    suppressCopySingleCellRanges: false,\n    suppressLastEmptyLineOnPaste: false,\n    suppressClipboardPaste: false,\n    suppressClipboardApi: false,\n    suppressCutToClipboard: false,\n    maintainColumnOrder: false,\n    suppressFieldDotNotation: false,\n    allowDragFromColumnsToolPanel: false,\n    suppressMovableColumns: false,\n    suppressColumnMoveAnimation: false,\n    suppressDragLeaveHidesColumns: false,\n    suppressRowGroupHidesColumns: false,\n    suppressAutoSize: false,\n    autoSizePadding: 20,\n    skipHeaderOnAutoSize: false,\n    singleClickEdit: false,\n    suppressClickEdit: false,\n    readOnlyEdit: false,\n    stopEditingWhenCellsLoseFocus: false,\n    enterNavigatesVertically: false,\n    enterNavigatesVerticallyAfterEdit: false,\n    enableCellEditingOnBackspace: false,\n    undoRedoCellEditing: false,\n    undoRedoCellEditingLimit: 10,\n    suppressCsvExport: false,\n    suppressExcelExport: false,\n    cacheQuickFilter: false,\n    includeHiddenColumnsInQuickFilter: false,\n    excludeChildrenWhenTreeDataFiltering: false,\n    enableAdvancedFilter: false,\n    includeHiddenColumnsInAdvancedFilter: false,\n    enableCharts: false,\n    suppressChartToolPanelsButton: false,\n    masterDetail: false,\n    keepDetailRows: false,\n    keepDetailRowsCount: 10,\n    detailRowAutoHeight: false,\n    tabIndex: 0,\n    rowBuffer: 10,\n    valueCache: false,\n    valueCacheNeverExpires: false,\n    enableCellExpressions: false,\n    suppressTouch: false,\n    suppressFocusAfterRefresh: false,\n    suppressAsyncEvents: false,\n    suppressBrowserResizeObserver: false,\n    suppressPropertyNamesCheck: false,\n    suppressChangeDetection: false,\n    debug: false,\n    suppressLoadingOverlay: false,\n    suppressNoRowsOverlay: false,\n    pagination: false,\n    paginationPageSize: 100,\n    paginationPageSizeSelector: true,\n    paginationAutoPageSize: false,\n    paginateChildRows: false,\n    suppressPaginationPanel: false,\n    pivotMode: false,\n    pivotPanelShow: 'never',\n    pivotDefaultExpanded: 0,\n    pivotSuppressAutoColumn: false,\n    suppressExpandablePivotGroups: false,\n    functionsReadOnly: false,\n    suppressAggFuncInHeader: false,\n    alwaysAggregateAtRootLevel: false,\n    aggregateOnlyChangedColumns: false,\n    suppressAggFilteredOnly: false,\n    removePivotHeaderRowWhenSingleValueColumn: false,\n    animateRows: true,\n    enableCellChangeFlash: false,\n    cellFlashDelay: 500,\n    cellFadeDelay: 1000,\n    allowShowChangeAfterFilter: false,\n    domLayout: 'normal',\n    ensureDomOrder: false,\n    enableRtl: false,\n    suppressColumnVirtualisation: false,\n    suppressMaxRenderedRowRestriction: false,\n    suppressRowVirtualisation: false,\n    rowDragManaged: false,\n    suppressRowDrag: false,\n    suppressMoveWhenRowDragging: false,\n    rowDragEntireRow: false,\n    rowDragMultiRow: false,\n    embedFullWidthRows: false,\n    groupDisplayType: 'singleColumn',\n    groupDefaultExpanded: 0,\n    groupMaintainOrder: false,\n    groupSelectsChildren: false,\n    groupIncludeTotalFooter: false,\n    groupSuppressBlankHeader: false,\n    groupSelectsFiltered: false,\n    showOpenedGroup: false,\n    groupRemoveSingleChildren: false,\n    groupRemoveLowestSingleChildren: false,\n    groupHideOpenParents: false,\n    groupAllowUnbalanced: false,\n    rowGroupPanelShow: 'never',\n    suppressMakeColumnVisibleAfterUnGroup: false,\n    treeData: false,\n    rowGroupPanelSuppressSort: false,\n    suppressGroupRowsSticky: false,\n    rowModelType: 'clientSide',\n    asyncTransactionWaitMillis: 50,\n    suppressModelUpdateAfterUpdateTransaction: false,\n    cacheOverflowSize: 1,\n    infiniteInitialRowCount: 1,\n    serverSideInitialRowCount: 1,\n    suppressServerSideInfiniteScroll: false,\n    cacheBlockSize: 100,\n    maxBlocksInCache: -1,\n    maxConcurrentDatasourceRequests: 2,\n    blockLoadDebounceMillis: 0,\n    purgeClosedRowNodes: false,\n    serverSideSortAllLevels: false,\n    serverSideOnlyRefreshFilteredGroups: false,\n    serverSideSortOnServer: false,\n    serverSideFilterOnServer: false,\n    serverSidePivotResultFieldSeparator: '_',\n    viewportRowModelPageSize: 5,\n    viewportRowModelBufferSize: 5,\n    alwaysShowHorizontalScroll: false,\n    alwaysShowVerticalScroll: false,\n    debounceVerticalScrollbar: false,\n    suppressHorizontalScroll: false,\n    suppressScrollOnNewData: false,\n    suppressScrollWhenPopupsAreOpen: false,\n    suppressAnimationFrame: false,\n    suppressMiddleClickScrolls: false,\n    suppressPreventDefaultOnMouseWheel: false,\n    rowMultiSelectWithClick: false,\n    suppressRowDeselection: false,\n    suppressRowClickSelection: false,\n    suppressCellFocus: false,\n    suppressMultiRangeSelection: false,\n    enableCellTextSelection: false,\n    enableRangeSelection: false,\n    enableRangeHandle: false,\n    enableFillHandle: false,\n    fillHandleDirection: 'xy',\n    suppressClearOnFillReduction: false,\n    accentedSort: false,\n    unSortIcon: false,\n    suppressMultiSort: false,\n    alwaysMultiSort: false,\n    suppressMaintainUnsortedOrder: false,\n    suppressRowHoverHighlight: false,\n    suppressRowTransform: false,\n    columnHoverHighlight: false,\n    deltaSort: false,\n    enableGroupEdit: false,\n    suppressGroupMaintainValueType: false,\n    functionsPassive: false,\n    groupLockGroupColumns: 0,\n};\n/**\n * Used simply to type check the default grid options.\n * Done here to allow inference of the above type, for gridOptionsService.get to infer where defaults exist.\n */\nconst GRID_OPTIONS_DEFAULT_ASSERTION = GRID_OPTION_DEFAULTS;\n/**\n * Validation rules for gridOptions\n */\nconst GRID_OPTION_VALIDATIONS = {\n    sideBar: { module: ModuleNames.SideBarModule },\n    statusBar: { module: ModuleNames.StatusBarModule },\n    enableCharts: { module: ModuleNames.GridChartsModule },\n    getMainMenuItems: { module: ModuleNames.MenuModule },\n    getContextMenuItems: { module: ModuleNames.MenuModule },\n    allowContextMenuWithControlKey: { module: ModuleNames.MenuModule },\n    enableAdvancedFilter: { module: ModuleNames.AdvancedFilterModule },\n    treeData: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        module: ModuleNames.RowGroupingModule,\n        dependencies: (options) => {\n            var _a;\n            const rowModel = (_a = options.rowModelType) !== null && _a !== void 0 ? _a : 'clientSide';\n            switch (rowModel) {\n                case 'clientSide':\n                    const csrmWarning = `treeData requires 'getDataPath' in the ${rowModel} row model.`;\n                    return options.getDataPath ? null : csrmWarning;\n                case 'serverSide':\n                    const ssrmWarning = `treeData requires 'isServerSideGroup' and 'getServerSideGroupKey' in the ${rowModel} row model.`;\n                    return options.isServerSideGroup && options.getServerSideGroupKey ? null : ssrmWarning;\n            }\n            return null;\n        },\n    },\n    masterDetail: { module: ModuleNames.MasterDetailModule },\n    enableRangeSelection: { module: ModuleNames.RangeSelectionModule },\n    enableRangeHandle: {\n        dependencies: {\n            enableRangeSelection: [true],\n        }\n    },\n    enableFillHandle: {\n        dependencies: {\n            enableRangeSelection: [true],\n        }\n    },\n    groupDefaultExpanded: {\n        supportedRowModels: ['clientSide'],\n    },\n    groupIncludeFooter: {\n        supportedRowModels: ['clientSide', 'serverSide'],\n        dependencies: (options) => {\n            var _a;\n            const rowModel = (_a = options.rowModelType) !== null && _a !== void 0 ? _a : 'clientSide';\n            switch (rowModel) {\n                case 'clientSide':\n                    return null;\n                case 'serverSide':\n                    const warning = 'groupIncludeFooter is not supported alongside suppressServerSideInfiniteScroll';\n                    return options.suppressServerSideInfiniteScroll ? warning : null;\n            }\n            return null;\n        },\n    },\n    groupIncludeTotalFooter: {\n        supportedRowModels: ['clientSide'],\n    },\n    groupRemoveSingleChildren: {\n        dependencies: {\n            groupHideOpenParents: [undefined, false],\n            groupRemoveLowestSingleChildren: [undefined, false],\n        }\n    },\n    groupRemoveLowestSingleChildren: {\n        dependencies: {\n            groupHideOpenParents: [undefined, false],\n            groupRemoveSingleChildren: [undefined, false],\n        }\n    },\n    groupSelectsChildren: {\n        dependencies: {\n            rowSelection: ['multiple'],\n        }\n    },\n    suppressParentsInRowNodes: {\n        dependencies: {\n            groupSelectsChildren: [undefined, false],\n        },\n    },\n    viewportDatasource: {\n        supportedRowModels: ['viewport'],\n        module: ModuleNames.ViewportRowModelModule,\n    },\n    serverSideDatasource: {\n        supportedRowModels: ['serverSide'],\n        module: ModuleNames.ServerSideRowModelModule,\n    },\n    cacheBlockSize: {\n        supportedRowModels: ['serverSide', 'infinite'],\n    },\n    datasource: {\n        supportedRowModels: ['infinite'],\n        module: ModuleNames.InfiniteRowModelModule,\n    },\n    rowData: {\n        supportedRowModels: ['clientSide'],\n        module: ModuleNames.ClientSideRowModelModule,\n    },\n    columnDefs: () => COL_DEF_VALIDATORS,\n    defaultColDef: () => COL_DEF_VALIDATORS,\n    defaultColGroupDef: () => COL_DEF_VALIDATORS,\n    autoGroupColumnDef: () => COL_DEF_VALIDATORS,\n};\nexport const GRID_OPTIONS_VALIDATORS = {\n    objectName: 'gridOptions',\n    allProperties: [\n        ...PropertyKeys.ALL_PROPERTIES,\n        ...ComponentUtil.EVENT_CALLBACKS,\n    ],\n    propertyExceptions: ['api', 'columnApi'],\n    docsUrl: 'grid-options/',\n    deprecations: GRID_OPTION_DEPRECATIONS,\n    validations: GRID_OPTION_VALIDATIONS,\n};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar GridOptionsService_1;\nimport { ColumnApi } from \"./columns/columnApi.mjs\";\nimport { ComponentUtil } from \"./components/componentUtil.mjs\";\nimport { Autowired, Bean, PostConstruct, PreDestroy } from \"./context/context.mjs\";\nimport { Events } from \"./events.mjs\";\nimport { EventService } from \"./eventService.mjs\";\nimport { INITIAL_GRID_OPTION_KEYS, PropertyKeys } from \"./propertyKeys.mjs\";\nimport { warnOnce } from \"./utils/function.mjs\";\nimport { exists, missing } from \"./utils/generic.mjs\";\nimport { getScrollbarWidth } from './utils/browser.mjs';\nimport { GRID_OPTION_DEFAULTS } from \"./validation/rules/gridOptionsValidations.mjs\";\nlet GridOptionsService = GridOptionsService_1 = class GridOptionsService {\n    constructor() {\n        this.destroyed = false;\n        this.domDataKey = '__AG_' + Math.random().toString();\n        this.propertyEventService = new EventService();\n        // responsible for calling the onXXX functions on gridOptions\n        // It forces events defined in GridOptionsService.alwaysSyncGlobalEvents to be fired synchronously.\n        // This is required for events such as GridPreDestroyed.\n        // Other events can be fired asynchronously or synchronously depending on config.\n        this.globalEventHandlerFactory = (restrictToSyncOnly) => {\n            return (eventName, event) => {\n                // prevent events from being fired _after_ the grid has been destroyed\n                if (this.destroyed) {\n                    return;\n                }\n                const alwaysSync = GridOptionsService_1.alwaysSyncGlobalEvents.has(eventName);\n                if ((alwaysSync && !restrictToSyncOnly) || (!alwaysSync && restrictToSyncOnly)) {\n                    return;\n                }\n                const callbackMethodName = ComponentUtil.getCallbackForEvent(eventName);\n                if (typeof this.gridOptions[callbackMethodName] === 'function') {\n                    this.gridOptions[callbackMethodName](event);\n                }\n            };\n        };\n    }\n    // This is quicker then having code call gridOptionsService.get('context')\n    get context() {\n        return this.gridOptions['context'];\n    }\n    init() {\n        this.columnApi = new ColumnApi(this.api);\n        const async = !this.get('suppressAsyncEvents');\n        this.eventService.addGlobalListener(this.globalEventHandlerFactory().bind(this), async);\n        this.eventService.addGlobalListener(this.globalEventHandlerFactory(true).bind(this), false);\n        // sets an initial calculation for the scrollbar width\n        this.getScrollbarWidth();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.columnApi = undefined;\n    }\n    /**\n     * Get the raw value of the GridOptions property provided.\n     * @param property\n     */\n    get(property) {\n        var _a;\n        return (_a = this.gridOptions[property]) !== null && _a !== void 0 ? _a : GRID_OPTION_DEFAULTS[property];\n    }\n    /**\n     * Get the GridOption callback but wrapped so that the common params of api,columnApi and context are automatically applied to the params.\n     * @param property GridOption callback properties based on the fact that this property has a callback with params extending AgGridCommon\n     */\n    getCallback(property) {\n        return this.mergeGridCommonParams(this.gridOptions[property]);\n    }\n    /**\n     * Returns `true` if a value has been specified for this GridOption.\n     * @param property GridOption property\n     */\n    exists(property) {\n        return exists(this.gridOptions[property]);\n    }\n    /**\n    * Wrap the user callback and attach the api, columnApi and context to the params object on the way through.\n    * @param callback User provided callback\n    * @returns Wrapped callback where the params object not require api, columnApi and context\n    */\n    mergeGridCommonParams(callback) {\n        if (callback) {\n            const wrapped = (callbackParams) => {\n                const mergedParams = callbackParams;\n                mergedParams.api = this.api;\n                mergedParams.columnApi = this.columnApi;\n                mergedParams.context = this.context;\n                return callback(mergedParams);\n            };\n            return wrapped;\n        }\n        return callback;\n    }\n    static toBoolean(value) {\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            // for boolean, compare to empty String to allow attributes appearing with\n            // no value to be treated as 'true'\n            return value.toUpperCase() === 'TRUE' || value == '';\n        }\n        return false;\n    }\n    static toNumber(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            const parsed = parseInt(value);\n            if (isNaN(parsed)) {\n                return undefined;\n            }\n            return parsed;\n        }\n        return undefined;\n    }\n    static toConstrainedNum(min, max) {\n        return (value) => {\n            const num = GridOptionsService_1.toNumber(value);\n            if (num == null || num < min || num > max) {\n                return undefined; // return undefined if outside bounds, this will then be coerced to the default value.\n            }\n            return num;\n        };\n    }\n    static getCoercedValue(key, value) {\n        const coerceFunc = GridOptionsService_1.PROPERTY_COERCIONS.get(key);\n        if (!coerceFunc) {\n            return value;\n        }\n        return coerceFunc(value);\n    }\n    static getCoercedGridOptions(gridOptions) {\n        const newGo = {};\n        Object.entries(gridOptions).forEach(([key, value]) => {\n            const coercedValue = GridOptionsService_1.getCoercedValue(key, value);\n            newGo[key] = coercedValue;\n        });\n        return newGo;\n    }\n    updateGridOptions({ options, source = 'api' }) {\n        const changeSet = { id: GridOptionsService_1.changeSetId++, properties: [] };\n        // all events are fired after grid options has finished updating.\n        const events = [];\n        Object.entries(options).forEach(([key, value]) => {\n            if (source === 'api' && INITIAL_GRID_OPTION_KEYS[key]) {\n                warnOnce(`${key} is an initial property and cannot be updated.`);\n            }\n            const coercedValue = GridOptionsService_1.getCoercedValue(key, value);\n            const shouldForce = (typeof coercedValue) === 'object' && source === 'api'; // force objects as they could have been mutated.\n            const previousValue = this.gridOptions[key];\n            if (shouldForce || previousValue !== coercedValue) {\n                this.gridOptions[key] = coercedValue;\n                const event = {\n                    type: key,\n                    currentValue: coercedValue,\n                    previousValue,\n                    changeSet,\n                    source\n                };\n                events.push(event);\n            }\n        });\n        this.validationService.processGridOptions(this.gridOptions);\n        // changeSet should just include the properties that have changed.\n        changeSet.properties = events.map(event => event.type);\n        events.forEach(event => {\n            if (this.gridOptions.debug) {\n                console.log(`AG Grid: Updated property ${event.type} from ${String(event.previousValue)} to ${String(event.currentValue)}.`);\n            }\n            this.propertyEventService.dispatchEvent(event);\n        });\n    }\n    addEventListener(key, listener) {\n        this.propertyEventService.addEventListener(key, listener);\n    }\n    removeEventListener(key, listener) {\n        this.propertyEventService.removeEventListener(key, listener);\n    }\n    // *************** Helper methods ************************** //\n    // Methods to share common GridOptions related logic that goes above accessing a single property\n    getGridId() {\n        return this.api.getGridId();\n    }\n    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero\n    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we\n    // allow the user to provide the scroll width before we work it out.\n    getScrollbarWidth() {\n        if (this.scrollbarWidth == null) {\n            const useGridOptions = typeof this.gridOptions.scrollbarWidth === 'number' && this.gridOptions.scrollbarWidth >= 0;\n            const scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();\n            if (scrollbarWidth != null) {\n                this.scrollbarWidth = scrollbarWidth;\n                this.eventService.dispatchEvent({\n                    type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED\n                });\n            }\n        }\n        return this.scrollbarWidth;\n    }\n    isRowModelType(rowModelType) {\n        return this.gridOptions.rowModelType === rowModelType ||\n            (rowModelType === 'clientSide' && missing(this.gridOptions.rowModelType));\n    }\n    isDomLayout(domLayout) {\n        var _a;\n        const gridLayout = (_a = this.gridOptions.domLayout) !== null && _a !== void 0 ? _a : 'normal';\n        return gridLayout === domLayout;\n    }\n    isRowSelection() {\n        return this.gridOptions.rowSelection === 'single' || this.gridOptions.rowSelection === 'multiple';\n    }\n    useAsyncEvents() {\n        return !this.get('suppressAsyncEvents');\n    }\n    isGetRowHeightFunction() {\n        return typeof this.gridOptions.getRowHeight === 'function';\n    }\n    getRowHeightForNode(rowNode, allowEstimate = false, defaultRowHeight) {\n        if (defaultRowHeight == null) {\n            defaultRowHeight = this.environment.getDefaultRowHeight();\n        }\n        // check the function first, in case use set both function and\n        // number, when using virtual pagination then function can be\n        // used for pinned rows and the number for the body rows.\n        if (this.isGetRowHeightFunction()) {\n            if (allowEstimate) {\n                return { height: defaultRowHeight, estimated: true };\n            }\n            const params = {\n                node: rowNode,\n                data: rowNode.data\n            };\n            const height = this.getCallback('getRowHeight')(params);\n            if (this.isNumeric(height)) {\n                if (height === 0) {\n                    warnOnce('The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.');\n                }\n                return { height: Math.max(1, height), estimated: false };\n            }\n        }\n        if (rowNode.detail && this.get('masterDetail')) {\n            return this.getMasterDetailRowHeight();\n        }\n        const rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;\n        return { height: rowHeight, estimated: false };\n    }\n    getMasterDetailRowHeight() {\n        // if autoHeight, we want the height to grow to the new height starting at 1, as otherwise a flicker would happen,\n        // as the detail goes to the default (eg 200px) and then immediately shrink up/down to the new measured height\n        // (due to auto height) which looks bad, especially if doing row animation.\n        if (this.get('detailRowAutoHeight')) {\n            return { height: 1, estimated: false };\n        }\n        if (this.isNumeric(this.gridOptions.detailRowHeight)) {\n            return { height: this.gridOptions.detailRowHeight, estimated: false };\n        }\n        return { height: 300, estimated: false };\n    }\n    // we don't allow dynamic row height for virtual paging\n    getRowHeightAsNumber() {\n        if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {\n            return this.environment.getDefaultRowHeight();\n        }\n        const rowHeight = this.environment.refreshRowHeightVariable();\n        if (rowHeight !== -1) {\n            return rowHeight;\n        }\n        console.warn('AG Grid row height must be a number if not using standard row model');\n        return this.environment.getDefaultRowHeight();\n    }\n    isNumeric(value) {\n        return !isNaN(value) && typeof value === 'number' && isFinite(value);\n    }\n    getDomDataKey() {\n        return this.domDataKey;\n    }\n    // returns the dom data, or undefined if not found\n    getDomData(element, key) {\n        const domData = element[this.getDomDataKey()];\n        return domData ? domData[key] : undefined;\n    }\n    setDomData(element, key, value) {\n        const domDataKey = this.getDomDataKey();\n        let domData = element[domDataKey];\n        if (missing(domData)) {\n            domData = {};\n            element[domDataKey] = domData;\n        }\n        domData[key] = value;\n    }\n    getDocument() {\n        // if user is providing document, we use the users one,\n        // otherwise we use the document on the global namespace.\n        let result = null;\n        if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {\n            result = this.gridOptions.getDocument();\n        }\n        else if (this.eGridDiv) {\n            result = this.eGridDiv.ownerDocument;\n        }\n        if (result && exists(result)) {\n            return result;\n        }\n        return document;\n    }\n    getWindow() {\n        const eDocument = this.getDocument();\n        return eDocument.defaultView || window;\n    }\n    getRootNode() {\n        return this.eGridDiv.getRootNode();\n    }\n    getAsyncTransactionWaitMillis() {\n        return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : 50;\n    }\n    isAnimateRows() {\n        // never allow animating if enforcing the row order\n        if (this.get('ensureDomOrder')) {\n            return false;\n        }\n        return this.get('animateRows');\n    }\n    isGroupRowsSticky() {\n        if (this.get('suppressGroupRowsSticky') ||\n            this.get('paginateChildRows') ||\n            this.get('groupHideOpenParents')) {\n            return false;\n        }\n        return true;\n    }\n    isColumnsSortingCoupledToGroup() {\n        const autoGroupColumnDef = this.gridOptions.autoGroupColumnDef;\n        return !(autoGroupColumnDef === null || autoGroupColumnDef === void 0 ? void 0 : autoGroupColumnDef.comparator) && !this.get('treeData');\n    }\n    getGroupAggFiltering() {\n        const userValue = this.gridOptions.groupAggFiltering;\n        if (typeof userValue === 'function') {\n            return this.getCallback('groupAggFiltering');\n        }\n        if (userValue === true) {\n            return () => true;\n        }\n        return undefined;\n    }\n    isGroupIncludeFooterTrueOrCallback() {\n        const userValue = this.gridOptions.groupIncludeFooter;\n        return userValue === true || typeof userValue === 'function';\n    }\n    getGroupIncludeFooter() {\n        const userValue = this.gridOptions.groupIncludeFooter;\n        if (typeof userValue === 'function') {\n            return this.getCallback('groupIncludeFooter');\n        }\n        if (userValue === true) {\n            return () => true;\n        }\n        return () => false;\n    }\n    isGroupMultiAutoColumn() {\n        if (this.gridOptions.groupDisplayType) {\n            return this.gridOptions.groupDisplayType === 'multipleColumns';\n        }\n        // if we are doing hideOpenParents we also show multiple columns, otherwise hideOpenParents would not work\n        return this.get('groupHideOpenParents');\n    }\n    isGroupUseEntireRow(pivotMode) {\n        // we never allow groupDisplayType = 'groupRows' if in pivot mode, otherwise we won't see the pivot values.\n        if (pivotMode) {\n            return false;\n        }\n        return this.gridOptions.groupDisplayType === 'groupRows';\n    }\n};\nGridOptionsService.alwaysSyncGlobalEvents = new Set([Events.EVENT_GRID_PRE_DESTROYED]);\n/**\n * Handles value coercion including validation of ranges etc. If value is invalid, undefined is set, allowing default to be used.\n */\nGridOptionsService.PROPERTY_COERCIONS = new Map([\n    ...PropertyKeys.BOOLEAN_PROPERTIES.map(key => [key, GridOptionsService_1.toBoolean]),\n    ...PropertyKeys.NUMBER_PROPERTIES.map(key => [key, GridOptionsService_1.toNumber]),\n    ['groupAggFiltering', (val) => typeof val === 'function' ? val : GridOptionsService_1.toBoolean(val)],\n    ['pageSize', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['autoSizePadding', GridOptionsService_1.toConstrainedNum(0, Number.MAX_VALUE)],\n    ['keepDetailRowsCount', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['rowBuffer', GridOptionsService_1.toConstrainedNum(0, Number.MAX_VALUE)],\n    ['infiniteInitialRowCount', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['cacheOverflowSize', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['cacheBlockSize', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['serverSideInitialRowCount', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['viewportRowModelPageSize', GridOptionsService_1.toConstrainedNum(1, Number.MAX_VALUE)],\n    ['viewportRowModelBufferSize', GridOptionsService_1.toConstrainedNum(0, Number.MAX_VALUE)],\n]);\nGridOptionsService.changeSetId = 0;\n__decorate([\n    Autowired('gridOptions')\n], GridOptionsService.prototype, \"gridOptions\", void 0);\n__decorate([\n    Autowired('eventService')\n], GridOptionsService.prototype, \"eventService\", void 0);\n__decorate([\n    Autowired('environment')\n], GridOptionsService.prototype, \"environment\", void 0);\n__decorate([\n    Autowired('eGridDiv')\n], GridOptionsService.prototype, \"eGridDiv\", void 0);\n__decorate([\n    Autowired('validationService')\n], GridOptionsService.prototype, \"validationService\", void 0);\n__decorate([\n    Autowired('gridApi')\n], GridOptionsService.prototype, \"api\", void 0);\n__decorate([\n    PostConstruct\n], GridOptionsService.prototype, \"init\", null);\n__decorate([\n    PreDestroy\n], GridOptionsService.prototype, \"destroy\", null);\nGridOptionsService = GridOptionsService_1 = __decorate([\n    Bean('gridOptionsService')\n], GridOptionsService);\nexport { GridOptionsService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"./context/context.mjs\";\nimport { BeanStub } from \"./context/beanStub.mjs\";\nlet LocaleService = class LocaleService extends BeanStub {\n    getLocaleTextFunc() {\n        const getLocaleText = this.gridOptionsService.getCallback('getLocaleText');\n        if (getLocaleText) {\n            //key: string, defaultValue: string, variableValues?: string[]\n            return (key, defaultValue, variableValues) => {\n                const params = {\n                    key,\n                    defaultValue,\n                    variableValues\n                };\n                return getLocaleText(params);\n            };\n        }\n        const localeText = this.gridOptionsService.get('localeText');\n        return (key, defaultValue, variableValues) => {\n            let localisedText = localeText && localeText[key];\n            if (localisedText && variableValues && variableValues.length) {\n                let found = 0;\n                while (true) {\n                    if (found >= variableValues.length) {\n                        break;\n                    }\n                    const idx = localisedText.indexOf('${variable}');\n                    if (idx === -1) {\n                        break;\n                    }\n                    localisedText = localisedText.replace('${variable}', variableValues[found++]);\n                }\n            }\n            return localisedText !== null && localisedText !== void 0 ? localisedText : defaultValue;\n        };\n    }\n};\nLocaleService = __decorate([\n    Bean('localeService')\n], LocaleService);\nexport { LocaleService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { PostConstruct } from \"../context/context.mjs\";\nimport { AbstractFakeScrollComp } from \"./abstractFakeScrollComp.mjs\";\nimport { isVisible, setFixedWidth } from \"../utils/dom.mjs\";\nimport { SetHeightFeature } from \"./rowContainer/setHeightFeature.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nexport class FakeVScrollComp extends AbstractFakeScrollComp {\n    constructor() {\n        super(FakeVScrollComp.TEMPLATE, 'vertical');\n    }\n    postConstruct() {\n        super.postConstruct();\n        this.createManagedBean(new SetHeightFeature(this.eContainer));\n        this.ctrlsService.registerFakeVScrollComp(this);\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onRowContainerHeightChanged.bind(this));\n    }\n    setScrollVisible() {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n        const scrollbarWidth = vScrollShowing ? (this.gridOptionsService.getScrollbarWidth() || 0) : 0;\n        const adjustedScrollbarWidth = (scrollbarWidth === 0 && invisibleScrollbar) ? 16 : scrollbarWidth;\n        this.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        setFixedWidth(this.getGui(), adjustedScrollbarWidth);\n        setFixedWidth(this.eViewport, adjustedScrollbarWidth);\n        setFixedWidth(this.eContainer, adjustedScrollbarWidth);\n        this.setDisplayed(vScrollShowing, { skipAriaHidden: true });\n    }\n    onRowContainerHeightChanged() {\n        const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        const gridBodyViewportEl = gridBodyCtrl.getBodyViewportElement();\n        if (this.eViewport.scrollTop != gridBodyViewportEl.scrollTop) {\n            this.eViewport.scrollTop = gridBodyViewportEl.scrollTop;\n        }\n    }\n    getScrollPosition() {\n        return this.getViewport().scrollTop;\n    }\n    setScrollPosition(value) {\n        if (!isVisible(this.getViewport())) {\n            this.attemptSettingScrollPosition(value);\n        }\n        this.getViewport().scrollTop = value;\n    }\n}\nFakeVScrollComp.TEMPLATE = `<div class=\"ag-body-vertical-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-body-vertical-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-vertical-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n        </div>`;\n__decorate([\n    PostConstruct\n], FakeVScrollComp.prototype, \"postConstruct\", null);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from '../context/context.mjs';\nimport { BeanStub } from '../context/beanStub.mjs';\nimport { Events } from '../eventKeys.mjs';\nimport { getValueUsingField } from '../utils/object.mjs';\nimport { ModuleRegistry } from '../modules/moduleRegistry.mjs';\nimport { ModuleNames } from '../modules/moduleNames.mjs';\nimport { Column } from '../entities/column.mjs';\nimport { warnOnce } from '../utils/function.mjs';\nimport { KeyCode } from '../constants/keyCode.mjs';\nimport { exists, toStringOrNull } from '../utils/generic.mjs';\nimport { parseDateTimeFromString, serialiseDate } from '../utils/date.mjs';\nconst MONTH_LOCALE_TEXT = {\n    january: 'January',\n    february: 'February',\n    march: 'March',\n    april: 'April',\n    may: 'May',\n    june: 'June',\n    july: 'July',\n    august: 'August',\n    september: 'September',\n    october: 'October',\n    november: 'November',\n    december: 'December'\n};\nconst MONTH_KEYS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nlet DataTypeService = class DataTypeService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.dataTypeDefinitions = {};\n        this.isWaitingForRowData = false;\n        this.isColumnTypeOverrideInDataTypeDefinitions = false;\n        // keep track of any column state updates whilst waiting for data types to be inferred\n        this.columnStateUpdatesPendingInference = {};\n        this.columnStateUpdateListenerDestroyFuncs = [];\n    }\n    init() {\n        this.groupHideOpenParents = this.gridOptionsService.get('groupHideOpenParents');\n        this.addManagedPropertyListener('groupHideOpenParents', () => {\n            this.groupHideOpenParents = this.gridOptionsService.get('groupHideOpenParents');\n        });\n        this.processDataTypeDefinitions();\n        this.addManagedPropertyListener('dataTypeDefinitions', () => {\n            this.processDataTypeDefinitions();\n            this.columnModel.recreateColumnDefs('gridOptionsChanged');\n        });\n    }\n    processDataTypeDefinitions() {\n        var _a;\n        const defaultDataTypes = this.getDefaultDataTypes();\n        this.dataTypeDefinitions = {};\n        Object.entries(defaultDataTypes).forEach(([cellDataType, dataTypeDefinition]) => {\n            this.dataTypeDefinitions[cellDataType] = Object.assign(Object.assign({}, dataTypeDefinition), { groupSafeValueFormatter: this.createGroupSafeValueFormatter(dataTypeDefinition) });\n        });\n        const dataTypeDefinitions = (_a = this.gridOptionsService.get('dataTypeDefinitions')) !== null && _a !== void 0 ? _a : {};\n        this.dataTypeMatchers = {};\n        Object.entries(dataTypeDefinitions).forEach(([cellDataType, dataTypeDefinition]) => {\n            const mergedDataTypeDefinition = this.processDataTypeDefinition(dataTypeDefinition, dataTypeDefinitions, [cellDataType], defaultDataTypes);\n            if (mergedDataTypeDefinition) {\n                this.dataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;\n                if (dataTypeDefinition.dataTypeMatcher) {\n                    this.dataTypeMatchers[cellDataType] = dataTypeDefinition.dataTypeMatcher;\n                }\n            }\n        });\n        this.checkObjectValueHandlers(defaultDataTypes);\n        ['dateString', 'text', 'number', 'boolean', 'date'].forEach((cellDataType) => {\n            const overriddenDataTypeMatcher = this.dataTypeMatchers[cellDataType];\n            if (overriddenDataTypeMatcher) {\n                // remove to maintain correct ordering\n                delete this.dataTypeMatchers[cellDataType];\n            }\n            this.dataTypeMatchers[cellDataType] = overriddenDataTypeMatcher !== null && overriddenDataTypeMatcher !== void 0 ? overriddenDataTypeMatcher : defaultDataTypes[cellDataType].dataTypeMatcher;\n        });\n    }\n    mergeDataTypeDefinitions(parentDataTypeDefinition, childDataTypeDefinition) {\n        const mergedDataTypeDefinition = Object.assign(Object.assign({}, parentDataTypeDefinition), childDataTypeDefinition);\n        if (parentDataTypeDefinition.columnTypes &&\n            childDataTypeDefinition.columnTypes &&\n            childDataTypeDefinition.appendColumnTypes) {\n            mergedDataTypeDefinition.columnTypes = [\n                ...this.convertColumnTypes(parentDataTypeDefinition.columnTypes),\n                ...this.convertColumnTypes(childDataTypeDefinition.columnTypes),\n            ];\n        }\n        return mergedDataTypeDefinition;\n    }\n    processDataTypeDefinition(dataTypeDefinition, dataTypeDefinitions, alreadyProcessedDataTypes, defaultDataTypes) {\n        let mergedDataTypeDefinition;\n        const extendsCellDataType = dataTypeDefinition.extendsDataType;\n        if (dataTypeDefinition.columnTypes) {\n            this.isColumnTypeOverrideInDataTypeDefinitions = true;\n        }\n        if (dataTypeDefinition.extendsDataType === dataTypeDefinition.baseDataType) {\n            let baseDataTypeDefinition = defaultDataTypes[extendsCellDataType];\n            const overriddenBaseDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\n            if (baseDataTypeDefinition && overriddenBaseDataTypeDefinition) {\n                // only if it's valid do we override with a provided one\n                baseDataTypeDefinition = overriddenBaseDataTypeDefinition;\n            }\n            if (!this.validateDataTypeDefinition(dataTypeDefinition, baseDataTypeDefinition, extendsCellDataType)) {\n                return undefined;\n            }\n            mergedDataTypeDefinition = this.mergeDataTypeDefinitions(baseDataTypeDefinition, dataTypeDefinition);\n        }\n        else {\n            if (alreadyProcessedDataTypes.includes(extendsCellDataType)) {\n                warnOnce('Data type definition hierarchies (via the \"extendsDataType\" property) cannot contain circular references.');\n                return undefined;\n            }\n            const extendedDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];\n            if (!this.validateDataTypeDefinition(dataTypeDefinition, extendedDataTypeDefinition, extendsCellDataType)) {\n                return undefined;\n            }\n            const mergedExtendedDataTypeDefinition = this.processDataTypeDefinition(extendedDataTypeDefinition, dataTypeDefinitions, [...alreadyProcessedDataTypes, extendsCellDataType], defaultDataTypes);\n            if (!mergedExtendedDataTypeDefinition) {\n                return undefined;\n            }\n            mergedDataTypeDefinition = this.mergeDataTypeDefinitions(mergedExtendedDataTypeDefinition, dataTypeDefinition);\n        }\n        return Object.assign(Object.assign({}, mergedDataTypeDefinition), { groupSafeValueFormatter: this.createGroupSafeValueFormatter(mergedDataTypeDefinition) });\n    }\n    validateDataTypeDefinition(dataTypeDefinition, parentDataTypeDefinition, parentCellDataType) {\n        if (!parentDataTypeDefinition) {\n            warnOnce(`The data type definition ${parentCellDataType} does not exist.`);\n            return false;\n        }\n        if (parentDataTypeDefinition.baseDataType !== dataTypeDefinition.baseDataType) {\n            warnOnce('The \"baseDataType\" property of a data type definition must match that of its parent.');\n            return false;\n        }\n        return true;\n    }\n    createGroupSafeValueFormatter(dataTypeDefinition) {\n        if (!dataTypeDefinition.valueFormatter) {\n            return undefined;\n        }\n        return (params) => {\n            var _a, _b;\n            if ((_a = params.node) === null || _a === void 0 ? void 0 : _a.group) {\n                const aggFunc = params.column.getAggFunc();\n                if (aggFunc) {\n                    // the resulting type of these will be the same, so we call valueFormatter anyway\n                    if (aggFunc === 'first' || aggFunc === 'last') {\n                        return dataTypeDefinition.valueFormatter(params);\n                    }\n                    if (dataTypeDefinition.baseDataType === 'number' && aggFunc !== 'count') {\n                        if (typeof params.value === 'number') {\n                            return dataTypeDefinition.valueFormatter(params);\n                        }\n                        if (typeof params.value === 'object') {\n                            if (!params.value) {\n                                return undefined;\n                            }\n                            if ('toNumber' in params.value) {\n                                return dataTypeDefinition.valueFormatter(Object.assign(Object.assign({}, params), { value: params.value.toNumber() }));\n                            }\n                            if ('value' in params.value) {\n                                return dataTypeDefinition.valueFormatter(Object.assign(Object.assign({}, params), { value: params.value.value }));\n                            }\n                        }\n                    }\n                }\n                // we don't want to double format the value\n                // as this is already formatted by using the valueFormatter as the keyCreator\n                if (!this.gridOptionsService.get('suppressGroupMaintainValueType')) {\n                    return undefined;\n                }\n            }\n            else if (this.groupHideOpenParents && params.column.isRowGroupActive()) {\n                // `groupHideOpenParents` passes leaf values in the group column, so need to format still.\n                // If it's not a string, we know it hasn't been formatted. Otherwise check the data type matcher.\n                if (typeof params.value !== 'string' || ((_b = dataTypeDefinition.dataTypeMatcher) === null || _b === void 0 ? void 0 : _b.call(dataTypeDefinition, params.value))) {\n                    return dataTypeDefinition.valueFormatter(params);\n                }\n                // we don't want to double format the value\n                // as this is already formatted by using the valueFormatter as the keyCreator\n                if (!this.gridOptionsService.get('suppressGroupMaintainValueType')) {\n                    return undefined;\n                }\n            }\n            return dataTypeDefinition.valueFormatter(params);\n        };\n    }\n    updateColDefAndGetDataTypeDefinitionColumnType(colDef, userColDef, colId) {\n        let { cellDataType } = userColDef;\n        const { field } = userColDef;\n        if (cellDataType === undefined) {\n            cellDataType = colDef.cellDataType;\n        }\n        if ((cellDataType == null || cellDataType === true)) {\n            cellDataType = this.canInferCellDataType(colDef, userColDef) ? this.inferCellDataType(field, colId) : false;\n        }\n        if (!cellDataType) {\n            colDef.cellDataType = false;\n            return undefined;\n        }\n        const dataTypeDefinition = this.dataTypeDefinitions[cellDataType];\n        if (!dataTypeDefinition) {\n            warnOnce(`Missing data type definition - \"${cellDataType}\"`);\n            return undefined;\n        }\n        colDef.cellDataType = cellDataType;\n        if (dataTypeDefinition.groupSafeValueFormatter) {\n            colDef.valueFormatter = dataTypeDefinition.groupSafeValueFormatter;\n        }\n        if (dataTypeDefinition.valueParser) {\n            colDef.valueParser = dataTypeDefinition.valueParser;\n        }\n        if (!dataTypeDefinition.suppressDefaultProperties) {\n            this.setColDefPropertiesForBaseDataType(colDef, dataTypeDefinition, colId);\n        }\n        return dataTypeDefinition.columnTypes;\n    }\n    updateColDefAndGetColumnType(colDef, userColDef, colId) {\n        var _a, _b;\n        const dataTypeDefinitionColumnType = this.updateColDefAndGetDataTypeDefinitionColumnType(colDef, userColDef, colId);\n        const columnTypes = (_b = (_a = userColDef.type) !== null && _a !== void 0 ? _a : dataTypeDefinitionColumnType) !== null && _b !== void 0 ? _b : colDef.type;\n        colDef.type = columnTypes;\n        return columnTypes ? this.convertColumnTypes(columnTypes) : undefined;\n    }\n    addColumnListeners(column) {\n        if (!this.isWaitingForRowData) {\n            return;\n        }\n        const columnStateUpdates = this.columnStateUpdatesPendingInference[column.getColId()];\n        if (!columnStateUpdates) {\n            return;\n        }\n        const columnListener = (event) => {\n            columnStateUpdates.add(event.key);\n        };\n        column.addEventListener(Column.EVENT_STATE_UPDATED, columnListener);\n        this.columnStateUpdateListenerDestroyFuncs.push(() => column.removeEventListener(Column.EVENT_STATE_UPDATED, columnListener));\n    }\n    canInferCellDataType(colDef, userColDef) {\n        var _a;\n        if (this.rowModel.getType() !== 'clientSide') {\n            return false;\n        }\n        const propsToCheckForInference = { cellRenderer: true, valueGetter: true, valueParser: true, refData: true };\n        if (this.doColDefPropsPreventInference(userColDef, propsToCheckForInference)) {\n            return false;\n        }\n        const columnTypes = userColDef.type === null ? colDef.type : userColDef.type;\n        if (columnTypes) {\n            const columnTypeDefs = (_a = this.gridOptionsService.get('columnTypes')) !== null && _a !== void 0 ? _a : {};\n            const hasPropsPreventingInference = this.convertColumnTypes(columnTypes).some(columnType => {\n                const columnTypeDef = columnTypeDefs[columnType.trim()];\n                return columnTypeDef && this.doColDefPropsPreventInference(columnTypeDef, propsToCheckForInference);\n            });\n            if (hasPropsPreventingInference) {\n                return false;\n            }\n        }\n        return !this.doColDefPropsPreventInference(colDef, propsToCheckForInference);\n    }\n    doColDefPropsPreventInference(colDef, propsToCheckForInference) {\n        return [\n            ['cellRenderer', 'agSparklineCellRenderer'], ['valueGetter', undefined], ['valueParser', undefined], ['refData', undefined]\n        ].some(([prop, comparisonValue]) => this.doesColDefPropPreventInference(colDef, propsToCheckForInference, prop, comparisonValue));\n    }\n    doesColDefPropPreventInference(colDef, checkProps, prop, comparisonValue) {\n        if (!checkProps[prop]) {\n            return false;\n        }\n        const value = colDef[prop];\n        if (value === null) {\n            checkProps[prop] = false;\n            return false;\n        }\n        else {\n            return comparisonValue === undefined ? !!value : value === comparisonValue;\n        }\n    }\n    inferCellDataType(field, colId) {\n        var _a;\n        if (!field) {\n            return undefined;\n        }\n        let value;\n        const initialData = this.getInitialData();\n        if (initialData) {\n            const fieldContainsDots = field.indexOf('.') >= 0 && !this.gridOptionsService.get('suppressFieldDotNotation');\n            value = getValueUsingField(initialData, field, fieldContainsDots);\n        }\n        else {\n            this.initWaitForRowData(colId);\n        }\n        if (value == null) {\n            return undefined;\n        }\n        const [cellDataType] = (_a = Object.entries(this.dataTypeMatchers).find(([_cellDataType, dataTypeMatcher]) => dataTypeMatcher(value))) !== null && _a !== void 0 ? _a : ['object'];\n        return cellDataType;\n    }\n    getInitialData() {\n        const rowData = this.gridOptionsService.get('rowData');\n        if (rowData === null || rowData === void 0 ? void 0 : rowData.length) {\n            return rowData[0];\n        }\n        else if (this.initialData) {\n            return this.initialData;\n        }\n        else {\n            const rowNodes = this.rowModel\n                .getRootNode()\n                .allLeafChildren;\n            if (rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes.length) {\n                return rowNodes[0].data;\n            }\n        }\n        return null;\n    }\n    initWaitForRowData(colId) {\n        this.columnStateUpdatesPendingInference[colId] = new Set();\n        if (this.isWaitingForRowData) {\n            return;\n        }\n        this.isWaitingForRowData = true;\n        const columnTypeOverridesExist = this.isColumnTypeOverrideInDataTypeDefinitions;\n        if (columnTypeOverridesExist) {\n            this.columnModel.queueResizeOperations();\n        }\n        const destroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATE_STARTED, (event) => {\n            const { firstRowData } = event;\n            if (!firstRowData) {\n                return;\n            }\n            destroyFunc === null || destroyFunc === void 0 ? void 0 : destroyFunc();\n            this.isWaitingForRowData = false;\n            this.processColumnsPendingInference(firstRowData, columnTypeOverridesExist);\n            this.columnStateUpdatesPendingInference = {};\n            if (columnTypeOverridesExist) {\n                this.columnModel.processResizeOperations();\n            }\n            const dataTypesInferredEvent = {\n                type: Events.EVENT_DATA_TYPES_INFERRED\n            };\n            this.eventService.dispatchEvent(dataTypesInferredEvent);\n        });\n    }\n    isPendingInference() {\n        return this.isWaitingForRowData;\n    }\n    processColumnsPendingInference(firstRowData, columnTypeOverridesExist) {\n        this.initialData = firstRowData;\n        const state = [];\n        this.columnStateUpdateListenerDestroyFuncs.forEach(destroyFunc => destroyFunc());\n        this.columnStateUpdateListenerDestroyFuncs = [];\n        const newRowGroupColumnStateWithoutIndex = {};\n        const newPivotColumnStateWithoutIndex = {};\n        Object.entries(this.columnStateUpdatesPendingInference).forEach(([colId, columnStateUpdates]) => {\n            const column = this.columnModel.getGridColumn(colId);\n            if (!column) {\n                return;\n            }\n            const oldColDef = column.getColDef();\n            if (!this.columnModel.resetColumnDefIntoColumn(column, 'cellDataTypeInferred')) {\n                return;\n            }\n            const newColDef = column.getColDef();\n            if (columnTypeOverridesExist && newColDef.type && newColDef.type !== oldColDef.type) {\n                const updatedColumnState = this.getUpdatedColumnState(column, columnStateUpdates);\n                if (updatedColumnState.rowGroup && updatedColumnState.rowGroupIndex == null) {\n                    newRowGroupColumnStateWithoutIndex[colId] = updatedColumnState;\n                }\n                if (updatedColumnState.pivot && updatedColumnState.pivotIndex == null) {\n                    newPivotColumnStateWithoutIndex[colId] = updatedColumnState;\n                }\n                state.push(updatedColumnState);\n            }\n        });\n        if (columnTypeOverridesExist) {\n            state.push(...this.columnModel.generateColumnStateForRowGroupAndPivotIndexes(newRowGroupColumnStateWithoutIndex, newPivotColumnStateWithoutIndex));\n        }\n        if (state.length) {\n            this.columnModel.applyColumnState({ state }, 'cellDataTypeInferred');\n        }\n        this.initialData = null;\n    }\n    getUpdatedColumnState(column, columnStateUpdates) {\n        const columnState = this.columnModel.getColumnStateFromColDef(column);\n        columnStateUpdates.forEach(key => {\n            // if the column state has been updated, don't update again\n            delete columnState[key];\n            if (key === 'rowGroup') {\n                delete columnState.rowGroupIndex;\n            }\n            else if (key === 'pivot') {\n                delete columnState.pivotIndex;\n            }\n        });\n        return columnState;\n    }\n    checkObjectValueHandlers(defaultDataTypes) {\n        const resolvedObjectDataTypeDefinition = this.dataTypeDefinitions.object;\n        const defaultObjectDataTypeDefinition = defaultDataTypes.object;\n        this.hasObjectValueParser = resolvedObjectDataTypeDefinition.valueParser !== defaultObjectDataTypeDefinition.valueParser;\n        this.hasObjectValueFormatter = resolvedObjectDataTypeDefinition.valueFormatter !== defaultObjectDataTypeDefinition.valueFormatter;\n    }\n    convertColumnTypes(type) {\n        let typeKeys = [];\n        if (type instanceof Array) {\n            const invalidArray = type.some((a) => typeof a !== 'string');\n            if (invalidArray) {\n                console.warn(\"if colDef.type is supplied an array it should be of type 'string[]'\");\n            }\n            else {\n                typeKeys = type;\n            }\n        }\n        else if (typeof type === 'string') {\n            typeKeys = type.split(',');\n        }\n        else {\n            console.warn(\"colDef.type should be of type 'string' | 'string[]'\");\n        }\n        return typeKeys;\n    }\n    getDateStringTypeDefinition() {\n        return this.dataTypeDefinitions.dateString;\n    }\n    getDateParserFunction() {\n        return this.getDateStringTypeDefinition().dateParser;\n    }\n    getDateFormatterFunction() {\n        return this.getDateStringTypeDefinition().dateFormatter;\n    }\n    getDataTypeDefinition(column) {\n        const colDef = column.getColDef();\n        if (!colDef.cellDataType) {\n            return undefined;\n        }\n        return this.dataTypeDefinitions[colDef.cellDataType];\n    }\n    getBaseDataType(column) {\n        var _a;\n        return (_a = this.getDataTypeDefinition(column)) === null || _a === void 0 ? void 0 : _a.baseDataType;\n    }\n    checkType(column, value) {\n        var _a;\n        if (value == null) {\n            return true;\n        }\n        const dataTypeMatcher = (_a = this.getDataTypeDefinition(column)) === null || _a === void 0 ? void 0 : _a.dataTypeMatcher;\n        if (!dataTypeMatcher) {\n            return true;\n        }\n        return dataTypeMatcher(value);\n    }\n    validateColDef(colDef) {\n        if (colDef.cellDataType === 'object') {\n            if (colDef.valueFormatter === this.dataTypeDefinitions.object.groupSafeValueFormatter && !this.hasObjectValueFormatter) {\n                warnOnce('Cell data type is \"object\" but no value formatter has been provided. Please either provide an object data type definition with a value formatter, or set \"colDef.valueFormatter\"');\n            }\n            if (colDef.editable && colDef.valueParser === this.dataTypeDefinitions.object.valueParser && !this.hasObjectValueParser) {\n                warnOnce('Cell data type is \"object\" but no value parser has been provided. Please either provide an object data type definition with a value parser, or set \"colDef.valueParser\"');\n            }\n        }\n    }\n    setColDefPropertiesForBaseDataType(colDef, dataTypeDefinition, colId) {\n        const formatValue = (column, node, value) => {\n            let valueFormatter = column.getColDef().valueFormatter;\n            if (valueFormatter === dataTypeDefinition.groupSafeValueFormatter) {\n                valueFormatter = dataTypeDefinition.valueFormatter;\n            }\n            return this.valueFormatterService.formatValue(column, node, value, valueFormatter);\n        };\n        const usingSetFilter = ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId());\n        const translate = this.localeService.getLocaleTextFunc();\n        const mergeFilterParams = (params) => {\n            const { filterParams } = colDef;\n            colDef.filterParams = typeof filterParams === 'object' ? Object.assign(Object.assign({}, filterParams), params) : params;\n        };\n        switch (dataTypeDefinition.baseDataType) {\n            case 'number': {\n                colDef.cellEditor = 'agNumberCellEditor';\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        comparator: (a, b) => {\n                            const valA = a == null ? 0 : parseInt(a);\n                            const valB = b == null ? 0 : parseInt(b);\n                            if (valA === valB)\n                                return 0;\n                            return valA > valB ? 1 : -1;\n                        },\n                    });\n                }\n                break;\n            }\n            case 'boolean': {\n                colDef.cellEditor = 'agCheckboxCellEditor';\n                colDef.cellRenderer = 'agCheckboxCellRenderer';\n                colDef.suppressKeyboardEvent = (params) => !!params.colDef.editable && params.event.key === KeyCode.SPACE;\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params) => {\n                            if (!exists(params.value)) {\n                                return translate('blanks', '(Blanks)');\n                            }\n                            return translate(String(params.value), params.value ? 'True' : 'False');\n                        }\n                    });\n                }\n                else {\n                    mergeFilterParams({\n                        maxNumConditions: 1,\n                        filterOptions: [\n                            'empty',\n                            {\n                                displayKey: 'true',\n                                displayName: 'True',\n                                predicate: (_filterValues, cellValue) => cellValue,\n                                numberOfInputs: 0,\n                            },\n                            {\n                                displayKey: 'false',\n                                displayName: 'False',\n                                predicate: (_filterValues, cellValue) => cellValue === false,\n                                numberOfInputs: 0,\n                            },\n                        ]\n                    });\n                }\n                break;\n            }\n            case 'date': {\n                colDef.cellEditor = 'agDateCellEditor';\n                colDef.keyCreator = (params) => formatValue(params.column, params.node, params.value);\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params) => {\n                            const valueFormatted = formatValue(params.column, params.node, params.value);\n                            return exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                        treeList: true,\n                        treeListFormatter: (pathKey, level) => {\n                            if (level === 1 && pathKey != null) {\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\n                            }\n                            return pathKey !== null && pathKey !== void 0 ? pathKey : translate('blanks', '(Blanks)');\n                        }\n                    });\n                }\n                break;\n            }\n            case 'dateString': {\n                colDef.cellEditor = 'agDateStringCellEditor';\n                colDef.keyCreator = (params) => formatValue(params.column, params.node, params.value);\n                const convertToDate = this.getDateParserFunction();\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params) => {\n                            const valueFormatted = formatValue(params.column, params.node, params.value);\n                            return exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        },\n                        treeList: true,\n                        treeListPathGetter: (value) => {\n                            const date = convertToDate(value !== null && value !== void 0 ? value : undefined);\n                            return date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;\n                        },\n                        treeListFormatter: (pathKey, level) => {\n                            if (level === 1 && pathKey != null) {\n                                const monthKey = MONTH_KEYS[Number(pathKey) - 1];\n                                return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);\n                            }\n                            return pathKey !== null && pathKey !== void 0 ? pathKey : translate('blanks', '(Blanks)');\n                        }\n                    });\n                }\n                else {\n                    mergeFilterParams({\n                        comparator: (filterDate, cellValue) => {\n                            const cellAsDate = convertToDate(cellValue);\n                            if (cellValue == null || cellAsDate < filterDate) {\n                                return -1;\n                            }\n                            if (cellAsDate > filterDate) {\n                                return 1;\n                            }\n                            return 0;\n                        }\n                    });\n                }\n                break;\n            }\n            case 'object': {\n                colDef.cellEditorParams = {\n                    useFormatter: true,\n                };\n                colDef.comparator = (a, b) => {\n                    const column = this.columnModel.getPrimaryColumn(colId);\n                    const colDef = column === null || column === void 0 ? void 0 : column.getColDef();\n                    if (!column || !colDef) {\n                        return 0;\n                    }\n                    const valA = a == null ? '' : formatValue(column, null, a);\n                    const valB = b == null ? '' : formatValue(column, null, b);\n                    if (valA === valB)\n                        return 0;\n                    return valA > valB ? 1 : -1;\n                };\n                colDef.keyCreator = (params) => formatValue(params.column, params.node, params.value);\n                if (usingSetFilter) {\n                    mergeFilterParams({\n                        valueFormatter: (params) => {\n                            const valueFormatted = formatValue(params.column, params.node, params.value);\n                            return exists(valueFormatted) ? valueFormatted : translate('blanks', '(Blanks)');\n                        }\n                    });\n                }\n                else {\n                    colDef.filterValueGetter = (params) => formatValue(params.column, params.node, this.valueService.getValue(params.column, params.node));\n                }\n                break;\n            }\n        }\n    }\n    getDefaultDataTypes() {\n        const defaultDateFormatMatcher = (value) => !!value.match('^\\\\d{4}-\\\\d{2}-\\\\d{2}$');\n        const translate = this.localeService.getLocaleTextFunc();\n        return {\n            number: {\n                baseDataType: 'number',\n                valueParser: (params) => params.newValue === '' ? null : Number(params.newValue),\n                valueFormatter: (params) => {\n                    if (params.value == null) {\n                        return '';\n                    }\n                    if (typeof params.value !== 'number' || isNaN(params.value)) {\n                        console.log('was', typeof params.value, params.value, params);\n                        return translate('invalidNumber', 'Invalid Number');\n                    }\n                    return String(params.value);\n                },\n                dataTypeMatcher: (value) => typeof value === 'number',\n            },\n            text: {\n                baseDataType: 'text',\n                valueParser: (params) => params.newValue === '' ? null : toStringOrNull(params.newValue),\n                dataTypeMatcher: (value) => typeof value === 'string',\n            },\n            boolean: {\n                baseDataType: 'boolean',\n                valueParser: (params) => {\n                    if (params.newValue == null) {\n                        return params.newValue;\n                    }\n                    return params.newValue === '' ? null : String(params.newValue).toLowerCase() === 'true';\n                },\n                valueFormatter: (params) => params.value == null ? '' : String(params.value),\n                dataTypeMatcher: (value) => typeof value === 'boolean',\n            },\n            date: {\n                baseDataType: 'date',\n                valueParser: (params) => parseDateTimeFromString(params.newValue == null ? null : String(params.newValue)),\n                valueFormatter: (params) => {\n                    var _a;\n                    if (params.value == null) {\n                        return '';\n                    }\n                    if (!(params.value instanceof Date) || isNaN(params.value.getTime())) {\n                        return translate('invalidDate', 'Invalid Date');\n                    }\n                    return (_a = serialiseDate(params.value, false)) !== null && _a !== void 0 ? _a : '';\n                },\n                dataTypeMatcher: (value) => value instanceof Date,\n            },\n            dateString: {\n                baseDataType: 'dateString',\n                dateParser: (value) => { var _a; return (_a = parseDateTimeFromString(value)) !== null && _a !== void 0 ? _a : undefined; },\n                dateFormatter: (value) => { var _a; return (_a = serialiseDate(value !== null && value !== void 0 ? value : null, false)) !== null && _a !== void 0 ? _a : undefined; },\n                valueParser: (params) => defaultDateFormatMatcher(String(params.newValue)) ? params.newValue : null,\n                valueFormatter: (params) => defaultDateFormatMatcher(String(params.value)) ? params.value : '',\n                dataTypeMatcher: (value) => typeof value === 'string' && defaultDateFormatMatcher(value),\n            },\n            object: {\n                baseDataType: 'object',\n                valueParser: () => null,\n                valueFormatter: (params) => { var _a; return (_a = toStringOrNull(params.value)) !== null && _a !== void 0 ? _a : ''; },\n            }\n        };\n    }\n};\n__decorate([\n    Autowired('rowModel')\n], DataTypeService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('columnModel')\n], DataTypeService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('columnUtils')\n], DataTypeService.prototype, \"columnUtils\", void 0);\n__decorate([\n    Autowired('valueService')\n], DataTypeService.prototype, \"valueService\", void 0);\n__decorate([\n    Autowired('valueFormatterService')\n], DataTypeService.prototype, \"valueFormatterService\", void 0);\n__decorate([\n    PostConstruct\n], DataTypeService.prototype, \"init\", null);\nDataTypeService = __decorate([\n    Bean('dataTypeService')\n], DataTypeService);\nexport { DataTypeService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, Autowired } from '../context/context.mjs';\nimport { BeanStub } from '../context/beanStub.mjs';\nimport { exists } from '../utils/generic.mjs';\nlet ValueParserService = class ValueParserService extends BeanStub {\n    parseValue(column, rowNode, newValue, oldValue) {\n        const colDef = column.getColDef();\n        const params = {\n            node: rowNode,\n            data: rowNode === null || rowNode === void 0 ? void 0 : rowNode.data,\n            oldValue,\n            newValue,\n            colDef,\n            column,\n            api: this.gridOptionsService.api,\n            columnApi: this.gridOptionsService.columnApi,\n            context: this.gridOptionsService.context\n        };\n        const valueParser = colDef.valueParser;\n        if (exists(valueParser)) {\n            if (typeof valueParser === 'function') {\n                return valueParser(params);\n            }\n            return this.expressionService.evaluate(valueParser, params);\n        }\n        return newValue;\n    }\n};\n__decorate([\n    Autowired('expressionService')\n], ValueParserService.prototype, \"expressionService\", void 0);\nValueParserService = __decorate([\n    Bean('valueParserService')\n], ValueParserService);\nexport { ValueParserService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"./context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"./context/context.mjs\";\nimport { Logger } from \"./logger.mjs\";\nimport { ModuleNames } from \"./modules/moduleNames.mjs\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry.mjs\";\nimport { Events } from \"./eventKeys.mjs\";\nlet SyncService = class SyncService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.waitingForColumns = false;\n    }\n    postConstruct() {\n        this.addManagedPropertyListener('columnDefs', (event) => this.setColumnDefs(event));\n    }\n    start() {\n        // we wait until the UI has finished initialising before setting in columns and rows\n        this.ctrlsService.whenReady(() => {\n            const columnDefs = this.gridOptionsService.get('columnDefs');\n            if (columnDefs) {\n                this.setColumnsAndData(columnDefs);\n            }\n            else {\n                this.waitingForColumns = true;\n            }\n            this.gridReady();\n        });\n    }\n    setColumnsAndData(columnDefs) {\n        this.columnModel.setColumnDefs(columnDefs !== null && columnDefs !== void 0 ? columnDefs : [], \"gridInitializing\");\n        this.rowModel.start();\n    }\n    gridReady() {\n        this.dispatchGridReadyEvent();\n        const isEnterprise = ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());\n        const logger = new Logger('AG Grid', () => this.gridOptionsService.get('debug'));\n        logger.log(`initialised successfully, enterprise = ${isEnterprise}`);\n    }\n    dispatchGridReadyEvent() {\n        const readyEvent = {\n            type: Events.EVENT_GRID_READY,\n        };\n        this.eventService.dispatchEvent(readyEvent);\n    }\n    setColumnDefs(event) {\n        var _a;\n        const columnDefs = this.gridOptionsService.get('columnDefs');\n        if (!columnDefs) {\n            return;\n        }\n        if (this.waitingForColumns) {\n            this.waitingForColumns = false;\n            this.setColumnsAndData(columnDefs);\n            return;\n        }\n        const source = (_a = event.source) !== null && _a !== void 0 ? _a : 'api';\n        this.columnModel.setColumnDefs(columnDefs, source);\n    }\n};\n__decorate([\n    Autowired('ctrlsService')\n], SyncService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], SyncService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('rowModel')\n], SyncService.prototype, \"rowModel\", void 0);\n__decorate([\n    PostConstruct\n], SyncService.prototype, \"postConstruct\", null);\nSyncService = __decorate([\n    Bean('syncService')\n], SyncService);\nexport { SyncService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context.mjs\";\nimport { Events } from \"../../eventKeys.mjs\";\nlet OverlayService = class OverlayService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.manuallyDisplayed = false;\n    }\n    postConstruct() {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, () => this.onRowDataUpdated());\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onNewColumnsLoaded());\n    }\n    registerOverlayWrapperComp(overlayWrapperComp) {\n        this.overlayWrapperComp = overlayWrapperComp;\n        if (!this.gridOptionsService.get('columnDefs') ||\n            (this.gridOptionsService.isRowModelType('clientSide') && !this.gridOptionsService.get('rowData'))) {\n            this.showLoadingOverlay();\n        }\n    }\n    showLoadingOverlay() {\n        if (this.gridOptionsService.get('suppressLoadingOverlay')) {\n            return;\n        }\n        const params = {};\n        const compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);\n        this.showOverlay(compDetails, 'ag-overlay-loading-wrapper');\n    }\n    showNoRowsOverlay() {\n        if (this.gridOptionsService.get('suppressNoRowsOverlay')) {\n            return;\n        }\n        const params = {};\n        const compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);\n        this.showOverlay(compDetails, 'ag-overlay-no-rows-wrapper');\n    }\n    showOverlay(compDetails, wrapperCssClass) {\n        const promise = compDetails.newAgStackInstance();\n        this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();\n        this.overlayWrapperComp.showOverlay(promise, wrapperCssClass);\n    }\n    hideOverlay() {\n        this.manuallyDisplayed = false;\n        this.overlayWrapperComp.hideOverlay();\n    }\n    showOrHideOverlay() {\n        const isEmpty = this.paginationProxy.isEmpty();\n        const isSuppressNoRowsOverlay = this.gridOptionsService.get('suppressNoRowsOverlay');\n        if (isEmpty && !isSuppressNoRowsOverlay) {\n            this.showNoRowsOverlay();\n        }\n        else {\n            this.hideOverlay();\n        }\n    }\n    onRowDataUpdated() {\n        this.showOrHideOverlay();\n    }\n    onNewColumnsLoaded() {\n        // hide overlay if columns and rows exist, this can happen if columns are loaded after data.\n        // this problem exists before of the race condition between the services (column controller in this case)\n        // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,\n        // this race condition would not happen.\n        if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {\n            this.hideOverlay();\n        }\n    }\n};\n__decorate([\n    Autowired('userComponentFactory')\n], OverlayService.prototype, \"userComponentFactory\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], OverlayService.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('columnModel')\n], OverlayService.prototype, \"columnModel\", void 0);\n__decorate([\n    PostConstruct\n], OverlayService.prototype, \"postConstruct\", null);\nOverlayService = __decorate([\n    Bean('overlayService')\n], OverlayService);\nexport { OverlayService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, Optional, PostConstruct } from \"../context/context.mjs\";\nimport { Events } from \"../eventKeys.mjs\";\nimport { jsonEquals } from \"../utils/generic.mjs\";\nimport { debounce } from \"../utils/function.mjs\";\nlet StateService = class StateService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.suppressEvents = true;\n        this.queuedUpdateSources = new Set();\n        this.dispatchStateUpdateEventDebounced = debounce(() => this.dispatchQueuedStateUpdateEvents(), 0);\n    }\n    postConstruct() {\n        var _a;\n        this.isClientSideRowModel = this.rowModel.getType() === 'clientSide';\n        this.cachedState = (_a = this.gridOptionsService.get('initialState')) !== null && _a !== void 0 ? _a : {};\n        this.ctrlsService.whenReady(() => this.setupStateOnGridReady());\n        const newColumnsLoadedDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, ({ source }) => {\n            if (source === 'gridInitializing') {\n                newColumnsLoadedDestroyFunc === null || newColumnsLoadedDestroyFunc === void 0 ? void 0 : newColumnsLoadedDestroyFunc();\n                this.setupStateOnColumnsInitialised();\n            }\n        });\n        const rowCountReadyDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_COUNT_READY, () => {\n            rowCountReadyDestroyFunc === null || rowCountReadyDestroyFunc === void 0 ? void 0 : rowCountReadyDestroyFunc();\n            this.setupStateOnRowCountReady();\n        });\n        const firstDataRenderedDestroyFunc = this.addManagedListener(this.eventService, Events.EVENT_FIRST_DATA_RENDERED, () => {\n            firstDataRenderedDestroyFunc === null || firstDataRenderedDestroyFunc === void 0 ? void 0 : firstDataRenderedDestroyFunc();\n            this.setupStateOnFirstDataRendered();\n            this.suppressEvents = false;\n            this.dispatchStateUpdateEvent(['gridInitializing']);\n        });\n    }\n    getState() {\n        return this.cachedState;\n    }\n    setupStateOnGridReady() {\n        // sidebar reads the initial state itself, so don't need to set\n        this.updateCachedState('sideBar', this.getSideBarState());\n        this.addManagedListener(this.eventService, Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED, () => this.updateCachedState('sideBar', this.getSideBarState()));\n        this.addManagedListener(this.eventService, Events.EVENT_SIDE_BAR_UPDATED, () => this.updateCachedState('sideBar', this.getSideBarState()));\n    }\n    setupStateOnColumnsInitialised() {\n        var _a;\n        const initialState = (_a = this.gridOptionsService.get('initialState')) !== null && _a !== void 0 ? _a : {};\n        const { filter: filterState, columnGroup: columnGroupState } = initialState;\n        this.setColumnState(initialState);\n        if (columnGroupState) {\n            this.setColumnGroupState(columnGroupState);\n        }\n        const advancedFilterModel = this.gridOptionsService.get('advancedFilterModel');\n        if (filterState || advancedFilterModel) {\n            this.setFilterState(filterState, advancedFilterModel);\n        }\n        this.updateColumnState([\n            'aggregation', 'columnOrder', 'columnPinning', 'columnSizing', 'columnVisibility', 'pivot', 'pivot', 'rowGroup', 'sort'\n        ]);\n        this.updateCachedState('columnGroup', this.getColumnGroupState());\n        this.updateCachedState('filter', this.getFilterState());\n        // aggregation\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, () => this.updateColumnState(['aggregation']));\n        // columnOrder\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, () => this.updateColumnState(['columnOrder']));\n        // columnPinning\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, () => this.updateColumnState(['columnPinning']));\n        // columnSizing\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, () => this.updateColumnState(['columnSizing']));\n        // columnVisibility\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => this.updateColumnState(['columnVisibility']));\n        // pivot\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.updateColumnState(['pivot']));\n        // pivot\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.updateColumnState(['pivot']));\n        // rowGroup\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.updateColumnState(['rowGroup']));\n        // sort\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, () => this.updateColumnState(['sort']));\n        // any column\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.updateColumnState([\n            'aggregation', 'columnOrder', 'columnPinning', 'columnSizing', 'columnVisibility', 'pivot', 'pivot', 'rowGroup', 'sort'\n        ]));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, () => this.updateCachedState('columnGroup', this.getColumnGroupState()));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, () => this.updateCachedState('filter', this.getFilterState()));\n    }\n    setupStateOnRowCountReady() {\n        var _a;\n        const { rowGroupExpansion: rowGroupExpansionState, rowSelection: rowSelectionState, pagination: paginationState } = (_a = this.gridOptionsService.get('initialState')) !== null && _a !== void 0 ? _a : {};\n        if (rowGroupExpansionState) {\n            this.setRowGroupExpansionState(rowGroupExpansionState);\n        }\n        if (rowSelectionState) {\n            this.setRowSelectionState(rowSelectionState);\n        }\n        if (paginationState) {\n            this.setPaginationState(paginationState);\n        }\n        this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState());\n        this.updateCachedState('rowSelection', this.getRowSelectionState());\n        this.updateCachedState('pagination', this.getPaginationState());\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, () => this.updateCachedState('rowGroupExpansion', this.getRowGroupExpansionState()));\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, () => this.updateCachedState('rowSelection', this.getRowSelectionState()));\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, (event) => {\n            if (event.newPage || event.newPageSize) {\n                this.updateCachedState('pagination', this.getPaginationState());\n            }\n        });\n    }\n    setupStateOnFirstDataRendered() {\n        var _a;\n        const { scroll: scrollState, rangeSelection: rangeSelectionState, focusedCell: focusedCellState } = (_a = this.gridOptionsService.get('initialState')) !== null && _a !== void 0 ? _a : {};\n        if (focusedCellState) {\n            this.setFocusedCellState(focusedCellState);\n        }\n        if (rangeSelectionState) {\n            this.setRangeSelectionState(rangeSelectionState);\n        }\n        if (scrollState) {\n            this.setScrollState(scrollState);\n        }\n        // reset sidebar as it could have updated when columns changed\n        this.updateCachedState('sideBar', this.getSideBarState());\n        this.updateCachedState('focusedCell', this.getFocusedCellState());\n        this.updateCachedState('rangeSelection', this.getRangeSelectionState());\n        this.updateCachedState('scroll', this.getScrollState());\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, () => this.updateCachedState('focusedCell', this.getFocusedCellState()));\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, (event) => {\n            if (event.finished) {\n                this.updateCachedState('rangeSelection', this.getRangeSelectionState());\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, () => this.updateCachedState('scroll', this.getScrollState()));\n    }\n    getColumnState() {\n        const pivotMode = this.columnModel.isPivotMode();\n        const sortColumns = [];\n        const groupColumns = [];\n        const aggregationColumns = [];\n        const pivotColumns = [];\n        const leftColumns = [];\n        const rightColumns = [];\n        const hiddenColumns = [];\n        const columnSizes = [];\n        const columns = [];\n        const columnState = this.columnModel.getColumnState();\n        for (let i = 0; i < columnState.length; i++) {\n            const { colId, sort, sortIndex, rowGroup, rowGroupIndex, aggFunc, pivot, pivotIndex, pinned, hide, width, flex } = columnState[i];\n            columns.push(colId);\n            if (sort) {\n                sortColumns[sortIndex !== null && sortIndex !== void 0 ? sortIndex : 0] = { colId, sort };\n            }\n            if (rowGroup) {\n                groupColumns[rowGroupIndex !== null && rowGroupIndex !== void 0 ? rowGroupIndex : 0] = colId;\n            }\n            if (typeof aggFunc === 'string') {\n                aggregationColumns.push({ colId, aggFunc });\n            }\n            if (pivot) {\n                pivotColumns[pivotIndex !== null && pivotIndex !== void 0 ? pivotIndex : 0] = colId;\n            }\n            if (pinned) {\n                (pinned === 'right' ? rightColumns : leftColumns).push(colId);\n            }\n            if (hide) {\n                hiddenColumns.push(colId);\n            }\n            if (flex || width) {\n                columnSizes.push({ colId, flex: flex !== null && flex !== void 0 ? flex : undefined, width });\n            }\n        }\n        return {\n            sort: sortColumns.length ? { sortModel: sortColumns } : undefined,\n            rowGroup: groupColumns.length ? { groupColIds: groupColumns } : undefined,\n            aggregation: aggregationColumns.length ? { aggregationModel: aggregationColumns } : undefined,\n            pivot: pivotColumns.length || pivotMode ? { pivotMode, pivotColIds: pivotColumns } : undefined,\n            columnPinning: leftColumns.length || rightColumns.length ? { leftColIds: leftColumns, rightColIds: rightColumns } : undefined,\n            columnVisibility: hiddenColumns.length ? { hiddenColIds: hiddenColumns } : undefined,\n            columnSizing: columnSizes.length ? { columnSizingModel: columnSizes } : undefined,\n            columnOrder: columns.length ? { orderedColIds: columns } : undefined\n        };\n    }\n    setColumnState(initialState) {\n        const { sort: sortState, rowGroup: groupState, aggregation: aggregationState, pivot: pivotState, columnPinning: columnPinningState, columnVisibility: columnVisibilityState, columnSizing: columnSizingState, columnOrder: columnOrderState } = initialState;\n        const columnStateMap = {};\n        const defaultState = {};\n        const getColumnState = (colId) => {\n            let columnState = columnStateMap[colId];\n            if (columnState) {\n                return columnState;\n            }\n            columnState = { colId };\n            columnStateMap[colId] = columnState;\n            return columnState;\n        };\n        if (sortState) {\n            sortState.sortModel.forEach(({ colId, sort }, sortIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.sort = sort;\n                columnState.sortIndex = sortIndex;\n            });\n            defaultState.sort = null;\n            defaultState.sortIndex = null;\n        }\n        if (groupState) {\n            groupState.groupColIds.forEach((colId, rowGroupIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.rowGroup = true;\n                columnState.rowGroupIndex = rowGroupIndex;\n            });\n            defaultState.rowGroup = null;\n            defaultState.rowGroupIndex = null;\n        }\n        if (aggregationState) {\n            aggregationState.aggregationModel.forEach(({ colId, aggFunc }) => {\n                getColumnState(colId).aggFunc = aggFunc;\n            });\n            defaultState.aggFunc = null;\n        }\n        if (pivotState) {\n            pivotState.pivotColIds.forEach((colId, pivotIndex) => {\n                const columnState = getColumnState(colId);\n                columnState.pivot = true;\n                columnState.pivotIndex = pivotIndex;\n            });\n            defaultState.pivot = null;\n            defaultState.pivotIndex = null;\n            this.columnModel.setPivotMode(pivotState.pivotMode);\n        }\n        if (columnPinningState) {\n            columnPinningState.leftColIds.forEach(colId => {\n                getColumnState(colId).pinned = 'left';\n            });\n            columnPinningState.rightColIds.forEach(colId => {\n                getColumnState(colId).pinned = 'right';\n            });\n            defaultState.pinned = null;\n        }\n        if (columnVisibilityState) {\n            columnVisibilityState.hiddenColIds.forEach(colId => {\n                getColumnState(colId).hide = true;\n            });\n            defaultState.hide = null;\n        }\n        if (columnSizingState) {\n            columnSizingState.columnSizingModel.forEach(({ colId, flex, width }) => {\n                const columnState = getColumnState(colId);\n                columnState.flex = flex !== null && flex !== void 0 ? flex : null;\n                columnState.width = width;\n            });\n            defaultState.flex = null;\n        }\n        const columns = columnOrderState === null || columnOrderState === void 0 ? void 0 : columnOrderState.orderedColIds;\n        const applyOrder = !!(columns === null || columns === void 0 ? void 0 : columns.length);\n        const columnStates = applyOrder ? columns.map(colId => getColumnState(colId)) : Object.values(columnStateMap);\n        if (columnStates.length) {\n            this.columnModel.applyColumnState({\n                state: columnStates,\n                applyOrder,\n                defaultState\n            }, 'gridInitializing');\n        }\n    }\n    getColumnGroupState() {\n        const columnGroupState = this.columnModel.getColumnGroupState();\n        const openColumnGroups = [];\n        columnGroupState.forEach(({ groupId, open }) => {\n            if (open) {\n                openColumnGroups.push(groupId);\n            }\n        });\n        return openColumnGroups.length ? { openColumnGroupIds: openColumnGroups } : undefined;\n    }\n    setColumnGroupState(columnGroupState) {\n        const { openColumnGroupIds: openColumnGroups } = columnGroupState;\n        const openColumnGroupSet = new Set(openColumnGroups);\n        const existingColumnGroupState = this.columnModel.getColumnGroupState();\n        const stateItems = existingColumnGroupState.map(({ groupId }) => ({\n            groupId,\n            open: openColumnGroupSet.has(groupId)\n        }));\n        this.columnModel.setColumnGroupState(stateItems, 'gridInitializing');\n    }\n    getFilterState() {\n        var _a;\n        let filterModel = this.filterManager.getFilterModel();\n        if (filterModel && Object.keys(filterModel).length === 0) {\n            filterModel = undefined;\n        }\n        const advancedFilterModel = (_a = this.filterManager.getAdvancedFilterModel()) !== null && _a !== void 0 ? _a : undefined;\n        return filterModel || advancedFilterModel ? { filterModel, advancedFilterModel } : undefined;\n    }\n    setFilterState(filterState, gridOptionAdvancedFilterModel) {\n        const { filterModel, advancedFilterModel } = filterState !== null && filterState !== void 0 ? filterState : { advancedFilterModel: gridOptionAdvancedFilterModel };\n        if (filterModel) {\n            this.filterManager.setFilterModel(filterModel, 'columnFilter');\n        }\n        if (advancedFilterModel) {\n            this.filterManager.setAdvancedFilterModel(advancedFilterModel);\n        }\n    }\n    getRangeSelectionState() {\n        var _a;\n        const cellRanges = (_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.getCellRanges().map(cellRange => {\n            const { id, type, startRow, endRow, columns, startColumn } = cellRange;\n            return {\n                id,\n                type,\n                startRow,\n                endRow,\n                colIds: columns.map(column => column.getColId()),\n                startColId: startColumn.getColId()\n            };\n        });\n        return (cellRanges === null || cellRanges === void 0 ? void 0 : cellRanges.length) ? { cellRanges } : undefined;\n    }\n    setRangeSelectionState(rangeSelectionState) {\n        var _a;\n        if (!this.gridOptionsService.get('enableRangeSelection')) {\n            return;\n        }\n        const cellRanges = rangeSelectionState.cellRanges.map(cellRange => (Object.assign(Object.assign({}, cellRange), { columns: cellRange.colIds.map(colId => this.columnModel.getGridColumn(colId)), startColumn: this.columnModel.getGridColumn(cellRange.startColId) })));\n        (_a = this.rangeService) === null || _a === void 0 ? void 0 : _a.setCellRanges(cellRanges);\n    }\n    getScrollState() {\n        var _a, _b, _c;\n        if (!this.isClientSideRowModel) {\n            // can't restore, so don't provide\n            return undefined;\n        }\n        const scrollFeature = (_a = this.ctrlsService.getGridBodyCtrl()) === null || _a === void 0 ? void 0 : _a.getScrollFeature();\n        const { left } = (_b = scrollFeature === null || scrollFeature === void 0 ? void 0 : scrollFeature.getHScrollPosition()) !== null && _b !== void 0 ? _b : { left: 0 };\n        const { top } = (_c = scrollFeature === null || scrollFeature === void 0 ? void 0 : scrollFeature.getVScrollPosition()) !== null && _c !== void 0 ? _c : { top: 0 };\n        return top || left ? {\n            top,\n            left\n        } : undefined;\n    }\n    setScrollState(scrollState) {\n        var _a;\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        const { top, left } = scrollState;\n        (_a = this.ctrlsService.getGridBodyCtrl()) === null || _a === void 0 ? void 0 : _a.getScrollFeature().setScrollPosition(top, left);\n    }\n    getSideBarState() {\n        var _a, _b;\n        return (_b = (_a = this.sideBarService) === null || _a === void 0 ? void 0 : _a.getSideBarComp()) === null || _b === void 0 ? void 0 : _b.getState();\n    }\n    getFocusedCellState() {\n        if (!this.isClientSideRowModel) {\n            // can't restore, so don't provide\n            return undefined;\n        }\n        const focusedCell = this.focusService.getFocusedCell();\n        if (focusedCell) {\n            const { column, rowIndex, rowPinned } = focusedCell;\n            return {\n                colId: column.getColId(),\n                rowIndex,\n                rowPinned\n            };\n        }\n        return undefined;\n    }\n    setFocusedCellState(focusedCellState) {\n        if (!this.isClientSideRowModel) {\n            return;\n        }\n        const { colId, rowIndex, rowPinned } = focusedCellState;\n        this.focusService.setFocusedCell({\n            column: this.columnModel.getGridColumn(colId),\n            rowIndex,\n            rowPinned,\n            forceBrowserFocus: true,\n            preventScrollOnBrowserFocus: true\n        });\n    }\n    getPaginationState() {\n        const page = this.paginationProxy.getCurrentPage();\n        const pageSize = !this.gridOptionsService.get('paginationAutoPageSize')\n            ? this.paginationProxy.getPageSize() : undefined;\n        if (!page && !pageSize) {\n            return;\n        }\n        return { page, pageSize };\n    }\n    setPaginationState(paginationState) {\n        if (paginationState.pageSize && !this.gridOptionsService.get('paginationAutoPageSize')) {\n            this.paginationProxy.setPageSize(paginationState.pageSize, 'initialState');\n        }\n        if (typeof paginationState.page === 'number') {\n            this.paginationProxy.setPage(paginationState.page);\n        }\n    }\n    getRowSelectionState() {\n        var _a;\n        const selectionState = this.selectionService.getSelectionState();\n        const noSelections = !selectionState || (!Array.isArray(selectionState) &&\n            (selectionState.selectAll === false ||\n                selectionState.selectAllChildren === false) && !((_a = selectionState === null || selectionState === void 0 ? void 0 : selectionState.toggledNodes) === null || _a === void 0 ? void 0 : _a.length));\n        return noSelections ? undefined : selectionState;\n    }\n    setRowSelectionState(rowSelectionState) {\n        this.selectionService.setSelectionState(rowSelectionState, 'gridInitializing');\n    }\n    getRowGroupExpansionState() {\n        const expandedRowGroups = this.expansionService.getExpandedRows();\n        return expandedRowGroups.length ? {\n            expandedRowGroupIds: expandedRowGroups\n        } : undefined;\n    }\n    setRowGroupExpansionState(rowGroupExpansionState) {\n        this.expansionService.expandRows(rowGroupExpansionState.expandedRowGroupIds);\n    }\n    updateColumnState(features) {\n        const newColumnState = this.getColumnState();\n        let hasChanged = false;\n        Object.entries(newColumnState).forEach(([key, value]) => {\n            if (!jsonEquals(value, this.cachedState[key])) {\n                hasChanged = true;\n            }\n        });\n        this.cachedState = Object.assign(Object.assign({}, this.cachedState), newColumnState);\n        if (hasChanged) {\n            this.dispatchStateUpdateEvent(features);\n        }\n    }\n    updateCachedState(key, value) {\n        const existingValue = this.cachedState[key];\n        this.cachedState = Object.assign(Object.assign({}, this.cachedState), { [key]: value });\n        if (!jsonEquals(value, existingValue)) {\n            this.dispatchStateUpdateEvent([key]);\n        }\n    }\n    dispatchStateUpdateEvent(sources) {\n        if (this.suppressEvents) {\n            return;\n        }\n        sources.forEach(source => this.queuedUpdateSources.add(source));\n        this.dispatchStateUpdateEventDebounced();\n    }\n    dispatchQueuedStateUpdateEvents() {\n        const sources = Array.from(this.queuedUpdateSources);\n        this.queuedUpdateSources.clear();\n        const event = {\n            type: Events.EVENT_STATE_UPDATED,\n            sources,\n            state: this.cachedState\n        };\n        this.eventService.dispatchEvent(event);\n    }\n};\n__decorate([\n    Autowired('filterManager')\n], StateService.prototype, \"filterManager\", void 0);\n__decorate([\n    Optional('rangeService')\n], StateService.prototype, \"rangeService\", void 0);\n__decorate([\n    Autowired('ctrlsService')\n], StateService.prototype, \"ctrlsService\", void 0);\n__decorate([\n    Optional('sideBarService')\n], StateService.prototype, \"sideBarService\", void 0);\n__decorate([\n    Autowired('focusService')\n], StateService.prototype, \"focusService\", void 0);\n__decorate([\n    Autowired('columnModel')\n], StateService.prototype, \"columnModel\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], StateService.prototype, \"paginationProxy\", void 0);\n__decorate([\n    Autowired('rowModel')\n], StateService.prototype, \"rowModel\", void 0);\n__decorate([\n    Autowired('selectionService')\n], StateService.prototype, \"selectionService\", void 0);\n__decorate([\n    Autowired('expansionService')\n], StateService.prototype, \"expansionService\", void 0);\n__decorate([\n    PostConstruct\n], StateService.prototype, \"postConstruct\", null);\nStateService = __decorate([\n    Bean('stateService')\n], StateService);\nexport { StateService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { fuzzyCheckStrings } from \"../utils/fuzzyMatch.mjs\";\nimport { iterateObject } from \"../utils/object.mjs\";\nimport { warnOnce } from \"../utils/function.mjs\";\nimport { GRID_OPTIONS_VALIDATORS } from \"./rules/gridOptionsValidations.mjs\";\nimport { COL_DEF_VALIDATORS } from \"./rules/colDefValidations.mjs\";\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context.mjs\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry.mjs\";\nlet ValidationService = class ValidationService extends BeanStub {\n    init() {\n        this.processGridOptions(this.gridOptions);\n    }\n    processGridOptions(options) {\n        this.processOptions(options, GRID_OPTIONS_VALIDATORS);\n    }\n    processColumnDefs(options) {\n        this.processOptions(options, COL_DEF_VALIDATORS);\n    }\n    processOptions(options, validator) {\n        const { validations, deprecations, allProperties, propertyExceptions, objectName, docsUrl } = validator;\n        if (allProperties && this.gridOptions.suppressPropertyNamesCheck !== true) {\n            this.checkProperties(options, [...propertyExceptions !== null && propertyExceptions !== void 0 ? propertyExceptions : [], ...Object.keys(deprecations)], allProperties, objectName, docsUrl);\n        }\n        const warnings = new Set();\n        const optionKeys = Object.keys(options);\n        optionKeys.forEach((key) => {\n            var _a;\n            const deprecation = deprecations[key];\n            if (deprecation) {\n                if ('renamed' in deprecation) {\n                    const { renamed, version } = deprecation;\n                    warnings.add(`As of v${version}, ${String(key)} is deprecated. Please use ${String(renamed)} instead.`);\n                    options[renamed] = options[key];\n                }\n                else {\n                    const { message, version } = deprecation;\n                    warnings.add(`As of v${version}, ${String(key)} is deprecated. ${message !== null && message !== void 0 ? message : ''}`);\n                }\n            }\n            const value = options[key];\n            if (value == null || value === false) {\n                // false implies feature is disabled, don't validate.\n                return;\n            }\n            const rulesOrGetter = validations[key];\n            let rules;\n            if (!rulesOrGetter) {\n                return;\n            }\n            else if (typeof rulesOrGetter === 'function') {\n                const fromGetter = rulesOrGetter(options, this.gridOptions);\n                if (!fromGetter) {\n                    return;\n                }\n                // this is a sub validator.\n                if ('objectName' in fromGetter) {\n                    const value = options[key];\n                    if (Array.isArray(value)) {\n                        value.forEach(item => {\n                            this.processOptions(item, fromGetter);\n                        });\n                        return;\n                    }\n                    this.processOptions(options[key], fromGetter);\n                    return;\n                }\n                rules = fromGetter;\n            }\n            else {\n                rules = rulesOrGetter;\n            }\n            const { module, dependencies, supportedRowModels } = rules;\n            if (supportedRowModels) {\n                const rowModel = (_a = this.gridOptions.rowModelType) !== null && _a !== void 0 ? _a : 'clientSide';\n                if (!supportedRowModels.includes(rowModel)) {\n                    warnings.add(`${String(key)} is not supported with the '${rowModel}' row model.`);\n                    return;\n                }\n            }\n            if (module) {\n                const modules = Array.isArray(module) ? module : [module];\n                let allRegistered = true;\n                modules.forEach(m => {\n                    if (!ModuleRegistry.__assertRegistered(m, String(key), this.gridOptionsService.getGridId())) {\n                        allRegistered = false;\n                        warnings.add(`${String(key)} is only available when ${m} is loaded.`);\n                    }\n                });\n                if (!allRegistered) {\n                    return;\n                }\n            }\n            if (dependencies) {\n                const warning = this.checkForWarning(key, dependencies, options);\n                if (warning) {\n                    warnings.add(warning);\n                    return;\n                }\n            }\n        });\n        if (warnings.size > 0) {\n            warnings.forEach(warning => {\n                warnOnce(warning);\n            });\n        }\n    }\n    ;\n    checkForWarning(key, validator, options) {\n        if (typeof validator === 'function') {\n            return validator(options, this.gridOptions);\n        }\n        const optionEntries = Object.entries(validator);\n        const failed = optionEntries.find(([key, value]) => {\n            const gridOptionValue = options[key];\n            return !value.includes(gridOptionValue);\n        });\n        if (!failed) {\n            return null;\n        }\n        const [failedKey, possibleOptions] = failed;\n        if (possibleOptions.length > 1) {\n            return `'${String(key)}' requires '${failedKey}' to be one of [${possibleOptions.join(', ')}].`;\n        }\n        return `'${String(key)}' requires '${failedKey}' to be ${possibleOptions[0]}.`;\n    }\n    checkProperties(object, exceptions, // deprecated properties generally\n    validProperties, // properties to recommend\n    containerName, docsUrl) {\n        // Vue adds these properties to all objects, so we ignore them when checking for invalid properties\n        const VUE_FRAMEWORK_PROPS = ['__ob__', '__v_skip', '__metadata__'];\n        const invalidProperties = fuzzyCheckStrings(Object.getOwnPropertyNames(object), [...VUE_FRAMEWORK_PROPS, ...exceptions, ...validProperties], validProperties);\n        iterateObject(invalidProperties, (key, value) => {\n            warnOnce(`invalid ${containerName} property '${key}' did you mean any of these: ${value.slice(0, 8).join(', ')}`);\n        });\n        if (Object.keys(invalidProperties).length > 0 && docsUrl) {\n            const url = this.getFrameworkOverrides().getDocLink(docsUrl);\n            warnOnce(`to see all the valid ${containerName} properties please check: ${url}`);\n        }\n    }\n};\n__decorate([\n    Autowired('gridOptions')\n], ValidationService.prototype, \"gridOptions\", void 0);\n__decorate([\n    PostConstruct\n], ValidationService.prototype, \"init\", null);\nValidationService = __decorate([\n    Bean('validationService')\n], ValidationService);\nexport { ValidationService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { BeanStub } from \"../context/beanStub.mjs\";\nimport { Bean } from \"../context/context.mjs\";\nlet ApiEventService = class ApiEventService extends BeanStub {\n    constructor() {\n        super(...arguments);\n        this.syncEventListeners = new Map();\n        this.asyncEventListeners = new Map();\n        this.syncGlobalEventListeners = new Set();\n        this.asyncGlobalEventListeners = new Set();\n    }\n    addEventListener(eventType, listener) {\n        const async = this.gridOptionsService.useAsyncEvents();\n        const listeners = async ? this.asyncEventListeners : this.syncEventListeners;\n        if (!listeners.has(eventType)) {\n            listeners.set(eventType, new Set());\n        }\n        listeners.get(eventType).add(listener);\n        this.eventService.addEventListener(eventType, listener, async);\n    }\n    addGlobalListener(listener) {\n        const async = this.gridOptionsService.useAsyncEvents();\n        const listeners = async ? this.asyncGlobalEventListeners : this.syncGlobalEventListeners;\n        listeners.add(listener);\n        this.eventService.addGlobalListener(listener, async);\n    }\n    removeEventListener(eventType, listener) {\n        var _a;\n        const asyncListeners = this.asyncEventListeners.get(eventType);\n        const hasAsync = !!(asyncListeners === null || asyncListeners === void 0 ? void 0 : asyncListeners.delete(listener));\n        if (!hasAsync) {\n            (_a = this.asyncEventListeners.get(eventType)) === null || _a === void 0 ? void 0 : _a.delete(listener);\n        }\n        this.eventService.removeEventListener(eventType, listener, hasAsync);\n    }\n    removeGlobalListener(listener) {\n        const hasAsync = this.asyncGlobalEventListeners.delete(listener);\n        if (!hasAsync) {\n            this.syncGlobalEventListeners.delete(listener);\n        }\n        this.eventService.removeGlobalListener(listener, hasAsync);\n    }\n    destroyEventListeners(map, async) {\n        map.forEach((listeners, eventType) => {\n            listeners.forEach(listener => this.eventService.removeEventListener(eventType, listener, async));\n            listeners.clear();\n        });\n        map.clear();\n    }\n    destroyGlobalListeners(set, async) {\n        set.forEach(listener => this.eventService.removeGlobalListener(listener, async));\n        set.clear();\n    }\n    destroy() {\n        super.destroy();\n        this.destroyEventListeners(this.syncEventListeners, false);\n        this.destroyEventListeners(this.asyncEventListeners, true);\n        this.destroyGlobalListeners(this.syncGlobalEventListeners, false);\n        this.destroyGlobalListeners(this.asyncGlobalEventListeners, true);\n    }\n};\nApiEventService = __decorate([\n    Bean('apiEventService')\n], ApiEventService);\nexport { ApiEventService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from \"../../widgets/component.mjs\";\nimport { Autowired, PostConstruct } from \"../../context/context.mjs\";\nimport { AgSelect, Events } from \"../../main.mjs\";\nimport { clearElement } from \"../../utils/dom.mjs\";\nimport { warnOnce } from \"../../utils/function.mjs\";\nexport class PageSizeSelectorComp extends Component {\n    constructor() {\n        super(/* html */ `<span class=\"ag-paging-page-size\"></span>`);\n        this.hasEmptyOption = false;\n        this.handlePageSizeItemSelected = () => {\n            if (!this.selectPageSizeComp) {\n                return;\n            }\n            const newValue = this.selectPageSizeComp.getValue();\n            if (!newValue) {\n                return;\n            }\n            const paginationPageSize = Number(newValue);\n            if (isNaN(paginationPageSize) ||\n                paginationPageSize < 1 ||\n                paginationPageSize === this.paginationProxy.getPageSize()) {\n                return;\n            }\n            this.paginationProxy.setPageSize(paginationPageSize, 'pageSizeSelector');\n            if (this.hasEmptyOption) {\n                // Toggle the selector to force a refresh of the options and hide the empty option,\n                // as it's no longer needed.\n                this.toggleSelectDisplay(true);\n            }\n            this.selectPageSizeComp.getFocusableElement().focus();\n        };\n    }\n    init() {\n        this.addManagedPropertyListener('paginationPageSizeSelector', () => {\n            this.onPageSizeSelectorValuesChange();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, (event) => this.handlePaginationChanged(event));\n    }\n    handlePaginationChanged(paginationChangedEvent) {\n        if (!this.selectPageSizeComp || !(paginationChangedEvent === null || paginationChangedEvent === void 0 ? void 0 : paginationChangedEvent.newPageSize)) {\n            return;\n        }\n        const paginationPageSize = this.paginationProxy.getPageSize();\n        if (this.getPageSizeSelectorValues().includes(paginationPageSize)) {\n            this.selectPageSizeComp.setValue(paginationPageSize.toString());\n        }\n        else {\n            if (this.hasEmptyOption) {\n                this.selectPageSizeComp.setValue('');\n            }\n            else {\n                this.toggleSelectDisplay(true);\n            }\n        }\n    }\n    toggleSelectDisplay(show) {\n        if (this.selectPageSizeComp) {\n            this.reset();\n        }\n        if (!show) {\n            return;\n        }\n        this.reloadPageSizesSelector();\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n        this.appendChild(this.selectPageSizeComp);\n    }\n    reset() {\n        clearElement(this.getGui());\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n        this.destroyBean(this.selectPageSizeComp);\n        this.selectPageSizeComp = undefined;\n    }\n    onPageSizeSelectorValuesChange() {\n        if (!this.selectPageSizeComp) {\n            return;\n        }\n        if (this.shouldShowPageSizeSelector()) {\n            this.reloadPageSizesSelector();\n        }\n    }\n    shouldShowPageSizeSelector() {\n        return (this.gridOptionsService.get('pagination') &&\n            !this.gridOptionsService.get('suppressPaginationPanel') &&\n            !this.gridOptionsService.get('paginationAutoPageSize') &&\n            this.gridOptionsService.get('paginationPageSizeSelector') !== false);\n    }\n    reloadPageSizesSelector() {\n        const pageSizeOptions = this.getPageSizeSelectorValues();\n        const paginationPageSizeOption = this.paginationProxy.getPageSize();\n        const shouldAddAndSelectEmptyOption = !paginationPageSizeOption || !pageSizeOptions.includes(paginationPageSizeOption);\n        if (shouldAddAndSelectEmptyOption) {\n            // When the paginationPageSize option is set to a value that is\n            // not in the list of page size options.\n            pageSizeOptions.unshift('');\n            warnOnce(`The paginationPageSize grid option is set to a value that is not in the list of page size options.\n                Please make sure that the paginationPageSize grid option is set to one of the values in the \n                paginationPageSizeSelector array, or set the paginationPageSizeSelector to false to hide the page size selector.`);\n        }\n        if (this.selectPageSizeComp) {\n            this.destroyBean(this.selectPageSizeComp);\n            this.selectPageSizeComp = undefined;\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const localisedLabel = localeTextFunc('pageSizeSelectorLabel', 'Page Size:');\n        const options = pageSizeOptions.map(value => ({\n            value: String(value),\n            text: String(value)\n        }));\n        const localisedAriaLabel = localeTextFunc('ariaPageSizeSelectorLabel', 'Page Size');\n        this.selectPageSizeComp = this.createManagedBean(new AgSelect())\n            .addOptions(options)\n            .setValue(String(shouldAddAndSelectEmptyOption ? '' : paginationPageSizeOption))\n            .setAriaLabel(localisedAriaLabel)\n            .setLabel(localisedLabel)\n            .onValueChange(() => this.handlePageSizeItemSelected());\n        this.hasEmptyOption = shouldAddAndSelectEmptyOption;\n    }\n    getPageSizeSelectorValues() {\n        const defaultValues = [20, 50, 100];\n        const paginationPageSizeSelectorValues = this.gridOptionsService.get('paginationPageSizeSelector');\n        if (!Array.isArray(paginationPageSizeSelectorValues) ||\n            !this.validateValues(paginationPageSizeSelectorValues)) {\n            return defaultValues;\n        }\n        return [...paginationPageSizeSelectorValues].sort((a, b) => a - b);\n    }\n    validateValues(values) {\n        if (!values.length) {\n            warnOnce(`The paginationPageSizeSelector grid option is an empty array. This is most likely a mistake.\n                If you want to hide the page size selector, please set the paginationPageSizeSelector to false.`);\n            return false;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const value = values[i];\n            const isNumber = typeof value === 'number';\n            const isPositive = value > 0;\n            if (!isNumber) {\n                warnOnce(`The paginationPageSizeSelector grid option contains a non-numeric value.\n                    Please make sure that all values in the paginationPageSizeSelector array are numbers.`);\n                return false;\n            }\n            if (!isPositive) {\n                warnOnce(`The paginationPageSizeSelector grid option contains a negative number or zero.\n                    Please make sure that all values in the paginationPageSizeSelector array are positive.`);\n                return false;\n            }\n        }\n        return true;\n    }\n    destroy() {\n        this.toggleSelectDisplay(false);\n        super.destroy();\n    }\n}\n__decorate([\n    Autowired('localeService')\n], PageSizeSelectorComp.prototype, \"localeService\", void 0);\n__decorate([\n    Autowired('gridOptionsService')\n], PageSizeSelectorComp.prototype, \"gridOptionsService\", void 0);\n__decorate([\n    Autowired('paginationProxy')\n], PageSizeSelectorComp.prototype, \"paginationProxy\", void 0);\n__decorate([\n    PostConstruct\n], PageSizeSelectorComp.prototype, \"init\", null);\n","import { SelectionService } from \"./selectionService.mjs\";\nimport { ColumnApi } from \"./columns/columnApi.mjs\";\nimport { ColumnModel } from \"./columns/columnModel.mjs\";\nimport { RowRenderer } from \"./rendering/rowRenderer.mjs\";\nimport { GridHeaderComp } from \"./headerRendering/gridHeaderComp.mjs\";\nimport { FilterManager } from \"./filter/filterManager.mjs\";\nimport { ValueService } from \"./valueService/valueService.mjs\";\nimport { EventService } from \"./eventService.mjs\";\nimport { GridBodyComp } from \"./gridBodyComp/gridBodyComp.mjs\";\nimport { GridApi } from \"./gridApi.mjs\";\nimport { ColumnFactory } from \"./columns/columnFactory.mjs\";\nimport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator.mjs\";\nimport { ExpressionService } from \"./valueService/expressionService.mjs\";\nimport { TemplateService } from \"./templateService.mjs\";\nimport { PopupService } from \"./widgets/popupService.mjs\";\nimport { Logger, LoggerFactory } from \"./logger.mjs\";\nimport { ColumnUtils } from \"./columns/columnUtils.mjs\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator.mjs\";\nimport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService.mjs\";\nimport { Context } from \"./context/context.mjs\";\nimport { GridComp } from \"./gridComp/gridComp.mjs\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService.mjs\";\nimport { DragService } from \"./dragAndDrop/dragService.mjs\";\nimport { SortController } from \"./sortController.mjs\";\nimport { FocusService } from \"./focusService.mjs\";\nimport { MouseEventService } from \"./gridBodyComp/mouseEventService.mjs\";\nimport { CellNavigationService } from \"./cellNavigationService.mjs\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService.mjs\";\nimport { AgCheckbox } from \"./widgets/agCheckbox.mjs\";\nimport { AgRadioButton } from \"./widgets/agRadioButton.mjs\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides.mjs\";\nimport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService.mjs\";\nimport { StylingService } from \"./styling/stylingService.mjs\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService.mjs\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService.mjs\";\nimport { AutoGroupColService } from \"./columns/autoGroupColService.mjs\";\nimport { PaginationProxy } from \"./pagination/paginationProxy.mjs\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService.mjs\";\nimport { ValueCache } from \"./valueService/valueCache.mjs\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService.mjs\";\nimport { AlignedGridsService } from \"./alignedGridsService.mjs\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory.mjs\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry.mjs\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils.mjs\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider.mjs\";\nimport { Beans } from \"./rendering/beans.mjs\";\nimport { Environment } from \"./environment.mjs\";\nimport { AnimationFrameService } from \"./misc/animationFrameService.mjs\";\nimport { NavigationService } from \"./gridBodyComp/navigationService.mjs\";\nimport { RowContainerHeightService } from \"./rendering/rowContainerHeightService.mjs\";\nimport { SelectableService } from \"./rowNodes/selectableService.mjs\";\nimport { PaginationComp } from \"./pagination/paginationComp.mjs\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService.mjs\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent.mjs\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent.mjs\";\nimport { AgDialog } from \"./widgets/agDialog.mjs\";\nimport { AgPanel } from \"./widgets/agPanel.mjs\";\nimport { AgInputTextField } from \"./widgets/agInputTextField.mjs\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea.mjs\";\nimport { AgSlider } from \"./widgets/agSlider.mjs\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField.mjs\";\nimport { AgInputRange } from \"./widgets/agInputRange.mjs\";\nimport { AgSelect } from \"./widgets/agSelect.mjs\";\nimport { AgRichSelect } from \"./widgets/agRichSelect.mjs\";\nimport { AgToggleButton } from \"./widgets/agToggleButton.mjs\";\nimport { RowPositionUtils } from \"./entities/rowPositionUtils.mjs\";\nimport { CellPositionUtils } from \"./entities/cellPositionUtils.mjs\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel.mjs\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry.mjs\";\nimport { ModuleNames } from \"./modules/moduleNames.mjs\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService.mjs\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry.mjs\";\nimport { HeaderPositionUtils } from \"./headerRendering/common/headerPosition.mjs\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService.mjs\";\nimport { missing } from \"./utils/generic.mjs\";\nimport { ColumnDefFactory } from \"./columns/columnDefFactory.mjs\";\nimport { RowCssClassCalculator } from \"./rendering/row/rowCssClassCalculator.mjs\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader.mjs\";\nimport { RowNodeSorter } from \"./rowNodes/rowNodeSorter.mjs\";\nimport { CtrlsService } from \"./ctrlsService.mjs\";\nimport { CtrlsFactory } from \"./ctrlsFactory.mjs\";\nimport { FakeHScrollComp } from \"./gridBodyComp/fakeHScrollComp.mjs\";\nimport { PinnedWidthService } from \"./gridBodyComp/pinnedWidthService.mjs\";\nimport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp.mjs\";\nimport { RowNodeEventThrottle } from \"./entities/rowNodeEventThrottle.mjs\";\nimport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu.mjs\";\nimport { SortIndicatorComp } from \"./headerRendering/cells/column/sortIndicatorComp.mjs\";\nimport { GridOptionsService } from \"./gridOptionsService.mjs\";\nimport { LocaleService } from \"./localeService.mjs\";\nimport { FakeVScrollComp } from \"./gridBodyComp/fakeVScrollComp.mjs\";\nimport { DataTypeService } from \"./columns/dataTypeService.mjs\";\nimport { AgInputDateField } from \"./widgets/agInputDateField.mjs\";\nimport { ValueParserService } from \"./valueService/valueParserService.mjs\";\nimport { AgAutocomplete } from \"./widgets/agAutocomplete.mjs\";\nimport { QuickFilterService } from \"./filter/quickFilterService.mjs\";\nimport { warnOnce, errorOnce } from \"./utils/function.mjs\";\nimport { SyncService } from \"./syncService.mjs\";\nimport { OverlayService } from \"./rendering/overlays/overlayService.mjs\";\nimport { StateService } from \"./misc/stateService.mjs\";\nimport { ExpansionService } from \"./misc/expansionService.mjs\";\nimport { ValidationService } from \"./validation/validationService.mjs\";\nimport { ApiEventService } from \"./misc/apiEventService.mjs\";\nimport { PageSizeSelectorComp } from \"./pagination/pageSizeSelector/pageSizeSelectorComp.mjs\";\n/**\n * Creates a grid inside the provided HTML element.\n * @param eGridDiv Parent element to contain the grid.\n * @param gridOptions Configuration for the grid.\n * @param params Individually register AG Grid Modules to this grid.\n * @returns api to be used to interact with the grid.\n */\nexport function createGrid(eGridDiv, gridOptions, params) {\n    if (!gridOptions) {\n        errorOnce('No gridOptions provided to createGrid');\n        return {};\n    }\n    // Ensure we do not mutate the provided gridOptions\n    const shallowCopy = GridOptionsService.getCoercedGridOptions(gridOptions);\n    const api = new GridCoreCreator().create(eGridDiv, shallowCopy, context => {\n        const gridComp = new GridComp(eGridDiv);\n        context.createBean(gridComp);\n    }, undefined, params);\n    // @deprecated v31 api / columnApi no longer mutated onto the provided gridOptions\n    // Instead we place a getter that will log an error when accessed and direct users to the docs\n    // Only apply for direct usages of createGrid, not for frameworks\n    if (!Object.isFrozen(gridOptions) && !(params === null || params === void 0 ? void 0 : params.frameworkOverrides)) {\n        const apiUrl = 'https://ag-grid.com/javascript-data-grid/grid-interface/#grid-api';\n        Object.defineProperty(gridOptions, 'api', {\n            get: () => {\n                errorOnce(`gridOptions.api is no longer supported. See ${apiUrl}.`);\n                return undefined;\n            },\n            configurable: true,\n        });\n        Object.defineProperty(gridOptions, 'columnApi', {\n            get: () => {\n                errorOnce(`gridOptions.columnApi is no longer supported and all methods moved to the grid api. See ${apiUrl}.`);\n                return undefined;\n            },\n            configurable: true,\n        });\n    }\n    return api;\n}\n/**\n * @deprecated v31 use createGrid() instead\n */\nexport class Grid {\n    constructor(eGridDiv, gridOptions, params) {\n        warnOnce('Since v31 new Grid(...) is deprecated. Use createGrid instead: `const gridApi = createGrid(...)`. The grid api is returned from createGrid and will not be available on gridOptions.');\n        if (!gridOptions) {\n            errorOnce('No gridOptions provided to the grid');\n            return;\n        }\n        this.gridOptions = gridOptions;\n        const api = new GridCoreCreator().create(eGridDiv, gridOptions, (context) => {\n            const gridComp = new GridComp(eGridDiv);\n            const bean = context.createBean(gridComp);\n            bean.addDestroyFunc(() => {\n                this.destroy();\n            });\n        }, undefined, params);\n        // Maintain existing behaviour by mutating gridOptions with the apis for deprecated new Grid()\n        this.gridOptions.api = api;\n        this.gridOptions.columnApi = new ColumnApi(api);\n    }\n    destroy() {\n        var _a;\n        if (this.gridOptions) {\n            (_a = this.gridOptions.api) === null || _a === void 0 ? void 0 : _a.destroy();\n            // need to remove these, as we don't own the lifecycle of the gridOptions, we need to\n            // remove the references in case the user keeps the grid options, we want the rest\n            // of the grid to be picked up by the garbage collector\n            delete this.gridOptions.api;\n            delete this.gridOptions.columnApi;\n        }\n    }\n}\nlet nextGridId = 1;\n// creates services of grid only, no UI, so frameworks can use this if providing\n// their own UI\nexport class GridCoreCreator {\n    create(eGridDiv, gridOptions, createUi, acceptChanges, params) {\n        var _a;\n        // Shallow copy to prevent user provided gridOptions from being mutated.\n        const debug = !!gridOptions.debug;\n        const gridId = (_a = gridOptions.gridId) !== null && _a !== void 0 ? _a : String(nextGridId++);\n        const registeredModules = this.getRegisteredModules(params, gridId);\n        const beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules, gridId);\n        const providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\n        if (!beanClasses) {\n            // Detailed error message will have been printed by createBeansList\n            errorOnce('Failed to create grid.');\n            // Break typing so that the normal return type does not have to handle undefined.\n            return undefined;\n        }\n        const contextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            debug: debug,\n            gridId: gridId,\n        };\n        const contextLogger = new Logger('Context', () => contextParams.debug);\n        const context = new Context(contextParams, contextLogger);\n        const beans = context.getBean('beans');\n        this.registerModuleUserComponents(beans, registeredModules);\n        this.registerStackComponents(beans, registeredModules);\n        this.registerControllers(beans, registeredModules);\n        createUi(context);\n        beans.syncService.start();\n        if (acceptChanges) {\n            acceptChanges(context);\n        }\n        return beans.gridApi;\n    }\n    registerControllers(beans, registeredModules) {\n        registeredModules.forEach(module => {\n            if (module.controllers) {\n                module.controllers.forEach(meta => beans.ctrlsFactory.register(meta));\n            }\n        });\n    }\n    registerStackComponents(beans, registeredModules) {\n        const agStackComponents = this.createAgStackComponentsList(registeredModules);\n        beans.agStackComponentsRegistry.setupComponents(agStackComponents);\n    }\n    getRegisteredModules(params, gridId) {\n        const passedViaConstructor = params ? params.modules : null;\n        const registered = ModuleRegistry.__getRegisteredModules(gridId);\n        const allModules = [];\n        const mapNames = {};\n        // adds to list and removes duplicates\n        const addModule = (moduleBased, mod, gridId) => {\n            const addIndividualModule = (currentModule) => {\n                if (!mapNames[currentModule.moduleName]) {\n                    mapNames[currentModule.moduleName] = true;\n                    allModules.push(currentModule);\n                    ModuleRegistry.__register(currentModule, moduleBased, gridId);\n                }\n            };\n            addIndividualModule(mod);\n            if (mod.dependantModules) {\n                mod.dependantModules.forEach(m => addModule(moduleBased, m, gridId));\n            }\n        };\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach(m => addModule(true, m, gridId));\n        }\n        if (registered) {\n            registered.forEach(m => addModule(!ModuleRegistry.__isPackageBased(), m, undefined));\n        }\n        return allModules;\n    }\n    registerModuleUserComponents(beans, registeredModules) {\n        const moduleUserComps = this.extractModuleEntity(registeredModules, (module) => module.userComponents ? module.userComponents : []);\n        moduleUserComps.forEach(compMeta => {\n            beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n        });\n    }\n    createProvidedBeans(eGridDiv, gridOptions, params) {\n        let frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n        const seed = {\n            gridOptions: gridOptions,\n            eGridDiv: eGridDiv,\n            globalEventListener: params ? params.globalEventListener : null,\n            globalSyncEventListener: params ? params.globalSyncEventListener : null,\n            frameworkOverrides: frameworkOverrides\n        };\n        if (params && params.providedBeanInstances) {\n            Object.assign(seed, params.providedBeanInstances);\n        }\n        return seed;\n    }\n    createAgStackComponentsList(registeredModules) {\n        let components = [\n            { componentName: 'AgCheckbox', componentClass: AgCheckbox },\n            { componentName: 'AgRadioButton', componentClass: AgRadioButton },\n            { componentName: 'AgToggleButton', componentClass: AgToggleButton },\n            { componentName: 'AgInputTextField', componentClass: AgInputTextField },\n            { componentName: 'AgInputTextArea', componentClass: AgInputTextArea },\n            { componentName: 'AgInputNumberField', componentClass: AgInputNumberField },\n            { componentName: 'AgInputDateField', componentClass: AgInputDateField },\n            { componentName: 'AgInputRange', componentClass: AgInputRange },\n            { componentName: 'AgRichSelect', componentClass: AgRichSelect },\n            { componentName: 'AgSelect', componentClass: AgSelect },\n            { componentName: 'AgSlider', componentClass: AgSlider },\n            { componentName: 'AgGridBody', componentClass: GridBodyComp },\n            { componentName: 'AgHeaderRoot', componentClass: GridHeaderComp },\n            { componentName: 'AgSortIndicator', componentClass: SortIndicatorComp },\n            { componentName: 'AgPagination', componentClass: PaginationComp },\n            { componentName: 'AgPageSizeSelector', componentClass: PageSizeSelectorComp },\n            { componentName: 'AgOverlayWrapper', componentClass: OverlayWrapperComponent },\n            { componentName: 'AgGroupComponent', componentClass: AgGroupComponent },\n            { componentName: 'AgPanel', componentClass: AgPanel },\n            { componentName: 'AgDialog', componentClass: AgDialog },\n            { componentName: 'AgRowContainer', componentClass: RowContainerComp },\n            { componentName: 'AgFakeHorizontalScroll', componentClass: FakeHScrollComp },\n            { componentName: 'AgFakeVerticalScroll', componentClass: FakeVScrollComp },\n            { componentName: 'AgAutocomplete', componentClass: AgAutocomplete },\n        ];\n        const moduleAgStackComps = this.extractModuleEntity(registeredModules, (module) => module.agStackComponents ? module.agStackComponents : []);\n        components = components.concat(moduleAgStackComps);\n        return components;\n    }\n    createBeansList(rowModelType = 'clientSide', registeredModules, gridId) {\n        // only load beans matching the required row model\n        const rowModelModules = registeredModules.filter(module => !module.rowModel || module.rowModel === rowModelType);\n        // assert that the relevant module has been loaded\n        const rowModelModuleNames = {\n            clientSide: ModuleNames.ClientSideRowModelModule,\n            infinite: ModuleNames.InfiniteRowModelModule,\n            serverSide: ModuleNames.ServerSideRowModelModule,\n            viewport: ModuleNames.ViewportRowModelModule\n        };\n        if (!rowModelModuleNames[rowModelType]) {\n            errorOnce('Could not find row model for rowModelType = ' + rowModelType);\n            return;\n        }\n        if (!ModuleRegistry.__assertRegistered(rowModelModuleNames[rowModelType], `rowModelType = '${rowModelType}'`, gridId)) {\n            return;\n        }\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n        const beans = [\n            Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils,\n            PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils,\n            ComponentMetadataProvider, ResizeObserverService, UserComponentFactory,\n            RowContainerHeightService, HorizontalResizeService, LocaleService, ValidationService,\n            PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsService,\n            PopupService, SelectionService, FilterManager, ColumnModel, HeaderNavigationService,\n            PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService,\n            AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory,\n            ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi,\n            FocusService, MouseEventService, Environment, CellNavigationService, ValueFormatterService,\n            StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService,\n            SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService,\n            UndoRedoService, AgStackComponentsRegistry, ColumnDefFactory,\n            RowCssClassCalculator, RowNodeBlockLoader, RowNodeSorter, CtrlsService,\n            PinnedWidthService, RowNodeEventThrottle, CtrlsFactory, DataTypeService, ValueParserService,\n            QuickFilterService, SyncService, OverlayService, StateService, ExpansionService,\n            ApiEventService,\n        ];\n        const moduleBeans = this.extractModuleEntity(rowModelModules, (module) => module.beans ? module.beans : []);\n        beans.push(...moduleBeans);\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        const beansNoDuplicates = [];\n        beans.forEach(bean => {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n        return beansNoDuplicates;\n    }\n    extractModuleEntity(moduleEntities, extractor) {\n        return [].concat(...moduleEntities.map(extractor));\n    }\n}\n","export class BaseComponentWrapper {\n    wrap(OriginalConstructor, mandatoryMethodList, optionalMethodList = [], componentType) {\n        const wrapper = this.createWrapper(OriginalConstructor, componentType);\n        mandatoryMethodList.forEach((methodName => {\n            this.createMethod(wrapper, methodName, true);\n        }));\n        optionalMethodList.forEach((methodName => {\n            this.createMethod(wrapper, methodName, false);\n        }));\n        return wrapper;\n    }\n    unwrap(comp) {\n        return comp;\n    }\n    createMethod(wrapper, methodName, mandatory) {\n        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));\n    }\n    createMethodProxy(wrapper, methodName, mandatory) {\n        return function () {\n            if (wrapper.hasMethod(methodName)) {\n                return wrapper.callMethod(methodName, arguments);\n            }\n            if (mandatory) {\n                console.warn('AG Grid: Framework component is missing the method ' + methodName + '()');\n            }\n            return null;\n        };\n    }\n}\n","export var BarColumnLabelPlacement;\n(function (BarColumnLabelPlacement) {\n    BarColumnLabelPlacement[\"InsideBase\"] = \"insideBase\";\n    BarColumnLabelPlacement[\"InsideEnd\"] = \"insideEnd\";\n    BarColumnLabelPlacement[\"Center\"] = \"center\";\n    BarColumnLabelPlacement[\"OutsideEnd\"] = \"outsideEnd\";\n})(BarColumnLabelPlacement || (BarColumnLabelPlacement = {}));\n","/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue\n * @version v31.0.0\n * @link https://www.ag-grid.com/\n * @license MIT\n */\nconst globalObj = typeof global === 'undefined' ? {} : global;\nglobalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;\nglobalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;\nglobalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;\nglobalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;\nglobalObj.Node = typeof Node === 'undefined' ? {} : Node;\nglobalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent;\n// columns\nexport { ColumnFactory } from \"./columns/columnFactory.mjs\";\nexport { ColumnModel } from \"./columns/columnModel.mjs\";\nexport { ColumnKeyCreator } from \"./columns/columnKeyCreator.mjs\";\nexport { ColumnUtils } from \"./columns/columnUtils.mjs\";\nexport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator.mjs\";\nexport { GroupInstanceIdCreator } from \"./columns/groupInstanceIdCreator.mjs\";\nexport { GROUP_AUTO_COLUMN_ID } from \"./columns/autoGroupColService.mjs\";\n// components\nexport { ComponentUtil } from \"./components/componentUtil.mjs\";\nexport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry.mjs\";\nexport { UserComponentRegistry } from \"./components/framework/userComponentRegistry.mjs\";\nexport { UserComponentFactory } from \"./components/framework/userComponentFactory.mjs\";\nexport { ColDefUtil } from \"./components/colDefUtil.mjs\";\n// context\nexport { BeanStub } from \"./context/beanStub.mjs\";\nexport { Context, Autowired, PostConstruct, PreConstruct, Optional, Bean, Qualifier, PreDestroy } from \"./context/context.mjs\";\nexport { QuerySelector, RefSelector } from \"./widgets/componentAnnotations.mjs\";\n// excel\nexport { ExcelFactoryMode } from \"./interfaces/iExcelCreator.mjs\";\n// dragAndDrop\nexport { DragAndDropService, DragSourceType } from \"./dragAndDrop/dragAndDropService.mjs\";\nexport { DragService } from \"./dragAndDrop/dragService.mjs\";\nexport { VirtualListDragFeature } from \"./dragAndDrop/virtualListDragFeature.mjs\";\n// entities\nexport { Column } from \"./entities/column.mjs\";\nexport { ColumnGroup } from \"./entities/columnGroup.mjs\";\nexport { ProvidedColumnGroup } from \"./entities/providedColumnGroup.mjs\";\nexport { RowNode } from \"./entities/rowNode.mjs\";\nexport { RowHighlightPosition } from \"./interfaces/iRowNode.mjs\";\nexport { FilterManager } from \"./filter/filterManager.mjs\";\nexport { ProvidedFilter } from \"./filter/provided/providedFilter.mjs\";\nexport { SimpleFilter } from \"./filter/provided/simpleFilter.mjs\";\nexport { ScalarFilter } from \"./filter/provided/scalarFilter.mjs\";\nexport { NumberFilter } from \"./filter/provided/number/numberFilter.mjs\";\nexport { TextFilter } from \"./filter/provided/text/textFilter.mjs\";\nexport { DateFilter } from \"./filter/provided/date/dateFilter.mjs\";\nexport { TextFloatingFilter } from './filter/provided/text/textFloatingFilter.mjs';\nexport { HeaderFilterCellComp } from './headerRendering/cells/floatingFilter/headerFilterCellComp.mjs';\nexport { FloatingFilterMapper } from './filter/floating/floatingFilterMapper.mjs';\n// gridPanel\nexport { GridBodyComp } from \"./gridBodyComp/gridBodyComp.mjs\";\nexport { GridBodyCtrl, RowAnimationCssClasses } from \"./gridBodyComp/gridBodyCtrl.mjs\";\nexport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService.mjs\";\nexport { MouseEventService } from \"./gridBodyComp/mouseEventService.mjs\";\nexport { NavigationService } from \"./gridBodyComp/navigationService.mjs\";\n// rowContainer\nexport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp.mjs\";\nexport { RowContainerName, RowContainerCtrl, RowContainerType, getRowContainerTypeForName } from \"./gridBodyComp/rowContainer/rowContainerCtrl.mjs\";\n// headerRendering\nexport { BodyDropPivotTarget } from \"./headerRendering/columnDrag/bodyDropPivotTarget.mjs\";\nexport { BodyDropTarget } from \"./headerRendering/columnDrag/bodyDropTarget.mjs\";\nexport { CssClassApplier } from \"./headerRendering/cells/cssClassApplier.mjs\";\nexport { HeaderRowContainerComp } from \"./headerRendering/rowContainer/headerRowContainerComp.mjs\";\nexport { GridHeaderComp } from \"./headerRendering/gridHeaderComp.mjs\";\nexport { GridHeaderCtrl } from \"./headerRendering/gridHeaderCtrl.mjs\";\nexport { HeaderRowComp, HeaderRowType } from \"./headerRendering/row/headerRowComp.mjs\";\nexport { HeaderRowCtrl } from \"./headerRendering/row/headerRowCtrl.mjs\";\nexport { HeaderCellCtrl } from \"./headerRendering/cells/column/headerCellCtrl.mjs\";\nexport { SortIndicatorComp } from \"./headerRendering/cells/column/sortIndicatorComp.mjs\";\nexport { HeaderFilterCellCtrl } from \"./headerRendering/cells/floatingFilter/headerFilterCellCtrl.mjs\";\nexport { HeaderGroupCellCtrl } from \"./headerRendering/cells/columnGroup/headerGroupCellCtrl.mjs\";\nexport { AbstractHeaderCellCtrl } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl.mjs\";\nexport { HeaderRowContainerCtrl } from \"./headerRendering/rowContainer/headerRowContainerCtrl.mjs\";\nexport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService.mjs\";\nexport { MoveColumnFeature } from \"./headerRendering/columnDrag/moveColumnFeature.mjs\";\nexport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu.mjs\";\n// layout\nexport { TabbedLayout } from \"./layout/tabbedLayout.mjs\";\n// misc\nexport { ResizeObserverService } from \"./misc/resizeObserverService.mjs\";\nexport { AnimationFrameService } from \"./misc/animationFrameService.mjs\";\nexport { ExpansionService } from \"./misc/expansionService.mjs\";\nexport { LargeTextCellEditor } from \"./rendering/cellEditors/largeTextCellEditor.mjs\";\nexport { PopupEditorWrapper } from \"./rendering/cellEditors/popupEditorWrapper.mjs\";\nexport { SelectCellEditor } from \"./rendering/cellEditors/selectCellEditor.mjs\";\nexport { TextCellEditor } from \"./rendering/cellEditors/textCellEditor.mjs\";\nexport { NumberCellEditor } from \"./rendering/cellEditors/numberCellEditor.mjs\";\nexport { DateCellEditor } from \"./rendering/cellEditors/dateCellEditor.mjs\";\nexport { DateStringCellEditor } from \"./rendering/cellEditors/dateStringCellEditor.mjs\";\nexport { CheckboxCellEditor } from \"./rendering/cellEditors/checkboxCellEditor.mjs\";\n// rendering / cellRenderers\nexport { Beans } from \"./rendering/beans.mjs\";\nexport { AnimateShowChangeCellRenderer } from \"./rendering/cellRenderers/animateShowChangeCellRenderer.mjs\";\nexport { AnimateSlideCellRenderer } from \"./rendering/cellRenderers/animateSlideCellRenderer.mjs\";\nexport { GroupCellRenderer, } from \"./rendering/cellRenderers/groupCellRenderer.mjs\";\nexport { GroupCellRendererCtrl } from \"./rendering/cellRenderers/groupCellRendererCtrl.mjs\";\n// features\nexport { SetLeftFeature } from \"./rendering/features/setLeftFeature.mjs\";\nexport { PositionableFeature } from \"./rendering/features/positionableFeature.mjs\";\n// rendering\nexport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator.mjs\";\nexport { CheckboxSelectionComponent } from \"./rendering/checkboxSelectionComponent.mjs\";\nexport { CellComp } from \"./rendering/cell/cellComp.mjs\";\nexport { CellCtrl } from \"./rendering/cell/cellCtrl.mjs\";\nexport { RowCtrl } from \"./rendering/row/rowCtrl.mjs\";\nexport { RowRenderer } from \"./rendering/rowRenderer.mjs\";\nexport { ValueFormatterService } from \"./rendering/valueFormatterService.mjs\";\nexport { CssClassManager } from \"./rendering/cssClassManager.mjs\";\nexport { CheckboxCellRenderer } from \"./rendering/cellRenderers/checkboxCellRenderer.mjs\";\n// row models\nexport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel.mjs\";\nexport { ServerSideTransactionResultStatus } from \"./interfaces/serverSideTransaction.mjs\";\nexport { ChangedPath } from \"./utils/changedPath.mjs\";\nexport { RowNodeBlock } from \"./rowNodeCache/rowNodeBlock.mjs\";\nexport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader.mjs\";\nexport { PaginationProxy } from \"./pagination/paginationProxy.mjs\";\nexport { ClientSideRowModelSteps } from \"./interfaces/iClientSideRowModel.mjs\";\n//styling\nexport { StylingService } from \"./styling/stylingService.mjs\";\nexport { LayoutCssClasses } from \"./styling/layoutFeature.mjs\";\n// widgets\nexport { AgAbstractField } from \"./widgets/agAbstractField.mjs\";\nexport { AgCheckbox } from \"./widgets/agCheckbox.mjs\";\nexport { AgRadioButton } from \"./widgets/agRadioButton.mjs\";\nexport { AgToggleButton } from \"./widgets/agToggleButton.mjs\";\nexport { AgInputTextField } from \"./widgets/agInputTextField.mjs\";\nexport { AgInputTextArea } from \"./widgets/agInputTextArea.mjs\";\nexport { AgInputNumberField } from \"./widgets/agInputNumberField.mjs\";\nexport { AgInputDateField } from \"./widgets/agInputDateField.mjs\";\nexport { AgInputRange } from \"./widgets/agInputRange.mjs\";\nexport { AgRichSelect } from \"./widgets/agRichSelect.mjs\";\nexport { AgSelect } from \"./widgets/agSelect.mjs\";\nexport { AgSlider } from \"./widgets/agSlider.mjs\";\nexport { AgGroupComponent } from \"./widgets/agGroupComponent.mjs\";\nexport { AgMenuItemComponent } from \"./widgets/agMenuItemComponent.mjs\";\nexport { AgMenuList } from \"./widgets/agMenuList.mjs\";\nexport { AgMenuPanel } from \"./widgets/agMenuPanel.mjs\";\nexport { AgDialog } from \"./widgets/agDialog.mjs\";\nexport { AgPanel } from \"./widgets/agPanel.mjs\";\nexport { Component } from \"./widgets/component.mjs\";\nexport { ManagedFocusFeature } from \"./widgets/managedFocusFeature.mjs\";\nexport { TabGuardComp } from \"./widgets/tabGuardComp.mjs\";\nexport { TabGuardCtrl, TabGuardClassNames } from \"./widgets/tabGuardCtrl.mjs\";\nexport { PopupComponent } from \"./widgets/popupComponent.mjs\";\nexport { PopupService } from \"./widgets/popupService.mjs\";\nexport { TouchListener } from \"./widgets/touchListener.mjs\";\nexport { VirtualList } from \"./widgets/virtualList.mjs\";\nexport { AgAbstractLabel } from \"./widgets/agAbstractLabel.mjs\";\nexport { AgPickerField } from \"./widgets/agPickerField.mjs\";\nexport { AgAutocomplete } from \"./widgets/agAutocomplete.mjs\";\n// range\nexport { CellRangeType, SelectionHandleType } from \"./interfaces/IRangeService.mjs\";\n// root\nexport { AutoScrollService } from './autoScrollService.mjs';\nexport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides.mjs\";\nexport { CellNavigationService } from \"./cellNavigationService.mjs\";\nexport { AlignedGridsService } from \"./alignedGridsService.mjs\";\nexport { KeyCode } from \"./constants/keyCode.mjs\";\nexport { VerticalDirection, HorizontalDirection } from \"./constants/direction.mjs\";\nexport { Grid, GridCoreCreator, createGrid } from \"./grid.mjs\";\nexport { GridApi } from \"./gridApi.mjs\";\nexport { Events } from \"./eventKeys.mjs\";\nexport { FocusService } from \"./focusService.mjs\";\nexport { GridOptionsService } from \"./gridOptionsService.mjs\";\nexport { EventService } from \"./eventService.mjs\";\nexport { SelectableService } from \"./rowNodes/selectableService.mjs\";\nexport { RowNodeSorter } from \"./rowNodes/rowNodeSorter.mjs\";\nexport { CtrlsService } from \"./ctrlsService.mjs\";\nexport { GridComp } from \"./gridComp/gridComp.mjs\";\nexport { GridCtrl } from \"./gridComp/gridCtrl.mjs\";\nexport { Logger, LoggerFactory } from \"./logger.mjs\";\nexport { SortController } from \"./sortController.mjs\";\nexport { TemplateService } from \"./templateService.mjs\";\nexport { LocaleService } from './localeService.mjs';\nexport * from \"./utils/index.mjs\"; // please leave this as is - we want it to be explicit for build reasons\nexport { ValueService } from \"./valueService/valueService.mjs\";\nexport { ValueCache } from \"./valueService/valueCache.mjs\";\nexport { ExpressionService } from \"./valueService/expressionService.mjs\";\nexport { ValueParserService } from \"./valueService/valueParserService.mjs\";\nexport { CellPositionUtils } from \"./entities/cellPositionUtils.mjs\";\nexport { RowPositionUtils } from \"./entities/rowPositionUtils.mjs\";\nexport { HeaderPositionUtils } from \"./headerRendering/common/headerPosition.mjs\";\nexport { HeaderNavigationService, HeaderNavigationDirection } from \"./headerRendering/common/headerNavigationService.mjs\";\nexport { DataTypeService } from \"./columns/dataTypeService.mjs\";\nexport { PropertyKeys } from \"./propertyKeys.mjs\";\nexport { ColumnApi } from \"./columns/columnApi.mjs\";\nexport { BaseComponentWrapper } from \"./components/framework/frameworkComponentWrapper.mjs\";\nexport { Environment } from \"./environment.mjs\";\nexport { TooltipFeature } from \"./widgets/tooltipFeature.mjs\";\nexport { CustomTooltipFeature } from \"./widgets/customTooltipFeature.mjs\";\n// charts\nexport * from \"./interfaces/iChartOptions.mjs\";\nexport * from \"./interfaces/iAgChartOptions.mjs\";\n// sparklines\nexport * from \"./interfaces/iSparklineCellRendererParams.mjs\";\nexport { ModuleNames } from \"./modules/moduleNames.mjs\";\nexport { ModuleRegistry } from \"./modules/moduleRegistry.mjs\";\n//  events\nexport * from \"./events.mjs\";\n","import Vue, {AsyncComponent, VueConstructor} from 'vue';\nimport {AgGridVue} from './AgGridVue';\nimport {Component} from 'vue/types/options';\n\nexport class VueComponentFactory {\n\n    public static getComponentType(parent: AgGridVue, component: VueConstructor | string) {\n        if (typeof component === 'string') {\n            const componentInstance: VueConstructor =\n                this.searchForComponentInstance(parent, component) as VueConstructor;\n            if (!componentInstance) {\n                console.error(`Could not find component with name of ${component}. Is it in Vue.components?`);\n                return null;\n            }\n            return Vue.extend(componentInstance);\n        } else {\n            // assume a type\n            return component;\n        }\n    }\n\n    public static createAndMountComponent(params: any, componentType: any, parent: AgGridVue) {\n        const details = {\n            data: {\n                params: Object.freeze(params),\n            },\n            parent,\n        };\n\n        if (parent.componentDependencies) {\n            parent.componentDependencies.forEach((dependency) =>\n                (details as any)[dependency] = (parent as any)[dependency],\n            );\n        }\n\n        const component = new componentType(details);\n        component.$mount();\n        return component;\n    }\n\n    public static searchForComponentInstance(parent: AgGridVue,\n                                             component: VueConstructor | string,\n                                             maxDepth = 10,\n                                             suppressError = false) {\n        let componentInstance: Component | AsyncComponent | null = null;\n\n        let currentParent: Vue = parent.$parent;\n        let depth = 0;\n        while (!componentInstance &&\n        currentParent &&\n        currentParent.$options &&\n        (++depth < maxDepth)) {\n            componentInstance = (currentParent as any).$options.components![component as any];\n            currentParent = currentParent.$parent;\n        }\n\n        if (!componentInstance && !suppressError) {\n            console.error(`Could not find component with name of ${component}. Is it in Vue.components?`);\n            return null;\n        }\n        return componentInstance;\n    }\n}\n","import { BaseComponentWrapper, Bean, WrappableInterface } from '@ag-grid-community/core';\nimport { AgGridVue } from './AgGridVue';\nimport { VueComponentFactory } from './VueComponentFactory';\n\ninterface VueWrappableInterface extends WrappableInterface {\n    overrideProcessing(methodName: string): boolean;\n\n    processMethod(methodName: string, args: IArguments): any;\n}\n\n@Bean('frameworkComponentWrapper')\nexport class VueFrameworkComponentWrapper extends BaseComponentWrapper<WrappableInterface> {\n    private parent: AgGridVue | null;\n\n    constructor(parent: AgGridVue) {\n        super();\n\n        this.parent = parent;\n    }\n\n    public createWrapper(component: any): WrappableInterface {\n        const that = this;\n\n        class DynamicComponent extends VueComponent<any, any> implements WrappableInterface {\n            public init(params: any): void {\n                super.init(params);\n            }\n\n            public hasMethod(name: string): boolean {\n                return wrapper.getFrameworkComponentInstance()[name] != null;\n            }\n\n            public callMethod(name: string, args: IArguments): any {\n                const componentInstance = this.getFrameworkComponentInstance();\n                const frameworkComponentInstance = wrapper.getFrameworkComponentInstance();\n                return frameworkComponentInstance[name].apply(componentInstance, args);\n            }\n\n            public addMethod(name: string, callback: () => any): void {\n                (wrapper as any)[name] = callback;\n            }\n\n            public overrideProcessing(methodName: string): boolean {\n                return that.parent!.autoParamsRefresh && methodName === 'refresh';\n            }\n\n            public processMethod(methodName: string, args: IArguments): any {\n                if (methodName === 'refresh') {\n                    this.getFrameworkComponentInstance().params = args[0];\n                }\n\n                if (this.hasMethod(methodName)) {\n                    return this.callMethod(methodName, args);\n                }\n\n                return methodName === 'refresh';\n            }\n\n            protected createComponent(params: any): any {\n                return that.createComponent(component, params);\n            }\n        }\n\n        const wrapper = new DynamicComponent();\n        return wrapper;\n    }\n\n    public createComponent<T>(component: any, params: any): any {\n        const componentType = VueComponentFactory.getComponentType(this.parent!, component);\n        if (!componentType) {\n            return;\n        }\n        return VueComponentFactory.createAndMountComponent(params, componentType, this.parent!);\n    }\n\n    protected createMethodProxy(wrapper: VueWrappableInterface, methodName: string, mandatory: boolean): () => any {\n        return function() {\n            if (wrapper.overrideProcessing(methodName)) {\n                return wrapper.processMethod(methodName, arguments);\n            }\n\n            if (wrapper.hasMethod(methodName)) {\n                return wrapper.callMethod(methodName, arguments);\n            }\n\n            if (mandatory) {\n                console.warn('AG Grid: Framework component is missing the method ' + methodName + '()');\n            }\n            return null;\n        };\n    }\n\n    protected destroy() {\n        this.parent = null;\n    }\n}\n\nabstract class VueComponent<P, T> {\n    private component: any;\n\n    public getGui(): HTMLElement {\n        return this.component.$el;\n    }\n\n    public destroy(): void {\n        if (this.getFrameworkComponentInstance() &&\n            typeof this.getFrameworkComponentInstance().destroy === 'function') {\n            this.getFrameworkComponentInstance().destroy();\n        }\n        this.component.$destroy();\n    }\n\n    public getFrameworkComponentInstance(): any {\n        return this.component;\n    }\n\n    protected init(params: P): void {\n        this.component = this.createComponent(params);\n    }\n\n    protected abstract createComponent(params: P): any;\n}\n","import { ComponentUtil } from '@ag-grid-community/core';\n\nexport interface Properties {\n    [propertyName: string]: any;\n}\n\nexport const getAgGridProperties = (): [Properties, Properties, Properties, {}] => {\n    const props: Properties = {\n        gridOptions: {\n            default() {\n                return {};\n            },\n        },\n        rowDataModel: undefined,\n    };\n\n    const SHALLOW_CHECK_PROPERTIES = ['context', 'popupParent'];\n    const DEEP_CHECK_PROPERTIES = ComponentUtil.ALL_PROPERTIES.filter((propertyName: string) => !SHALLOW_CHECK_PROPERTIES.includes(propertyName));\n\n    const createPropsObject = (properties: string[], component: any) => {\n        const props: { [key: string]: any } = {};\n        properties.forEach((propertyName: string) => {\n            if (component[propertyName] === ComponentUtil.VUE_OMITTED_PROPERTY) { return; }\n            props[propertyName] = component[propertyName];\n        });\n        return props;\n    };\n\n    const processPropsObject = (prev: any, current: any, component: any) => {\n        if (!component.gridCreated || !component.api) { return; }\n        const changes: any = {};\n        Object.entries(current).forEach(([key, value]) => {\n            if (prev[key] === value) return;\n            changes[key] = value;\n        });\n        ComponentUtil.processOnChange(changes, component.api);\n    }\n\n    const computed: Properties = {\n        props() {\n            return createPropsObject(DEEP_CHECK_PROPERTIES, this);\n        },\n        shallowProps() {\n            return createPropsObject(SHALLOW_CHECK_PROPERTIES, this);\n        }\n    };\n\n    const watch: Properties = {\n        rowDataModel(currentValue: any, previousValue: any) {\n            if (!this.gridCreated || !this.api) { return; }\n\n            /*\n             * Prevents an infinite loop when using v-model for the rowData\n             */\n            if (currentValue === previousValue) { return; }\n            if (currentValue && previousValue) {\n                if (currentValue.length === previousValue.length) {\n                    if (currentValue.every((item: any, index: number) => item === previousValue[index])) {\n                        return;\n                    }\n                }\n            }\n\n            ComponentUtil.processOnChange({ rowData: currentValue }, this.api);\n        },\n        props: {\n            handler(currentValue: any, previousValue: any) {\n                processPropsObject(previousValue, currentValue, this);\n            },\n            deep: true,\n        },\n        // these props may be cyclic, so we don't deep check them.\n        shallowProps: {\n            handler(currentValue: any, previousValue: any) {\n                processPropsObject(previousValue, currentValue, this);\n            },\n            deep: false,\n        }\n    };\n\n    ComponentUtil.ALL_PROPERTIES.forEach((propertyName: string) => {\n        props[propertyName] = {\n            default: ComponentUtil.VUE_OMITTED_PROPERTY,\n        };\n    });\n\n    const model: { prop: string, event: string } = {\n        prop: 'rowDataModel',\n        event: 'data-model-changed',\n    };\n\n    return [props, computed, watch, model];\n};\n\n","import {VanillaFrameworkOverrides} from '@ag-grid-community/core';\nimport {AgGridVue} from './AgGridVue';\nimport {VueComponentFactory} from './VueComponentFactory';\n\nexport class VueFrameworkOverrides extends VanillaFrameworkOverrides {\n    private readonly parent: AgGridVue;\n\n    constructor(parent: AgGridVue) {\n        super('vue');\n\n        this.parent = parent;\n    }\n\n    /*\n     * vue components are specified in the \"components\" part of the vue component - as such we need a way to determine\n     * if a given component is within that context - this method provides this\n     * Note: This is only really used/necessary with cellRendererSelectors\n     */\n    public frameworkComponent(name: string, components?: any): any {\n        let foundInstance = !!VueComponentFactory.searchForComponentInstance(this.parent, name, 10, true);\n        let result = foundInstance ? name : null;\n\n        if (!result && components && components[name]) {\n            const indirectName = components[name];\n            foundInstance = !!VueComponentFactory.searchForComponentInstance(this.parent, indirectName, 10, true);\n            result = foundInstance ? indirectName : null;\n        }\n\n        return result;\n    }\n\n    public isFrameworkComponent(comp: any): boolean {\n        return typeof comp === 'object';\n    }\n\n}\n","import {Component, Prop, Vue} from 'vue-property-decorator';\nimport {Bean, ComponentUtil, GridOptions, Module, Events, GridApi, createGrid, GridParams} from '@ag-grid-community/core';\nimport {VueFrameworkComponentWrapper} from './VueFrameworkComponentWrapper';\nimport { getAgGridProperties, Properties } from './Utils';\nimport {VueFrameworkOverrides} from './VueFrameworkOverrides';\n\nconst [props, computed, watch, model] = getAgGridProperties();\n\n@Bean('agGridVue')\n@Component({\n    props,\n    computed,\n    watch,\n    model,\n})\nexport class AgGridVue extends Vue {\n\n    private static ROW_DATA_EVENTS: Set<string> = new Set(['rowDataUpdated', 'cellValueChanged', 'rowValueChanged']);\n    private static ALWAYS_SYNC_GLOBAL_EVENTS: Set<string> = new Set([Events.EVENT_GRID_PRE_DESTROYED]);\n\n    private static kebabProperty(property: string) {\n        return property.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    }\n\n    @Prop(Boolean)\n    public autoParamsRefresh!: boolean;\n\n    @Prop({default: () => []})\n    public componentDependencies!: string[];\n\n    /**\n     * Used to register AG Grid Modules directly with this instance of the grid.\n     * See [Providing Modules To Individual Grids](https://www.ag-grid.com/vue-data-grid/modules/#providing-modules-to-individual-grids) for more information.\n     */\n    @Prop({default: () => []})\n    public modules!: Module[];\n\n    private gridCreated = false;\n    private isDestroyed = false;\n    private gridReadyFired = false;\n\n    private gridOptions!: GridOptions;\n    private api: GridApi | undefined = undefined;\n    private emitRowModel: (() => void) | null = null;\n\n    // noinspection JSUnusedGlobalSymbols, JSMethodCanBeStatic\n    public render(h: any) {\n        return h('div');\n    }\n\n    // It forces events defined in AgGridVue.ALWAYS_SYNC_GLOBAL_EVENTS to be fired synchronously.\n    // This is required for events such as GridPreDestroyed.\n    // Other events are fired can be fired asynchronously or synchronously depending on config.\n    public globalEventListenerFactory(restrictToSyncOnly?: boolean) {\n        return (eventType: string, event: any) => {\n            if (this.isDestroyed) {\n                return;\n            }\n\n            if (eventType === 'gridReady') {\n                this.gridReadyFired = true;\n            }\n\n            const alwaysSync = AgGridVue.ALWAYS_SYNC_GLOBAL_EVENTS.has(eventType);\n            if ((alwaysSync && !restrictToSyncOnly) || (!alwaysSync && restrictToSyncOnly)) {\n                return;\n            }\n\n            this.updateModelIfUsed(eventType);\n\n            // only emit if someone is listening\n            // we allow both kebab and camelCase event listeners, so check for both\n            const kebabName = AgGridVue.kebabProperty(eventType);\n            if (this.$listeners[kebabName]) {\n                this.$emit(kebabName, event);\n            } else if (this.$listeners[eventType]) {\n                this.$emit(eventType, event);\n            }\n        };\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public mounted() {\n        // we debounce the model update to prevent a flood of updates in the event there are many individual\n        // cell/row updates\n        this.emitRowModel = this.debounce(() => {\n            this.$emit('data-model-changed', Object.freeze(this.getRowData()));\n        }, 20);\n\n        const frameworkComponentWrapper = new VueFrameworkComponentWrapper(this);\n        const gridOptions = ComponentUtil.combineAttributesAndGridOptions(this.gridOptions, this);\n\n        this.checkForBindingConflicts();\n        const rowData = this.getRowDataBasedOnBindings();\n        if (rowData !== ComponentUtil.VUE_OMITTED_PROPERTY) {\n            gridOptions.rowData = rowData;\n        }\n\n        const gridParams: GridParams = {\n            globalEventListener: this.globalEventListenerFactory().bind(this),\n            globalSyncEventListener: this.globalEventListenerFactory(true).bind(this),\n            frameworkOverrides: new VueFrameworkOverrides(this),\n            providedBeanInstances: {\n                frameworkComponentWrapper,\n            },\n            modules: this.modules,\n        };\n\n        this.api = createGrid(this.$el as HTMLElement, gridOptions, gridParams);\n        this.gridCreated = true;\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public destroyed() {\n        if (this.gridCreated) {\n            this.api?.destroy();\n            this.isDestroyed = true;\n        }\n    }\n\n    private checkForBindingConflicts() {\n        const thisAsAny = (this as any);\n        if ((thisAsAny.rowData || this.gridOptions.rowData) &&\n            thisAsAny.rowDataModel) {\n            console.warn('AG Grid: Using both rowData and rowDataModel. rowData will be ignored.');\n        }\n    }\n\n    private getRowData(): any[] {\n        const rowData: any[] = [];\n        this.api?.forEachNode((rowNode) => {\n            rowData.push(rowNode.data);\n        });\n        return rowData;\n    }\n\n    private updateModelIfUsed(eventType: string) {\n        if (this.gridReadyFired &&\n            this.$listeners['data-model-changed'] &&\n            AgGridVue.ROW_DATA_EVENTS.has(eventType)) {\n\n            if (this.emitRowModel) {\n                this.emitRowModel();\n            }\n        }\n    }\n\n    private getRowDataBasedOnBindings() {\n        const thisAsAny = (this as any);\n\n        const rowDataModel = thisAsAny.rowDataModel;\n        return rowDataModel ? rowDataModel :\n            thisAsAny.rowData ? thisAsAny.rowData : thisAsAny.gridOptions.rowData;\n    }\n\n    private debounce(func: () => void, delay: number) {\n        let timeout: number;\n        return () => {\n            const later = function() {\n                func();\n            };\n            window.clearTimeout(timeout);\n            timeout = window.setTimeout(later, delay);\n        };\n    }\n}\n"],"sourceRoot":""}