{
  "version": 3,
  "sources": ["../../src/columnsToolPanelModule.ts", "../../src/columnToolPanel/primaryColsHeaderPanel.ts", "../../src/columnToolPanel/primaryColsListPanel.ts", "../../src/columnToolPanel/primaryColsListPanelItemDragFeature.ts", "../../src/columnToolPanel/toolPanelColumnGroupComp.ts", "../../src/columnToolPanel/columnModelItem.ts", "../../src/columnToolPanel/toolPanelContextMenu.ts", "../../src/columnToolPanel/toolPanelColumnComp.ts", "../../src/columnToolPanel/columnToolPanel.ts", "../../src/columnToolPanel/pivotModePanel.ts", "../../src/columnToolPanel/primaryColsPanel.ts", "../../src/columnToolPanel/modelItemUtils.ts", "../../src/version.ts"],
  "sourcesContent": ["import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { PrimaryColsHeaderPanel } from \"./columnToolPanel/primaryColsHeaderPanel\";\nimport { PrimaryColsListPanel } from \"./columnToolPanel/primaryColsListPanel\";\nimport { ColumnToolPanel } from \"./columnToolPanel/columnToolPanel\";\nimport { PrimaryColsPanel } from \"./columnToolPanel/primaryColsPanel\";\n\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\";\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\";\nimport { ModelItemUtils } from \"./columnToolPanel/modelItemUtils\";\nimport { VERSION } from \"./version\";\n\nexport const ColumnsToolPanelModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ColumnsToolPanelModule,\n    beans: [ModelItemUtils],\n    agStackComponents: [\n        { componentName: 'AgPrimaryColsHeader', componentClass: PrimaryColsHeaderPanel },\n        { componentName: 'AgPrimaryColsList', componentClass: PrimaryColsListPanel },\n        { componentName: 'AgPrimaryCols', componentClass: PrimaryColsPanel }\n    ],\n    userComponents: [\n        { componentName: 'agColumnsToolPanel', componentClass: ColumnToolPanel },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule,\n        RowGroupingModule,\n        SideBarModule\n    ]\n};\n", "import {\n    _,\n    Autowired,\n    ColumnModel,\n    Events,\n    RefSelector,\n    ToolPanelColumnCompParams,\n    AgCheckbox,\n    AgInputTextField,\n    KeyCode,\n    PostConstruct,\n    Component\n} from \"@ag-grid-community/core\";\n\nexport enum ExpandState { EXPANDED, COLLAPSED, INDETERMINATE }\n\nexport class PrimaryColsHeaderPanel extends Component {\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    @RefSelector('eExpand') private readonly eExpand: Element;\n    @RefSelector('eSelect') private readonly eSelect: AgCheckbox;\n    @RefSelector('eFilterTextField') private eFilterTextField: AgInputTextField;\n\n    private static DEBOUNCE_DELAY = 300;\n\n    private eExpandChecked: Element;\n    private eExpandUnchecked: Element;\n    private eExpandIndeterminate: Element;\n\n    private expandState: ExpandState;\n    private selectState?: boolean;\n\n    private onFilterTextChangedDebounced: () => void;\n\n    private params: ToolPanelColumnCompParams;\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select-header\" role=\"presentation\">\n            <div ref=\"eExpand\" class=\"ag-column-select-header-icon\"></div>\n            <ag-checkbox ref=\"eSelect\" class=\"ag-column-select-header-checkbox\"></ag-checkbox>\n            <ag-input-text-field class=\"ag-column-select-header-filter-wrapper\" ref=\"eFilterTextField\"></ag-input-text-field>\n        </div>`;\n\n    constructor() {\n        super(PrimaryColsHeaderPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.createExpandIcons();\n\n        this.addManagedListener(this.eExpand, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eExpand, 'keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.SPACE) {\n                e.preventDefault();\n                this.onExpandClicked();\n            }\n        });\n\n        this.addManagedListener(this.eSelect.getInputElement(), 'click', this.onSelectClicked.bind(this));\n        this.addManagedPropertyListener('functionsReadOnly', () => this.onFunctionsReadOnlyPropChanged());\n\n        this.eFilterTextField\n            .setAutoComplete(false)\n            .onValueChange(() => this.onFilterTextChanged());\n\n        this.addManagedListener(\n            this.eFilterTextField.getInputElement(),\n            'keydown',\n            this.onMiniFilterKeyDown.bind(this)\n        );\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideOptions.bind(this));\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eSelect.setInputAriaLabel(translate('ariaColumnSelectAll', 'Toggle Select All Columns'));\n        this.eFilterTextField.setInputAriaLabel(translate('ariaFilterColumnsInput', 'Filter Columns Input'));\n\n        this.activateTabIndex([this.eExpand]);\n    }\n\n    private onFunctionsReadOnlyPropChanged(): void {\n        const readOnly = this.gridOptionsService.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        this.params = params;\n\n        const readOnly = this.gridOptionsService.get('functionsReadOnly');\n        this.eSelect.setReadOnly(readOnly);\n        this.eSelect.addOrRemoveCssClass('ag-column-select-column-readonly', readOnly);\n\n        if (this.columnModel.isReady()) {\n            this.showOrHideOptions();\n        }\n    }\n\n    private createExpandIcons() {\n        this.eExpand.appendChild((\n            this.eExpandChecked = _.createIconNoSpan('columnSelectOpen', this.gridOptionsService)!\n        ));\n\n        this.eExpand.appendChild((\n            this.eExpandUnchecked = _.createIconNoSpan('columnSelectClosed', this.gridOptionsService)!\n        ));\n\n        this.eExpand.appendChild((\n            this.eExpandIndeterminate = _.createIconNoSpan('columnSelectIndeterminate', this.gridOptionsService)!\n        ));\n\n        this.setExpandState(ExpandState.EXPANDED);\n    }\n\n    // we only show expand / collapse if we are showing columns\n    private showOrHideOptions(): void {\n        const showFilter = !this.params.suppressColumnFilter;\n        const showSelect = !this.params.suppressColumnSelectAll;\n        const showExpand = !this.params.suppressColumnExpandAll;\n        const groupsPresent = this.columnModel.isPrimaryColumnGroupsPresent();\n        const translate = this.localeService.getLocaleTextFunc();\n\n        this.eFilterTextField.setInputPlaceholder(translate('searchOoo', 'Search...'));\n\n        _.setDisplayed(this.eFilterTextField.getGui(), showFilter);\n        _.setDisplayed(this.eSelect.getGui(), showSelect);\n        _.setDisplayed(this.eExpand, showExpand && groupsPresent);\n    }\n\n    private onFilterTextChanged(): void {\n        if (!this.onFilterTextChangedDebounced) {\n            this.onFilterTextChangedDebounced = _.debounce(() => {\n                const filterText = this.eFilterTextField.getValue();\n                this.dispatchEvent({ type: \"filterChanged\", filterText: filterText });\n            }, PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n\n        this.onFilterTextChangedDebounced();\n    }\n\n    private onMiniFilterKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ENTER) {\n            // we need to add a delay that corresponds to the filter text debounce delay to ensure\n            // the text filtering has happened, otherwise all columns will be deselected\n            setTimeout(() => this.onSelectClicked(), PrimaryColsHeaderPanel.DEBOUNCE_DELAY);\n        }\n    }\n\n    private onSelectClicked(): void {\n        this.dispatchEvent({ type: this.selectState ? 'unselectAll' : 'selectAll' });\n    }\n\n    private onExpandClicked(): void {\n        this.dispatchEvent({ type: this.expandState === ExpandState.EXPANDED ? 'collapseAll' : 'expandAll' });\n    }\n\n    public setExpandState(state: ExpandState): void {\n        this.expandState = state;\n\n        _.setDisplayed(this.eExpandChecked, this.expandState === ExpandState.EXPANDED);\n        _.setDisplayed(this.eExpandUnchecked, this.expandState === ExpandState.COLLAPSED);\n        _.setDisplayed(this.eExpandIndeterminate, this.expandState === ExpandState.INDETERMINATE);\n    }\n\n    public setSelectionState(state?: boolean): void {\n        this.selectState = state;\n        this.eSelect.setValue(this.selectState);\n    }\n}\n", "import {\n    _,\n    AbstractColDef,\n    Autowired,\n    ColGroupDef,\n    Column,\n    ColumnModel,\n    ColumnEventType,\n    Component,\n    Events,\n    ProvidedColumnGroup,\n    IProvidedColumn,\n    ToolPanelColumnCompParams,\n    VirtualList,\n    VirtualListModel,\n    PreDestroy,\n    ColumnToolPanelState\n} from \"@ag-grid-community/core\";\nimport { PrimaryColsListPanelItemDragFeature } from './primaryColsListPanelItemDragFeature';\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp\";\nimport { ToolPanelColDefService } from \"@ag-grid-enterprise/side-bar\";\nimport { ExpandState } from \"./primaryColsHeaderPanel\";\nimport { ColumnModelItem } from \"./columnModelItem\";\nimport { ModelItemUtils } from \"./modelItemUtils\";\n\nclass UIColumnModel implements VirtualListModel {\n\n    private readonly items: ColumnModelItem[];\n\n    constructor(items: ColumnModelItem[]) {\n        this.items = items;\n    }\n\n    public getRowCount(): number {\n        return this.items.length;\n    }\n\n    public getRow(index: number): ColumnModelItem {\n        return this.items[index];\n    }\n}\n\nconst PRIMARY_COLS_LIST_PANEL_CLASS = 'ag-column-select-list';\n\nexport class PrimaryColsListPanel extends Component {\n\n    public static TEMPLATE = /* html */ `<div class=\"${PRIMARY_COLS_LIST_PANEL_CLASS}\" role=\"presentation\"></div>`;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('toolPanelColDefService') private colDefService: ToolPanelColDefService;\n    @Autowired('modelItemUtils') private modelItemUtils: ModelItemUtils;\n\n    private allowDragging: boolean;\n    private filterText: string | null;\n    private expandGroupsByDefault: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n\n    private groupsExist: boolean;\n\n    private virtualList: VirtualList;\n\n    private allColsTree: ColumnModelItem[];\n    private displayedColsList: ColumnModelItem[];\n    private destroyColumnItemFuncs: (() => void)[] = [];\n    private hasLoadedInitialState: boolean = false;\n    private isInitialState: boolean = false;\n\n    constructor() {\n        super(PrimaryColsListPanel.TEMPLATE);\n    }\n\n    @PreDestroy\n    private destroyColumnTree(): void {\n        this.allColsTree = [];\n        this.destroyColumnItemFuncs.forEach(f => f());\n        this.destroyColumnItemFuncs = [];\n    }\n\n    public init(\n        params: ToolPanelColumnCompParams,\n        allowDragging: boolean,\n        eventType: ColumnEventType\n    ): void {\n        this.params = params;\n        this.allowDragging = allowDragging;\n        this.eventType = eventType;\n\n        if (!this.params.suppressSyncLayoutWithGrid) {\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.onColumnsChanged.bind(this));\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnsChanged.bind(this));\n\n        const eventsImpactingCheckedState: string[] = [\n            Events.EVENT_COLUMN_PIVOT_CHANGED,\n            Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            Events.EVENT_COLUMN_VISIBLE,\n            Events.EVENT_NEW_COLUMNS_LOADED\n        ];\n\n        eventsImpactingCheckedState.forEach(event => {\n            // update header select all checkbox with current selection state\n            this.addManagedListener(this.eventService, event, this.fireSelectionChangedEvent.bind(this));\n        });\n\n        this.expandGroupsByDefault = !this.params.contractColumnSelection;\n\n        this.virtualList = this.createManagedBean(new VirtualList({\n            cssIdentifier: 'column-select',\n            ariaRole: 'tree',\n        }));\n\n        this.appendChild(this.virtualList.getGui());\n\n        this.virtualList.setComponentCreator(\n            (item: ColumnModelItem, listItemElement: HTMLElement) => {\n                _.setAriaLevel(listItemElement, (item.getDept() + 1));\n                return this.createComponentFromItem(item, listItemElement);\n            }\n        );\n\n        if (this.columnModel.isReady()) {\n            this.onColumnsChanged();\n        }\n\n        if (this.params.suppressColumnMove) { return; }\n        \n        this.createManagedBean(\n            new PrimaryColsListPanelItemDragFeature(this, this.virtualList)\n        );\n    }\n\n    private createComponentFromItem(item: ColumnModelItem, listItemElement: HTMLElement): Component {\n        if (item.isGroup()) {\n            const renderedGroup = new ToolPanelColumnGroupComp(item, this.allowDragging, this.eventType, listItemElement);\n            this.getContext().createBean(renderedGroup);\n\n            return renderedGroup;\n        }\n\n        const columnComp = new ToolPanelColumnComp(item, this.allowDragging, this.groupsExist, listItemElement);\n        this.getContext().createBean(columnComp);\n\n        return columnComp;\n    }\n\n    public onColumnsChanged(): void {\n        if (!this.hasLoadedInitialState) {\n            this.hasLoadedInitialState = true;\n            this.isInitialState = !!this.params.initialState;\n        }\n\n        const expandedStates = this.getExpandedStates();\n\n        const pivotModeActive = this.columnModel.isPivotMode();\n        const shouldSyncColumnLayoutWithGrid = !this.params.suppressSyncLayoutWithGrid && !pivotModeActive;\n\n        if (shouldSyncColumnLayoutWithGrid) {\n            this.buildTreeFromWhatGridIsDisplaying();\n        } else {\n            this.buildTreeFromProvidedColumnDefs();\n        }\n\n        this.setExpandedStates(expandedStates);\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n\n        this.isInitialState = false;\n    }\n\n    public getDisplayedColsList(): ColumnModelItem[] {\n        return this.displayedColsList;\n    }\n\n    private getExpandedStates(): {[key:string]:boolean} {\n        const res: {[id:string]:boolean} = {};\n        \n        if (this.isInitialState) {\n            const { expandedGroupIds } = this.params.initialState as ColumnToolPanelState;\n            expandedGroupIds.forEach(id => {\n                res[id] = true;\n            });\n            return res;\n        }\n\n        if (!this.allColsTree) { return {}; }\n\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                res[colGroup.getId()] = item.isExpanded();\n            }\n        });\n\n        return res;\n    }\n\n    private setExpandedStates(states: {[key:string]:boolean}): void {\n        if (!this.allColsTree) { return; }\n\n        const { isInitialState } = this;\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n            const colGroup = item.getColumnGroup();\n            if (colGroup) { // group should always exist, this is defensive\n                const expanded = states[colGroup.getId()];\n                const groupExistedLastTime = expanded != null;\n                if (groupExistedLastTime || isInitialState) {\n                    item.setExpanded(!!expanded);\n                }\n            }\n        });\n    }\n\n    private buildTreeFromWhatGridIsDisplaying(): void {\n        this.colDefService.syncLayoutWithGrid(this.setColumnLayout.bind(this));\n    }\n\n    public setColumnLayout(colDefs: AbstractColDef[]): void {\n        const columnTree = this.colDefService.createColumnTree(colDefs);\n        this.buildListModel(columnTree);\n\n        // using col defs to check if groups exist as it could be a custom layout\n        this.groupsExist = colDefs.some(colDef => {\n            return colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n        });\n\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private buildTreeFromProvidedColumnDefs(): void {\n        // add column / group comps to tool panel\n        this.buildListModel(this.columnModel.getPrimaryColumnTree());\n        this.groupsExist = this.columnModel.isPrimaryColumnGroupsPresent();\n    }\n\n    private buildListModel(columnTree: IProvidedColumn[]): void {\n        const columnExpandedListener = this.onColumnExpanded.bind(this);\n        const addListeners = (item: ColumnModelItem) => {\n            item.addEventListener(ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            const removeFunc = item.removeEventListener.bind(item, ColumnModelItem.EVENT_EXPANDED_CHANGED, columnExpandedListener);\n            this.destroyColumnItemFuncs.push(removeFunc);\n        };\n\n        const recursivelyBuild = (tree: IProvidedColumn[], dept: number, parentList: ColumnModelItem[]): void => {\n            tree.forEach(child => {\n                if (child instanceof ProvidedColumnGroup) {\n                    createGroupItem(child, dept, parentList);\n                } else {\n                    createColumnItem(child as Column, dept, parentList);\n                }\n            });\n        };\n\n        const createGroupItem = (columnGroup: ProvidedColumnGroup, dept: number, parentList: ColumnModelItem[]): void => {\n            const columnGroupDef = columnGroup.getColGroupDef();\n            const skipThisGroup = columnGroupDef && columnGroupDef.suppressColumnsToolPanel;\n            if (skipThisGroup) { return; }\n\n            if (columnGroup.isPadding()) {\n                recursivelyBuild(columnGroup.getChildren(), dept, parentList);\n                return;\n            }\n\n            const displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, columnGroup, 'columnToolPanel');\n            const item: ColumnModelItem = new ColumnModelItem(displayName, columnGroup, dept, true, this.expandGroupsByDefault);\n\n            parentList.push(item);\n            addListeners(item);\n\n            recursivelyBuild(columnGroup.getChildren(), dept + 1, item.getChildren());\n        };\n\n        const createColumnItem = (column: Column, dept: number, parentList: ColumnModelItem[]): void => {\n            const skipThisColumn = column.getColDef() && column.getColDef().suppressColumnsToolPanel;\n\n            if (skipThisColumn) { return; }\n\n            const displayName = this.columnModel.getDisplayNameForColumn(column, 'columnToolPanel');\n\n            parentList.push(new ColumnModelItem(displayName, column, dept));\n        };\n\n        this.destroyColumnTree();\n        recursivelyBuild(columnTree, 0, this.allColsTree);\n    }\n\n    private onColumnExpanded(): void {\n        this.flattenAndFilterModel();\n    }\n\n    private flattenAndFilterModel(): void {\n        this.displayedColsList = [];\n\n        const recursiveFunc = (item: ColumnModelItem) => {\n            if (!item.isPassesFilter()) { return; }\n            this.displayedColsList.push(item);\n            if (item.isGroup() && item.isExpanded()) {\n                item.getChildren().forEach(recursiveFunc);\n            }\n        };\n\n        this.allColsTree.forEach(recursiveFunc);\n        this.virtualList.setModel(new UIColumnModel(this.displayedColsList));\n\n        const focusedRow = this.virtualList.getLastFocusedRow();\n        this.virtualList.refresh();\n\n        if (focusedRow != null) {\n            this.focusRowIfAlive(focusedRow);\n        }\n\n        this.notifyListeners();\n\n        this.refreshAriaLabel();\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnListName = translate('ariaColumnPanelList', 'Column List');\n        const localeColumns = translate('columns', 'Columns');\n        const items = this.displayedColsList.length;\n\n        _.setAriaLabel(this.virtualList.getAriaElement(), `${columnListName} ${items} ${localeColumns}`);\n    }\n\n    private focusRowIfAlive(rowIndex: number): void {\n        window.setTimeout(() => {\n            if (this.isAlive()) {\n                this.virtualList.focusRow(rowIndex);\n            }\n        }, 0);\n    }\n\n    private forEachItem(callback: (item: ColumnModelItem) => void): void {\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach(item => {\n                callback(item);\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                }\n            });\n        };\n\n        if (!this.allColsTree) { return; }\n\n        recursiveFunc(this.allColsTree);\n    }\n\n    public doSetExpandedAll(value: boolean): void {\n        this.forEachItem(item => {\n            if (item.isGroup()) {\n                item.setExpanded(value);\n            }\n        });\n    }\n\n    public setGroupsExpanded(expand: boolean, groupIds?: string[]): void {\n        if (!groupIds) {\n            this.doSetExpandedAll(expand);\n            return;\n        }\n\n        const expandedGroupIds: string[] = [];\n\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n\n            const groupId = item.getColumnGroup().getId();\n            if (groupIds.indexOf(groupId) >= 0) {\n                item.setExpanded(expand);\n                expandedGroupIds.push(groupId);\n            }\n        });\n\n        const unrecognisedGroupIds = groupIds.filter(groupId => !_.includes(expandedGroupIds, groupId));\n        if (unrecognisedGroupIds.length > 0) {\n            console.warn('AG Grid: unable to find group(s) for supplied groupIds:', unrecognisedGroupIds);\n        }\n    }\n\n    private getExpandState(): ExpandState {\n        let expandedCount = 0;\n        let notExpandedCount = 0;\n\n        this.forEachItem(item => {\n            if (!item.isGroup()) { return; }\n            if (item.isExpanded()) {\n                expandedCount++;\n            } else {\n                notExpandedCount++;\n            }\n        });\n\n        if (expandedCount > 0 && notExpandedCount > 0) {\n            return ExpandState.INDETERMINATE;\n        }\n\n        if (notExpandedCount > 0) {\n            return ExpandState.COLLAPSED;\n        }\n\n        return ExpandState.EXPANDED;\n    }\n\n    public doSetSelectedAll(selectAllChecked: boolean): void {\n        this.modelItemUtils.selectAllChildren(this.allColsTree, selectAllChecked, this.eventType);\n    }\n\n    private getSelectionState(): boolean | undefined {\n\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.forEachItem(item => {\n            if (item.isGroup()) { return; }\n            if (!item.isPassesFilter()) { return; }\n\n            const column = item.getColumn();\n            const colDef = column.getColDef();\n\n            let checked: boolean;\n\n            if (pivotMode) {\n                const noPivotModeOptionsAllowed = !column.isAllowPivot() && !column.isAllowRowGroup() && !column.isAllowValue();\n                if (noPivotModeOptionsAllowed) {\n                    return;\n                }\n                checked = column.isValueActive() || column.isPivotActive() || column.isRowGroupActive();\n            } else {\n                if (colDef.lockVisible) { return; }\n\n                checked = column.isVisible();\n            }\n\n            checked ? checkedCount++ : uncheckedCount++;\n\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) { return undefined; }\n\n        return !(checkedCount === 0 || uncheckedCount > 0);\n    }\n\n    public setFilterText(filterText: string) {\n        this.filterText = _.exists(filterText) ? filterText.toLowerCase() : null;\n        this.markFilteredColumns();\n        this.flattenAndFilterModel();\n    }\n\n    private markFilteredColumns(): void {\n\n        const passesFilter = (item: ColumnModelItem) => {\n            if (!_.exists(this.filterText)) { return true; }\n\n            const displayName = item.getDisplayName();\n\n            return displayName == null || displayName.toLowerCase().indexOf(this.filterText) !== -1;\n        };\n\n        const recursivelyCheckFilter = (item: ColumnModelItem, parentPasses: boolean): boolean => {\n            let atLeastOneChildPassed = false;\n            if (item.isGroup()) {\n                const groupPasses = passesFilter(item);\n                item.getChildren().forEach(child => {\n                    const childPasses = recursivelyCheckFilter(child, groupPasses || parentPasses);\n                    if (childPasses) {\n                        atLeastOneChildPassed = childPasses;\n                    }\n                });\n            }\n\n            const filterPasses = (parentPasses || atLeastOneChildPassed) ? true : passesFilter(item);\n            item.setPassesFilter(filterPasses);\n            return filterPasses;\n        };\n\n        this.allColsTree.forEach(item => recursivelyCheckFilter(item, false));\n    }\n\n    private notifyListeners(): void {\n        this.fireGroupExpandedEvent();\n        this.fireSelectionChangedEvent();\n    }\n\n    private fireGroupExpandedEvent(): void {\n        const expandState = this.getExpandState();\n        this.dispatchEvent({ type: 'groupExpanded', state: expandState });\n    }\n\n    private fireSelectionChangedEvent(): void {\n        if (!this.allColsTree) { return; }\n        const selectionState = this.getSelectionState();\n        this.dispatchEvent({ type: 'selectionChanged', state: selectionState });\n    }\n\n    public getExpandedGroups(): string[] {\n        const expandedGroupIds: string[] = [];\n\n        if (!this.allColsTree) { return expandedGroupIds; }\n\n        this.forEachItem(item => {\n            if (item.isGroup() && item.isExpanded()) {\n                expandedGroupIds.push(item.getColumnGroup().getId());\n            }\n        });\n\n        return expandedGroupIds;\n    }\n}\n", "import {\n    Autowired,\n    BeanStub,\n    Column,\n    ColumnModel,\n    ColumnPanelItemDragStartEvent,\n    DragSourceType,\n    Events,\n    GridOptionsService,\n    ProvidedColumnGroup,\n    PostConstruct,\n    VirtualList,\n    VirtualListDragFeature,\n    _,\n    VirtualListDragItem\n} from \"@ag-grid-community/core\";\n\nimport { PrimaryColsListPanel } from \"./primaryColsListPanel\";\nimport { ToolPanelColumnComp } from \"./toolPanelColumnComp\";\nimport { ToolPanelColumnGroupComp } from \"./toolPanelColumnGroupComp\";\nexport class PrimaryColsListPanelItemDragFeature extends BeanStub {\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridOptionsService') protected readonly gridOptionsService: GridOptionsService;\n\n    constructor(\n        private readonly comp: PrimaryColsListPanel,\n        private readonly virtualList: VirtualList,\n    ) { super(); }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createManagedBean(new VirtualListDragFeature<\n            PrimaryColsListPanel,\n            ToolPanelColumnGroupComp | ToolPanelColumnComp,\n            Column | ProvidedColumnGroup,\n            ColumnPanelItemDragStartEvent\n        >(\n            this.comp,\n            this.virtualList,\n            {\n                dragSourceType: DragSourceType.ToolPanel,\n                listItemDragStartEvent: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                listItemDragEndEvent: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n                eventSource: this.eventService,\n                getCurrentDragValue: (listItemDragStartEvent: ColumnPanelItemDragStartEvent) => this.getCurrentDragValue(listItemDragStartEvent),\n                isMoveBlocked: (currentDragValue: Column | ProvidedColumnGroup | null) => this.isMoveBlocked(currentDragValue),\n                getNumRows: (comp: PrimaryColsListPanel) => comp.getDisplayedColsList().length,\n                moveItem: (\n                    currentDragValue: Column | ProvidedColumnGroup | null,\n                    lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n                ) => this.moveItem(currentDragValue, lastHoveredListItem)\n            }\n        ));\n    }\n\n    private getCurrentDragValue(listItemDragStartEvent: ColumnPanelItemDragStartEvent): Column | ProvidedColumnGroup {\n        return listItemDragStartEvent.column;\n    }\n\n    private isMoveBlocked(currentDragValue: Column | ProvidedColumnGroup | null): boolean {\n        const preventMoving = this.gridOptionsService.get('suppressMovableColumns');\n        if (preventMoving) {\n            return true;\n        }\n\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const hasNotMovable = currentColumns.find(col => {\n            const colDef = col.getColDef();\n            return !!colDef.suppressMovable || !!colDef.lockPosition;\n        });\n\n        return !!hasNotMovable;\n    }\n\n    private moveItem(\n        currentDragValue: Column | ProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): void {\n        const targetIndex: number | null = this.getTargetIndex(currentDragValue, lastHoveredListItem);\n\n        const columnsToMove: Column[] = this.getCurrentColumns(currentDragValue);\n\n        if (targetIndex != null) {\n            this.columnModel.moveColumns(columnsToMove, targetIndex, 'toolPanelUi');\n        }\n    }\n\n    private getMoveDiff(currentDragValue: Column | ProvidedColumnGroup | null, end: number): number {\n        const allColumns = this.columnModel.getAllGridColumns();\n        const currentColumns = this.getCurrentColumns(currentDragValue);\n        const currentColumn = currentColumns[0];\n        const span = currentColumns.length;\n\n        const currentIndex = allColumns.indexOf(currentColumn);\n\n        if (currentIndex < end) {\n            return span;\n        }\n\n        return 0;\n    }\n\n    private getCurrentColumns(currentDragValue: Column | ProvidedColumnGroup | null): Column[] {\n        if (currentDragValue instanceof ProvidedColumnGroup) {\n            return currentDragValue.getLeafColumns();\n        }\n        return [currentDragValue!];\n    }\n\n    private getTargetIndex(\n        currentDragValue: Column | ProvidedColumnGroup | null,\n        lastHoveredListItem: VirtualListDragItem<ToolPanelColumnGroupComp | ToolPanelColumnComp> | null\n    ): number | null {\n        if (!lastHoveredListItem) { return null; }\n        const columnItemComponent = lastHoveredListItem.component;\n        let isBefore = lastHoveredListItem.position === 'top';\n\n        let targetColumn: Column;\n\n        if (columnItemComponent instanceof ToolPanelColumnGroupComp) {\n            const columns = columnItemComponent.getColumns();\n            targetColumn = columns[0];\n            isBefore = true;\n        } else {\n            targetColumn = columnItemComponent.getColumn();\n        }\n\n        // if the target col is in the cols to be moved, no index to move.\n        const movingCols = this.getCurrentColumns(currentDragValue);\n        if (movingCols.indexOf(targetColumn) !== -1) {\n            return null;\n        }\n\n        const targetColumnIndex = this.columnModel.getAllGridColumns().indexOf(targetColumn);\n        const adjustedTarget = isBefore ? targetColumnIndex : targetColumnIndex + 1;\n        const diff = this.getMoveDiff(currentDragValue, adjustedTarget);\n\n        return adjustedTarget - diff;\n    }\n}", "import {\n    _,\n    AgCheckbox,\n    Autowired,\n    Column,\n    ColumnModel,\n    ColumnEventType,\n    ColumnPanelItemDragStartEvent,\n    ColumnPanelItemDragEndEvent,\n    Component,\n    CssClassApplier,\n    DragAndDropService,\n    DragSource,\n    DragSourceType,\n    Events,\n    ITooltipParams,\n    KeyCode,\n    ProvidedColumnGroup,\n    PostConstruct,\n    RefSelector,\n    TouchListener,\n    WithoutGridCommon,\n    IAggFunc,\n    DragItem\n} from \"@ag-grid-community/core\";\nimport { ColumnModelItem } from \"./columnModelItem\";\nimport { ModelItemUtils } from \"./modelItemUtils\";\nimport { ToolPanelContextMenu } from \"./toolPanelContextMenu\";\n\nexport class ToolPanelColumnGroupComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select-column-group\" aria-hidden=\"true\">\n            <span class=\"ag-column-group-icons\" ref=\"eColumnGroupIcons\" >\n                <span class=\"ag-column-group-closed-icon\" ref=\"eGroupClosedIcon\"></span>\n                <span class=\"ag-column-group-opened-icon\" ref=\"eGroupOpenedIcon\"></span>\n            </span>\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('modelItemUtils') private modelItemUtils: ModelItemUtils;\n\n    @RefSelector('cbSelect') private cbSelect: AgCheckbox;\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n\n    @RefSelector('eGroupOpenedIcon') private eGroupOpenedIcon: Element;\n    @RefSelector('eGroupClosedIcon') private eGroupClosedIcon: Element;\n    @RefSelector('eColumnGroupIcons') private eColumnGroupIcons: Element;\n\n    private eDragHandle: Element;\n\n    private readonly columnGroup: ProvidedColumnGroup;\n    private readonly columnDept: number;\n\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        private readonly modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly eventType: ColumnEventType,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.modelItem = modelItem;\n        this.columnGroup = modelItem.getColumnGroup();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n        this.allowDragging = allowDragging;\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE);\n\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-group-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n        this.setupExpandContract();\n\n        this.addCssClass('ag-column-select-indent-' + this.columnDept);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.addManagedListener(this.cbSelect, Events.EVENT_FIELD_VALUE_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.modelItem, ColumnModelItem.EVENT_EXPANDED_CHANGED, this.onExpandChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n\n        this.setOpenClosedIcons();\n        this.setupDragging();\n        this.onColumnStateChanged();\n        this.addVisibilityListenersToAllChildren();\n        this.refreshAriaExpanded();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n\n        const classes = CssClassApplier.getToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.gridOptionsService, null, this.columnGroup);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumns(): Column[] {\n        return this.columnGroup.getLeafColumns();\n    }\n\n    private setupTooltip(): void {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n\n        if (!colGroupDef) { return; }\n\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n\n        const refresh = () => {\n            const newTooltipText = colGroupDef.headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumnGroup', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumnGroup';\n        return res;\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.modelItem.setExpanded(false);\n                break;\n            case KeyCode.RIGHT:\n                e.preventDefault();\n                this.modelItem.setExpanded(true);\n                break;\n            case KeyCode.SPACE:\n                e.preventDefault();\n                if (this.isSelectable()) {\n                    this.onSelectAllChanged(!this.isSelected());\n                }\n                break;\n        }\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { columnGroup, gridOptionsService } = this;\n\n        if (gridOptionsService.get('functionsReadOnly')) { return; }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(columnGroup, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        })\n    }\n\n    private addVisibilityListenersToAllChildren(): void {\n        this.columnGroup.getLeafColumns().forEach(column => {\n            this.addManagedListener(column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n            this.addManagedListener(column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        });\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.columnGroup\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                     // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: this.columnGroup.getLeafColumns(),\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: this.eventType\n                    })\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const columns = this.columnGroup.getLeafColumns();\n        const visibleState: { [key: string]: boolean; } = {};\n        const pivotState: { [key: string]: {\n            pivot?: boolean;\n            rowGroup?: boolean;\n            aggFunc?: string | IAggFunc | null; }\n        } = {};\n        columns.forEach(col => {\n            const colId = col.getId();\n            visibleState[colId] = col.isVisible();\n            pivotState[colId] = this.modelItemUtils.createPivotState(col);\n        });\n\n        return {\n            columns,\n            visibleState,\n            pivotState\n        };\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(_.createIcon('columnSelectClosed', this.gridOptionsService, null));\n        this.eGroupOpenedIcon.appendChild(_.createIcon('columnSelectOpen', this.gridOptionsService, null));\n\n        this.addManagedListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n        this.addManagedListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n\n        const touchListener = new TouchListener(this.eColumnGroupIcons, true);\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));\n        this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n    }\n\n    private onLabelClicked(): void {\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private getVisibleLeafColumns(): Column[] {\n        const childColumns: Column[] = [];\n\n        const extractCols = (children: ColumnModelItem[]) => {\n            children.forEach(child => {\n                if (!child.isPassesFilter()) { return; }\n                if (child.isGroup()) {\n                    extractCols(child.getChildren());\n                } else {\n                    childColumns.push(child.getColumn());\n                }\n            });\n        };\n\n        extractCols(this.modelItem.getChildren());\n\n        return childColumns;\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        this.refreshAriaLabel();\n\n        if (this.processingColumnStateChange) { return; }\n\n        this.modelItemUtils.selectAllChildren(this.modelItem.getChildren(), nextState, this.eventType);\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumnGroup', 'Column Group');\n        const checkboxValue = this.cbSelect.getValue();\n        const state = checkboxValue === undefined ?\n            translate('ariaIndeterminate', 'indeterminate') : \n            (checkboxValue ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden'));\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    public onColumnStateChanged(): void {\n        const selectedValue = this.workOutSelectedValue();\n        const readOnlyValue = this.workOutReadOnlyValue();\n        this.processingColumnStateChange = true;\n        this.cbSelect.setValue(selectedValue);\n        this.cbSelect.setReadOnly(readOnlyValue);\n        this.addOrRemoveCssClass('ag-column-select-column-group-readonly', readOnlyValue);\n        this.processingColumnStateChange = false;\n    }\n\n    private workOutSelectedValue(): boolean | undefined {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        const visibleLeafColumns = this.getVisibleLeafColumns();\n\n        let checkedCount = 0;\n        let uncheckedCount = 0;\n\n        visibleLeafColumns.forEach(column => {\n            if (!pivotMode && column.getColDef().lockVisible) { return; }\n\n            if (this.isColumnChecked(column, pivotMode)) {\n                checkedCount++;\n            } else {\n                uncheckedCount++;\n            }\n        });\n\n        if (checkedCount > 0 && uncheckedCount > 0) {\n            return undefined;\n        }\n\n        return checkedCount > 0;\n    }\n\n    private workOutReadOnlyValue(): boolean {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        let colsThatCanAction = 0;\n\n        this.columnGroup.getLeafColumns().forEach(col => {\n            if (pivotMode) {\n                if (col.isAnyFunctionAllowed()) {\n                    colsThatCanAction++;\n                }\n            } else {\n                if (!col.getColDef().lockVisible) {\n                    colsThatCanAction++;\n                }\n            }\n        });\n\n        return colsThatCanAction === 0;\n    }\n\n    private isColumnChecked(column: Column, pivotMode: boolean): boolean {\n        if (pivotMode) {\n            const pivoted = column.isPivotActive();\n            const grouped = column.isRowGroupActive();\n            const aggregated = column.isValueActive();\n            return pivoted || grouped || aggregated;\n        }\n\n        return column.isVisible();\n    }\n\n    private onExpandOrContractClicked(): void {\n        const oldState = this.modelItem.isExpanded();\n        this.modelItem.setExpanded(!oldState);\n    }\n\n    private onExpandChanged() {\n        this.setOpenClosedIcons();\n        this.refreshAriaExpanded();\n    }\n\n    private setOpenClosedIcons(): void {\n        const folderOpen = this.modelItem.isExpanded();\n        _.setDisplayed(this.eGroupClosedIcon, !folderOpen);\n        _.setDisplayed(this.eGroupOpenedIcon, folderOpen);\n    }\n\n    private refreshAriaExpanded(): void {\n        _.setAriaExpanded(this.focusWrapper, this.modelItem.isExpanded());\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        const cbValue = this.cbSelect.getValue();\n        const readOnly = this.cbSelect.isReadOnly();\n\n        if (!readOnly && ((value && !cbValue) || (!value && cbValue))) {\n            this.cbSelect.toggle();\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public setSelected(selected: boolean) {\n        this.cbSelect.setValue(selected, true);\n    }\n}\n", "import {\n    AgEventListener,\n    Column,\n    EventService,\n    IEventEmitter,\n    ProvidedColumnGroup\n} from \"@ag-grid-community/core\";\n\nexport class ColumnModelItem implements IEventEmitter {\n\n    private eventService: EventService = new EventService();\n\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n\n    private readonly group: boolean;\n    private readonly displayName: string | null;\n    private readonly columnGroup: ProvidedColumnGroup;\n    private readonly column: Column;\n    private readonly dept: number;\n    private readonly children: ColumnModelItem[];\n\n    private expanded: boolean | undefined;\n    private passesFilter: boolean;\n\n    constructor(\n        displayName: string | null,\n        columnOrGroup: Column | ProvidedColumnGroup,\n        dept: number,\n        group = false,\n        expanded?: boolean\n    ) {\n        this.displayName = displayName;\n        this.dept = dept;\n        this.group = group;\n\n        if (group) {\n            this.columnGroup = columnOrGroup as ProvidedColumnGroup;\n            this.expanded = expanded;\n            this.children = [];\n        } else {\n            this.column = columnOrGroup as Column;\n        }\n    }\n\n    public isGroup(): boolean { return this.group; }\n    public getDisplayName(): string | null { return this.displayName; }\n    public getColumnGroup(): ProvidedColumnGroup { return this.columnGroup; }\n    public getColumn(): Column { return this.column; }\n    public getDept(): number { return this.dept; }\n    public isExpanded(): boolean { return !!this.expanded; }\n    public getChildren(): ColumnModelItem[] { return this.children; }\n    public isPassesFilter(): boolean { return this.passesFilter; }\n\n    public setExpanded(expanded: boolean): void {\n        if (expanded === this.expanded) { return; }\n        this.expanded = expanded;\n        this.eventService.dispatchEvent({type: ColumnModelItem.EVENT_EXPANDED_CHANGED});\n    }\n\n    public setPassesFilter(passesFilter: boolean): void {\n        this.passesFilter = passesFilter;\n    }\n\n    public addEventListener(eventType: string, listener: AgEventListener): void {\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: AgEventListener): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n}\n", "import {\n    AgMenuItemComponent,\n    AgMenuList,\n    Autowired,\n    Column,\n    ColumnModel,\n    Component,\n    FocusService,\n    MenuItemDef,\n    PopupService,\n    PostConstruct,\n    ProvidedColumnGroup, \n    _\n} from \"@ag-grid-community/core\";\n\ntype MenuItemName = 'rowGroup' | 'value' | 'pivot';\n\ntype MenuItemProperty = {\n    allowedFunction: (col: Column) => boolean;\n    activeFunction: (col: Column) => boolean;\n    activateLabel: (name: string) => string;\n    deactivateLabel: (name: string) => string;\n    activateFunction: () => void;\n    deActivateFunction: () => void;\n    addIcon: string;\n    removeIcon: string;\n};\n\nexport class ToolPanelContextMenu extends Component {\n\n    private columns: Column[];\n    private allowGrouping: boolean;\n    private allowValues: boolean;\n    private allowPivoting: boolean;\n    private menuItemMap: Map<MenuItemName, MenuItemProperty>;\n    private displayName: string | null = null;\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    constructor(\n        private readonly column: Column | ProvidedColumnGroup,\n        private readonly mouseEvent: MouseEvent,\n        private readonly parentEl: HTMLElement\n    ) {\n        super(/* html */ `<div class=\"ag-menu\"></div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.initializeProperties(this.column);\n        this.buildMenuItemMap();\n\n        if (this.column instanceof Column) {\n            this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        } else {\n            this.displayName = this.columnModel.getDisplayNameForProvidedColumnGroup(null, this.column, 'columnToolPanel');\n        }\n\n        if (this.isActive()) {\n            this.mouseEvent.preventDefault();\n            const menuItemsMapped: MenuItemDef[] = this.getMappedMenuItems();\n            if (menuItemsMapped.length === 0) { return; }\n            \n            this.displayContextMenu(menuItemsMapped);\n        }\n    }\n\n    private initializeProperties(column: Column | ProvidedColumnGroup): void {\n        if (column instanceof ProvidedColumnGroup) {\n            this.columns = column.getLeafColumns();\n        } else {\n            this.columns = [column];\n        }\n\n        this.allowGrouping = this.columns.some(col => col.isPrimary() && col.isAllowRowGroup());\n        this.allowValues = this.columns.some(col => col.isPrimary() && col.isAllowValue());\n        this.allowPivoting = this.columnModel.isPivotMode() && this.columns.some(col => col.isPrimary() && col.isAllowPivot());\n    }\n\n    private buildMenuItemMap(): void {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        this.menuItemMap = new Map<MenuItemName, MenuItemProperty>();\n        this.menuItemMap.set('rowGroup', {\n            allowedFunction: (col: Column) => col.isPrimary() && col.isAllowRowGroup() && !this.columnModel.isColumnGroupingLocked(col),\n            activeFunction: (col: Column) => col.isRowGroupActive(),\n            activateLabel: () => `${localeTextFunc('groupBy', 'Group by')} ${this.displayName}`,\n            deactivateLabel: () => `${localeTextFunc('ungroupBy', 'Un-Group by')} ${this.displayName}`,\n            activateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.addColumnsToList(groupedColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const groupedColumns = this.columnModel.getRowGroupColumns();\n                this.columnModel.setRowGroupColumns(this.removeColumnsFromList(groupedColumns), \"toolPanelUi\");\n            },\n            addIcon: 'menuAddRowGroup',\n            removeIcon: 'menuRemoveRowGroup'\n        });\n\n        this.menuItemMap.set('value', {\n            allowedFunction: (col: Column) => col.isPrimary() && col.isAllowValue(),\n            activeFunction: (col: Column) => col.isValueActive(),\n            activateLabel: () => localeTextFunc('addToValues', `Add ${this.displayName} to values`, [this.displayName!]),\n            deactivateLabel: () => localeTextFunc('removeFromValues', `Remove ${this.displayName} from values`, [this.displayName!]),\n            activateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.addColumnsToList(valueColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const valueColumns = this.columnModel.getValueColumns();\n                this.columnModel.setValueColumns(this.removeColumnsFromList(valueColumns), \"toolPanelUi\");\n            },\n            addIcon: 'valuePanel',\n            removeIcon: 'valuePanel'\n        });\n\n        this.menuItemMap.set('pivot', {\n            allowedFunction: (col: Column) => this.columnModel.isPivotMode() && col.isPrimary() && col.isAllowPivot(),\n            activeFunction: (col: Column) => col.isPivotActive(),\n            activateLabel: () => localeTextFunc('addToLabels', `Add ${this.displayName} to labels`, [this.displayName!]),\n            deactivateLabel: () => localeTextFunc('removeFromLabels', `Remove ${this.displayName} from labels`, [this.displayName!]),\n            activateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.addColumnsToList(pivotColumns), \"toolPanelUi\");\n            },\n            deActivateFunction: () => {\n                const pivotColumns = this.columnModel.getPivotColumns();\n                this.columnModel.setPivotColumns(this.removeColumnsFromList(pivotColumns), \"toolPanelUi\");\n            },\n            addIcon: 'pivotPanel',\n            removeIcon: 'pivotPanel'\n        });\n    }\n\n    private addColumnsToList(columnList: Column[]): Column[] {\n        return [...columnList].concat(this.columns.filter(col => columnList.indexOf(col) === -1));\n    }\n\n    private removeColumnsFromList(columnList: Column[]): Column[] {\n        return columnList.filter(col => this.columns.indexOf(col) === -1);\n    }\n\n    private displayContextMenu(menuItemsMapped: MenuItemDef[]): void {\n        const eGui = this.getGui();\n        const menuList = this.createBean(new AgMenuList());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let hideFunc = () => {};\n\n        eGui.appendChild(menuList.getGui());\n        menuList.addMenuItems(menuItemsMapped);\n        menuList.addManagedListener(menuList, AgMenuItemComponent.EVENT_CLOSE_MENU, () => {\n            this.parentEl.focus();\n            hideFunc();\n        });\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            afterGuiAttached: () => this.focusService.focusInto(menuList.getGui()),\n            ariaLabel: localeTextFunc('ariaLabelContextMenu', 'Context Menu'),\n            closedCallback: (e: KeyboardEvent) => {\n                if (e instanceof KeyboardEvent) {\n                    this.parentEl.focus();\n                }\n                this.destroyBean(menuList);\n            }\n        });\n\n        if (addPopupRes) {\n            hideFunc = addPopupRes.hideFunc;\n        }\n\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'columnContextMenu',\n            mouseEvent: this.mouseEvent,\n            ePopup: eGui\n        });\n    }\n\n    private isActive(): boolean {\n        return this.allowGrouping || this.allowValues || this.allowPivoting;\n    }\n\n    private getMappedMenuItems(): MenuItemDef[] {\n        const ret: MenuItemDef[] = [];\n        for (const val of this.menuItemMap.values()) {\n            const isInactive = this.columns.some(col => val.allowedFunction(col) && !val.activeFunction(col));\n            const isActive = this.columns.some(col => val.allowedFunction(col) && val.activeFunction(col));\n\n            if (isInactive) {\n                ret.push({\n                    name: val.activateLabel(this.displayName!),\n                    icon: _.createIconNoSpan(val.addIcon, this.gridOptionsService, null),\n                    action: () => val.activateFunction()\n                });\n            }\n\n            if (isActive) {\n                ret.push({\n                    name: val.deactivateLabel(this.displayName!),\n                    icon: _.createIconNoSpan(val.removeIcon, this.gridOptionsService, null),\n                    action: () => val.deActivateFunction()\n                });\n            }\n        }\n\n        return ret;\n    }\n\n\n}", "import {\n    _,\n    AgCheckbox,\n    Autowired,\n    Column,\n    ColumnModel,\n    ColumnPanelItemDragStartEvent,\n    ColumnPanelItemDragEndEvent,\n    Component,\n    CssClassApplier,\n    DragAndDropService,\n    DragSource,\n    DragSourceType,\n    Events,\n    ITooltipParams,\n    KeyCode,\n    PostConstruct,\n    RefSelector,\n    WithoutGridCommon,\n    DragItem\n} from \"@ag-grid-community/core\";\nimport { ColumnModelItem } from \"./columnModelItem\";\nimport { ModelItemUtils } from \"./modelItemUtils\";\nimport { ToolPanelContextMenu } from \"./toolPanelContextMenu\";\n\nexport class ToolPanelColumnComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select-column\" aria-hidden=\"true\">\n            <ag-checkbox ref=\"cbSelect\" class=\"ag-column-select-checkbox\"></ag-checkbox>\n            <span class=\"ag-column-select-column-label\" ref=\"eLabel\"></span>\n        </div>`;\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private readonly dragAndDropService: DragAndDropService;\n    @Autowired('modelItemUtils') private readonly modelItemUtils: ModelItemUtils;\n\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @RefSelector('cbSelect') private cbSelect: AgCheckbox;\n\n    private column: Column;\n    private columnDept: number;\n    private eDragHandle: Element;\n    private displayName: string | null;\n    private processingColumnStateChange = false;\n\n    constructor(\n        modelItem: ColumnModelItem,\n        private readonly allowDragging: boolean,\n        private readonly groupsExist: boolean,\n        private readonly focusWrapper: HTMLElement\n    ) {\n        super();\n        this.column = modelItem.getColumn();\n        this.columnDept = modelItem.getDept();\n        this.displayName = modelItem.getDisplayName();\n    }\n\n    @PostConstruct\n    public init(): void {\n\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService)!;\n        this.eDragHandle.classList.add('ag-drag-handle', 'ag-column-select-column-drag-handle');\n\n        const checkboxGui = this.cbSelect.getGui();\n        const checkboxInput = this.cbSelect.getInputElement();\n\n        checkboxGui.insertAdjacentElement('afterend', this.eDragHandle);\n        checkboxInput.setAttribute('tabindex', '-1');\n\n        const displayNameSanitised: any = _.escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        const indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(`ag-column-select-indent-${indent}`);\n\n        this.setupDragging();\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.focusWrapper, 'contextmenu', this.onContextMenu.bind(this));\n\n        this.addManagedPropertyListener('functionsReadOnly', this.onColumnStateChanged.bind(this));\n\n        this.addManagedListener(this.cbSelect, Events.EVENT_FIELD_VALUE_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n\n        this.setupTooltip();\n\n        const classes = CssClassApplier.getToolPanelClassesFromColDef(this.column.getColDef(), this.gridOptionsService, this.column, null);\n        classes.forEach(c => this.addOrRemoveCssClass(c, true));\n    }\n\n    public getColumn(): Column {\n        return this.column;\n    }\n\n    private setupTooltip(): void {\n        const isTooltipWhenTruncated = this.gridOptionsService.get('tooltipShowMode') === 'whenTruncated';\n        let shouldDisplayTooltip: (() => boolean) | undefined;\n\n        if (isTooltipWhenTruncated) {\n            shouldDisplayTooltip = () => this.eLabel.scrollWidth > this.eLabel.clientWidth;\n        }\n        const refresh = () => {\n            const newTooltipText = this.column.getColDef().headerTooltip;\n            this.setTooltip({ newTooltipText, location: 'columnToolPanelColumn', shouldDisplayTooltip });\n        };\n\n        refresh();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const res = super.getTooltipParams();\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    }\n\n    private onContextMenu(e: MouseEvent): void {\n        const { column, gridOptionsService } = this;\n\n        if (gridOptionsService.get('functionsReadOnly')) { return; }\n\n        const contextMenu = this.createBean(new ToolPanelContextMenu(column, e, this.focusWrapper));\n        this.addDestroyFunc(() => {\n            if (contextMenu.isAlive()) {\n                this.destroyBean(contextMenu);\n            }\n        })\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    }\n\n    private onLabelClicked(): void {\n        if (this.gridOptionsService.get('functionsReadOnly')) {\n            return;\n        }\n\n        const nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    }\n\n    private onCheckboxChanged(event: any): void {\n        this.onChangeCommon(event.selected);\n    }\n\n    private onChangeCommon(nextState: boolean): void {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) { return; }\n\n        this.refreshAriaLabel();\n\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    }\n\n    private refreshAriaLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnLabel = translate('ariaColumn', 'Column');\n        const state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');\n        const visibilityLabel = translate('ariaToggleVisibility', 'Press SPACE to toggle visibility');\n\n        _.setAriaLabel(this.focusWrapper, `${this.displayName} ${columnLabel}`);\n        this.cbSelect.setInputAriaLabel(`${visibilityLabel} (${state})`);\n        _.setAriaDescribedBy(this.focusWrapper, this.cbSelect.getInputElement().id);\n    }\n\n    private setupDragging(): void {\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n\n        let hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n        const dragSource: DragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDefaultIconName: () => hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,\n            getDragItem: () => this.createDragItem(),\n            onDragStarted: () => {\n                hideColumnOnExit = !this.gridOptionsService.get('suppressDragLeaveHidesColumns');\n                const event: WithoutGridCommon<ColumnPanelItemDragStartEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n                    column: this.column\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onDragStopped: () => {\n                const event: WithoutGridCommon<ColumnPanelItemDragEndEvent> = {\n                    type: Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END\n                };\n                this.eventService.dispatchEvent(event);\n            },\n            onGridEnter: (dragItem: DragItem | null) => {\n                if (hideColumnOnExit) {\n                    // when dragged into the grid, restore the state that was active pre-drag\n                    this.modelItemUtils.updateColumns({\n                        columns: [this.column],\n                        visibleState: dragItem?.visibleState,\n                        pivotState: dragItem?.pivotState,\n                        eventType: 'toolPanelUi'\n                    })\n                }\n            },\n            onGridExit: () => {\n                if (hideColumnOnExit) {\n                    // when dragged outside of the grid, mimic what happens when checkbox is disabled\n                    // this handles the behaviour for pivot which is different to just hiding a column.\n                    this.onChangeCommon(false);\n                }\n            }\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    private createDragItem() {\n        const colId = this.column.getColId();\n        const visibleState = { [colId]: this.column.isVisible() };\n        const pivotState = { [colId]: this.modelItemUtils.createPivotState(this.column) }\n        return {\n            columns: [this.column],\n            visibleState,\n            pivotState\n        };\n    }\n\n    private onColumnStateChanged(): void {\n        this.processingColumnStateChange = true;\n        const isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            const anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        } else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n\n        let canBeToggled = true;\n        let canBeDragged = true;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            const functionsReadOnly = this.gridOptionsService.get('functionsReadOnly');\n            //  b) column is not allow any functions on it\n            const noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            canBeToggled = !functionsReadOnly && !noFunctionsAllowed;\n            canBeDragged = canBeToggled;\n        } else {\n            const { enableRowGroup, enableValue, lockPosition, suppressMovable, lockVisible } =\n                this.column.getColDef();\n            const forceDraggable = !!enableRowGroup || !!enableValue;\n            const disableDraggable = !!lockPosition || !!suppressMovable;\n            canBeToggled = !lockVisible;\n            canBeDragged = forceDraggable || !disableDraggable;\n        }\n\n        this.cbSelect.setReadOnly(!canBeToggled);\n        this.eDragHandle.classList.toggle('ag-column-select-column-readonly', !canBeDragged);\n        this.addOrRemoveCssClass('ag-column-select-column-readonly', !canBeDragged && !canBeToggled);\n\n        const checkboxPassive = isPivotMode && this.gridOptionsService.get('functionsPassive');\n        this.cbSelect.setPassive(checkboxPassive);\n\n        this.processingColumnStateChange = false;\n    }\n\n    public getDisplayName(): string | null {\n        return this.displayName;\n    }\n\n    public onSelectAllChanged(value: boolean): void {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    }\n\n    public isSelected(): boolean | undefined {\n        return this.cbSelect.getValue();\n    }\n\n    public isSelectable(): boolean {\n        return !this.cbSelect.isReadOnly();\n    }\n\n    public isExpandable(): boolean {\n        return false;\n    }\n\n    public setExpanded(value: boolean): void {\n        console.warn('AG Grid: can not expand a column item that does not represent a column group header');\n    }\n}\n", "import {\n    _,\n    ColDef,\n    ColGroupDef,\n    Component,\n    Events,\n    IColumnToolPanel,\n    IToolPanelComp,\n    ToolPanelColumnCompParams,\n    ModuleNames,\n    ModuleRegistry,\n    ColumnToolPanelState\n} from \"@ag-grid-community/core\";\nimport { PivotModePanel } from \"./pivotModePanel\";\nimport { PivotDropZonePanel, RowGroupDropZonePanel, ValuesDropZonePanel } from \"@ag-grid-enterprise/row-grouping\";\nimport { PrimaryColsPanel } from \"./primaryColsPanel\";\n\nexport class ColumnToolPanel extends Component implements IColumnToolPanel, IToolPanelComp {\n\n    private static TEMPLATE = `<div class=\"ag-column-panel\"></div>`;\n\n    private initialised = false;\n    private params: ToolPanelColumnCompParams;\n\n    private childDestroyFuncs: (() => void)[] = [];\n\n    private pivotModePanel: PivotModePanel;\n    private primaryColsPanel: PrimaryColsPanel;\n    private rowGroupDropZonePanel: RowGroupDropZonePanel;\n    private valuesDropZonePanel: ValuesDropZonePanel;\n    private pivotDropZonePanel: PivotDropZonePanel;\n\n    constructor() {\n        super(ColumnToolPanel.TEMPLATE);\n    }\n\n    // lazy initialise the panel\n    public setVisible(visible: boolean): void {\n        super.setDisplayed(visible);\n        if (visible && !this.initialised) {\n            this.init(this.params);\n        }\n    }\n\n    public init(params: ToolPanelColumnCompParams): void {\n        const defaultParams: Partial<ToolPanelColumnCompParams> = this.gridOptionsService.addGridCommonParams({\n            suppressColumnMove: false,\n            suppressColumnSelectAll: false,\n            suppressColumnFilter: false,\n            suppressColumnExpandAll: false,\n            contractColumnSelection: false,\n            suppressPivotMode: false,\n            suppressRowGroups: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressSyncLayoutWithGrid: false,\n        });\n        this.params = {\n            ...defaultParams,\n            ...params,\n        };\n\n        if (this.isRowGroupingModuleLoaded() && !this.params.suppressPivotMode) {\n            // DO NOT CHANGE TO createManagedBean\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n            this.appendChild(this.pivotModePanel);\n        }\n\n        // DO NOT CHANGE TO createManagedBean\n        this.primaryColsPanel = this.createBean(new PrimaryColsPanel());\n        this.childDestroyFuncs.push(() => this.destroyBean(this.primaryColsPanel));\n\n        this.primaryColsPanel.init(true, this.params, \"toolPanelUi\");\n        this.primaryColsPanel.addCssClass('ag-column-panel-column-select');\n        this.appendChild(this.primaryColsPanel);\n\n        if (this.isRowGroupingModuleLoaded()) {\n            if (!this.params.suppressRowGroups) {\n                // DO NOT CHANGE TO createManagedBean\n                this.rowGroupDropZonePanel = this.createBean(new RowGroupDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.rowGroupDropZonePanel));\n                this.appendChild(this.rowGroupDropZonePanel);\n            }\n\n            if (!this.params.suppressValues) {\n                // DO NOT CHANGE TO createManagedBean\n                this.valuesDropZonePanel = this.createBean(new ValuesDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.valuesDropZonePanel));\n                this.appendChild(this.valuesDropZonePanel);\n            }\n\n            if (!this.params.suppressPivots) {\n                // DO NOT CHANGE TO createManagedBean\n                this.pivotDropZonePanel = this.createBean(new PivotDropZonePanel(false));\n                this.childDestroyFuncs.push(() => this.destroyBean(this.pivotDropZonePanel));\n                this.appendChild(this.pivotDropZonePanel);\n            }\n\n            this.setLastVisible();\n            const pivotModeListener = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => {\n                this.resetChildrenHeight();\n                this.setLastVisible();\n            });\n            this.childDestroyFuncs.push(() => pivotModeListener!());\n        }\n\n        this.initialised = true;\n    }\n\n    public setPivotModeSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.pivotModePanel) {\n            this.pivotModePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotModePanel = this.createBean(new PivotModePanel());\n\n            // ensure pivot mode panel is positioned at the top of the columns tool panel\n            this.getGui().insertBefore(this.pivotModePanel.getGui(), this.getGui().firstChild);\n            this.childDestroyFuncs.push(() => this.destroyBean(this.pivotModePanel));\n        }\n        this.setLastVisible();\n    }\n\n    public setRowGroupsSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.rowGroupDropZonePanel) {\n            this.rowGroupDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.rowGroupDropZonePanel = this.createManagedBean(new RowGroupDropZonePanel(false));\n            this.appendChild(this.rowGroupDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setValuesSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.valuesDropZonePanel) {\n            this.valuesDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.valuesDropZonePanel = this.createManagedBean(new ValuesDropZonePanel(false));\n            this.appendChild(this.valuesDropZonePanel);\n        }\n        this.setLastVisible();\n    }\n\n    public setPivotSectionVisible(visible: boolean): void {\n        if (!this.isRowGroupingModuleLoaded()) { return; }\n\n        if (this.pivotDropZonePanel) {\n            this.pivotDropZonePanel.setDisplayed(visible);\n        } else if (visible) {\n            this.pivotDropZonePanel = this.createManagedBean(new PivotDropZonePanel(false));\n            this.appendChild(this.pivotDropZonePanel);\n            this.pivotDropZonePanel.setDisplayed(visible);\n        }\n        this.setLastVisible();\n    }\n\n    private setResizers(): void {\n        [\n            this.primaryColsPanel,\n            this.rowGroupDropZonePanel,\n            this.valuesDropZonePanel,\n            this.pivotDropZonePanel\n        ].forEach(panel => {\n            if (!panel) { return; }\n            const eGui = panel.getGui();\n            panel.toggleResizable(!eGui.classList.contains('ag-last-column-drop') && !eGui.classList.contains('ag-hidden'));\n        });\n    }\n\n    private setLastVisible(): void {\n        const eGui = this.getGui();\n\n        const columnDrops: HTMLElement[] = Array.prototype.slice.call(eGui.querySelectorAll('.ag-column-drop'));\n\n        columnDrops.forEach(columnDrop => columnDrop.classList.remove('ag-last-column-drop'));\n\n        const columnDropEls = eGui.querySelectorAll('.ag-column-drop:not(.ag-hidden)');\n        const lastVisible = _.last(columnDropEls) as HTMLElement;\n\n        if (lastVisible) {\n            lastVisible.classList.add('ag-last-column-drop');\n        }\n\n        this.setResizers();\n    }\n\n    private resetChildrenHeight(): void {\n        const eGui = this.getGui();\n        const children = eGui.children;\n\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i] as HTMLElement;\n            child.style.removeProperty('height');\n            child.style.removeProperty('flex');\n        }\n    }\n\n    private isRowGroupingModuleLoaded(): boolean {\n        return ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Row Grouping', this.context.getGridId());\n    }\n\n    public expandColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.expandGroups(groupIds);\n    }\n\n    public collapseColumnGroups(groupIds?: string[]): void {\n        this.primaryColsPanel.collapseGroups(groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsPanel.setColumnLayout(colDefs);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsPanel.syncLayoutWithGrid();\n    }\n\n    public destroyChildren(): void {\n        this.childDestroyFuncs.forEach(func => func());\n        this.childDestroyFuncs.length = 0;\n        _.clearElement(this.getGui());\n    }\n\n    public refresh(params: ToolPanelColumnCompParams): boolean {\n        this.destroyChildren();\n        this.init(params);\n        return true;\n    }\n\n    public getState(): ColumnToolPanelState {\n        return {\n            expandedGroupIds: this.primaryColsPanel.getExpandedGroups()\n        };\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so this must be public.\n    public destroy(): void {\n        this.destroyChildren();\n        super.destroy();\n    }\n}\n", "import {\n    AgCheckbox,\n    Autowired,\n    ColumnModel,\n    Component,\n    Events,\n    GridApi,\n    PreConstruct,\n    RefSelector\n} from \"@ag-grid-community/core\";\n\nexport class PivotModePanel extends Component {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridApi') private api: GridApi;\n\n    @RefSelector('cbPivotMode') private cbPivotMode: AgCheckbox;\n\n    private createTemplate(): string {\n        return /* html */ `<div class=\"ag-pivot-mode-panel\">\n                <ag-toggle-button ref=\"cbPivotMode\" class=\"ag-pivot-mode-select\"></ag-toggle-button>\n            </div>`;\n    }\n\n    @PreConstruct\n    public init(): void {\n        this.setTemplate(this.createTemplate());\n\n        this.cbPivotMode.setValue(this.columnModel.isPivotMode());\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n\n        this.addManagedListener(this.cbPivotMode, Events.EVENT_FIELD_VALUE_CHANGED, this.onBtPivotMode.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onPivotModeChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n    }\n\n    private onBtPivotMode(): void {\n        const newValue = !!this.cbPivotMode.getValue();\n        if (newValue !== this.columnModel.isPivotMode()) {\n            this.gridOptionsService.updateGridOptions({ options: { pivotMode: newValue}, source: 'toolPanelUi' as any });\n            const { api } = this;\n            if (api) {\n                api.refreshHeader();\n            }\n        }\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotModeActive = this.columnModel.isPivotMode();\n        this.cbPivotMode.setValue(pivotModeActive);\n    }\n}\n", "import {\n    ColDef,\n    ColGroupDef,\n    Component,\n    ToolPanelColumnCompParams,\n    RefSelector,\n    IPrimaryColsPanel,\n    ColumnEventType,\n    PositionableFeature\n} from \"@ag-grid-community/core\";\nimport { PrimaryColsListPanel } from \"./primaryColsListPanel\";\nimport { PrimaryColsHeaderPanel } from \"./primaryColsHeaderPanel\";\n\nexport class PrimaryColsPanel extends Component implements IPrimaryColsPanel {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-column-select\">\n            <ag-primary-cols-header ref=\"primaryColsHeaderPanel\"></ag-primary-cols-header>\n            <ag-primary-cols-list ref=\"primaryColsListPanel\"></ag-primary-cols-list>\n        </div>`;\n\n    @RefSelector('primaryColsHeaderPanel') private readonly primaryColsHeaderPanel: PrimaryColsHeaderPanel;\n    @RefSelector('primaryColsListPanel') private readonly primaryColsListPanel: PrimaryColsListPanel;\n\n    private allowDragging: boolean;\n    private params: ToolPanelColumnCompParams;\n    private eventType: ColumnEventType;\n    private positionableFeature: PositionableFeature;\n\n    constructor() {\n        super(PrimaryColsPanel.TEMPLATE);\n    }\n\n    // we allow dragging in the toolPanel, but not when this component appears in the column menu\n    public init(\n        allowDragging: boolean,\n        params: ToolPanelColumnCompParams,\n        eventType: ColumnEventType\n    ): void {\n        this.allowDragging = allowDragging;\n        this.params = params;\n        this.eventType = eventType;\n\n        this.primaryColsHeaderPanel.init(this.params);\n\n        const hideFilter = this.params.suppressColumnFilter;\n        const hideSelect = this.params.suppressColumnSelectAll;\n        const hideExpand = this.params.suppressColumnExpandAll;\n\n        if (hideExpand && hideFilter && hideSelect) {\n            this.primaryColsHeaderPanel.setDisplayed(false);\n        }\n\n        this.addManagedListener(this.primaryColsListPanel, 'groupExpanded', this.onGroupExpanded.bind(this));\n        this.addManagedListener(this.primaryColsListPanel, 'selectionChanged', this.onSelectionChange.bind(this));\n\n        this.primaryColsListPanel.init(this.params, this.allowDragging, this.eventType);\n\n        this.addManagedListener(this.primaryColsHeaderPanel, 'expandAll', this.onExpandAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'collapseAll', this.onCollapseAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'selectAll', this.onSelectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'unselectAll', this.onUnselectAll.bind(this));\n        this.addManagedListener(this.primaryColsHeaderPanel, 'filterChanged', this.onFilterChanged.bind(this));\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), { minHeight: 100 });\n        this.createManagedBean(this.positionableFeature);\n    }\n\n    public toggleResizable(resizable: boolean) {\n        this.positionableFeature.setResizable(resizable ? { bottom: true } : false);\n    }\n\n    public onExpandAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(true);\n    }\n\n    public onCollapseAll(): void {\n        this.primaryColsListPanel.doSetExpandedAll(false);\n    }\n\n    public expandGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(true, groupIds);\n    }\n\n    public collapseGroups(groupIds?: string[]): void {\n        this.primaryColsListPanel.setGroupsExpanded(false, groupIds);\n    }\n\n    public setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void {\n        this.primaryColsListPanel.setColumnLayout(colDefs);\n    }\n\n    private onFilterChanged(event: any): void {\n        this.primaryColsListPanel.setFilterText(event.filterText);\n    }\n\n    public syncLayoutWithGrid(): void {\n        this.primaryColsListPanel.onColumnsChanged();\n    }\n\n    private onSelectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(true);\n    }\n\n    private onUnselectAll(): void {\n        this.primaryColsListPanel.doSetSelectedAll(false);\n    }\n\n    private onGroupExpanded(event: any): void {\n        this.primaryColsHeaderPanel.setExpandState(event.state);\n        this.params.onStateUpdated();\n    }\n\n    private onSelectionChange(event: any): void {\n        this.primaryColsHeaderPanel.setSelectionState(event.state);\n    }\n\n    public getExpandedGroups(): string[] {\n        return this.primaryColsListPanel.getExpandedGroups();\n    }\n}\n", "import { ColumnModelItem } from \"./columnModelItem\";\nimport {\n    ColumnModel,\n    Events,\n    ColumnPivotChangeRequestEvent,\n    GridOptionsService,\n    ColumnEventType,\n    Bean,\n    IAggFuncService,\n    Autowired,\n    Column,\n    EventService,\n    ColumnState,\n    _,\n    WithoutGridCommon,\n    IAggFunc\n} from \"@ag-grid-community/core\";\n\n@Bean('modelItemUtils')\nexport class ModelItemUtils {\n\n    @Autowired('aggFuncService') aggFuncService: IAggFuncService;\n    @Autowired('columnModel') columnModel: ColumnModel;\n    @Autowired('gridOptionsService') private gridOptionsService: GridOptionsService;\n    @Autowired('eventService') private eventService: EventService;\n\n    public selectAllChildren(colTree: ColumnModelItem[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        const cols = this.extractAllLeafColumns(colTree);\n        this.setAllColumns(cols, selectAllChecked, eventType);\n    }\n\n    public setColumn(col: Column, selectAllChecked: boolean, eventType: ColumnEventType): void {\n        this.setAllColumns([col], selectAllChecked, eventType);\n    }\n\n    public setAllColumns(cols: Column[], selectAllChecked: boolean, eventType: ColumnEventType): void {\n        if (this.columnModel.isPivotMode()) {\n            this.setAllPivot(cols, selectAllChecked, eventType);\n        } else {\n            this.setAllVisible(cols, selectAllChecked, eventType);\n        }\n    }\n\n    private extractAllLeafColumns(allItems: ColumnModelItem[]): Column[] {\n\n        const res: Column[] = [];\n\n        const recursiveFunc = (items: ColumnModelItem[]) => {\n            items.forEach(item => {\n                if (!item.isPassesFilter()) { return; }\n                if (item.isGroup()) {\n                    recursiveFunc(item.getChildren());\n                } else {\n                    res.push(item.getColumn());\n                }\n            });\n        };\n\n        recursiveFunc(allItems);\n\n        return res;\n    }\n\n    private setAllVisible(columns: Column[], visible: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        columns.forEach(col => {\n            if (col.getColDef().lockVisible) { return; }\n            if (col.isVisible() != visible) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    hide: !visible\n                });\n            }\n        });\n\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({state: colStateItems}, eventType);\n        }\n    }\n\n    private setAllPivot(columns: Column[], value: boolean, eventType: ColumnEventType): void {\n        if (this.gridOptionsService.get('functionsPassive')) {\n            this.setAllPivotPassive(columns, value);\n        } else {\n            this.setAllPivotActive(columns, value, eventType);\n        }\n    }\n\n    private setAllPivotPassive(columns: Column[], value: boolean): void {\n\n        const copyOfPivotColumns = this.columnModel.getPivotColumns().slice();\n        const copyOfValueColumns = this.columnModel.getValueColumns().slice();\n        const copyOfRowGroupColumns = this.columnModel.getRowGroupColumns().slice();\n\n        let pivotChanged = false;\n        let valueChanged = false;\n        let rowGroupChanged = false;\n\n        const turnOnAction = (col: Column) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) { return; }\n\n            if (col.isAllowValue()) {\n                copyOfValueColumns.push(col);\n                valueChanged = true;\n            } else if (col.isAllowRowGroup()) {\n                copyOfRowGroupColumns.push(col);\n                pivotChanged = true;\n            } else if (col.isAllowPivot()) {\n                copyOfPivotColumns.push(col);\n                rowGroupChanged = true;\n            }\n        };\n\n        const turnOffAction = (col: Column) => {\n            if (!col.isAnyFunctionActive()) { return; }\n\n            if (copyOfPivotColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfPivotColumns, col);\n                pivotChanged = true;\n            }\n            if (copyOfValueColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfValueColumns, col);\n                valueChanged = true;\n            }\n            if (copyOfRowGroupColumns.indexOf(col) >= 0) {\n                _.removeFromArray(copyOfRowGroupColumns, col);\n                rowGroupChanged = true;\n            }\n        };\n\n        const action = value ? turnOnAction : turnOffAction;\n\n        columns.forEach(action);\n\n        if (pivotChanged) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n                columns: copyOfPivotColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        if (rowGroupChanged) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        if (valueChanged) {\n            const event: WithoutGridCommon<ColumnPivotChangeRequestEvent> = {\n                type: Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n                columns: copyOfRowGroupColumns\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private setAllPivotActive(columns: Column[], value: boolean, eventType: ColumnEventType): void {\n        const colStateItems: ColumnState[] = [];\n\n        const turnOnAction = (col: Column) => {\n            // don't change any column that's already got a function active\n            if (col.isAnyFunctionActive()) { return; }\n\n            if (col.isAllowValue()) {\n                const aggFunc = typeof col.getAggFunc() === 'string'\n                    ? col.getAggFunc()\n                    : this.aggFuncService.getDefaultAggFunc(col);\n                colStateItems.push({\n                    colId: col.getId(),\n                    aggFunc: aggFunc\n                });\n            } else if (col.isAllowRowGroup()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    rowGroup: true\n                });\n            } else if (col.isAllowPivot()) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: true\n                });\n            }\n        };\n\n        const turnOffAction = (col: Column) => {\n            const isActive = col.isPivotActive() || col.isRowGroupActive() || col.isValueActive();\n            if (isActive) {\n                colStateItems.push({\n                    colId: col.getId(),\n                    pivot: false,\n                    rowGroup: false,\n                    aggFunc: null\n                });\n            }\n        };\n\n        const action = value ? turnOnAction : turnOffAction;\n\n        columns.forEach(action);\n\n        if (colStateItems.length > 0) {\n            this.columnModel.applyColumnState({state: colStateItems}, eventType);\n        }\n    }\n\n    public updateColumns(params: {\n        columns: Column[];\n        visibleState?: { [key: string]: boolean };\n        pivotState?: { [key: string]: {\n            pivot?: boolean;\n            rowGroup?: boolean;\n            aggFunc?: string | IAggFunc | null;\n        } };\n        eventType: ColumnEventType;\n    }): void {\n        const { columns, visibleState, pivotState, eventType } = params;\n        const state: ColumnState[] = columns.map(column => {\n            const colId = column.getColId();\n            if (this.columnModel.isPivotMode()) {\n                const pivotStateForColumn = pivotState?.[colId];\n                return {\n                    colId,\n                    pivot: pivotStateForColumn?.pivot,\n                    rowGroup: pivotStateForColumn?.rowGroup,\n                    aggFunc: pivotStateForColumn?.aggFunc,\n                };\n            } else {\n                return {\n                    colId,\n                    hide: !visibleState?.[colId]\n                }\n            }\n        });\n        this.columnModel.applyColumnState({ state }, eventType);\n    }\n\n    public createPivotState(column: Column): {\n        pivot?: boolean;\n        rowGroup?: boolean;\n        aggFunc?: string | IAggFunc | null;\n    } {\n        return {\n            pivot: column.isPivotActive(),\n            rowGroup: column.isRowGroupActive(),\n            aggFunc: column.isValueActive() ? column.getAggFunc() : undefined\n        }\n    }\n}", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';"],
  "mappings": "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",
  "names": ["ModuleNames", "_", "Autowired", "Component", "Events", "ProvidedColumnGroup", "VirtualList", "Autowired", "DragSourceType", "Events", "ProvidedColumnGroup", "PostConstruct", "_", "Autowired", "Column", "Component", "Events", "KeyCode", "PostConstruct", "RefSelector", "Autowired", "Column", "Component", "PostConstruct", "ProvidedColumnGroup", "_", "Component", "Column", "ProvidedColumnGroup", "_", "Autowired", "PostConstruct", "Component", "_", "Events", "KeyCode", "Column", "Autowired", "RefSelector", "PostConstruct", "DragSourceType", "Events", "ProvidedColumnGroup", "Autowired", "PostConstruct", "_", "Autowired", "Column", "Component", "CssClassApplier", "DragAndDropService", "DragSourceType", "Events", "KeyCode", "PostConstruct", "RefSelector", "Component", "_", "Events", "Column", "CssClassApplier", "KeyCode", "DragSourceType", "DragAndDropService", "Autowired", "RefSelector", "PostConstruct", "Component", "Events", "VirtualList", "_", "ProvidedColumnGroup", "Autowired", "_", "Component", "Events", "Autowired", "Component", "Events", "RefSelector", "Component", "Events", "Autowired", "RefSelector", "Component", "RefSelector", "Component", "RefSelector", "Component", "Events", "_", "Events", "Autowired", "_", "_", "Events", "Autowired", "ModuleNames"]
}
