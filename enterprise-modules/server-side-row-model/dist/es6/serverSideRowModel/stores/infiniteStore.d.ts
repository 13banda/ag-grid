import { BeanStub, IServerSideStore, NumberSequence, RowBounds, RowNode, RowRenderer, ServerSideTransaction, ServerSideTransactionResult, LoadSuccessParams, ServerSideStoreParams, RefreshSortParams } from "@ag-grid-community/core";
import { SSRMParams } from "../serverSideRowModel";
import { CacheBlock } from "../blocks/cacheBlock";
export declare class InfiniteStore extends BeanStub implements IServerSideStore {
    private static MAX_EMPTY_BLOCKS_TO_KEEP;
    private static INITIAL_ROW_COUNT;
    private static OVERFLOW_SIZE;
    protected rowRenderer: RowRenderer;
    private gridOptionsWrapper;
    private rowNodeBlockLoader;
    private cacheUtils;
    private columnController;
    private readonly ssrmParams;
    private readonly storeParams;
    private readonly parentRowNode;
    private readonly blocks;
    private readonly blockHeights;
    private defaultRowHeight;
    private logger;
    private blockCount;
    private rowCount;
    private lastRowIndexKnown;
    private displayIndexStart;
    private displayIndexEnd;
    private cacheTopPixel;
    private cacheHeightPixels;
    private info;
    constructor(ssrmParams: SSRMParams, storeParams: ServerSideStoreParams, parentRowNode: RowNode);
    private postConstruct;
    private destroyAllBlocks;
    private setBeans;
    getRowCount(): number;
    isLastRowIndexKnown(): boolean;
    onBlockLoaded(block: CacheBlock, params: LoadSuccessParams): void;
    private purgeBlocksIfNeeded;
    private isBlockCurrentlyDisplayed;
    private checkRowCount;
    forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence?: NumberSequence): void;
    getBlocksInOrder(): CacheBlock[];
    private destroyBlock;
    private fireCacheUpdatedEvent;
    private destroyAllBlocksPastVirtualRowCount;
    purgeStore(suppressEvent?: boolean): void;
    getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[];
    private findBlockAndExecute;
    getRowBounds(index: number): RowBounds;
    getRowIndexAtPixel(pixel: number): number;
    clearDisplayIndexes(): void;
    setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: {
        value: number;
    }): void;
    getRowUsingDisplayIndex(displayRowIndex: number, dontCreateBlock?: boolean): RowNode | null;
    getTopLevelRowDisplayedIndex(topLevelIndex: number): number;
    private createBlock;
    getDisplayIndexEnd(): number | undefined;
    isDisplayIndexInStore(displayIndex: number): boolean;
    applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult;
    getChildStore(keys: string[]): IServerSideStore | null;
    isPixelInRange(pixel: number): boolean;
    refreshAfterFilter(): void;
    refreshAfterSort(params: RefreshSortParams): void;
}
