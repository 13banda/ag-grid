{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/sideBarModule.ts", "../../src/sideBar/horizontalResizeComp.ts", "../../src/sideBar/sideBarComp.ts", "../../src/sideBar/sideBarButtonsComp.ts", "../../src/sideBar/sideBarButtonComp.ts", "../../src/sideBar/sideBarDefParser.ts", "../../src/sideBar/toolPanelWrapper.ts", "../../src/sideBar/common/toolPanelColDefService.ts", "../../src/version.ts", "../../src/sideBar/sideBarService.ts"],
  "sourcesContent": ["export { SideBarModule } from \"./sideBarModule\";\nexport { ToolPanelColDefService } from \"./sideBar/common/toolPanelColDefService\";\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { HorizontalResizeComp } from \"./sideBar/horizontalResizeComp\";\nimport { SideBarComp } from \"./sideBar/sideBarComp\";\nimport { SideBarButtonsComp } from \"./sideBar/sideBarButtonsComp\";\nimport { ToolPanelColDefService } from \"./sideBar/common/toolPanelColDefService\";\nimport { VERSION } from \"./version\";\nimport { SideBarService } from \"./sideBar/sideBarService\";\n\nexport const SideBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.SideBarModule,\n    beans: [ToolPanelColDefService, SideBarService],\n    agStackComponents: [\n        { componentName: 'AgHorizontalResize', componentClass: HorizontalResizeComp },\n        { componentName: 'AgSideBar', componentClass: SideBarComp },\n        { componentName: 'AgSideBarButtons', componentClass: SideBarButtonsComp },\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Component,\n    HorizontalResizeService,\n    PostConstruct,\n    ToolPanelSizeChangedEvent,\n    WithoutGridCommon,\n    Events\n} from \"@ag-grid-community/core\";\n\nexport class HorizontalResizeComp extends Component {\n\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n\n    private startingWidth: number;\n    private elementToResize: HTMLElement;\n    private inverted: boolean;\n    private minWidth: number = 100;\n    private maxWidth: number | null = null;\n\n    constructor() {\n        super(/* html */ `<div class=\"ag-tool-panel-horizontal-resize\"></div>`);\n    }\n\n    public setElementToResize(elementToResize: HTMLElement): void {\n        this.elementToResize = elementToResize;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.getGui(),\n            dragStartPixels: 1,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this),\n            onResizeEnd: this.onResizeEnd.bind(this)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n        this.setInverted(this.gridOptionsService.get('enableRtl'));\n    }\n\n    private dispatchResizeEvent(start: boolean, end: boolean, width: number) {\n        const event: WithoutGridCommon<ToolPanelSizeChangedEvent> = {\n            type: Events.EVENT_TOOL_PANEL_SIZE_CHANGED,\n            width: width,\n            started: start,\n            ended: end,\n        };\n        this.eventService.dispatchEvent(event)\n    }\n\n    private onResizeStart(): void {\n        this.startingWidth = this.elementToResize.offsetWidth;        \n        this.dispatchResizeEvent(true, false, this.startingWidth);\n    }\n\n    private onResizeEnd(delta: number): void {\n        return this.onResizing(delta, true);\n    }\n\n    private onResizing(delta: number, isEnd: boolean = false): void {\n        const direction = this.inverted ? -1 : 1;\n        let newWidth = Math.max(this.minWidth, Math.floor(this.startingWidth - (delta * direction)));\n\n        if (this.maxWidth != null) {\n            newWidth = Math.min(this.maxWidth, newWidth);\n        }\n        this.elementToResize.style.width = `${newWidth}px`;\n        this.dispatchResizeEvent(false, isEnd, newWidth);        \n    }\n\n    public setInverted(inverted: boolean) {\n        this.inverted = inverted;\n    }\n\n    public setMaxWidth(value: number | null) {\n        this.maxWidth = value;\n    }\n\n    public setMinWidth(value: number | null) {\n        if (value != null) {\n            this.minWidth = value;\n        } else {\n            this.minWidth = 100;\n        }\n    }\n}\n", "import {\n    _,\n    Component,\n    Events,\n    ISideBar,\n    IToolPanel,\n    ModuleNames,\n    ModuleRegistry,\n    PostConstruct,\n    RefSelector,\n    SideBarDef,\n    ToolPanelDef,\n    ToolPanelVisibleChangedEvent,\n    Autowired,\n    ManagedFocusFeature,\n    FocusService,\n    KeyCode,\n    WithoutGridCommon,\n    FilterManager,\n    SideBarState,\n    IToolPanelParams\n} from \"@ag-grid-community/core\";\nimport { SideBarButtonClickedEvent, SideBarButtonsComp } from \"./sideBarButtonsComp\";\nimport { SideBarDefParser } from \"./sideBarDefParser\";\nimport { SideBarService } from \"./sideBarService\";\nimport { ToolPanelWrapper } from \"./toolPanelWrapper\";\n\nexport class SideBarComp extends Component implements ISideBar {\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('sideBarService') private sideBarService: SideBarService;\n    @RefSelector('sideBarButtons') private sideBarButtonsComp: SideBarButtonsComp;\n\n    private toolPanelWrappers: ToolPanelWrapper[] = [];\n    private sideBar: SideBarDef | undefined;\n    private position: 'left' | 'right';\n\n    private static readonly TEMPLATE = /* html */\n        `<div class=\"ag-side-bar ag-unselectable\">\n            <ag-side-bar-buttons ref=\"sideBarButtons\"></ag-side-bar-buttons>\n        </div>`;\n\n    constructor() {\n        super(SideBarComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.sideBarButtonsComp.addEventListener(SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED, this.onToolPanelButtonClicked.bind(this));\n        const { sideBar: sideBarState } = this.gridOptionsService.get('initialState') ?? {};\n        this.setSideBarDef({\n            sideBarDef: SideBarDefParser.parse(this.gridOptionsService.get('sideBar')),\n            sideBarState\n        });\n\n        this.addManagedPropertyListener('sideBar', this.onSideBarUpdated.bind(this));\n\n        this.sideBarService.registerSideBarComp(this);\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) { return; }\n\n        const { focusService, sideBarButtonsComp } = this;\n        const eGui = this.getGui();\n        const sideBarGui = sideBarButtonsComp.getGui();\n        const eDocument = this.gridOptionsService.getDocument();\n        const activeElement = eDocument.activeElement as HTMLElement;\n        const openPanel = eGui.querySelector('.ag-tool-panel-wrapper:not(.ag-hidden)') as HTMLElement;\n        const target = e.target as HTMLElement;\n\n        if (!openPanel) { return; }\n\n        if (sideBarGui.contains(activeElement)) {\n            if (focusService.focusInto(openPanel, e.shiftKey)) {\n                e.preventDefault();\n            }\n            return;\n        }\n\n        // only handle backwards focus to target the sideBar buttons\n        if (!e.shiftKey) { return; }\n\n        let nextEl: HTMLElement | null = null;\n\n\n        if (openPanel.contains(activeElement)) {\n            nextEl = this.focusService.findNextFocusableElement(openPanel, undefined, true);\n        } else if (focusService.isTargetUnderManagedComponent(openPanel, target) && e.shiftKey) {\n            nextEl = this.focusService.findFocusableElementBeforeTabGuard(openPanel, target);\n        }\n\n        if (!nextEl) {\n            nextEl = sideBarGui.querySelector('.ag-selected button') as HTMLElement;\n        }\n\n        if (nextEl && nextEl !== e.target) {\n            e.preventDefault();\n            nextEl.focus();\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        if (!this.sideBarButtonsComp.getGui().contains(eDocument.activeElement)) { return; }\n        const sideBarGui = this.sideBarButtonsComp.getGui();\n        const buttons: HTMLElement[] = Array.prototype.slice.call(sideBarGui.querySelectorAll('.ag-side-button'));\n        const currentButton = eDocument.activeElement;\n        const currentPos = buttons.findIndex(button => button.contains(currentButton));\n        let nextPos: number | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n            case KeyCode.UP:\n                nextPos = Math.max(0, currentPos - 1);\n                break;\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n                nextPos = Math.min(currentPos + 1, buttons.length - 1);\n                break;\n        }\n\n        if (nextPos === null) { return; }\n\n        const innerButton = buttons[nextPos].querySelector('button');\n\n        if (innerButton) {\n            innerButton.focus();\n            e.preventDefault();\n        }\n    }\n\n    private onToolPanelButtonClicked(event: SideBarButtonClickedEvent): void {\n        const id = event.toolPanelId;\n        const openedItem = this.openedItem();\n\n        // if item was already open, we close it\n        if (openedItem === id) {\n            this.openToolPanel(undefined, 'sideBarButtonClicked'); // passing undefined closes\n        } else {\n            this.openToolPanel(id, 'sideBarButtonClicked');\n        }\n    }\n\n    private clearDownUi(): void {\n        this.sideBarButtonsComp.clearButtons();\n        this.destroyToolPanelWrappers();\n    }\n\n    private setSideBarDef({\n        sideBarDef, sideBarState, existingToolPanelWrappers\n    }: {\n        sideBarDef?: SideBarDef, sideBarState?: SideBarState, existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper }\n    }): void {\n        // initially hide side bar\n        this.setDisplayed(false);\n\n        this.sideBar = sideBarDef;\n\n        if (!!this.sideBar && !!this.sideBar.toolPanels) {\n            const toolPanelDefs = this.sideBar.toolPanels as ToolPanelDef[];\n            this.createToolPanelsAndSideButtons(toolPanelDefs, sideBarState, existingToolPanelWrappers);\n            if (!this.toolPanelWrappers.length) { return; }\n\n            const shouldDisplaySideBar = sideBarState ? sideBarState.visible : !this.sideBar.hiddenByDefault;\n            this.setDisplayed(shouldDisplaySideBar);\n\n            this.setSideBarPosition(sideBarState ? sideBarState.position : this.sideBar.position);\n\n            if (shouldDisplaySideBar) {\n                if (sideBarState) {\n                    const { openToolPanel } = sideBarState;\n                    if (openToolPanel) {\n                        this.openToolPanel(openToolPanel, 'sideBarInitializing');\n                    }\n                } else {\n                    this.openToolPanel(this.sideBar.defaultToolPanel, 'sideBarInitializing');\n                }\n            }\n        }\n    }\n\n    public getDef() {\n        return this.sideBar;\n    }\n\n    public setSideBarPosition(position?: 'left' | 'right'): this {\n        if (!position) { position = 'right'; }\n\n        this.position = position;\n\n        const isLeft =  position === 'left';\n        const resizerSide = isLeft ? 'right' : 'left';\n\n        this.addOrRemoveCssClass('ag-side-bar-left', isLeft);\n        this.addOrRemoveCssClass('ag-side-bar-right', !isLeft);\n\n        this.toolPanelWrappers.forEach(wrapper => {\n            wrapper.setResizerSizerSide(resizerSide);\n        });\n\n        this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED });\n\n        return this;\n    }\n\n    public setDisplayed(displayed: boolean, options?: { skipAriaHidden?: boolean | undefined; } | undefined): void {\n        super.setDisplayed(displayed, options);\n        this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED });\n    }\n\n    public getState(): SideBarState {\n        const toolPanels: { [id: string]: any } = {};\n        this.toolPanelWrappers.forEach(wrapper => {\n            toolPanels[wrapper.getToolPanelId()] = wrapper.getToolPanelInstance()?.getState?.();\n        });\n        return {\n            visible: this.isDisplayed(),\n            position: this.position,\n            openToolPanel: this.openedItem(),\n            toolPanels\n        };\n    }\n\n    private createToolPanelsAndSideButtons(\n        defs: ToolPanelDef[],\n        sideBarState?: SideBarState,\n        existingToolPanelWrappers?: { [id: string]: ToolPanelWrapper }\n    ): void {\n        for (const def of defs) {\n            this.createToolPanelAndSideButton(def, sideBarState?.toolPanels?.[def.id], existingToolPanelWrappers?.[def.id]);\n        }\n    }\n\n    private validateDef(def: ToolPanelDef): boolean {\n        if (def.id == null) {\n            console.warn(`AG Grid: please review all your toolPanel components, it seems like at least one of them doesn't have an id`);\n            return false;\n        }\n\n        // helpers, in case user doesn't have the right module loaded\n        if (def.toolPanel === 'agColumnsToolPanel') {\n            const moduleMissing =\n                !ModuleRegistry.__assertRegistered(ModuleNames.ColumnsToolPanelModule, 'Column Tool Panel', this.context.getGridId());\n            if (moduleMissing) { return false; }\n        }\n\n        if (def.toolPanel === 'agFiltersToolPanel') {\n            const moduleMissing =\n                !ModuleRegistry.__assertRegistered(ModuleNames.FiltersToolPanelModule, 'Filters Tool Panel', this.context.getGridId());\n            if (moduleMissing) { return false; }\n            if (this.filterManager.isAdvancedFilterEnabled()) {\n                _.warnOnce('Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.');                \n                return false;\n            }\n        }\n\n        return true;\n\n    }\n\n    private createToolPanelAndSideButton(def: ToolPanelDef, initialState?: any, existingToolPanelWrapper?: ToolPanelWrapper): void {\n        if (!this.validateDef(def)) { return; }\n        const button = this.sideBarButtonsComp.addButtonComp(def);\n        let wrapper: ToolPanelWrapper;\n        if (existingToolPanelWrapper) {\n            wrapper = existingToolPanelWrapper;\n        } else {\n            wrapper = this.getContext().createBean(new ToolPanelWrapper());\n\n            wrapper.setToolPanelDef(def, {\n                initialState,\n                onStateUpdated: () => this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED })\n            });\n        }\n        wrapper.setDisplayed(false);\n\n        const wrapperGui = wrapper.getGui();\n        this.appendChild(wrapperGui);\n\n        this.toolPanelWrappers.push(wrapper);\n\n        _.setAriaControls(button.getButtonElement(), wrapperGui);\n    }\n\n    public refresh(): void {\n        this.toolPanelWrappers.forEach(wrapper => wrapper.refresh());\n    }\n\n    public openToolPanel(key: string | undefined, source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'): void {\n        const currentlyOpenedKey = this.openedItem();\n        if (currentlyOpenedKey === key) { return; }\n\n        this.toolPanelWrappers.forEach(wrapper => {\n            const show = key === wrapper.getToolPanelId();\n            wrapper.setDisplayed(show);\n        });\n\n        const newlyOpenedKey = this.openedItem();\n        const openToolPanelChanged = currentlyOpenedKey !== newlyOpenedKey;\n        if (openToolPanelChanged) {\n            this.sideBarButtonsComp.setActiveButton(key);\n            this.raiseToolPanelVisibleEvent(key, currentlyOpenedKey ?? undefined, source);\n        }\n    }\n\n    public getToolPanelInstance(key: string): IToolPanel | undefined {\n        const toolPanelWrapper = this.toolPanelWrappers.filter(toolPanel => toolPanel.getToolPanelId() === key)[0];\n\n        if (!toolPanelWrapper) {\n            console.warn(`AG Grid: unable to lookup Tool Panel as invalid key supplied: ${key}`);\n            return;\n        }\n\n        return toolPanelWrapper.getToolPanelInstance();\n    }\n\n    private raiseToolPanelVisibleEvent(key: string | undefined, previousKey: string | undefined, source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api'): void {\n        const switchingToolPanel = !!key && !!previousKey;\n        if (previousKey) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key: previousKey,\n                visible: false,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n        if (key) {\n            const event: WithoutGridCommon<ToolPanelVisibleChangedEvent> = {\n                type: Events.EVENT_TOOL_PANEL_VISIBLE_CHANGED,\n                source,\n                key,\n                visible: true,\n                switchingToolPanel,\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public close(source: 'sideBarButtonClicked' | 'sideBarInitializing' | 'api' = 'api'): void {\n        this.openToolPanel(undefined, source);\n    }\n\n    public isToolPanelShowing(): boolean {\n        return !!this.openedItem();\n    }\n\n    public openedItem(): string | null {\n        let activeToolPanel: string | null = null;\n        this.toolPanelWrappers.forEach(wrapper => {\n            if (wrapper.isDisplayed()) {\n                activeToolPanel = wrapper.getToolPanelId();\n            }\n        });\n        return activeToolPanel;\n    }\n\n    private onSideBarUpdated(): void {\n        const sideBarDef = SideBarDefParser.parse(this.gridOptionsService.get('sideBar'));\n\n        let existingToolPanelWrappers: { [id: string]: ToolPanelWrapper } = {};\n        if (sideBarDef && this.sideBar) {\n            sideBarDef.toolPanels?.forEach((toolPanelDef: ToolPanelDef) => {\n                const { id } = toolPanelDef;\n                if (!id) { return; }\n                const existingToolPanelDef = this.sideBar!.toolPanels?.find(\n                    (toolPanelDefToCheck: ToolPanelDef) => toolPanelDefToCheck.id === id\n                ) as ToolPanelDef | undefined;\n                if (!existingToolPanelDef || toolPanelDef.toolPanel !== existingToolPanelDef.toolPanel) {\n                    return;\n                }\n                const toolPanelWrapper = this.toolPanelWrappers.find(toolPanel => toolPanel.getToolPanelId() === id);\n                if (!toolPanelWrapper) { return; }\n                const params = this.gridOptionsService.addGridCommonParams<IToolPanelParams>({\n                    ...(toolPanelDef.toolPanelParams ?? {}),\n                    onStateUpdated: () => this.eventService.dispatchEvent({ type: Events.EVENT_SIDE_BAR_UPDATED })\n                });\n                const hasRefreshed = toolPanelWrapper.getToolPanelInstance().refresh(params);\n                if (hasRefreshed !== true) { return; }\n                this.toolPanelWrappers = this.toolPanelWrappers.filter(toolPanel => toolPanel !== toolPanelWrapper);\n                _.removeFromParent(toolPanelWrapper.getGui());\n                existingToolPanelWrappers[id] = toolPanelWrapper;\n            });\n        }\n\n        this.clearDownUi();\n\n        // don't re-assign initial state\n        this.setSideBarDef({ sideBarDef, existingToolPanelWrappers });\n    }\n\n    private destroyToolPanelWrappers(): void {\n        this.toolPanelWrappers.forEach(wrapper => {\n            _.removeFromParent(wrapper.getGui());\n            this.destroyBean(wrapper);\n        });\n        this.toolPanelWrappers.length = 0;\n    }\n\n    protected destroy(): void {\n        this.destroyToolPanelWrappers();\n        super.destroy();\n    }\n}\n", "import {\n    Autowired,\n    AgEvent,\n    Component,\n    PostConstruct,\n    ToolPanelDef,\n    PreDestroy,\n    FocusService,\n    _,\n    KeyCode,\n    ColumnModel\n} from \"@ag-grid-community/core\";\n\nimport { SideBarButtonComp } from \"./sideBarButtonComp\";\n\nexport interface SideBarButtonClickedEvent extends AgEvent {\n    toolPanelId: string;\n}\n\nexport class SideBarButtonsComp extends Component {\n\n    public static EVENT_SIDE_BAR_BUTTON_CLICKED = 'sideBarButtonClicked';\n    private static readonly TEMPLATE: string = /* html */ `<div class=\"ag-side-buttons\" role=\"tablist\"></div>`;\n    private buttonComps: SideBarButtonComp[] = [];\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    constructor() {\n        super(SideBarButtonsComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.getFocusableElement(), 'keydown', this.handleKeyDown.bind(this));\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key !== KeyCode.TAB || !e.shiftKey) { return; }\n\n        const lastColumn = _.last(this.columnModel.getAllDisplayedColumns());\n\n        if (this.focusService.focusGridView(lastColumn, true)) {\n            e.preventDefault();\n        }\n    }\n\n    public setActiveButton(id: string | undefined): void {\n        this.buttonComps.forEach(comp => {\n            comp.setSelected(id === comp.getToolPanelId());\n        });\n    }\n\n    public addButtonComp(def: ToolPanelDef): SideBarButtonComp {\n        const buttonComp = this.createBean(new SideBarButtonComp(def));\n        this.buttonComps.push(buttonComp);\n        this.appendChild(buttonComp);\n\n        buttonComp.addEventListener(SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED, () => {\n            this.dispatchEvent({\n                type: SideBarButtonsComp.EVENT_SIDE_BAR_BUTTON_CLICKED,\n                toolPanelId: def.id\n            });\n        });\n\n        return buttonComp;\n    }\n\n    @PreDestroy\n    public clearButtons(): void {\n        this.buttonComps = this.destroyBeans(this.buttonComps);\n        _.clearElement(this.getGui());\n    }\n\n}\n", "import {\n    Component,\n    PostConstruct,\n    RefSelector,\n    ToolPanelDef,\n    _,\n} from \"@ag-grid-community/core\";\n\nexport class SideBarButtonComp extends Component {\n\n    public static EVENT_TOGGLE_BUTTON_CLICKED = 'toggleButtonClicked';\n\n    @RefSelector('eToggleButton') private readonly eToggleButton: HTMLButtonElement;\n    @RefSelector('eIconWrapper') private readonly eIconWrapper: HTMLElement;\n    @RefSelector('eLabel') private readonly eLabel: HTMLElement;\n\n    private readonly toolPanelDef: ToolPanelDef;\n\n    constructor(toolPanelDef: ToolPanelDef) {\n        super();\n        this.toolPanelDef = toolPanelDef;\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelDef.id;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const template = this.createTemplate();\n        this.setTemplate(template);\n        this.setLabel();\n        this.setIcon();\n        this.addManagedListener(this.eToggleButton, 'click', this.onButtonPressed.bind(this));\n        this.eToggleButton.setAttribute('id', `ag-${this.getCompId()}-button`);\n    }\n\n    private createTemplate(): string {\n        const res = /* html */\n            `<div class=\"ag-side-button\" role=\"presentation\">\n                <button type=\"button\" ref=\"eToggleButton\" tabindex=\"-1\" role=\"tab\" aria-expanded=\"false\" class=\"ag-button ag-side-button-button\">\n                    <div ref=\"eIconWrapper\" class=\"ag-side-button-icon-wrapper\" aria-hidden=\"true\"></div>\n                    <span ref =\"eLabel\" class=\"ag-side-button-label\"></span>\n                </button>\n            </div>`;\n        return res;\n    }\n    \n    private setLabel(): void {\n        const translate = this.localeService.getLocaleTextFunc();\n        const def = this.toolPanelDef;\n        const label = translate(def.labelKey, def.labelDefault);\n\n        this.eLabel.innerText = label;\n    }\n\n    private setIcon(): void {\n        this.eIconWrapper.insertAdjacentElement('afterbegin', _.createIconNoSpan(this.toolPanelDef.iconKey, this.gridOptionsService)!);\n    }\n\n    private onButtonPressed(): void {\n        this.dispatchEvent({ type: SideBarButtonComp.EVENT_TOGGLE_BUTTON_CLICKED });\n    }\n\n    public setSelected(selected: boolean): void {\n        this.addOrRemoveCssClass('ag-selected', selected);\n        _.setAriaExpanded(this.eToggleButton, selected);\n    }\n\n    public getButtonElement(): Element {\n        return this.eToggleButton;\n    }\n}\n", "import { SideBarDef, ToolPanelDef } from \"@ag-grid-community/core\";\n\nexport class SideBarDefParser {\n    static readonly DEFAULT_COLUMN_COMP: ToolPanelDef = {\n        id: 'columns',\n        labelDefault: 'Columns',\n        labelKey: 'columns',\n        iconKey: 'columns',\n        toolPanel: 'agColumnsToolPanel',\n    };\n\n    static readonly DEFAULT_FILTER_COMP: ToolPanelDef = {\n        id: 'filters',\n        labelDefault: 'Filters',\n        labelKey: 'filters',\n        iconKey: 'filter',\n        toolPanel: 'agFiltersToolPanel',\n    };\n\n    static readonly DEFAULT_BY_KEY: { [p: string]: ToolPanelDef } = {\n        columns: SideBarDefParser.DEFAULT_COLUMN_COMP,\n        filters: SideBarDefParser.DEFAULT_FILTER_COMP\n    };\n\n    static parse(toParse: SideBarDef | string | string[] | boolean | null | undefined): SideBarDef | undefined {\n        if (!toParse) { return undefined; }\n        if (toParse === true) {\n            return {\n                toolPanels: [\n                    SideBarDefParser.DEFAULT_COLUMN_COMP,\n                    SideBarDefParser.DEFAULT_FILTER_COMP,\n                ],\n                defaultToolPanel: 'columns'\n            };\n        }\n\n        if (typeof toParse === 'string') { return SideBarDefParser.parse([toParse]); }\n\n        if (Array.isArray(toParse)) {\n            const comps: ToolPanelDef[] = [];\n            toParse.forEach(key => {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n\n                comps.push(lookupResult);\n            });\n\n            if (comps.length === 0) {\n                return undefined;\n            }\n\n            return {\n                toolPanels: comps,\n                defaultToolPanel: comps[0].id\n            };\n        }\n\n        const result: SideBarDef = {\n            toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),\n            defaultToolPanel: toParse.defaultToolPanel,\n            hiddenByDefault: toParse.hiddenByDefault,\n            position: toParse.position\n        };\n\n        return result;\n    }\n\n    static parseComponents(from?: (ToolPanelDef | string)[]): ToolPanelDef[] {\n        const result: ToolPanelDef[] = [];\n\n        if (!from) { return result; }\n\n        from.forEach((it: ToolPanelDef | string) => {\n            let toAdd: ToolPanelDef | null = null;\n            if (typeof it === 'string') {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${it} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n\n                toAdd = lookupResult;\n            } else {\n                toAdd = it;\n            }\n\n            result.push(toAdd);\n        });\n\n        return result;\n    }\n}", "import {\n    Autowired,\n    Component,\n    UserComponentFactory,\n    IToolPanelComp,\n    IToolPanelParams,\n    ToolPanelDef,\n    PostConstruct,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { HorizontalResizeComp } from \"./horizontalResizeComp\";\n\nexport class ToolPanelWrapper extends Component {\n\n    @Autowired(\"userComponentFactory\") private userComponentFactory: UserComponentFactory;\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-tool-panel-wrapper\" role=\"tabpanel\"/>`;\n\n    private toolPanelCompInstance: IToolPanelComp;\n    private toolPanelId: string;\n    private resizeBar: HorizontalResizeComp;\n    private width: number | undefined;\n    private params: IToolPanelParams;\n\n    constructor() {\n        super(ToolPanelWrapper.TEMPLATE);\n    }\n\n    @PostConstruct\n    private setupResize(): void {\n        const eGui = this.getGui();\n        const resizeBar = this.resizeBar = this.createManagedBean(new HorizontalResizeComp());\n\n        eGui.setAttribute('id', `ag-${this.getCompId()}`);\n\n        resizeBar.setElementToResize(eGui);\n        this.appendChild(resizeBar);\n    }\n\n    public getToolPanelId(): string {\n        return this.toolPanelId;\n    }\n\n    public setToolPanelDef(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): void {\n        const { id, minWidth, maxWidth, width } = toolPanelDef;\n\n        this.toolPanelId = id;\n        this.width = width;\n\n        const compDetails = this.userComponentFactory.getToolPanelCompDetails(toolPanelDef, params);\n        const componentPromise = compDetails.newAgStackInstance();\n\n        this.params = compDetails.params;\n\n        if (componentPromise == null) {\n            console.warn(`AG Grid: error processing tool panel component ${id}. You need to specify 'toolPanel'`);\n            return;\n        }\n        componentPromise.then(this.setToolPanelComponent.bind(this));\n\n        if (minWidth != null) {\n            this.resizeBar.setMinWidth(minWidth);\n        }\n\n        if (maxWidth != null) {\n            this.resizeBar.setMaxWidth(maxWidth);\n        }\n    }\n\n    private setToolPanelComponent(compInstance: IToolPanelComp): void {\n        this.toolPanelCompInstance = compInstance;\n\n        this.appendChild(compInstance.getGui());\n        this.addDestroyFunc(() => {\n            this.destroyBean(compInstance);\n        });\n\n        if (this.width) {\n            this.getGui().style.width = `${this.width}px`;\n        }\n    }\n\n    public getToolPanelInstance(): IToolPanelComp {\n        return this.toolPanelCompInstance;\n    }\n\n    public setResizerSizerSide(side: 'right' | 'left') {\n        const isRtl = this.gridOptionsService.get('enableRtl');\n        const isLeft = side === 'left';\n        const inverted = isRtl ? isLeft : !isLeft;\n\n        this.resizeBar.setInverted(inverted);\n    }\n\n    public refresh(): void {\n        this.toolPanelCompInstance.refresh(this.params);\n    }\n\n}\n", "import {\n    _,\n    AbstractColDef,\n    Autowired,\n    Bean,\n    BeanStub,\n    ColDef,\n    ColGroupDef,\n    Column,\n    ColumnModel,\n    ProvidedColumnGroup,\n    IProvidedColumn\n} from \"@ag-grid-community/core\";\n\n@Bean('toolPanelColDefService')\nexport class ToolPanelColDefService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public createColumnTree(colDefs: AbstractColDef[]): IProvidedColumn[] {\n        const invalidColIds: AbstractColDef[] = [];\n\n        const createDummyColGroup = (abstractColDef: AbstractColDef, depth: number): IProvidedColumn => {\n            if (this.isColGroupDef(abstractColDef)) {\n\n                // creating 'dummy' group which is not associated with grid column group\n                const groupDef = abstractColDef as ColGroupDef;\n                const groupId = (typeof groupDef.groupId !== 'undefined') ? groupDef.groupId : groupDef.headerName;\n                const group = new ProvidedColumnGroup(groupDef, groupId!, false, depth);\n                const children: IProvidedColumn[] = [];\n                groupDef.children.forEach(def => {\n                    const child = createDummyColGroup(def, depth + 1);\n                    // check column exists in case invalid colDef is supplied for primary column\n                    if (child) {\n                        children.push(child);\n                    }\n                });\n                group.setChildren(children);\n\n                return group;\n            } else {\n                const colDef = abstractColDef as ColDef;\n                const key = colDef.colId ? colDef.colId : colDef.field;\n                const column = this.columnModel.getPrimaryColumn(key!) as IProvidedColumn;\n\n                if (!column) {\n                    invalidColIds.push(colDef);\n                }\n\n                return column;\n            }\n        };\n\n        const mappedResults: IProvidedColumn[] = [];\n        colDefs.forEach(colDef => {\n            const result = createDummyColGroup(colDef, 0);\n            if (result) {\n                // only return correctly mapped colDef results\n                mappedResults.push(result);\n            }\n        });\n\n        if (invalidColIds.length > 0) {\n            console.warn('AG Grid: unable to find grid columns for the supplied colDef(s):', invalidColIds);\n        }\n\n        return mappedResults;\n    }\n\n    public syncLayoutWithGrid(syncLayoutCallback: (colDefs: AbstractColDef[]) => void): void {\n        // extract ordered list of leaf path trees (column group hierarchy for each individual leaf column)\n        const leafPathTrees: AbstractColDef[] = this.getLeafPathTrees();\n\n        // merge leaf path tree taking split column groups into account\n        const mergedColumnTrees = this.mergeLeafPathTrees(leafPathTrees);\n\n        // sync layout with merged column trees\n        syncLayoutCallback(mergedColumnTrees);\n    }\n\n    private getLeafPathTrees(): AbstractColDef[] {\n\n        // leaf tree paths are obtained by walking up the tree starting at a column until we reach the top level group.\n        const getLeafPathTree = (node: Column | ProvidedColumnGroup, childDef: AbstractColDef): AbstractColDef => {\n            let leafPathTree: AbstractColDef;\n\n            // build up tree in reverse order\n            if (node instanceof ProvidedColumnGroup) {\n                if (node.isPadding()) {\n                    // skip over padding groups\n                    leafPathTree = childDef;\n                } else {\n                    const groupDef = Object.assign({}, node.getColGroupDef());\n                    // ensure group contains groupId\n                    groupDef.groupId = node.getGroupId();\n                    groupDef.children = [childDef];\n                    leafPathTree = groupDef;\n                }\n            } else {\n                const colDef = Object.assign({}, node.getColDef());\n                // ensure col contains colId\n                colDef.colId = node.getColId();\n                leafPathTree = colDef;\n            }\n\n            // walk tree\n            const parent = node.getOriginalParent();\n            if (parent) {\n                // keep walking up the tree until we reach the root\n                return getLeafPathTree(parent, leafPathTree);\n            } else {\n                // we have reached the root - exit with resulting leaf path tree\n                return leafPathTree;\n            }\n        };\n\n        // obtain a sorted list of all grid columns\n        const allGridColumns = this.columnModel.getAllGridColumns();\n\n        // only primary columns and non row group columns should appear in the tool panel\n        const allPrimaryGridColumns = allGridColumns.filter(column => {\n            const colDef = column.getColDef();\n            return column.isPrimary() && !colDef.showRowGroup;\n        });\n\n        // construct a leaf path tree for each column\n        return allPrimaryGridColumns.map(col => getLeafPathTree(col, col.getColDef()));\n    }\n\n    private mergeLeafPathTrees(leafPathTrees: AbstractColDef[]) {\n        const matchingRootGroupIds = (pathA: AbstractColDef, pathB: AbstractColDef) => {\n            const bothPathsAreGroups = this.isColGroupDef(pathA) && this.isColGroupDef(pathB);\n            return bothPathsAreGroups && this.getId(pathA) === this.getId(pathB);\n        };\n\n        const mergeTrees = (treeA: AbstractColDef, treeB: AbstractColDef): AbstractColDef => {\n            if (!this.isColGroupDef(treeB)) { return treeA; }\n\n            const mergeResult = treeA;\n            const groupToMerge = treeB as ColGroupDef;\n\n            if (groupToMerge.children && groupToMerge.groupId) {\n                const added = this.addChildrenToGroup(mergeResult, groupToMerge.groupId, groupToMerge.children[0]);\n                if (added) { return mergeResult; }\n            }\n\n            groupToMerge.children.forEach(child => mergeTrees(mergeResult, child));\n\n            return mergeResult;\n        };\n\n        // we can't just merge the leaf path trees as groups can be split apart - instead only merge if leaf\n        // path groups with the same root group id are contiguous.\n        const mergeColDefs: AbstractColDef[] = [];\n        for (let i = 1; i <= leafPathTrees.length; i++) {\n            const first = leafPathTrees[i - 1];\n            const second = leafPathTrees[i];\n\n            if (matchingRootGroupIds(first, second)) {\n                leafPathTrees[i] = mergeTrees(first, second);\n            } else {\n                mergeColDefs.push(first);\n            }\n        }\n\n        return mergeColDefs;\n    }\n\n    private addChildrenToGroup(tree: AbstractColDef, groupId: string, colDef: AbstractColDef): boolean {\n        const subGroupIsSplit = (currentSubGroup: ColGroupDef, currentSubGroupToAdd: ColGroupDef) => {\n            const existingChildIds = currentSubGroup.children.map(this.getId);\n            const childGroupAlreadyExists = _.includes(existingChildIds, this.getId(currentSubGroupToAdd));\n            const lastChild = _.last(currentSubGroup.children);\n            const lastChildIsDifferent = lastChild && this.getId(lastChild) !== this.getId(currentSubGroupToAdd);\n            return childGroupAlreadyExists && lastChildIsDifferent;\n        };\n\n        if (!this.isColGroupDef(tree)) { return true; }\n\n        const currentGroup = tree as ColGroupDef;\n        const groupToAdd = colDef as ColGroupDef;\n\n        if (subGroupIsSplit(currentGroup, groupToAdd)) {\n            currentGroup.children.push(groupToAdd);\n            return true;\n        }\n\n        if (currentGroup.groupId === groupId) {\n            // add children that don't already exist to group\n            const existingChildIds = currentGroup.children.map(this.getId);\n            const colDefAlreadyPresent = _.includes(existingChildIds, this.getId(groupToAdd));\n            if (!colDefAlreadyPresent) {\n                currentGroup.children.push(groupToAdd);\n                return true;\n            }\n        }\n\n        // recurse until correct group is found to add children\n        currentGroup.children.forEach(subGroup => this.addChildrenToGroup(subGroup, groupId, colDef));\n        return false;\n    }\n\n    private isColGroupDef = (colDef: AbstractColDef) => colDef && typeof (colDef as ColGroupDef).children !== 'undefined';\n\n    private getId = (colDef: AbstractColDef): string | undefined => {\n        return this.isColGroupDef(colDef) ? (colDef as ColGroupDef).groupId : (colDef as ColDef).colId;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Bean, BeanStub, ISideBar, ISideBarService } from \"@ag-grid-community/core\";\n\n@Bean('sideBarService')\nexport class SideBarService extends BeanStub implements ISideBarService {\n    private sideBarComp: ISideBar;\n\n    public registerSideBarComp(sideBarComp: ISideBar): void {\n        this.sideBarComp = sideBarComp;\n    }\n\n    public getSideBarComp(): ISideBar {\n        return this.sideBarComp;\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_core", "import_core", "import_core", "_a", "import_core", "import_core"]
}
