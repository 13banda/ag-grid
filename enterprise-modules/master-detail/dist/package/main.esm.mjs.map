{
  "version": 3,
  "sources": ["../../src/masterDetailModule.ts", "../../src/masterDetail/detailCellRenderer.ts", "../../src/masterDetail/detailCellRendererCtrl.ts", "../../src/version.ts"],
  "sourcesContent": ["import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { DetailCellRenderer } from \"./masterDetail/detailCellRenderer\";\nimport { DetailCellRendererCtrl } from \"./masterDetail/detailCellRendererCtrl\";\nimport { VERSION } from \"./version\";\n\nexport const MasterDetailModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MasterDetailModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agDetailCellRenderer', componentClass: DetailCellRenderer }\n    ],\n    controllers: [\n        { controllerName: 'detailCellRenderer', controllerClass: DetailCellRendererCtrl }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import { Component, GridOptions, ICellRenderer, RefSelector, _, GridApi, IDetailCellRenderer, IDetailCellRendererParams, ModuleRegistry, createGrid, GridParams, ColumnApi } from \"@ag-grid-community/core\";\nimport { DetailCellRendererCtrl } from \"./detailCellRendererCtrl\";\n\nexport class DetailCellRenderer extends Component implements ICellRenderer {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-details-row\" role=\"gridcell\">\n            <div ref=\"eDetailGrid\" class=\"ag-details-grid\" role=\"presentation\"></div>\n        </div>`;\n\n    @RefSelector('eDetailGrid') private eDetailGrid: HTMLElement;\n\n    private detailApi: GridApi;\n\n    private params: IDetailCellRendererParams;\n\n    private ctrl: DetailCellRendererCtrl;\n\n    public init(params: IDetailCellRendererParams): void {\n\n        this.params = params;\n        this.selectAndSetTemplate();\n\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (cssClassName: string, on: boolean) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveDetailGridCssClass: (cssClassName: string, on: boolean) => this.eDetailGrid.classList.toggle(cssClassName, on),\n            setDetailGrid: gridOptions => this.setDetailGrid(gridOptions),\n            setRowData: rowData => this.setRowData(rowData),\n            getGui: () => this.eDetailGrid\n        };\n\n        this.ctrl = this.createManagedBean(new DetailCellRendererCtrl());\n        this.ctrl.init(compProxy, params);\n    }\n\n    public refresh(): boolean {\n        return this.ctrl && this.ctrl.refresh();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n\n    private selectAndSetTemplate(): void {\n\n        if (this.params.pinned) {\n            this.setTemplate('<div class=\"ag-details-row\"></div>');\n            return;\n        }\n\n        const setDefaultTemplate = () => {\n            this.setTemplate(DetailCellRenderer.TEMPLATE);\n        };\n\n        if (_.missing(this.params.template)) {\n            // use default template\n            setDefaultTemplate();\n        } else {\n            // use user provided template\n            if (typeof this.params.template === 'string') {\n                this.setTemplate(this.params.template);\n            } else if (typeof this.params.template === 'function') {\n                const templateFunc = this.params.template;\n                const template = templateFunc(this.params);\n                this.setTemplate(template);\n            } else {\n                console.warn('AG Grid: detailCellRendererParams.template should be function or string');\n                setDefaultTemplate();\n            }\n        }\n\n        if (this.eDetailGrid == null) {\n            console.warn('AG Grid: reference to eDetailGrid was missing from the details template. ' +\n                'Please add ref=\"eDetailGrid\" to the template.');\n        }\n    }\n\n    private setDetailGrid(gridOptions: GridOptions): void {\n        if (!this.eDetailGrid) { return; }\n\n        // AG-1715\n        // this is only needed when suppressReactUi=true, once we remove the old way\n        // of doing react, and Master / Details is all native React, then we\n        // can remove this code.\n        const agGridReact = this.context.getBean('agGridReact');\n        const agGridReactCloned = agGridReact ? _.cloneObject(agGridReact) : undefined;\n\n        // when we create detail grid, the detail grid needs frameworkComponentWrapper so that\n        // it created child components correctly, ie  Angular detail grid can have Angular cell renderer.\n        // this is only used by Angular and Vue, as React uses native React AG Grid detail grids\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n        const frameworkOverrides = this.getFrameworkOverrides();\n\n        const api = createGrid(this.eDetailGrid, gridOptions, {\n            frameworkOverrides,\n            providedBeanInstances: {\n                agGridReact: agGridReactCloned,\n                frameworkComponentWrapper: frameworkComponentWrapper,\n            },\n            modules: ModuleRegistry.__getGridRegisteredModules(this.params.api.getGridId()),\n        } as GridParams);\n\n        this.detailApi = api;\n        this.ctrl.registerDetailWithMaster(api, new ColumnApi(api));\n\n        this.addDestroyFunc(() => {\n            api?.destroy();\n        });\n    }\n\n    private setRowData(rowData: any[]): void {\n        // ensure detail grid api still exists (grid may be destroyed when async call tries to set data)\n        this.detailApi && this.detailApi.setGridOption('rowData', rowData);\n    }\n}\n", "import {\n    Autowired,\n    BeanStub,\n    ColumnApi,\n    DetailGridInfo,\n    GridApi,\n    IDetailCellRendererCtrl,\n    RowNode,\n    IDetailCellRendererParams,\n    IDetailCellRenderer,\n    Events,\n    RowPositionUtils,\n    FullWidthRowFocusedEvent,\n    FocusService,\n    _\n} from \"@ag-grid-community/core\";\n\nexport class DetailCellRendererCtrl extends BeanStub implements IDetailCellRendererCtrl {\n\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private params: IDetailCellRendererParams;\n\n    private comp: IDetailCellRenderer;\n\n    private loadRowDataVersion = 0;\n\n    private refreshStrategy: 'rows' | 'everything' | 'nothing';\n\n    public init(comp: IDetailCellRenderer, params: IDetailCellRendererParams): void {\n        this.params = params;\n        this.comp = comp;\n\n        const doNothingBecauseInsidePinnedSection = params.pinned != null;\n        if (doNothingBecauseInsidePinnedSection) { return; }\n\n        this.setAutoHeightClasses();\n        this.setupRefreshStrategy();\n        this.addThemeToDetailGrid();\n        this.createDetailGrid();\n        this.loadRowData();\n\n        this.addManagedListener(this.eventService, Events.EVENT_FULL_WIDTH_ROW_FOCUSED, this.onFullWidthRowFocused.bind(this));\n    }\n\n    private onFullWidthRowFocused(e: FullWidthRowFocusedEvent): void {\n        const params = this.params;\n        const row = { rowIndex: params.node.rowIndex!, rowPinned: params.node.rowPinned! };\n        const eventRow = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned! };\n        const isSameRow = this.rowPositionUtils.sameRow(row, eventRow);\n\n        if (!isSameRow) { return; }\n\n        this.focusService.focusInto(this.comp.getGui(), e.fromBelow);\n    }\n\n    private setAutoHeightClasses(): void {\n        const autoHeight = this.gridOptionsService.get('detailRowAutoHeight');\n\n        const parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n        const detailClass =  autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n\n        this.comp.addOrRemoveCssClass(parentClass, true);\n        this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n    }\n\n    private setupRefreshStrategy(): void {\n        const providedStrategy = this.params.refreshStrategy;\n\n        const validSelection = providedStrategy == 'everything' || providedStrategy == 'nothing' || providedStrategy == 'rows';\n        if (validSelection) {\n            this.refreshStrategy = providedStrategy;\n            return;\n        }\n\n        if (providedStrategy!=null) {\n            console.warn(\"AG Grid: invalid cellRendererParams.refreshStrategy = '\" + providedStrategy +\n                \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n        }\n    \n        this.refreshStrategy = 'rows';\n    }\n\n    private addThemeToDetailGrid(): void {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        const { theme } = this.environment.getTheme();\n        if (theme) {\n            this.comp.addOrRemoveDetailGridCssClass(theme, true);\n        }\n    }\n\n    private createDetailGrid(): void {\n        if (_.missing(this.params.detailGridOptions)) {\n            console.warn('AG Grid: could not find detail grid options for master detail, ' +\n                'please set gridOptions.detailCellRendererParams.detailGridOptions');\n            return;\n        }\n\n        const autoHeight = this.gridOptionsService.get('detailRowAutoHeight');\n\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api and columnApi into gridOptions\n        const gridOptions = {...this.params.detailGridOptions};\n\n        if (autoHeight) {\n            gridOptions.domLayout = 'autoHeight';\n        }\n\n        this.comp.setDetailGrid(gridOptions);\n    }\n\n    public registerDetailWithMaster(api: GridApi, columnApi: ColumnApi): void {\n        const rowId = this.params.node.id!;\n        const masterGridApi = this.params.api;\n\n        const gridInfo: DetailGridInfo = {\n            id: rowId,\n            api: api,\n            columnApi: columnApi\n        };\n\n        const rowNode = this.params.node as RowNode;\n\n        // register with api\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n\n        this.addDestroyFunc(() => {\n            // the gridInfo can be stale if a refresh happens and\n            // a new row is created before the old one is destroyed.\n            if (rowNode.detailGridInfo !== gridInfo) { return; }\n            masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    }\n\n    private loadRowData(): void {\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        const versionThisCall = this.loadRowDataVersion;\n\n        if (this.params.detailGridOptions?.rowModelType === 'serverSide') {\n            const node = this.params.node as RowNode;\n            node.detailGridInfo?.api?.refreshServerSide({ purge: true });\n            return;\n        }\n\n        const userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            console.warn('AG Grid: could not find getDetailRowData for master / detail, ' +\n                'please set gridOptions.detailCellRendererParams.getDetailRowData');\n            return;\n        }\n\n        const successCallback = (rowData: any[]) => {\n            const mostRecentCall = this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                this.comp.setRowData(rowData);\n            }\n        };\n\n        const funcParams: any = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback,\n            context: this.gridOptionsService.getGridCommonParams().context\n        };\n        userFunc(funcParams);\n    }\n\n    public refresh(): boolean {\n        const GET_GRID_TO_REFRESH = false;\n        const GET_GRID_TO_DO_NOTHING = true;\n\n        switch (this.refreshStrategy) {\n            // ignore this refresh, make grid think we've refreshed but do nothing\n            case 'nothing': return GET_GRID_TO_DO_NOTHING;\n            // grid will destroy and recreate the cell\n            case 'everything': return GET_GRID_TO_REFRESH;\n        }\n\n        // do the refresh here, and tell the grid to do nothing\n        this.loadRowData();\n        return GET_GRID_TO_DO_NOTHING;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';"],
  "mappings": "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",
  "names": ["_", "ColumnApi", "_", "ColumnApi"]
}
