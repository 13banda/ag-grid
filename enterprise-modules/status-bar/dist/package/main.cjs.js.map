{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/statusBarModule.ts", "../../src/statusBar/statusBarService.ts", "../../src/statusBar/statusBar.ts", "../../src/statusBar/providedPanels/nameValueComp.ts", "../../src/statusBar/providedPanels/totalAndFilteredRowsComp.ts", "../../src/statusBar/providedPanels/filteredRowsComp.ts", "../../src/statusBar/providedPanels/totalRowsComp.ts", "../../src/statusBar/providedPanels/selectedRowsComp.ts", "../../src/statusBar/providedPanels/aggregationComp.ts", "../../src/version.ts"],
  "sourcesContent": ["export { StatusBarModule } from \"./statusBarModule\";\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { StatusBarService } from \"./statusBar/statusBarService\";\nimport { StatusBar } from \"./statusBar/statusBar\";\nimport { NameValueComp } from \"./statusBar/providedPanels/nameValueComp\";\nimport { TotalAndFilteredRowsComp } from \"./statusBar/providedPanels/totalAndFilteredRowsComp\";\nimport { FilteredRowsComp } from \"./statusBar/providedPanels/filteredRowsComp\";\nimport { TotalRowsComp } from \"./statusBar/providedPanels/totalRowsComp\";\nimport { SelectedRowsComp } from \"./statusBar/providedPanels/selectedRowsComp\";\nimport { AggregationComp } from \"./statusBar/providedPanels/aggregationComp\";\nimport { VERSION } from \"./version\";\n\nexport const StatusBarModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.StatusBarModule,\n    beans: [StatusBarService],\n    agStackComponents: [\n        { componentName: 'AgStatusBar', componentClass: StatusBar },\n        { componentName: 'AgNameValue', componentClass: NameValueComp },\n    ],\n    userComponents: [\n        { componentName: 'agAggregationComponent', componentClass: AggregationComp },\n        { componentName: 'agSelectedRowCountComponent', componentClass: SelectedRowsComp },\n        { componentName: 'agTotalRowCountComponent', componentClass: TotalRowsComp },\n        { componentName: 'agFilteredRowCountComponent', componentClass: FilteredRowsComp },\n        { componentName: 'agTotalAndFilteredRowCountComponent', componentClass: TotalAndFilteredRowsComp }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import { Bean, BeanStub, IStatusPanelComp, IStatusBarService } from '@ag-grid-community/core';\n\n@Bean('statusBarService')\nexport class StatusBarService extends BeanStub implements IStatusBarService {\n\n    private allComponents: Map<string, IStatusPanelComp> = new Map();\n\n    // tslint:disable-next-line\n    constructor() {\n        super();\n    }\n\n    public registerStatusPanel(key: string, component: IStatusPanelComp): void {\n        this.allComponents.set(key, component);\n    }\n\n    public unregisterStatusPanel(key: string): void {\n        this.allComponents.delete(key);\n    }\n\n    public unregisterAllComponents(): void {\n        this.allComponents.clear();\n    }\n\n    public getStatusPanel(key: string): IStatusPanelComp {\n        return this.allComponents.get(key)!;\n    }\n\n    protected destroy(): void {\n        this.unregisterAllComponents();\n        super.destroy();\n    }\n}\n", "import {\n    Autowired,\n    Component,\n    UserComponentFactory,\n    PostConstruct,\n    PreDestroy,\n    AgPromise,\n    RefSelector,\n    IStatusPanelComp,\n    IStatusPanelParams,\n    WithoutGridCommon,\n    StatusPanelDef,\n    _\n} from '@ag-grid-community/core';\nimport { StatusBarService } from \"./statusBarService\";\n\nexport class StatusBar extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-status-bar\">\n            <div ref=\"eStatusBarLeft\" class=\"ag-status-bar-left\" role=\"status\"></div>\n            <div ref=\"eStatusBarCenter\" class=\"ag-status-bar-center\" role=\"status\"></div>\n            <div ref=\"eStatusBarRight\" class=\"ag-status-bar-right\" role=\"status\"></div>\n        </div>`;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('statusBarService') private statusBarService: StatusBarService;\n\n    @RefSelector('eStatusBarLeft') private eStatusBarLeft: HTMLElement;\n    @RefSelector('eStatusBarCenter') private eStatusBarCenter: HTMLElement;\n    @RefSelector('eStatusBarRight') private eStatusBarRight: HTMLElement;\n\n    private compDestroyFunctions: { [key: string]: () => void } = {};\n\n    constructor() {\n        super(StatusBar.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.processStatusPanels(new Map());\n        this.addManagedPropertyListeners(['statusBar'], this.handleStatusBarChanged.bind(this));\n    }\n\n    private processStatusPanels(existingStatusPanelsToReuse: Map<string, IStatusPanelComp>) {\n        const statusPanels = this.gridOptionsService.get('statusBar')?.statusPanels;\n        if (statusPanels) {\n            const leftStatusPanelComponents = statusPanels\n                .filter((componentConfig) => componentConfig.align === 'left');\n            this.createAndRenderComponents(leftStatusPanelComponents, this.eStatusBarLeft, existingStatusPanelsToReuse);\n\n            const centerStatusPanelComponents = statusPanels\n                .filter((componentConfig) => componentConfig.align === 'center');\n            this.createAndRenderComponents(centerStatusPanelComponents, this.eStatusBarCenter, existingStatusPanelsToReuse);\n\n            const rightStatusPanelComponents = statusPanels\n                .filter((componentConfig) => (!componentConfig.align || componentConfig.align === 'right'));\n            this.createAndRenderComponents(rightStatusPanelComponents, this.eStatusBarRight, existingStatusPanelsToReuse);\n        } else {\n            this.setDisplayed(false);\n        }\n    }\n\n    private handleStatusBarChanged() {\n        const statusPanels = this.gridOptionsService.get('statusBar')?.statusPanels;\n        const validStatusBarPanelsProvided = Array.isArray(statusPanels) && statusPanels.length > 0;\n        this.setDisplayed(validStatusBarPanelsProvided);\n\n        const existingStatusPanelsToReuse: Map<string, IStatusPanelComp> = new Map();\n\n        if (validStatusBarPanelsProvided) {\n            statusPanels.forEach(statusPanelConfig => {\n                const key = statusPanelConfig.key ?? statusPanelConfig.statusPanel;\n                const existingStatusPanel = this.statusBarService.getStatusPanel(key);\n                if (existingStatusPanel?.refresh) {\n                    const newParams = this.gridOptionsService.addGridCommonParams(statusPanelConfig.statusPanelParams ?? {});\n                    const hasRefreshed = existingStatusPanel.refresh(newParams);\n                    if (hasRefreshed) {\n                        existingStatusPanelsToReuse.set(key, existingStatusPanel);\n                        delete this.compDestroyFunctions[key];\n                        _.removeFromParent(existingStatusPanel.getGui());\n                    }\n                }\n            });\n        }\n\n        this.resetStatusBar();\n        if (validStatusBarPanelsProvided) {\n            this.processStatusPanels(existingStatusPanelsToReuse);\n        }\n    }\n\n    resetStatusBar() {\n        this.eStatusBarLeft.innerHTML = '';\n        this.eStatusBarCenter.innerHTML = '';\n        this.eStatusBarRight.innerHTML = '';\n\n        this.destroyComponents();\n        this.statusBarService.unregisterAllComponents();\n    }\n\n    @PreDestroy\n    private destroyComponents() {\n        Object.values(this.compDestroyFunctions).forEach((func) => func());\n        this.compDestroyFunctions = {};\n    }\n\n    private createAndRenderComponents(\n        statusBarComponents: StatusPanelDef[],\n        ePanelComponent: HTMLElement,\n        existingStatusPanelsToReuse: Map<string, IStatusPanelComp>\n    ) {\n        const componentDetails: { key: string; promise: AgPromise<IStatusPanelComp>; }[] = [];\n\n        statusBarComponents.forEach(componentConfig => {\n            // default to the component name if no key supplied\n            const key = componentConfig.key || componentConfig.statusPanel\n            const existingStatusPanel = existingStatusPanelsToReuse.get(key);\n            let promise: AgPromise<IStatusPanelComp>;\n            if (existingStatusPanel) {\n                promise = AgPromise.resolve(existingStatusPanel);\n            } else {\n                const params: WithoutGridCommon<IStatusPanelParams> = {};\n\n                const compDetails = this.userComponentFactory.getStatusPanelCompDetails(componentConfig, params);\n                promise = compDetails.newAgStackInstance();\n\n                if (!promise) { return; }\n            }\n\n            componentDetails.push({\n                key,\n                promise\n            });\n        });\n\n        AgPromise.all(componentDetails.map((details) => details.promise))\n            .then(() => {\n                componentDetails.forEach(componentDetail => {\n                    componentDetail.promise.then((component: IStatusPanelComp) => {\n                        const destroyFunc = () => {\n                            this.getContext().destroyBean(component);\n                        };\n\n                        if (this.isAlive()) {\n                            this.statusBarService.registerStatusPanel(componentDetail.key, component);\n                            ePanelComponent.appendChild(component.getGui());\n                            this.compDestroyFunctions[componentDetail.key] = destroyFunc;\n                        } else {\n                            destroyFunc();\n                        }\n                    });\n                });\n            });\n    }\n}\n", "import { Component, RefSelector } from '@ag-grid-community/core';\n\nexport class NameValueComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-status-name-value\">\n            <span ref=\"eLabel\"></span>:&nbsp;\n            <span ref=\"eValue\" class=\"ag-status-name-value-value\"></span>\n        </div>`;\n\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n\n    constructor() {\n        super(NameValueComp.TEMPLATE);\n    }\n\n    public setLabel(key: string, defaultValue: string): void {\n        // we want to hide until the first value comes in\n        this.setDisplayed(false);\n\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        this.eLabel.innerHTML = localeTextFunc(key, defaultValue);\n    }\n\n    public setValue(value: any): void {\n        this.eValue.innerHTML = value;\n    }\n}\n", "import {\n    Autowired,\n    Events,\n    GridApi,\n    IStatusPanelComp,\n    PostConstruct,\n    _\n} from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class TotalAndFilteredRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        // this component is only really useful with client side row model\n        if (this.gridApi.__getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agTotalAndFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.setLabel('totalAndFilteredRows', 'Rows');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-and-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        const rowCount = _.formatNumberCommas(this.getFilteredRowCountValue(), thousandSeparator, decimalSeparator);\n        const totalRowCount = _.formatNumberCommas(this.getTotalRowCount(), thousandSeparator, decimalSeparator);\n\n        if (rowCount === totalRowCount) {\n            this.setValue(rowCount);\n        } else {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            this.setValue(`${rowCount} ${localeTextFunc('of', 'of')} ${totalRowCount}`);\n        }\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n        this.gridApi.forEachNodeAfterFilter((node) => {\n            if (!node.group) { filteredRowCount++; }\n        });\n        return filteredRowCount;\n    }\n\n    private getTotalRowCount(): number {\n        let totalRowCount = 0;\n        this.gridApi.forEachNode(node => {\n            if (!node.group) { totalRowCount++; }\n        });\n        return totalRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import {\n    Autowired,\n    Events,\n    GridApi,\n    PostConstruct,\n    IStatusPanelComp,\n    _\n} from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class FilteredRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.setLabel('filteredRows', 'Filtered');\n\n        // this component is only really useful with client side row model\n        if (this.gridApi.__getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agFilteredRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-filtered-row-count');\n\n        this.setDisplayed(true);\n\n        const listener = this.onDataChanged.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, listener);\n        listener();\n    }\n\n    private onDataChanged() {\n        const totalRowCountValue = this.getTotalRowCountValue();\n        const filteredRowCountValue = this.getFilteredRowCountValue();\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        this.setValue(_.formatNumberCommas(filteredRowCountValue, thousandSeparator, decimalSeparator));\n        this.setDisplayed(totalRowCountValue !== filteredRowCountValue);\n    }\n\n    private getTotalRowCountValue(): number {\n        let totalRowCount = 0;\n        this.gridApi.forEachNode((node) => totalRowCount += 1);\n        return totalRowCount;\n    }\n\n    private getFilteredRowCountValue(): number {\n        let filteredRowCount = 0;\n\n        this.gridApi.forEachNodeAfterFilter((node) => {\n            if (!node.group) {\n                filteredRowCount += 1;\n            }\n        });\n        return filteredRowCount;\n    }\n\n    public init() {}\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import { Autowired, Events, GridApi, IStatusPanelComp, PostConstruct, _ } from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class TotalRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.setLabel('totalRows', 'Total Rows');\n\n        // this component is only really useful with client side row model\n        if (this.gridApi.__getModel().getType() !== 'clientSide') {\n            console.warn(`AG Grid: agTotalRowCountComponent should only be used with the client side row model.`);\n            return;\n        }\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-total-row-count');\n\n        this.setDisplayed(true);\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onDataChanged.bind(this));\n        this.onDataChanged();\n    }\n\n    private onDataChanged() {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_.formatNumberCommas(this.getRowCountValue(), thousandSeparator, decimalSeparator));\n    }\n\n    private getRowCountValue(): number {\n        let totalRowCount = 0;\n        this.gridApi.forEachLeafNode((node) => totalRowCount += 1);\n        return totalRowCount;\n    }\n\n    public init() {\n    }\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import { Autowired, Events, GridApi, PostConstruct, IStatusPanelComp, _, ISelectionService } from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class SelectedRowsComp extends NameValueComp implements IStatusPanelComp {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('selectionService') private selectionService: ISelectionService;\n\n    @PostConstruct\n    protected postConstruct(): void {\n\n        if (!this.isValidRowModel()) {\n            console.warn(`AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.setLabel('selectedRows', 'Selected');\n\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-selected-row-count');\n\n        this.onRowSelectionChanged();\n\n        const eventListener = this.onRowSelectionChanged.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, eventListener);\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, eventListener);\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.gridApi.__getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    private onRowSelectionChanged() {\n        const selectedRowCount = this.selectionService.getSelectionCount();\n        if (selectedRowCount < 0) {\n            this.setValue('?');\n            this.setDisplayed(true);\n            return;\n        }\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n        this.setValue(_.formatNumberCommas(selectedRowCount, thousandSeparator, decimalSeparator));\n        this.setDisplayed(selectedRowCount > 0);\n    }\n\n    public init() {\n    }\n\n    public refresh(): boolean {\n        return true;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n}\n", "import {\n    Autowired,\n    CellNavigationService,\n    Component,\n    Events,\n    GridApi,\n    RowPosition,\n    IStatusPanelComp,\n    PostConstruct,\n    RefSelector,\n    IRangeService,\n    ValueService,\n    _, CellPositionUtils,\n    RowPositionUtils,\n    RowRenderer, Optional,\n    AggregationStatusPanelAggFunc,\n    AggregationStatusPanelParams\n} from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nexport class AggregationComp extends Component implements IStatusPanelComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-status-panel ag-status-panel-aggregations\">\n            <ag-name-value ref=\"avgAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"countAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"minAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"maxAggregationComp\"></ag-name-value>\n            <ag-name-value ref=\"sumAggregationComp\"></ag-name-value>\n        </div>`;\n\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('cellNavigationService') private cellNavigationService: CellNavigationService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') public rowPositionUtils: RowPositionUtils;\n\n    @RefSelector('sumAggregationComp') private sumAggregationComp: NameValueComp;\n    @RefSelector('countAggregationComp') private countAggregationComp: NameValueComp;\n    @RefSelector('minAggregationComp') private minAggregationComp: NameValueComp;\n    @RefSelector('maxAggregationComp') private maxAggregationComp: NameValueComp;\n    @RefSelector('avgAggregationComp') private avgAggregationComp: NameValueComp;\n\n    private params!: AggregationStatusPanelParams;\n\n    constructor() {\n        super(AggregationComp.TEMPLATE);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (!this.isValidRowModel()) {\n            console.warn(`AG Grid: agAggregationComponent should only be used with the client and server side row model.`);\n            return;\n        }\n\n        this.avgAggregationComp.setLabel('avg', 'Average');\n        this.countAggregationComp.setLabel('count', 'Count');\n        this.minAggregationComp.setLabel('min', 'Min');\n        this.maxAggregationComp.setLabel('max', 'Max');\n        this.sumAggregationComp.setLabel('sum', 'Sum');\n\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n    }\n\n    private isValidRowModel() {\n        // this component is only really useful with client or server side rowmodels\n        const rowModelType = this.gridApi.__getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    }\n\n    public init(params: AggregationStatusPanelParams) {\n        this.params = params;\n    }\n\n    public refresh(params: AggregationStatusPanelParams): boolean {\n        this.params = params;\n        this.onRangeSelectionChanged();\n        return true;\n    }\n\n    private setAggregationComponentValue(aggFuncName: AggregationStatusPanelAggFunc, value: number | null, visible: boolean) {\n        const statusBarValueComponent = this.getAllowedAggregationValueComponent(aggFuncName);\n        if (_.exists(statusBarValueComponent) && statusBarValueComponent) {\n            const localeTextFunc = this.localeService.getLocaleTextFunc();\n            const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n            const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n            statusBarValueComponent.setValue(_.formatNumberTwoDecimalPlacesAndCommas(value!, thousandSeparator, decimalSeparator));\n            statusBarValueComponent.setDisplayed(visible);\n        } else {\n            // might have previously been visible, so hide now\n            this.getAggregationValueComponent(aggFuncName)?.setDisplayed(false);\n        }\n    }\n\n    private getAllowedAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): NameValueComp | null {\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        const { aggFuncs } = this.params;\n        if (!aggFuncs || aggFuncs.includes(aggFuncName)) {\n            return this.getAggregationValueComponent(aggFuncName);\n        }\n\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return null;\n    }\n\n    private getAggregationValueComponent(aggFuncName: AggregationStatusPanelAggFunc): NameValueComp {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        const refComponentName = `${aggFuncName}AggregationComp`;\n        return (this as any)[refComponentName];\n    }\n\n    private onRangeSelectionChanged(): void {\n        const cellRanges = this.rangeService ? this.rangeService.getCellRanges() : undefined;\n\n        let sum = 0;\n        let count = 0;\n        let numberCount = 0;\n        let min: number | null = null;\n        let max: number | null = null;\n\n        const cellsSoFar: any = {};\n\n        if (cellRanges && !_.missingOrEmpty(cellRanges)) {\n\n            cellRanges.forEach((cellRange) => {\n\n                let currentRow: RowPosition | null = this.rangeService.getRangeStartRow(cellRange);\n                const lastRow = this.rangeService.getRangeEndRow(cellRange);\n\n                while (true) {\n\n                    const finishedAllRows = _.missing(currentRow) || !currentRow || this.rowPositionUtils.before(lastRow, currentRow);\n                    if (finishedAllRows || !currentRow || !cellRange.columns) {\n                        break;\n                    }\n\n                    cellRange.columns.forEach(col => {\n                        if (currentRow === null) {\n                            return;\n                        }\n\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        const cellId = this.cellPositionUtils.createId({\n                            rowPinned: currentRow.rowPinned,\n                            column: col,\n                            rowIndex: currentRow.rowIndex\n                        });\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n\n                        const rowNode = this.rowRenderer.getRowNode(currentRow);\n                        if (_.missing(rowNode)) {\n                            return;\n                        }\n\n                        let value = this.valueService.getValue(col, rowNode);\n\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (_.missing(value) || value === '') {\n                            return;\n                        }\n\n                        count++;\n\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (typeof value === 'object' && 'value' in value) {\n                            value = value.value;\n\n                            // ensure that the new value wouldn't have been skipped by the previous check\n                            if (value === '') {\n                                return;\n                            }\n                        }\n\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n\n                        if (typeof value === 'number' && !isNaN(value)) {\n\n                            sum += value;\n\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n\n                            numberCount++;\n                        }\n                    });\n\n                    currentRow = this.cellNavigationService.getRowBelow(currentRow);\n                }\n            });\n        }\n\n        const gotResult = count > 1;\n        const gotNumberResult = numberCount > 1;\n\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', (sum / numberCount), gotNumberResult);\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';"],
  "mappings": "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",
  "names": ["import_core", "import_core", "_a", "import_core", "import_core", "localeTextFunc", "import_core", "import_core", "import_core", "import_core"]
}
