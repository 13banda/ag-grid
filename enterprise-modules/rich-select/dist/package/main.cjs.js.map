{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/richSelectModule.ts", "../../src/richSelect/richSelectCellEditor.ts", "../../src/version.ts"],
  "sourcesContent": ["export { RichSelectModule } from \"./richSelectModule\";\n", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { RichSelectCellEditor } from \"./richSelect/richSelectCellEditor\";\nimport { VERSION } from \"./version\";\n\nexport const RichSelectModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.RichSelectModule,\n    beans: [],\n    userComponents: [\n        { componentName: 'agRichSelect', componentClass: RichSelectCellEditor },\n        { componentName: 'agRichSelectCellEditor', componentClass: RichSelectCellEditor }\n    ],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    AgRichSelect,\n    Events,\n    ICellEditor,\n    ICellEditorParams,\n    KeyCreatorParams,\n    RichSelectParams,\n    PopupComponent,\n    FieldPickerValueSelectedEvent,\n    RichCellEditorParams,\n    _\n} from \"@ag-grid-community/core\";\n\nexport class RichSelectCellEditor<TData = any, TValue = any> extends PopupComponent implements ICellEditor<TValue> {\n\n    private params: RichCellEditorParams<TData, TValue>;\n    private focusAfterAttached: boolean;\n    private richSelect: AgRichSelect<TValue>;\n\n    constructor() {\n        super(/* html */ \n            `<div class=\"ag-cell-edit-wrapper\"></div>`\n        );\n    }\n\n    public init(params: RichCellEditorParams<TData, TValue>): void {\n        this.params = params;\n\n        const  { cellStartedEdit, cellHeight, values } = params;\n\n        if (_.missing(values)) {\n            console.warn('AG Grid: agRichSelectCellEditor requires cellEditorParams.values to be set');\n        }\n\n        const { params: richSelectParams, valuesPromise } = this.buildRichSelectParams();\n\n        this.richSelect = this.createManagedBean(new AgRichSelect<TValue>(richSelectParams));\n        this.richSelect.addCssClass('ag-cell-editor');\n        this.appendChild(this.richSelect);\n\n        if (valuesPromise) {\n            valuesPromise.then((values: TValue[]) => {\n                this.richSelect.setValueList({ valueList: values, refresh: true });\n                const searchStringCallback = this.getSearchStringCallback(values);\n                if (searchStringCallback) {\n                    this.richSelect.setSearchStringCreator(searchStringCallback);\n                }\n            });\n        }\n\n        this.addManagedListener(this.richSelect, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, this.onEditorPickerValueSelected.bind(this));\n        this.addManagedListener(this.richSelect.getGui(), 'focusout', this.onEditorFocusOut.bind(this));\n\n        this.focusAfterAttached = cellStartedEdit;\n\n        if (_.exists(cellHeight)) {\n            this.richSelect.setRowHeight(cellHeight);\n        }\n    }\n\n    private onEditorPickerValueSelected(e: FieldPickerValueSelectedEvent<TData>): void {\n        this.params.stopEditing(!e.fromEnterKey);\n    }\n\n    private onEditorFocusOut(e: FocusEvent): void {\n        if (this.richSelect.getGui().contains(e.relatedTarget as Element)) { return; }\n        this.params.stopEditing(true);\n    }\n\n    private buildRichSelectParams(): { params: RichSelectParams<TValue>, valuesPromise?: Promise<TValue[]> } {\n        const { \n            cellRenderer, value, values, formatValue, searchDebounceDelay, \n            valueListGap, valueListMaxHeight, valueListMaxWidth, allowTyping,\n            filterList, searchType, highlightMatch, valuePlaceholder, eventKey\n        } = this.params;\n\n        const ret: RichSelectParams = {\n            value: value,\n            cellRenderer,\n            searchDebounceDelay,\n            valueFormatter: formatValue,\n            pickerAriaLabelKey: 'ariaLabelRichSelectField',\n            pickerAriaLabelValue: 'Rich Select Field',\n            pickerType: 'virtual-list',\n            pickerGap: valueListGap,\n            allowTyping,\n            filterList,\n            searchType,\n            highlightMatch,\n            maxPickerHeight: valueListMaxHeight,\n            maxPickerWidth: valueListMaxWidth,\n            placeholder: valuePlaceholder,\n            initialInputValue: eventKey?.length === 1 ? eventKey : undefined\n        }\n\n        let valuesResult;\n        let valuesPromise;\n\n        if (typeof values === 'function') {\n            valuesResult = values(this.params as ICellEditorParams);\n        } else {\n            valuesResult = values ?? [];\n        }\n\n        if (Array.isArray(valuesResult)) {\n            ret.valueList = valuesResult;\n            ret.searchStringCreator = this.getSearchStringCallback(valuesResult);\n        } else {\n            valuesPromise = valuesResult;\n        }\n\n        return { params: ret, valuesPromise };\n    }\n\n    private getSearchStringCallback(values: TValue[]): ((values: TValue[]) => string[]) | undefined {\n        const { colDef } = this.params;\n\n        if (typeof values[0] !== 'object' || !colDef.keyCreator) {\n            return;\n        }\n\n        return (values: TValue[]) => values.map((value: TValue) => {\n            const keyParams: KeyCreatorParams = this.gridOptionsService.addGridCommonParams({\n                value: value,\n                colDef: this.params.colDef,\n                column: this.params.column,\n                node: this.params.node,\n                data: this.params.data\n            });\n            return colDef.keyCreator!(keyParams);\n        });\n    }\n\n    // we need to have the gui attached before we can draw the virtual rows, as the\n    // virtual row logic needs info about the gui state\n    public afterGuiAttached(): void {\n        const { focusAfterAttached, params } = this;\n\n        setTimeout(() => {\n            if (!this.isAlive()) { return; }\n\n            if (focusAfterAttached) {\n                const focusableEl = this.richSelect.getFocusableElement() as HTMLInputElement;\n                focusableEl.focus();\n                const { allowTyping, eventKey } = this.params;\n                if (allowTyping && (!eventKey || eventKey.length !== 1)) {\n                    focusableEl.select();\n                }\n            }\n\n            this.richSelect.showPicker();\n\n            const { eventKey } = params;\n            if (eventKey) {\n                if (eventKey?.length === 1) {\n                    this.richSelect.searchTextFromString(eventKey);\n                }\n            }\n\n        });\n    }\n\n    public getValue(): any {\n        return this.richSelect.getValue();\n    }\n\n    public isPopup(): boolean {\n        return false;\n    }\n\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,eAAoC;AACpC,IAAAA,eAAqC;;;ACDrC,kBAWO;AAEA,IAAM,uBAAN,cAA8D,2BAA8C;AAAA,EAM/G,cAAc;AACV;AAAA;AAAA,MACI;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,KAAK,QAAmD;AAC3D,SAAK,SAAS;AAEd,UAAO,EAAE,iBAAiB,YAAY,OAAO,IAAI;AAEjD,QAAI,cAAE,QAAQ,MAAM,GAAG;AACnB,cAAQ,KAAK,4EAA4E;AAAA,IAC7F;AAEA,UAAM,EAAE,QAAQ,kBAAkB,cAAc,IAAI,KAAK,sBAAsB;AAE/E,SAAK,aAAa,KAAK,kBAAkB,IAAI,yBAAqB,gBAAgB,CAAC;AACnF,SAAK,WAAW,YAAY,gBAAgB;AAC5C,SAAK,YAAY,KAAK,UAAU;AAEhC,QAAI,eAAe;AACf,oBAAc,KAAK,CAACC,YAAqB;AACrC,aAAK,WAAW,aAAa,EAAE,WAAWA,SAAQ,SAAS,KAAK,CAAC;AACjE,cAAM,uBAAuB,KAAK,wBAAwBA,OAAM;AAChE,YAAI,sBAAsB;AACtB,eAAK,WAAW,uBAAuB,oBAAoB;AAAA,QAC/D;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK,mBAAmB,KAAK,YAAY,mBAAO,mCAAmC,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAC9H,SAAK,mBAAmB,KAAK,WAAW,OAAO,GAAG,YAAY,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAE9F,SAAK,qBAAqB;AAE1B,QAAI,cAAE,OAAO,UAAU,GAAG;AACtB,WAAK,WAAW,aAAa,UAAU;AAAA,IAC3C;AAAA,EACJ;AAAA,EAEQ,4BAA4B,GAA+C;AAC/E,SAAK,OAAO,YAAY,CAAC,EAAE,YAAY;AAAA,EAC3C;AAAA,EAEQ,iBAAiB,GAAqB;AAC1C,QAAI,KAAK,WAAW,OAAO,EAAE,SAAS,EAAE,aAAwB,GAAG;AAAE;AAAA,IAAQ;AAC7E,SAAK,OAAO,YAAY,IAAI;AAAA,EAChC;AAAA,EAEQ,wBAAiG;AACrG,UAAM;AAAA,MACF;AAAA,MAAc;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAa;AAAA,MAC1C;AAAA,MAAc;AAAA,MAAoB;AAAA,MAAmB;AAAA,MACrD;AAAA,MAAY;AAAA,MAAY;AAAA,MAAgB;AAAA,MAAkB;AAAA,IAC9D,IAAI,KAAK;AAET,UAAM,MAAwB;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA,gBAAgB;AAAA,MAChB,oBAAoB;AAAA,MACpB,sBAAsB;AAAA,MACtB,YAAY;AAAA,MACZ,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,oBAAmB,qCAAU,YAAW,IAAI,WAAW;AAAA,IAC3D;AAEA,QAAI;AACJ,QAAI;AAEJ,QAAI,OAAO,WAAW,YAAY;AAC9B,qBAAe,OAAO,KAAK,MAA2B;AAAA,IAC1D,OAAO;AACH,qBAAe,0BAAU,CAAC;AAAA,IAC9B;AAEA,QAAI,MAAM,QAAQ,YAAY,GAAG;AAC7B,UAAI,YAAY;AAChB,UAAI,sBAAsB,KAAK,wBAAwB,YAAY;AAAA,IACvE,OAAO;AACH,sBAAgB;AAAA,IACpB;AAEA,WAAO,EAAE,QAAQ,KAAK,cAAc;AAAA,EACxC;AAAA,EAEQ,wBAAwB,QAAgE;AAC5F,UAAM,EAAE,OAAO,IAAI,KAAK;AAExB,QAAI,OAAO,OAAO,CAAC,MAAM,YAAY,CAAC,OAAO,YAAY;AACrD;AAAA,IACJ;AAEA,WAAO,CAACA,YAAqBA,QAAO,IAAI,CAAC,UAAkB;AACvD,YAAM,YAA8B,KAAK,mBAAmB,oBAAoB;AAAA,QAC5E;AAAA,QACA,QAAQ,KAAK,OAAO;AAAA,QACpB,QAAQ,KAAK,OAAO;AAAA,QACpB,MAAM,KAAK,OAAO;AAAA,QAClB,MAAM,KAAK,OAAO;AAAA,MACtB,CAAC;AACD,aAAO,OAAO,WAAY,SAAS;AAAA,IACvC,CAAC;AAAA,EACL;AAAA;AAAA;AAAA,EAIO,mBAAyB;AAC5B,UAAM,EAAE,oBAAoB,OAAO,IAAI;AAEvC,eAAW,MAAM;AACb,UAAI,CAAC,KAAK,QAAQ,GAAG;AAAE;AAAA,MAAQ;AAE/B,UAAI,oBAAoB;AACpB,cAAM,cAAc,KAAK,WAAW,oBAAoB;AACxD,oBAAY,MAAM;AAClB,cAAM,EAAE,aAAa,UAAAC,UAAS,IAAI,KAAK;AACvC,YAAI,gBAAgB,CAACA,aAAYA,UAAS,WAAW,IAAI;AACrD,sBAAY,OAAO;AAAA,QACvB;AAAA,MACJ;AAEA,WAAK,WAAW,WAAW;AAE3B,YAAM,EAAE,SAAS,IAAI;AACrB,UAAI,UAAU;AACV,aAAI,qCAAU,YAAW,GAAG;AACxB,eAAK,WAAW,qBAAqB,QAAQ;AAAA,QACjD;AAAA,MACJ;AAAA,IAEJ,CAAC;AAAA,EACL;AAAA,EAEO,WAAgB;AACnB,WAAO,KAAK,WAAW,SAAS;AAAA,EACpC;AAAA,EAEO,UAAmB;AACtB,WAAO;AAAA,EACX;AAEJ;;;ACzKO,IAAM,UAAU;;;AFIhB,IAAM,mBAA2B;AAAA,EACpC,SAAS;AAAA,EACT,YAAY,yBAAY;AAAA,EACxB,OAAO,CAAC;AAAA,EACR,gBAAgB;AAAA,IACZ,EAAE,eAAe,gBAAgB,gBAAgB,qBAAqB;AAAA,IACtE,EAAE,eAAe,0BAA0B,gBAAgB,qBAAqB;AAAA,EACpF;AAAA,EACA,kBAAkB;AAAA,IACd;AAAA,EACJ;AACJ;",
  "names": ["import_core", "values", "eventKey"]
}
