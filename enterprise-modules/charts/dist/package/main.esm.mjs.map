{
  "version": 3,
  "sources": ["../../src/gridChartsModule.ts", "../../src/charts/chartService.ts", "../../src/charts/chartComp/gridChartComp.ts", "../../src/charts/chartComp/menu/chartMenu.ts", "../../src/charts/chartComp/menu/tabbedChartMenu.ts", "../../src/charts/chartComp/menu/data/chartDataPanel.ts", "../../src/charts/chartComp/chartController.ts", "../../src/charts/chartComp/model/chartDataModel.ts", "../../src/charts/chartComp/datasource/chartDatasource.ts", "../../src/charts/chartComp/services/chartColumnService.ts", "../../src/charts/chartComp/model/comboChartModel.ts", "../../src/charts/chartComp/utils/seriesTypeMapper.ts", "../../src/charts/chartComp/chartProxies/chartTheme.ts", "../../src/charts/chartComp/utils/axisTypeMapper.ts", "../../src/charts/chartComp/utils/object.ts", "../../src/charts/chartComp/utils/UpdateParamsValidator.ts", "../../src/charts/chartComp/menu/data/categoriesDataPanel.ts", "../../src/charts/chartComp/menu/data/dragDataPanel.ts", "../../src/widgets/agPillSelect.ts", "../../src/charts/chartComp/menu/data/seriesDataPanel.ts", "../../src/charts/chartComp/menu/data/seriesChartTypePanel.ts", "../../src/charts/chartComp/menu/data/switchCategorySeriesDataPanel.ts", "../../src/charts/chartComp/menu/format/formatPanel.ts", "../../src/charts/chartComp/menu/format/legend/legendPanel.ts", "../../src/charts/chartComp/menu/format/fontPanel.ts", "../../src/charts/chartComp/menu/format/axis/cartesianAxisPanel.ts", "../../src/charts/chartComp/menu/format/axis/axisTicksPanel.ts", "../../src/charts/chartComp/menu/format/gridLine/gridLinePanel.ts", "../../src/widgets/agAngleSelect.ts", "../../src/charts/chartComp/menu/chartMenuParamsFactory.ts", "../../src/charts/chartComp/menu/format/axis/polarAxisPanel.ts", "../../src/charts/chartComp/menu/format/chart/chartPanel.ts", "../../src/charts/chartComp/menu/format/chart/paddingPanel.ts", "../../src/charts/chartComp/menu/format/chart/backgroundPanel.ts", "../../src/charts/chartComp/menu/format/chart/titlePanel.ts", "../../src/charts/chartComp/menu/format/series/seriesPanel.ts", "../../src/charts/chartComp/menu/format/series/shadowPanel.ts", "../../src/charts/chartComp/menu/format/series/markersPanel.ts", "../../src/widgets/agColorPanel.ts", "../../src/widgets/agColorPicker.ts", "../../src/charts/chartComp/menu/format/series/calloutPanel.ts", "../../src/charts/chartComp/menu/format/series/capsPanel.ts", "../../src/charts/chartComp/menu/format/series/connectorLinePanel.ts", "../../src/charts/chartComp/menu/format/series/whiskersPanel.ts", "../../src/charts/chartComp/menu/format/series/seriesItemsPanel.ts", "../../src/charts/chartComp/menu/format/series/tileSpacingPanel.ts", "../../src/charts/chartComp/menu/format/legend/gradientLegendPanel.ts", "../../src/charts/chartComp/menu/chartPanelFeature.ts", "../../src/charts/chartComp/menu/settings/chartSettingsPanel.ts", "../../src/charts/chartComp/menu/settings/miniChartsContainer.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChartWithAxes.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChart.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChartHelpers.ts", "../../src/charts/chartComp/menu/settings/miniCharts/column/miniColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/column/miniStackedColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/column/miniNormalizedColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/bar/miniBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/bar/miniStackedBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/bar/miniNormalizedBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/pie/miniDonut.ts", "../../src/charts/chartComp/menu/settings/miniCharts/pie/miniPie.ts", "../../src/charts/chartComp/menu/settings/miniCharts/line/miniLine.ts", "../../src/charts/chartComp/menu/settings/miniCharts/scatter/miniScatter.ts", "../../src/charts/chartComp/menu/settings/miniCharts/scatter/miniBubble.ts", "../../src/charts/chartComp/menu/settings/miniCharts/area/miniArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/area/miniStackedArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/area/miniNormalizedArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/histogram/miniHistogram.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialColumn.ts", "../../src/charts/chartComp/menu/settings/miniCharts/miniChartWithPolarAxes.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadialBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarLine.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniRadarArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/polar/miniNightingale.ts", "../../src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeBar.ts", "../../src/charts/chartComp/menu/settings/miniCharts/statistical/miniRangeArea.ts", "../../src/charts/chartComp/menu/settings/miniCharts/statistical/miniBoxPlot.ts", "../../src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniTreemap.ts", "../../src/charts/chartComp/menu/settings/miniCharts/hierarchical/miniSunburst.ts", "../../src/charts/chartComp/menu/settings/miniCharts/specialized/miniHeatmap.ts", "../../src/charts/chartComp/menu/settings/miniCharts/specialized/miniWaterfall.ts", "../../src/charts/chartComp/menu/settings/miniCharts/combo/miniColumnLineCombo.ts", "../../src/charts/chartComp/menu/settings/miniCharts/combo/miniAreaColumnCombo.ts", "../../src/charts/chartComp/menu/settings/miniCharts/combo/miniCustomCombo.ts", "../../src/charts/chartComp/menu/chartToolbar.ts", "../../src/charts/chartComp/chartTitle/titleEdit.ts", "../../src/charts/chartComp/chartProxies/cartesian/barChartProxy.ts", "../../src/charts/chartComp/chartProxies/chartProxy.ts", "../../src/charts/chartComp/utils/integration.ts", "../../src/charts/chartComp/chartProxies/cartesian/cartesianChartProxy.ts", "../../src/charts/chartComp/utils/color.ts", "../../src/charts/chartComp/chartProxies/cartesian/areaChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/lineChartProxy.ts", "../../src/charts/chartComp/chartProxies/polar/polarChartProxy.ts", "../../src/charts/chartComp/chartProxies/pie/pieChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/scatterChartProxy.ts", "../../src/charts/chartComp/chartProxies/statistical/statisticalChartProxy.ts", "../../src/charts/chartComp/chartProxies/statistical/rangeChartProxy.ts", "../../src/charts/chartComp/chartProxies/cartesian/histogramChartProxy.ts", "../../src/charts/chartComp/chartProxies/statistical/boxPlotChartProxy.ts", "../../src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartProxy.ts", "../../src/charts/chartComp/chartProxies/hierarchical/hierarchicalChartUtils.ts", "../../src/charts/chartComp/chartProxies/hierarchical/treemapChartProxy.ts", "../../src/charts/chartComp/chartProxies/hierarchical/sunburstChartProxy.ts", "../../src/charts/chartComp/chartProxies/specialized/heatmapChartProxy.ts", "../../src/charts/chartComp/utils/array.ts", "../../src/charts/chartComp/chartProxies/cartesian/waterfallChartProxy.ts", "../../src/charts/chartComp/services/chartOptionsService.ts", "../../src/charts/chartComp/chartProxies/combo/comboChartProxy.ts", "../../src/charts/chartComp/services/chartMenuService.ts", "../../src/version.ts", "../../src/charts/chartModelMigration.ts", "../../src/charts/chartComp/services/chartTranslationService.ts", "../../src/charts/chartComp/services/chartCrossFilterService.ts", "../../src/utils/validGridChartsVersion.ts", "../../src/charts/chartComp/menu/chartMenuList.ts", "../../src/charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory.ts", "../../src/charts/chartComp/menu/advancedSettings/advancedSettingsPanel.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/animationPanel.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/crosshairPanel.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/navigatorPanel.ts", "../../src/charts/chartComp/menu/advancedSettings/interactivity/zoomPanel.ts", "../../src/agGridCoreExtension.ts", "../../src/main.ts"],
  "sourcesContent": ["import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { RangeSelectionModule } from \"@ag-grid-enterprise/range-selection\";\nimport { ChartService } from \"./charts/chartService\";\nimport { ChartTranslationService } from \"./charts/chartComp/services/chartTranslationService\";\nimport { ChartCrossFilterService } from \"./charts/chartComp/services/chartCrossFilterService\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { VERSION as GRID_VERSION } from \"./version\";\nimport { validGridChartsVersion } from \"./utils/validGridChartsVersion\";\nimport { ChartMenuListFactory } from \"./charts/chartComp/menu/chartMenuList\";\nimport { ChartMenuService } from \"./charts/chartComp/services/chartMenuService\";\nimport { AgPillSelect } from \"./widgets/agPillSelect\";\nimport { AdvancedSettingsMenuFactory } from \"./charts/chartComp/menu/advancedSettings/advancedSettingsMenuFactory\";\n\nexport const GridChartsModule: Module = {\n    version: GRID_VERSION,\n    validate: () => {\n        return validGridChartsVersion({\n            gridVersion: GRID_VERSION,\n            chartsVersion: ChartService.CHARTS_VERSION\n        });\n    },\n    moduleName: ModuleNames.GridChartsModule,\n    beans: [\n        ChartService, ChartTranslationService, ChartCrossFilterService, ChartMenuListFactory, ChartMenuService, AdvancedSettingsMenuFactory\n    ],\n    agStackComponents: [\n        { componentName: 'AgColorPicker', componentClass: AgColorPicker },\n        { componentName: 'AgAngleSelect', componentClass: AgAngleSelect },\n        { componentName: 'AgPillSelect', componentClass: AgPillSelect },\n    ],\n    dependantModules: [\n        RangeSelectionModule,\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    CellRange,\n    CellRangeParams,\n    ChartDownloadParams,\n    ChartModel,\n    ChartRef,\n    ChartType,\n    ColumnModel,\n    CreateCrossFilterChartParams,\n    CreatePivotChartParams,\n    CreateRangeChartParams,\n    GetChartImageDataUrlParams,\n    IAggFunc,\n    IChartService,\n    IRangeService,\n    ModuleRegistry,\n    OpenChartToolPanelParams,\n    Optional,\n    PreDestroy,\n    SeriesChartType,\n    UpdateChartParams\n} from \"@ag-grid-community/core\";\nimport { AgChartThemeOverrides, AgChartThemePalette, VERSION as CHARTS_VERSION, _ModuleSupport} from \"ag-charts-community\";\nimport { GridChartComp, GridChartParams } from \"./chartComp/gridChartComp\";\nimport { getCanonicalChartType, isEnterpriseChartType } from './chartComp/utils/seriesTypeMapper';\nimport { upgradeChartModel } from \"./chartModelMigration\";\nimport { VERSION as GRID_VERSION } from \"../version\";\n\nexport interface CrossFilteringContext {\n    lastSelectedChartId: string;\n}\n\n@Bean('chartService')\nexport class ChartService extends BeanStub implements IChartService {\n\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public static CHARTS_VERSION = CHARTS_VERSION;\n\n    // we destroy all charts bound to this grid when grid is destroyed. activeCharts contains all charts, including\n    // those in developer provided containers.\n    private activeCharts = new Set<ChartRef>();\n    private activeChartComps = new Set<GridChartComp>();\n\n    // this shared (singleton) context is used by cross filtering in line and area charts\n    private crossFilteringContext: CrossFilteringContext = {\n        lastSelectedChartId: '',\n    };\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    public updateChart(params: UpdateChartParams): void {\n        const chartType = params.chartType;\n        if (chartType && isEnterpriseChartType(chartType) && !this.isEnterprise()) {\n            ModuleRegistry.__warnEnterpriseChartDisabled(chartType);\n            return;\n        }\n\n        if (this.activeChartComps.size === 0) {\n            console.warn(`AG Grid - No active charts to update.`);\n            return;\n        }\n\n        const chartComp = [...this.activeChartComps].find(chartComp => chartComp.getChartId() === params.chartId);\n        if (!chartComp) {\n            console.warn(`AG Grid - Unable to update chart. No active chart found with ID: ${params.chartId}.`);\n            return;\n        }\n\n        chartComp.update(params);\n    }\n\n    public getChartModels(): ChartModel[] {\n        const models: ChartModel[] = [];\n\n        const versionedModel = (c: ChartModel) => {\n            return {...c, version: GRID_VERSION };\n        };\n        this.activeChartComps.forEach(c => models.push(versionedModel(c.getChartModel())));\n\n        return models;\n    }\n\n    public getChartRef(chartId: string): ChartRef | undefined {\n        let chartRef;\n        this.activeCharts.forEach(cr => {\n            if (cr.chartId === chartId) {\n                chartRef = cr;\n            }\n        });\n        return chartRef;\n    }\n\n    public getChartComp(chartId: string): GridChartComp | undefined {\n        let chartComp;\n        this.activeChartComps.forEach(comp => {\n            if (comp.getChartId() === chartId) {\n                chartComp = comp;\n            }\n        });\n        return chartComp;\n    }\n\n    public getChartImageDataURL(params: GetChartImageDataUrlParams): string | undefined {\n        let url: any;\n        this.activeChartComps.forEach(c => {\n            if (c.getChartId() === params.chartId) {\n                url = c.getChartImageDataURL(params.fileFormat);\n            }\n        });\n        return url;\n    }\n\n    public downloadChart(params: ChartDownloadParams) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === params.chartId);\n        chartComp?.downloadChart(params.dimensions, params.fileName, params.fileFormat);\n    }\n\n    public openChartToolPanel(params: OpenChartToolPanelParams) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === params.chartId);\n        chartComp?.openChartToolPanel(params.panel);\n    }\n\n    public closeChartToolPanel(chartId: string) {\n        const chartComp = Array.from(this.activeChartComps).find(c => c.getChartId() === chartId);\n        chartComp?.closeChartToolPanel();\n    }\n\n    public createChartFromCurrentRange(chartType: ChartType = 'groupedColumn'): ChartRef | undefined {\n        const selectedRange: CellRange = this.getSelectedRange();\n        return this.createChart(selectedRange, chartType);\n    }\n\n    public restoreChart(model: ChartModel, chartContainer?: HTMLElement): ChartRef | undefined {\n        if (!model) {\n            console.warn(\"AG Grid - unable to restore chart as no chart model is provided\");\n            return;\n        }\n\n        if (model.version !== GRID_VERSION) {\n            model = upgradeChartModel(model);\n        }\n\n        const params = {\n            cellRange: model.cellRange,\n            chartType: model.chartType,\n            chartThemeName: model.chartThemeName,\n            chartContainer: chartContainer,\n            suppressChartRanges: model.suppressChartRanges,\n            switchCategorySeries: model.switchCategorySeries,\n            aggFunc: model.aggFunc,\n            unlinkChart: model.unlinkChart,\n            seriesChartTypes: model.seriesChartTypes\n        };\n\n        const getCellRange = (cellRangeParams: CellRangeParams) => {\n            return this.rangeService\n                ? this.rangeService.createCellRangeFromCellRangeParams(cellRangeParams)\n                : undefined;\n        }\n\n        if (model.modelType === 'pivot') {\n            // if required enter pivot mode\n            this.gridOptionsService.updateGridOptions({ options: { pivotMode: true}, source: 'pivotChart' as any });\n\n            // pivot chart range contains all visible column without a row range to include all rows\n            const columns = this.columnModel.getAllDisplayedColumns().map(col => col.getColId());\n            const chartAllRangeParams: CellRangeParams = { \n                rowStartIndex: null,\n                rowStartPinned: undefined,\n                rowEndIndex: null,\n                rowEndPinned: undefined,\n                columns \n            };\n\n            const cellRange = getCellRange(chartAllRangeParams);\n            if (!cellRange) {\n                console.warn(\"AG Grid - unable to create chart as there are no columns in the grid.\");\n                return;\n            }\n\n            return this.createChart(\n                cellRange,\n                params.chartType,\n                params.chartThemeName,\n                true,\n                true,\n                params.chartContainer,\n                false,\n                undefined,\n                undefined,\n                params.unlinkChart,\n                false,\n                model.chartOptions);\n        }\n\n        const cellRange = getCellRange(params.cellRange);\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n\n        return this.createChart(\n            cellRange!,\n            params.chartType,\n            params.chartThemeName,\n            false,\n            params.suppressChartRanges,\n            params.chartContainer,\n            params.switchCategorySeries,\n            params.aggFunc,\n            undefined,\n            params.unlinkChart,\n            false,\n            model.chartOptions,\n            model.chartPalette,\n            params.seriesChartTypes);\n    }\n\n    public createRangeChart(params: CreateRangeChartParams): ChartRef | undefined {\n        const cellRange = this.rangeService?.createCellRangeFromCellRangeParams(params.cellRange as CellRangeParams);\n\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n\n        return this.createChart(\n            cellRange,\n            params.chartType,\n            params.chartThemeName,\n            false,\n            params.suppressChartRanges,\n            params.chartContainer,\n            params.switchCategorySeries,\n            params.aggFunc,\n            params.chartThemeOverrides,\n            params.unlinkChart,\n            undefined,\n            undefined,\n            undefined,\n            params.seriesChartTypes);\n    }\n\n    public createPivotChart(params: CreatePivotChartParams): ChartRef | undefined {\n        // if required enter pivot mode\n        this.gridOptionsService.updateGridOptions({ options: { pivotMode: true}, source: 'pivotChart' as any });\n\n        // pivot chart range contains all visible column without a row range to include all rows\n        const chartAllRangeParams: CellRangeParams = {\n            rowStartIndex: null,\n            rowStartPinned: undefined,\n            rowEndIndex: null,\n            rowEndPinned: undefined,\n            columns: this.columnModel.getAllDisplayedColumns().map(col => col.getColId())\n        };\n\n        const cellRange = this.rangeService\n            ? this.rangeService.createCellRangeFromCellRangeParams(chartAllRangeParams)\n            : undefined;\n\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as there are no columns in the grid.\");\n            return;\n        }\n\n        return this.createChart(\n            cellRange,\n            params.chartType,\n            params.chartThemeName,\n            true,\n            true,\n            params.chartContainer,\n            false,\n            undefined,\n            params.chartThemeOverrides,\n            params.unlinkChart);\n    }\n\n    public createCrossFilterChart(params: CreateCrossFilterChartParams): ChartRef | undefined {\n        const cellRange = this.rangeService?.createCellRangeFromCellRangeParams(params.cellRange as CellRangeParams);\n\n        if (!cellRange) {\n            console.warn(\"AG Grid - unable to create chart as no range is selected\");\n            return;\n        }\n\n        const crossFiltering = true;\n\n        const suppressChartRangesSupplied = typeof params.suppressChartRanges !== 'undefined' && params.suppressChartRanges !== null;\n        const suppressChartRanges = suppressChartRangesSupplied ? params.suppressChartRanges : true;\n\n        return this.createChart(\n            cellRange,\n            params.chartType,\n            params.chartThemeName,\n            false,\n            suppressChartRanges,\n            params.chartContainer,\n            false,\n            params.aggFunc,\n            params.chartThemeOverrides,\n            params.unlinkChart,\n            crossFiltering);\n    }\n\n    private createChart(\n        cellRange: CellRange,\n        chartType: ChartType,\n        chartThemeName?: string,\n        pivotChart = false,\n        suppressChartRanges = false,\n        container?: HTMLElement,\n        switchCategorySeries = false,\n        aggFunc?: string | IAggFunc,\n        chartThemeOverrides?: AgChartThemeOverrides,\n        unlinkChart = false,\n        crossFiltering  = false,\n        chartOptionsToRestore?: AgChartThemeOverrides,\n        chartPaletteToRestore?: AgChartThemePalette,\n        seriesChartTypes?: SeriesChartType[]): ChartRef | undefined {\n        \n        if (isEnterpriseChartType(chartType) && !this.isEnterprise()) {\n            ModuleRegistry.__warnEnterpriseChartDisabled(chartType);\n            return undefined;\n        }\n\n        const createChartContainerFunc = this.gridOptionsService.getCallback('createChartContainer');\n\n        const params: GridChartParams = {\n            chartId: this.generateId(),\n            pivotChart,\n            cellRange,\n            chartType: getCanonicalChartType(chartType),\n            chartThemeName,\n            insideDialog: !(container || createChartContainerFunc),\n            suppressChartRanges,\n            switchCategorySeries,\n            aggFunc,\n            chartThemeOverrides,\n            unlinkChart,\n            crossFiltering,\n            crossFilteringContext: this.crossFilteringContext,\n            chartOptionsToRestore,\n            chartPaletteToRestore,\n            seriesChartTypes,\n            crossFilteringResetCallback: () => this.activeChartComps.forEach(c => c.crossFilteringReset()),\n        };\n\n        const chartComp = new GridChartComp(params);\n        this.context.createBean(chartComp);\n\n        const chartRef = this.createChartRef(chartComp);\n\n        if (container) {\n            // if container exists, means developer initiated chart create via API, so place in provided container\n            container.appendChild(chartComp.getGui());\n\n            // if the chart container was placed outside an element that\n            // has the grid's theme, we manually add the current theme to\n            // make sure all styles for the chartMenu are rendered correctly\n            const theme = this.environment.getTheme();\n\n            if (theme.el && !theme.el.contains(container)) {\n                container.classList.add(theme.theme!);\n            }\n        } else if (createChartContainerFunc) {\n            // otherwise, user created chart via grid UI, check if developer provides containers (e.g. if the application\n            // is using its own dialogs rather than the grid provided dialogs)\n            createChartContainerFunc(chartRef);\n        } else {\n            // add listener to remove from active charts list when charts are destroyed, e.g. closing chart dialog\n            chartComp.addEventListener(\n                GridChartComp.EVENT_DESTROYED,\n                () => {\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                });\n        }\n\n        return chartRef;\n    }\n\n    private createChartRef(chartComp: GridChartComp): ChartRef {\n        const chartRef: ChartRef = {\n            destroyChart: () => {\n                if (this.activeCharts.has(chartRef)) {\n                    this.context.destroyBean(chartComp);\n                    this.activeChartComps.delete(chartComp);\n                    this.activeCharts.delete(chartRef);\n                }\n            },\n            chartElement: chartComp.getGui(),\n            chart: chartComp.getUnderlyingChart(),\n            chartId: chartComp.getChartModel().chartId\n        };\n\n        this.activeCharts.add(chartRef);\n        this.activeChartComps.add(chartComp);\n\n        return chartRef;\n    }\n\n    private getSelectedRange(): CellRange {\n        const ranges = this.rangeService.getCellRanges();\n        return ranges.length > 0 ? ranges[0] : {} as CellRange;\n    }\n\n    private generateId(): string {\n        return `id-${Math.random().toString(36).substring(2, 18)}`;\n    }\n\n    @PreDestroy\n    private destroyAllActiveCharts(): void {\n        this.activeCharts.forEach(chart => chart.destroyChart());\n    }\n}\n", "import {\n    _,\n    AgDialog,\n    Autowired,\n    CellRange,\n    ChartCreated,\n    ChartDestroyed,\n    ChartModel,\n    ChartToolPanelName,\n    ChartType,\n    Component,\n    Events,\n    IAggFunc,\n    PopupService,\n    PostConstruct,\n    RefSelector,\n    SeriesChartType,\n    UpdateChartParams,\n    WithoutGridCommon,\n    FocusService,\n} from \"@ag-grid-community/core\";\n\nimport { AgChartInstance, AgChartThemeOverrides, AgChartThemePalette } from \"ag-charts-community\";\nimport { ChartMenu } from \"./menu/chartMenu\";\nimport { TitleEdit } from \"./chartTitle/titleEdit\";\nimport { ChartController, DEFAULT_THEMES } from \"./chartController\";\nimport { ChartDataModel, ChartModelParams } from \"./model/chartDataModel\";\nimport { BarChartProxy } from \"./chartProxies/cartesian/barChartProxy\";\nimport { AreaChartProxy } from \"./chartProxies/cartesian/areaChartProxy\";\nimport { ChartProxy, ChartProxyParams } from \"./chartProxies/chartProxy\";\nimport { LineChartProxy } from \"./chartProxies/cartesian/lineChartProxy\";\nimport { PolarChartProxy } from \"./chartProxies/polar/polarChartProxy\";\nimport { PieChartProxy } from \"./chartProxies/pie/pieChartProxy\";\nimport { ScatterChartProxy } from \"./chartProxies/cartesian/scatterChartProxy\";\nimport { RangeChartProxy } from \"./chartProxies/statistical/rangeChartProxy\";\nimport { HistogramChartProxy } from \"./chartProxies/cartesian/histogramChartProxy\";\nimport { BoxPlotChartProxy } from \"./chartProxies/statistical/boxPlotChartProxy\";\nimport { TreemapChartProxy } from \"./chartProxies/hierarchical/treemapChartProxy\";\nimport { SunburstChartProxy } from \"./chartProxies/hierarchical/sunburstChartProxy\";\nimport { HeatmapChartProxy } from './chartProxies/specialized/heatmapChartProxy';\nimport { WaterfallChartProxy } from './chartProxies/cartesian/waterfallChartProxy';\nimport { ChartTranslationKey, ChartTranslationService } from \"./services/chartTranslationService\";\nimport { ChartCrossFilterService } from \"./services/chartCrossFilterService\";\nimport { CrossFilteringContext } from \"../chartService\";\nimport { ChartOptionsService } from \"./services/chartOptionsService\";\nimport { ComboChartProxy } from \"./chartProxies/combo/comboChartProxy\";\nimport { getCanonicalChartType, isHierarchical } from \"./utils/seriesTypeMapper\";\nimport { ChartMenuParamsFactory } from './menu/chartMenuParamsFactory';\nimport { ChartMenuContext } from \"./menu/chartMenuContext\";\nimport { deepMerge } from './utils/object';\nimport { ChartMenuService, CHART_TOOL_PANEL_MENU_OPTIONS } from \"./services/chartMenuService\";\n\nexport interface GridChartParams {\n    chartId: string;\n    pivotChart: boolean;\n    cellRange: CellRange;\n    chartType: ChartType;\n    chartThemeName?: string;\n    insideDialog: boolean;\n    suppressChartRanges: boolean;\n    switchCategorySeries: boolean,\n    aggFunc?: string | IAggFunc;\n    chartThemeOverrides?: AgChartThemeOverrides;\n    unlinkChart?: boolean;\n    crossFiltering: boolean;\n    crossFilteringContext: CrossFilteringContext;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes?: SeriesChartType[];\n    crossFilteringResetCallback?: () => void;\n}\n\nexport class GridChartComp extends Component {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-chart\" tabindex=\"-1\">\n            <div ref=\"eChartContainer\" tabindex=\"-1\" class=\"ag-chart-components-wrapper\">\n                <div ref=\"eChart\" class=\"ag-chart-canvas-wrapper\"></div>\n                <div ref=\"eEmpty\" class=\"ag-chart-empty-text ag-unselectable\"></div>\n            </div>\n            <div ref=\"eTitleEditContainer\"></div>\n            <div ref=\"eMenuContainer\" class=\"ag-chart-docked-container\" style=\"min-width: 0px;\"></div>\n        </div>`;\n\n    @RefSelector('eChart') private readonly eChart: HTMLElement;\n    @RefSelector('eChartContainer') private readonly eChartContainer: HTMLElement;\n    @RefSelector('eMenuContainer') private readonly eMenuContainer: HTMLElement;\n    @RefSelector('eEmpty') private readonly eEmpty: HTMLElement;\n    @RefSelector('eTitleEditContainer') private readonly eTitleEditContainer: HTMLDivElement;\n\n    @Autowired('chartCrossFilterService') private readonly crossFilterService: ChartCrossFilterService;\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('popupService') private readonly popupService: PopupService;\n\n    private chartMenu: ChartMenu;\n    private titleEdit: TitleEdit;\n    private chartDialog: AgDialog;\n\n    private chartController: ChartController;\n    private chartOptionsService: ChartOptionsService;\n    private chartMenuContext: ChartMenuContext;\n\n    private chartProxy: ChartProxy;\n    private chartType: ChartType;\n    private chartEmpty: boolean;\n\n    private readonly params: GridChartParams;\n\n    // function to clean up the 'color-scheme-change' event listener\n    private onDestroyColorSchemeChangeListener: () => void;\n\n    constructor(params: GridChartParams) {\n        super(GridChartComp.TEMPLATE);\n        this.params = params;\n    }\n\n    @PostConstruct\n    public init(): void {\n        const modelParams: ChartModelParams = {\n            chartId: this.params.chartId,\n            pivotChart: this.params.pivotChart,\n            chartType: getCanonicalChartType(this.params.chartType),\n            chartThemeName: this.getThemeName(),\n            switchCategorySeries: this.params.switchCategorySeries,\n            aggFunc: this.params.aggFunc,\n            cellRange: this.params.cellRange,\n            suppressChartRanges: this.params.suppressChartRanges,\n            unlinkChart: this.params.unlinkChart,\n            crossFiltering: this.params.crossFiltering,\n            seriesChartTypes: this.params.seriesChartTypes,\n        };\n\n        const isRtl = this.gridOptionsService.get('enableRtl');\n\n        this.addCssClass(isRtl ? 'ag-rtl' : 'ag-ltr');\n\n        // only the chart controller interacts with the chart model\n        const model = this.createBean(new ChartDataModel(modelParams));\n        this.chartController = this.createManagedBean(new ChartController(model));\n        this.chartOptionsService = this.createManagedBean(new ChartOptionsService(this.chartController));\n\n        this.validateCustomThemes();\n\n        // create chart before dialog to ensure dialog is correct size\n        this.createChart();\n\n        if (this.params.insideDialog) {\n            this.addDialog();\n        }\n\n        this.addMenu();\n        this.addTitleEditComp();\n\n        this.addManagedListener(this.getGui(), 'focusin', this.setActiveChartCellRange.bind(this));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_MODEL_UPDATE, this.update.bind(this));\n\n        this.addManagedPropertyListeners(['chartThemeOverrides', 'chartThemes'], this.reactivePropertyUpdate.bind(this));\n\n        this.update();\n        this.raiseChartCreatedEvent();\n    }\n\n    private createChart(): void {\n        // if chart already exists, destroy it and remove it from DOM\n        let chartInstance: AgChartInstance | undefined = undefined;\n        if (this.chartProxy) {\n            chartInstance = this.chartProxy.destroy({ keepChartInstance: true });\n        }\n\n        const crossFilterCallback = (event: any, reset: boolean) => {\n            const ctx = this.params.crossFilteringContext;\n            ctx.lastSelectedChartId = reset ? '' : this.chartController.getChartId();\n            if (reset) {\n                this.params.crossFilteringResetCallback!();\n            }\n            this.crossFilterService.filter(event, reset);\n        };\n\n        const chartType = this.chartController.getChartType();\n        const chartProxyParams: ChartProxyParams = {\n            chartType,\n            chartInstance,\n            getChartThemeName: this.getChartThemeName.bind(this),\n            getChartThemes: this.getChartThemes.bind(this),\n            customChartThemes: this.gridOptionsService.get('customChartThemes'),\n            getGridOptionsChartThemeOverrides: () => this.getGridOptionsChartThemeOverrides(),\n            getExtraPaddingDirections: () => this.chartMenu?.getExtraPaddingDirections() ?? [],\n            apiChartThemeOverrides: this.params.chartThemeOverrides,\n            crossFiltering: this.params.crossFiltering,\n            crossFilterCallback,\n            parentElement: this.eChart,\n            grouping: this.chartController.isGrouping(),\n            chartThemeToRestore: this.params.chartThemeName,\n            chartOptionsToRestore: this.params.chartOptionsToRestore,\n            chartPaletteToRestore: this.params.chartPaletteToRestore,\n            seriesChartTypes: this.chartController.getSeriesChartTypes(),\n            translate: (toTranslate: ChartTranslationKey) => this.chartTranslationService.translate(toTranslate),\n        };\n\n        // ensure 'restoring' options are not reused when switching chart types\n        this.params.chartOptionsToRestore = undefined;\n\n        // set local state used to detect when chart changes\n        this.chartType = chartType;\n\n        this.chartProxy = GridChartComp.createChartProxy(chartProxyParams);\n        if (!this.chartProxy) {\n            console.warn('AG Grid: invalid chart type supplied: ', chartProxyParams.chartType);\n            return;\n        }\n\n        const canvas = this.eChart.querySelector('canvas');\n        if (canvas) {\n            canvas.classList.add('ag-charts-canvas');\n        }\n\n        this.chartController.setChartProxy(this.chartProxy);\n        this.createMenuContext();\n        this.titleEdit && this.titleEdit.refreshTitle(this.chartMenuContext);\n    }\n\n    private createMenuContext(): void {\n        if (this.chartMenuContext) { return; }\n        const chartMenuParamsFactory = this.createManagedBean(new ChartMenuParamsFactory(this.chartOptionsService.getChartThemeOverridesProxy()));\n        const chartAxisMenuParamsFactory = this.createManagedBean(new ChartMenuParamsFactory(this.chartOptionsService.getAxisThemeOverridesProxy()));\n        this.chartMenuContext = {\n            chartController: this.chartController,\n            chartOptionsService: this.chartOptionsService,\n            chartMenuParamsFactory,\n            chartAxisMenuParamsFactory\n        }\n    }\n\n    private getChartThemeName(): string {\n        return this.chartController.getChartThemeName();\n    }\n\n    private getChartThemes(): string[] {\n        return this.chartController.getThemeNames();\n    }\n\n    private getGridOptionsChartThemeOverrides(): AgChartThemeOverrides | undefined {\n        return this.gridOptionsService.get('chartThemeOverrides');\n    }\n\n    private static createChartProxy(chartProxyParams: ChartProxyParams): ChartProxy {\n        switch (chartProxyParams.chartType) {\n            case 'column':\n            case 'bar':\n            case 'groupedColumn':\n            case 'stackedColumn':\n            case 'normalizedColumn':\n            case 'groupedBar':\n            case 'stackedBar':\n            case 'normalizedBar':\n                return new BarChartProxy(chartProxyParams);\n            case 'pie':\n            case 'donut':\n            case 'doughnut':\n                return new PieChartProxy(chartProxyParams);\n            case 'area':\n            case 'stackedArea':\n            case 'normalizedArea':\n                return new AreaChartProxy(chartProxyParams);\n            case 'line':\n                return new LineChartProxy(chartProxyParams);\n            case 'scatter':\n            case 'bubble':\n                return new ScatterChartProxy(chartProxyParams);\n            case 'histogram':\n                return new HistogramChartProxy(chartProxyParams);\n            case 'radarLine':\n            case 'radarArea':\n            case 'nightingale':\n            case 'radialColumn':\n            case 'radialBar':\n                return new PolarChartProxy(chartProxyParams);\n            case 'rangeBar':\n                return new RangeChartProxy(chartProxyParams);\n            case 'rangeArea':\n                return new RangeChartProxy(chartProxyParams);\n            case 'boxPlot':\n                return new BoxPlotChartProxy(chartProxyParams);\n            case 'treemap':\n                return new TreemapChartProxy(chartProxyParams);\n            case 'sunburst':\n                return new SunburstChartProxy(chartProxyParams);\n            case 'heatmap':\n                return new HeatmapChartProxy(chartProxyParams);\n            case 'waterfall':\n                return new WaterfallChartProxy(chartProxyParams);\n            case 'columnLineCombo':\n            case 'areaColumnCombo':\n            case 'customCombo':\n                return new ComboChartProxy(chartProxyParams);\n            default:\n                throw `AG Grid: Unable to create chart as an invalid chartType = '${chartProxyParams.chartType}' was supplied.`;\n        }\n    }\n\n    private addDialog(): void {\n        const title = this.chartTranslationService.translate(this.params.pivotChart ? 'pivotChartTitle' : 'rangeChartTitle');\n\n        const { width, height } = this.getBestDialogSize();\n\n        this.chartDialog = new AgDialog({\n            resizable: true,\n            movable: true,\n            maximizable: true,\n            title,\n            width,\n            height,\n            component: this,\n            centered: true,\n            closable: true\n        });\n\n        this.getContext().createBean(this.chartDialog);\n\n        this.chartDialog.addEventListener(AgDialog.EVENT_DESTROYED, () => {\n            this.destroy();\n            this.chartMenuService.hideAdvancedSettings();\n        });\n    }\n\n    private getBestDialogSize(): { width: number, height: number; } {\n        const popupParent = this.popupService.getPopupParent();\n        const maxWidth = _.getAbsoluteWidth(popupParent) * 0.75;\n        const maxHeight = _.getAbsoluteHeight(popupParent) * 0.75;\n        const ratio = 0.553;\n\n        const chart = this.chartProxy.getChart();\n        let width = this.params.insideDialog ? 850 : chart.width;\n        let height = this.params.insideDialog ? 470 : chart.height;\n\n        if (width > maxWidth || height > maxHeight) {\n            width = Math.min(width, maxWidth);\n            height = Math.round(width * ratio);\n\n            if (height > maxHeight) {\n                height = maxHeight;\n                width = Math.min(width, Math.round(height / ratio));\n            }\n        }\n\n        return { width, height };\n    }\n\n    private addMenu(): void {\n        if (!this.params.crossFiltering) {\n            this.chartMenu = this.createBean(new ChartMenu(\n                this.eChartContainer,\n                this.eMenuContainer,\n                this.chartMenuContext\n            ));\n            this.eChartContainer.appendChild(this.chartMenu.getGui());\n        }\n    }\n\n    private addTitleEditComp(): void {\n        this.titleEdit = this.createBean(new TitleEdit(this.chartMenu));\n        this.eTitleEditContainer.appendChild(this.titleEdit.getGui());\n        if (this.chartProxy) {\n            this.titleEdit.refreshTitle(this.chartMenuContext);\n        }\n    }\n\n    public update(params?: UpdateChartParams): void {\n        // update chart model for api.updateChart()\n        if (params?.chartId) {\n            const validUpdate = this.chartController.update(params);\n            if (!validUpdate) {\n                return; // warning already logged!\n            }\n        }\n\n        const updatedChartType = this.chartTypeChanged(params);\n        // If the chart type has changed, grab the theme overrides from the exisiting chart before destroying it,\n        // so that we can retain any compatible theme overrides across different chart types.\n        const persistedThemeOverrides = updatedChartType || this.chartEmpty\n            ? (((updatedChartType) => {\n                const currentChartType = this.chartType;\n                const targetChartType = updatedChartType;\n                const existingChartInstance = this.chartProxy.getChart();\n                const existingChartOptions = existingChartInstance?.getOptions()\n                const existingAxes = existingChartInstance?.axes;\n                return this.chartOptionsService.getPersistedChartThemeOverrides(\n                    existingChartOptions,\n                    existingAxes,\n                    currentChartType,\n                    targetChartType ?? currentChartType,\n                );\n            }))(updatedChartType)\n            : undefined;\n\n        // recreate chart if chart type has changed\n        if (updatedChartType) this.createChart();\n        \n        // combine any provided theme overrides with any retained theme overrides from changing chart type\n        const updatedThemeOverrides = persistedThemeOverrides && params?.chartThemeOverrides\n            ? deepMerge(persistedThemeOverrides, params.chartThemeOverrides)\n            : persistedThemeOverrides || params?.chartThemeOverrides;\n\n        // update chart options if chart type hasn't changed or if overrides are supplied\n        this.updateChart(updatedThemeOverrides);\n\n        if (params?.chartId) {\n            this.chartProxy.getChart().waitForUpdate().then(() => {\n                this.chartController.raiseChartApiUpdateEvent();\n            });\n        }\n    }\n\n    private updateChart(updatedOverrides?: AgChartThemeOverrides): void {\n        const { chartProxy } = this;\n\n        const selectedCols = this.chartController.getSelectedValueColState();\n        const fields = selectedCols.map(c => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.chartController.getChartData();\n        const chartEmpty = this.handleEmptyChart(data, fields);\n\n        this.chartEmpty = chartEmpty;\n        if (chartEmpty) {\n            // We don't have enough data to reinstantiate the chart with the new chart type,\n            // but we still want to persist any theme overrides for when the data is present\n            if (updatedOverrides) this.chartController.updateThemeOverrides(updatedOverrides);\n            return;\n        }\n\n        let chartUpdateParams = this.chartController.getChartUpdateParams(updatedOverrides);\n        chartProxy.update(chartUpdateParams);\n\n        this.chartProxy.getChart().waitForUpdate().then(() => {\n            this.chartController.raiseChartUpdatedEvent();\n        });\n\n        this.titleEdit.refreshTitle(this.chartMenuContext);\n    }\n\n    private chartTypeChanged(updateParams?: UpdateChartParams): ChartType | null {\n        const [currentType, updatedChartType] = [this.chartController.getChartType(), updateParams?.chartType];\n        const targetChartType = updatedChartType ? getCanonicalChartType(updatedChartType) : undefined;\n        // If the grid chart component is out of sync with the existing chart instance type, return the correct chart type\n        if (this.chartType !== currentType) return targetChartType ?? currentType;\n        // If the target chart type is different to the current chart type, return the new chart type\n        if (targetChartType && (currentType !== targetChartType)) return targetChartType;\n        // Otherwise nothing has changed\n        return null;\n    }\n\n    public getChartModel(): ChartModel {\n        return this.chartController.getChartModel();\n    }\n\n    public getChartImageDataURL(fileFormat?: string): string {\n        return this.chartProxy.getChartImageDataURL(fileFormat);\n    }\n\n    private handleEmptyChart(data: any[], fields: any[]): boolean {\n        const pivotModeDisabled = this.chartController.isPivotChart() && !this.chartController.isPivotMode();\n        \n        // Determine the minimum number of fields based on the chart type\n        const chartType = this.chartController.getChartType();\n        let minFieldsRequired = 1;\n        if (this.chartController.isActiveXYChart()) {\n            minFieldsRequired = chartType === 'bubble' ? 3 : 2;\n        } else if (isHierarchical(chartType)) {\n            minFieldsRequired = 0;\n        }\n\n        const isEmptyChart = fields.length < minFieldsRequired || data.length === 0;\n\n        if (this.eChart) {\n            const isEmpty = pivotModeDisabled || isEmptyChart;\n            _.setDisplayed(this.eChart, !isEmpty);\n            _.setDisplayed(this.eEmpty, isEmpty);\n        }\n\n        if (pivotModeDisabled) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('pivotChartRequiresPivotMode');\n            return true;\n        }\n\n        if (isEmptyChart) {\n            this.eEmpty.innerText = this.chartTranslationService.translate('noDataToChart');\n            return true;\n        }\n\n        return false;\n    }\n\n    public downloadChart(dimensions?: { width: number, height: number }, fileName?: string, fileFormat?: string): void {\n        this.chartProxy.downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public openChartToolPanel(panel?: ChartToolPanelName) {\n        const menuPanel = panel ? CHART_TOOL_PANEL_MENU_OPTIONS[panel] : panel;\n        this.chartMenu.showMenu({ panel: menuPanel });\n    }\n\n    public closeChartToolPanel() {\n        this.chartMenu.hideMenu();\n    }\n\n    public getChartId(): string {\n        return this.chartController.getChartId();\n    }\n\n    public getUnderlyingChart() {\n        return this.chartProxy.getChartRef();\n    }\n\n    public crossFilteringReset(): void {\n        this.chartProxy.crossFilteringReset();\n    }\n\n    private setActiveChartCellRange(focusEvent: FocusEvent): void {\n        if (this.getGui().contains(focusEvent.relatedTarget as HTMLElement)) {\n            return;\n        }\n\n        this.chartController.setChartRange(true);\n        this.focusService.clearFocusedCell();\n    }\n\n    private getThemeName(): string {\n        const availableChartThemes = this.gridOptionsService.get('chartThemes') || DEFAULT_THEMES;\n\n        if (availableChartThemes.length === 0) {\n            throw new Error('Cannot create chart: no chart themes available.');\n        }\n\n        const { chartThemeName } = this.params;\n        return _.includes(availableChartThemes, chartThemeName) ? chartThemeName! : availableChartThemes[0];\n    }\n\n    private getAllKeysInObjects(objects: any[]): string[] {\n        const allValues: any = {};\n    \n        objects.filter(obj => obj != null).forEach(obj => {\n            Object.keys(obj).forEach(key => allValues[key] = null);\n        });\n    \n        return Object.keys(allValues);\n    }\n\n    private validateCustomThemes() {\n        const suppliedThemes = this.getChartThemes();\n        const customChartThemes = this.gridOptionsService.get('customChartThemes');\n        if (customChartThemes) {\n            this.getAllKeysInObjects([customChartThemes]).forEach(customThemeName => {\n                if (!_.includes(suppliedThemes, customThemeName)) {\n                    console.warn(\"AG Grid: a custom chart theme with the name '\" + customThemeName + \"' has been \" +\n                        \"supplied but not added to the 'chartThemes' list\");\n                }\n            });\n        }\n    }\n\n    private reactivePropertyUpdate(): void {\n        // switch to the first theme if the current theme is unavailable\n        this.chartController.setChartThemeName(this.getThemeName(), true);\n\n        const chartId = this.getChartId();\n        const modelType = this.chartController.isCrossFilterChart()\n            ? 'crossFilter'\n            : this.getChartModel().modelType;\n\n        // standalone requires that `undefined` / `null` values are supplied as `{}`\n        const chartThemeOverrides = this.gridOptionsService.get('chartThemeOverrides') || {};\n\n        this.update({\n            type: `${modelType}ChartUpdate`,\n            chartId,\n            chartThemeOverrides\n        });\n    }\n\n    private raiseChartCreatedEvent(): void {\n        const event: WithoutGridCommon<ChartCreated> = {\n            type: Events.EVENT_CHART_CREATED,\n            chartId: this.chartController.getChartId()\n        };\n\n        this.chartProxy.getChart().waitForUpdate().then(() => {\n            this.eventService.dispatchEvent(event);\n        });\n    }\n\n    private raiseChartDestroyedEvent(): void {\n        const event: WithoutGridCommon<ChartDestroyed> = {\n            type: Events.EVENT_CHART_DESTROYED,\n            chartId: this.chartController.getChartId(),\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        if (this.chartProxy) {\n            this.chartProxy.destroy();\n        }\n\n        this.destroyBean(this.chartMenu);\n        this.destroyBean(this.titleEdit);\n\n        // don't want to invoke destroy() on the Dialog (prevents destroy loop)\n        if (this.chartDialog && this.chartDialog.isAlive()) {\n            this.destroyBean(this.chartDialog);\n        }\n\n        this.onDestroyColorSchemeChangeListener?.();\n\n        // if the user is providing containers for the charts, we need to clean up, otherwise the old chart\n        // data will still be visible although the chart is no longer bound to the grid\n        const eGui = this.getGui();\n        _.clearElement(eGui);\n        // remove from parent, so if user provided container, we detach from the provided dom element\n        _.removeFromParent(eGui);\n\n        this.raiseChartDestroyedEvent();\n    }\n}\n", "import {\n    _,\n    AgPanel,\n    AgPromise,\n    Autowired,\n    ChartCreated,\n    ChartMenuOptions,\n    ChartToolPanelMenuOptions,\n    Component,\n    Events,\n    PostConstruct\n} from \"@ag-grid-community/core\";\n\nimport { TabbedChartMenu } from \"./tabbedChartMenu\";\nimport { ChartController } from \"../chartController\";\nimport { ExtraPaddingDirection } from \"../chartProxies/chartProxy\";\nimport { ChartMenuListFactory } from \"./chartMenuList\";\nimport { ChartToolbar } from \"./chartToolbar\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\nimport { ChartMenuContext } from \"./chartMenuContext\";\n\ntype ChartToolbarButtons = {\n    [key in ChartMenuOptions]: {\n        iconName: string, callback: (eventSource: HTMLElement) => void\n    }\n};\n\nexport class ChartMenu extends Component {\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n    @Autowired('chartMenuListFactory') private chartMenuListFactory: ChartMenuListFactory;\n\n    private readonly chartController: ChartController;\n\n    private buttons: ChartToolbarButtons = {\n        chartSettings: { iconName: 'menu', callback: () => this.showMenu({ panel: this.defaultPanel }) },\n        chartData: { iconName: 'menu', callback: () => this.showMenu({ panel: \"chartData\" }) },\n        chartFormat: { iconName: 'menu', callback: () => this.showMenu({ panel: \"chartFormat\" }) },\n        chartLink: { iconName: 'linked', callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext) },\n        chartUnlink: { iconName: 'unlinked', callback: () => this.chartMenuService.toggleLinked(this.chartMenuContext) },\n        chartDownload: { iconName: 'save', callback: () => this.chartMenuService.downloadChart(this.chartMenuContext) },\n        chartMenu: { iconName: 'menuAlt', callback: (eventSource: HTMLElement) => this.showMenuList(eventSource) }\n    };\n\n    private panels: ChartToolPanelMenuOptions[] = [];\n    private defaultPanel: ChartToolPanelMenuOptions;\n\n    private static TEMPLATE = /* html */ `<div></div>`;\n\n    private eHideButton: HTMLButtonElement;\n    private eHideButtonIcon: HTMLSpanElement;\n    private chartToolbar: ChartToolbar;\n    private tabbedMenu: TabbedChartMenu;\n    private menuPanel?: AgPanel;\n    private menuVisible = false;\n    private chartToolbarOptions: ChartMenuOptions[];\n    private legacyFormat: boolean;\n\n    constructor(\n        private readonly eChartContainer: HTMLElement,\n        private readonly eMenuPanelContainer: HTMLElement,\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(ChartMenu.TEMPLATE);\n        this.chartController = chartMenuContext.chartController;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.legacyFormat = this.chartMenuService.isLegacyFormat();\n\n        this.chartToolbar = this.createManagedBean(new ChartToolbar());\n        this.getGui().appendChild(this.chartToolbar.getGui());\n        if (this.legacyFormat) {\n            this.createLegacyToggleButton();\n        }\n        \n        this.refreshToolbarAndPanels();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHART_CREATED, (e: ChartCreated) => {\n            if (e.chartId === this.chartController.getChartId()) {\n                const showDefaultToolPanel = Boolean(this.gridOptionsService.get('chartToolPanelsDef')?.defaultToolPanel);\n                if (showDefaultToolPanel) {\n                    this.showMenu({ panel: this.defaultPanel, animate: false, suppressFocus: true });\n                }\n            }\n        });\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_LINKED_CHANGED, this.refreshToolbarAndPanels.bind(this));\n\n        this.refreshMenuClasses();\n\n        if (this.legacyFormat && !this.gridOptionsService.get('suppressChartToolPanelsButton') && this.panels.length > 0) {\n            this.getGui().classList.add('ag-chart-tool-panel-button-enable');\n            if (this.eHideButton) {\n                this.addManagedListener(this.eHideButton, 'click', this.toggleMenu.bind(this));\n            }\n        }\n        if (!this.legacyFormat) {\n            this.getGui().classList.add('ag-chart-menu-wrapper');\n        }\n\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, this.refreshToolbarAndPanels.bind(this));\n    }\n\n    public isVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public getExtraPaddingDirections(): ExtraPaddingDirection[]  {\n        const topItems: ChartMenuOptions[] = ['chartMenu', 'chartLink', 'chartUnlink', 'chartDownload'];\n        const rightItems: ChartMenuOptions[] = ['chartSettings', 'chartData', 'chartFormat'];\n\n        const result: ExtraPaddingDirection[] = [];\n        if (topItems.some(v => this.chartToolbarOptions.includes(v))) {\n            result.push('top');\n        }\n\n        if (rightItems.some(v => this.chartToolbarOptions.includes(v))) {\n            result.push(this.gridOptionsService.get('enableRtl') ? 'left' : 'right');\n        }\n\n        return result;\n    }\n\n    private createLegacyToggleButton(): void {\n        const eDocument = this.gridOptionsService.getDocument();\n        this.eHideButton = eDocument.createElement('button');\n        this.eHideButton.classList.add('ag-button', 'ag-chart-menu-close');\n        this.eHideButtonIcon = eDocument.createElement('span');\n        this.eHideButtonIcon.classList.add('ag-icon', 'ag-icon-contracted');\n        this.eHideButton.appendChild(this.eHideButtonIcon);\n        this.getGui().appendChild(this.eHideButton);\n    }\n\n    private refreshToolbarAndPanels(): void {\n        this.initToolbarOptionsAndPanels();\n        this.updateToolbar();\n    }\n\n    private initToolbarOptionsAndPanels(): void {\n        const {\n            panels,\n            defaultPanel,\n            chartToolbarOptions\n        } = this.chartMenuService.getToolbarOptionsAndPanels(this.chartController);\n        this.panels = panels;\n        this.defaultPanel = defaultPanel;\n        this.chartToolbarOptions = chartToolbarOptions;\n    }\n\n    private updateToolbar(): void {\n        const buttons = this.chartToolbarOptions.map(buttonName => {\n            const { iconName, callback } = this.buttons[buttonName];\n            return {\n                buttonName,\n                iconName,\n                callback\n            };\n        });\n        this.chartToolbar.updateParams({ buttons });\n    }\n\n    private createMenuPanel(defaultTab: number): AgPromise<AgPanel> {\n        const width = this.environment.chartMenuPanelWidth();\n\n        const menuPanel = this.menuPanel = this.createBean(new AgPanel({\n            minWidth: width,\n            width,\n            height: '100%',\n            closable: true,\n            hideTitleBar: true,\n            cssIdentifier: 'chart-menu'\n        }));\n\n        menuPanel.setParentComponent(this);\n        this.eMenuPanelContainer.appendChild(menuPanel.getGui());\n\n        this.tabbedMenu = this.createBean(new TabbedChartMenu(\n            this.panels,\n            this.chartMenuContext\n        ));\n\n        this.addManagedListener(this.tabbedMenu, TabbedChartMenu.EVENT_CLOSED, () => {\n            this.hideMenu(false);\n        });\n\n        this.addManagedListener(\n            menuPanel,\n            Component.EVENT_DESTROYED,\n            () => this.destroyBean(this.tabbedMenu)\n        );\n\n        return new AgPromise((res: (arg0: any) => void) => {\n            window.setTimeout(() => {\n                menuPanel.setBodyComponent(this.tabbedMenu);\n                this.tabbedMenu.showTab(defaultTab);\n                res(menuPanel);\n                if (this.legacyFormat) {\n                    this.addManagedListener(\n                        this.eChartContainer,\n                        'click',\n                        (event: MouseEvent) => {\n                            if (this.getGui().contains(event.target as HTMLElement)) {\n                                return;\n                            }\n\n                            if (this.menuVisible) {\n                                this.hideMenu();\n                            }\n                        }\n                    );\n                }\n            }, 100);\n        });\n    }\n\n    private showContainer(eventSource?: HTMLElement, suppressFocus?: boolean) {\n        if (!this.menuPanel) { return; }\n\n        this.menuVisible = true;\n        this.showParent(this.menuPanel.getWidth()!);\n        this.refreshMenuClasses();\n        this.tabbedMenu.showMenu(eventSource, suppressFocus);\n    }\n\n    private toggleMenu() {\n        this.menuVisible ? this.hideMenu(this.legacyFormat) : this.showMenu({ animate: this.legacyFormat });\n    }\n\n    public showMenu(params: {\n        /**\n         * Menu panel to show. If empty, shows the existing menu, or creates the default menu if menu panel has not been created\n         */\n        panel?: ChartToolPanelMenuOptions,\n        /**\n         * Whether to animate the menu opening\n         */\n        animate?: boolean,\n        eventSource?: HTMLElement,\n        suppressFocus?: boolean\n    }): void {\n        const { panel, animate = true, eventSource, suppressFocus } = params;\n        if (!animate) {\n            this.eMenuPanelContainer.classList.add('ag-no-transition');\n        }\n\n        if (this.menuPanel && !panel) {\n            this.showContainer(eventSource, suppressFocus);\n        } else {\n            const menuPanel = panel || this.defaultPanel;\n            let tab = this.panels.indexOf(menuPanel);\n            if (tab < 0) {\n                console.warn(`AG Grid: '${panel}' is not a valid Chart Tool Panel name`);\n                tab = this.panels.indexOf(this.defaultPanel)\n            }\n    \n            if (this.menuPanel) {\n                this.tabbedMenu.showTab(tab);\n                this.showContainer(eventSource, suppressFocus);\n            } else {\n                this.createMenuPanel(tab).then(() => this.showContainer(eventSource, suppressFocus));\n            }\n        }\n\n\n        if (!animate) {\n            // Wait for menu to render\n            setTimeout(() => {\n                if (!this.isAlive()) { return; }\n                this.eMenuPanelContainer.classList.remove('ag-no-transition');\n            }, 500);\n        }\n    }\n\n    public hideMenu(animate: boolean = true): void {\n        if (!animate) {\n            this.eMenuPanelContainer.classList.add('ag-no-transition');\n        }\n        this.hideParent();\n\n        window.setTimeout(() => {\n            this.menuVisible = false;\n            this.refreshMenuClasses();\n            if (!animate) {\n                this.eMenuPanelContainer.classList.remove('ag-no-transition');\n            }\n        }, 500);\n    }\n\n    private refreshMenuClasses() {\n        this.eChartContainer.classList.toggle('ag-chart-menu-visible', this.menuVisible);\n        this.eChartContainer.classList.toggle('ag-chart-menu-hidden', !this.menuVisible);\n\n        if (this.legacyFormat && !this.gridOptionsService.get('suppressChartToolPanelsButton')) {\n            this.eHideButtonIcon.classList.toggle('ag-icon-contracted', this.menuVisible);\n            this.eHideButtonIcon.classList.toggle('ag-icon-expanded', !this.menuVisible);\n        }\n    }\n\n    private showParent(width: number): void {\n        this.eMenuPanelContainer.style.minWidth = `${width}px`;\n    }\n\n    private hideParent(): void {\n        this.eMenuPanelContainer.style.minWidth = '0';\n    }\n\n    private showMenuList(eventSource: HTMLElement): void {\n        this.chartMenuListFactory.showMenuList({\n            eventSource,\n            showMenu: () => this.showMenu({ animate: false, eventSource }),\n            chartMenuContext: this.chartMenuContext\n        });\n    }\n\n    protected destroy() {\n        super.destroy();\n\n        if (this.menuPanel && this.menuPanel.isAlive()) {\n            this.destroyBean(this.menuPanel);\n        }\n\n        if (this.tabbedMenu && this.tabbedMenu.isAlive()) {\n            this.destroyBean(this.tabbedMenu);\n        }\n    }\n}\n", "import {\n    AgPromise,\n    Autowired,\n    ChartMenuOptions,\n    Component,\n    PostConstruct,\n    TabbedItem,\n    TabbedLayout\n} from \"@ag-grid-community/core\";\nimport { ChartDataPanel } from \"./data/chartDataPanel\";\nimport { FormatPanel } from \"./format/formatPanel\";\nimport { ChartSettingsPanel } from \"./settings/chartSettingsPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../services/chartTranslationService\";\nimport { ChartMenuContext } from \"./chartMenuContext\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\n\nexport class TabbedChartMenu extends Component {\n    public static EVENT_CLOSED = 'closed';\n    public static TAB_DATA = 'data';\n    public static TAB_FORMAT = 'format';\n\n    private tabbedLayout: TabbedLayout;\n    private tabs: TabbedItem[] = [];\n    private eventSource?: HTMLElement;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n\n    constructor(\n        private readonly panels: ChartMenuOptions[],\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.panels.forEach(panel => {\n            const panelType = panel.replace('chart', '').toLowerCase() as 'settings' | 'data' | 'format';\n            const panelComp = this.createPanel(panelType);\n            const tabItem = this.createTab(panel, panelType, panelComp);\n\n            this.tabs.push(tabItem);\n            this.addDestroyFunc(() => this.destroyBean(panelComp));\n        });\n\n        this.tabbedLayout = new TabbedLayout({\n            items: this.tabs,\n            cssClass: 'ag-chart-tabbed-menu',\n            keepScrollPosition: true,\n            suppressFocusBodyOnOpen: true,\n            suppressTrapFocus: true,\n            enableCloseButton: !this.chartMenuService.isLegacyFormat(),\n            closeButtonAriaLabel: this.chartTranslationService.translate('ariaChartMenuClose'),\n            onCloseClicked: () => {\n                this.eventSource?.focus({ preventScroll: true });\n                this.dispatchEvent({ type: TabbedChartMenu.EVENT_CLOSED });\n            }\n        });\n        this.getContext().createBean(this.tabbedLayout);\n    }\n\n    private createTab(\n        name: ChartMenuOptions,\n        title: ChartTranslationKey,\n        panelComp: Component,\n    ): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-chart-tab', `ag-chart-${title}`);\n\n        this.getContext().createBean(panelComp);\n\n        eWrapperDiv.appendChild(panelComp.getGui());\n\n        const titleEl = document.createElement('div');\n        const translatedTitle = this.chartTranslationService.translate(title);\n        titleEl.innerText = translatedTitle;\n\n        return {\n            title: titleEl,\n            titleLabel: translatedTitle,\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            getScrollableContainer: () => {\n                const scrollableContainer = eWrapperDiv.querySelector('.ag-scrollable-container');\n                return (scrollableContainer || eWrapperDiv) as HTMLElement;\n            },\n            name\n        };\n    }\n\n    public showTab(tab: number) {\n        const tabItem = this.tabs[tab];\n        this.tabbedLayout.showItem(tabItem);\n    }\n\n    public getGui(): HTMLElement {\n        return this.tabbedLayout && this.tabbedLayout.getGui();\n    }\n\n    public showMenu(eventSource?: HTMLElement, suppressFocus?: boolean): void {\n        this.eventSource = eventSource;\n        if (!suppressFocus) {\n            this.tabbedLayout?.focusHeader(true);\n        }\n    }\n\n    protected destroy(): void {\n        if (this.parentComponent && this.parentComponent.isAlive()) {\n            this.destroyBean(this.parentComponent);\n        }\n        super.destroy();\n    }\n\n    private createPanel(panelType: string): Component {\n        const { chartController, chartOptionsService } = this.chartMenuContext;\n        switch (panelType) {\n            case TabbedChartMenu.TAB_DATA:\n                return new ChartDataPanel(chartController, chartOptionsService);\n            case TabbedChartMenu.TAB_FORMAT:\n                return new FormatPanel(this.chartMenuContext);\n            default:\n                return new ChartSettingsPanel(chartController);\n        }\n    }\n}\n", "import {\n    _,\n    AutoScrollService,\n    Autowired,\n    ChartDataPanel as ChartDataPanelType,\n    ChartType,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ColState } from \"../../model/chartDataModel\";\nimport { ChartOptionsService } from \"../../services/chartOptionsService\";\nimport { ChartTranslationService } from '../../services/chartTranslationService';\nimport { CategoriesDataPanel } from \"./categoriesDataPanel\";\nimport { SeriesDataPanel } from \"./seriesDataPanel\";\nimport { SeriesChartTypePanel } from \"./seriesChartTypePanel\";\nimport { SwitchCategorySeriesDataPanel } from './switchCategorySeriesDataPanel';\nimport { getMaxNumCategories, getMaxNumSeries, supportsInvertedCategorySeries } from '../../utils/seriesTypeMapper';\nimport { ChartMenuService } from '../../services/chartMenuService';\n\nconst DefaultDataPanelDef: ChartDataPanelType = {\n    groups: [\n        { type: 'categories', isOpen: true },\n        { type: 'series', isOpen: true },\n        { type: 'seriesChartType', isOpen: true }\n    ]\n};\n\nexport class ChartDataPanel extends Component {\n    public static TEMPLATE = /* html */ `<div class=\"ag-chart-data-wrapper ag-scrollable-container\"></div>`;\n    \n    @Autowired('chartTranslationService') protected readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n\n    private autoScrollService: AutoScrollService;\n    private chartType?: ChartType;\n    private isSwitchCategorySeriesToggled = false;\n    private categoriesDataPanel?: CategoriesDataPanel;\n    private seriesDataPanel?: SeriesDataPanel;\n    private seriesChartTypePanel?: SeriesChartTypePanel;\n    private switchCategorySeriesPanel?: SwitchCategorySeriesDataPanel;\n\n    constructor(\n        private readonly chartController: ChartController,\n        private readonly chartOptionsService: ChartOptionsService,\n    ) {\n        super(ChartDataPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    public init() {\n        this.switchCategorySeriesPanel = this.addComponent(this.createManagedBean(new SwitchCategorySeriesDataPanel(\n            () => this.chartController.isCategorySeriesSwitched(),\n            (value: boolean) => this.chartController.switchCategorySeries(value)\n        )));\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n\n        this.createAutoScrollService();\n        this.updatePanels();\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_MODEL_UPDATE, this.updatePanels.bind(this));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, this.updatePanels.bind(this));\n    }\n\n    protected destroy(): void {\n        this.clearPanelComponents();\n        super.destroy();\n    }\n\n    private updatePanels() {\n        const currentChartType = this.chartType;\n        const isSwitchCategorySeriesToggledCurrent = this.isSwitchCategorySeriesToggled;\n        const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n\n        this.chartType = this.chartController.getChartType();\n        const hasChangedChartType = this.chartType !== currentChartType;\n\n        // Determine the state of the category/series toggle\n        this.isSwitchCategorySeriesToggled = this.chartController.isCategorySeriesSwitched();\n        const hasChangedSwitchCategorySeries = (\n            this.isSwitchCategorySeriesToggled !== isSwitchCategorySeriesToggledCurrent\n        );\n\n        // Attempt to re-use existing panels where possible in order to maintain keyboard focus\n        if (this.canRefresh(currentChartType, this.chartType) && !hasChangedSwitchCategorySeries) {\n            this.categoriesDataPanel?.refresh(dimensionCols);\n            this.seriesDataPanel?.refresh(valueCols);\n            this.seriesChartTypePanel?.refresh(valueCols);\n        } else {\n            this.recreatePanels(dimensionCols, valueCols);\n        }\n\n        // Ensure the category/series toggle UI control is up-to-date\n        if (hasChangedChartType) {\n            this.switchCategorySeriesPanel?.setDisplayed(\n                supportsInvertedCategorySeries(this.chartType) && !this.chartMenuService.isLegacyFormat()\n            );\n        }\n        if (hasChangedSwitchCategorySeries) {\n            this.switchCategorySeriesPanel?.refresh();\n        }\n    }\n\n    private canRefresh(oldChartType: ChartType | undefined, newChartType: ChartType): boolean {\n        if (oldChartType === undefined) return false;\n        if (oldChartType === newChartType) {\n            return true;\n        }\n        const isCombo = (chartType: ChartType) => ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(chartType);\n        if (isCombo(oldChartType) && isCombo(newChartType)) {\n            return true;\n        }\n        return false;\n    }\n\n    private recreatePanels(dimensionCols: ColState[], valueCols: ColState[]): void {\n        this.clearPanelComponents();\n\n        const { chartType } = this;\n        if (!chartType) return;\n\n        const isCategorySeriesSwitched = this.chartController.isCategorySeriesSwitched();\n\n        const panels = this.getDataPanelDef().groups?.map(({ type, isOpen }): Component | null => {\n            if (type === (isCategorySeriesSwitched ? 'series' : 'categories')) {\n                return this.categoriesDataPanel = this.createBean(new CategoriesDataPanel(\n                    this.chartController,\n                    this.autoScrollService,\n                    this.getCategoryGroupTitle(isCategorySeriesSwitched),\n                    this.getCategoryGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                    dimensionCols,\n                    isOpen\n                ));\n            } else if (type === (isCategorySeriesSwitched ? 'categories' : 'series')) {\n                return this.seriesDataPanel = this.createBean(new SeriesDataPanel(\n                    this.chartController,\n                    this.autoScrollService,\n                    this.chartOptionsService,\n                    this.getSeriesGroupTitle(isCategorySeriesSwitched),\n                    this.getSeriesGroupMultipleSelect(chartType, isCategorySeriesSwitched),\n                    this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched),\n                    valueCols,\n                    isOpen\n                ));\n            } else if (type === 'seriesChartType') {\n                if (this.chartController.isComboChart()) {\n                    return this.seriesChartTypePanel = this.createBean(new SeriesChartTypePanel(\n                        this.chartController,\n                        valueCols,\n                        isOpen\n                    ));\n                }\n                return null;\n            } else {\n                _.warnOnce(`Invalid charts data panel group name supplied: '${type}'`);\n                return null;\n            }\n        }).filter((value): value is NonNullable<typeof value> => value != null);\n\n        if (panels) this.addPanelComponents(panels);\n    }\n\n    private addPanelComponents<T extends Component[]>(panels: T): T {\n        const fragment = document.createDocumentFragment();\n        for (const panel of panels) {\n            this.registerComponent(panel);\n            fragment.appendChild(panel.getGui());\n        }\n        const afterPanelElement = this.switchCategorySeriesPanel?.getGui();\n        this.getGui().insertBefore(fragment, afterPanelElement ?? null);\n        return panels;\n    }\n\n    private clearPanelComponents() {\n        const eGui = this.getGui();\n\n        if (this.categoriesDataPanel) eGui.removeChild(this.categoriesDataPanel.getGui());\n        if (this.seriesDataPanel) eGui.removeChild(this.seriesDataPanel.getGui());\n        if (this.seriesChartTypePanel) eGui.removeChild(this.seriesChartTypePanel.getGui());\n\n        this.categoriesDataPanel = this.destroyBean(this.categoriesDataPanel);\n        this.seriesDataPanel = this.destroyBean(this.seriesDataPanel);\n        this.seriesChartTypePanel = this.destroyBean(this.seriesChartTypePanel);\n    }\n\n    private createAutoScrollService(): void {\n        const eGui = this.getGui();\n        this.autoScrollService = new AutoScrollService({\n            scrollContainer: eGui,\n            scrollAxis: 'y',\n            getVerticalPosition: () => eGui.scrollTop,\n            setVerticalPosition: (position) => eGui.scrollTop = position\n        });\n    }\n\n    private addComponent<T extends Component>(component: T): T {\n        this.registerComponent(component);\n        this.getGui().appendChild(component.getGui());\n        return component;\n    }\n\n    private registerComponent<T extends Component>(component: T): void {\n        component.addCssClass('ag-chart-data-section');\n    }\n\n    private getDataPanelDef() {\n        return this.gridOptionsService.get('chartToolPanelsDef')?.dataPanel ?? DefaultDataPanelDef;\n    }\n\n    private getCategoryGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('seriesLabels');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'labels' : 'categories');\n    }\n\n    private getCategoryGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        if (isCategorySeriesSwitched) return false;\n        return getMaxNumCategories(chartType) !== 1;\n    }\n\n    private getSeriesGroupTitle(isCategorySeriesSwitched: boolean): string {\n        if (isCategorySeriesSwitched) return this.chartTranslationService.translate('categoryValues');\n        return this.chartTranslationService.translate(this.chartController.isActiveXYChart() ? 'xyValues' : 'series');\n    }\n\n    private getSeriesGroupMultipleSelect(chartType: ChartType, isCategorySeriesSwitched: boolean): boolean {\n        return this.getSeriesGroupMaxSelection(chartType, isCategorySeriesSwitched) !== 1;\n    }\n\n    private getSeriesGroupMaxSelection(chartType: ChartType, isCategorySeriesSwitched: boolean): number | undefined {\n        if (isCategorySeriesSwitched) return undefined;\n        return getMaxNumSeries(chartType);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    BeanStub,\n    CellRange,\n    CellRangeParams,\n    ChartModel,\n    ChartModelType,\n    ChartOptionsChanged,\n    ChartRangeSelectionChanged,\n    ChartType,\n    Events,\n    IRangeService,\n    PostConstruct,\n    SeriesChartType,\n    WithoutGridCommon,\n    AgChartThemeOverrides,\n    UpdateCrossFilterChartParams,\n    UpdateChartParams,\n    UpdateRangeChartParams,\n    IAggFunc\n} from \"@ag-grid-community/core\";\nimport { ChartDataModel, ChartModelParams, ColState } from \"./model/chartDataModel\";\nimport { ChartProxy, FieldDefinition, UpdateParams } from \"./chartProxies/chartProxy\";\nimport { _Theme, AgChartThemePalette, _ModuleSupport } from \"ag-charts-community\";\nimport {\n    ChartSeriesType,\n    getMaxNumCategories,\n    getMaxNumSeries,\n    getSeriesType,\n    supportsInvertedCategorySeries,\n} from './utils/seriesTypeMapper';\nimport { isStockTheme } from \"./chartProxies/chartTheme\";\nimport { UpdateParamsValidator } from \"./utils/UpdateParamsValidator\";\n\nexport const DEFAULT_THEMES = ['ag-default', 'ag-material', 'ag-sheets', 'ag-polychroma', 'ag-vivid'];\n\nexport class ChartController extends BeanStub {\n\n    public static EVENT_CHART_UPDATED = 'chartUpdated';\n    public static EVENT_CHART_API_UPDATE = 'chartApiUpdate';\n    public static EVENT_CHART_MODEL_UPDATE = 'chartModelUpdate';\n    public static EVENT_CHART_TYPE_CHANGED = 'chartTypeChanged';\n    public static EVENT_CHART_SERIES_CHART_TYPE_CHANGED = 'chartSeriesChartTypeChanged';\n    public static EVENT_CHART_LINKED_CHANGED = 'chartLinkedChanged';\n\n    @Autowired('rangeService') private readonly rangeService: IRangeService;\n\n    private chartProxy: ChartProxy;\n\n    public constructor(private readonly model: ChartDataModel) {\n        super();\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.setChartRange();\n\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, event => {\n            if (event.id && event.id === this.model.chartId) {\n                this.updateForRangeChange();\n            }\n        });\n\n        if (this.model.unlinked) {\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.updateForGridChange.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n    }\n\n    public update(params: UpdateChartParams): boolean {\n        if (!this.validUpdateType(params)) return false;\n        const validationResult = UpdateParamsValidator.validateChartParams(params);\n        if (!validationResult) return false;\n        const validParams = validationResult === true ? params : validationResult;\n        this.applyValidatedChartParams(validParams);\n        return true;\n    }\n\n    private applyValidatedChartParams(params: UpdateChartParams): void {\n        const { chartId, chartType, chartThemeName, unlinkChart } = params;\n\n        // create a common base for the chart model parameters (this covers pivot chart updates)\n        const common = {\n            chartId: chartId,\n            pivotChart: this.model.pivotChart,\n            chartType: chartType ?? this.model.chartType,\n            chartThemeName: chartThemeName ?? this.model.chartThemeName,\n            unlinkChart: unlinkChart ?? this.model.unlinked,\n            cellRange: this.model.suppliedCellRange,\n            switchCategorySeries: this.model.switchCategorySeries,\n            aggFunc: this.model.aggFunc,\n            seriesChartTypes: undefined,\n            suppressChartRanges: false,\n            crossFiltering: false,\n        }\n\n        let chartModelParams: ChartModelParams = { ...common };\n\n        // modify the chart model properties based on the type of update\n        switch (params.type) {\n            case 'rangeChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = params.switchCategorySeries ?? this.model.switchCategorySeries;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.seriesChartTypes = params.seriesChartTypes;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                break;\n            case 'crossFilterChartUpdate':\n                chartModelParams.cellRange = this.createCellRange(params) ?? this.model.suppliedCellRange;\n                chartModelParams.switchCategorySeries = false;\n                chartModelParams.aggFunc = params.aggFunc ?? this.model.aggFunc;\n                chartModelParams.crossFiltering = true;\n                chartModelParams.suppressChartRanges = params.suppressChartRanges ?? this.model.suppressChartRanges;\n                break;\n            case 'pivotChartUpdate':\n                chartModelParams.switchCategorySeries = false;\n                break;\n        }\n\n        this.model.updateModel(chartModelParams);\n\n        // if the chart should be unlinked or chart ranges suppressed, remove all cell ranges; otherwise, set the chart range\n        const removeChartCellRanges = chartModelParams.unlinkChart || chartModelParams.suppressChartRanges;\n        removeChartCellRanges ? this.rangeService?.setCellRanges([]) : this.setChartRange();\n    }\n\n    public updateForGridChange(params?: { maintainColState?: boolean, setColsFromRange?: boolean }): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        const { maintainColState, setColsFromRange } = params ?? {};\n\n        this.model.updateCellRanges({ maintainColState, setColsFromRange });\n        this.model.updateData();\n        this.setChartRange();\n    }\n\n    public updateForDataChange(): void {\n        if (this.model.unlinked) {\n            return;\n        }\n\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public updateForRangeChange(): void {\n        this.updateForGridChange({ setColsFromRange: true });\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateForPanelChange(updatedColState: ColState, resetOrder?: boolean): void {\n        this.model.updateCellRanges({ updatedColState, resetOrder });\n        this.model.updateData();\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    }\n\n    public updateThemeOverrides(updatedOverrides: AgChartThemeOverrides): void {\n        this.chartProxy.updateThemeOverrides(updatedOverrides);\n    }\n\n    public getChartUpdateParams(updatedOverrides?: AgChartThemeOverrides): UpdateParams {\n        const selectedCols = this.getSelectedValueColState();\n        const fields = selectedCols.map(c => ({ colId: c.colId, displayName: c.displayName }));\n        const data = this.getChartData();\n        const selectedDimensions = this.getSelectedDimensions();\n\n        const params: UpdateParams = {\n            data,\n            grouping: this.isGrouping(),\n            categories: selectedDimensions.map((selectedDimension) => ({\n                id: selectedDimension.colId,\n                name: selectedDimension.displayName!,\n                chartDataType: this.model.getChartDataType(selectedDimension.colId)\n            })),\n            fields,\n            chartId: this.getChartId(),\n            getCrossFilteringContext: () => ({ lastSelectedChartId: 'xxx' }), //this.params.crossFilteringContext, //TODO\n            seriesChartTypes: this.getSeriesChartTypes(),\n            updatedOverrides: updatedOverrides\n        };\n\n        return (this.isCategorySeriesSwitched() ? this.invertCategorySeriesParams(params) : params);\n    }\n\n    private invertCategorySeriesParams(\n        params: UpdateParams,\n    ): UpdateParams {\n        const [category] = params.categories;\n        // Create a single synthetic output category that will contain the series name values\n        const categories = [{ id: ChartDataModel.DEFAULT_CATEGORY, name: '' }];\n        // Create an output series corresponding to each row in the input data\n        const fields = params.data.map((value, index): FieldDefinition => {\n            const categoryKey = `${category.id}:${index}`;\n            const categoryValue = value[category.id];\n            const seriesLabel = categoryValue == null ? '' : String(categoryValue);\n            return { colId: categoryKey, displayName: seriesLabel };\n        });\n        // Create an output data row corresponding to each selected series column\n        const data = params.fields.map((field) => {\n            // Create a new output row labeled with the series column name\n            const row: Record<PropertyKey, any> = {\n                [ChartDataModel.DEFAULT_CATEGORY]: field.displayName,\n            };\n            // Append fields corresponding to each row in the input data\n            for (const [index, value] of params.data.entries()) {\n                const categoryKey = `${category.id}:${index}`;\n                const seriesLabelValue = value[field.colId];\n                row[categoryKey] = seriesLabelValue;\n            }\n            return row;\n        });\n        return {\n            ...params,\n            categories,\n            fields,\n            data,\n        };\n    }\n\n    public getChartModel(): ChartModel {\n        const modelType: ChartModelType = this.model.pivotChart ? 'pivot' : 'range';\n\n        const seriesChartTypes = this.isComboChart() ? this.model.comboChartModel.seriesChartTypes : undefined;\n\n        return {\n            modelType,\n            chartId: this.model.chartId,\n            chartType: this.model.chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides(),\n            chartPalette: this.chartProxy.getChartPalette(),\n            cellRange: this.getCellRangeParams(),\n            switchCategorySeries: this.model.switchCategorySeries,\n            suppressChartRanges: this.model.suppressChartRanges,\n            aggFunc: this.model.aggFunc,\n            unlinkChart: this.model.unlinked,\n            seriesChartTypes\n        };\n    }\n\n    public getChartId(): string {\n        return this.model.chartId;\n    }\n\n    public getChartData(): any[] {\n        return this.model.chartData;\n    }\n\n    public getChartType(): ChartType {\n        return this.model.chartType;\n    }\n\n    public setChartType(chartType: ChartType): void {\n        this.updateMultiSeriesAndCategory(this.model.chartType, chartType);\n\n        this.model.chartType = chartType;\n\n        this.model.comboChartModel.updateSeriesChartTypes();\n\n        // Reset the inverted category/series toggle whenever the chart type changes\n        this.model.switchCategorySeries = false;\n\n        this.raiseChartModelUpdateEvent();\n        this.raiseChartOptionsChangedEvent();\n    }\n\n    public isCategorySeriesSwitched(): boolean {\n        return this.model.switchCategorySeries;\n    }\n\n    public switchCategorySeries(inverted: boolean): void {\n        if (!supportsInvertedCategorySeries(this.getChartType())) return;\n        this.model.switchCategorySeries = inverted;\n        this.raiseChartModelUpdateEvent();\n    }\n\n    public getAggFunc(): string | IAggFunc | undefined {\n        return this.model.aggFunc;\n    }\n\n    public setAggFunc(value: string | IAggFunc | undefined, silent?: boolean): void {\n        if (this.model.aggFunc === value) return;\n        this.model.aggFunc = value;\n        if (silent) return;\n        this.model.updateData();\n        this.raiseChartModelUpdateEvent();\n    }\n\n    private updateMultiSeriesAndCategory(previousChartType: ChartType, chartType: ChartType): void {\n        // If we are changing from a multi-category/series chart type to a single-category/series chart type,\n        // ensure that only the allowed number of selected category/series column remain selected\n        const updateForMax = (columns: ColState[], maxNum: number) => {\n            let numSelected = 0;\n            for (const colState of columns) {\n                if (!colState.selected) continue;\n                if (numSelected >= maxNum) {\n                    colState.selected = false;\n                } else {\n                    numSelected++;\n                }\n            }\n            if (numSelected === 0) {\n                columns[0].selected = true;\n            }\n        }\n\n        const maxNumDimensions = getMaxNumCategories(chartType);\n        const maxNumSeries = getMaxNumSeries(chartType);\n        const updateDimensionColState = maxNumDimensions != null && (getMaxNumCategories(previousChartType) ?? 100) > (maxNumDimensions ?? 100);\n        const updateValueColState = maxNumSeries != null && (getMaxNumSeries(previousChartType) ?? 100) > (maxNumSeries ?? 100);\n        if (updateDimensionColState) {\n            updateForMax(this.model.dimensionColState, maxNumDimensions);\n        }\n        if (updateValueColState) {\n            updateForMax(this.model.valueColState, maxNumSeries);\n        }\n        if (updateDimensionColState || updateValueColState) {\n            this.model.resetCellRanges(updateDimensionColState, updateValueColState);\n            this.setChartRange(true);\n        }\n    }\n\n    public setChartThemeName(chartThemeName: string, silent?: boolean): void {\n        this.model.chartThemeName = chartThemeName;\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getChartThemeName(): string {\n        return this.model.chartThemeName;\n    }\n\n    public isPivotChart(): boolean {\n        return this.model.pivotChart;\n    }\n\n    public isPivotMode(): boolean {\n        return this.model.isPivotMode();\n    }\n\n    public isGrouping(): boolean {\n        return this.model.isGrouping();\n    }\n\n    public isCrossFilterChart(): boolean {\n        return this.model.crossFiltering;\n    }\n\n    public getThemeNames(): string[] {\n        return this.gridOptionsService.get('chartThemes') || DEFAULT_THEMES;\n    }\n\n    public getThemes(): _Theme.ChartTheme[] {\n        const themeNames = this.getThemeNames();\n\n        return themeNames.map((themeName) => {\n            const stockTheme = isStockTheme(themeName);\n            const theme = stockTheme ? themeName : this.chartProxy.lookupCustomChartTheme(themeName);\n            return _Theme.getChartTheme(theme);\n        });\n    }\n\n    public getPalettes(): AgChartThemePalette[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.palette;\n        });\n    }\n\n    public getThemeTemplateParameters(): {\n        extensions: Map<any, any>;\n        properties: Map<any, any>;\n    }[] {\n        const themes = this.getThemes();\n\n        return themes.map((theme) => {\n            return theme.getTemplateParameters();\n        });\n    }\n\n    public getValueColState(): ColState[] {\n        return this.model.valueColState.map(this.displayNameMapper.bind(this));\n    }\n\n    public getSelectedValueColState(): { colId: string; displayName: string | null; }[] {\n        return this.getValueColState().filter(cs => cs.selected);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.model.getSelectedDimensions();\n    }\n\n    private displayNameMapper(col: ColState): ColState {\n        const columnNames = this.model.columnNames[col.colId];\n        col.displayName = columnNames ? columnNames.join(' - ') : this.model.getColDisplayName(col.column!);\n        return col;\n    }\n\n    public getColStateForMenu(): { dimensionCols: ColState[]; valueCols: ColState[]; } {\n        return { dimensionCols: this.model.dimensionColState, valueCols: this.getValueColState() };\n    }\n\n    public setChartRange(silent = false): void {\n        if (this.rangeService && !this.model.suppressChartRanges && !this.model.unlinked) {\n            this.rangeService.setCellRanges(this.getCellRanges());\n        }\n\n        if (!silent) {\n            this.raiseChartModelUpdateEvent();\n        }\n    }\n\n    public detachChartRange(): void {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.unlinked = !this.model.unlinked;\n\n        if (this.model.unlinked) {\n            // remove range from grid\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        } else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n        this.dispatchEvent({ type: ChartController.EVENT_CHART_LINKED_CHANGED });\n    }\n\n    public setChartProxy(chartProxy: ChartProxy): void {\n        this.chartProxy = chartProxy;\n    }\n\n    public getChartProxy(): ChartProxy {\n        return this.chartProxy;\n    }\n\n    public isActiveXYChart(): boolean {\n        return _.includes(['scatter', 'bubble'], this.getChartType());\n    }\n\n    public isChartLinked(): boolean {\n        return !this.model.unlinked;\n    }\n\n    public customComboExists(): boolean {\n        const savedCustomSeriesChartTypes = this.model.comboChartModel.savedCustomSeriesChartTypes;\n        return savedCustomSeriesChartTypes && savedCustomSeriesChartTypes.length > 0;\n    }\n\n    public getSeriesChartTypes(): SeriesChartType[] {\n        return this.model.comboChartModel.seriesChartTypes;\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return this.model.isComboChart(chartType);\n    }\n\n    public updateSeriesChartType(colId: string, chartType?: ChartType, secondaryAxis?: boolean): void {\n        const seriesChartType = this.model.comboChartModel.seriesChartTypes.find(s => s.colId === colId);\n        if (seriesChartType) {\n\n            // once a combo chart has been modified it is now a 'customCombo' chart\n            const updateChartType = this.model.chartType !== 'customCombo';\n            if (updateChartType) {\n                this.model.chartType = 'customCombo';\n            }\n\n            const prevSeriesChartType = seriesChartType.chartType;\n            if (chartType != null) {\n                seriesChartType.chartType = chartType;\n            }\n\n            if (secondaryAxis != null) {\n                seriesChartType.secondaryAxis = secondaryAxis;\n            }\n\n            // replace existing custom series types with this latest version\n            this.model.comboChartModel.savedCustomSeriesChartTypes = this.model.comboChartModel.seriesChartTypes;\n\n            // series chart types can be modified, i.e. column chart types should be moved to primary axis\n            this.model.comboChartModel.updateSeriesChartTypes();\n\n            this.updateForDataChange();\n\n            if (updateChartType) {\n                // update the settings panel by raising an EVENT_CHART_TYPE_CHANGED event\n                this.dispatchEvent({\n                    type: ChartController.EVENT_CHART_TYPE_CHANGED\n                });\n            }\n\n            if (prevSeriesChartType !== chartType) {\n                // update the format panel by raising an EVENT_CHART_SERIES_CHART_TYPE_CHANGED event\n                this.dispatchEvent({\n                    type: ChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED\n                });\n            }\n\n            this.raiseChartOptionsChangedEvent();\n        }\n    }\n\n    public getActiveSeriesChartTypes(): SeriesChartType[] {\n        const selectedColIds = this.getSelectedValueColState().map(c => c.colId);\n        return this.getSeriesChartTypes().filter(s => selectedColIds.includes(s.colId));\n    }\n\n    public getChartSeriesTypes(chartType?: ChartType): ChartSeriesType[] {\n        const targetChartType = chartType ?? this.getChartType();\n        const supportedComboSeriesTypes: ChartSeriesType[] = ['line', 'bar', 'area'];\n        return this.isComboChart(targetChartType) ? supportedComboSeriesTypes : [getSeriesType(targetChartType)];\n    }\n\n    public isEnterprise = () => _ModuleSupport.enterpriseModule.isEnterprise;\n\n    private getCellRanges(): CellRange[] {\n        return [this.model.dimensionCellRange!, this.model.valueCellRange!].filter(r => r);\n    }\n\n    private createCellRange(params: UpdateRangeChartParams | UpdateCrossFilterChartParams) {\n        return params.cellRange && this.rangeService?.createCellRangeFromCellRangeParams(params.cellRange as CellRangeParams);\n    }\n\n    private validUpdateType(params: UpdateChartParams): boolean {\n        if (!params.type) {\n            console.warn(`AG Grid - Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`);\n            return false;\n        }\n\n        const chartTypeMap: Record<string, () => boolean> = {\n            'Range Chart': () => !this.isPivotChart() && !this.isCrossFilterChart(),\n            'Pivot Chart': () => this.isPivotChart(),\n            'Cross Filter Chart': () => this.isCrossFilterChart()\n        };\n\n        const currentChartType = Object.keys(chartTypeMap).find(type => chartTypeMap[type]()) ?? 'Range Chart';\n\n        const valid = params.type ===\n            `${currentChartType[0].toLowerCase()}${currentChartType.slice(1).replace(/ /g, '')}Update`;\n\n        if (!valid) {\n            console.warn(`AG Grid - Unable to update chart as a '${params.type}' update type is not permitted on a ${currentChartType}.`);\n        }\n        return valid;\n    }\n\n    private getCellRangeParams(): CellRangeParams {\n        const cellRanges = this.getCellRanges();\n        const firstCellRange = cellRanges[0];\n        const startRow = (firstCellRange && firstCellRange.startRow) || null;\n        const endRow = (firstCellRange && firstCellRange.endRow) || null;\n\n        return {\n            rowStartIndex: startRow && startRow.rowIndex,\n            rowStartPinned: startRow && startRow.rowPinned,\n            rowEndIndex: endRow && endRow.rowIndex,\n            rowEndPinned: endRow && endRow.rowPinned,\n            columns: cellRanges.reduce((columns, value) => columns.concat(value.columns.map(c => c.getId())), [] as string[])\n        };\n    }\n\n    private raiseChartModelUpdateEvent(): void {\n        const event = {\n            type: ChartController.EVENT_CHART_MODEL_UPDATE\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    public raiseChartUpdatedEvent(): void {\n        const event = {\n            type: ChartController.EVENT_CHART_UPDATED\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    public raiseChartApiUpdateEvent(): void {\n        const event = {\n            type: ChartController.EVENT_CHART_API_UPDATE\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const { chartId, chartType } = this.getChartModel();\n        const event: WithoutGridCommon<ChartOptionsChanged> = {\n            type: Events.EVENT_CHART_OPTIONS_CHANGED,\n            chartId,\n            chartType,\n            chartThemeName: this.getChartThemeName(),\n            chartOptions: this.chartProxy.getChartThemeOverrides()\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private raiseChartRangeSelectionChangedEvent(): void {\n        const event: WithoutGridCommon<ChartRangeSelectionChanged> = {\n            type: Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n            id: this.model.chartId,\n            chartId: this.model.chartId,\n            cellRange: this.getCellRangeParams()\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n\n        if (this.rangeService) {\n            this.rangeService.setCellRanges([]);\n        }\n    }\n}\n\n", "import {\n    _,\n    Autowired,\n    BeanStub,\n    CellRange,\n    CellRangeType,\n    ChartType,\n    Column,\n    IAggFunc,\n    IRangeService,\n    PostConstruct,\n    SeriesChartType,\n} from \"@ag-grid-community/core\";\nimport { ChartDatasource, ChartDatasourceParams } from \"../datasource/chartDatasource\";\nimport { ChartTranslationService } from '../services/chartTranslationService';\nimport { ChartColumnService } from \"../services/chartColumnService\";\nimport { ComboChartModel } from \"./comboChartModel\";\nimport { getMaxNumSeries, isHierarchical } from \"../utils/seriesTypeMapper\";\n\nexport interface ColState {\n    column?: Column;\n    colId: string;\n    displayName: string | null;\n    selected?: boolean;\n    order: number;\n}\n\nexport interface ChartModelParams {\n    chartId: string;\n    pivotChart: boolean;\n    chartType: ChartType;\n    chartThemeName: string;\n    switchCategorySeries?: boolean;\n    aggFunc?: string | IAggFunc;\n    cellRange: CellRange;\n    suppressChartRanges: boolean;\n    unlinkChart?: boolean;\n    crossFiltering?: boolean;\n    seriesChartTypes?: SeriesChartType[];\n}\n\nexport class ChartDataModel extends BeanStub {\n\n    public static DEFAULT_CATEGORY = 'AG-GRID-DEFAULT-CATEGORY';\n\n    @Autowired('rangeService') private readonly rangeService: IRangeService;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    public readonly params: ChartModelParams;\n\n    // this is used to associate chart ranges with charts\n    public readonly chartId: string;\n\n    public suppressChartRanges: boolean;\n    public switchCategorySeries: boolean;\n    public aggFunc?: string | IAggFunc;\n    public pivotChart: boolean;\n\n    public chartType: ChartType;\n    public chartThemeName: string;\n    public unlinked = false;\n    public chartData: any[] = [];\n    public valueColState: ColState[] = [];\n    public dimensionColState: ColState[] = [];\n    public columnNames: { [p: string]: string[]; } = {};\n\n    public valueCellRange?: CellRange;\n    public dimensionCellRange?: CellRange;\n\n    public comboChartModel: ComboChartModel;\n    private chartColumnService: ChartColumnService;\n    private datasource: ChartDatasource;\n\n    public referenceCellRange: CellRange;\n    public suppliedCellRange: CellRange;\n\n    public crossFiltering = false;\n\n    private grouping = false;\n\n    public constructor(params: ChartModelParams) {\n        super();\n\n        this.params = params;\n        this.chartId = params.chartId;\n        this.chartType = params.chartType;\n        this.pivotChart = params.pivotChart;\n        this.chartThemeName = params.chartThemeName;\n        this.switchCategorySeries = !!params.switchCategorySeries;\n        this.aggFunc = params.aggFunc;\n        this.referenceCellRange = params.cellRange;\n        this.suppliedCellRange = params.cellRange;\n        this.suppressChartRanges = params.suppressChartRanges;\n        this.unlinked = !!params.unlinkChart;\n        this.crossFiltering = !!params.crossFiltering;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.datasource = this.createManagedBean(new ChartDatasource());\n        this.chartColumnService = this.createManagedBean(new ChartColumnService());\n        this.comboChartModel = this.createManagedBean(new ComboChartModel(this));\n        this.updateCellRanges({ setColsFromRange: true });\n        this.updateData();\n    }\n\n    public updateModel(params: ChartModelParams): void {\n        const {\n            cellRange,\n            chartType,\n            pivotChart,\n            chartThemeName,\n            switchCategorySeries,\n            aggFunc,\n            suppressChartRanges,\n            unlinkChart,\n            crossFiltering,\n            seriesChartTypes\n        } = params;\n\n        if (cellRange !== this.suppliedCellRange) {\n            this.dimensionCellRange = undefined;\n            this.valueCellRange = undefined;\n        }\n\n        this.chartType = chartType;\n        this.pivotChart = pivotChart;\n        this.chartThemeName = chartThemeName;\n        this.switchCategorySeries = !!switchCategorySeries;\n        this.aggFunc = aggFunc;\n        this.referenceCellRange = cellRange;\n        this.suppliedCellRange = cellRange;\n        this.suppressChartRanges = suppressChartRanges;\n        this.unlinked = !!unlinkChart;\n        this.crossFiltering = !!crossFiltering;\n\n        this.updateSelectedDimensions(cellRange?.columns);\n        this.updateCellRanges({ setColsFromRange: true });\n\n        const shouldUpdateComboModel = this.isComboChart() || seriesChartTypes;\n        if (shouldUpdateComboModel) {\n            this.comboChartModel.update(seriesChartTypes);\n        }\n\n        if (!this.unlinked) {\n            this.updateData();\n        }\n    }\n\n    public updateCellRanges(params?: { updatedColState?: ColState, resetOrder?: boolean, maintainColState?: boolean, setColsFromRange?: boolean }): void {\n        const { updatedColState, resetOrder, maintainColState, setColsFromRange } = params ?? {};\n        if (this.valueCellRange) {\n            this.referenceCellRange = this.valueCellRange;\n        }\n\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n\n        if (updatedColState) {\n            this.updateColumnState(updatedColState, resetOrder);\n        }\n\n        this.setDimensionCellRange(dimensionCols, allColsFromRanges, updatedColState);\n        this.setValueCellRange(valueCols, allColsFromRanges, setColsFromRange);\n\n        if (!updatedColState && !maintainColState) {\n            this.resetColumnState();\n            // dimension / category cell range could be out of sync after resetting column state when row grouping\n            this.syncDimensionCellRange();\n        }\n\n        this.comboChartModel.updateSeriesChartTypes();\n    }\n\n    public updateData(): void {\n        const { startRow, endRow } = this.getRowIndexes();\n\n        if (this.pivotChart) {\n            this.resetColumnState();\n        }\n\n        this.grouping = this.isGrouping();\n\n        const params: ChartDatasourceParams = {\n            aggFunc: this.aggFunc,\n            dimensionCols: this.getSelectedDimensions(),\n            grouping: this.grouping,\n            pivoting: this.isPivotActive(),\n            crossFiltering: this.crossFiltering,\n            valueCols: this.getSelectedValueCols(),\n            startRow,\n            endRow,\n            isScatter: _.includes(['scatter', 'bubble'], this.chartType)\n        };\n\n        const { chartData, columnNames } = this.datasource.getData(params);\n\n        this.chartData = chartData;\n        this.columnNames = columnNames;\n    }\n\n    public isGrouping(): boolean {\n        const usingTreeData = this.gridOptionsService.get('treeData');\n        const groupedCols = usingTreeData ? null : this.chartColumnService.getRowGroupColumns();\n        const isGroupActive = usingTreeData || (groupedCols && groupedCols.length > 0);\n\n        // charts only group when the selected category is a group column\n        const colIds = this.getSelectedDimensions().map(({ colId }) => colId);\n        const displayedGroupCols = this.chartColumnService.getGroupDisplayColumns();\n        const groupDimensionSelected = displayedGroupCols.map(col => col.getColId()).some(id => colIds.includes(id));\n        return !!isGroupActive && groupDimensionSelected;\n    }\n\n    public getSelectedValueCols(): Column[] {\n        return this.valueColState.filter(cs => cs.selected).map(cs => cs.column!);\n    }\n\n    public getSelectedDimensions(): ColState[] {\n        return this.dimensionColState.filter(cs => cs.selected);\n    }\n\n    public getColDisplayName(col: Column): string | null {\n        return this.chartColumnService.getColDisplayName(col);\n    }\n\n    public isPivotMode(): boolean {\n        return this.chartColumnService.isPivotMode();\n    }\n\n    public getChartDataType(colId: string): string | undefined {\n        const column = this.chartColumnService.getColumn(colId);\n        return column ? column.getColDef().chartDataType : undefined;\n    }\n\n    private isPivotActive(): boolean {\n        return this.chartColumnService.isPivotActive();\n    }\n\n    private createCellRange(type: CellRangeType, ...columns: Column[]): CellRange {\n        return {\n            id: this.chartId, // set range ID to match chart ID so we can identify changes to the ranges for this chart\n            startRow: this.referenceCellRange.startRow,\n            endRow: this.referenceCellRange.endRow,\n            columns,\n            startColumn: type === CellRangeType.DIMENSION ? columns[0] : this.referenceCellRange.startColumn,\n            type\n        };\n    }\n\n    private getAllColumnsFromRanges(): Set<Column> {\n        if (this.pivotChart) {\n            return _.convertToSet(this.chartColumnService.getAllDisplayedColumns());\n        }\n\n        const columns = this.dimensionCellRange || this.valueCellRange ? [] : this.referenceCellRange.columns;\n\n        if (this.dimensionCellRange) {\n            columns.push(...this.dimensionCellRange.columns);\n        }\n\n        if (this.valueCellRange) {\n            columns.push(...this.valueCellRange.columns);\n        }\n\n        return _.convertToSet(columns);\n    }\n\n    private getRowIndexes(): { startRow: number; endRow: number; } {\n        let startRow = 0, endRow = 0;\n        const { rangeService, valueCellRange, dimensionCellRange } = this;\n\n        // Not all chart types require a value series (e.g. hierarchical charts),\n        // so fall back to using the dimension cell range for inferring row indices\n        const cellRange = valueCellRange || dimensionCellRange;\n\n        if (rangeService && cellRange) {\n            startRow = rangeService.getRangeStartRow(cellRange).rowIndex;\n\n            // when the last row the cell range is a pinned 'bottom' row, the `endRow` index is set to -1 which results\n            // in the ChartDatasource processing all non pinned rows from the `startRow` index.\n            const endRowPosition = rangeService.getRangeEndRow(cellRange);\n            endRow = endRowPosition.rowPinned === 'bottom' ? -1 : endRowPosition.rowIndex;\n        }\n\n        return { startRow, endRow };\n    }\n\n    private resetColumnState(): void {\n        const { dimensionCols, valueCols } = this.chartColumnService.getChartColumns();\n        const allCols = this.getAllColumnsFromRanges();\n        const isInitialising = this.valueColState.length < 1;\n\n        this.dimensionColState = [];\n        this.valueColState = [];\n\n        const supportsMultipleDimensions = isHierarchical(this.chartType);\n        let hasSelectedDimension = false;\n        let order = 1;\n\n        const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n\n        dimensionCols.forEach(column => {\n            const isAutoGroupCol = column.getColId() === 'ag-Grid-AutoColumn';\n\n            let selected = false;\n            if (this.crossFiltering && this.aggFunc) {\n                if (aggFuncDimension.getColId() === column.getColId()) {\n                    selected = true;\n                }\n            } else {\n                selected = isAutoGroupCol ? true : (!hasSelectedDimension || supportsMultipleDimensions) && allCols.has(column);\n            }\n\n            this.dimensionColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected,\n                order: order++\n            });\n\n            if (selected) {\n                hasSelectedDimension = true;\n            }\n        });\n\n        const defaultCategory = {\n            colId: ChartDataModel.DEFAULT_CATEGORY,\n            displayName: this.chartTranslationService.translate('defaultCategory'),\n            selected: !hasSelectedDimension, // if no dimensions in range select the default\n            order: 0\n        };\n\n        this.dimensionColState.unshift(defaultCategory);\n\n        const valueColumnsFromReferenceRange = this.referenceCellRange.columns.filter(c => valueCols.has(c));\n\n        valueCols.forEach(column => {\n            // first time the value cell range is set, preserve the column order from the supplied range\n            if (isInitialising && _.includes(this.referenceCellRange.columns, column)) {\n                column = valueColumnsFromReferenceRange.shift()!;\n            }\n\n            this.valueColState.push({\n                column,\n                colId: column.getColId(),\n                displayName: this.getColDisplayName(column),\n                selected: allCols.has(column),\n                order: order++\n            });\n        });\n    }\n\n    private updateColumnState(updatedCol: ColState, resetOrder?: boolean): void {\n        const idsMatch = (cs: ColState) => cs.colId === updatedCol.colId;\n        const { dimensionColState, valueColState } = this;\n\n        // Determine whether the specified column is a dimension or value column\n        const matchedDimensionColState = dimensionColState.find(idsMatch);\n        const matchedValueColState = valueColState.find(idsMatch);\n\n        if (matchedDimensionColState) {\n            // For non-hierarchical chart types, only one dimension can be selected\n            const supportsMultipleDimensions = isHierarchical(this.chartType);\n            if (!supportsMultipleDimensions) {\n                // Determine which column should end up selected, if any\n                const selectedColumnState = updatedCol.selected\n                    ? matchedDimensionColState\n                    : dimensionColState\n                        .filter((cs) => cs !== matchedDimensionColState)\n                        .find(({ selected }) => selected);\n                // Update the selection state of all dimension columns\n                dimensionColState.forEach(cs => cs.selected = (cs === selectedColumnState));\n            } else {\n                // Update the selection state of the specified dimension column\n                matchedDimensionColState.selected = updatedCol.selected;\n            }\n        } else if (matchedValueColState) {\n            // Update the selection state of the specified value column\n            matchedValueColState.selected = updatedCol.selected;\n        }\n\n        const allColumns = [...dimensionColState, ...valueColState];\n        const orderedColIds: string[] = [];\n\n        if (!resetOrder) {\n            // calculate new order\n            allColumns.forEach((col: ColState, i: number) => {\n                if (i === updatedCol.order) {\n                    orderedColIds.push(updatedCol.colId);\n                }\n\n                if (col.colId !== updatedCol.colId) {\n                    orderedColIds.push(col.colId);\n                }\n            });\n\n            // update col state with new order\n            allColumns.forEach(col => {\n                const order = orderedColIds.indexOf(col.colId);\n                col.order = order >= 0 ? orderedColIds.indexOf(col.colId) : allColumns.length - 1;\n            });\n        }\n\n        this.reorderColState();\n    }\n\n    private reorderColState(): void {\n        const ascColStateOrder = (a: ColState, b: ColState) => a.order - b.order;\n        this.dimensionColState.sort(ascColStateOrder);\n        this.valueColState.sort(ascColStateOrder);\n    }\n\n    private setDimensionCellRange(dimensionCols: Set<Column>, colsInRange: Set<Column>, updatedColState?: ColState): void {\n        this.dimensionCellRange = undefined;\n        const supportsMultipleDimensions = isHierarchical(this.chartType);\n\n        if (!updatedColState && !this.dimensionColState.length) {\n            const selectedCols = new Array<Column>();\n            // use first dimension column in range by default, or all dimension columns for hierarchical charts\n            dimensionCols.forEach(col => {\n                if ((selectedCols.length > 0 && !supportsMultipleDimensions) || !colsInRange.has(col)) { return; }\n                selectedCols.push(col);\n            });\n            if (selectedCols.length > 0) {\n                this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n            }\n            return;\n        }\n\n        let selectedDimensionColStates = updatedColState ? [updatedColState] : [];\n        if (this.crossFiltering && this.aggFunc) {\n            const aggFuncDimension = this.suppliedCellRange.columns[0]; //TODO\n            selectedDimensionColStates = this.dimensionColState.filter(cs => cs.colId === aggFuncDimension.getColId());\n        } else if (\n            supportsMultipleDimensions ||\n            selectedDimensionColStates.length === 0 ||\n            selectedDimensionColStates.some(({ column }) => !column || !dimensionCols.has(column))\n        ) {\n            selectedDimensionColStates = this.dimensionColState.filter(cs => cs.selected);\n        }\n\n        const isDefaultCategory = selectedDimensionColStates.length === 1\n            ? selectedDimensionColStates[0].colId === ChartDataModel.DEFAULT_CATEGORY\n            : false;\n        const selectedColumns = selectedDimensionColStates.map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedColumns.length > 0 && !isDefaultCategory) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedColumns);\n        }\n    }\n\n    private setValueCellRange(valueCols: Set<Column>, colsInRange: Set<Column>, setColsFromRange?: boolean): void {\n        this.valueCellRange = undefined;\n\n        const selectedValueCols: Column[] = [];\n\n        const maxSelection = getMaxNumSeries(this.chartType);\n        let numSelected = 0;\n\n        valueCols.forEach(col => {\n            if (setColsFromRange) {\n                if ((maxSelection == null || numSelected < maxSelection) && colsInRange.has(col)) {\n                    selectedValueCols.push(col);\n                    numSelected++;\n                }\n            } else {\n                if (this.valueColState.some(colState => colState.selected && colState.colId === col.getColId())) {\n                    selectedValueCols.push(col);\n                }\n            }\n        });\n\n        if (selectedValueCols.length > 0) {\n            let orderedColIds: string[] = [];\n\n            if (this.valueColState.length > 0) {\n                orderedColIds = this.valueColState.map(c => c.colId);\n            } else {\n                colsInRange.forEach(c => orderedColIds.push(c.getColId()));\n            }\n\n            selectedValueCols.sort((a, b) => orderedColIds.indexOf(a.getColId()) - orderedColIds.indexOf(b.getColId()));\n\n            this.valueCellRange = this.createCellRange(CellRangeType.VALUE, ...selectedValueCols);\n        }\n    }\n\n    public resetCellRanges(dimension: boolean, value: boolean): void {\n        if (!dimension && !value) { return; }\n        const { dimensionCols, valueCols} = this.chartColumnService.getChartColumns();\n        const allColsFromRanges = this.getAllColumnsFromRanges();\n        if (dimension) {\n            this.setDimensionCellRange(dimensionCols, allColsFromRanges);\n        }\n        if (value) {\n            this.setValueCellRange(valueCols, allColsFromRanges);\n        }\n    }\n\n    private updateSelectedDimensions(columns: Column[]): void {\n        const colIdSet = new Set(columns.map((column) => column.getColId()));\n\n        // For non-hierarchical chart types, only one dimension can be selected\n        const supportsMultipleDimensions = isHierarchical(this.chartType);\n        if (!supportsMultipleDimensions) {\n            // Determine which column should end up selected, if any\n            // if no dimension found in supplied columns use the default category (always index = 0)\n            const foundColState = this.dimensionColState.find((colState) => colIdSet.has(colState.colId)) || this.dimensionColState[0];\n            const selectedColumnId = foundColState.colId;\n            // Update the selection state of all dimension columns\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: colState.colId === selectedColumnId,\n            }));\n        } else {\n            // Update the selection state of all dimension columns, selecting only the provided columns from the chart model\n            const foundColStates = this.dimensionColState.filter((colState) => colIdSet.has(colState.colId));\n            const selectedColumnIds = new Set(foundColStates.map((colState) => colState.colId));\n            this.dimensionColState = this.dimensionColState.map((colState) => ({\n                ...colState,\n                selected: selectedColumnIds.has(colState.colId),\n            }));\n        }\n    }\n\n    private syncDimensionCellRange() {\n        const selectedDimensions = this.getSelectedDimensions();\n        if (selectedDimensions.length === 0) return;\n        const selectedCols = selectedDimensions.map(({ column }) => column)\n            .filter((value): value is NonNullable<typeof value> => value != null);\n        if (selectedCols.length > 0) {\n            this.dimensionCellRange = this.createCellRange(CellRangeType.DIMENSION, ...selectedCols);\n        }\n    }\n\n    public isComboChart(chartType?: ChartType): boolean {\n        return ['columnLineCombo', 'areaColumnCombo', 'customCombo'].includes(chartType ?? this.chartType);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    BeanStub,\n    CellRange,\n    Column,\n    ColumnGroup,\n    ColumnModel,\n    IAggFunc,\n    IAggregationStage,\n    IClientSideRowModel,\n    IRowModel,\n    ModuleNames,\n    ModuleRegistry,\n    Optional,\n    RowNode,\n    RowNodeSorter,\n    SortController,\n    ValueService,\n} from \"@ag-grid-community/core\";\nimport { ChartDataModel, ColState } from \"../model/chartDataModel\";\n\nexport interface ChartDatasourceParams {\n    dimensionCols: ColState[];\n    grouping: boolean;\n    pivoting: boolean;\n    crossFiltering: boolean;\n    valueCols: Column[];\n    startRow: number;\n    endRow: number;\n    isScatter: boolean;\n    aggFunc?: string | IAggFunc;\n    referenceCellRange?: CellRange;\n}\n\ninterface IData {\n    chartData: any[];\n    columnNames: { [key: string]: string[]; };\n}\n\nexport class ChartDatasource extends BeanStub {\n    @Autowired('rowModel') private readonly gridRowModel: IRowModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('rowNodeSorter') private readonly rowNodeSorter: RowNodeSorter;\n    @Autowired('sortController') private sortController: SortController;\n    @Optional('aggregationStage') private readonly aggregationStage: IAggregationStage;\n\n    public getData(params: ChartDatasourceParams): IData {\n        if (params.crossFiltering) {\n            if (params.grouping) {\n                console.warn(\"AG Grid: crossing filtering with row grouping is not supported.\");\n                return {chartData: [], columnNames: {}};\n            }\n\n            if (!this.gridOptionsService.isRowModelType('clientSide')) {\n                console.warn(\"AG Grid: crossing filtering is only supported in the client side row model.\");\n                return {chartData: [], columnNames: {}};\n            }\n        }\n\n        const isServerSide = this.gridOptionsService.isRowModelType('serverSide');\n        if (isServerSide && params.pivoting) {\n            this.updatePivotKeysForSSRM();\n        }\n\n        const result = this.extractRowsFromGridRowModel(params);\n        result.chartData = this.aggregateRowsByDimension(params, result.chartData);\n        return result;\n    }\n\n    private extractRowsFromGridRowModel(params: ChartDatasourceParams): IData {\n        let extractedRowData: any[] = [];\n        const columnNames: { [key: string]: string[]; } = {};\n\n        // maps used to keep track of expanded groups that need to be removed\n        const groupNodeIndexes: { [key: string]: number; } = {};\n        const groupsToRemove: { [key: string]: number; } = {};\n\n        // only used when cross filtering\n        let filteredNodes: { [key: string]: RowNode; } = {};\n        let allRowNodes: RowNode[] = [];\n\n        let numRows;\n        if (params.crossFiltering) {\n            filteredNodes = this.getFilteredRowNodes();\n            allRowNodes = this.getAllRowNodes();\n            numRows = allRowNodes.length;\n        } else {\n            // make sure enough rows in range to chart. if user filters and less rows, then end row will be\n            // the last displayed row, not where the range ends.\n            const modelLastRow = this.gridRowModel.getRowCount() - 1;\n            const rangeLastRow = params.endRow >= 0 ? Math.min(params.endRow, modelLastRow) : modelLastRow;\n            numRows = rangeLastRow - params.startRow + 1;\n        }\n\n        for (let i = 0; i < numRows; i++) {\n            const data: any = {};\n\n            const rowNode = params.crossFiltering ? allRowNodes[i] : this.gridRowModel.getRow(i + params.startRow)!;\n\n            // first get data for dimensions columns\n            params.dimensionCols.forEach(col => {\n                const colId = col.colId;\n                const column = this.columnModel.getGridColumn(colId);\n\n                if (column) {\n                    const valueObject = this.valueService.getValue(column, rowNode);\n\n                    // when grouping we also need to build up multi category labels for charts\n                    if (params.grouping) {\n                        const valueString = valueObject && valueObject.toString ? String(valueObject.toString()) : '';\n\n                        // traverse parents to extract group label path\n                        const labels = ChartDatasource.getGroupLabels(rowNode, valueString);\n\n                        data[colId] = {\n                            labels, toString: function() {\n                                return this.labels.filter((l: string) => !!l).reverse().join(' - ');\n                            }\n                        };\n\n                        // keep track of group node indexes, so they can be padded when other groups are expanded\n                        if (rowNode.group) {\n                            groupNodeIndexes[labels.toString()] = i;\n                        }\n\n                        // if node (group or leaf) has parents then it is expanded and should be removed\n                        const groupKey = labels.slice(1, labels.length).toString();\n\n                        if (groupKey) {\n                            groupsToRemove[groupKey] = groupNodeIndexes[groupKey];\n                        }\n                    } else {\n                        // leaf nodes can be directly added to dimension columns\n                        data[colId] = valueObject;\n                    }\n                } else {\n                    // introduce a default category when no dimensions exist with a value based off row index (+1)\n                    data[ChartDataModel.DEFAULT_CATEGORY] = i + 1;\n                }\n            });\n\n            // then get data for value columns\n            params.valueCols.forEach(col => {\n                let columnNamesArr: string[] = [];\n\n                // pivot keys should be added first\n                const pivotKeys = col.getColDef().pivotKeys;\n                if (pivotKeys) {\n                    columnNamesArr = pivotKeys.slice();\n                }\n\n                // then add column header name to results\n                const headerName = col.getColDef().headerName;\n                if (headerName) {\n                    columnNamesArr.push(headerName);\n                }\n\n                // add array of column names to results\n                if (columnNamesArr.length > 0) {\n                    columnNames[col.getId()] = columnNamesArr;\n                }\n\n                const colId = col.getColId();\n                if (params.crossFiltering) {\n                    const filteredOutColId = colId + '-filtered-out';\n\n                    // add data value to value column\n                    const value = this.valueService.getValue(col, rowNode);\n                    const actualValue = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n\n                    if (filteredNodes[rowNode.id as string]) {\n                        data[colId] = actualValue;\n                        data[filteredOutColId] = params.aggFunc || params.isScatter ? undefined : 0;\n                    } else {\n                        data[colId] = params.aggFunc || params.isScatter ? undefined : 0;\n                        data[filteredOutColId] = actualValue;\n                    }\n\n                } else {\n                    // add data value to value column\n                    let value = this.valueService.getValue(col, rowNode);\n\n                    // aggregated value\n                    if (value && value.hasOwnProperty('toString')) {\n                        value = parseFloat(value.toString());\n                    }\n\n                    data[colId] = value != null && typeof value.toNumber === 'function' ? value.toNumber() : value;\n                }\n            });\n\n            // row data from footer nodes should not be included in charts\n            if (rowNode.footer) {\n                // 'stamping' data as footer to avoid impacting previously calculated `groupIndexesToRemove` and will\n                // be removed from the results along with any expanded group nodes\n                data.footer = true;\n            }\n\n            // add data to results\n            extractedRowData.push(data);\n        }\n\n        if (params.grouping) {\n            const groupIndexesToRemove = _.values(groupsToRemove);\n            const filterFunc = (data: any, index: number) => !data.footer && !_.includes(groupIndexesToRemove, index);\n            extractedRowData = extractedRowData.filter(filterFunc);\n        }\n\n        return { chartData: extractedRowData, columnNames };\n    }\n\n    private aggregateRowsByDimension(params: ChartDatasourceParams, dataFromGrid: any[]): any[] {\n        const dimensionCols = params.dimensionCols;\n\n        if (!params.aggFunc || dimensionCols.length === 0) { return dataFromGrid; }\n\n        const lastCol = _.last(dimensionCols);\n        const lastColId = lastCol && lastCol.colId;\n        const map: any = {};\n        const dataAggregated: any[] = [];\n\n        dataFromGrid.forEach(data => {\n            let currentMap = map;\n\n            dimensionCols.forEach(col => {\n                const colId = col.colId;\n                const key = data[colId];\n\n                if (colId === lastColId) {\n                    let groupItem = currentMap[key];\n\n                    if (!groupItem) {\n                        groupItem = { __children: [] };\n\n                        dimensionCols.forEach(dimCol => {\n                            const dimColId = dimCol.colId;\n                            groupItem[dimColId] = data[dimColId];\n                        });\n\n                        currentMap[key] = groupItem;\n                        dataAggregated.push(groupItem);\n                    }\n\n                    groupItem.__children.push(data);\n                } else {\n                    // map of maps\n                    if (!currentMap[key]) {\n                        currentMap[key] = {};\n                    }\n\n                    currentMap = currentMap[key];\n                }\n            });\n        });\n\n        if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation', this.context.getGridId())) {\n            dataAggregated.forEach(groupItem => params.valueCols.forEach(col => {\n\n                if (params.crossFiltering) {\n                    params.valueCols.forEach(valueCol => {\n                        const colId = valueCol.getColId();\n\n                        // filtered data\n                        const dataToAgg = groupItem.__children\n                            .filter((child: any) => typeof child[colId] !== 'undefined')\n                            .map((child: any) => child[colId]);\n\n                        let aggResult: any = this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc!);\n                        groupItem[valueCol.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n\n                        // filtered out data\n                        const filteredOutColId = `${colId}-filtered-out`;\n                        const dataToAggFiltered = groupItem.__children\n                            .filter((child: any) => typeof child[filteredOutColId] !== 'undefined')\n                            .map((child: any) => child[filteredOutColId]);\n\n                        let aggResultFiltered: any = this.aggregationStage.aggregateValues(dataToAggFiltered, params.aggFunc!);\n                        groupItem[filteredOutColId] = aggResultFiltered && typeof aggResultFiltered.value !== 'undefined' ? aggResultFiltered.value : aggResultFiltered;\n                    });\n                } else {\n                    const dataToAgg = groupItem.__children.map((child: any) => child[col.getId()]);\n                    let aggResult: any = 0;\n\n                    if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Charting Aggregation', this.context.getGridId())) {\n                        aggResult = this.aggregationStage.aggregateValues(dataToAgg, params.aggFunc!);\n                    }\n\n                    groupItem[col.getId()] = aggResult && typeof aggResult.value !== 'undefined' ? aggResult.value : aggResult;\n                }\n            }));\n        }\n\n        return dataAggregated;\n    }\n\n    private updatePivotKeysForSSRM() {\n        const secondaryColumns = this.columnModel.getSecondaryColumns();\n\n        if (!secondaryColumns) { return; }\n\n        // we don't know what the application will use for the pivot key separator (i.e. '_' or '|' ) as the\n        // secondary columns are provided to grid by the application via api.setSecondaryColumns()\n        const pivotKeySeparator = this.extractPivotKeySeparator(secondaryColumns);\n\n        // `pivotKeys` is not used by the SSRM for pivoting, so it is safe to reuse this colDef property. This way\n        // the same logic can be used for CSRM and SSRM to extract legend names in extractRowsFromGridRowModel()\n        secondaryColumns.forEach(col => {\n            if (pivotKeySeparator === '') {\n                col.getColDef().pivotKeys = [];\n            } else {\n                const keys = col.getColId().split(pivotKeySeparator);\n                col.getColDef().pivotKeys = keys.slice(0, keys.length - 1);\n            }\n        });\n    }\n\n    private extractPivotKeySeparator(secondaryColumns: Column[]) {\n        if (secondaryColumns.length === 0) { return ''; }\n\n        const extractSeparator = (columnGroup: ColumnGroup, childId: string): string => {\n            const groupId = columnGroup.getGroupId();\n            if (!columnGroup.getParent()) {\n                // removing groupId ('2000') from childId ('2000|Swimming') yields '|Swimming' so first char is separator\n                return childId.split(groupId)[1][0];\n            }\n            return extractSeparator(columnGroup.getParent(), groupId);\n        };\n\n        const firstSecondaryCol = secondaryColumns[0];\n        if (firstSecondaryCol.getParent() == null) {\n            return '';\n        }\n        return extractSeparator(firstSecondaryCol.getParent(), firstSecondaryCol.getColId());\n    }\n\n    private static getGroupLabels(rowNode: RowNode | null, initialLabel: string): string[] {\n        const labels = [initialLabel];\n        while (rowNode && rowNode.level !== 0) {\n            rowNode = rowNode.parent;\n            if (rowNode) {\n                labels.push(rowNode.key!);\n            }\n        }\n        return labels;\n    }\n\n    private getFilteredRowNodes() {\n        const filteredNodes: { [key: string]: RowNode; } = {};\n        (this.gridRowModel as IClientSideRowModel).forEachNodeAfterFilterAndSort((rowNode: RowNode) => {\n            filteredNodes[rowNode.id as string] = rowNode;\n        });\n        return filteredNodes;\n    }\n\n    private getAllRowNodes() {\n        let allRowNodes: RowNode[] = [];\n        this.gridRowModel.forEachNode((rowNode: RowNode) => {\n            allRowNodes.push(rowNode);\n        });\n        return this.sortRowNodes(allRowNodes);\n    }\n\n    private sortRowNodes(rowNodes: RowNode[]): RowNode[] {\n        const sortOptions = this.sortController.getSortOptions();\n        const noSort = !sortOptions || sortOptions.length == 0;\n        if (noSort) return rowNodes;\n        return this.rowNodeSorter.doFullSort(rowNodes, sortOptions);\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    RowNode,\n    RowRenderer,\n    ValueService\n} from \"@ag-grid-community/core\";\n\n@Bean(\"chartColumnService\")\nexport class ChartColumnService extends BeanStub {\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n    @Autowired('rowRenderer') private readonly rowRenderer: RowRenderer;\n\n    public getColumn(colId: string): Column | null {\n        return this.columnModel.getPrimaryColumn(colId);\n    }\n\n    public getAllDisplayedColumns(): Column[] {\n        return this.columnModel.getAllDisplayedColumns();\n    }\n\n    public getColDisplayName(col: Column): string | null {\n        return this.columnModel.getDisplayNameForColumn(col, 'chart');\n    }\n\n    public getRowGroupColumns(): Column[] {\n        return this.columnModel.getRowGroupColumns();\n    }\n\n    public getGroupDisplayColumns(): Column[] {\n        return this.columnModel.getGroupDisplayColumns();\n    }\n\n    public isPivotMode(): boolean {\n        return this.columnModel.isPivotMode();\n    }\n\n    public isPivotActive(): boolean {\n        return this.columnModel.isPivotActive();\n    }\n\n    public getChartColumns(): { dimensionCols: Set<Column>; valueCols: Set<Column>; } {\n        const displayedCols = this.columnModel.getAllDisplayedColumns();\n\n        const dimensionCols = new Set<Column>();\n        const valueCols = new Set<Column>();\n\n        displayedCols.forEach(col => {\n            const colDef = col.getColDef();\n            const chartDataType = colDef.chartDataType;\n\n            if (chartDataType) {\n                // chart data type was specified explicitly\n                switch (chartDataType) {\n                    case 'category':\n                    case 'time':\n                        dimensionCols.add(col);\n                        return;\n                    case 'series':\n                        valueCols.add(col);\n                        return;\n                    case 'excluded':\n                        return;\n                    default:\n                        console.warn(`AG Grid: unexpected chartDataType value '${chartDataType}' supplied, instead use 'category', 'series' or 'excluded'`);\n                        break;\n                }\n            }\n\n            if (colDef.colId === 'ag-Grid-AutoColumn') {\n                dimensionCols.add(col);\n                return;\n            }\n\n            if (!col.isPrimary()) {\n                valueCols.add(col);\n                return;\n            }\n\n            // if 'chartDataType' is not provided then infer type based data contained in first row\n            (this.isNumberCol(col) ? valueCols : dimensionCols).add(col);\n        });\n\n        return { dimensionCols, valueCols };\n    }\n\n    private isNumberCol(col: Column): boolean {\n        if (col.getColId() === 'ag-Grid-AutoColumn') {\n            return false;\n        }\n\n        const row = this.rowRenderer.getRowNode({ rowIndex: 0, rowPinned: null });\n\n        if (!row) { return false; }\n\n        let cellValue = this.valueService.getValue(col, row);\n\n        if (cellValue == null) {\n            cellValue = this.extractLeafData(row, col);\n        }\n\n        if (cellValue != null && typeof cellValue.toNumber === 'function') {\n            cellValue = cellValue.toNumber();\n        }\n\n        return typeof cellValue === 'number';\n    }\n\n    private extractLeafData(row: RowNode, col: Column): any {\n        if (!row.allLeafChildren) { return null; }\n\n        for (let i = 0; i < row.allLeafChildren.length; i++) {\n            const childRow = row.allLeafChildren[i];\n            const value = this.valueService.getValue(col, childRow);\n\n            if (value != null) {\n                return value;\n            }\n        }\n\n        return null;\n    }\n}\n", "import { BeanStub, ChartType, PostConstruct, SeriesChartType, } from \"@ag-grid-community/core\";\nimport { ChartDataModel, ColState } from \"./chartDataModel\";\n\nexport class ComboChartModel extends BeanStub {\n    public static SUPPORTED_COMBO_CHART_TYPES = ['line', 'groupedColumn', 'stackedColumn', 'area', 'stackedArea'];\n\n    public seriesChartTypes: SeriesChartType[];\n    public savedCustomSeriesChartTypes: SeriesChartType[];\n\n    // this control flag is used to only log warning for the initial user config\n    private suppressComboChartWarnings = false;\n    private chartDataModel: ChartDataModel;\n\n    public constructor(chartDataModel: ChartDataModel) {\n        super();\n        this.chartDataModel = chartDataModel;\n        this.seriesChartTypes = chartDataModel.params.seriesChartTypes ?? [];\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.initComboCharts();\n    }\n\n    public update(seriesChartTypes?: SeriesChartType[]): void {\n        this.seriesChartTypes = seriesChartTypes ?? this.seriesChartTypes;\n        this.initComboCharts();\n        this.updateSeriesChartTypes();\n    }\n\n    private initComboCharts() {\n        const seriesChartTypesExist = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        const customCombo = this.chartDataModel.chartType === 'customCombo' || seriesChartTypesExist;\n        if (customCombo) {\n            // it is not necessary to supply a chart type for combo charts when `seriesChartTypes` is supplied\n            this.chartDataModel.chartType = 'customCombo';\n\n            // cache supplied `seriesChartTypes` to allow switching between different chart types in the settings panel\n            this.savedCustomSeriesChartTypes = this.seriesChartTypes || [];\n        }\n    }\n\n    public updateSeriesChartTypes(): void {\n        if (!this.chartDataModel.isComboChart()) {\n            return;\n        }\n\n        // ensure primary only chart types are not placed on secondary axis\n        this.seriesChartTypes = this.seriesChartTypes.map(seriesChartType => {\n            const primaryOnly = ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(seriesChartType.chartType);\n            seriesChartType.secondaryAxis = primaryOnly ? false : seriesChartType.secondaryAxis;\n            return seriesChartType;\n        });\n\n        // note that when seriesChartTypes are supplied the chart type is also changed to 'customCombo'\n        if (this.chartDataModel.chartType === 'customCombo') {\n            this.updateSeriesChartTypesForCustomCombo();\n            return;\n        }\n\n        this.updateChartSeriesTypesForBuiltInCombos();\n    }\n\n    private updateSeriesChartTypesForCustomCombo() {\n        const seriesChartTypesSupplied = this.seriesChartTypes && this.seriesChartTypes.length > 0;\n        if (!seriesChartTypesSupplied && !this.suppressComboChartWarnings) {\n            console.warn(`AG Grid: 'seriesChartTypes' are required when the 'customCombo' chart type is specified.`);\n        }\n\n        // ensure correct chartTypes are supplied\n        this.seriesChartTypes = this.seriesChartTypes.map(s => {\n            if (!ComboChartModel.SUPPORTED_COMBO_CHART_TYPES.includes(s.chartType)) {\n                console.warn(`AG Grid: invalid chartType '${s.chartType}' supplied in 'seriesChartTypes', converting to 'line' instead.`);\n                s.chartType = 'line';\n            }\n            return s;\n        });\n\n        const getSeriesChartType = (valueCol: ColState): SeriesChartType => {\n            if (!this.savedCustomSeriesChartTypes || this.savedCustomSeriesChartTypes.length === 0) {\n                this.savedCustomSeriesChartTypes = this.seriesChartTypes;\n            }\n\n            const providedSeriesChartType = this.savedCustomSeriesChartTypes.find(s => s.colId === valueCol.colId);\n            if (!providedSeriesChartType) {\n                if (valueCol.selected && !this.suppressComboChartWarnings) {\n                    console.warn(`AG Grid: no 'seriesChartType' found for colId = '${valueCol.colId}', defaulting to 'line'.`);\n                }\n                return {\n                    colId: valueCol.colId,\n                    chartType: 'line',\n                    secondaryAxis: false\n                };\n            }\n\n            return providedSeriesChartType;\n        }\n\n        const updatedSeriesChartTypes = this.chartDataModel.valueColState.map(getSeriesChartType);\n\n        this.seriesChartTypes = updatedSeriesChartTypes;\n\n        // also cache custom `seriesChartTypes` to allow for switching between different chart types\n        this.savedCustomSeriesChartTypes = updatedSeriesChartTypes;\n\n        // turn off warnings as first combo chart attempt has completed\n        this.suppressComboChartWarnings = true;\n    }\n\n    private updateChartSeriesTypesForBuiltInCombos() {\n        const { chartType, valueColState } = this.chartDataModel;\n\n        let primaryChartType: ChartType = chartType === 'columnLineCombo' ? 'groupedColumn' : 'stackedArea';\n        let secondaryChartType: ChartType = chartType === 'columnLineCombo' ? 'line' : 'groupedColumn';\n\n        const selectedCols = valueColState.filter(cs => cs.selected);\n        const lineIndex = Math.ceil(selectedCols.length / 2);\n        this.seriesChartTypes = selectedCols.map((valueCol: ColState, i: number) => {\n            const seriesType = (i >= lineIndex) ? secondaryChartType : primaryChartType;\n            return { colId: valueCol.colId, chartType: seriesType, secondaryAxis: false };\n        });\n    }\n}\n", "import { ChartType } from \"@ag-grid-community/core\";\n\n// these values correspond to top level object names in `AgChartThemeOverrides`\nexport type ChartSeriesType =\n    'cartesian' |\n    'column' |\n    'bar' |\n    'line' |\n    'area' |\n    'scatter' |\n    'histogram' |\n    'polar' |\n    'pie' |\n    'donut' |\n    'hierarchy' |\n    'bubble' |\n    'radial-column' |\n    'radial-bar' |\n    'radar-line' |\n    'radar-area' |\n    'nightingale' |\n    'range-bar' |\n    'range-area' |\n    'box-plot' |\n    'treemap' |\n    'sunburst' |\n    'heatmap' |\n    'waterfall' |\n    'common';\n\nexport const VALID_SERIES_TYPES: ChartSeriesType[] = [\n    'area',\n    'bar',\n    'column',\n    'histogram',\n    'line',\n    'pie',\n    'donut',\n    'scatter',\n    'bubble',\n    'radial-column',\n    'radial-bar',\n    'radar-line',\n    'radar-area',\n    'nightingale',\n    'range-bar',\n    'range-area',\n    'box-plot',\n    'treemap',\n    'sunburst',\n    'heatmap',\n    'waterfall',\n];\n\nexport function isEnterpriseChartType(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'rangeBar':\n        case 'rangeArea':\n        case 'waterfall':\n        case 'boxPlot':\n        case 'radarLine':\n        case 'radarArea':\n        case 'nightingale':\n        case 'radialColumn':\n        case 'radialBar':\n        case 'sunburst':\n        case 'treemap':\n        case 'heatmap':\n            return true;\n        default:\n            return false;\n    }\n}\n\nconst horizontalChartTypes = new Set(['bar', 'groupedBar', 'stackedBar', 'normalizedBar']);\nexport function isHorizontal(chartType: ChartType): boolean {\n    return horizontalChartTypes.has(chartType);\n}\n\nconst stackedChartTypes = new Set(['stackedColumn', 'normalizedColumn', 'stackedBar', 'normalizedBar']);\nexport function isStacked(chartType: ChartType): boolean {\n    return stackedChartTypes.has(chartType);\n}\n\nexport function isCartesian(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'area':\n        case 'areaColumnCombo':\n        case 'bar':\n        case 'boxPlot':\n        case 'bubble':\n        case 'column':\n        case 'columnLineCombo':\n        case 'customCombo':\n        case 'groupedBar':\n        case 'groupedColumn':\n        case 'heatmap':\n        case 'histogram':\n        case 'line':\n        case 'normalizedArea':\n        case 'normalizedBar':\n        case 'normalizedColumn':\n        case 'rangeArea':\n        case 'rangeBar':\n        case 'scatter':\n        case 'stackedArea':\n        case 'stackedBar':\n        case 'stackedColumn':\n        case 'waterfall':\n            return true;\n        case 'donut':\n        case 'doughnut':\n        case 'nightingale':\n        case 'pie':\n        case 'radarArea':\n        case 'radarLine':\n        case 'radialColumn':\n        case 'radialBar':\n        case 'sunburst':\n        case 'treemap':\n        default:\n            return false;\n    }\n}\n\nexport function isPolar(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'donut':\n        case 'doughnut':\n        case 'pie':\n        case 'radialColumn':\n        case 'radialBar':\n        case 'radarLine':\n        case 'radarArea':\n        case 'nightingale':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function isRadial(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'radialColumn':\n        case 'radialBar':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function isHierarchical(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'treemap':\n        case 'sunburst':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function hasGradientLegend(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'treemap':\n        case 'sunburst':\n        case 'heatmap':\n            return true;\n        default:\n            return false;\n    }\n}\n\nexport function getCanonicalChartType(chartType: ChartType): Exclude<ChartType, 'doughnut'> {\n    switch (chartType) {\n        case 'doughnut':\n            return 'donut';\n        default:\n            return chartType;\n    }\n}\n\nexport function getSeriesType(chartType: ChartType): ChartSeriesType {\n    switch (chartType) {\n        case 'bar':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return 'bar';\n        case 'column':\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n            return 'bar';\n        case 'line':\n            return 'line';\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n            return 'area';\n        case 'bubble':\n            return 'bubble';\n        case 'scatter':\n            return 'scatter';\n        case 'histogram':\n            return 'histogram';\n        case 'radialColumn':\n            return 'radial-column';\n        case 'radialBar':\n            return 'radial-bar';\n        case 'radarLine':\n            return 'radar-line';\n        case 'radarArea':\n            return 'radar-area';\n        case 'nightingale':\n            return 'nightingale';\n        case 'rangeBar':\n            return 'range-bar';\n        case 'rangeArea':\n            return 'range-area';\n        case 'boxPlot':\n            return 'box-plot';\n        case 'treemap':\n            return 'treemap';\n        case 'sunburst':\n            return 'sunburst';\n        case 'pie':\n            return 'pie';\n        case 'donut':\n        case 'doughnut':\n            return 'donut';\n        case 'heatmap':\n            return 'heatmap';\n        case 'waterfall':\n            return 'waterfall';\n        default:\n            return 'cartesian';\n    }\n}\n\nexport type PieChartSeriesType = Extract<ChartSeriesType, 'pie' | 'donut'>;\n\nexport function isPieChartSeries(seriesType: ChartSeriesType): seriesType is PieChartSeriesType {\n    switch (seriesType) {\n        case 'pie':\n        case 'donut':\n            return true;\n        default:\n            return false;\n    }\n}\n\nfunction canOnlyHaveSingleSeries(chartType: ChartType): boolean {\n    return chartType === 'pie' || chartType === 'waterfall' || chartType === 'histogram';\n}\n\nexport function getMaxNumCategories(chartType: ChartType): number | undefined {\n    return isHierarchical(chartType) ? undefined : 1;\n}\n\nexport function getMaxNumSeries(chartType: ChartType): number | undefined {\n    if (isHierarchical(chartType)) {\n        return 2;\n    } else if (canOnlyHaveSingleSeries(chartType)) {\n        return 1;\n    } else {\n        return undefined;\n    }\n}\n\nexport function supportsInvertedCategorySeries(chartType: ChartType): boolean {\n    switch (chartType) {\n        case 'column':\n        case 'groupedColumn':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'bar':\n        case 'groupedBar':\n        case 'stackedBar':\n        case 'normalizedBar':\n        case 'line':\n        case 'donut':\n        case 'doughnut':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'radarLine':\n        case 'radarArea':\n        case 'nightingale':\n        case 'radialColumn':\n        case 'radialBar':\n            return true;\n        case 'pie':\n        case 'scatter':\n        case 'bubble':\n        case 'sunburst':\n        case 'rangeBar':\n        case 'rangeArea':\n        case 'boxPlot':\n        case 'histogram':\n        case 'treemap':\n        case 'heatmap':\n        case 'waterfall':\n        case 'columnLineCombo':\n        case 'areaColumnCombo':\n        case 'customCombo':\n            return false;\n    }\n}", "import { _ } from '@ag-grid-community/core';\nimport {\n    _Theme,\n    AgChartLegendClickEvent,\n    AgChartTheme,\n    AgChartThemeName,\n    AgChartThemeOverrides,\n    AgChartThemePalette,\n} from 'ag-charts-community';\nimport { ALL_AXIS_TYPES } from '../utils/axisTypeMapper';\nimport { ChartSeriesType, getSeriesType, isPieChartSeries } from '../utils/seriesTypeMapper';\nimport { ChartProxy, ChartProxyParams } from './chartProxy';\nimport { get } from '../utils/object';\n\nexport function createAgChartTheme(\n    chartProxyParams: ChartProxyParams,\n    proxy: ChartProxy,\n    isEnterprise: boolean,\n): AgChartTheme {\n    const { chartOptionsToRestore, chartPaletteToRestore, chartThemeToRestore } = chartProxyParams;\n    const themeName = getSelectedTheme(chartProxyParams);\n    const stockTheme = isStockTheme(themeName);\n\n    const rootTheme = stockTheme\n        ? { baseTheme: themeName as AgChartThemeName }\n        : lookupCustomChartTheme(chartProxyParams, themeName) ?? {};\n\n    const gridOptionsThemeOverrides = chartProxyParams.getGridOptionsChartThemeOverrides();\n    const apiThemeOverrides = chartProxyParams.apiChartThemeOverrides;\n\n    const standaloneChartType = getSeriesType(chartProxyParams.chartType);\n    const crossFilterThemeOverridePoint = isPieChartSeries(standaloneChartType) ? standaloneChartType : 'cartesian';\n    const crossFilteringOverrides = chartProxyParams.crossFiltering\n        ? createCrossFilterThemeOverrides(proxy, chartProxyParams, crossFilterThemeOverridePoint)\n        : undefined;\n    const formattingPanelOverrides: AgChartThemeOverrides = {\n        ...(chartOptionsToRestore ?? {}),\n    };\n\n    const isTitleEnabled = () => {\n        const isTitleEnabled = (obj: any) => {\n            if (!obj) { return false; }\n            return Object.keys(obj).some(key => get(obj[key], 'title.enabled', false));\n        }\n        return isTitleEnabled(gridOptionsThemeOverrides) || isTitleEnabled(apiThemeOverrides);\n    }\n\n    // Overrides in ascending precedence ordering.\n    const overrides: (AgChartThemeOverrides | undefined)[] = [\n        stockTheme ? inbuiltStockThemeOverrides(chartProxyParams, isEnterprise, isTitleEnabled()) : undefined,\n        crossFilteringOverrides,\n        gridOptionsThemeOverrides,\n        apiThemeOverrides,\n        formattingPanelOverrides,\n    ];\n\n    // Recursively nest theme overrides so they are applied with correct precedence in\n    // Standalone Charts - this is an undocumented feature.\n    // Outermost theme overrides will be the formatting panel configured values, so they are\n    // differentiated from grid-config and inbuilt overrides.\n    const theme = overrides\n        .filter((v): v is AgChartThemeOverrides => !!v)\n        .reduce(\n            (r, n): AgChartTheme => ({\n                baseTheme: r as any,\n                overrides: n,\n            }),\n            rootTheme\n        );\n\n    // Avoid explicitly setting the `theme.palette` property unless we're using the restored theme\n    // AND the palette is actually different.\n    if (chartPaletteToRestore && themeName === chartThemeToRestore) {\n        const rootThemePalette = _Theme.getChartTheme(rootTheme).palette;\n        if (!isIdenticalPalette(chartPaletteToRestore, rootThemePalette)) {\n            theme.palette = chartPaletteToRestore;\n        }\n    }\n\n    return theme;\n}\n\nexport function applyThemeOverrides(\n    baseTheme: AgChartTheme,\n    overrides: Array<AgChartThemeOverrides | null | undefined>\n): AgChartTheme {\n    return overrides.reduce(\n        (baseTheme, overrides) => {\n            if (!overrides) return baseTheme;\n            return {\n                baseTheme: baseTheme as any,\n                overrides,\n            };\n        },\n        baseTheme,\n    );\n}\n\nfunction isIdenticalPalette(paletteA: AgChartThemePalette, paletteB: AgChartThemePalette) {\n    const arrayCompare = (arrA: any[], arrB: any[]) => {\n        if (arrA.length !== arrB.length) return false;\n\n        return arrA.every((v: any, i) => v === arrB[i]);\n    };\n\n    return arrayCompare(paletteA.fills, paletteB.fills) &&\n        arrayCompare(paletteA.strokes, paletteB.strokes);\n}\n\nexport function isStockTheme(themeName: string): boolean {\n    return _.includes(Object.keys(_Theme.themes), themeName);\n}\n\nfunction createCrossFilterThemeOverrides(\n    proxy: ChartProxy,\n    chartProxyParams: ChartProxyParams,\n    overrideType: Extract<ChartSeriesType, 'cartesian' | 'pie' | 'donut'>,\n): AgChartThemeOverrides {\n    const legend = {\n        listeners: {\n            legendItemClick: (e: AgChartLegendClickEvent) => {\n                const chart = proxy.getChart();\n                chart.series.forEach((s) => {\n                    s.toggleSeriesItem(e.itemId, e.enabled);\n                    s.toggleSeriesItem(`${e.itemId}-filtered-out`, e.enabled);\n                });\n            },\n        },\n    };\n\n    const series: AgChartThemeOverrides = {};\n    return {\n        [overrideType]: {\n            tooltip: {\n                delay: 500,\n            },\n            legend,\n            listeners: {\n                click: (e: any) => chartProxyParams.crossFilterCallback(e, true),\n            },\n            series,\n        },\n    };\n}\n\nconst STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES = ALL_AXIS_TYPES.reduce(\n    (r, n) => ({ ...r, [n]: { title: { _enabledFromTheme: true } } }),\n    {}\n);\n\nfunction inbuiltStockThemeOverrides(params: ChartProxyParams, isEnterprise: boolean, titleEnabled: boolean) {\n    const extraPadding = params.getExtraPaddingDirections();\n    return {\n        common: {\n            ...(isEnterprise ? { animation: { duration: 500 } } : undefined),\n            axes: STATIC_INBUILT_STOCK_THEME_AXES_OVERRIDES,\n            padding: {\n                // don't add extra padding when a title is present!\n                top: !titleEnabled && extraPadding.includes('top') ? 40 : 20,\n                right: extraPadding.includes('right') ? 30 : 20,\n                bottom: extraPadding.includes('bottom') ? 40 : 20,\n                left: extraPadding.includes('left') ? 30 : 20,\n            },\n        },\n        pie: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n        donut: {\n            series: {\n                title: { _enabledFromTheme: true },\n                calloutLabel: { _enabledFromTheme: true },\n                sectorLabel: {\n                    enabled: false,\n                    _enabledFromTheme: true,\n                },\n            } as any,\n        },\n    };\n}\n\nfunction getSelectedTheme(chartProxyParams: ChartProxyParams): string {\n    let chartThemeName = chartProxyParams.getChartThemeName();\n    const availableThemes = chartProxyParams.getChartThemes();\n\n    if (!_.includes(availableThemes, chartThemeName)) {\n        chartThemeName = availableThemes[0];\n    }\n\n    return chartThemeName;\n}\n\nexport function lookupCustomChartTheme(chartProxyParams: ChartProxyParams, name: string): AgChartTheme {\n    const { customChartThemes } = chartProxyParams;\n    const customChartTheme = customChartThemes && customChartThemes[name];\n\n    if (!customChartTheme) {\n        console.warn(\n            `AG Grid: no stock theme exists with the name '${name}' and no ` +\n                \"custom chart theme with that name was supplied to 'customChartThemes'\"\n        );\n    }\n\n    return customChartTheme as AgChartTheme;\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { AgCartesianAxisType } from 'ag-charts-community';\n\nexport const ALL_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'grouped-category', 'log', 'time'];\n\nexport function getLegacyAxisType(chartType: ChartType): [AgCartesianAxisType, AgCartesianAxisType] | undefined {\n    switch (chartType) {\n        case 'bar':\n        case 'stackedBar':\n        case 'normalizedBar':\n            return ['number', 'category'];\n        case 'groupedBar':\n            return ['number', 'grouped-category'];\n        case 'column':\n        case 'stackedColumn':\n        case 'normalizedColumn':\n        case 'line':\n        case 'area':\n        case 'stackedArea':\n        case 'normalizedArea':\n        case 'histogram':\n            return ['category', 'number'];\n        case 'groupedColumn':\n            return ['grouped-category', 'number'];\n        case 'scatter':\n        case 'bubble':\n            return ['number', 'number'];\n        default:\n            return undefined;\n    }\n}\n", "// deepMerge\nfunction emptyTarget(value: any) {\n    return Array.isArray(value) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value: any, options: any) {\n    return (options.clone !== false && options.isMergeableObject(value))\n        ? deepMerge(emptyTarget(value), value, options)\n        : value;\n}\n\nfunction defaultArrayMerge(target: any, source: any, options: any) {\n    return target.concat(source).map(function(element: any) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\n\nfunction getMergeFunction(key: string, options: any) {\n    if (!options.customMerge) {\n        return deepMerge;\n    }\n    const customMerge = options.customMerge(key);\n    return typeof customMerge === 'function' ? customMerge : deepMerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target: any): any[] {\n    // @ts-ignore\n    return Object.getOwnPropertySymbols \n    // @ts-ignore\n        ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n            return target.propertyIsEnumerable(symbol);\n        }) \n        : [];\n}\n\nfunction getKeys(target: any): any[] {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object: any, property: string) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target: any, key: string) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n        && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n            && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target: Record<string, any> = {}, source: Record<string, any> = {}, options: any) {\n    const destination: any = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\n\nfunction defaultIsMergeableObject(value: any): boolean {\n    return isNonNullObject(value) && !isSpecial(value);\n}\n\nfunction isNonNullObject(value: any): boolean {\n    return !!value && typeof value === 'object';\n}\n\nfunction isSpecial(value: any): boolean {\n    const stringValue = Object.prototype.toString.call(value);\n    return stringValue === '[object RegExp]' || stringValue === '[object Date]';\n}\n\nexport function deepMerge<T>(target: T, source: T, options?: any): T;\nexport function deepMerge(target: any, source: any, options?: any): any;\nexport function deepMerge(target: any, source: any, options?: any): any {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n    const sourceIsArray = Array.isArray(source);\n    const targetIsArray = Array.isArray(target);\n    const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\n// END - deep merge\n\n\nexport function get(source: any, expression: string, defaultValue: any): any {\n    if (source == null) { return defaultValue; }\n\n    const keys = expression.split('.');\n    let objectToRead = source;\n\n    while (keys.length > 1) {\n        objectToRead = objectToRead[keys.shift()!];\n\n        if (objectToRead == null) {\n            return defaultValue;\n        }\n    }\n\n    const value = objectToRead[keys[0]];\n\n    return value != null ? value : defaultValue;\n}\n\nexport function set(target: any, expression: string, value: any) {\n    if (target == null) { return; }\n\n    const keys = expression.split('.');\n    \n    let objectToUpdate = target;\n    // Create empty objects\n    keys.forEach((key, i) => {\n        if (!objectToUpdate[key]) {\n            objectToUpdate[key] = {};\n        }\n\n        if (i < keys.length - 1) {\n            objectToUpdate = objectToUpdate[key];\n        }\n    });\n\n    objectToUpdate[keys[keys.length - 1]] = value;\n}", "import {\n    AgChartThemeOverrides,\n    ChartParamsCellRange,\n    ChartType,\n    IAggFunc,\n    UpdateChartParams,\n    UpdateCrossFilterChartParams,\n    UpdatePivotChartParams,\n    UpdateRangeChartParams,\n    SeriesChartType,\n    Column\n} from \"@ag-grid-community/core\";\nimport { getCanonicalChartType } from './seriesTypeMapper';\n\nconst validateIfDefined = <I, O = never>(validationFn: (value: NonNullable<I>) => boolean | O) => {\n    return (value: I | null | undefined): boolean | O => {\n        if (value == undefined) return true;\n        return validationFn(value as NonNullable<I>);\n    };\n};\n\nconst isString = (value: any): boolean => typeof value === 'string';\nconst isBoolean = (value: any): boolean => typeof value === 'boolean';\nconst isValidSeriesChartType = (value: any): boolean => typeof value === 'object';\nconst createWarnMessage = (property: string, expectedType: string): ((value: any) => string) =>\n    (value: any) => `AG Grid - unable to update chart as invalid params supplied:  \\`${property}: ${value}\\`, expected ${expectedType}.`;\n\ninterface ValidationFunction<T, K extends keyof T = keyof T, V = T[K]> {\n    property: K;\n    validationFn: (value: T[K]) => boolean | V;\n    warnMessage: (value: T[K]) => string;\n}\n\nexport class UpdateParamsValidator {\n    private static validChartTypes: ChartType[] = [\n        'column',\n        'groupedColumn',\n        'stackedColumn',\n        'normalizedColumn',\n        'bar',\n        'groupedBar',\n        'stackedBar',\n        'normalizedBar',\n        'line',\n        'scatter',\n        'bubble',\n        'pie',\n        'donut',\n        'area',\n        'stackedArea',\n        'normalizedArea',\n        'histogram',\n        'radialColumn',\n        'radialBar',\n        'radarLine',\n        'radarArea',\n        'nightingale',\n        'rangeBar',\n        'rangeArea',\n        'boxPlot',\n        'treemap',\n        'sunburst',\n        'heatmap',\n        'waterfall',\n        'columnLineCombo',\n        'areaColumnCombo',\n        'customCombo'\n    ];\n\n    private static legacyChartTypes: ChartType[] = [\n        'doughnut',\n    ];\n\n    private static isValidChartType(value: string): value is ChartType {\n        return UpdateParamsValidator.validChartTypes.includes(value as ChartType);\n    }\n\n    private static isLegacyChartType(value: string): value is ChartType {\n        return UpdateParamsValidator.legacyChartTypes.includes(value as ChartType);\n    }\n\n    private static validateChartType = validateIfDefined<UpdateChartParams['chartType'], Exclude<ChartType, 'doughnut'>>((chartType) => {\n        if (this.isValidChartType(chartType)) return true;\n        if (this.isLegacyChartType(chartType)) {\n            const renamedChartType = getCanonicalChartType(chartType)\n            console.warn(`AG Grid - The chart type '${chartType}' has been deprecated. Please use '${renamedChartType}' instead.`);\n            return renamedChartType;\n        };\n        return false;\n    });\n\n    private static validateAgChartThemeOverrides = validateIfDefined<AgChartThemeOverrides>((themeOverrides) => {\n        // ensure supplied AgChartThemeOverrides is an object - can be improved if necessary?\n        return typeof themeOverrides === 'object';\n    });\n\n    private static validateChartParamsCellRange = validateIfDefined<ChartParamsCellRange>((cellRange) => {\n        // ensure supplied ChartParamsCellRange is an object - can be improved if necessary?\n        return typeof cellRange === 'object';\n    });\n\n    private static validateAggFunc = validateIfDefined<string | IAggFunc>((aggFunc) => {\n        // ensure supplied aggFunc is a `string` or `function` - can be improved if necessary?\n        return typeof aggFunc === 'string' || typeof aggFunc === 'function';\n    });\n\n    private static commonValidations: ValidationFunction<any>[] = [\n        { property: 'chartId', validationFn: isString, warnMessage: createWarnMessage('chartId', 'string') },\n        {\n            property: 'chartType',\n            validationFn: UpdateParamsValidator.validateChartType,\n            warnMessage: createWarnMessage('chartType', UpdateParamsValidator.validChartTypes.join(', '))\n        },\n        {\n            property: 'chartThemeName',\n            validationFn: isString,\n            warnMessage: createWarnMessage('chartThemeName', 'string')\n        },\n        {\n            property: 'chartThemeOverrides',\n            validationFn: UpdateParamsValidator.validateAgChartThemeOverrides,\n            warnMessage: createWarnMessage('chartThemeOverrides', 'AgChartThemeOverrides')\n        },\n        { property: 'unlinkChart', validationFn: isBoolean, warnMessage: createWarnMessage('unlinkChart', 'boolean') },\n    ];\n\n    private static cellRangeValidations: ValidationFunction<any>[] = [\n        {\n            property: 'cellRange',\n            validationFn: UpdateParamsValidator.validateChartParamsCellRange,\n            warnMessage: createWarnMessage('cellRange', 'ChartParamsCellRange')\n        },\n        {\n            property: 'suppressChartRanges',\n            validationFn: isBoolean,\n            warnMessage: createWarnMessage('suppressChartRanges', 'boolean')\n        },\n        {\n            property: 'aggFunc',\n            validationFn: UpdateParamsValidator.validateAggFunc,\n            warnMessage: createWarnMessage('aggFunc', 'string or IAggFunc')\n        },\n    ];\n\n    public static validateChartParams(params: UpdateChartParams): boolean | UpdateChartParams {\n        let paramsToValidate = params as UpdateChartParams;\n        switch (paramsToValidate.type) {\n            case 'rangeChartUpdate':\n                return UpdateParamsValidator.validateUpdateRangeChartParams(params as UpdateRangeChartParams);\n            case 'pivotChartUpdate':\n                return UpdateParamsValidator.validateUpdatePivotChartParams(params as UpdatePivotChartParams);\n            case 'crossFilterChartUpdate':\n                return UpdateParamsValidator.validateUpdateCrossFilterChartParams(params as UpdateCrossFilterChartParams);\n            default:\n                console.warn(`AG Grid - Invalid value supplied for 'type': ${params.type}. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.`);\n                return false;\n        }\n    }\n\n    private static validateUpdateRangeChartParams(params: UpdateRangeChartParams): boolean | UpdateRangeChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...UpdateParamsValidator.commonValidations,\n            ...UpdateParamsValidator.cellRangeValidations,\n            {\n                property: 'seriesChartTypes',\n                validationFn: (value: any) => value === undefined || (Array.isArray(value) && value.every(isValidSeriesChartType)),\n                warnMessage: createWarnMessage('seriesChartTypes', 'Array of SeriesChartType'),\n            },\n        ];\n\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart', 'cellRange', 'suppressChartRanges', 'aggFunc', 'seriesChartTypes'], 'UpdateRangeChartParams');\n    }\n\n    private static validateUpdatePivotChartParams(params: UpdatePivotChartParams): boolean | UpdatePivotChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...UpdateParamsValidator.commonValidations,\n        ];\n\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart'], 'UpdatePivotChartParams');\n    }\n\n    private static validateUpdateCrossFilterChartParams(params: UpdateCrossFilterChartParams): boolean | UpdateCrossFilterChartParams {\n        const validations: ValidationFunction<any>[] = [\n            ...UpdateParamsValidator.commonValidations,\n            ...UpdateParamsValidator.cellRangeValidations,\n        ];\n\n        return UpdateParamsValidator.validateProperties(params, validations, ['type', 'chartId', 'chartType', 'chartThemeName', 'chartThemeOverrides', 'unlinkChart', 'cellRange', 'suppressChartRanges', 'aggFunc'], 'UpdateCrossFilterChartParams');\n    }\n\n    private static validateProperties<T extends object>(params: T, validations: ValidationFunction<T>[], validPropertyNames: (keyof T)[], paramsType: string): boolean | T {\n        let validatedProperties: T | undefined = undefined;\n        for (const validation of validations) {\n            const { property, validationFn, warnMessage } = validation;\n            if (property in params) {\n                const value = params[property];\n                const validationResult = validationFn(value);\n                if (validationResult === true) continue;\n                if (validationResult === false) {\n                    console.warn(warnMessage(value));\n                    return false;\n                }\n                // If the validation function returned a 'fix' value, we need to return an updated property set.\n                // First we clone the input set if there has not been a 'fix' encountered in a previous iteration:\n                validatedProperties = validatedProperties || { ...params };\n                /// Then we update the cloned object with the 'fixed' value\n                validatedProperties[property] = validationResult;\n            }\n        }\n\n        // Check for unexpected properties\n        for (const property in params) {\n            if (!validPropertyNames.includes(property as keyof T)) {\n                console.warn(`AG Grid - Unexpected property supplied. ${paramsType} does not contain: \\`${property}\\`.`);\n                return false;\n            }\n        }\n\n        // If one or more 'fixed' values were encountered, return the updated property set\n        if (validatedProperties) return validatedProperties;\n\n        return true;\n    }\n\n}", "import {\n    AgCheckbox,\n    AgCheckboxParams,\n    AgGroupComponent,\n    AgRadioButton,\n    AgSelect,\n    AgToggleButton,\n    AutoScrollService,\n    Autowired,\n    DragAndDropService,\n    DropTarget,\n    IAggFunc,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ChartDataModel, ColState } from \"../../model/chartDataModel\";\nimport { ChartMenuService } from \"../../services/chartMenuService\";\nimport { DragDataPanel } from \"./dragDataPanel\";\n\ntype AggFuncPreset = 'count' | 'sum' | 'min' | 'max' | 'avg' | 'first' | 'last';\n\nconst DEFAULT_AGG_FUNC: AggFuncPreset = 'sum'\n\nexport class CategoriesDataPanel extends DragDataPanel {\n    private static TEMPLATE = /* html */`<div id=\"categoriesGroup\"></div>`;\n\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n\n    private aggFuncToggle?: AgToggleButton;\n    private aggFuncSelect?: AgSelect;\n\n    constructor(\n        chartController: ChartController,\n        autoScrollService: AutoScrollService,\n        private readonly title: string,\n        allowMultipleSelection: boolean,\n        private dimensionCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        const maxSelection = undefined;\n        super(chartController, autoScrollService, allowMultipleSelection, maxSelection, CategoriesDataPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.groupComp = this.createBean(new AgGroupComponent({\n            title: this.title,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen\n        }));\n        if (this.chartMenuService.isLegacyFormat()) {\n            this.createLegacyCategoriesGroup(this.dimensionCols);\n            this.clearAggFuncControls();\n        } else {\n            this.createCategoriesGroup(this.dimensionCols);\n            this.createAggFuncControls(this.dimensionCols);\n        }\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(dimensionCols: ColState[]): void {\n        if (this.chartMenuService.isLegacyFormat()) {\n            if (!this.refreshColumnComps(dimensionCols)) {\n                this.recreate(dimensionCols);\n            }\n        } else {\n            this.valuePillSelect?.setValues(dimensionCols, dimensionCols.filter(col => col.selected));\n            this.refreshValueSelect(dimensionCols);\n            this.refreshAggFuncControls(dimensionCols, this.chartController.getAggFunc());\n        }\n    }\n\n    private recreate(dimensionCols: ColState[]): void {\n        this.isOpen = this.groupComp.isExpanded();\n        _.clearElement(this.getGui());\n        this.destroyBean(this.groupComp);\n        this.dimensionCols = dimensionCols;\n        this.init();\n    }\n\n    private createCategoriesGroup(columns: ColState[]): void {\n        this.createGroup(columns, (col) => _.escapeString(col?.displayName)!, 'categoryAdd', 'categorySelect');\n    }\n\n    private createLegacyCategoriesGroup(columns: ColState[]): void {\n        const inputName = `chartDimension${this.groupComp.getCompId()}`;\n\n        // Display either radio buttons or checkboxes\n        // depending on whether the current chart type supports multiple category columns\n        const supportsMultipleCategoryColumns = this.allowMultipleSelection;\n\n        columns.forEach(col => {\n            const params: AgCheckboxParams = {\n                label: _.escapeString(col.displayName)!,\n                value: col.selected,\n                inputName\n            };\n            const comp: AgCheckbox | AgRadioButton = this.groupComp!.createManagedBean(\n                supportsMultipleCategoryColumns\n                    ? (() => {\n                        const checkboxComp = new AgCheckbox(params);\n                        checkboxComp.addCssClass('ag-data-select-checkbox');\n                        return checkboxComp;\n                    })()\n                    : new AgRadioButton(params)\n            );\n\n            this.addChangeListener(comp, col);\n            this.groupComp!.addItem(comp);\n            this.columnComps.set(col.colId, comp);\n\n            if (supportsMultipleCategoryColumns) this.addDragHandle(comp, col);\n        });\n\n        if (supportsMultipleCategoryColumns) {\n            const categoriesGroupGui = this.groupComp.getGui();\n            \n            const dropTarget: DropTarget = {\n                getIconName: () => DragAndDropService.ICON_MOVE,\n                getContainer: () => categoriesGroupGui,\n                onDragging: (params) => this.onDragging(params),\n                onDragLeave: () => this.onDragLeave(),\n                isInterestedIn: this.isInterestedIn.bind(this),\n                targetContainsSource: true\n            };\n\n            this.dragAndDropService.addDropTarget(dropTarget);\n            this.addDestroyFunc(() => this.dragAndDropService.removeDropTarget(dropTarget));\n        }\n    }\n\n    private createAggFuncControls(dimensionCols: ColState[]): void {\n        const aggFunc = this.chartController.getAggFunc();\n        this.groupComp.addItem(this.aggFuncToggle = this.createBean(new AgToggleButton({\n            label: this.chartTranslationService.translate('aggregate'),\n            labelAlignment: 'left',\n            labelWidth: 'flex',\n            inputWidth: 'flex',\n            value: aggFunc != undefined,\n            onValueChange: (value) => {\n                const aggFunc = value ? DEFAULT_AGG_FUNC : undefined;\n                this.chartController.setAggFunc(aggFunc);\n                this.aggFuncSelect?.setValue(aggFunc, true);\n                this.aggFuncSelect?.setDisplayed(aggFunc != undefined);\n            },\n        })));\n        this.groupComp.addItem(this.aggFuncSelect = this.createBean(new AgSelect<AggFuncPreset>({\n            options: [\n                { value: 'sum', text: this.chartTranslationService.translate('sum') },\n                { value: 'first', text: this.chartTranslationService.translate('first') },\n                { value: 'last', text: this.chartTranslationService.translate('last') },\n                { value: 'min', text: this.chartTranslationService.translate('min') },\n                { value: 'max', text: this.chartTranslationService.translate('max') },\n                { value: 'count', text: this.chartTranslationService.translate('count') },\n                { value: 'avg', text: this.chartTranslationService.translate('avg') },\n            ],\n            value: typeof aggFunc === 'string' ? aggFunc : undefined,\n            onValueChange: (value) => {\n                this.chartController.setAggFunc(value);\n            },\n        })));\n        this.refreshAggFuncControls(dimensionCols, aggFunc);\n    }\n\n    private refreshAggFuncControls(dimensionCols: ColState[], aggFunc: string | IAggFunc | undefined): void {\n        const selectedDimensions = dimensionCols.filter(col => col.selected);\n        const supportsAggregation = selectedDimensions.some(col => col.colId !== ChartDataModel.DEFAULT_CATEGORY);\n        this.aggFuncToggle?.setValue(aggFunc != undefined);\n        this.aggFuncSelect?.setValue(typeof aggFunc === 'string' ? aggFunc : undefined, true);\n        this.aggFuncToggle?.setDisplayed(supportsAggregation);\n        this.aggFuncSelect?.setDisplayed(supportsAggregation && (aggFunc != undefined));\n    }\n\n    private clearAggFuncControls(): void {\n        this.aggFuncToggle = this.aggFuncToggle && this.destroyBean(this.aggFuncToggle);\n        this.aggFuncSelect = this.aggFuncSelect && this.destroyBean(this.aggFuncSelect);\n    }\n\n    protected destroy(): void {\n        this.clearAggFuncControls();\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import {\n    AgCheckbox,\n    AgGroupComponent,\n    AgRadioButton,\n    AgSelect,\n    AgSelectParams,\n    AutoScrollService,\n    Autowired,\n    Column,\n    Component,\n    DragAndDropService,\n    DraggingEvent,\n    DragSource,\n    DragSourceType,\n    Events,\n    ListOption,\n    _\n} from \"@ag-grid-community/core\";\nimport { AgPillSelect, AgPillSelectChangeParams } from \"../../../../widgets/agPillSelect\";\nimport { ChartController } from \"../../chartController\";\nimport { ChartDataModel, ColState } from \"../../model/chartDataModel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../services/chartTranslationService\";\n\nexport abstract class DragDataPanel extends Component {\n    @Autowired('dragAndDropService') protected dragAndDropService: DragAndDropService;\n    @Autowired('chartTranslationService') protected readonly chartTranslationService: ChartTranslationService;\n\n    private lastHoveredItem?: { comp: AgCheckbox, position: 'top' | 'bottom' };\n    private lastDraggedColumn?: Column;\n    protected columnComps: Map<string, AgRadioButton | AgCheckbox> = new Map<string, AgRadioButton | AgCheckbox>();\n    protected groupComp: AgGroupComponent;\n    protected valuePillSelect?: AgPillSelect<ColState>;\n    protected valueSelect?: AgSelect<ColState>;\n\n    constructor(\n        protected readonly chartController: ChartController,\n        private readonly autoScrollService: AutoScrollService,\n        protected readonly allowMultipleSelection: boolean,\n        private readonly maxSelection: number | undefined,\n        template?: string\n    ) {\n        super(template);\n    }\n\n    public refreshColumnComps(cols: ColState[]): boolean {\n        if (!_.areEqual(_.keys(this.columnComps), cols.map(({ colId }) => colId))) {\n            return false;\n        }\n\n        cols.forEach(col => {\n            this.columnComps.get(col.colId)!.setValue(col.selected, true);\n        });\n\n        return true;\n    }\n\n    protected createGroup(\n        columns: ColState[],\n        valueFormatter: (colState: ColState) => string,\n        selectLabelKey: ChartTranslationKey,\n        dragSourceId: string\n    ): void {\n        if (this.allowMultipleSelection) {\n            const selectedValueList = columns.filter(col => col.selected);\n            this.valuePillSelect = this.groupComp.createManagedBean(new AgPillSelect<ColState>({\n                valueList: columns,\n                selectedValueList,\n                valueFormatter,\n                selectPlaceholder: this.chartTranslationService.translate(selectLabelKey),\n                dragSourceId,\n                onValuesChange: params => this.onValueChange(params),\n                maxSelection: this.maxSelection,\n            }));\n            this.groupComp.addItem(this.valuePillSelect);\n        } else {\n            const params: AgSelectParams<ColState> = this.createValueSelectParams(columns);\n            params.onValueChange = (newValue: ColState) => {\n                columns.forEach(col => {\n                    col.selected = false;\n                });\n                newValue.selected = true;\n                // Clear the category aggregation function if the default ordinal category is selected\n                if (newValue.colId === ChartDataModel.DEFAULT_CATEGORY) {\n                    this.chartController.setAggFunc(undefined, true);\n                }\n                this.chartController.updateForPanelChange(newValue);\n            };\n            this.valueSelect = this.groupComp.createManagedBean(new AgSelect<ColState>(params));\n            this.groupComp.addItem(this.valueSelect);\n        }\n    }\n\n    protected refreshValueSelect(columns: ColState[]): void {\n        if (!this.valueSelect) { return; }\n        const { options, value } = this.createValueSelectParams(columns);\n        this.valueSelect.clearOptions().addOptions(options).setValue(value, true);\n    }\n\n    private createValueSelectParams(columns: ColState[]): {\n        options: ListOption<ColState>[],\n        value: ColState\n    } {\n        let selectedValue: ColState;\n        const options = columns.map(value => {\n            const text = _.escapeString(value.displayName)!;\n            if (value.selected) {\n                selectedValue = value;\n            }\n            return {\n                value,\n                text\n            }\n        });\n        return {\n            options,\n            value: selectedValue!,\n        };\n    }\n\n    protected onDragging(draggingEvent: DraggingEvent): void {\n        const itemHovered = this.checkHoveredItem(draggingEvent);\n\n        if (!itemHovered) { return; }\n\n        this.lastDraggedColumn = draggingEvent.dragItem.columns![0];\n\n        const { comp, position } = itemHovered;\n        const { comp: lastHoveredComp, position: lastHoveredPosition } = this.lastHoveredItem || {};\n\n        if (comp === lastHoveredComp && position === lastHoveredPosition) { return; }\n\n        this.autoScrollService.check(draggingEvent.event);\n        this.clearHoveredItems();\n        this.lastHoveredItem = { comp, position };\n\n        const eGui = comp.getGui();\n\n        eGui.classList.add('ag-list-item-hovered', `ag-item-highlight-${position}`);\n    }\n\n    protected checkHoveredItem(draggingEvent: DraggingEvent): { comp: AgCheckbox, position: 'top' | 'bottom' } | null {\n        if (_.missing(draggingEvent.vDirection)) { return null; }\n\n        const mouseEvent = draggingEvent.event;\n\n        for (const comp of this.columnComps.values()) {\n            const eGui = comp.getGui();\n\n            if (!eGui.querySelector('.ag-chart-data-column-drag-handle')) { continue; }\n\n            const rect = eGui.getBoundingClientRect();\n            const isOverComp = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;\n\n            if (isOverComp) {\n                const height = eGui.clientHeight;\n                const position = mouseEvent.clientY > rect.top + (height / 2) ? 'bottom': 'top';\n                return { comp, position };\n            }\n        }\n\n        return null;\n    }\n\n    protected onDragLeave(): void {\n        this.clearHoveredItems();\n    }\n\n    protected onDragStop(): void {\n        if (this.lastHoveredItem) {\n            const { dimensionCols, valueCols } = this.chartController.getColStateForMenu();\n            const draggedColumnState = [...dimensionCols, ...valueCols]\n                .find(state => state.column === this.lastDraggedColumn);\n            if (draggedColumnState) {\n                let targetIndex = Array.from(this.columnComps.values()).indexOf(this.lastHoveredItem.comp);\n                if (this.lastHoveredItem.position === 'bottom') { targetIndex++; }\n\n                draggedColumnState.order = targetIndex;\n                this.chartController.updateForPanelChange(draggedColumnState);\n            }\n        }\n        this.clearHoveredItems();\n        this.lastDraggedColumn = undefined;\n        this.autoScrollService.ensureCleared();\n    }\n\n    protected clearHoveredItems(): void {\n        this.columnComps.forEach(columnComp => {\n            columnComp.getGui().classList.remove(\n                'ag-list-item-hovered',\n                'ag-item-highlight-top', \n                'ag-item-highlight-bottom'\n            );\n        });\n        this.lastHoveredItem = undefined;\n    }\n\n    protected addDragHandle(comp: AgCheckbox, col: ColState): void {\n        const eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsService)!;\n\n        eDragHandle.classList.add('ag-drag-handle', 'ag-chart-data-column-drag-handle');\n\n        comp.getGui().insertAdjacentElement('beforeend', eDragHandle);\n\n        const dragSource: DragSource = {\n            type: DragSourceType.ChartPanel,\n            eElement: eDragHandle,\n            dragItemName: col.displayName,\n            getDragItem: () => ({ columns: [col.column!] }),\n            onDragStopped: () => this.onDragStop()\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    protected addChangeListener(component: AgRadioButton | AgCheckbox, columnState: ColState) {\n        this.addManagedListener(component, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            columnState.selected = component.getValue();\n            this.chartController.updateForPanelChange(columnState);\n        });\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.ChartPanel;\n    }\n\n    protected onValueChange({ added, updated, removed, selected }: AgPillSelectChangeParams<ColState>) {\n        let colState: ColState | undefined;\n        let resetOrder: boolean | undefined\n        const updateOrder = () => {\n            selected.forEach((col, index) => {\n                col.order = index;\n            });\n            resetOrder = true;\n        }\n        if (added.length) {\n            colState = added[0];\n            colState.selected = true;\n            updateOrder();\n        } else if (removed.length) {\n            colState = removed[0];\n            colState.selected = false;\n        } else if (updated.length) {\n            updateOrder();\n            colState = updated[0];\n        }\n        if (colState) {\n            this.chartController.updateForPanelChange(colState, resetOrder);\n        }\n    }\n\n    protected destroy(): void {\n        this.valuePillSelect = undefined;\n        this.valueSelect = undefined;\n        super.destroy();\n    }\n}\n", "import {\n    AgSelect,\n    Component,\n    DragAndDropService,\n    DraggingEvent,\n    DragItem,\n    DragSourceType,\n    DropTarget,\n    ListOption,\n    PillDragComp,\n    PillDropZonePanel,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\n\nexport interface AgPillSelectParams<TValue = string | null> {\n    valueList?: TValue[];\n    selectedValueList?: TValue[];\n    valueFormatter?: (value: TValue) => string;\n    ariaLabel?: string;\n    selectPlaceholder?: string;\n    onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n    dragSourceId?: string;\n    maxSelection?: number;\n}\n\nexport interface AgPillSelectChangeParams<TValue> {\n    added: TValue[],\n    removed: TValue[],\n    updated: TValue[],\n    selected: TValue[]\n}\n\nexport class AgPillSelect<TValue = string | null> extends Component {\n    private static TEMPLATE = /* html */`<div class=\"ag-pill-select\" role=\"presentation\"></div>`;\n\n    private dropZonePanel: PillSelectDropZonePanel<TValue>;\n    private eSelect?: AgSelect<TValue>;\n\n    private readonly config: AgPillSelectParams<TValue>;\n    private valueList: TValue[];\n    private selectedValues: TValue[];\n    private valueFormatter: (value: TValue) => string;\n    private onValuesChange?: (params: AgPillSelectChangeParams<TValue>) => void;\n\n    constructor(config?: AgPillSelectParams<TValue>) {\n        super(AgPillSelect.TEMPLATE);\n        this.config = config ?? {};\n\n        const { selectedValueList, valueFormatter, valueList } = this.config;\n        this.selectedValues = selectedValueList ?? [];\n        this.valueList = valueList ?? [];\n        this.valueFormatter = valueFormatter ?? (value => _.escapeString(value as any)!);\n    }\n\n    @PostConstruct\n    private init(): void {\n        const { ariaLabel, onValuesChange, dragSourceId } = this.config;\n        this.dropZonePanel = this.createManagedBean(new PillSelectDropZonePanel(\n            {\n                getValues: () => this.selectedValues,\n                setValues: values => this.updateValues(values),\n                isDraggable: () => this.selectedValues.length > 1\n            },\n            value => this.valueFormatter(value),\n            ariaLabel!,\n            dragSourceId\n        ));\n        const eGui = this.getGui();\n        eGui.appendChild(this.dropZonePanel.getGui());\n        this.initSelect();\n        if (onValuesChange != null) {\n            this.onValuesChange = onValuesChange;\n        }\n    }\n\n    public setValues(valueList: TValue[], selectedValues: TValue[]): this {\n        const { added, removed, updated} = this.getChanges(this.valueList, valueList)\n        let refreshSelect = false;\n        if (added.length || removed.length || updated.length) {\n            refreshSelect = true;\n        }\n        this.valueList = valueList;\n        this.updateValues(selectedValues, refreshSelect, true);\n        return this;\n    }\n\n    public setValueFormatter(valueFormatter: (value: TValue) => string): this {\n        this.valueFormatter = valueFormatter;\n        return this;\n    }\n\n    private initSelect(): boolean {\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            return false;\n        }\n        const { selectPlaceholder: placeholder } = this.config;\n        this.eSelect = this.createBean(new AgSelect({\n            options,\n            placeholder,\n            onValueChange: value => this.addValue(value),\n            pickerIcon: 'chartsMenuAdd'\n        }));\n        this.getGui().appendChild(this.eSelect.getGui());\n        return true;\n    }\n\n    private createSelectOptions(): ListOption<TValue>[] {\n        let options: ListOption<TValue>[] = [];\n        const { maxSelection } = this.config;\n        if (maxSelection && this.selectedValues.length >= maxSelection) {\n            return options;\n        }\n        this.valueList.forEach(value => {\n            if (!this.selectedValues.includes(value)) {\n                options.push({ value, text: this.valueFormatter(value) });\n            }\n        });\n        return options;\n    }\n\n    private addValue(value: TValue): void {\n        this.dropZonePanel.addItem(value);\n    }\n\n    private updateValues(values: TValue[], forceRefreshSelect?: boolean, silent?: boolean): void {\n        const previousSelectedValues = this.selectedValues;\n        this.selectedValues = values;\n        const changes = this.getChanges(previousSelectedValues, values);\n        const refreshSelect = forceRefreshSelect || changes.added.length || changes.removed.length;\n        const activeElement = this.gridOptionsService.getDocument().activeElement;\n        const selectHasFocus = this.eSelect?.getGui().contains(activeElement);\n        const dropZoneHasFocus = this.dropZonePanel?.getGui().contains(activeElement);\n        if (!silent) {\n            this.onValuesChange?.(changes);\n        }\n        const emptyRefreshedSelect = refreshSelect ? !this.refreshSelect() : false;\n        this.dropZonePanel.refreshGui();\n        if (refreshSelect && selectHasFocus) {\n            if (emptyRefreshedSelect) {\n                this.dropZonePanel.focusList(true);\n            } else {\n                this.eSelect?.getFocusableElement().focus();\n            }\n        }\n        if (dropZoneHasFocus && !values.length) {\n            this.eSelect?.getFocusableElement().focus();\n        }\n    }\n\n    private getChanges(previousSelectedValues: TValue[], newSelectedValues: TValue[]): AgPillSelectChangeParams<TValue> {\n        const added = newSelectedValues.filter(value => !previousSelectedValues.includes(value));\n        const removed = previousSelectedValues.filter(value => !newSelectedValues.includes(value));\n        const updated = newSelectedValues.filter((value, index) => previousSelectedValues[index] !== value);\n        return { added, removed, updated, selected: newSelectedValues };\n    }\n\n    private refreshSelect(): boolean {\n        if (!this.eSelect) {\n            return this.initSelect();\n        }\n        const options = this.createSelectOptions();\n        if (!options.length) {\n            _.removeFromParent(this.eSelect.getGui());\n            this.eSelect = this.destroyBean(this.eSelect);\n            return false;\n        }\n        this.eSelect.clearOptions().addOptions(options).setValue(undefined, true);\n        return true;\n    }\n\n    protected destroy(): void {\n        this.destroyBean(this.eSelect);\n        super.destroy();\n    }\n}\n\nclass PillSelectDragComp<TValue> extends PillDragComp<TValue> {\n    constructor(\n        private readonly value: TValue,\n        dragSourceDropTarget: DropTarget,\n        ghost: boolean,\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly draggable: boolean,\n        private readonly sourceId?: string\n    ) {\n        super(dragSourceDropTarget, ghost, false);\n    }\n\n    public getItem(): TValue {\n        return this.value;\n    }\n\n    protected getDisplayName(): string {\n        return this.valueFormatter(this.value);\n    }\n\n    protected getAriaDisplayName(): string {\n        return this.getDisplayName();\n    }\n\n    protected getTooltip(): string | null | undefined {\n        return undefined;\n    }\n\n    protected createGetDragItem(): () => DragItem<TValue> {\n        return () => ({\n            value: this.value\n        });\n    }\n\n    protected getDragSourceType(): DragSourceType {\n        return DragSourceType.ChartPanel;\n    }\n\n    protected getDragSourceId(): string | undefined {\n        return this.sourceId;\n    }\n\n    protected isDraggable(): boolean {\n        return this.draggable;\n    }\n}\n\nclass PillSelectDropZonePanel<TValue> extends PillDropZonePanel<PillSelectDragComp<TValue>, TValue> {\n    constructor(\n        private readonly model: {\n            getValues: () => TValue[],\n            setValues: (values: TValue[]) => void\n            isDraggable: () => boolean\n        },\n        private readonly valueFormatter: (value: TValue) => string,\n        private readonly ariaLabel: string,\n        private readonly sourceId?: string\n    ) {\n        super(false);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        super.init();\n    }\n\n    protected isItemDroppable(item: TValue, draggingEvent: DraggingEvent): boolean {\n        return this.isSourceEventFromTarget(draggingEvent) || (this.sourceId != null && this.sourceId === draggingEvent.dragSource.sourceId);\n    }\n\n    protected updateItems(items: TValue[]): void {\n        this.model.setValues(items);\n    }\n\n    protected getExistingItems(): TValue[] {\n        return this.model.getValues();\n    }\n\n    protected getIconName(): string {\n        return this.isPotentialDndItems() ? DragAndDropService.ICON_MOVE : DragAndDropService.ICON_NOT_ALLOWED;\n    }\n\n    protected getAriaLabel(): string {\n        return this.ariaLabel;\n    }\n\n    protected createPillComponent(item: TValue, dropTarget: DropTarget, ghost: boolean): PillSelectDragComp<TValue> {\n        return new PillSelectDragComp(item, dropTarget, ghost, this.valueFormatter, this.model.isDraggable(), this.sourceId);\n    }\n\n    protected getItems(dragItem: DragItem): TValue[] {\n        return [dragItem.value];\n    }\n\n    protected isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.ChartPanel;\n    }\n}\n", "import {\n    AgCheckbox,\n    AgGroupComponent,\n    AgToggleButton,\n    AutoScrollService,\n    Autowired,\n    DragAndDropService,\n    DropTarget,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ColState } from \"../../model/chartDataModel\";\nimport { ChartOptionsService } from \"../../services/chartOptionsService\";\nimport { DragDataPanel } from \"./dragDataPanel\";\nimport { ChartMenuService } from \"../../services/chartMenuService\";\n\nexport class SeriesDataPanel extends DragDataPanel {\n    private static TEMPLATE = /* html */`<div id=\"seriesGroup\"></div>`;\n\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n\n    constructor(\n        chartController: ChartController,\n        autoScrollService: AutoScrollService,\n        private readonly chartOptionsService: ChartOptionsService,\n        private readonly title: string,\n        allowMultipleSelect: boolean,\n        maxSelection: number | undefined,\n        private valueCols: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(chartController, autoScrollService, allowMultipleSelect, maxSelection, SeriesDataPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.groupComp = this.createBean(new AgGroupComponent({\n            title: this.title,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen\n        }));\n        if (this.chartController.isActiveXYChart()) {\n            const pairedModeToggle = this.groupComp.createManagedBean(new AgToggleButton({\n                label: this.chartTranslationService.translate('paired'),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                value: this.chartOptionsService.getPairedMode(),\n                onValueChange: newValue => {\n                    this.chartOptionsService.setPairedMode(!!newValue);\n                    this.chartController.updateForGridChange({ maintainColState: true });\n                }\n            }));\n            this.groupComp.addItem(pairedModeToggle);\n        }\n        if (this.chartMenuService.isLegacyFormat()) {\n            this.createLegacySeriesGroup(this.valueCols);\n        } else {\n            this.createSeriesGroup(this.valueCols);\n        }\n        this.getGui().appendChild(this.groupComp.getGui());\n    }\n\n    public refresh(valueCols: ColState[]): void {\n        if (this.chartMenuService.isLegacyFormat()) {\n            const canRefresh = this.refreshColumnComps(valueCols);\n            if (canRefresh) {\n                if (this.chartController.isActiveXYChart()) {\n                    const getSeriesLabel = this.generateGetSeriesLabel(valueCols);\n        \n                    valueCols.forEach(col => {\n                        this.columnComps.get(col.colId)!.setLabel(getSeriesLabel(col));\n                    });\n                }\n            } else {\n                this.recreate(valueCols);\n            }\n        } else {\n            this.valuePillSelect?.setValueFormatter(this.generateGetSeriesLabel(valueCols));\n            this.valuePillSelect?.setValues(valueCols, valueCols.filter(col => col.selected));\n            this.refreshValueSelect(valueCols);\n        }\n    }\n\n    private recreate(valueCols: ColState[]): void {\n        this.isOpen = this.groupComp.isExpanded();\n        _.clearElement(this.getGui());\n        this.destroyBean(this.groupComp);\n        this.valueCols = valueCols;\n        this.init();\n    }\n\n    private createSeriesGroup(columns: ColState[]): void {\n        this.createGroup(columns, this.generateGetSeriesLabel(columns), 'seriesAdd', 'seriesSelect');\n    }\n\n    private createLegacySeriesGroup(columns: ColState[]): void {\n        const getSeriesLabel = this.generateGetSeriesLabel(columns);\n\n        columns.forEach(col => {\n            const label = getSeriesLabel(col);\n            const comp = this.groupComp.createManagedBean(new AgCheckbox({\n                label,\n                value: col.selected\n            }));\n            comp.addCssClass('ag-data-select-checkbox');\n\n            this.addChangeListener(comp, col);\n            this.groupComp.addItem(comp);\n            this.columnComps.set(col.colId, comp);\n\n            this.addDragHandle(comp, col);\n        });\n\n        const seriesGroupGui = this.groupComp.getGui();\n\n        const dropTarget: DropTarget = {\n            getIconName: () => DragAndDropService.ICON_MOVE,\n            getContainer: () => seriesGroupGui,\n            onDragging: (params) => this.onDragging(params),\n            onDragLeave: () => this.onDragLeave(),\n            isInterestedIn: this.isInterestedIn.bind(this),\n            targetContainsSource: true\n        };\n\n        this.dragAndDropService.addDropTarget(dropTarget);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDropTarget(dropTarget));\n    }\n\n    private generateGetSeriesLabel(valueCols: ColState[]): (col: ColState) => string {\n        if (!this.chartController.isActiveXYChart()) {\n            return col => _.escapeString(col.displayName)!;\n        }\n\n        const selectedCols = valueCols.filter(col => col.selected);\n\n        const isBubble = this.chartController.getChartType() === 'bubble';\n        const isInPairedMode = this.chartOptionsService.getPairedMode();\n\n        const indexToAxisLabel = new Map<number, string>();\n        indexToAxisLabel.set(0, 'X');\n        indexToAxisLabel.set(1, 'Y');\n        indexToAxisLabel.set(2, 'size');\n\n        return (col: ColState): string => {\n            const escapedLabel = _.escapeString(col.displayName)!;\n\n            if (!col.selected) {\n                return escapedLabel;\n            }\n\n            const index = selectedCols.indexOf(col);\n\n            if (index === -1) { return escapedLabel; }\n\n            let axisLabel;\n\n            if (isInPairedMode) {\n                axisLabel = indexToAxisLabel.get(index % (isBubble ? 3 : 2));\n            } else {\n                if (index === 0) {\n                    axisLabel = 'X';\n                } else {\n                    axisLabel = isBubble && index % 2 === 0 ? 'size' : 'Y';\n                }\n            }\n\n            return `${escapedLabel} (${axisLabel})`;\n        };\n    }\n\n    protected destroy(): void {\n        this.groupComp = this.destroyBean(this.groupComp)!;\n        super.destroy();\n    }\n}\n", "import {\n    AgCheckbox,\n    AgGroupComponent,\n    AgSelect,\n    Autowired,\n    ChartType,\n    Component,\n    PostConstruct,\n    SeriesChartType,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ColState } from \"../../model/chartDataModel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../services/chartTranslationService\";\n\nexport class SeriesChartTypePanel extends Component {\n    private static TEMPLATE = /* html */`<div id=\"seriesChartTypeGroup\"></div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private seriesChartTypeGroupComp: AgGroupComponent;\n    private selectedColIds: string[] = [];\n    private chartTypeComps: Map<string, AgSelect> = new Map();\n    private secondaryAxisComps: Map<string, AgCheckbox> = new Map();\n\n    constructor(\n        private readonly chartController: ChartController,\n        private columns: ColState[],\n        private isOpen?: boolean\n    ) {\n        super(SeriesChartTypePanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.createSeriesChartTypeGroup(this.columns);\n    }\n\n    public refresh(columns: ColState[]): void {\n        if (!_.areEqual(this.getValidColIds(columns), this.selectedColIds)) {\n            this.recreate(columns);\n        } else {\n            this.refreshComps();\n        }\n    }\n\n    private recreate(columns: ColState[]): void {\n        this.isOpen = this.seriesChartTypeGroupComp.isExpanded();\n        _.clearElement(this.getGui());\n        this.destroyBean(this.seriesChartTypeGroupComp);\n        this.columns = columns;\n        this.selectedColIds = [];\n        this.clearComps();\n        this.init();\n    }\n\n    private getValidColIds(columns: ColState[]): string[] {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        return columns.filter(col => col.selected && !!seriesChartTypes.filter(s => s.colId === col.colId)[0])\n            .map(({ colId }) => colId);\n    }\n\n    private createSeriesChartTypeGroup(columns: ColState[]): void {\n        this.seriesChartTypeGroupComp = this.createBean(new AgGroupComponent({\n            title: this.chartTranslationService.translate('seriesChartType'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: false,\n            cssIdentifier: 'charts-data',\n            expanded: this.isOpen\n        }));\n\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n\n        columns.forEach(col => {\n            if (!col.selected) { return; }\n\n            const seriesChartType: SeriesChartType = seriesChartTypes.filter(s => s.colId === col.colId)[0];\n            if (!seriesChartType) { return; }\n\n            this.selectedColIds.push(col.colId);\n\n            const seriesItemGroup = this.seriesChartTypeGroupComp.createManagedBean(new AgGroupComponent({\n                title: col.displayName!,\n                enabled: true,\n                suppressEnabledCheckbox: true,\n                suppressOpenCloseIcons: true,\n                cssIdentifier: 'charts-format-sub-level'\n            }));\n\n            const isSecondaryAxisDisabled = (chartType: ChartType) => ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n\n            const secondaryAxisComp = this.seriesChartTypeGroupComp\n                .createManagedBean(new AgCheckbox({\n                    label: this.chartTranslationService.translate('secondaryAxis'),\n                    labelWidth: \"flex\",\n                    disabled: isSecondaryAxisDisabled(seriesChartType.chartType),\n                    value: !!seriesChartType.secondaryAxis,\n                    onValueChange: (enabled: boolean) => this.chartController.updateSeriesChartType(col.colId, undefined, enabled)\n                }));\n\n            seriesItemGroup.addItem(secondaryAxisComp);\n\n            const translate = (key: ChartTranslationKey) => {\n                return this.chartTranslationService.translate(key);\n            }\n\n            const availableChartTypes = [\n                { value: 'line', text: translate('line') },\n                { value: 'area', text: translate('area') },\n                { value: 'stackedArea', text: translate('stackedArea') },\n                { value: 'groupedColumn', text: translate('groupedColumn') },\n                { value: 'stackedColumn', text: translate('stackedColumn') },\n            ];\n\n            const chartTypeComp = seriesItemGroup.createManagedBean(new AgSelect({\n                labelAlignment: 'left',\n                labelWidth: \"flex\",\n                options: availableChartTypes,\n                value: seriesChartType.chartType,\n                onValueChange: (chartType: ChartType) => this.chartController.updateSeriesChartType(col.colId, chartType)\n            }));\n\n            seriesItemGroup.addItem(chartTypeComp);\n\n            this.seriesChartTypeGroupComp.addItem(seriesItemGroup);\n            this.chartTypeComps.set(col.colId, chartTypeComp);\n            this.secondaryAxisComps.set(col.colId, secondaryAxisComp);\n        });\n\n        this.getGui().appendChild(this.seriesChartTypeGroupComp.getGui());\n    }\n\n    private refreshComps(): void {\n        const seriesChartTypes = this.chartController.getSeriesChartTypes();\n        this.selectedColIds.forEach(colId => {\n            const seriesChartType = seriesChartTypes.find(chartType => chartType.colId === colId);\n            if (!seriesChartType) { return; }\n            const chartTypeComp = this.chartTypeComps.get(colId);\n            const secondaryAxisComp = this.secondaryAxisComps.get(colId);\n\n            chartTypeComp?.setValue(seriesChartType.chartType);\n            secondaryAxisComp?.setValue(!!seriesChartType.secondaryAxis);\n            secondaryAxisComp?.setDisabled(this.isSecondaryAxisDisabled(seriesChartType.chartType));\n        });\n    }\n\n    private clearComps(): void {\n        this.chartTypeComps.clear();\n        this.secondaryAxisComps.clear();\n    }\n\n    private isSecondaryAxisDisabled(chartType: ChartType): boolean {\n        return ['groupedColumn', 'stackedColumn', 'stackedArea'].includes(chartType);\n    }\n\n    protected destroy(): void {\n        this.clearComps();\n        this.seriesChartTypeGroupComp = this.destroyBean(this.seriesChartTypeGroupComp)!;\n        super.destroy();\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgToggleButton,\n    Autowired,\n    Component,\n    PostConstruct,\n} from '@ag-grid-community/core';\nimport { ChartTranslationService } from '../../services/chartTranslationService';\n\nexport class SwitchCategorySeriesDataPanel extends Component {\n    private static TEMPLATE = /* html */ `<div>\n        <ag-group-component ref=\"switchCategorySeriesGroup\"></ag-group-component>\n    </div>`;\n\n    @Autowired('chartTranslationService') protected readonly chartTranslationService: ChartTranslationService;\n\n    private switchCategorySeriesToggleButton?: AgToggleButton;\n\n    constructor(\n        private readonly getValue: () => boolean,\n        private readonly setValue: (value: boolean) => void,\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        this.switchCategorySeriesToggleButton = this.createManagedBean(new AgToggleButton({\n            label: this.chartTranslationService.translate('switchCategorySeries'),\n            labelAlignment: 'left',\n            labelWidth: \"flex\",\n            inputWidth: 'flex',\n            value: this.getValue(),\n            onValueChange: (value) => {\n                this.setValue(value);\n            },\n        }));\n\n        const switchCategorySeriesGroupParams: AgGroupComponentParams = {\n            title: undefined,\n            suppressEnabledCheckbox: true,\n            suppressOpenCloseIcons: true,\n            cssIdentifier: 'charts-data',\n            expanded: true,\n            items: [this.switchCategorySeriesToggleButton],\n        };\n\n        this.setTemplate(SwitchCategorySeriesDataPanel.TEMPLATE, {\n            switchCategorySeriesGroup: switchCategorySeriesGroupParams,\n        });\n    }\n\n    public refresh(): void {\n        this.switchCategorySeriesToggleButton?.setValue(this.getValue(), true);\n    }\n}\n", "import {\n    _,\n    ChartFormatPanel,\n    ChartFormatPanelGroup,\n    ChartPanelGroupDef,\n    Component,\n    PostConstruct,\n    ChartType\n} from \"@ag-grid-community/core\";\nimport { LegendPanel } from \"./legend/legendPanel\";\nimport { CartesianAxisPanel } from \"./axis/cartesianAxisPanel\";\nimport { PolarAxisPanel } from \"./axis/polarAxisPanel\";\nimport { ChartPanel } from \"./chart/chartPanel\";\nimport { SeriesPanel } from \"./series/seriesPanel\";\nimport { ChartSeriesType, hasGradientLegend, isCartesian, isPolar } from \"../../utils/seriesTypeMapper\";\nimport { GradientLegendPanel } from './legend/gradientLegendPanel';\nimport { ChartPanelFeature } from \"../chartPanelFeature\";\nimport { ChartMenuContext } from \"../chartMenuContext\";\n\nexport interface FormatPanelOptions extends ChartMenuContext {\n    isExpandedOnInit?: boolean,\n    seriesType?: ChartSeriesType,\n}\n\nconst DefaultFormatPanelDef: ChartFormatPanel = {\n    groups: [\n        { type: 'chart' },\n        { type: 'legend' },\n        { type: 'series' },\n        { type: 'axis' },\n    ]\n};\n\nexport class FormatPanel extends Component {\n    public static TEMPLATE = /* html */ `<div class=\"ag-chart-format-wrapper\"></div>`;\n\n    private chartPanelFeature: ChartPanelFeature;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(FormatPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.chartPanelFeature = this.createManagedBean(new ChartPanelFeature(\n            this.chartMenuContext.chartController,\n            this.getGui(),\n            'ag-chart-format-section',\n            (chartType, seriesType) => this.createPanels(chartType, seriesType)\n        ));\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(chartType: ChartType, seriesType: ChartSeriesType) {\n        this.getFormatPanelDef().groups?.forEach((groupDef: ChartPanelGroupDef<ChartFormatPanelGroup>) => {\n            const group = groupDef.type;\n\n            // ensure the group should be displayed for the current series type\n            if (!this.isGroupPanelShownInSeries(group, seriesType)) {\n                return;\n            }\n\n            const opts: FormatPanelOptions = {\n                ...this.chartMenuContext,\n                isExpandedOnInit: groupDef.isOpen,\n                seriesType\n            };\n\n            switch (group) {\n                case 'chart':\n                    this.chartPanelFeature.addComponent(new ChartPanel(opts));\n                    break;\n                case 'legend':\n                    // Some chart types require non-standard legend options, so choose the appropriate panel\n                    const panel = hasGradientLegend(chartType) ? new GradientLegendPanel(opts) : new LegendPanel(opts);\n                    this.chartPanelFeature.addComponent(panel);\n                    break;\n                case 'axis':\n                    // Polar charts have different axis options from cartesian charts, so choose the appropriate panels\n                    if (isPolar(chartType)) {\n                        this.chartPanelFeature.addComponent(new PolarAxisPanel(opts));\n                    } else if (isCartesian(chartType)) {\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                        this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    }\n                    break;\n                case 'horizontalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('xAxis', opts));\n                    break;\n                case 'verticalAxis':\n                    this.chartPanelFeature.addComponent(new CartesianAxisPanel('yAxis', opts));\n                    break;\n                case 'series':\n                    this.chartPanelFeature.addComponent(new SeriesPanel(opts));\n                    break;\n                case 'navigator':\n                    _.warnOnce(`'navigator' is now displayed in the charts advanced settings instead of the format panel, and this setting will be ignored.`);\n                default:\n                    _.warnOnce(`Invalid charts format panel group name supplied: '${groupDef.type}'`);\n            }\n        });\n    }\n\n    private getFormatPanelDef() {\n        const userProvidedFormatPanelDef = this.gridOptionsService.get('chartToolPanelsDef')?.formatPanel;\n        return userProvidedFormatPanelDef ? userProvidedFormatPanelDef : DefaultFormatPanelDef;\n    }\n\n    private isGroupPanelShownInSeries = (group: ChartFormatPanelGroup, seriesType: ChartSeriesType): boolean => {\n        // Determine whether the given panel group is shown depending on the active series type\n\n        // These panel groups are always shown regardless of series type\n        const commonGroupPanels = ['chart', 'legend', 'series'];\n        if (commonGroupPanels.includes(group)) {\n            return true;\n        }\n\n        // These panel groups depend on the selected series type\n        const extendedGroupPanels: { [T in ChartSeriesType]?: Array<ChartFormatPanelGroup> } = {\n            'bar': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'column': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'line': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'area': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'scatter': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'bubble': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'histogram': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'cartesian': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'radial-column': ['axis'],\n            'radial-bar': ['axis'],\n            'radar-line': ['axis'],\n            'radar-area': ['axis'],\n            'nightingale': ['axis'],\n            'range-bar': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'range-area': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'treemap': [],\n            'sunburst': [],\n            'heatmap': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'waterfall': ['axis', 'horizontalAxis', 'verticalAxis'],\n            'box-plot': ['axis', 'horizontalAxis', 'verticalAxis'],\n        };\n        return extendedGroupPanels[seriesType]?.includes(group) ?? false;\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    AgSliderParams\n} from \"@ag-grid-community/core\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class LegendPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"legendGroup\">\n                <ag-select ref=\"legendPositionSelect\"></ag-select>\n                <ag-slider ref=\"legendPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"markerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"markerStrokeSlider\"></ag-slider>\n                <ag-slider ref=\"markerPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingXSlider\"></ag-slider>\n                <ag-slider ref=\"itemPaddingYSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({ chartMenuParamsFactory: chartMenuUtils, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.chartMenuUtils = chartMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const legendGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'legend.enabled',\n            {\n                cssIdentifier: 'charts-format-top-level',\n                direction: 'vertical',\n                title: this.chartTranslationService.translate(\"legend\"),\n                suppressEnabledCheckbox: false,\n                suppressToggleExpandOnEnableChange: true,\n                expanded: this.isExpandedOnInit,\n                items: [this.createLabelPanel()]\n            }\n        );\n        this.setTemplate(LegendPanel.TEMPLATE, {\n            legendGroup: legendGroupParams,\n            legendPositionSelect: this.chartMenuUtils.getDefaultLegendParams('legend.position'),\n            legendPaddingSlider: this.getSliderParams('spacing', 'spacing', 200),\n            markerSizeSlider: this.getSliderParams(\"item.marker.size\", \"markerSize\", 40),\n            markerStrokeSlider: this.getSliderParams(\"item.marker.strokeWidth\", \"markerStroke\", 10),\n            markerPaddingSlider: this.getSliderParams(\"item.marker.padding\", \"itemSpacing\", 20),\n            itemPaddingXSlider: this.getSliderParams(\"item.paddingX\", \"layoutHorizontalSpacing\", 50),\n            itemPaddingYSlider: this.getSliderParams(\"item.paddingY\", \"layoutVerticalSpacing\", 50),\n        });\n    }\n\n    private getSliderParams(expression: string, labelKey: ChartTranslationKey, defaultMaxValue: number): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(`legend.${expression}`, labelKey, defaultMaxValue);\n    }\n\n    private createLabelPanel(): FontPanel {\n        const params: FontPanelParams = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `legend.item.label.${key}`\n        };\n\n        return this.createManagedBean(new FontPanel(params));\n    }\n}\n", "import {\n    _,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelectParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    RefSelector\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../chartMenuParamsFactory\";\nimport { ChartOptionsProxy } from '../../services/chartOptionsService';\n\ninterface Font {\n    fontFamily?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    fontSize?: number;\n    color?: string;\n}\n\nexport interface FontPanelParams {\n    name?: string;\n    enabled: boolean;\n    suppressEnabledCheckbox?: boolean;\n    onEnableChange?: (enabled: boolean) => void;\n    chartMenuUtils: ChartMenuParamsFactory,\n    keyMapper: (key: string) => string\n}\n\nexport class FontPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div class=\"ag-font-panel\">\n            <ag-group-component ref=\"fontGroup\">\n                <ag-select ref=\"familySelect\"></ag-select>\n                <ag-select ref=\"weightStyleSelect\"></ag-select>\n                <div class=\"ag-charts-font-size-color\">\n                    <ag-select ref=\"sizeSelect\"></ag-select>\n                    <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n                </div>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('fontGroup') private fontGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly params: FontPanelParams;\n    private readonly chartOptions: ChartOptionsProxy;\n    private activeComps: Component[] = [];\n\n    constructor(params: FontPanelParams) {\n        super();\n        this.params = params;\n        this.chartOptions = params.chartMenuUtils.getChartOptions();\n    }\n\n    @PostConstruct\n    private init() {\n        const fontGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.params.name || this.chartTranslationService.translate('font'),\n            enabled: this.params.enabled,\n            suppressEnabledCheckbox: !!this.params.suppressEnabledCheckbox,\n            onEnableChange: enabled => {\n                if (this.params.onEnableChange) {\n                    this.params.onEnableChange(enabled);\n                }\n            }\n        };\n        this.setTemplate(FontPanel.TEMPLATE, {\n            fontGroup: fontGroupParams,\n            familySelect: this.getFamilySelectParams(),\n            weightStyleSelect: this.getWeightStyleSelectParams(),\n            sizeSelect: this.getSizeSelectParams(),\n            colorPicker: this.params.chartMenuUtils.getDefaultColorPickerParams(this.params.keyMapper('color'))\n        });\n    }\n\n    public addCompToPanel(comp: Component) {\n        this.fontGroup.addItem(comp);\n        this.activeComps.push(comp);\n    }\n\n    public setEnabled(enabled: boolean): void {\n        this.fontGroup.setEnabled(enabled);\n    }\n\n    private getFamilySelectParams(): AgSelectParams {\n        const families = [\n            'Arial, sans-serif',\n            'Aria Black, sans-serif',\n            'Book Antiqua,  serif',\n            'Charcoal, sans-serif',\n            'Comic Sans MS, cursive',\n            'Courier, monospace',\n            'Courier New, monospace',\n            'Gadget, sans-serif',\n            'Geneva, sans-serif',\n            'Helvetica, sans-serif',\n            'Impact, sans-serif',\n            'Lucida Console, monospace',\n            'Lucida Grande, sans-serif',\n            'Lucida Sans Unicode,  sans-serif',\n            'Monaco, monospace',\n            'Palatino Linotype, serif',\n            'Palatino, serif',\n            'Times New Roman, serif',\n            'Times, serif',\n            'Verdana, sans-serif'\n        ];\n\n        const family = this.getInitialFontValue('fontFamily');\n        let initialValue = families[0];\n\n        if (family) {\n            // check for known values using lowercase\n            const lowerCaseValues = families.map(f => f.toLowerCase());\n            const valueIndex = lowerCaseValues.indexOf(family.toLowerCase());\n\n            if (valueIndex >= 0) {\n                initialValue = families[valueIndex];\n            } else {\n                // add user provided value to list\n                const capitalisedFontValue = _.capitalise(family);\n\n                families.push(capitalisedFontValue);\n\n                initialValue = capitalisedFontValue;\n            }\n        }\n\n        const options = families.sort().map(value => ({ value, text: value }));\n\n        return {\n            options,\n            inputWidth: 'flex',\n            value: `${initialValue}`,\n            onValueChange: newValue => this.setFont({ fontFamily: newValue! })\n        };\n    }\n\n    private getSizeSelectParams(): AgSelectParams {\n        const sizes = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];\n        const size = this.getInitialFontValue('fontSize');\n\n        if (!_.includes(sizes, size)) {\n            sizes.push(size!);\n        }\n\n        const options = sizes.sort((a, b) => a - b).map(value => ({ value: `${value}`, text: `${value}` }));\n\n        return {\n            options,\n            inputWidth: 'flex',\n            value: `${size}`,\n            onValueChange: newValue => this.setFont({ fontSize: parseInt(newValue!, 10) }),\n            label: this.chartTranslationService.translate('size')\n        };\n    }\n\n    private getWeightStyleSelectParams(): AgSelectParams {\n        const weight = this.getInitialFontValue('fontWeight') ?? 'normal';\n        const style = this.getInitialFontValue('fontStyle') ?? 'normal';\n\n        const weightStyles: { name: 'normal' | 'bold' | 'italic' | 'boldItalic' | 'predefined', weight: string, style: string }[] = [\n            { name: 'normal', weight: 'normal', style: 'normal' },\n            { name: 'bold', weight: 'bold', style: 'normal' },\n            { name: 'italic', weight: 'normal', style: 'italic' },\n            { name: 'boldItalic', weight: 'bold', style: 'italic' }\n        ];\n\n        let selectedOption = weightStyles.find(x => x.weight === weight && x.style === style);\n\n        if (!selectedOption) {\n            selectedOption = { name: 'predefined', weight, style };\n            weightStyles.unshift(selectedOption);\n        }\n\n        const options = weightStyles.map(ws => ({\n            value: ws.name,\n            text: this.chartTranslationService.translate(ws.name),\n        }));\n\n        return {\n            options,\n            inputWidth: 'flex',\n            value: selectedOption.name,\n            onValueChange: newValue => {\n                const selectedWeightStyle = weightStyles.find(x => x.name === newValue);\n\n                this.setFont({ fontWeight: selectedWeightStyle!.weight, fontStyle: selectedWeightStyle!.style });\n            }\n        };\n    }\n\n    public addItemToPanel(item: Component) {\n        this.fontGroup.addItem(item);\n        this.activeComps.push(item);\n    }\n\n    private destroyActiveComps(): void {\n        this.activeComps.forEach(comp => {\n            _.removeFromParent(comp.getGui());\n            this.destroyBean(comp);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActiveComps();\n        super.destroy();\n    }\n\n    private setFont(font: Font): void {\n        const { keyMapper } = this.params;\n        Object.entries(font).forEach(([fontKey, value]: [keyof Font, any]) => {\n            if (value) {\n                this.chartOptions.setValue(keyMapper(fontKey), value);\n            }\n        });\n    }\n\n    private getInitialFontValue<K extends keyof Font>(fontKey: K): Font[K] {\n        const { keyMapper } = this.params;\n        return this.chartOptions.getValue(keyMapper(fontKey));\n    }\n}\n", "import {\n    _,\n    AgCheckbox,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelect,\n    AgSelectParams,\n    AgSlider,\n    AgSliderParams,\n    Autowired,\n    Component,\n    Events,\n    PostConstruct,\n    RefSelector,\n} from \"@ag-grid-community/core\";\nimport type { AgCartesianAxisOptions } from 'ag-charts-community';\nimport { ChartController } from \"../../../chartController\";\nimport { AxisTicksPanel } from \"./axisTicksPanel\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { GridLinePanel } from '../gridLine/gridLinePanel';\nimport { AgAngleSelect } from \"../../../../../widgets/agAngleSelect\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport { isCartesian } from '../../../utils/seriesTypeMapper';\nimport { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\n\nconst DEFAULT_TIME_AXIS_FORMAT = '%d %B %Y';\n\nexport class CartesianAxisPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"axisGroup\">\n                <ag-select ref=\"axisTypeSelect\"></ag-select>\n                <ag-select ref=\"axisTimeFormatSelect\"></ag-select>\n                <ag-select ref=\"axisPositionSelect\"></ag-select>\n                <ag-color-picker ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('axisGroup') private axisGroup: AgGroupComponent;\n    @RefSelector('axisTypeSelect') private axisTypeSelect: AgSelect;\n    @RefSelector('axisPositionSelect') private axisPositionSelect: AgSelect;\n    @RefSelector('axisTimeFormatSelect') private axisTimeFormatSelect: AgSelect;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly axisType: 'xAxis' | 'yAxis';\n    private readonly chartController: ChartController;\n    private readonly chartAxisOptionsProxy: ChartOptionsProxy;\n    private readonly chartAxisThemeOverridesProxy: ChartOptionsProxy;\n    private readonly chartAxisAppliedThemeOverridesProxy: ChartOptionsProxy;\n    private readonly isExpandedOnInit: boolean;\n\n    private activePanels: Component[] = [];\n    private axisLabelUpdateFuncs: Function[] = [];\n\n    private prevRotation: number | undefined;\n\n    constructor(axisType: 'xAxis' | 'yAxis', { chartController, chartOptionsService, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.axisType = axisType;\n        this.chartController = chartController;\n        this.chartAxisOptionsProxy = chartOptionsService.getCartesianAxisOptionsProxy(axisType);\n        this.chartAxisThemeOverridesProxy = chartOptionsService.getCartesianAxisThemeOverridesProxy(axisType);\n        this.chartAxisAppliedThemeOverridesProxy = chartOptionsService.getCartesianAxisAppliedThemeOverridesProxy(axisType);\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const labelKey: ChartTranslationKey = this.axisType;\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate(labelKey),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true\n        };\n\n        const chartAxisOptions = this.createManagedBean(new ChartMenuParamsFactory(this.chartAxisOptionsProxy));\n        const chartAxisThemeOverrides = this.createManagedBean(new ChartMenuParamsFactory(this.chartAxisThemeOverridesProxy));\n\n        const axisTypeSelectParams = this.getAxisTypeSelectParams(chartAxisOptions, this.chartAxisAppliedThemeOverridesProxy);\n        const axisPositionSelectParams = this.getAxisPositionSelectParams(chartAxisOptions);\n        const axisTimeFormatSelectParams = this.getAxisTimeFormatSelectParams(chartAxisOptions);\n        const axisColorInputParams = this.getAxisColorInputParams(chartAxisThemeOverrides);\n        const axisLineWidthSliderParams = this.getAxisLineWidthSliderParams(chartAxisThemeOverrides);\n\n        this.setTemplate(CartesianAxisPanel.TEMPLATE, {\n            axisGroup: axisGroupParams,\n            axisTypeSelect: axisTypeSelectParams ?? undefined,\n            axisPositionSelect: axisPositionSelectParams ?? undefined,\n            axisTimeFormatSelect: axisTimeFormatSelectParams ?? undefined,\n            axisColorInput: axisColorInputParams,\n            axisLineWidthSlider: axisLineWidthSliderParams\n        });\n\n        if (!axisTypeSelectParams) this.removeTemplateComponent(this.axisTypeSelect);\n        if (!axisPositionSelectParams) this.removeTemplateComponent(this.axisPositionSelect);\n        if (!axisTimeFormatSelectParams) {\n            this.removeTemplateComponent(this.axisTimeFormatSelect);\n        } else {\n            // Conditionally hide the time format input based on the currently selected axis type\n            const updateTimeFormatVisibility = () => {\n                const isTimeAxis = this.chartAxisOptionsProxy.getValue('type') === 'time';\n                _.setDisplayed(this.axisTimeFormatSelect.getGui(), isTimeAxis)\n            };\n            updateTimeFormatVisibility();\n            // Update the visibility whenever the axis type changes\n            this.addManagedListener(this.eventService, Events.EVENT_CHART_OPTIONS_CHANGED, (e) => {\n                updateTimeFormatVisibility();\n            });\n        }\n\n        this.initGridLines(chartAxisThemeOverrides);\n        this.initAxisTicks(chartAxisThemeOverrides);\n        this.initAxisLabels(chartAxisThemeOverrides);\n\n        const updateAxisLabelRotations = () => this.axisLabelUpdateFuncs.forEach(func => func());\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, updateAxisLabelRotations);\n    }\n\n    private getAxisTypeSelectParams(chartAxisOptions: ChartMenuParamsFactory, chartAxisAppliedThemeOverrides: ChartOptionsProxy): AgSelectParams | null {\n        const chartOptions = chartAxisOptions.getChartOptions();\n        const axisTypeSelectOptions = ((chartType, axisType) => {\n            if (!isCartesian(chartType)) return null;\n            switch (chartType) {\n                // Some chart types do not support configuring the axis type\n                case 'heatmap':\n                    return null;\n                default:\n                    switch (axisType) {\n                        // Horizontal axis type can be changed between a limited subset of axis types\n                        case 'xAxis': return [\n                            { value: 'category', text: this.translate('category') },\n                            { value: 'number', text: this.translate('number') },\n                            { value: 'time', text: this.translate('time') },\n                        ];\n                        // Vertical axis type cannot currently be changed\n                        case 'yAxis': return null;\n                    }\n            }\n        })(this.chartController.getChartType(), this.axisType);\n        if (!axisTypeSelectOptions) return null;\n        const params = chartAxisOptions.getDefaultSelectParams(\n            'type',\n            'axisType',\n            axisTypeSelectOptions,\n        );\n        params.onValueChange = (value: AgCartesianAxisOptions['type']): void => {\n            const previousAxisType = chartOptions.getValue<AgCartesianAxisOptions['type']>('type');\n            if (value === previousAxisType) return;\n            // If the axis type is changed, we need to carry over all the accumulated theme overrides\n            // that have been applied to the existing axis type so far\n            const previousAxisThemeOverrides = chartAxisAppliedThemeOverrides.getValue<AgCartesianAxisOptions>('*');\n            // Optionally update the axis label format when switching between time and non-time axes\n            const previousAxisIsTimeAxis = isTimeAxisType(previousAxisType);\n            const updatedAxisIsTimeAxis = isTimeAxisType(value);\n            const updatedLabelFormat = (previousAxisIsTimeAxis !== updatedAxisIsTimeAxis\n                ? (updatedAxisIsTimeAxis ? DEFAULT_TIME_AXIS_FORMAT : undefined)\n                : null\n            );\n            // Update the axis type (and label format if necessary)\n            if (updatedLabelFormat === null) {\n                chartOptions.setValue<AgCartesianAxisOptions['type']>('type', value);\n            } else {\n                const existingLabel = chartOptions.getValue<AgCartesianAxisOptions['label']>('label') ?? {};\n                chartOptions.setValues<AgCartesianAxisOptions['type'] | AgCartesianAxisOptions['label']>([\n                    { expression: 'type', value },\n                    { expression: 'label', value: { ...existingLabel, format: updatedLabelFormat } }\n                ]);\n                this.axisTimeFormatSelect.setValue(updatedLabelFormat, true);\n            }\n            // Reapply the previous theme overrides to the new axis type\n            chartAxisAppliedThemeOverrides.setValue<AgCartesianAxisOptions>('*', previousAxisThemeOverrides);\n        };\n        return params;\n    }\n\n    private getAxisPositionSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        const axisPositionSelectOptions = ((chartType, axisType) => {\n            if (!isCartesian(chartType)) return null;\n            switch (chartType) {\n                // Some chart types do not support configuring the axis position\n                case 'heatmap':\n                    return null;\n                default:\n                    switch (axisType) {\n                        // Horizontal axis position can be changed between top and bottom\n                        case 'xAxis': return [\n                            { value: 'top', text: this.translate('top') },\n                            { value: 'bottom', text: this.translate('bottom') },\n                        ];\n                        // Vertical axis position can be changed between left and right\n                        case 'yAxis': return [\n                            { value: 'left', text: this.translate('left') },\n                            { value: 'right', text: this.translate('right') },\n                        ];\n                    }\n            }\n        })(this.chartController.getChartType(), this.axisType);\n        if (!axisPositionSelectOptions) return null;\n        return chartAxisOptions.getDefaultSelectParams(\n            'position',\n            'position',\n            axisPositionSelectOptions,\n        );\n    }\n\n    private getAxisTimeFormatSelectParams(chartAxisOptions: ChartMenuParamsFactory): AgSelectParams | null {\n        const axisTimeFormatSelectOptions = ((chartType, axisType) => {\n            if (!isCartesian(chartType)) return null;\n            switch (axisType) {\n                case 'xAxis': return [\n                    { value: '%d/%m/%Y', text: this.translate('timeFormatSlashesDDMMYYYY') },\n                    { value: '%m/%d/%Y', text: this.translate('timeFormatSlashesMMDDYYYY') },\n                    { value: '%d/%m/%y', text: this.translate('timeFormatSlashesDDMMYY') },\n                    { value: '%m/%d/%y', text: this.translate('timeFormatSlashesMMDDYY') },\n                    { value: '%d.%e.%y', text: this.translate('timeFormatDotsDDMYY') },\n                    { value: '%e.%d.%y', text: this.translate('timeFormatDotsMDDYY') },\n                    { value: '%Y-%m-%d', text: this.translate('timeFormatDashesYYYYMMDD') },\n                    { value: '%d %B %Y', text: this.translate('timeFormatSpacesDDMMMMYYYY') },\n                    { value: '%H:%M:%S', text: this.translate('timeFormatHHMMSS') },\n                    { value: '%I:%M:%S %p', text: this.translate('timeFormatHHMMSSAmPm') },\n                ];\n                case 'yAxis': return null;\n            }\n        })(this.chartController.getChartType(), this.axisType);\n        if (!axisTimeFormatSelectOptions) return null;\n        return chartAxisOptions.getDefaultSelectParams(\n            'label.format',\n            'timeFormat',\n            axisTimeFormatSelectOptions,\n        );\n    }\n\n    private getAxisColorInputParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgColorPickerParams {\n        return chartAxisThemeOverrides.getDefaultColorPickerParams('line.color');\n    }\n\n    private getAxisLineWidthSliderParams(chartAxisThemeOverrides: ChartMenuParamsFactory): AgSliderParams {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n        // Note that there is no separate checkbox for enabling/disabling the axis line. Whenever the line width is\n        // changed, the value for `line.enabled` is inferred based on the whether the `line.width` value is non-zero.\n        const getAxisLineWidth = (): number | null => {\n            const isAxisLineEnabled = chartOptions.getValue<boolean>('line.enabled');\n            if (!isAxisLineEnabled) return null;\n            return chartOptions.getValue<number>('line.width');\n        };\n        const setAxisLineWidth = (value: number | null): void => {\n            chartOptions.setValues<number | boolean>([\n                { expression: 'line.enabled', value: value != null },\n                { expression: 'line.width', value: value ?? 0},\n            ]);\n        };\n        const axisLineWidthSliderParams = chartAxisThemeOverrides.getDefaultSliderParamsWithoutValueParams(\n            getAxisLineWidth() ?? 0,\n            \"thickness\",\n            10\n        );\n        axisLineWidthSliderParams.onValueChange = (newValue) => {\n            setAxisLineWidth(newValue === 0 ? null : newValue);\n        };\n        return axisLineWidthSliderParams;\n    }\n\n    private initGridLines(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartType = this.chartController.getChartType();\n        switch (chartType) {\n            // Some chart types do not support configuring grid lines\n            case 'heatmap':\n                return;\n            default: \n                const gridLineComp = this.createBean(new GridLinePanel(chartAxisThemeOverrides));\n                this.axisGroup.addItem(gridLineComp);\n                this.activePanels.push(gridLineComp);\n        }\n    }\n\n    private initAxisTicks(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        if (!this.hasConfigurableAxisTicks()) return;\n        const axisTicksComp = this.createBean(new AxisTicksPanel(chartAxisThemeOverrides));\n        this.axisGroup.addItem(axisTicksComp);\n        this.activePanels.push(axisTicksComp);\n    }\n\n    private hasConfigurableAxisTicks(): boolean {\n        // Axis ticks are disabled for some chart types\n        const chartType = this.chartController.getChartType();\n        switch (chartType) {\n            case 'radarLine':\n            case 'radarArea':\n            case 'rangeBar':\n            case 'boxPlot':\n            case 'waterfall':\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    private initAxisLabels(chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const params: FontPanelParams = {\n            name: this.translate(\"labels\"),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: chartAxisThemeOverrides,\n            keyMapper: key => `label.${key}`\n        };\n\n        const labelPanelComp = this.createBean(new FontPanel(params));\n        this.axisGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n\n        this.addAdditionalLabelComps(labelPanelComp, chartAxisThemeOverrides);\n    }\n\n    private addAdditionalLabelComps(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        this.addLabelPadding(labelPanelComp, chartAxisThemeOverrides);\n\n        const rotationComp = this.createRotationWidget('labelRotation', chartAxisThemeOverrides);\n        const autoRotateCb = this.initLabelRotation(rotationComp, chartAxisThemeOverrides);\n\n        labelPanelComp.addCompToPanel(autoRotateCb);\n        labelPanelComp.addCompToPanel(rotationComp);\n    }\n\n    private initLabelRotation(rotationComp: AgAngleSelect, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const getLabelAutoRotateValue = (): boolean => {\n            return chartOptions.getValue<boolean>('label.autoRotate');\n        };\n\n        const updateAutoRotate = (autoRotate: boolean) => {\n            // Remember the existing rotation before we clear it from the options\n            if (autoRotate) this.prevRotation = getLabelRotationValue();\n\n            // For the autoRotate option to take effect, we need to additionally clear the rotation option value\n            chartOptions.setValues<boolean | number | undefined>([\n                { expression: \"label.autoRotate\", value: autoRotate },\n                // Clear the rotation option when activating auto-rotate, reinstate the previous value when deactivating\n                { expression: \"label.rotation\", value: autoRotate ? undefined : this.prevRotation }\n            ]);\n\n            rotationComp.setDisabled(autoRotate);\n        };\n\n        const rotation = getLabelRotationValue();\n        const autoRotate = typeof rotation === 'number' ? false : getLabelAutoRotateValue();\n\n        const autoRotateCheckbox = this.createBean(new AgCheckbox({\n            label: this.translate('autoRotate'),\n            value: autoRotate,\n            onValueChange: updateAutoRotate\n        }));\n\n        // init rotation comp state\n        rotationComp.setDisabled(autoRotate);\n\n        return autoRotateCheckbox;\n    }\n\n    private createRotationWidget(labelKey: ChartTranslationKey, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const chartOptions = chartAxisThemeOverrides.getChartOptions();\n\n        const getLabelRotationValue = (): number | undefined => {\n            return chartOptions.getValue<number | undefined>('label.rotation');\n        };\n        const setLabelRotationValue = (value: number | undefined): void => {\n            return chartOptions.setValue<number | undefined>('label.rotation', value);\n        };\n\n        const degreesSymbol = String.fromCharCode(176);\n\n        const label = `${this.chartTranslationService.translate(labelKey)} ${degreesSymbol}`;\n        const angleSelect = new AgAngleSelect({\n            label,\n            labelWidth: \"flex\",\n            value: getLabelRotationValue() ?? 0,\n            onValueChange: setLabelRotationValue,\n        });\n\n        // the axis label rotation needs to be updated when the default category changes in the data panel\n        this.axisLabelUpdateFuncs.push(() => {\n            angleSelect.setValue(getLabelRotationValue() ?? 0);\n        });\n\n        return this.createBean(angleSelect);\n    }\n\n    private addLabelPadding(labelPanelComp: FontPanel, chartAxisThemeOverrides: ChartMenuParamsFactory) {\n        const labelPaddingSlider = this.createBean(new AgSlider(chartAxisThemeOverrides.getDefaultSliderParams(\n            \"label.padding\",\n            \"padding\",\n            30\n        )));\n\n        labelPanelComp.addCompToPanel(labelPaddingSlider);\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private removeTemplateComponent(component: Component): void {\n        _.removeFromParent(component.getGui());\n        this.destroyBean(component);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n\nfunction isTimeAxisType(axisType: AgCartesianAxisOptions['type']): boolean {\n    switch (axisType) {\n        case 'time':\n            return true;\n        case 'number':\n        case 'log':\n        case 'category':\n        case 'grouped-category':\n        default:\n            return false;\n    }\n}", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class AxisTicksPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"axisTicksGroup\">\n                <ag-color-picker ref=\"axisTicksColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"axisTicksWidthSlider\"></ag-slider>\n                <ag-slider ref=\"axisTicksSizeSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const axisTicksGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'tick.enabled',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"ticks\"),\n                suppressEnabledCheckbox: false\n            }\n        );\n        const axisTicksColorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams(\"tick.color\");\n        const axisTicksWidthSliderParams = this.chartMenuUtils.getDefaultSliderParams(\"tick.width\", \"width\", 10);\n        const axisTicksSizeSliderParams = this.chartMenuUtils.getDefaultSliderParams(\"tick.size\", \"length\", 30);\n        this.setTemplate(AxisTicksPanel.TEMPLATE, {\n            axisTicksGroup: axisTicksGroupParams,\n            axisTicksColorPicker: axisTicksColorPickerParams,\n            axisTicksWidthSlider: axisTicksWidthSliderParams,\n            axisTicksSizeSlider: axisTicksSizeSliderParams\n        });\n    }\n}\n", "import { AgGroupComponentParams, AgSliderParams, Autowired, Component, PostConstruct } from '@ag-grid-community/core';\nimport { ChartTranslationKey, ChartTranslationService } from '../../../services/chartTranslationService';\nimport { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\nimport { AgAxisGridLineOptions } from 'ag-charts-community';\nimport { AgColorPickerParams } from '../../../../../widgets/agColorPicker';\n\nexport class GridLinePanel extends Component {\n    public static TEMPLATE = /* html */ `<div>\n            <ag-group-component ref=\"gridLineGroup\">\n                <ag-color-picker ref=\"gridLineColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"gridLineWidthSlider\"></ag-slider>\n                <ag-slider ref=\"gridLineLineDashSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartOptions: ChartOptionsProxy;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    @PostConstruct\n    private init() {\n        const gridLineGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>('gridLine.enabled', {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('gridLines'),\n            suppressEnabledCheckbox: false,\n        });\n        const gridLineColorPickerParams = this.getGridLineColorPickerParams('color');\n        const gridLineWidthSliderParams = this.getGridLineWidthSliderParams('thickness');\n        const gridLineLineDashSliderParams = this.getGridLineDashSliderParams('lineDash');\n        this.setTemplate(GridLinePanel.TEMPLATE, {\n            gridLineGroup: gridLineGroupParams,\n            gridLineColorPicker: gridLineColorPickerParams,\n            gridLineWidthSlider: gridLineWidthSliderParams,\n            gridLineLineDashSlider: gridLineLineDashSliderParams,\n        });\n    }\n\n    private getGridLineColorPickerParams(labelKey: ChartTranslationKey): AgColorPickerParams {\n        return this.chartMenuUtils.getDefaultColorPickerParams(\n            'gridLine.style',\n            labelKey,\n            {\n                formatInputValue: (value: AgAxisGridLineOptions['style']) => {\n                    return value?.[0]?.stroke;\n                },\n                parseInputValue: (value: string) => {\n                    const styles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style') ?? [];\n                    if (styles.length === 0) return [{ stroke: value, lineDash: [] }];\n                    return [{ ...styles[0], stroke: value }];\n                },\n            }\n        );\n    }\n\n    private getGridLineWidthSliderParams(labelKey: ChartTranslationKey) {\n        return this.chartMenuUtils.getDefaultSliderParams('gridLine.width', labelKey, 10);\n    }\n\n    private getGridLineDashSliderParams(labelKey: ChartTranslationKey): AgSliderParams {\n        const initialStyles = this.chartOptions.getValue<AgAxisGridLineOptions['style']>('gridLine.style');\n        const initialValue = initialStyles?.[0]?.lineDash?.[0];\n        const params = this.chartMenuUtils.getDefaultSliderParamsWithoutValueParams(\n            initialValue ?? 0,\n            labelKey,\n            30,\n        );\n        params.onValueChange = (value: number): void => {\n            const stroke = this.chartOptions.getValue('gridLine.style.0.stroke');\n            this.chartOptions.setValue<AgAxisGridLineOptions['style']>(\n                'gridLine.style',\n                [{ lineDash: [value], stroke }],\n            );\n        };\n        return params;\n    }\n}\n", "import { AgInputNumberField, Autowired, DragService, Events, AgAbstractLabel, DragListenerParams, AgLabelParams, RefSelector, _ } from \"@ag-grid-community/core\";\n\nexport interface AgAngleSelectParams extends AgLabelParams {\n    value?: number;\n    onValueChange?: (value: number) => void;\n};\n\nexport class AgAngleSelect extends AgAbstractLabel<AgAngleSelectParams> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-angle-select\">\n            <div ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div ref=\"eAngleSelectField\" class=\"ag-angle-select-field\">\n                    <div ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>`;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eParentCircle') private readonly eParentCircle: HTMLElement;\n    @RefSelector('eChildCircle') private readonly eChildCircle: HTMLElement;\n    @RefSelector('eAngleValue') private readonly eAngleValue: AgInputNumberField;\n\n    @Autowired('dragService') protected readonly dragService: DragService;\n\n    private parentCircleRect: ClientRect | DOMRect;\n    private degrees: number;\n    private radius: number = 0;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private dragListener: DragListenerParams;\n\n    constructor(config?: AgAngleSelectParams) {\n        super(config, AgAngleSelect.TEMPLATE);\n    }\n\n    postConstruct() {\n        super.postConstruct();\n\n        const { value, onValueChange } = this.config;\n\n        if (value != null) {\n            this.setValue(value, undefined, true);\n        }\n        if (onValueChange != null) {\n            this.onValueChange(onValueChange);\n        }\n\n        this.dragListener = {\n            eElement: this.eParentCircle,\n            dragStartPixels: 0,\n            onDragStart: (e: MouseEvent | Touch) => {\n                this.parentCircleRect = this.eParentCircle.getBoundingClientRect();\n            },\n            onDragging: (e: MouseEvent | Touch) => this.calculateAngleDrag(e),\n            onDragStop: () => { }\n        };\n\n        this.dragService.addDragSource(this.dragListener);\n\n        this.eAngleValue\n            .setLabel('')\n            .setLabelWidth(5)\n            .setInputWidth(45)\n            .setMin(0)\n            .setMax(360)\n            .setValue(`${this.degrees}`)\n            .onValueChange((value: string) => {\n                if (value == null || value === '') {\n                    value = '0';\n                }\n                value = this.eAngleValue.normalizeValue(value);\n                let floatValue = parseFloat(value);\n                if (floatValue > 180) {\n                    floatValue = floatValue - 360;\n                }\n                this.setValue(floatValue);\n            });\n\n        this.updateNumberInput();\n\n        if (_.exists(this.getValue())) {\n            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());\n        }\n\n        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            const eDocument = this.gridOptionsService.getDocument();\n            if (this.eAngleValue.getInputElement().contains(eDocument.activeElement)) {\n                return;\n            }\n            this.updateNumberInput();\n        });\n    }\n\n    private updateNumberInput(): void {\n        const normalizedValue = this.normalizeNegativeValue(this.getValue());\n        this.eAngleValue.setValue(normalizedValue.toString());\n    }\n\n    private positionChildCircle(radians: number) {\n        const rect = this.parentCircleRect || { width: 24, height: 24 };\n        const eChildCircle = this.eChildCircle;\n\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        eChildCircle.style.left = `${centerX + Math.cos(radians) * 8}px`;\n        eChildCircle.style.top = `${centerY + Math.sin(radians) * 8}px`;\n    }\n\n    private calculatePolar() {\n        const x = this.offsetX;\n        const y = this.offsetY;\n\n        const radians = Math.atan2(y, x);\n        this.degrees = this.toDegrees(radians);\n        this.radius = Math.sqrt((x * x) + (y * y));\n\n        this.positionChildCircle(radians);\n    }\n\n    private calculateCartesian() {\n        const radians = this.toRadians(this.getValue());\n        const radius = this.getRadius();\n\n        this\n            .setOffsetX(Math.cos(radians) * radius)\n            .setOffsetY(Math.sin(radians) * radius);\n    }\n\n    private setOffsetX(offset: number): this {\n        if (this.offsetX !== offset) {\n            this.offsetX = offset;\n            this.calculatePolar();\n        }\n\n        return this;\n    }\n\n    private setOffsetY(offset: number): this {\n        if (this.offsetY !== offset) {\n            this.offsetY = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n\n    private calculateAngleDrag(e: MouseEvent | Touch) {\n        const rect = this.parentCircleRect;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        const dx = x - centerX;\n        const dy = y - centerY;\n\n        const radians = Math.atan2(dy, dx);\n\n        this.setValue(radians, true);\n    }\n\n    private toDegrees(radians: number): number {\n        return radians / Math.PI * 180;\n    }\n\n    private toRadians(degrees: number): number {\n        return degrees / 180 * Math.PI;\n    }\n\n    private normalizeNegativeValue(degrees: number): number {\n        return degrees < 0 ? 360 + degrees : degrees;\n    }\n\n    private normalizeAngle180(radians: number): number {\n        radians %= Math.PI * 2;\n\n        if (radians < -Math.PI) {\n            radians += Math.PI * 2;\n        } else if (radians >= Math.PI) {\n            radians -= Math.PI * 2;\n        }\n\n        return radians;\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public setRadius(r: number): this {\n        if (this.radius === r) { return this; }\n        this.radius = r;\n        this.calculateCartesian();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void): this {\n        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, () => {\n            callbackFn(this.degrees);\n        });\n        return this;\n    }\n\n    public getValue(radians?: boolean): number {\n        return radians ? this.toRadians(this.degrees) : this.degrees;\n    }\n\n    public setValue(degrees: number, radians?: boolean, silent?: boolean): this {\n        let radiansValue: number;\n        if (!radians) {\n            radiansValue = this.normalizeAngle180(this.toRadians(degrees));\n        } else {\n            radiansValue = degrees;\n        }\n\n        degrees = this.toDegrees(radiansValue);\n\n        if (this.degrees !== degrees) {\n            this.degrees = Math.floor(degrees);\n            this.calculateCartesian();\n            this.positionChildCircle(radiansValue);\n            if (!silent) {\n                this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });\n            }\n        }\n\n        return this;\n    }\n\n    public setWidth(width: number): this {\n        _.setFixedWidth(this.getGui(), width);\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        super.setDisabled(disabled);\n\n        this.eAngleValue.setDisabled(disabled);\n\n        return this;\n    }\n\n    protected destroy(): void {\n        this.dragService.removeDragSource(this.dragListener);\n        super.destroy();\n    }\n}\n", "import { AgFieldParams, AgCheckboxParams, AgInputNumberFieldParams, AgSelectParams, AgSliderParams, Autowired, BeanStub, ListOption } from \"@ag-grid-community/core\";\nimport { AgColorPickerParams } from \"../../../widgets/agColorPicker\";\nimport { ChartOptionsProxy } from \"../services/chartOptionsService\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../services/chartTranslationService\";\nimport { FontPanelParams } from \"./format/fontPanel\";\n\nexport class ChartMenuParamsFactory extends BeanStub {\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(\n        private readonly chartOptionsProxy: ChartOptionsProxy,\n    ) {\n        super();\n    }\n\n    public getDefaultColorPickerParams(\n        expression: string,\n        labelKey?: ChartTranslationKey,\n        options?: {\n            parseInputValue: (value: any) => any;\n            formatInputValue: (value: any) => any;\n        },\n    ): AgColorPickerParams {\n        return this.addValueParams(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey ?? 'color'),\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n            },\n            options,\n        );\n    }\n\n    public getDefaultNumberInputParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            precision?: number,\n            step?: number,\n            min?: number,\n            max?: number,\n        }\n    ): AgInputNumberFieldParams {\n        return this.addValueParams<AgInputNumberFieldParams>(\n            expression,\n            {\n                label: this.chartTranslationService.translate(labelKey),\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                precision: options?.precision,\n                step: options?.step,\n                min: options?.min,\n                max: options?.max,\n            },\n            {\n                parseInputValue: value => {\n                    const numberValue = Number(value);\n                    return isNaN(numberValue) ? undefined : numberValue;\n                },\n                formatInputValue: value => {\n                    return value == null ? '' : `${value}`;\n                },\n            }\n        );\n    }\n\n    public getDefaultSliderParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number,\n        isArray?: boolean\n    ): AgSliderParams {\n        let value = this.chartOptionsProxy.getValue<number>(expression) ?? 0;\n        if (isArray && Array.isArray(value)) {\n            value = value[0];\n        }\n        const params = this.getDefaultSliderParamsWithoutValueParams(value, labelKey, defaultMaxValue);\n        params.onValueChange = value => this.chartOptionsProxy.setValue(expression, isArray ? [value] : value);\n        return params;\n    }\n\n    public getDefaultSliderParamsWithoutValueParams(\n        value: number,\n        labelKey: ChartTranslationKey,\n        defaultMaxValue: number\n    ): AgSliderParams {\n        return {\n            label: this.chartTranslationService.translate(labelKey),\n            minValue: 0,\n            maxValue: Math.max(value, defaultMaxValue),\n            textFieldWidth: 45,\n            value: `${value}`\n        };\n    }\n\n    public getDefaultCheckboxParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        options?: {\n            readOnly?: boolean,\n            passive?: boolean,\n        },\n    ): AgCheckboxParams {\n        const value = this.chartOptionsProxy.getValue<boolean>(expression);\n        const params: AgCheckboxParams = {\n            label: this.chartTranslationService.translate(labelKey),\n            value,\n            readOnly: options?.readOnly,\n            passive: options?.passive,\n        };\n        params.onValueChange = (value) => {\n            this.chartOptionsProxy.setValue(expression, typeof value === 'boolean' ? value : undefined);\n        };\n        return params;\n    }\n\n    public getDefaultSelectParams(\n        expression: string,\n        labelKey: ChartTranslationKey,\n        dropdownOptions: Array<ListOption>,\n        options?: {\n            pickerType?: string;\n            pickerAriaLabelKey?: string;\n            pickerAriaLabelValue?: string;\n        },\n    ): AgSelectParams {\n        const value = this.chartOptionsProxy.getValue(expression);\n        const params: AgSelectParams = {\n            label: this.chartTranslationService.translate(labelKey),\n            value,\n            options: dropdownOptions,\n            pickerType: options?.pickerType,\n            pickerAriaLabelKey: options?.pickerAriaLabelKey,\n            pickerAriaLabelValue: options?.pickerAriaLabelValue,\n        };\n        params.onValueChange = (value) => {\n            this.chartOptionsProxy.setValue(expression, value);\n        };\n        return params;\n    }\n\n\n    public getDefaultLegendParams(expression: string): AgSelectParams {\n        return this.addValueParams(\n            expression,\n            {\n                label: this.chartTranslationService.translate('position'),\n                labelWidth: \"flex\",\n                inputWidth: 'flex',\n                options: ['top', 'right', 'bottom', 'left'].map((position: ChartTranslationKey) => ({\n                    value: position,\n                    text: this.chartTranslationService.translate(position)\n                })),\n            }\n        );\n    }\n\n    public getDefaultFontPanelParams(\n        expression: string,\n        labelKey: ChartTranslationKey\n    ): FontPanelParams {\n        const keyMapper = (key: string) => `${expression}.${key}`;\n        return this.addEnableParams<FontPanelParams>(\n            keyMapper('enabled'),\n            {\n                name: this.chartTranslationService.translate(labelKey),\n                suppressEnabledCheckbox: false,\n                chartMenuUtils: this,\n                keyMapper\n            } as any\n        );\n    }\n\n    public addValueParams<P extends AgFieldParams>(expression: string, params: P, options?: {\n        parseInputValue: (value: any) => any;\n        formatInputValue: (value: any) => any;\n    }): P {\n        const optionsValue = this.chartOptionsProxy.getValue(expression);\n        params.value = options?.formatInputValue ? options.formatInputValue(optionsValue) : optionsValue;\n        params.onValueChange = value => {\n            const optionsValue = options?.parseInputValue ? options.parseInputValue(value) : value;\n            this.chartOptionsProxy.setValue(expression, optionsValue);\n        };\n        return params;\n    }\n\n    public addEnableParams<P extends {\n        enabled?: boolean;\n        onEnableChange?: (value: boolean) => void;\n    }>(expression: string, params: P): P {\n        params.enabled =  this.chartOptionsProxy.getValue(expression) ?? false;\n        params.onEnableChange = value => this.chartOptionsProxy.setValue(expression, value);\n        return params;\n    }\n\n    public getChartOptions(): ChartOptionsProxy {\n        return this.chartOptionsProxy;\n    }\n}", "import {\n    _,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelect,\n    AgSelectParams,\n    AgSlider,\n    Autowired,\n    Component,\n    ListOption,\n    PostConstruct,\n    RefSelector,\n} from '@ag-grid-community/core';\nimport {ChartController} from '../../../chartController';\nimport {FontPanel, FontPanelParams} from '../fontPanel';\nimport {ChartTranslationKey, ChartTranslationService} from '../../../services/chartTranslationService';\nimport {FormatPanelOptions} from '../formatPanel';\nimport {isRadial} from '../../../utils/seriesTypeMapper';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class PolarAxisPanel extends Component {\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"axisGroup\">\n                <ag-color-picker ref=\"axisColorInput\"></ag-color-picker>\n                <ag-slider ref=\"axisLineWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('axisGroup') private axisGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartController: ChartController;\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({ chartController, chartAxisMenuParamsFactory: chartAxisMenuUtils, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.chartController = chartController;\n        this.chartMenuUtils = chartAxisMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const axisGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate('polarAxis'),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true\n        };\n        const axisColorInputParams = this.chartMenuUtils.getDefaultColorPickerParams('line.color');\n        const axisLineWidthSliderParams = this.chartMenuUtils.getDefaultSliderParams('line.width', 'thickness', 10);\n        this.setTemplate(PolarAxisPanel.TEMPLATE, {\n            axisGroup: axisGroupParams,\n            axisColorInput: axisColorInputParams,\n            axisLineWidthSlider: axisLineWidthSliderParams\n        });\n\n        this.initAxis();\n        this.initAxisLabels();\n        this.initRadiusAxis();\n    }\n\n    private initAxis() {\n        const chartType = this.chartController.getChartType();\n        const hasConfigurableAxisShape = ['radarLine', 'radarArea'].includes(chartType);\n        if (hasConfigurableAxisShape) {\n            const options: Array<ListOption> = [\n                { value: 'circle', text: this.translate('circle') },\n                { value: 'polygon', text: this.translate('polygon') },\n            ];\n\n            this.axisGroup.addItem(this.createSelect({\n                labelKey: 'shape',\n                options: options,\n                property: 'shape'\n            }));\n        }\n\n        if (chartType !== 'pie') {\n            this.axisGroup.addItem(this.createSlider({\n                labelKey: 'innerRadius',\n                defaultMaxValue: 1,\n                property: 'innerRadiusRatio'\n            }));\n        }\n    }\n\n    private initAxisLabels() {\n        const params: FontPanelParams = {\n            name: this.translate('labels'),\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `label.${key}`\n        };\n\n        const labelPanelComp = this.createManagedBean(new FontPanel(params));\n        const labelOrientationComp = this.createOrientationWidget();\n        labelPanelComp.addItemToPanel(labelOrientationComp);\n\n        this.axisGroup.addItem(labelPanelComp);\n    }\n\n    private createOrientationWidget(): AgSelect {\n        const options: Array<ListOption> = [\n            { value: 'fixed', text: this.translate('fixed') },\n            { value: 'parallel', text: this.translate('parallel') },\n            { value: 'perpendicular', text: this.translate('perpendicular') },\n        ];\n\n        return this.createSelect({\n            labelKey: 'orientation',\n            options,\n            property: 'label.orientation'\n        });\n    }\n\n    private initRadiusAxis() {\n        const chartType = this.chartController.getChartType();\n        if (!isRadial(chartType)) return;\n\n        const items = [\n            this.createSlider({\n                labelKey: 'groupPadding',\n                defaultMaxValue: 1,\n                property: 'paddingInner'\n            }),\n            this.createSlider({\n                labelKey: 'seriesPadding',\n                defaultMaxValue: 1,\n                property: 'groupPaddingInner'\n            })\n        ];\n\n        const paddingPanelComp = this.createManagedBean(new AgGroupComponent({\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            title: this.translate('padding'),\n            items\n        })).hideEnabledCheckbox(true).hideOpenCloseIcons(true);\n\n        this.axisGroup.addItem(paddingPanelComp);\n    }\n\n    private createSlider(config: {\n        labelKey: ChartTranslationKey;\n        defaultMaxValue: number;\n        step?: number;\n        property: string;\n    }): AgSlider {\n        const { labelKey, defaultMaxValue, step = 0.05, property } = config;\n        const params = this.chartMenuUtils.getDefaultSliderParams(property, labelKey, defaultMaxValue);\n        params.step = step;\n        return this.createManagedBean(new AgSlider(params));\n    }\n\n    private createSelect(config: {\n        labelKey: ChartTranslationKey;\n        options: Array<ListOption>;\n        property: string\n    }): AgSelect {\n        const { labelKey: label, options, property } = config;\n        return this.createManagedBean(new AgSelect(this.chartMenuUtils.addValueParams<AgSelectParams>(\n            property,\n            {\n                label: this.chartTranslationService.translate(label),\n                labelAlignment: 'left',\n                labelWidth: 'flex',\n                inputWidth: 'flex',\n                options,\n            }\n        )));\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { PaddingPanel } from \"./paddingPanel\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { BackgroundPanel } from \"./backgroundPanel\";\nimport TitlePanel from \"./titlePanel\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { ChartController } from \"../../../chartController\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class ChartPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"chartGroup\"></ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly chartController: ChartController;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({\n        chartController,\n        chartMenuParamsFactory: chartMenuUtils,\n        isExpandedOnInit = false\n    }: FormatPanelOptions) {\n        super();\n\n        this.chartController = chartController;\n        this.chartMenuUtils = chartMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const chartGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('chart'),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true,\n            items: [\n                this.createManagedBean(new TitlePanel(this.chartMenuUtils, this.chartController)),\n                this.createManagedBean(new PaddingPanel(this.chartMenuUtils, this.chartController)),\n                this.createManagedBean(new BackgroundPanel(this.chartMenuUtils))\n            ]\n        };\n        this.setTemplate(ChartPanel.TEMPLATE, { chartGroup: chartGroupParams });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSlider,\n    Autowired,\n    Component,\n    Events,\n    PostConstruct,\n    RefSelector,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { AgChartPaddingOptions } from \"ag-charts-community\";\nimport { ChartController } from \"../../../chartController\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class PaddingPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"chartPaddingGroup\">\n                <ag-slider ref=\"paddingTopSlider\"></ag-slider>\n                <ag-slider ref=\"paddingRightSlider\"></ag-slider>\n                <ag-slider ref=\"paddingBottomSlider\"></ag-slider>\n                <ag-slider ref=\"paddingLeftSlider\"></ag-slider>\n            </ag-group-component>\n        <div>`;\n\n    @RefSelector('paddingTopSlider') private paddingTopSlider: AgSlider;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory, private readonly chartController: ChartController) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const chartPaddingGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate(\"padding\"),\n            suppressEnabledCheckbox: true\n        };\n        const getSliderParams = (property: keyof AgChartPaddingOptions) => \n            this.chartMenuUtils.getDefaultSliderParams('padding.' + property, property, 200);\n\n        this.setTemplate(PaddingPanel.TEMPLATE, {\n            chartPaddingGroup: chartPaddingGroupParams,\n            paddingTopSlider: getSliderParams('top'),\n            paddingRightSlider: getSliderParams('right'),\n            paddingBottomSlider: getSliderParams('bottom'),\n            paddingLeftSlider: getSliderParams('left')\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHART_OPTIONS_CHANGED, (e) => {\n            this.updateTopPadding(e.chartOptions);\n        });\n    }\n\n    private updateTopPadding(chartOptions: any) {\n        // keep 'top' padding in sync with chart as toggling chart title on / off change the 'top' padding\n        const topPadding = [...this.chartController.getChartSeriesTypes(), 'common']\n            .map((seriesType) => chartOptions[seriesType]?.padding?.top)\n            .find((value) => value != null);\n        if (topPadding != null) {\n            this.paddingTopSlider.setValue(topPadding);\n        }\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class BackgroundPanel extends Component {\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"chartBackgroundGroup\">\n                <ag-color-picker ref=\"colorPicker\"></ag-color-picker>\n            </ag-group-component>\n        <div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const chartBackgroundGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'background.visible',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate('background'),\n                suppressEnabledCheckbox: false\n            }\n        );\n        const colorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams('background.fill');\n        this.setTemplate(BackgroundPanel.TEMPLATE, {\n            chartBackgroundGroup: chartBackgroundGroupParams,\n            colorPicker: colorPickerParams\n        });\n    }\n}\n", "import {\n    _,\n    AgSlider,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartOptionsProxy } from '../../../services/chartOptionsService';\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartMenuService } from \"../../../services/chartMenuService\";\nimport { ChartController } from \"../../../chartController\";\n\nexport default class TitlePanel extends Component {\n\n    public static TEMPLATE = /* html */ `<div></div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n\n    private readonly chartOptions: ChartOptionsProxy;\n\n    private activePanels: Component[] = [];\n    private titlePlaceholder: string;\n\n    constructor(\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n        private readonly chartController: ChartController\n    ) {\n        super(TitlePanel.TEMPLATE);\n        this.chartOptions = chartMenuUtils.getChartOptions();\n    }\n\n    @PostConstruct\n    private init() {\n        this.initFontPanel();\n        this.titlePlaceholder = this.chartTranslationService.translate('titlePlaceholder');\n    }\n\n    private hasTitle(): boolean {\n        const title: any = this.chartOptions.getValue('title');\n        return title && title.enabled && title.text && title.text.length > 0;\n    }\n\n    private initFontPanel(): void {\n        const hasTitle = this.hasTitle();\n\n        const fontPanelParams: FontPanelParams = {\n            name: this.chartTranslationService.translate('title'),\n            enabled: hasTitle,\n            suppressEnabledCheckbox: false,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `title.${key}`,\n            onEnableChange: (enabled) => {\n                if (this.chartMenuService.doesChartToolbarExist(this.chartController)) {\n                    // extra padding is only included when the toolbar is present\n                    const topPadding: number = this.chartOptions.getValue('padding.top');\n                    this.chartOptions.setValue('padding.top', enabled ? topPadding - 20 : topPadding + 20);\n                }\n\n                this.chartOptions.setValue('title.enabled', enabled);\n                const currentTitleText = this.chartOptions.getValue('title.text');\n                const replaceableTitleText = currentTitleText === 'Title' || currentTitleText?.trim().length === 0;\n                if (enabled && replaceableTitleText) {\n                    this.chartOptions.setValue('title.text', this.titlePlaceholder);\n                }\n            }\n        };\n\n        const fontPanelComp = this.createBean(new FontPanel(fontPanelParams));\n\n        // add the title spacing slider to font panel\n        fontPanelComp.addItemToPanel(this.createSpacingSlicer());\n\n        this.getGui().appendChild(fontPanelComp.getGui());\n        this.activePanels.push(fontPanelComp);\n\n        // edits to the title can disable it, so keep the checkbox in sync:\n        this.addManagedListener(this.eventService, 'chartTitleEdit', () => {\n            fontPanelComp.setEnabled(this.hasTitle());\n        });\n    }\n\n    private createSpacingSlicer() {\n        const params = this.chartMenuUtils.getDefaultSliderParams('title.spacing', 'spacing', 100);\n        // Default title spacing is 10, but this isn't reflected in the options - this should really be fixed there.\n        params.value = '10';\n        return this.createBean(new AgSlider(params));\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    AgGroupComponent,\n    AgGroupComponentParams,\n    AgSelect,\n    AgSlider,\n    AgToggleButton,\n    Autowired,\n    Component,\n    ListOption,\n    PostConstruct,\n    RefSelector,\n    AgSelectParams,\n    AgToggleButtonParams\n} from \"@ag-grid-community/core\";\nimport type { AgRangeBarSeriesLabelPlacement } from 'ag-charts-community';\nimport { ShadowPanel } from \"./shadowPanel\";\nimport { FontPanel } from \"../fontPanel\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { MarkersPanel } from \"./markersPanel\";\nimport { ChartController } from \"../../../chartController\";\nimport { ChartSeriesType, getSeriesType, isPieChartSeries } from \"../../../utils/seriesTypeMapper\";\nimport { AgColorPicker } from '../../../../../widgets/agColorPicker';\nimport { CalloutPanel } from \"./calloutPanel\";\nimport { CapsPanel } from \"./capsPanel\";\nimport { ConnectorLinePanel } from \"./connectorLinePanel\";\nimport { WhiskersPanel } from \"./whiskersPanel\";\nimport { SeriesItemsPanel } from \"./seriesItemsPanel\";\nimport { TileSpacingPanel } from \"./tileSpacingPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartOptionsProxy, ChartOptionsService } from '../../../services/chartOptionsService';\n\nexport class SeriesPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"seriesGroup\">\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('seriesGroup') private seriesGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartController: ChartController;\n    private readonly chartOptionsService: ChartOptionsService;\n    private readonly isExpandedOnInit: boolean;\n    \n    private chartMenuUtils: ChartMenuParamsFactory;\n    private chartOptions: ChartOptionsProxy;\n    private seriesSelectOptions: Map<ChartSeriesType, ListOption>;\n\n    private activePanels: Component[] = [];\n    private seriesType: ChartSeriesType;\n\n    private widgetFuncs: {[name: string]: () => void}= {\n        'lineWidth': () => this.initStrokeWidth('lineWidth'),\n        'strokeWidth': () => this.initStrokeWidth('strokeWidth'),\n        'lineColor': () => this.initLineColor(),\n        'lineDash': () => this.initLineDash(),\n        'lineOpacity': () => this.initLineOpacity(),\n        'fillOpacity': () => this.initFillOpacity(),\n        'markers': () => this.initMarkers(),\n        'labels': () => this.initLabels(),\n        'shadow': () => this.initShadow(),\n        'tooltips': () => this.initTooltips(),\n        'bins': () => this.initBins(),\n        'whiskers': () => this.initWhiskers(),\n        'caps': () => this.initCaps(),\n        'connectorLine': () => this.initConnectorLine(),\n        'seriesItems': () => this.initSeriesItemsPanel(),\n        'tileSpacing': () => this.initTileSpacingPanel(),\n    };\n\n    private seriesWidgetMappings: { [K in ChartSeriesType]?: string[] } = {\n        'column': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'pie': ['tooltips', 'strokeWidth', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'donut': ['tooltips', 'strokeWidth', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'line': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'markers', 'labels'],\n        'scatter': ['tooltips', 'markers', 'labels'],\n        'bubble': ['tooltips', 'markers', 'labels'],\n        'area': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels', 'shadow'],\n        'histogram': ['tooltips', 'bins', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels', 'shadow'],\n        'radial-column': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'radial-bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'radar-line': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'markers', 'labels'],\n        'radar-area': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels'],\n        'nightingale': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'box-plot': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'whiskers', 'caps'],\n        'range-bar': ['tooltips', 'strokeWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'labels'],\n        'range-area': ['tooltips', 'lineWidth', 'lineDash', 'lineOpacity', 'fillOpacity', 'markers', 'labels', 'shadow'],\n        'treemap': ['tooltips', 'tileSpacing'],\n        'sunburst': ['tooltips'],\n        'heatmap': ['tooltips', 'labels', 'lineColor', 'lineWidth', 'lineOpacity'],\n        'waterfall': ['tooltips', 'connectorLine', 'seriesItems'],\n    }\n\n    constructor({\n        chartController,\n        chartOptionsService,\n        seriesType,\n        isExpandedOnInit = false\n    }: FormatPanelOptions) {\n\n        super();\n\n        this.chartController = chartController;\n        this.chartOptionsService = chartOptionsService;\n        this.seriesType = seriesType || this.getChartSeriesType();\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const seriesGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-top-level',\n            direction: 'vertical',\n            title: this.translate(\"series\"),\n            expanded: this.isExpandedOnInit,\n            suppressEnabledCheckbox: true\n        };\n        this.setTemplate(SeriesPanel.TEMPLATE, {seriesGroup: seriesGroupParams});\n\n        this.chartMenuUtils = this.createManagedBean(new ChartMenuParamsFactory(\n            this.chartOptionsService.getSeriesOptionsProxy(() => this.seriesType)\n        ));\n        this.chartOptions = this.chartMenuUtils.getChartOptions();\n        \n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_SERIES_CHART_TYPE_CHANGED, this.refreshWidgets.bind(this));\n\n        this.refreshWidgets();\n    }\n\n    private refreshWidgets(): void {\n        this.destroyActivePanels();\n\n        const chart = this.chartController.getChartProxy().getChart();\n        chart.waitForUpdate().then(() => {\n            const componentWasRemoved = !this.isAlive();\n            if (componentWasRemoved) {\n                // It's possible that the component was unmounted during the async delay in updating the chart.\n                // If this is the case we want to bail out to avoid operating on stale UI components.\n                return;\n            }\n            if (this.chartController.isComboChart()) {\n                this.updateSeriesType();\n                this.initSeriesSelect();\n            }\n\n            (this.seriesWidgetMappings[this.seriesType] ?? []).forEach((w) => this.widgetFuncs[w]());\n        })\n        .catch(e => console.error(`AG Grid - chart rendering failed`, e));\n\n    }\n\n    private initSeriesSelect() {\n        const seriesSelect = this.seriesGroup.createManagedBean(new AgSelect({\n            label: this.translate('seriesType'),\n            labelAlignment: \"left\",\n            labelWidth: 'flex',\n            inputWidth: 'flex',\n            options: this.getSeriesSelectOptions(),\n            value: `${this.seriesType}`,\n            onValueChange: (newValue: ChartSeriesType) => {\n                this.seriesType = newValue;\n                this.refreshWidgets();\n            }\n        }));\n\n        this.seriesGroup.addItem(seriesSelect);\n\n        this.activePanels.push(seriesSelect);\n    }\n\n    private initTooltips(): void {\n        const seriesTooltipsToggle = this.createBean(new AgToggleButton(this.chartMenuUtils.addValueParams<AgToggleButtonParams>(\n            'tooltip.enabled',\n            {\n                label: this.translate(\"tooltips\"),\n                labelAlignment: \"left\",\n                labelWidth: \"flex\",\n                inputWidth: 'flex',\n            }\n        )));\n\n        this.addWidget(seriesTooltipsToggle);\n    }\n\n    private initLineColor(): void {\n        const seriesLineColorPicker = this.createBean(new AgColorPicker(this.chartMenuUtils.getDefaultColorPickerParams(\n            'stroke',\n            'strokeColor',\n        )));\n\n        this.addWidget(seriesLineColorPicker);\n    }\n\n    private initStrokeWidth(labelKey: 'strokeWidth' | 'lineWidth'): void {\n        const seriesStrokeWidthSlider = this.createBean(new AgSlider(this.chartMenuUtils.getDefaultSliderParams(\n            'strokeWidth',\n            labelKey,\n            10\n        )));\n\n        this.addWidget(seriesStrokeWidthSlider);\n    }\n\n    private initLineDash(): void {\n        const seriesLineDashSlider = this.createBean(new AgSlider(this.chartMenuUtils.getDefaultSliderParams(\n            'lineDash',\n            'lineDash',\n            30,\n            true\n        )));\n\n        this.addWidget(seriesLineDashSlider);\n    }\n\n    private initLineOpacity(): void {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            'strokeOpacity',\n            \"strokeOpacity\",\n            1\n        );\n        params.step = 0.05;\n        const seriesLineOpacitySlider = this.createBean(new AgSlider(params));\n\n        this.addWidget(seriesLineOpacitySlider);\n    }\n\n    private initFillOpacity(): void {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            'fillOpacity',\n            \"fillOpacity\",\n            1\n        );\n        params.step = 0.05;\n        const seriesFillOpacitySlider = this.createBean(new AgSlider(params));\n\n        this.addWidget(seriesFillOpacitySlider);\n    }\n\n    private initLabels() {\n        const isPieChart = isPieChartSeries(this.seriesType);\n        const seriesOptionLabelProperty = isPieChart ? 'calloutLabel' : 'label';\n        const labelKey = isPieChart ? 'calloutLabels' : 'labels';\n        const labelParams = this.chartMenuUtils.getDefaultFontPanelParams(seriesOptionLabelProperty, labelKey);\n        const labelPanelComp = this.createBean(new FontPanel(labelParams));\n\n        if (isPieChart) {\n            const calloutPanelComp = this.createBean(new CalloutPanel(this.chartMenuUtils));\n            labelPanelComp.addCompToPanel(calloutPanelComp);\n            this.activePanels.push(calloutPanelComp);\n        }\n\n        this.addWidget(labelPanelComp);\n\n        if (isPieChart) {\n            const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams('sectorLabel', 'sectorLabels');\n            const sectorPanelComp = this.createBean(new FontPanel(sectorParams));\n            const positionRatioComp = this.getSectorLabelPositionRatio();\n            sectorPanelComp.addCompToPanel(positionRatioComp);\n\n            this.addWidget(sectorPanelComp);\n        }\n\n        if (this.seriesType === 'range-bar') {\n            // Add label placement dropdown\n            const options: Array<ListOption<AgRangeBarSeriesLabelPlacement>> = [\n                { value: 'inside', text: this.translate('inside') },\n                { value: 'outside', text: this.translate('outside') },\n            ];\n            const placementSelect = labelPanelComp.createManagedBean(new AgSelect(this.chartMenuUtils.addValueParams<AgSelectParams>(\n                'label.placement',\n                {\n                    label: this.translate('labelPlacement'),\n                    labelAlignment: 'left',\n                    labelWidth: 'flex',\n                    inputWidth: 'flex',\n                    options,\n                }\n            )));\n\n            labelPanelComp.addCompToPanel(placementSelect);\n            this.activePanels.push(placementSelect);\n\n            // Add padding slider\n            const paddingSlider = labelPanelComp.createManagedBean(new AgSlider(this.chartMenuUtils.getDefaultSliderParams(\n                'label.padding',\n                'padding',\n                200\n            )));\n\n            labelPanelComp.addCompToPanel(paddingSlider);\n            this.activePanels.push(paddingSlider);\n        }\n    }\n\n    private getSectorLabelPositionRatio(): AgSlider {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            'sectorLabel.positionRatio',\n            \"positionRatio\",\n            1\n        );\n        params.step = 0.05;\n        return this.createBean(new AgSlider(params));\n    }\n\n    private initShadow() {\n        const shadowPanelComp = this.createBean(new ShadowPanel(this.chartMenuUtils));\n        this.addWidget(shadowPanelComp);\n    }\n\n    private initMarkers() {\n        const markersPanelComp = this.createBean(new MarkersPanel(this.chartOptionsService, this.chartMenuUtils));\n        this.addWidget(markersPanelComp);\n    }\n\n    private initBins() {\n        const params = this.chartMenuUtils.getDefaultSliderParams('binCount', 'histogramBinCount', 20);\n        // this needs fixing\n        const value = (this.chartOptions.getValue<any>(\"bins\") ?? this.chartOptions.getValue<any>(\"calculatedBins\", true)).length;\n        params.value = `${value}`;\n        params.maxValue = Math.max(value, 20);\n        const seriesBinCountSlider = this.createBean(new AgSlider(params));\n\n        this.addWidget(seriesBinCountSlider);\n    }\n\n    private initWhiskers() {\n        const whiskersPanelComp = this.createBean(new WhiskersPanel(this.chartMenuUtils));\n        this.addWidget(whiskersPanelComp);\n    }\n\n    private initCaps() {\n        const capsPanelComp = this.createBean(new CapsPanel(this.chartMenuUtils));\n        this.addWidget(capsPanelComp);\n    }\n\n    private initConnectorLine() {\n        const connectorLinePanelComp = this.createBean(new ConnectorLinePanel(this.chartMenuUtils));\n        this.addWidget(connectorLinePanelComp);\n    }\n\n    private initSeriesItemsPanel() {\n        const seriesItemsPanelComp = this.createBean(new SeriesItemsPanel(this.chartMenuUtils));\n        this.addWidget(seriesItemsPanelComp);\n    }\n\n    private initTileSpacingPanel() {\n        const tileSpacingPanelComp = this.createBean(new TileSpacingPanel(this.chartMenuUtils));\n        this.addWidget(tileSpacingPanelComp);\n    }\n\n    private addWidget(widget: Component): void {\n        this.seriesGroup.addItem(widget);\n        this.activePanels.push(widget);\n    }\n\n    private getChartSeriesType(): ChartSeriesType {\n        if (this.chartController.getSeriesChartTypes().length === 0) {\n            return 'column';\n        }\n        const ct = this.chartController.getSeriesChartTypes()[0].chartType;\n\n        if (ct === 'columnLineCombo') {\n            return 'column';\n        }\n\n        if (ct === 'areaColumnCombo') {\n            return 'area';\n        }\n        return getSeriesType(ct);\n    }\n\n    private getSeriesSelectOptions(): ListOption[] {\n        if (!this.seriesSelectOptions) {\n            // lazy init options as they are only required for combo charts\n            this.seriesSelectOptions = new Map<ChartSeriesType, ListOption>([\n                ['area', {value: 'area', text: this.translate('area')}],\n                ['bar', {value: 'bar', text: this.translate('bar')}],\n                ['column', {value: 'column', text: this.translate('column')}],\n                ['line', {value: 'line', text: this.translate('line')}],\n                ['scatter', {value: 'scatter', text: this.translate('scatter')}],\n                ['histogram', {value: 'histogram', text: this.translate('histogram')}],\n                ['radial-column', {value: 'radial-column', text: this.translate('radialColumn')}],\n                ['radial-bar', {value: 'radial-bar', text: this.translate('radialBar')}],\n                ['radar-line', {value: 'radar-line', text: this.translate('radarLine')}],\n                ['radar-area', {value: 'radar-area', text: this.translate('radarArea')}],\n                ['nightingale', {value: 'nightingale', text: this.translate('nightingale')}],\n                ['range-bar', {value: 'range-bar', text: this.translate('rangeBar')}],\n                ['range-area', {value: 'range-area', text: this.translate('rangeArea')}],\n                ['treemap', {value: 'treemap', text: this.translate('treemap')}],\n                ['sunburst', {value: 'sunburst', text: this.translate('sunburst')}],\n                ['waterfall', {value: 'waterfall', text: this.translate('waterfall')}],\n                ['box-plot', {value: 'box-plot', text: this.translate('boxPlot')}],\n                ['pie', {value: 'pie', text: this.translate('pie')}],\n                ['donut', {value: 'donut', text: this.translate('donut')}],\n            ]);\n        }\n\n        const seriesSelectOptions = new Set<ListOption>();\n        this.chartController.getActiveSeriesChartTypes().forEach(s => {\n            const chartType = getSeriesType(s.chartType);\n            seriesSelectOptions.add(this.seriesSelectOptions.get(chartType) as ListOption);\n        });\n        return Array.from(seriesSelectOptions);\n    }\n\n    private updateSeriesType() {\n        const activeChartTypes = this.chartController.getActiveSeriesChartTypes().map(s => getSeriesType(s.chartType));\n        const invalidSeriesType = !activeChartTypes.includes(this.seriesType);\n        if (invalidSeriesType && activeChartTypes.length > 0) {\n            this.seriesType = activeChartTypes[0]; // default to first active series type\n        }\n    }\n\n    private translate(key: ChartTranslationKey) {\n        return this.chartTranslationService.translate(key);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class ShadowPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"shadowGroup\">\n                <ag-color-picker ref=\"shadowColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"shadowBlurSlider\"></ag-slider>\n                <ag-slider ref=\"shadowXOffsetSlider\"></ag-slider>\n                <ag-slider ref=\"shadowYOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory,\n                private propertyKey: string = \"shadow\") {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        // Determine the path within the series options object to get/set the individual shadow options\n        const propertyNamespace = this.propertyKey;\n        const shadowGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            `${propertyNamespace}.enabled`,\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"shadow\"),\n                suppressEnabledCheckbox: false,\n            }\n        );\n        const shadowColorPickerParams = this.chartMenuUtils.getDefaultColorPickerParams(`${propertyNamespace}.color`);\n        this.setTemplate(ShadowPanel.TEMPLATE, {\n            shadowGroup: shadowGroupParams,\n            shadowColorPicker: shadowColorPickerParams,\n            shadowBlurSlider: this.getSliderParams(\"blur\", 0, 20),\n            shadowXOffsetSlider: this.getSliderParams(\"xOffset\", -10, 10),\n            shadowYOffsetSlider: this.getSliderParams(\"yOffset\", -10, 10)\n        });\n    }\n\n    private getSliderParams(property: ChartTranslationKey, minValue: number, defaultMaxValue: number): AgSliderParams {\n        const expression = `${this.propertyKey}.${property}`\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            expression,\n            property,\n            defaultMaxValue\n        );\n        params.minValue = minValue;\n        return params;\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    AgSlider,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    RefSelector,\n    AgSelectParams\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\nimport { ChartOptionsService } from '../../../services/chartOptionsService';\n\nexport class MarkersPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"seriesMarkersGroup\">\n                <ag-select ref=\"seriesMarkerShapeSelect\"></ag-select>\n                <ag-slider ref=\"seriesMarkerMinSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerSizeSlider\"></ag-slider>\n                <ag-slider ref=\"seriesMarkerStrokeWidthSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('seriesMarkerMinSizeSlider') private seriesMarkerMinSizeSlider: AgSlider;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(\n        private readonly chartOptionsService: ChartOptionsService,\n        private readonly chartMenuUtils: ChartMenuParamsFactory,\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        // scatter charts should always show markers\n        const chartType = this.chartOptionsService.getChartType();\n        const shouldHideEnabledCheckbox = _.includes(['scatter', 'bubble'], chartType);\n        const seriesMarkersGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'marker.enabled',\n            {\n                cssIdentifier: 'charts-format-sub-level',\n                direction: 'vertical',\n                title: this.chartTranslationService.translate(\"markers\"),\n                suppressEnabledCheckbox: shouldHideEnabledCheckbox,\n                suppressOpenCloseIcons: true\n            }\n        );\n\n        const isBubble = chartType === 'bubble';\n        let seriesMarkerMinSizeSliderParams: AgSliderParams;\n        let seriesMarkerSizeSliderParams: AgSliderParams;\n        if (isBubble) {\n            seriesMarkerMinSizeSliderParams = this.getSliderParams(\"marker.maxSize\", \"maxSize\", 60);\n            seriesMarkerSizeSliderParams = this.getSliderParams(\"marker.size\", \"minSize\", 60);\n        } else {\n            seriesMarkerMinSizeSliderParams = {};\n            seriesMarkerSizeSliderParams = this.getSliderParams(\"marker.size\", \"size\", 60);\n        }\n        \n        this.setTemplate(MarkersPanel.TEMPLATE, {\n            seriesMarkersGroup: seriesMarkersGroupParams,\n            seriesMarkerShapeSelect: this.getMarkerShapeSelectParams(),\n            seriesMarkerMinSizeSlider: seriesMarkerMinSizeSliderParams,\n            seriesMarkerSizeSlider: seriesMarkerSizeSliderParams,\n            seriesMarkerStrokeWidthSlider: this.getSliderParams(\"marker.strokeWidth\", \"strokeWidth\", 10)\n        });\n        if (!isBubble) {\n            this.seriesMarkerMinSizeSlider.setDisplayed(false);\n        }\n    }\n\n    private getMarkerShapeSelectParams(): AgSelectParams {\n        const options = [\n            {\n                value: 'square',\n                text: 'Square'\n            },\n            {\n                value: 'circle',\n                text: 'Circle'\n            },\n            {\n                value: 'cross',\n                text: 'Cross'\n            },\n            {\n                value: 'diamond',\n                text: 'Diamond'\n            },\n            {\n                value: 'plus',\n                text: 'Plus'\n            },\n            {\n                value: 'triangle',\n                text: 'Triangle'\n            },\n            {\n                value: 'heart',\n                text: 'Heart'\n            }\n        ];\n        return this.chartMenuUtils.addValueParams(\n            'marker.shape',\n            {\n                options,\n                label: this.chartTranslationService.translate('shape')\n            }\n        );\n    }\n\n    private getSliderParams(expression: string, labelKey: ChartTranslationKey, defaultMaxValue: number): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(\n            expression,\n            labelKey,\n            defaultMaxValue\n        );\n    }\n}\n", "import { Component, PostConstruct, RefSelector, ManagedFocusFeature, _ } from \"@ag-grid-community/core\";\nimport { AgColorPicker } from \"./agColorPicker\";\nimport { _Util } from 'ag-charts-community';\nimport { KeyCode } from \"@ag-grid-community/core\";\n\nexport class AgColorPanel extends Component {\n    private H = 1; // in the [0, 1] range\n    private S = 1; // in the [0, 1] range\n    private B = 1; // in the [0, 1] range\n    private A = 1; // in the [0, 1] range\n\n    private spectrumValRect?: ClientRect | DOMRect;\n    private isSpectrumDragging = false;\n\n    private spectrumHueRect?: ClientRect | DOMRect;\n    private isSpectrumHueDragging = false;\n\n    private spectrumAlphaRect?: ClientRect | DOMRect;\n    private isSpectrumAlphaDragging = false;\n\n    private picker: Component;\n\n    private colorChanged = false;\n    private static maxRecentColors = 8;\n    private static recentColors: string[] = [];\n    private tabIndex: string;\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-color-panel\" tabindex=\"-1\">\n            <div ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>`;\n\n    @RefSelector('spectrumColor') private readonly spectrumColor: HTMLElement;\n    @RefSelector('spectrumVal') private readonly spectrumVal: HTMLElement;\n    @RefSelector('spectrumDragger') private readonly spectrumDragger: HTMLElement;\n    @RefSelector('spectrumHue') private readonly spectrumHue: HTMLElement;\n    @RefSelector('spectrumHueSlider') private readonly spectrumHueSlider: HTMLElement;\n    @RefSelector('spectrumAlpha') private readonly spectrumAlpha: HTMLElement;\n    @RefSelector('spectrumAlphaSlider') private readonly spectrumAlphaSlider: HTMLElement;\n    @RefSelector('recentColors') private readonly recentColors: HTMLElement;\n\n    constructor(config: { picker: Component }) {\n        super(AgColorPanel.TEMPLATE);\n        this.picker = config.picker;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initTabIndex();\n        this.initRecentColors();\n\n        this.addGuiEventListener('focus', () => this.spectrumColor.focus());\n        this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER && !e.defaultPrevented) {\n                this.destroy();\n            }\n        });\n\n        this.addManagedListener(this.spectrumColor, 'keydown', e => this.moveDragger(e));\n        this.addManagedListener(this.spectrumAlphaSlider, 'keydown', e => this.moveAlphaSlider(e));\n        this.addManagedListener(this.spectrumHueSlider, 'keydown', e => this.moveHueSlider(e));\n\n        this.addManagedListener(this.spectrumVal, 'mousedown', this.onSpectrumDraggerDown.bind(this));\n        this.addManagedListener(this.spectrumHue, 'mousedown', this.onSpectrumHueDown.bind(this));\n        this.addManagedListener(this.spectrumAlpha, 'mousedown', this.onSpectrumAlphaDown.bind(this));\n\n        this.addGuiEventListener('mousemove', (e: MouseEvent) => {\n            this.onSpectrumDraggerMove(e);\n            this.onSpectrumHueMove(e);\n            this.onSpectrumAlphaMove(e);\n        });\n\n        // Listening to `mouseup` on the document on purpose. The user might release the mouse button\n        // outside the UI control. When the mouse returns back to the control's area, the dragging\n        // of the thumb is not expected and seen as a bug.\n        this.addManagedListener(document, 'mouseup', this.onMouseUp.bind(this));\n\n        this.addManagedListener(this.recentColors, 'click', this.onRecentColorClick.bind(this));\n        this.addManagedListener(this.recentColors, 'keydown', (e: KeyboardEvent) => {\n            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                e.preventDefault();\n                this.onRecentColorClick(e);\n            }\n        })\n    }\n\n    private initTabIndex(): void {\n        const tabIndex = this.tabIndex = (this.gridOptionsService.get('tabIndex')).toString();\n\n        this.spectrumColor.setAttribute('tabindex', tabIndex);\n        this.spectrumHueSlider.setAttribute('tabindex', tabIndex);\n        this.spectrumAlphaSlider.setAttribute('tabindex', tabIndex);\n    }\n\n    private refreshSpectrumRect() {\n        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();\n    }\n\n    private refreshHueRect() {\n        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();\n    }\n\n    private refreshAlphaRect() {\n        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();\n    }\n\n    private onSpectrumDraggerDown(e: MouseEvent) {\n        this.refreshSpectrumRect();\n        this.isSpectrumDragging = true;\n\n        this.moveDragger(e);\n    }\n\n    private onSpectrumDraggerMove(e: MouseEvent) {\n        if (this.isSpectrumDragging) {\n            this.moveDragger(e);\n        }\n    }\n\n    private onSpectrumHueDown(e: MouseEvent) {\n        this.refreshHueRect();\n        this.isSpectrumHueDragging = true;\n\n        this.moveHueSlider(e);\n    }\n\n    private onSpectrumHueMove(e: MouseEvent) {\n        if (this.isSpectrumHueDragging) {\n            this.moveHueSlider(e);\n        }\n    }\n\n    private onSpectrumAlphaDown(e: MouseEvent) {\n        this.refreshAlphaRect();\n        this.isSpectrumAlphaDragging = true;\n\n        this.moveAlphaSlider(e);\n    }\n\n    private onSpectrumAlphaMove(e: MouseEvent) {\n        if (this.isSpectrumAlphaDragging) {\n            this.moveAlphaSlider(e);\n        }\n    }\n\n    private onMouseUp() {\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n    }\n\n    private moveDragger(e: MouseEvent | KeyboardEvent) {\n        const valRect = this.spectrumValRect;\n        if (!valRect) { return; }\n\n        let x: number;\n        let y: number;\n\n        if (e instanceof MouseEvent) {\n            x = e.clientX - valRect.left;\n            y = e.clientY - valRect.top;\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            const isUp = e.key === KeyCode.UP;\n            const isDown = e.key === KeyCode.DOWN;\n            const isVertical = isUp || isDown;\n            const isHorizontal = isLeft || isRight;\n\n            if (!isVertical && !isHorizontal) { return; }\n            e.preventDefault();\n\n            const { x: currentX, y: currentY } = this.getSpectrumValue();\n            x = currentX + (isHorizontal ? (isLeft ? -5 : 5) : 0);\n            y = currentY + (isVertical ? (isUp ? -5 : 5) : 0);\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, valRect.width);\n        y = Math.max(y, 0);\n        y = Math.min(y, valRect.height);\n\n        this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);\n    }\n\n    private moveHueSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumHueRect;\n\n        if (!rect) { return; }\n\n        const x = this.moveSlider(this.spectrumHueSlider, e);\n\n        if (x == null) { return; }\n\n        this.H = 1 - x / rect.width;\n        this.update();\n    }\n\n    private moveAlphaSlider(e: MouseEvent | KeyboardEvent) {\n        const rect = this.spectrumAlphaRect;\n\n        if (!rect) { return; }\n\n        const x = this.moveSlider(this.spectrumAlphaSlider, e);\n\n        if (x == null) { return; }\n\n        this.A = x / rect.width;\n        this.update();\n    }\n\n    private moveSlider(slider: HTMLElement, e: MouseEvent | KeyboardEvent): number | null {\n        const sliderRect = slider.getBoundingClientRect();\n        const parentRect = slider.parentElement?.getBoundingClientRect();\n\n        if (!slider || !parentRect) { return null; }\n\n\n        let x: number;\n        if (e instanceof MouseEvent) {\n            x = e.clientX - parentRect.left;\n        } else {\n            const isLeft = e.key === KeyCode.LEFT;\n            const isRight = e.key === KeyCode.RIGHT;\n            if (!isLeft && !isRight) { return null; }\n            e.preventDefault();\n            const diff = isLeft ? -5 : 5;\n            x = (parseFloat(slider.style.left) - sliderRect.width / 2) + diff;\n        }\n\n        x = Math.max(x, 0);\n        x = Math.min(x, parentRect.width);\n\n        slider.style.left = (x + sliderRect.width / 2) + 'px';\n\n        return x;\n    }\n\n    private update() {\n        const color = _Util.Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const spectrumColor = _Util.Color.fromHSB(this.H * 360, 1, 1);\n        const rgbaColor = color.toRgbaString();\n\n        // the recent color list needs to know color has actually changed\n        const colorPicker = this.picker as AgColorPicker;\n\n        const existingColor = _Util.Color.fromString(colorPicker.getValue());\n        if (existingColor.toRgbaString() !== rgbaColor) {\n            this.colorChanged = true;\n        }\n\n        colorPicker.setValue(rgbaColor);\n\n        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();\n        this.spectrumDragger.style.backgroundColor = rgbaColor;\n    }\n\n    /**\n     * @param saturation In the [0, 1] interval.\n     * @param brightness In the [0, 1] interval.\n     */\n    public setSpectrumValue(saturation: number, brightness: number) {\n        const valRect = this.spectrumValRect || this.refreshSpectrumRect();\n\n        if (valRect == null) { return; }\n\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        saturation = Math.max(0, saturation);\n        saturation = Math.min(1, saturation);\n        brightness = Math.max(0, brightness);\n        brightness = Math.min(1, brightness);\n\n        this.S = saturation;\n        this.B = brightness;\n\n        dragger.style.left = (saturation * valRect.width - draggerRect.width / 2) + 'px';\n        dragger.style.top = ((1 - brightness) * valRect.height - draggerRect.height / 2) + 'px';\n\n        this.update();\n    }\n\n    private getSpectrumValue(): { x: number, y: number } {\n        const dragger = this.spectrumDragger;\n        const draggerRect = dragger.getBoundingClientRect();\n\n        const x = parseFloat(dragger.style.left) + draggerRect.width / 2;\n        const y = parseFloat(dragger.style.top) + draggerRect.height / 2; \n\n        return { x, y };\n    }\n\n    private initRecentColors() {\n        const recentColors = AgColorPanel.recentColors;\n        const innerHtml = recentColors.map((color: string, index: number) => {\n            return (/* html */`<div class=\"ag-recent-color\" id=${index} style=\"background-color: ${color}; width: 15px; height: 15px;\" recent-color=\"${color}\" tabIndex=\"${this.tabIndex}\"></div>`);\n        });\n\n        this.recentColors.innerHTML = innerHtml.join('');\n    }\n\n    public setValue(val: string) {\n        const color: _Util.Color = _Util.Color.fromString(val);\n        const [h, s, b] = color.toHSB();\n\n        this.H = (isNaN(h) ? 0 : h) / 360;\n        this.A = color.a;\n\n        const spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();\n        const spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();\n\n        this.spectrumHueSlider.style.left = `${((this.H - 1) * -spectrumHueRect.width)}px`;\n        this.spectrumAlphaSlider.style.left = `${(this.A * spectrumAlphaRect.width)}px`;\n\n        this.setSpectrumValue(s, b);\n    }\n\n    private onRecentColorClick(e: MouseEvent | KeyboardEvent) {\n        const target = e.target as HTMLElement;\n\n        if (!_.exists(target.id)) {\n            return;\n        }\n\n        const id = parseInt(target.id, 10);\n\n        this.setValue(AgColorPanel.recentColors[id]);\n        this.destroy();\n    }\n\n    private addRecentColor() {\n        const color = _Util.Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n\n        let recentColors = AgColorPanel.recentColors;\n\n        if (!this.colorChanged || recentColors[0] === rgbaColor) {\n            return;\n        }\n\n        // remove duplicate color\n        recentColors = recentColors.filter(currentColor => currentColor != rgbaColor);\n\n        // add color to head\n        recentColors = [rgbaColor].concat(recentColors);\n\n        // ensure we don't exceed max number of recent colors\n        if (recentColors.length > AgColorPanel.maxRecentColors) {\n            recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);\n        }\n\n        AgColorPanel.recentColors = recentColors;\n    }\n\n    protected destroy(): void {\n        this.addRecentColor();\n        super.destroy();\n    }\n}\n", "import { AgColorPanel } from \"./agColorPanel\";\nimport { _, AgPickerFieldParams, AgPickerField, AgDialog } from \"@ag-grid-community/core\";\n\nexport interface AgColorPickerParams extends Omit<AgPickerFieldParams, 'pickerType' | 'pickerAriaLabelKey' | 'pickerAriaLabelValue'> {\n    pickerType?: string;\n    pickerAriaLabelKey?: string;\n    pickerAriaLabelValue?: string;\n}\n\nexport class AgColorPicker extends AgPickerField<string, AgColorPickerParams & AgPickerFieldParams, AgDialog> {\n\n    private isDestroyingPicker: boolean;\n\n    constructor(config?: AgColorPickerParams) {\n        super({\n            pickerAriaLabelKey: 'ariaLabelColorPicker',\n            pickerAriaLabelValue: 'Color Picker',\n            pickerType: 'ag-list',\n            className: 'ag-color-picker',\n            pickerIcon: 'colorPicker',\n            ...config,\n        });\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        if (this.value) {\n            this.setValue(this.value);\n        }\n    }\n\n    protected createPickerComponent() {\n        const eGuiRect = this.getGui().getBoundingClientRect();\n\n        const colorDialog = this.createBean(new AgDialog({\n            closable: false,\n            modal: true,\n            hideTitleBar: true,\n            minWidth: 190,\n            width: 190,\n            height: 250,\n            x: eGuiRect.right - 190,\n            y: eGuiRect.top - 250\n        }));\n\n        return colorDialog;\n    }\n\n    protected renderAndPositionPicker(): (() => void) {\n        const pickerComponent = this.pickerComponent!;\n        const colorPanel = this.createBean(new AgColorPanel({ picker: this }));\n\n        pickerComponent.addCssClass('ag-color-dialog');\n\n        colorPanel.addDestroyFunc(() => {\n            if (pickerComponent.isAlive()) {\n                this.destroyBean(pickerComponent);\n            }\n        });\n\n        pickerComponent.setParentComponent(this);\n        pickerComponent.setBodyComponent(colorPanel);\n        colorPanel.setValue(this.getValue());\n        colorPanel.getGui().focus();\n\n        pickerComponent.addDestroyFunc(() => {\n            // here we check if the picker was already being\n            // destroyed to avoid a stack overflow\n            if (!this.isDestroyingPicker) {\n                this.beforeHidePicker();\n                this.isDestroyingPicker = true;\n\n                if (colorPanel.isAlive()) {\n                    this.destroyBean(colorPanel);\n                }\n\n                if (this.isAlive()) {\n                    this.getFocusableElement().focus();\n                }\n            } else {\n                this.isDestroyingPicker = false;\n            }\n        });\n\n        return () => this.pickerComponent?.close();\n    }\n\n    public setValue(color: string): this {\n        if (this.value === color) { return this; }\n\n        this.eDisplayField.style.backgroundColor = color;\n\n        return super.setValue(color);\n    }\n\n    public getValue(): string {\n        return this.value;\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class CalloutPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"calloutGroup\">\n                <ag-slider ref=\"calloutLengthSlider\"></ag-slider>\n                <ag-slider ref=\"calloutStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"labelOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const calloutGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"callout\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true\n        };\n        this.setTemplate(CalloutPanel.TEMPLATE, {\n            calloutGroup: calloutGroupParams,\n            calloutLengthSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLine.length', 'length', 40),\n            calloutStrokeWidthSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLine.strokeWidth', 'strokeWidth', 10),\n            labelOffsetSlider: this.chartMenuUtils.getDefaultSliderParams('calloutLabel.offset', 'offset', 30)\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class CapsPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"capsGroup\">\n                <ag-slider ref=\"capLengthRatioSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const capsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"cap\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        const capLengthRatioSliderParams = this.chartMenuUtils.getDefaultSliderParams(\"cap.lengthRatio\", \"capLengthRatio\", 1);\n        capLengthRatioSliderParams.step = 0.05;\n\n        this.setTemplate(CapsPanel.TEMPLATE, {\n            capsGroup: capsGroupParams,\n            capLengthRatioSlider: capLengthRatioSliderParams\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class ConnectorLinePanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"lineGroup\">\n                <ag-color-picker ref=\"lineColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"lineStrokeWidthSlider\"></ag-slider>\n                <ag-slider ref=\"lineOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"lineDashSlider\"></ag-slider>                \n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const lineGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"connectorLine\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(ConnectorLinePanel.TEMPLATE, {\n            lineGroup: lineGroupParams,\n            lineColorPicker: this.chartMenuUtils.getDefaultColorPickerParams(\"line.stroke\"),\n            lineStrokeWidthSlider: this.getSliderParams(\"strokeWidth\", 10, \"line.strokeWidth\"),\n            lineDashSlider: this.getSliderParams(\"lineDash\", 30, \"line.lineDash\", 1, true),\n            lineOpacitySlider: this.getSliderParams(\"strokeOpacity\", 1, \"line.strokeOpacity\", 0.05)\n        });\n    }\n\n    private getSliderParams(labelKey: ChartTranslationKey, maxValue: number, seriesOptionKey: string, step: number = 1, isArray: boolean = false): AgSliderParams {\n        const params = this.chartMenuUtils.getDefaultSliderParams(seriesOptionKey, labelKey, maxValue, isArray);\n        params.step = step;\n        return params;\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class WhiskersPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"whiskersGroup\">\n                <ag-color-picker ref=\"whiskerColorPicker\"></ag-color-picker>\n                <ag-slider ref=\"whiskerThicknessSlider\"></ag-slider>\n                <ag-slider ref=\"whiskerOpacitySlider\"></ag-slider>\n                <ag-slider ref=\"whiskerLineDashSlider\"></ag-slider>\n                <ag-slider ref=\"whiskerLineDashOffsetSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const whiskersGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate(\"whisker\"),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(WhiskersPanel.TEMPLATE, {\n            whiskersGroup: whiskersGroupParams,\n            whiskerColorPicker: this.chartMenuUtils.getDefaultColorPickerParams('whisker.stroke'),\n            whiskerThicknessSlider: this.chartMenuUtils.getDefaultSliderParams('whisker.strokeWidth', 'strokeWidth', 10),\n            whiskerOpacitySlider: this.chartMenuUtils.getDefaultSliderParams('whisker.strokeOpacity', 'strokeOpacity', 1),\n            whiskerLineDashSlider: this.chartMenuUtils.getDefaultSliderParams('whisker.lineDash', \"lineDash\", 30, true),\n            whiskerLineDashOffsetSlider: this.chartMenuUtils.getDefaultSliderParams('whisker.lineDashOffset', 'lineDashOffset', 30)\n        });\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    AgSlider,\n    AgGroupComponent,\n    Autowired,\n    Component,\n    ListOption,\n    PostConstruct,\n    RefSelector,\n    AgSelectParams\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FontPanel } from \"../fontPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\ntype SeriesItemType = 'positive' | 'negative';\n\nexport class SeriesItemsPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"seriesItemsGroup\">\n                <ag-select ref=\"seriesItemSelect\"></ag-select>\n            </ag-group-component>\n        </div>`;\n\n    @RefSelector('seriesItemsGroup') private seriesItemsGroup: AgGroupComponent;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private activePanels: Component[] = [];\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const seriesItemsGroupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            title: this.chartTranslationService.translate('seriesItems'),\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(SeriesItemsPanel.TEMPLATE, {\n            seriesItemsGroup: seriesItemsGroupParams,\n            seriesItemSelect: this.getSeriesItemsParams()\n        });\n\n        this.initSeriesControls();\n    }\n\n    private getSeriesItemsParams(): AgSelectParams {\n        const options: ListOption<SeriesItemType>[] = [\n            {value: 'positive', text: this.chartTranslationService.translate('seriesItemPositive')},\n            {value: 'negative', text: this.chartTranslationService.translate('seriesItemNegative')},\n        ];\n\n        const seriesItemChangedCallback = (newValue: SeriesItemType) => {\n            this.destroyActivePanels();\n            this.initSeriesControls(newValue as SeriesItemType);\n        }\n\n        return {\n            label: this.chartTranslationService.translate('seriesItemType'),\n            labelAlignment: \"left\",\n            labelWidth: 'flex',\n            inputWidth: 'flex',\n            options,\n            value: 'positive',\n            onValueChange: seriesItemChangedCallback\n        };\n    }\n\n    private initSeriesControls(itemType: SeriesItemType = 'positive') {\n        this.initSlider(\"strokeWidth\", 10, `item.${itemType}.strokeWidth`);\n        this.initSlider(\"lineDash\", 30, `item.${itemType}.lineDash`, 1, true);\n        this.initSlider(\"strokeOpacity\", 1, `item.${itemType}.strokeOpacity`, 0.05, false);\n        this.initSlider(\"fillOpacity\", 1, `item.${itemType}.fillOpacity`, 0.05, false);\n        this.initItemLabels(itemType);\n    }\n\n    private initSlider(labelKey: ChartTranslationKey, maxValue: number, seriesOptionKey: string, step: number = 1, isArray: boolean = false) {\n        const params = this.chartMenuUtils.getDefaultSliderParams(\n            seriesOptionKey,\n            labelKey,\n            maxValue,\n            isArray\n        );\n        params.step = step;\n\n        const itemSlider = this.seriesItemsGroup.createManagedBean(new AgSlider(params));\n\n        this.seriesItemsGroup.addItem(itemSlider);\n        this.activePanels.push(itemSlider);\n    }\n\n    private initItemLabels(itemType: \"positive\" | \"negative\") {\n        const sectorParams = this.chartMenuUtils.getDefaultFontPanelParams(`item.${itemType}.label`, 'seriesItemLabels');\n\n        const labelPanelComp = this.createBean(new FontPanel(sectorParams));\n        this.seriesItemsGroup.addItem(labelPanelComp);\n        this.activePanels.push(labelPanelComp);\n    }\n\n    private destroyActivePanels(): void {\n        this.activePanels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n    }\n\n    protected destroy(): void {\n        this.destroyActivePanels();\n        super.destroy();\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSliderParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class TileSpacingPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"groupSpacing\">\n                <ag-slider ref=\"groupPaddingSlider\"></ag-slider>\n                <ag-slider ref=\"groupSpacingSlider\"></ag-slider>\n            </ag-group-component>\n            <ag-group-component ref=\"tileSpacing\">\n                <ag-slider ref=\"tilePaddingSlider\"></ag-slider>\n                <ag-slider ref=\"tileSpacingSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuUtils: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const groupParams: AgGroupComponentParams = {\n            cssIdentifier: 'charts-format-sub-level',\n            direction: 'vertical',\n            enabled: true,\n            suppressOpenCloseIcons: true,\n            suppressEnabledCheckbox: true,\n        };\n        this.setTemplate(TileSpacingPanel.TEMPLATE, {\n            groupSpacing: { ...groupParams, title: this.chartTranslationService.translate(\"group\") },\n            tileSpacing: { ...groupParams, title: this.chartTranslationService.translate(\"tile\") },\n            groupPaddingSlider: this.getSliderParams('padding', 'group.padding'),\n            groupSpacingSlider: this.getSliderParams('spacing', 'group.gap'),\n            tilePaddingSlider: this.getSliderParams('padding', 'tile.padding'),\n            tileSpacingSlider: this.getSliderParams('spacing', 'tile.gap')\n        });\n    }\n\n    private getSliderParams(labelKey: ChartTranslationKey, key: string): AgSliderParams {\n        return this.chartMenuUtils.getDefaultSliderParams(key, labelKey, 10);\n    }\n}\n", "import {\n    _,\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n    AgCheckboxParams\n} from \"@ag-grid-community/core\";\nimport { FontPanel, FontPanelParams } from \"../fontPanel\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { FormatPanelOptions } from \"../formatPanel\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class GradientLegendPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"legendGroup\">\n                <ag-select ref=\"legendPositionSelect\"></ag-select>\n                <ag-checkbox ref=\"gradientReverseCheckbox\"></ag-checkbox>\n                <ag-slider ref=\"gradientThicknessSlider\"></ag-slider>\n                <ag-slider ref=\"gradientPreferredLengthSlider\"></ag-slider>\n                <ag-slider ref=\"legendSpacingSlider\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private readonly chartMenuUtils: ChartMenuParamsFactory;\n    private readonly isExpandedOnInit: boolean;\n\n    constructor({ chartMenuParamsFactory: chartMenuUtils, isExpandedOnInit = false }: FormatPanelOptions) {\n        super();\n\n        this.chartMenuUtils = chartMenuUtils;\n        this.isExpandedOnInit = isExpandedOnInit;\n    }\n\n    @PostConstruct\n    private init() {\n        const legendGroupParams = this.chartMenuUtils.addEnableParams<AgGroupComponentParams>(\n            'gradientLegend.enabled',\n            {\n                cssIdentifier: 'charts-format-top-level',\n                direction: 'vertical',\n                title: this.chartTranslationService.translate(\"legend\"),\n                suppressEnabledCheckbox: false,\n                suppressToggleExpandOnEnableChange: true,\n                expanded: this.isExpandedOnInit,\n                items: [this.createLabelPanel()]\n            }\n        );\n        this.setTemplate(GradientLegendPanel.TEMPLATE, {\n            legendGroup: legendGroupParams,\n            legendPositionSelect: this.chartMenuUtils.getDefaultLegendParams(\"gradientLegend.position\"),\n            gradientReverseCheckbox: this.getGradientReverseCheckboxParams(),\n            gradientThicknessSlider: this.chartMenuUtils.getDefaultSliderParams(\"gradientLegend.gradient.thickness\", \"thickness\", 40),\n            gradientPreferredLengthSlider: this.chartMenuUtils.getDefaultSliderParams(\"gradientLegend.gradient.preferredLength\", \"preferredLength\", 300),\n            legendSpacingSlider: this.chartMenuUtils.getDefaultSliderParams(\"gradientLegend.spacing\", \"spacing\", 200)\n        });\n    }\n\n    private getGradientReverseCheckboxParams(): AgCheckboxParams {\n        return this.chartMenuUtils.addValueParams(\n            'gradientLegend.reverseOrder',\n            {\n                label: this.chartTranslationService.translate(\"reverseDirection\"),\n                labelWidth: \"flex\",\n            }\n        );\n    }\n\n    private createLabelPanel(): FontPanel {\n        const params: FontPanelParams = {\n            enabled: true,\n            suppressEnabledCheckbox: true,\n            chartMenuUtils: this.chartMenuUtils,\n            keyMapper: key => `gradientLegend.scale.label.${key}`\n        };\n\n        return this.createManagedBean(new FontPanel(params));\n    }\n}\n", "import {\n    BeanStub,\n    ChartType,\n    Component,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../chartController\";\nimport { ChartSeriesType, getSeriesType } from \"../utils/seriesTypeMapper\";\n\nexport class ChartPanelFeature extends BeanStub {\n    private chartType: ChartType;\n    private isGrouping: boolean;\n    private panels: Component[] = [];\n\n    constructor(\n        private readonly chartController: ChartController,\n        private readonly eGui: HTMLElement,\n        private readonly cssClass: string,\n        private readonly createPanels: (chartType: ChartType, seriesType: ChartSeriesType) => void\n    ) {\n        super();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_UPDATED, () => this.refreshPanels(true));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, () => this.refreshPanels(false));\n    }\n\n    public addComponent(component: Component): void {\n        this.createBean(component);\n        this.panels.push(component);\n        component.addCssClass(this.cssClass);\n        this.eGui.appendChild(component.getGui());\n    }\n\n    public refreshPanels(reuse?: boolean) {\n        const chartType = this.chartController.getChartType();\n        const isGrouping = this.chartController.isGrouping();\n        const seriesType = getSeriesType(chartType);\n\n        if (reuse && chartType === this.chartType && isGrouping === this.isGrouping) {\n            // existing panels can be re-used\n            return;\n        }\n\n        this.destroyPanels();\n\n        this.createPanels(chartType, seriesType);\n\n        this.chartType = chartType;\n        this.isGrouping = isGrouping;\n    }\n\n    private destroyPanels(): void {\n        this.panels.forEach(panel => {\n            _.removeFromParent(panel.getGui());\n            this.destroyBean(panel);\n        });\n        this.panels = [];\n    }\n\n    protected destroy(): void {\n        this.destroyPanels();\n        super.destroy();\n    }\n}", "import { _, Component, PostConstruct, RefSelector } from \"@ag-grid-community/core\";\nimport { MiniChartsContainer } from \"./miniChartsContainer\";\nimport { AgChartThemePalette } from \"ag-charts-community\";\nimport { ChartController } from \"../../chartController\";\nimport { isStockTheme } from \"../../chartProxies/chartTheme\";\n\ntype AnimationDirection = 'left' | 'right';\n\nexport class ChartSettingsPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div class=\"ag-chart-settings-wrapper\">\n            <div ref=\"eMiniChartsContainer\" class=\"ag-chart-settings-mini-charts-container ag-scrollable-container\"></div>\n            <div ref=\"eNavBar\" class=\"ag-chart-settings-nav-bar\">\n                <div ref=\"ePrevBtn\" class=\"ag-chart-settings-prev\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-prev-button\"></button>\n                </div>\n                <div ref=\"eCardSelector\" class=\"ag-chart-settings-card-selector\"></div>\n                <div ref=\"eNextBtn\" class=\"ag-chart-settings-next\">\n                    <button type=\"button\" class=\"ag-button ag-chart-settings-next-button\"></button>\n                </div>\n            </div>\n        </div>`;\n\n    @RefSelector('eMiniChartsContainer') private readonly eMiniChartsContainer: HTMLElement;\n    @RefSelector('eNavBar') private readonly eNavBar: HTMLElement;\n    @RefSelector('eCardSelector') private readonly eCardSelector: HTMLElement;\n    @RefSelector('ePrevBtn') private readonly ePrevBtn: HTMLElement;\n    @RefSelector('eNextBtn') private readonly eNextBtn: HTMLElement;\n\n    private miniChartsContainers: MiniChartsContainer[] = [];\n    private cardItems: HTMLElement[] = [];\n\n    private activePaletteIndex = 0;\n    private palettes: AgChartThemePalette[] = [];\n    private themes: string[] = [];\n\n    private isAnimating: boolean;\n\n    constructor(\n        private readonly chartController: ChartController,\n    ) {\n        super(ChartSettingsPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.resetPalettes();\n\n        this.ePrevBtn.insertAdjacentElement('afterbegin', _.createIconNoSpan('previous', this.gridOptionsService)!);\n        this.eNextBtn.insertAdjacentElement('afterbegin', _.createIconNoSpan('next', this.gridOptionsService)!);\n\n        this.addManagedListener(this.ePrevBtn, 'click', () => this.setActivePalette(this.getPrev(), 'left'));\n        this.addManagedListener(this.eNextBtn, 'click', () => this.setActivePalette(this.getNext(), 'right'));\n\n        // change the selected chart when a combo chart is modified via the data panel, i.e. the custom combo should be selected\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_TYPE_CHANGED, () => this.resetPalettes(true));\n        this.addManagedListener(this.chartController, ChartController.EVENT_CHART_API_UPDATE, () => this.resetPalettes(true));\n        this.scrollSelectedIntoView();\n    }\n\n    private scrollSelectedIntoView(): void {\n        // the panel is not immediately visible due to the slide animation, so we add a\n        // setTimeout to wait until the panel animation is over and is able to scroll\n        setTimeout(() => {\n            const isMiniChartsContainerVisible = (miniChartsContainers: MiniChartsContainer) => {\n                return !miniChartsContainers.getGui().classList.contains('ag-hidden');\n            }\n            const currentMiniChartContainer = this.miniChartsContainers.find(isMiniChartsContainerVisible);\n            const currentChart = currentMiniChartContainer!.getGui().querySelector('.ag-selected') as HTMLElement;\n\n            if (currentChart) {\n                const parent = currentChart.offsetParent as HTMLElement;\n                if (parent) {\n                    this.eMiniChartsContainer.scrollTo(0, parent.offsetTop);\n                }\n            }\n        }, 250);\n    }\n\n    private resetPalettes(forceReset?: boolean): void {\n        const palettes = this.chartController.getPalettes();\n        const themeTemplateParameters = this.chartController.getThemeTemplateParameters();\n        const chartGroups = this.gridOptionsService.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n\n        if ((_.shallowCompare(palettes, this.palettes) && !forceReset) || this.isAnimating) {\n            return;\n        }\n\n        this.palettes = palettes;\n        this.themes = this.chartController.getThemeNames();\n        this.activePaletteIndex = this.themes.findIndex(name => name === this.chartController.getChartThemeName());\n        this.cardItems = [];\n\n        _.clearElement(this.eCardSelector);\n\n        this.destroyMiniCharts();\n\n        const { themes } = this;\n\n        this.palettes.forEach((palette, index) => {\n            const isActivePalette = this.activePaletteIndex === index;\n            const { fills, strokes } = palette;\n            const themeName = themes[index];\n            const isCustomTheme = !isStockTheme(themeName);\n            const miniChartsContainer = this.createBean(\n                new MiniChartsContainer(\n                    this.chartController,\n                    fills,\n                    strokes,\n                    themeTemplateParameters[index],\n                    isCustomTheme,\n                    chartGroups\n                )\n            );\n\n            this.miniChartsContainers.push(miniChartsContainer);\n            this.eMiniChartsContainer.appendChild(miniChartsContainer.getGui());\n            this.addCardLink(index);\n\n            if (isActivePalette) {\n                miniChartsContainer.updateSelectedMiniChart();\n            } else {\n                miniChartsContainer.setDisplayed(false);\n            }\n        });\n\n        _.setDisplayed(this.eNavBar, this.palettes.length > 1);\n        _.radioCssClass(this.cardItems[this.activePaletteIndex], 'ag-selected', 'ag-not-selected');\n    }\n\n    private addCardLink(index: number): void {\n        const link = document.createElement('div');\n        link.classList.add('ag-chart-settings-card-item');\n\n        this.addManagedListener(link, 'click', () => {\n            this.setActivePalette(index, index < this.activePaletteIndex ? 'left' : 'right');\n        });\n\n        this.eCardSelector.appendChild(link);\n        this.cardItems.push(link);\n    }\n\n    private getPrev(): number {\n        let prev = this.activePaletteIndex - 1;\n\n        if (prev < 0) {\n            prev = this.palettes.length - 1;\n        }\n\n        return prev;\n    }\n\n    private getNext(): number {\n        let next = this.activePaletteIndex + 1;\n\n        if (next >= this.palettes.length) {\n            next = 0;\n        }\n\n        return next;\n    }\n\n    private setActivePalette(index: number, animationDirection: AnimationDirection) {\n        if (this.isAnimating || this.activePaletteIndex === index) { return; }\n\n        _.radioCssClass(this.cardItems[index], 'ag-selected', 'ag-not-selected');\n\n        const currentPalette = this.miniChartsContainers[this.activePaletteIndex];\n        const currentGui = currentPalette.getGui();\n        const futurePalette = this.miniChartsContainers[index];\n        const nextGui = futurePalette.getGui();\n\n        currentPalette.updateSelectedMiniChart();\n        futurePalette.updateSelectedMiniChart();\n\n        const multiplier = animationDirection === 'left' ? -1 : 1;\n        const final = nextGui.style.left = `${(_.getAbsoluteWidth(this.getGui()) * multiplier)}px`;\n\n        this.activePaletteIndex = index;\n\n        this.isAnimating = true;\n\n        const animatingClass = 'ag-animating';\n\n        futurePalette.setDisplayed(true);\n        currentPalette.addCssClass(animatingClass);\n        futurePalette.addCssClass(animatingClass);\n\n        this.chartController.setChartThemeName(this.themes[index]);\n\n        window.setTimeout(() => {\n            currentGui.style.left = `${-parseFloat(final)}px`;\n            nextGui.style.left = '0px';\n        }, 0);\n\n        window.setTimeout(() => {\n            this.isAnimating = false;\n\n            currentPalette.removeCssClass(animatingClass);\n            futurePalette.removeCssClass(animatingClass);\n            currentPalette.setDisplayed(false);\n        }, 300);\n    }\n\n    private destroyMiniCharts(): void {\n        _.clearElement(this.eMiniChartsContainer);\n\n        this.miniChartsContainers = this.destroyBeans(this.miniChartsContainers);\n    }\n\n    protected destroy(): void {\n        this.destroyMiniCharts();\n        super.destroy();\n    }\n}\n", "\nimport {\n    _,\n    AgGroupComponent,\n    Autowired,\n    ChartGroupsDef,\n    ChartType,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartController } from \"../../chartController\";\nimport { ChartTranslationService } from \"../../services/chartTranslationService\";\nimport {\n    MiniArea,\n    MiniAreaColumnCombo,\n    MiniBar,\n    MiniBoxPlot,\n    MiniBubble,\n    MiniColumn,\n    MiniColumnLineCombo,\n    MiniCustomCombo,\n    MiniDonut,\n    MiniHeatmap,\n    MiniHistogram,\n    MiniLine,\n    MiniNightingale,\n    MiniNormalizedArea,\n    MiniNormalizedBar,\n    MiniNormalizedColumn,\n    MiniPie,\n    MiniRadarArea,\n    MiniRadarLine,\n    MiniRadialBar,\n    MiniRadialColumn,\n    MiniRangeBar,\n    MiniRangeArea,\n    MiniWaterfall,\n    MiniScatter,\n    MiniStackedArea,\n    MiniStackedBar,\n    MiniStackedColumn,\n    MiniSunburst,\n    MiniTreemap,\n} from \"./miniCharts/index\"; // please leave this as is - we want it to be explicit for build reasons\nimport { MiniChart } from './miniCharts/miniChart';\n\n// import {enterprise} from \"../../../../main\";\n\nexport type ThemeTemplateParameters = {\n    extensions: Map<any, any>;\n    properties: Map<any, any>;\n};\n\ntype MiniChartMenuMapping = {\n    [K in keyof ChartGroupsDef]-?: MiniChartMenuGroup<K>;\n};\n\ntype MiniChartMenuGroup<K extends keyof ChartGroupsDef> = {\n    [T in NonNullable<ChartGroupsDef[K]>[number]]: MiniChartMenuItem;\n}\n\ninterface MiniChartMenuItem {\n    range: boolean;\n    pivot: boolean;\n    enterprise: boolean;\n    icon: MiniChartConstructor;\n}\n\ntype MiniChartConstructor = {\n    chartType: ChartType;\n    new (...args: any[]): MiniChart;\n};\n\nconst miniChartMapping: MiniChartMenuMapping = {\n    columnGroup: {\n        column: { range: true, pivot: true, enterprise: false, icon: MiniColumn },\n        stackedColumn: { range: true, pivot: true, enterprise: false, icon: MiniStackedColumn },\n        normalizedColumn: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedColumn },\n    },\n    barGroup: {\n        bar: { range: true, pivot: true, enterprise: false, icon: MiniBar },\n        stackedBar: { range: true, pivot: true, enterprise: false, icon: MiniStackedBar },\n        normalizedBar: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedBar },\n    },\n    pieGroup: {\n        pie: { range: true, pivot: true, enterprise: false, icon: MiniPie },\n        donut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n        doughnut: { range: true, pivot: true, enterprise: false, icon: MiniDonut },\n    },\n    lineGroup: { line: { range: true, pivot: true, enterprise: false, icon: MiniLine } },\n    scatterGroup: {\n        scatter: { range: true, pivot: true, enterprise: false, icon: MiniScatter },\n        bubble: { range: true, pivot: true, enterprise: false, icon: MiniBubble },\n    },\n    areaGroup: {\n        area: { range: true, pivot: true, enterprise: false, icon: MiniArea },\n        stackedArea: { range: true, pivot: true, enterprise: false, icon: MiniStackedArea },\n        normalizedArea: { range: true, pivot: true, enterprise: false, icon: MiniNormalizedArea },\n    },\n    polarGroup: {\n        radarLine: { range: true, pivot: false, enterprise: true, icon: MiniRadarLine },\n        radarArea: { range: true, pivot: false, enterprise: true, icon: MiniRadarArea },\n        nightingale: { range: true, pivot: false, enterprise: true, icon: MiniNightingale },\n        radialColumn: { range: true, pivot: false, enterprise: true, icon: MiniRadialColumn },\n        radialBar: { range: true, pivot: false, enterprise: true, icon: MiniRadialBar },\n    },\n    statisticalGroup: {\n        boxPlot: { range: true, pivot: false, enterprise: true, icon: MiniBoxPlot },\n        histogram: { range: true, pivot: false, enterprise: false, icon: MiniHistogram },\n        rangeBar: { range: true, pivot: false, enterprise: true, icon: MiniRangeBar },\n        rangeArea: { range: true, pivot: false, enterprise: true, icon: MiniRangeArea },\n    },\n    hierarchicalGroup: {\n        treemap: { range: true, pivot: true, enterprise: true, icon: MiniTreemap },\n        sunburst: { range: true, pivot: true, enterprise: true, icon: MiniSunburst },\n    },\n    specializedGroup: {\n        heatmap: { range: true, pivot: false, enterprise: true, icon: MiniHeatmap },\n        waterfall: { range: true, pivot: false, enterprise: true, icon: MiniWaterfall },\n    },\n    combinationGroup: {\n        columnLineCombo: { range: true, pivot: true, enterprise: false, icon: MiniColumnLineCombo },\n        areaColumnCombo: { range: true, pivot: true, enterprise: false, icon: MiniAreaColumnCombo },\n        customCombo: { range: true, pivot: true, enterprise: false, icon: MiniCustomCombo },\n    },\n};\n\nconst DEFAULT_CHART_GROUPS: ChartGroupsDef = {\n    columnGroup: [\n        'column',\n        'stackedColumn',\n        'normalizedColumn',\n    ],\n    barGroup: [\n        'bar',\n        'stackedBar',\n        'normalizedBar'\n    ],\n    pieGroup: [\n        'pie',\n        'donut',\n    ],\n    lineGroup: [\n        'line',\n    ],\n    scatterGroup: [\n        'scatter',\n        'bubble',\n    ],\n    areaGroup: [\n        'area',\n        'stackedArea',\n        'normalizedArea',\n    ],\n    polarGroup: [\n        'radarLine',\n        'radarArea',\n        'nightingale',\n        'radialColumn',\n        'radialBar',\n    ],\n    statisticalGroup: [\n        'boxPlot',\n        'histogram',\n        'rangeBar',\n        'rangeArea',\n    ],\n    hierarchicalGroup: [\n        'treemap',\n        'sunburst',\n    ],\n    specializedGroup: [\n        'heatmap',\n        'waterfall',\n    ],\n    combinationGroup: [\n        'columnLineCombo',\n        'areaColumnCombo',\n        'customCombo',\n    ]\n};\n\nexport class MiniChartsContainer extends Component {\n    static TEMPLATE = /* html */ `<div class=\"ag-chart-settings-mini-wrapper\"></div>`;\n\n    private readonly fills: string[];\n    private readonly strokes: string[];\n    private readonly themeTemplateParameters: ThemeTemplateParameters;\n    private readonly isCustomTheme: boolean;\n    private wrappers: { [key: string]: HTMLElement } = {};\n    private chartController: ChartController;\n\n    private chartGroups: ChartGroupsDef;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n\n    constructor(chartController: ChartController, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean, chartGroups: ChartGroupsDef = DEFAULT_CHART_GROUPS) {\n        super(MiniChartsContainer.TEMPLATE);\n\n        this.chartController = chartController;\n        this.fills = fills;\n        this.strokes = strokes;\n        this.themeTemplateParameters = themeTemplateParameters;\n        this.isCustomTheme = isCustomTheme;\n        this.chartGroups = {...chartGroups};\n    }\n\n    @PostConstruct\n    private init() {\n        const eGui = this.getGui();\n        const isEnterprise = this.chartController.isEnterprise();\n        const isPivotChart = this.chartController.isPivotChart();\n        const isRangeChart = !isPivotChart;\n\n        // Determine the set of chart types that are specified by the chartGroupsDef config, filtering out any entries\n        // that are invalid for the current chart configuration (pivot/range) and license type\n        const displayedMenuGroups = Object.keys(this.chartGroups).map((group: keyof ChartGroupsDef) => {\n            const menuGroup = group in miniChartMapping\n                ? miniChartMapping[group as keyof typeof miniChartMapping]\n                : undefined;\n            if (!menuGroup) {\n                // User has specified an invalid chart group in the chartGroupsDef config\n                _.warnOnce(`invalid chartGroupsDef config '${group}'`);\n                return null;\n            }\n\n            // Determine the valid chart types within this group, based on the chartGroupsDef config\n            const chartGroupValues = this.chartGroups[group as keyof ChartGroupsDef] ?? [];\n            const menuItems = chartGroupValues.map((chartType) => {\n                const menuItem = chartType in menuGroup\n                        ? (menuGroup as Record<typeof chartType, MiniChartMenuItem>)[chartType]\n                        : undefined;\n\n                if (!menuItem) {\n                     // User has specified an invalid chart type in the chartGroupsDef config\n                    _.warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                    return null;\n                }\n\n                if (!isEnterprise && menuItem.enterprise) {\n                    return null; // skip enterprise charts if community\n                }\n                // Only show the chart if it is valid for the current chart configuration (pivot/range)\n                if (isRangeChart && menuItem.range) return menuItem;\n                if (isPivotChart && menuItem.pivot) return menuItem;\n                return null;\n            })\n            .filter((menuItem): menuItem is NonNullable<typeof menuItem> => menuItem != null);\n\n            if (menuItems.length === 0) return null; // don't render empty chart groups\n\n            return {\n                label: this.chartTranslationService.translate(group),\n                items: menuItems\n            };\n        })\n        .filter((menuGroup): menuGroup is NonNullable<typeof menuGroup> => menuGroup != null);\n\n        // Render the filtered menu items\n        for (const { label, items } of displayedMenuGroups) {\n            const groupComponent = this.createBean(\n                new AgGroupComponent({\n                    title: label,\n                    suppressEnabledCheckbox: true,\n                    enabled: true,\n                    suppressOpenCloseIcons: true,\n                    cssIdentifier: 'charts-settings',\n                    direction: 'horizontal',\n                })\n            );\n\n            for (const menuItem of items) {\n                const MiniClass = menuItem.icon;\n                const miniWrapper = document.createElement('div');\n                miniWrapper.classList.add('ag-chart-mini-thumbnail');\n\n                const miniClassChartType: ChartType = MiniClass.chartType;\n                this.addManagedListener(miniWrapper, 'click', () => {\n                    this.chartController.setChartType(miniClassChartType);\n                    this.updateSelectedMiniChart();\n                });\n\n                this.wrappers[miniClassChartType] = miniWrapper;\n\n                this.createBean(new MiniClass(miniWrapper, this.fills, this.strokes, this.themeTemplateParameters, this.isCustomTheme));\n                groupComponent.addItem(miniWrapper);\n            }\n\n            eGui.appendChild(groupComponent.getGui());\n        }            \n\n        // hide MiniCustomCombo if no custom combo exists\n        if (!this.chartController.customComboExists() && this.chartGroups.combinationGroup) {\n            this.chartGroups.combinationGroup = this.chartGroups.combinationGroup.filter(chartType => chartType !== 'customCombo');\n        }\n\n        this.updateSelectedMiniChart();\n    }\n\n    public updateSelectedMiniChart(): void {\n        const selectedChartType = this.chartController.getChartType();\n        for (const miniChartType in this.wrappers) {\n            const miniChart = this.wrappers[miniChartType];\n            const selected = miniChartType === selectedChartType;\n            miniChart.classList.toggle('ag-selected', selected);\n        }\n    }\n}\n", "import { PostConstruct } from \"@ag-grid-community/core\";\nimport { MiniChart } from \"./miniChart\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartTranslationKey } from \"../../../services/chartTranslationService\";\n\nexport abstract class MiniChartWithAxes extends MiniChart {\n\n    private readonly stroke = 'gray';\n    private readonly axisOvershoot = 3;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    @PostConstruct\n    private addAxes() {\n        const size = this.size;\n        const padding = this.padding;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + this.axisOvershoot;\n        leftAxis.stroke = this.stroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - this.axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = this.stroke;\n\n        const root = this.root;\n\n        root.append(leftAxis);\n        root.append(bottomAxis);\n    }\n}\n", "import { Autowired, Component, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { _Scene } from \"ag-charts-community\";\n\nconst CANVAS_CLASS = 'ag-chart-mini-thumbnail-canvas';\nconst ERROR_MESSAGE = 'AG Grid - chart update failed';\n\nexport abstract class MiniChart extends Component {\n\n    @Autowired('chartTranslationService')\n    protected chartTranslationService: ChartTranslationService;\n\n    protected readonly size: number = 58;\n    protected readonly padding: number = 5;\n    protected readonly root: _Scene.Group = new _Scene.Group();\n    protected readonly scene: _Scene.Scene;\n\n    constructor(container: HTMLElement, protected tooltipName: ChartTranslationKey) {\n        super();\n\n        const scene = new _Scene.Scene({\n            width: this.size,\n            height: this.size\n        });\n\n        scene.canvas.element.classList.add(CANVAS_CLASS);\n        scene.setRoot(this.root);\n        scene.setContainer(container);\n\n        this.scene = scene;\n    }\n\n    @PostConstruct\n    protected init(): void {\n        this.scene.canvas.element.title = this.chartTranslationService.translate(this.tooltipName);\n\n        // Necessary to force scene graph render as we are not using the standalone factory.\n        this.scene.render()\n            .catch((e: Error) => {\n                console.error(`${ERROR_MESSAGE}`, e);\n            });\n    }\n\n    abstract updateColors(fills: string[], strokes: string[]): void;\n}\n", "import { _Scene } from 'ag-charts-community';\n\nexport interface CreateColumnRectsParams {\n    stacked: boolean;\n    root: _Scene.Group;\n    data: any;\n    size: number;\n    padding: number;\n    xScaleDomain: number[];\n    yScaleDomain: number[];\n    xScalePadding: number;\n}\n\nexport function createColumnRects(params: CreateColumnRectsParams) {\n    const { stacked, size, padding, xScalePadding, xScaleDomain, yScaleDomain } = params;\n\n    const xScale = new _Scene.BandScale<number>();\n    xScale.domain = xScaleDomain;\n    xScale.range = [padding, size - padding];\n    xScale.paddingInner = xScalePadding;\n    xScale.paddingOuter = xScalePadding;\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = yScaleDomain;\n    yScale.range = [size - padding, padding];\n\n    const createBars = (series: number[], xScale: _Scene.BandScale<number>, yScale: _Scene.LinearScale) => {\n        return series.map((datum: number, i: number) => {\n            const top = yScale.convert(datum);\n            const rect = new _Scene.Rect();\n            rect.x = xScale.convert(i);\n            rect.y = top;\n            rect.width = xScale.bandwidth;\n            rect.height = yScale.convert(0) - top;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n    };\n\n    if (stacked) {\n        return params.data.map((d: number[]) => createBars(d, xScale, yScale));\n    }\n\n    return createBars(params.data, xScale, yScale);\n}\n\nexport function createLinePaths(root: _Scene.Group, data: number[][], size: number, padding: number): _Scene.Path[] {\n    const xScale = new _Scene.LinearScale();\n    xScale.domain = [0, 4];\n    xScale.range = [padding, size - padding];\n\n    const yScale = new _Scene.LinearScale();\n    yScale.domain = [0, 10];\n    yScale.range = [size - padding, padding];\n\n    const lines: _Scene.Path[] = data.map((series) => {\n        const line = new _Scene.Path();\n        line.strokeWidth = 3;\n        line.lineCap = 'round';\n        line.fill = undefined;\n        series.forEach((datum: number, i: number) => {\n            line.path[i > 0 ? 'lineTo' : 'moveTo'](xScale.convert(i), yScale.convert(datum));\n        });\n\n        return line;\n    });\n\n    const linesGroup = new _Scene.Group();\n    linesGroup.setClipRectInGroupCoordinateSpace(\n        new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2)\n    );\n    linesGroup.append(lines);\n    root.append(linesGroup);\n\n    return lines;\n}\n\nexport function createPolarPaths(\n    root: _Scene.Group,\n    data: number[][],\n    size: number,\n    radius: number,\n    innerRadius: number,\n    markerSize: number = 0\n): { paths: _Scene.Path[]; markers: _Scene.Circle[] } {\n    const angleScale = new _Scene.LinearScale();\n    angleScale.domain = [0, 7];\n    angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);\n\n    const radiusScale = new _Scene.LinearScale();\n    radiusScale.domain = [0, 10];\n    radiusScale.range = [radius, innerRadius];\n\n    const markers: _Scene.Circle[] = [];\n\n    const paths: _Scene.Path[] = data.map((series) => {\n        const path = new _Scene.Path();\n        path.strokeWidth = 1;\n        path.strokeOpacity = 0.5;\n        path.lineCap = 'round';\n        path.fill = undefined;\n        path.fillOpacity = 0.8;\n        series.forEach((datum: number, i: number) => {\n            const angle = angleScale.convert(i);\n            const r = radius + innerRadius - radiusScale.convert(datum);\n\n            const x = r * Math.cos(angle);\n            const y = r * Math.sin(angle);\n\n            path.path[i > 0 ? 'lineTo' : 'moveTo'](x, y);\n\n            if (markerSize > 0) {\n                const marker = new _Scene.Circle();\n                marker.x = x;\n                marker.y = y;\n                marker.size = markerSize;\n                markers.push(marker);\n            }\n        });\n\n        path.path.closePath();\n        return path;\n    });\n\n    const group = new _Scene.Group();\n\n    const center = size / 2;\n    group.translationX = center;\n    group.translationY = center;\n\n    group.append([...paths, ...markers]);\n    root.append(group);\n\n    return { paths, markers };\n}\n\nexport function accumulateData(data: number[][]): { processedData: number[][]; min: number; max: number } {\n    let [min, max] = [Infinity, -Infinity];\n    const processedData = data.reduce((acc, curr, currIndex) => {\n        const previous = currIndex > 0 ? acc[currIndex - 1] : undefined;\n        acc[currIndex] ??= [];\n        const current = acc[currIndex];\n        curr.forEach((datum, datumIndex) => {\n            if (previous) {\n                datum += previous[datumIndex];\n            }\n\n            current[datumIndex] = datum;\n\n            if (current[datumIndex] < min) {\n                min = current[datumIndex];\n            }\n\n            if (current[datumIndex] > max) {\n                max = current[datumIndex];\n            }\n        });\n        return acc;\n    }, [] as number[][]);\n\n    return { processedData, min, max };\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams } from \"../miniChartHelpers\";\n\nexport class MiniColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedColumn';\n\n    private readonly columns: _Scene.Rect[];\n\n    private columnData = [2, 3, 4];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"groupedColumnTooltip\");\n\n        const { root, columnData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.3\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((column: _Scene.Rect, i) => {\n            column.fill = fills[i];\n            column.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams } from \"../miniChartHelpers\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nexport class MiniStackedColumn extends MiniChartWithAxes {\n    static chartType: ChartType = 'stackedColumn';\n\n    private readonly stackedColumns: _Scene.Rect[][];\n\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4]\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedColumn.data,\n        yScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = \"stackedColumnTooltip\") {\n        super(container, tooltipName);\n\n        const { root, size, padding } = this;\n\n        this.stackedColumns = createColumnRects({\n            stacked: true,\n            root,\n            data,\n            size,\n            padding,\n            xScaleDomain: [0, 1, 2],\n            yScaleDomain,\n            xScalePadding: 0.3,\n        } as CreateColumnRectsParams);\n\n        root.append(([]as _Scene.Rect[]).concat.apply([], this.stackedColumns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.stackedColumns.forEach((series: _Scene.Rect[], i: number) =>\n            series.forEach(column => {\n                column.fill = fills[i];\n                column.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { MiniStackedColumn } from \"./miniStackedColumn\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniNormalizedColumn extends MiniStackedColumn {\n\n    static chartType: ChartType = 'normalizedColumn';\n    static data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, MiniNormalizedColumn.data, [0, 10], \"normalizedColumnTooltip\");\n    }\n}\n", "import { _Scene } from \"ag-charts-community\";\nimport { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'groupedBar';\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"groupedBarTooltip\");\n\n        const padding = this.padding;\n        const size = this.size;\n        const data = [2, 3, 4];\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 4];\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map((datum, i) => {\n            const rect = new _Scene.Rect();\n            rect.x = padding;\n            rect.y = yScale.convert(i);\n            rect.width = bottom - xScale.convert(datum);\n            rect.height = height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nexport class MiniStackedBar extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'stackedBar';\n    static data = [\n        [8, 12, 16],\n        [6, 9, 12],\n        [2, 3, 4]\n    ];\n\n    private readonly bars: _Scene.Rect[][];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        _themeTemplateParameters: ThemeTemplateParameters,\n        _isCustomTheme: boolean,\n        data = MiniStackedBar.data,\n        xScaleDomain = [0, 16],\n        tooltipName: ChartTranslationKey = \"stackedBarTooltip\") {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const yScale = new _Scene.BandScale<number>();\n        yScale.domain = [0, 1, 2];\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.3;\n        yScale.paddingOuter = 0.3;\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = xScaleDomain;\n        xScale.range = [size - padding, padding];\n\n        const bottom = xScale.convert(0);\n        const height = yScale.bandwidth;\n\n        this.bars = data.map(series =>\n            series.map((datum, i) => {\n                const rect = new _Scene.Rect();\n                rect.x = padding;\n                rect.y = yScale.convert(i);\n                rect.width = bottom - xScale.convert(datum);\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            })\n        );\n\n        this.updateColors(fills, strokes);\n        this.root.append(([] as _Scene.Rect[]).concat.apply([], this.bars));\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((series, i) =>\n            series.forEach(bar => {\n                bar.fill = fills[i];\n                bar.stroke = strokes[i];\n            })\n        );\n    }\n}\n", "import { ThemeTemplateParameters } from '../../miniChartsContainer';\nimport { MiniStackedBar } from './miniStackedBar';\nimport { ChartType } from '@ag-grid-community/core';\n\nexport class MiniNormalizedBar extends MiniStackedBar {\n    static chartType: ChartType = 'normalizedBar';\n    static data = [\n        [10, 10, 10],\n        [6, 7, 8],\n        [2, 4, 6],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, MiniNormalizedBar.data, [0, 10], 'normalizedBarTooltip');\n    }\n}\n", "import { MiniChart } from \"../miniChart\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nconst toRadians = _Scene.toRadians;\nexport class MiniDonut extends MiniChart {\n\n    static chartType: ChartType = 'donut';\n    private readonly sectors: _Scene.Sector[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], _themeTemplateParameters: ThemeTemplateParameters, _isCustomTheme: boolean, centerRadiusScaler = 0.6, tooltipName: ChartTranslationKey = \"donutTooltip\") {\n        super(container, tooltipName);\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const center = radius + this.padding;\n        const angles = [\n            [toRadians(-90), toRadians(30)],\n            [toRadians(30), toRadians(120)],\n            [toRadians(120), toRadians(180)],\n            [toRadians(180), toRadians(210)],\n            [toRadians(210), toRadians(240)],\n            [toRadians(240), toRadians(270)]\n        ];\n\n        this.sectors = angles.map(([startAngle, endAngle]) => {\n            const sector = new _Scene.Sector();\n            sector.centerX = center;\n            sector.centerY = center;\n            sector.innerRadius = radius * centerRadiusScaler;\n            sector.outerRadius = radius;\n            sector.startAngle = startAngle;\n            sector.endAngle = endAngle;\n            sector.stroke = undefined;\n            sector.strokeWidth = 0;\n            sector.inset = 0.75;\n            return sector;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.sectors);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.sectors.forEach((sector, i) => {\n            sector.fill = fills[i % fills.length];\n            sector.stroke = strokes[i % strokes.length];\n        });\n    }\n}\n", "import { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { MiniDonut } from \"./miniDonut\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniPie extends MiniDonut {\n\n    static chartType: ChartType = 'pie';\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, 0, \"pieTooltip\");\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createLinePaths } from \"../miniChartHelpers\";\n\nexport class MiniLine extends MiniChartWithAxes {\n    static chartType: ChartType = 'line';\n\n    private readonly lines: _Scene.Path[];\n\n    private data = [\n        [9, 7, 8, 5, 6],\n        [5, 6, 3, 4, 1],\n        [1, 3, 4, 8, 7]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"lineTooltip\");\n\n        this.lines = createLinePaths(this.root, this.data, this.size, this.padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniScatter extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'scatter';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"scatterTooltip\");\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y] pairs\n        const data = [\n            [[0.3, 3], [1.1, 0.9], [2, 0.4], [3.4, 2.4]],\n            [[0, 0.3], [1, 2], [2.4, 1.4], [3, 0]]\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [-0.5, 4];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [-0.5, 3.5];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach(series => {\n            series.forEach(([x, y]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = 2.5;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2));\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniBubble extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'bubble';\n    private readonly points: _Scene.Shape[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"bubbleTooltip\");\n\n        const size = this.size;\n        const padding = this.padding;\n\n        // [x, y, radius] triples\n        const data = [\n            [[0.1, 0.3, 5], [0.5, 0.4, 7], [0.2, 0.8, 7]], [[0.8, 0.7, 5], [0.7, 0.3, 9]]\n        ];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, 1];\n        xScale.range = [padding * 2, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 1];\n        yScale.range = [size - padding, padding];\n\n        const points: _Scene.Shape[] = [];\n\n        data.forEach(series => {\n            series.forEach(([x, y, radius]) => {\n                const arc = new _Scene.Arc();\n                arc.strokeWidth = 0;\n                arc.centerX = xScale.convert(x);\n                arc.centerY = yScale.convert(y);\n                arc.radius = radius;\n                arc.fillOpacity = 0.7;\n                points.push(arc);\n            });\n        });\n\n        this.points = points;\n        this.updateColors(fills, strokes);\n\n        const pointsGroup = new _Scene.Group();\n        pointsGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding * 2, size - padding * 2));\n        pointsGroup.append(this.points);\n        this.root.append(pointsGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.points.forEach((line, i) => {\n            line.stroke = strokes[i % strokes.length];\n            line.fill = fills[i % fills.length];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\n\nexport interface ICoordinate {\n    x: number;\n    y: number;\n}\n\nexport class MiniArea extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'area';\n    private readonly areas: _Scene.Path[];\n\n    static readonly data = [\n        [1, 3, 5],\n        [2, 6, 4],\n        [5, 3, 1]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], _themeTemplateParameters: ThemeTemplateParameters, _isCustomTheme: boolean, data: number[][] = MiniArea.data) {\n        super(container, \"groupedAreaTooltip\");\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 6];\n        yScale.range = [size - padding + 0.5, padding];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n        const bottomY = yScale.convert(0);\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y\n                };\n\n                points[last - i] = {\n                    x,\n                    y: bottomY\n                };\n            });\n        });\n\n        this.areas = pathData.reverse().map(points => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 1;\n            area.strokeOpacity = 0.75;\n            area.fillOpacity = 0.7;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? \"lineTo\" : \"moveTo\"](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { ICoordinate } from \"./miniArea\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { ChartTranslationKey } from \"../../../../services/chartTranslationService\";\n\nexport class MiniStackedArea extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'stackedArea';\n    static readonly data = [\n        [2, 3, 2],\n        [3, 6, 5],\n        [6, 2, 2]\n    ];\n\n    private readonly areas: _Scene.Path[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], _themeTemplateParameters: ThemeTemplateParameters, _isCustomTheme: boolean, data: number[][] = MiniStackedArea.data, tooltipName: ChartTranslationKey = \"stackedAreaTooltip\") {\n        super(container, tooltipName);\n\n        const size = this.size;\n        const padding = this.padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = [0, 1, 2];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n        xScale.range = [padding + 0.5, size - padding - 0.5];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, 16];\n        yScale.range = [size - padding + 0.5, padding + 0.5];\n\n        const xCount = data.length;\n        const last = xCount * 2 - 1;\n        const pathData: ICoordinate[][] = [];\n\n        data.forEach((datum, i) => {\n            const x = xScale.convert(i);\n            let total = 0;\n\n            datum.forEach((yDatum, j) => {\n                const y = yScale.convert(total + yDatum);\n                const points = pathData[j] || (pathData[j] = []);\n\n                points[i] = {\n                    x,\n                    y\n                };\n\n                points[last - i] = {\n                    x,\n                    y: yScale.convert(total) // bottom y\n                };\n\n                total += yDatum;\n            });\n        });\n\n        this.areas = pathData.map(points => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n\n            const path = area.path;\n            path.clear();\n            points.forEach((point, i) => path[i > 0 ? \"lineTo\" : \"moveTo\"](point.x, point.y));\n            path.closePath();\n\n            return area;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.areas);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import { ThemeTemplateParameters } from \"../../miniChartsContainer\";\nimport { MiniStackedArea } from \"./miniStackedArea\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniNormalizedArea extends MiniStackedArea {\n\n    static chartType: ChartType = 'normalizedArea';\n    static readonly data = MiniStackedArea.data.map(stack => {\n        const sum = stack.reduce((p, c) => p + c, 0);\n        return stack.map(v => v / sum * 16);\n    });\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplateParameters: ThemeTemplateParameters, isCustomTheme: boolean, data: number[][] = MiniNormalizedArea.data) {\n        super(container, fills, strokes, themeTemplateParameters, isCustomTheme, data, \"normalizedAreaTooltip\");\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\n\nexport class MiniHistogram extends MiniChartWithAxes {\n    static chartType: ChartType = 'histogram';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"histogramTooltip\");\n\n        const padding = this.padding;\n        const size = this.size;\n\n        // approx normal curve\n        const data = [2, 5, 11, 13, 10, 6, 1];\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [0, data.length];\n        xScale.range = [padding, size - padding];\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [0, data.reduce((a, b) => Math.max(a, b), 0)];\n        yScale.range = [size - padding, padding];\n\n        const bottom = yScale.convert(0);\n\n        this.bars = data.map((datum, i) => {\n            const top = yScale.convert(datum);\n            const left = xScale.convert(i);\n            const right = xScale.convert(i + 1);\n\n            const rect = new _Scene.Rect();\n            rect.x = left;\n            rect.y = top;\n            rect.width = right - left;\n            rect.height = bottom - top;\n            rect.strokeWidth = 1;\n            rect.strokeOpacity = 0.75;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        this.updateColors(fills, strokes);\n        this.root.append(this.bars);\n    }\n\n    updateColors([fill]: string[], [stroke]: string[]) {\n        this.bars.forEach(bar => {\n            bar.fill = fill;\n            bar.stroke = stroke;\n        });\n    }\n}\n", "import { _ModuleSupport, _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { accumulateData } from '../miniChartHelpers';\n\nexport class MiniRadialColumn extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialColumn';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10, 2, 6, 5],\n        [4, 4, 3, 6, 4, 4],\n        [5, 4, 2, 9, 8, 9],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialColumnTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const { padding, size, data } = this;\n        const radius = (size - padding * 2) / 2;\n        const innerRadiusRatio = 0.4;\n        const axisInnerRadius = radius * innerRadiusRatio;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = data[0].map((_, index) => index);\n        angleScale.range = [0, 2 * Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n\n        const { processedData, max } = accumulateData(data);\n\n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [axisInnerRadius, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, seriesIndex) => {\n            const firstSeries = seriesIndex === 0;\n            const previousSeries = firstSeries ? undefined : processedData[seriesIndex - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesColumns = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const columnWidth = _Scene.getRadialColumnWidth(startAngle, endAngle, radius, 0.5, 0.5);\n\n                const column = new _Scene.RadialColumnShape();\n\n                column.scalingCenterX = center;\n                column.scalingCenterY = center;\n                column.columnWidth = columnWidth;\n                column.innerRadius = innerRadius;\n                column.outerRadius = outerRadius;\n                column.startAngle = startAngle;\n                column.endAngle = endAngle;\n                column.isBeveled = true;\n                column.axisInnerRadius = axisInnerRadius;\n                column.axisOuterRadius = radius;\n\n                column.stroke = undefined;\n                column.strokeWidth = 0;\n\n                return column;\n            });\n\n            seriesGroup.append(seriesColumns);\n\n            seriesGroup.translationX = center;\n            seriesGroup.translationY = center;\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { PostConstruct } from '@ag-grid-community/core';\nimport { MiniChart } from './miniChart';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartTranslationKey } from '../../../services/chartTranslationService';\n\nexport abstract class MiniChartWithPolarAxes extends MiniChart {\n    private readonly stroke = 'gray';\n    private gridLines: _Scene.Path[];\n    protected showRadiusAxisLine: boolean = true;\n    protected showAngleAxisLines: boolean = true;\n\n    constructor(container: HTMLElement, tooltipName: ChartTranslationKey) {\n        super(container, tooltipName);\n    }\n\n    @PostConstruct\n    private addAxes() {\n        const size = this.size;\n        const padding = this.padding;\n        const combinedPadding = padding * 2;\n\n        const axisLineRadius = (size - combinedPadding) / 2;\n        const gridRadii = this.showAngleAxisLines ? [\n            axisLineRadius,\n            axisLineRadius * 0.8,\n            axisLineRadius * 0.6,\n            axisLineRadius * 0.4,\n        ] : [];\n\n        const radiusAxisLine = new _Scene.Line();\n        radiusAxisLine.x1 = size / 2;\n        radiusAxisLine.y1 = padding;\n        radiusAxisLine.x2 = size / 2;\n        radiusAxisLine.y2 = size - padding - axisLineRadius - gridRadii[gridRadii.length - 1];\n        radiusAxisLine.stroke = this.stroke;\n        radiusAxisLine.strokeOpacity = 0.5;\n        radiusAxisLine.fill = undefined;\n\n        radiusAxisLine.visible = this.showRadiusAxisLine;\n\n        const x = padding + axisLineRadius;\n        this.gridLines = gridRadii.map((radius, index) => {\n            const gridLine = new _Scene.Path();\n            gridLine.path.arc(x, x, radius, 0, 2 * Math.PI);\n            gridLine.strokeWidth = 1;\n            gridLine.stroke = this.stroke;\n            gridLine.strokeOpacity = index === 0 ? 0.5 : 0.2;\n            gridLine.fill = undefined;\n\n            return gridLine;\n        });\n\n        const root = this.root;\n\n        root.append(radiusAxisLine);\n        if (this.gridLines.length > 0) root.append(this.gridLines);\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { accumulateData } from '../miniChartHelpers';\n\nexport class MiniRadialBar extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radialBar';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 8, 10],\n        [4, 4, 3],\n        [5, 4, 2],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'radialBarTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding) / 2;\n        const innerRadiusRatio = 0.4;\n        const innerRadius = radius * innerRadiusRatio;\n        const totalRadius = radius + innerRadius;\n\n        const radiusScale = new _Scene.BandScale();\n        radiusScale.domain = this.data[0].map((_, index) => index);\n        radiusScale.range = [radius, innerRadius];\n        radiusScale.paddingInner = 0.5;\n        radiusScale.paddingOuter = 0;\n        const bandwidth = radiusScale.bandwidth;\n\n        const { processedData, max } = accumulateData(this.data);\n\n        const angleScale = new _Scene.LinearScale();\n        angleScale.domain = [0, Math.ceil(max * 1.5)];\n        const start = (3 / 2) * Math.PI;\n        const end = start + 2 * Math.PI;\n        angleScale.range = [start, end];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i] ?? 0;\n\n                const innerRadius = totalRadius - radiusScale.convert(i);\n                const outerRadius = innerRadius + bandwidth;\n                const startAngle = angleScale.convert(previousDatum);\n                const endAngle = angleScale.convert(datum);\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { createPolarPaths } from '../miniChartHelpers';\n\nexport class MiniRadarLine extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarLine';\n    private readonly lines: _Scene.Path[];\n    private readonly markers: _Scene.Circle[];\n    private readonly markerSize: number = 4;\n\n    private data = [\n        [8, 7, 8, 7, 8, 8, 7, 8],\n        [6, 8, 5, 10, 6, 7, 4, 6],\n        [0, 3, 3, 5, 4, 4, 2, 0]\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n    ) {\n        super(container, 'radarLineTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = 0;\n\n        const { paths, markers } = createPolarPaths(this.root, this.data, this.size, radius, innerRadius, this.markerSize);\n\n        this.lines = paths;\n        this.markers = markers;\n    \n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            const n = this.data[i].length;\n            line.stroke = fills[i];\n            const startIdx = i * n;\n            const endIdx = startIdx + n;\n            const markers = this.markers.slice(startIdx, endIdx);\n            markers.forEach((marker) => {\n                marker.stroke = strokes[i];\n                marker.fill = fills[i];\n            });\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { createPolarPaths } from '../miniChartHelpers';\n\nexport class MiniRadarArea extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'radarArea';\n    private readonly areas: _Scene.Path[];\n\n    private data = [\n        [8, 10, 5, 7, 4, 1, 5, 8],\n        [1, 1, 2, 7, 7, 8, 10, 1],\n        [4, 5, 9, 9, 4, 2, 3, 4]\n    ];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n    ) {\n        super(container, 'radarAreaTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n        const innerRadius = radius - this.size * 0.3;\n\n        this.areas = createPolarPaths(this.root, this.data, this.size, radius, innerRadius).paths;\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { accumulateData } from '../miniChartHelpers';\n\nexport class MiniNightingale extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'nightingale';\n    private readonly series: _Scene.Group[];\n\n    private data = [\n        [6, 10, 9, 8, 7, 8],\n        [4, 6, 5, 4, 5, 5],\n        [3, 5, 4, 3, 4, 7],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'nightingaleTooltip');\n\n        this.showRadiusAxisLine = false;\n\n        const radius = (this.size - this.padding * 2) / 2;\n\n        const angleScale = new _Scene.BandScale();\n        angleScale.domain = this.data[0].map((_, index) => index);\n        angleScale.range = [-Math.PI, Math.PI];\n        angleScale.paddingInner = 0;\n        angleScale.paddingOuter = 0;\n        const bandwidth = angleScale.bandwidth * 0.7;\n        \n        const { processedData, max } = accumulateData(this.data);\n        \n        const radiusScale = new _Scene.LinearScale();\n        radiusScale.domain = [0, max];\n        radiusScale.range = [0, radius];\n\n        const center = this.size / 2;\n        this.series = processedData.map((series, index) => {\n            const previousSeries = index < 0 ? undefined : processedData[index - 1];\n\n            const seriesGroup = new _Scene.Group({ zIndex: 1000_000 });\n            const seriesSectors = series.map((datum: number, i: number) => {\n                const previousDatum = previousSeries?.[i];\n                const outerRadius = radiusScale.convert(datum);\n                const innerRadius = radiusScale.convert(previousDatum ?? 0);\n                const startAngle = angleScale.convert(i);\n                const endAngle = startAngle + bandwidth;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = startAngle;\n                sector.endAngle = endAngle;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                return sector;\n            });\n\n            seriesGroup.append(seriesSectors);\n\n            return seriesGroup;\n        });\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeBar extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeBar';\n\n    private readonly bars: _Scene.Rect[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeBarTooltip');\n        const data = [3, 3.5, 3];\n\n        this.bars = this.createRangeBar(this.root, data, this.size, this.padding, 'vertical');\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.bars.forEach((bar, i) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n    }\n\n    createRangeBar(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): _Scene.Rect[] {\n        const barAlongX = direction === 'horizontal';\n        const scalePadding = 2 * padding;\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.3;\n        xScale.paddingOuter = 0.3;\n\n        const lowRatio = 0.7;\n        const highRatio = 1.3;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * lowRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * highRatio,\n        ];\n        yScale.range = [scalePadding, size - scalePadding];\n\n        const width = xScale.bandwidth;\n\n        const bars = data.map((datum, i) => {\n            const [low, high] = [datum * lowRatio, datum * highRatio];\n\n            const x = xScale.convert(i);\n            const y = yScale.convert(low);\n            const height = yScale.convert(high) - y;\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            return rect;\n        });\n\n        root.append(bars);\n\n        return bars;\n    }\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene } from 'ag-charts-community';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\n\nexport class MiniRangeArea extends MiniChartWithAxes {\n    static chartType: ChartType = 'rangeArea';\n\n    private readonly lines: _Scene.Path[][];\n    private readonly areas: _Scene.Path[];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'rangeAreaTooltip');\n\n        // Create a set of repeating zigzag-shaped data series to use as the chart data\n        const period = 4;\n        const dataSeriesMidpoints = [\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 3, high: 5, period } }),\n            zigzag({ offset: 0.375 * period, length: period, pattern: { low: 2.25, high: 4.25, period } }),\n            zigzag({ offset: 0.75 * period, length: period, pattern: { low: 2.5, high: 4.5, period } }),\n        ];\n        const dataSeriesWidth = 1.75;\n        const data = dataSeriesMidpoints.map((series) =>\n            series.map(([x, y]) => ({\n                x,\n                low: y - 0.5 * dataSeriesWidth,\n                high: y + 0.5 * dataSeriesWidth,\n            }))\n        );\n\n        const { lines, areas } = this.createRangeArea(this.root, data, this.size, this.padding);\n        this.lines = lines;\n        this.areas = areas;\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        // Swap the secondary and tertiary colors to match the designs\n        fills = swapArrayItems(fills, 1, 2);\n        strokes = swapArrayItems(strokes, 1, 2);\n\n        this.lines.forEach(([highLine, lowLine], i) => {\n            highLine.fill = undefined;\n            highLine.stroke = strokes[i];\n            lowLine.fill = undefined;\n            lowLine.stroke = strokes[i];\n        });\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n        });\n    }\n\n    createRangeArea(\n        root: _Scene.Group,\n        data: Array<Array<{ x: number; low: number; high: number }>>,\n        size: number,\n        padding: number\n    ): { lines: _Scene.Path[][]; areas: _Scene.Path[] } {\n        const xMin = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.min(acc, x), acc), Infinity);\n        const xMax = data.reduce((acc, series) => series.reduce((acc, { x }) => Math.max(acc, x), acc), -Infinity);\n        const yMin = data.reduce((acc, series) => series.reduce((acc, { low }) => Math.min(acc, low), acc), Infinity);\n        const yMax = data.reduce((acc, series) => series.reduce((acc, { high }) => Math.max(acc, high), acc), -Infinity);\n\n        const xScale = new _Scene.LinearScale();\n        xScale.domain = [xMin, xMax];\n        xScale.range = [padding, size - padding];\n\n        const scalePadding = 2 * padding;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [yMin, yMax];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const lines: _Scene.Path[][] = [];\n        const areas: _Scene.Path[] = [];\n\n        const lowPoints = data.map((series) => {\n            const highLine = new _Scene.Path();\n            const lowLine = new _Scene.Path();\n            const area = new _Scene.Path();\n\n            lines.push([highLine, lowLine]);\n            areas.push(area);\n\n            highLine.strokeWidth = 0;\n            lowLine.strokeWidth = 0;\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            highLine.path.clear();\n            lowLine.path.clear();\n            area.path.clear();\n\n            return series.map((datum, datumIndex) => {\n                const { x, low, high } = datum;\n\n                const scaledX = xScale.convert(x);\n                const yLow = yScale.convert(low);\n                const yHigh = yScale.convert(high);\n\n                const command = datumIndex > 0 ? 'lineTo' : 'moveTo';\n\n                highLine.path[command](scaledX, yHigh);\n                lowLine.path[command](scaledX, yLow);\n                area.path[command](scaledX, yHigh);\n\n                return [scaledX, yLow];\n            });\n        });\n\n        lowPoints.forEach((seriesLowPoints, seriesIndex) => {\n            const n = seriesLowPoints.length - 1;\n            const area = areas[seriesIndex];\n            for (let datumIndex = n; datumIndex >= 0; datumIndex--) {\n                const [x, y] = seriesLowPoints[datumIndex];\n                area.path['lineTo'](x, y);\n            }\n        });\n\n        root.append(areas.concat(...lines));\n\n        return { lines, areas };\n    }\n}\n\ninterface ZigzagPatternOptions {\n    low: number;\n    high: number;\n    period: number;\n}\n\nfunction zigzag(options: {\n    offset: number;\n    length: number;\n    pattern: ZigzagPatternOptions;\n}): Array<[number, number]> {\n    const { offset, length, pattern } = options;\n\n    // Generate [x, y] points for all inflection points of the zigzag pattern that fall within the range\n    const points = getZigzagInflectionPoints(offset, length, pattern);\n\n    // Ensure the first and last points are clamped to the start and end of the range\n    const xMin = 0;\n    const xMax = length;\n    if (points.length === 0 || points[0][0] !== xMin) points.unshift(getZigzagPoint(xMin, offset, pattern));\n    if (points[points.length - 1][0] !== xMax) points.push(getZigzagPoint(xMax, offset, pattern));\n\n    return points;\n\n    function getZigzagInflectionPoints(\n        offset: number,\n        length: number,\n        pattern: ZigzagPatternOptions\n    ): [number, number][] {\n        const { period } = pattern;\n        const scaledOffset = offset / period;\n        const patternInflectionPoints = [0, 0.5];\n        const inflectionPoints = patternInflectionPoints\n            .map((x) => x - scaledOffset)\n            // Clamp offset points to the unit range [0, 1)\n            .map(getRemainderAbs)\n            .sort((a, b) => a - b);\n        const repeatedPoints = Array.from(\n            { length: Math.floor(inflectionPoints.length * (period / length)) },\n            (_, i) => inflectionPoints[i % inflectionPoints.length] + Math.floor(i / inflectionPoints.length)\n        );\n        return repeatedPoints.map((x) => x * period).map((x) => getZigzagPoint(x, offset, pattern));\n    }\n\n    function getZigzagPoint(x: number, offset: number, pattern: ZigzagPatternOptions): [number, number] {\n        return [x, getZigzagValue(offset + x, pattern)];\n    }\n\n    function getZigzagValue(x: number, pattern: ZigzagPatternOptions): number {\n        const { low, high, period } = pattern;\n        const scaledX = getRemainderAbs(x / period);\n        const y = scaledX > 0.5 ? 1 - 2 * (scaledX - 0.5) : 2 * scaledX;\n        return low + (high - low) * y;\n    }\n}\n\n\nfunction getRemainderAbs(value: number): number {\n    const remainder = value % 1;\n    return remainder < 0 ? remainder + 1 : remainder;\n}\n\nfunction swapArrayItems<T>(items: T[], leftIndex: number, rightIndex: number): T[] {\n    const results = [...items];\n    const temp = results[leftIndex];\n    results[leftIndex] = results[rightIndex];\n    results[rightIndex] = temp;\n    return results;\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniBoxPlot extends MiniChartWithAxes {\n    static chartType: ChartType = 'boxPlot';\n\n    private readonly boxPlotGroups: _Scene.Group[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'boxPlotTooltip');\n\n        const padding = this.padding;\n        const size = this.size;\n\n        const data = [11, 11.5, 10.5];\n\n        const maxRatio = 1.2;\n        const q3Ratio = 1.1;\n        const q1Ratio = 0.9;\n        const minRatio = 0.8;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [\n            data.reduce((a, b) => Math.min(a, b), Infinity) * minRatio,\n            data.reduce((a, b) => Math.max(a, b), 0) * maxRatio,\n        ];\n        yScale.range = [size - 1.5 * padding, padding];\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.4;\n        xScale.paddingOuter = 0.2;\n\n        const bandwidth = Math.round(xScale.bandwidth);\n        const halfBandWidth = Math.round(xScale.bandwidth / 2);\n\n        this.boxPlotGroups = data.map((datum, i) => {\n            let [minValue, q1Value, q3Value, maxValue] = [\n                datum * minRatio,\n                datum * q1Ratio,\n                datum * q3Ratio,\n                datum * maxRatio,\n            ];\n\n            const top = Math.round(yScale.convert(q3Value));\n            const left = Math.round(xScale.convert(i));\n            const right = Math.round(left + bandwidth);\n            const bottom = Math.round(yScale.convert(q1Value));\n            const min = Math.round(yScale.convert(minValue));\n            const mid = Math.round(yScale.convert(datum));\n            const max = Math.round(yScale.convert(maxValue));\n            const whiskerX = left + halfBandWidth;\n\n            const boxPlotGroup = new _Scene.Group();\n\n            const box = new _Scene.Rect();\n            const median = new _Scene.Line();\n            const topWhisker = new _Scene.Line();\n            const bottomWhisker = new _Scene.Line();\n            const topCap = new _Scene.Line();\n            const bottomCap = new _Scene.Line();\n\n            box.x = left;\n            box.y = top;\n            box.width = bandwidth;\n            box.height = bottom - top;\n            box.strokeWidth = 1;\n            box.strokeOpacity = 0.75;\n            box.crisp = true;\n\n            this.setLineProperties(median, left, right, mid, mid);\n            this.setLineProperties(topWhisker, whiskerX, whiskerX, max, top);\n            this.setLineProperties(bottomWhisker, whiskerX, whiskerX, min, bottom);\n            this.setLineProperties(topCap, left, right, max, max);\n            this.setLineProperties(bottomCap, left, right, min, min);\n\n            boxPlotGroup.append([box, median, topWhisker, bottomWhisker, topCap, bottomCap]);\n            return boxPlotGroup;\n        });\n\n        this.updateColors(fills, strokes, themeTemplateParameters, isCustomTheme);\n        this.root.append(this.boxPlotGroups);\n    }\n\n    updateColors(\n        fills: string[],\n        strokes: string[],\n        themeTemplateParameters?: ThemeTemplateParameters,\n        isCustomTheme?: boolean\n    ) {\n        const themeBackgroundColor = themeTemplateParameters?.properties.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(themeBackgroundColor) ? themeBackgroundColor[0] : themeBackgroundColor) ?? 'white';\n\n        this.boxPlotGroups.forEach((group, i) => {\n            group.children?.forEach((node: _Scene.Rect | _Scene.Line) => {\n                const fill = fills[i % fills.length];\n                node.fill = isCustomTheme ? fill : _Util.Color.interpolate(fill, backgroundFill)(0.7);\n                node.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n\n    setLineProperties(line: _Scene.Line, x1: number, x2: number, y1: number, y2: number) {\n        line.x1 = x1;\n        line.x2 = x2;\n        line.y1 = y1;\n        line.y2 = y2;\n        line.strokeOpacity = 0.75;\n    }\n}\n", "import { _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { MiniChart } from '../miniChart';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniTreemap extends MiniChart {\n    static chartType: ChartType = 'treemap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'treemapTooltip');\n\n        const { size, padding } = this;\n\n        const data: number[][] = [\n            [1, 1],\n            [3, 2, 1],\n        ];\n        \n        const treeSize = data.length;\n        const treePadding = treeSize % 2 === 0 ? 0.3 : 0.2;\n        const range = [padding, size - padding];\n\n        const columns = data.length;\n        const columnParts = (columns * (columns + 1)) / 2;\n        const columnPadding = treePadding / (columns - 1);\n\n        const availableRange = range[1] - range[0];\n        const availableWidth = availableRange - treePadding;\n\n        let previousX = range[0];\n        this.rects = data.reduce((rects, d, columnIndex) => {\n            rects ??= [];\n\n            const widthRatio = (columns - columnIndex) / columnParts;\n            const width = availableWidth * widthRatio;\n\n            const rows = d.length;\n            const rowParts = d.reduce((parts, ratio) => (parts += ratio), 0);\n            const rowPadding = treePadding / (rows - 1 || 1);\n            const availableHeight = rows > 1 ? availableRange - treePadding : availableRange;\n\n            let previousY = range[0];\n            const xRects = d.map((ratio) => {\n                const rect = new _Scene.Rect();\n\n                const height = (availableHeight * ratio) / rowParts;\n\n                rect.x = previousX;\n                rect.y = previousY;\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0.75;\n                rect.crisp = true;\n\n                previousY += height + rowPadding;\n                return rect;\n            });\n\n            previousX += width + columnPadding;\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { properties } = themeTemplate ?? {};\n        const defaultBackgroundColor = properties?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        this.rects.forEach((rect, i) => {\n            rect.fill = fills[i % strokes.length];\n            rect.stroke = isCustomTheme ? strokes[i % strokes.length] : backgroundFill;\n        });\n    }\n}\n", "import { MiniChartWithPolarAxes } from '../miniChartWithPolarAxes';\nimport { _Scene } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\n\nexport class MiniSunburst extends MiniChartWithPolarAxes {\n    static chartType: ChartType = 'sunburst';\n    private readonly series: _Scene.Group[];\n\n    // Hierarchical data using multidimensional array\n    private data = [\n        [[], []],\n        [[], []],\n        [[], []],\n    ];\n\n    // Rotate the chart by the given angle (-90 degrees)\n    private angleOffset = -Math.PI / 2;\n\n    private innerRadiusRatio = 0;\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'sunburstTooltip');\n\n        this.showRadiusAxisLine = false;\n        this.showAngleAxisLines = false;\n        \n        const { data, size, padding, angleOffset, innerRadiusRatio } = this;\n\n        const radius = (size - padding * 2) / 2;\n\n        const angleRange = [angleOffset + 0, angleOffset + 2 * Math.PI];\n        const angleExtent = Math.abs(angleRange[1] - angleRange[0]);\n\n        const radiusRange = [radius * innerRadiusRatio, radius];\n        const radiusExtent = Math.abs(radiusRange[1] - radiusRange[0]);\n        \n        let maxDepth = 0;\n        const findMaxDepth = (data: any[], parentDepth: number) => {\n            data.forEach((child) => {\n                const depth = parentDepth + 1;\n                maxDepth = Math.max(maxDepth, depth);\n                findMaxDepth(child, depth);\n            });\n        };\n\n        findMaxDepth(data, 0);\n\n        const radiusRatio = radiusExtent / maxDepth;\n        const center = this.size / 2;\n        const startAngle = angleRange[0];\n        \n        this.series = [];\n\n        const createSectors = (\n            data: any[],\n            depth: number,\n            startAngle: number,\n            availableAngle: number,\n            group?: _Scene.Group\n        ) => {\n            const isArray = Array.isArray(data);\n\n            if (!isArray) {\n                return;\n            }\n\n            const childDepth = depth + 1;\n\n            let previousAngle = startAngle;\n\n            data.forEach((child, childIndex, children) => {\n                let childGroup = group;\n                if (!childGroup) {\n                    childGroup = new _Scene.Group();\n                    this.series.push(childGroup);\n                }\n\n                const innerRadius = radiusRange[0] + depth * radiusRatio;\n                const outerRadius = radiusRange[0] + childDepth * radiusRatio;\n\n                const angleRatio = 1 / children.length;\n                const start = previousAngle;\n                const end = start + availableAngle * angleRatio;\n\n                const sector = new _Scene.Sector();\n                sector.centerX = center;\n                sector.centerY = center;\n                sector.innerRadius = innerRadius;\n                sector.outerRadius = outerRadius;\n                sector.startAngle = start;\n                sector.endAngle = end;\n                sector.stroke = undefined;\n                sector.strokeWidth = 0;\n                sector.inset = 0.75;\n\n                previousAngle = end;\n\n                childGroup.append(sector);\n\n                createSectors(child, childDepth, start, Math.abs(end - start), childGroup);\n            });\n        };\n\n        createSectors(data, 0, startAngle, angleExtent);\n\n        this.root.append(this.series);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.series.forEach((group, i) => {\n            group.children?.forEach((sector: _Scene.Sector) => {\n                sector.fill = fills[i % fills.length];\n                sector.stroke = strokes[i % strokes.length];\n            });\n        });\n    }\n}\n", "import { _Scene, _Theme, _Util } from 'ag-charts-community';\nimport { ChartType } from '@ag-grid-community/core';\nimport { MiniChart } from '../miniChart';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniHeatmap extends MiniChart {\n    static chartType: ChartType = 'heatmap';\n    private readonly rects: _Scene.Rect[];\n\n    constructor(\n        container: HTMLElement,\n        fills: string[],\n        strokes: string[],\n        themeTemplate: ThemeTemplateParameters,\n        isCustomTheme: boolean\n    ) {\n        super(container, 'heatmapTooltip');\n\n        const { size, padding } = this;\n\n        const heatmapSize = 3;\n\n        const data = Array.from({ length: heatmapSize }, (_, __) =>\n            Array.from({ length: heatmapSize }, (_, yIndex) => yIndex)\n        );\n        const domain = data.map((_, index) => index);\n\n        const xScale = new _Scene.BandScale();\n        xScale.domain = domain;\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.01;\n        xScale.paddingOuter = 0.1;\n\n        const yScale = new _Scene.BandScale();\n        yScale.domain = domain;\n        yScale.range = [padding, size - padding];\n        yScale.paddingInner = 0.01;\n        yScale.paddingOuter = 0.1;\n\n        const width = xScale.bandwidth ?? 0;\n        const height = yScale.bandwidth ?? 0;\n\n        this.rects = data.reduce((rects, d: [], index) => {\n            rects ??= [];\n            const xRects = d.map((_, yIndex) => {\n                const rect = new _Scene.Rect();\n                rect.x = xScale.convert(index);\n                rect.y = yScale.convert(yIndex);\n                rect.width = width;\n                rect.height = height;\n                rect.strokeWidth = 0;\n                rect.crisp = true;\n\n                return rect;\n            });\n\n            rects.push(...xRects);\n\n            return rects;\n        }, [] as _Scene.Rect[]);\n\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n\n        const rectGroup = new _Scene.Group();\n        rectGroup.setClipRectInGroupCoordinateSpace(new _Scene.BBox(padding, padding, size - padding, size - padding));\n        rectGroup.append(this.rects);\n        this.root.append(rectGroup);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { properties } = themeTemplate ?? {};\n        const defaultColorRange = properties?.get(_Theme.DEFAULT_DIVERGING_SERIES_COLOUR_RANGE);\n        const defaultBackgroundColor = properties?.get(_Theme.DEFAULT_BACKGROUND_COLOUR);\n        const backgroundFill =\n            (Array.isArray(defaultBackgroundColor) ? defaultBackgroundColor[0] : defaultBackgroundColor) ?? 'white';\n\n        const colorRange = isCustomTheme ? [fills[0], fills[1]] : defaultColorRange;\n        const stroke = isCustomTheme ? strokes[0] : backgroundFill;\n\n        this.rects.forEach((rect, i) => {\n            rect.fill = _Util.Color.interpolate(colorRange[0], colorRange[1])(i * 0.2);\n            rect.stroke = stroke;\n        });\n    }\n}\n", "import { ChartType } from '@ag-grid-community/core';\nimport { _Scene, _Theme } from 'ag-charts-community';\nimport { accumulateData } from '../miniChartHelpers';\nimport { MiniChartWithAxes } from '../miniChartWithAxes';\nimport { ThemeTemplateParameters } from '../../miniChartsContainer';\n\nexport class MiniWaterfall extends MiniChartWithAxes {\n    static chartType: ChartType = 'waterfall';\n\n    private readonly bars: _Scene.Rect[];\n\n    private data = [4, 3, -3, 6, -3];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[], themeTemplate: ThemeTemplateParameters, isCustomTheme: boolean) {\n        super(container, 'waterfallTooltip');\n\n        this.bars = this.createWaterfall(this.root, this.data, this.size, this.padding, 'vertical').bars;\n        this.updateColors(fills, strokes, themeTemplate, isCustomTheme);\n    }\n\n    updateColors(fills: string[], strokes: string[], themeTemplate?: ThemeTemplateParameters, isCustomTheme?: boolean) {\n        const { data } = this;\n        const { properties } = themeTemplate ?? {};\n        const palettePositive = {\n            fill: fills[0],\n            stroke: strokes[0],\n        };\n        const paletteNegative = {\n            fill: fills[1],\n            stroke: strokes[1],\n        }\n        const positive = isCustomTheme ? palettePositive : properties?.get(_Theme.DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS) ?? palettePositive;\n        const negative = isCustomTheme ? paletteNegative : properties?.get(_Theme.DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS) ?? paletteNegative;\n        this.bars.forEach((bar, i) => {\n            const isPositive = data[i] >= 0;\n            bar.fill = isPositive ? positive.fill : negative.fill;\n            bar.stroke = isPositive ? positive.stroke : negative.stroke;\n        });\n    }\n\n    createWaterfall(\n        root: _Scene.Group,\n        data: number[],\n        size: number,\n        padding: number,\n        direction: 'horizontal' | 'vertical'\n    ): { bars: _Scene.Rect[] } {\n        const scalePadding = 2 * padding;\n\n        const { processedData, min, max } = accumulateData(data.map((d) => [d]));\n        const flatData = processedData.reduce((flat, d) => flat.concat(d), []);\n\n        const yScale = new _Scene.LinearScale();\n        yScale.domain = [Math.min(min, 0), max];\n        yScale.range = [size - scalePadding, scalePadding];\n\n        const xScale = new _Scene.BandScale<number>();\n        xScale.domain = data.map((_, index) => index);\n        xScale.range = [padding, size - padding];\n        xScale.paddingInner = 0.2;\n        xScale.paddingOuter = 0.3;\n\n        const width = xScale.bandwidth;\n\n        const connectorLine = new _Scene.Path();\n        connectorLine.stroke = '#575757';\n        connectorLine.strokeWidth = 0;\n        const pixelAlignmentOffset = (Math.floor(connectorLine.strokeWidth) % 2) / 2;\n\n        const connectorPath = connectorLine.path;\n        connectorPath.clear();\n\n        const barAlongX = direction === 'horizontal';\n\n        const bars = flatData.map((datum, i) => {\n            const previousDatum = i > 0 ? flatData[i - 1] : 0;\n            const rawValue = data[i];\n            const isPositive = rawValue > 0;\n\n            const currY = Math.round(yScale.convert(datum));\n            const trailY = Math.round(yScale.convert(previousDatum));\n            const y = (isPositive ? currY : trailY) - pixelAlignmentOffset;\n            const bottomY = (isPositive ? trailY : currY) + pixelAlignmentOffset;\n            const height = Math.abs(bottomY - y);\n\n            const x = xScale.convert(i);\n\n            const rect = new _Scene.Rect();\n            rect.x = barAlongX ? y : x;\n            rect.y = barAlongX ? x : y;\n            rect.width = barAlongX ? height : width;\n            rect.height = barAlongX ? width : height;\n            rect.strokeWidth = 0;\n            rect.crisp = true;\n\n            const moveTo = currY + pixelAlignmentOffset;\n            const lineTo = trailY + pixelAlignmentOffset;\n\n            if (i > 0) {\n                const lineToX = barAlongX ? lineTo : rect.x;\n                const lineToY = barAlongX ? rect.y : lineTo;\n                connectorPath.lineTo(lineToX, lineToY);\n            }\n            const moveToX = barAlongX ? moveTo : rect.x;\n            const moveToY = barAlongX ? rect.y : moveTo;\n            connectorPath.moveTo(moveToX, moveToY);\n\n            return rect;\n        });\n\n        root.append([connectorLine, ...bars]);\n\n        return { bars };\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams, createLinePaths } from \"../miniChartHelpers\";\n\nexport class MiniColumnLineCombo extends MiniChartWithAxes {\n\n    static chartType: ChartType = 'columnLineCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [\n        [5, 4, 6, 5, 4]\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"columnLineComboTooltip\");\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i+2];\n        });\n    }\n}\n", "import { MiniChartWithAxes } from \"../miniChartWithAxes\";\nimport { _Scene } from \"ag-charts-community\";\nimport { ChartType } from \"@ag-grid-community/core\";\nimport { createColumnRects, CreateColumnRectsParams } from \"../miniChartHelpers\";\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\nexport class MiniAreaColumnCombo extends MiniChartWithAxes {\n    static chartType: ChartType = 'areaColumnCombo';\n\n    private columns: _Scene.Rect[];\n    private areas: _Scene.Path[];\n\n    private columnData = [3, 4.5];\n\n    private areaData = [\n        [5, 4, 6, 5, 4],\n    ];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, \"areaColumnComboTooltip\");\n\n        const { root, columnData, areaData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 6],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        // scale for area series\n        const xScale = new _Scene.BandScale<number>();\n        xScale.range = [padding, size - padding];\n        xScale.domain = [0, 1, 2, 3, 4];\n        xScale.paddingInner = 1;\n        xScale.paddingOuter = 0;\n\n        const yScale = new _Scene.LinearScale();\n        yScale.range = [size - padding, padding];\n        yScale.domain = [0, 6];\n\n        const pathData: Coordinate[][] = [];\n        const yZero = yScale.convert(0);\n        const firstX = xScale.convert(0);\n\n        areaData.forEach((series, i) => {\n            const points = pathData[i] || (pathData[i] = []);\n            series.forEach((data, j) => {\n                const yDatum = data;\n                const xDatum = j;\n\n                const x = xScale.convert(xDatum);\n                const y = yScale.convert(yDatum);\n\n                points[j] = { x, y };\n            });\n\n            const lastX = xScale.convert(series.length - 1);\n\n            pathData[i].push({\n                x: lastX,\n                y: yZero\n            }, {\n                x: firstX,\n                y: yZero\n            });\n        });\n\n        this.areas = pathData.map((points) => {\n            const area = new _Scene.Path();\n            area.strokeWidth = 0;\n            area.fillOpacity = 0.8;\n\n            const path = area.path;\n            points.forEach((point, i) => path[i > 0 ? 'lineTo' : 'moveTo'](point.x, point.y));\n\n            return area;\n        });\n\n        root.append(this.areas);\n        root.append(([]as _Scene.Rect[]).concat.apply([], this.columns));\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.areas.forEach((area, i) => {\n            area.fill = fills[i];\n            area.stroke = strokes[i];\n        });\n\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i+1];\n            bar.stroke = strokes[i+1];\n        });\n    }\n}\n", "import { _Scene } from \"ag-charts-community\";\nimport { ChartType } from '@ag-grid-community/core';\nimport { createColumnRects, CreateColumnRectsParams, createLinePaths } from '../miniChartHelpers';\nimport { MiniChart } from '../miniChart';\n\nexport class MiniCustomCombo extends MiniChart {\n    static chartType: ChartType = 'customCombo';\n\n    private columns: _Scene.Rect[];\n    private lines: _Scene.Path[];\n\n    private columnData = [3, 4];\n\n    private lineData = [[5, 4, 6, 5, 4]];\n\n    constructor(container: HTMLElement, fills: string[], strokes: string[]) {\n        super(container, 'customComboTooltip');\n\n        const { root, columnData, lineData, size, padding } = this;\n\n        this.columns = createColumnRects({\n            stacked: false,\n            root,\n            data: columnData,\n            size,\n            padding,\n            xScaleDomain: [0, 1],\n            yScaleDomain: [0, 4],\n            xScalePadding: 0.5,\n        } as CreateColumnRectsParams);\n\n        root.append(this.columns);\n\n        this.lines = createLinePaths(root, lineData, size, padding);\n\n        const axisStroke = 'grey';\n        const axisOvershoot = 3;\n\n        const leftAxis = new _Scene.Line();\n        leftAxis.x1 = padding;\n        leftAxis.y1 = padding;\n        leftAxis.x2 = padding;\n        leftAxis.y2 = size - padding + axisOvershoot;\n        leftAxis.stroke = axisStroke;\n\n        const bottomAxis = new _Scene.Line();\n        bottomAxis.x1 = padding - axisOvershoot + 1;\n        bottomAxis.y1 = size - padding;\n        bottomAxis.x2 = size - padding + 1;\n        bottomAxis.y2 = size - padding;\n        bottomAxis.stroke = axisStroke;\n\n        const penIcon = new _Scene.Path();\n        this.buildPenIconPath(penIcon);\n        penIcon.fill = 'whitesmoke';\n        penIcon.stroke = 'darkslategrey';\n        penIcon.strokeWidth = 1;\n\n        root.append([bottomAxis, leftAxis, penIcon]);\n\n        this.updateColors(fills, strokes);\n    }\n\n    updateColors(fills: string[], strokes: string[]) {\n        this.columns.forEach((bar: _Scene.Rect, i: number) => {\n            bar.fill = fills[i];\n            bar.stroke = strokes[i];\n        });\n\n        this.lines.forEach((line: _Scene.Path, i: number) => {\n            line.stroke = fills[i + 2];\n        });\n    }\n\n    buildPenIconPath(penIcon: _Scene.Path) {\n        const { path } = penIcon;\n        path.moveTo(25.76, 43.46);\n        path.lineTo(31.27, 48.53);\n        path.moveTo(49.86, 22);\n        path.lineTo(49.86, 22);\n        path.cubicCurveTo(49.01994659053345, 21.317514933510974, 47.89593834348529, 21.09645997825817, 46.86, 21.41);\n        path.lineTo(46.86, 21.41);\n        path.cubicCurveTo(45.55460035985361, 21.77260167850787, 44.38777081121966, 22.517979360321792, 43.51, 23.55);\n        path.lineTo(25.51, 43.8);\n        path.lineTo(25.43, 43.89);\n        path.lineTo(23.01, 51.89);\n        path.lineTo(22.83, 52.46);\n        path.lineTo(31.02, 48.86);\n        path.lineTo(49.02, 28.52);\n        path.lineTo(49.02, 28.52);\n        path.cubicCurveTo(49.940716461596224, 27.521914221246085, 50.54302631059587, 26.2720342455763, 50.75, 24.93);\n        path.lineTo(50.75, 24.93);\n        path.cubicCurveTo(50.95363374988308, 23.866379846512814, 50.62080640232334, 22.77066734274871, 49.86, 22.0);\n        path.closePath();\n        path.moveTo(41.76, 25.5);\n        path.lineTo(47.34, 30.5);\n        path.moveTo(40.74, 26.65);\n        path.lineTo(46.25, 31.71);\n    }\n}\n", "import {\n    Autowired,\n    ChartMenuOptions,\n    Component,\n    RefSelector,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\nimport { ChartTranslationKey, ChartTranslationService } from \"../services/chartTranslationService\";\n\ninterface ChartToolbarButton {\n    buttonName: ChartMenuOptions;\n    iconName: string;\n    callback: (eventSource: HTMLElement) => void;\n}\n\nexport class ChartToolbar extends Component {\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n    @RefSelector(\"eMenu\") private eMenu: HTMLButtonElement;\n\n    private buttonListenersDestroyFuncs: ((() => null) | undefined)[] = [];\n\n    constructor() {\n        super(/* html */`<div class=\"ag-chart-menu\" ref=\"eMenu\"></div>`);\n    }\n\n    public updateParams(params: {\n        buttons: ChartToolbarButton[]\n    }): void {\n        const { buttons } = params;\n        this.createButtons(buttons);\n    }\n\n    private createButtons(buttons: ChartToolbarButton[]): void {\n        this.buttonListenersDestroyFuncs.forEach(func => func?.());\n        this.buttonListenersDestroyFuncs = [];\n\n        const menuEl = this.eMenu;\n        _.clearElement(menuEl);\n\n        buttons.forEach(buttonConfig => {\n            const { buttonName, iconName, callback } = buttonConfig;\n            const buttonEl = this.createButton(iconName);\n\n            const tooltipTitle = this.chartTranslationService.translate(buttonName + 'ToolbarTooltip' as ChartTranslationKey);\n            if (tooltipTitle && buttonEl instanceof HTMLElement) {\n                buttonEl.title = tooltipTitle;\n            }\n\n            this.buttonListenersDestroyFuncs.push(\n                this.addManagedListener(buttonEl, 'click', (event: MouseEvent) => callback(event.target as HTMLElement))\n            );\n\n            menuEl.appendChild(buttonEl);\n        });\n    }\n\n    private createButton(iconName: string): Element {\n        let buttonEl = _.createIconNoSpan(\n            iconName,\n            this.gridOptionsService,\n            undefined,\n            true\n        )!;\n        buttonEl.classList.add('ag-chart-menu-icon');\n\n        if (!this.chartMenuService.isLegacyFormat()) {\n            buttonEl = this.wrapButton(buttonEl);\n        }\n\n        return buttonEl;\n    }\n\n    private wrapButton(buttonEl: Element): HTMLElement {\n        const wrapperEl = this.gridOptionsService.getDocument().createElement('button');\n        wrapperEl.appendChild(buttonEl);\n        wrapperEl.classList.add('ag-chart-menu-toolbar-button');\n        return wrapperEl;\n    }\n\n    protected destroy(): void {\n        this.buttonListenersDestroyFuncs = [];\n        super.destroy();\n    }\n}", "import { Autowired, Component, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartMenu } from \"../menu/chartMenu\";\nimport { ChartTranslationService } from \"../services/chartTranslationService\";\nimport { ChartController } from \"../chartController\";\nimport { ChartOptionsProxy, ChartOptionsService } from '../services/chartOptionsService';\nimport { ChartMenuContext } from \"../menu/chartMenuContext\";\nimport { ChartMenuService } from \"../services/chartMenuService\";\n\ninterface BBox { x: number; y: number; width: number; height: number }\n\nexport class TitleEdit extends Component {\n    private static TEMPLATE = /* html */\n        `<textarea\n             class=\"ag-chart-title-edit\"\n             style=\"padding:0; border:none; border-radius: 0; min-height: 0; text-align: center; resize: none;\" />\n        `;\n\n    @Autowired('chartTranslationService') private chartTranslationService: ChartTranslationService;\n    @Autowired('chartMenuService') private chartMenuService: ChartMenuService;\n\n    private destroyableChartListeners: (() => void)[] = [];\n    private chartController: ChartController;\n    private chartOptionsService: ChartOptionsService;\n    private chartMenuUtils: ChartOptionsProxy;\n    private editing: boolean = false;\n\n    constructor(private readonly chartMenu: ChartMenu) {\n        super(TitleEdit.TEMPLATE);\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.addManagedListener(this.getGui(), 'keydown', (e: KeyboardEvent) => {\n            if (this.editing && e.key === 'Enter' && !e.shiftKey) {\n                this.handleEndEditing();\n                e.preventDefault();\n            }\n        });\n        this.addManagedListener(this.getGui(), 'input', () => {\n            if (this.editing) {\n                this.updateHeight();\n            }\n        });\n        this.addManagedListener(this.getGui(), 'blur', () => this.endEditing());\n    }\n\n    /* should be called when the containing component changes to a new chart proxy */\n    public refreshTitle(\n        chartMenuContext: ChartMenuContext\n    ) {\n        this.chartController = chartMenuContext.chartController;\n        this.chartOptionsService = chartMenuContext.chartOptionsService;\n        this.chartMenuUtils = chartMenuContext.chartMenuParamsFactory.getChartOptions();\n\n        for (const destroyFn of this.destroyableChartListeners) {\n            destroyFn();\n        }\n        this.destroyableChartListeners = [];\n        \n        const chartProxy = this.chartController.getChartProxy();\n        const chart = chartProxy.getChart();\n        const canvas = chart.scene.canvas.element;\n\n        const destroyDbleClickListener = this.addManagedListener(canvas, 'dblclick', event => {\n            const { title } = chart;\n\n            if (title && title.node.containsPoint(event.offsetX, event.offsetY)) {\n                const bbox = title.node.computeBBox()!;\n                const xy = title.node.inverseTransformPoint(bbox.x, bbox.y);\n\n                this.startEditing({ ...bbox, ...xy }, canvas.width);\n            }\n        });\n\n        let wasInTitle = false;\n        const destroyMouseMoveListener = this.addManagedListener(canvas, 'mousemove', event => {\n            const { title } = chart;\n\n            const inTitle = !!(title && title.enabled && title.node.containsPoint(event.offsetX, event.offsetY));\n            if (wasInTitle !== inTitle) {\n                canvas.style.cursor = inTitle ? 'pointer' : '';\n            }\n\n            wasInTitle = inTitle;\n        });\n\n        this.destroyableChartListeners = [\n            destroyDbleClickListener!,\n            destroyMouseMoveListener!\n        ];\n    }\n\n    private startEditing(titleBBox: BBox, canvasWidth: number): void {\n        if (this.chartMenuService.isLegacyFormat() && this.chartMenu && this.chartMenu.isVisible()) {\n            // currently, we ignore requests to edit the chart title while the chart menu is showing\n            // because the click to edit the chart will also close the chart menu, making the position\n            // of the title change.\n            return;\n        }\n\n        if (this.editing) {\n            return;\n        }\n        this.editing = true;\n\n        const minimumTargetInputWidth: number = 300;\n        const inputWidth = Math.max(Math.min(titleBBox.width + 20, canvasWidth), minimumTargetInputWidth);\n\n        const element = this.getGui() as HTMLTextAreaElement;\n\n        element.classList.add('currently-editing');\n        const inputStyle = element.style;\n\n        // match style of input to title that we're editing\n        inputStyle.fontFamily = this.chartMenuUtils.getValue('title.fontFamily');\n        inputStyle.fontWeight = this.chartMenuUtils.getValue('title.fontWeight');\n        inputStyle.fontStyle = this.chartMenuUtils.getValue('title.fontStyle');\n        inputStyle.fontSize = this.chartMenuUtils.getValue('title.fontSize') + 'px';\n        inputStyle.color = this.chartMenuUtils.getValue('title.color');\n\n        // populate the input with the title, unless the title is the placeholder:\n        const oldTitle = this.chartMenuUtils.getValue('title.text');\n        const isTitlePlaceholder = oldTitle === this.chartTranslationService.translate('titlePlaceholder');\n        element.value = isTitlePlaceholder ? '' : oldTitle;\n\n        const oldTitleLines = oldTitle.split(/\\r?\\n/g).length;\n\n        inputStyle.left = Math.round(titleBBox.x + titleBBox.width / 2 - inputWidth / 2 - 1) + 'px';\n        inputStyle.top = Math.round(titleBBox.y + titleBBox.height / 2 - (oldTitleLines * this.getLineHeight()) / 2 - 2) + 'px';\n        inputStyle.width = Math.round(inputWidth) + 'px';\n        inputStyle.lineHeight = this.getLineHeight() + 'px';\n        this.updateHeight();\n\n        element.focus();\n    }\n\n    private updateHeight() {\n        const element = this.getGui() as HTMLTextAreaElement;\n\n        // The element should cover the title and provide enough space for the new one.\n        const oldTitleLines = this.chartMenuUtils.getValue('title.text').split(/\\r?\\n/g).length;\n        const currentTitleLines = element.value.split(/\\r?\\n/g).length;\n\n        element.style.height = (Math.round(Math.max(oldTitleLines, currentTitleLines) * this.getLineHeight()) + 4) + 'px';\n    }\n\n    private getLineHeight() : number {\n        const fixedLineHeight = this.chartMenuUtils.getValue('title.lineHeight');\n        if (fixedLineHeight) {\n            return parseInt(fixedLineHeight);\n        }\n        return Math.round(parseInt(this.chartMenuUtils.getValue('title.fontSize')) * 1.2);\n    }\n\n    private handleEndEditing() {\n        // special handling to avoid flicker caused by delay when swapping old and new titles\n\n        // 1 - store current title color\n        const titleColor = this.chartMenuUtils.getValue('title.color');\n\n        // 2 - hide title by making it transparent\n        const transparentColor = 'rgba(0, 0, 0, 0)';\n        this.chartMenuUtils.setValue('title.color', transparentColor);\n\n        // 3 - trigger 'end editing' - this will update the chart with the new title\n        this.chartOptionsService.awaitChartOptionUpdate(() => this.endEditing());\n\n        // 4 - restore title color to its original value\n        this.chartOptionsService.awaitChartOptionUpdate(() => {\n            this.chartMenuUtils.setValue('title.color', titleColor)\n        });\n    }\n\n    private endEditing() {\n        if (!this.editing) {\n            return;\n        }\n        this.editing = false;\n\n        const value = (this.getGui() as HTMLTextAreaElement).value;\n        if (value && value.trim() !== '') {\n            this.chartMenuUtils.setValue('title.text', value);\n            this.chartMenuUtils.setValue('title.enabled', true);\n        } else {\n            this.chartMenuUtils.setValue('title.text', '');\n            this.chartMenuUtils.setValue('title.enabled', false);\n        }\n        this.getGui().classList.remove('currently-editing');\n\n        // await chart updates so `chartTitleEdit` event consumers can read the new state correctly\n        this.chartOptionsService.awaitChartOptionUpdate(() => {\n            this.eventService.dispatchEvent({type: 'chartTitleEdit'});\n        });\n    }\n}\n", "import { _ } from \"@ag-grid-community/core\";\nimport { AgBarSeriesOptions, AgCartesianAxisOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\nimport { deepMerge } from \"../../utils/object\";\nimport { hexToRGBA } from \"../../utils/color\";\nimport { isHorizontal, isStacked } from \"../../utils/seriesTypeMapper\";\n\nexport class BarChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: isHorizontal(this.chartType) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isHorizontal(this.chartType) ? 'bottom' : 'left',\n            },\n        ];\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params: any) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams): AgBarSeriesOptions[] {\n        const [category] = params.categories;\n        const series: AgBarSeriesOptions[] = params.fields.map(f => (\n            {\n                type: this.standaloneChartType,\n                direction: isHorizontal(this.chartType) ? 'horizontal' : 'vertical',\n                stacked: this.crossFiltering || isStacked(this.chartType),\n                normalizedTo: this.isNormalised() ? 100 : undefined,\n                xKey: category.id,\n                xName: category.name,\n                yKey: f.colId,\n                yName: f.displayName\n            } as AgBarSeriesOptions\n        ));\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private extractCrossFilterSeries(series: AgBarSeriesOptions[]): AgBarSeriesOptions[] {\n        const palette = this.getChartPalette();\n\n        const updatePrimarySeries = (seriesOptions: AgBarSeriesOptions, index: number) => {\n            return {\n                ...seriesOptions,\n                highlightStyle: { item: { fill: undefined } },\n                fill: palette?.fills[index],\n                stroke: palette?.strokes[index],\n                listeners: {\n                    nodeClick: this.crossFilterCallback\n                }\n            }\n        }\n\n        const updateFilteredOutSeries = (seriesOptions: AgBarSeriesOptions): AgBarSeriesOptions => {\n            const yKey = seriesOptions.yKey + '-filtered-out';\n            return {\n                ...deepMerge({}, seriesOptions),\n                yKey,\n                fill: hexToRGBA(seriesOptions.fill!, '0.3'),\n                stroke: hexToRGBA(seriesOptions.stroke!, '0.3'),\n                showInLegend: false,\n            }\n        }\n\n        const allSeries: AgBarSeriesOptions[] = [];\n        for (let i = 0; i < series.length; i++) {\n            // update primary series\n            const primarySeries = updatePrimarySeries(series[i], i);\n            allSeries.push(primarySeries);\n\n            // add 'filtered-out' series\n            allSeries.push(updateFilteredOutSeries(primarySeries));\n        }\n        return allSeries;\n    }\n\n    private isNormalised() {\n        const normalisedCharts = ['normalizedColumn', 'normalizedBar'];\n        return !this.crossFiltering && _.includes(normalisedCharts, this.chartType);\n    }\n}\n", "import { _, AgChartTheme as GridAgChartTheme, ChartType, SeriesChartType } from \"@ag-grid-community/core\";\nimport {\n    _Theme,\n    _ModuleSupport,\n    AgCharts,\n    AgChartInstance,\n    AgChartOptions,\n    AgChartTheme,\n    AgChartThemeOverrides,\n    AgChartThemePalette\n} from \"ag-charts-community\";\n\nimport { CrossFilteringContext } from \"../../chartService\";\nimport { ChartSeriesType, getSeriesType } from \"../utils/seriesTypeMapper\";\nimport { deproxy } from \"../utils/integration\";\nimport { applyThemeOverrides, createAgChartTheme, lookupCustomChartTheme } from './chartTheme';\nimport { get } from \"../utils/object\";\n\nexport interface ChartProxyParams {\n    chartInstance?: AgChartInstance;\n    chartType: ChartType;\n    customChartThemes?: { [name: string]: AgChartTheme | GridAgChartTheme };\n    parentElement: HTMLElement;\n    grouping: boolean;\n    getChartThemeName: () => string;\n    getChartThemes: () => string[];\n    getGridOptionsChartThemeOverrides: () => AgChartThemeOverrides | undefined;\n    getExtraPaddingDirections: () => ExtraPaddingDirection[];\n    apiChartThemeOverrides?: AgChartThemeOverrides;\n    crossFiltering: boolean;\n    crossFilterCallback: (event: any, reset?: boolean) => void;\n    chartThemeToRestore?: string;\n    chartOptionsToRestore?: AgChartThemeOverrides;\n    chartPaletteToRestore?: AgChartThemePalette;\n    seriesChartTypes: SeriesChartType[];\n    translate: (toTranslate: string, defaultText?: string) => string;\n}\n\nexport type ExtraPaddingDirection = 'top' | 'right' | 'bottom' | 'left';\n\nexport interface FieldDefinition {\n    colId: string;\n    displayName: string | null;\n}\n\nexport interface UpdateParams {\n    data: any[];\n    grouping: boolean;\n    categories: {\n        id: string;\n        name: string;\n        chartDataType?: string\n    }[];\n    fields: FieldDefinition[];\n    chartId?: string;\n    getCrossFilteringContext: () => CrossFilteringContext,\n    seriesChartTypes: SeriesChartType[];\n    updatedOverrides?: AgChartThemeOverrides;\n}\n\nexport abstract class ChartProxy {\n    private readonly isEnterpriseCharts: boolean;\n    protected readonly chartType: ChartType;\n    protected readonly standaloneChartType: ChartSeriesType;\n\n    protected readonly chart: AgChartInstance;\n    protected readonly crossFiltering: boolean;\n    protected readonly crossFilterCallback: (event: any, reset?: boolean) => void;\n\n    protected clearThemeOverrides = false;\n    \n    protected constructor(protected readonly chartProxyParams: ChartProxyParams) {\n        this.isEnterpriseCharts = _ModuleSupport.enterpriseModule.isEnterprise;\n        this.chart = chartProxyParams.chartInstance!;\n        this.chartType = chartProxyParams.chartType;\n        this.crossFiltering = chartProxyParams.crossFiltering;\n        this.crossFilterCallback = chartProxyParams.crossFilterCallback;\n        this.standaloneChartType = getSeriesType(this.chartType);\n\n        if (this.chart == null) {\n            this.chart = AgCharts.create(this.getCommonChartOptions());\n        } else {\n            // On chart change, reset formatting panel changes.\n            this.clearThemeOverrides = true;\n        }\n    }\n\n    public abstract crossFilteringReset(): void;\n\n    public abstract update(params: UpdateParams): void;\n\n    public updateThemeOverrides(themeOverrides: AgChartThemeOverrides): void {\n        AgCharts.updateDelta(this.getChartRef(), { theme: { overrides: themeOverrides }});\n    }\n\n    public getChart() {\n        return deproxy(this.chart);\n    }\n\n    public getChartRef() {\n        return this.chart;\n    }\n\n    public downloadChart(dimensions?: { width: number; height: number }, fileName?: string, fileFormat?: string) {\n        const { chart } = this;\n        const rawChart = deproxy(chart);\n        const imageFileName = fileName || (rawChart.title ? rawChart.title.text : 'chart');\n        const { width, height } = dimensions || {};\n\n        AgCharts.download(chart, { width, height, fileName: imageFileName, fileFormat });\n    }\n\n    public getChartImageDataURL(type?: string) {\n        return this.getChart().scene.getDataURL(type);\n    }\n\n    private getChartOptions(): AgChartOptions {\n        return this.chart.getOptions();\n    }\n\n    public getChartThemeOverrides(): AgChartThemeOverrides { \n        const chartOptionsTheme = this.getChartOptions().theme as AgChartTheme;\n        return chartOptionsTheme.overrides ?? {};\n    }\n\n    public getChartPalette(): AgChartThemePalette | undefined {\n        return _Theme.getChartTheme(this.getChartOptions().theme).palette;\n    }\n\n    public setPaired(paired: boolean) {\n        // Special handling to make scatter charts operate in paired mode by default, where \n        // columns alternate between being X and Y (and size for bubble). In standard mode,\n        // the first column is used for X and every other column is treated as Y\n        // (or alternates between Y and size for bubble)\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        AgCharts.updateDelta(this.chart, { theme: { overrides: { [seriesType]: { paired }}}});\n    }\n\n    public isPaired(): boolean {\n        const seriesType = getSeriesType(this.chartProxyParams.chartType);\n        return get(this.getChartThemeOverrides(), `${seriesType}.paired`, true);\n    }\n\n    public lookupCustomChartTheme(themeName: string) {\n        return lookupCustomChartTheme(this.chartProxyParams, themeName);\n    }\n\n    protected transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        if (categoryAxis) {\n            // replace the values for the selected category with a complex object to allow for duplicated categories\n            return data.map((d, index) => {\n                const value = d[categoryKey];\n                const valueString = value && value.toString ? value.toString() : '';\n                const datum = { ...d };\n\n                datum[categoryKey] = { id: index, value, toString: () => valueString };\n\n                return datum;\n            });\n        }\n\n        return data;\n    }\n\n    protected getCommonChartOptions(updatedOverrides?: AgChartThemeOverrides) {\n        // Only apply active overrides if chart is initialised.\n        const existingOptions: any = this.clearThemeOverrides ? {} : this.chart?.getOptions() ?? {};\n        const formattingPanelOverrides = this.chart != null ? this.getActiveFormattingPanelOverrides() : undefined;\n        this.clearThemeOverrides = false;\n\n        // Create a base theme and apply the various layers of overrides.\n        const baseTheme = createAgChartTheme(this.chartProxyParams, this, this.isEnterpriseCharts);\n        const chartThemeDefaults = this.getChartThemeDefaults();\n        const theme = applyThemeOverrides(baseTheme, [\n            chartThemeDefaults,\n            updatedOverrides ?? formattingPanelOverrides,\n        ]);\n\n        return {\n            ...existingOptions,\n            theme,\n            container: this.chartProxyParams.parentElement,\n            mode: 'integrated',\n        }\n    }\n\n    /**\n     * Retrieve default theme overrides for the current chart type\n     */\n    protected getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        // Override this method to provide chart type specific theme overrides\n        return undefined;\n    }\n\n    private getActiveFormattingPanelOverrides(): AgChartThemeOverrides {\n        if (this.clearThemeOverrides) {\n            return {};\n        }\n\n        const inUseTheme = this.chart?.getOptions().theme as AgChartTheme;\n        return inUseTheme?.overrides ?? {};\n    }\n\n    public destroy({ keepChartInstance = false } = {}): AgChartInstance | undefined {\n        if (keepChartInstance) {\n            // Reset Charts animation state, so that future updates to this re-used chart instance\n            // behave as-if the chart is brand new. When switching chartTypes, this means we hide\n            // the fact we are reusing the chart instance; the user sees a new chart which behaves\n            // as-if it is a completely new and distinct chart instance.\n            this.chart.resetAnimations();\n            return this.chart;\n        }\n\n        this.destroyChart();\n    }\n\n    protected destroyChart(): void {\n        if (this.chart) {\n            this.chart.destroy();\n            (this.chart as any) = undefined;\n        }\n    }\n}\n", "import { _Scene, AgCartesianAxisType, AgChartInstance, AgPolarAxisOptions } from \"ag-charts-community\";\n\nexport function deproxy(chartOrProxy: AgChartInstance): AgChartActual {\n    if ((chartOrProxy as any).chart != null) {\n        return (chartOrProxy as any).chart;\n    }\n    return chartOrProxy as AgChartActual;\n}\n\n// Extensions to the public ag-charts-community API that Integrated Charts currently depends on for\n// correct operation. Over time we aim to eliminate these and only use the public API.\n//\n// AVOID ADDING MORE DEPENDENCIES ON THESE PRIVATE APIS.\n\nexport interface AgChartActual extends AgChartInstance {\n    title?: _Scene.Caption;\n    width: number;\n    height: number;\n    series: {\n        type: string;\n        toggleSeriesItem(itemId: string, enabled: boolean): void;\n        properties: {\n            [key: string]: any;\n            toJson(): any;\n        };\n    }[];\n    axes?: {\n        type: AgCartesianAxisType | AgPolarAxisOptions['type'];\n        direction: 'x' | 'y';\n    }[];\n    scene: {\n        canvas: {\n            element: HTMLCanvasElement;\n        };\n        getDataURL(type?: string): string;\n    };\n    addEventListener(type: 'click', cb: (even: any) => void): void;\n    waitForUpdate(): Promise<void>;\n}\n\nexport type AgChartAxis = NonNullable<AgChartActual['axes']>[number];\nexport type AgChartAxisType = AgChartAxis['type'];", "import { ChartProxy, ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport {\n    AgAreaSeriesOptions,\n    AgBaseSeriesOptions,\n    AgCartesianAxisOptions,\n    AgCartesianChartOptions,\n    AgCharts,\n    AgLineSeriesOptions,\n} from \"ag-charts-community\";\n\nexport abstract class CartesianChartProxy extends ChartProxy {\n    protected crossFilteringAllPoints = new Set<string>();\n    protected crossFilteringSelectedPoints: string[] = [];\n\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected abstract getAxes(params: UpdateParams): AgCartesianAxisOptions[];\n    protected abstract getSeries(params: UpdateParams): AgBaseSeriesOptions<any>[];\n\n    public update(params: UpdateParams): void {\n        const axes = this.getAxes(params);\n\n        const options: AgCartesianChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    protected getData(params: UpdateParams, axes: AgCartesianAxisOptions[]): any[] {\n        const supportsCrossFiltering = ['area', 'line'].includes(this.standaloneChartType);\n        const xAxisIsCategory = axes.some(axes => axes?.type === 'category');\n        return this.crossFiltering && supportsCrossFiltering ?\n            this.getCrossFilterData(params) :\n            this.getDataTransformedData(params, xAxisIsCategory);\n    }\n\n    private getDataTransformedData(params: UpdateParams, isCategoryAxis: boolean) {\n        const [category] = params.categories;\n        return this.transformData(params.data, category.id, isCategoryAxis);\n    }\n\n    protected getXAxisType(params: UpdateParams) {\n        if (params.grouping) {\n            return 'grouped-category';\n        } else if (CartesianChartProxy.isTimeAxis(params)) {\n            return 'time';\n        }\n        return 'category';\n    }\n\n    private static isTimeAxis(params: UpdateParams): boolean {\n        const [category] = params.categories;\n        if (category && category.chartDataType) {\n            return category.chartDataType === 'time';\n        }\n        const testDatum = params.data[0];\n        return (testDatum && testDatum[category.id]) instanceof Date;\n    }\n\n    public crossFilteringReset(): void {\n        this.crossFilteringSelectedPoints = [];\n        this.crossFilteringAllPoints.clear();\n    }\n\n    protected crossFilteringPointSelected(point: string): boolean {\n        return this.crossFilteringSelectedPoints.length == 0 || this.crossFilteringSelectedPoints.includes(point);\n    }\n\n    protected crossFilteringDeselectedPoints(): boolean {\n        return this.crossFilteringSelectedPoints.length > 0 &&\n            this.crossFilteringAllPoints.size !== this.crossFilteringSelectedPoints.length;\n    }\n\n    protected extractLineAreaCrossFilterSeries(series: (AgLineSeriesOptions | AgAreaSeriesOptions)[], params: UpdateParams) {\n        const [category] = params.categories;\n\n        const getYKey = (yKey: string) => {\n            if (this.standaloneChartType === 'area') {\n                const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n                return (lastSelectedChartId === params.chartId) ? yKey + '-total' : yKey;\n            }\n            return yKey + '-total';\n        }\n\n        return series.map(s => {\n            s.yKey = getYKey(s.yKey!);\n            s.listeners = {\n                nodeClick: (e: any) => {\n                    const value = e.datum![s.xKey!];\n                    const multiSelection = e.event.metaKey || e.event.ctrlKey;\n                    this.crossFilteringAddSelectedPoint(multiSelection, value);\n                    this.crossFilterCallback(e);\n                }\n            };\n            s.marker = {\n                formatter: (p: any) => {\n                    const value = p.datum[category.id];\n                    return {\n                        fill: p.highlighted ? 'yellow' : p.fill,\n                        size: p.highlighted ? 14 : this.crossFilteringPointSelected(value) ? 8 : 0,\n                    };\n                }\n            };\n            if (this.standaloneChartType === 'area') {\n                (s as AgAreaSeriesOptions).fillOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n            if (this.standaloneChartType === 'line') {\n                (s as AgLineSeriesOptions).strokeOpacity = this.crossFilteringDeselectedPoints() ? 0.3 : 1;\n            }\n\n            return s;\n        });\n    }\n\n    private getCrossFilterData(params: UpdateParams): any[] {\n        this.crossFilteringAllPoints.clear();\n        const [category] = params.categories;\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n        const lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n\n        return params.data.map(d => {\n            const value = d[category.id];\n            this.crossFilteringAllPoints.add(value);\n\n            const pointSelected = this.crossFilteringPointSelected(value);\n            if (this.standaloneChartType === 'area' && lastSelectedChartId === params.chartId) {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n            if (this.standaloneChartType === 'line') {\n                d[`${colId}-total`] = pointSelected ? d[colId] : d[colId] + d[filteredOutColId];\n            }\n\n            return d;\n        });\n    }\n\n    private crossFilteringAddSelectedPoint(multiSelection: boolean, value: string): void {\n        multiSelection ? this.crossFilteringSelectedPoints.push(value) : this.crossFilteringSelectedPoints = [value];\n    }\n}\n", "import { _Util } from \"ag-charts-community\";\n\nexport function hexToRGBA(hex: string, alpha: string) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return alpha ? `rgba(${r}, ${g}, ${b}, ${alpha})` : `rgba(${r}, ${g}, ${b})`;\n}\n\nexport function changeOpacity(fills: string[], alpha: number) {\n    return fills.map(fill => {\n        const c = _Util.Color.fromString(fill);\n        return new _Util.Color(c.r, c.g, c.b, alpha).toHexString();\n    });\n}\n", "import { AgAreaSeriesOptions, AgCartesianAxisOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\n\nexport class AreaChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n\n        // Add a default label formatter to show '%' for normalized charts if none is provided\n        if (this.isNormalised()) {\n            const numberAxis = axes[1];\n            numberAxis.label = { ...numberAxis.label, formatter: (params: any) => Math.round(params.value) + '%' };\n        }\n\n        return axes;\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgAreaSeriesOptions[] = params.fields.map(f => (\n            {\n                type: this.standaloneChartType,\n                xKey: category.id,\n                xName: category.name,\n                yKey: f.colId,\n                yName: f.displayName,\n                normalizedTo: this.chartType === 'normalizedArea' ? 100 : undefined,\n                stacked: ['normalizedArea', 'stackedArea'].includes(this.chartType)\n            } as AgAreaSeriesOptions\n        ));\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n\n    private isNormalised() {\n        return !this.crossFiltering && this.chartType === 'normalizedArea';\n    }\n}\n", "import { AgCartesianAxisOptions, AgLineSeriesOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\n\nexport class LineChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom'\n            },\n            {\n                type: 'number',\n                position: 'left'\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams) {\n        const [category] = params.categories;\n        const series: AgLineSeriesOptions[] = params.fields.map(f => (\n            {\n                type: this.standaloneChartType,\n                xKey: category.id,\n                xName: category.name,\n                yKey: f.colId,\n                yName: f.displayName\n            } as AgLineSeriesOptions\n        ));\n\n        return this.crossFiltering ? this.extractLineAreaCrossFilterSeries(series, params) : series;\n    }\n}\n", "import {ChartProxy, ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {\n    AgCharts,\n    AgNightingaleSeriesOptions,\n    AgPolarAxisOptions,\n    AgPolarChartOptions,\n    AgRadarAreaSeriesOptions,\n    AgRadarLineSeriesOptions,\n    AgRadialBarSeriesOptions,\n    AgRadialColumnSeriesOptions\n} from 'ag-charts-community';\n\ntype AgPolarSeriesOptions =\n    AgRadarLineSeriesOptions |\n    AgRadarAreaSeriesOptions |\n    AgNightingaleSeriesOptions |\n    AgRadialBarSeriesOptions |\n    AgRadialColumnSeriesOptions;\n\nexport class PolarChartProxy extends ChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(_: UpdateParams): AgPolarAxisOptions[] {\n        const radialBar = this.standaloneChartType === 'radial-bar';\n        return [\n            {type: radialBar ? 'angle-number' : 'angle-category'},\n            {type: radialBar ? 'radius-category' : 'radius-number'},\n        ];\n    }\n\n    public getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const {fields} = params;\n        const [category] = params.categories;\n        const radialBar = this.standaloneChartType === 'radial-bar';\n\n        return fields.map(f => ({\n            type: this.standaloneChartType as AgRadarAreaSeriesOptions['type'],\n            angleKey: radialBar ? f.colId : category.id,\n            angleName: radialBar ? (f.displayName ?? undefined) : category.name,\n            radiusKey: radialBar ? category.id : f.colId,\n            radiusName: radialBar ? category.name : (f.displayName ?? undefined),\n        }));\n    }\n\n    public update(params: UpdateParams): void {\n        const axes = this.getAxes(params);\n\n        const options: AgPolarChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            data: this.getData(params, axes),\n            axes,\n            series: this.getSeries(params),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    private getData(params: UpdateParams, axes: AgPolarAxisOptions[]): any[] {\n        const isCategoryAxis = axes.some((axis) => axis.type === 'angle-category' || axis.type === 'radius-category');\n        return this.getDataTransformedData(params, isCategoryAxis);\n    }\n\n    private getDataTransformedData(params: UpdateParams, isCategoryAxis: boolean) {\n        const [category] = params.categories;\n        return this.transformData(params.data, category.id, isCategoryAxis);\n    }\n\n    public crossFilteringReset(): void {\n        // cross filtering is not currently supported in polar charts\n    }\n}\n", "import { ChartProxy, ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\nimport { AgCharts, AgDonutSeriesOptions, AgPieSeriesOptions, AgPolarChartOptions, AgPolarSeriesOptions, } from 'ag-charts-community';\n\nimport { changeOpacity } from '../../utils/color';\nimport { deepMerge } from '../../utils/object';\n\ninterface DonutOffset {\n    offsetAmount: number;\n    currentOffset: number;\n}\n\nexport class PieChartProxy extends ChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public update(params: UpdateParams): void {\n        const { data } = params;\n        const [category] = params.categories;\n\n        const options: AgPolarChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            data: this.crossFiltering ? this.getCrossFilterData(params) : this.transformData(data, category.id),\n            series: this.getSeries(params),\n        }\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    private getSeries(params: UpdateParams): AgPolarSeriesOptions[] {\n        const [category] = params.categories;\n        const numFields = params.fields.length;\n\n        const offset = {\n            currentOffset: 0,\n            offsetAmount: numFields > 1 ? 20 : 40\n        };\n\n        const series: (AgPieSeriesOptions | AgDonutSeriesOptions)[] = this.getFields(params).map((f: FieldDefinition) => {\n            // options shared by 'pie' and 'donut' charts\n            const options = {\n                type: this.standaloneChartType as AgPieSeriesOptions['type'],\n                angleKey: f.colId,\n                angleName: f.displayName!,\n                sectorLabelKey: f.colId,\n                calloutLabelName: category.name,\n                calloutLabelKey: category.id,\n            }\n\n            if (this.chartType === 'donut' || this.chartType === 'doughnut') {\n                const { outerRadiusOffset, innerRadiusOffset } = PieChartProxy.calculateOffsets(offset);\n                const title = f.displayName ? {\n                    title: { text: f.displayName, showInLegend: numFields > 1 },\n                } : undefined;\n\n                // augment shared options with 'donut' specific options\n                return {\n                    ...options,\n                    type: 'donut',\n                    outerRadiusOffset,\n                    innerRadiusOffset,\n                    ...title,\n                    calloutLine: {\n                        colors: this.getChartPalette()?.strokes,\n                    }\n                }\n            }\n\n            return options;\n        });\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series) : series;\n    }\n\n    private getCrossFilterData(params: UpdateParams) {\n        const colId = params.fields[0].colId;\n        const filteredOutColId = `${colId}-filtered-out`;\n\n        return params.data.map(d => {\n            const total = d[colId] + d[filteredOutColId];\n            d[`${colId}-total`] = total;\n            d[filteredOutColId] = 1; // normalise to 1\n            d[colId] = d[colId] / total; // fraction of 1\n            return d;\n        });\n    }\n\n    private extractCrossFilterSeries(series: (AgPieSeriesOptions | AgDonutSeriesOptions)[]) {\n        const palette = this.getChartPalette();\n\n        const primaryOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions) => {\n            return {\n                ...seriesOptions,\n                legendItemKey: seriesOptions.calloutLabelKey,\n                calloutLabel: { enabled: false }, // hide labels on primary series\n                highlightStyle: { item: { fill: undefined } },\n                radiusKey: seriesOptions.angleKey,\n                angleKey: seriesOptions.angleKey + '-total',\n                radiusMin: 0,\n                radiusMax: 1,\n                listeners: {\n                    nodeClick: this.crossFilterCallback,\n                },\n            };\n        }\n\n        const filteredOutOptions = (seriesOptions: AgPieSeriesOptions | AgDonutSeriesOptions, angleKey: string) => {\n            return {\n                ...deepMerge({}, primaryOpts),\n                radiusKey: angleKey + '-filtered-out',\n                fills: changeOpacity(seriesOptions.fills ?? palette!.fills, 0.3),\n                strokes: changeOpacity(seriesOptions.strokes ?? palette!.strokes, 0.3),\n                showInLegend: false,\n            };\n        }\n\n        // currently, only single 'donut' cross-filter series are supported\n        const primarySeries = series[0];\n\n        // update primary series\n        const angleKey = primarySeries.angleKey!;\n        const primaryOpts = primaryOptions(primarySeries);\n\n        return [\n            filteredOutOptions(primarySeries, angleKey),\n            primaryOpts,\n        ];\n    }\n\n    private static calculateOffsets(offset: DonutOffset) {\n        const outerRadiusOffset = offset.currentOffset;\n        offset.currentOffset -= offset.offsetAmount;\n\n        const innerRadiusOffset = offset.currentOffset;\n        offset.currentOffset -= offset.offsetAmount;\n\n        return { outerRadiusOffset, innerRadiusOffset };\n    }\n\n    private getFields(params: UpdateParams): FieldDefinition[] {\n        // pie charts only support a single series, donut charts support multiple series\n        return this.chartType === 'pie' ? params.fields.slice(0, 1) : params.fields;\n    }\n\n    public crossFilteringReset() {\n        // not required in pie charts\n    }\n}\n", "import { AgBubbleSeriesOptions, AgCartesianAxisOptions, AgScatterSeriesOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, FieldDefinition, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\nimport { ChartDataModel } from \"../../model/chartDataModel\";\n\ninterface SeriesDefinition {\n    xField: FieldDefinition;\n    yField: FieldDefinition;\n    sizeField?: FieldDefinition;\n}\n\nexport class ScatterChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const [category] = params.categories;\n        const paired = this.isPaired();\n        const seriesDefinitions = this.getSeriesDefinitions(params.fields, paired);\n        const labelFieldDefinition = category.id === ChartDataModel.DEFAULT_CATEGORY ? undefined : category;\n\n        const series = seriesDefinitions.map(seriesDefinition => {\n            if (seriesDefinition?.sizeField) {\n                const opts: AgBubbleSeriesOptions = {\n                    type: 'bubble',\n                    xKey: seriesDefinition!.xField.colId,\n                    xName: seriesDefinition!.xField.displayName ?? undefined,\n                    yKey: seriesDefinition!.yField.colId,\n                    yName: seriesDefinition!.yField.displayName ?? undefined,\n                    title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                    sizeKey: seriesDefinition!.sizeField.colId,\n                    sizeName: seriesDefinition!.sizeField.displayName ?? '',\n                    labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                    labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n                };\n                return opts;\n            }\n\n            const opts: AgScatterSeriesOptions = {\n                type: 'scatter',\n                xKey: seriesDefinition!.xField.colId,\n                xName: seriesDefinition!.xField.displayName ?? undefined,\n                yKey: seriesDefinition!.yField.colId,\n                yName: seriesDefinition!.yField.displayName ?? undefined,\n                title: `${seriesDefinition!.yField.displayName} vs ${seriesDefinition!.xField.displayName}`,\n                labelKey: labelFieldDefinition ? labelFieldDefinition.id : seriesDefinition!.yField.colId,\n                labelName: labelFieldDefinition ? labelFieldDefinition.name : undefined,\n            };\n            return opts;\n        });\n\n        return this.crossFiltering ? this.extractCrossFilterSeries(series, params) : series;\n    }\n\n    private extractCrossFilterSeries(\n        series: (AgScatterSeriesOptions | AgBubbleSeriesOptions)[],\n        params: UpdateParams,\n    ): (AgScatterSeriesOptions | AgBubbleSeriesOptions)[] {\n        const { data } = params;\n        const palette = this.getChartPalette();\n\n        const filteredOutKey = (key: string) => `${key}-filtered-out`;\n\n        const calcMarkerDomain = (data: any, sizeKey?: string) => {\n            const markerDomain: [number, number] = [Infinity, -Infinity];\n            if (sizeKey != null) {\n                for (const datum of data) {\n                    const value = datum[sizeKey] ?? datum[filteredOutKey(sizeKey)];\n                    if (value < markerDomain[0]) {\n                        markerDomain[0] = value;\n                    }\n                    if (value > markerDomain[1]) {\n                        markerDomain[1] = value;\n                    }\n                }\n            }\n            if (markerDomain[0] <= markerDomain[1]) {\n                return markerDomain;\n            }\n            return undefined;\n        };\n\n        const updatePrimarySeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(series: T, idx: number): T => {\n            const fill = palette?.fills[idx];\n            const stroke = palette?.strokes[idx];\n            \n            let markerDomain: [number, number] | undefined = undefined;\n            if (series.type === 'bubble') {\n                const { sizeKey } = series;\n                markerDomain = calcMarkerDomain(data, sizeKey);\n            }\n            const marker = {\n                ...series.marker,\n                fill,\n                stroke,\n                domain: markerDomain,\n            };\n\n            return {\n                ...series,\n                marker,\n                highlightStyle: { item: { fill: 'yellow' } },\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: this.crossFilterCallback\n                },\n            };\n        }\n\n        const updateFilteredOutSeries = <T extends AgScatterSeriesOptions | AgBubbleSeriesOptions>(series: T): T => {\n            let { yKey, xKey } = series;\n\n            let alteredSizeKey = {};\n            if (series.type === 'bubble') {\n                alteredSizeKey = { sizeKey: filteredOutKey(series.sizeKey!) };\n            }\n\n            return {\n                ...series,\n                ...alteredSizeKey,\n                yKey: filteredOutKey(yKey!),\n                xKey: filteredOutKey(xKey!),\n                marker: {\n                    ...series.marker,\n                    fillOpacity: 0.3,\n                    strokeOpacity: 0.3,\n                },\n                showInLegend: false,\n                listeners: {\n                    ...series.listeners,\n                    nodeClick: (e: any) => {\n                        const value = e.datum[filteredOutKey(xKey!)];\n\n                        // Need to remove the `-filtered-out` suffixes from the event so that\n                        // upstream processing maps the event correctly onto grid column ids.\n                        const filterableEvent = {\n                            ...e,\n                            xKey,\n                            datum: { ...e.datum, [xKey!]: value },\n                        };\n                        this.crossFilterCallback(filterableEvent);\n                    }\n                },\n            };\n        };\n\n        const updatedSeries = series.map(updatePrimarySeries);\n        return [\n            ...updatedSeries,\n            ...updatedSeries.map(updateFilteredOutSeries),\n        ];\n    }\n\n    private getSeriesDefinitions(fields: FieldDefinition[], paired: boolean): (SeriesDefinition | null)[] {\n        if (fields.length < 2) { return []; }\n\n        const isBubbleChart = this.chartType === 'bubble';\n\n        if (paired) {\n            if (isBubbleChart) {\n                return fields.map((currentXField, i) => i % 3 === 0 ? ({\n                    xField: currentXField,\n                    yField: fields[i + 1],\n                    sizeField: fields[i + 2],\n                }) : null).filter(x => x && x.yField && x.sizeField);\n            }\n            return fields.map((currentXField, i) => i % 2 === 0 ? ({\n                xField: currentXField,\n                yField: fields[i + 1],\n            }) : null).filter(x => x && x.yField);\n        }\n\n        const xField = fields[0];\n\n        if (isBubbleChart) {\n            return fields\n                .map((yField, i) => i % 2 === 1 ? ({\n                    xField,\n                    yField,\n                    sizeField: fields[i + 1],\n                }) : null)\n                .filter(x => x && x.sizeField);\n        }\n\n        return fields.filter((value, i) => i > 0).map(yField => ({ xField, yField }));\n    }\n}\n", "import {ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {CartesianChartProxy} from \"../cartesian/cartesianChartProxy\";\nimport {AgCartesianAxisOptions} from 'ag-charts-community';\nimport {isHorizontal} from \"../../utils/seriesTypeMapper\";\nimport {ChartDataModel} from \"../../model/chartDataModel\";\n\nexport abstract class StatisticalChartProxy extends CartesianChartProxy {\n    protected constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: isHorizontal(this.chartType) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isHorizontal(this.chartType) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected computeSeriesStatistics(params: UpdateParams, computeStatsFn: (values: number[]) => any): any[] {\n        const {data, fields} = params;\n        const [category] = params.categories;\n        const categoryKey = category.id || ChartDataModel.DEFAULT_CATEGORY;\n        const groupedData = this.groupDataByCategory(categoryKey, data);\n\n        return Array.from(groupedData).map(([categoryValue, categoryData]) => {\n            const categoryResult = { [category.id]: categoryValue };\n\n            fields.forEach((field, seriesIndex) => {\n                // `null` & `NaN` values are omitted from calculations\n                const seriesValues = categoryData\n                    .map(datum => datum[field.colId])\n                    .filter(value => typeof value === 'number' && !isNaN(value));\n\n                Object.entries(computeStatsFn(seriesValues)).forEach(([statKey, value]) => {\n                    const propertyKey = `${statKey}:${seriesIndex}`;\n                    // when no data exists, stat properties are added to results with `null` values!\n                    categoryResult[propertyKey] = seriesValues.length > 0 ? value : null;\n                });\n            });\n\n            return categoryResult;\n        });\n    }\n\n    protected groupDataByCategory(categoryKey: string, data: any[]): Map<any, any[]> {\n        const getCategory = (datum: any) => {\n            if (categoryKey === ChartDataModel.DEFAULT_CATEGORY) {\n                return 1;\n            }\n            const categoryValue = datum[categoryKey];\n            if (categoryValue === null || categoryValue === undefined) {\n                return ''; // use a blank category for `null` or `undefined` values\n            }\n            return categoryValue instanceof Date ? categoryValue.getTime() : categoryValue;\n        }\n\n        return data.reduce((acc, datum) => {\n            let category = getCategory(datum);\n            const existingCategoryData = acc.get(category);\n            if (existingCategoryData) {\n                existingCategoryData.push(datum);\n            } else {\n                acc.set(category, [datum]);\n            }\n            return acc;\n        }, new Map<string | null, any[]>());\n    }\n\n}\n", "import {ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {AgRangeAreaSeriesOptions} from 'ag-charts-community';\nimport {StatisticalChartProxy} from \"./statisticalChartProxy\";\n\nexport class RangeChartProxy extends StatisticalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgRangeAreaSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map(\n            (field, seriesIndex) => ({\n                type: this.standaloneChartType as AgRangeAreaSeriesOptions['type'],\n                // xKey/xName refer to category buckets\n                xKey: category.id,\n                xName: category.name,\n                // yName is used to label the series\n                yName: field.displayName ?? undefined,\n                // custom field labels shown in the tooltip\n                yLowName: 'Min',\n                yHighName: 'Max',\n                // generated 'synthetic fields' from getData()\n                yLowKey: `min:${seriesIndex}`,\n                yHighKey: `max:${seriesIndex}`,\n            })\n        );\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            return {\n                min: Math.min(...seriesValues),\n                max: Math.max(...seriesValues),\n            };\n        });\n    }\n}", "import { AgCartesianAxisOptions, AgHistogramSeriesOptions } from \"ag-charts-community\";\nimport { ChartProxyParams, UpdateParams } from \"../chartProxy\";\nimport { CartesianChartProxy } from \"./cartesianChartProxy\";\n\nexport class HistogramChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams): AgHistogramSeriesOptions[] {\n        const firstField = params.fields[0]; // multiple series are not supported!\n        return [\n            {\n                type: this.standaloneChartType,\n                xKey: firstField.colId,\n                xName: firstField.displayName,\n                yName: this.chartProxyParams.translate(\"histogramFrequency\"),\n                areaPlot: false, // only constant width is supported via integrated charts\n            } as AgHistogramSeriesOptions\n        ];\n    }\n\n    protected override getAxes(_params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: 'number',\n                position: 'bottom',\n            },\n            {\n                type: 'number',\n                position: 'left',\n            },\n        ];\n    }\n\n}\n", "import {isHorizontal} from '../../utils/seriesTypeMapper';\nimport {ChartProxyParams, UpdateParams} from '../chartProxy';\nimport {AgBoxPlotSeriesOptions} from 'ag-charts-community';\nimport {StatisticalChartProxy} from \"./statisticalChartProxy\";\n\nexport class BoxPlotChartProxy extends StatisticalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getSeries(params: UpdateParams): AgBoxPlotSeriesOptions<any>[] {\n        const [category] = params.categories;\n        return params.fields.map(\n            (field, seriesIndex) => ({\n                type: this.standaloneChartType as AgBoxPlotSeriesOptions['type'],\n                direction: isHorizontal(this.chartType) ? 'horizontal' : 'vertical',\n                // xKey/xName refer to category buckets\n                xKey: category.id,\n                xName: category.name,\n                // yName is used to label the series\n                yName: field.displayName ?? undefined,\n                // custom field labels shown in the tooltip\n                minName: 'Min',\n                q1Name: 'Q1',\n                medianName: 'Median',\n                q3Name: 'Q3',\n                maxName: 'Max',\n                // generated 'synthetic fields' from getData()\n                minKey: `min:${seriesIndex}`,\n                q1Key: `q1:${seriesIndex}`,\n                medianKey: `median:${seriesIndex}`,\n                q3Key: `q3:${seriesIndex}`,\n                maxKey: `max:${seriesIndex}`,\n            })\n        );\n    }\n\n    protected override getData(params: UpdateParams): any[] {\n        return this.computeSeriesStatistics(params, (seriesValues: number[]): Record<string, number> => {\n            const sortedValues = seriesValues.sort((a, b) => a - b);\n            return {\n                min: sortedValues[0],\n                q1: this.quantile(sortedValues, 0.25),\n                median: this.quantile(sortedValues, 0.5),\n                q3: this.quantile(sortedValues, 0.75),\n                max: sortedValues[sortedValues.length - 1],\n            };\n        });\n    }\n\n    private quantile(sortedValues: number[], q: number): number {\n        const position = (sortedValues.length - 1) * q;\n        const indexBelow = Math.floor(position);\n        const aboveValue = position - indexBelow;\n        if (sortedValues[indexBelow + 1] !== undefined) {\n            return sortedValues[indexBelow] + aboveValue * (sortedValues[indexBelow + 1] - sortedValues[indexBelow]);\n        }\n        return sortedValues[indexBelow];\n    }\n}", "import { AgCharts, AgHierarchyChartOptions, AgHierarchySeriesOptions } from 'ag-charts-community';\nimport { ChartProxy, ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { CATEGORY_LABEL_KEY, createAutoGroupHierarchy, createCategoryHierarchy } from './hierarchicalChartUtils';\nimport { GROUP_AUTO_COLUMN_ID } from '@ag-grid-community/core';\n\nexport abstract class HierarchicalChartProxy extends ChartProxy {\n    protected constructor(protected readonly chartProxyParams: ChartProxyParams) {\n        super(chartProxyParams);\n    }\n    \n    public override update(params: UpdateParams): void {\n        const options: AgHierarchyChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            series: this.getSeries(params, CATEGORY_LABEL_KEY),\n            data: this.getData(params),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    protected abstract getSeries(params: UpdateParams, labelKey: string): AgHierarchySeriesOptions[];\n\n    protected getData(params: UpdateParams): any[] {\n        const { categories, data, grouping: isGrouped } = params;\n        if (isGrouped) {\n            return createAutoGroupHierarchy(data, getRowAutoGroupLabels);\n        } else {\n            const categoryKeys = categories.map(({ id }) => id);\n            return createCategoryHierarchy(data, categoryKeys);\n        }\n    }\n}\n\nfunction getRowAutoGroupLabels(item: object): string[] | null {\n    return (item as { [GROUP_AUTO_COLUMN_ID]?: { labels: string[] } })[GROUP_AUTO_COLUMN_ID]?.labels ?? null;\n}\n\n", "export type CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\nexport const CATEGORY_LABEL_KEY: CATEGORY_LABEL_KEY = 'AG-GRID-DEFAULT-LABEL-KEY';\n\nexport interface CategoryGroup<T extends object> {\n    [CATEGORY_LABEL_KEY]: string | null;\n    children: Array<CategoryGroup<T> | CategoryItem<T>>;\n}\n\nexport type CategoryItem<T extends object> = {\n    [CATEGORY_LABEL_KEY]: string | null;\n} & T;\n\nexport function createCategoryHierarchy<T extends object>(\n    data: T[],\n    categoryKeys: Array<keyof T>\n): Array<CategoryGroup<T> | CategoryItem<T>> {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemCategoryLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return categoryKeys.length;\n    }\n\n    function getItemCategoryLabel(item: T, categoryIndex: number): string | null {\n        const categoryKey = categoryKeys[categoryIndex];\n        const categoryValue = item[categoryKey];\n        return getCategoryLabel(categoryValue);\n    }\n\n    function getCategoryLabel(value: unknown): string | null {\n        if (value == null) return null;\n        return String(value);\n    }\n}\n\nexport function createAutoGroupHierarchy<T extends object>(\n    data: T[],\n    getItemLabels: (item: T) => string[] | null\n): Array<CategoryGroup<T> | CategoryItem<T>> {\n    const hierarchy = buildNestedHierarchy(data, getItemDepth, getItemGroupLabel);\n    return formatCategoryHierarchy(hierarchy);\n\n    function getItemDepth(item: T) {\n        return getItemLabels(item)?.length ?? 0;\n    }\n\n    function getItemGroupLabel(item: T, groupIndex: number): string | null {\n        const labels = getItemLabels(item);\n        if (!labels) return null;\n        // Autogroup label values are ordered from the leaf outwards\n        const labelIndex = labels.length - 1 - groupIndex;\n        return labels[labelIndex];\n    }\n}\n\n/* Utility functions for building and formatting nested category hierarchies */\n\n/** Convert an abstract nested hierarchy structure into an ag-charts-compatible 'category-grouped' data structure */\nfunction formatCategoryHierarchy<T extends object>(\n    hierarchy: Tree<string | null, T>\n): Array<CategoryGroup<T> | CategoryItem<T>> {\n    const { depth, leaves, children } = hierarchy;\n    // If there are no remaining levels of nesting, return a flat list of leaves with no category labels\n    if (depth === 0) return leaves.map((item) => ({ [CATEGORY_LABEL_KEY]: null, ...item }));\n    const results = new Array<CategoryGroup<T> | CategoryItem<T>>();\n    // Push all branches and leaves into the result set, grouping results by the input tree hierarchy path\n    for (const [key, childHierarchy] of children.entries()) {\n        if (childHierarchy.depth === 0) {\n            // If this the deepest parent level, return a flat list of child leaves with their respective category keys\n            results.push(...childHierarchy.leaves.map((item) => ({ [CATEGORY_LABEL_KEY]: key, ...item })));\n        } else {\n            // Otherwise nest the grouped data recursively (ignoring any leaves defined at the current parent level)\n            results.push({ [CATEGORY_LABEL_KEY]: key, children: formatCategoryHierarchy(childHierarchy) });\n        }\n    }\n    return results;\n}\n\n/** Data structure that represents an arbitrarily deeply nested tree of keyed values */\ntype Tree<K, V> = {\n    /** Number of child levels nested within this path of the tree (leaves do not count towards the depth) */\n    depth: number;\n    /** Items defined at this path within the tree */\n    leaves: V[];\n    /** Child levels contained within this path of the tree, grouped by child key */\n    children: Map<K, Tree<K, V>>;\n};\n\n/** Build an arbitrarily deeply nested hierarchy from a flat list of input items */\nfunction buildNestedHierarchy<K, V extends object>(\n    data: V[],\n    getItemDepth: (item: V) => number,\n    getItemGroupKey: (item: V, depthIndex: number) => K,\n): Tree<K, V> {\n    const hierarchy: Tree<K, V> = { depth: 0, leaves: [], children: new Map() };\n    return data.reduce((hierarchy, item) => {\n        const itemDepth = getItemDepth(item);\n        const currentDepth = 0;\n        return createNestedItemHierarchy(item, itemDepth, getItemGroupKey, currentDepth, hierarchy);\n    }, hierarchy);\n\n    function createNestedItemHierarchy(\n        item: V,\n        itemDepth: number,\n        getItemGroupKey: (item: V, depthIndex: number) => K,\n        currentDepth: number,\n        hierarchy: Tree<K, V>\n    ): Tree<K, V> {\n        if (currentDepth === itemDepth) {\n            hierarchy.leaves.push(item);\n            return hierarchy;\n        } else {\n            const key = getItemGroupKey(item, currentDepth);\n            const existingChildHierarchy = hierarchy.children.get(key);\n            const childHierarchy = createNestedItemHierarchy(\n                item,\n                itemDepth,\n                getItemGroupKey,\n                currentDepth + 1,\n                existingChildHierarchy || { depth: 0, leaves: [], children: new Map() }\n            );\n            hierarchy.children.set(key, childHierarchy);\n            hierarchy.depth = Math.max(1 + childHierarchy.depth, hierarchy.depth);\n            return hierarchy;\n        }\n    }\n}\n", "import { AgChartThemeOverrides, AgTreemapSeriesOptions } from 'ag-charts-community';\nimport { HierarchicalChartProxy } from './hierarchicalChartProxy';\nimport { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\n\nexport class TreemapChartProxy extends HierarchicalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams, labelKey: string): AgTreemapSeriesOptions[] {\n        const { fields } = params;\n        // Treemap charts support up to two input series, corresponding to size and color respectively\n        const [sizeField, colorField] = fields as [FieldDefinition | undefined, FieldDefinition | undefined];\n        // Combine the size and color series into a single composite series\n        return [\n            {\n                type: this.standaloneChartType as AgTreemapSeriesOptions['type'],\n                // The label key is generated internally by the hierarchy processing and is not user-configurable\n                labelKey,\n                // Size and color fields are inferred from the range data\n                sizeKey: sizeField?.colId,\n                sizeName: sizeField?.displayName ?? undefined,\n                colorKey: colorField?.colId,\n                colorName: colorField?.displayName ?? undefined,\n            },\n        ];\n    }\n    \n    protected override getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        return {\n            treemap: {\n                gradientLegend: {\n                    gradient: {\n                        preferredLength: 200,\n                    },\n                },\n            },\n        };\n    }\n\n    protected override transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        // Ignore the base implementation as it assumes only a single category axis\n        // (this method is never actually invoked)\n        return data;\n    }\n\n    public override crossFilteringReset(): void {\n        // cross filtering is not currently supported in treemap charts\n    }\n}\n", "import { AgChartThemeOverrides, AgSunburstSeriesOptions } from 'ag-charts-community';\nimport { HierarchicalChartProxy } from './hierarchicalChartProxy';\nimport { ChartProxyParams, FieldDefinition, UpdateParams } from '../chartProxy';\n\nexport class SunburstChartProxy extends HierarchicalChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getSeries(params: UpdateParams, labelKey: string): AgSunburstSeriesOptions[] {\n        const { fields } = params;\n        // Sunburst charts support up to two input series, corresponding to size and color respectively\n        const [sizeField, colorField] = fields as [FieldDefinition | undefined, FieldDefinition | undefined];\n        // Combine the size and color series into a single composite series\n        return [\n            {\n                type: this.standaloneChartType as AgSunburstSeriesOptions['type'],\n                // The label key is generated internally by the hierarchy processing and is not user-configurable\n                labelKey,\n                // Size and color fields are inferred from the range data\n                sizeKey: sizeField?.colId,\n                sizeName: sizeField?.displayName ?? undefined,\n                colorKey: colorField?.colId,\n                colorName: colorField?.displayName ?? undefined,\n            },\n        ];\n    }\n\n    protected override getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        return {\n            sunburst: {\n                gradientLegend: {\n                    gradient: {\n                        preferredLength: 200,\n                    },\n                },\n            },\n        };\n    }\n\n    protected override transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        // Ignore the base implementation as it assumes only a single category axis\n        // (this method is never actually invoked)\n        return data;\n    }\n\n    public override crossFilteringReset(): void {\n        // cross filtering is not currently supported in sunburst charts\n    }\n}\n", "import {\n    AgCharts,\n    AgCartesianChartOptions,\n    AgHeatmapSeriesOptions,\n    AgChartThemeOverrides,\n    AgHeatmapSeriesTooltipRendererParams,\n    AgTooltipRendererResult,\n} from 'ag-charts-community';\nimport { ChartProxy, ChartProxyParams, UpdateParams } from '../chartProxy';\nimport { flatMap } from '../../utils/array';\n\nexport const HEATMAP_CATEGORY_KEY = 'AG-GRID-DEFAULT-HEATMAP-CATEGORY-KEY';\nexport const HEATMAP_SERIES_KEY = 'AG-GRID-DEFAULT-HEATMAP-SERIES-KEY';\nexport const HEATMAP_VALUE_KEY = 'AG-GRID-DEFAULT-HEATMAP-VALUE-KEY';\n\nexport class HeatmapChartProxy extends ChartProxy {\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public override update(params: UpdateParams): void {\n        const xSeriesKey = HEATMAP_SERIES_KEY;\n        const xValueKey = HEATMAP_VALUE_KEY;\n        const yKey = HEATMAP_CATEGORY_KEY;\n        const options: AgCartesianChartOptions = {\n            ...this.getCommonChartOptions(params.updatedOverrides),\n            series: this.getSeries(params, xSeriesKey, xValueKey, yKey),\n            data: this.getData(params, xSeriesKey, xValueKey, yKey),\n        };\n\n        AgCharts.update(this.getChartRef(), options);\n    }\n\n    protected getSeries(params: UpdateParams, xSeriesKey: string, xValueKey: string, yKey: string): AgHeatmapSeriesOptions[] {\n        const [category] = params.categories;\n        return [\n            {\n                type: this.standaloneChartType as AgHeatmapSeriesOptions['type'],\n                // The axis keys reference synthetic fields based on the category values and series column names\n                yKey,\n                xKey: xSeriesKey,\n                // The color key references a synthetic field based on the series column value for a specific cell\n                colorKey: xValueKey,\n                yName: category.name,\n                // We don't know how to label the 'x' series, as it is a synthetic series created from the set of all input columns\n                // In future releases we may want to consider inferring the series label from column groupings etc\n                xName: undefined,\n                colorName: undefined,\n            },\n        ];\n    }\n\n    protected getData(params: UpdateParams, xSeriesKey: string, xValueKey: string, yKey: string): any[] {\n        const [category] = params.categories;\n        // Heatmap chart expects a flat array of data, with each row representing a single cell in the heatmap\n        // This means we need to explode the list of input rows into their individual cells\n        return flatMap(params.data, (datum, index) => {\n            // We need to create a unique y value object for each row to prevent unintended category grouping\n            // when there are multiple rows with the same category value\n            const value = datum[category.id];\n            const valueString = value == null ? '' : String(value);\n            const yValue = { id: index, value, toString: () => valueString };\n            // Return a flat list of output data items corresponding to each cell,\n            // appending the synthetic series and category fields to the cell data\n            return params.fields.map(({ colId, displayName }) => ({\n                ...datum,\n                [xSeriesKey]: displayName,\n                [xValueKey]: datum[colId],\n                [yKey]: yValue,\n            }));\n        }\n        );\n    }\n\n    protected override getChartThemeDefaults(): AgChartThemeOverrides | undefined {\n        return {\n            heatmap: {\n                gradientLegend: {\n                    gradient: {\n                        preferredLength: 200,\n                    },\n                },\n                series: {\n                    tooltip: {\n                        renderer: renderHeatmapTooltip,\n                    },\n                },\n            },\n        };\n    }\n\n    protected override transformData(data: any[], categoryKey: string, categoryAxis?: boolean): any[] {\n        // Ignore the base implementation as it assumes only a single category axis\n        // (this method is never actually invoked)\n        return data;\n    }\n\n    public override crossFilteringReset(): void {\n        // cross filtering is not currently supported in heatmap charts\n    }\n}\n\nfunction renderHeatmapTooltip(params: AgHeatmapSeriesTooltipRendererParams): string | AgTooltipRendererResult {\n    const { xKey, yKey, colorKey, yName, datum } = params;\n    const table: Array<{ label: string; value: string | undefined }> = [\n        { label: yName, value: datum[yKey] },\n        { label: datum[xKey], value: colorKey && datum[colorKey] },\n    ];\n    const html = table\n        .map(({ label, value }) => `<b>${sanitizeHtml(String(label))}:</b> ${sanitizeHtml(String(value))}`)\n        .join('<br>');\n    return {\n        title: '',\n        content: html,\n    };\n}\n\nfunction sanitizeHtml(input: string): string {\n    const ESCAPED_CHARS = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n    };\n    const characterClass = `[${Object.keys(ESCAPED_CHARS).join('')}]`;\n    const pattern = new RegExp(characterClass, 'g');\n    return input.replace(pattern, (char: keyof typeof ESCAPED_CHARS) => ESCAPED_CHARS[char]);\n}\n", "export function partition<T, K>(items: T[], selector: (item: T) => K): Map<K, T[]> {\n    return items.reduce(\n        (groupedItems, item) => {\n            const key = selector(item);\n            const existingItems = groupedItems.get(key);\n            return groupedItems.set(key, existingItems ? [...existingItems, item] : [item]);\n        },\n        new Map<K, T[]>(),\n    )\n}\n\nexport function flatMap<T, V>(items: T[], iteratee: (item: T, index: number, array: T[]) => V[]): V[] {\n    return items.reduce((acc, item, index, array) => acc.concat(iteratee(item, index, array)), new Array<V>());\n}", "import {AgCartesianAxisOptions, AgWaterfallSeriesOptions} from \"ag-charts-community\";\nimport {ChartProxyParams, UpdateParams} from \"../chartProxy\";\nimport {CartesianChartProxy} from \"./cartesianChartProxy\";\nimport {isHorizontal} from \"../../utils/seriesTypeMapper\";\n\nexport class WaterfallChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    protected override getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        return [\n            {\n                type: this.getXAxisType(params),\n                position: isHorizontal(this.chartType) ? 'left' : 'bottom',\n            },\n            {\n                type: 'number',\n                position: isHorizontal(this.chartType) ? 'bottom' : 'left',\n            },\n        ];\n    }\n\n    protected override getSeries(params: UpdateParams): AgWaterfallSeriesOptions[] {\n        const [category] = params.categories;\n        const [firstField] = params.fields;\n        const firstSeries: AgWaterfallSeriesOptions = {\n            type: this.standaloneChartType as 'waterfall',\n            direction: isHorizontal(this.chartType) ? 'horizontal' : 'vertical',\n            xKey: category.id,\n            xName: category.name,\n            yKey: firstField.colId,\n            yName: firstField.displayName ?? undefined\n        };\n\n        return [firstSeries]; // waterfall only supports a single series!\n    }\n}\n", "import { _, AgChartThemeOverrides, BeanStub, ChartOptionsChanged, ChartType, Events, WithoutGridCommon } from \"@ag-grid-community/core\";\nimport { AgCartesianAxisType, AgCharts, AgChartOptions, AgPolarAxisType, AgBaseThemeableChartOptions, AgCartesianChartOptions, AgCartesianAxesTheme, AgPolarAxesTheme } from \"ag-charts-community\";\n\nimport { ChartController } from \"../chartController\";\nimport { AgChartActual, AgChartAxisType } from \"../utils/integration\";\nimport { get, set } from \"../utils/object\";\nimport { ChartSeriesType, isCartesian, VALID_SERIES_TYPES } from \"../utils/seriesTypeMapper\";\n\nexport interface ChartOptionsProxy {\n    getValue<T = string>(expression: string, calculated?: boolean): T;\n    setValue<T = string>(expression: string, value: T): void;\n    setValues<T = string>(properties: { expression: string, value: T }[]): void;\n}\n\ntype ChartAxis = NonNullable<AgChartActual['axes']>[number];\ntype SupportedSeries = AgChartActual['series'][number];\ntype AgPolarAxisThemeOverrides = NonNullable<AgPolarAxesTheme[keyof AgPolarAxesTheme]>;\ntype AgCartesianAxisThemeOverrides = NonNullable<AgCartesianAxesTheme[keyof AgCartesianAxesTheme]>;\ntype AgChartAxisThemeOverrides = AgCartesianAxisThemeOverrides | AgPolarAxisThemeOverrides;\n\ntype AgChartOptionsWithThemeOverrides = AgChartOptions & {\n    theme: NonNullable<Extract<AgChartOptions['theme'], object>> & {\n        overrides: NonNullable<Extract<AgChartOptions['theme'], object>['overrides']>\n    }\n};\n\nconst CARTESIAN_AXIS_TYPES: AgCartesianAxisType[] = ['number', 'category', 'time', 'grouped-category'];\nconst POLAR_AXIS_TYPES: AgPolarAxisType[] = ['angle-category', 'angle-number', 'radius-category', 'radius-number'];\n\nconst VALID_AXIS_TYPES: (AgCartesianAxisType | AgPolarAxisType)[] = [...CARTESIAN_AXIS_TYPES, ...POLAR_AXIS_TYPES];\n\nexport class ChartOptionsService extends BeanStub {\n    private readonly chartController: ChartController;\n\n    constructor(chartController: ChartController) {\n        super();\n        this.chartController = chartController;\n    }\n\n    public getChartThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getChartOption(expression),\n            setValue: (expression, value) => this.setChartThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setChartThemeOverrides(properties),\n        };\n    }\n\n    public getAxisThemeOverridesProxy(): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getAxisProperty(expression),\n            setValue: (expression, value) => this.setAxisThemeOverrides([{ expression, value }]),\n            setValues: (properties) => this.setAxisThemeOverrides(properties),\n        };\n    }\n\n    public getCartesianAxisOptionsProxy(axisType: 'xAxis' | 'yAxis'): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisOptions(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisOptions(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisThemeOverridesProxy(axisType: 'xAxis' | 'yAxis' ): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisProperty(axisType, expression),\n            setValue: (expression, value) => this.setCartesianAxisThemeOverrides(axisType, [{ expression, value }]),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getCartesianAxisAppliedThemeOverridesProxy(axisType: 'xAxis' | 'yAxis' ): ChartOptionsProxy {\n        return {\n            getValue: (expression) => this.getCartesianAxisThemeOverride(\n                axisType,\n                // Allow the caller to specify a wildcard expression to retrieve the whole set of overrides\n                expression === '*' ? null : expression,\n            )!,\n            setValue: (expression, value) => this.setCartesianAxisThemeOverrides(\n                axisType,\n                // Allow the caller to specify a wildcard expression to set the whole set of overrides\n                [{ expression: expression === '*' ? null : expression, value }],\n            ),\n            setValues: (properties) => this.setCartesianAxisThemeOverrides(axisType, properties),\n        };\n    }\n\n    public getSeriesOptionsProxy(getSelectedSeries: () => ChartSeriesType): ChartOptionsProxy {\n        return {\n            getValue: (expression, calculated) => this.getSeriesOption(getSelectedSeries(), expression, calculated),\n            setValue: (expression, value) => this.setSeriesOptions(getSelectedSeries(), [{ expression, value }]),\n            setValues: (properties) => this.setSeriesOptions(getSelectedSeries(), properties),\n        };\n    }\n\n    /**\n     * Determine the set of theme overrides that should be retained when transitioning from one chart type to another.\n     */\n    public getPersistedChartThemeOverrides(\n        existingChartOptions: AgChartOptions,\n        existingAxes: ChartAxis[] | undefined,\n        existingChartType: ChartType,\n        targetChartType: ChartType,\n    ): AgChartThemeOverrides {\n        // Determine the set of theme override keys that should be retained when transitioning from one chart type to another\n        const retainedThemeOverrideKeys = this.getRetainedChartThemeOverrideKeys(existingChartType, targetChartType);\n        const retainedChartAxisThemeOverrideKeys = this.getRetainedChartAxisThemeOverrideKeys(null, existingChartType, targetChartType);\n\n        // combine the options into a single merged object\n        const targetChartOptions = this.createChartOptions();\n\n        // copy the retained theme overrides from the existing chart options to the target chart options\n        for (const expression of retainedThemeOverrideKeys) {\n            // Locate the value in the existing chart series theme overrides\n            const value = this.retrieveChartOptionsThemeOverride(existingChartOptions, existingChartType, expression);\n            if (value !== undefined) {\n                // Update the value in the target chart series theme overrides\n                this.assignChartOptionsThemeOverride(targetChartOptions, targetChartType, expression, value);\n            }\n        }\n\n        // axis theme overrides are copied to all potential target axis types\n        // (this is necessary because certain chart types auto-instantiate different axis types given the same data)\n        if (existingAxes) {\n            for (const { expression, targetAxisTypes } of retainedChartAxisThemeOverrideKeys) {\n                // Locate the value in the existing chart series theme overrides\n                for (const existingAxisType of existingAxes.map((axis) => axis.type)) {\n                    const value = this.retrieveChartOptionsThemeOverride(\n                        existingChartOptions,\n                        existingChartType,\n                        ['axes', existingAxisType, expression].join('.'),\n                    );\n                    if (value !== undefined) {\n                        // Copy the value to all potential target chart axis theme overrides\n                        // (axis theme overrides are currently only persisted across cartesian chart types)\n                        for (const targetAxisType of targetAxisTypes) {\n                            this.assignChartOptionsThemeOverride(\n                                targetChartOptions,\n                                targetChartType,\n                                ['axes', targetAxisType, expression].join('.'),\n                                value,\n                            );\n                        }\n                    }\n                    \n                }\n            }\n        }\n\n        return targetChartOptions.theme.overrides;\n    }\n\n    private getRetainedChartThemeOverrideKeys(\n        existingChartType: ChartType,\n        targetChartType: ChartType,\n    ): (keyof AgBaseThemeableChartOptions | string)[] {\n        // these theme overrides are persisted across all chart types\n        const UNIVERSAL_PERSISTED_THEME_OVERRIDES: (keyof AgBaseThemeableChartOptions)[] = ['animation'];\n\n        // these theme overrides are persisted across all cartesian chart types\n        const PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES: (keyof AgCartesianChartOptions)[] = ['zoom', 'navigator'];\n\n        // other chart options will be retained depending on the specifics of the chart type from/to transition\n        const chartSpecificThemeOverrideKeys = ((previousChartType, updatedChartType) => {\n            const expressions = new Array<string>();\n            if (isCartesian(previousChartType) && isCartesian(updatedChartType)) {\n                expressions.push(...PERSISTED_CARTESIAN_CHART_THEME_OVERRIDES);\n            }\n            return expressions;\n        })(existingChartType, targetChartType);\n        \n        return [\n            ...UNIVERSAL_PERSISTED_THEME_OVERRIDES,\n            ...chartSpecificThemeOverrideKeys,\n        ];\n    }\n\n    private getRetainedChartAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null,\n        existingChartType: ChartType,\n        targetChartType: ChartType,\n    ): {\n        expression: keyof AgChartAxisThemeOverrides | string,\n        targetAxisTypes: AgChartAxisType[],\n    }[] {\n        // different axis types have different theme overrides\n        if (isCartesian(existingChartType) && isCartesian(targetChartType)) {\n            const retainedKeys = this.getRetainedCartesianAxisThemeOverrideKeys(axisType);\n            return retainedKeys.map((expression) => ({ expression, targetAxisTypes: CARTESIAN_AXIS_TYPES }));\n        }\n        return [];\n    }\n\n    private getRetainedCartesianAxisThemeOverrideKeys(\n        axisType: 'xAxis' | 'yAxis' | null,\n    ): (keyof AgCartesianAxisThemeOverrides | string)[] {\n        const axisPositionPrefixes =\n            axisType === 'xAxis'\n                ? ['', '.top', '.bottom']\n                : axisType === 'yAxis'\n                  ? ['', '.left', '.right']\n                  : ['', '.left', '.right', '.top', '.bottom'];\n\n        // these axis theme overrides are persisted across all cartesian chart axis types\n        const PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES: (keyof AgCartesianAxisThemeOverrides)[] = ['crosshair'];\n\n        const expressions = new Array<keyof AgBaseThemeableChartOptions | string>();\n        for (const expression of PERSISTED_CARTESIAN_AXIS_THEME_OVERRIDES) {\n            for (const axisPositionPrefix of axisPositionPrefixes) {\n                expressions.push(`${axisPositionPrefix}${expression}`);\n            }\n        }\n        return expressions;\n    }\n\n    private getChartOption<T = string>(expression: string): T {\n        return get(this.getChart(), expression, undefined) as T;\n    }\n\n    private setChartThemeOverrides<T = string>(properties: {expression: string, value: T}[]): void {\n        const chartType = this.getChartType();\n        // combine the options into a single merged object\n        const chartOptions: AgChartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsThemeOverride(chartOptions, chartType, expression, value);\n        }\n        this.applyChartOptions(chartOptions);\n    }\n\n    private applyChartOptions(chartOptions: AgChartOptions, options?: { silent?: boolean }): void {\n        if (Object.keys(chartOptions).length === 0) return;\n        this.updateChart(chartOptions);\n        const shouldRaiseEvent = !options?.silent;\n        if (shouldRaiseEvent) this.raiseChartOptionsChangedEvent();\n    }\n\n    public awaitChartOptionUpdate(func: () => void) {\n        const chart = this.chartController.getChartProxy().getChart();\n        chart.waitForUpdate().then(() => func())\n            .catch((e) => console.error(`AG Grid - chart update failed`, e));\n    }\n\n    private getAxisProperty<T = string>(expression: string): T {\n        // Assume the property exists on the first axis\n        return get(this.getChart().axes?.[0], expression, undefined);\n    }\n\n    private setAxisThemeOverrides<T = string>(properties: { expression: string, value: T }[]): void {\n        const chart = this.getChart();\n        const chartType = this.getChartType();\n\n        // combine the options into a single merged object\n        let chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            // Only apply the property to axes that declare the property on their prototype chain\n            const relevantAxes = chart.axes?.filter((axis) => {\n                const parts = expression.split('.');\n                let current: any = axis;\n                for (const part of parts) {\n                    if (!(part in current)) {\n                        return false;\n                    }\n                    current = current[part];\n                }\n                return true;\n            });\n            if (!relevantAxes) continue;\n\n            for (const axis of relevantAxes)  {\n                if (!this.isValidAxisType(axis)) continue;\n                this.assignChartAxisThemeOverride(chartOptions, chartType, axis.type, null, expression, value);\n            }\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private getCartesianAxisProperty<T = string | undefined>(axisType: 'xAxis' | 'yAxis', expression: string): T {\n        const axes = this.getChartAxes();\n        const axis = this.getCartesianAxis(axes, axisType);\n        return get(axis, expression, undefined);\n    }\n\n    private getCartesianAxisThemeOverride<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        expression: string | null,\n    ): T | undefined {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return undefined;\n        const chartType = this.getChartType();\n        const chartOptions = this.getChart().getOptions();\n\n        return this.retrieveChartAxisThemeOverride(\n            chartOptions,\n            chartType,\n            chartAxis.type,\n            axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n            expression,\n        );\n    }\n\n    private setCartesianAxisThemeOverrides<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string | null, value: T }>,\n    ): void {\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis || !this.isValidAxisType(chartAxis)) return;\n        const chartType = this.getChartType();\n\n        // combine the axis options into a single merged object\n        let chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartAxisThemeOverride(\n                chartOptions,\n                chartType,\n                chartAxis.type,\n                axisType === 'yAxis' ? ['left', 'right'] : ['bottom', 'top'],\n                expression,\n                value,\n            );\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private setCartesianAxisOptions<T = string>(\n        axisType: 'xAxis' | 'yAxis',\n        properties: Array<{ expression: string, value: T }>,\n    ): void {\n        // get a snapshot of all existing axis options from the chart instance\n        const existingChartOptions = this.getChart().getOptions();\n        const axisOptions = ('axes' in existingChartOptions ? existingChartOptions.axes : undefined);\n        if (!existingChartOptions || !axisOptions) return;\n\n        const axes = this.getChartAxes();\n        const chartAxis = this.getCartesianAxis(axes, axisType);\n        if (!chartAxis) return;\n\n        // combine the axis options into a single merged object\n        let chartOptions = this.createChartOptions();\n        (chartOptions as Extract<AgChartOptions, { axes?: any }>).axes = axisOptions;\n        \n        // if the axis type is changing, we need to persist any relevant theme overrides assigned to the existing axis\n        const axisTypeUpdate = properties.find(({ expression }) => expression === 'type');\n        if (axisTypeUpdate) {\n            const updatedAxisType = axisTypeUpdate.value as AgChartAxisType;\n            // the names of the retained axis overrides need to be mapped from the old axis type to the new axis type\n            const retainedAxisThemeOverrideKeys = this.getRetainedCartesianAxisThemeOverrideKeys(axisType);\n            // copy any retained theme overrides onto the combined chart options object under the new axis type\n            for (const expression of retainedAxisThemeOverrideKeys) {\n                const chartType = this.getChartType();\n                const value = this.retrieveChartOptionsThemeOverride(\n                    existingChartOptions,\n                    chartType,\n                    ['axes', chartAxis.type, expression].join('.'),\n                );\n                if (value !== undefined) {\n                    this.assignChartOptionsThemeOverride(\n                        chartOptions,\n                        chartType,\n                        ['axes', updatedAxisType, expression].join('.'),\n                        value,\n                    );\n                }\n            }\n        }\n\n        // assign the provided axis options onto the combined chart options object\n        const axisIndex = axes.indexOf(chartAxis);\n        for (const { expression, value } of properties) {\n            this.assignChartOption(chartOptions, `axes.${axisIndex}.${expression}`, value);\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    private getCartesianAxis(axes: ChartAxis[], axisType: 'xAxis' | 'yAxis'): ChartAxis | undefined {\n        if (axes.length < 2) { return undefined; }\n        switch (axisType) {\n            case 'xAxis': return (axes[0].direction === 'x') ? axes[0] : axes[1];\n            case 'yAxis': return (axes[1].direction === 'y') ? axes[1] : axes[0];\n        }\n    }\n\n    private getSeriesOption<T = string>(seriesType: ChartSeriesType, expression: string, calculated?: boolean): T {\n        // N.B. 'calculated' here refers to the fact that the property exists on the internal series object itself,\n        // rather than the properties object. This is due to us needing to reach inside the chart itself to retrieve\n        // the value, and will likely be cleaned up in a future release\n        const series = this.getChart().series.find((s: any) => ChartOptionsService.isMatchingSeries(seriesType, s));\n        return get(calculated ? series : series?.properties.toJson(), expression, undefined) as T;\n    }\n\n    private setSeriesOptions<T = string>(seriesType: ChartSeriesType, properties: { expression: string, value: T }[]): void {\n        // combine the series options into a single merged object\n        let chartOptions = this.createChartOptions();\n        for (const { expression, value } of properties) {\n            this.assignChartOptionsSeriesThemeOverride(\n                chartOptions,\n                seriesType,\n                `series.${expression}`,\n                value\n            );\n        }\n\n        this.applyChartOptions(chartOptions);\n    }\n\n    public getPairedMode(): boolean {\n        return this.chartController.getChartProxy().isPaired();\n    }\n\n    public setPairedMode(paired: boolean): void {\n        this.chartController.getChartProxy().setPaired(paired);\n    }\n\n    private getChartAxes(): Array<ChartAxis> {\n        const chart = this.getChart();\n        return chart.axes ?? [];\n    }\n\n    private retrieveChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null,\n    ): T | undefined {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                const value = this.retrieveChartOptionsThemeOverride<T>(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...expression ? [expression] : []].join('.'),\n                );\n                if (value === undefined) continue;\n                return value;\n            }\n        } else {\n            return this.retrieveChartOptionsThemeOverride<T>(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...expression ? [expression] : []].join('.'),\n            );\n        }\n    }\n\n    private assignChartAxisThemeOverride<T = string>(\n        chartOptions: AgChartOptions,\n        chartType: ChartType,\n        axisType: AgChartAxisType,\n        axisPositions: ('left' | 'right' | 'top' | 'bottom')[] | null,\n        expression: string | null,\n        value: T,\n    ): void {\n        // Theme overrides can be applied either to all axes simultaneously, or only to axes in a certain orientation\n        // (this allows more fine-grained control for e.g. styling horizontal / vertical axes separately)\n        if (axisPositions) {\n            for (const axisPosition of axisPositions) {\n                this.assignChartOptionsThemeOverride(\n                    chartOptions,\n                    chartType,\n                    ['axes', axisType, axisPosition, ...expression ? [expression] : []].join('.'),\n                    value\n                );\n            }\n        } else {\n            this.assignChartOptionsThemeOverride(\n                chartOptions,\n                chartType,\n                ['axes', axisType, ...expression ? [expression] : []].join('.'),\n                value\n            );\n        }\n    }\n\n    private isValidAxisType(chartAxis: ChartAxis): boolean {\n        return VALID_AXIS_TYPES.includes(chartAxis.type);\n    }\n\n    public getChartType(): ChartType {\n        return this.chartController.getChartType();\n    }\n\n    private getChart() {\n        return this.chartController.getChartProxy().getChart();\n    }\n\n    private updateChart(chartOptions: AgChartOptions) {\n        const chartRef = this.chartController.getChartProxy().getChartRef();\n        chartRef.skipAnimations();\n        AgCharts.updateDelta(chartRef, chartOptions);\n    }\n\n    private createChartOptions(): AgChartOptionsWithThemeOverrides {\n        const chartOptions = {\n            theme: {\n                overrides: {}\n            }\n        };\n        return chartOptions;\n    }\n\n    private retrieveChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        chartType: ChartType,\n        expression: string | null,\n    ): T | undefined {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // Retrieve the first matching value\n        for (const seriesType of chartSeriesTypes) {\n            const value = this.retrieveChartOptionsSeriesThemeOverride<T>(chartOptions, seriesType, expression);\n            if (value === undefined) continue;\n            return value;\n        }\n\n        return undefined;\n    }\n\n    private assignChartOptionsThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        chartType: ChartType,\n        expression: string | null,\n        value: T,\n    ): void {\n        // Determine the relevant series type theme override series keys for the current chart\n        const chartSeriesTypes = this.getChartThemeOverridesSeriesTypeKeys(chartType);\n\n        // assign the relevant theme overrides for each series type\n        for (const seriesType of chartSeriesTypes) {\n            this.assignChartOptionsSeriesThemeOverride(chartOptions, seriesType, expression, value);\n        }\n    }\n\n    private retrieveChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        seriesType: ChartSeriesType,\n        expression: string | null,\n    ): T | undefined {\n        return this.retrieveChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...expression ? [expression] : []].join('.'),\n        );\n    }\n\n    private assignChartOptionsSeriesThemeOverride<T>(\n        chartOptions: AgChartOptions, \n        seriesType: ChartSeriesType,\n        expression: string | null,\n        value: T,\n    ): void {\n        this.assignChartOption<T>(\n            chartOptions,\n            ['theme', 'overrides', seriesType, ...expression ? [expression] : []].join('.'),\n            value,\n        );\n    }\n\n    private getChartThemeOverridesSeriesTypeKeys(chartType: ChartType): ChartSeriesType[] {\n        // In the chart options API, theme overrides are categorized according to series type.\n        // Depending on the chart type, theme overrides may need to be applied to multiple series types.\n        const chartSeriesTypes = this.chartController.getChartSeriesTypes(chartType);\n        if (this.chartController.isComboChart()) {\n            chartSeriesTypes.push('common');\n        }\n        return chartSeriesTypes;\n    }\n\n    private retrieveChartOption<T>(\n        chartOptions: AgChartOptions, \n        expression: string,\n    ): T | undefined {\n        return get(chartOptions, expression, undefined);\n    }\n\n    private assignChartOption<T>(\n        chartOptions: AgChartOptions, \n        expression: string,\n        value: T,\n    ): void {\n        set(chartOptions, expression, value);\n    }\n\n    private raiseChartOptionsChangedEvent(): void {\n        const chartModel = this.chartController.getChartModel();\n\n        const event: WithoutGridCommon<ChartOptionsChanged> = {\n            type: Events.EVENT_CHART_OPTIONS_CHANGED,\n            chartId: chartModel.chartId,\n            chartType: chartModel.chartType,\n            chartThemeName: this.chartController.getChartThemeName(),\n            chartOptions: chartModel.chartOptions\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private static isMatchingSeries(seriesType: ChartSeriesType, series: SupportedSeries): boolean {\n        return VALID_SERIES_TYPES.includes(seriesType) && series.type === seriesType;\n    }\n\n    protected destroy(): void {\n        super.destroy();\n    }\n}\n", "import {AgCartesianAxisOptions} from \"ag-charts-community\";\nimport {ChartType, SeriesChartType} from \"@ag-grid-community/core\";\nimport {ChartProxyParams, FieldDefinition, UpdateParams} from \"../chartProxy\";\nimport {CartesianChartProxy} from \"../cartesian/cartesianChartProxy\";\nimport {getSeriesType} from \"../../utils/seriesTypeMapper\";\n\nexport class ComboChartProxy extends CartesianChartProxy {\n\n    public constructor(params: ChartProxyParams) {\n        super(params);\n    }\n\n    public getAxes(params: UpdateParams): AgCartesianAxisOptions[] {\n        const fields = params ? params.fields : [];\n        const fieldsMap = new Map(fields.map(f => [f.colId, f]));\n\n        const { primaryYKeys, secondaryYKeys } = this.getYKeys(fields, params.seriesChartTypes);\n\n        const axes: AgCartesianAxisOptions[] = [\n            {\n                type: this.getXAxisType(params),\n                position: 'bottom',\n            },\n        ];\n\n        if (primaryYKeys.length > 0) {\n            axes.push({\n                type: 'number',\n                keys: primaryYKeys,\n                position: 'left',\n            });\n        }\n\n        if (secondaryYKeys.length > 0) {\n            secondaryYKeys.forEach((secondaryYKey: string) => {\n                const field = fieldsMap.get(secondaryYKey);\n                const secondaryAxisIsVisible = field && field.colId === secondaryYKey;\n                if (!secondaryAxisIsVisible) {\n                    return;\n                }\n\n                const secondaryAxisOptions: AgCartesianAxisOptions = {\n                    type: 'number',\n                    keys: [secondaryYKey],\n                    position: 'right',\n                }\n\n                axes.push(secondaryAxisOptions);\n            });\n        }\n\n        return axes;\n    }\n\n    public getSeries(params: UpdateParams): any {\n        const { fields, seriesChartTypes } = params;\n        const [category] = params.categories;\n\n        return fields.map(field => {\n            const seriesChartType = seriesChartTypes.find(s => s.colId === field.colId);\n            if (seriesChartType) {\n                const chartType: ChartType = seriesChartType.chartType;\n                const grouped = ['groupedColumn', 'groupedBar'].includes(chartType);\n                const groupedOpts = grouped ? { grouped: true } : {};\n                return {\n                    type: getSeriesType(chartType),\n                    xKey: category.id,\n                    yKey: field.colId,\n                    yName: field.displayName,\n                    stacked: ['stackedArea', 'stackedColumn'].includes(chartType),\n                    ...groupedOpts,\n                }\n            }\n        });\n    }\n\n    private getYKeys(fields: FieldDefinition[], seriesChartTypes: SeriesChartType[]) {\n        const primaryYKeys: string[] = [];\n        const secondaryYKeys: string[] = [];\n\n        fields.forEach(field => {\n            const colId = field.colId;\n            const seriesChartType = seriesChartTypes.find(s => s.colId === colId);\n            if (seriesChartType) {\n                seriesChartType.secondaryAxis ? secondaryYKeys.push(colId) : primaryYKeys.push(colId);\n            }\n        });\n\n        return { primaryYKeys, secondaryYKeys };\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    ChartMenuOptions,\n    ChartToolPanelMenuOptions,\n    ChartToolPanelName,\n    GetChartToolbarItemsParams,\n    WithoutGridCommon,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartService } from \"../../chartService\";\nimport { ChartMenuContext } from \"../menu/chartMenuContext\";\nimport { AdvancedSettingsMenuFactory } from \"../menu/advancedSettings/advancedSettingsMenuFactory\";\nimport { ChartController } from \"../chartController\";\n\nconst CHART_TOOL_PANEL_ALLOW_LIST: ChartToolPanelMenuOptions[] = [\n    'chartSettings', \n    'chartData', \n    'chartFormat'\n];\nconst CHART_TOOLBAR_ALLOW_LIST: ChartMenuOptions[] = [\n    'chartUnlink',\n    'chartLink',\n    'chartDownload'\n];\n\nexport const CHART_TOOL_PANEL_MENU_OPTIONS: { [key in ChartToolPanelName]: ChartToolPanelMenuOptions } = {\n    settings: \"chartSettings\",\n    data: \"chartData\",\n    format: \"chartFormat\"\n}\n\n@Bean('chartMenuService')\nexport class ChartMenuService extends BeanStub {\n    @Autowired('chartService') private readonly chartService: ChartService;\n    @Autowired('advancedSettingsMenuFactory') private readonly advancedSettingsMenuFactory: AdvancedSettingsMenuFactory;\n\n    public isLegacyFormat(): boolean {\n        return !this.chartService.isEnterprise();\n    }\n\n    public downloadChart(chartMenuContext: ChartMenuContext, dimensions?: { width: number, height: number }, fileName?: string, fileFormat?: string): void {\n        chartMenuContext.chartController.getChartProxy().downloadChart(dimensions, fileName, fileFormat);\n    }\n\n    public toggleLinked(chartMenuContext: ChartMenuContext): void {\n        chartMenuContext.chartController.detachChartRange();\n    }\n\n    public openAdvancedSettings(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.advancedSettingsMenuFactory.showMenu(chartMenuContext, eventSource);\n    }\n\n    public hideAdvancedSettings(): void {\n        this.advancedSettingsMenuFactory.hideMenu();\n    }\n\n    public getToolbarOptionsAndPanels(chartController: ChartController): {\n        panels: ChartToolPanelMenuOptions[],\n        defaultPanel: ChartToolPanelMenuOptions,\n        chartToolbarOptions: ChartMenuOptions[]\n    } {\n        const legacyFormat = this.isLegacyFormat();\n        const useChartToolPanelCustomisation = Boolean(this.gridOptionsService.get('chartToolPanelsDef')) || !legacyFormat;\n\n        let panels: ChartToolPanelMenuOptions[];\n        let defaultPanel: ChartToolPanelMenuOptions;\n        let chartToolbarOptions: ChartMenuOptions[];\n\n        if (useChartToolPanelCustomisation) {\n            const defaultChartToolbarOptions: ChartMenuOptions[] = legacyFormat ? [\n                chartController.isChartLinked() ? 'chartLink' : 'chartUnlink',\n                'chartDownload'\n            ] : [\n                'chartMenu'\n            ];\n    \n            const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n            const params: WithoutGridCommon<GetChartToolbarItemsParams> = {\n                defaultItems: defaultChartToolbarOptions\n            };\n            chartToolbarOptions = toolbarItemsFunc\n                ? toolbarItemsFunc(params).filter(option => {\n                    if (!(legacyFormat ? CHART_TOOLBAR_ALLOW_LIST : [...CHART_TOOLBAR_ALLOW_LIST, 'chartMenu']).includes(option)) {\n                        let msg;\n                        if (CHART_TOOL_PANEL_ALLOW_LIST.includes(option as any)) {\n                            msg = `'${option}' is a Chart Tool Panel option and will be ignored since 'chartToolPanelsDef' is used. Please use 'chartToolPanelsDef.panels' grid option instead`\n                        } else if (option === 'chartMenu') {\n                            msg = `'chartMenu' is only allowed as a Chart Toolbar Option when using AG Charts Enterprise`;\n                        } else {\n                            msg = `'${option}' is not a valid Chart Toolbar Option`;\n                        }\n                        _.warnOnce(msg);\n                        return false;\n                    }\n\n                    return true;\n                })\n                : defaultChartToolbarOptions;\n\n            const panelsOverride = this.gridOptionsService.get('chartToolPanelsDef')?.panels\n                ?.map(panel => {\n                    const menuOption = CHART_TOOL_PANEL_MENU_OPTIONS[panel]\n                    if (!menuOption) {\n                        _.warnOnce(`Invalid panel in chartToolPanelsDef.panels: '${panel}'`);\n                    }\n                    return menuOption;\n                })\n                .filter(panel => Boolean(panel));\n            panels = panelsOverride\n                ? panelsOverride\n                : Object.values(CHART_TOOL_PANEL_MENU_OPTIONS);\n\n            // pivot charts use the column tool panel instead of the data panel\n            if (chartController.isPivotChart()) {\n                panels = panels.filter(panel => panel !== 'chartData');\n            }\n\n            const defaultToolPanel = this.gridOptionsService.get('chartToolPanelsDef')?.defaultToolPanel;\n            defaultPanel = (defaultToolPanel && CHART_TOOL_PANEL_MENU_OPTIONS[defaultToolPanel]) || panels[0];\n\n            if (legacyFormat) {\n                chartToolbarOptions = panels.length > 0\n                    // Only one panel is required to display menu icon in toolbar\n                    ? [panels[0], ...chartToolbarOptions]\n                    : chartToolbarOptions;\n            }\n        } else { // To be deprecated in future. Toolbar options will be different to chart tool panels.\n            let tabOptions: ChartMenuOptions[] = [\n                'chartSettings',\n                'chartData',\n                'chartFormat',\n                chartController.isChartLinked() ? 'chartLink' : 'chartUnlink',\n                'chartDownload'\n            ];\n    \n            const toolbarItemsFunc = this.gridOptionsService.getCallback('getChartToolbarItems');\n    \n            if (toolbarItemsFunc) {\n                const isLegacyToolbar = this.gridOptionsService.get('suppressChartToolPanelsButton');\n                const params: WithoutGridCommon<GetChartToolbarItemsParams> = {\n                    defaultItems: isLegacyToolbar ? tabOptions : CHART_TOOLBAR_ALLOW_LIST\n                };\n    \n                tabOptions = toolbarItemsFunc(params).filter(option => {\n                    if (!CHART_TOOL_PANEL_ALLOW_LIST.includes(option as any) && !CHART_TOOLBAR_ALLOW_LIST.includes(option)) {\n                        _.warnOnce(`'${option}' is not a valid Chart Toolbar Option`);\n                        return false;\n                    } \n                    // If not legacy, remove chart tool panel options here,\n                    // and add them all in one go below\n                    else if (!isLegacyToolbar && CHART_TOOL_PANEL_ALLOW_LIST.includes(option as any)) {\n                        const msg = `'${option}' is a Chart Tool Panel option and will be ignored. Please use 'chartToolPanelsDef.panels' grid option instead`;\n                        _.warnOnce(msg);\n                        return false;\n                    }\n    \n                    return true;\n                });\n\n                if (!isLegacyToolbar) {\n                    // Add all the chart tool panels, as `chartToolPanelsDef.panels`\n                    // should be used for configuration\n                    tabOptions = tabOptions.concat(CHART_TOOL_PANEL_ALLOW_LIST);\n                }\n            }\n    \n            // pivot charts use the column tool panel instead of the data panel\n            if (chartController.isPivotChart()) {\n                tabOptions = tabOptions.filter(option => option !== 'chartData');\n            }\n    \n            const ignoreOptions: ChartMenuOptions[] = ['chartUnlink', 'chartLink', 'chartDownload'];\n            panels = tabOptions.filter(option => ignoreOptions.indexOf(option) === -1) as ChartToolPanelMenuOptions[];\n            defaultPanel = panels[0];\n    \n            chartToolbarOptions = tabOptions.filter(value =>\n                ignoreOptions.indexOf(value) !== -1 ||\n                (panels.length && value === panels[0])\n            );\n        }\n\n        return {\n            panels,\n            defaultPanel,\n            chartToolbarOptions\n        };\n    }\n\n    public doesChartToolbarExist(chartController: ChartController) {\n        const { chartToolbarOptions } = this.getToolbarOptionsAndPanels(chartController);\n        return [ 'chartMenu', ...CHART_TOOLBAR_ALLOW_LIST ].some(option => chartToolbarOptions.includes(option as any));\n    }\n\n    public doChartToolPanelsExist(chartController: ChartController) {\n        const { panels } = this.getToolbarOptionsAndPanels(chartController);\n        return panels.length > 0;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { ChartModel } from '@ag-grid-community/core';\nimport { AgChartThemeName } from 'ag-charts-community';\n\n// @ts-ignore\nimport { getCanonicalChartType, getSeriesType, isPieChartSeries } from './chartComp/utils/seriesTypeMapper';\n// @ts-ignore\nimport { ALL_AXIS_TYPES, getLegacyAxisType } from './chartComp/utils/axisTypeMapper';\n// @ts-ignore\nimport { VERSION } from '../version';\n\nconst DEBUG = false;\n\nexport function upgradeChartModel(model: ChartModel): ChartModel {\n    const originalVersion = model.version;\n    if (model.version == null) {\n        // Try to guess the version so we can apply the right subset of migrations.\n        model.version = heuristicVersionDetection(model);\n    }\n\n    model = migrateIfBefore('23.0.0', model, migrateV23);\n    model = migrateIfBefore('24.0.0', model, migrateV24);\n    model = migrateIfBefore('25.1.0', model, migrateV25_1);\n    model = migrateIfBefore('26.0.0', model, migrateV26);\n    model = migrateIfBefore('26.1.0', model, migrateV26_1);\n    // Switch from iChartOptions to iAgChartOptions....\n    model = migrateIfBefore('26.2.0', model, migrateV26_2);\n    model = migrateIfBefore('28.0.0', model, migrateV28);\n    model = migrateIfBefore('28.2.0', model, migrateV28_2);\n    model = migrateIfBefore('29.0.0', model, migrateV29);\n    model = migrateIfBefore('29.1.0', model, migrateV29_1);\n    model = migrateIfBefore('29.2.0', model, migrateV29_2);\n    model = migrateIfBefore('30.0.0', model, migrateV30);\n    model = migrateIfBefore('31.0.0', model, migrateV31);\n    model = cleanup(model);\n\n    // Bump version to latest.\n    model = migrateIfBefore(VERSION, model, (m) => m);\n\n    if (DEBUG && originalVersion !== model.version) {\n        console.log('AG Grid: ChartModel migration complete', { model });\n    }\n\n    return model;\n}\n\nfunction migrateV23(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/76c6744ff2b732d298d1ade73c122188854b5bac\n    model = jsonRename('chartOptions.legend.item.marker.type', 'shape', model);\n    model = jsonRename('chartOptions.seriesDefaults.marker.type', 'shape', model);\n\n    // https://github.com/ag-grid/ag-grid/commit/7bdf2cfd666acda758a818733a9f9cb35ac1d7a7\n    model = jsonRename('chartOptions.legend.padding', 'spacing', model);\n\n    return model;\n}\n\nfunction migrateV24(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chartOptions.seriesDefaults.marker.minSize', model);\n\n    const {\n        chartType,\n        chartPalette, // Migrate.\n        chartOptions: { xAxis, yAxis, ...chartOptions },\n        ...chartModel\n    } = model as any;\n    const axesTypes = getLegacyAxisType(chartType);\n    const axes = axesTypes?.map((type, i) => ({\n        type,\n        ...(i === 0 ? xAxis : yAxis),\n    }));\n\n    // Precise legacy palette fills/strokes can be found here for future reference:\n    // https://github.com/ag-grid/ag-grid/blob/b22.1.0/grid-enterprise-modules/charts/src/charts/chart/palettes.ts\n    const LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        borneo: 'ag-default',\n        material: 'ag-material',\n        bright: 'ag-vivid',\n    };\n\n    return {\n        chartType,\n        chartThemeName: LEGACY_PALETTES[chartPalette] ?? 'ag-default',\n        chartOptions: {\n            ...chartOptions,\n            axes,\n            xAxis,\n            yAxis,\n        },\n        ...chartModel,\n    } as ChartModel;\n}\n\nfunction migrateV25_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/61943f9fecbfb5ac1b9a1fd93788f9fdd8687181\n    model = jsonRename('chartOptions.seriesDefaults.label.minRequiredAngle', 'minAngle', model);\n    return model;\n}\n\nfunction migrateV26(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ dimOpacity, ...opts }: any) => ({\n        ...opts,\n        ...(dimOpacity != null ? { series: { dimOpacity } } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n\n    // https://github.com/ag-grid/ag-grid/commit/f4e854e3dc459400fa00e6da2873cb8e9cfff6fe#\n    model = jsonDelete('chart', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipClass', model);\n    model = jsonDelete('chartOptions.seriesDefaults.tooltipTracking', model);\n\n    // Cleanup label.rotation === 0, which was treated as 'use the default' on reload prior to 26.\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 0, model);\n    model = jsonDeleteDefault('chartOptions.axes[].label.rotation', 335, model);\n    return model;\n}\n\nfunction migrateV26_1(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/df2445d88e64cb4e831d6163104a0fa60ccde3b5\n    const highlightOptUpdate = ({ item, series, ...opts }: any) => ({\n        item: { ...opts, ...item },\n        ...(series ? { series } : {}),\n    });\n    model = jsonMutate('chartOptions.seriesDefaults.highlightStyle', model, highlightOptUpdate);\n    model = jsonMutate('chartOptions.series[].highlightStyle', model, highlightOptUpdate);\n    return model;\n}\n\nfunction migrateV26_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/8b2e223cb1a687cb6c1d70b9f75f52fa29d00341\n    model = jsonMove('chartOptions.seriesDefaults.fill.opacity', 'chartOptions.seriesDefaults.fillOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.opacity', 'chartOptions.seriesDefaults.strokeOpacity', model);\n    model = jsonMove('chartOptions.seriesDefaults.stroke.width', 'chartOptions.seriesDefaults.strokeWidth', model);\n    model = jsonDelete('chartOptions.seriesDefaults.fill', model);\n    model = jsonDelete('chartOptions.seriesDefaults.stroke', model);\n    model = jsonDelete('chartOptions.seriesDefaults.callout.colors', model);\n    model = jsonDelete('chartOptions.xAxis', model);\n    model = jsonDelete('chartOptions.yAxis', model);\n    const {\n        chartType: providedChartType,\n        chartOptions: { axes, series, seriesDefaults, ...otherChartOptions },\n        ...otherModelProps\n    } = model as any;\n\n    // At 26.2.0 combination charts weren't supported, so we can safely assume a single series type.\n    // We can't rely on the `series.type` field as it was incorrect (in v25.0.0 line chart has an\n    // `area` series).\n    // Note that in v31.1.0, the canonical name for the 'doughnut' chart type changed to 'donut'.\n    const chartType = getCanonicalChartType(providedChartType);\n    const seriesType = getSeriesType(chartType);\n    const seriesTypes = [seriesType];\n\n    const chartTypeMixin: any = {};\n    if (!isPieChartSeries(seriesType)) {\n        const minimalAxis = { top: {}, bottom: {}, left: {}, right: {} };\n        const updatedAxes = axes\n            .map(({ type, ...axisProps }: any) => ({\n                [type]: { ...minimalAxis, ...axisProps },\n            }))\n            .reduce(merge, {});\n        ALL_AXIS_TYPES.filter((v) => updatedAxes[v] == null).forEach((v) => {\n            updatedAxes[v] = { ...minimalAxis };\n        });\n        chartTypeMixin.axes = updatedAxes;\n    }\n\n    const updatedChartOptions = seriesTypes\n        .map((t: string) => ({\n            [t]: {\n                ...chartTypeMixin,\n                series: seriesDefaults,\n                ...otherChartOptions,\n            },\n        }))\n        .reduce(merge, {});\n\n    model = {\n        ...otherModelProps,\n        chartType,\n        chartOptions: updatedChartOptions,\n    };\n\n    return model;\n}\n\nfunction migrateV28(model: ChartModel) {\n    model = jsonDelete('chartOptions.*.title.padding', model);\n    model = jsonDelete('chartOptions.*.subtitle.padding', model);\n    model = jsonDelete('chartOptions.*.axes.*.title.padding', model);\n    model = jsonBackfill('chartOptions.*.axes.*.title.enabled', false, model);\n\n    return model;\n}\n\nfunction migrateV28_2(model: ChartModel) {\n    model = jsonRename('chartOptions.pie.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.pie.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n\n    model = jsonRename('chartOptions.donut.series.callout', 'calloutLine', model);\n    model = jsonRename('chartOptions.donut.series.label', 'calloutLabel', model);\n    model = jsonRename('chartOptions.donut.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.donut.series.labelName', 'sectorLabelName', model);\n\n    // series.yKeys => yKey ?\n    // series.yNames => yName ?\n\n    return model;\n}\n\nfunction migrateV29(model: ChartModel) {\n    model = jsonMoveIfMissing('chartOptions.scatter.series.fill', 'chartOptions.scatter.series.marker.fill', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.fillOpacity',\n        'chartOptions.scatter.series.marker.fillOpacity',\n        model\n    );\n    model = jsonMoveIfMissing('chartOptions.scatter.series.stroke', 'chartOptions.scatter.series.marker.stroke', model);\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeOpacity',\n        'chartOptions.scatter.series.marker.strokeOpacity',\n        model\n    );\n    model = jsonMoveIfMissing(\n        'chartOptions.scatter.series.strokeWidth',\n        'chartOptions.scatter.series.marker.strokeWidth',\n        model\n    );\n    model = jsonMove('chartOptions.scatter.series.paired', 'chartOptions.scatter.paired', model);\n\n    return model;\n}\n\nfunction migrateV29_1(model: ChartModel) {\n    model = jsonDelete('chartOptions.axes[].tick.count', model);\n\n    return model;\n}\n\nfunction migrateV29_2(model: ChartModel) {\n    // https://github.com/ag-grid/ag-grid/commit/ce11956492e42e845932edb4e05d7b0b21db5c61\n    const tooltipOptUpdate = ({ tracking, ...opts }: any) => {\n        const output = { ...opts };\n        if (tracking === false) {\n            output.position ??= { type: 'pointer' };\n            output.range ??= 'nearest';\n        } else if (tracking === true) {\n            output.position ??= { type: 'node' };\n            output.range ??= 'nearest';\n        }\n        return output;\n    };\n    model = jsonMutate('chartOptions.*.tooltip', model, tooltipOptUpdate);\n\n    return model;\n}\n\nfunction migrateV30(model: ChartModel) {\n    // Repeated from migrateV28_2() as they were applied retrospectively for the v30 release.\n    model = jsonRename('chartOptions.pie.series.labelKey', 'sectorLabelKey', model);\n    model = jsonRename('chartOptions.pie.series.labelName', 'sectorLabelName', model);\n    // Late-applied migrations for deprecations in the 29.x.y range.\n    model = migrateV29_1(model);\n    model = migrateV29_2(model);\n\n    // Actual v30 changes.\n    model = jsonDelete('chartOptions.*.series.flipXY', model);\n    model = jsonAdd('chartOptions.common.legend.enabled', true, model);\n    model = jsonBackfill('chartOptions.common.legend.position', 'right', model);\n\n    return model;\n}\n\nfunction migrateV31(model: ChartModel) {\n    const V30_LEGACY_PALETTES: Record<string, AgChartThemeName> = {\n        'ag-pastel': 'ag-sheets',\n        'ag-solar': 'ag-polychroma'\n    };\n\n    const updatedModel = jsonRename('chartOptions.column', 'bar', model);\n\n    const chartThemeName = V30_LEGACY_PALETTES[updatedModel.chartThemeName] || updatedModel.chartThemeName;\n\n    return {\n        ...updatedModel,\n        chartThemeName\n    };\n}\n\nfunction cleanup(model: ChartModel) {\n    // Remove fixed width/height - this has never been supported via UI configuration.\n    model = jsonDelete('chartOptions.*.width', model);\n    model = jsonDelete('chartOptions.*.height', model);\n    model = jsonBackfill('chartOptions.*.axes.category.label.autoRotate', true, model);\n\n    return model;\n}\n\nexport function heuristicVersionDetection(model: ChartModel) {\n    const modelAny = model as any;\n\n    if (model.version != null) {\n        return model.version;\n    }\n\n    const hasKey = (obj: any, ...keys: string[]) => {\n        return Object.keys(obj || {}).some((k) => keys.includes(k));\n    };\n\n    const chartOptions = modelAny.chartOptions;\n    const seriesOptions = hasKey(chartOptions, 'seriesDefaults')\n        ? chartOptions?.seriesDefaults\n        : chartOptions?.[Object.keys(chartOptions)[0]];\n    const hints = {\n        '27.0.0': hasKey(modelAny, 'seriesChartTypes'),\n        '26.2.0': !hasKey(chartOptions, 'seriesDefaults'),\n        '26.1.0': hasKey(seriesOptions?.highlightStyle, 'item'),\n        '26.0.0': hasKey(seriesOptions?.highlightStyle, 'series'),\n        // '26.0.0': modelAny.chart === undefined,\n        '25.1.0': hasKey(seriesOptions?.label, 'minAngle'),\n        '25.0.0':\n            hasKey(modelAny, 'modelType', 'aggFunc', 'unlinkChart', 'suppressChartRanges') ||\n            hasKey(seriesOptions, 'lineDash', 'lineDashOffset'),\n        '24.0.0': hasKey(modelAny, 'chartThemeName', 'chart') || hasKey(chartOptions, 'series'),\n        '23.2.0': hasKey(chartOptions, 'navigator'),\n        '23.0.0': hasKey(chartOptions?.legend?.item?.marker, 'shape'),\n        '22.1.0': hasKey(modelAny, 'chartPalette', 'chartType'),\n    };\n\n    // Default to 27.1.0, the last version before we added `version`.\n    const defaultVersion = '27.1.0';\n    const matchingHints = Object.entries(hints).filter(([_, match]) => match);\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersionCandidates: matchingHints });\n    const [heuristicVersion = defaultVersion] = matchingHints[0];\n\n    if (DEBUG) console.log('AG Grid: ChartModel migration', { heuristicVersion });\n    return heuristicVersion;\n}\n\nfunction migrateIfBefore(maxVersion: string, model: ChartModel, migration: (m: ChartModel) => ChartModel): ChartModel {\n    if (versionNumber(maxVersion) > versionNumber(model.version!)) {\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratingTo: maxVersion });\n\n        const result = migration(model);\n        result.version = maxVersion;\n\n        if (DEBUG) console.log('AG Grid: ChartModel migration', { migratedTo: maxVersion, result });\n        return result;\n    }\n\n    return model;\n}\n\ntype VersionParts = { major: number; minor: number; patch: number };\nfunction versionParts(version: string): VersionParts {\n    const split = typeof version === 'string' ? version.split('.').map((v) => Number(v)) : [];\n    if (split.length !== 3 || split.some((v) => isNaN(v))) {\n        throw new Error('AG Grid - Illegal version string: ' + version);\n    }\n\n    return {\n        major: split[0],\n        minor: split[1],\n        patch: split[2],\n    };\n}\n\nfunction versionNumber(version: string): number {\n    const { major, minor, patch } = versionParts(version);\n\n    // Return a number of the form MMmmPP.\n    return major * 10_000 + minor * 100 + patch;\n}\n\nfunction jsonDeleteDefault(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        if (parent[prop] === defaultValue) {\n            delete parent[prop];\n        }\n    });\n}\n\nfunction jsonBackfill(path: string | string[], defaultValue: any, json: any): any {\n    return jsonMutateProperty(path, false, json, (parent, prop) => {\n        if (parent[prop] == null) {\n            parent[prop] = defaultValue;\n        }\n    });\n}\n\nfunction jsonAdd(path: string | string[], value: any, json: any): any {\n    if (typeof path === 'string') {\n        path = path.split('.');\n    }\n\n    const nextPath = path[0];\n    if (path.length > 1) {\n        json[nextPath] = jsonAdd(path.slice(1), value, json[nextPath] ?? {});\n    }\n\n    const hasProperty = Object.keys(json).includes(nextPath);\n    if (!hasProperty) {\n        json[nextPath] = value;\n    }\n\n    return json;\n}\n\nfunction jsonMove(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        parent[prop] = valueToMove;\n    });\n}\n\nfunction jsonMoveIfMissing(from: string, to: string, json: any): any {\n    let valueToMove: any = undefined;\n    let valueFound = false;\n    json = jsonMutateProperty(from, true, json, (parent, prop) => {\n        valueFound = true;\n        valueToMove = parent[prop];\n        delete parent[prop];\n    });\n\n    if (!valueFound) {\n        return json;\n    }\n\n    return jsonMutateProperty(to, false, json, (parent, prop) => {\n        if (parent[prop] === undefined) {\n            parent[prop] = valueToMove;\n        }\n    });\n}\n\nfunction jsonRename(path: string | string[], renameTo: string, json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => {\n        parent[renameTo] = parent[prop];\n        delete parent[prop];\n    });\n}\n\nfunction jsonDelete(path: string | string[], json: any): any {\n    return jsonMutateProperty(path, true, json, (parent, prop) => delete parent[prop]);\n}\n\nfunction jsonMutateProperty(\n    path: string | string[],\n    skipMissing: boolean,\n    json: any,\n    mutator: (parent: any, targetProp: string) => any\n): void {\n    const pathElements = path instanceof Array ? path : path.split('.');\n    const parentPathElements = pathElements.slice(0, pathElements.length - 1);\n    const targetName = pathElements[pathElements.length - 1];\n\n    return jsonMutate(parentPathElements, json, (parent) => {\n        const hasProperty = Object.keys(parent).includes(targetName);\n        if (skipMissing && !hasProperty) {\n            return parent;\n        }\n\n        const result = { ...parent };\n        mutator(result, targetName);\n        return result;\n    });\n}\n\nfunction jsonMutate(path: string | string[], json: any, mutator: (v: any) => any): any {\n    const pathElements = path instanceof Array ? path : path.split('.');\n\n    // Clone to avoid mutating original input.\n    json = { ...json };\n\n    if (pathElements.length === 0) {\n        return mutator(json);\n    } else if (pathElements[0].startsWith('{')) {\n        const pathOptions = pathElements[0].substring(1, pathElements[0].lastIndexOf('}')).split(',');\n        for (const pathOption of pathOptions) {\n            if (json[pathOption] != null) {\n                json[pathOption] = jsonMutate(pathElements.slice(1), json[pathOption], mutator);\n            }\n        }\n    } else if (pathElements[0].endsWith('[]')) {\n        const arrayName = pathElements[0].substring(0, path[0].indexOf('['));\n        if (json[arrayName] instanceof Array) {\n            json[arrayName] = json[arrayName].map((v: any) => jsonMutate(pathElements.slice(1), v, mutator));\n        }\n    } else if (pathElements[0] === '*') {\n        for (const jsonProp in json) {\n            json[jsonProp] = jsonMutate(pathElements.slice(1), json[jsonProp], mutator);\n        }\n    } else if (json[pathElements[0]] != null) {\n        json[pathElements[0]] = jsonMutate(pathElements.slice(1), json[pathElements[0]], mutator);\n    }\n\n    return json;\n}\n\nconst merge = (r: {}, n: {}) => ({ ...r, ...n });\n", "import { Bean, BeanStub } from \"@ag-grid-community/core\";\n\nexport type ChartTranslationKey = keyof typeof ChartTranslationService.DEFAULT_TRANSLATIONS;\n\n@Bean(\"chartTranslationService\")\nexport class ChartTranslationService extends BeanStub {\n    public static readonly DEFAULT_TRANSLATIONS = {\n        pivotChartTitle: 'Pivot Chart',\n        rangeChartTitle: 'Range Chart',\n        settings: 'Chart',\n        data: 'Data',\n        format: 'Format',\n        categories: 'Categories',\n        defaultCategory: '(None)',\n        series: 'Series',\n        switchCategorySeries: 'Switch Category / Series',\n        categoryValues: 'Category Values',\n        seriesLabels: 'Series Labels',\n        aggregate: 'Aggregate',\n        xyValues: 'X Y Values',\n        paired: 'Paired Mode',\n        axis: 'Axis',\n        xAxis: 'Horizontal Axis',\n        yAxis: 'Vertical Axis',\n        polarAxis: 'Polar Axis',\n        radiusAxis: 'Radius Axis',\n        navigator: 'Navigator',\n        zoom: 'Zoom',\n        animation: 'Animation',\n        crosshair: 'Crosshair',\n        color: 'Color',\n        thickness: 'Thickness',\n        preferredLength: 'Preferred Length',\n        xType: 'X Type',\n        axisType: 'Axis Type',\n        automatic: 'Automatic',\n        category: 'Category',\n        number: 'Number',\n        time: 'Time',\n        timeFormat: 'Time Format',\n        autoRotate: 'Auto Rotate',\n        labelRotation: 'Rotation',\n        circle: 'Circle',\n        orientation: 'Orientation',\n        polygon: 'Polygon',\n        fixed: 'Fixed',\n        parallel: 'Parallel',\n        perpendicular: 'Perpendicular',\n        radiusAxisPosition: 'Position',\n        ticks: 'Ticks',\n        gridLines: 'Grid Lines',\n        width: 'Width',\n        height: 'Height',\n        length: 'Length',\n        padding: 'Padding',\n        spacing: 'Spacing',\n        chart: 'Chart',\n        title: 'Title',\n        titlePlaceholder: 'Chart title - double click to edit',\n        background: 'Background',\n        font: 'Font',\n        top: 'Top',\n        right: 'Right',\n        bottom: 'Bottom',\n        left: 'Left',\n        labels: 'Labels',\n        calloutLabels: 'Callout Labels',\n        sectorLabels: 'Sector Labels',\n        positionRatio: 'Position Ratio',\n        size: 'Size',\n        shape: 'Shape',\n        minSize: 'Minimum Size',\n        maxSize: 'Maximum Size',\n        legend: 'Legend',\n        position: 'Position',\n        markerSize: 'Marker Size',\n        markerStroke: 'Marker Stroke',\n        markerPadding: 'Marker Padding',\n        itemSpacing: 'Item Spacing',\n        itemPaddingX: 'Item Padding X',\n        itemPaddingY: 'Item Padding Y',\n        layoutHorizontalSpacing: 'Horizontal Spacing',\n        layoutVerticalSpacing: 'Vertical Spacing',\n        strokeWidth: 'Stroke Width',\n        offset: 'Offset',\n        offsets: 'Offsets',\n        tooltips: 'Tooltips',\n        callout: 'Callout',\n        markers: 'Markers',\n        shadow: 'Shadow',\n        blur: 'Blur',\n        xOffset: 'X Offset',\n        yOffset: 'Y Offset',\n        lineWidth: 'Line Width',\n        lineDash: 'Line Dash',\n        lineDashOffset: 'Dash Offset',\n        scrollingZoom: 'Scrolling',\n        scrollingStep: 'Scrolling Step',\n        selectingZoom: 'Selecting',\n        durationMillis: 'Duration (ms)',\n        crosshairLabel: 'Label',\n        crosshairSnap: 'Snap to Node',\n        normal: 'Normal',\n        bold: 'Bold',\n        italic: 'Italic',\n        boldItalic: 'Bold Italic',\n        predefined: 'Predefined',\n        fillOpacity: 'Fill Opacity',\n        strokeColor: 'Line Color',\n        strokeOpacity: 'Line Opacity',\n        miniChart: 'Mini-Chart',\n        histogramBinCount: 'Bin count',\n        connectorLine: 'Connector Line',\n        seriesItems: 'Series Items',\n        seriesItemType: 'Item Type',\n        seriesItemPositive: 'Positive',\n        seriesItemNegative: 'Negative',\n        seriesItemLabels: 'Item Labels',\n        columnGroup: 'Column',\n        barGroup: 'Bar',\n        pieGroup: 'Pie',\n        lineGroup: 'Line',\n        scatterGroup: 'X Y (Scatter)',\n        areaGroup: 'Area',\n        polarGroup: 'Polar',\n        statisticalGroup: 'Statistical',\n        hierarchicalGroup: 'Hierarchical',\n        specializedGroup: 'Specialized',\n        combinationGroup: 'Combination',\n        groupedColumnTooltip: 'Grouped',\n        stackedColumnTooltip: 'Stacked',\n        normalizedColumnTooltip: '100% Stacked',\n        groupedBarTooltip: 'Grouped',\n        stackedBarTooltip: 'Stacked',\n        normalizedBarTooltip: '100% Stacked',\n        pieTooltip: 'Pie',\n        donutTooltip: 'Donut',\n        lineTooltip: 'Line',\n        groupedAreaTooltip: 'Area',\n        stackedAreaTooltip: 'Stacked',\n        normalizedAreaTooltip: '100% Stacked',\n        scatterTooltip: 'Scatter',\n        bubbleTooltip: 'Bubble',\n        histogramTooltip: 'Histogram',\n        radialColumnTooltip: 'Radial Column',\n        radialBarTooltip: 'Radial Bar',\n        radarLineTooltip: 'Radar Line',\n        radarAreaTooltip: 'Radar Area',\n        nightingaleTooltip: 'Nightingale',\n        rangeBarTooltip: 'Range Bar',\n        rangeAreaTooltip: 'Range Area',\n        boxPlotTooltip: 'Box Plot',\n        treemapTooltip: 'Treemap',\n        sunburstTooltip: 'Sunburst',\n        heatmapTooltip: 'Heatmap',\n        waterfallTooltip: 'Waterfall',\n        columnLineComboTooltip: 'Column & Line',\n        areaColumnComboTooltip: 'Area & Column',\n        customComboTooltip: 'Custom Combination',\n        innerRadius: 'Inner Radius',\n        startAngle: 'Start Angle',\n        endAngle: 'End Angle',\n        reverseDirection: 'Reverse Direction',\n        groupPadding: 'Group Padding',\n        seriesPadding: 'Series Padding',\n        group: 'Group',\n        tile: 'Tile',\n        whisker: 'Whisker',\n        cap: 'Cap',\n        capLengthRatio: 'Length Ratio',\n        labelPlacement: 'Placement',\n        inside: 'Inside',\n        outside: 'Outside',\n        noDataToChart: 'No data available to be charted.',\n        pivotChartRequiresPivotMode: 'Pivot Chart requires Pivot Mode enabled.',\n        chartSettingsToolbarTooltip: 'Menu',\n        chartLinkToolbarTooltip: 'Linked to Grid',\n        chartUnlinkToolbarTooltip: 'Unlinked from Grid',\n        chartDownloadToolbarTooltip: 'Download Chart',\n        chartMenuToolbarTooltip: 'Menu',\n        chartEdit: 'Edit Chart',\n        chartAdvancedSettings: 'Advanced Settings',\n        chartLink: 'Link to Grid',\n        chartUnlink: 'Unlink from Grid',\n        chartDownload: 'Download Chart',\n        histogramFrequency: \"Frequency\",\n        seriesChartType: 'Series Chart Type',\n        seriesType: 'Series Type',\n        secondaryAxis: 'Secondary Axis',\n        seriesAdd: 'Add a series',\n        categoryAdd: 'Add a category',\n        area: 'Area',\n        bar: 'Bar',\n        column: 'Column',\n        line: 'Line',\n        scatter: 'Scatter',\n        histogram: 'Histogram',\n        radialColumn: 'Radial Column',\n        radialBar: 'Radial Bar',\n        radarLine: 'Radar Line',\n        radarArea: 'Radar Area',\n        nightingale: 'Nightingale',\n        rangeBar: 'Range Bar',\n        rangeArea: 'Range Area',\n        treemap: 'Treemap',\n        sunburst: 'Sunburst',\n        waterfall: 'Waterfall',\n        boxPlot: 'Box Plot',\n        pie: 'Pie',\n        donut: 'Donut',\n        stackedArea: 'StackedArea',\n        groupedColumn: 'Grouped Column',\n        stackedColumn: 'Stacked Column',\n        advancedSettings: 'Advanced Settings',\n        ariaChartMenuClose: 'Close Chart Edit Menu',\n        timeFormatSlashesDDMMYYYY: 'DD/MM/YYYY',\n        timeFormatSlashesMMDDYYYY: 'MM/DD/YYYY',\n        timeFormatSlashesDDMMYY: 'DD/MM/YY',\n        timeFormatSlashesMMDDYY: 'MM/DD/YY',\n        timeFormatDotsDDMYY: 'DD.M.YY',\n        timeFormatDotsMDDYY: 'M.DD.YY',\n        timeFormatDashesYYYYMMDD: 'YYYY-MM-DD',\n        timeFormatSpacesDDMMMMYYYY: 'DD MMMM YYYY',\n        timeFormatHHMMSS: 'HH:MM:SS',\n        timeFormatHHMMSSAmPm: 'HH:MM:SS AM/PM',\n        sum: 'Sum',\n        first: 'First',\n        last: 'Last',\n        min: 'Min',\n        max: 'Max',\n        count: 'Count',\n        avg: 'Average',\n    };\n\n    public translate(toTranslate: ChartTranslationKey): string {\n        const translate = this.localeService.getLocaleTextFunc();\n        const defaultTranslation = ChartTranslationService.DEFAULT_TRANSLATIONS[toTranslate];\n        return translate(toTranslate, defaultTranslation);\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    GridApi,\n    RowNode,\n    ValueService\n} from \"@ag-grid-community/core\";\n\n@Bean(\"chartCrossFilterService\")\nexport class ChartCrossFilterService extends BeanStub {\n\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('valueService') private readonly valueService: ValueService;\n\n    public filter(event: any, reset: boolean = false): void {\n        const filterModel = this.gridApi.getFilterModel();\n\n        // filters should be reset when user clicks on canvas background\n        if (reset) {\n            this.resetFilters(filterModel);\n            return;\n        }\n\n        let colId = ChartCrossFilterService.extractFilterColId(event);\n        if (this.isValidColumnFilter(colId)) {\n            // update filters based on current chart selections\n            this.updateFilters(filterModel, event, colId);\n        } else {\n            console.warn(\"AG Grid: cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' \" +\n                \"to be defined on the column with id: '\" + colId + \"'\");\n        }\n    }\n\n    private resetFilters(filterModel: any) {\n        const filtersExist = Object.keys(filterModel).length > 0;\n        if (filtersExist) {\n            // only reset filters / charts when necessary to prevent undesirable flickering effect\n            this.gridApi.setFilterModel(null);\n            this.gridApi.onFilterChanged();\n        }\n    }\n\n    private updateFilters(filterModel: any, event: any, colId: string) {\n        let dataKey = ChartCrossFilterService.extractFilterColId(event);\n        let rawValue = event.datum[dataKey];\n        if (rawValue === undefined) {\n            return;\n        }\n\n        let selectedValue = rawValue.toString();\n\n        if (event.event.metaKey || event.event.ctrlKey) {\n            const existingGridValues = this.getCurrentGridValuesForCategory(colId);\n            const valueAlreadyExists = _.includes(existingGridValues, selectedValue);\n\n            let updatedValues;\n            if (valueAlreadyExists) {\n                updatedValues = existingGridValues.filter((v: any) => v !== selectedValue);\n            } else {\n                updatedValues = existingGridValues;\n                updatedValues.push(selectedValue);\n            }\n\n            filterModel[colId] = this.getUpdatedFilterModel(colId, updatedValues);\n        } else {\n            const updatedValues = [selectedValue];\n            filterModel = {[colId]: this.getUpdatedFilterModel(colId, updatedValues)};\n        }\n\n        this.gridApi.setFilterModel(filterModel);\n    }\n\n    private getUpdatedFilterModel(colId: any, updatedValues: any[]) {\n        let columnFilterType = this.getColumnFilterType(colId);\n        if (columnFilterType === 'agMultiColumnFilter') {\n            return {filterType: 'multi', filterModels: [null, {filterType: 'set', values: updatedValues}]};\n        }\n        return {filterType: 'set', values: updatedValues};\n    }\n\n    private getCurrentGridValuesForCategory(colId: string) {\n        let filteredValues: any[] = [];\n        const column = this.getColumnById(colId);\n        this.gridApi.forEachNodeAfterFilter((rowNode: RowNode) => {\n            if (column && !rowNode.group) {\n                const value = this.valueService.getValue(column, rowNode) + '';\n                if (!filteredValues.includes(value)) {\n                    filteredValues.push(value);\n                }\n            }\n        });\n        return filteredValues;\n    }\n\n    private static extractFilterColId(event: any): string {\n        return event.xKey || event.calloutLabelKey;\n    }\n\n    private isValidColumnFilter(colId: any) {\n        if (colId.indexOf('-filtered-out')) {\n            colId = colId.replace('-filtered-out', '');\n        }\n\n        let filterType = this.getColumnFilterType(colId);\n        if (typeof filterType === 'boolean') {\n            return filterType;\n        }\n\n        return _.includes(['agSetColumnFilter', 'agMultiColumnFilter'], filterType);\n    }\n\n    private getColumnFilterType(colId: any) {\n        let gridColumn = this.getColumnById(colId);\n        if (gridColumn) {\n            const colDef = gridColumn.getColDef();\n            return colDef.filter;\n        }\n    }\n\n    private getColumnById(colId: string) {\n        return this.columnModel.getGridColumn(colId) as Column;\n    }\n}\n", "import { ModuleValidationResult } from \"@ag-grid-community/core\";\n\nconst VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION = 28;\nconst VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION = 6;\n\nfunction isValidVersion(version: string) {\n  return version && version.match(/\\d+\\.\\d+\\.\\d+/);\n}\n\nfunction isValidMajorVersion({ gridMajorVersion, chartsMajorVersion }: {\n  gridMajorVersion: string,\n  chartsMajorVersion: string\n}): boolean {\n  const gridMajor = parseInt(gridMajorVersion, 10);\n  const chartsMajor = parseInt(chartsMajorVersion, 10);\n\n  const gridMajorDifference = gridMajor - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION;\n  const chartsMajorDifference = chartsMajor - VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n  const isFirstOrAfterVersion = gridMajorDifference >= 0;\n\n  return gridMajorDifference === chartsMajorDifference && isFirstOrAfterVersion;\n}\n\nexport function gridChartVersion(gridVersion: string): {\n  gridMajorMinor: string,\n  chartsMajorMinor: string\n} | undefined {\n  if (!gridVersion || !isValidVersion(gridVersion)) {\n    return undefined;\n  }\n\n  const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n  const gridMajorMinor = `${gridMajor}.${gridMinor}.x`;\n\n  const gridMajorNumber = parseInt(gridMajor, 10);\n  const chartsMajor = (gridMajorNumber - VERSION_CHECKING_FIRST_GRID_MAJOR_VERSION) + VERSION_CHECKING_FIRST_CHARTS_MAJOR_VERSION;\n\n  if (chartsMajor < 0) {\n    return undefined;\n  }\n\n  const chartsMinor = gridMinor;\n  const chartsMajorMinor = `${chartsMajor}.${chartsMinor}.x`;\n\n  return {\n    gridMajorMinor,\n    chartsMajorMinor\n  }\n}\n\nexport function validGridChartsVersionErrorMessage({ type, gridVersion, chartsVersion }: {\n  type: 'incompatible' | 'invalidCharts' | 'invalidGrid' | 'invalid',\n  gridVersion?: string,\n  chartsVersion?: string\n}): string {\n  const invalidMessage = 'AG Grid: AG Grid version is incompatible. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.'\n\n  if (!gridVersion) {\n    return invalidMessage;\n  }\n\n  const version = gridChartVersion(gridVersion);\n  if (!version) {\n    return invalidMessage;\n  }\n\n  const { gridMajorMinor, chartsMajorMinor } = version;\n\n  if (type === 'incompatible') {\n    return `AG Grid version ${gridVersion} and AG Charts version ${chartsVersion} is not supported. AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`\n  } else if (type === 'invalidCharts') {\n    return `AG Grid version ${gridMajorMinor} should be used with AG Chart ${chartsMajorMinor}. Please see https://www.ag-grid.com/javascript-data-grid/modules/ for more information.`\n  }\n\n  return invalidMessage;\n}\n\nexport function validGridChartsVersion({ gridVersion, chartsVersion }: {\n  gridVersion: string,\n  chartsVersion: string\n}): ModuleValidationResult {\n  if (!isValidVersion(chartsVersion)) {\n    return {\n      isValid: false,\n      message: validGridChartsVersionErrorMessage({ type: 'invalidCharts', gridVersion, chartsVersion })\n    }\n  }\n  if (!isValidVersion(gridVersion)) {\n    return {\n      isValid: false,\n      message: validGridChartsVersionErrorMessage({ type: 'invalidGrid', gridVersion, chartsVersion })\n    }\n  }\n\n  const [gridMajor, gridMinor] = gridVersion.split('.') || [];\n  const [chartsMajor, chartsMinor] = chartsVersion.split('.') || [];\n  const isValidMajor = isValidMajorVersion({\n    gridMajorVersion: gridMajor,\n    chartsMajorVersion: chartsMajor\n  })\n\n  if (isValidMajor && gridMinor === chartsMinor) {\n    return {\n      isValid: true\n    }\n  } else if (!isValidMajor || gridMinor !== chartsMinor) {\n    return {\n      isValid: false,\n      message: validGridChartsVersionErrorMessage({ type: 'incompatible', gridVersion, chartsVersion })\n    }  \n  }\n\n  return {\n    isValid: false,\n    message: validGridChartsVersionErrorMessage({ type: 'invalid', gridVersion, chartsVersion })\n  }\n}", "import {\n    AgMenuItemComponent,\n    AgMenuList,\n    Autowired,\n    Bean,\n    BeanStub,\n    Component,\n    FocusService,\n    IAfterGuiAttachedParams,\n    MenuItemDef,\n    PopupService,\n    PostConstruct,\n    RefSelector,\n    _\n} from '@ag-grid-community/core';\nimport { ChartController } from '../chartController';\nimport { ChartMenuService } from '../services/chartMenuService';\nimport { ChartTranslationService } from '../services/chartTranslationService';\nimport { ChartMenuContext } from './chartMenuContext';\n\n@Bean('chartMenuListFactory')\nexport class ChartMenuListFactory extends BeanStub {\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('chartMenuService') private readonly chartMenuService: ChartMenuService;\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private activeChartMenuList?: ChartMenuList;\n\n    public showMenuList(params: {\n        eventSource: HTMLElement,\n        showMenu: () => void,\n        chartMenuContext: ChartMenuContext\n    }): void {\n        const { eventSource, showMenu, chartMenuContext } = params;\n        const areChartToolPanelsEnabled = this.chartMenuService.doChartToolPanelsExist(chartMenuContext.chartController);\n        const menuItems = this.mapWithStockItems(\n            this.getMenuItems(chartMenuContext.chartController, areChartToolPanelsEnabled),\n            chartMenuContext,\n            showMenu,\n            eventSource,\n            areChartToolPanelsEnabled)\n        ;\n        if (!menuItems.length) {\n            return;\n        }\n        const chartMenuList = this.createBean(new ChartMenuList(menuItems));\n        this.activeChartMenuList = chartMenuList;\n\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const eGui = chartMenuList.getGui()\n\n        this.popupService.addPopup({\n            modal: true,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                this.destroyBean(chartMenuList);\n                this.activeChartMenuList = undefined;\n                const document = this.gridOptionsService.getDocument();\n                if (document.activeElement === document.body) {\n                    eventSource.focus({ preventScroll: true });\n                }\n            },\n            afterGuiAttached: params => chartMenuList.afterGuiAttached(params),\n            positionCallback: () => {\n                {\n                    this.popupService.positionPopupByComponent({\n                        type: 'chartMenu',\n                        eventSource,\n                        ePopup: eGui,\n                        alignSide,\n                        nudgeX: 4 * multiplier,\n                        nudgeY: 4,\n                        position: 'under',\n                        keepWithinBounds: true,\n                    });\n                }\n            },\n            ariaLabel: 'Chart Menu'\n        });\n    }\n\n    private getMenuItems(chartController: ChartController, areChartToolPanelsEnabled: boolean): (MenuItemDef | string)[] {\n        const defaultItems = [\n            ...(areChartToolPanelsEnabled ? ['chartEdit'] : []),\n            ...(chartController.isEnterprise() ? ['chartAdvancedSettings'] : []),\n            chartController.isChartLinked() ? 'chartUnlink' : 'chartLink',\n            'chartDownload'\n        ];\n        const chartMenuItems = this.gridOptionsService.get('chartMenuItems');\n        if (!chartMenuItems) {\n            return defaultItems;\n        } else if (Array.isArray(chartMenuItems)) {\n            return chartMenuItems;\n        } else {\n            return chartMenuItems(this.gridOptionsService.addGridCommonParams({\n                defaultItems\n            }));\n        }\n    }\n\n    private mapWithStockItems(originalList: (MenuItemDef | string)[], chartMenuContext: ChartMenuContext, showMenu: () => void, eventSource: HTMLElement, areChartToolPanelsEnabled: boolean): MenuItemDef[] {\n        if (!originalList) {\n            return [];\n        }\n        const resultList: MenuItemDef[] = [];\n\n        originalList.forEach(menuItemOrString => {\n            let result: MenuItemDef | null;\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, chartMenuContext, showMenu, eventSource, areChartToolPanelsEnabled);\n            } else {\n                result = { ...menuItemOrString };\n            }\n            if (!result) { return; }\n\n            const { subMenu } = result;\n            if (Array.isArray(subMenu)) {\n                result.subMenu = this.mapWithStockItems(subMenu, chartMenuContext, showMenu, eventSource, areChartToolPanelsEnabled);\n            }\n\n            resultList.push(result);\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(key: string, chartMenuContext: ChartMenuContext, showMenu: () => void, eventSource: HTMLElement, areChartToolPanelsEnabled: boolean): MenuItemDef | null {\n        switch (key) {\n            case 'chartEdit':\n                return areChartToolPanelsEnabled ? this.createMenuItem(this.chartTranslationService.translate('chartEdit'), 'chartsMenuEdit', showMenu) : null;\n            case 'chartAdvancedSettings':\n                return this.createMenuItem(\n                    this.chartTranslationService.translate('chartAdvancedSettings'),\n                    'chartsMenuAdvancedSettings',\n                    () => this.chartMenuService.openAdvancedSettings(chartMenuContext, eventSource)\n                );\n            case 'chartUnlink':\n                return chartMenuContext.chartController.isChartLinked() ? this.createMenuItem(\n                    this.chartTranslationService.translate('chartUnlink'),\n                    'unlinked',\n                    () => this.chartMenuService.toggleLinked(chartMenuContext)\n                ) : null;\n            case 'chartLink':\n                return !chartMenuContext.chartController.isChartLinked() ? this.createMenuItem(\n                    this.chartTranslationService.translate('chartLink'),\n                    'linked',\n                    () => this.chartMenuService.toggleLinked(chartMenuContext)\n                ) : null;\n            case 'chartDownload':\n                return this.createMenuItem(\n                    this.chartTranslationService.translate('chartDownload'),\n                    'save',\n                    () => this.chartMenuService.downloadChart(chartMenuContext)\n                );\n        }\n        return null;\n    }\n\n    private createMenuItem(name: string, iconName: string, action: () => void): MenuItemDef {\n        return {\n            name,\n            icon: _.createIconNoSpan(iconName, this.gridOptionsService, null),\n            action\n        }\n    }\n\n    protected destroy(): void {\n        this.destroyBean(this.activeChartMenuList);\n        super.destroy();\n    }\n}\n\nclass ChartMenuList extends Component {\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    @RefSelector('eChartsMenu') private readonly eChartsMenu: HTMLElement;\n\n    private hidePopupFunc: () => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(private readonly menuItems: (MenuItemDef | string)[]) {\n        super(/* html */`\n            <div ref=\"eChartsMenu\" role=\"presentation\" class=\"ag-menu ag-chart-menu-popup\"></div>\n        `);\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.mainMenuList = this.createManagedBean(new AgMenuList(0));\n        this.mainMenuList.addMenuItems(this.menuItems);\n        this.mainMenuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, this.onHidePopup.bind(this));\n        this.eChartsMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(): void {\n        this.hidePopupFunc?.();\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}", "import {\n    AgDialog,\n    Autowired,\n    Bean,\n    BeanStub,\n    FocusService,\n    PostConstruct,\n    TabGuardComp\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../services/chartTranslationService\";\nimport { ChartMenuContext } from \"../chartMenuContext\";\nimport { AdvancedSettingsPanel } from \"./advancedSettingsPanel\";\n\n@Bean('advancedSettingsMenuFactory')\nexport class AdvancedSettingsMenuFactory extends BeanStub {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    private activeMenu?: AdvancedSettingsMenu;\n    private activeDialog?: AgDialog;\n\n    public showMenu(chartMenuContext: ChartMenuContext, eventSource?: HTMLElement): void {\n        this.hideMenu();\n\n        const menu = this.createBean(new AdvancedSettingsMenu(chartMenuContext));\n     \n        this.activeDialog = this.createBean(new AgDialog({\n            title: this.chartTranslationService.translate('advancedSettings'),\n            component: menu,\n            width: 300,\n            height: 400,\n            resizable: true,\n            movable: true,\n            centered: true,\n            closable: true,\n            afterGuiAttached: () => {\n                this.focusService.findFocusableElements(menu.getGui())[0]?.focus();\n            },\n            closedCallback: () => {\n                this.activeMenu = this.destroyBean(this.activeMenu);\n                this.activeDialog = undefined;\n                eventSource?.focus({ preventScroll: true });\n            }\n        }));\n\n        this.activeMenu = menu;\n    }\n\n    public hideMenu(): void {\n        if (this.activeDialog) {\n            this.destroyBean(this.activeDialog);\n        }\n    }\n\n    protected destroy(): void {\n        this.activeMenu = this.destroyBean(this.activeMenu);\n        this.activeDialog = this.destroyBean(this.activeDialog);\n        super.destroy();\n    }\n}\n\nclass AdvancedSettingsMenu extends TabGuardComp {\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private static TEMPLATE = /* html */`<div class=\"ag-chart-advanced-settings\"></div>`;\n\n    private advancedSettingsPanel: AdvancedSettingsPanel;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(AdvancedSettingsMenu.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.advancedSettingsPanel = this.createManagedBean(new AdvancedSettingsPanel(this.chartMenuContext));\n        this.getGui().appendChild(this.advancedSettingsPanel.getGui());\n        this.initialiseTabGuard({\n            onTabKeyDown: this.onTabKeyDown.bind(this),\n            focusTrapActive: true\n        });\n\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) { return; }\n\n        e.preventDefault();\n\n        const backwards = e.shiftKey;\n        const panelGui = this.advancedSettingsPanel.getGui();\n        const nextEl = this.focusService.findNextFocusableElement(panelGui, false, backwards);\n\n        if (nextEl) {\n            nextEl.focus();\n        } else {\n            const focusableElements = this.focusService.findFocusableElements(panelGui);\n            if (focusableElements.length) {\n                focusableElements[backwards ? focusableElements.length - 1 : 0].focus();\n            }\n        }\n    }\n}\n", "import {\n    ChartType,\n    Component,\n    PostConstruct,\n    _\n} from \"@ag-grid-community/core\";\nimport { ChartSeriesType } from \"../../utils/seriesTypeMapper\";\nimport { ChartMenuContext } from \"../chartMenuContext\";\nimport { ChartPanelFeature } from \"../chartPanelFeature\";\nimport { AnimationPanel } from \"./interactivity/animationPanel\";\nimport { CrosshairPanel } from \"./interactivity/crosshairPanel\";\nimport { NavigatorPanel } from \"./interactivity/navigatorPanel\";\nimport { ZoomPanel } from \"./interactivity/zoomPanel\";\n\ntype ChartInteractivityGroup = 'navigator' | 'zoom' | 'animation' | 'crosshair';\n\nconst INTERACTIVITY_GROUPS: ChartInteractivityGroup[] = ['navigator', 'zoom', 'animation', 'crosshair'];\n\nconst DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS: ChartInteractivityGroup[] = ['navigator', 'zoom', 'crosshair'];\n\nconst SUPPORTED_GROUP_PANELS: { [T in ChartSeriesType]?: ChartInteractivityGroup[] } = {\n    'cartesian': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'column': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'bar': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'line': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'area': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'scatter': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'histogram': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'bubble': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'range-bar': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'range-area': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'box-plot': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n    'waterfall': DEFAULT_PER_SERIES_SUPPORTED_GROUP_PANELS,\n};\n\nexport class AdvancedSettingsPanel extends Component {\n    private static TEMPLATE = /* html */`<div class=\"ag-chart-advanced-settings-wrapper\"></div>`;\n\n    private chartPanelFeature: ChartPanelFeature;\n\n    constructor(\n        private readonly chartMenuContext: ChartMenuContext\n    ) {\n        super(AdvancedSettingsPanel.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.chartPanelFeature = this.createManagedBean(new ChartPanelFeature(\n            this.chartMenuContext.chartController,\n            this.getGui(),\n            'ag-chart-advanced-settings-section',\n            (chartType, seriesType) => this.createPanels(chartType, seriesType)\n        ));\n        this.chartPanelFeature.refreshPanels();\n    }\n\n    private createPanels(chartType: ChartType, seriesType: ChartSeriesType): void {\n        INTERACTIVITY_GROUPS.forEach(group => {\n            if (!this.isGroupPanelShownForSeries(group, seriesType)) {\n                return;\n            }\n\n            const comp = this.createPanel(group);\n            if (comp) {\n                this.chartPanelFeature.addComponent(comp);\n            }\n        });\n    }\n\n    private isGroupPanelShownForSeries(group: ChartInteractivityGroup, seriesType: ChartSeriesType): boolean {\n        if (group === 'animation') {\n            return true;\n        }\n\n        return SUPPORTED_GROUP_PANELS[seriesType]?.includes(group) ?? false;\n    }\n\n    private createPanel(group: string): Component | null {\n        const { chartMenuParamsFactory, chartAxisMenuParamsFactory } = this.chartMenuContext;\n        switch (group) {\n            case 'navigator':\n                return new NavigatorPanel(chartMenuParamsFactory);\n            case 'zoom':\n                return new ZoomPanel(chartMenuParamsFactory);\n            case 'animation':\n                return new AnimationPanel(chartMenuParamsFactory);\n            case 'crosshair':\n                return new CrosshairPanel(chartAxisMenuParamsFactory);\n        }\n        _.warnOnce(`Invalid charts advanced settings group name supplied: '${group}'`);\n        return null;\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class AnimationPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"animationGroup\">\n                <ag-input-number-field ref=\"animationHeightInput\"></ag-input>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const animationGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'animation.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"animation\"),\n                suppressEnabledCheckbox: true,\n                useToggle: true\n            }\n        );\n        const animationHeightInputParams = this.chartMenuParamsFactory.getDefaultNumberInputParams(\"animation.duration\", \"durationMillis\", {\n            min: 0,\n        });\n        this.setTemplate(AnimationPanel.TEMPLATE, {\n            animationGroup: animationGroupParams,\n            animationHeightInput: animationHeightInputParams\n        });\n    }\n}\n\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class CrosshairPanel extends Component {\n    public static TEMPLATE = /* html */ `<div>\n            <ag-group-component ref=\"crosshairGroup\">\n                <ag-checkbox ref=\"crosshairLabelCheckbox\"></ag-checkbox>\n                <ag-checkbox ref=\"crosshairSnapCheckbox\"></ag-checkbox>\n                <ag-color-picker ref=\"crosshairStrokeColorPicker\"></ag-color-picker>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const crosshairGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>('crosshair.enabled', {\n            cssIdentifier: 'charts-advanced-settings-top-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('crosshair'),\n            suppressEnabledCheckbox: true,\n            useToggle: true\n        });\n        const crosshairLabelCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.label.enabled',\n            'crosshairLabel'\n        );\n        const crosshairSnapCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'crosshair.snap',\n            'crosshairSnap'\n        );\n        const crosshairStrokeColorPickerParams = this.chartMenuParamsFactory.getDefaultColorPickerParams(\n            'crosshair.stroke',\n            'color'\n        );\n        this.setTemplate(CrosshairPanel.TEMPLATE, {\n            crosshairGroup: crosshairGroupParams,\n            crosshairLabelCheckbox: crosshairLabelCheckboxParams,\n            crosshairSnapCheckbox: crosshairSnapCheckboxParams,\n            crosshairStrokeColorPicker: crosshairStrokeColorPickerParams\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    Autowired,\n    Component,\n    PostConstruct,\n} from \"@ag-grid-community/core\";\nimport { ChartTranslationService } from \"../../../services/chartTranslationService\";\nimport { ChartMenuParamsFactory } from \"../../chartMenuParamsFactory\";\n\nexport class NavigatorPanel extends Component {\n\n    public static TEMPLATE = /* html */\n        `<div>\n            <ag-group-component ref=\"navigatorGroup\">\n                <ag-slider ref=\"navigatorHeightSlider\"></ag-slider>\n                <ag-checkbox ref=\"navigatorMiniChartCheckbox\"></ag-checkbox>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const navigatorGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>(\n            'navigator.enabled',\n            {\n                cssIdentifier: 'charts-advanced-settings-top-level',\n                direction: 'vertical',\n                suppressOpenCloseIcons: true,\n                title: this.chartTranslationService.translate(\"navigator\"),\n                suppressEnabledCheckbox: true,\n                useToggle: true\n            }\n        );\n        const navigatorHeightSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\"navigator.height\", \"height\", 60);\n        navigatorHeightSliderParams.minValue = 10;\n        const navigatorMiniChartCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\"navigator.miniChart.enabled\", \"miniChart\");\n\n        this.setTemplate(NavigatorPanel.TEMPLATE, {\n            navigatorGroup: navigatorGroupParams,\n            navigatorHeightSlider: navigatorHeightSliderParams,\n            navigatorMiniChartCheckbox: navigatorMiniChartCheckboxParams\n        });\n    }\n}\n", "import {\n    AgGroupComponentParams,\n    AgSlider,\n    Autowired,\n    Component,\n    PostConstruct,\n    RefSelector,\n} from '@ag-grid-community/core';\nimport { ChartTranslationService } from '../../../services/chartTranslationService';\nimport { ChartMenuParamsFactory } from '../../chartMenuParamsFactory';\n\nexport class ZoomPanel extends Component {\n    public static TEMPLATE = /* html */ `<div>\n            <ag-group-component ref=\"zoomGroup\">\n                <ag-checkbox ref=\"zoomSelectingCheckbox\"></ag-checkbox>\n                <ag-checkbox ref=\"zoomScrollingCheckbox\"></ag-checkbox>\n                <ag-slider ref=\"zoomScrollingStepInput\"></ag-slider>\n            </ag-group-component>\n        </div>`;\n\n    @Autowired('chartTranslationService') private readonly chartTranslationService: ChartTranslationService;\n\n    @RefSelector('zoomScrollingStepInput') private readonly zoomScrollingStepInput: AgSlider;\n\n    constructor(private readonly chartMenuParamsFactory: ChartMenuParamsFactory) {\n        super();\n    }\n\n    @PostConstruct\n    private init() {\n        const zoomGroupParams = this.chartMenuParamsFactory.addEnableParams<AgGroupComponentParams>('zoom.enabled', {\n            cssIdentifier: 'charts-advanced-settings-top-level',\n            direction: 'vertical',\n            suppressOpenCloseIcons: true,\n            title: this.chartTranslationService.translate('zoom'),\n            suppressEnabledCheckbox: true,\n            useToggle: true\n        });\n        const zoomScrollingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableScrolling',\n            'scrollingZoom'\n        );\n        const zoomScrollingStepSliderParams = this.chartMenuParamsFactory.getDefaultSliderParams(\n            'zoom.scrollingStep',\n            'scrollingStep',\n            1,\n        );\n        zoomScrollingStepSliderParams.step = 0.01;\n        zoomScrollingStepSliderParams.minValue = zoomScrollingStepSliderParams.step;\n        const zoomSelectingCheckboxParams = this.chartMenuParamsFactory.getDefaultCheckboxParams(\n            'zoom.enableSelecting',\n            'selectingZoom'\n        );\n\n        // Enable/disable the scrolling step input according to whether the scrolling checkbox is checked\n        zoomScrollingCheckboxParams.onValueChange = ((onValueChange) => (value: boolean) => {\n            if (!onValueChange) return;\n            onValueChange(value);\n            this.zoomScrollingStepInput.setDisabled(!value);\n        })(zoomScrollingCheckboxParams.onValueChange);\n\n        this.setTemplate(ZoomPanel.TEMPLATE, {\n            zoomGroup: zoomGroupParams,\n            zoomScrollingCheckbox: zoomScrollingCheckboxParams,\n            zoomScrollingStepInput: zoomScrollingStepSliderParams,\n            zoomSelectingCheckbox: zoomSelectingCheckboxParams,\n        });\n\n        // Set the initial state of the scrolling step input according to whether the scrolling checkbox is checked\n        this.zoomScrollingStepInput.setDisabled(!zoomScrollingCheckboxParams.value);\n    }\n}\n", "import * as agCharts from 'ag-charts-community';\n\n/*\n* grid-packages/ag-grid-enterprise is dependant on this file - if changes are made here (esp to it's path)\n* then be sure to check if grid-packages/ag-grid-enterprise/gulpfile.js#copyAndConcatMainTypings needs to be updated too\n*/\ndeclare module '@ag-grid-community/core' {\n    export interface AgChartThemeOverrides extends agCharts.AgChartThemeOverrides {}\n    export interface AgChartThemePalette extends agCharts.AgChartThemePalette {}\n    export interface AgChartThemeDefinition extends agCharts.AgChartTheme {}\n}\n\n/**\n * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7\n */\n export const __FORCE_MODULE_DETECTION_AG_GRID_CORE_EXT = 0;\n", "export { GridChartsModule } from \"./gridChartsModule\";\nexport * from './agGridCoreExtension';\nimport { time, AgChart } from \"ag-charts-community\";\n\nexport * from \"ag-charts-community\";\n\nexport const agCharts = {\n    time,\n    AgChart\n}\n"],
  "mappings": "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",
  "names": ["ModuleNames", "Autowired", "Bean", "BeanStub", "ModuleRegistry", "Optional", "_ModuleSupport", "_", "AgDialog", "Autowired", "Component", "Events", "PostConstruct", "RefSelector", "AgPromise", "Autowired", "Component", "Events", "PostConstruct", "Autowired", "Component", "PostConstruct", "_", "AutoScrollService", "Autowired", "Component", "PostConstruct", "_", "Autowired", "BeanStub", "PostConstruct", "_", "Autowired", "BeanStub", "PostConstruct", "Autowired", "BeanStub", "BeanStub", "Autowired", "BeanStub", "BeanStub", "BeanStub", "_", "Autowired", "PostConstruct", "_Theme", "_", "_", "isTitleEnabled", "baseTheme", "overrides", "_", "BeanStub", "_Theme", "_", "Autowired", "PostConstruct", "AgCheckbox", "AgGroupComponent", "AgRadioButton", "AgSelect", "Autowired", "DragAndDropService", "PostConstruct", "_", "AgSelect", "Autowired", "Component", "DragSourceType", "Events", "_", "PostConstruct", "_", "_", "PostConstruct", "Component", "_", "AgSelect", "DragSourceType", "Events", "Autowired", "AgGroupComponent", "_", "AgCheckbox", "AgRadioButton", "DragAndDropService", "aggFunc", "AgSelect", "Autowired", "PostConstruct", "AgCheckbox", "AgGroupComponent", "AgToggleButton", "Autowired", "DragAndDropService", "PostConstruct", "_", "AgGroupComponent", "AgToggleButton", "_", "AgCheckbox", "DragAndDropService", "Autowired", "PostConstruct", "AgCheckbox", "AgGroupComponent", "AgSelect", "Autowired", "Component", "PostConstruct", "_", "Component", "_", "AgGroupComponent", "AgCheckbox", "AgSelect", "Autowired", "PostConstruct", "AgToggleButton", "Autowired", "Component", "PostConstruct", "Component", "AgToggleButton", "Autowired", "PostConstruct", "Component", "_", "AutoScrollService", "Autowired", "PostConstruct", "_", "Component", "PostConstruct", "Autowired", "Component", "PostConstruct", "_", "Autowired", "Component", "PostConstruct", "Component", "_", "Autowired", "PostConstruct", "Component", "Autowired", "PostConstruct", "_", "AgCheckbox", "Autowired", "Component", "Events", "PostConstruct", "RefSelector", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Events", "RefSelector", "_", "value", "_", "Events", "RefSelector", "Autowired", "Autowired", "BeanStub", "BeanStub", "value", "optionsValue", "Autowired", "Component", "_", "Events", "autoRotate", "AgCheckbox", "_a", "RefSelector", "Autowired", "PostConstruct", "AgGroupComponent", "AgSelect", "AgSlider", "Autowired", "Component", "PostConstruct", "RefSelector", "Component", "AgGroupComponent", "AgSlider", "AgSelect", "RefSelector", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Autowired", "Component", "Events", "PostConstruct", "RefSelector", "Component", "Events", "RefSelector", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "_", "AgSlider", "Autowired", "Component", "PostConstruct", "Component", "AgSlider", "_", "Autowired", "PostConstruct", "Component", "Autowired", "PostConstruct", "_", "AgSelect", "AgSlider", "AgToggleButton", "Autowired", "Component", "PostConstruct", "RefSelector", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "_", "Autowired", "Component", "PostConstruct", "RefSelector", "Component", "_", "RefSelector", "Autowired", "PostConstruct", "Component", "PostConstruct", "RefSelector", "_", "Component", "isHorizontal", "_", "RefSelector", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "_", "AgSlider", "Autowired", "Component", "PostConstruct", "RefSelector", "Component", "AgSlider", "_", "RefSelector", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Component", "AgSelect", "AgToggleButton", "AgSlider", "_", "RefSelector", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "BeanStub", "PostConstruct", "_", "BeanStub", "_", "PostConstruct", "Component", "_", "PostConstruct", "_", "Component", "PostConstruct", "RefSelector", "_", "AgGroupComponent", "Autowired", "Component", "PostConstruct", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "_Scene", "_Scene", "PostConstruct", "_Scene", "xScale", "yScale", "_Scene", "_Scene", "_Scene", "_Scene", "_Scene", "_Scene", "_Scene", "_Scene", "_Scene", "_Scene", "PostConstruct", "_Scene", "_Scene", "PostConstruct", "_Scene", "_", "_Scene", "_Scene", "_", "innerRadius", "_Scene", "_Scene", "_", "_Scene", "_Scene", "_", "_Scene", "acc", "_Scene", "offset", "length", "pattern", "_", "_Scene", "_Theme", "_Util", "_Scene", "_", "_Theme", "_a", "_Util", "_Scene", "_Theme", "_Scene", "_Theme", "_Scene", "data", "startAngle", "_Scene", "_Theme", "_Util", "_", "_Scene", "_Theme", "_Util", "_Scene", "_Theme", "_Theme", "_Scene", "_", "_Scene", "_Scene", "_Scene", "_Scene", "Component", "_", "AgGroupComponent", "Autowired", "PostConstruct", "Component", "_", "RefSelector", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "RefSelector", "_", "Component", "_", "Autowired", "RefSelector", "Component", "Events", "AgPromise", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "_", "_Theme", "_ModuleSupport", "_ModuleSupport", "_Theme", "AgCharts", "AgCharts", "axes", "_Util", "params", "_", "params", "AgCharts", "_", "AgCharts", "AgCharts", "AgCharts", "angleKey", "opts", "data", "series", "AgCharts", "hierarchy", "getItemGroupKey", "AgCharts", "AgCharts", "AgCharts", "BeanStub", "Events", "AgCharts", "BeanStub", "AgCharts", "Events", "Autowired", "Bean", "BeanStub", "_", "BeanStub", "_", "Autowired", "Bean", "Component", "AgDialog", "_", "updatedChartType", "Events", "RefSelector", "Autowired", "PostConstruct", "_a", "_b", "_", "BeanStub", "_ModuleSupport", "ModuleRegistry", "chartComp", "cellRange", "Optional", "Autowired", "Bean", "Bean", "BeanStub", "BeanStub", "Bean", "_", "Autowired", "Bean", "BeanStub", "BeanStub", "_", "Autowired", "Bean", "Autowired", "Bean", "BeanStub", "Component", "PostConstruct", "RefSelector", "_", "BeanStub", "document", "params", "_", "Autowired", "Bean", "Component", "RefSelector", "PostConstruct", "AgDialog", "Autowired", "Bean", "BeanStub", "PostConstruct", "Component", "PostConstruct", "_", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "Component", "Autowired", "PostConstruct", "Autowired", "Component", "PostConstruct", "RefSelector", "Component", "Autowired", "RefSelector", "PostConstruct", "Component", "_", "PostConstruct", "BeanStub", "AgDialog", "Autowired", "Bean", "PostConstruct", "ModuleNames"]
}
