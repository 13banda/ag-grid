{
  "version": 3,
  "sources": ["../../src/excelExportModule.ts", "../../src/excelExport/excelCreator.ts", "../../src/excelExport/excelXlsxFactory.ts", "../../src/excelExport/files/ooxml/core.ts", "../../src/excelExport/files/ooxml/contentType.ts", "../../src/excelExport/files/ooxml/contentTypes.ts", "../../src/excelExport/assets/excelUtils.ts", "../../src/excelExport/assets/excelConstants.ts", "../../src/excelExport/files/ooxml/drawing.ts", "../../src/excelExport/files/ooxml/table.ts", "../../src/excelExport/files/ooxml/themes/office/colorScheme.ts", "../../src/excelExport/files/ooxml/themes/office/fontScheme.ts", "../../src/excelExport/files/ooxml/themes/office/formatScheme.ts", "../../src/excelExport/files/ooxml/themes/office/themeElements.ts", "../../src/excelExport/files/ooxml/themes/office.ts", "../../src/excelExport/files/ooxml/sharedStrings.ts", "../../src/excelExport/files/ooxml/styles/numberFormat.ts", "../../src/excelExport/files/ooxml/styles/numberFormats.ts", "../../src/excelExport/files/ooxml/styles/font.ts", "../../src/excelExport/files/ooxml/styles/fonts.ts", "../../src/excelExport/files/ooxml/styles/fill.ts", "../../src/excelExport/files/ooxml/styles/fills.ts", "../../src/excelExport/assets/excelLegacyConvert.ts", "../../src/excelExport/files/ooxml/styles/border.ts", "../../src/excelExport/files/ooxml/styles/borders.ts", "../../src/excelExport/files/ooxml/styles/alignment.ts", "../../src/excelExport/files/ooxml/styles/protection.ts", "../../src/excelExport/files/ooxml/styles/xf.ts", "../../src/excelExport/files/ooxml/styles/cellStyleXfs.ts", "../../src/excelExport/files/ooxml/styles/cellXfs.ts", "../../src/excelExport/files/ooxml/styles/cellStyle.ts", "../../src/excelExport/files/ooxml/styles/cellStyles.ts", "../../src/excelExport/files/ooxml/styles/stylesheet.ts", "../../src/excelExport/files/ooxml/sheet.ts", "../../src/excelExport/files/ooxml/sheets.ts", "../../src/excelExport/files/ooxml/workbook.ts", "../../src/excelExport/files/ooxml/worksheet.ts", "../../src/excelExport/files/ooxml/column.ts", "../../src/excelExport/files/ooxml/cell.ts", "../../src/excelExport/files/ooxml/row.ts", "../../src/excelExport/files/ooxml/mergeCell.ts", "../../src/excelExport/files/ooxml/relationship.ts", "../../src/excelExport/files/ooxml/relationships.ts", "../../src/excelExport/excelSerializingSession.ts", "../../src/version.ts"],
  "sourcesContent": ["import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { ExcelCreator } from \"./excelExport/excelCreator\";\nimport { CsvCreator, GridSerializer } from \"@ag-grid-community/csv-export\";\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\";\nimport { VERSION } from \"./version\";\n\nexport const ExcelExportModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.ExcelExportModule,\n    beans: [\n        // beans in this module\n        ExcelCreator,\n\n        // these beans are part of CSV Export module\n        GridSerializer, CsvCreator\n    ],\n    dependantModules: [\n        CsvExportModule,\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    Autowired,\n    Bean,\n    Column,\n    ColumnModel,\n    ExcelExportParams,\n    ExcelFactoryMode,\n    ExcelStyle,\n    GridOptionsService,\n    IExcelCreator,\n    PostConstruct,\n    StylingService,\n    ValueService,\n    ExcelExportMultipleSheetParams,\n    ExcelRow,\n    CssClassApplier,\n    ColumnGroup,\n    ValueFormatterService,\n    ValueParserService,\n} from '@ag-grid-community/core';\nimport { ExcelXlsxFactory } from './excelXlsxFactory';\nimport { BaseCreator, Downloader, GridSerializer, RowType, ZipContainer } from \"@ag-grid-community/csv-export\";\nimport { ExcelGridSerializingParams, ExcelSerializingSession, StyleLinkerInterface } from './excelSerializingSession';\n\nconst createExcelXMLCoreFolderStructure = (): void => {\n    ZipContainer.addFolders([\n        '_rels/',\n        'docProps/',\n        'xl/',\n        'xl/theme/',\n        'xl/_rels/',\n        'xl/worksheets/'\n    ]);\n\n    if (!ExcelXlsxFactory.images.size) { return; }\n\n    ZipContainer.addFolders([\n        'xl/worksheets/_rels',\n        'xl/drawings/',\n        'xl/drawings/_rels',\n        'xl/media/',\n\n    ]);\n\n    let imgCounter = 0;\n    ExcelXlsxFactory.images.forEach(value => {\n        const firstImage = value[0].image[0];\n        const ext = firstImage.imageType;\n        ZipContainer.addFile(`xl/media/image${++imgCounter}.${ext}`, firstImage.base64, true);\n    });\n}\n\nconst createExcelXmlWorksheets = (data: string[]): void => {\n    let imageRelationCounter = 0;\n    let tableRelationCounter = 0;\n\n    for (let i = 0; i < data.length; i++) {\n        const value = data[i];\n        ZipContainer.addFile(`xl/worksheets/sheet${i + 1}.xml`, value, false);\n\n        const hasImages = ExcelXlsxFactory.images.size > 0 && ExcelXlsxFactory.worksheetImages.has(i);\n        const hasTables = ExcelXlsxFactory.worksheetDataTables.size > 0 && ExcelXlsxFactory.worksheetDataTables.has(i);\n\n        if (!hasImages && !hasTables) { continue; }\n\n        let tableIndex: number | undefined;\n        let drawingIndex: number | undefined;\n\n        if (hasImages) {\n            createExcelXmlDrawings(i, imageRelationCounter);\n            drawingIndex = imageRelationCounter;\n            imageRelationCounter++;\n        }\n\n        if (hasTables) {\n            tableIndex = tableRelationCounter;\n            tableRelationCounter++;\n        }\n\n        const worksheetRelFile = `xl/worksheets/_rels/sheet${i + 1}.xml.rels`;\n        ZipContainer.addFile(\n            worksheetRelFile,\n            ExcelXlsxFactory.createRelationships({ tableIndex, drawingIndex }),\n        );\n    }\n\n}\n\nconst createExcelXmlDrawings = (sheetIndex: number, drawingIndex: number): void => {\n    const drawingFolder = 'xl/drawings';\n    const drawingFileName = `${drawingFolder}/drawing${drawingIndex + 1}.xml`;\n    const relFileName = `${drawingFolder}/_rels/drawing${drawingIndex + 1}.xml.rels`;\n\n    ZipContainer.addFile(relFileName, ExcelXlsxFactory.createDrawingRel(sheetIndex));\n    ZipContainer.addFile(drawingFileName, ExcelXlsxFactory.createDrawing(sheetIndex));\n};\n\nconst createExcelXmlTables = (): void => {\n    const tablesDataByWorksheet = ExcelXlsxFactory.worksheetDataTables;\n    const worksheetKeys = Array.from(tablesDataByWorksheet.keys());\n\n    for (let i = 0; i < worksheetKeys.length; i++) {\n        const sheetIndex = worksheetKeys[i];\n        const dataTable = tablesDataByWorksheet.get(sheetIndex);\n\n        if (!dataTable) {\n            continue;\n        }\n\n        ZipContainer.addFile(\n            `xl/tables/${dataTable.name}.xml`,\n            ExcelXlsxFactory.createTable(dataTable, i),\n        );\n    }\n}\n\nconst createExcelXmlCoreSheets = (fontSize: number, author: string, sheetLen: number): void => {\n    ZipContainer.addFile('xl/workbook.xml', ExcelXlsxFactory.createWorkbook());\n    ZipContainer.addFile('xl/styles.xml', ExcelXlsxFactory.createStylesheet(fontSize));\n    ZipContainer.addFile('xl/sharedStrings.xml', ExcelXlsxFactory.createSharedStrings());\n    ZipContainer.addFile('xl/theme/theme1.xml', ExcelXlsxFactory.createTheme());\n    ZipContainer.addFile('xl/_rels/workbook.xml.rels', ExcelXlsxFactory.createWorkbookRels(sheetLen));\n    ZipContainer.addFile('docProps/core.xml', ExcelXlsxFactory.createCore(author));\n    ZipContainer.addFile('[Content_Types].xml', ExcelXlsxFactory.createContentTypes(sheetLen));\n    ZipContainer.addFile('_rels/.rels', ExcelXlsxFactory.createRels());\n}\n\nconst createExcelFileForExcel = (data: string[], options: {\n    columns?: string[],\n    rowCount?: number,\n    fontSize?: number\n    author?: string,\n} = {}): boolean  => {\n    if (!data || data.length === 0) {\n        console.warn(\"AG Grid: Invalid params supplied to createExcelFileForExcel() - `ExcelExportParams.data` is empty.\");\n        ExcelXlsxFactory.resetFactory();\n        return false;\n    }\n\n    const {\n        fontSize = 11,\n        author = 'AG Grid',\n    } = options;\n\n    createExcelXMLCoreFolderStructure();\n    createExcelXmlTables();\n    createExcelXmlWorksheets(data);\n    createExcelXmlCoreSheets(fontSize, author, data.length);\n\n    ExcelXlsxFactory.resetFactory();\n    return true;\n}\n\nconst getMultipleSheetsAsExcelCompressed = (params: ExcelExportMultipleSheetParams): Promise<Blob | undefined> => {\n    const { data, fontSize, author } = params;\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n    if (!createExcelFileForExcel(data, {\n        author,\n        fontSize,\n    })) { return Promise.resolve(undefined); }\n\n    return ZipContainer.getZipFile(mimeType);\n};\n\nexport const getMultipleSheetsAsExcel = (params: ExcelExportMultipleSheetParams): Blob | undefined => {\n    const { data, fontSize, author } = params;\n    const mimeType = params.mimeType || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n\n    if (!createExcelFileForExcel(data, {\n        author,\n        fontSize,\n    })) { return; }\n\n    return ZipContainer.getUncompressedZipFile(mimeType);\n};\n\nexport const exportMultipleSheetsAsExcel = (params: ExcelExportMultipleSheetParams) => {\n    const { fileName = 'export.xlsx' } = params;\n\n    getMultipleSheetsAsExcelCompressed(params).then(contents => {\n        if (contents) {\n            const downloadFileName = typeof fileName === 'function'\n                ? fileName()\n                : fileName;\n\n            Downloader.download(downloadFileName, contents);\n        }\n    });\n};\n\n@Bean('excelCreator')\nexport class ExcelCreator extends BaseCreator<ExcelRow[], ExcelSerializingSession, ExcelExportParams> implements IExcelCreator {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('stylingService') private stylingService: StylingService;\n\n    @Autowired('gridSerializer') private gridSerializer: GridSerializer;\n    @Autowired('gridOptionsService') gridOptionsService: GridOptionsService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('valueParserService') private valueParserService: ValueParserService;\n\n    @PostConstruct\n    public postConstruct(): void {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gridOptionsService: this.gridOptionsService\n        });\n    }\n\n    protected getMergedParams(params?: ExcelExportParams): ExcelExportParams {\n        const baseParams = this.gridOptionsService.get('defaultExcelExportParams');\n        return Object.assign({}, baseParams, params);\n    }\n\n    protected export(userParams?: ExcelExportParams): void {\n        if (this.isExportSuppressed()) {\n            console.warn(`AG Grid: Export cancelled. Export is not allowed as per your configuration.`);\n            return;\n        }\n\n        const mergedParams = this.getMergedParams(userParams);\n        const data = this.getData(mergedParams);\n\n        const exportParams: ExcelExportMultipleSheetParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType\n        };\n\n        this.packageCompressedFile(exportParams).then(packageFile => {\n            if (packageFile) {\n                const { fileName } = mergedParams;\n                const providedFileName = typeof fileName === 'function'\n                    ? fileName(this.gridOptionsService.getGridCommonParams())\n                    : fileName;\n\n                Downloader.download(this.getFileName(providedFileName), packageFile);\n            }\n        });\n    }\n\n    public exportDataAsExcel(params?: ExcelExportParams): void {\n        this.export(params);\n    }\n\n    public getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined {\n        const mergedParams = this.getMergedParams(params);\n        const data = this.getData(mergedParams);\n\n        const exportParams: ExcelExportMultipleSheetParams = {\n            data: [data],\n            fontSize: mergedParams.fontSize,\n            author: mergedParams.author,\n            mimeType: mergedParams.mimeType\n        };\n\n        return this.packageFile(exportParams);\n    }\n\n    public setFactoryMode(factoryMode: ExcelFactoryMode): void {\n        ExcelXlsxFactory.factoryMode = factoryMode;\n    }\n\n    public getFactoryMode(): ExcelFactoryMode {\n        return ExcelXlsxFactory.factoryMode;\n    }\n\n    public getSheetDataForExcel(params: ExcelExportParams): string {\n        const mergedParams = this.getMergedParams(params);\n        return this.getData(mergedParams);\n    }\n\n    public getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        return getMultipleSheetsAsExcel(params);\n    }\n\n    public exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void {\n        exportMultipleSheetsAsExcel(params);\n    }\n\n    public getDefaultFileExtension(): 'xlsx' {\n        return 'xlsx';\n    }\n\n    public createSerializingSession(params: ExcelExportParams): ExcelSerializingSession {\n        const { columnModel, valueService, gridOptionsService, valueFormatterService, valueParserService } = this;\n\n        let sheetName: string;\n        if (params.sheetName != null) {\n            const {sheetName: sheetNameParam } = params;\n            const sheetNameValue = typeof sheetNameParam === 'function'\n                ? sheetNameParam(this.gridOptionsService.getGridCommonParams())\n                : sheetNameParam;\n\n            sheetName = String(sheetNameValue).substring(0, 31);\n        } else {\n            sheetName = 'ag-grid';\n        }\n\n        const config: ExcelGridSerializingParams = {\n            ...params,\n            sheetName,\n            columnModel,\n            valueService,\n            gridOptionsService,\n            valueFormatterService,\n            valueParserService,\n            suppressRowOutline: params.suppressRowOutline || params.skipRowGroups,\n            headerRowHeight: params.headerRowHeight || params.rowHeight,\n            baseExcelStyles: this.gridOptionsService.get('excelStyles') || [],\n            styleLinker: this.styleLinker.bind(this)\n        };\n\n        return new ExcelSerializingSession(config);\n    }\n\n    private styleLinker(params: StyleLinkerInterface): string[] {\n        const  { rowType, rowIndex, value, column, columnGroup, node } = params;\n        const isHeader = rowType === RowType.HEADER;\n        const isGroupHeader = rowType === RowType.HEADER_GROUPING;\n        const col = (isHeader ? column : columnGroup) as Column | ColumnGroup;\n        let headerClasses: string[] = [];\n\n        if (isHeader || isGroupHeader) {\n            headerClasses.push('header');\n            if (isGroupHeader) {\n                headerClasses.push('headerGroup');\n            }\n            \n            if (col) {\n                headerClasses = headerClasses.concat(CssClassApplier.getHeaderClassesFromColDef(\n                    col.getDefinition(),\n                    this.gridOptionsService,\n                    column || null,\n                    columnGroup || null\n                ));\n            }\n\n            return headerClasses;\n        }\n\n        const styles = this.gridOptionsService.get('excelStyles');\n\n        const applicableStyles: string [] = [\"cell\"];\n\n        if (!styles || !styles.length) { return applicableStyles; }\n\n        const styleIds: string[] = styles.map((it: ExcelStyle) => {\n            return it.id;\n        });\n\n        this.stylingService.processAllCellClasses(\n            column!.getDefinition(),\n            this.gridOptionsService.addGridCommonParams({\n                value,\n                data: node!.data,\n                node: node!,\n                colDef: column!.getDefinition(),\n                column: column!,\n                rowIndex: rowIndex\n            }),\n            (className: string) => {\n                if (styleIds.indexOf(className) > -1) {\n                    applicableStyles.push(className);\n                }\n            }\n        );\n\n        return applicableStyles.sort((left: string, right: string): number => {\n            return (styleIds.indexOf(left) < styleIds.indexOf(right)) ? -1 : 1;\n        });\n    }\n\n    public isExportSuppressed():boolean {\n        return this.gridOptionsService.get('suppressExcelExport');\n    }\n\n    private packageCompressedFile(params: ExcelExportMultipleSheetParams): Promise<Blob | undefined> {\n        return getMultipleSheetsAsExcelCompressed(params);\n    }\n\n    private packageFile(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        return getMultipleSheetsAsExcel(params);\n    }\n}\n", "import {\n    Column,\n    ColGroupDef,\n    ColDef,\n    ColumnModel,\n    ExcelFactoryMode,\n    ExcelImage,\n    ExcelRelationship,\n    ExcelStyle,\n    ExcelWorksheet,\n    ExcelTableConfig,\n    RowHeightCallbackParams,\n    _\n} from '@ag-grid-community/core';\n\nimport coreFactory from './files/ooxml/core';\nimport contentTypesFactory from './files/ooxml/contentTypes';\nimport drawingFactory from './files/ooxml/drawing';\nimport tableFactory from './files/ooxml/table';\nimport officeThemeFactory from './files/ooxml/themes/office';\nimport sharedStringsFactory from './files/ooxml/sharedStrings';\nimport stylesheetFactory, { registerStyles } from './files/ooxml/styles/stylesheet';\nimport workbookFactory from './files/ooxml/workbook';\nimport worksheetFactory from './files/ooxml/worksheet';\nimport relationshipsFactory from './files/ooxml/relationships';\n\nimport { setExcelImageTotalHeight, setExcelImageTotalWidth, createXmlPart } from './assets/excelUtils';\nimport { ImageIdMap, ExcelCalculatedImage, ExcelDataTable } from './assets/excelInterfaces';\nimport { ExcelGridSerializingParams } from './excelSerializingSession';\n\n/**\n * See links for more info on the Office Open XML format being used:\n * https://www.ecma-international.org/wp-content/uploads/Office-Open-XML-White-Paper.pdf\n * https://ecma-international.org/publications-and-standards/standards/ecma-376/\n */\nexport class ExcelXlsxFactory {\n\n    private static sharedStrings: Map<string, number> = new Map();\n    private static sheetNames: string[] = [];\n\n    /** Maps images to sheet */\n    public static images: Map<string, { sheetId: number, image: ExcelCalculatedImage[] }[]> = new Map();\n    /** Maps sheets to images */\n    public static worksheetImages: Map<number, ExcelCalculatedImage[]> = new Map();\n    /** Maps all workbook images to a global Id */\n    public static workbookImageIds: ImageIdMap = new Map();\n    /** Maps all sheet images to unique Ids */\n    public static worksheetImageIds: Map<number, ImageIdMap> = new Map();\n    /** Maps all sheet tables to unique Ids */\n    public static worksheetDataTables: Map<number, ExcelDataTable> = new Map();\n    /** Default name to be used for tables when no name is provided */\n    public static defaultTableDisplayName = 'AG-GRID-TABLE';\n\n    public static factoryMode: ExcelFactoryMode = ExcelFactoryMode.SINGLE_SHEET;\n\n    public static createExcel(\n        styles: ExcelStyle[],\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ): string {\n        this.addSheetName(worksheet);\n        registerStyles(styles, this.sheetNames.length);\n\n        let newConfig = Object.assign({}, config);\n\n        // Table export is not compatible with pivot mode nor master/detail features\n        if (config.exportAsExcelTable) {\n            if (config.columnModel.isPivotActive()) {\n                this.showExcelTableNonCompatibleFeaturesWarning('pivot mode');\n                newConfig.exportAsExcelTable = false;\n            }\n\n            if (config.gridOptionsService.get('masterDetail')) {\n                this.showExcelTableNonCompatibleFeaturesWarning('master/detail');\n                newConfig.exportAsExcelTable = false;\n            }\n        }\n\n        this.processTableConfig(worksheet, newConfig);\n        return this.createWorksheet(worksheet, newConfig);\n    }\n\n    private static showExcelTableNonCompatibleFeaturesWarning(featureName: string) {\n        console.warn(\n            `AG Grid: Excel table export does not work with ${featureName}. ` +\n            `The exported Excel file will not contain any Excel tables.\\n` +\n            `Please turn off ${featureName} to enable Excel table exports.`\n        );\n    }\n\n    public static getTableNameFromIndex(idx: number) {\n        return `table${idx + 1}`;\n    }\n\n    public static getTableRelIdFromIndex(idx: number) {\n        return `tableRelId${idx + 1}`;\n    }\n\n    public static getSanitizedTableName(name: string) {\n        return name.replace(/^[^a-zA-Z_]+/, '_')\n                   .replace(/\\s/g, '_')\n                   .replace(/[^a-zA-Z0-9_]/g, '_')\n    }\n\n    public static addTableToSheet(sheetIndex: number, table: ExcelDataTable): void {\n        if (this.worksheetDataTables.has(sheetIndex)) {\n            console.warn('Unable to add data table to Excel sheet: A table already exists.');\n            return;\n        }\n\n        this.worksheetDataTables.set(sheetIndex, table);\n    }\n\n    public static buildImageMap(image: ExcelImage, rowIndex: number, col: Column, columnsToExport: Column[], rowHeight?: number | ((params: RowHeightCallbackParams) => number)): void {\n        const currentSheetIndex = this.sheetNames.length;\n        const registeredImage = this.images.get(image.id);\n\n        if (!image.position || !image.position.row || !image.position.column) {\n            if (!image.position) { image.position = {}; }\n\n            image.position = Object.assign({}, image.position, {\n                row: rowIndex,\n                column: columnsToExport.indexOf(col) + 1\n            });\n        }\n\n        const calculatedImage = image as ExcelCalculatedImage;\n\n        setExcelImageTotalWidth(calculatedImage, columnsToExport);\n        setExcelImageTotalHeight(calculatedImage, rowHeight);\n\n        if (registeredImage) {\n            const currentSheetImages = registeredImage.find(currentImage => currentImage.sheetId === currentSheetIndex);\n            if (currentSheetImages) {\n                currentSheetImages.image.push(calculatedImage);\n            } else {\n                registeredImage.push({\n                    sheetId: currentSheetIndex,\n                    image: [calculatedImage]\n                });\n            }\n        } else {\n            this.images.set(calculatedImage.id, [{ sheetId: currentSheetIndex, image: [calculatedImage] }]);\n            this.workbookImageIds.set(calculatedImage.id, { type: calculatedImage.imageType, index: this.workbookImageIds.size });\n        }\n\n        this.buildSheetImageMap(currentSheetIndex, calculatedImage);\n    }\n\n    private static processTableConfig(\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ) {\n        if (!config.exportAsExcelTable) {\n            return;\n        }\n\n        const tableConfig: Partial<ExcelTableConfig> = typeof config.exportAsExcelTable === 'boolean'\n            ? {} : config.exportAsExcelTable;\n\n        const {\n            name: nameFromConfig,\n            showColumnStripes,\n            showRowStripes,\n            showFilterButton,\n            highlightFirstColumn,\n            highlightLastColumn,\n        } = tableConfig;\n\n        const tableName = this.getSanitizedTableName(\n            nameFromConfig || ExcelXlsxFactory.defaultTableDisplayName\n        );\n\n        const sheetIndex = this.sheetNames.length - 1;\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const headerRowCount = config.columnModel.getHeaderRowCount();\n        const tableHeaderRowIndex: number = headerRowCount - 1; // Assuming that header starts at row 0\n        const tableRowCount = rows.length;\n        const tableColCount = columns.length;\n\n        const tableColumns: string[] = [];\n        const showFilterButtons: boolean[] = [];\n\n        for (let i = 0; i < tableColCount; i++) {\n            const col = columns[i];\n            tableColumns.push(col.displayName || '');\n            showFilterButtons.push(\n                (showFilterButton === 'match' || showFilterButton === undefined)\n                    ? (col.filterAllowed ?? false) // We fall back to the column's filterAllowed property on match\n                    : showFilterButton\n            );\n        }\n\n        if (!tableColumns || !tableColumns.length || !tableRowCount || !tableName) {\n            console.warn('Unable to add data table to Excel sheet: Missing required parameters.');\n            return;\n        }\n\n        this.addTableToSheet(sheetIndex, {\n            name: this.getTableNameFromIndex(sheetIndex),\n            displayName: tableName,\n            columns: tableColumns,\n            showFilterButtons: showFilterButtons,\n            headerRowIndex: tableHeaderRowIndex,\n            rowCount: tableRowCount - headerRowCount,\n            showRowStripes: showRowStripes ?? true,\n            showColumnStripes: showColumnStripes ?? false,\n            highlightFirstColumn: highlightFirstColumn ?? false,\n            highlightLastColumn: highlightLastColumn ?? false,\n        });\n    }\n\n    private static buildSheetImageMap(sheetIndex: number, image: ExcelCalculatedImage): void {\n        let worksheetImageIdMap = this.worksheetImageIds.get(sheetIndex);\n\n        if (!worksheetImageIdMap) {\n            worksheetImageIdMap = new Map();\n            this.worksheetImageIds.set(sheetIndex, worksheetImageIdMap);\n        }\n\n        const sheetImages = this.worksheetImages.get(sheetIndex);\n\n        if (!sheetImages) {\n            this.worksheetImages.set(sheetIndex, [image]);\n            worksheetImageIdMap.set(image.id, { index: 0, type: image.imageType });\n        } else {\n            sheetImages.push(image);\n            if (!worksheetImageIdMap.get(image.id)) {\n                worksheetImageIdMap.set(image.id, { index: worksheetImageIdMap.size, type: image.imageType });\n            }\n        }\n    }\n\n    private static addSheetName(worksheet: ExcelWorksheet): void {\n        const name = _.escapeString(worksheet.name) || '';\n        let append = '';\n\n        while (this.sheetNames.indexOf(`${name}${append}`) !== -1) {\n            if (append === '') {\n                append = '_1';\n            } else {\n                const curr = parseInt(append.slice(1), 10);\n                append = `_${curr + 1}`;\n            }\n        }\n\n        worksheet.name = `${name}${append}`;\n        this.sheetNames.push(worksheet.name);\n    }\n\n    public static getStringPosition(str: string): number {\n        if (this.sharedStrings.has(str)) {\n            return this.sharedStrings.get(str)!;\n        }\n\n        this.sharedStrings.set(str, this.sharedStrings.size);\n        return this.sharedStrings.size - 1;\n    }\n\n    public static resetFactory(): void {\n        this.sharedStrings = new Map();\n\n        this.images = new Map();\n        this.worksheetImages = new Map();\n\n        this.workbookImageIds = new Map();\n        this.worksheetImageIds = new Map();\n        this.worksheetDataTables = new Map();\n\n        this.sheetNames = [];\n        this.factoryMode = ExcelFactoryMode.SINGLE_SHEET;\n    }\n\n    public static createWorkbook(): string {\n        return createXmlPart(workbookFactory.getTemplate(this.sheetNames));\n    }\n\n    public static createStylesheet(defaultFontSize: number): string {\n        return createXmlPart(stylesheetFactory.getTemplate(defaultFontSize));\n    }\n\n    public static createSharedStrings(): string {\n        return createXmlPart(sharedStringsFactory.getTemplate(this.sharedStrings));\n    }\n\n    public static createCore(author: string): string {\n        return createXmlPart(coreFactory.getTemplate(author));\n    }\n\n    public static createContentTypes(sheetLen: number): string {\n        return createXmlPart(contentTypesFactory.getTemplate(sheetLen));\n    }\n\n    public static createRels(): string {\n        const rs = relationshipsFactory.getTemplate([{\n            Id: 'rId1',\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',\n            Target: 'xl/workbook.xml'\n        }, {\n            Id: 'rId2',\n            Type: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',\n            Target: 'docProps/core.xml'\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createTheme(): string {\n        return createXmlPart(officeThemeFactory.getTemplate());\n    }\n\n    public static createTable(dataTable: ExcelDataTable, index?: number): string {\n        return createXmlPart(tableFactory.getTemplate(dataTable, index));\n    }\n\n    public static createWorkbookRels(sheetLen: number): string {\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            Id: `rId${i + 1}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',\n            Target: `worksheets/sheet${i + 1}.xml`\n        }));\n\n        const rs = relationshipsFactory.getTemplate([\n            ...worksheets,\n        {\n            Id: `rId${sheetLen + 1}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',\n            Target: 'theme/theme1.xml'\n        }, {\n            Id: `rId${sheetLen + 2}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n            Target: 'styles.xml'\n        }, {\n            Id: `rId${sheetLen + 3}`,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',\n            Target: 'sharedStrings.xml'\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createDrawing(sheetIndex: number) {\n        return createXmlPart(drawingFactory.getTemplate({ sheetIndex }));\n    }\n\n    public static createDrawingRel(sheetIndex: number) {\n        const worksheetImageIds = this.worksheetImageIds.get(sheetIndex);\n        const XMLArr: ExcelRelationship[] = [];\n\n        worksheetImageIds!.forEach((value, key) => {\n            XMLArr.push({\n                Id: `rId${value.index + 1}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n                Target: `../media/image${this.workbookImageIds.get(key)!.index + 1}.${value.type}`\n            });\n        });\n\n        return createXmlPart(relationshipsFactory.getTemplate(XMLArr));\n    }\n\n    public static createWorksheetDrawingRel(currentRelationIndex: number) {\n        const rs = relationshipsFactory.getTemplate([{\n            Id: 'rId1',\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n            Target: `../drawings/drawing${currentRelationIndex + 1}.xml`\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createWorksheetTableRel(currentRelationIndex: number) {\n        const tableId = this.getTableNameFromIndex(currentRelationIndex);\n        const tableRelId = this.getTableRelIdFromIndex(currentRelationIndex);\n        const rs = relationshipsFactory.getTemplate([{\n            Id: tableRelId,\n            Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',\n            Target: `../tables/${tableId}.xml`\n        }]);\n\n        return createXmlPart(rs);\n    }\n\n    public static createRelationships({\n        drawingIndex,\n        tableIndex,\n    } : {\n        drawingIndex?: number,\n        tableIndex?: number,\n    } = {}) {\n        if (drawingIndex === undefined && tableIndex === undefined) {\n            return '';\n        }\n\n        const config = [];\n        if (typeof drawingIndex === 'number') {\n            config.push({\n                Id: 'rId1',\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n                Target: `../drawings/drawing${drawingIndex + 1}.xml`\n            });\n        }\n\n        if (typeof tableIndex === 'number') {\n            const tableId = this.getTableNameFromIndex(tableIndex);\n            const tableRelId = this.getTableRelIdFromIndex(tableIndex);\n            config.push({\n                Id: tableRelId,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',\n                Target: `../tables/${tableId}.xml`\n            });\n        }\n\n        const rs = relationshipsFactory.getTemplate(config);\n        return createXmlPart(rs);\n    }\n\n    private static createWorksheet(\n        worksheet: ExcelWorksheet,\n        config: ExcelGridSerializingParams\n    ): string {\n        return createXmlPart(worksheetFactory.getTemplate({\n            worksheet,\n            currentSheet: this.sheetNames.length - 1,\n            config\n        }));\n    }\n}\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst coreFactory: ExcelOOXMLTemplate = {\n    getTemplate(author: string) {\n        const dt = new Date();\n        const jsonDate = dt.toJSON();\n\n        return {\n            name: 'cp:coreProperties',\n            properties: {\n                prefixedAttributes: [{\n                    prefix: \"xmlns:\",\n                    map: {\n                        cp: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n                        dc: 'http://purl.org/dc/elements/1.1/',\n                        dcterms: 'http://purl.org/dc/terms/',\n                        dcmitype: 'http://purl.org/dc/dcmitype/',\n                        xsi: 'http://www.w3.org/2001/XMLSchema-instance'\n                    }\n                }]\n            },\n            children: [{\n                name: 'dc:creator',\n                textNode: author\n            }, {\n                name: 'dc:title',\n                textNode: 'Workbook'\n            }, {\n                name: 'dcterms:created',\n                properties: {\n                    rawMap: {\n                        'xsi:type': 'dcterms:W3CDTF'\n                    }\n                },\n                textNode: jsonDate\n            }, {\n                name: 'dcterms:modified',\n                properties: {\n                    rawMap: {\n                        'xsi:type': 'dcterms:W3CDTF'\n                    }\n                },\n                textNode: jsonDate\n            }]\n        };\n    }\n};\n\nexport default coreFactory;\n", "import { ExcelContentType, ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst contentTypeFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelContentType) {\n        const {name, ContentType, Extension, PartName} = config;\n\n        return {\n            name,\n            properties: {\n                rawMap: {\n                    Extension,\n                    PartName,\n                    ContentType\n                }\n            }\n        };\n    }\n};\n\nexport default contentTypeFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport contentTypeFactory from './contentType';\n\nconst contentTypesFactory: ExcelOOXMLTemplate = {\n    getTemplate(sheetLen: number) {\n\n        const worksheets = new Array(sheetLen).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n            PartName: `/xl/worksheets/sheet${i + 1}.xml`\n        }));\n\n        const sheetsWithImages = ExcelXlsxFactory.worksheetImages.size;\n        const sheetsWithTables = ExcelXlsxFactory.worksheetDataTables.size;\n        const imageTypesObject: { [ key: string ]: boolean} = {};\n\n        ExcelXlsxFactory.workbookImageIds.forEach((v) => {\n            imageTypesObject[v.type] = true;\n        });\n\n        const imageDocs = new Array(sheetsWithImages).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.drawing+xml',\n            PartName: `/xl/drawings/drawing${i + 1}.xml`\n        }));\n\n        const tableDocs = new Array(sheetsWithTables).fill(undefined).map((v, i) => ({\n            name: 'Override',\n            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',\n            PartName: `/xl/tables/${ExcelXlsxFactory.getTableNameFromIndex(i)}.xml`\n        }));\n\n        const imageTypes = Object.keys(imageTypesObject).map(ext => ({\n            name: 'Default',\n            ContentType: `image/${ext}`,\n            Extension: ext\n        }));\n\n        const children = [\n            ...imageTypes,\n            {\n                name: 'Default',\n                Extension: 'rels',\n                ContentType: 'application/vnd.openxmlformats-package.relationships+xml'\n            }, {\n                name: 'Default',\n                ContentType: 'application/xml',\n                Extension: 'xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',\n                PartName: \"/xl/workbook.xml\"\n            },\n            ...worksheets,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml',\n                PartName: '/xl/theme/theme1.xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',\n                PartName: '/xl/styles.xml'\n            }, {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',\n                PartName: '/xl/sharedStrings.xml'\n            },\n            ...imageDocs,\n            ...tableDocs,\n            {\n                name: 'Override',\n                ContentType: 'application/vnd.openxmlformats-package.core-properties+xml',\n                PartName: '/docProps/core.xml'\n            }\n        ].map(contentType => contentTypeFactory.getTemplate(contentType));\n\n        return {\n            name: \"Types\",\n            properties: {\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/content-types\"\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default contentTypesFactory;\n", "import { Column, RowHeightCallbackParams, XmlElement } from \"@ag-grid-community/core\";\nimport { XmlFactory } from \"@ag-grid-community/csv-export\";\nimport { INCH_TO_EMU } from \"./excelConstants\";\nimport { ExcelCalculatedImage } from \"./excelInterfaces\";\n\nexport const pixelsToPoint = (pixels: number): number => {\n    return Math.round(pixels * 72 / 96);\n};\n\nexport const pointsToPixel = (points: number): number => {\n    return Math.round(points * 96 / 72);\n};\n\nexport const pixelsToEMU = (value: number): number => {\n    return Math.ceil(value * INCH_TO_EMU);\n};\n\nexport const getFontFamilyId = (name?: string): number | undefined => {\n    if (name === undefined) { return; }\n\n    const families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];\n    const pos = families.indexOf(name || 'Automatic');\n\n    return Math.max(pos, 0);\n};\n\nexport const getHeightFromProperty = (rowIndex: number, height?: number | ((params: RowHeightCallbackParams) => number)): number | undefined => {\n    if (!height) { return; }\n\n    let finalHeight: number;\n\n    if (typeof height === 'number') {\n        finalHeight = height;\n    } else {\n        const heightFunc = height as Function;\n        finalHeight = heightFunc({ rowIndex });\n    }\n\n    return pixelsToPoint(finalHeight);\n};\n\nexport const setExcelImageTotalWidth = (image: ExcelCalculatedImage, columnsToExport: Column[]): void => {\n    const { colSpan, column } = image.position!;\n\n    if (image.width) {\n        if (colSpan) {\n            const columnsInSpan = columnsToExport.slice(column! - 1, column! + colSpan - 1);\n            let totalWidth = 0;\n            for (let i = 0; i < columnsInSpan.length; i++) {\n                const colWidth = columnsInSpan[i].getActualWidth();\n                if (image.width < totalWidth + colWidth) {\n                    image.position!.colSpan = i + 1;\n                    image.totalWidth = image.width;\n                    image.width = image.totalWidth - totalWidth;\n                    break;\n                }\n                totalWidth += colWidth;\n            }\n        } else {\n            image.totalWidth = image.width;\n        }\n    }\n};\n\nexport const setExcelImageTotalHeight = (image: ExcelCalculatedImage, rowHeight?: number | ((params: RowHeightCallbackParams) => number)): void => {\n    const { rowSpan, row } = image.position!;\n\n    if (image.height) {\n        if (rowSpan) {\n            let totalHeight = 0;\n            let counter = 0;\n            for (let i = row!; i < row! + rowSpan; i++) {\n                const nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);\n                if (image.height < totalHeight + nextRowHeight) {\n                    image.position!.rowSpan = counter + 1;\n                    image.totalHeight = image.height;\n                    image.height = image.totalHeight - totalHeight;\n                    break;\n                }\n                totalHeight += nextRowHeight;\n                counter++;\n            }\n        } else {\n            image.totalHeight = image.height;\n        }\n    }\n};\n\nexport const createXmlPart = (body: XmlElement): string => {\n    const header = XmlFactory.createHeader({\n        encoding: 'UTF-8',\n        standalone: 'yes'\n    });\n\n    const xmlBody = XmlFactory.createXml(body);\n    return `${header}${xmlBody}`;\n};\n\nexport const getExcelColumnName = (colIdx: number): string => {\n    const startCode = 65;\n    const tableWidth = 26;\n    const fromCharCode = String.fromCharCode;\n\n    const pos = Math.floor(colIdx / tableWidth);\n    const tableIdx = colIdx % tableWidth;\n\n    if (!pos || colIdx === tableWidth) { return fromCharCode(startCode + colIdx - 1); }\n    if (!tableIdx) { return getExcelColumnName(pos - 1) + 'Z'; }\n    if (pos < tableWidth) { return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1); }\n\n    return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};", "export const INCH_TO_EMU = 9525;\n\nexport const numberFormatMap: {[key: string]: number} = {\n    '0': 1,\n    '0.00': 2,\n    '#,##0': 3,\n    '#,##0.00': 4,\n    '0%': 9,\n    '0.00%': 10,\n    '0.00E+00': 11,\n    '# ?/?': 12,\n    '# ??/??': 13,\n    'mm-dd-yy': 14,\n    'd-mmm-yy': 15,\n    'd-mmm': 16,\n    'mmm-yy': 17,\n    'h:mm AM/PM': 18,\n    'h:mm:ss AM/PM': 19,\n    'h:mm': 20,\n    'h:mm:ss': 21,\n    'm/d/yy h:mm': 22,\n    '#,##0 ;(#,##0)': 37,\n    '#,##0 ;[Red](#,##0)': 38,\n    '#,##0.00;(#,##0.00)': 39,\n    '#,##0.00;[Red](#,##0.00)': 40,\n    'mm:ss': 45,\n    '[h]:mm:ss': 46,\n    'mmss.0': 47,\n    '##0.0E+0': 48,\n    '@': 49\n};", "import { ExcelImage, ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport { ExcelCalculatedImage, ImageAnchor, ImageBoxSize, ImageColor } from '../../assets/excelInterfaces';\nimport { pixelsToEMU } from '../../assets/excelUtils';\n\nconst getAnchor = (name: string, imageAnchor: ImageAnchor): XmlElement => ({\n    name: `xdr:${name}`,\n    children: [{\n        name: 'xdr:col',\n        textNode: (imageAnchor.col).toString()\n    }, {\n        name: 'xdr:colOff',\n        textNode: imageAnchor.offsetX.toString()\n    }, {\n        name: 'xdr:row',\n        textNode: imageAnchor.row.toString()\n    }, {\n        name: 'xdr:rowOff',\n        textNode: imageAnchor.offsetY.toString()\n    }]\n});\n\nconst getExt = (image: ExcelImage): XmlElement => {\n    const children: XmlElement[] = [{\n        name: 'a:ext',\n        properties: {\n            rawMap: {\n                uri: '{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}'\n            }\n        },\n        children: [{\n            name: 'a16:creationId',\n            properties: {\n                rawMap: {\n                    'id': '{822E6D20-D7BC-2841-A643-D49A6EF008A2}',\n                    'xmlns:a16': 'http://schemas.microsoft.com/office/drawing/2014/main'\n                }\n            }\n        }]\n    }];\n    const recolor = image.recolor && image.recolor.toLowerCase();\n\n    switch (recolor) {\n        case 'grayscale':\n        case 'sepia':\n        case 'washout':\n            children.push({\n                name: 'a:ext',\n                properties: {\n                    rawMap: {\n                        uri: '{C183D7F6-B498-43B3-948B-1728B52AA6E4}'\n                    }\n                },\n                children: [{\n                    name: 'adec:decorative',\n                    properties: {\n                        rawMap: {\n                            'val': '0',\n                            'xmlns:adec': 'http://schemas.microsoft.com/office/drawing/2017/decorative'\n                        }\n                    }\n                }]\n            });\n    }\n\n    return {\n        name: 'a:extLst',\n        children\n    };\n};\n\nconst getNvPicPr = (image: ExcelImage, index: number) => ({\n    name: 'xdr:nvPicPr',\n    children: [{\n        name: 'xdr:cNvPr',\n        properties: {\n            rawMap: {\n                id: index,\n                name: image.id,\n                descr: image.altText != null ? image.altText : undefined\n            }\n        },\n        children: [getExt(image)]\n    }, {\n        name: 'xdr:cNvPicPr',\n        properties: {\n            rawMap: {\n                preferRelativeResize: '0'\n            }\n        },\n        children: [{\n            name: 'a:picLocks'\n        }]\n    }]\n});\n\nconst getColorDetails = (color: ImageColor): XmlElement[] | undefined => {\n    if (!color.saturation && !color.tint) { return; }\n    const ret: XmlElement[] = [];\n\n    if (color.saturation) {\n        ret.push({\n            name: 'a:satMod',\n            properties: {\n                rawMap: {\n                    val: color.saturation * 1000\n                }\n            }\n        });\n    }\n\n    if (color.tint) {\n        ret.push({\n            name: 'a:tint',\n            properties: {\n                rawMap: {\n                    val: color.tint * 1000\n                }\n            }\n        });\n    }\n\n    return ret;\n};\n\nconst getDuoTone = (primaryColor: ImageColor, secondaryColor: ImageColor): XmlElement => {\n    return ({\n        name: 'a:duotone',\n        children: [{\n            name: 'a:prstClr',\n            properties: {\n                rawMap: {\n                    val: primaryColor.color\n                }\n            },\n            children: getColorDetails(primaryColor)\n        }, {\n            name: 'a:srgbClr',\n            properties: {\n                rawMap: {\n                    val: secondaryColor.color\n                }\n            },\n            children: getColorDetails(secondaryColor)\n        }]\n    });\n};\n\nconst getBlipFill = (image: ExcelImage, index: number) => {\n    let blipChildren: XmlElement[] | undefined;\n\n    if (image.transparency) {\n        const transparency = Math.min(Math.max(image.transparency, 0), 100);\n        blipChildren = [{\n            name: 'a:alphaModFix',\n            properties: {\n                rawMap: {\n                    amt: 100000 - Math.round(transparency * 1000),\n                }\n            }\n        }];\n    }\n\n    if (image.recolor) {\n        if (!blipChildren) { blipChildren = []; }\n        switch (image.recolor.toLocaleLowerCase()) {\n            case 'grayscale':\n                blipChildren.push({ name: 'a:grayscl' });\n                break;\n            case 'sepia':\n                blipChildren.push(getDuoTone({ color: 'black' }, { color: 'D9C3A5', tint: 50, saturation: 180 }));\n                break;\n            case 'washout':\n                blipChildren.push({\n                    name: 'a:lum',\n                    properties: {\n                        rawMap: {\n                            bright: '70000',\n                            contrast: '-70000'\n                        }\n                    }\n                });\n                break;\n            default:\n        }\n    }\n\n    return ({\n        name: 'xdr:blipFill',\n        children: [{\n            name: 'a:blip',\n            properties: {\n                rawMap: {\n                    'cstate': 'print',\n                    'r:embed': `rId${index}`,\n                    'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\n                }\n            },\n            children: blipChildren\n        }, {\n            name:'a:stretch',\n            children: [{\n                name: 'a:fillRect'\n            }]\n        }]\n    });\n};\n\nconst getSpPr = (image: ExcelImage, imageBoxSize: ImageBoxSize) => {\n    const xfrm: XmlElement = {\n        name: 'a:xfrm',\n        children: [{\n            name: 'a:off',\n            properties: {\n                rawMap: {\n                    x: 0,\n                    y: 0\n                }\n            }\n        }, {\n            name: 'a:ext',\n            properties: {\n                rawMap: {\n                    cx: imageBoxSize.width,\n                    cy: imageBoxSize.height\n                }\n            }\n        }]\n    };\n\n    if (image.rotation) {\n        const rotation = image.rotation;\n        xfrm.properties = {\n            rawMap: {\n                rot: Math.min(Math.max(rotation, 0), 360) * 60000\n            }\n        };\n    }\n\n    const prstGeom: XmlElement = {\n        name: 'a:prstGeom',\n        properties: {\n            rawMap: {\n                prst: 'rect'\n            }\n        },\n        children: [{ name: 'a:avLst' }]\n    };\n\n    const ret = {\n        name: 'xdr:spPr',\n        children: [xfrm, prstGeom]\n    };\n\n    return ret;\n};\n\nconst getImageBoxSize = (image: ExcelCalculatedImage): ImageBoxSize => {\n    image.fitCell = !!image.fitCell || (!image.width || !image.height);\n\n    const { position = {}, fitCell, width = 0, height = 0, totalHeight, totalWidth } = image;\n    const { offsetX = 0 , offsetY = 0, row = 1, rowSpan = 1, column = 1, colSpan = 1 } = position;\n\n    return {\n        from: {\n            row: row - 1,\n            col: column - 1,\n            offsetX: pixelsToEMU(offsetX),\n            offsetY: pixelsToEMU(offsetY)\n        },\n        to: {\n            row: (row - 1) + (fitCell ? 1 : rowSpan - 1),\n            col: (column - 1) + (fitCell ? 1 : colSpan - 1),\n            offsetX: pixelsToEMU(width + offsetX),\n            offsetY: pixelsToEMU(height + offsetY)\n        },\n        height: pixelsToEMU(totalHeight || height),\n        width: pixelsToEMU(totalWidth || width)\n    };\n};\n\nconst getPicture = (\n    image: ExcelImage,\n    currentIndex: number,\n    worksheetImageIndex: number,\n    imageBoxSize: ImageBoxSize\n): XmlElement => {\n    return {\n        name: 'xdr:pic',\n        children: [\n            getNvPicPr(image, currentIndex + 1),\n            getBlipFill(image, worksheetImageIndex + 1),\n            getSpPr(image, imageBoxSize)\n        ]\n    };\n};\n\nconst drawingFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: {\n        sheetIndex: number\n    }) {\n        const { sheetIndex } = config;\n        const sheetImages = ExcelXlsxFactory.worksheetImages.get(sheetIndex);\n        const sheetImageIds = ExcelXlsxFactory.worksheetImageIds.get(sheetIndex);\n\n        const children = sheetImages!.map((image, idx) => {\n            const boxSize = getImageBoxSize(image);\n            return ({\n                name: 'xdr:twoCellAnchor',\n                properties: {\n                    rawMap: {\n                        editAs: 'absolute'\n                    }\n                },\n                children: [\n                    getAnchor('from', boxSize.from),\n                    getAnchor('to', boxSize.to),\n                    getPicture(image, idx, sheetImageIds!.get(image.id)!.index, boxSize),\n                    { name: 'xdr:clientData'}\n                ]\n            });\n        });\n\n        return {\n            name: 'xdr:wsDr',\n            properties: {\n                rawMap: {\n                    'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                    'xmlns:xdr': 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default drawingFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { ExcelDataTable } from '../../assets/excelInterfaces';\n\nconst tableFactory: ExcelOOXMLTemplate = {\n    getTemplate(dataTable: ExcelDataTable, idx: number) {\n        const {\n            name,\n            columns,\n            rowCount,\n            displayName,\n            headerRowIndex,\n            showRowStripes,\n            showColumnStripes,\n            showFilterButtons,\n            highlightFirstColumn,\n            highlightLastColumn\n        } = dataTable || {};\n\n        if (!dataTable || !name || !Array.isArray(columns) || !columns.length || !rowCount) {\n            return { name: \"table\" };\n        }\n\n        const filterColumns = columns.map((col: string, idx: number) => ({\n            name: \"filterColumn\",\n            properties: {\n                rawMap: {\n                    colId: idx.toString(), // For filters, this should start with 0\n                    hiddenButton: showFilterButtons[idx] ? 0 : 1\n                }\n            }\n        }));\n\n        const firstRow = headerRowIndex + 1;\n        const id: string = (idx + 1).toString();\n        const firstCell = `A${firstRow}`;\n        const lastCell = `${String.fromCharCode(64 + columns.length)}${firstRow + rowCount}`;\n        const ref = `${firstCell}:${lastCell}`;\n        const displayNameToUse = idx ? `${displayName}_${idx + 1}` : displayName;\n\n        return {\n            name: \"table\",\n            properties: {\n                rawMap: {\n                    \"xmlns\": \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\",\n                    \"xmlns:mc\": \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n                    \"mc:Ignorable\": \"xr xr3\",\n                    \"xmlns:xr\": \"http://schemas.microsoft.com/office/spreadsheetml/2014/revision\",\n                    \"xmlns:xr3\": \"http://schemas.microsoft.com/office/spreadsheetml/2016/revision3\",\n                    \"name\": name,\n                    \"displayName\": displayNameToUse,\n                    \"ref\": ref,\n                    \"totalsRowShown\": 0,\n                    \"id\": id,\n                }\n            },\n            children: [\n                {\n                    name: \"autoFilter\",\n                    properties: {\n                        rawMap: {\n                            ref,\n                        }\n                    },\n                    children: filterColumns,\n                },\n                {\n                    name: \"tableColumns\",\n                    properties: {\n                        rawMap: {\n                            count: columns.length\n                        }\n                    },\n                    children: columns.map((col: string, idx: number) => ({\n                        name: \"tableColumn\",\n                        properties: {\n                            rawMap: {\n                                id: (idx + 1).toString(),\n                                name: col,\n                                dataCellStyle: \"Normal\"\n                            }\n                        }\n                    }))\n                },\n                {\n                    name: \"tableStyleInfo\",\n                    properties: {\n                        rawMap: {\n                            name: \"TableStyleLight1\",\n                            showFirstColumn: highlightFirstColumn ? 1 : 0,\n                            showLastColumn: highlightLastColumn ? 1 : 0,\n                            showRowStripes: showRowStripes ? 1 : 0,\n                            showColumnStripes: showColumnStripes ? 1 : 0,\n                        }\n                    }\n                }\n            ]\n        };\n    }\n};\n\nexport default tableFactory;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\nconst getColorChildren = (props: [string, string, string, string?]): XmlElement => {\n    const [type, innerType, val, lastClr] = props;\n\n    return {\n        name: `a:${type}`,\n        children: [{\n            name: `a:${innerType}`,\n            properties: {\n                rawMap: {\n                    val,\n                    lastClr\n                }\n            }\n        }]\n    };\n};\n\nconst colorScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n\n        return {\n            name: \"a:clrScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [\n                getColorChildren(['dk1', 'sysClr', 'windowText', '000000']),\n                getColorChildren(['lt1', 'sysClr', 'window', 'FFFFFF']),\n                getColorChildren(['dk2', 'srgbClr', '44546A']),\n                getColorChildren(['lt2', 'srgbClr', 'E7E6E6']),\n                getColorChildren(['accent1', 'srgbClr', '4472C4']),\n                getColorChildren(['accent2', 'srgbClr', 'ED7D31']),\n                getColorChildren(['accent3', 'srgbClr', 'A5A5A5']),\n                getColorChildren(['accent4', 'srgbClr', 'FFC000']),\n                getColorChildren(['accent5', 'srgbClr', '5B9BD5']),\n                getColorChildren(['accent6', 'srgbClr', '70AD47']),\n                getColorChildren(['hlink', 'srgbClr', '0563C1']),\n                getColorChildren(['folHlink', 'srgbClr', '954F72'])\n            ]\n        };\n    }\n};\n\nexport default colorScheme;\n", "import { ExcelOOXMLTemplate, XmlElement, _ } from '@ag-grid-community/core';\n\nconst getFont = (props: [string, string, string?, string?]): XmlElement => {\n    const [type, typeface, script, panose] = props;\n    return {\n        name: `a:${type}`,\n        properties: {\n            rawMap: {\n                script,\n                typeface,\n                panose\n            }\n        }\n    };\n};\n\nconst fontScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: \"a:fontScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [{\n                name: 'a:majorFont',\n                children: [\n                    getFont(['latin', 'Calibri Light', undefined, '020F0302020204030204']),\n                    getFont(['ea', '']),\n                    getFont(['cs', '']),\n                    getFont(['font', '\u6E38\u30B4\u30B7\u30C3\u30AF Light', 'Jpan']),\n                    getFont(['font', '\uB9D1\uC740 \uACE0\uB515', 'Hang']),\n                    getFont(['font', '\u7B49\u7EBF Light', 'Hans']),\n                    getFont(['font', '\u65B0\u7D30\u660E\u9AD4', 'Hant']),\n                    getFont(['font', 'Times New Roman', 'Arab']),\n                    getFont(['font', 'Times New Roman', 'Hebr']),\n                    getFont(['font', 'Tahoma', 'Thai']),\n                    getFont(['font', 'Nyala', 'Ethi']),\n                    getFont(['font', 'Vrinda', 'Beng']),\n                    getFont(['font', 'Shruti', 'Gujr']),\n                    getFont(['font', 'MoolBoran', 'Khmr']),\n                    getFont(['font', 'Tunga', 'Knda']),\n                    getFont(['font', 'Raavi', 'Guru']),\n                    getFont(['font', 'Euphemia', 'Cans']),\n                    getFont(['font', 'Plantagenet Cherokee', 'Cher']),\n                    getFont(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                    getFont(['font', 'Microsoft Himalaya', 'Tibt']),\n                    getFont(['font', 'MV Boli', 'Thaa']),\n                    getFont(['font', 'Mangal', 'Deva']),\n                    getFont(['font', 'Gautami', 'Telu']),\n                    getFont(['font', 'Latha', 'Taml']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrc']),\n                    getFont(['font', 'Kalinga', 'Orya']),\n                    getFont(['font', 'Kartika', 'Mlym']),\n                    getFont(['font', 'DokChampa', 'Laoo']),\n                    getFont(['font', 'Iskoola Pota', 'Sinh']),\n                    getFont(['font', 'Mongolian Baiti', 'Mong']),\n                    getFont(['font', 'Times New Roman', 'Viet']),\n                    getFont(['font', 'Microsoft Uighur', 'Uigh']),\n                    getFont(['font', 'Sylfaen', 'Geor']),\n                    getFont(['font', 'Arial', 'Armn']),\n                    getFont(['font', 'Leelawadee UI', 'Bugi']),\n                    getFont(['font', 'Microsoft JhengHei', 'Bopo']),\n                    getFont(['font', 'Javanese Text', 'Java']),\n                    getFont(['font', 'Segoe UI', 'Lisu']),\n                    getFont(['font', 'Myanmar Text', 'Mymr']),\n                    getFont(['font', 'Ebrima', 'Nkoo']),\n                    getFont(['font', 'Nirmala UI', 'Olck']),\n                    getFont(['font', 'Ebrima', 'Osma']),\n                    getFont(['font', 'Phagspa', 'Phag']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrn']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrj']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syre']),\n                    getFont(['font', 'Nirmala UI', 'Sora']),\n                    getFont(['font', 'Microsoft Tai Le', 'Tale']),\n                    getFont(['font', 'Microsoft New Tai Lue', 'Talu']),\n                    getFont(['font', 'Ebrima', 'Tfng'])\n                ]\n            }, {\n                name: 'a:minorFont',\n                children: [\n                    getFont(['latin', 'Calibri', undefined, '020F0502020204030204']),\n                    getFont(['ea', '']),\n                    getFont(['cs', '']),\n                    getFont(['font', '\u6E38\u30B4\u30B7\u30C3\u30AF', 'Jpan']),\n                    getFont(['font', '\uB9D1\uC740 \uACE0\uB515', 'Hang']),\n                    getFont(['font', '\u7B49\u7EBF', 'Hans']),\n                    getFont(['font', '\u65B0\u7D30\u660E\u9AD4', 'Hant']),\n                    getFont(['font', 'Arial', 'Arab']),\n                    getFont(['font', 'Arial', 'Hebr']),\n                    getFont(['font', 'Tahoma', 'Thai']),\n                    getFont(['font', 'Nyala', 'Ethi']),\n                    getFont(['font', 'Vrinda', 'Beng']),\n                    getFont(['font', 'Shruti', 'Gujr']),\n                    getFont(['font', 'DaunPenh', 'Khmr']),\n                    getFont(['font', 'Tunga', 'Knda']),\n                    getFont(['font', 'Raavi', 'Guru']),\n                    getFont(['font', 'Euphemia', 'Cans']),\n                    getFont(['font', 'Plantagenet Cherokee', 'Cher']),\n                    getFont(['font', 'Microsoft Yi Baiti', 'Yiii']),\n                    getFont(['font', 'Microsoft Himalaya', 'Tibt']),\n                    getFont(['font', 'MV Boli', 'Thaa']),\n                    getFont(['font', 'Mangal', 'Deva']),\n                    getFont(['font', 'Gautami', 'Telu']),\n                    getFont(['font', 'Latha', 'Taml']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrc']),\n                    getFont(['font', 'Kalinga', 'Orya']),\n                    getFont(['font', 'Kartika', 'Mlym']),\n                    getFont(['font', 'DokChampa', 'Laoo']),\n                    getFont(['font', 'Iskoola Pota', 'Sinh']),\n                    getFont(['font', 'Mongolian Baiti', 'Mong']),\n                    getFont(['font', 'Arial', 'Viet']),\n                    getFont(['font', 'Microsoft Uighur', 'Uigh']),\n                    getFont(['font', 'Sylfaen', 'Geor']),\n                    getFont(['font', 'Arial', 'Armn']),\n                    getFont(['font', 'Leelawadee UI', 'Bugi']),\n                    getFont(['font', 'Microsoft JhengHei', 'Bopo']),\n                    getFont(['font', 'Javanese Text', 'Java']),\n                    getFont(['font', 'Segoe UI', 'Lisu']),\n                    getFont(['font', 'Myanmar Text', 'Mymr']),\n                    getFont(['font', 'Ebrima', 'Nkoo']),\n                    getFont(['font', 'Nirmala UI', 'Olck']),\n                    getFont(['font', 'Ebrima', 'Osma']),\n                    getFont(['font', 'Phagspa', 'Phag']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrn']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syrj']),\n                    getFont(['font', 'Estrangelo Edessa', 'Syre']),\n                    getFont(['font', 'Nirmala UI', 'Sora']),\n                    getFont(['font', 'Microsoft Tai Le', 'Tale']),\n                    getFont(['font', 'Microsoft New Tai Lue', 'Talu']),\n                    getFont(['font', 'Ebrima', 'Tfng'])\n                ]\n            }]\n        };\n    }\n};\n\nexport default fontScheme;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\n\ntype GsType = [string, string, string, string?, string?, string?];\ntype LinType = [string, string];\n\nconst getPropertyVal = (name: string, val: string, children?: XmlElement[]): XmlElement => ({\n    name: `a:${name}`,\n    properties: {\n        rawMap: {\n            val\n        }\n    },\n    children\n});\n\nconst getGs = (props: GsType): XmlElement => {\n    const [pos, schemeColor, satMod, lumMod, tint, shade] = props;\n    const children: XmlElement[] = [];\n\n    children.push(getPropertyVal('satMod', satMod));\n    if (lumMod) { children.push(getPropertyVal('lumMod', lumMod)); }\n    if (tint) { children.push(getPropertyVal('tint', tint)); }\n    if (shade) { children.push(getPropertyVal('shade', shade)); }\n\n    return {\n        name: 'a:gs',\n        properties: {\n            rawMap: {\n                pos\n            }\n        },\n        children: [{\n            name: 'a:schemeClr',\n            properties: {\n                rawMap: {\n                    val: schemeColor\n                }\n            },\n            children\n        }]\n    };\n};\n\nconst getSolidFill = (val: string, children?: XmlElement[]): XmlElement => ({\n    name: 'a:solidFill',\n    children: [getPropertyVal('schemeClr', val, children)]\n});\n\nconst getGradFill = (props: [string, GsType, GsType, GsType, LinType]): XmlElement => {\n    const [rotWithShape, gs1, gs2, gs3, lin] = props;\n    const [ang, scaled] = lin;\n    return {\n        name: 'a:gradFill',\n        properties: {\n            rawMap: {\n                rotWithShape\n            }\n        },\n        children: [{\n            name: 'a:gsLst',\n            children: [\n                getGs(gs1),\n                getGs(gs2),\n                getGs(gs3)\n            ]\n        }, {\n            name: 'a:lin',\n            properties: {\n                rawMap: {\n                    ang: ang,\n                    scaled: scaled\n                }\n            }\n        }]\n    };\n};\n\nconst getLine = (props: [string, string, string, string]): XmlElement => {\n    const [w, cap, cmpd, algn] = props;\n\n    return {\n        name: 'a:ln',\n        properties: {\n            rawMap: { w, cap, cmpd, algn }\n        },\n        children: [\n            getSolidFill('phClr'),\n            getPropertyVal('prstDash', 'solid'),\n            {\n                name: 'a:miter',\n                properties: {\n                    rawMap: {\n                        lim: '800000'\n                    }\n                }\n            }\n        ]\n    };\n};\n\nconst getEffectStyle = (shadow?: [string, string, string, string, string]): XmlElement => {\n    const children: XmlElement[] = [];\n\n    if (shadow) {\n        const [blurRad, dist, dir, algn, rotWithShape] = shadow;\n        children.push({\n            name: 'a:outerShdw',\n            properties: {\n                rawMap: { blurRad, dist, dir, algn, rotWithShape }\n            },\n            children: [\n                getPropertyVal('srgbClr', '000000', [getPropertyVal('alpha', '63000')])\n            ]\n        });\n    }\n\n    return {\n        name: 'a:effectStyle',\n        children: [Object.assign({}, {\n            name: 'a:effectLst'\n        }, children.length ? {children} : {})]\n    };\n};\n\nconst getFillStyleList = (): XmlElement => ({\n    name: 'a:fillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '105000', '110000', '67000'],\n            ['50000', 'phClr', '103000', '105000', '73000' ],\n            ['100000', 'phClr', '109000', '105000', '81000' ],\n            ['5400000', '0']\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '103000', '102000', '94000' ],\n            ['50000', 'phClr', '110000', '100000', undefined, '100000' ],\n            ['100000', 'phClr', '120000', '99000', undefined, '78000' ],\n            ['5400000', '0' ]\n        ])\n    ]\n});\n\nconst getLineStyleList = (): XmlElement => ({\n    name: 'a:lnStyleLst',\n    children: [\n        getLine(['6350', 'flat', 'sng', 'ctr']),\n        getLine(['12700', 'flat', 'sng', 'ctr']),\n        getLine(['19050', 'flat', 'sng', 'ctr'])\n    ]\n});\n\nconst getEffectStyleList = (): XmlElement => ({\n    name: 'a:effectStyleLst',\n    children: [\n        getEffectStyle(),\n        getEffectStyle(),\n        getEffectStyle(['57150', '19050', '5400000', 'ctr', '0'])\n    ]\n});\n\nconst getBgFillStyleList = (): XmlElement => ({\n    name: 'a:bgFillStyleLst',\n    children: [\n        getSolidFill('phClr'),\n        getSolidFill('phClr', [\n            getPropertyVal('tint', '95000'),\n            getPropertyVal('satMod', '170000'),\n        ]),\n        getGradFill([\n            '1',\n            ['0', 'phClr', '150000', '102000', '93000', '98000'],\n            ['50000', 'phClr', '130000', '103000', '98000', '90000'],\n            ['100000', 'phClr', '120000', undefined, undefined, '63000'],\n            ['5400000', '0']\n        ])\n    ]\n});\n\nconst formatScheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n        return {\n            name: \"a:fmtScheme\",\n            properties: {\n                rawMap: {\n                    name: \"Office\"\n                }\n            },\n            children: [\n                getFillStyleList(),\n                getLineStyleList(),\n                getEffectStyleList(),\n                getBgFillStyleList()\n            ]\n        };\n    }\n};\n\nexport default formatScheme;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport colorScheme from './colorScheme';\nimport fontScheme from './fontScheme';\nimport formatScheme from './formatScheme';\n\nconst themeElements: ExcelOOXMLTemplate = {\n    getTemplate() {\n\n        return {\n            name: \"a:themeElements\",\n            children: [\n                colorScheme.getTemplate(),\n                fontScheme.getTemplate(),\n                formatScheme.getTemplate()\n            ]\n        };\n    }\n};\n\nexport default themeElements;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport themeElements from './office/themeElements';\n\nconst officeTheme: ExcelOOXMLTemplate = {\n    getTemplate() {\n\n        return {\n            name: \"a:theme\",\n            properties: {\n                prefixedAttributes:[{\n                    prefix: \"xmlns:\",\n                    map: {\n                        a: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n                    },\n                }],\n                rawMap: {\n                    name: \"Office Theme\"\n                }\n            },\n            children: [\n                themeElements.getTemplate(),\n                {\n                    name: 'a:objectDefaults'\n                },\n                {\n                    name: 'a:extraClrSchemeLst'\n                }\n            ]\n        };\n    }\n};\n\nexport default officeTheme;\n", "import { ExcelOOXMLTemplate, XmlElement, _ } from '@ag-grid-community/core';\n\nconst buildSharedString = (strMap: Map<string, number>): XmlElement[] => {\n    const ret: XmlElement[] = [];\n\n    for (const key of strMap.keys()) {\n        const textNode = key.toString();\n\n\n        const child: XmlElement = {\n            name: 't',\n            textNode: _.escapeString(textNode)\n        };\n\n        // if we have leading or trailing spaces, instruct Excel not to trim them\n        const preserveSpaces = textNode.trim().length !== textNode.length;\n\n        if (preserveSpaces) {\n            child.properties = {\n                rawMap: {\n                    \"xml:space\": \"preserve\"\n                }\n            };\n        }\n        ret.push({\n            name: 'si',\n            children: [child]\n        });\n    }\n\n    return ret;\n};\n\nconst sharedStrings: ExcelOOXMLTemplate = {\n    getTemplate(strings: Map<string, number>) {\n        return {\n            name: \"sst\",\n            properties: {\n                rawMap: {\n                    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    count: strings.size,\n                    uniqueCount: strings.size\n                }\n            },\n            children: buildSharedString(strings)\n        };\n    }\n};\n\nexport default sharedStrings;\n", "import { ExcelOOXMLTemplate, _ } from '@ag-grid-community/core';\nimport { NumberFormat } from '../../../assets/excelInterfaces';\n\nfunction prepareString(str: string): string {\n    const split = str.split(/(\\[[^\\]]*\\])/);\n\n    for (let i = 0; i < split.length; i++) {\n        // excel formulas require symbols to be escaped. Excel also requires $ to be \n        // placed in quotes but only when the $ is not wrapped inside of square brackets.\n        let currentString = split[i];\n        if (!currentString.length) { continue; }\n        if (!currentString.startsWith('[')) {\n            currentString = currentString.replace(/\\$/g, '\"$\"');\n         }\n\n         split[i] = _.escapeString(currentString) as string;\n    }\n\n    return split.join('');\n}\n\nconst numberFormatFactory: ExcelOOXMLTemplate = {\n    getTemplate(numberFormat: NumberFormat) {\n        let { formatCode, numFmtId } = numberFormat;\n\n        \n        if (formatCode.length) {\n            formatCode = prepareString(formatCode);\n        }\n\n        return {\n            name: \"numFmt\",\n            properties: {\n                rawMap: {\n                    formatCode,\n                    numFmtId\n                }\n            }\n        };\n    }\n};\n\nexport default numberFormatFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { NumberFormat } from '../../../assets/excelInterfaces';\nimport numberFormatFactory from './numberFormat';\n\nconst numberFormatsFactory: ExcelOOXMLTemplate = {\n    getTemplate(numberFormats: NumberFormat[]) {\n        return {\n            name: \"numFmts\",\n            properties: {\n                rawMap: {\n                    count: numberFormats.length\n                }\n            },\n            children: numberFormats.map(numberFormat => numberFormatFactory.getTemplate(numberFormat))\n        };\n    }\n};\n\nexport default numberFormatsFactory;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { ExcelThemeFont } from '../../../assets/excelInterfaces';\n\nconst fontFactory: ExcelOOXMLTemplate = {\n    getTemplate(font: ExcelThemeFont) {\n        const {\n            size, colorTheme, color = 'FF000000', fontName = 'Calibri', family, scheme,\n            italic, bold, strikeThrough, outline, shadow, underline, verticalAlign\n        } = font;\n\n        const children: XmlElement[] = [\n            { name: 'sz', properties: { rawMap: { val: size } }},\n            { name: 'color', properties: { rawMap: { theme: colorTheme, rgb: color } }},\n            { name: 'name', properties: { rawMap: { val: fontName } }}\n        ];\n\n        if (family) {\n            children.push({ name: 'family', properties: { rawMap: { val: family } }});\n        }\n\n        if (scheme) {\n            children.push({ name: 'scheme', properties: { rawMap: { val: scheme } }});\n        }\n\n        if (italic) { children.push({ name: 'i' }); }\n        if (bold) { children.push({ name: 'b' }); }\n        if (strikeThrough) { children.push({ name: 'strike' }); }\n        if (outline) { children.push({name: 'outline' }); }\n        if (shadow) { children.push({ name: 'shadow' }); }\n        if (underline) {\n            children.push({name: 'u', properties: { rawMap: { val: underline } }});\n        }\n        if (verticalAlign) {\n            children.push({name: 'vertAlign', properties: { rawMap: { val: verticalAlign } }});\n        }\n\n        return { name: \"font\", children };\n    }\n};\n\nexport default fontFactory;", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { ExcelThemeFont } from '../../../assets/excelInterfaces';\nimport fontFactory from './font';\n\nconst fontsFactory: ExcelOOXMLTemplate = {\n    getTemplate(fonts: ExcelThemeFont[]) {\n        return {\n            name: \"fonts\",\n            properties: {\n                rawMap: {\n                    count: fonts.length\n                }\n            },\n            children: fonts.map(font => fontFactory.getTemplate(font))\n        };\n    }\n};\n\nexport default fontsFactory;\n", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { Fill } from '../../../assets/excelInterfaces';\n\nconst fillFactory: ExcelOOXMLTemplate = {\n    getTemplate(fill: Fill) {\n        const {patternType, fgTheme, fgTint, fgRgb, bgRgb, bgIndexed} = fill;\n        const pf: XmlElement = {\n            name: 'patternFill',\n            properties: {\n                rawMap: {\n                    patternType\n                }\n            }\n        };\n\n        if (fgTheme || fgTint || fgRgb) {\n            pf.children = [{\n                name: 'fgColor',\n                properties: {\n                    rawMap: {\n                        theme: fgTheme,\n                        tint: fgTint,\n                        rgb: fgRgb\n                    }\n                }\n            }];\n        }\n\n        if (bgIndexed || bgRgb) {\n            if (!pf.children) { pf.children = []; }\n            pf.children.push({\n                name: 'bgColor',\n                properties: {\n                    rawMap: {\n                        indexed: bgIndexed,\n                        rgb: bgRgb\n                    }\n                }\n            });\n        }\n\n        return {\n            name: \"fill\",\n            children: [pf]\n        };\n    }\n};\n\nexport default fillFactory;", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { Fill } from '../../../assets/excelInterfaces';\nimport fillFactory from './fill';\n\nconst fillsFactory: ExcelOOXMLTemplate = {\n    getTemplate(fills: Fill[]) {\n        return {\n            name: \"fills\",\n            properties: {\n                rawMap: {\n                    count: fills.length\n                }\n            },\n            children: fills.map(fill => fillFactory.getTemplate(fill))\n        };\n    }\n};\n\nexport default fillsFactory;\n", "import { ColorMap } from \"./excelInterfaces\";\n\nconst getWeightName = (value?: number): string => {\n    switch (value) {\n        case 1: return 'thin';\n        case 2: return 'medium';\n        case 3: return 'thick';\n        default: return 'hair';\n    }\n};\n\nconst mappedBorderNames: { [key: string]: string } = {\n    None: 'None',\n    Dot: 'Dotted',\n    Dash: 'Dashed',\n    Double: 'Double',\n    DashDot: 'DashDot',\n    DashDotDot: 'DashDotDot',\n    SlantDashDot: 'SlantDashDot'\n};\n\nconst mediumBorders = ['Dashed', 'DashDot', 'DashDotDot'];\n\nconst colorMap: ColorMap = {\n    None: 'none',\n    Solid: 'solid',\n    Gray50: 'mediumGray',\n    Gray75: 'darkGray',\n    Gray25: 'lightGray',\n    HorzStripe: 'darkHorizontal',\n    VertStripe: 'darkVertical',\n    ReverseDiagStripe: 'darkDown',\n    DiagStripe: 'darkUp',\n    DiagCross: 'darkGrid',\n    ThickDiagCross: 'darkTrellis',\n    ThinHorzStripe: 'lightHorizontal',\n    ThinVertStripe: 'lightVertical',\n    ThinReverseDiagStripe: 'lightDown',\n    ThinDiagStripe: 'lightUp',\n    ThinHorzCross: 'lightGrid',\n    ThinDiagCross: 'lightTrellis',\n    Gray125: 'gray125',\n    Gray0625: 'gray0625'\n};\n\nconst horizontalAlignmentMap: { [key: string]: string } = {\n    Automatic: 'general',\n    Left: 'left',\n    Center: 'center',\n    Right: 'right',\n    Fill: 'fill',\n    Justify: 'justify',\n    CenterAcrossSelection: 'centerContinuous',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify'\n};\n\nconst verticalAlignmentMap: { [key: string]: string | undefined } = {\n    Automatic: undefined,\n    Top: 'top',\n    Bottom: 'bottom',\n    Center: 'center',\n    Justify: 'justify',\n    Distributed: 'distributed',\n    JustifyDistributed: 'justify'\n};\n\nexport const convertLegacyPattern = (name: string | undefined): string => {\n    if (!name) { return 'none'; }\n\n    return colorMap[name] || name;\n};\n\nexport const convertLegacyColor = (color?: string): string | undefined => {\n    if (color == undefined) { return color; }\n\n    if (color.charAt(0) === '#') {\n        color = color.substring(1);\n    }\n\n    return color.length === 6 ? 'FF' + color : color;\n};\n\nexport const convertLegacyBorder = (type?: string, weight?: number): string => {\n    if (!type) { return 'thin'; }\n\n    // Legacy Types are: None, Continuous, Dash, Dot, DashDot, DashDotDot, SlantDashDot, and Double\n    // Weight represents: 0\u2014Hairline, 1\u2014Thin , 2\u2014Medium, 3\u2014Thick\n\n    // New types: none, thin, medium, dashed, dotted, thick, double, hair, mediumDashed, dashDot, mediumDashDot,\n    // dashDotDot, mediumDashDotDot, slantDashDot\n    const namedWeight = getWeightName(weight);\n    const mappedName = mappedBorderNames[type];\n\n    if (type === 'Continuous') { return namedWeight; }\n    if (namedWeight === 'medium' && mediumBorders.indexOf(mappedName) !== -1) { return `medium${mappedName}`; }\n\n    return mappedName.charAt(0).toLowerCase() + mappedName.substring(1);\n};\n\nexport const convertLegacyHorizontalAlignment = (alignment: string): string => {\n    return horizontalAlignmentMap[alignment] || 'general';\n};\n\nexport const convertLegacyVerticalAlignment = (alignment: string): string | undefined => {\n    return verticalAlignmentMap[alignment] || undefined;\n};", "import { ExcelOOXMLTemplate, XmlElement } from '@ag-grid-community/core';\nimport { BorderSet } from '../../../assets/excelInterfaces';\nimport { convertLegacyColor } from '../../../assets/excelLegacyConvert';\n\nconst getBorderColor = (color?: string): XmlElement => {\n    return {\n        name: 'color',\n        properties: {\n            rawMap: {\n                rgb: convertLegacyColor(color || '#000000')\n            }\n        }\n    };\n};\n\nconst borderFactory: ExcelOOXMLTemplate = {\n    getTemplate(border: BorderSet) {\n        const {left, right, top, bottom, diagonal} = border;\n        const leftChildren = left ? [getBorderColor(left.color)] : undefined;\n        const rightChildren = right ? [getBorderColor(right.color)] : undefined;\n        const topChildren = top ? [getBorderColor(top.color)] : undefined;\n        const bottomChildren = bottom ? [getBorderColor(bottom.color)] : undefined;\n        const diagonalChildren = diagonal ? [getBorderColor(diagonal.color)] : undefined;\n        return {\n            name: 'border',\n            children: [{\n                name: 'left',\n                properties: { rawMap: { style: left && left.style } },\n                children: leftChildren\n            }, {\n                name: 'right',\n                properties: { rawMap: { style: right && right.style } },\n                children: rightChildren\n            }, {\n                name: 'top',\n                properties: { rawMap: { style: top && top.style } },\n                children: topChildren\n            }, {\n                name: 'bottom',\n                properties: { rawMap: { style: bottom && bottom.style } },\n                children: bottomChildren\n            }, {\n                name: 'diagonal',\n                properties: { rawMap: { style: diagonal && diagonal.style } },\n                children: diagonalChildren\n            }]\n        };\n    }\n};\n\nexport default borderFactory;", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport { BorderSet } from '../../../assets/excelInterfaces';\nimport borderFactory from './border';\n\nconst bordersFactory: ExcelOOXMLTemplate = {\n    getTemplate(borders: BorderSet[]) {\n        return {\n            name: \"borders\",\n            properties: {\n                rawMap: {\n                    count: borders.length\n                }\n            },\n            children: borders.map(border => borderFactory.getTemplate(border))\n        };\n    }\n};\n\nexport default bordersFactory;\n", "import { ExcelOOXMLTemplate, ExcelAlignment } from '@ag-grid-community/core';\nimport { convertLegacyHorizontalAlignment, convertLegacyVerticalAlignment } from '../../../assets/excelLegacyConvert';\n\nconst getReadingOrderId = (readingOrder: string): number => {\n    const order = ['Context', 'LeftToRight', 'RightToLeft'];\n    const pos = order.indexOf(readingOrder);\n    return Math.max(pos, 0);\n};\n\nconst alignmentFactory: ExcelOOXMLTemplate = {\n    getTemplate(alignment: ExcelAlignment) {\n        const {horizontal, indent, readingOrder, rotate, shrinkToFit, vertical, wrapText} = alignment;\n\n        return {\n            name: 'alignment',\n            properties: {\n                rawMap: {\n                    horizontal: horizontal && convertLegacyHorizontalAlignment(horizontal),\n                    indent,\n                    readingOrder: readingOrder && getReadingOrderId(readingOrder),\n                    textRotation: rotate,\n                    shrinkToFit,\n                    vertical: vertical && convertLegacyVerticalAlignment(vertical),\n                    wrapText\n                }\n            }\n        };\n    }\n};\n\nexport default alignmentFactory;\n", "import { ExcelOOXMLTemplate, ExcelProtection } from '@ag-grid-community/core';\n\nconst protectionFactory: ExcelOOXMLTemplate = {\n    getTemplate(protection: ExcelProtection) {\n        const locked = protection.protected === false ? 0 : 1;\n        const hidden = protection.hideFormula === true ? 1 : 0;\n        return {\n            name: 'protection',\n            properties: {\n                rawMap: {\n                    hidden,\n                    locked\n                }\n            }\n        };\n    }\n};\n\nexport default protectionFactory;\n", "import { ExcelOOXMLTemplate, XmlElement, ExcelAlignment, ExcelProtection } from '@ag-grid-community/core';\nimport alignmentFactory from './alignment';\nimport protectionFactory from './protection';\n\nconst xfFactory: ExcelOOXMLTemplate = {\n    getTemplate(xf: Xf) {\n        const { alignment, borderId, fillId, fontId, numFmtId, protection, quotePrefix, xfId } = xf;\n        const children: XmlElement[] = [];\n        if (alignment) {\n            children.push(alignmentFactory.getTemplate(alignment));\n        }\n\n        if (protection) {\n            children.push(protectionFactory.getTemplate(protection));\n        }\n\n        return {\n            name: \"xf\",\n            properties: {\n                rawMap: {\n                    applyAlignment: alignment ? 1 : undefined,\n                    applyProtection: protection ? 1 : undefined,\n                    applyBorder: borderId ? 1 : undefined,\n                    applyFill: fillId ? 1 : undefined,\n                    borderId,\n                    fillId,\n                    applyFont: fontId ? 1 : undefined,\n                    fontId,\n                    applyNumberFormat: numFmtId ? 1 : undefined,\n                    numFmtId,\n                    quotePrefix: quotePrefix ? 1 : undefined,\n                    xfId\n                }\n            },\n            children: children.length ? children : undefined\n        };\n    }\n};\n\nexport default xfFactory;\n\nexport interface Xf {\n    alignment?: ExcelAlignment;\n    borderId: number;\n    fillId: number;\n    fontId: number;\n    numFmtId: number;\n    quotePrefix?: number;\n    xfId?: number;\n    protection?: ExcelProtection;\n}\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport xfFactory, { Xf } from './xf';\n\nconst cellStylesXfsFactory: ExcelOOXMLTemplate = {\n    getTemplate(xfs: Xf[]) {\n        return {\n            name: \"cellStyleXfs\",\n            properties: {\n                rawMap: {\n                    count: xfs.length\n                }\n            },\n            children: xfs.map(xf => xfFactory.getTemplate(xf))\n        };\n    }\n};\n\nexport default cellStylesXfsFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport xfFactory, { Xf } from './xf';\n\nconst cellXfsFactory: ExcelOOXMLTemplate = {\n    getTemplate(xfs: Xf[]) {\n        return {\n            name: \"cellXfs\",\n            properties: {\n                rawMap: {\n                    count: xfs.length\n                }\n            },\n            children: xfs.map(xf => xfFactory.getTemplate(xf))\n        };\n    }\n};\n\nexport default cellXfsFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst borderFactory: ExcelOOXMLTemplate = {\n    getTemplate(cellStyle: CellStyle) {\n        const {builtinId, name, xfId} = cellStyle;\n\n        return {\n            name: \"cellStyle\",\n            properties: {\n                rawMap: {\n                    builtinId,\n                    name,\n                    xfId\n                }\n            }\n        };\n    }\n};\n\nexport default borderFactory;\n\nexport interface CellStyle {\n    builtinId: number;\n    name: string;\n    xfId: number;\n}\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport cellStyleFactory, { CellStyle } from './cellStyle';\n\nconst cellStylesFactory: ExcelOOXMLTemplate = {\n    getTemplate(cellStyles: CellStyle[]) {\n        return {\n            name: \"cellStyles\",\n            properties: {\n                rawMap: {\n                    count: cellStyles.length\n                }\n            },\n            children: cellStyles.map(cellStyle => cellStyleFactory.getTemplate(cellStyle))\n        };\n    }\n};\n\nexport default cellStylesFactory;\n", "import { ExcelOOXMLTemplate, ExcelStyle, ExcelInterior, ExcelBorders, ExcelFont, _ } from '@ag-grid-community/core';\nimport numberFormatsFactory from './numberFormats';\nimport fontsFactory from './fonts';\nimport fillsFactory from './fills';\nimport bordersFactory from './borders';\nimport cellStylesXfsFactory from './cellStyleXfs';\nimport cellXfsFactory from './cellXfs';\nimport cellStylesFactory from './cellStyles';\n\nimport { Xf } from './xf';\nimport { CellStyle } from './cellStyle';\nimport { Border, BorderProperty, BorderSet, ExcelThemeFont, Fill, NumberFormat, StylesMap } from '../../../assets/excelInterfaces';\nimport { convertLegacyBorder, convertLegacyColor, convertLegacyPattern } from '../../../assets/excelLegacyConvert';\nimport { numberFormatMap } from '../../../assets/excelConstants';\nimport { getFontFamilyId } from '../../../assets/excelUtils';\n\nlet stylesMap: StylesMap;\nlet registeredNumberFmts: NumberFormat[];\nlet registeredFonts: ExcelThemeFont[];\nlet registeredFills: Fill[];\nlet registeredBorders: BorderSet[];\nlet registeredCellStyleXfs: Xf[];\nlet registeredCellXfs: Xf[];\nlet registeredCellStyles: CellStyle[];\nlet currentSheet: number;\n\nconst getStyleName = (name: string, currentSheet: number): string => {\n    if (name.indexOf('mixedStyle') !== -1 && currentSheet > 1) {\n        name += `_${currentSheet}`;\n    }\n    return name;\n};\n\nconst resetStylesheetValues = (): void => {\n    stylesMap = { base: 0 };\n    registeredNumberFmts = [];\n    registeredFonts = [{ fontName: 'Calibri', colorTheme: '1', family: '2', scheme: 'minor' }];\n    registeredFills = [{ patternType: 'none', }, { patternType: 'gray125' }];\n    registeredBorders = [{ left: undefined, right: undefined, top: undefined, bottom: undefined, diagonal: undefined }];\n    registeredCellStyleXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0 }];\n    registeredCellXfs = [{ borderId: 0, fillId: 0, fontId: 0, numFmtId: 0, xfId: 0 }];\n    registeredCellStyles = [{ builtinId: 0, name: 'Normal', xfId: 0 }];\n};\n\nconst registerFill = (fill: ExcelInterior): number => {\n    const convertedPattern = convertLegacyPattern(fill.pattern);\n    const convertedFillColor = convertLegacyColor(fill.color);\n    const convertedPatternColor = convertLegacyColor(fill.patternColor);\n\n    let pos = registeredFills.findIndex(currentFill => {\n        const { patternType, fgRgb, bgRgb } = currentFill;\n\n        if (\n            patternType != convertedPattern ||\n            fgRgb != convertedFillColor ||\n            bgRgb != convertedPatternColor\n        ) {\n            return false;\n        }\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredFills.length;\n        registeredFills.push({ patternType: convertedPattern, fgRgb: convertedFillColor, bgRgb: convertedPatternColor });\n    }\n\n    return pos;\n};\n\nconst registerNumberFmt = (format: string): number => {\n    if (numberFormatMap[format]) { return numberFormatMap[format]; }\n\n    let pos = registeredNumberFmts.findIndex(currentFormat => currentFormat.formatCode === format);\n\n    if (pos === -1) {\n        pos = registeredNumberFmts.length + 164;\n        registeredNumberFmts.push({ formatCode: format, numFmtId: pos });\n    } else {\n        pos = registeredNumberFmts[pos].numFmtId;\n    }\n\n    return pos;\n};\n\nconst registerBorders = (borders: ExcelBorders): number => {\n    const { borderBottom, borderTop, borderLeft, borderRight } = borders;\n    let bottomStyle: BorderProperty;\n    let topStyle: BorderProperty;\n    let leftStyle: BorderProperty;\n    let rightStyle: BorderProperty;\n    let bottomColor: BorderProperty;\n    let topColor: BorderProperty;\n    let leftColor: BorderProperty;\n    let rightColor: BorderProperty;\n\n    if (borderLeft) {\n        leftStyle = convertLegacyBorder(borderLeft.lineStyle, borderLeft.weight);\n        leftColor = convertLegacyColor(borderLeft.color);\n    }\n\n    if (borderRight) {\n        rightStyle = convertLegacyBorder(borderRight.lineStyle, borderRight.weight);\n        rightColor = convertLegacyColor(borderRight.color);\n    }\n\n    if (borderBottom) {\n        bottomStyle = convertLegacyBorder(borderBottom.lineStyle, borderBottom.weight);\n        bottomColor = convertLegacyColor(borderBottom.color);\n    }\n    if (borderTop) {\n        topStyle = convertLegacyBorder(borderTop.lineStyle, borderTop.weight);\n        topColor = convertLegacyColor(borderTop.color);\n    }\n\n    let pos = registeredBorders.findIndex(currentBorder => {\n        const { left, right, top, bottom } = currentBorder;\n        if (!left && (leftStyle || leftColor)) { return false; }\n        if (!right && (rightStyle || rightColor)) { return false; }\n        if (!top && (topStyle || topColor)) { return false; }\n        if (!bottom && (bottomStyle || bottomColor)) { return false; }\n\n        const { style: clS, color: clC } = left || {} as Border;\n        const { style: crS, color: crC } = right || {} as Border;\n        const { style: ctS, color: ctC } = top || {} as Border;\n        const { style: cbS, color: cbC } = bottom || {} as Border;\n\n        if (clS != leftStyle || clC != leftColor) { return false; }\n        if (crS != rightStyle || crC != rightColor) { return false; }\n        if (ctS != topStyle || ctC != topColor) { return false; }\n        if (cbS != bottomStyle || cbC != bottomColor) { return false; }\n\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredBorders.length;\n        registeredBorders.push({\n            left: {\n                style: leftStyle, color: leftColor\n            },\n            right: {\n                style: rightStyle, color: rightColor\n            },\n            top: {\n                style: topStyle, color: topColor\n            },\n            bottom: {\n                style: bottomStyle, color: bottomColor\n            },\n            diagonal: {\n                style: undefined,\n                color: undefined\n            }\n        });\n    }\n\n    return pos;\n};\n\nconst registerFont = (font: ExcelFont): number => {\n    const { fontName: name = 'Calibri', color, size, bold, italic, outline, shadow, strikeThrough, underline, family, verticalAlign } = font;\n    const convertedColor = convertLegacyColor(color);\n    const familyId = getFontFamilyId(family);\n    const convertedUnderline = underline ? underline.toLocaleLowerCase() : undefined;\n    const convertedVerticalAlign = verticalAlign ? verticalAlign.toLocaleLowerCase() : undefined;\n\n    let pos = registeredFonts.findIndex(currentFont => {\n        if (\n            currentFont.fontName != name ||\n            currentFont.color != convertedColor ||\n            currentFont.size != size ||\n            currentFont.bold != bold ||\n            currentFont.italic != italic ||\n            currentFont.outline != outline ||\n            currentFont.shadow != shadow ||\n            currentFont.strikeThrough != strikeThrough ||\n            currentFont.underline != convertedUnderline ||\n            currentFont.verticalAlign != convertedVerticalAlign ||\n            // @ts-ignore\n            currentFont.family != familyId\n        ) {\n            return false;\n        }\n\n        return true;\n    });\n\n    if (pos === -1) {\n        pos = registeredFonts.length;\n        registeredFonts.push({\n            fontName: name,\n            color: convertedColor,\n            size,\n            bold,\n            italic,\n            outline,\n            shadow,\n            strikeThrough,\n            underline: convertedUnderline as any,\n            verticalAlign: convertedVerticalAlign as any,\n            family: familyId != null ? familyId.toString() : undefined\n        });\n    }\n\n    return pos;\n};\n\nconst registerStyle = (config: ExcelStyle & { quotePrefix?: 1 }): void => {\n    const { alignment, borders, font, interior, numberFormat, protection, quotePrefix } = config;\n    let { id } = config;\n    let currentFill = 0;\n    let currentBorder = 0;\n    let currentFont = 0;\n    let currentNumberFmt = 0;\n\n    if (!id) { return; }\n\n    id = getStyleName(id, currentSheet);\n\n    if (stylesMap[id] != undefined) { return; }\n\n    if (interior) {\n        currentFill = registerFill(interior);\n    }\n\n    if (borders) {\n        currentBorder = registerBorders(borders);\n    }\n\n    if (font) {\n        currentFont = registerFont(font);\n    }\n\n    if (numberFormat) {\n        currentNumberFmt = registerNumberFmt(numberFormat.format);\n    }\n\n    stylesMap[id] = registeredCellXfs.length;\n\n    registeredCellXfs.push({\n        alignment,\n        borderId: currentBorder || 0,\n        fillId: currentFill || 0,\n        fontId: currentFont || 0,\n        numFmtId: currentNumberFmt || 0,\n        protection,\n        quotePrefix: quotePrefix,\n        xfId: 0\n    });\n};\n\nconst stylesheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(defaultFontSize: number) {\n        const numberFormats = numberFormatsFactory.getTemplate(registeredNumberFmts);\n        const fonts = fontsFactory.getTemplate(registeredFonts.map(font => ({...font, size: font.size != null ? font.size : defaultFontSize })));\n        const fills = fillsFactory.getTemplate(registeredFills);\n        const borders = bordersFactory.getTemplate(registeredBorders);\n        const cellStylesXfs = cellStylesXfsFactory.getTemplate(registeredCellStyleXfs);\n        const cellXfs = cellXfsFactory.getTemplate(registeredCellXfs);\n        const cellStyles = cellStylesFactory.getTemplate(registeredCellStyles);\n\n        resetStylesheetValues();\n\n        return {\n            name: 'styleSheet',\n            properties: {\n                rawMap: {\n                    'mc:Ignorable': 'x14ac x16r2 xr',\n                    'xmlns': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n                    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n                    'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac',\n                    'xmlns:x16r2': 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main',\n                    'xmlns:xr': 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'\n                }\n            },\n            children: [\n                numberFormats,\n                fonts,\n                fills,\n                borders,\n                cellStylesXfs,\n                cellXfs,\n                cellStyles,\n                {\n                    name: 'tableStyles',\n                    properties: {\n                        rawMap: {\n                            count: 0,\n                            defaultPivotStyle: 'PivotStyleLight16',\n                            defaultTableStyle: 'TableStyleMedium2'\n                        }\n                    }\n                }\n            ]\n        };\n    }\n};\n\nexport const getStyleId = (name: string, currentSheet: number): number => {\n    return stylesMap[getStyleName(name, currentSheet)] || 0;\n};\n\nexport const registerStyles = (styles: ExcelStyle[], _currentSheet: number): void => {\n    currentSheet = _currentSheet;\n\n    if (currentSheet === 1) {\n        resetStylesheetValues();\n    }\n\n    styles.forEach(registerStyle);\n};\n\nexport default stylesheetFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst sheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(name: string, idx: number) {\n        const sheetId = (idx + 1).toString();\n        return {\n            name: \"sheet\",\n            properties: {\n                rawMap: {\n                    \"name\": name,\n                    \"sheetId\": sheetId,\n                    \"r:id\": `rId${sheetId}`\n                }\n            }\n        };\n    }\n};\n\nexport default sheetFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport sheetFactory from './sheet';\n\nconst sheetsFactory: ExcelOOXMLTemplate = {\n    getTemplate(names: string[]) {\n        return {\n            name: \"sheets\",\n            children: names.map((sheet, idx) => sheetFactory.getTemplate(sheet, idx))\n        };\n    }\n};\n\nexport default sheetsFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\nimport sheetsFactory from './sheets';\n\nconst workbookFactory: ExcelOOXMLTemplate = {\n    getTemplate(names: string[]) {\n\n        return {\n            name: \"workbook\",\n            properties: {\n                prefixedAttributes:[{\n                    prefix: \"xmlns:\",\n                    map: {\n                        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                    },\n                }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children: [sheetsFactory.getTemplate(names)]\n        };\n    }\n};\n\nexport default workbookFactory;\n", "import {\n    ExcelOOXMLTemplate,\n    ExcelWorksheet,\n    ExcelCell,\n    ExcelRow,\n    ExcelColumn,\n    XmlElement,\n    ExcelSheetMargin,\n    ExcelSheetPageSetup,\n    ExcelHeaderFooterContent,\n    ExcelHeaderFooterConfig,\n    ExcelFont,\n    _\n} from '@ag-grid-community/core';\nimport { ExcelDataTable } from '../../assets/excelInterfaces';\n\nimport columnFactory from './column';\nimport rowFactory from './row';\nimport mergeCellFactory from './mergeCell';\nimport { ExcelXlsxFactory } from '../../excelXlsxFactory';\nimport { getExcelColumnName } from '../../assets/excelUtils';\nimport { ExcelGridSerializingParams } from '../../excelSerializingSession';\n\nconst getMergedCellsAndAddColumnGroups = (rows: ExcelRow[], cols: ExcelColumn[], suppressColumnOutline: boolean): string[] => {\n    const mergedCells: string[] = [];\n    const cellsWithCollapsibleGroups: number[][] = [];\n\n    rows.forEach((currentRow, rowIdx) => {\n        const cells = currentRow.cells;\n        let merges = 0;\n        let lastCol: ExcelColumn;\n\n        cells.forEach((currentCell: ExcelCell, cellIdx: number) => {\n            const min = cellIdx + merges + 1;\n            const start = getExcelColumnName(min);\n            const outputRow = rowIdx + 1;\n\n            if (currentCell.mergeAcross) {\n                merges += currentCell.mergeAcross;\n                const end = getExcelColumnName(cellIdx + merges + 1);\n\n                mergedCells.push(`${start}${outputRow}:${end}${outputRow}`);\n            }\n\n            if (!cols[min - 1]) {\n                cols[min - 1] = {} as ExcelColumn;\n            }\n            \n            const { collapsibleRanges } = currentCell;\n\n            if (collapsibleRanges) {\n                collapsibleRanges.forEach(range => {\n                    cellsWithCollapsibleGroups.push([min + range[0], min + range[1]]);\n                });\n            }\n\n            lastCol = cols[min - 1];\n            lastCol.min = min;\n            lastCol.max = min;\n            currentCell.ref = `${start}${outputRow}`;\n        });\n    });\n\n    cellsWithCollapsibleGroups.sort((a, b) => {\n        if (a[0] !== b[0]) { return a[0] - b[0]}\n        return b[1] - a[1];\n    });\n\n    const rangeMap = new Map<string, boolean>();\n    const outlineLevel = new Map<number, number>();\n\n    cellsWithCollapsibleGroups.filter(currentRange => {\n        const rangeString = currentRange.toString();\n        const inMap = rangeMap.get(rangeString);\n\n        if (inMap) { return false; }\n        rangeMap.set(rangeString, true);\n\n        return  true;\n    }).forEach(range => {\n        const refCol = cols.find(col => col.min == range[0] && col.max == range[1]);\n        const currentOutlineLevel = outlineLevel.get(range[0]);\n        cols.push({\n            min: range[0],\n            max: range[1],\n            outlineLevel: suppressColumnOutline ? undefined : (currentOutlineLevel || 1),\n            width: (refCol || { width: 100 }).width\n        });\n\n        outlineLevel.set(range[0], (currentOutlineLevel || 0) + 1);\n    });\n\n    return mergedCells;\n};\n\nconst getPageOrientation = (orientation?: 'Portrait' | 'Landscape'): 'portrait' | 'landscape' => {\n    if (!orientation || (orientation !== 'Portrait' && orientation !== 'Landscape')) {\n        return 'portrait';\n    }\n\n    return orientation.toLocaleLowerCase() as 'portrait' | 'landscape';\n};\n\nconst getPageSize = (pageSize?: string): number => {\n    if (pageSize == null) { return 1; }\n\n    const positions = ['Letter', 'Letter Small', 'Tabloid', 'Ledger', 'Legal', 'Statement', 'Executive', 'A3', 'A4', 'A4 Small', 'A5', 'A6', 'B4', 'B5', 'Folio', 'Envelope', 'Envelope DL', 'Envelope C5', 'Envelope B5', 'Envelope C3', 'Envelope C4', 'Envelope C6', 'Envelope Monarch', 'Japanese Postcard', 'Japanese Double Postcard'];\n    const pos = positions.indexOf(pageSize);\n\n    return pos === -1 ? 1 : (pos + 1);\n};\n\nconst addColumns = (columns: ExcelColumn[]) => {\n    return (children: XmlElement[]) => {\n        if (columns.length) {\n            children.push({\n                name: 'cols',\n                children: columns.map(column => columnFactory.getTemplate(column))\n            });\n        }\n        return children;\n    };\n};\n\nconst addSheetData = (rows: ExcelRow[], sheetNumber: number) => {\n    return (children: XmlElement[]) => {\n        if (rows.length) {\n            children.push({\n                name: 'sheetData',\n                children: rows.map((row, idx) => rowFactory.getTemplate(row, idx, sheetNumber))\n            });\n        }\n        return children;\n    };\n};\n\nconst addMergeCells = (mergeCells: string[]) => {\n    return (children: XmlElement[]) => {\n        if (mergeCells.length) {\n            children.push({\n                name: 'mergeCells',\n                properties: {\n                    rawMap: {\n                        count: mergeCells.length\n                    }\n                },\n                children: mergeCells.map(mergedCell => mergeCellFactory.getTemplate(mergedCell))\n            });\n        }\n        return children;\n    };\n};\n\nconst addPageMargins = (margins: ExcelSheetMargin) => {\n    return (children: XmlElement[]) => {\n        const { top = 0.75, right = 0.7, bottom = 0.75, left = 0.7, header = 0.3, footer = 0.3 } = margins;\n\n        children.push({\n            name: 'pageMargins',\n            properties: {\n                rawMap: { bottom, footer, header, left, right, top }\n            }\n        });\n\n        return children;\n    };\n};\n\nconst addPageSetup = (pageSetup?: ExcelSheetPageSetup) => {\n    return (children: XmlElement[]) => {\n        if (pageSetup) {\n            children.push({\n                name: 'pageSetup',\n                properties: {\n                    rawMap: {\n                        horizontalDpi: 0,\n                        verticalDpi: 0,\n                        orientation: getPageOrientation(pageSetup.orientation),\n                        paperSize: getPageSize(pageSetup.pageSize)\n                    }\n                }\n            });\n        }\n        return children;\n    };\n};\n\nconst replaceHeaderFooterTokens = (value: string): string => {\n    const map = {\n        '&[Page]': '&P',\n        '&[Pages]': '&N',\n        '&[Date]': '&D',\n        '&[Time]': '&T',\n        '&[Tab]': '&A',\n        '&[Path]': '&Z',\n        '&[File]': '&F'\n    };\n\n    _.iterateObject<string>(map, (key, val) => {\n        value = value.replace(key, val);\n    });\n\n    return value;\n};\n\nconst getHeaderPosition = (position?: string): string => {\n    if (position === 'Center') { return 'C'; }\n    if (position === 'Right') { return 'R'; }\n\n    return 'L';\n};\n\nconst applyHeaderFontStyle = (headerString: string, font?: ExcelFont): string => {\n    if (!font) { return headerString; }\n\n    headerString += '&amp;&quot;';\n    headerString += font.fontName || 'Calibri';\n\n    if (font.bold !== font.italic) {\n        headerString += font.bold ? ',Bold' : ',Italic';\n    } else if (font.bold) {\n        headerString += ',Bold Italic';\n    } else {\n        headerString += ',Regular';\n    }\n    headerString += '&quot;';\n\n    if (font.size) { headerString += `&amp;${font.size}`; }\n    if (font.strikeThrough) { headerString += '&amp;S'; }\n    if (font.underline) {\n        headerString += `&amp;${font.underline === 'Double' ? 'E' : 'U'}`;\n     }\n    if (font.color) { headerString += `&amp;K${font.color.replace('#', '').toUpperCase()}`; }\n\n    return headerString;\n};\n\nconst processHeaderFooterContent = (content: ExcelHeaderFooterContent[]): string =>\n    content.reduce((prev, curr) => {\n        const pos = getHeaderPosition(curr.position);\n        const output = applyHeaderFontStyle(`${prev}&amp;${pos}`, curr.font);\n\n        return `${output}${_.escapeString(replaceHeaderFooterTokens(curr.value))}`;\n    }, '');\n\nconst buildHeaderFooter = (headerFooterConfig: ExcelHeaderFooterConfig): XmlElement[] => {\n    const rules: ['all', 'first', 'even'] = ['all', 'first', 'even'];\n    const headersAndFooters = [] as XmlElement[];\n\n    rules.forEach(rule => {\n        const headerFooter = headerFooterConfig[rule];\n        const namePrefix = rule === 'all' ? 'odd' : rule;\n\n        if (!headerFooter || (!headerFooter.header && !headerFooter.footer)) { return; }\n\n        _.iterateObject<ExcelHeaderFooterContent[]>((headerFooter as any), (key: string, value: ExcelHeaderFooterContent[]) => {\n            const nameSuffix = `${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n\n            if (value) {\n                headersAndFooters.push({\n                    name: `${namePrefix}${nameSuffix}`,\n                    properties: {\n                        rawMap: {\n                            'xml:space': 'preserve'\n                        }\n                    },\n                    textNode: processHeaderFooterContent(value)\n                });\n            }\n        });\n    });\n\n    return headersAndFooters;\n};\n\nconst addHeaderFooter = (headerFooterConfig?: ExcelHeaderFooterConfig) => {\n    return (children: XmlElement[]) => {\n        if (!headerFooterConfig) { return children; }\n\n        const differentFirst = headerFooterConfig.first != null ? 1 : 0;\n        const differentOddEven = headerFooterConfig.even != null ? 1 : 0;\n\n        children.push({\n            name: 'headerFooter',\n            properties: {\n                rawMap: {\n                    differentFirst,\n                    differentOddEven\n                }\n            },\n            children: buildHeaderFooter(headerFooterConfig)\n        });\n        return children;\n    };\n};\n\nconst addExcelTableParts = (excelTable?: ExcelDataTable, index?: number) => {\n    if (!excelTable) {\n        return (children: XmlElement[]) => children;\n    }\n\n    const rId = ExcelXlsxFactory.getTableRelIdFromIndex(index || 0);\n    return (children: XmlElement[]) => {\n        children.push({\n            name: 'tableParts',\n            properties: {\n                rawMap: {\n                    count: '1',\n                }\n            },\n            children: [{\n                name: 'tablePart',\n                properties: {\n                    rawMap: {\n                        'r:id': rId,\n                    }\n                }\n            }],\n        });\n\n        return children;\n    };\n};\n\nconst addDrawingRel = (currentSheet: number) => {\n    return (children: XmlElement[]) => {\n        if (ExcelXlsxFactory.worksheetImages.get(currentSheet)) {\n            children.push({\n                name: 'drawing',\n                properties: {\n                    rawMap: {\n                        'r:id': 'rId1'\n                    }\n                }\n            });\n        }\n\n        return children;\n    };\n};\n\nconst addSheetPr = () => {\n    return (children: XmlElement[]) => {\n        children.push({\n            name: 'sheetPr',\n            children: [{\n                name: 'outlinePr',\n                properties: {\n                    rawMap: {\n                        summaryBelow: 0\n                    }\n                }\n            }]\n        });\n        return children;\n    }\n}\n\nconst addSheetFormatPr = (rows: ExcelRow[]) => {\n    return (children: XmlElement[]) => {\n        const maxOutline = rows.reduce((prev: number, row: ExcelRow) => {\n            if (row.outlineLevel && row.outlineLevel > prev) {\n                return row.outlineLevel;\n            }\n            return prev;\n        }, 0);\n\n        children.push({\n            name: 'sheetFormatPr',\n            properties: {\n                rawMap: {\n                    baseColWidth: 10,\n                    defaultRowHeight: 16,\n                    outlineLevelRow: maxOutline ? maxOutline : undefined\n                }\n            }\n        });\n        return children;\n    }\n}\n\nconst worksheetFactory: ExcelOOXMLTemplate = {\n    getTemplate(params: {\n        worksheet: ExcelWorksheet,\n        currentSheet: number,\n        config: ExcelGridSerializingParams\n    }) {\n        const { worksheet, currentSheet, config } = params;\n        const { margins = {}, pageSetup, headerFooterConfig, suppressColumnOutline } = config;\n\n        const { table } = worksheet;\n        const { rows, columns } = table;\n        const mergedCells = (columns && columns.length) ? getMergedCellsAndAddColumnGroups(rows, columns, !!suppressColumnOutline) : [];\n\n        const worksheetExcelTables = ExcelXlsxFactory.worksheetDataTables.get(currentSheet);\n\n        const createWorksheetChildren = _.compose(\n            addSheetPr(),\n            addSheetFormatPr(rows),\n            addColumns(columns),\n            addSheetData(rows, currentSheet + 1),\n            addMergeCells(mergedCells),\n            addPageMargins(margins),\n            addPageSetup(pageSetup),\n            addHeaderFooter(headerFooterConfig),\n            addDrawingRel(currentSheet),\n            addExcelTableParts(worksheetExcelTables, currentSheet),\n        );\n\n        const children = createWorksheetChildren([]);\n\n        return {\n            name: \"worksheet\",\n            properties: {\n                prefixedAttributes:[{\n                    prefix: \"xmlns:\",\n                    map: {\n                        r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n                    }\n                }],\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default worksheetFactory;\n", "import { ExcelOOXMLTemplate, ExcelColumn } from '@ag-grid-community/core';\n\n// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-column-widths\nconst getExcelCellWidth = (width: number): number => Math.ceil((width - 12) / 7 + 1);\n\nconst columnFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelColumn) {\n        const { min, max, outlineLevel, s, width, hidden, bestFit } = config;\n        let excelWidth = 1;\n        let customWidth = '0';\n\n        if (width! > 1) {\n            excelWidth = getExcelCellWidth(width!);\n            customWidth = '1';\n        }\n\n        return {\n            name: 'col',\n            properties: {\n                rawMap: {\n                    min: min,\n                    max: max,\n                    outlineLevel: outlineLevel != null ? outlineLevel : undefined,\n                    width: excelWidth,\n                    style: s,\n                    hidden: hidden ? '1' : '0',\n                    bestFit: bestFit ? '1' : '0',\n                    customWidth: customWidth\n                }\n            }\n        };\n    }\n};\n\nexport default columnFactory;\n", "import { ExcelOOXMLTemplate, ExcelCell, _ } from '@ag-grid-community/core';\nimport { getStyleId } from './styles/stylesheet';\n\nconst convertLegacyType = (type: string): string => {\n    const t = type.charAt(0).toLowerCase();\n\n    return t === 's' ? 'inlineStr' : t;\n};\n\nconst cellFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelCell, idx: number, currentSheet: number) {\n        const { ref, data, styleId } = config;\n        const { type, value } = data || { type: 'empty', value: null };\n        let convertedType: string = type;\n\n        if (type === 'f') {\n            convertedType = 'str';\n        } else if (type.charAt(0) === type.charAt(0).toUpperCase()) {\n            convertedType = convertLegacyType(type);\n        }\n\n        const obj = {\n            name: 'c',\n            properties: {\n                rawMap: {\n                    r: ref,\n                    t: convertedType === 'empty' ? undefined : convertedType,\n                    s: styleId ? getStyleId(styleId as string, currentSheet) : undefined\n                }\n            }\n        };\n\n        if (convertedType === 'empty') { return obj; }\n\n        let children;\n\n        if (convertedType === 'str' && type === 'f') {\n            children = [{\n                name: 'f',\n                textNode: _.escapeString(value)\n            }];\n        } else if (convertedType === 'inlineStr') {\n            children = [{\n                name: 'is',\n                children: [{\n                    name: 't',\n                    textNode: _.escapeString(value)\n                }]\n            }];\n        } else {\n            children = [{\n                name: 'v',\n                textNode: value,\n            }];\n        }\n\n        return Object.assign({}, obj, { children });\n    }\n};\n\nexport default cellFactory;\n", "import { ExcelOOXMLTemplate, ExcelCell, ExcelRow } from '@ag-grid-community/core';\nimport { getExcelColumnName } from '../../assets/excelUtils';\nimport cellFactory from './cell';\n\nconst addEmptyCells = (cells: ExcelCell[], rowIdx: number): void => {\n    const mergeMap: { pos: number, excelPos: number }[] = [];\n    let posCounter = 0;\n    for (let i = 0; i < cells.length; i++) {\n        const cell = cells[i];\n        if (cell.mergeAcross) {\n            mergeMap.push({\n                pos: i,\n                excelPos: posCounter\n            });\n            posCounter += cell.mergeAcross;\n        }\n        posCounter++;\n    }\n\n    if (mergeMap.length) {\n        for (let i = mergeMap.length - 1; i >= 0; i--) {\n            const mergedCells: ExcelCell[] = [];\n            const cell = cells[mergeMap[i].pos];\n            for (let j = 1; j <= cell.mergeAcross!; j++) {\n                mergedCells.push({\n                    ref: `${getExcelColumnName(mergeMap[i].excelPos + 1 + j)}${rowIdx + 1}`,\n                    styleId: cell.styleId,\n                    data: { type: 'empty', value: null }\n                });\n            }\n            if (mergedCells.length) {\n                cells.splice(mergeMap[i].pos + 1, 0, ...mergedCells);\n            }\n\n        }\n    }\n};\n\nconst shouldDisplayCell = (cell: ExcelCell) => cell.data?.value !== '' || cell.styleId !== undefined;\n\nconst rowFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelRow, idx: number, currentSheet: number) {\n        const { collapsed, hidden, height, outlineLevel, cells = [] } = config;\n        addEmptyCells(cells, idx);\n        const children = cells.filter(shouldDisplayCell).map((cell, idx) => cellFactory.getTemplate(cell, idx, currentSheet));\n\n        return {\n            name: \"row\",\n            properties: {\n                rawMap: {\n                    r: idx + 1,\n                    collapsed: collapsed ? '1' : '0',\n                    hidden: hidden ? '1' : '0',\n                    ht: height,\n                    customHeight: height != null ? '1' : '0',\n                    spans: '1:1',\n                    outlineLevel: outlineLevel || undefined\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default rowFactory;\n", "import { ExcelOOXMLTemplate } from '@ag-grid-community/core';\n\nconst mergeCellFactory: ExcelOOXMLTemplate = {\n    getTemplate(ref: string) {\n        return {\n            name: 'mergeCell',\n            properties: {\n                rawMap: {\n                    ref: ref\n                }\n            }\n        };\n    }\n};\n\nexport default mergeCellFactory;\n", "import { ExcelOOXMLTemplate, ExcelRelationship } from '@ag-grid-community/core';\n\nconst relationshipFactory: ExcelOOXMLTemplate = {\n    getTemplate(config: ExcelRelationship) {\n        const {Id, Type, Target} = config;\n        return {\n            name: \"Relationship\",\n            properties: {\n                rawMap: {\n                    Id,\n                    Type,\n                    Target\n                }\n            }\n        };\n    }\n};\n\nexport default relationshipFactory;\n", "import { ExcelOOXMLTemplate, ExcelRelationship } from '@ag-grid-community/core';\nimport relationshipFactory from './relationship';\n\nconst relationshipsFactory: ExcelOOXMLTemplate = {\n    getTemplate(c: ExcelRelationship[]) {\n        const children = c.map(relationship => relationshipFactory.getTemplate(relationship));\n\n        return {\n            name: \"Relationships\",\n            properties: {\n                rawMap: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n                }\n            },\n            children\n        };\n    }\n};\n\nexport default relationshipsFactory;\n", "import {\n    Column,\n    ColumnGroup,\n    ColumnWidthCallbackParams,\n    ExcelCell,\n    ExcelColumn,\n    ExcelImage,\n    ExcelHeaderFooterConfig,\n    ExcelOOXMLDataType,\n    ExcelRow,\n    ExcelSheetPageSetup,\n    ExcelSheetMargin,\n    ExcelStyle,\n    ExcelWorksheet,\n    ExcelTableConfig,\n    RowHeightCallbackParams,\n    RowNode,\n    _,\n} from '@ag-grid-community/core';\n\nimport {\n    BaseGridSerializingSession,\n    GridSerializingParams,\n    RowAccumulator,\n    RowSpanningAccumulator,\n    RowType\n} from \"@ag-grid-community/csv-export\";\n\nimport { ExcelXlsxFactory } from './excelXlsxFactory';\nimport { getHeightFromProperty } from './assets/excelUtils';\n\nexport interface StyleLinkerInterface {\n    rowType: RowType;\n    rowIndex: number;\n    value: string;\n    column?: Column;\n    columnGroup?: ColumnGroup;\n    node?: RowNode;\n}\n\ninterface ExcelMixedStyle {\n    key: string;\n    excelID: string;\n    result: ExcelStyle;\n}\n\nexport interface ExcelGridSerializingParams extends GridSerializingParams {\n    autoConvertFormulas?: boolean;\n    baseExcelStyles: ExcelStyle[];\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    margins?: ExcelSheetMargin;\n    pageSetup?: ExcelSheetPageSetup;\n    exportAsExcelTable?: boolean | ExcelTableConfig;\n    sheetName: string;\n    suppressColumnOutline?: boolean;\n    suppressRowOutline?: boolean;\n    rowGroupExpandState?:  'expanded' | 'collapsed' | 'match';\n    styleLinker: (params: StyleLinkerInterface) => string[];\n    addImageToCell?: (rowIndex: number, column: Column, value: string) => { image: ExcelImage, value?: string } | undefined;\n}\n\nexport class ExcelSerializingSession extends BaseGridSerializingSession<ExcelRow[]> {\n\n    private readonly config: ExcelGridSerializingParams;\n    private readonly stylesByIds: { [key: string]: ExcelStyle };\n\n    private mixedStyles: { [key: string]: ExcelMixedStyle } = {};\n    private mixedStyleCounter: number = 0;\n\n    private readonly excelStyles: (ExcelStyle & { quotePrefix?: 1 })[];\n\n    private rows: ExcelRow[] = [];\n    private cols: ExcelColumn[];\n    private columnsToExport: Column[];\n\n    constructor(config: ExcelGridSerializingParams) {\n        super(config);\n        this.config = Object.assign({}, config);\n        this.stylesByIds = {};\n        this.config.baseExcelStyles.forEach(style => {\n            this.stylesByIds[style.id] = style;\n        });\n        this.excelStyles = [...this.config.baseExcelStyles, { id: '_quotePrefix', quotePrefix: 1 }];\n    }\n\n    public addCustomContent(customContent: ExcelRow[]): void {\n        customContent.forEach(row => {\n            const rowLen = this.rows.length + 1;\n            let outlineLevel: number | undefined;\n\n            if (!this.config.suppressRowOutline && row.outlineLevel != null) {\n                outlineLevel = row.outlineLevel;\n            }\n\n            const rowObj: ExcelRow = {\n                height: getHeightFromProperty(rowLen, row.height || this.config.rowHeight),\n                cells: (row.cells || []).map((cell, idx) => {\n                    const image = this.addImage(rowLen, this.columnsToExport[idx], cell.data?.value as string);\n\n                    let excelStyles: string[] | null = null;\n                    \n                    if (cell.styleId) {\n                        excelStyles = typeof cell.styleId === 'string' ? [cell.styleId] : cell.styleId;\n                    }\n\n                    const excelStyleId = this.getStyleId(excelStyles);\n\n                    if (image) {\n                        return this.createCell(excelStyleId, this.getDataTypeForValue(image.value), image.value == null ? '' : image.value);\n                    }\n\n                    const value = cell.data?.value ?? '';\n                    const type = this.getDataTypeForValue(value);\n\n                    if (cell.mergeAcross) {\n                        return this.createMergedCell(excelStyleId, type, value, cell.mergeAcross)\n                    }\n\n                    return this.createCell(excelStyleId, type, value);\n                }),\n                outlineLevel\n            };\n\n            if (row.collapsed != null) { rowObj.collapsed = row.collapsed; }\n            if (row.hidden != null) { rowObj.hidden = row.hidden; }\n\n            this.rows.push(rowObj);\n        });\n    }\n\n    public onNewHeaderGroupingRow(): RowSpanningAccumulator {\n        const currentCells: ExcelCell[] = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight)\n        });\n        return {\n            onColumn: (columnGroup: ColumnGroup, header: string, index: number, span: number, collapsibleRanges: number[][]) => {\n                const styleIds: string[] = this.config.styleLinker({ rowType: RowType.HEADER_GROUPING, rowIndex: 1, value: `grouping-${header}`, columnGroup });\n                currentCells.push({\n                    ...this.createMergedCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), header, span),\n                    collapsibleRanges\n                });\n            }\n        };\n    }\n\n    public onNewHeaderRow(): RowAccumulator {\n        return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n    }\n\n    public onNewBodyRow(node?: RowNode): RowAccumulator {\n        const rowAccumulator = this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n\n        if (node) {\n            this.addRowOutlineIfNecessary(node);\n        }\n\n        return rowAccumulator;\n    }\n\n    public prepare(columnsToExport: Column[]): void {\n        super.prepare(columnsToExport);\n        this.columnsToExport = [...columnsToExport];\n        this.cols = columnsToExport.map((col, i) => this.convertColumnToExcel(col, i));\n    }\n\n    public parse(): string {\n        // adding custom content might have made some rows wider than the grid, so add new columns\n        const longestRow = this.rows.reduce((a, b) => Math.max(a, b.cells.length), 0);\n        while (this.cols.length < longestRow) {\n            this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n        }\n\n        const data: ExcelWorksheet = {\n            name: this.config.sheetName,\n            table: {\n                columns: this.cols,\n                rows: this.rows\n            }\n        };\n\n        return this.createExcel(data);\n    }\n\n    private addRowOutlineIfNecessary(node: RowNode): void {\n        const { gridOptionsService, suppressRowOutline, rowGroupExpandState = 'expanded' } = this.config;\n        const isGroupHideOpenParents = gridOptionsService.get('groupHideOpenParents');\n\n        if (isGroupHideOpenParents || suppressRowOutline || node.level == null) { return; }\n\n        const padding = node.footer ? 1 : 0;\n        const currentRow = _.last(this.rows);\n\n        currentRow.outlineLevel = node.level + padding;\n\n        if (rowGroupExpandState === 'expanded') { return; }\n\n        const collapseAll = rowGroupExpandState === 'collapsed';\n\n        if (node.isExpandable()) {\n            const isExpanded = !collapseAll && node.expanded;\n            currentRow.collapsed = !isExpanded;\n        }\n\n        currentRow.hidden = \n            // always show the node if there is no parent to be expanded\n            !!node.parent &&\n            // or if it is a child of the root node\n            node.parent.level !== -1 &&\n            (collapseAll || this.isAnyParentCollapsed(node.parent));\n    }\n\n    private isAnyParentCollapsed(node?: RowNode | null): boolean {\n        while (node && node.level !== -1) {\n            if (!node.expanded) { return true; }\n\n            node = node.parent;\n        }\n\n        return false;\n    }\n\n    private convertColumnToExcel(column: Column | null, index: number): ExcelColumn {\n        const columnWidth = this.config.columnWidth;\n        const headerValue = column ? this.extractHeaderValue(column) : undefined;\n        const displayName = headerValue ?? '';\n        const filterAllowed = column ? column.isFilterAllowed() : false;\n        if (columnWidth) {\n            if (typeof columnWidth === 'number') {\n                return { width: columnWidth, displayName, filterAllowed };\n            }\n\n            return { width: columnWidth({ column, index }), displayName, filterAllowed };\n        }\n\n        if (column) {\n            const smallestUsefulWidth = 75;\n            return { width: Math.max(column.getActualWidth(), smallestUsefulWidth), displayName, filterAllowed };\n        }\n\n        return {\n            displayName,\n            filterAllowed,\n        };\n    }\n\n    private onNewHeaderColumn(rowIndex: number, currentCells: ExcelCell[]): (column: Column, index: number, node: RowNode) => void {\n        return (column) => {\n            const nameForCol = this.extractHeaderValue(column);\n            const styleIds: string[] = this.config.styleLinker({ rowType: RowType.HEADER, rowIndex, value: nameForCol, column });\n            currentCells.push(this.createCell(this.getStyleId(styleIds), this.getDataTypeForValue('string'), nameForCol));\n        };\n    }\n\n    private onNewBodyColumn(rowIndex: number, currentCells: ExcelCell[]): (column: Column, index: number, node: RowNode) => void {\n        let skipCols = 0;\n\n        return (column, index, node) => {\n            if (skipCols > 0) {\n                skipCols -= 1;\n                return;\n            }\n\n            const { value: valueForCell, valueFormatted } = this.extractRowCellValue(column, index, rowIndex, 'excel', node);\n            const styleIds: string[] = this.config.styleLinker({ rowType: RowType.BODY, rowIndex, value: valueForCell, column, node });\n            const excelStyleId: string | null = this.getStyleId(styleIds);\n            const colSpan = column.getColSpan(node);\n            const addedImage = this.addImage(rowIndex, column, valueForCell);\n\n            if (addedImage) {\n                currentCells.push(this.createCell(excelStyleId, this.getDataTypeForValue(addedImage.value), addedImage.value == null ? '' : addedImage.value));\n            } else if (colSpan > 1) {\n                skipCols = colSpan - 1;\n                currentCells.push(this.createMergedCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, colSpan - 1));\n            } else {\n                currentCells.push(this.createCell(excelStyleId, this.getDataTypeForValue(valueForCell), valueForCell, valueFormatted));\n            }\n        };\n    }\n\n    private onNewRow(onNewColumnAccumulator: (rowIndex: number, currentCells: ExcelCell[]) => (column: Column, index: number, node: RowNode) => void, height?: number | ((params: RowHeightCallbackParams) => number)): RowAccumulator {\n        const currentCells: ExcelCell[] = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, height)\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n        };\n    }\n\n    private createExcel(data: ExcelWorksheet): string {\n        const { excelStyles, config } = this;\n\n        return ExcelXlsxFactory.createExcel(\n            excelStyles,\n            data,\n            config\n        );\n    }\n\n    private getDataTypeForValue(valueForCell?: string): ExcelOOXMLDataType {\n        if (valueForCell === undefined) { return 'empty'; }\n        return this.isNumerical(valueForCell) ? 'n' : 's';\n    }\n\n    private getTypeFromStyle(style: ExcelStyle | null, value: string | null): ExcelOOXMLDataType | null {\n        if (this.isFormula(value)) { return 'f'; }\n\n        if (style && style.dataType) {\n            switch (style.dataType.toLocaleLowerCase()) {\n                case 'formula':\n                    return 'f';\n                case 'string':\n                    return 's';\n                case 'number':\n                    return 'n';\n                case 'datetime':\n                    return 'd';\n                case 'error':\n                    return 'e';\n                case 'boolean':\n                    return 'b';\n                default:\n                    console.warn(`AG Grid: Unrecognized data type for excel export [${style.id}.dataType=${style.dataType}]`);\n            }\n        }\n\n        return null;\n    }\n\n    private addImage(rowIndex: number, column: Column, value: string): { image: ExcelImage, value?: string } | undefined {\n        if (!this.config.addImageToCell) { return; }\n\n        const addedImage = this.config.addImageToCell(rowIndex, column, value);\n\n        if (!addedImage) { return; }\n\n        ExcelXlsxFactory.buildImageMap(addedImage.image, rowIndex, column, this.columnsToExport, this.config.rowHeight);\n\n        return addedImage;\n    }\n\n    private createCell(styleId: string | null | undefined, type: ExcelOOXMLDataType, value: string, valueFormatted?: string | null): ExcelCell {\n        const actualStyle: ExcelStyle | null = this.getStyleById(styleId);\n        if (!actualStyle?.dataType && type === 's' && valueFormatted) {\n            value = valueFormatted;\n        }\n        const processedType = this.getTypeFromStyle(actualStyle, value) || type;\n\n        const { value: processedValue, escaped } = this.getCellValue(processedType, value);\n        const styles: string[] = [];\n\n        if (actualStyle) {\n            styles.push(styleId!);\n        }\n\n        if (escaped) {\n            styles.push('_quotePrefix');\n        }\n\n        styleId = this.getStyleId(styles) || undefined;\n\n        return {\n            styleId,\n            data: {\n                type: processedType,\n                value: processedValue\n            }\n        };\n    }\n\n    private createMergedCell(styleId: string | null, type: ExcelOOXMLDataType, value: string, numOfCells: number): ExcelCell {\n        const valueToUse = value == null ? '' : value;\n        return {\n            styleId: !!this.getStyleById(styleId) ? styleId! : undefined,\n            data: {\n                type: type,\n                value: type === 's' ? ExcelXlsxFactory.getStringPosition(valueToUse).toString() : value\n            },\n            mergeAcross: numOfCells\n        };\n    }\n\n    private getCellValue(type: ExcelOOXMLDataType, value: string | null): { value: string | null, escaped?: boolean } {\n        let escaped = false;\n\n        if (value == null) {\n            type = 's';\n            value = '';\n        }\n\n        if (type === 's') {\n            if (value && value[0] === \"'\") {\n                escaped = true;\n                value = value.slice(1);\n            }\n\n            value = ExcelXlsxFactory.getStringPosition(value).toString()\n        } else if (type === 'f') {\n            value = value.slice(1);\n        } else  if (type === 'n') {\n            value = Number(value).toString();\n        }\n\n        return { value, escaped };\n    }\n\n    private getStyleId(styleIds?: string[] | null): string | null {\n        if (!styleIds || !styleIds.length) { return null; }\n        if (styleIds.length === 1) { return styleIds[0]; }\n\n        const key: string = styleIds.join(\"-\");\n        if (!this.mixedStyles[key]) {\n            this.addNewMixedStyle(styleIds);\n        }\n        return this.mixedStyles[key].excelID;\n    }\n\n    private deepCloneObject<T>(object: T): T {\n        return JSON.parse(JSON.stringify(object));\n    }\n\n    private addNewMixedStyle(styleIds: string[]): void {\n        this.mixedStyleCounter += 1;\n        const excelId = `mixedStyle${this.mixedStyleCounter}`;\n        const resultantStyle: ExcelStyle = {} as ExcelStyle;\n\n        for (const styleId of styleIds) {\n            for (const excelStyle of this.excelStyles) {\n                if (excelStyle.id === styleId) {\n                    _.mergeDeep(resultantStyle, this.deepCloneObject(excelStyle));\n                }\n            }\n        }\n\n        resultantStyle.id = excelId;\n        resultantStyle.name = excelId;\n        const key: string = styleIds.join(\"-\");\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    }\n\n    private isFormula(value: string | null) {\n        if (value == null) { return false; }\n        return this.config.autoConvertFormulas && value.toString().startsWith('=');\n    }\n\n    private isNumerical(value: any): boolean {\n        if (typeof value === 'bigint') { return true; }\n        return isFinite(value) && value !== '' && !isNaN(parseFloat(value));\n    }\n\n    private getStyleById(styleId?: string | null): ExcelStyle | null {\n        if (styleId == null) { return null; }\n        return this.stylesByIds[styleId] || null;\n    }\n\n\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';"],
  "mappings": "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",
  "names": ["_", "idx", "_", "borderFactory", "currentSheet", "_", "_", "currentSheet", "_", "currentSheet", "idx", "_", "currentSheet", "_", "RowType", "_", "_", "RowType", "GridSerializer", "GridSerializer"]
}
