{
  "version": 3,
  "sources": ["../../src/main.ts", "../../src/menuModule.ts", "../../src/menu/enterpriseMenu.ts", "../../src/menu/contextMenu.ts", "../../src/menu/menuItemMapper.ts", "../../src/version.ts", "../../src/menu/chartMenuItemMapper.ts", "../../src/menu/columnChooserFactory.ts", "../../src/menu/columnMenuFactory.ts", "../../src/menu/menuUtils.ts"],
  "sourcesContent": ["export { MenuModule } from './menuModule';", "import { Module, ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { EnterpriseMenuFactory } from \"./menu/enterpriseMenu\";\nimport { ContextMenuFactory } from \"./menu/contextMenu\";\nimport { MenuItemMapper } from \"./menu/menuItemMapper\";\nimport { VERSION } from \"./version\";\nimport { ChartMenuItemMapper } from \"./menu/chartMenuItemMapper\";\nimport { ColumnChooserFactory } from \"./menu/columnChooserFactory\";\nimport { ColumnMenuFactory } from \"./menu/columnMenuFactory\";\nimport { MenuUtils } from \"./menu/menuUtils\";\n\nexport const MenuModule: Module = {\n    version: VERSION,\n    moduleName: ModuleNames.MenuModule,\n    beans: [EnterpriseMenuFactory, ContextMenuFactory, MenuItemMapper, ChartMenuItemMapper, ColumnChooserFactory, ColumnMenuFactory, MenuUtils],\n    dependantModules: [\n        EnterpriseCoreModule\n    ]\n};\n", "import {\n    _,\n    AgEvent,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    ColumnMenuTab,\n    FilterManager,\n    FilterWrapper,\n    IMenuFactory,\n    ModuleNames,\n    ModuleRegistry,\n    PopupService,\n    PostConstruct,\n    RefSelector,\n    AgPromise,\n    TabbedItem,\n    TabbedLayout,\n    FocusService,\n    IAfterGuiAttachedParams,\n    ContainerType,\n    CtrlsService,\n    AgMenuList,\n    AgMenuItemComponent,\n    PopupEventParams,\n    Component,\n    CloseMenuEvent,\n    MenuService,\n    AgGridEvent,\n    ColumnMenuVisibleChangedEvent,\n    Events,\n    WithoutGridCommon\n} from '@ag-grid-community/core';\nimport { ColumnChooserFactory } from './columnChooserFactory';\nimport { ColumnMenuFactory } from './columnMenuFactory';\nimport { MenuRestoreFocusParams, MenuUtils } from './menuUtils';\n\nexport interface TabSelectedEvent extends AgEvent {\n    key: string;\n}\n\ninterface EnterpriseColumnMenu {\n    getGui(): HTMLElement;\n    showTab?(tab: string): void;\n    afterGuiAttached(params?: IAfterGuiAttachedParams): void;\n    showTabBasedOnPreviousSelection?(): void;\n}\n\n@Bean('enterpriseMenuFactory')\nexport class EnterpriseMenuFactory extends BeanStub implements IMenuFactory {\n    @Autowired('popupService') private readonly popupService: PopupService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('ctrlsService') private readonly ctrlsService: CtrlsService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n    @Autowired('menuService') private readonly menuService: MenuService;\n\n    private lastSelectedTab: string;\n    private activeMenu: EnterpriseColumnMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    public showMenuAfterMouseEvent(column: Column | undefined, mouseEvent: MouseEvent | Touch, containerType: ContainerType, filtersOnly?: boolean): void {\n        const defaultTab = filtersOnly ? 'filterMenuTab' : undefined;\n        this.showMenu(column, (menu: EnterpriseColumnMenu) => {\n            const ePopup = menu.getGui();\n\n            this.popupService.positionPopupUnderMouseEvent({\n                type: containerType,\n                column,\n                mouseEvent,\n                ePopup\n            });\n\n            if (defaultTab) {\n                menu.showTab?.(defaultTab);\n            }\n            this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n        }, containerType, defaultTab, undefined, mouseEvent.target as HTMLElement);\n    }\n\n    public showMenuAfterButtonClick(column: Column | undefined, eventSource: HTMLElement, containerType: ContainerType, filtersOnly?: boolean): void {\n        let multiplier = -1;\n        let alignSide: 'left' | 'right' = 'left';\n\n        if (this.gridOptionsService.get('enableRtl')) {\n            multiplier = 1;\n            alignSide = 'right';\n        }\n\n        const defaultTab: ColumnMenuTab | undefined = filtersOnly ? 'filterMenuTab' : undefined;\n        const restrictToTabs = defaultTab ? [defaultTab] : undefined;\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n        let nudgeX = (isLegacyMenuEnabled ? 9 : 4) * multiplier;\n        let nudgeY = isLegacyMenuEnabled ? -23 : 4;\n\n        this.showMenu(column, (menu: EnterpriseColumnMenu) => {\n            const ePopup = menu.getGui();\n\n            this.popupService.positionPopupByComponent({\n                type: containerType,\n                column,\n                eventSource,\n                ePopup,\n                alignSide,\n                nudgeX,\n                nudgeY,\n                position: 'under',\n                keepWithinBounds: true,\n            });\n\n            if (defaultTab) {\n                menu.showTab?.(defaultTab);\n            }\n            this.dispatchVisibleChangedEvent(true, false, column, defaultTab);\n        }, containerType, defaultTab, restrictToTabs, eventSource);\n    }\n\n    private showMenu(\n        column: Column | undefined,\n        positionCallback: (menu: EnterpriseColumnMenu) => void,\n        containerType: ContainerType,\n        defaultTab?: string,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): void {\n        const { menu, eMenuGui, anchorToElement, restoreFocusParams } = this.getMenuParams(column, restrictToTabs, eventSource);\n        const closedFuncs: ((e?: Event) => void)[] = [];\n\n        closedFuncs.push(\n            (e) => {\n                const eComp = menu.getGui();\n                this.destroyBean(menu);\n                if (column) {\n                    column.setMenuVisible(false, 'contextMenu');\n                    // if we don't have a column, then the menu wasn't launched via keyboard navigation\n                    this.menuUtils.restoreFocusOnClose(restoreFocusParams, eComp, e);\n                }\n            }\n        );\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        // need to show filter before positioning, as only after filter\n        // is visible can we find out what the width of it is\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: (e?: Event) => { // menu closed callback\n                closedFuncs.forEach(f => f(e));\n                this.dispatchVisibleChangedEvent(false, false, column, defaultTab);\n            },\n            afterGuiAttached: params => menu.afterGuiAttached(Object.assign({}, { container: containerType }, params)),\n            // if defaultTab is not present, positionCallback will be called\n            // after `showTabBasedOnPreviousSelection` is called.\n            positionCallback: !!defaultTab ? () => positionCallback(menu) : undefined,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu')\n        });\n\n        if (!defaultTab) {\n            menu.showTabBasedOnPreviousSelection?.();\n            // reposition the menu because the method above could load\n            // an element that is bigger than enterpriseMenu header.\n            positionCallback(menu);\n        }\n\n        if (this.menuService.isColumnMenuAnchoringEnabled()) {\n            // if user starts showing / hiding columns, or otherwise move the underlying column\n            // for this menu, we want to stop tracking the menu with the column position. otherwise\n            // the menu would move as the user is using the columns tab inside the menu.\n            const stopAnchoringPromise = this.popupService.setPopupPositionRelatedToElement(eMenuGui, anchorToElement);\n            \n            if (stopAnchoringPromise && column) {\n                this.addStopAnchoring(stopAnchoringPromise, column, closedFuncs);\n            }\n        }\n\n        menu.addEventListener(TabbedColumnMenu.EVENT_TAB_SELECTED, (event: AgGridEvent & { key: string }) => {\n            this.dispatchVisibleChangedEvent(false, true, column);\n            this.lastSelectedTab = event.key;\n            this.dispatchVisibleChangedEvent(true, true, column);\n        });\n\n        column?.setMenuVisible(true, 'contextMenu');\n\n        this.activeMenu = menu;\n\n        menu.addEventListener(BeanStub.EVENT_DESTROYED, () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n    }\n\n    private addStopAnchoring(\n        stopAnchoringPromise: AgPromise<() => void>,\n        column: Column,\n        closedFuncsArr: (() => void)[]\n    ) {\n        stopAnchoringPromise.then((stopAnchoringFunc: () => void) => {\n            column.addEventListener('leftChanged', stopAnchoringFunc);\n            column.addEventListener('visibleChanged', stopAnchoringFunc);\n\n            closedFuncsArr.push(() => {\n                column.removeEventListener('leftChanged', stopAnchoringFunc);\n                column.removeEventListener('visibleChanged', stopAnchoringFunc);\n            });\n        });\n    }\n\n    private getMenuParams(\n        column: Column | undefined,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ) {\n        const restoreFocusParams = {\n            column,\n            headerPosition: this.focusService.getFocusedHeader(),\n            columnIndex: this.columnModel.getAllDisplayedColumns().indexOf(column!),\n            eventSource\n        };\n        const menu = this.createMenu(column, restoreFocusParams, restrictToTabs, eventSource);\n        return {\n            menu,\n            eMenuGui: menu.getGui(),\n            anchorToElement: eventSource || this.ctrlsService.getGridBodyCtrl().getGui(),\n            restoreFocusParams\n        }\n    }\n\n    private createMenu(\n        column: Column | undefined,\n        restoreFocusParams: MenuRestoreFocusParams,\n        restrictToTabs?: ColumnMenuTab[],\n        eventSource?: HTMLElement\n    ): (EnterpriseColumnMenu & BeanStub) {\n        if (this.menuService.isLegacyMenuEnabled()) {\n            return this.createBean(new TabbedColumnMenu(column, restoreFocusParams, this.lastSelectedTab, restrictToTabs, eventSource));\n        } else {\n            return this.createBean(new ColumnContextMenu(column, restoreFocusParams, eventSource));\n        }\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, switchingTab: boolean, column?: Column, defaultTab?: string): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: Events.EVENT_COLUMN_MENU_VISIBLE_CHANGED,\n            visible,\n            switchingTab,\n            key: (this.lastSelectedTab ?? defaultTab ?? (this.menuService.isLegacyMenuEnabled() ? TabbedColumnMenu.TAB_GENERAL : 'columnMenu')) as any,\n            column: column ?? null\n        }\n        this.eventService.dispatchEvent(event)\n    }\n\n    public isMenuEnabled(column: Column): boolean {\n        if (!this.menuService.isLegacyMenuEnabled()) {\n            return true;\n        }\n        // Determine whether there are any tabs to show in the menu, given that the filter tab may be hidden\n        const isFilterDisabled = !this.filterManager.isFilterAllowed(column);\n        const tabs = column.getColDef().menuTabs ?? TabbedColumnMenu.TABS_DEFAULT;\n        const numActiveTabs = isFilterDisabled && tabs.includes(TabbedColumnMenu.TAB_FILTER)\n            ? tabs.length - 1\n            : tabs.length;\n        return numActiveTabs > 0;\n    }\n\n    public showMenuAfterContextMenuEvent(column: Column<any> | undefined, mouseEvent?: MouseEvent | null, touchEvent?: TouchEvent | null): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) => {\n            this.showMenuAfterMouseEvent(column, eventOrTouch, 'columnMenu');\n            return true;\n        })\n    }\n}\n\nclass TabbedColumnMenu extends BeanStub implements EnterpriseColumnMenu {\n\n    public static EVENT_TAB_SELECTED = 'tabSelected';\n    public static TAB_FILTER: 'filterMenuTab' = 'filterMenuTab';\n    public static TAB_GENERAL: 'generalMenuTab' = 'generalMenuTab';\n    public static TAB_COLUMNS: 'columnsMenuTab' = 'columnsMenuTab';\n    public static TABS_DEFAULT: ColumnMenuTab[] = [TabbedColumnMenu.TAB_GENERAL, TabbedColumnMenu.TAB_FILTER, TabbedColumnMenu.TAB_COLUMNS];\n\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('columnChooserFactory') private readonly columnChooserFactory: ColumnChooserFactory;\n    @Autowired('columnMenuFactory') private readonly columnMenuFactory: ColumnMenuFactory;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n\n    private tabbedLayout: TabbedLayout;\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    private tabItemFilter: TabbedItem;\n    private tabItemGeneral: TabbedItem;\n    private tabItemColumns: TabbedItem;\n\n    private tabFactories: { [p: string]: () => TabbedItem; } = {};\n    private includeChecks: { [p: string]: () => boolean; } = {};\n\n    constructor(\n        private readonly column: Column | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly initialSelection: string,\n        private readonly restrictTo?: ColumnMenuTab[],\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super();\n        this.tabFactories[TabbedColumnMenu.TAB_GENERAL] = this.createMainPanel.bind(this);\n        this.tabFactories[TabbedColumnMenu.TAB_FILTER] = this.createFilterPanel.bind(this);\n        this.tabFactories[TabbedColumnMenu.TAB_COLUMNS] = this.createColumnsPanel.bind(this);\n\n        this.includeChecks[TabbedColumnMenu.TAB_GENERAL] = () => true;\n        this.includeChecks[TabbedColumnMenu.TAB_FILTER] = () => column ? this.filterManager.isFilterAllowed(column) : false;\n        this.includeChecks[TabbedColumnMenu.TAB_COLUMNS] = () => true;\n    }\n\n    @PostConstruct\n    public init(): void {\n        const tabs = this.getTabsToCreate().map(name => this.createTab(name));\n\n        this.tabbedLayout = new TabbedLayout({\n            items: tabs,\n            cssClass: 'ag-menu',\n            onActiveItemClicked: this.onHidePopup.bind(this),\n            onItemClicked: this.onTabItemClicked.bind(this)\n        });\n\n        this.createBean(this.tabbedLayout);\n\n        if (this.mainMenuList) {\n            this.mainMenuList.setParentComponent(this.tabbedLayout);\n        }\n\n        this.addDestroyFunc(() => this.destroyBean(this.tabbedLayout));\n    }\n\n    private getTabsToCreate() {\n        if (this.restrictTo) { return this.restrictTo; }\n\n        return (this.column?.getColDef().menuTabs ?? TabbedColumnMenu.TABS_DEFAULT)\n            .filter(tabName => this.isValidMenuTabItem(tabName))\n            .filter(tabName => this.isNotSuppressed(tabName))\n            .filter(tabName => this.isModuleLoaded(tabName));\n    }\n\n    private isModuleLoaded(menuTabName: string): boolean {\n        if (menuTabName === TabbedColumnMenu.TAB_COLUMNS) {\n            return ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.context.getGridId());\n        }\n\n        return true;\n    }\n\n    private isValidMenuTabItem(menuTabName: ColumnMenuTab): boolean {\n        let isValid: boolean = true;\n        let itemsToConsider = TabbedColumnMenu.TABS_DEFAULT;\n\n        if (this.restrictTo != null) {\n            isValid = this.restrictTo.indexOf(menuTabName) > -1;\n            itemsToConsider = this.restrictTo;\n        }\n\n        isValid = isValid && TabbedColumnMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;\n\n        if (!isValid) { console.warn(`AG Grid: Trying to render an invalid menu item '${menuTabName}'. Check that your 'menuTabs' contains one of [${itemsToConsider}]`); }\n\n        return isValid;\n    }\n\n    private isNotSuppressed(menuTabName: string): boolean {\n        return this.includeChecks[menuTabName]();\n    }\n\n    private createTab(name: string): TabbedItem {\n        return this.tabFactories[name]();\n    }\n\n    public showTabBasedOnPreviousSelection(): void {\n        // show the tab the user was on last time they had a menu open\n        this.showTab(this.initialSelection);\n    }\n\n    public showTab(toShow: string) {\n        if (this.tabItemColumns && toShow === TabbedColumnMenu.TAB_COLUMNS) {\n            this.tabbedLayout.showItem(this.tabItemColumns);\n        } else if (this.tabItemFilter && toShow === TabbedColumnMenu.TAB_FILTER) {\n            this.tabbedLayout.showItem(this.tabItemFilter);\n        } else if (this.tabItemGeneral && toShow === TabbedColumnMenu.TAB_GENERAL) {\n            this.tabbedLayout.showItem(this.tabItemGeneral);\n        } else {\n            this.tabbedLayout.showFirstItem();\n        }\n    }\n\n    private onTabItemClicked(event: { item: TabbedItem }): void {\n        let key: string | null = null;\n\n        switch (event.item) {\n            case this.tabItemColumns: key = TabbedColumnMenu.TAB_COLUMNS; break;\n            case this.tabItemFilter: key = TabbedColumnMenu.TAB_FILTER; break;\n            case this.tabItemGeneral: key = TabbedColumnMenu.TAB_GENERAL; break;\n        }\n\n        if (key) { this.activateTab(key); }\n    }\n\n    private activateTab(tab: string): void {\n        const ev: TabSelectedEvent = {\n            type: TabbedColumnMenu.EVENT_TAB_SELECTED,\n            key: tab\n        };\n        this.dispatchEvent(ev);\n    }\n\n    private createMainPanel(): TabbedItem {\n        this.mainMenuList = this.columnMenuFactory.createMenu(this, this.column, () => this.sourceElement ?? this.getGui());\n        this.mainMenuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, this.onHidePopup.bind(this));\n\n        this.tabItemGeneral = {\n            title: _.createIconNoSpan('menu', this.gridOptionsService, this.column)!,\n            titleLabel: TabbedColumnMenu.TAB_GENERAL.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(this.mainMenuList.getGui()),\n            name: TabbedColumnMenu.TAB_GENERAL\n        };\n\n        return this.tabItemGeneral;\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    private createFilterPanel(): TabbedItem {\n        const filterWrapper: FilterWrapper | null = this.column ? this.filterManager.getOrCreateFilterWrapper(this.column, 'COLUMN_MENU') : null;\n        if (!filterWrapper) {\n            throw new Error('AG Grid - Unable to instantiate filter');\n        }\n\n        const afterFilterAttachedCallback = (params: IAfterGuiAttachedParams) => {\n            if (!filterWrapper?.filterPromise) { return; }\n\n            // slightly odd block this - this promise will always have been resolved by the time it gets here, so won't be\n            // async (_unless_ in react or similar, but if so why not encountered before now?).\n            // I'd suggest a future improvement would be to remove/replace this promise as this block just wont work if it is\n            // async and is confusing if you don't have this context\n            filterWrapper.filterPromise.then(filter => {\n                if (filter && filter.afterGuiAttached) {\n                    filter.afterGuiAttached(params);\n                }\n            });\n        };\n\n        // see comment above\n        const afterDetachedCallback = () => filterWrapper?.filterPromise?.then(filter => filter?.afterGuiDetached?.());\n\n        this.tabItemFilter = {\n            title: _.createIconNoSpan('filter', this.gridOptionsService, this.column)!,\n            titleLabel: TabbedColumnMenu.TAB_FILTER.replace('MenuTab', ''),\n            bodyPromise: filterWrapper?.guiPromise as AgPromise<HTMLElement>,\n            afterAttachedCallback: afterFilterAttachedCallback,\n            afterDetachedCallback,\n            name: TabbedColumnMenu.TAB_FILTER\n        };\n\n        return this.tabItemFilter;\n    }\n\n    private createColumnsPanel(): TabbedItem {\n        const eWrapperDiv = document.createElement('div');\n        eWrapperDiv.classList.add('ag-menu-column-select-wrapper');\n\n        const columnSelectPanel = this.columnChooserFactory.createColumnSelectPanel(this, this.column);\n\n        const columnSelectPanelGui = columnSelectPanel.getGui();\n        columnSelectPanelGui.classList.add('ag-menu-column-select');\n        eWrapperDiv.appendChild(columnSelectPanelGui);\n\n        this.tabItemColumns = {\n            title: _.createIconNoSpan('columns', this.gridOptionsService, this.column)!, //createColumnsIcon(),\n            titleLabel: TabbedColumnMenu.TAB_COLUMNS.replace('MenuTab', ''),\n            bodyPromise: AgPromise.resolve(eWrapperDiv),\n            name: TabbedColumnMenu.TAB_COLUMNS\n        };\n\n        return this.tabItemColumns;\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        const { container, hidePopup } = params;\n\n        this.tabbedLayout.setAfterAttachedParams({ container, hidePopup });\n\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.tabbedLayout.getGui();\n    }\n}\n\nclass ColumnContextMenu extends Component implements EnterpriseColumnMenu {\n    @Autowired('columnMenuFactory') private readonly columnMenuFactory: ColumnMenuFactory;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    @RefSelector('eColumnMenu') private readonly eColumnMenu: HTMLElement;\n\n    private hidePopupFunc: (popupParams?: PopupEventParams) => void;\n    private mainMenuList: AgMenuList;\n\n    constructor(\n        private readonly column: Column | undefined,\n        private readonly restoreFocusParams: MenuRestoreFocusParams,\n        private readonly sourceElement?: HTMLElement\n    ) {\n        super(/* html */`\n            <div ref=\"eColumnMenu\" role=\"presentation\" class=\"ag-menu ag-column-menu\"></div>\n        `);\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.mainMenuList = this.columnMenuFactory.createMenu(this, this.column, () => this.sourceElement ?? this.getGui());\n        this.mainMenuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, this.onHidePopup.bind(this));\n        this.eColumnMenu.appendChild(this.mainMenuList.getGui());\n    }\n\n    private onHidePopup(event?: CloseMenuEvent): void {\n        this.menuUtils.closePopupAndRestoreFocusOnSelect(this.hidePopupFunc, this.restoreFocusParams, event);\n    }\n\n    public afterGuiAttached({ hidePopup }: IAfterGuiAttachedParams): void {\n        if (hidePopup) {\n            this.hidePopupFunc = hidePopup;\n            this.addDestroyFunc(hidePopup);\n        }\n        this.focusService.focusInto(this.mainMenuList.getGui());\n    }\n}\n", "import {\n    _,\n    AgEvent,\n    AgMenuItemComponent,\n    AgMenuList,\n    Autowired,\n    Bean,\n    BeanStub,\n    CellPosition,\n    CellPositionUtils,\n    Column,\n    ColumnModel,\n    Component,\n    FocusService,\n    GetContextMenuItemsParams,\n    IAfterGuiAttachedParams,\n    IContextMenuFactory,\n    IRangeService,\n    MenuItemDef,\n    ModuleNames,\n    ModuleRegistry,\n    Optional,\n    PopupService,\n    PostConstruct,\n    RowNode,\n    CtrlsService,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { MenuItemMapper } from \"./menuItemMapper\";\nimport { MenuUtils } from \"./menuUtils\";\n\nconst CSS_MENU = 'ag-menu';\nconst CSS_CONTEXT_MENU_OPEN = 'ag-context-menu-open';\n\n@Bean('contextMenuFactory')\nexport class ContextMenuFactory extends BeanStub implements IContextMenuFactory {\n\n    @Autowired('popupService') private popupService: PopupService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('menuUtils') private menuUtils: MenuUtils;\n\n    private activeMenu: ContextMenu | null;\n\n    public hideActiveMenu(): void {\n        this.destroyBean(this.activeMenu);\n    }\n\n    private getMenuItems(node: RowNode | null, column: Column | null, value: any): (MenuItemDef | string)[] | undefined {\n        const defaultMenuOptions: string[] = [];\n\n        if (_.exists(node) && ModuleRegistry.__isRegistered(ModuleNames.ClipboardModule, this.context.getGridId())) {\n            if (column) {\n                // only makes sense if column exists, could have originated from a row\n                if (!this.gridOptionsService.get('suppressCutToClipboard')) {\n                    defaultMenuOptions.push('cut');\n                }\n                defaultMenuOptions.push('copy', 'copyWithHeaders', 'copyWithGroupHeaders', 'paste', 'separator');\n            }\n        }\n\n        if (this.gridOptionsService.get('enableCharts') && ModuleRegistry.__isRegistered(ModuleNames.GridChartsModule, this.context.getGridId())) {\n            if (this.columnModel.isPivotMode()) {\n                defaultMenuOptions.push('pivotChart');\n            }\n\n            if (this.rangeService && !this.rangeService.isEmpty()) {\n                defaultMenuOptions.push('chartRange');\n            }\n        }\n\n        if (_.exists(node)) {\n            // if user clicks a cell\n            const csvModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.context.getGridId());\n            const excelModuleMissing = !ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.context.getGridId());\n            const suppressExcel = this.gridOptionsService.get('suppressExcelExport') || excelModuleMissing;\n            const suppressCsv = this.gridOptionsService.get('suppressCsvExport') || csvModuleMissing;\n            const onIPad = _.isIOSUserAgent();\n            const anyExport: boolean = !onIPad && (!suppressExcel || !suppressCsv);\n            if (anyExport) {\n                defaultMenuOptions.push('export');\n            }\n        }\n\n        const defaultItems = defaultMenuOptions.length ? defaultMenuOptions : undefined;\n        const columnContextMenuItems = column?.getColDef().contextMenuItems;\n        if (Array.isArray(columnContextMenuItems)) {\n            return columnContextMenuItems;\n        } else if (typeof columnContextMenuItems === 'function') {\n            return columnContextMenuItems(this.gridOptionsService.addGridCommonParams({\n                column, node, value,\u00A0defaultItems\n            }));\n        } else {\n            const userFunc = this.gridOptionsService.getCallback('getContextMenuItems');\n            if (userFunc) {\n                return userFunc({ column, node, value,\u00A0defaultItems });\n            } else {\n                return defaultMenuOptions;\n            }\n        }\n    }\n\n    public onContextMenu(mouseEvent: MouseEvent | null, touchEvent: TouchEvent | null, rowNode: RowNode | null, column: Column | null, value: any, anchorToElement: HTMLElement): void {\n        this.menuUtils.onContextMenu(mouseEvent, touchEvent, (eventOrTouch) => this.showMenu(rowNode, column, value, eventOrTouch, anchorToElement));\n    }\n\n    public showMenu(node: RowNode | null, column: Column | null, value: any, mouseEvent: MouseEvent | Touch, anchorToElement: HTMLElement): boolean {\n        const menuItems = this.getMenuItems(node, column, value);\n        const eGridBodyGui = this.ctrlsService.getGridBodyCtrl().getGui();\n\n        if (menuItems === undefined || _.missingOrEmpty(menuItems)) { return false; }\n\n        const menu = new ContextMenu(menuItems, column, node, value);\n        this.createBean(menu);\n\n        const eMenuGui = menu.getGui();\n\n        const positionParams = {\n            column: column,\n            rowNode: node,\n            type: 'contextMenu',\n            mouseEvent: mouseEvent,\n            ePopup: eMenuGui,\n            // move one pixel away so that accidentally double clicking\n            // won't show the browser's contextmenu\n            nudgeY: 1\n        };\n\n        const translate = this.localeService.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenuGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                eGridBodyGui.classList.remove(CSS_CONTEXT_MENU_OPEN);\n                this.destroyBean(menu);\n            },\n            click: mouseEvent,\n            positionCallback: () => {\n                const isRtl = this.gridOptionsService.get('enableRtl');\n                this.popupService.positionPopupUnderMouseEvent({\n                    ...positionParams,\n                    nudgeX: isRtl ? (eMenuGui.offsetWidth + 1) * -1 : 1\n                });\n            },\n            // so when browser is scrolled down, or grid is scrolled, context menu stays with cell\n            anchorToElement: anchorToElement,\n            ariaLabel: translate('ariaLabelContextMenu', 'Context Menu')\n        });\n\n        if (addPopupRes) {\n            eGridBodyGui.classList.add(CSS_CONTEXT_MENU_OPEN);\n            menu.afterGuiAttached({ container: 'contextMenu', hidePopup: addPopupRes.hideFunc });\n        }\n\n        // there should never be an active menu at this point, however it was found\n        // that you could right click a second time just 1 or 2 pixels from the first\n        // click, and another menu would pop up. so somehow the logic for closing the\n        // first menu (clicking outside should close it) was glitchy somehow. an easy\n        // way to avoid this is just remove the old context menu here if it exists.\n        if (this.activeMenu) {\n            this.hideActiveMenu();\n        }\n\n        this.activeMenu = menu;\n\n        menu.addEventListener(BeanStub.EVENT_DESTROYED, () => {\n            if (this.activeMenu === menu) {\n                this.activeMenu = null;\n            }\n        });\n\n        // hide the popup if something gets selected\n        if (addPopupRes) {\n            menu.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, addPopupRes.hideFunc);\n        }\n\n        return true;\n    }\n}\n\nclass ContextMenu extends Component {\n\n    @Autowired('menuItemMapper') private menuItemMapper: MenuItemMapper;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('cellPositionUtils') private cellPositionUtils: CellPositionUtils;\n\n    private menuList: AgMenuList | null = null;\n    private focusedCell: CellPosition | null = null;\n\n    constructor(\n        private readonly menuItems: (MenuItemDef | string)[],\n        private readonly column: Column | null,\n        private readonly node: RowNode | null,\n        private readonly value: any\n    ) {\n        super(/* html */`<div class=\"${CSS_MENU}\" role=\"presentation\"></div>`);\n    }\n\n    @PostConstruct\n    private addMenuItems(): void {\n        const menuList = this.createManagedBean(new AgMenuList(0, {\n            column: this.column,\n            node: this.node,\n            value: this.value\n        }));\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(this.menuItems, null, () => this.getGui());\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        this.appendChild(menuList);\n        this.menuList = menuList;\n\n        menuList.addEventListener(AgMenuItemComponent.EVENT_CLOSE_MENU, (e: AgEvent) => this.dispatchEvent(e));\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        if (params.hidePopup) {\n            this.addDestroyFunc(params.hidePopup);\n        }\n\n        this.focusedCell = this.focusService.getFocusedCell();\n\n        if (this.menuList) {\n            this.focusService.focusInto(this.menuList.getGui());\n        }\n    }\n\n    private restoreFocusedCell(): void {\n        const currentFocusedCell = this.focusService.getFocusedCell();\n\n        if (currentFocusedCell && this.focusedCell && this.cellPositionUtils.equals(currentFocusedCell, this.focusedCell)) {\n            const { rowIndex, rowPinned, column } = this.focusedCell;\n            const doc = this.gridOptionsService.getDocument();\n\n            if (doc.activeElement === doc.body) {\n                this.focusService.setFocusedCell({ rowIndex, column, rowPinned, forceBrowserFocus: true });\n            }\n        }\n    }\n\n    protected destroy(): void {\n        this.restoreFocusedCell();\n        super.destroy();\n    }\n}\n", "import {\n    _,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    GridApi,\n    IAggFuncService,\n    IClipboardService,\n    MenuItemDef,\n    ModuleNames, ModuleRegistry,\n    Optional,\n    FocusService,\n    RowPositionUtils,\n    MenuService,\n    SortController,\n} from '@ag-grid-community/core';\nimport { ChartMenuItemMapper } from './chartMenuItemMapper';\n\n@Bean('menuItemMapper')\nexport class MenuItemMapper extends BeanStub {\n\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Optional('clipboardService') private readonly clipboardService: IClipboardService;\n    @Optional('aggFuncService') private readonly aggFuncService: IAggFuncService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Autowired('chartMenuItemMapper') private readonly chartMenuItemMapper: ChartMenuItemMapper;\n    @Autowired('menuService') private readonly menuService: MenuService;\n    @Autowired('sortController') private readonly sortController: SortController;\n\n    public mapWithStockItems(originalList: (MenuItemDef | string)[], column: Column | null, sourceElement: () => HTMLElement): (MenuItemDef | string)[] {\n        if (!originalList) {\n            return [];\n        }\n\n        const resultList: (MenuItemDef | string)[] = [];\n\n        originalList.forEach(menuItemOrString => {\n            let result: MenuItemDef | string | null;\n\n            if (typeof menuItemOrString === 'string') {\n                result = this.getStockMenuItem(menuItemOrString, column, sourceElement);\n            } else {\n                // Spread to prevent leaking mapped subMenus back into the original menuItem\n                result = { ...menuItemOrString };\n            }\n            // if no mapping, can happen when module is not loaded but user tries to use module anyway\n            if (!result) { return; }\n\n            const resultDef = result as MenuItemDef;\n            const { subMenu } = resultDef;\n\n            if (subMenu && subMenu instanceof Array) {\n                resultDef.subMenu = this.mapWithStockItems(subMenu as (MenuItemDef | string)[], column, sourceElement);\n            }\n\n            if (result != null) {\n                resultList.push(result);\n            }\n        });\n\n        return resultList;\n    }\n\n    private getStockMenuItem(key: string, column: Column | null, sourceElement: () => HTMLElement): MenuItemDef | string | null {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const skipHeaderOnAutoSize = this.gridOptionsService.get('skipHeaderOnAutoSize');\n\n        switch (key) {\n            case 'pinSubMenu':\n                return {\n                    name: localeTextFunc('pinColumn', 'Pin Column'),\n                    icon: _.createIconNoSpan('menuPin', this.gridOptionsService, null),\n                    subMenu: ['clearPinned', 'pinLeft', 'pinRight']\n                };\n            case 'pinLeft':\n                return {\n                    name: localeTextFunc('pinLeft', 'Pin Left'),\n                    action: () => this.columnModel.setColumnsPinned([column], 'left', \"contextMenu\"),\n                    checked: !!column && column.isPinnedLeft()\n                };\n            case 'pinRight':\n                return {\n                    name: localeTextFunc('pinRight', 'Pin Right'),\n                    action: () => this.columnModel.setColumnsPinned([column], 'right', \"contextMenu\"),\n                    checked: !!column && column.isPinnedRight()\n                };\n            case 'clearPinned':\n                return {\n                    name: localeTextFunc('noPin', 'No Pin'),\n                    action: () => this.columnModel.setColumnsPinned([column], null, \"contextMenu\"),\n                    checked: !!column && !column.isPinned()\n                };\n            case 'valueAggSubMenu':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, 'Aggregation from Menu', this.context.getGridId())) {\n                    if (!column?.isPrimary() && !column?.getColDef().pivotValueColumn) {\n                        return null;\n                    }\n\n                    return {\n                        name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n                        icon: _.createIconNoSpan('menuValue', this.gridOptionsService, null),\n                        subMenu: this.createAggregationSubMenu(column!)\n                    };\n                } else {\n                    return null;\n                }\n            case 'autoSizeThis':\n                return {\n                    name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),\n                    action: () => this.columnModel.autoSizeColumn(column, \"contextMenu\", skipHeaderOnAutoSize)\n                };\n            case 'autoSizeAll':\n                return {\n                    name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n                    action: () => this.columnModel.autoSizeAllColumns(\"contextMenu\", skipHeaderOnAutoSize)\n                };\n            case 'rowGroup':\n                return {\n                    name: localeTextFunc('groupBy', 'Group by') + ' ' + _.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),\n                    disabled: column?.isRowGroupActive() || !column?.getColDef().enableRowGroup,\n                    action: () => this.columnModel.addRowGroupColumns([column], \"contextMenu\"),\n                    icon: _.createIconNoSpan('menuAddRowGroup', this.gridOptionsService, null)\n                };\n            case 'rowUnGroup':\n                const icon = _.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsService, null);\n                const showRowGroup = column?.getColDef().showRowGroup;\n                const lockedGroups = this.gridOptionsService.get('groupLockGroupColumns');\n                // Handle single auto group column\n                if (showRowGroup === true) {\n                    return {\n                        name: localeTextFunc('ungroupAll', 'Un-Group All'),\n                        disabled: lockedGroups === -1 || lockedGroups >= this.columnModel.getRowGroupColumns().length,\n                        action: () => this.columnModel.setRowGroupColumns(this.columnModel.getRowGroupColumns().slice(0, lockedGroups), \"contextMenu\"),\n                        icon: icon\n                    };\n                }\n                // Handle multiple auto group columns\n                if (typeof showRowGroup === 'string') {\n                    const underlyingColumn = this.columnModel.getPrimaryColumn(showRowGroup);\n                    const ungroupByName = (underlyingColumn != null) ? _.escapeString(this.columnModel.getDisplayNameForColumn(underlyingColumn, 'header')) : showRowGroup;\n                    return {\n                        name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + ungroupByName,\n                        disabled: underlyingColumn != null && this.columnModel.isColumnGroupingLocked(underlyingColumn),\n                        action: () => this.columnModel.removeRowGroupColumns([showRowGroup], \"contextMenu\"),\n                        icon: icon\n                    };\n                }\n                // Handle primary column\n                return {\n                    name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + _.escapeString(this.columnModel.getDisplayNameForColumn(column, 'header')),\n                    disabled: !column?.isRowGroupActive() || !column?.getColDef().enableRowGroup || this.columnModel.isColumnGroupingLocked(column),\n                    action: () => this.columnModel.removeRowGroupColumns([column], \"contextMenu\"),\n                    icon: icon\n                };\n            case 'resetColumns':\n                return {\n                    name: localeTextFunc('resetColumns', 'Reset Columns'),\n                    action: () => this.columnModel.resetColumnState(\"contextMenu\")\n                };\n            case 'expandAll':\n                return {\n                    name: localeTextFunc('expandAll', 'Expand All Row Groups'),\n                    action: () => this.gridApi.expandAll()\n                };\n            case 'contractAll':\n                return {\n                    name: localeTextFunc('collapseAll', 'Collapse All Row Groups'),\n                    action: () => this.gridApi.collapseAll()\n                };\n            case 'copy':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copy', 'Copy'),\n                        shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n                        icon: _.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard()\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithHeaders':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy with Headers from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard({ includeHeaders: true })\n                    };\n                } else {\n                    return null;\n                }\n            case 'copyWithGroupHeaders':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Copy with Group Headers from Menu', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('copyWithGroupHeaders', 'Copy with Group Headers'),\n                        // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n                        icon: _.createIconNoSpan('clipboardCopy', this.gridOptionsService, null),\n                        action: () => this.clipboardService.copyToClipboard({ includeHeaders: true, includeGroupHeaders: true })\n                    };\n                } else {\n                    return null;\n                }\n            case 'cut':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Cut from Menu', this.context.getGridId())) {\n                    const focusedCell = this.focusService.getFocusedCell();\n                    const rowNode = focusedCell ? this.rowPositionUtils.getRowNode(focusedCell) : null;\n                    const isEditable = rowNode ? focusedCell?.column.isCellEditable(rowNode) : false;\n                    return {\n                        name: localeTextFunc('cut', 'Cut'),\n                        shortcut: localeTextFunc('ctrlX', 'Ctrl+X'),\n                        icon: _.createIconNoSpan('clipboardCut', this.gridOptionsService, null),\n                        disabled: !isEditable || this.gridOptionsService.get('suppressCutToClipboard'),\n                        action: () => this.clipboardService.cutToClipboard(undefined, 'contextMenu')\n                    };\n                } else {\n                    return null;\n                }\n            case 'paste':\n                if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, 'Paste from Clipboard', this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('paste', 'Paste'),\n                        shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n                        disabled: true,\n                        icon: _.createIconNoSpan('clipboardPaste', this.gridOptionsService, null),\n                        action: () => this.clipboardService.pasteFromClipboard()\n                    };\n                } else {\n                    return null;\n                }\n            case 'export':\n                const exportSubMenuItems: string[] = [];\n\n                const csvModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.CsvExportModule, this.context.getGridId());\n                const excelModuleLoaded = ModuleRegistry.__isRegistered(ModuleNames.ExcelExportModule, this.context.getGridId());\n\n                if (!this.gridOptionsService.get('suppressCsvExport') && csvModuleLoaded) {\n                    exportSubMenuItems.push('csvExport');\n                }\n                if (!this.gridOptionsService.get('suppressExcelExport') && excelModuleLoaded) {\n                    exportSubMenuItems.push('excelExport');\n                }\n                return {\n                    name: localeTextFunc('export', 'Export'),\n                    subMenu: exportSubMenuItems,\n                    icon: _.createIconNoSpan('save', this.gridOptionsService, null),\n                };\n            case 'csvExport':\n                return {\n                    name: localeTextFunc('csvExport', 'CSV Export'),\n                    icon: _.createIconNoSpan('csvExport', this.gridOptionsService, null),\n                    action: () => this.gridApi.exportDataAsCsv({})\n                };\n            case 'excelExport':\n                return {\n                    name: localeTextFunc('excelExport', 'Excel Export'),\n                    icon: _.createIconNoSpan('excelExport', this.gridOptionsService, null),\n                    action: () => this.gridApi.exportDataAsExcel()\n                };\n            case 'separator':\n                return 'separator';\n            case 'pivotChart':\n            case 'chartRange':\n                return this.chartMenuItemMapper.getChartItems(key) ?? null;\n            case 'columnFilter':\n                if (column) {\n                    return {\n                        name: localeTextFunc('columnFilter', 'Column Filter'),\n                        icon: _.createIconNoSpan('filter', this.gridOptionsService, null),\n                        action: () => this.menuService.showFilterMenu({\n                            column, buttonElement: sourceElement(), containerType: 'columnFilter', positionBy: 'button'\n                        })\n                    };\n                } else {\n                    return null;\n                }\n            case 'columnChooser':\n                if (ModuleRegistry.__isRegistered(ModuleNames.ColumnsToolPanelModule, this.context.getGridId())) {\n                    return {\n                        name: localeTextFunc('columnChooser', 'Choose Columns'),\n                        icon: _.createIconNoSpan('columns', this.gridOptionsService, null),\n                        action: () => this.menuService.showColumnChooser({ column, eventSource: sourceElement() })\n                    }\n                } else {\n                    return null;\n                }\n            case 'sortAscending':\n                return {\n                    name: localeTextFunc('sortAscending', 'Sort Ascending'),\n                    icon: _.createIconNoSpan('sortAscending', this.gridOptionsService, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'asc', false, 'columnMenu')\n                }\n            case 'sortDescending':\n                return {\n                    name: localeTextFunc('sortDescending', 'Sort Descending'),\n                    icon: _.createIconNoSpan('sortDescending', this.gridOptionsService, null),\n                    action: () => this.sortController.setSortForColumn(column!, 'desc', false, 'columnMenu')\n                }\n            case 'sortUnSort':\n                return {\n                    name: localeTextFunc('sortUnSort', 'Clear Sort'),\n                    icon: _.createIconNoSpan('sortUnSort', this.gridOptionsService, null),\n                    action: () => this.sortController.setSortForColumn(column!, null, false, 'columnMenu')\n                }\n            default: {\n                console.warn(`AG Grid: unknown menu item type ${key}`);\n                return null;\n            }\n        }\n    }\n\n    private createAggregationSubMenu(column: Column): MenuItemDef[] {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n\n        let columnToUse: Column | undefined;\n        if (column.isPrimary()) {\n            columnToUse = column;\n        } else {\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n            columnToUse = _.exists(pivotValueColumn) ? pivotValueColumn : undefined;\n        }\n\n        const result: MenuItemDef[] = [];\n        if (columnToUse) {\n            const columnIsAlreadyAggValue = columnToUse.isValueActive();\n            const funcNames = this.aggFuncService.getFuncNames(columnToUse);\n\n            result.push({\n                name: localeTextFunc('noAggregation', 'None'),\n                action: () => {\n                    this.columnModel.removeValueColumns([columnToUse!], \"contextMenu\");\n                    this.columnModel.setColumnAggFunc(columnToUse, undefined, \"contextMenu\");\n                },\n                checked: !columnIsAlreadyAggValue\n            })\n\n            funcNames.forEach(funcName => {\n                result.push({\n                    name: localeTextFunc(funcName, this.aggFuncService.getDefaultFuncLabel(funcName)),\n                    action: () => {\n                        this.columnModel.setColumnAggFunc(columnToUse, funcName, \"contextMenu\");\n                        this.columnModel.addValueColumns([columnToUse!], \"contextMenu\");\n                    },\n                    checked: columnIsAlreadyAggValue && columnToUse!.getAggFunc() === funcName\n                });\n            });\n\n        }\n\n        return result;\n    }\n}\n", "// DO NOT UPDATE MANUALLY: Generated from script during build time\nexport const VERSION = '31.2.0';", "import { Bean, BeanStub, ChartGroupsDef, ChartType, GridOptionsService, IChartService, LocaleService, MenuItemDef, ModuleNames, ModuleRegistry, Optional, _ } from '@ag-grid-community/core';\n\n@Bean('chartMenuItemMapper')\nexport class ChartMenuItemMapper extends BeanStub {\n\n    @Optional('chartService') private readonly chartService: IChartService;\n\n    public getChartItems(key: 'pivotChart' | 'chartRange'): MenuItemDef | undefined {\n        if (!this.chartService) {\n            ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, `the Context Menu key \"${key}\"`, this.context.getGridId());\n            return undefined;\n        }\n\n        const builder = key === 'pivotChart'\n            ? new PivotMenuItemMapper(this.gridOptionsService, this.chartService, this.localeService)\n            : new RangeMenuItemMapper(this.gridOptionsService, this.chartService, this.localeService);\n\n        const isEnterprise = this.chartService.isEnterprise();\n\n        let topLevelMenuItem: MenuItemDefWithKey | undefined = builder.getMenuItem();\n\n        if (topLevelMenuItem && topLevelMenuItem.subMenu && !isEnterprise) {\n            // Filter out enterprise-only menu items if 'Community Integrated'\n            const filterEnterpriseItems = (m: MenuItemDefWithKey): MenuItemDefWithKey => ({\n                ...m,\n                subMenu: m.subMenu?.filter((menu) => !menu._enterprise).map((menu) => filterEnterpriseItems(menu))\n            });\n            topLevelMenuItem = filterEnterpriseItems(topLevelMenuItem);\n        }\n\n        const chartGroupsDef = this.gridOptionsService.get('chartToolPanelsDef')?.settingsPanel?.chartGroupsDef;\n        if (chartGroupsDef) {\n            topLevelMenuItem = ChartMenuItemMapper.filterAndOrderChartMenu(topLevelMenuItem, chartGroupsDef, builder.getConfigLookup());\n        }\n        return this.cleanInternals(topLevelMenuItem);\n    }\n\n    // Remove our internal _key and _enterprise properties so this does not leak out of the class on the menu items.\n    private cleanInternals(menuItem: MenuItemDefWithKey | undefined): MenuItemDef | undefined {\n        if (!menuItem) {\n            return menuItem;\n        }\n\n        const removeKeys = (m: MenuItemDefWithKey | undefined) => {\n            delete m?._key;\n            delete m?._enterprise;\n            m?.subMenu?.forEach(s => removeKeys(s));\n            return m;\n        }\n\n        return removeKeys(menuItem);\n    }\n\n    private static buildLookup<T extends MenuItemDefWithKey<any>>(menuItem: T) {\n        let itemLookup: Record<any, T> = {} as any;\n        const addItem = (item: T) => {\n            itemLookup[item._key] = item;\n            if (item.subMenu) {\n                item.subMenu.forEach(s => addItem(s as T))\n            }\n        }\n        addItem(menuItem);\n        return itemLookup;\n    }\n\n    /**\n     * Make the MenuItem match the charts provided and their ordering on the ChartGroupsDef config object as provided by the user.\n     */\n    private static filterAndOrderChartMenu<TKeys extends string>(topLevelMenuItem: MenuItemDefWithKey<TKeys>, chartGroupsDef: ChartGroupsDef, configLookup: ChartDefToMenuItems<TKeys>): MenuItemDefWithKey<TKeys> | undefined {\n\n        const menuItemLookup = this.buildLookup(topLevelMenuItem)\n        let orderedAndFiltered: MenuItemDefWithKey = { ...topLevelMenuItem, subMenu: [] };\n\n        Object.entries(chartGroupsDef).forEach(([group, chartTypes]: [keyof ChartGroupsDef, ChartType[]]) => {\n\n            const chartConfigGroup = configLookup[group];\n\n            // Skip any context panels that are not enabled for the current chart type\n            if (chartConfigGroup === null) return;\n\n            if (chartConfigGroup == undefined) {\n                _.warnOnce(`invalid chartGroupsDef config '${group}'`);\n                return undefined;\n            }\n\n            const menuItem = menuItemLookup[chartConfigGroup._key];\n            if (menuItem) {\n                if (menuItem.subMenu) {\n                    const subMenus = chartTypes.map(chartType => {\n                        const itemKey = (chartConfigGroup as any)[chartType];\n                        if (itemKey == undefined) {                            \n                            _.warnOnce(`invalid chartGroupsDef config '${group}.${chartType}'`);\n                            return undefined;\n                        }\n                        return menuItemLookup[itemKey];\n                    }).filter(s => s !== undefined) as MenuItemDefWithKey[];\n\n                    if (subMenus.length > 0) {\n                        menuItem.subMenu = subMenus;\n                        orderedAndFiltered.subMenu?.push(menuItem);\n                    }\n                } else {\n                    // Handles line case which is not actually a sub subMenu\n                    orderedAndFiltered.subMenu?.push(menuItem);\n                }\n            }\n        })\n        if (orderedAndFiltered.subMenu?.length == 0) {\n            return undefined;\n        }\n        return orderedAndFiltered;\n    }\n}\n\n\ninterface MenuItemBuilder<MenuItemKeys extends string> {\n    getMenuItem(): MenuItemDefWithKey<MenuItemKeys>;\n    getConfigLookup(): ChartDefToMenuItems<MenuItemKeys>\n}\n\n/** Utility type to keep chart menu item lookups in sync with ChartGroupsDef */\ntype ChartDefToMenuItems<MenuItemKeys extends string> = {\n    [K in keyof ChartGroupsDef]-?: ChartGroupsDef[K] extends ((infer P)[] | undefined) ?\n    [P] extends [ChartType] ?\n    ({ [T in P]-?: MenuItemKeys | null } & { _key: MenuItemKeys }) | null\n    : never\n    : never\n}\n\n\ninterface MenuItemDefWithKey<MenuItemKey extends string = any> extends MenuItemDef {\n    _key: MenuItemKey;\n    _enterprise?: boolean;\n    subMenu?: MenuItemDefWithKey<MenuItemKey>[];\n}\n\nexport type PivotMenuOptionName =\n    'pivotChart' |\n    'pivotColumnChart' | 'pivotGroupedColumn' | 'pivotStackedColumn' | 'pivotNormalizedColumn' |\n    'pivotBarChart' | 'pivotGroupedBar' | 'pivotStackedBar' | 'pivotNormalizedBar' |\n    'pivotPieChart' | 'pivotPie' | 'pivotDonut' |\n    'pivotLineChart' |\n    'pivotXYChart' | 'pivotScatter' | 'pivotBubble' |\n    'pivotAreaChart' | 'pivotArea' | 'pivotStackedArea' | 'pivotNormalizedArea' |\n    'pivotStatisticalChart' | 'pivotHistogram' |\n    'pivotHierarchicalChart' | 'pivotTreemap' | 'pivotSunburst' |\n    'pivotCombinationChart' | 'pivotColumnLineCombo' | 'pivotAreaColumnCombo';\n\nclass PivotMenuItemMapper implements MenuItemBuilder<PivotMenuOptionName>{\n\n    constructor(private gridOptionsService: GridOptionsService, private chartService: IChartService, private localeService: LocaleService) { }\n\n    getMenuItem(): MenuItemDefWithKey<PivotMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (localeKey: string, defaultText: string, chartType: ChartType, key: PivotMenuOptionName, enterprise = false) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createPivotChart({ chartType }),\n                _key: key,\n                _enterprise: enterprise\n            };\n        };\n        return {\n            name: localeTextFunc('pivotChart', 'Pivot Chart'),\n            _key: 'pivotChart',\n            subMenu: [\n                {\n                    _key: 'pivotColumnChart',\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'pivotGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'pivotStackedColumn'),\n                        getMenuItem('normalizedColumn', '100% Stacked&lrm;', 'normalizedColumn', 'pivotNormalizedColumn')\n                    ]\n                },\n                {\n                    _key: 'pivotBarChart',\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'pivotGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'pivotStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'pivotNormalizedBar')\n                    ]\n                },\n                {\n                    _key: 'pivotPieChart',\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'pivotPie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'pivotDonut')\n                    ]\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'pivotLineChart'),\n                {\n                    _key: 'pivotXYChart',\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'pivotScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'pivotBubble')\n                    ]\n                },\n                {\n                    _key: 'pivotAreaChart',\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu:\n                        [\n                            getMenuItem('area', 'Area&lrm;', 'area', 'pivotArea'),\n                            getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'pivotStackedArea'),\n                            getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'pivotNormalizedArea')\n                        ]\n                },\n                {\n                    _key: 'pivotStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu:\n                        [\n                            getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'pivotHistogram', false),\n                        ],\n                },\n                {\n                    _key: 'pivotHierarchicalChart',\n                    _enterprise: true,\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu:\n                        [\n                            getMenuItem('treemapChart', 'Treemap&lrm;', 'treemap', 'pivotTreemap', true),\n                            getMenuItem('sunburstChart', 'Sunburst&lrm;', 'sunburst', 'pivotSunburst', true),\n                        ],\n                },\n                {\n                    _key: 'pivotCombinationChart',\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'pivotColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'pivotAreaColumnCombo')\n                    ]\n                }\n            ],\n            icon: _.createIconNoSpan('chart', this.gridOptionsService, undefined),\n        }\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<PivotMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'pivotColumnChart',\n                column: 'pivotGroupedColumn',\n                stackedColumn: 'pivotStackedColumn',\n                normalizedColumn: 'pivotNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'pivotBarChart',\n                bar: 'pivotGroupedBar',\n                stackedBar: 'pivotStackedBar',\n                normalizedBar: 'pivotNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'pivotPieChart',\n                pie: 'pivotPie',\n                donut: 'pivotDonut',\n                doughnut: 'pivotDonut',\n            },\n            lineGroup: {\n                _key: 'pivotLineChart',\n                line: 'pivotLineChart',\n            },\n            scatterGroup: {\n                _key: 'pivotXYChart',\n                bubble: 'pivotBubble',\n                scatter: 'pivotScatter',\n            },\n            areaGroup: {\n                _key: 'pivotAreaChart',\n                area: 'pivotArea',\n                stackedArea: 'pivotStackedArea',\n                normalizedArea: 'pivotNormalizedArea',\n            },\n            combinationGroup: {\n                _key: 'pivotCombinationChart',\n                columnLineCombo: 'pivotColumnLineCombo',\n                areaColumnCombo: 'pivotAreaColumnCombo',\n                customCombo: null, // Not currently supported\n            },\n            hierarchicalGroup: {\n                _key: 'pivotHierarchicalChart',\n                treemap: 'pivotTreemap',\n                sunburst: 'pivotSunburst',\n            },\n            statisticalGroup: {\n                _key: 'pivotStatisticalChart',\n                histogram: 'pivotHistogram',\n                // Some statistical charts do not currently support pivot mode\n                rangeBar: null,\n                rangeArea: null,\n                boxPlot: null,\n            },\n            // Polar charts do not support pivot mode\n            polarGroup: null,\n            // Specialized charts do not currently support pivot mode\n            specializedGroup: null,\n        }\n    }\n}\n\nexport type RangeMenuOptionName =\n    'chartRange' |\n    'rangeColumnChart' | 'rangeGroupedColumn' | 'rangeStackedColumn' | 'rangeNormalizedColumn' |\n    'rangeBarChart' | 'rangeGroupedBar' | 'rangeStackedBar' | 'rangeNormalizedBar' |\n    'rangePieChart' | 'rangePie' | 'rangeDonut' |\n    'rangeLineChart' |\n    'rangeXYChart' | 'rangeScatter' | 'rangeBubble' |\n    'rangeAreaChart' | 'rangeArea' | 'rangeStackedArea' | 'rangeNormalizedArea' |\n    'rangePolarChart' | 'rangeRadarLine' | 'rangeRadarArea' | 'rangeNightingale' | 'rangeRadialColumn' | 'rangeRadialBar' |\n    'rangeStatisticalChart' | 'rangeBoxPlot' | 'rangeHistogram' |'rangeRangeBar' | 'rangeRangeArea' |\n    'rangeHierarchicalChart' | 'rangeTreemap' | 'rangeSunburst' |\n    'rangeSpecializedChart' | 'rangeWaterfall' | 'rangeHeatmap' |\n    'rangeCombinationChart' | 'rangeColumnLineCombo' | 'rangeAreaColumnCombo';\n\nclass RangeMenuItemMapper implements MenuItemBuilder<RangeMenuOptionName> {\n\n    constructor(private gridOptionsService: GridOptionsService, private chartService: IChartService, private localeService: LocaleService) { }\n\n    getMenuItem(): MenuItemDefWithKey<RangeMenuOptionName> {\n        const localeTextFunc = this.localeService.getLocaleTextFunc();\n        const getMenuItem = (localeKey: string, defaultText: string, chartType: ChartType, key: RangeMenuOptionName, enterprise = false) => {\n            return {\n                name: localeTextFunc(localeKey, defaultText),\n                action: () => this.chartService.createChartFromCurrentRange(chartType),\n                _key: key,\n                _enterprise: enterprise\n            };\n        };\n\n        return {\n            name: localeTextFunc('chartRange', 'Chart Range'),\n            _key: 'chartRange',\n            subMenu: [\n                {\n                    name: localeTextFunc('columnChart', 'Column'),\n                    subMenu: [\n                        getMenuItem('groupedColumn', 'Grouped&lrm;', 'groupedColumn', 'rangeGroupedColumn'),\n                        getMenuItem('stackedColumn', 'Stacked&lrm;', 'stackedColumn', 'rangeStackedColumn'),\n                        getMenuItem('normalizedColumn', '100% Stacked&lrm;', 'normalizedColumn', 'rangeNormalizedColumn')\n                    ],\n                    _key: 'rangeColumnChart'\n                },\n                {\n                    name: localeTextFunc('barChart', 'Bar'),\n                    subMenu: [\n                        getMenuItem('groupedBar', 'Grouped&lrm;', 'groupedBar', 'rangeGroupedBar'),\n                        getMenuItem('stackedBar', 'Stacked&lrm;', 'stackedBar', 'rangeStackedBar'),\n                        getMenuItem('normalizedBar', '100% Stacked&lrm;', 'normalizedBar', 'rangeNormalizedBar')\n                    ],\n                    _key: 'rangeBarChart'\n                },\n                {\n                    name: localeTextFunc('pieChart', 'Pie'),\n                    subMenu: [\n                        getMenuItem('pie', 'Pie&lrm;', 'pie', 'rangePie'),\n                        getMenuItem('donut', 'Donut&lrm;', 'donut', 'rangeDonut')\n                    ],\n                    _key: 'rangePieChart'\n                },\n                getMenuItem('line', 'Line&lrm;', 'line', 'rangeLineChart'),\n                {\n                    name: localeTextFunc('xyChart', 'X Y (Scatter)'),\n                    subMenu: [\n                        getMenuItem('scatter', 'Scatter&lrm;', 'scatter', 'rangeScatter'),\n                        getMenuItem('bubble', 'Bubble&lrm;', 'bubble', 'rangeBubble')\n                    ],\n                    _key: 'rangeXYChart'\n                },\n                {\n                    name: localeTextFunc('areaChart', 'Area'),\n                    subMenu:\n                        [\n                            getMenuItem('area', 'Area&lrm;', 'area', 'rangeArea'),\n                            getMenuItem('stackedArea', 'Stacked&lrm;', 'stackedArea', 'rangeStackedArea'),\n                            getMenuItem('normalizedArea', '100% Stacked&lrm;', 'normalizedArea', 'rangeNormalizedArea')\n                        ],\n                    _key: 'rangeAreaChart'\n                },\n                {\n                    name: localeTextFunc('polarChart', 'Polar'),\n                    subMenu:\n                        [\n                            getMenuItem('radarLine', 'Radar Line&lrm;', 'radarLine', 'rangeRadarLine'),\n                            getMenuItem('radarArea', 'Radar Area&lrm;', 'radarArea', 'rangeRadarArea'),\n                            getMenuItem('nightingale', 'Nightingale&lrm;', 'nightingale', 'rangeNightingale'),\n                            getMenuItem('radialColumn', 'Radial Column&lrm;', 'radialColumn', 'rangeRadialColumn'),\n                            getMenuItem('radialBar', 'Radial Bar&lrm;', 'radialBar', 'rangeRadialBar'),\n                        ],\n                    _key: 'rangePolarChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('statisticalChart', 'Statistical'),\n                    subMenu:\n                        [\n                            getMenuItem('boxPlot', 'Box Plot&lrm;', 'boxPlot', 'rangeBoxPlot', true),\n                            getMenuItem('histogramChart', 'Histogram&lrm;', 'histogram', 'rangeHistogram', false),\n                            getMenuItem('rangeBar', 'Range Bar&lrm;', 'rangeBar', 'rangeRangeBar', true),\n                            getMenuItem('rangeArea', 'Range Area&lrm;', 'rangeArea', 'rangeRangeArea', true),\n                        ],\n                    _key: 'rangeStatisticalChart',\n                    _enterprise: false, // histogram chart is available in both community and enterprise distributions\n                },\n                {\n                    name: localeTextFunc('hierarchicalChart', 'Hierarchical'),\n                    subMenu:\n                        [\n                            getMenuItem('treemap', 'Treemap&lrm;', 'treemap', 'rangeTreemap'),\n                            getMenuItem('sunburst', 'Sunburst&lrm;', 'sunburst', 'rangeSunburst'),\n                        ],\n                    _key: 'rangeHierarchicalChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('specializedChart', 'Specialized'),\n                    subMenu:\n                        [\n                            getMenuItem('heatmap', 'Heatmap&lrm;', 'heatmap', 'rangeHeatmap'),\n                            getMenuItem('waterfall', 'Waterfall&lrm;', 'waterfall', 'rangeWaterfall'),\n                        ],\n                    _key: 'rangeSpecializedChart',\n                    _enterprise: true,\n                },\n                {\n                    name: localeTextFunc('combinationChart', 'Combination'),\n                    subMenu: [\n                        getMenuItem('columnLineCombo', 'Column & Line&lrm;', 'columnLineCombo', 'rangeColumnLineCombo'),\n                        getMenuItem('AreaColumnCombo', 'Area & Column&lrm;', 'areaColumnCombo', 'rangeAreaColumnCombo')\n                    ],\n                    _key: 'rangeCombinationChart'\n                }\n            ],\n            icon: _.createIconNoSpan('chart', this.gridOptionsService, undefined),\n        }\n    }\n\n    getConfigLookup(): ChartDefToMenuItems<RangeMenuOptionName> {\n        return {\n            columnGroup: {\n                _key: 'rangeColumnChart',\n                column: 'rangeGroupedColumn',\n                stackedColumn: 'rangeStackedColumn',\n                normalizedColumn: 'rangeNormalizedColumn',\n            },\n            barGroup: {\n                _key: 'rangeBarChart',\n                bar: 'rangeGroupedBar',\n                stackedBar: 'rangeStackedBar',\n                normalizedBar: 'rangeNormalizedBar',\n            },\n            pieGroup: {\n                _key: 'rangePieChart',\n                pie: 'rangePie',\n                donut: 'rangeDonut',\n                doughnut: 'rangeDonut',\n            },\n            lineGroup: {\n                _key: 'rangeLineChart',\n                line: 'rangeLineChart',\n            },\n            scatterGroup: {\n                _key: 'rangeXYChart',\n                bubble: 'rangeBubble',\n                scatter: 'rangeScatter',\n            },\n            areaGroup: {\n                _key: 'rangeAreaChart',\n                area: 'rangeArea',\n                stackedArea: 'rangeStackedArea',\n                normalizedArea: 'rangeNormalizedArea',\n            },\n            polarGroup: {\n                _key: 'rangePolarChart',\n                radarLine: 'rangeRadarLine',\n                radarArea: 'rangeRadarArea',\n                nightingale: 'rangeNightingale',\n                radialColumn: 'rangeRadialColumn',\n                radialBar: 'rangeRadialBar',\n            },\n            statisticalGroup: {\n                _key: 'rangeStatisticalChart',\n                boxPlot: 'rangeBoxPlot',\n                histogram: 'rangeHistogram',\n                rangeBar: 'rangeRangeBar',\n                rangeArea: 'rangeRangeArea',\n            },\n            hierarchicalGroup: {\n                _key: 'rangeHierarchicalChart',\n                treemap: 'rangeTreemap',\n                sunburst: 'rangeSunburst',\n            },\n            specializedGroup: {\n                _key: 'rangeSpecializedChart',\n                heatmap: 'rangeHeatmap',\n                waterfall: 'rangeWaterfall',\n            },\n            combinationGroup: {\n                _key: 'rangeCombinationChart',\n                columnLineCombo: 'rangeColumnLineCombo',\n                areaColumnCombo: 'rangeAreaColumnCombo',\n                customCombo: null // Not currently supported\n            }\n        }\n    }\n}\n", "import {\n    AgDialog,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnChooserParams,\n    ColumnMenuVisibleChangedEvent,\n    ColumnModel,\n    Events,\n    FocusService,\n    IColumnChooserFactory,\n    ShowColumnChooserParams,\n    WithoutGridCommon\n} from \"@ag-grid-community/core\";\nimport { PrimaryColsPanel } from \"@ag-grid-enterprise/column-tool-panel\";\nimport { MenuUtils } from \"./menuUtils\";\n\n@Bean('columnChooserFactory')\nexport class ColumnChooserFactory extends BeanStub implements IColumnChooserFactory {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('menuUtils') private readonly menuUtils: MenuUtils;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    private activeColumnChooser: PrimaryColsPanel | undefined;\n    private activeColumnChooserDialog: AgDialog | undefined;\n\n    public createColumnSelectPanel(\n        parent: BeanStub, column?: Column | null, draggable?: boolean, params?: ColumnChooserParams\n    ): PrimaryColsPanel {\n        const columnSelectPanel = parent.createManagedBean(new PrimaryColsPanel());\n    \n        const columnChooserParams = params ?? column?.getColDef().columnChooserParams ?? column?.getColDef().columnsMenuParams ?? {};\n    \n        const {\n            contractColumnSelection, suppressColumnExpandAll, suppressColumnFilter,\n            suppressColumnSelectAll, suppressSyncLayoutWithGrid, columnLayout\n        } = columnChooserParams;\n    \n        columnSelectPanel.init(!!draggable, this.gridOptionsService.addGridCommonParams({\n            suppressColumnMove: false,\n            suppressValues: false,\n            suppressPivots: false,\n            suppressRowGroups: false,\n            suppressPivotMode: false,\n            contractColumnSelection: !!contractColumnSelection,\n            suppressColumnExpandAll: !!suppressColumnExpandAll,\n            suppressColumnFilter: !!suppressColumnFilter,\n            suppressColumnSelectAll: !!suppressColumnSelectAll,\n            suppressSyncLayoutWithGrid: !!columnLayout || !!suppressSyncLayoutWithGrid,\n            onStateUpdated: () => {}\n        }), 'columnMenu');\n    \n        if (columnLayout) {\n            columnSelectPanel.setColumnLayout(columnLayout);\n        }\n    \n        return columnSelectPanel;\n    }\n\n    public showColumnChooser({ column, chooserParams, eventSource }: ShowColumnChooserParams): void {\n        this.hideActiveColumnChooser();\n\n        const columnSelectPanel = this.createColumnSelectPanel(this, column, true, chooserParams);\n        const translate = this.localeService.getLocaleTextFunc();\n        const columnIndex = this.columnModel.getAllDisplayedColumns().indexOf(column!);\n        const headerPosition = column ? this.focusService.getFocusedHeader() : null;\n\n        this.activeColumnChooserDialog = this.createBean(new AgDialog({\n            title: translate('chooseColumns', 'Choose Columns'),\n            component: columnSelectPanel,\n            width: 300,\n            height: 300,\n            resizable: true,\n            movable: true,\n            centered: true,\n            closable: true,\n            afterGuiAttached: () => {\n                this.focusService.findNextFocusableElement(columnSelectPanel.getGui())?.focus();\n                this.dispatchVisibleChangedEvent(true, column);\n            },\n            closedCallback: (event) => {\n                const eComp = this.activeColumnChooser!.getGui();\n                this.destroyBean(this.activeColumnChooser);\n                this.activeColumnChooser = undefined;\n                this.activeColumnChooserDialog = undefined;\n                this.dispatchVisibleChangedEvent(false, column);\n                if (column) {\n                    this.menuUtils.restoreFocusOnClose({ column, headerPosition, columnIndex, eventSource }, eComp, event, true);\n                }\n            }\n        }));\n\n        this.activeColumnChooser = columnSelectPanel;\n    }\n\n    public hideActiveColumnChooser(): void {\n        if (this.activeColumnChooserDialog) {\n            this.destroyBean(this.activeColumnChooserDialog);\n        }\n    }\n\n    private dispatchVisibleChangedEvent(visible: boolean, column?: Column | null): void {\n        const event: WithoutGridCommon<ColumnMenuVisibleChangedEvent> = {\n            type: Events.EVENT_COLUMN_MENU_VISIBLE_CHANGED,\n            visible,\n            switchingTab: false,\n            key: 'columnChooser',\n            column: column ?? null\n        };\n        this.eventService.dispatchEvent(event);\n    }\n}\n", "import {\n    AgMenuList,\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    FilterManager,\n    IRowModel,\n    MenuItemDef,\n    MenuService,\n    _\n} from \"@ag-grid-community/core\";\nimport { MenuItemMapper } from \"./menuItemMapper\";\n\n@Bean('columnMenuFactory')\nexport class ColumnMenuFactory extends BeanStub {\n    @Autowired('menuItemMapper') private readonly menuItemMapper: MenuItemMapper;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('rowModel') private readonly rowModel: IRowModel;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('menuService') private readonly menuService: MenuService;\n\n    private static MENU_ITEM_SEPARATOR = 'separator';\n\n    public createMenu(parent: BeanStub, column: Column | undefined, sourceElement: () => HTMLElement): AgMenuList {\n        const menuList = parent.createManagedBean(new AgMenuList(0, {\n            column: column ?? null,\n            node: null,\n            value: null\n        }));\n\n        const menuItems = this.getMenuItems(column);\n        const menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, column ?? null, sourceElement);\n\n        menuList.addMenuItems(menuItemsMapped);\n\n        return menuList;\n    }\n\n    private getMenuItems(column?: Column): (string | MenuItemDef)[] {\n        const defaultItems = this.getDefaultMenuOptions(column);\n        let result: (string | MenuItemDef)[];\n\n        const columnMainMenuItems = column?.getColDef().mainMenuItems;\n        if (Array.isArray(columnMainMenuItems)) {\n            result = columnMainMenuItems;\n        } else if (typeof columnMainMenuItems === 'function') {\n            result = columnMainMenuItems(this.gridOptionsService.addGridCommonParams({\n                column: column!,\n                defaultItems\n            }));\n        } else {\n            const userFunc = this.gridOptionsService.getCallback('getMainMenuItems');\n            if (userFunc && column) {\n                result = userFunc({\n                    column,\n                    defaultItems\n                });\n            } else {\n                result = defaultItems;\n            }\n        }\n\n        // GUI looks weird when two separators are side by side. this can happen accidentally\n        // if we remove items from the menu then two separators can edit up adjacent.\n        _.removeRepeatsFromArray(result, ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n\n        return result;\n    }\n\n    private getDefaultMenuOptions(column?: Column): string[] {\n        const result: string[] = [];\n\n        const isLegacyMenuEnabled = this.menuService.isLegacyMenuEnabled();\n\n        if (!column) {\n            if (!isLegacyMenuEnabled) {\n                result.push('columnChooser');\n            }\n            result.push('resetColumns');\n            return result;\n        }\n\n        const allowPinning = !column.getColDef().lockPinned;\n\n        const rowGroupCount = this.columnModel.getRowGroupColumns().length;\n        const doingGrouping = rowGroupCount > 0;\n\n        const allowValue = column.isAllowValue();\n        const allowRowGroup = column.isAllowRowGroup();\n        const isPrimary = column.isPrimary();\n        const pivotModeOn = this.columnModel.isPivotMode();\n\n        const isInMemoryRowModel = this.rowModel.getType() === 'clientSide';\n\n        const usingTreeData = this.gridOptionsService.get('treeData');\n\n        const allowValueAgg =\n            // if primary, then only allow aggValue if grouping and it's a value columns\n            (isPrimary && doingGrouping && allowValue)\n            // secondary columns can always have aggValue, as it means it's a pivot value column\n            || !isPrimary;\n\n        if (!isLegacyMenuEnabled && column.isSortable()) {\n            const sort = column.getSort();\n            if (sort !== 'asc') {\n                result.push('sortAscending');\n            }\n            if (sort !== 'desc') {\n                result.push('sortDescending');\n            }\n            if (sort) {\n                result.push('sortUnSort');\n            }\n            result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        }\n\n        if (this.menuService.isFilterMenuItemEnabled(column)) {\n            result.push('columnFilter');\n            result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        }\n\n        if (allowPinning) {\n            result.push('pinSubMenu');\n        }\n\n        if (allowValueAgg) {\n            result.push('valueAggSubMenu');\n        }\n\n        if (allowPinning || allowValueAgg) {\n            result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        }\n\n        result.push('autoSizeThis');\n        result.push('autoSizeAll');\n        result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n\n        const showRowGroup = column.getColDef().showRowGroup;\n        if (showRowGroup) {\n            result.push('rowUnGroup');\n        } else if (allowRowGroup && column.isPrimary()) {\n            if (column.isRowGroupActive()) {\n                const groupLocked = this.columnModel.isColumnGroupingLocked(column);\n                if (!groupLocked) {\n                    result.push('rowUnGroup');\n                }\n            } else {\n                result.push('rowGroup');\n            }\n        }\n        result.push(ColumnMenuFactory.MENU_ITEM_SEPARATOR);\n        if (!isLegacyMenuEnabled) {\n            result.push('columnChooser');\n        }\n        result.push('resetColumns');\n\n        // only add grouping expand/collapse if grouping in the InMemoryRowModel\n        // if pivoting, we only have expandable groups if grouping by 2 or more columns\n        // as the lowest level group is not expandable while pivoting.\n        // if not pivoting, then any active row group can be expanded.\n        const allowExpandAndContract = isInMemoryRowModel && (usingTreeData || rowGroupCount > (pivotModeOn ? 1 : 0));\n\n        if (allowExpandAndContract) {\n            result.push('expandAll');\n            result.push('contractAll');\n        }\n\n        return result;\n    }\n}\n", "import {\n    Autowired,\n    Bean,\n    BeanStub,\n    Column,\n    ColumnModel,\n    FocusService,\n    HeaderNavigationService,\n    HeaderPosition,\n    CloseMenuEvent,\n    PopupEventParams,\n    _\n} from \"@ag-grid-community/core\";\n\nexport interface MenuRestoreFocusParams {\n    column: Column | undefined;\n    headerPosition: HeaderPosition | null;\n    columnIndex: number;\n    eventSource?: HTMLElement;\n}\n\n@Bean('menuUtils')\nexport class MenuUtils extends BeanStub {\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @Autowired('headerNavigationService') private readonly headerNavigationService: HeaderNavigationService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    public restoreFocusOnClose(\n        restoreFocusParams: MenuRestoreFocusParams,\n        eComp:  HTMLElement,\n        e?: Event,\n        restoreIfMouseEvent?: boolean\n    ): void {\n        const { eventSource } = restoreFocusParams;\n        const isKeyboardEvent = e instanceof KeyboardEvent;\n        if ((!restoreIfMouseEvent && !isKeyboardEvent) || !eventSource) { return; }\n        \n        const eDocument = this.gridOptionsService.getDocument();\n        if (!eComp.contains(eDocument.activeElement) && eDocument.activeElement !== eDocument.body) {\n            // something else has focus, so don't return focus to the header\n            return;\n        }\n\n        this.focusHeaderCell(restoreFocusParams);\n    }\n\n    public closePopupAndRestoreFocusOnSelect(\n        hidePopupFunc: (popupParams?: PopupEventParams) => void,\n        restoreFocusParams: MenuRestoreFocusParams,\n        event?: CloseMenuEvent\n    ): void {\n        let keyboardEvent: KeyboardEvent | undefined;\n\n        if (event && event.event && event.event instanceof KeyboardEvent) {\n            keyboardEvent = event.event;\n        }\n\n        hidePopupFunc(keyboardEvent && { keyboardEvent });\n\n        // this method only gets called when the menu was closed by selecting an option\n        // in this case we focus the cell that was previously focused, otherwise the header\n        const focusedCell = this.focusService.getFocusedCell();\n        const eDocument = this.gridOptionsService.getDocument();\n\n        if (eDocument.activeElement === eDocument.body) {\n            if (focusedCell) {\n                const { rowIndex, rowPinned, column } = focusedCell;\n                this.focusService.setFocusedCell({ rowIndex, column, rowPinned, forceBrowserFocus: true, preventScrollOnBrowserFocus: true });\n            } else {\n                this.focusHeaderCell(restoreFocusParams);\n            }\n        }\n    }\n\n    public onContextMenu(\n        mouseEvent: MouseEvent | null | undefined,\n        touchEvent: TouchEvent | null | undefined,\n        showMenuCallback: (eventOrTouch: (MouseEvent | Touch)\n    ) => boolean): void {\n        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.\n        // not everyone wants this, so first 'if' below allows to turn this hack off.\n        if (!this.gridOptionsService.get('allowContextMenuWithControlKey')) {\n            // then do the check\n            if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) { return; }\n        }\n\n        // need to do this regardless of context menu showing or not, so doing\n        // before the isSuppressContextMenu() check\n        if (mouseEvent) {\n            this.blockMiddleClickScrollsIfNeeded(mouseEvent);\n        }\n\n        if (this.gridOptionsService.get('suppressContextMenu')) { return; }\n\n        const eventOrTouch: (MouseEvent | Touch) = mouseEvent ?? touchEvent!.touches[0];\n        if (showMenuCallback(eventOrTouch)) {\n            const event = mouseEvent ?? touchEvent;\n            event!.preventDefault();\n        }\n    }\n\n    private focusHeaderCell(restoreFocusParams: MenuRestoreFocusParams): void {\n        const { column, columnIndex, headerPosition, eventSource } = restoreFocusParams;\n\n        const isColumnStillVisible = this.columnModel.getAllDisplayedColumns().some(col => col === column);\n\n        if (isColumnStillVisible && eventSource && _.isVisible(eventSource)) {\n            const focusableEl = this.focusService.findTabbableParent(eventSource);\n            if (focusableEl) {\n                if (column) {\n                    this.headerNavigationService.scrollToColumn(column);\n                }\n                focusableEl.focus();\n            }\n        }\n        // if the focusEl is no longer in the DOM, we try to focus\n        // the header that is closest to the previous header position\n        else if (headerPosition && columnIndex !== -1) {\n            const allColumns = this.columnModel.getAllDisplayedColumns();\n            const columnToFocus = allColumns[columnIndex] || _.last(allColumns);\n\n            if (columnToFocus) {\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerPosition.headerRowIndex,\n                        column: columnToFocus\n                    }\n                });\n            }\n        }\n    }\n\n    private blockMiddleClickScrollsIfNeeded(mouseEvent: MouseEvent): void {\n        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'\n        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse\n        // button in the browser). so this property allows the user to receive middle button clicks if\n        // they want.\n        const { gridOptionsService } = this;\n        const { which } = mouseEvent;\n\n        if (gridOptionsService.get('suppressMiddleClickScrolls') && which === 2) {\n            mouseEvent.preventDefault();\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,eAAoC;AACpC,IAAAA,eAAqC;;;ACDrC,kBAkCO;AAiBA,IAAM,wBAAN,cAAoC,qBAAiC;AAAA,EAYjE,iBAAuB;AAC1B,SAAK,YAAY,KAAK,UAAU;AAAA,EACpC;AAAA,EAEO,wBAAwB,QAA4B,YAAgC,eAA8B,aAA6B;AAClJ,UAAM,aAAa,cAAc,kBAAkB;AACnD,SAAK,SAAS,QAAQ,CAAC,SAA+B;AArE9D;AAsEY,YAAM,SAAS,KAAK,OAAO;AAE3B,WAAK,aAAa,6BAA6B;AAAA,QAC3C,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAED,UAAI,YAAY;AACZ,mBAAK,YAAL,8BAAe;AAAA,MACnB;AACA,WAAK,4BAA4B,MAAM,OAAO,QAAQ,UAAU;AAAA,IACpE,GAAG,eAAe,YAAY,QAAW,WAAW,MAAqB;AAAA,EAC7E;AAAA,EAEO,yBAAyB,QAA4B,aAA0B,eAA8B,aAA6B;AAC7I,QAAI,aAAa;AACjB,QAAI,YAA8B;AAElC,QAAI,KAAK,mBAAmB,IAAI,WAAW,GAAG;AAC1C,mBAAa;AACb,kBAAY;AAAA,IAChB;AAEA,UAAM,aAAwC,cAAc,kBAAkB;AAC9E,UAAM,iBAAiB,aAAa,CAAC,UAAU,IAAI;AAEnD,UAAM,sBAAsB,KAAK,YAAY,oBAAoB;AACjE,QAAI,UAAU,sBAAsB,IAAI,KAAK;AAC7C,QAAI,SAAS,sBAAsB,MAAM;AAEzC,SAAK,SAAS,QAAQ,CAAC,SAA+B;AAtG9D;AAuGY,YAAM,SAAS,KAAK,OAAO;AAE3B,WAAK,aAAa,yBAAyB;AAAA,QACvC,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,UAAU;AAAA,QACV,kBAAkB;AAAA,MACtB,CAAC;AAED,UAAI,YAAY;AACZ,mBAAK,YAAL,8BAAe;AAAA,MACnB;AACA,WAAK,4BAA4B,MAAM,OAAO,QAAQ,UAAU;AAAA,IACpE,GAAG,eAAe,YAAY,gBAAgB,WAAW;AAAA,EAC7D;AAAA,EAEQ,SACJ,QACA,kBACA,eACA,YACA,gBACA,aACI;AAnIZ;AAoIQ,UAAM,EAAE,MAAM,UAAU,iBAAiB,mBAAmB,IAAI,KAAK,cAAc,QAAQ,gBAAgB,WAAW;AACtH,UAAM,cAAuC,CAAC;AAE9C,gBAAY;AAAA,MACR,CAAC,MAAM;AACH,cAAM,QAAQ,KAAK,OAAO;AAC1B,aAAK,YAAY,IAAI;AACrB,YAAI,QAAQ;AACR,iBAAO,eAAe,OAAO,aAAa;AAE1C,eAAK,UAAU,oBAAoB,oBAAoB,OAAO,CAAC;AAAA,QACnE;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,YAAY,KAAK,cAAc,kBAAkB;AAIvD,UAAM,cAAc,KAAK,aAAa,SAAS;AAAA,MAC3C,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,gBAAgB,CAAC,MAAc;AAC3B,oBAAY,QAAQ,OAAK,EAAE,CAAC,CAAC;AAC7B,aAAK,4BAA4B,OAAO,OAAO,QAAQ,UAAU;AAAA,MACrE;AAAA,MACA,kBAAkB,YAAU,KAAK,iBAAiB,OAAO,OAAO,CAAC,GAAG,EAAE,WAAW,cAAc,GAAG,MAAM,CAAC;AAAA;AAAA;AAAA,MAGzG,kBAAkB,CAAC,CAAC,aAAa,MAAM,iBAAiB,IAAI,IAAI;AAAA,MAChE,WAAW,UAAU,uBAAuB,aAAa;AAAA,IAC7D,CAAC;AAED,QAAI,CAAC,YAAY;AACb,iBAAK,oCAAL;AAGA,uBAAiB,IAAI;AAAA,IACzB;AAEA,QAAI,KAAK,YAAY,6BAA6B,GAAG;AAIjD,YAAM,uBAAuB,KAAK,aAAa,iCAAiC,UAAU,eAAe;AAEzG,UAAI,wBAAwB,QAAQ;AAChC,aAAK,iBAAiB,sBAAsB,QAAQ,WAAW;AAAA,MACnE;AAAA,IACJ;AAEA,SAAK,iBAAiB,iBAAiB,oBAAoB,CAAC,UAAyC;AACjG,WAAK,4BAA4B,OAAO,MAAM,MAAM;AACpD,WAAK,kBAAkB,MAAM;AAC7B,WAAK,4BAA4B,MAAM,MAAM,MAAM;AAAA,IACvD,CAAC;AAED,qCAAQ,eAAe,MAAM;AAE7B,SAAK,aAAa;AAElB,SAAK,iBAAiB,qBAAS,iBAAiB,MAAM;AAClD,UAAI,KAAK,eAAe,MAAM;AAC1B,aAAK,aAAa;AAAA,MACtB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,iBACJ,sBACA,QACA,gBACF;AACE,yBAAqB,KAAK,CAAC,sBAAkC;AACzD,aAAO,iBAAiB,eAAe,iBAAiB;AACxD,aAAO,iBAAiB,kBAAkB,iBAAiB;AAE3D,qBAAe,KAAK,MAAM;AACtB,eAAO,oBAAoB,eAAe,iBAAiB;AAC3D,eAAO,oBAAoB,kBAAkB,iBAAiB;AAAA,MAClE,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEQ,cACJ,QACA,gBACA,aACF;AACE,UAAM,qBAAqB;AAAA,MACvB;AAAA,MACA,gBAAgB,KAAK,aAAa,iBAAiB;AAAA,MACnD,aAAa,KAAK,YAAY,uBAAuB,EAAE,QAAQ,MAAO;AAAA,MACtE;AAAA,IACJ;AACA,UAAM,OAAO,KAAK,WAAW,QAAQ,oBAAoB,gBAAgB,WAAW;AACpF,WAAO;AAAA,MACH;AAAA,MACA,UAAU,KAAK,OAAO;AAAA,MACtB,iBAAiB,eAAe,KAAK,aAAa,gBAAgB,EAAE,OAAO;AAAA,MAC3E;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,WACJ,QACA,oBACA,gBACA,aACiC;AACjC,QAAI,KAAK,YAAY,oBAAoB,GAAG;AACxC,aAAO,KAAK,WAAW,IAAI,iBAAiB,QAAQ,oBAAoB,KAAK,iBAAiB,gBAAgB,WAAW,CAAC;AAAA,IAC9H,OAAO;AACH,aAAO,KAAK,WAAW,IAAI,kBAAkB,QAAQ,oBAAoB,WAAW,CAAC;AAAA,IACzF;AAAA,EACJ;AAAA,EAEQ,4BAA4B,SAAkB,cAAuB,QAAiB,YAA2B;AA1P7H;AA2PQ,UAAM,QAA0D;AAAA,MAC5D,MAAM,mBAAO;AAAA,MACb;AAAA,MACA;AAAA,MACA,MAAM,gBAAK,oBAAL,YAAwB,eAAxB,YAAuC,KAAK,YAAY,oBAAoB,IAAI,iBAAiB,cAAc;AAAA,MACrH,QAAQ,0BAAU;AAAA,IACtB;AACA,SAAK,aAAa,cAAc,KAAK;AAAA,EACzC;AAAA,EAEO,cAAc,QAAyB;AArQlD;AAsQQ,QAAI,CAAC,KAAK,YAAY,oBAAoB,GAAG;AACzC,aAAO;AAAA,IACX;AAEA,UAAM,mBAAmB,CAAC,KAAK,cAAc,gBAAgB,MAAM;AACnE,UAAM,QAAO,YAAO,UAAU,EAAE,aAAnB,YAA+B,iBAAiB;AAC7D,UAAM,gBAAgB,oBAAoB,KAAK,SAAS,iBAAiB,UAAU,IAC7E,KAAK,SAAS,IACd,KAAK;AACX,WAAO,gBAAgB;AAAA,EAC3B;AAAA,EAEO,8BAA8B,QAAiC,YAAgC,YAAsC;AACxI,SAAK,UAAU,cAAc,YAAY,YAAY,CAAC,iBAAiB;AACnE,WAAK,wBAAwB,QAAQ,cAAc,YAAY;AAC/D,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;AApOgD;AAAA,MAA3C,uBAAU,cAAc;AAAA,GADhB,sBACmC;AACA;AAAA,MAA3C,uBAAU,cAAc;AAAA,GAFhB,sBAEmC;AACA;AAAA,MAA3C,uBAAU,cAAc;AAAA,GAHhB,sBAGmC;AACD;AAAA,MAA1C,uBAAU,aAAa;AAAA,GAJf,sBAIkC;AACE;AAAA,MAA5C,uBAAU,eAAe;AAAA,GALjB,sBAKoC;AACJ;AAAA,MAAxC,uBAAU,WAAW;AAAA,GANb,sBAMgC;AACE;AAAA,MAA1C,uBAAU,aAAa;AAAA,GAPf,sBAOkC;AAPlC,wBAAN;AAAA,MADN,kBAAK,uBAAuB;AAAA,GAChB;AAuOb,IAAM,oBAAN,MAAM,0BAAyB,qBAAyC;AAAA,EAwBpE,YACqB,QACA,oBACA,kBACA,YACA,eACnB;AACE,UAAM;AANW;AACA;AACA;AACA;AACA;AARrB,SAAQ,eAAmD,CAAC;AAC5D,SAAQ,gBAAiD,CAAC;AAUtD,SAAK,aAAa,kBAAiB,WAAW,IAAI,KAAK,gBAAgB,KAAK,IAAI;AAChF,SAAK,aAAa,kBAAiB,UAAU,IAAI,KAAK,kBAAkB,KAAK,IAAI;AACjF,SAAK,aAAa,kBAAiB,WAAW,IAAI,KAAK,mBAAmB,KAAK,IAAI;AAEnF,SAAK,cAAc,kBAAiB,WAAW,IAAI,MAAM;AACzD,SAAK,cAAc,kBAAiB,UAAU,IAAI,MAAM,SAAS,KAAK,cAAc,gBAAgB,MAAM,IAAI;AAC9G,SAAK,cAAc,kBAAiB,WAAW,IAAI,MAAM;AAAA,EAC7D;AAAA,EAGO,OAAa;AAChB,UAAM,OAAO,KAAK,gBAAgB,EAAE,IAAI,UAAQ,KAAK,UAAU,IAAI,CAAC;AAEpE,SAAK,eAAe,IAAI,yBAAa;AAAA,MACjC,OAAO;AAAA,MACP,UAAU;AAAA,MACV,qBAAqB,KAAK,YAAY,KAAK,IAAI;AAAA,MAC/C,eAAe,KAAK,iBAAiB,KAAK,IAAI;AAAA,IAClD,CAAC;AAED,SAAK,WAAW,KAAK,YAAY;AAEjC,QAAI,KAAK,cAAc;AACnB,WAAK,aAAa,mBAAmB,KAAK,YAAY;AAAA,IAC1D;AAEA,SAAK,eAAe,MAAM,KAAK,YAAY,KAAK,YAAY,CAAC;AAAA,EACjE;AAAA,EAEQ,kBAAkB;AAvV9B;AAwVQ,QAAI,KAAK,YAAY;AAAE,aAAO,KAAK;AAAA,IAAY;AAE/C,aAAQ,gBAAK,WAAL,mBAAa,YAAY,aAAzB,YAAqC,kBAAiB,cACzD,OAAO,aAAW,KAAK,mBAAmB,OAAO,CAAC,EAClD,OAAO,aAAW,KAAK,gBAAgB,OAAO,CAAC,EAC/C,OAAO,aAAW,KAAK,eAAe,OAAO,CAAC;AAAA,EACvD;AAAA,EAEQ,eAAe,aAA8B;AACjD,QAAI,gBAAgB,kBAAiB,aAAa;AAC9C,aAAO,2BAAe,eAAe,wBAAY,wBAAwB,KAAK,QAAQ,UAAU,CAAC;AAAA,IACrG;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,mBAAmB,aAAqC;AAC5D,QAAI,UAAmB;AACvB,QAAI,kBAAkB,kBAAiB;AAEvC,QAAI,KAAK,cAAc,MAAM;AACzB,gBAAU,KAAK,WAAW,QAAQ,WAAW,IAAI;AACjD,wBAAkB,KAAK;AAAA,IAC3B;AAEA,cAAU,WAAW,kBAAiB,aAAa,QAAQ,WAAW,IAAI;AAE1E,QAAI,CAAC,SAAS;AAAE,cAAQ,KAAK,mDAAmD,WAAW,kDAAkD,eAAe,GAAG;AAAA,IAAG;AAElK,WAAO;AAAA,EACX;AAAA,EAEQ,gBAAgB,aAA8B;AAClD,WAAO,KAAK,cAAc,WAAW,EAAE;AAAA,EAC3C;AAAA,EAEQ,UAAU,MAA0B;AACxC,WAAO,KAAK,aAAa,IAAI,EAAE;AAAA,EACnC;AAAA,EAEO,kCAAwC;AAE3C,SAAK,QAAQ,KAAK,gBAAgB;AAAA,EACtC;AAAA,EAEO,QAAQ,QAAgB;AAC3B,QAAI,KAAK,kBAAkB,WAAW,kBAAiB,aAAa;AAChE,WAAK,aAAa,SAAS,KAAK,cAAc;AAAA,IAClD,WAAW,KAAK,iBAAiB,WAAW,kBAAiB,YAAY;AACrE,WAAK,aAAa,SAAS,KAAK,aAAa;AAAA,IACjD,WAAW,KAAK,kBAAkB,WAAW,kBAAiB,aAAa;AACvE,WAAK,aAAa,SAAS,KAAK,cAAc;AAAA,IAClD,OAAO;AACH,WAAK,aAAa,cAAc;AAAA,IACpC;AAAA,EACJ;AAAA,EAEQ,iBAAiB,OAAmC;AACxD,QAAI,MAAqB;AAEzB,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK,KAAK;AAAgB,cAAM,kBAAiB;AAAa;AAAA,MAC9D,KAAK,KAAK;AAAe,cAAM,kBAAiB;AAAY;AAAA,MAC5D,KAAK,KAAK;AAAgB,cAAM,kBAAiB;AAAa;AAAA,IAClE;AAEA,QAAI,KAAK;AAAE,WAAK,YAAY,GAAG;AAAA,IAAG;AAAA,EACtC;AAAA,EAEQ,YAAY,KAAmB;AACnC,UAAM,KAAuB;AAAA,MACzB,MAAM,kBAAiB;AAAA,MACvB,KAAK;AAAA,IACT;AACA,SAAK,cAAc,EAAE;AAAA,EACzB;AAAA,EAEQ,kBAA8B;AAClC,SAAK,eAAe,KAAK,kBAAkB,WAAW,MAAM,KAAK,QAAQ,MAAG;AAtapF;AAsauF,wBAAK,kBAAL,YAAsB,KAAK,OAAO;AAAA,KAAC;AAClH,SAAK,aAAa,iBAAiB,gCAAoB,kBAAkB,KAAK,YAAY,KAAK,IAAI,CAAC;AAEpG,SAAK,iBAAiB;AAAA,MAClB,OAAO,cAAE,iBAAiB,QAAQ,KAAK,oBAAoB,KAAK,MAAM;AAAA,MACtE,YAAY,kBAAiB,YAAY,QAAQ,WAAW,EAAE;AAAA,MAC9D,aAAa,sBAAU,QAAQ,KAAK,aAAa,OAAO,CAAC;AAAA,MACzD,MAAM,kBAAiB;AAAA,IAC3B;AAEA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,YAAY,OAA8B;AAC9C,SAAK,UAAU,kCAAkC,KAAK,eAAe,KAAK,oBAAoB,KAAK;AAAA,EACvG;AAAA,EAEQ,oBAAgC;AACpC,UAAM,gBAAsC,KAAK,SAAS,KAAK,cAAc,yBAAyB,KAAK,QAAQ,aAAa,IAAI;AACpI,QAAI,CAAC,eAAe;AAChB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC5D;AAEA,UAAM,8BAA8B,CAAC,WAAoC;AACrE,UAAI,EAAC,+CAAe,gBAAe;AAAE;AAAA,MAAQ;AAM7C,oBAAc,cAAc,KAAK,YAAU;AACvC,YAAI,UAAU,OAAO,kBAAkB;AACnC,iBAAO,iBAAiB,MAAM;AAAA,QAClC;AAAA,MACJ,CAAC;AAAA,IACL;AAGA,UAAM,wBAAwB,MAAG;AA5czC;AA4c4C,kEAAe,kBAAf,mBAA8B,KAAK,YAAO;AA5ctF,YAAAC;AA4cyF,gBAAAA,MAAA,iCAAQ,qBAAR,gBAAAA,IAAA;AAAA;AAAA;AAEjF,SAAK,gBAAgB;AAAA,MACjB,OAAO,cAAE,iBAAiB,UAAU,KAAK,oBAAoB,KAAK,MAAM;AAAA,MACxE,YAAY,kBAAiB,WAAW,QAAQ,WAAW,EAAE;AAAA,MAC7D,aAAa,+CAAe;AAAA,MAC5B,uBAAuB;AAAA,MACvB;AAAA,MACA,MAAM,kBAAiB;AAAA,IAC3B;AAEA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,qBAAiC;AACrC,UAAM,cAAc,SAAS,cAAc,KAAK;AAChD,gBAAY,UAAU,IAAI,+BAA+B;AAEzD,UAAM,oBAAoB,KAAK,qBAAqB,wBAAwB,MAAM,KAAK,MAAM;AAE7F,UAAM,uBAAuB,kBAAkB,OAAO;AACtD,yBAAqB,UAAU,IAAI,uBAAuB;AAC1D,gBAAY,YAAY,oBAAoB;AAE5C,SAAK,iBAAiB;AAAA,MAClB,OAAO,cAAE,iBAAiB,WAAW,KAAK,oBAAoB,KAAK,MAAM;AAAA;AAAA,MACzE,YAAY,kBAAiB,YAAY,QAAQ,WAAW,EAAE;AAAA,MAC9D,aAAa,sBAAU,QAAQ,WAAW;AAAA,MAC1C,MAAM,kBAAiB;AAAA,IAC3B;AAEA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEO,iBAAiB,QAAuC;AAC3D,UAAM,EAAE,WAAW,UAAU,IAAI;AAEjC,SAAK,aAAa,uBAAuB,EAAE,WAAW,UAAU,CAAC;AAEjE,QAAI,WAAW;AACX,WAAK,gBAAgB;AACrB,WAAK,eAAe,SAAS;AAAA,IACjC;AAAA,EACJ;AAAA,EAEO,SAAsB;AACzB,WAAO,KAAK,aAAa,OAAO;AAAA,EACpC;AACJ;AAlOM,kBAEY,qBAAqB;AAFjC,kBAGY,aAA8B;AAH1C,kBAIY,cAAgC;AAJ5C,kBAKY,cAAgC;AAL5C,kBAMY,eAAgC,CAAC,kBAAiB,aAAa,kBAAiB,YAAY,kBAAiB,WAAW;AAEzF;AAAA,MAA5C,uBAAU,eAAe;AAAA,GARxB,kBAQ2C;AACO;AAAA,MAAnD,uBAAU,sBAAsB;AAAA,GAT/B,kBASkD;AACH;AAAA,MAAhD,uBAAU,mBAAmB;AAAA,GAV5B,kBAU+C;AACR;AAAA,MAAxC,uBAAU,WAAW;AAAA,GAXpB,kBAWuC;AA+BlC;AAAA,EADN;AAAA,GAzCC,kBA0CK;AA1CX,IAAM,mBAAN;AAoOA,IAAM,oBAAN,cAAgC,sBAA0C;AAAA,EAUtE,YACqB,QACA,oBACA,eACnB;AACE;AAAA;AAAA,MAAgB;AAAA;AAAA;AAAA,IAEf;AANgB;AACA;AACA;AAAA,EAKrB;AAAA,EAGQ,OAAa;AACjB,SAAK,eAAe,KAAK,kBAAkB,WAAW,MAAM,KAAK,QAAQ,MAAG;AAphBpF;AAohBuF,wBAAK,kBAAL,YAAsB,KAAK,OAAO;AAAA,KAAC;AAClH,SAAK,aAAa,iBAAiB,gCAAoB,kBAAkB,KAAK,YAAY,KAAK,IAAI,CAAC;AACpG,SAAK,YAAY,YAAY,KAAK,aAAa,OAAO,CAAC;AAAA,EAC3D;AAAA,EAEQ,YAAY,OAA8B;AAC9C,SAAK,UAAU,kCAAkC,KAAK,eAAe,KAAK,oBAAoB,KAAK;AAAA,EACvG;AAAA,EAEO,iBAAiB,EAAE,UAAU,GAAkC;AAClE,QAAI,WAAW;AACX,WAAK,gBAAgB;AACrB,WAAK,eAAe,SAAS;AAAA,IACjC;AACA,SAAK,aAAa,UAAU,KAAK,aAAa,OAAO,CAAC;AAAA,EAC1D;AACJ;AArCqD;AAAA,MAAhD,uBAAU,mBAAmB;AAAA,GAD5B,kBAC+C;AACR;AAAA,MAAxC,uBAAU,WAAW;AAAA,GAFpB,kBAEuC;AACG;AAAA,MAA3C,uBAAU,cAAc;AAAA,GAHvB,kBAG0C;AAEC;AAAA,MAA5C,yBAAY,aAAa;AAAA,GALxB,kBAK2C;AAgBrC;AAAA,EADP;AAAA,GApBC,kBAqBM;;;ACnhBZ,IAAAC,eA2BO;AAIP,IAAM,WAAW;AACjB,IAAM,wBAAwB;AAGvB,IAAM,qBAAN,cAAiC,sBAAwC;AAAA,EAUrE,iBAAuB;AAC1B,SAAK,YAAY,KAAK,UAAU;AAAA,EACpC;AAAA,EAEQ,aAAa,MAAsB,QAAuB,OAAkD;AAChH,UAAM,qBAA+B,CAAC;AAEtC,QAAI,eAAE,OAAO,IAAI,KAAK,4BAAe,eAAe,yBAAY,iBAAiB,KAAK,QAAQ,UAAU,CAAC,GAAG;AACxG,UAAI,QAAQ;AAER,YAAI,CAAC,KAAK,mBAAmB,IAAI,wBAAwB,GAAG;AACxD,6BAAmB,KAAK,KAAK;AAAA,QACjC;AACA,2BAAmB,KAAK,QAAQ,mBAAmB,wBAAwB,SAAS,WAAW;AAAA,MACnG;AAAA,IACJ;AAEA,QAAI,KAAK,mBAAmB,IAAI,cAAc,KAAK,4BAAe,eAAe,yBAAY,kBAAkB,KAAK,QAAQ,UAAU,CAAC,GAAG;AACtI,UAAI,KAAK,YAAY,YAAY,GAAG;AAChC,2BAAmB,KAAK,YAAY;AAAA,MACxC;AAEA,UAAI,KAAK,gBAAgB,CAAC,KAAK,aAAa,QAAQ,GAAG;AACnD,2BAAmB,KAAK,YAAY;AAAA,MACxC;AAAA,IACJ;AAEA,QAAI,eAAE,OAAO,IAAI,GAAG;AAEhB,YAAM,mBAAmB,CAAC,4BAAe,eAAe,yBAAY,iBAAiB,KAAK,QAAQ,UAAU,CAAC;AAC7G,YAAM,qBAAqB,CAAC,4BAAe,eAAe,yBAAY,mBAAmB,KAAK,QAAQ,UAAU,CAAC;AACjH,YAAM,gBAAgB,KAAK,mBAAmB,IAAI,qBAAqB,KAAK;AAC5E,YAAM,cAAc,KAAK,mBAAmB,IAAI,mBAAmB,KAAK;AACxE,YAAM,SAAS,eAAE,eAAe;AAChC,YAAM,YAAqB,CAAC,WAAW,CAAC,iBAAiB,CAAC;AAC1D,UAAI,WAAW;AACX,2BAAmB,KAAK,QAAQ;AAAA,MACpC;AAAA,IACJ;AAEA,UAAM,eAAe,mBAAmB,SAAS,qBAAqB;AACtE,UAAM,yBAAyB,iCAAQ,YAAY;AACnD,QAAI,MAAM,QAAQ,sBAAsB,GAAG;AACvC,aAAO;AAAA,IACX,WAAW,OAAO,2BAA2B,YAAY;AACrD,aAAO,uBAAuB,KAAK,mBAAmB,oBAAoB;AAAA,QACtE;AAAA,QAAQ;AAAA,QAAM;AAAA,QAAO;AAAA,MACzB,CAAC,CAAC;AAAA,IACN,OAAO;AACH,YAAM,WAAW,KAAK,mBAAmB,YAAY,qBAAqB;AAC1E,UAAI,UAAU;AACV,eAAO,SAAS,EAAE,QAAQ,MAAM,OAAO,aAAa,CAAC;AAAA,MACzD,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,cAAc,YAA+B,YAA+B,SAAyB,QAAuB,OAAY,iBAAoC;AAC/K,SAAK,UAAU,cAAc,YAAY,YAAY,CAAC,iBAAiB,KAAK,SAAS,SAAS,QAAQ,OAAO,cAAc,eAAe,CAAC;AAAA,EAC/I;AAAA,EAEO,SAAS,MAAsB,QAAuB,OAAY,YAAgC,iBAAuC;AAC5I,UAAM,YAAY,KAAK,aAAa,MAAM,QAAQ,KAAK;AACvD,UAAM,eAAe,KAAK,aAAa,gBAAgB,EAAE,OAAO;AAEhE,QAAI,cAAc,UAAa,eAAE,eAAe,SAAS,GAAG;AAAE,aAAO;AAAA,IAAO;AAE5E,UAAM,OAAO,IAAI,YAAY,WAAW,QAAQ,MAAM,KAAK;AAC3D,SAAK,WAAW,IAAI;AAEpB,UAAM,WAAW,KAAK,OAAO;AAE7B,UAAM,iBAAiB;AAAA,MACnB;AAAA,MACA,SAAS;AAAA,MACT,MAAM;AAAA,MACN;AAAA,MACA,QAAQ;AAAA;AAAA;AAAA,MAGR,QAAQ;AAAA,IACZ;AAEA,UAAM,YAAY,KAAK,cAAc,kBAAkB;AAEvD,UAAM,cAAc,KAAK,aAAa,SAAS;AAAA,MAC3C,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,gBAAgB,MAAM;AAClB,qBAAa,UAAU,OAAO,qBAAqB;AACnD,aAAK,YAAY,IAAI;AAAA,MACzB;AAAA,MACA,OAAO;AAAA,MACP,kBAAkB,MAAM;AACpB,cAAM,QAAQ,KAAK,mBAAmB,IAAI,WAAW;AACrD,aAAK,aAAa,6BAA6B,iCACxC,iBADwC;AAAA,UAE3C,QAAQ,SAAS,SAAS,cAAc,KAAK,KAAK;AAAA,QACtD,EAAC;AAAA,MACL;AAAA;AAAA,MAEA;AAAA,MACA,WAAW,UAAU,wBAAwB,cAAc;AAAA,IAC/D,CAAC;AAED,QAAI,aAAa;AACb,mBAAa,UAAU,IAAI,qBAAqB;AAChD,WAAK,iBAAiB,EAAE,WAAW,eAAe,WAAW,YAAY,SAAS,CAAC;AAAA,IACvF;AAOA,QAAI,KAAK,YAAY;AACjB,WAAK,eAAe;AAAA,IACxB;AAEA,SAAK,aAAa;AAElB,SAAK,iBAAiB,sBAAS,iBAAiB,MAAM;AAClD,UAAI,KAAK,eAAe,MAAM;AAC1B,aAAK,aAAa;AAAA,MACtB;AAAA,IACJ,CAAC;AAGD,QAAI,aAAa;AACb,WAAK,iBAAiB,iCAAoB,kBAAkB,YAAY,QAAQ;AAAA,IACpF;AAEA,WAAO;AAAA,EACX;AACJ;AAhJuC;AAAA,MAAlC,wBAAU,cAAc;AAAA,GAFhB,mBAE0B;AACD;AAAA,MAAjC,uBAAS,cAAc;AAAA,GAHf,mBAGyB;AACC;AAAA,MAAlC,wBAAU,cAAc;AAAA,GAJhB,mBAI0B;AACD;AAAA,MAAjC,wBAAU,aAAa;AAAA,GALf,mBAKyB;AACF;AAAA,MAA/B,wBAAU,WAAW;AAAA,GANb,mBAMuB;AANvB,qBAAN;AAAA,MADN,mBAAK,oBAAoB;AAAA,GACb;AAoJb,IAAM,cAAN,cAA0B,uBAAU;AAAA,EAShC,YACqB,WACA,QACA,MACA,OACnB;AACE;AAAA;AAAA,MAAgB,eAAe,QAAQ;AAAA,IAA8B;AALpD;AACA;AACA;AACA;AAPrB,SAAQ,WAA8B;AACtC,SAAQ,cAAmC;AAAA,EAS3C;AAAA,EAGQ,eAAqB;AACzB,UAAM,WAAW,KAAK,kBAAkB,IAAI,wBAAW,GAAG;AAAA,MACtD,QAAQ,KAAK;AAAA,MACb,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,IAChB,CAAC,CAAC;AACF,UAAM,kBAAkB,KAAK,eAAe,kBAAkB,KAAK,WAAW,MAAM,MAAM,KAAK,OAAO,CAAC;AAEvG,aAAS,aAAa,eAAe;AAErC,SAAK,YAAY,QAAQ;AACzB,SAAK,WAAW;AAEhB,aAAS,iBAAiB,iCAAoB,kBAAkB,CAAC,MAAe,KAAK,cAAc,CAAC,CAAC;AAAA,EACzG;AAAA,EAEO,iBAAiB,QAAuC;AAC3D,QAAI,OAAO,WAAW;AAClB,WAAK,eAAe,OAAO,SAAS;AAAA,IACxC;AAEA,SAAK,cAAc,KAAK,aAAa,eAAe;AAEpD,QAAI,KAAK,UAAU;AACf,WAAK,aAAa,UAAU,KAAK,SAAS,OAAO,CAAC;AAAA,IACtD;AAAA,EACJ;AAAA,EAEQ,qBAA2B;AAC/B,UAAM,qBAAqB,KAAK,aAAa,eAAe;AAE5D,QAAI,sBAAsB,KAAK,eAAe,KAAK,kBAAkB,OAAO,oBAAoB,KAAK,WAAW,GAAG;AAC/G,YAAM,EAAE,UAAU,WAAW,OAAO,IAAI,KAAK;AAC7C,YAAM,MAAM,KAAK,mBAAmB,YAAY;AAEhD,UAAI,IAAI,kBAAkB,IAAI,MAAM;AAChC,aAAK,aAAa,eAAe,EAAE,UAAU,QAAQ,WAAW,mBAAmB,KAAK,CAAC;AAAA,MAC7F;AAAA,IACJ;AAAA,EACJ;AAAA,EAEU,UAAgB;AACtB,SAAK,mBAAmB;AACxB,UAAM,QAAQ;AAAA,EAClB;AACJ;AA9DyC;AAAA,MAApC,wBAAU,gBAAgB;AAAA,GAFzB,YAEmC;AACF;AAAA,MAAlC,wBAAU,cAAc;AAAA,GAHvB,YAGiC;AACK;AAAA,MAAvC,wBAAU,mBAAmB;AAAA,GAJ5B,YAIsC;AAehC;AAAA,EADP;AAAA,GAlBC,YAmBM;;;AC1MZ,IAAAC,eAiBO;AAIA,IAAM,iBAAN,cAA6B,sBAAS;AAAA,EAYlC,kBAAkB,cAAwC,QAAuB,eAA4D;AAChJ,QAAI,CAAC,cAAc;AACf,aAAO,CAAC;AAAA,IACZ;AAEA,UAAM,aAAuC,CAAC;AAE9C,iBAAa,QAAQ,sBAAoB;AACrC,UAAI;AAEJ,UAAI,OAAO,qBAAqB,UAAU;AACtC,iBAAS,KAAK,iBAAiB,kBAAkB,QAAQ,aAAa;AAAA,MAC1E,OAAO;AAEH,iBAAS,mBAAK;AAAA,MAClB;AAEA,UAAI,CAAC,QAAQ;AAAE;AAAA,MAAQ;AAEvB,YAAM,YAAY;AAClB,YAAM,EAAE,QAAQ,IAAI;AAEpB,UAAI,WAAW,mBAAmB,OAAO;AACrC,kBAAU,UAAU,KAAK,kBAAkB,SAAqC,QAAQ,aAAa;AAAA,MACzG;AAEA,UAAI,UAAU,MAAM;AAChB,mBAAW,KAAK,MAAM;AAAA,MAC1B;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEQ,iBAAiB,KAAa,QAAuB,eAA+D;AAnEhI;AAoEQ,UAAM,iBAAiB,KAAK,cAAc,kBAAkB;AAC5D,UAAM,uBAAuB,KAAK,mBAAmB,IAAI,sBAAsB;AAE/E,YAAQ,KAAK;AAAA,MACT,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,aAAa,YAAY;AAAA,UAC9C,MAAM,eAAE,iBAAiB,WAAW,KAAK,oBAAoB,IAAI;AAAA,UACjE,SAAS,CAAC,eAAe,WAAW,UAAU;AAAA,QAClD;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,WAAW,UAAU;AAAA,UAC1C,QAAQ,MAAM,KAAK,YAAY,iBAAiB,CAAC,MAAM,GAAG,QAAQ,aAAa;AAAA,UAC/E,SAAS,CAAC,CAAC,UAAU,OAAO,aAAa;AAAA,QAC7C;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,YAAY,WAAW;AAAA,UAC5C,QAAQ,MAAM,KAAK,YAAY,iBAAiB,CAAC,MAAM,GAAG,SAAS,aAAa;AAAA,UAChF,SAAS,CAAC,CAAC,UAAU,OAAO,cAAc;AAAA,QAC9C;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,SAAS,QAAQ;AAAA,UACtC,QAAQ,MAAM,KAAK,YAAY,iBAAiB,CAAC,MAAM,GAAG,MAAM,aAAa;AAAA,UAC7E,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,SAAS;AAAA,QAC1C;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,mBAAmB,yBAAY,mBAAmB,yBAAyB,KAAK,QAAQ,UAAU,CAAC,GAAG;AACrH,cAAI,EAAC,iCAAQ,gBAAe,EAAC,iCAAQ,YAAY,mBAAkB;AAC/D,mBAAO;AAAA,UACX;AAEA,iBAAO;AAAA,YACH,MAAM,eAAe,oBAAoB,mBAAmB;AAAA,YAC5D,MAAM,eAAE,iBAAiB,aAAa,KAAK,oBAAoB,IAAI;AAAA,YACnE,SAAS,KAAK,yBAAyB,MAAO;AAAA,UAClD;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,sBAAsB,sBAAsB;AAAA,UACjE,QAAQ,MAAM,KAAK,YAAY,eAAe,QAAQ,eAAe,oBAAoB;AAAA,QAC7F;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,sBAAsB,sBAAsB;AAAA,UACjE,QAAQ,MAAM,KAAK,YAAY,mBAAmB,eAAe,oBAAoB;AAAA,QACzF;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,WAAW,UAAU,IAAI,MAAM,eAAE,aAAa,KAAK,YAAY,wBAAwB,QAAQ,QAAQ,CAAC;AAAA,UAC7H,WAAU,iCAAQ,uBAAsB,EAAC,iCAAQ,YAAY;AAAA,UAC7D,QAAQ,MAAM,KAAK,YAAY,mBAAmB,CAAC,MAAM,GAAG,aAAa;AAAA,UACzE,MAAM,eAAE,iBAAiB,mBAAmB,KAAK,oBAAoB,IAAI;AAAA,QAC7E;AAAA,MACJ,KAAK;AACD,cAAM,OAAO,eAAE,iBAAiB,sBAAsB,KAAK,oBAAoB,IAAI;AACnF,cAAM,eAAe,iCAAQ,YAAY;AACzC,cAAM,eAAe,KAAK,mBAAmB,IAAI,uBAAuB;AAExE,YAAI,iBAAiB,MAAM;AACvB,iBAAO;AAAA,YACH,MAAM,eAAe,cAAc,cAAc;AAAA,YACjD,UAAU,iBAAiB,MAAM,gBAAgB,KAAK,YAAY,mBAAmB,EAAE;AAAA,YACvF,QAAQ,MAAM,KAAK,YAAY,mBAAmB,KAAK,YAAY,mBAAmB,EAAE,MAAM,GAAG,YAAY,GAAG,aAAa;AAAA,YAC7H;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,OAAO,iBAAiB,UAAU;AAClC,gBAAM,mBAAmB,KAAK,YAAY,iBAAiB,YAAY;AACvE,gBAAM,gBAAiB,oBAAoB,OAAQ,eAAE,aAAa,KAAK,YAAY,wBAAwB,kBAAkB,QAAQ,CAAC,IAAI;AAC1I,iBAAO;AAAA,YACH,MAAM,eAAe,aAAa,aAAa,IAAI,MAAM;AAAA,YACzD,UAAU,oBAAoB,QAAQ,KAAK,YAAY,uBAAuB,gBAAgB;AAAA,YAC9F,QAAQ,MAAM,KAAK,YAAY,sBAAsB,CAAC,YAAY,GAAG,aAAa;AAAA,YAClF;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO;AAAA,UACH,MAAM,eAAe,aAAa,aAAa,IAAI,MAAM,eAAE,aAAa,KAAK,YAAY,wBAAwB,QAAQ,QAAQ,CAAC;AAAA,UAClI,UAAU,EAAC,iCAAQ,uBAAsB,EAAC,iCAAQ,YAAY,mBAAkB,KAAK,YAAY,uBAAuB,MAAM;AAAA,UAC9H,QAAQ,MAAM,KAAK,YAAY,sBAAsB,CAAC,MAAM,GAAG,aAAa;AAAA,UAC5E;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,gBAAgB,eAAe;AAAA,UACpD,QAAQ,MAAM,KAAK,YAAY,iBAAiB,aAAa;AAAA,QACjE;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,aAAa,uBAAuB;AAAA,UACzD,QAAQ,MAAM,KAAK,QAAQ,UAAU;AAAA,QACzC;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,eAAe,yBAAyB;AAAA,UAC7D,QAAQ,MAAM,KAAK,QAAQ,YAAY;AAAA,QAC3C;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,mBAAmB,yBAAY,iBAAiB,kBAAkB,KAAK,QAAQ,UAAU,CAAC,GAAG;AAC5G,iBAAO;AAAA,YACH,MAAM,eAAe,QAAQ,MAAM;AAAA,YACnC,UAAU,eAAe,SAAS,QAAQ;AAAA,YAC1C,MAAM,eAAE,iBAAiB,iBAAiB,KAAK,oBAAoB,IAAI;AAAA,YACvE,QAAQ,MAAM,KAAK,iBAAiB,gBAAgB;AAAA,UACxD;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,mBAAmB,yBAAY,iBAAiB,+BAA+B,KAAK,QAAQ,UAAU,CAAC,GAAG;AACzH,iBAAO;AAAA,YACH,MAAM,eAAe,mBAAmB,mBAAmB;AAAA;AAAA,YAE3D,MAAM,eAAE,iBAAiB,iBAAiB,KAAK,oBAAoB,IAAI;AAAA,YACvE,QAAQ,MAAM,KAAK,iBAAiB,gBAAgB,EAAE,gBAAgB,KAAK,CAAC;AAAA,UAChF;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,mBAAmB,yBAAY,iBAAiB,qCAAqC,KAAK,QAAQ,UAAU,CAAC,GAAG;AAC/H,iBAAO;AAAA,YACH,MAAM,eAAe,wBAAwB,yBAAyB;AAAA;AAAA,YAEtE,MAAM,eAAE,iBAAiB,iBAAiB,KAAK,oBAAoB,IAAI;AAAA,YACvE,QAAQ,MAAM,KAAK,iBAAiB,gBAAgB,EAAE,gBAAgB,MAAM,qBAAqB,KAAK,CAAC;AAAA,UAC3G;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,mBAAmB,yBAAY,iBAAiB,iBAAiB,KAAK,QAAQ,UAAU,CAAC,GAAG;AAC3G,gBAAM,cAAc,KAAK,aAAa,eAAe;AACrD,gBAAM,UAAU,cAAc,KAAK,iBAAiB,WAAW,WAAW,IAAI;AAC9E,gBAAM,aAAa,UAAU,2CAAa,OAAO,eAAe,WAAW;AAC3E,iBAAO;AAAA,YACH,MAAM,eAAe,OAAO,KAAK;AAAA,YACjC,UAAU,eAAe,SAAS,QAAQ;AAAA,YAC1C,MAAM,eAAE,iBAAiB,gBAAgB,KAAK,oBAAoB,IAAI;AAAA,YACtE,UAAU,CAAC,cAAc,KAAK,mBAAmB,IAAI,wBAAwB;AAAA,YAC7E,QAAQ,MAAM,KAAK,iBAAiB,eAAe,QAAW,aAAa;AAAA,UAC/E;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,mBAAmB,yBAAY,iBAAiB,wBAAwB,KAAK,QAAQ,UAAU,CAAC,GAAG;AAClH,iBAAO;AAAA,YACH,MAAM,eAAe,SAAS,OAAO;AAAA,YACrC,UAAU,eAAe,SAAS,QAAQ;AAAA,YAC1C,UAAU;AAAA,YACV,MAAM,eAAE,iBAAiB,kBAAkB,KAAK,oBAAoB,IAAI;AAAA,YACxE,QAAQ,MAAM,KAAK,iBAAiB,mBAAmB;AAAA,UAC3D;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,cAAM,qBAA+B,CAAC;AAEtC,cAAM,kBAAkB,4BAAe,eAAe,yBAAY,iBAAiB,KAAK,QAAQ,UAAU,CAAC;AAC3G,cAAM,oBAAoB,4BAAe,eAAe,yBAAY,mBAAmB,KAAK,QAAQ,UAAU,CAAC;AAE/G,YAAI,CAAC,KAAK,mBAAmB,IAAI,mBAAmB,KAAK,iBAAiB;AACtE,6BAAmB,KAAK,WAAW;AAAA,QACvC;AACA,YAAI,CAAC,KAAK,mBAAmB,IAAI,qBAAqB,KAAK,mBAAmB;AAC1E,6BAAmB,KAAK,aAAa;AAAA,QACzC;AACA,eAAO;AAAA,UACH,MAAM,eAAe,UAAU,QAAQ;AAAA,UACvC,SAAS;AAAA,UACT,MAAM,eAAE,iBAAiB,QAAQ,KAAK,oBAAoB,IAAI;AAAA,QAClE;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,aAAa,YAAY;AAAA,UAC9C,MAAM,eAAE,iBAAiB,aAAa,KAAK,oBAAoB,IAAI;AAAA,UACnE,QAAQ,MAAM,KAAK,QAAQ,gBAAgB,CAAC,CAAC;AAAA,QACjD;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,eAAe,cAAc;AAAA,UAClD,MAAM,eAAE,iBAAiB,eAAe,KAAK,oBAAoB,IAAI;AAAA,UACrE,QAAQ,MAAM,KAAK,QAAQ,kBAAkB;AAAA,QACjD;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACD,gBAAO,UAAK,oBAAoB,cAAc,GAAG,MAA1C,YAA+C;AAAA,MAC1D,KAAK;AACD,YAAI,QAAQ;AACR,iBAAO;AAAA,YACH,MAAM,eAAe,gBAAgB,eAAe;AAAA,YACpD,MAAM,eAAE,iBAAiB,UAAU,KAAK,oBAAoB,IAAI;AAAA,YAChE,QAAQ,MAAM,KAAK,YAAY,eAAe;AAAA,cAC1C;AAAA,cAAQ,eAAe,cAAc;AAAA,cAAG,eAAe;AAAA,cAAgB,YAAY;AAAA,YACvF,CAAC;AAAA,UACL;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,YAAI,4BAAe,eAAe,yBAAY,wBAAwB,KAAK,QAAQ,UAAU,CAAC,GAAG;AAC7F,iBAAO;AAAA,YACH,MAAM,eAAe,iBAAiB,gBAAgB;AAAA,YACtD,MAAM,eAAE,iBAAiB,WAAW,KAAK,oBAAoB,IAAI;AAAA,YACjE,QAAQ,MAAM,KAAK,YAAY,kBAAkB,EAAE,QAAQ,aAAa,cAAc,EAAE,CAAC;AAAA,UAC7F;AAAA,QACJ,OAAO;AACH,iBAAO;AAAA,QACX;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,iBAAiB,gBAAgB;AAAA,UACtD,MAAM,eAAE,iBAAiB,iBAAiB,KAAK,oBAAoB,IAAI;AAAA,UACvE,QAAQ,MAAM,KAAK,eAAe,iBAAiB,QAAS,OAAO,OAAO,YAAY;AAAA,QAC1F;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,kBAAkB,iBAAiB;AAAA,UACxD,MAAM,eAAE,iBAAiB,kBAAkB,KAAK,oBAAoB,IAAI;AAAA,UACxE,QAAQ,MAAM,KAAK,eAAe,iBAAiB,QAAS,QAAQ,OAAO,YAAY;AAAA,QAC3F;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM,eAAe,cAAc,YAAY;AAAA,UAC/C,MAAM,eAAE,iBAAiB,cAAc,KAAK,oBAAoB,IAAI;AAAA,UACpE,QAAQ,MAAM,KAAK,eAAe,iBAAiB,QAAS,MAAM,OAAO,YAAY;AAAA,QACzF;AAAA,MACJ,SAAS;AACL,gBAAQ,KAAK,mCAAmC,GAAG,EAAE;AACrD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,yBAAyB,QAA+B;AAC5D,UAAM,iBAAiB,KAAK,cAAc,kBAAkB;AAE5D,QAAI;AACJ,QAAI,OAAO,UAAU,GAAG;AACpB,oBAAc;AAAA,IAClB,OAAO;AACH,YAAM,mBAAmB,OAAO,UAAU,EAAE;AAC5C,oBAAc,eAAE,OAAO,gBAAgB,IAAI,mBAAmB;AAAA,IAClE;AAEA,UAAM,SAAwB,CAAC;AAC/B,QAAI,aAAa;AACb,YAAM,0BAA0B,YAAY,cAAc;AAC1D,YAAM,YAAY,KAAK,eAAe,aAAa,WAAW;AAE9D,aAAO,KAAK;AAAA,QACR,MAAM,eAAe,iBAAiB,MAAM;AAAA,QAC5C,QAAQ,MAAM;AACV,eAAK,YAAY,mBAAmB,CAAC,WAAY,GAAG,aAAa;AACjE,eAAK,YAAY,iBAAiB,aAAa,QAAW,aAAa;AAAA,QAC3E;AAAA,QACA,SAAS,CAAC;AAAA,MACd,CAAC;AAED,gBAAU,QAAQ,cAAY;AAC1B,eAAO,KAAK;AAAA,UACR,MAAM,eAAe,UAAU,KAAK,eAAe,oBAAoB,QAAQ,CAAC;AAAA,UAChF,QAAQ,MAAM;AACV,iBAAK,YAAY,iBAAiB,aAAa,UAAU,aAAa;AACtE,iBAAK,YAAY,gBAAgB,CAAC,WAAY,GAAG,aAAa;AAAA,UAClE;AAAA,UACA,SAAS,2BAA2B,YAAa,WAAW,MAAM;AAAA,QACtE,CAAC;AAAA,MACL,CAAC;AAAA,IAEL;AAEA,WAAO;AAAA,EACX;AACJ;AA3U+C;AAAA,MAA1C,wBAAU,aAAa;AAAA,GAFf,eAEkC;AACJ;AAAA,MAAtC,wBAAU,SAAS;AAAA,GAHX,eAG8B;AACQ;AAAA,MAA9C,uBAAS,kBAAkB;AAAA,GAJnB,eAIsC;AACF;AAAA,MAA5C,uBAAS,gBAAgB;AAAA,GALjB,eAKoC;AACD;AAAA,MAA3C,wBAAU,cAAc;AAAA,GANhB,eAMmC;AACI;AAAA,MAA/C,wBAAU,kBAAkB;AAAA,GAPpB,eAOuC;AACG;AAAA,MAAlD,wBAAU,qBAAqB;AAAA,GARvB,eAQ0C;AACR;AAAA,MAA1C,wBAAU,aAAa;AAAA,GATf,eASkC;AACG;AAAA,MAA7C,wBAAU,gBAAgB;AAAA,GAVlB,eAUqC;AAVrC,iBAAN;AAAA,MADN,mBAAK,gBAAgB;AAAA,GACT;;;ACpBN,IAAM,UAAU;;;ACDvB,IAAAC,eAAmK;AAG5J,IAAM,sBAAN,cAAkC,sBAAS;AAAA,EAIvC,cAAc,KAA2D;AAPpF;AAQQ,QAAI,CAAC,KAAK,cAAc;AACpB,kCAAe,mBAAmB,yBAAY,kBAAkB,yBAAyB,GAAG,KAAK,KAAK,QAAQ,UAAU,CAAC;AACzH,aAAO;AAAA,IACX;AAEA,UAAM,UAAU,QAAQ,eAClB,IAAI,oBAAoB,KAAK,oBAAoB,KAAK,cAAc,KAAK,aAAa,IACtF,IAAI,oBAAoB,KAAK,oBAAoB,KAAK,cAAc,KAAK,aAAa;AAE5F,UAAM,eAAe,KAAK,aAAa,aAAa;AAEpD,QAAI,mBAAmD,QAAQ,YAAY;AAE3E,QAAI,oBAAoB,iBAAiB,WAAW,CAAC,cAAc;AAE/D,YAAM,wBAAwB,CAAC,MAA2C;AAvBtF,YAAAC;AAuB0F,gDACvE,IADuE;AAAA,UAE1E,UAASA,MAAA,EAAE,YAAF,gBAAAA,IAAW,OAAO,CAAC,SAAS,CAAC,KAAK,aAAa,IAAI,CAAC,SAAS,sBAAsB,IAAI;AAAA,QACpG;AAAA;AACA,yBAAmB,sBAAsB,gBAAgB;AAAA,IAC7D;AAEA,UAAM,kBAAiB,gBAAK,mBAAmB,IAAI,oBAAoB,MAAhD,mBAAmD,kBAAnD,mBAAkE;AACzF,QAAI,gBAAgB;AAChB,yBAAmB,oBAAoB,wBAAwB,kBAAkB,gBAAgB,QAAQ,gBAAgB,CAAC;AAAA,IAC9H;AACA,WAAO,KAAK,eAAe,gBAAgB;AAAA,EAC/C;AAAA;AAAA,EAGQ,eAAe,UAAmE;AACtF,QAAI,CAAC,UAAU;AACX,aAAO;AAAA,IACX;AAEA,UAAM,aAAa,CAAC,MAAsC;AA3ClE;AA4CY,kCAAU;AACV,kCAAU;AACV,mCAAG,YAAH,mBAAY,QAAQ,OAAK,WAAW,CAAC;AACrC,aAAO;AAAA,IACX;AAEA,WAAO,WAAW,QAAQ;AAAA,EAC9B;AAAA,EAEA,OAAe,YAA+C,UAAa;AACvE,QAAI,aAA6B,CAAC;AAClC,UAAM,UAAU,CAAC,SAAY;AACzB,iBAAW,KAAK,IAAI,IAAI;AACxB,UAAI,KAAK,SAAS;AACd,aAAK,QAAQ,QAAQ,OAAK,QAAQ,CAAM,CAAC;AAAA,MAC7C;AAAA,IACJ;AACA,YAAQ,QAAQ;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,wBAA8C,kBAA6C,gBAAgC,cAAiF;AApE/N;AAsEQ,UAAM,iBAAiB,KAAK,YAAY,gBAAgB;AACxD,QAAI,qBAAyC,iCAAK,mBAAL,EAAuB,SAAS,CAAC,EAAE;AAEhF,WAAO,QAAQ,cAAc,EAAE,QAAQ,CAAC,CAAC,OAAO,UAAU,MAA2C;AAzE7G,UAAAA,KAAA;AA2EY,YAAM,mBAAmB,aAAa,KAAK;AAG3C,UAAI,qBAAqB;AAAM;AAE/B,UAAI,oBAAoB,QAAW;AAC/B,uBAAE,SAAS,kCAAkC,KAAK,GAAG;AACrD,eAAO;AAAA,MACX;AAEA,YAAM,WAAW,eAAe,iBAAiB,IAAI;AACrD,UAAI,UAAU;AACV,YAAI,SAAS,SAAS;AAClB,gBAAM,WAAW,WAAW,IAAI,eAAa;AACzC,kBAAM,UAAW,iBAAyB,SAAS;AACnD,gBAAI,WAAW,QAAW;AACtB,6BAAE,SAAS,kCAAkC,KAAK,IAAI,SAAS,GAAG;AAClE,qBAAO;AAAA,YACX;AACA,mBAAO,eAAe,OAAO;AAAA,UACjC,CAAC,EAAE,OAAO,OAAK,MAAM,MAAS;AAE9B,cAAI,SAAS,SAAS,GAAG;AACrB,qBAAS,UAAU;AACnB,aAAAA,MAAA,mBAAmB,YAAnB,gBAAAA,IAA4B,KAAK;AAAA,UACrC;AAAA,QACJ,OAAO;AAEH,mCAAmB,YAAnB,mBAA4B,KAAK;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,UAAI,wBAAmB,YAAnB,mBAA4B,WAAU,GAAG;AACzC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;AA3G+C;AAAA,MAA1C,uBAAS,cAAc;AAAA,GAFf,oBAEkC;AAFlC,sBAAN;AAAA,MADN,mBAAK,qBAAqB;AAAA,GACd;AAiJb,IAAM,sBAAN,MAAyE;AAAA,EAErE,YAAoB,oBAAgD,cAAqC,eAA8B;AAAnH;AAAgD;AAAqC;AAAA,EAAgC;AAAA,EAEzI,cAAuD;AACnD,UAAM,iBAAiB,KAAK,cAAc,kBAAkB;AAC5D,UAAM,cAAc,CAAC,WAAmB,aAAqB,WAAsB,KAA0B,aAAa,UAAU;AAChI,aAAO;AAAA,QACH,MAAM,eAAe,WAAW,WAAW;AAAA,QAC3C,QAAQ,MAAM,KAAK,aAAa,iBAAiB,EAAE,UAAU,CAAC;AAAA,QAC9D,MAAM;AAAA,QACN,aAAa;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,MACH,MAAM,eAAe,cAAc,aAAa;AAAA,MAChD,MAAM;AAAA,MACN,SAAS;AAAA,QACL;AAAA,UACI,MAAM;AAAA,UACN,MAAM,eAAe,eAAe,QAAQ;AAAA,UAC5C,SAAS;AAAA,YACL,YAAY,iBAAiB,gBAAgB,iBAAiB,oBAAoB;AAAA,YAClF,YAAY,iBAAiB,gBAAgB,iBAAiB,oBAAoB;AAAA,YAClF,YAAY,oBAAoB,qBAAqB,oBAAoB,uBAAuB;AAAA,UACpG;AAAA,QACJ;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,MAAM,eAAe,YAAY,KAAK;AAAA,UACtC,SAAS;AAAA,YACL,YAAY,cAAc,gBAAgB,cAAc,iBAAiB;AAAA,YACzE,YAAY,cAAc,gBAAgB,cAAc,iBAAiB;AAAA,YACzE,YAAY,iBAAiB,qBAAqB,iBAAiB,oBAAoB;AAAA,UAC3F;AAAA,QACJ;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,MAAM,eAAe,YAAY,KAAK;AAAA,UACtC,SAAS;AAAA,YACL,YAAY,OAAO,YAAY,OAAO,UAAU;AAAA,YAChD,YAAY,SAAS,cAAc,SAAS,YAAY;AAAA,UAC5D;AAAA,QACJ;AAAA,QACA,YAAY,QAAQ,aAAa,QAAQ,gBAAgB;AAAA,QACzD;AAAA,UACI,MAAM;AAAA,UACN,MAAM,eAAe,WAAW,eAAe;AAAA,UAC/C,SAAS;AAAA,YACL,YAAY,WAAW,gBAAgB,WAAW,cAAc;AAAA,YAChE,YAAY,UAAU,eAAe,UAAU,aAAa;AAAA,UAChE;AAAA,QACJ;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,MAAM,eAAe,aAAa,MAAM;AAAA,UACxC,SACI;AAAA,YACI,YAAY,QAAQ,aAAa,QAAQ,WAAW;AAAA,YACpD,YAAY,eAAe,gBAAgB,eAAe,kBAAkB;AAAA,YAC5E,YAAY,kBAAkB,qBAAqB,kBAAkB,qBAAqB;AAAA,UAC9F;AAAA,QACR;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,aAAa;AAAA;AAAA,UACb,MAAM,eAAe,oBAAoB,aAAa;AAAA,UACtD,SACI;AAAA,YACI,YAAY,kBAAkB,kBAAkB,aAAa,kBAAkB,KAAK;AAAA,UACxF;AAAA,QACR;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,aAAa;AAAA,UACb,MAAM,eAAe,qBAAqB,cAAc;AAAA,UACxD,SACI;AAAA,YACI,YAAY,gBAAgB,gBAAgB,WAAW,gBAAgB,IAAI;AAAA,YAC3E,YAAY,iBAAiB,iBAAiB,YAAY,iBAAiB,IAAI;AAAA,UACnF;AAAA,QACR;AAAA,QACA;AAAA,UACI,MAAM;AAAA,UACN,MAAM,eAAe,oBAAoB,aAAa;AAAA,UACtD,SAAS;AAAA,YACL,YAAY,mBAAmB,sBAAsB,mBAAmB,sBAAsB;AAAA,YAC9F,YAAY,mBAAmB,sBAAsB,mBAAmB,sBAAsB;AAAA,UAClG;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,MAAM,eAAE,iBAAiB,SAAS,KAAK,oBAAoB,MAAS;AAAA,IACxE;AAAA,EACJ;AAAA,EAEA,kBAA4D;AACxD,WAAO;AAAA,MACH,aAAa;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,eAAe;AAAA,QACf,kBAAkB;AAAA,MACtB;AAAA,MACA,UAAU;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,YAAY;AAAA,QACZ,eAAe;AAAA,MACnB;AAAA,MACA,UAAU;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA,MACd;AAAA,MACA,WAAW;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA,cAAc;AAAA,QACV,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA,MACb;AAAA,MACA,WAAW;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,QACb,gBAAgB;AAAA,MACpB;AAAA,MACA,kBAAkB;AAAA,QACd,MAAM;AAAA,QACN,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,QACjB,aAAa;AAAA;AAAA,MACjB;AAAA,MACA,mBAAmB;AAAA,QACf,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACd;AAAA,MACA,kBAAkB;AAAA,QACd,MAAM;AAAA,QACN,WAAW;AAAA;AAAA,QAEX,UAAU;AAAA,QACV,WAAW;AAAA,QACX,SAAS;AAAA,MACb;AAAA;AAAA,MAEA,YAAY;AAAA;AAAA,MAEZ,kBAAkB;AAAA,IACtB;AAAA,EACJ;AACJ;AAgBA,IAAM,sBAAN,MAA0E;AAAA,EAEtE,YAAoB,oBAAgD,cAAqC,eAA8B;AAAnH;AAAgD;AAAqC;AAAA,EAAgC;AAAA,EAEzI,cAAuD;AACnD,UAAM,iBAAiB,KAAK,cAAc,kBAAkB;AAC5D,UAAM,cAAc,CAAC,WAAmB,aAAqB,WAAsB,KAA0B,aAAa,UAAU;AAChI,aAAO;AAAA,QACH,MAAM,eAAe,WAAW,WAAW;AAAA,QAC3C,QAAQ,MAAM,KAAK,aAAa,4BAA4B,SAAS;AAAA,QACrE,MAAM;AAAA,QACN,aAAa;AAAA,MACjB;AAAA,IACJ;AAEA,WAAO;AAAA,MACH,MAAM,eAAe,cAAc,aAAa;AAAA,MAChD,MAAM;AAAA,MACN,SAAS;AAAA,QACL;AAAA,UACI,MAAM,eAAe,eAAe,QAAQ;AAAA,UAC5C,SAAS;AAAA,YACL,YAAY,iBAAiB,gBAAgB,iBAAiB,oBAAoB;AAAA,YAClF,YAAY,iBAAiB,gBAAgB,iBAAiB,oBAAoB;AAAA,YAClF,YAAY,oBAAoB,qBAAqB,oBAAoB,uBAAuB;AAAA,UACpG;AAAA,UACA,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,MAAM,eAAe,YAAY,KAAK;AAAA,UACtC,SAAS;AAAA,YACL,YAAY,cAAc,gBAAgB,cAAc,iBAAiB;AAAA,YACzE,YAAY,cAAc,gBAAgB,cAAc,iBAAiB;AAAA,YACzE,YAAY,iBAAiB,qBAAqB,iBAAiB,oBAAoB;AAAA,UAC3F;AAAA,UACA,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,MAAM,eAAe,YAAY,KAAK;AAAA,UACtC,SAAS;AAAA,YACL,YAAY,OAAO,YAAY,OAAO,UAAU;AAAA,YAChD,YAAY,SAAS,cAAc,SAAS,YAAY;AAAA,UAC5D;AAAA,UACA,MAAM;AAAA,QACV;AAAA,QACA,YAAY,QAAQ,aAAa,QAAQ,gBAAgB;AAAA,QACzD;AAAA,UACI,MAAM,eAAe,WAAW,eAAe;AAAA,UAC/C,SAAS;AAAA,YACL,YAAY,WAAW,gBAAgB,WAAW,cAAc;AAAA,YAChE,YAAY,UAAU,eAAe,UAAU,aAAa;AAAA,UAChE;AAAA,UACA,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,MAAM,eAAe,aAAa,MAAM;AAAA,UACxC,SACI;AAAA,YACI,YAAY,QAAQ,aAAa,QAAQ,WAAW;AAAA,YACpD,YAAY,eAAe,gBAAgB,eAAe,kBAAkB;AAAA,YAC5E,YAAY,kBAAkB,qBAAqB,kBAAkB,qBAAqB;AAAA,UAC9F;AAAA,UACJ,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,MAAM,eAAe,cAAc,OAAO;AAAA,UAC1C,SACI;AAAA,YACI,YAAY,aAAa,mBAAmB,aAAa,gBAAgB;AAAA,YACzE,YAAY,aAAa,mBAAmB,aAAa,gBAAgB;AAAA,YACzE,YAAY,eAAe,oBAAoB,eAAe,kBAAkB;AAAA,YAChF,YAAY,gBAAgB,sBAAsB,gBAAgB,mBAAmB;AAAA,YACrF,YAAY,aAAa,mBAAmB,aAAa,gBAAgB;AAAA,UAC7E;AAAA,UACJ,MAAM;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM,eAAe,oBAAoB,aAAa;AAAA,UACtD,SACI;AAAA,YACI,YAAY,WAAW,iBAAiB,WAAW,gBAAgB,IAAI;AAAA,YACvE,YAAY,kBAAkB,kBAAkB,aAAa,kBAAkB,KAAK;AAAA,YACpF,YAAY,YAAY,kBAAkB,YAAY,iBAAiB,IAAI;AAAA,YAC3E,YAAY,aAAa,mBAAmB,aAAa,kBAAkB,IAAI;AAAA,UACnF;AAAA,UACJ,MAAM;AAAA,UACN,aAAa;AAAA;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM,eAAe,qBAAqB,cAAc;AAAA,UACxD,SACI;AAAA,YACI,YAAY,WAAW,gBAAgB,WAAW,cAAc;AAAA,YAChE,YAAY,YAAY,iBAAiB,YAAY,eAAe;AAAA,UACxE;AAAA,UACJ,MAAM;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM,eAAe,oBAAoB,aAAa;AAAA,UACtD,SACI;AAAA,YACI,YAAY,WAAW,gBAAgB,WAAW,cAAc;AAAA,YAChE,YAAY,aAAa,kBAAkB,aAAa,gBAAgB;AAAA,UAC5E;AAAA,UACJ,MAAM;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,MAAM,eAAe,oBAAoB,aAAa;AAAA,UACtD,SAAS;AAAA,YACL,YAAY,mBAAmB,sBAAsB,mBAAmB,sBAAsB;AAAA,YAC9F,YAAY,mBAAmB,sBAAsB,mBAAmB,sBAAsB;AAAA,UAClG;AAAA,UACA,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA,MAAM,eAAE,iBAAiB,SAAS,KAAK,oBAAoB,MAAS;AAAA,IACxE;AAAA,EACJ;AAAA,EAEA,kBAA4D;AACxD,WAAO;AAAA,MACH,aAAa;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,eAAe;AAAA,QACf,kBAAkB;AAAA,MACtB;AAAA,MACA,UAAU;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,YAAY;AAAA,QACZ,eAAe;AAAA,MACnB;AAAA,MACA,UAAU;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,OAAO;AAAA,QACP,UAAU;AAAA,MACd;AAAA,MACA,WAAW;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA,cAAc;AAAA,QACV,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA,MACb;AAAA,MACA,WAAW;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,QACb,gBAAgB;AAAA,MACpB;AAAA,MACA,YAAY;AAAA,QACR,MAAM;AAAA,QACN,WAAW;AAAA,QACX,WAAW;AAAA,QACX,aAAa;AAAA,QACb,cAAc;AAAA,QACd,WAAW;AAAA,MACf;AAAA,MACA,kBAAkB;AAAA,QACd,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW;AAAA,QACX,UAAU;AAAA,QACV,WAAW;AAAA,MACf;AAAA,MACA,mBAAmB;AAAA,QACf,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,MACd;AAAA,MACA,kBAAkB;AAAA,QACd,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW;AAAA,MACf;AAAA,MACA,kBAAkB;AAAA,QACd,MAAM;AAAA,QACN,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,QACjB,aAAa;AAAA;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC7fA,IAAAC,eAcO;AACP,+BAAiC;AAI1B,IAAM,uBAAN,cAAmC,sBAA0C;AAAA,EAQzE,wBACH,QAAkB,QAAwB,WAAqB,QAC/C;AA7BxB;AA8BQ,UAAM,oBAAoB,OAAO,kBAAkB,IAAI,0CAAiB,CAAC;AAEzE,UAAM,uBAAsB,qCAAU,iCAAQ,YAAY,wBAA9B,YAAqD,iCAAQ,YAAY,sBAAzE,YAA8F,CAAC;AAE3H,UAAM;AAAA,MACF;AAAA,MAAyB;AAAA,MAAyB;AAAA,MAClD;AAAA,MAAyB;AAAA,MAA4B;AAAA,IACzD,IAAI;AAEJ,sBAAkB,KAAK,CAAC,CAAC,WAAW,KAAK,mBAAmB,oBAAoB;AAAA,MAC5E,oBAAoB;AAAA,MACpB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,yBAAyB,CAAC,CAAC;AAAA,MAC3B,yBAAyB,CAAC,CAAC;AAAA,MAC3B,sBAAsB,CAAC,CAAC;AAAA,MACxB,yBAAyB,CAAC,CAAC;AAAA,MAC3B,4BAA4B,CAAC,CAAC,gBAAgB,CAAC,CAAC;AAAA,MAChD,gBAAgB,MAAM;AAAA,MAAC;AAAA,IAC3B,CAAC,GAAG,YAAY;AAEhB,QAAI,cAAc;AACd,wBAAkB,gBAAgB,YAAY;AAAA,IAClD;AAEA,WAAO;AAAA,EACX;AAAA,EAEO,kBAAkB,EAAE,QAAQ,eAAe,YAAY,GAAkC;AAC5F,SAAK,wBAAwB;AAE7B,UAAM,oBAAoB,KAAK,wBAAwB,MAAM,QAAQ,MAAM,aAAa;AACxF,UAAM,YAAY,KAAK,cAAc,kBAAkB;AACvD,UAAM,cAAc,KAAK,YAAY,uBAAuB,EAAE,QAAQ,MAAO;AAC7E,UAAM,iBAAiB,SAAS,KAAK,aAAa,iBAAiB,IAAI;AAEvE,SAAK,4BAA4B,KAAK,WAAW,IAAI,sBAAS;AAAA,MAC1D,OAAO,UAAU,iBAAiB,gBAAgB;AAAA,MAClD,WAAW;AAAA,MACX,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,MACV,kBAAkB,MAAM;AA7EpC;AA8EgB,mBAAK,aAAa,yBAAyB,kBAAkB,OAAO,CAAC,MAArE,mBAAwE;AACxE,aAAK,4BAA4B,MAAM,MAAM;AAAA,MACjD;AAAA,MACA,gBAAgB,CAAC,UAAU;AACvB,cAAM,QAAQ,KAAK,oBAAqB,OAAO;AAC/C,aAAK,YAAY,KAAK,mBAAmB;AACzC,aAAK,sBAAsB;AAC3B,aAAK,4BAA4B;AACjC,aAAK,4BAA4B,OAAO,MAAM;AAC9C,YAAI,QAAQ;AACR,eAAK,UAAU,oBAAoB,EAAE,QAAQ,gBAAgB,aAAa,YAAY,GAAG,OAAO,OAAO,IAAI;AAAA,QAC/G;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AAEF,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEO,0BAAgC;AACnC,QAAI,KAAK,2BAA2B;AAChC,WAAK,YAAY,KAAK,yBAAyB;AAAA,IACnD;AAAA,EACJ;AAAA,EAEQ,4BAA4B,SAAkB,QAA8B;AAChF,UAAM,QAA0D;AAAA,MAC5D,MAAM,oBAAO;AAAA,MACb;AAAA,MACA,cAAc;AAAA,MACd,KAAK;AAAA,MACL,QAAQ,0BAAU;AAAA,IACtB;AACA,SAAK,aAAa,cAAc,KAAK;AAAA,EACzC;AACJ;AA5FgD;AAAA,MAA3C,wBAAU,cAAc;AAAA,GADhB,qBACmC;AACH;AAAA,MAAxC,wBAAU,WAAW;AAAA,GAFb,qBAEgC;AACE;AAAA,MAA1C,wBAAU,aAAa;AAAA,GAHf,qBAGkC;AAHlC,uBAAN;AAAA,MADN,mBAAK,sBAAsB;AAAA,GACf;;;ACnBb,IAAAC,eAYO;AAIA,IAAM,oBAAN,cAAgC,sBAAS;AAAA,EASrC,WAAW,QAAkB,QAA4B,eAA8C;AAC1G,UAAM,WAAW,OAAO,kBAAkB,IAAI,wBAAW,GAAG;AAAA,MACxD,QAAQ,0BAAU;AAAA,MAClB,MAAM;AAAA,MACN,OAAO;AAAA,IACX,CAAC,CAAC;AAEF,UAAM,YAAY,KAAK,aAAa,MAAM;AAC1C,UAAM,kBAAkB,KAAK,eAAe,kBAAkB,WAAW,0BAAU,MAAM,aAAa;AAEtG,aAAS,aAAa,eAAe;AAErC,WAAO;AAAA,EACX;AAAA,EAEQ,aAAa,QAA2C;AAC5D,UAAM,eAAe,KAAK,sBAAsB,MAAM;AACtD,QAAI;AAEJ,UAAM,sBAAsB,iCAAQ,YAAY;AAChD,QAAI,MAAM,QAAQ,mBAAmB,GAAG;AACpC,eAAS;AAAA,IACb,WAAW,OAAO,wBAAwB,YAAY;AAClD,eAAS,oBAAoB,KAAK,mBAAmB,oBAAoB;AAAA,QACrE;AAAA,QACA;AAAA,MACJ,CAAC,CAAC;AAAA,IACN,OAAO;AACH,YAAM,WAAW,KAAK,mBAAmB,YAAY,kBAAkB;AACvE,UAAI,YAAY,QAAQ;AACpB,iBAAS,SAAS;AAAA,UACd;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,iBAAS;AAAA,MACb;AAAA,IACJ;AAIA,mBAAE,uBAAuB,QAAQ,kBAAkB,mBAAmB;AAEtE,WAAO;AAAA,EACX;AAAA,EAEQ,sBAAsB,QAA2B;AACrD,UAAM,SAAmB,CAAC;AAE1B,UAAM,sBAAsB,KAAK,YAAY,oBAAoB;AAEjE,QAAI,CAAC,QAAQ;AACT,UAAI,CAAC,qBAAqB;AACtB,eAAO,KAAK,eAAe;AAAA,MAC/B;AACA,aAAO,KAAK,cAAc;AAC1B,aAAO;AAAA,IACX;AAEA,UAAM,eAAe,CAAC,OAAO,UAAU,EAAE;AAEzC,UAAM,gBAAgB,KAAK,YAAY,mBAAmB,EAAE;AAC5D,UAAM,gBAAgB,gBAAgB;AAEtC,UAAM,aAAa,OAAO,aAAa;AACvC,UAAM,gBAAgB,OAAO,gBAAgB;AAC7C,UAAM,YAAY,OAAO,UAAU;AACnC,UAAM,cAAc,KAAK,YAAY,YAAY;AAEjD,UAAM,qBAAqB,KAAK,SAAS,QAAQ,MAAM;AAEvD,UAAM,gBAAgB,KAAK,mBAAmB,IAAI,UAAU;AAE5D,UAAM;AAAA;AAAA,MAED,aAAa,iBAAiB,cAE5B,CAAC;AAAA;AAER,QAAI,CAAC,uBAAuB,OAAO,WAAW,GAAG;AAC7C,YAAM,OAAO,OAAO,QAAQ;AAC5B,UAAI,SAAS,OAAO;AAChB,eAAO,KAAK,eAAe;AAAA,MAC/B;AACA,UAAI,SAAS,QAAQ;AACjB,eAAO,KAAK,gBAAgB;AAAA,MAChC;AACA,UAAI,MAAM;AACN,eAAO,KAAK,YAAY;AAAA,MAC5B;AACA,aAAO,KAAK,kBAAkB,mBAAmB;AAAA,IACrD;AAEA,QAAI,KAAK,YAAY,wBAAwB,MAAM,GAAG;AAClD,aAAO,KAAK,cAAc;AAC1B,aAAO,KAAK,kBAAkB,mBAAmB;AAAA,IACrD;AAEA,QAAI,cAAc;AACd,aAAO,KAAK,YAAY;AAAA,IAC5B;AAEA,QAAI,eAAe;AACf,aAAO,KAAK,iBAAiB;AAAA,IACjC;AAEA,QAAI,gBAAgB,eAAe;AAC/B,aAAO,KAAK,kBAAkB,mBAAmB;AAAA,IACrD;AAEA,WAAO,KAAK,cAAc;AAC1B,WAAO,KAAK,aAAa;AACzB,WAAO,KAAK,kBAAkB,mBAAmB;AAEjD,UAAM,eAAe,OAAO,UAAU,EAAE;AACxC,QAAI,cAAc;AACd,aAAO,KAAK,YAAY;AAAA,IAC5B,WAAW,iBAAiB,OAAO,UAAU,GAAG;AAC5C,UAAI,OAAO,iBAAiB,GAAG;AAC3B,cAAM,cAAc,KAAK,YAAY,uBAAuB,MAAM;AAClE,YAAI,CAAC,aAAa;AACd,iBAAO,KAAK,YAAY;AAAA,QAC5B;AAAA,MACJ,OAAO;AACH,eAAO,KAAK,UAAU;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO,KAAK,kBAAkB,mBAAmB;AACjD,QAAI,CAAC,qBAAqB;AACtB,aAAO,KAAK,eAAe;AAAA,IAC/B;AACA,WAAO,KAAK,cAAc;AAM1B,UAAM,yBAAyB,uBAAuB,iBAAiB,iBAAiB,cAAc,IAAI;AAE1G,QAAI,wBAAwB;AACxB,aAAO,KAAK,WAAW;AACvB,aAAO,KAAK,aAAa;AAAA,IAC7B;AAEA,WAAO;AAAA,EACX;AACJ;AA3Ja,kBAOM,sBAAsB;AANS;AAAA,MAA7C,wBAAU,gBAAgB;AAAA,GADlB,kBACqC;AACH;AAAA,MAA1C,wBAAU,aAAa;AAAA,GAFf,kBAEkC;AACH;AAAA,MAAvC,wBAAU,UAAU;AAAA,GAHZ,kBAG+B;AACK;AAAA,MAA5C,wBAAU,eAAe;AAAA,GAJjB,kBAIoC;AACF;AAAA,MAA1C,wBAAU,aAAa;AAAA,GALf,kBAKkC;AALlC,oBAAN;AAAA,MADN,mBAAK,mBAAmB;AAAA,GACZ;;;AChBb,IAAAC,eAYO;AAUA,IAAM,YAAN,cAAwB,sBAAS;AAAA,EAK7B,oBACH,oBACA,OACA,GACA,qBACI;AACJ,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,kBAAkB,aAAa;AACrC,QAAK,CAAC,uBAAuB,CAAC,mBAAoB,CAAC,aAAa;AAAE;AAAA,IAAQ;AAE1E,UAAM,YAAY,KAAK,mBAAmB,YAAY;AACtD,QAAI,CAAC,MAAM,SAAS,UAAU,aAAa,KAAK,UAAU,kBAAkB,UAAU,MAAM;AAExF;AAAA,IACJ;AAEA,SAAK,gBAAgB,kBAAkB;AAAA,EAC3C;AAAA,EAEO,kCACH,eACA,oBACA,OACI;AACJ,QAAI;AAEJ,QAAI,SAAS,MAAM,SAAS,MAAM,iBAAiB,eAAe;AAC9D,sBAAgB,MAAM;AAAA,IAC1B;AAEA,kBAAc,iBAAiB,EAAE,cAAc,CAAC;AAIhD,UAAM,cAAc,KAAK,aAAa,eAAe;AACrD,UAAM,YAAY,KAAK,mBAAmB,YAAY;AAEtD,QAAI,UAAU,kBAAkB,UAAU,MAAM;AAC5C,UAAI,aAAa;AACb,cAAM,EAAE,UAAU,WAAW,OAAO,IAAI;AACxC,aAAK,aAAa,eAAe,EAAE,UAAU,QAAQ,WAAW,mBAAmB,MAAM,6BAA6B,KAAK,CAAC;AAAA,MAChI,OAAO;AACH,aAAK,gBAAgB,kBAAkB;AAAA,MAC3C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,cACH,YACA,YACA,kBACgB;AAGhB,QAAI,CAAC,KAAK,mBAAmB,IAAI,gCAAgC,GAAG;AAEhE,UAAI,eAAe,WAAW,WAAW,WAAW,UAAU;AAAE;AAAA,MAAQ;AAAA,IAC5E;AAIA,QAAI,YAAY;AACZ,WAAK,gCAAgC,UAAU;AAAA,IACnD;AAEA,QAAI,KAAK,mBAAmB,IAAI,qBAAqB,GAAG;AAAE;AAAA,IAAQ;AAElE,UAAM,eAAqC,kCAAc,WAAY,QAAQ,CAAC;AAC9E,QAAI,iBAAiB,YAAY,GAAG;AAChC,YAAM,QAAQ,kCAAc;AAC5B,YAAO,eAAe;AAAA,IAC1B;AAAA,EACJ;AAAA,EAEQ,gBAAgB,oBAAkD;AACtE,UAAM,EAAE,QAAQ,aAAa,gBAAgB,YAAY,IAAI;AAE7D,UAAM,uBAAuB,KAAK,YAAY,uBAAuB,EAAE,KAAK,SAAO,QAAQ,MAAM;AAEjG,QAAI,wBAAwB,eAAe,eAAE,UAAU,WAAW,GAAG;AACjE,YAAM,cAAc,KAAK,aAAa,mBAAmB,WAAW;AACpE,UAAI,aAAa;AACb,YAAI,QAAQ;AACR,eAAK,wBAAwB,eAAe,MAAM;AAAA,QACtD;AACA,oBAAY,MAAM;AAAA,MACtB;AAAA,IACJ,WAGS,kBAAkB,gBAAgB,IAAI;AAC3C,YAAM,aAAa,KAAK,YAAY,uBAAuB;AAC3D,YAAM,gBAAgB,WAAW,WAAW,KAAK,eAAE,KAAK,UAAU;AAElE,UAAI,eAAe;AACf,aAAK,aAAa,oBAAoB;AAAA,UAClC,gBAAgB;AAAA,YACZ,gBAAgB,eAAe;AAAA,YAC/B,QAAQ;AAAA,UACZ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,gCAAgC,YAA8B;AAKlE,UAAM,EAAE,mBAAmB,IAAI;AAC/B,UAAM,EAAE,MAAM,IAAI;AAElB,QAAI,mBAAmB,IAAI,4BAA4B,KAAK,UAAU,GAAG;AACrE,iBAAW,eAAe;AAAA,IAC9B;AAAA,EACJ;AACJ;AAzHgD;AAAA,MAA3C,wBAAU,cAAc;AAAA,GADhB,UACmC;AACW;AAAA,MAAtD,wBAAU,yBAAyB;AAAA,GAF3B,UAE8C;AACZ;AAAA,MAA1C,wBAAU,aAAa;AAAA,GAHf,UAGkC;AAHlC,YAAN;AAAA,MADN,mBAAK,WAAW;AAAA,GACJ;;;ARXN,IAAM,aAAqB;AAAA,EAC9B,SAAS;AAAA,EACT,YAAY,yBAAY;AAAA,EACxB,OAAO,CAAC,uBAAuB,oBAAoB,gBAAgB,qBAAqB,sBAAsB,mBAAmB,SAAS;AAAA,EAC1I,kBAAkB;AAAA,IACd;AAAA,EACJ;AACJ;",
  "names": ["import_core", "_a", "import_core", "import_core", "import_core", "_a", "import_core", "import_core", "import_core"]
}
