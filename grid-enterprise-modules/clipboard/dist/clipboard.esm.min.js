/**
          * @ag-grid-enterprise/clipboard - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v30.0.0
          * @link https://www.ag-grid.com/
          * @license Commercial
          */
/**
          * @ag-grid-enterprise/clipboard - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v30.0.0
          * @link https://www.ag-grid.com/
          * @license Commercial
          */
import{Autowired as e,Optional as t,PostConstruct as o,Bean as i,BeanStub as r,_ as s,Events as l,ChangedPath as a,ModuleNames as n}from"@ag-grid-community/core";import{EnterpriseCoreModule as c}from"@ag-grid-enterprise/core";import{CsvExportModule as d}from"@ag-grid-community/csv-export";var p,u=function(e,t,o,i){var r,s=arguments.length,l=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,o,i);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(l=(s<3?r(l):s>3?r(t,o,l):r(t,o))||l);return s>3&&l&&Object.defineProperty(t,o,l),l};var h;!function(e){e[e.CellRange=0]="CellRange",e[e.SelectedRows=1]="SelectedRows",e[e.FocusedCell=2]="FocusedCell"}(h||(h={}));let g=p=class extends r{constructor(){super(...arguments),this.lastPasteOperationTime=0,this.navigatorApiFailed=!1}init(){this.logger=this.loggerFactory.create("ClipboardService"),"clientSide"===this.rowModel.getType()&&(this.clientSideRowModel=this.rowModel),this.ctrlsService.whenReady(e=>{this.gridCtrl=e.gridCtrl})}pasteFromClipboard(){this.logger.log("pasteFromClipboard");!this.gridOptionsService.is("suppressClipboardApi")&&!this.navigatorApiFailed&&navigator.clipboard&&navigator.clipboard.readText?navigator.clipboard.readText().then(this.processClipboardData.bind(this)).catch(e=>{s.doOnce(()=>{console.warn(e),console.warn("AG Grid: Unable to use the Clipboard API (navigator.clipboard.readText()). The reason why it could not be used has been logged in the previous line. For this reason the grid has defaulted to using a workaround which doesn't perform as well. Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API")},"clipboardApiError"),this.navigatorApiFailed=!0,this.pasteFromClipboardLegacy()}):this.pasteFromClipboardLegacy()}pasteFromClipboardLegacy(){let e=!1;const t=t=>{const o=(new Date).getTime();o-this.lastPasteOperationTime<50&&(e=!0,t.preventDefault()),this.lastPasteOperationTime=o};this.executeOnTempElement(e=>{e.addEventListener("paste",t),e.focus({preventScroll:!0})},o=>{const i=o.value;e?this.refocusLastFocusedCell():this.processClipboardData(i),o.removeEventListener("paste",t)})}refocusLastFocusedCell(){const e=this.focusService.getFocusedCell();e&&this.focusService.setFocusedCell({rowIndex:e.rowIndex,column:e.column,rowPinned:e.rowPinned,forceBrowserFocus:!0})}getClipboardDelimiter(){const e=this.gridOptionsService.get("clipboardDelimiter");return s.exists(e)?e:"\t"}processClipboardData(e){if(null==e)return;let t=p.stringToArray(e,this.getClipboardDelimiter());const o=this.gridOptionsService.getCallback("processDataFromClipboard");if(o&&(t=o({data:t})),null==t)return;this.gridOptionsService.is("suppressLastEmptyLineOnPaste")&&this.removeLastLineIfBlank(t);this.doPasteOperation((e,o,i,r)=>{this.rangeService&&this.rangeService.isMoreThanOneCell()&&!this.hasOnlyOneValueToPaste(t)?this.pasteIntoActiveRange(t,e,o,r):this.pasteStartingFromFocusedCell(t,e,o,i,r)})}static stringToArray(e,t=","){const o=[],i=e=>"\r"===e||"\n"===e;let r=!1;if(""===e)return[[""]];for(let s=0,l=0,a=0;a<e.length;a++){const n=e[a-1],c=e[a],d=e[a+1],p=()=>{o[s]||(o[s]=[]),o[s][l]||(o[s][l]="")};if(p(),'"'===c&&(r?'"'===d?(o[s][l]+='"',a++):r=!1:(void 0===n||n===t||i(n))&&(r=!0)),!r&&'"'!==c){if(c===t){l++,p();continue}if(i(c)){l=0,s++,p(),"\r"===c&&"\n"===d&&a++;continue}}o[s][l]+=c}return o}doPasteOperation(e){const t=this.gridOptionsService.api,o=this.gridOptionsService.columnApi;let i;if(this.eventService.dispatchEvent({type:l.EVENT_PASTE_START,api:t,columnApi:o,source:"clipboard"}),this.clientSideRowModel){const e=this.gridOptionsService.is("aggregateOnlyChangedColumns");i=new a(e,this.clientSideRowModel.getRootNode())}const r={},s=[];e(r,s,this.focusService.getFocusedCell(),i),i&&this.clientSideRowModel.doAggregate(i),this.rowRenderer.refreshCells(),this.dispatchFlashCells(r),this.fireRowChanged(s),this.refocusLastFocusedCell();const n={type:l.EVENT_PASTE_END,source:"clipboard"};this.eventService.dispatchEvent(n)}pasteIntoActiveRange(e,t,o,i){const r=this.getRangeSize()%e.length!=0;let s=0,l=0;this.iterateActiveRanges(!1,(a,n,c,d)=>{if(d-s>=e.length){if(r)return;s+=l,l=0}const p=e[d-s];o.push(n);const u=this.gridOptionsService.getCallback("processCellFromClipboard");c.forEach((e,o)=>{if(!e.isCellEditable(n)||e.isSuppressPaste(n))return;o>=p.length&&(o%=p.length);const r=this.processCell(n,e,p[o],"dragCopy",u,!0);n.setDataValue(e,r,"paste"),i&&i.addParentNode(n.parent,[e]);const{rowIndex:s,rowPinned:l}=a,c=this.cellPositionUtils.createIdFromValues({rowIndex:s,column:e,rowPinned:l});t[c]=!0}),l++})}pasteStartingFromFocusedCell(e,t,o,i,r){if(!i)return;const s={rowIndex:i.rowIndex,rowPinned:i.rowPinned},l=this.columnModel.getDisplayedColumnsStartingAt(i.column);this.isPasteSingleValueIntoRange(e)?this.pasteSingleValueIntoRange(e,o,t,r):this.pasteMultipleValues(e,s,o,l,t,"clipboard",r)}isPasteSingleValueIntoRange(e){return this.hasOnlyOneValueToPaste(e)&&null!=this.rangeService&&!this.rangeService.isEmpty()}pasteSingleValueIntoRange(e,t,o,i){const r=e[0][0];this.iterateActiveRanges(!1,(e,s,l)=>{t.push(s),l.forEach(e=>this.updateCellValue(s,e,r,o,"clipboard",i))})}hasOnlyOneValueToPaste(e){return 1===e.length&&1===e[0].length}copyRangeDown(){if(!this.rangeService||this.rangeService.isEmpty())return;const e=[];this.doPasteOperation((t,o,i,r)=>{const s=this.gridOptionsService.getCallback("processCellForClipboard"),l=this.gridOptionsService.getCallback("processCellFromClipboard");this.iterateActiveRanges(!0,(i,a,n)=>{e.length?(o.push(a),n.forEach((o,s)=>{if(!o.isCellEditable(a)||o.isSuppressPaste(a))return;const n=this.processCell(a,o,e[s],"dragCopy",l,!0);a.setDataValue(o,n,"paste"),r&&r.addParentNode(a.parent,[o]);const{rowIndex:c,rowPinned:d}=i,p=this.cellPositionUtils.createIdFromValues({rowIndex:c,column:o,rowPinned:d});t[p]=!0})):n.forEach(t=>{const o=this.processCell(a,t,this.valueService.getValue(t,a),"dragCopy",s,!1,!0);e.push(o)})})})}removeLastLineIfBlank(e){const t=s.last(e);if(t&&1===t.length&&""===t[0]){if(1===e.length)return;s.removeFromArray(e,t)}}fireRowChanged(e){"fullRow"===this.gridOptionsService.get("editType")&&e.forEach(e=>{const t={type:l.EVENT_ROW_VALUE_CHANGED,node:e,data:e.data,rowIndex:e.rowIndex,rowPinned:e.rowPinned};this.eventService.dispatchEvent(t)})}pasteMultipleValues(e,t,o,i,r,s,l){let a=t;const n=null!=this.clientSideRowModel&&!this.gridOptionsService.is("enableGroupEdit")&&!this.gridOptionsService.isTreeData(),c=()=>{for(;;){if(!a)return null;const e=this.rowPositionUtils.getRowNode(a);if(a=this.cellNavigationService.getRowBelow({rowPinned:a.rowPinned,rowIndex:a.rowIndex}),null==e)return null;if(!(e.detail||e.footer||n&&e.group))return e}};e.forEach(e=>{const t=c();t&&(e.forEach((e,o)=>this.updateCellValue(t,i[o],e,r,s,l)),o.push(t))})}updateCellValue(e,t,o,i,r,s){if(!e||!t||!t.isCellEditable(e)||t.isSuppressPaste(e))return;if(e.group&&t.isValueActive())return;const l=this.processCell(e,t,o,r,this.gridOptionsService.getCallback("processCellFromClipboard"),!0);e.setDataValue(t,l,"paste");const{rowIndex:a,rowPinned:n}=e;i[this.cellPositionUtils.createIdFromValues({rowIndex:a,column:t,rowPinned:n})]=!0,s&&s.addParentNode(e.parent,[t])}copyToClipboard(e={}){this.copyOrCutToClipboard(e)}cutToClipboard(e={},t="api"){if(this.gridOptionsService.is("suppressCutToClipboard"))return;const o={type:l.EVENT_CUT_START,source:t};this.eventService.dispatchEvent(o),this.copyOrCutToClipboard(e,!0);const i={type:l.EVENT_CUT_END,source:t};this.eventService.dispatchEvent(i)}copyOrCutToClipboard(e,t){let{includeHeaders:o,includeGroupHeaders:i}=e;this.logger.log("copyToClipboard: includeHeaders = "+o),null==o&&(o=this.gridOptionsService.is("copyHeadersToClipboard")),null==i&&(i=this.gridOptionsService.is("copyGroupHeadersToClipboard"));const r={includeHeaders:o,includeGroupHeaders:i},s=!this.gridOptionsService.is("suppressCopyRowsToClipboard");let l=null;!this.rangeService||this.rangeService.isEmpty()||this.shouldSkipSingleCellRange()?s&&!this.selectionService.isEmpty()?(this.copySelectedRowsToClipboard(r),l=h.SelectedRows):this.focusService.isAnyCellFocused()&&(this.copyFocusedCellToClipboard(r),l=h.FocusedCell):(this.copySelectedRangeToClipboard(r),l=h.CellRange),t&&null!==l&&this.clearCellsAfterCopy(l)}clearCellsAfterCopy(e){if(this.eventService.dispatchEvent({type:l.EVENT_KEY_SHORTCUT_CHANGED_CELL_START}),e===h.CellRange)this.rangeService.clearCellRangeCellValues({cellEventSource:"clipboardService"});else if(e===h.SelectedRows)this.clearSelectedRows();else{const e=this.focusService.getFocusedCell();if(null==e)return;const t=this.rowPositionUtils.getRowNode(e);t&&this.clearCellValue(t,e.column)}this.eventService.dispatchEvent({type:l.EVENT_KEY_SHORTCUT_CHANGED_CELL_END})}clearSelectedRows(){const e=this.selectionService.getSelectedNodes(),t=this.columnModel.getAllDisplayedColumns();for(const o of e)for(const e of t)this.clearCellValue(o,e)}clearCellValue(e,t){t.isCellEditable(e)&&e.setDataValue(t,null,"clipboardService")}shouldSkipSingleCellRange(){return this.gridOptionsService.is("suppressCopySingleCellRanges")&&!this.rangeService.isMoreThanOneCell()}iterateActiveRanges(e,t,o){if(!this.rangeService||this.rangeService.isEmpty())return;const i=this.rangeService.getCellRanges();e?this.iterateActiveRange(i[0],t,o,!0):i.forEach((e,r)=>this.iterateActiveRange(e,t,o,r===i.length-1))}iterateActiveRange(e,t,o,i){if(!this.rangeService)return;let r=this.rangeService.getRangeStartRow(e);const s=this.rangeService.getRangeEndRow(e);o&&e.columns&&o(e.columns);let l=0,a=!1;for(;!a&&null!=r;){const o=this.rowPositionUtils.getRowNode(r);a=this.rowPositionUtils.sameRow(r,s),t(r,o,e.columns,l++,a&&i),r=this.cellNavigationService.getRowBelow(r)}}copySelectedRangeToClipboard(e={}){if(!this.rangeService||this.rangeService.isEmpty())return;const t=this.rangeService.areAllRangesAbleToMerge(),{data:o,cellsToFlash:i}=t?this.buildDataFromMergedRanges(e):this.buildDataFromRanges(e);this.copyDataToClipboard(o),this.dispatchFlashCells(i)}buildDataFromMergedRanges(e){const t=new Set,o=this.rangeService.getCellRanges(),i=new Map,r=[],s={};o.forEach(e=>{e.columns.forEach(e=>t.add(e));const{rowPositions:o,cellsToFlash:l}=this.getRangeRowPositionsAndCellsToFlash(e);o.forEach(e=>{const t=`${e.rowIndex}-${e.rowPinned||"null"}`;i.get(t)||(i.set(t,!0),r.push(e))}),Object.assign(s,l)});const l=this.columnModel.getAllDisplayedColumns(),a=Array.from(t);a.sort((e,t)=>l.indexOf(e)-l.indexOf(t));return{data:this.buildExportParams({columns:a,rowPositions:r,includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders}),cellsToFlash:s}}buildDataFromRanges(e){const t=this.rangeService.getCellRanges(),o=[],i={};return t.forEach(t=>{const{rowPositions:r,cellsToFlash:s}=this.getRangeRowPositionsAndCellsToFlash(t);Object.assign(i,s),o.push(this.buildExportParams({columns:t.columns,rowPositions:r,includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders}))}),{data:o.join("\n"),cellsToFlash:i}}getRangeRowPositionsAndCellsToFlash(e){const t=[],o={},i=this.rangeService.getRangeStartRow(e),r=this.rangeService.getRangeEndRow(e);let s=i;for(;s&&(t.push(s),e.columns.forEach(e=>{const{rowIndex:t,rowPinned:i}=s,r=this.cellPositionUtils.createIdFromValues({rowIndex:t,column:e,rowPinned:i});o[r]=!0}),!this.rowPositionUtils.sameRow(s,r));)s=this.cellNavigationService.getRowBelow(s);return{rowPositions:t,cellsToFlash:o}}copyFocusedCellToClipboard(e={}){const t=this.focusService.getFocusedCell();if(null==t)return;const o=this.cellPositionUtils.createId(t),i={rowPinned:t.rowPinned,rowIndex:t.rowIndex},r=t.column,s=this.buildExportParams({columns:[r],rowPositions:[i],includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders});this.copyDataToClipboard(s),this.dispatchFlashCells({[o]:!0})}copySelectedRowsToClipboard(e={}){const{columnKeys:t,includeHeaders:o,includeGroupHeaders:i}=e,r=this.buildExportParams({columns:t,includeHeaders:o,includeGroupHeaders:i});this.copyDataToClipboard(r)}buildExportParams(e){const{columns:t,rowPositions:o,includeHeaders:i=!1,includeGroupHeaders:r=!1}=e,s={columnKeys:t,rowPositions:o,skipColumnHeaders:!i,skipColumnGroupHeaders:!r,suppressQuotes:!0,columnSeparator:this.getClipboardDelimiter(),onlySelected:!o,processCellCallback:this.gridOptionsService.getCallback("processCellForClipboard"),processRowGroupCallback:e=>this.processRowGroupCallback(e),processHeaderCallback:this.gridOptionsService.getCallback("processHeaderForClipboard"),processGroupHeaderCallback:this.gridOptionsService.getCallback("processGroupHeaderForClipboard")};return this.csvCreator.getDataAsCsv(s,!0)}processRowGroupCallback(e){const{node:t}=e,{key:o}=t;let i=null!=o?o:"";if(e.node.footer){let e="";o&&o.length&&(e=" "+o),i="Total"+e}const r=this.gridOptionsService.getCallback("processCellForClipboard");if(r){let e=t.rowGroupColumn;return!e&&t.footer&&-1===t.level&&(e=this.columnModel.getRowGroupColumns()[0]),r({value:i,node:t,column:e,type:"clipboard",formatValue:o=>{var i;return null!==(i=this.valueFormatterService.formatValue(e,t,o))&&void 0!==i?i:o},parseValue:o=>this.valueParserService.parseValue(e,t,o,this.valueService.getValue(e,t))})}return i}dispatchFlashCells(e){window.setTimeout(()=>{const t={type:l.EVENT_FLASH_CELLS,cells:e};this.eventService.dispatchEvent(t)},0)}processCell(e,t,o,i,r,s,l){var a;if(r){return r({column:t,node:e,value:o,type:i,formatValue:o=>{var i;return null!==(i=this.valueFormatterService.formatValue(t,null!=e?e:null,o))&&void 0!==i?i:o},parseValue:o=>this.valueParserService.parseValue(t,null!=e?e:null,o,this.valueService.getValue(t,e))})}return s&&t.getColDef().useValueParserForImport?this.valueParserService.parseValue(t,null!=e?e:null,o,this.valueService.getValue(t,e)):l&&t.getColDef().useValueFormatterForExport&&null!==(a=this.valueFormatterService.formatValue(t,null!=e?e:null,o))&&void 0!==a?a:o}copyDataToClipboard(e){const t=this.gridOptionsService.getCallback("sendToClipboard");if(t)return void t({data:e});!this.gridOptionsService.is("suppressClipboardApi")&&navigator.clipboard?navigator.clipboard.writeText(e).catch(t=>{s.doOnce(()=>{console.warn(t),console.warn("AG Grid: Unable to use the Clipboard API (navigator.clipboard.writeText()). The reason why it could not be used has been logged in the previous line. For this reason the grid has defaulted to using a workaround which doesn't perform as well. Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.")},"clipboardApiError"),this.copyDataToClipboardLegacy(e)}):this.copyDataToClipboardLegacy(e)}copyDataToClipboardLegacy(e){this.executeOnTempElement(t=>{const o=this.gridOptionsService.getDocument(),i=o.activeElement;t.value=e||" ",t.select(),t.focus({preventScroll:!0});o.execCommand("copy")||console.warn("AG Grid: Browser did not allow document.execCommand('copy'). Ensure api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise the browser will prevent it for security reasons."),null!=i&&null!=i.focus&&i.focus({preventScroll:!0})})}executeOnTempElement(e,t){const o=this.gridOptionsService.getDocument(),i=o.createElement("textarea");i.style.width="1px",i.style.height="1px",i.style.top=o.documentElement.scrollTop+"px",i.style.left=o.documentElement.scrollLeft+"px",i.style.position="absolute",i.style.opacity="0";const r=this.gridCtrl.getGui();r.appendChild(i);try{e(i)}catch(e){console.warn("AG Grid: Browser does not support document.execCommand('copy') for clipboard operations")}t?window.setTimeout(()=>{t(i),r.removeChild(i)},100):r.removeChild(i)}getRangeSize(){const e=this.rangeService.getCellRanges();let t=0,o=0;return e.length>0&&(t=this.rangeService.getRangeStartRow(e[0]).rowIndex,o=this.rangeService.getRangeEndRow(e[0]).rowIndex),t-o+1}};u([e("csvCreator")],g.prototype,"csvCreator",void 0),u([e("loggerFactory")],g.prototype,"loggerFactory",void 0),u([e("selectionService")],g.prototype,"selectionService",void 0),u([t("rangeService")],g.prototype,"rangeService",void 0),u([e("rowModel")],g.prototype,"rowModel",void 0),u([e("ctrlsService")],g.prototype,"ctrlsService",void 0),u([e("valueService")],g.prototype,"valueService",void 0),u([e("focusService")],g.prototype,"focusService",void 0),u([e("rowRenderer")],g.prototype,"rowRenderer",void 0),u([e("columnModel")],g.prototype,"columnModel",void 0),u([e("cellNavigationService")],g.prototype,"cellNavigationService",void 0),u([e("cellPositionUtils")],g.prototype,"cellPositionUtils",void 0),u([e("rowPositionUtils")],g.prototype,"rowPositionUtils",void 0),u([e("valueFormatterService")],g.prototype,"valueFormatterService",void 0),u([e("valueParserService")],g.prototype,"valueParserService",void 0),u([o],g.prototype,"init",null),g=p=u([i("clipboardService")],g);const v={version:"30.0.0",moduleName:n.ClipboardModule,beans:[g],dependantModules:[c,d]};export{v as ClipboardModule};