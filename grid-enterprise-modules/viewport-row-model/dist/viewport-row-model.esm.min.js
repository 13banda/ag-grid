/**
          * @ag-grid-enterprise/viewport-row-model - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v30.0.0
          * @link https://www.ag-grid.com/
          * @license Commercial
          */
/**
          * @ag-grid-enterprise/viewport-row-model - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v30.0.0
          * @link https://www.ag-grid.com/
          * @license Commercial
          */
import{Autowired as t,PostConstruct as e,PreDestroy as o,Bean as r,BeanStub as i,Events as s,_ as n,RowNode as w,ModuleNames as a}from"@ag-grid-community/core";import{EnterpriseCoreModule as h}from"@ag-grid-enterprise/core";var d=function(t,e,o,r){var i,s=arguments.length,n=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,o,r);else for(var w=t.length-1;w>=0;w--)(i=t[w])&&(n=(s<3?i(n):s>3?i(e,o,n):i(e,o))||n);return s>3&&n&&Object.defineProperty(e,o,n),n};let u=class extends i{constructor(){super(...arguments),this.firstRow=-1,this.lastRow=-1,this.rowCount=-1,this.rowNodesByIndex={}}ensureRowHeightsValid(t,e,o,r){return!1}init(){this.rowHeight=this.gridOptionsService.getRowHeightAsNumber(),this.addManagedListener(this.eventService,s.EVENT_VIEWPORT_CHANGED,this.onViewportChanged.bind(this))}start(){this.gridOptionsService.get("viewportDatasource")&&this.setViewportDatasource(this.gridOptionsService.get("viewportDatasource"))}isLastRowIndexKnown(){return!0}destroyDatasource(){this.viewportDatasource&&(this.viewportDatasource.destroy&&this.viewportDatasource.destroy(),this.rowRenderer.datasourceChanged(),this.firstRow=-1,this.lastRow=-1)}getViewportRowModelPageSize(){return n.oneOrGreater(this.gridOptionsService.getNum("viewportRowModelPageSize"),5)}getViewportRowModelBufferSize(){return n.zeroOrGreater(this.gridOptionsService.getNum("viewportRowModelBufferSize"),5)}calculateFirstRow(t){const e=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),r=t-e;return r<0?0:Math.floor(r/o)*o}calculateLastRow(t){if(-1===t)return t;const e=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),r=t+e,i=Math.ceil(r/o)*o,s=this.rowCount-1;return Math.min(i,s)}onViewportChanged(t){const e=this.calculateFirstRow(t.firstRow),o=this.calculateLastRow(t.lastRow);this.firstRow===e&&this.lastRow===o||(this.firstRow=e,this.lastRow=o,this.purgeRowsNotInViewport(),this.viewportDatasource&&this.viewportDatasource.setViewportRange(this.firstRow,this.lastRow))}purgeRowsNotInViewport(){Object.keys(this.rowNodesByIndex).forEach(t=>{const e=parseInt(t,10);if(e<this.firstRow||e>this.lastRow){if(this.isRowFocused(e))return;delete this.rowNodesByIndex[e]}})}isRowFocused(t){const e=this.focusService.getFocusCellToUseAfterRefresh();if(!e)return!1;if(null!=e.rowPinned)return!1;return e.rowIndex===t}setViewportDatasource(t){this.destroyDatasource(),this.viewportDatasource=t,this.rowCount=-1,t.init?t.init({setRowCount:this.setRowCount.bind(this),setRowData:this.setRowData.bind(this),getRow:this.getRow.bind(this)}):console.warn("AG Grid: viewport is missing init method.")}getType(){return"viewport"}getRow(t){return this.rowNodesByIndex[t]||(this.rowNodesByIndex[t]=this.createBlankRowNode(t)),this.rowNodesByIndex[t]}getRowNode(t){let e;return this.forEachNode(o=>{o.id===t&&(e=o)}),e}getRowCount(){return-1===this.rowCount?0:this.rowCount}getRowIndexAtPixel(t){return 0!==this.rowHeight?Math.floor(t/this.rowHeight):0}getRowBounds(t){return{rowHeight:this.rowHeight,rowTop:this.rowHeight*t}}getTopLevelRowCount(){return this.getRowCount()}getTopLevelRowDisplayedIndex(t){return t}isEmpty(){return this.rowCount>0}isRowsToRender(){return this.rowCount>0}getNodesInRangeForSelection(t,e){const o=n.missing(t)?0:t.rowIndex,r=e.rowIndex,i=o<this.firstRow||o>this.lastRow,s=r<this.firstRow||r>this.lastRow;if(i||s)return[];const w=[],a=o<=r?r:o;for(let t=o<=r?o:r;t<=a;t++)w.push(this.rowNodesByIndex[t]);return w}forEachNode(t){let e=0;Object.keys(this.rowNodesByIndex).forEach(o=>{const r=parseInt(o,10),i=this.rowNodesByIndex[r];t(i,e),e++})}setRowData(t){n.iterateObject(t,(t,e)=>{const o=parseInt(t,10);if(o>=this.firstRow&&o<=this.lastRow){let t=this.rowNodesByIndex[o];n.missing(t)&&(t=this.createBlankRowNode(o),this.rowNodesByIndex[o]=t),t.setDataAndId(e,o.toString())}})}createBlankRowNode(t){const e=new w(this.beans);return e.setRowHeight(this.rowHeight),e.setRowTop(this.rowHeight*t),e.setRowIndex(t),e}setRowCount(t,e=!1){if(t===this.rowCount)return;this.rowCount=t;const o={type:s.EVENT_MODEL_UPDATED,newData:!1,newPage:!1,keepRenderedRows:e,animate:!1};this.eventService.dispatchEvent(o)}isRowPresent(t){return!!this.getRowNode(t.id)}};d([t("rowRenderer")],u.prototype,"rowRenderer",void 0),d([t("focusService")],u.prototype,"focusService",void 0),d([t("beans")],u.prototype,"beans",void 0),d([e],u.prototype,"init",null),d([o],u.prototype,"destroyDatasource",null),u=d([r("rowModel")],u);const c={version:"30.0.0",moduleName:a.ViewportRowModelModule,rowModel:"viewport",beans:[u],dependantModules:[h]};export{c as ViewportRowModelModule};