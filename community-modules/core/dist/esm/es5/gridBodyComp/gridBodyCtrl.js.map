{"version":3,"sources":["../../../src/ts/gridBodyComp/gridBodyCtrl.ts"],"names":[],"mappings":"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","file":"gridBodyCtrl.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Optional } from \"../context/context\";\nimport { LayoutFeature, LayoutView } from \"../styling/layoutFeature\";\nimport { Constants } from \"../constants/constants\";\nimport { Events } from \"../eventKeys\";\nimport { RowContainerHeightService } from \"../rendering/rowContainerHeightService\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\nimport { IContextMenuFactory } from \"../interfaces/iContextMenuFactory\";\nimport { GridBodyScrollFeature } from \"./gridBodyScrollFeature\";\nimport { getInnerWidth, isElementChildOfClass, isVerticalScrollShowing } from \"../utils/dom\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { RowDragFeature } from \"./rowDragFeature\";\nimport { DragAndDropService } from \"../dragAndDrop/dragAndDropService\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { getTabIndex } from \"../utils/browser\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { PopupService } from \"../widgets/popupService\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\n\nexport enum RowAnimationCssClasses {\n    ANIMATION_ON = 'ag-row-animation',\n    ANIMATION_OFF = 'ag-row-no-animation'\n}\n\nexport const CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';\nexport const CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';\nexport const CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';\n\nexport interface IGridBodyComp extends LayoutView {\n    setColumnMovingCss(cssClass: string | null, on: boolean): void;\n    setCellSelectableCss(cssClass: string | null, on: boolean): void;\n    setTopHeight(height: number): void;\n    setTopDisplay(display: string): void;\n    setBottomHeight(height: number): void;\n    setBottomDisplay(display: string): void;\n    setStickyTopHeight(height: string): void;\n    setStickyTopTop(offsetTop: string): void;\n    setStickyTopWidth(width: string): void;\n    setColumnCount(count: number): void;\n    setRowCount(count: number): void;\n    setRowAnimationCssOnBodyViewport(cssClass: string, animate: boolean): void;\n    setAlwaysVerticalScrollClass(cssClass: string | null, on: boolean): void;\n    setPinnedTopBottomOverflowY(overflow: string): void;\n    registerBodyViewportResizeListener(listener: (() => void)): void;\n}\n\nexport class GridBodyCtrl extends BeanStub {\n\n    @Autowired('rowContainerHeightService') private rowContainerHeightService: RowContainerHeightService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Optional('contextMenuFactory') private contextMenuFactory: IContextMenuFactory;\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('popupService') public popupService: PopupService;\n    @Autowired('mouseEventService') public mouseEventService: MouseEventService;\n    @Autowired('rowModel') public rowModel: IRowModel;\n\n    private comp: IGridBodyComp;\n    private eGridBody: HTMLElement;\n    private eBodyViewport: HTMLElement;\n    private eTop: HTMLElement;\n    private eBottom: HTMLElement;\n    private eStickyTop: HTMLElement;\n    private stickyTopHeight: number = 0;\n\n    private bodyScrollFeature: GridBodyScrollFeature;\n    private rowDragFeature: RowDragFeature;\n\n    public getScrollFeature(): GridBodyScrollFeature {\n        return this.bodyScrollFeature;\n    }\n\n    public getBodyViewportElement(): HTMLElement {\n        return this.eBodyViewport;\n    }\n\n    public setComp(\n        comp: IGridBodyComp,\n        eGridBody: HTMLElement,\n        eBodyViewport: HTMLElement,\n        eTop: HTMLElement,\n        eBottom: HTMLElement,\n        eStickyTop: HTMLElement\n    ): void {\n        this.comp = comp;\n        this.eGridBody = eGridBody;\n        this.eBodyViewport = eBodyViewport;\n        this.eTop = eTop;\n        this.eBottom = eBottom;\n        this.eStickyTop = eStickyTop;\n\n        this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());\n\n        this.createManagedBean(new LayoutFeature(this.comp));\n        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));\n        this.addRowDragListener();\n\n        this.setupRowAnimationCssClass();\n\n        this.addEventListeners();\n        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop]);\n        this.onGridColumnsChanged();\n        this.addBodyViewportListener();\n        this.setFloatingHeights();\n        this.disableBrowserDragging();\n        this.addStopEditingWhenGridLosesFocus();\n\n        this.ctrlsService.registerGridBodyCtrl(this);\n    }\n\n    public getComp(): IGridBodyComp {\n        return this.comp;\n    }\n\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));\n    }\n\n    private addFocusListeners(elements: HTMLElement[]): void {\n        elements.forEach(element => {\n            this.addManagedListener(element, 'focusin', (e: FocusEvent) => {\n                const { target } = e;\n                // element being focused is nested?\n                const isFocusedElementNested = isElementChildOfClass(target as HTMLElement, 'ag-root', element);\n\n                element.classList.toggle('ag-has-focus', !isFocusedElementNested);\n            });\n\n            this.addManagedListener(element, 'focusout', (e: FocusEvent) => {\n                const { target, relatedTarget } = e;\n                const gridContainRelatedTarget = element.contains(relatedTarget as HTMLElement);\n                const isNestedRelatedTarget = isElementChildOfClass(relatedTarget as HTMLElement, 'ag-root', element);\n                const isNestedTarget = isElementChildOfClass(target as HTMLElement, 'ag-root', element);\n\n                // element losing focus belongs to a nested grid,\n                // it should not be handled here.\n                if (isNestedTarget) { return; }\n\n                // the grid does not contain, or the focus element is within\n                // a nested grid\n                if (!gridContainRelatedTarget || isNestedRelatedTarget) {\n                    element.classList.remove('ag-has-focus');\n                }\n            });\n        });\n    }\n\n    // used by ColumnAnimationService\n    public setColumnMovingCss(moving: boolean): void {\n        this.comp.setColumnMovingCss(moving ? CSS_CLASS_COLUMN_MOVING : null, moving);\n    }\n\n    public setCellTextSelection(selectable: boolean = false): void {\n        const cssClass = selectable ? CSS_CLASS_CELL_SELECTABLE : null;\n        this.comp.setCellSelectableCss(cssClass, selectable);\n    }\n\n    private onScrollVisibilityChanged(): void {\n        const visible = this.scrollVisibleService.isVerticalScrollShowing();\n        this.setVerticalScrollPaddingVisible(visible);\n        this.setStickyTopWidth(visible);\n    }\n\n    private onGridColumnsChanged(): void {\n        const columns = this.columnModel.getAllGridColumns();\n        this.comp.setColumnCount(columns ? columns.length : 0);\n    }\n\n    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)\n    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.\n    private disableBrowserDragging(): void {\n        this.addManagedListener(this.eGridBody, 'dragstart', (event: MouseEvent) => {\n            if (event.target instanceof HTMLImageElement) {\n                event.preventDefault();\n                return false;\n            }\n        });\n    }\n\n    private addStopEditingWhenGridLosesFocus(): void {\n        if (!this.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus()) { return; }\n\n        const focusOutListener = (event: FocusEvent): void => {\n            // this is the element the focus is moving to\n            const elementWithFocus = event.relatedTarget as HTMLElement;\n\n            if (getTabIndex(elementWithFocus) === null) {\n                this.rowRenderer.stopEditing();\n                return;\n            }\n\n            let clickInsideGrid =\n                // see if click came from inside the viewports\n                viewports.some(viewport => viewport.contains(elementWithFocus))\n                // and also that it's not from a detail grid\n                && this.mouseEventService.isElementInThisGrid(elementWithFocus);\n\n            if (!clickInsideGrid) {\n                const popupService = this.popupService;\n\n                clickInsideGrid =\n                    popupService.getActivePopups().some(popup => popup.contains(elementWithFocus)) ||\n                    popupService.isElementWithinCustomPopup(elementWithFocus);\n            }\n\n            if (!clickInsideGrid) {\n                this.rowRenderer.stopEditing();\n            }\n        };\n\n        const viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop];\n\n        viewports.forEach(viewport => this.addManagedListener(viewport, 'focusout', focusOutListener));\n    }\n\n    public updateRowCount(): void {\n        const headerCount = this.headerNavigationService.getHeaderRowCount();\n        \n        const rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;\n        const total = rowCount === -1 ? -1 : (headerCount + rowCount);\n\n        this.comp.setRowCount(total);\n    }\n\n    public registerBodyViewportResizeListener(listener: (() => void)): void {\n        this.comp.registerBodyViewportResizeListener(listener);\n    }\n\n    public setVerticalScrollPaddingVisible(visible: boolean): void {\n        const overflowY = visible ? 'scroll' : 'hidden';\n        this.comp.setPinnedTopBottomOverflowY(overflowY);\n    }\n\n    public isVerticalScrollShowing(): boolean {\n        const show = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();\n        const cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;\n        this.comp.setAlwaysVerticalScrollClass(cssClass, show);\n        return show || isVerticalScrollShowing(this.eBodyViewport);\n    }\n\n    private setupRowAnimationCssClass(): void {\n        const listener = () => {\n            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,\n            // when scaling and doing row animation.\n            const animateRows = this.gridOptionsWrapper.isAnimateRows() && !this.rowContainerHeightService.isStretching();\n            const animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;\n            this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);\n        };\n\n        listener();\n\n        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);\n    }\n\n    public getGridBodyElement(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    private addBodyViewportListener(): void {\n        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing\n        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell\n        const listener = (mouseEvent: MouseEvent) => {\n            if (this.gridOptionsWrapper.isPreventDefaultOnContextMenu()) {\n                mouseEvent.preventDefault();\n            }\n            const { target } = mouseEvent;\n            if (target === this.eBodyViewport || target === this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {\n                // show it\n                if (this.contextMenuFactory) {\n                    this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, this.eGridBody);\n                }\n            }\n        };\n\n        this.addManagedListener(this.eBodyViewport, 'contextmenu', listener);\n        this.addManagedListener(this.eBodyViewport, 'wheel', this.onBodyViewportWheel.bind(this));\n        this.addManagedListener(this.eStickyTop, 'wheel', this.onStickyTopWheel.bind(this));\n    }\n\n    private onBodyViewportWheel(e: WheelEvent): void {\n        if (!this.gridOptionsWrapper.isSuppressScrollWhenPopupsAreOpen()) { return; }\n\n        if (this.popupService.hasAnchoredPopup()) {\n            e.preventDefault();\n        }\n    }\n\n    private onStickyTopWheel(e: WheelEvent): void {\n        e.preventDefault();\n\n        if (e.offsetY) {\n            this.scrollVertically(e.deltaY);\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    // called by rowDragFeature\n    public scrollVertically(pixels: number): number {\n        const oldScrollPosition = this.eBodyViewport.scrollTop;\n\n        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);\n        return this.eBodyViewport.scrollTop - oldScrollPosition;\n    }\n\n    private addRowDragListener(): void {\n        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));\n        this.dragAndDropService.addDropTarget(this.rowDragFeature);\n    }\n\n    public getRowDragFeature(): RowDragFeature {\n        return this.rowDragFeature;\n    }\n\n    private onPinnedRowDataChanged(): void {\n        this.setFloatingHeights();\n    }\n\n    private setFloatingHeights(): void {\n        const { pinnedRowModel } = this;\n\n        let floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();\n\n        if (floatingTopHeight) {\n            // adding 1px for cell bottom border\n            floatingTopHeight += 1;\n        }\n\n        let floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();\n\n        if (floatingBottomHeight) {\n            // adding 1px for cell bottom border\n            floatingBottomHeight += 1;\n        }\n\n        this.comp.setTopHeight(floatingTopHeight);\n        this.comp.setBottomHeight(floatingBottomHeight);\n\n        this.comp.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');\n        this.comp.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');\n        this.setStickyTopOffsetTop();\n    }\n\n    public setStickyTopHeight(height: number = 0): void {\n        // console.log('setting sticky top height ' + height);\n        this.comp.setStickyTopHeight(`${height}px`);\n        this.stickyTopHeight = height;\n    }\n\n    public getStickyTopHeight(): number {\n        return this.stickyTopHeight;\n    }\n\n    private setStickyTopWidth(vScrollVisible: boolean) {\n        if (!vScrollVisible) {\n            this.comp.setStickyTopWidth('100%');\n        } else {\n            const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n            this.comp.setStickyTopWidth(`calc(100% - ${scrollbarWidth}px)`);\n        }\n    }\n\n    private onHeaderHeightChanged(): void {\n        this.setStickyTopOffsetTop();\n    }\n\n    private setStickyTopOffsetTop(): void {\n        const headerCtrl = this.ctrlsService.getGridHeaderCtrl();\n        const headerHeight = headerCtrl.getHeaderHeight();\n        const pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();\n\n        let height = 0;\n\n        if (headerHeight > 0) { height += headerHeight + 1; }\n        if (pinnedTopHeight > 0) { height += pinnedTopHeight + 1; }\n\n        this.comp.setStickyTopTop(`${height}px`);\n    }\n\n    // method will call itself if no available width. this covers if the grid\n    // isn't visible, but is just about to be visible.\n    public sizeColumnsToFit(nextTimeout?: number) {\n        const removeScrollWidth = this.isVerticalScrollShowing();\n        const scrollWidthToRemove = removeScrollWidth ? this.gridOptionsWrapper.getScrollbarWidth() : 0;\n        const bodyViewportWidth = getInnerWidth(this.eBodyViewport);\n        const availableWidth = bodyViewportWidth - scrollWidthToRemove;\n\n        if (availableWidth > 0) {\n            this.columnModel.sizeColumnsToFit(availableWidth, \"sizeColumnsToFit\");\n            return;\n        }\n\n        if (nextTimeout === undefined) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(100);\n            }, 0);\n        } else if (nextTimeout === 100) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(500);\n            }, 100);\n        } else if (nextTimeout === 500) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(-1);\n            }, 500);\n        } else {\n            console.warn('AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +\n                'zero width, maybe the grid is not visible yet on the screen?');\n        }\n    }\n\n    // + rangeService\n    public addScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.addEventListener('scroll', listener);\n    }\n\n    // + focusService\n    public removeScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.removeEventListener('scroll', listener);\n    }\n}\n"]}