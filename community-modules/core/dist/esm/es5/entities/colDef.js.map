{"version":3,"sources":["../../../src/ts/entities/colDef.ts"],"names":[],"mappings":";;;;;;AAAA;AACA","file":"colDef.js","sourcesContent":["import { CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent } from \"../events\";\nimport { ICellEditorParams } from \"../interfaces/iCellEditor\";\nimport { AgGridCommon } from \"../interfaces/iCommon\";\nimport { IFilterDef } from '../interfaces/iFilter';\nimport { ICellRendererComp, ICellRendererFunc, ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\nimport { IRowDragItem } from \"../rendering/row/rowDragComp\";\nimport { ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { Column } from \"./column\";\nimport { ColumnGroup } from \"./columnGroup\";\nimport { RowClassParams } from \"./gridOptions\";\nimport { ProvidedColumnGroup } from \"./providedColumnGroup\";\nimport { RowNode } from \"./rowNode\";\n\n// ***********************************************************************\n// * Don't forget to update ColDefUtil if changing this class. PLEASE! *\n// ***********************************************************************/\n\n/** AbstractColDef can be a group or a column definition */\nexport interface AbstractColDef<TData = any> {\n    /** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name. */\n    headerName?: string;\n    /** Function or expression. Gets the value for display in the header. */\n    headerValueGetter?: string | HeaderValueGetterFunc<TData>;\n    /** Tooltip for the column header */\n    headerTooltip?: string;\n    /** CSS class to use for the header cell. Can be a string, array of strings, or function. */\n    headerClass?: HeaderClass;\n    /** Suppress the grid taking action for the relevant keyboard event when a header is focused. */\n    suppressHeaderKeyboardEvent?: (params: SuppressHeaderKeyboardEventParams<TData>) => boolean;\n\n    /** Whether to show the column when the group is open / closed. */\n    columnGroupShow?: string;\n    /** CSS class to use for the tool panel cell. Can be a string, array of strings, or function. */\n    toolPanelClass?: ToolPanelClass<TData>;\n    /** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false` */\n    suppressColumnsToolPanel?: boolean;\n\n    /** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false` */\n    suppressFiltersToolPanel?: boolean;\n\n    /** \n    * Provide your own tooltip component for the column.\n    * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.\n    */\n    tooltipComponent?: any;\n    /** @deprecated As of v27, use `tooltipComponent` for framework components too. */\n    tooltipComponentFramework?: any;\n    /** The params used to configure `tooltipComponent`. */\n    tooltipComponentParams?: any;\n\n    /** Never set this, it is used internally by grid when doing in-grid pivoting */\n    pivotKeys?: string[];\n}\n\n/** Configuration options for column groups in AG Grid.  */\nexport interface ColGroupDef<TData = any> extends AbstractColDef<TData> {\n    /** A list containing a mix of columns and column groups. */\n    children: (ColDef<TData> | ColGroupDef<TData>)[];\n    /** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API. */\n    groupId?: string;\n    /** Set to `true` if this group should be opened by default. Default: `false` */\n    openByDefault?: boolean;\n    /** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed. Default: `false` */\n    marryChildren?: boolean;\n\n    /** \n    * The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\n    * See [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components/) for framework specific implementation details.\n    */\n    headerGroupComponent?: any;\n    /** @deprecated As of v27, use `headerGroupComponent` for framework components too. */\n    headerGroupComponentFramework?: any;\n    /** The params used to configure the `headerGroupComponent`. */\n    headerGroupComponentParams?: any;\n}\n\nexport interface IAggFunc<TData = any, TValue = any> {\n    (params: IAggFuncParams<TData, TValue>): any;\n}\n\nexport interface IAggFuncParams<TData = any, TValue = any> extends AgGridCommon<TData> {\n    /** Values to aggregate */\n    values: TValue[];\n    /** Column the aggregation function is working on */\n    column: Column;\n    /** ColDef of the aggregation column */\n    colDef: ColDef<TData>;\n    /** The parent RowNode, where the aggregation result will be shown */\n    rowNode: RowNode<TData>;\n    /** data (if any) of the parent RowNode */\n    data: TData;\n}\n\nexport interface HeaderClassParams<TData = any> extends AgGridCommon<TData> {\n    colDef: AbstractColDef<TData>;\n    column?: Column | null;\n    columnGroup?: ColumnGroup | null;\n}\nexport type HeaderClass<TData = any> = string | string[] | ((params: HeaderClassParams<TData>) => string | string[] | undefined);\nexport interface ToolPanelClassParams<TData = any> extends AgGridCommon<TData> {\n    colDef: AbstractColDef<TData>;\n    column?: Column | null;\n    columnGroup?: ProvidedColumnGroup | null;\n}\nexport type ToolPanelClass<TData = any> = string | string[] | ((params: ToolPanelClassParams<TData>) => string | string[] | undefined);\n\n// ***********************************************************************\n// * Don't forget to update ColDefUtil if changing this class. PLEASE! *\n// ***********************************************************************/\n\n/** Configuration options for columns in AG Grid. */\nexport interface ColDef<TData = any> extends AbstractColDef<TData>, IFilterDef {\n\n    // *** Columns *** //\n\n    /** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     *  If both field and colId are missing, a unique ID will be generated.\n     *  This ID is used to identify the column in the API for sorting, filtering etc. */\n    colId?: string;\n    /** \n     * The field of the row object to get the cell's data from.\n     * Deep references into a row object is supported via dot notation, i.e `'address.firstLine'`.\n     */\n    field?: string;\n    /**\n     * A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.\n     */\n    type?: string | string[];\n    /** Function or expression. Gets the value from your data for display. */\n    valueGetter?: string | ValueGetterFunc<TData>;\n    /** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */\n    valueFormatter?: string | ValueFormatterFunc<TData>;\n    /** Provided a reference data map to be used to map column values to their respective value from the map. */\n    refData?: { [key: string]: string; };\n    /**\n     * Function to return a string key for a value.\n     * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\n     * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value. */\n    keyCreator?: (params: KeyCreatorParams<TData>) => string;\n    /**\n     * Custom comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed.\n     * By default the grid uses `===` is used which should work for most use cases.\n     */\n    equals?: (valueA: any, valueB: any) => boolean;\n    /** The field of the tooltip to apply to the cell. */\n    tooltipField?: string;\n    /**\n     * Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\n     * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component.\n     */\n    tooltipValueGetter?: (params: ITooltipParams<TData>) => string | any;\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to render a selection checkbox in the column. Default: `false` */\n    checkboxSelection?: boolean | CheckboxSelectionCallback<TData>;\n    /** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults. */\n    icons?: { [key: string]: Function | string; };\n    /**\n     * Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\n     * Can also be a callback function to have different rows navigable.\n     * Default: `false`\n     */\n    suppressNavigable?: boolean | SuppressNavigableCallback<TData>;\n    /** Allows the user to suppress certain keyboard events in the grid cell. Default: `false` */\n    suppressKeyboardEvent?: (params: SuppressKeyboardEventParams<TData>) => boolean;\n    /**\n     * Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\n     * Set to `true` turn paste operations off.\n     */\n    suppressPaste?: boolean | SuppressPasteCallback<TData>;\n    /** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column */\n    suppressFillHandle?: boolean;\n\n    // *** Columns: Display *** //\n\n    /** Set to `true` for this column to be hidden. Default: `false` */\n    hide?: boolean;\n    /** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialHide?: boolean;\n    /** Set to `true` to block making column visible / hidden via the UI (API will still work). Default: `false` */\n    lockVisible?: boolean;\n    /** Lock a column to position to `'left'` or`'right'` to always have this column displayed in that position. true is treated as `'left'` */\n    lockPosition?: boolean | 'left' | 'right';\n    /** Set to `true` if you do not want this column to be movable via dragging. Default: `false` */\n    suppressMovable?: boolean;\n\n    // *** Columns: Editing *** //\n\n    /** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable. Default: `false` */\n    editable?: boolean | EditableCallback<TData>;\n    /** Function or expression. Sets the value into your data for saving. Return `true` if the data changed. */\n    valueSetter?: string | ValueSetterFunc<TData>;\n    /** Function or expression. Parses the value for saving. */\n    valueParser?: string | ValueParserFunc<TData>;\n    /**\n    * Provide your own cell editor component for this column's cells.\n    * See [Cell Editor](https://www.ag-grid.com/javascript-data-grid/component-cell-editor/) for framework specific implementation detail.\n    */\n    cellEditor?: any;\n    /** @deprecated As of v27, use `cellEditor` for framework components too. */\n    cellEditorFramework?: any;\n    /** Params to be passed to the `cellEditor` component. */\n    cellEditorParams?: any;\n    /** Callback to select which cell editor to be used for a given row within the same column. */\n    cellEditorSelector?: CellEditorSelectorFunc<TData>;\n\n    /** Set to `true` to have cells under this column enter edit mode after single click. Default: `false` */\n    singleClickEdit?: boolean;\n    /** @deprecated use `valueSetter` instead */\n    newValueHandler?: (params: NewValueParams<TData>) => boolean;\n\n    /**\n     * Set to `true`, to have the cell editor appear in a popup.\n     */\n    cellEditorPopup?: boolean;\n    /**\n     * Set the position for the popup cell editor. Possible values are\n     *  - `over` Popup will be positioned over the cell\n     *  - `under` Popup will be positioned below the cell leaving the cell value visible.\n     *\n     * Default: `over`. */\n    cellEditorPopupPosition?: string;\n\n    // *** Columns: Events *** //\n\n    /** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`. */\n    onCellValueChanged?: (event: NewValueParams<TData>) => void;\n    /** Callback called when a cell is clicked. */\n    onCellClicked?: (event: CellClickedEvent<TData>) => void;\n    /** Callback called when a cell is double clicked. */\n    onCellDoubleClicked?: (event: CellDoubleClickedEvent<TData>) => void;\n    /** Callback called when a cell is right clicked. */\n    onCellContextMenu?: (event: CellContextMenuEvent<TData>) => void;\n\n    // *** Columns: Filtering *** //\n\n    /** A function to tell the grid what quick filter text to use for this column if you don't want to use the default (which is calling `toString` on the value). */\n    getQuickFilterText?: (params: GetQuickFilterTextParams<TData>) => string;\n    /** Function or expression. Gets the value for filtering purposes. */\n    filterValueGetter?: string | ValueGetterFunc<TData>;\n    /** Whether to display a floating filter for this column. Default: `false` */\n    floatingFilter?: boolean;\n\n    // *** Column Headers *** //\n\n    /** If enabled then column header names that are too long for the column width will wrap onto the next line. Default `false` */\n    wrapHeaderText?: boolean;\n    /** If enabled then the column header row will automatically adjust height to acommodate the size of the header cell.\n    * This can be useful when using your own `headerComponent` or long header names in conjunction with `wrapHeaderText`.\n    * Default: `false`\n    */\n    autoHeaderHeight?: boolean;\n\n    /**\n    * The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\n    * See [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail.\n    */\n    headerComponent?: any;\n    /** @deprecated As of v27, use `headerComponent` for framework components too. */\n    headerComponentFramework?: any;\n    /** The parameters to be passed to the `headerComponent`. */\n    headerComponentParams?: any;\n\n    /**\n     * Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\n     * This is used to figure out which menu tabs are present and in which order the tabs are shown.\n     */\n    menuTabs?: string[];\n    /** Params used to change the behaviour and appearance of the Columns Menu tab. */\n    columnsMenuParams?: ColumnsMenuParams;\n    /** Set to `true` if no menu should be shown for this column header. Default: `false` */\n    suppressMenu?: boolean;\n    /** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header. */\n    headerCheckboxSelection?: boolean | HeaderCheckboxSelectionCallback<TData>;\n    /** If `true`, the header checkbox selection will only select filtered items. */\n    headerCheckboxSelectionFilteredOnly?: boolean;\n\n    // *** Columns: Integrated Charts *** //\n\n    /** Defines the chart data type that should be used for a column. */\n    chartDataType?: 'category' | 'series' | 'time' | 'excluded';\n\n    // *** Columns: Pinned *** //\n\n    /** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`. */\n    pinned?: boolean | 'left' | 'right' | null;\n    /** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialPinned?: boolean | 'left' | 'right';\n    /** Set to true to block the user pinning the column, the column can only be pinned via definitions or API. Default: `false`  */\n    lockPinned?: boolean;\n\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. */\n    pinnedRowCellRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. */\n    pinnedRowCellRendererFramework?: any;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. */\n    pinnedRowCellRendererParams?: any;\n    /** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned. */\n    pinnedRowValueFormatter?: string | ValueFormatterFunc<TData>;\n\n    // *** Columns: Pivoting *** //\n\n    /** Set to true to pivot by this column. */\n    pivot?: boolean;\n    /** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialPivot?: boolean;\n    /**\n     * Set this in columns you want to pivot by.\n     * If only pivoting by one column, set this to any number (e.g. `0`).\n     * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on).\n     */\n    pivotIndex?: number | null;\n    /** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialPivotIndex?: number;\n    /**\n     * Comparator to use when ordering the pivot columns, when this column is used to pivot on.\n     * The values will always be strings, as the pivot service uses strings as keys for the pivot groups.\n     */\n    pivotComparator?: (valueA: string, valueB: string) => number;\n    /** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot. Default: `false` */\n    enablePivot?: boolean;\n\n    // *** Columns: Rendering and Styling *** //\n\n    /** An object of css values / or function returning an object of css values for a particular cell. */\n    cellStyle?: CellStyle | CellStyleFunc<TData>;\n    /** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings. */\n    cellClass?: string | string[] | CellClassFunc<TData>;\n    /** Rules which can be applied to include certain CSS classes. */\n    cellClassRules?: CellClassRules<TData>;\n\n    /** \n    * Provide your own cell Renderer component for this column's cells.\n    * See [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details.\n    */\n    cellRenderer?: any;\n    /** @deprecated As of v27, use `cellRenderer` for framework components too. */\n    cellRendererFramework?: any;\n    /** Params to be passed to the `cellRenderer` component. */\n    cellRendererParams?: any;\n    /** Callback to select which cell renderer to be used for a given row within the same column. */\n    cellRendererSelector?: CellRendererSelectorFunc<TData>;\n\n    /** Set to `true` to have the grid calculate the height of a row based on contents of this column. Default: `false` */\n    autoHeight?: boolean;\n    /** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`. Default: `false` */\n    wrapText?: boolean;\n    /** Set to `true` to flash a cell when it's refreshed. Default: `false` */\n    enableCellChangeFlash?: boolean;\n    /** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid. Default: `false` */\n    suppressCellFlash?: boolean;\n\n    // *** Columns: Row Dragging *** //\n\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging. Default: `false` */\n    rowDrag?: boolean | RowDragCallback<TData>;\n    /**\n     * A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the current cell value will be used.\n     */\n    rowDragText?: (params: IRowDragItem, dragItemCount: number) => string;\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop. Default: `false` */\n    dndSource?: boolean | DndSourceCallback<TData>;\n    /** Function to allow custom drag functionality for native drag and drop. */\n    dndSourceOnRowDrag?: (params: DndSourceOnRowDragParams<TData>) => void;\n\n    // *** Columns: Row Grouping *** //\n\n    /** Set to `true` to row group by this column. Default: `false` */\n    rowGroup?: boolean;\n    /** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialRowGroup?: boolean;\n    /**\n     * Set this in columns you want to group by.\n     * If only grouping by one column, set this to any number (e.g. `0`).\n     * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on).\n     */\n    rowGroupIndex?: number | null;\n    /** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialRowGroupIndex?: number;\n    /**\n     * Set to `true` if you want to be able to row group by this column via the GUI.\n     * This will not block the API or properties being used to achieve row grouping.\n     * Default: `false`\n     */\n    enableRowGroup?: boolean;\n    /**\n     * Set to `true` if you want to be able to aggregate by this column via the GUI.\n     * This will not block the API or properties being used to achieve aggregation.\n     * Default: `false`\n     */\n    enableValue?: boolean;\n    /** Name of function to use for aggregation. You can also provide your own agg function. */\n    aggFunc?: string | IAggFunc<TData> | null;\n    /** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialAggFunc?: string | IAggFunc<TData>;\n    /**\n     * The name of the aggregation function to use for this column when it is enabled via the GUI.\n     * Note that this does not immediately apply the aggregation function like `aggFunc`\n     * Default: `sum`\n     */\n    defaultAggFunc?: string;\n    /**\n     * Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\n     * If missing, all installed functions are allowed.\n     * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API. */\n    allowedAggFuncs?: string[];\n\n    /** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */\n    showRowGroup?: string | boolean;\n\n    // *** Columns: Sort *** //\n\n    /** Set to `true` to allow sorting on this column. Default: `false` */\n    sortable?: boolean;\n    /** If sorting by default, set it here. Set to `asc` or `desc`. */\n    sort?: 'asc' | 'desc' | null;\n    /** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialSort?: 'asc' | 'desc' | null;\n    /** If sorting more than one column by default, specifies order in which the sorting should be applied. */\n    sortIndex?: number | null;\n    /** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialSortIndex?: number;\n    /**  Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]` */\n    sortingOrder?: ('asc' | 'desc' | null)[];\n    /** Comparator function for custom sorting. */\n    comparator?: (valueA: any, valueB: any, nodeA: RowNode<TData>, nodeB: RowNode<TData>, isDescending: boolean) => number;\n    /** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column. Default: `false` */\n    unSortIcon?: boolean;\n\n    /** @deprecated since v24 - use sortIndex instead*/\n    sortedAt?: number;\n\n    // *** Columns: Spanning *** //\n\n    /** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns. */\n    colSpan?: (params: ColSpanParams<TData>) => number;\n    /** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows. */\n    rowSpan?: (params: RowSpanParams<TData>) => number;\n\n    // *** Columns: Widths *** //\n\n    /** Initial width in pixels for the cell. */\n    width?: number;\n    /** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialWidth?: number;\n    /** Minimum width in pixels for the cell. */\n    minWidth?: number;\n    /** Maximum width in pixels for the cell. */\n    maxWidth?: number;\n    /** Used instead of `width` when the goal is to fill the remaining empty space of the grid. */\n    flex?: number;\n    /** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions. */\n    initialFlex?: number;\n    /** Set to `true` to allow this column should be resized. Default: `false` */\n    resizable?: boolean;\n    /** Set to `true` if you want this column's width to be fixed during 'size to fit' operations. Default: `false` */\n    suppressSizeToFit?: boolean;\n    /** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge. Default: `false` */\n    suppressAutoSize?: boolean;\n\n    /** Never set this, it is used internally by grid when doing in-grid pivoting */\n    pivotValueColumn?: Column | null;\n    /** Never set this, it is used internally by grid when doing in-grid pivoting */\n    pivotTotalColumnIds?: string[];\n}\nexport interface ColumnFunctionCallbackParams<TData = any> extends AgGridCommon<TData> {\n    /** Row node for the given row */\n    node: RowNode<TData>;\n    /** Data associated with the node. Will be `undefined` for group rows. */\n    data: TData | undefined;\n    /** Column for this callback */\n    column: Column;\n    /** ColDef provided for this column */\n    colDef: ColDef<TData>;\n}\n\nexport interface CheckboxSelectionCallbackParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\nexport interface CheckboxSelectionCallback<TData = any> {\n    (params: CheckboxSelectionCallbackParams<TData>): boolean;\n}\nexport interface RowDragCallbackParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\nexport interface RowDragCallback<TData = any> {\n    (params: RowDragCallbackParams<TData>): boolean;\n}\nexport interface DndSourceCallbackParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\n\nexport interface DndSourceOnRowDragParams<TData = any> extends AgGridCommon<TData> {\n    /** Row node for the given row */\n    rowNode: RowNode<TData>;\n    /** The DOM event that represents a drag and drop interaction */\n    dragEvent: DragEvent;\n}\nexport interface DndSourceCallback<TData = any> {\n    (params: DndSourceCallbackParams<TData>): boolean;\n}\nexport interface EditableCallbackParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\nexport interface EditableCallback<TData = any> {\n    (params: EditableCallbackParams<TData>): boolean;\n}\nexport interface SuppressPasteCallbackParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\nexport interface SuppressPasteCallback<TData = any> {\n    (params: SuppressPasteCallbackParams<TData>): boolean;\n}\nexport interface SuppressNavigableCallbackParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\nexport interface SuppressNavigableCallback<TData = any> {\n    (params: SuppressNavigableCallbackParams<TData>): boolean;\n}\nexport interface HeaderCheckboxSelectionCallbackParams<TData = any> extends AgGridCommon<TData> {\n    column: Column;\n    colDef: ColDef<TData>;\n}\nexport interface HeaderCheckboxSelectionCallback<TData = any> {\n    (params: HeaderCheckboxSelectionCallbackParams<TData>): boolean;\n}\n\n/**\n * @deprecated\n * No longer in use. Replaced with (params: ColumnFunctionCallbackParams) => boolean.\n */\nexport interface IsColumnFunc<TData = any> {\n    (params: IsColumnFuncParams<TData>): boolean;\n}\n\n/**\n * @deprecated\n * Replaced with ColumnFunctionCallbackParams\n */\nexport interface IsColumnFuncParams<TData = any> extends ColumnFunctionCallbackParams<TData> { }\n\nexport interface GetQuickFilterTextParams<TData = any, TValue = any> extends AgGridCommon<TData> {\n    /** Value for the cell. */\n    value: TValue;\n    /** Row node for the given row */\n    node: RowNode<TData>;\n    /** Row data associated with the node. */\n    data: TData;\n    /** Column for this callback */\n    column: Column;\n    /** ColDef provided for this column */\n    colDef: ColDef<TData>;\n}\n\nexport interface ColumnsMenuParams {\n    /** To suppress updating the layout of columns as they are rearranged in the grid */\n    suppressSyncLayoutWithGrid?: boolean;\n    /** To suppress Column Filter section*/\n    suppressColumnFilter?: boolean;\n    /** To suppress Select / Un-select all widget*/\n    suppressColumnSelectAll?: boolean;\n    /** To suppress Expand / Collapse all widget*/\n    suppressColumnExpandAll?: boolean;\n    /** By default, column groups start expanded.\n     * Pass true to default to contracted groups*/\n    contractColumnSelection?: boolean;\n}\n\nexport interface BaseColDefParams<TData = any> extends AgGridCommon<TData> {\n    /** Row node for the given row */\n    node: RowNode<TData> | null;\n    /** Data associated with the node */\n    data: TData;\n    /** Column for this callback */\n    column: Column;\n    /** ColDef provided for this column */\n    colDef: ColDef<TData>;\n}\n\nexport interface BaseColDefOptionalDataParams<TData = any> extends AgGridCommon<TData> {\n    /** Row node for the given row */\n    node: RowNode<TData> | null;\n    /** Data associated with the node */\n    data: TData | undefined;\n    /** Column for this callback */\n    column: Column;\n    /** ColDef provided for this column */\n    colDef: ColDef<TData>;\n}\n\nexport interface ValueGetterParams<TData = any> extends BaseColDefOptionalDataParams<TData> {\n    /** A utility method for getting other column values */\n    getValue: (field: string) => any;\n}\nexport interface ValueGetterFunc<TData = any> {\n    (params: ValueGetterParams<TData>): any;\n}\nexport interface HeaderValueGetterParams<TData = any> extends AgGridCommon<TData> {\n    colDef: AbstractColDef<TData>;\n    /** Column for this callback if applicable*/\n    column?: Column | null;\n    /** ColumnGroup for this callback if applicable */\n    columnGroup?: ColumnGroup | ProvidedColumnGroup | null;\n    /** Original column group if applicable */\n    providedColumnGroup: ProvidedColumnGroup | null;\n    /** Where the column is going to appear */\n    location: string | null;\n}\nexport interface HeaderValueGetterFunc<TData = any> {\n    (params: HeaderValueGetterParams<TData>): any;\n}\n\nexport interface NewValueParams<TData = any> extends BaseColDefParams<TData> {\n    /** The value before the change */\n    oldValue: any;\n    /** The value after the change */\n    newValue: any;\n}\n\nexport interface ValueSetterParams<TData = any> extends NewValueParams<TData> {\n}\nexport interface ValueSetterFunc<TData = any> {\n    (params: ValueSetterParams<TData>): boolean;\n}\nexport interface ValueParserParams<TData = any> extends NewValueParams<TData> {\n}\nexport interface ValueParserFunc<TData = any, TValue = any> {\n    (params: ValueParserParams<TData>): TValue;\n}\n\nexport interface ValueFormatterParams<TData = any, TValue = any> extends BaseColDefOptionalDataParams<TData> {\n    /** Value for the cell. */\n    value: TValue;\n}\n\nexport interface ValueFormatterFunc<TData = any> {\n    (params: ValueFormatterParams<TData>): string;\n}\n\nexport interface KeyCreatorParams<TData = any, TValue = any> extends BaseColDefParams<TData> {\n    /** Value for the cell. */\n    value: TValue;\n}\n\nexport interface ColSpanParams<TData = any> extends BaseColDefOptionalDataParams<TData> {\n}\n\nexport interface RowSpanParams<TData = any> extends BaseColDefOptionalDataParams<TData> {\n}\n\nexport interface SuppressKeyboardEventParams<TData = any> extends ColumnFunctionCallbackParams<TData> {\n    /** The keyboard event the grid received */\n    event: KeyboardEvent;\n    /** Whether the cell is editing or not */\n    editing: boolean;\n}\n\nexport interface SuppressHeaderKeyboardEventParams<TData = any> extends AgGridCommon<TData> {\n    column: Column | ColumnGroup;\n    colDef: ColDef<TData> | ColGroupDef<TData> | null;\n    /** The index of the header row of the current focused header */\n    headerRowIndex: number;\n    /** The keyboard event the grid received */\n    event: KeyboardEvent;\n}\n\nexport interface CellClassParams<TData = any, TValue = any> extends RowClassParams<TData> {\n    /** The colDef associated with the column for this cell */\n    colDef: ColDef<TData>;\n    /** The value to be rendered */\n    value: TValue;\n}\nexport interface CellClassFunc<TData = any> {\n    (cellClassParams: CellClassParams<TData>): string | string[] | null | undefined;\n}\nexport interface CellStyleFunc<TData = any> {\n    (cellClassParams: CellClassParams<TData>): CellStyle | null | undefined;\n}\n\nexport interface CellStyle { [cssProperty: string]: string | number; }\nexport interface CellClassRules<TData = any> {\n    [cssClassName: string]: (((params: CellClassParams<TData>) => boolean) | string);\n}\n\nexport interface CellRendererSelectorFunc<TData = any> {\n    (params: ICellRendererParams<TData>): CellRendererSelectorResult | undefined;\n}\n\nexport interface CellEditorSelectorFunc<TData = any> {\n    (params: ICellEditorParams<TData>): CellEditorSelectorResult | undefined;\n}\nexport interface CellRendererSelectorResult {\n    /** Equivalent of setting `colDef.cellRenderer` */\n    component?: any;\n    /** @deprecated As of v27, use `component` for framework components too. */\n    frameworkComponent?: any;\n    /** Equivalent of setting `colDef.cellRendererParams` */\n    params?: any;\n}\n\nexport interface CellEditorSelectorResult {\n    /** Equivalent of setting `colDef.cellEditor` */\n    component?: any;\n    /** @deprecated As of v27, use `component` for framework components too. */\n    frameworkComponent?: any;\n    /** Equivalent of setting `colDef.cellEditorParams` */\n    params?: any;\n    /** Equivalent of setting `colDef.cellEditorPopup` */\n    popup?: boolean;\n    /** Equivalent of setting `colDef.cellEditorPopupPosition` */\n    popupPosition?: string;\n}"]}